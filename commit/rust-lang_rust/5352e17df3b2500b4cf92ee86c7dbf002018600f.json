{"sha": "5352e17df3b2500b4cf92ee86c7dbf002018600f", "node_id": "C_kwDOAAsO6NoAKDUzNTJlMTdkZjNiMjUwMGI0Y2Y5MmVlODZjN2RiZjAwMjAxODYwMGY", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-04T20:58:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-04T20:58:15Z"}, "message": "Rollup merge of #89483 - hkmatsumoto:patch-diagnostics-2, r=estebank\n\nPractice diagnostic message convention\n\nDetected by #89455.\n\nr? ```@estebank```", "tree": {"sha": "46d21548e0b612e91fc2aa6e391606afa115aa6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46d21548e0b612e91fc2aa6e391606afa115aa6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5352e17df3b2500b4cf92ee86c7dbf002018600f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW2roCRBK7hj4Ov3rIwAAcs0IABFexWuuWj0PzN1xG6Rj/Zj0\ncYRePhL2Ul8WeGu9dIQxxLHOOHLJvfhBcA9iCAh6CnE38D1VYyxKLit64YFitADu\nou+LNC3Nz9EelUTGIr1iYAaFN6GzxpE0spOTG35Ww78Jo9HrbgqLNqh6mjPJ9MQh\n1CzU+HCIzbyBz+YNuNlAhb6fDvS/NWszSzOwQ9Vt/jG2am2K5C0eQIa8nZNSwA9U\nhpFYjwbjLZOa0CnfxE2GNLQBsYM+CKKmycRqPv4o9uEHSWOa4JX5EvVCUcWKK8ag\naJBy9D4mVjTTX4kntBhfTW/hfBy0S355FGJA+/fsZmDdjjPyKdIlKjH3VDxM34E=\n=ZJAc\n-----END PGP SIGNATURE-----\n", "payload": "tree 46d21548e0b612e91fc2aa6e391606afa115aa6c\nparent 2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1\nparent 3818981ca12ca79dc446fad849d48ebe1257cbc7\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633381095 -0700\ncommitter GitHub <noreply@github.com> 1633381095 -0700\n\nRollup merge of #89483 - hkmatsumoto:patch-diagnostics-2, r=estebank\n\nPractice diagnostic message convention\n\nDetected by #89455.\n\nr? ```@estebank```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5352e17df3b2500b4cf92ee86c7dbf002018600f", "html_url": "https://github.com/rust-lang/rust/commit/5352e17df3b2500b4cf92ee86c7dbf002018600f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5352e17df3b2500b4cf92ee86c7dbf002018600f/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "html_url": "https://github.com/rust-lang/rust/commit/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1"}, {"sha": "3818981ca12ca79dc446fad849d48ebe1257cbc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3818981ca12ca79dc446fad849d48ebe1257cbc7", "html_url": "https://github.com/rust-lang/rust/commit/3818981ca12ca79dc446fad849d48ebe1257cbc7"}], "stats": {"total": 335, "additions": 167, "deletions": 168}, "files": [{"sha": "dea2a0e2a4399a3c1623d1468e74a6bfb867b7d6", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -590,7 +590,7 @@ impl<'a> AstValidator<'a> {\n                 )\n                 .span_label(self.current_extern_span(), \"in this `extern` block\")\n                 .note(&format!(\n-                    \"This limitation may be lifted in the future; see issue #{} <https://github.com/rust-lang/rust/issues/{}> for more information\",\n+                    \"this limitation may be lifted in the future; see issue #{} <https://github.com/rust-lang/rust/issues/{}> for more information\",\n                     n, n,\n                 ))\n                 .emit();"}, {"sha": "53a456b69acfd69faf20a19d5f432cbc4b35b735", "filename": "compiler/rustc_builtin_macros/src/concat_idents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -12,7 +12,7 @@ pub fn expand_concat_idents<'cx>(\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n     if tts.is_empty() {\n-        cx.span_err(sp, \"concat_idents! takes 1 or more arguments.\");\n+        cx.span_err(sp, \"concat_idents! takes 1 or more arguments\");\n         return DummyResult::any(sp);\n     }\n \n@@ -22,7 +22,7 @@ pub fn expand_concat_idents<'cx>(\n             match e {\n                 TokenTree::Token(Token { kind: token::Comma, .. }) => {}\n                 _ => {\n-                    cx.span_err(sp, \"concat_idents! expecting comma.\");\n+                    cx.span_err(sp, \"concat_idents! expecting comma\");\n                     return DummyResult::any(sp);\n                 }\n             }\n@@ -34,7 +34,7 @@ pub fn expand_concat_idents<'cx>(\n                 }\n             }\n \n-            cx.span_err(sp, \"concat_idents! requires ident args.\");\n+            cx.span_err(sp, \"concat_idents! requires ident args\");\n             return DummyResult::any(sp);\n         }\n     }"}, {"sha": "bbca07085ea3615043d6b0db868459dc68c39de9", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -382,7 +382,7 @@ fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n                         .note(\n                             \"errors in this attribute were erroneously \\\n                                 allowed and will become a hard error in a \\\n-                                future release.\",\n+                                future release\",\n                         )\n                         .emit();\n                         ShouldPanic::Yes(None)"}, {"sha": "a39fca0d8be9b9b45ef018bf5052f335a256192b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -407,7 +407,7 @@ impl NonConstOp for RawPtrComparison {\n         let mut err = ccx\n             .tcx\n             .sess\n-            .struct_span_err(span, \"pointers cannot be reliably compared during const eval.\");\n+            .struct_span_err(span, \"pointers cannot be reliably compared during const eval\");\n         err.note(\n             \"see issue #53020 <https://github.com/rust-lang/rust/issues/53020> \\\n             for more information\",\n@@ -443,7 +443,7 @@ impl NonConstOp for RawPtrToIntCast {\n         let mut err = ccx\n             .tcx\n             .sess\n-            .struct_span_err(span, \"pointers cannot be cast to integers during const eval.\");\n+            .struct_span_err(span, \"pointers cannot be cast to integers during const eval\");\n         err.note(\"at compile-time, pointers do not have an integer value\");\n         err.note(\n             \"avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\","}, {"sha": "d147148ac71363f6b2feb1d23c0420e8cda4740b", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                 let mut diag = lint.build(&format!(\n                     \"this method call resolves to `<&{} as IntoIterator>::into_iter` \\\n                     (due to backwards compatibility), \\\n-                    but will resolve to <{} as IntoIterator>::into_iter in Rust 2021.\",\n+                    but will resolve to <{} as IntoIterator>::into_iter in Rust 2021\",\n                     target, target,\n                 ));\n                 diag.span_suggestion("}, {"sha": "5656fff2fcb727a4fa1375d196fe277edeebc5db", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -918,7 +918,7 @@ impl EarlyLintPass for AnonymousParameters {\n \n                             lint.build(\n                                 \"anonymous parameters are deprecated and will be \\\n-                                     removed in the next edition.\",\n+                                     removed in the next edition\",\n                             )\n                             .span_suggestion(\n                                 arg.pat.span,\n@@ -1629,9 +1629,9 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n             let predicates = cx.tcx.predicates_of(item.def_id);\n             for &(predicate, span) in predicates.predicates {\n                 let predicate_kind_name = match predicate.kind().skip_binder() {\n-                    Trait(..) => \"Trait\",\n+                    Trait(..) => \"trait\",\n                     TypeOutlives(..) |\n-                    RegionOutlives(..) => \"Lifetime\",\n+                    RegionOutlives(..) => \"lifetime\",\n \n                     // Ignore projections, as they can only be global\n                     // if the trait bound is global"}, {"sha": "9b4ee148df48a6c98d8e5e52660b584be18bc81c", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -331,18 +331,17 @@ impl EarlyLintPass for NonAsciiIdents {\n                 for ((sp, ch_list), script_set) in lint_reports {\n                     cx.struct_span_lint(MIXED_SCRIPT_CONFUSABLES, sp, |lint| {\n                         let message = format!(\n-                            \"The usage of Script Group `{}` in this crate consists solely of mixed script confusables\",\n+                            \"the usage of Script Group `{}` in this crate consists solely of mixed script confusables\",\n                             script_set);\n-                        let mut note = \"The usage includes \".to_string();\n+                        let mut note = \"the usage includes \".to_string();\n                         for (idx, ch) in ch_list.into_iter().enumerate() {\n                             if idx != 0 {\n                                 note += \", \";\n                             }\n                             let char_info = format!(\"'{}' (U+{:04X})\", ch, ch as u32);\n                             note += &char_info;\n                         }\n-                        note += \".\";\n-                        lint.build(&message).note(&note).note(\"Please recheck to make sure their usages are indeed what you want.\").emit()\n+                        lint.build(&message).note(&note).note(\"please recheck to make sure their usages are indeed what you want\").emit()\n                     });\n                 }\n             }"}, {"sha": "3a05020c0b55b31e0ed8773fad5b3ef8ba9d0b5a", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -878,7 +878,7 @@ impl<'a> CrateLoader<'a> {\n                 \"no global memory allocator found but one is \\\n                            required; link to std or \\\n                            add `#[global_allocator]` to a static item \\\n-                           that implements the GlobalAlloc trait.\",\n+                           that implements the GlobalAlloc trait\",\n             );\n         }\n         self.cstore.allocator_kind = Some(AllocatorKind::Default);"}, {"sha": "93226b6a2f2d790aa4e99dd157dbbb8f53510c44", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -319,13 +319,13 @@ impl Collector<'tcx> {\n                     self.tcx.sess.err(&format!(\n                         \"renaming of the library `{}` was specified, \\\n                                                 however this crate contains no `#[link(...)]` \\\n-                                                attributes referencing this library.\",\n+                                                attributes referencing this library\",\n                         lib.name\n                     ));\n                 } else if !renames.insert(&lib.name) {\n                     self.tcx.sess.err(&format!(\n                         \"multiple renamings were \\\n-                                                specified for library `{}` .\",\n+                                                specified for library `{}`\",\n                         lib.name\n                     ));\n                 }"}, {"sha": "c6c32e69aab77a7c91267565b47451131d1eea46", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -66,8 +66,8 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n                 tcx.sess.err(\"`#[panic_handler]` function required, but not found\");\n             } else if item == LangItem::Oom {\n                 if !tcx.features().default_alloc_error_handler {\n-                    tcx.sess.err(\"`#[alloc_error_handler]` function required, but not found.\");\n-                    tcx.sess.note_without_error(\"Use `#![feature(default_alloc_error_handler)]` for a default error handler.\");\n+                    tcx.sess.err(\"`#[alloc_error_handler]` function required, but not found\");\n+                    tcx.sess.note_without_error(\"Use `#![feature(default_alloc_error_handler)]` for a default error handler\");\n                 }\n             } else {\n                 tcx.sess.err(&format!(\"language item required, but not found: `{}`\", name));"}, {"sha": "9be568b2cf1451544cc31144db077ede7b2b0670", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1339,7 +1339,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         };\n \n         if module.is_trait() {\n-            self.r.session.span_err(import.span, \"items in traits are not importable.\");\n+            self.r.session.span_err(import.span, \"items in traits are not importable\");\n             return;\n         } else if ptr::eq(module, import.parent_scope.module) {\n             return;"}, {"sha": "bf04154a3dafef5cbd9758a6e22952a36b5d5451", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1384,7 +1384,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     // Cannot enable crt-static with sanitizers on Linux\n     if sess.crt_static(None) && !sess.opts.debugging_opts.sanitizer.is_empty() {\n         sess.err(\n-            \"Sanitizer is incompatible with statically linked libc, \\\n+            \"sanitizer is incompatible with statically linked libc, \\\n                                 disable it using `-C target-feature=-crt-static`\",\n         );\n     }"}, {"sha": "6447e4cbf2bf6474b34f0391742160b9fa9b1f1a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -516,7 +516,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             });\n                             let unit_obligation = obligation.with(predicate.to_predicate(tcx));\n                             if self.predicate_may_hold(&unit_obligation) {\n-                                err.note(\"this trait is implemented for `()`.\");\n+                                err.note(\"this trait is implemented for `()`\");\n                                 err.note(\n                                     \"this error might have been caused by changes to \\\n                                     Rust's type-inference algorithm (see issue #48950 \\"}, {"sha": "be438f02a97109020e84e439a5fcf32580755958", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -623,7 +623,7 @@ fn dump_vtable_entries<'tcx>(\n     trait_ref: ty::PolyTraitRef<'tcx>,\n     entries: &[VtblEntry<'tcx>],\n ) {\n-    let msg = format!(\"Vtable entries for `{}`: {:#?}\", trait_ref, entries);\n+    let msg = format!(\"vtable entries for `{}`: {:#?}\", trait_ref, entries);\n     tcx.sess.struct_span_err(sp, &msg).emit();\n }\n "}, {"sha": "025ad54b539f5e72a133645eb53b54ab64cfcd1a", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1305,7 +1305,7 @@ impl Clone for BorrowRef<'_> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(\n     not(bootstrap),\n-    must_not_suspend = \"Holding a Ref across suspend \\\n+    must_not_suspend = \"holding a Ref across suspend \\\n                       points can cause BorrowErrors\"\n )]\n pub struct Ref<'b, T: ?Sized + 'b> {\n@@ -1686,7 +1686,7 @@ impl<'b> BorrowRefMut<'b> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(\n     not(bootstrap),\n-    must_not_suspend = \"Holding a RefMut across suspend \\\n+    must_not_suspend = \"holding a RefMut across suspend \\\n                       points can cause BorrowErrors\"\n )]\n pub struct RefMut<'b, T: ?Sized + 'b> {"}, {"sha": "57f1dcca30e0a8166d58d2b9152d2d3584b7c285", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -190,7 +190,7 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}\n #[must_use = \"if unused the Mutex will immediately unlock\"]\n #[cfg_attr(\n     not(bootstrap),\n-    must_not_suspend = \"Holding a MutexGuard across suspend \\\n+    must_not_suspend = \"holding a MutexGuard across suspend \\\n                       points can cause deadlocks, delays, \\\n                       and cause Futures to not implement `Send`\"\n )]"}, {"sha": "2f4395ceefd134ac41d8c68c1cb56e554be9d911", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -97,7 +97,7 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n #[cfg_attr(\n     not(bootstrap),\n-    must_not_suspend = \"Holding a RwLockReadGuard across suspend \\\n+    must_not_suspend = \"holding a RwLockReadGuard across suspend \\\n                       points can cause deadlocks, delays, \\\n                       and cause Futures to not implement `Send`\"\n )]\n@@ -123,7 +123,7 @@ unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n #[cfg_attr(\n     not(bootstrap),\n-    must_not_suspend = \"Holding a RwLockWriteGuard across suspend \\\n+    must_not_suspend = \"holding a RwLockWriteGuard across suspend \\\n                       points can cause deadlocks, delays, \\\n                       and cause Future's to not implement `Send`\"\n )]"}, {"sha": "474b14f59e3ab9dfbdb4c45541d480f2b7ef7ff5", "filename": "src/test/ui/anon-params/anon-params-deprecated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-warning: anonymous parameters are deprecated and will be removed in the next edition.\n+warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/anon-params-deprecated.rs:9:12\n    |\n LL |     fn foo(i32);\n@@ -12,7 +12,7 @@ LL | #![warn(anonymous_parameters)]\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n-warning: anonymous parameters are deprecated and will be removed in the next edition.\n+warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/anon-params-deprecated.rs:12:30\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n@@ -21,7 +21,7 @@ LL |     fn bar_with_default_impl(String, String) {}\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n-warning: anonymous parameters are deprecated and will be removed in the next edition.\n+warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/anon-params-deprecated.rs:12:38\n    |\n LL |     fn bar_with_default_impl(String, String) {}"}, {"sha": "1f5bca273d3b040012c8b4dd13c8e613d1b9fcdb", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,12 +1,12 @@\n-error: pointers cannot be reliably compared during const eval.\n+error: pointers cannot be reliably compared during const eval\n   --> $DIR/const_raw_ptr_ops.rs:4:26\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n \n-error: pointers cannot be reliably compared during const eval.\n+error: pointers cannot be reliably compared during const eval\n   --> $DIR/const_raw_ptr_ops.rs:6:27\n    |\n LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };"}, {"sha": "05c3951c1284b4b66523c905a551ffda25ed67dd", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/match-test-ptr-null.rs:6:15\n    |\n LL |         match &1 as *const i32 as usize {"}, {"sha": "2b2d23477f681365370ce6589eb79005dda28b51", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -25,7 +25,7 @@ LL | const unsafe extern \"C\" fn use_float() { 1.0 + 1.0; }\n    = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n    = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n \n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/const-extern-fn-min-const-fn.rs:9:48\n    |\n LL | const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }"}, {"sha": "8936c8d84ecff713207e410d30c74ae8cb7befda", "filename": "src/test/ui/consts/issue-17458.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/issue-17458.rs:1:28\n    |\n LL | static X: usize = unsafe { core::ptr::null::<usize>() as usize };"}, {"sha": "780edd2149fe102ce3ed1fd78264ecf77f247b4c", "filename": "src/test/ui/consts/issue-25826.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be reliably compared during const eval.\n+error: pointers cannot be reliably compared during const eval\n   --> $DIR/issue-25826.rs:3:30\n    |\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };"}, {"sha": "9a3d5716e001b1d5302aa02fc57368a94cb90e90", "filename": "src/test/ui/consts/issue-52023-array-size-pointer-cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/issue-52023-array-size-pointer-cast.rs:2:17\n    |\n LL |     let _ = [0; (&0 as *const i32) as usize];"}, {"sha": "5d8483cd111bf4cc744814155ccd85716a78a913", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -16,7 +16,7 @@ LL | const fn cmp(x: fn(), y: fn()) -> bool {\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error: pointers cannot be reliably compared during const eval.\n+error: pointers cannot be reliably compared during const eval\n   --> $DIR/cmp_fn_pointers.rs:4:14\n    |\n LL |     unsafe { x == y }"}, {"sha": "fd1ab6f64bf56fe3f05a729de7f7c995b18c1be7", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -164,7 +164,7 @@ LL | const fn foo26() -> &'static u32 { &BAR }\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/min_const_fn.rs:92:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n@@ -173,7 +173,7 @@ LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    = note: at compile-time, pointers do not have an integer value\n    = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/min_const_fn.rs:94:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n@@ -182,7 +182,7 @@ LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize }\n    = note: at compile-time, pointers do not have an integer value\n    = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/min_const_fn.rs:96:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n@@ -191,7 +191,7 @@ LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    = note: at compile-time, pointers do not have an integer value\n    = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/min_const_fn.rs:98:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }"}, {"sha": "ea17e95a719affe5459868910029d459b388a771", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be reliably compared during const eval.\n+error: pointers cannot be reliably compared during const eval\n   --> $DIR/E0395.rs:4:29\n    |\n LL | static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };"}, {"sha": "d822847a7a5897d09fe12c19bb5978f027e739c0", "filename": "src/test/ui/future-incompatible-lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-warning: anonymous parameters are deprecated and will be removed in the next edition.\n+warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/future-incompatible-lint-group.rs:7:10\n    |\n LL |     fn f(u8) {}"}, {"sha": "69cfd4c06a8b8a2d1fa74aa99b1d581f160953ca", "filename": "src/test/ui/imports/issue-30560.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fimports%2Fissue-30560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fimports%2Fissue-30560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-30560.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: items in traits are not importable.\n+error: items in traits are not importable\n   --> $DIR/issue-30560.rs:7:5\n    |\n LL | use T::*;"}, {"sha": "e0cbd2a216dbb1b158ab83a2374515443f84dcd2", "filename": "src/test/ui/issues/issue-18294.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/issue-18294.rs:3:31\n    |\n LL |     const Y: usize = unsafe { &X as *const u32 as usize };"}, {"sha": "a3a2ed044db3e32327a4d08f53b7857d51e1ea4c", "filename": "src/test/ui/issues/issue-50403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fissues%2Fissue-50403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fissues%2Fissue-50403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50403.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: concat_idents! takes 1 or more arguments.\n+error: concat_idents! takes 1 or more arguments\n   --> $DIR/issue-50403.rs:4:13\n    |\n LL |     let x = concat_idents!();"}, {"sha": "e994d69110698808c700c10d64436d49965c0d9a", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-2018.rs:14:34\n    |\n LL |     let _: Iter<'_, i32> = array.into_iter();\n@@ -16,7 +16,7 @@ help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicit\n LL |     let _: Iter<'_, i32> = IntoIterator::into_iter(array);\n    |                            ++++++++++++++++++++++++     ~\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-2018.rs:18:44\n    |\n LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n@@ -25,7 +25,7 @@ LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-2018.rs:22:43\n    |\n LL |     let _: Iter<'_, i32> = Rc::new(array).into_iter();\n@@ -34,7 +34,7 @@ LL |     let _: Iter<'_, i32> = Rc::new(array).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-2018.rs:25:41\n    |\n LL |     let _: Iter<'_, i32> = Array(array).into_iter();\n@@ -43,7 +43,7 @@ LL |     let _: Iter<'_, i32> = Array(array).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-2018.rs:32:24\n    |\n LL |     for _ in [1, 2, 3].into_iter() {}"}, {"sha": "634728096ed6947e39d6957a90952e157c1324b5", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:10:11\n    |\n LL |     small.into_iter();\n@@ -16,7 +16,7 @@ help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicit\n LL |     IntoIterator::into_iter(small);\n    |     ++++++++++++++++++++++++     ~\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:13:12\n    |\n LL |     [1, 2].into_iter();\n@@ -33,7 +33,7 @@ help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicit\n LL |     IntoIterator::into_iter([1, 2]);\n    |     ++++++++++++++++++++++++      ~\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:16:9\n    |\n LL |     big.into_iter();\n@@ -50,7 +50,7 @@ help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicit\n LL |     IntoIterator::into_iter(big);\n    |     ++++++++++++++++++++++++   ~\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:19:15\n    |\n LL |     [0u8; 33].into_iter();\n@@ -67,7 +67,7 @@ help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicit\n LL |     IntoIterator::into_iter([0u8; 33]);\n    |     ++++++++++++++++++++++++         ~\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:23:21\n    |\n LL |     Box::new(small).into_iter();\n@@ -76,7 +76,7 @@ LL |     Box::new(small).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:26:22\n    |\n LL |     Box::new([1, 2]).into_iter();\n@@ -85,7 +85,7 @@ LL |     Box::new([1, 2]).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:29:19\n    |\n LL |     Box::new(big).into_iter();\n@@ -94,7 +94,7 @@ LL |     Box::new(big).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:32:25\n    |\n LL |     Box::new([0u8; 33]).into_iter();\n@@ -103,7 +103,7 @@ LL |     Box::new([0u8; 33]).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:36:31\n    |\n LL |     Box::new(Box::new(small)).into_iter();\n@@ -112,7 +112,7 @@ LL |     Box::new(Box::new(small)).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:39:32\n    |\n LL |     Box::new(Box::new([1, 2])).into_iter();\n@@ -121,7 +121,7 @@ LL |     Box::new(Box::new([1, 2])).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:42:29\n    |\n LL |     Box::new(Box::new(big)).into_iter();\n@@ -130,7 +130,7 @@ LL |     Box::new(Box::new(big)).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:45:35\n    |\n LL |     Box::new(Box::new([0u8; 33])).into_iter();"}, {"sha": "6d796fe7f500b96c376a558cfebb06b9959a9aea", "filename": "src/test/ui/lang-items/issue-83471.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -26,7 +26,7 @@ LL | #[lang = \"fn\"]\n    |\n    = help: add `#![feature(lang_items)]` to the crate attributes to enable\n \n-warning: anonymous parameters are deprecated and will be removed in the next edition.\n+warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/issue-83471.rs:15:13\n    |\n LL |     fn call(export_name);"}, {"sha": "093f581264f36c3eea29df0367f2453293618c60", "filename": "src/test/ui/lint/must_not_suspend/mutex.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^\n-note: Holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n+note: holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n   --> $DIR/mutex.rs:7:9\n    |\n LL |     let _guard = m.lock().unwrap();"}, {"sha": "9d837d41f101f00e22063e11562de5a3e36549c6", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-mixed-script-confusables.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,14 +1,14 @@\n #![deny(mixed_script_confusables)]\n \n struct \u0391ctuallyNotLatin;\n-//~^ ERROR The usage of Script Group `Greek` in this crate consists solely of\n+//~^ ERROR the usage of Script Group `Greek` in this crate consists solely of\n \n fn main() {\n     let v = \u0391ctuallyNotLatin;\n }\n \n mod \u0440\u043e\u0440\u0435 {\n-//~^ ERROR The usage of Script Group `Cyrillic` in this crate consists solely of\n+//~^ ERROR the usage of Script Group `Cyrillic` in this crate consists solely of\n     const \u30a8: &'static str = \"\u30a2\u30a4\u30a6\";\n-    //~^ ERROR The usage of Script Group `Japanese, Katakana` in this crate consists solely of\n+    //~^ ERROR the usage of Script Group `Japanese, Katakana` in this crate consists solely of\n }"}, {"sha": "9ca034b71b2a792a65abd3609e86c218c6fc0f78", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-mixed-script-confusables.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: The usage of Script Group `Greek` in this crate consists solely of mixed script confusables\n+error: the usage of Script Group `Greek` in this crate consists solely of mixed script confusables\n   --> $DIR/lint-mixed-script-confusables.rs:3:8\n    |\n LL | struct \u0391ctuallyNotLatin;\n@@ -9,26 +9,26 @@ note: the lint level is defined here\n    |\n LL | #![deny(mixed_script_confusables)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: The usage includes '\u0391' (U+0391).\n-   = note: Please recheck to make sure their usages are indeed what you want.\n+   = note: the usage includes '\u0391' (U+0391)\n+   = note: please recheck to make sure their usages are indeed what you want\n \n-error: The usage of Script Group `Cyrillic` in this crate consists solely of mixed script confusables\n+error: the usage of Script Group `Cyrillic` in this crate consists solely of mixed script confusables\n   --> $DIR/lint-mixed-script-confusables.rs:10:5\n    |\n LL | mod \u0440\u043e\u0440\u0435 {\n    |     ^^^^\n    |\n-   = note: The usage includes '\u0435' (U+0435), '\u043e' (U+043E), '\u0440' (U+0440).\n-   = note: Please recheck to make sure their usages are indeed what you want.\n+   = note: the usage includes '\u0435' (U+0435), '\u043e' (U+043E), '\u0440' (U+0440)\n+   = note: please recheck to make sure their usages are indeed what you want\n \n-error: The usage of Script Group `Japanese, Katakana` in this crate consists solely of mixed script confusables\n+error: the usage of Script Group `Japanese, Katakana` in this crate consists solely of mixed script confusables\n   --> $DIR/lint-mixed-script-confusables.rs:12:11\n    |\n LL |     const \u30a8: &'static str = \"\u30a2\u30a4\u30a6\";\n    |           ^^\n    |\n-   = note: The usage includes '\u30a8' (U+30A8).\n-   = note: Please recheck to make sure their usages are indeed what you want.\n+   = note: the usage includes '\u30a8' (U+30A8)\n+   = note: please recheck to make sure their usages are indeed what you want\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a52f415dcac51b32fb48390e782db939a71ff830", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -138,7 +138,7 @@ error: inline assembly must be a string literal\n LL |     llvm_asm!(invalid);\n    |               ^^^^^^^\n \n-error: concat_idents! requires ident args.\n+error: concat_idents! requires ident args\n   --> $DIR/macros-nonfatal-errors.rs:102:5\n    |\n LL |     concat_idents!(\"not\", \"idents\");"}, {"sha": "ed84493deb5633669a92850af7b1fa5368639fb4", "filename": "src/test/ui/missing/missing-alloc_error_handler.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,6 +1,6 @@\n-error: `#[alloc_error_handler]` function required, but not found.\n+error: `#[alloc_error_handler]` function required, but not found\n \n-note: Use `#![feature(default_alloc_error_handler)]` for a default error handler.\n+note: Use `#![feature(default_alloc_error_handler)]` for a default error handler\n \n error: aborting due to previous error\n "}, {"sha": "0da5651c18cb13ea52ee6e8074de7472b23b0a4f", "filename": "src/test/ui/missing/missing-allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: no global memory allocator found but one is required; link to std or add `#[global_allocator]` to a static item that implements the GlobalAlloc trait.\n+error: no global memory allocator found but one is required; link to std or add `#[global_allocator]` to a static item that implements the GlobalAlloc trait\n \n error: aborting due to previous error\n "}, {"sha": "a51edb1f09a943217d14a0689cfb3fb88208649f", "filename": "src/test/ui/never_type/defaulted-never-note.fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfie\n LL |     foo(_x);\n    |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`\n    |\n-   = note: this trait is implemented for `()`.\n+   = note: this trait is implemented for `()`\n    = note: this error might have been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information).\n    = help: did you intend to use the type `()` here instead?\n note: required by a bound in `foo`"}, {"sha": "ce5bbfc249ebcc9bde2dc0e53b5baa667d38aa05", "filename": "src/test/ui/never_type/diverging-fallback-no-leak.fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `!: Test` is not satisfied\n LL |     unconstrained_arg(return);\n    |     ^^^^^^^^^^^^^^^^^ the trait `Test` is not implemented for `!`\n    |\n-   = note: this trait is implemented for `()`.\n+   = note: this trait is implemented for `()`\n    = note: this error might have been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information).\n    = help: did you intend to use the type `()` here instead?\n note: required by a bound in `unconstrained_arg`"}, {"sha": "d4410e147503a4933e673935d07e5c1186e31c76", "filename": "src/test/ui/rfc-1717-dllimport/missing-link-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: renaming of the library `foo` was specified, however this crate contains no `#[link(...)]` attributes referencing this library.\n+error: renaming of the library `foo` was specified, however this crate contains no `#[link(...)]` attributes referencing this library\n \n error: aborting due to previous error\n "}, {"sha": "a6fec9c4e2b5fd4af75fb34ff4ce2501f340b1ef", "filename": "src/test/ui/rfc-1717-dllimport/multiple-renames.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: multiple renamings were specified for library `foo` .\n+error: multiple renamings were specified for library `foo`\n \n error: aborting due to previous error\n "}, {"sha": "ca1b8a6e7b9b245d4cf816b1fbb6b456b9f71fea", "filename": "src/test/ui/rfc-2457/extern_block_nonascii_forbidden.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -6,7 +6,7 @@ LL | extern \"C\" {\n LL |     type \u4e00;\n    |          ^^\n    |\n-   = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n+   = note: this limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n \n error: items in `extern` blocks cannot use non-ascii identifiers\n   --> $DIR/extern_block_nonascii_forbidden.rs:5:8\n@@ -17,7 +17,7 @@ LL |     type \u4e00;\n LL |     fn \u4e8c();\n    |        ^^\n    |\n-   = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n+   = note: this limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n \n error: items in `extern` blocks cannot use non-ascii identifiers\n   --> $DIR/extern_block_nonascii_forbidden.rs:6:12\n@@ -28,7 +28,7 @@ LL | extern \"C\" {\n LL |     static \u4e09: usize;\n    |            ^^\n    |\n-   = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n+   = note: this limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9f74235fea5d2ed19a4ed2ff7210b5354a895bd3", "filename": "src/test/ui/sanitize/crt-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fsanitize%2Fcrt-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Fsanitize%2Fcrt-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fcrt-static.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: Sanitizer is incompatible with statically linked libc, disable it using `-C target-feature=-crt-static`\n+error: sanitizer is incompatible with statically linked libc, disable it using `-C target-feature=-crt-static`\n \n error: aborting due to previous error\n "}, {"sha": "492d1d5e03a4be63c64ec8d97e8631891d2c305c", "filename": "src/test/ui/test-attrs/test-should-panic-attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -4,31 +4,31 @@ warning: argument must be of the form: `expected = \"error message\"`\n LL | #[should_panic(expected)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:18:1\n    |\n LL | #[should_panic(expect)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:25:1\n    |\n LL | #[should_panic(expected(foo, bar))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:32:1\n    |\n LL | #[should_panic(expected = \"foo\", bar)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release\n \n warning: 4 warnings emitted\n "}, {"sha": "ec25e8a707111fcaea6dcbbabc29c26759abd795", "filename": "src/test/ui/traits/vtable/vtable-diamond.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -13,13 +13,13 @@ trait B: A {\n \n #[rustc_dump_vtable]\n trait C: A {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_c(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait D: B + C {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_d(&self) {}\n }\n "}, {"sha": "f2b64fac3b75ea885d7c0b994761067304dfb1c4", "filename": "src/test/ui/traits/vtable/vtable-diamond.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: Vtable entries for `<S as D>`: [\n+error: vtable entries for `<S as D>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -16,7 +16,7 @@ LL | |     fn foo_d(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as C>`: [\n+error: vtable entries for `<S as C>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,"}, {"sha": "fcb5fd5274be420bd5dc6b6a2cfb3e4682e50b0a", "filename": "src/test/ui/traits/vtable/vtable-multi-level.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -17,7 +17,7 @@ trait A {\n \n #[rustc_dump_vtable]\n trait B {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_b(&self) {}\n }\n \n@@ -28,19 +28,19 @@ trait C: A + B {\n \n #[rustc_dump_vtable]\n trait D {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_d(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait E {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_e(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait F: D + E {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_f(&self) {}\n }\n \n@@ -51,49 +51,49 @@ trait G: C + F {\n \n #[rustc_dump_vtable]\n trait H {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_h(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait I {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_i(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait J: H + I {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_j(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait K {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_k(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait L {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_l(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait M: K + L {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_m(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait N: J + M {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_n(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait O: G + N {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_o(&self) {}\n }\n "}, {"sha": "742b88ea8a9c9a770abb24cb3d3bbded856d7327", "filename": "src/test/ui/traits/vtable/vtable-multi-level.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: Vtable entries for `<S as O>`: [\n+error: vtable entries for `<S as O>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -37,7 +37,7 @@ LL | |     fn foo_o(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as B>`: [\n+error: vtable entries for `<S as B>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -51,7 +51,7 @@ LL | |     fn foo_b(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as D>`: [\n+error: vtable entries for `<S as D>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -65,7 +65,7 @@ LL | |     fn foo_d(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as E>`: [\n+error: vtable entries for `<S as E>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -79,7 +79,7 @@ LL | |     fn foo_e(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as F>`: [\n+error: vtable entries for `<S as F>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -96,7 +96,7 @@ LL | |     fn foo_f(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as H>`: [\n+error: vtable entries for `<S as H>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -110,7 +110,7 @@ LL | |     fn foo_h(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as I>`: [\n+error: vtable entries for `<S as I>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -124,7 +124,7 @@ LL | |     fn foo_i(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as J>`: [\n+error: vtable entries for `<S as J>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -141,7 +141,7 @@ LL | |     fn foo_j(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as K>`: [\n+error: vtable entries for `<S as K>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -155,7 +155,7 @@ LL | |     fn foo_k(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as L>`: [\n+error: vtable entries for `<S as L>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -169,7 +169,7 @@ LL | |     fn foo_l(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as M>`: [\n+error: vtable entries for `<S as M>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -186,7 +186,7 @@ LL | |     fn foo_m(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as N>`: [\n+error: vtable entries for `<S as N>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,"}, {"sha": "8e7098a495ed1e89cba0021b787fed38b10ff876", "filename": "src/test/ui/traits/vtable/vtable-multiple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -8,13 +8,13 @@ trait A {\n \n #[rustc_dump_vtable]\n trait B {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_b(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait C: A + B {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_c(&self) {}\n }\n "}, {"sha": "f25ac76fbe06931c9466cd7d66a814a3908e326b", "filename": "src/test/ui/traits/vtable/vtable-multiple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: Vtable entries for `<S as C>`: [\n+error: vtable entries for `<S as C>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -15,7 +15,7 @@ LL | |     fn foo_c(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as B>`: [\n+error: vtable entries for `<S as B>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,"}, {"sha": "7661bb574613bef4f1596c9b424b09380b5f25e9", "filename": "src/test/ui/traits/vtable/vtable-non-object-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -6,7 +6,7 @@\n \n #[rustc_dump_vtable]\n trait A: Iterator {}\n-//~^ error Vtable\n+//~^ error vtable\n \n impl<T> A for T where T: Iterator {}\n "}, {"sha": "34fe910525be1c17e7a61038c3900f5062c61aea", "filename": "src/test/ui/traits/vtable/vtable-non-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: Vtable entries for `<std::vec::IntoIter<u8> as A>`: [\n+error: vtable entries for `<std::vec::IntoIter<u8> as A>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,"}, {"sha": "a64796358345f9629860e7659c439c2dfe9cff27", "filename": "src/test/ui/traits/vtable/vtable-vacant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -13,7 +13,7 @@ trait A {\n \n #[rustc_dump_vtable]\n trait B: A {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_b1(&self) {}\n     fn foo_b2(&self) where Self: Send {}\n }"}, {"sha": "e3b75e7cf33f307dc3bc766f364dfa3f10a5c8df", "filename": "src/test/ui/traits/vtable/vtable-vacant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: Vtable entries for `<S as B>`: [\n+error: vtable entries for `<S as B>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,"}, {"sha": "1e26623899bad83578ce19078b88fdf1ce462442", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-copy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,24 +1,24 @@\n-warning: Trait bound String: Copy does not depend on any type or lifetime parameters\n+warning: trait bound String: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-copy.rs:5:51\n    |\n LL | fn copy_string(t: String) -> String where String: Copy {\n    |                                                   ^^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n-warning: Trait bound String: Copy does not depend on any type or lifetime parameters\n+warning: trait bound String: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-copy.rs:12:56\n    |\n LL | fn copy_out_string(t: &String) -> String where String: Copy {\n    |                                                        ^^^^\n \n-warning: Trait bound String: Copy does not depend on any type or lifetime parameters\n+warning: trait bound String: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-copy.rs:16:55\n    |\n LL | fn copy_string_with_param<T>(x: String) where String: Copy {\n    |                                                       ^^^^\n \n-warning: Trait bound for<'b> &'b mut i32: Copy does not depend on any type or lifetime parameters\n+warning: trait bound for<'b> &'b mut i32: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-copy.rs:22:76\n    |\n LL | fn copy_mut<'a>(t: &&'a mut i32) -> &'a mut i32 where for<'b> &'b mut i32: Copy {"}, {"sha": "ddc13c512f60fbed8204507b9115e88e9af832ce", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,42 +1,42 @@\n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:21:8\n    |\n LL |     B: A\n    |        ^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:28:8\n    |\n LL |     B: A<X = i32>\n    |        ^^^^^^^^^^\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:35:8\n    |\n LL |     B: A<X = u8>\n    |        ^^^^^^^^^\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:42:8\n    |\n LL |     B: A<X = i32> + A\n    |        ^^^^^^^^^^\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:42:21\n    |\n LL |     B: A<X = i32> + A\n    |                     ^\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:51:8\n    |\n LL |     B: A<X = u8> + A\n    |        ^^^^^^^^^\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:51:20\n    |\n LL |     B: A<X = u8> + A"}, {"sha": "cf24d811c04e3dbb5d63de768d23e013910c48cf", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-sized.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,18 +1,18 @@\n-warning: Trait bound str: Sized does not depend on any type or lifetime parameters\n+warning: trait bound str: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-sized.rs:14:31\n    |\n LL | struct S(str, str) where str: Sized;\n    |                               ^^^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n-warning: Trait bound for<'a> T<(dyn A + 'a)>: Sized does not depend on any type or lifetime parameters\n+warning: trait bound for<'a> T<(dyn A + 'a)>: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-sized.rs:17:49\n    |\n LL | fn unsized_local() where for<'a> T<dyn A + 'a>: Sized {\n    |                                                 ^^^^^\n \n-warning: Trait bound str: Sized does not depend on any type or lifetime parameters\n+warning: trait bound str: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-sized.rs:22:35\n    |\n LL | fn return_str() -> str where str: Sized {"}, {"sha": "8f58a99a86f9153f8627e56745a92e8d1a786008", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-well-formed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,12 +1,12 @@\n-warning: Trait bound Vec<str>: Debug does not depend on any type or lifetime parameters\n+warning: trait bound Vec<str>: Debug does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-well-formed.rs:7:30\n    |\n LL | pub fn foo() where Vec<str>: Debug, str: Copy {\n    |                              ^^^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n-warning: Trait bound str: Copy does not depend on any type or lifetime parameters\n+warning: trait bound str: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-well-formed.rs:7:42\n    |\n LL | pub fn foo() where Vec<str>: Debug, str: Copy {"}, {"sha": "16f32e043d50097e92480ffa287dff7e323ee826", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,24 +1,24 @@\n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:14:19\n    |\n LL | enum E where i32: Foo { V }\n    |                   ^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:16:21\n    |\n LL | struct S where i32: Foo;\n    |                     ^^^\n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:18:20\n    |\n LL | trait T where i32: Foo {}\n    |                    ^^^\n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:20:20\n    |\n LL | union U where i32: Foo { f: i32 }\n@@ -37,55 +37,55 @@ LL - type Y where i32: Foo = ();\n LL + type Y  = ();\n    | \n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:22:19\n    |\n LL | type Y where i32: Foo = ();\n    |                   ^^^\n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:26:28\n    |\n LL | impl Foo for () where i32: Foo {\n    |                            ^^^\n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:34:19\n    |\n LL | fn f() where i32: Foo {\n    |                   ^^^\n \n-warning: Trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+warning: trait bound &'static str: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:41:28\n    |\n LL | fn g() where &'static str: Foo {\n    |                            ^^^\n \n-warning: Trait bound str: Sized does not depend on any type or lifetime parameters\n+warning: trait bound str: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:55:37\n    |\n LL | struct TwoStrs(str, str) where str: Sized;\n    |                                     ^^^^^\n \n-warning: Trait bound for<'a> Dst<(dyn A + 'a)>: Sized does not depend on any type or lifetime parameters\n+warning: trait bound for<'a> Dst<(dyn A + 'a)>: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:57:51\n    |\n LL | fn unsized_local() where for<'a> Dst<dyn A + 'a>: Sized {\n    |                                                   ^^^^^\n \n-warning: Trait bound str: Sized does not depend on any type or lifetime parameters\n+warning: trait bound str: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:61:35\n    |\n LL | fn return_str() -> str where str: Sized {\n    |                                   ^^^^^\n \n-warning: Trait bound String: Neg does not depend on any type or lifetime parameters\n+warning: trait bound String: Neg does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:65:46\n    |\n LL | fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: Trait bound i32: Iterator does not depend on any type or lifetime parameters\n+warning: trait bound i32: Iterator does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:70:25\n    |\n LL | fn use_for() where i32: Iterator {"}, {"sha": "20e0ddfc29b36eb8913a4d9c7300da01751d9b0a", "filename": "src/test/ui/trivial-bounds/trivial-bounds-lint.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5352e17df3b2500b4cf92ee86c7dbf002018600f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-lint.stderr?ref=5352e17df3b2500b4cf92ee86c7dbf002018600f", "patch": "@@ -1,4 +1,4 @@\n-error: Trait bound i32: Copy does not depend on any type or lifetime parameters\n+error: trait bound i32: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:5:21\n    |\n LL | struct A where i32: Copy;\n@@ -10,37 +10,37 @@ note: the lint level is defined here\n LL | #![deny(trivial_bounds)]\n    |         ^^^^^^^^^^^^^^\n \n-error: Trait bound i32: X<()> does not depend on any type or lifetime parameters\n+error: trait bound i32: X<()> does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:18:30\n    |\n LL | fn global_param() where i32: X<()> {}\n    |                              ^^^^^\n \n-error: Trait bound i32: Z does not depend on any type or lifetime parameters\n+error: trait bound i32: Z does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:22:35\n    |\n LL | fn global_projection() where i32: Z<S = i32> {}\n    |                                   ^^^^^^^^^^\n \n-error: Lifetime bound i32: 'static does not depend on any type or lifetime parameters\n+error: lifetime bound i32: 'static does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:29:34\n    |\n LL | fn global_lifetimes() where i32: 'static, &'static str: 'static {}\n    |                                  ^^^^^^^\n \n-error: Lifetime bound &'static str: 'static does not depend on any type or lifetime parameters\n+error: lifetime bound &'static str: 'static does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:29:57\n    |\n LL | fn global_lifetimes() where i32: 'static, &'static str: 'static {}\n    |                                                         ^^^^^^^\n \n-error: Lifetime bound 'static: 'static does not depend on any type or lifetime parameters\n+error: lifetime bound 'static: 'static does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:35:37\n    |\n LL | fn global_outlives() where 'static: 'static {}\n    |                                     ^^^^^^^\n \n-error: Trait bound i32: Copy does not depend on any type or lifetime parameters\n+error: trait bound i32: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:38:46\n    |\n LL | fn mixed_bounds<T: Copy>() where i32: X<T> + Copy {}"}]}