{"sha": "c8140a88f67cf1fea104b1aaa615af7816984615", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MTQwYTg4ZjY3Y2YxZmVhMTA0YjFhYWE2MTVhZjc4MTY5ODQ2MTU=", "commit": {"author": {"name": "Thomas B\u00e4chler", "email": "thomas.baechler@gmx.de", "date": "2020-03-21T18:48:23Z"}, "committer": {"name": "Thomas B\u00e4chler", "email": "thomas.baechler@gmx.de", "date": "2020-03-21T18:48:23Z"}, "message": "Return NonZeroU64 from ThreadId::as_u64.\n\nAs discussed in #67939, this allows turning Option<ThreadId> into Option<NonZeroU64> which\ncan then be stored inside an AtomicU64.", "tree": {"sha": "04f0a756194d67eec457b152a67d33c3cb725db4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04f0a756194d67eec457b152a67d33c3cb725db4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8140a88f67cf1fea104b1aaa615af7816984615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8140a88f67cf1fea104b1aaa615af7816984615", "html_url": "https://github.com/rust-lang/rust/commit/c8140a88f67cf1fea104b1aaa615af7816984615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8140a88f67cf1fea104b1aaa615af7816984615/comments", "author": null, "committer": null, "parents": [{"sha": "98803c182b2ba6ef5dccb6bf501958249295eac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/98803c182b2ba6ef5dccb6bf501958249295eac0", "html_url": "https://github.com/rust-lang/rust/commit/98803c182b2ba6ef5dccb6bf501958249295eac0"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "a7cdc48d60342f986c4e4a5e2ff3333bc2a3f3ac", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8140a88f67cf1fea104b1aaa615af7816984615/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8140a88f67cf1fea104b1aaa615af7816984615/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=c8140a88f67cf1fea104b1aaa615af7816984615", "patch": "@@ -345,7 +345,7 @@ impl SelfProfilerRef {\n     ) {\n         drop(self.exec(event_filter, |profiler| {\n             let event_id = StringId::new_virtual(query_invocation_id.0);\n-            let thread_id = std::thread::current().id().as_u64() as u32;\n+            let thread_id = std::thread::current().id().as_u64().get() as u32;\n \n             profiler.profiler.record_instant_event(\n                 event_kind(profiler),\n@@ -522,7 +522,7 @@ impl<'a> TimingGuard<'a> {\n         event_kind: StringId,\n         event_id: EventId,\n     ) -> TimingGuard<'a> {\n-        let thread_id = std::thread::current().id().as_u64() as u32;\n+        let thread_id = std::thread::current().id().as_u64().get() as u32;\n         let raw_profiler = &profiler.profiler;\n         let timing_guard =\n             raw_profiler.start_recording_interval_event(event_kind, event_id, thread_id);"}, {"sha": "282e268efd20686f35fba68a792d3f4f96ce432e", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8140a88f67cf1fea104b1aaa615af7816984615/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8140a88f67cf1fea104b1aaa615af7816984615/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=c8140a88f67cf1fea104b1aaa615af7816984615", "patch": "@@ -1082,8 +1082,8 @@ impl ThreadId {\n     /// it is not guaranteed which values new threads will return, and this may\n     /// change across Rust versions.\n     #[unstable(feature = \"thread_id_value\", issue = \"67939\")]\n-    pub fn as_u64(&self) -> u64 {\n-        self.0.get()\n+    pub fn as_u64(&self) -> NonZeroU64 {\n+        self.0\n     }\n }\n "}]}