{"sha": "0e9cac40a66ad8c18409890673150d8a4eacf039", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOWNhYzQwYTY2YWQ4YzE4NDA5ODkwNjczMTUwZDhhNGVhY2YwMzk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-17T13:57:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:55Z"}, "message": "Make alloc_self_profile_query_strings a standalone function.", "tree": {"sha": "631cdc853a53630afab125343b2e291162c5d68e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631cdc853a53630afab125343b2e291162c5d68e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e9cac40a66ad8c18409890673150d8a4eacf039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9cac40a66ad8c18409890673150d8a4eacf039", "html_url": "https://github.com/rust-lang/rust/commit/0e9cac40a66ad8c18409890673150d8a4eacf039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e9cac40a66ad8c18409890673150d8a4eacf039/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d71b99690b68ddb5b7b65b71fe900d6c74f570e", "html_url": "https://github.com/rust-lang/rust/commit/5d71b99690b68ddb5b7b65b71fe900d6c74f570e"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "f70701257e24296e7dd71e96d8a1ee3aa99d4fef", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e9cac40a66ad8c18409890673150d8a4eacf039/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e9cac40a66ad8c18409890673150d8a4eacf039/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=0e9cac40a66ad8c18409890673150d8a4eacf039", "patch": "@@ -429,7 +429,7 @@ impl Compiler {\n             {\n                 let _prof_timer =\n                     queries.session().prof.generic_activity(\"self_profile_alloc_query_strings\");\n-                gcx.enter(|tcx| tcx.alloc_self_profile_query_strings());\n+                gcx.enter(query::alloc_self_profile_query_strings);\n             }\n \n             if self.session().opts.debugging_opts.query_stats {"}, {"sha": "dd0723f200f762304c959d715455652f1b046c6d", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e9cac40a66ad8c18409890673150d8a4eacf039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e9cac40a66ad8c18409890673150d8a4eacf039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=0e9cac40a66ad8c18409890673150d8a4eacf039", "patch": "@@ -88,7 +88,7 @@ mod on_disk_cache;\n pub use self::on_disk_cache::OnDiskCache;\n \n mod profiling_support;\n-pub use self::profiling_support::{IntoSelfProfilingString, QueryKeyStringBuilder};\n+pub use self::profiling_support::alloc_self_profile_query_strings;\n \n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method"}, {"sha": "a17fc71fd5c19510fdab8d562c5c387e59dbb2a0", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0e9cac40a66ad8c18409890673150d8a4eacf039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e9cac40a66ad8c18409890673150d8a4eacf039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=0e9cac40a66ad8c18409890673150d8a4eacf039", "patch": "@@ -524,35 +524,6 @@ macro_rules! define_queries {\n             {\n                 self.at(DUMMY_SP).$name(key)\n             })*\n-\n-            /// All self-profiling events generated by the query engine use\n-            /// virtual `StringId`s for their `event_id`. This method makes all\n-            /// those virtual `StringId`s point to actual strings.\n-            ///\n-            /// If we are recording only summary data, the ids will point to\n-            /// just the query names. If we are recording query keys too, we\n-            /// allocate the corresponding strings here.\n-            pub fn alloc_self_profile_query_strings(self) {\n-                use crate::ty::query::profiling_support::{\n-                    alloc_self_profile_query_strings_for_query_cache,\n-                    QueryKeyStringCache,\n-                };\n-\n-                if !self.prof.enabled() {\n-                    return;\n-                }\n-\n-                let mut string_cache = QueryKeyStringCache::new();\n-\n-                $({\n-                    alloc_self_profile_query_strings_for_query_cache(\n-                        self,\n-                        stringify!($name),\n-                        &self.query_caches.$name,\n-                        &mut string_cache,\n-                    );\n-                })*\n-            }\n         }\n \n         impl TyCtxtAt<$tcx> {"}, {"sha": "aab5fd9e8a19404024e96c8a80d91dfe92e086ef", "filename": "compiler/rustc_middle/src/ty/query/profiling_support.rs", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0e9cac40a66ad8c18409890673150d8a4eacf039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e9cac40a66ad8c18409890673150d8a4eacf039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fprofiling_support.rs?ref=0e9cac40a66ad8c18409890673150d8a4eacf039", "patch": "@@ -9,24 +9,24 @@ use rustc_query_system::query::{QueryCache, QueryCacheStore};\n use std::fmt::Debug;\n use std::io::Write;\n \n-pub struct QueryKeyStringCache {\n+struct QueryKeyStringCache {\n     def_id_cache: FxHashMap<DefId, StringId>,\n }\n \n impl QueryKeyStringCache {\n-    pub fn new() -> QueryKeyStringCache {\n+    fn new() -> QueryKeyStringCache {\n         QueryKeyStringCache { def_id_cache: Default::default() }\n     }\n }\n \n-pub struct QueryKeyStringBuilder<'p, 'c, 'tcx> {\n+struct QueryKeyStringBuilder<'p, 'c, 'tcx> {\n     profiler: &'p SelfProfiler,\n     tcx: TyCtxt<'tcx>,\n     string_cache: &'c mut QueryKeyStringCache,\n }\n \n impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n-    pub fn new(\n+    fn new(\n         profiler: &'p SelfProfiler,\n         tcx: TyCtxt<'tcx>,\n         string_cache: &'c mut QueryKeyStringCache,\n@@ -98,7 +98,7 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n     }\n }\n \n-pub trait IntoSelfProfilingString {\n+trait IntoSelfProfilingString {\n     fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_, '_>) -> StringId;\n }\n \n@@ -123,7 +123,7 @@ impl<T: SpecIntoSelfProfilingString> IntoSelfProfilingString for T {\n }\n \n #[rustc_specialization_trait]\n-pub trait SpecIntoSelfProfilingString: Debug {\n+trait SpecIntoSelfProfilingString: Debug {\n     fn spec_to_self_profile_string(\n         &self,\n         builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n@@ -227,7 +227,7 @@ where\n /// Allocate the self-profiling query strings for a single query cache. This\n /// method is called from `alloc_self_profile_query_strings` which knows all\n /// the queries via macro magic.\n-pub(super) fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n+fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n     tcx: TyCtxt<'tcx>,\n     query_name: &'static str,\n     query_cache: &QueryCacheStore<C>,\n@@ -287,3 +287,35 @@ pub(super) fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n         }\n     });\n }\n+\n+/// All self-profiling events generated by the query engine use\n+/// virtual `StringId`s for their `event_id`. This method makes all\n+/// those virtual `StringId`s point to actual strings.\n+///\n+/// If we are recording only summary data, the ids will point to\n+/// just the query names. If we are recording query keys too, we\n+/// allocate the corresponding strings here.\n+pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'tcx>) {\n+    if !tcx.prof.enabled() {\n+        return;\n+    }\n+\n+    let mut string_cache = QueryKeyStringCache::new();\n+\n+    macro_rules! alloc_once {\n+        (<$tcx:tt>\n+            $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident($K:ty) -> $V:ty,)*\n+        ) => {\n+            $({\n+                alloc_self_profile_query_strings_for_query_cache(\n+                    tcx,\n+                    stringify!($name),\n+                    &tcx.query_caches.$name,\n+                    &mut string_cache,\n+                );\n+            })*\n+        }\n+    }\n+\n+    rustc_query_append! { [alloc_once!][<'tcx>] }\n+}"}]}