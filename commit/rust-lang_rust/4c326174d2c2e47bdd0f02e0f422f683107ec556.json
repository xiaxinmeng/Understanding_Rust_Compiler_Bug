{"sha": "4c326174d2c2e47bdd0f02e0f422f683107ec556", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMzI2MTc0ZDJjMmU0N2JkZDBmMDJlMGY0MjJmNjgzMTA3ZWM1NTY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-06-07T21:43:19Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-06-07T21:43:19Z"}, "message": "Revert \"Make LocalAnalizer visitor iterate instead of recurse\"\n\nThis reverts commit 0cfaa28bc5edda198571fca9410cbc9f71b8d17a.", "tree": {"sha": "a32e0c69762c1653032391333b39ce203e5ff9d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a32e0c69762c1653032391333b39ce203e5ff9d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c326174d2c2e47bdd0f02e0f422f683107ec556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c326174d2c2e47bdd0f02e0f422f683107ec556", "html_url": "https://github.com/rust-lang/rust/commit/4c326174d2c2e47bdd0f02e0f422f683107ec556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c326174d2c2e47bdd0f02e0f422f683107ec556/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8865d8e195813ade6b84434ac9f8850e7112d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8865d8e195813ade6b84434ac9f8850e7112d1a", "html_url": "https://github.com/rust-lang/rust/commit/c8865d8e195813ade6b84434ac9f8850e7112d1a"}], "stats": {"total": 85, "additions": 37, "deletions": 48}, "files": [{"sha": "bb6a13ed15a52cdeb3f3485ac6c69b56825456e4", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 37, "deletions": 48, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/4c326174d2c2e47bdd0f02e0f422f683107ec556/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c326174d2c2e47bdd0f02e0f422f683107ec556/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=4c326174d2c2e47bdd0f02e0f422f683107ec556", "patch": "@@ -154,62 +154,51 @@ impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n                    context: PlaceContext,\n                    location: Location) {\n         debug!(\"visit_place(place={:?}, context={:?})\", place, context);\n-        let mut context = context;\n         let cx = self.fx.cx;\n \n-        place.iterate(|place_base, place_projections| {\n-            for proj in place_projections {\n-                // Allow uses of projections that are ZSTs or from scalar fields.\n-                let is_consume = match context {\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) |\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) => true,\n-                    _ => false\n-                };\n-                if is_consume {\n-                    let base_ty = proj.base.ty(self.fx.mir, cx.tcx());\n-                    let base_ty = self.fx.monomorphize(&base_ty);\n-\n-                    // ZSTs don't require any actual memory access.\n-                    let elem_ty = base_ty\n-                        .projection_ty(cx.tcx(), &proj.elem)\n-                        .ty;\n-                    let elem_ty = self.fx.monomorphize(&elem_ty);\n-                    if cx.layout_of(elem_ty).is_zst() {\n-                        return;\n-                    }\n-\n-                    if let mir::ProjectionElem::Field(..) = proj.elem {\n-                        let layout = cx.layout_of(base_ty.ty);\n-                        if cx.is_backend_immediate(layout) || cx.is_backend_scalar_pair(layout) {\n-                            // Recurse with the same context, instead of `Projection`,\n-                            // potentially stopping at non-operand projections,\n-                            // which would trigger `not_ssa` on locals.\n-                            continue;\n-                        }\n-                    }\n+        if let mir::Place::Projection(ref proj) = *place {\n+            // Allow uses of projections that are ZSTs or from scalar fields.\n+            let is_consume = match context {\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) |\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) => true,\n+                _ => false\n+            };\n+            if is_consume {\n+                let base_ty = proj.base.ty(self.fx.mir, cx.tcx());\n+                let base_ty = self.fx.monomorphize(&base_ty);\n+\n+                // ZSTs don't require any actual memory access.\n+                let elem_ty = base_ty\n+                    .projection_ty(cx.tcx(), &proj.elem)\n+                    .ty;\n+                let elem_ty = self.fx.monomorphize(&elem_ty);\n+                if cx.layout_of(elem_ty).is_zst() {\n+                    return;\n                 }\n \n-                // A deref projection only reads the pointer, never needs the place.\n-                if let mir::ProjectionElem::Deref = proj.elem {\n-                    return self.visit_place(\n-                        &proj.base,\n-                        PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n-                        location\n-                    );\n+                if let mir::ProjectionElem::Field(..) = proj.elem {\n+                    let layout = cx.layout_of(base_ty.ty);\n+                    if cx.is_backend_immediate(layout) || cx.is_backend_scalar_pair(layout) {\n+                        // Recurse with the same context, instead of `Projection`,\n+                        // potentially stopping at non-operand projections,\n+                        // which would trigger `not_ssa` on locals.\n+                        self.visit_place(&proj.base, context, location);\n+                        return;\n+                    }\n                 }\n-\n-                context = if context.is_mutating_use() {\n-                    PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-                } else {\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n-                };\n             }\n \n-            // Default base visit behavior\n-            if let mir::PlaceBase::Local(local) = place_base {\n-                self.visit_local(local, context, location);\n+            // A deref projection only reads the pointer, never needs the place.\n+            if let mir::ProjectionElem::Deref = proj.elem {\n+                return self.visit_place(\n+                    &proj.base,\n+                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                    location\n+                );\n             }\n-        });\n+        }\n+\n+        self.super_place(place, context, location);\n     }\n \n     fn visit_local(&mut self,"}]}