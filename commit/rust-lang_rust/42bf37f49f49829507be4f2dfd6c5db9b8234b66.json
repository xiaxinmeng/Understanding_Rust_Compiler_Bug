{"sha": "42bf37f49f49829507be4f2dfd6c5db9b8234b66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYmYzN2Y0OWY0OTgyOTUwN2JlNGYyZGZkNmM1ZGI5YjgyMzRiNjY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-19T16:59:12Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-28T19:24:36Z"}, "message": "Add a lint for bad documentation formatting", "tree": {"sha": "4af9596104bc684f11ee82ed832cca3f2473f767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4af9596104bc684f11ee82ed832cca3f2473f767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42bf37f49f49829507be4f2dfd6c5db9b8234b66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42bf37f49f49829507be4f2dfd6c5db9b8234b66", "html_url": "https://github.com/rust-lang/rust/commit/42bf37f49f49829507be4f2dfd6c5db9b8234b66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42bf37f49f49829507be4f2dfd6c5db9b8234b66/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "941ec6e4f5cfc54078f5fe65702ec46b6c59b8d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/941ec6e4f5cfc54078f5fe65702ec46b6c59b8d2", "html_url": "https://github.com/rust-lang/rust/commit/941ec6e4f5cfc54078f5fe65702ec46b6c59b8d2"}], "stats": {"total": 142, "additions": 142, "deletions": 0}, "files": [{"sha": "e4d18c28bfecc9aa71dfe91c6d12ae73a910349a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42bf37f49f49829507be4f2dfd6c5db9b8234b66/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/42bf37f49f49829507be4f2dfd6c5db9b8234b66/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=42bf37f49f49829507be4f2dfd6c5db9b8234b66", "patch": "@@ -43,6 +43,7 @@ name\n [cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                       | warn    | finds functions that should be split up into multiple functions\n [deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                               | warn    | `Warn` on `#[deprecated(since = \"x\")]` where x is not semver\n [derive_hash_xor_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq)                             | warn    | deriving `Hash` but implementing `PartialEq` explicitly\n+[doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                         | warn    | checks for the presence of the `_` character outside ticks in documentation\n [drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                 | warn    | call to `std::mem::drop` with a reference instead of an owned value, which will not call the `Drop::drop` method on the underlying value\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)       | warn    | Function arguments having names which only differ by an underscore\n [empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                             | warn    | empty `loop {}` detected"}, {"sha": "610aa34ab2c2ef9968e61a247719406f2f1c9975", "filename": "src/doc.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/42bf37f49f49829507be4f2dfd6c5db9b8234b66/src%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bf37f49f49829507be4f2dfd6c5db9b8234b66/src%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc.rs?ref=42bf37f49f49829507be4f2dfd6c5db9b8234b66", "patch": "@@ -0,0 +1,112 @@\n+use rustc::lint::*;\n+use std::borrow::Cow;\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use utils::span_lint;\n+\n+/// **What it does:** This lint checks for the presence of the `_` character outside ticks in\n+/// documentation.\n+///\n+/// **Why is this bad?** *Rustdoc* supports markdown formatting, the `_` character probably\n+/// indicates some code which should be included between ticks.\n+///\n+/// **Known problems:** Lots of bad docs won\u2019t be fixed, the lint only checks for `_`.\n+///\n+/// **Examples:**\n+/// ```rust\n+/// /// Do something with the foo_bar parameter.\n+/// fn doit(foo_bar) { .. }\n+/// ```\n+declare_lint! {\n+    pub DOC_MARKDOWN, Warn,\n+    \"checks for the presence of the `_` character outside ticks in documentation\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct Doc;\n+\n+impl LintPass for Doc {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![DOC_MARKDOWN]\n+    }\n+}\n+\n+impl EarlyLintPass for Doc {\n+    fn check_crate(&mut self, cx: &EarlyContext, krate: &ast::Crate) {\n+        check_attrs(cx, &krate.attrs, krate.span);\n+    }\n+\n+    fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n+        check_attrs(cx, &item.attrs, item.span);\n+    }\n+}\n+\n+/// Collect all doc attributes. Multiple `///` are represented in different attributes. `rustdoc`\n+/// has a pass to merge them, but we probably don\u2019t want to invoke that here.\n+fn collect_doc(attrs: &[ast::Attribute]) -> (Cow<str>, Option<Span>) {\n+    fn doc_and_span(attr: &ast::Attribute) -> Option<(&str, Span)> {\n+        if attr.node.is_sugared_doc {\n+            if let ast::MetaItemKind::NameValue(_, ref doc) = attr.node.value.node {\n+                if let ast::LitKind::Str(ref doc, _) = doc.node {\n+                    return Some((&doc[..], attr.span));\n+                }\n+            }\n+        }\n+\n+        None\n+    }\n+    let doc_and_span: fn(_) -> _ = doc_and_span;\n+\n+    let mut doc_attrs = attrs.iter().filter_map(doc_and_span);\n+\n+    let count = doc_attrs.clone().take(2).count();\n+\n+    match count {\n+        0 => (\"\".into(), None),\n+        1 => {\n+            let (doc, span) = doc_attrs.next().unwrap_or_else(|| unreachable!());\n+            (doc.into(), Some(span))\n+        }\n+        _ => (doc_attrs.map(|s| s.0).collect::<String>().into(), None),\n+    }\n+}\n+\n+fn check_attrs<'a>(cx: &EarlyContext, attrs: &'a [ast::Attribute], default_span: Span) {\n+    let (doc, span) = collect_doc(attrs);\n+    let span = span.unwrap_or(default_span);\n+\n+    let mut in_ticks = false;\n+    for word in doc.split_whitespace() {\n+        let ticks = word.bytes().filter(|&b| b == b'`').count();\n+\n+        if ticks == 2 { // likely to be \u201c`foo`\u201d\n+            continue;\n+        } else if ticks % 2 == 1 {\n+            in_ticks = !in_ticks;\n+            continue; // let\u2019s assume no one will ever write something like \u201c`foo`_bar\u201d\n+        }\n+\n+        if !in_ticks {\n+            check_word(cx, word, span);\n+        }\n+    }\n+}\n+\n+fn check_word(cx: &EarlyContext, word: &str, span: Span) {\n+    /// Checks if a string a camel-case, ie. contains at least two uppercase letter (`Clippy` is\n+    /// ok) and one lower-case letter (`NASA` is ok). Plural are also excluded (`IDs` is ok).\n+    fn is_camel_case(s: &str) -> bool {\n+        let s = if s.ends_with('s') {\n+            &s[..s.len()-1]\n+        } else {\n+            s\n+        };\n+\n+        s.chars().filter(|&c| c.is_uppercase()).take(2).count() > 1 &&\n+        s.chars().filter(|&c| c.is_lowercase()).take(1).count() > 0\n+    }\n+\n+    if word.contains('_') || is_camel_case(word) {\n+        span_lint(cx, DOC_MARKDOWN, span, &format!(\"you should put `{}` between ticks in the documentation\", word));\n+    }\n+}"}, {"sha": "0a51385f6f25fb7958e792477738a61e53444adb", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42bf37f49f49829507be4f2dfd6c5db9b8234b66/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bf37f49f49829507be4f2dfd6c5db9b8234b66/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=42bf37f49f49829507be4f2dfd6c5db9b8234b66", "patch": "@@ -54,6 +54,7 @@ pub mod collapsible_if;\n pub mod copies;\n pub mod cyclomatic_complexity;\n pub mod derive;\n+pub mod doc;\n pub mod drop_ref;\n pub mod entry;\n pub mod enum_clike;\n@@ -223,6 +224,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box new_without_default::NewWithoutDefault);\n     reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(conf.blacklisted_names));\n     reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold));\n+    reg.register_early_lint_pass(box doc::Doc);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         array_indexing::INDEXING_SLICING,\n@@ -265,6 +267,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n         derive::DERIVE_HASH_XOR_EQ,\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n+        doc::DOC_MARKDOWN,\n         drop_ref::DROP_REF,\n         entry::MAP_ENTRY,\n         enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,"}, {"sha": "9eb949a3b68b951d88e91ce2f11a749b5d8b45d1", "filename": "tests/compile-fail/doc.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42bf37f49f49829507be4f2dfd6c5db9b8234b66/tests%2Fcompile-fail%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bf37f49f49829507be4f2dfd6c5db9b8234b66/tests%2Fcompile-fail%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdoc.rs?ref=42bf37f49f49829507be4f2dfd6c5db9b8234b66", "patch": "@@ -0,0 +1,26 @@\n+//! This file tests for the DOC_MARKDOWN lint\n+//~^ ERROR: you should put `DOC_MARKDOWN` between ticks\n+\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(doc_markdown)]\n+\n+/// The foo_bar function does nothing.\n+//~^ ERROR: you should put `foo_bar` between ticks\n+fn foo_bar() {\n+}\n+\n+/// That one tests multiline ticks.\n+/// ```rust\n+/// foo_bar FOO_BAR\n+/// ```\n+fn multiline_ticks() {\n+}\n+\n+/// The `main` function is the entry point of the program. Here it only calls the `foo_bar` and\n+/// `multiline_ticks` functions.\n+fn main() {\n+    foo_bar();\n+    multiline_ticks();\n+}"}]}