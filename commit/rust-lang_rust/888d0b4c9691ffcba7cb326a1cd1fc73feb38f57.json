{"sha": "888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4OGQwYjRjOTY5MWZmY2JhN2NiMzI2YTFjZDFmYzczZmViMzhmNTc=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-25T20:34:03Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-27T18:11:56Z"}, "message": "Derived Eq no longer shows uncovered\n\nThe Eq trait has a special hidden function. MIR `InstrumentCoverage`\nwould add this function to the coverage map, but it is never called, so\nthe `Eq` trait would always appear uncovered.\n\nFixes: #83601\n\nThe fix required creating a new function attribute `no_coverage` to mark\nfunctions that should be ignored by `InstrumentCoverage` and the\ncoverage `mapgen` (during codegen).\n\nWhile testing, I also noticed two other issues:\n\n* spanview debug file output ICEd on a function with no body. The\nworkaround for this is included in this PR.\n* `assert_*!()` macro coverage can appear covered if followed by another\n`assert_*!()` macro. Normally they appear uncovered. I submitted a new\nIssue #84561, and added a coverage test to demonstrate this issue.", "tree": {"sha": "f9fd7d1e8afa1f610aab6081b1bf06a1de3edf75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9fd7d1e8afa1f610aab6081b1bf06a1de3edf75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "html_url": "https://github.com/rust-lang/rust/commit/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1919b3f22706fee0b2c6ac3d42316545900b7734", "url": "https://api.github.com/repos/rust-lang/rust/commits/1919b3f22706fee0b2c6ac3d42316545900b7734", "html_url": "https://github.com/rust-lang/rust/commit/1919b3f22706fee0b2c6ac3d42316545900b7734"}], "stats": {"total": 121, "additions": 119, "deletions": 2}, "files": [{"sha": "53e9681b437fbec71949380caba47b3732faa353", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -16,9 +16,10 @@ pub fn expand_deriving_eq(\n     push: &mut dyn FnMut(Annotatable),\n ) {\n     let inline = cx.meta_word(span, sym::inline);\n+    let no_coverage = cx.meta_word(span, sym::no_coverage);\n     let hidden = rustc_ast::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n     let doc = rustc_ast::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);\n-    let attrs = vec![cx.attribute(inline), cx.attribute(doc)];\n+    let attrs = vec![cx.attribute(inline), cx.attribute(no_coverage), cx.attribute(doc)];\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),"}, {"sha": "1faaa7e86f619ae300031dd51772c7ab990740fa", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -8,6 +8,7 @@ use rustc_codegen_ssa::traits::{ConstMethods, CoverageInfoMethods};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc_llvm::RustString;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::coverage::CodeRegion;\n use rustc_span::Symbol;\n \n@@ -280,6 +281,10 @@ fn add_unused_functions<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n \n     let mut unused_def_ids_by_file: FxHashMap<Symbol, Vec<DefId>> = FxHashMap::default();\n     for &non_codegenned_def_id in all_def_ids.difference(codegenned_def_ids) {\n+        let codegen_fn_attrs = tcx.codegen_fn_attrs(non_codegenned_def_id);\n+        if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_COVERAGE) {\n+            continue;\n+        }\n         // Make sure the non-codegenned (unused) function has a file_name\n         if let Some(non_codegenned_file_name) = tcx.covered_file_name(non_codegenned_def_id) {\n             let def_ids ="}, {"sha": "b35072933d96dce8080abd4fe7e0c499c1d60229", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -264,6 +264,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     // Code generation:\n     ungated!(inline, AssumedUsed, template!(Word, List: \"always|never\")),\n+    ungated!(no_coverage, AssumedUsed, template!(Word)),\n     ungated!(cold, AssumedUsed, template!(Word)),\n     ungated!(no_builtins, AssumedUsed, template!(Word)),\n     ungated!(target_feature, AssumedUsed, template!(List: r#\"enable = \"name\"\"#)),"}, {"sha": "93e7aeaffce3771ea62e15a0a0552b8000107fd6", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -89,6 +89,10 @@ bitflags! {\n         /// #[cmse_nonsecure_entry]: with a TrustZone-M extension, declare a\n         /// function as an entry function from Non-Secure code.\n         const CMSE_NONSECURE_ENTRY      = 1 << 14;\n+        /// `#[no_coverage]`: indicates that the function should be ignored by\n+        /// the MIR `InstrumentCoverage` pass and not added to the coverage map\n+        /// during codegen.\n+        const NO_COVERAGE               = 1 << 15;\n     }\n }\n "}, {"sha": "eaeb44289cfb2097c2c5354cc73ed3eb42d13848", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -23,6 +23,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::hir;\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::ich::StableHashingContext;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::{\n     self, BasicBlock, BasicBlockData, Coverage, SourceInfo, Statement, StatementKind, Terminator,\n@@ -87,6 +88,11 @@ impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n             _ => {}\n         }\n \n+        let codegen_fn_attrs = tcx.codegen_fn_attrs(mir_source.def_id());\n+        if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_COVERAGE) {\n+            return;\n+        }\n+\n         trace!(\"InstrumentCoverage starting for {:?}\", mir_source.def_id());\n         Instrumentor::new(&self.name(), tcx, mir_body).inject_counters();\n         trace!(\"InstrumentCoverage starting for {:?}\", mir_source.def_id());"}, {"sha": "cb6c72b1317b216920e6af487c431b0e904b3bc7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -781,6 +781,7 @@ symbols! {\n         no,\n         no_builtins,\n         no_core,\n+        no_coverage,\n         no_crate_inject,\n         no_debug,\n         no_default_passes,"}, {"sha": "0528f8812f920bac21aa6d70b04badd0294c459f", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -2724,6 +2724,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NAKED;\n         } else if tcx.sess.check_name(attr, sym::no_mangle) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_MANGLE;\n+        } else if tcx.sess.check_name(attr, sym::no_coverage) {\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE;\n         } else if tcx.sess.check_name(attr, sym::rustc_std_internal_symbol) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n         } else if tcx.sess.check_name(attr, sym::used) {"}, {"sha": "1f7ae7e3773c4763ef804ba73217f6857191b79e", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -274,6 +274,7 @@ pub trait Eq: PartialEq<Self> {\n     //\n     // This should never be implemented by hand.\n     #[doc(hidden)]\n+    #[cfg_attr(not(bootstrap), no_coverage)]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn assert_receiver_is_total_eq(&self) {}"}, {"sha": "46f3add9427b60b981ce56c4d6d0544460250e19", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.issue-83601.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-83601.txt", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-83601.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-83601.txt?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -0,0 +1,22 @@\n+    1|       |// Shows that rust-lang/rust/83601 is resolved\n+    2|       |\n+    3|      3|#[derive(Debug, PartialEq, Eq)]\n+                              ^2\n+  ------------------\n+  | <issue_83601::Foo as core::cmp::PartialEq>::eq:\n+  |    3|      2|#[derive(Debug, PartialEq, Eq)]\n+  ------------------\n+  | Unexecuted instantiation: <issue_83601::Foo as core::cmp::PartialEq>::ne\n+  ------------------\n+    4|       |struct Foo(u32);\n+    5|       |\n+    6|      1|fn main() {\n+    7|      1|    let bar = Foo(1);\n+    8|      0|    assert_eq!(bar, Foo(1));\n+    9|      1|    let baz = Foo(0);\n+   10|      0|    assert_ne!(baz, Foo(1));\n+   11|      1|    println!(\"{:?}\", Foo(1));\n+   12|      1|    println!(\"{:?}\", bar);\n+   13|      1|    println!(\"{:?}\", baz);\n+   14|      1|}\n+"}, {"sha": "faafa828817ee71eac21efdd042e0297db093cf3", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.issue-84561.txt", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-84561.txt", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-84561.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-84561.txt?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -0,0 +1,34 @@\n+    1|       |// FIXME(#84561): function-like macros produce unintuitive coverage results.\n+    2|       |// This test demonstrates some of the problems.\n+    3|       |\n+    4|      9|#[derive(Debug, PartialEq, Eq)]\n+                       ^5\n+  ------------------\n+  | <issue_84561::Foo as core::cmp::PartialEq>::eq:\n+  |    4|      9|#[derive(Debug, PartialEq, Eq)]\n+  ------------------\n+  | Unexecuted instantiation: <issue_84561::Foo as core::cmp::PartialEq>::ne\n+  ------------------\n+    5|       |struct Foo(u32);\n+    6|       |\n+    7|      1|fn main() {\n+    8|      1|    let bar = Foo(1);\n+    9|      0|    assert_eq!(bar, Foo(1));\n+   10|      1|    let baz = Foo(0);\n+   11|      0|    assert_ne!(baz, Foo(1));\n+   12|      1|    println!(\"{:?}\", Foo(1));\n+   13|      1|    println!(\"{:?}\", bar);\n+   14|      1|    println!(\"{:?}\", baz);\n+   15|       |\n+   16|      1|    assert_eq!(Foo(1), Foo(1));\n+   17|      1|    assert_ne!(Foo(0), Foo(1));\n+   18|      0|    assert_eq!(Foo(2), Foo(2));\n+   19|      1|    let bar = Foo(1);\n+   20|      1|    assert_ne!(Foo(0), Foo(3));\n+   21|      1|    assert_ne!(Foo(0), Foo(4));\n+   22|      1|    assert_eq!(Foo(3), Foo(3));\n+   23|      0|    assert_ne!(Foo(0), Foo(5));\n+   24|      1|    println!(\"{:?}\", bar);\n+   25|      1|    println!(\"{:?}\", Foo(1));\n+   26|      1|}\n+"}, {"sha": "fc266653349509c511b999abb50f9584401d74e3", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.partial_eq.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -2,7 +2,7 @@\n     2|       |// structure of this test.\n     3|       |\n     4|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n-                       ^0            ^0      ^0 ^0  ^1       ^1 ^0^0\n+                       ^0            ^0      ^0     ^1       ^1 ^0^0\n   ------------------\n   | Unexecuted instantiation: <partial_eq::Version as core::cmp::PartialEq>::ne\n   ------------------"}, {"sha": "0b72a81947cc79f563579142b62e486cb654f964", "filename": "src/test/run-make-fulldeps/coverage/issue-83601.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-83601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-83601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-83601.rs?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -0,0 +1,14 @@\n+// Shows that rust-lang/rust/83601 is resolved\n+\n+#[derive(Debug, PartialEq, Eq)]\n+struct Foo(u32);\n+\n+fn main() {\n+    let bar = Foo(1);\n+    assert_eq!(bar, Foo(1));\n+    let baz = Foo(0);\n+    assert_ne!(baz, Foo(1));\n+    println!(\"{:?}\", Foo(1));\n+    println!(\"{:?}\", bar);\n+    println!(\"{:?}\", baz);\n+}"}, {"sha": "dc183685e3d111b06507fb23830773236f64477b", "filename": "src/test/run-make-fulldeps/coverage/issue-84561.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-84561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-84561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-84561.rs?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -0,0 +1,26 @@\n+// FIXME(#84561): function-like macros produce unintuitive coverage results.\n+// This test demonstrates some of the problems.\n+\n+#[derive(Debug, PartialEq, Eq)]\n+struct Foo(u32);\n+\n+fn main() {\n+    let bar = Foo(1);\n+    assert_eq!(bar, Foo(1));\n+    let baz = Foo(0);\n+    assert_ne!(baz, Foo(1));\n+    println!(\"{:?}\", Foo(1));\n+    println!(\"{:?}\", bar);\n+    println!(\"{:?}\", baz);\n+\n+    assert_eq!(Foo(1), Foo(1));\n+    assert_ne!(Foo(0), Foo(1));\n+    assert_eq!(Foo(2), Foo(2));\n+    let bar = Foo(1);\n+    assert_ne!(Foo(0), Foo(3));\n+    assert_ne!(Foo(0), Foo(4));\n+    assert_eq!(Foo(3), Foo(3));\n+    assert_ne!(Foo(0), Foo(5));\n+    println!(\"{:?}\", bar);\n+    println!(\"{:?}\", Foo(1));\n+}"}]}