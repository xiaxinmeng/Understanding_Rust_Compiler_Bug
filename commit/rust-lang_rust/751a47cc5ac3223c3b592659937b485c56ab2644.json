{"sha": "751a47cc5ac3223c3b592659937b485c56ab2644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MWE0N2NjNWFjMzIyM2MzYjU5MjY1OTkzN2I0ODVjNTZhYjI2NDQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-09-22T02:10:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-09-22T02:15:47Z"}, "message": "Make recursive type verification logic better by allowing it to see through multiple levels of indirection. Still can trigger \"unexpected OpaqueTy\" bugs, but that's better than infinite loops.", "tree": {"sha": "e498e7f75ae014d3461fdf0c409ee29ff35d4087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e498e7f75ae014d3461fdf0c409ee29ff35d4087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/751a47cc5ac3223c3b592659937b485c56ab2644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/751a47cc5ac3223c3b592659937b485c56ab2644", "html_url": "https://github.com/rust-lang/rust/commit/751a47cc5ac3223c3b592659937b485c56ab2644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/751a47cc5ac3223c3b592659937b485c56ab2644/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742b1c57938137f5d9a6676d40affc0c39348321", "url": "https://api.github.com/repos/rust-lang/rust/commits/742b1c57938137f5d9a6676d40affc0c39348321", "html_url": "https://github.com/rust-lang/rust/commit/742b1c57938137f5d9a6676d40affc0c39348321"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "0d1cd94996a5d4344120ec9e630db5ca901f3bd2", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/751a47cc5ac3223c3b592659937b485c56ab2644/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/751a47cc5ac3223c3b592659937b485c56ab2644/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=751a47cc5ac3223c3b592659937b485c56ab2644", "patch": "@@ -2134,7 +2134,11 @@ and vec_sty (word_bits:Il.bits) : Il.scalar_ty =\n   let ptr = Il.ScalarTy (Il.AddrTy Il.OpaqueTy) in\n     Il.AddrTy (Il.StructTy [| word; word; word; ptr |])\n \n-and referent_type (cx:ctxt) (t:Ast.ty) : Il.referent_ty =\n+and referent_type\n+    ?parent_tag:parent_tag\n+    (cx:ctxt)\n+    (t:Ast.ty)\n+    : Il.referent_ty =\n   let s t = Il.ScalarTy t in\n   let v b = Il.ValTy b in\n   let p t = Il.AddrTy t in\n@@ -2149,12 +2153,7 @@ and referent_type (cx:ctxt) (t:Ast.ty) : Il.referent_ty =\n   let tag ttag =\n     let n = get_n_tag_tups cx ttag in\n     let union =\n-      let rty t =\n-        match t with\n-            Ast.TY_box (Ast.TY_tag dst_tag) when is_back_edge ttag dst_tag ->\n-              sp (Il.StructTy [| word; Il.OpaqueTy |])\n-          | _ -> referent_type cx t\n-      in\n+      let rty t = referent_type ~parent_tag:ttag cx t in\n       let tup ttup = Il.StructTy (Array.map rty ttup) in\n         Array.init n (fun i -> tup (get_nth_tag_tup cx ttag i))\n     in\n@@ -2194,7 +2193,13 @@ and referent_type (cx:ctxt) (t:Ast.ty) : Il.referent_ty =\n       | Ast.TY_fn _ -> fn_rty cx false\n       | Ast.TY_obj _ -> obj_rty word_bits\n \n-      | Ast.TY_tag ttag -> tag ttag\n+      | Ast.TY_tag ttag ->\n+          begin\n+            match parent_tag with\n+                Some parent_tag when is_back_edge ttag parent_tag ->\n+                  Il.OpaqueTy\n+              | _ -> tag ttag\n+          end\n \n       | Ast.TY_chan _\n       | Ast.TY_port _\n@@ -2205,14 +2210,15 @@ and referent_type (cx:ctxt) (t:Ast.ty) : Il.referent_ty =\n       | Ast.TY_native _ -> ptr\n \n       | Ast.TY_box t ->\n-          sp (Il.StructTy [| word; referent_type cx t |])\n+          sp (Il.StructTy\n+            [| word; referent_type ?parent_tag:parent_tag cx t |])\n \n-      | Ast.TY_mutable t -> referent_type cx t\n+      | Ast.TY_mutable t -> referent_type ?parent_tag:parent_tag cx t\n \n       | Ast.TY_param (i, _) -> Il.ParamTy i\n \n       | Ast.TY_named _ -> bug () \"named type in referent_type\"\n-      | Ast.TY_constrained (t, _) -> referent_type cx t\n+      | Ast.TY_constrained (t, _) -> referent_type ?parent_tag:parent_tag cx t\n \n and slot_referent_type (cx:ctxt) (sl:Ast.slot) : Il.referent_ty =\n   let s t = Il.ScalarTy t in"}, {"sha": "69fc8cc32180d84e591d226bab5d373507ac4f1e", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/751a47cc5ac3223c3b592659937b485c56ab2644/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/751a47cc5ac3223c3b592659937b485c56ab2644/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=751a47cc5ac3223c3b592659937b485c56ab2644", "patch": "@@ -1010,7 +1010,7 @@ let populate_tag_graph_node (cx:Semant.ctxt) (id:Common.opaque_id) (n:int) =\n       | Ast.TY_rec ty_rec ->\n           Array.iter (fun (_, ty) -> add_ty ty) ty_rec\n       | Ast.TY_fn ty_fn -> add_ty_fn ty_fn\n-      | Ast.TY_vec ty | Ast.TY_chan ty | Ast.TY_port ty | Ast.TY_mutable ty\n+      | Ast.TY_chan ty | Ast.TY_port ty | Ast.TY_mutable ty\n           | Ast.TY_constrained (ty, _) -> add_ty ty\n       | Ast.TY_obj (_, ty_fns) ->\n           Hashtbl.iter (fun _ ty_fn -> add_ty_fn ty_fn) ty_fns"}]}