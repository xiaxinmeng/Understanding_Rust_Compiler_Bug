{"sha": "322c7b6269f0a2147b85f4cc38006afca22a0d31", "node_id": "C_kwDOAAsO6NoAKDMyMmM3YjYyNjlmMGEyMTQ3Yjg1ZjRjYzM4MDA2YWZjYTIyYTBkMzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-19T02:17:44Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-19T03:45:47Z"}, "message": "Constrain const vars to error if const types are mismatched", "tree": {"sha": "01d060e004b85930177f80177bfaf5d542821fb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01d060e004b85930177f80177bfaf5d542821fb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/322c7b6269f0a2147b85f4cc38006afca22a0d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/322c7b6269f0a2147b85f4cc38006afca22a0d31", "html_url": "https://github.com/rust-lang/rust/commit/322c7b6269f0a2147b85f4cc38006afca22a0d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/322c7b6269f0a2147b85f4cc38006afca22a0d31/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9bb3ea368b2412531a3e8c07ba73d1dd690134", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9bb3ea368b2412531a3e8c07ba73d1dd690134", "html_url": "https://github.com/rust-lang/rust/commit/ab9bb3ea368b2412531a3e8c07ba73d1dd690134"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "4503af03ca341200fadd47c843d6e9c543bcce97", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/322c7b6269f0a2147b85f4cc38006afca22a0d31/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322c7b6269f0a2147b85f4cc38006afca22a0d31/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=322c7b6269f0a2147b85f4cc38006afca22a0d31", "patch": "@@ -189,10 +189,19 @@ impl<'tcx> InferCtxt<'tcx> {\n         // the expected const's type. Specifically, we don't want const infer vars\n         // to do any type shapeshifting before and after resolution.\n         if let Err(guar) = compatible_types {\n-            return Ok(self.tcx.const_error_with_guaranteed(\n-                if relation.a_is_expected() { a.ty() } else { b.ty() },\n-                guar,\n-            ));\n+            // HACK: equating both sides with `[const error]` eagerly prevents us\n+            // from leaving unconstrained inference vars during things like impl\n+            // matching in the solver.\n+            let a_error = self.tcx.const_error_with_guaranteed(a.ty(), guar);\n+            if let ty::ConstKind::Infer(InferConst::Var(vid)) = a.kind() {\n+                return self.unify_const_variable(vid, a_error);\n+            }\n+            let b_error = self.tcx.const_error_with_guaranteed(b.ty(), guar);\n+            if let ty::ConstKind::Infer(InferConst::Var(vid)) = b.kind() {\n+                return self.unify_const_variable(vid, b_error);\n+            }\n+\n+            return Ok(if relation.a_is_expected() { a_error } else { b_error });\n         }\n \n         match (a.kind(), b.kind()) {"}, {"sha": "e13dfbacd242225c5eb374973abe9b1c3db57ca2", "filename": "tests/ui/const-generics/bad-subst-const-kind.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/322c7b6269f0a2147b85f4cc38006afca22a0d31/tests%2Fui%2Fconst-generics%2Fbad-subst-const-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322c7b6269f0a2147b85f4cc38006afca22a0d31/tests%2Fui%2Fconst-generics%2Fbad-subst-const-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fbad-subst-const-kind.rs?ref=322c7b6269f0a2147b85f4cc38006afca22a0d31", "patch": "@@ -0,0 +1,13 @@\n+// incremental\n+#![crate_type = \"lib\"]\n+\n+trait Q {\n+    const ASSOC: usize;\n+}\n+\n+impl<const N: u64> Q for [u8; N] {\n+    //~^ ERROR mismatched types\n+    const ASSOC: usize = 1;\n+}\n+\n+pub fn test() -> [u8; <[u8; 13] as Q>::ASSOC] { todo!() }"}, {"sha": "bd24f9140e4ea72912355109b1f662bb57dfb0cc", "filename": "tests/ui/const-generics/bad-subst-const-kind.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/322c7b6269f0a2147b85f4cc38006afca22a0d31/tests%2Fui%2Fconst-generics%2Fbad-subst-const-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/322c7b6269f0a2147b85f4cc38006afca22a0d31/tests%2Fui%2Fconst-generics%2Fbad-subst-const-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fbad-subst-const-kind.stderr?ref=322c7b6269f0a2147b85f4cc38006afca22a0d31", "patch": "@@ -0,0 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/bad-subst-const-kind.rs:8:31\n+   |\n+LL | impl<const N: u64> Q for [u8; N] {\n+   |                               ^ expected `usize`, found `u64`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6bad87d3d374e9ab44bca2ce9781679da3bc9fe0", "filename": "tests/ui/specialization/min_specialization/bad-const-wf-doesnt-specialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/322c7b6269f0a2147b85f4cc38006afca22a0d31/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322c7b6269f0a2147b85f4cc38006afca22a0d31/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.rs?ref=322c7b6269f0a2147b85f4cc38006afca22a0d31", "patch": "@@ -2,11 +2,11 @@\n \n // An impl that has an erroneous const substitution should not specialize one\n // that is well-formed.\n-\n+#[derive(Clone)]\n struct S<const L: usize>;\n \n impl<const N: i32> Copy for S<N> {}\n impl<const M: usize> Copy for S<M> {}\n-//~^ ERROR conflicting implementations of trait `Copy` for type `S<_>`\n+//~^ ERROR conflicting implementations of trait `Copy` for type `S<[const error]>`\n \n fn main() {}"}, {"sha": "35848db9b56bb80a44bf35eedf5e36d54630899c", "filename": "tests/ui/specialization/min_specialization/bad-const-wf-doesnt-specialize.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/322c7b6269f0a2147b85f4cc38006afca22a0d31/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/322c7b6269f0a2147b85f4cc38006afca22a0d31/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr?ref=322c7b6269f0a2147b85f4cc38006afca22a0d31", "patch": "@@ -1,10 +1,10 @@\n-error[E0119]: conflicting implementations of trait `Copy` for type `S<_>`\n+error[E0119]: conflicting implementations of trait `Copy` for type `S<[const error]>`\n   --> $DIR/bad-const-wf-doesnt-specialize.rs:9:1\n    |\n LL | impl<const N: i32> Copy for S<N> {}\n    | -------------------------------- first implementation here\n LL | impl<const M: usize> Copy for S<M> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `S<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `S<[const error]>`\n \n error: aborting due to previous error\n "}]}