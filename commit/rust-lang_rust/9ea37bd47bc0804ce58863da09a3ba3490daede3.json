{"sha": "9ea37bd47bc0804ce58863da09a3ba3490daede3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYTM3YmQ0N2JjMDgwNGNlNTg4NjNkYTA5YTNiYTM0OTBkYWVkZTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-25T00:09:03Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-25T00:09:03Z"}, "message": "Fix residual nonsense of storing crate-rel displacements in a closure pair (made it impossible to pass between crates, of course).", "tree": {"sha": "d934670c51cb1d8bcf6c745b351d7728d99cd1c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d934670c51cb1d8bcf6c745b351d7728d99cd1c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea37bd47bc0804ce58863da09a3ba3490daede3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea37bd47bc0804ce58863da09a3ba3490daede3", "html_url": "https://github.com/rust-lang/rust/commit/9ea37bd47bc0804ce58863da09a3ba3490daede3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea37bd47bc0804ce58863da09a3ba3490daede3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b117f936dc7c21a32a14587103fc066990f06cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b117f936dc7c21a32a14587103fc066990f06cf", "html_url": "https://github.com/rust-lang/rust/commit/1b117f936dc7c21a32a14587103fc066990f06cf"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "e54ff5911f6cfffa7bc94607b67659a27703f001", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ea37bd47bc0804ce58863da09a3ba3490daede3/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9ea37bd47bc0804ce58863da09a3ba3490daede3/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=9ea37bd47bc0804ce58863da09a3ba3490daede3", "patch": "@@ -1541,13 +1541,6 @@ let trans_visitor\n           arg_slots arg_bound_flags;\n         iflog (fun _ -> annotate \"call through to closure target fn\");\n \n-        (* \n-         * Closures, unlike first-class [disp,*binding] pairs, contain\n-         * a fully-resolved target pointer, not a displacement. So we\n-         * don't want to use callee_fn_ptr or the like to access the\n-         * contents. We just call through the cell directly.\n-         *)\n-\n         call_code (code_of_cell closure_target_fn_cell);\n         trans_glue_frame_exit fix spill g\n \n@@ -3420,7 +3413,7 @@ let trans_visitor\n     let dst_pair_binding_cell =\n       get_element_ptr dst_cell Abi.fn_field_closure\n     in\n-      mov dst_pair_item_cell (crate_rel_imm fix);\n+      mov dst_pair_item_cell (reify_ptr (Il.ImmPtr (fix, Il.CodeTy)));\n       mov dst_pair_binding_cell zero\n \n \n@@ -3698,7 +3691,7 @@ let trans_visitor\n         (Il.ScalarTy (Il.AddrTy (closure_rty)))\n     in\n       iflog (fun _ -> annotate \"assign glue-code to fn slot of pair\");\n-      mov fn_cell (crate_rel_imm glue_fixup);\n+      mov fn_cell (reify_ptr (Il.ImmPtr (glue_fixup, Il.CodeTy)));\n       iflog (fun _ ->\n                annotate \"heap-allocate closure to binding slot of pair\");\n       trans_malloc closure_cell (imm closure_sz) zero;\n@@ -4005,10 +3998,9 @@ let trans_visitor\n         CALL_direct\n       | CALL_vtbl -> fptr\n       | CALL_indirect ->\n-          (* fptr is a pair [disp, binding*] *)\n+          (* fptr is a pair [fptr, binding*] *)\n           let pair_cell = need_cell (reify_ptr fptr) in\n-          let disp_cell = get_element_ptr pair_cell Abi.fn_field_thunk in\n-            Il.Cell (crate_rel_to_ptr (Il.Cell disp_cell) Il.CodeTy)\n+            Il.Cell (get_element_ptr pair_cell Abi.fn_field_thunk)\n \n   and callee_binding_ptr\n       (pair_lval:Ast.lval)"}]}