{"sha": "6c9abfa0f3e4cfb458362d4ece0641542f99b22d", "node_id": "C_kwDOAAsO6NoAKDZjOWFiZmEwZjNlNGNmYjQ1ODM2MmQ0ZWNlMDY0MTU0MmY5OWIyMmQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T00:19:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T21:12:07Z"}, "message": "slightly cleaner, if more verbose, vtable handling in codegen backends", "tree": {"sha": "9e7bfa310c74ac5f2fd9b504a2109a8e1157e7e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7bfa310c74ac5f2fd9b504a2109a8e1157e7e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c9abfa0f3e4cfb458362d4ece0641542f99b22d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9abfa0f3e4cfb458362d4ece0641542f99b22d", "html_url": "https://github.com/rust-lang/rust/commit/6c9abfa0f3e4cfb458362d4ece0641542f99b22d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c9abfa0f3e4cfb458362d4ece0641542f99b22d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1b172224c0bc88ae2132726941ab267877a95b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b172224c0bc88ae2132726941ab267877a95b9", "html_url": "https://github.com/rust-lang/rust/commit/a1b172224c0bc88ae2132726941ab267877a95b9"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "b5a143485893fb5897f0b46c39162ad8a2387456", "filename": "src/constant.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6c9abfa0f3e4cfb458362d4ece0641542f99b22d/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9abfa0f3e4cfb458362d4ece0641542f99b22d/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=6c9abfa0f3e4cfb458362d4ece0641542f99b22d", "patch": "@@ -195,11 +195,6 @@ pub(crate) fn codegen_const_value<'tcx>(\n             }\n             Scalar::Ptr(ptr, _size) => {\n                 let (alloc_id, offset) = ptr.into_parts(); // we know the `offset` is relative\n-                // For vtables, get the underlying data allocation.\n-                let alloc_id = match fx.tcx.global_alloc(alloc_id) {\n-                    GlobalAlloc::VTable(ty, trait_ref) => fx.tcx.vtable_allocation((ty, trait_ref)),\n-                    _ => alloc_id,\n-                };\n                 let base_addr = match fx.tcx.global_alloc(alloc_id) {\n                     GlobalAlloc::Memory(alloc) => {\n                         let data_id = data_id_for_alloc_id(\n@@ -221,7 +216,20 @@ pub(crate) fn codegen_const_value<'tcx>(\n                             fx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n                         fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n                     }\n-                    GlobalAlloc::VTable(..) => bug!(\"vtables are already handled\"),\n+                    GlobalAlloc::VTable(ty, trait_ref) => {\n+                        let alloc_id = fx.tcx.vtable_allocation((ty, trait_ref));\n+                        let alloc = fx.tcx.global_alloc(alloc_id).unwrap_memory();\n+                        // FIXME: factor this common code with the `Memory` arm into a function?\n+                        let data_id = data_id_for_alloc_id(\n+                            &mut fx.constants_cx,\n+                            fx.module,\n+                            alloc_id,\n+                            alloc.inner().mutability,\n+                        );\n+                        let local_data_id =\n+                            fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+                        fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n+                    }\n                     GlobalAlloc::Static(def_id) => {\n                         assert!(fx.tcx.is_static(def_id));\n                         let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);"}]}