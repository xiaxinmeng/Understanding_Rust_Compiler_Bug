{"sha": "0102127963098b7656f0213206908d6597018d5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMDIxMjc5NjMwOThiNzY1NmYwMjEzMjA2OTA4ZDY1OTcwMThkNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-19T01:23:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-19T01:23:32Z"}, "message": "Auto merge of #38140 - jseyfried:proc_macro_visibility, r=nrc\n\nRequire `#[proc_macro_derive]` functions to be `pub`\n\nr? @nrc", "tree": {"sha": "3f46041fe6e2e8688b3aa3e8f5b92c7051f13631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f46041fe6e2e8688b3aa3e8f5b92c7051f13631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0102127963098b7656f0213206908d6597018d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0102127963098b7656f0213206908d6597018d5f", "html_url": "https://github.com/rust-lang/rust/commit/0102127963098b7656f0213206908d6597018d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0102127963098b7656f0213206908d6597018d5f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "html_url": "https://github.com/rust-lang/rust/commit/71c06a56a120a0d5e3b224105ee3e6754f83e5fa"}, {"sha": "16052546f78572b7fae060f4b7c454acd0ff5e5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/16052546f78572b7fae060f4b7c454acd0ff5e5e", "html_url": "https://github.com/rust-lang/rust/commit/16052546f78572b7fae060f4b7c454acd0ff5e5e"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "5323ace79d8493f9366f45120ad657fdee18701e", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0102127963098b7656f0213206908d6597018d5f/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0102127963098b7656f0213206908d6597018d5f/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=0102127963098b7656f0213206908d6597018d5f", "patch": "@@ -108,6 +108,8 @@ impl<'a> CollectCustomDerives<'a> {\n \n impl<'a> Visitor<'a> for CollectCustomDerives<'a> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n+        let mut attrs = item.attrs.iter().filter(|a| a.check_name(\"proc_macro_derive\"));\n+\n         // First up, make sure we're checking a bare function. If we're not then\n         // we're just not interested in this item.\n         //\n@@ -117,10 +119,7 @@ impl<'a> Visitor<'a> for CollectCustomDerives<'a> {\n             ast::ItemKind::Fn(..) => {}\n             _ => {\n                 // Check for invalid use of proc_macro_derive\n-                let attr = item.attrs.iter()\n-                    .filter(|a| a.check_name(\"proc_macro_derive\"))\n-                    .next();\n-                if let Some(attr) = attr {\n+                if let Some(attr) = attrs.next() {\n                     self.handler.span_err(attr.span(),\n                                           \"the `#[proc_macro_derive]` \\\n                                           attribute may only be used \\\n@@ -132,8 +131,6 @@ impl<'a> Visitor<'a> for CollectCustomDerives<'a> {\n             }\n         }\n \n-        let mut attrs = item.attrs.iter()\n-                            .filter(|a| a.check_name(\"proc_macro_derive\"));\n         let attr = match attrs.next() {\n             Some(attr) => attr,\n             None => {\n@@ -227,16 +224,20 @@ impl<'a> Visitor<'a> for CollectCustomDerives<'a> {\n             Vec::new()\n         };\n \n-        if self.in_root {\n+        if self.in_root && item.vis == ast::Visibility::Public {\n             self.derives.push(CustomDerive {\n                 span: item.span,\n                 trait_name: trait_name,\n                 function_name: item.ident,\n                 attrs: proc_attrs,\n             });\n         } else {\n-            let msg = \"functions tagged with `#[proc_macro_derive]` must \\\n-                       currently reside in the root of the crate\";\n+            let msg = if !self.in_root {\n+                \"functions tagged with `#[proc_macro_derive]` must \\\n+                 currently reside in the root of the crate\"\n+            } else {\n+                \"functions tagged with `#[proc_macro_derive]` must be `pub`\"\n+            };\n             self.handler.span_err(item.span, msg);\n         }\n "}, {"sha": "2bf25892c44d223e7860d103b4d95811a599866c", "filename": "src/test/compile-fail-fulldeps/proc-macro/pub-at-crate-root.rs", "status": "renamed", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0102127963098b7656f0213206908d6597018d5f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fpub-at-crate-root.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0102127963098b7656f0213206908d6597018d5f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fpub-at-crate-root.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fpub-at-crate-root.rs?ref=0102127963098b7656f0213206908d6597018d5f", "patch": "@@ -23,3 +23,8 @@ pub mod a { //~ `proc-macro` crate types cannot export any items\n     }\n }\n \n+#[proc_macro_derive(B)]\n+fn bar(a: proc_macro::TokenStream) -> proc_macro::TokenStream {\n+//~^ ERROR: functions tagged with `#[proc_macro_derive]` must be `pub`\n+    a\n+}", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/at-the-root.rs"}, {"sha": "b7df9489dff30f46529df1aeacb8badd0b3dbc56", "filename": "src/test/compile-fail-fulldeps/proc-macro/signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0102127963098b7656f0213206908d6597018d5f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0102127963098b7656f0213206908d6597018d5f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs?ref=0102127963098b7656f0213206908d6597018d5f", "patch": "@@ -15,7 +15,7 @@\n extern crate proc_macro;\n \n #[proc_macro_derive(A)]\n-unsafe extern fn foo(a: i32, b: u32) -> u32 {\n+pub unsafe extern fn foo(a: i32, b: u32) -> u32 {\n     //~^ ERROR: mismatched types\n     //~| NOTE: expected normal fn, found unsafe fn\n     //~| NOTE: expected type `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`"}]}