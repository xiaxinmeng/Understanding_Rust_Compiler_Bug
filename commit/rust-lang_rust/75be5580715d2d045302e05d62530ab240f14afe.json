{"sha": "75be5580715d2d045302e05d62530ab240f14afe", "node_id": "C_kwDOAAsO6NoAKDc1YmU1NTgwNzE1ZDJkMDQ1MzAyZTA1ZDYyNTMwYWIyNDBmMTRhZmU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-28T01:52:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-28T01:52:01Z"}, "message": "Rollup merge of #110898 - m-ou-se:remove-unused-thread-local-key, r=cuviper\n\nRemove unused std::sys_common::thread_local_key::Key\n\nPart of https://github.com/rust-lang/rust/issues/110897\n\nThis `Key` type seems unused. Let's remove it and see if anything explodes. :)", "tree": {"sha": "5fb71dbec064a016404443bc3c3a733dfe25bfb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fb71dbec064a016404443bc3c3a733dfe25bfb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75be5580715d2d045302e05d62530ab240f14afe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkSybBCRBK7hj4Ov3rIwAAs3sIAGu1/bm7Ad4yh9PYAI9zh7GZ\nSdmy8gOCJ6c24FsZbE2pM2apuCjcxKZ10WShkSNqPTaWHTGX88aA0eBzDc9/O7Ij\nDhGut6M2fKl1zcJsJ2atoFQoQZTFAmkvt9Id7qvVLgjhmY7Rz1uhSbS3BLkgSIR9\n/eg67idC0pxTpJOtICRKBsBmpan1z6kLSv/yTNgvixBjWP5hv8fa882f/HDE8KWh\nZaLR/XAfBKBBOR/8dj4tZkvYeZAzU6fOHEquUyKkmWKznTNUpBgco6HbQPNRS3PO\nDNZg97X2ocB4aR66P0I5us1RvlQ7MSRcRTPpo0xk8j6Wqq9gXMbpcIu1H7MeYnk=\n=Z4/e\n-----END PGP SIGNATURE-----\n", "payload": "tree 5fb71dbec064a016404443bc3c3a733dfe25bfb1\nparent c464be96f8dd847477dd00ba6e63977625e5fafe\nparent 0b3073abb1b4f783deaf3860fe745c586ae2bded\nauthor Yuki Okushi <jtitor@2k36.org> 1682646721 +0900\ncommitter GitHub <noreply@github.com> 1682646721 +0900\n\nRollup merge of #110898 - m-ou-se:remove-unused-thread-local-key, r=cuviper\n\nRemove unused std::sys_common::thread_local_key::Key\n\nPart of https://github.com/rust-lang/rust/issues/110897\n\nThis `Key` type seems unused. Let's remove it and see if anything explodes. :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75be5580715d2d045302e05d62530ab240f14afe", "html_url": "https://github.com/rust-lang/rust/commit/75be5580715d2d045302e05d62530ab240f14afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75be5580715d2d045302e05d62530ab240f14afe/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c464be96f8dd847477dd00ba6e63977625e5fafe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c464be96f8dd847477dd00ba6e63977625e5fafe", "html_url": "https://github.com/rust-lang/rust/commit/c464be96f8dd847477dd00ba6e63977625e5fafe"}, {"sha": "0b3073abb1b4f783deaf3860fe745c586ae2bded", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3073abb1b4f783deaf3860fe745c586ae2bded", "html_url": "https://github.com/rust-lang/rust/commit/0b3073abb1b4f783deaf3860fe745c586ae2bded"}], "stats": {"total": 81, "additions": 1, "deletions": 80}, "files": [{"sha": "204834984a227b7acf1218b6182b19e87eb05be7", "filename": "library/std/src/sys_common/thread_local_key.rs", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/75be5580715d2d045302e05d62530ab240f14afe/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75be5580715d2d045302e05d62530ab240f14afe/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs?ref=75be5580715d2d045302e05d62530ab240f14afe", "patch": "@@ -87,31 +87,6 @@ pub struct StaticKey {\n     dtor: Option<unsafe extern \"C\" fn(*mut u8)>,\n }\n \n-/// A type for a safely managed OS-based TLS slot.\n-///\n-/// This type allocates an OS TLS key when it is initialized and will deallocate\n-/// the key when it falls out of scope. When compared with `StaticKey`, this\n-/// type is entirely safe to use.\n-///\n-/// Implementations will likely, however, contain unsafe code as this type only\n-/// operates on `*mut u8`, a raw pointer.\n-///\n-/// # Examples\n-///\n-/// ```ignore (cannot-doctest-private-modules)\n-/// use tls::os::Key;\n-///\n-/// let key = Key::new(None);\n-/// assert!(key.get().is_null());\n-/// key.set(1 as *mut u8);\n-/// assert!(!key.get().is_null());\n-///\n-/// drop(key); // deallocate this TLS slot.\n-/// ```\n-pub struct Key {\n-    key: imp::Key,\n-}\n-\n /// Constant initialization value for static TLS keys.\n ///\n /// This value specifies no destructor by default.\n@@ -194,39 +169,3 @@ impl StaticKey {\n         }\n     }\n }\n-\n-impl Key {\n-    /// Creates a new managed OS TLS key.\n-    ///\n-    /// This key will be deallocated when the key falls out of scope.\n-    ///\n-    /// The argument provided is an optionally-specified destructor for the\n-    /// value of this TLS key. When a thread exits and the value for this key\n-    /// is non-null the destructor will be invoked. The TLS value will be reset\n-    /// to null before the destructor is invoked.\n-    ///\n-    /// Note that the destructor will not be run when the `Key` goes out of\n-    /// scope.\n-    #[inline]\n-    pub fn new(dtor: Option<unsafe extern \"C\" fn(*mut u8)>) -> Key {\n-        Key { key: unsafe { imp::create(dtor) } }\n-    }\n-\n-    /// See StaticKey::get\n-    #[inline]\n-    pub fn get(&self) -> *mut u8 {\n-        unsafe { imp::get(self.key) }\n-    }\n-\n-    /// See StaticKey::set\n-    #[inline]\n-    pub fn set(&self, val: *mut u8) {\n-        unsafe { imp::set(self.key, val) }\n-    }\n-}\n-\n-impl Drop for Key {\n-    fn drop(&mut self) {\n-        unsafe { imp::destroy(self.key) }\n-    }\n-}"}, {"sha": "6a44c65d91869fc7b3034f1d1c70ab2031159dc9", "filename": "library/std/src/sys_common/thread_local_key/tests.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/75be5580715d2d045302e05d62530ab240f14afe/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75be5580715d2d045302e05d62530ab240f14afe/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key%2Ftests.rs?ref=75be5580715d2d045302e05d62530ab240f14afe", "patch": "@@ -1,24 +1,6 @@\n-use super::{Key, StaticKey};\n+use super::StaticKey;\n use core::ptr;\n \n-fn assert_sync<T: Sync>() {}\n-fn assert_send<T: Send>() {}\n-\n-#[test]\n-fn smoke() {\n-    assert_sync::<Key>();\n-    assert_send::<Key>();\n-\n-    let k1 = Key::new(None);\n-    let k2 = Key::new(None);\n-    assert!(k1.get().is_null());\n-    assert!(k2.get().is_null());\n-    k1.set(ptr::invalid_mut(1));\n-    k2.set(ptr::invalid_mut(2));\n-    assert_eq!(k1.get() as usize, 1);\n-    assert_eq!(k2.get() as usize, 2);\n-}\n-\n #[test]\n fn statik() {\n     static K1: StaticKey = StaticKey::new(None);"}]}