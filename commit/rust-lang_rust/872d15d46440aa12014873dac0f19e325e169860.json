{"sha": "872d15d46440aa12014873dac0f19e325e169860", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MmQxNWQ0NjQ0MGFhMTIwMTQ4NzNkYWMwZjE5ZTMyNWUxNjk4NjA=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-03T17:40:20Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-06T02:05:07Z"}, "message": "std: Implement RandomAccessIterator for Invert", "tree": {"sha": "29aa30aa53d7d466d6f6ee2b41852cb5de6de406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29aa30aa53d7d466d6f6ee2b41852cb5de6de406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/872d15d46440aa12014873dac0f19e325e169860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/872d15d46440aa12014873dac0f19e325e169860", "html_url": "https://github.com/rust-lang/rust/commit/872d15d46440aa12014873dac0f19e325e169860", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/872d15d46440aa12014873dac0f19e325e169860/comments", "author": null, "committer": null, "parents": [{"sha": "c5e4c55989f4e405e6c0d14347391172413d53d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e4c55989f4e405e6c0d14347391172413d53d3", "html_url": "https://github.com/rust-lang/rust/commit/c5e4c55989f4e405e6c0d14347391172413d53d3"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "372afd7402d45c3eeea3e28cdfc1e3ddd1cdb683", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/872d15d46440aa12014873dac0f19e325e169860/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872d15d46440aa12014873dac0f19e325e169860/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=872d15d46440aa12014873dac0f19e325e169860", "patch": "@@ -106,6 +106,16 @@ impl<A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Invert<T> {\n     fn next_back(&mut self) -> Option<A> { self.iter.next() }\n }\n \n+impl<A, T: DoubleEndedIterator<A> + RandomAccessIterator<A>> RandomAccessIterator<A>\n+    for Invert<T> {\n+    #[inline]\n+    fn indexable(&self) -> uint { self.iter.indexable() }\n+    #[inline]\n+    fn idx(&self, index: uint) -> Option<A> {\n+        self.iter.idx(self.indexable() - index - 1)\n+    }\n+}\n+\n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n /// implementations of the `Iterator` trait.\n ///\n@@ -2017,6 +2027,17 @@ mod tests {\n         check_randacc_iter(xs.iter().enumerate(), xs.len());\n     }\n \n+    #[test]\n+    fn test_random_access_invert() {\n+        let xs = [1, 2, 3, 4, 5];\n+        check_randacc_iter(xs.iter().invert(), xs.len());\n+        let mut it = xs.iter().invert();\n+        it.next();\n+        it.next_back();\n+        it.next();\n+        check_randacc_iter(it, xs.len() - 3);\n+    }\n+\n     #[test]\n     fn test_random_access_zip() {\n         let xs = [1, 2, 3, 4, 5];"}]}