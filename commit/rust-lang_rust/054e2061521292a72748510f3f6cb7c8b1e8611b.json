{"sha": "054e2061521292a72748510f3f6cb7c8b1e8611b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NGUyMDYxNTIxMjkyYTcyNzQ4NTEwZjNmNmNiN2M4YjFlODYxMWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-15T09:43:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-15T09:43:08Z"}, "message": "Merge #7272\n\n7272: Group file source edits by FileId r=matklad a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "c1660a95eae4aaa57ea5546de0d81678d49f68f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1660a95eae4aaa57ea5546de0d81678d49f68f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/054e2061521292a72748510f3f6cb7c8b1e8611b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAWOsCRBK7hj4Ov3rIwAAdHIIAGlboQvbNmVPpB5Tvc3z+yud\njFWsMQYCBSBTpJGbF5q5oyMARNu41eVWTIF3W8tPItebbobYlNeA2uaqwukURsys\n4kaE8qwNsKioqM80CXH+jQfJVx4nVzmX+MMhuuzuXUgyJPJ7VPobxjOCQAIHKUWL\nfHBbjNE0KSUPATAKbBb8DLGqusHEncl+bSyZxJhZeKk2a3NAseekg7p6wKRwafAN\n9fHio2T4Bd+cdjPOzCT4lkeiOUzI/bP857qRFPbq8YGOzGUFxsSoL1djIHzpre8i\n78yZIT9sCPdIV4TQiaFtEgVck8VlNPoMeUmr6wxYnXvrS0yRXJcjtZmww7OmgpY=\n=sGkI\n-----END PGP SIGNATURE-----\n", "payload": "tree c1660a95eae4aaa57ea5546de0d81678d49f68f1\nparent dc48de28d8460903dbfc9454c8cae0e17d62e9c1\nparent d5095329a1c12e93653d8de4a93f0b4f5cad4c6e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610703788 +0000\ncommitter GitHub <noreply@github.com> 1610703788 +0000\n\nMerge #7272\n\n7272: Group file source edits by FileId r=matklad a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/054e2061521292a72748510f3f6cb7c8b1e8611b", "html_url": "https://github.com/rust-lang/rust/commit/054e2061521292a72748510f3f6cb7c8b1e8611b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/054e2061521292a72748510f3f6cb7c8b1e8611b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc48de28d8460903dbfc9454c8cae0e17d62e9c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc48de28d8460903dbfc9454c8cae0e17d62e9c1", "html_url": "https://github.com/rust-lang/rust/commit/dc48de28d8460903dbfc9454c8cae0e17d62e9c1"}, {"sha": "d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "html_url": "https://github.com/rust-lang/rust/commit/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e"}], "stats": {"total": 507, "additions": 240, "deletions": 267}, "files": [{"sha": "321fe77f37b3a379d3ce1b9d1cd69e42733bd5ad", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -10,7 +10,7 @@ use ide_db::{\n };\n use ide_db::{\n     label::Label,\n-    source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n+    source_change::{FileSystemEdit, SourceChange},\n     RootDatabase,\n };\n use syntax::{\n@@ -180,20 +180,12 @@ impl Assists {\n pub(crate) struct AssistBuilder {\n     edit: TextEditBuilder,\n     file_id: FileId,\n-    is_snippet: bool,\n-    source_file_edits: Vec<SourceFileEdit>,\n-    file_system_edits: Vec<FileSystemEdit>,\n+    source_change: SourceChange,\n }\n \n impl AssistBuilder {\n     pub(crate) fn new(file_id: FileId) -> AssistBuilder {\n-        AssistBuilder {\n-            edit: TextEdit::builder(),\n-            file_id,\n-            is_snippet: false,\n-            source_file_edits: Vec::default(),\n-            file_system_edits: Vec::default(),\n-        }\n+        AssistBuilder { edit: TextEdit::builder(), file_id, source_change: SourceChange::default() }\n     }\n \n     pub(crate) fn edit_file(&mut self, file_id: FileId) {\n@@ -204,15 +196,7 @@ impl AssistBuilder {\n     fn commit(&mut self) {\n         let edit = mem::take(&mut self.edit).finish();\n         if !edit.is_empty() {\n-            match self.source_file_edits.binary_search_by_key(&self.file_id, |edit| edit.file_id) {\n-                Ok(idx) => self.source_file_edits[idx]\n-                    .edit\n-                    .union(edit)\n-                    .expect(\"overlapping edits for same file\"),\n-                Err(idx) => self\n-                    .source_file_edits\n-                    .insert(idx, SourceFileEdit { file_id: self.file_id, edit }),\n-            }\n+            self.source_change.insert_source_edit(self.file_id, edit);\n         }\n     }\n \n@@ -231,7 +215,7 @@ impl AssistBuilder {\n         offset: TextSize,\n         snippet: impl Into<String>,\n     ) {\n-        self.is_snippet = true;\n+        self.source_change.is_snippet = true;\n         self.insert(offset, snippet);\n     }\n     /// Replaces specified `range` of text with a given string.\n@@ -245,7 +229,7 @@ impl AssistBuilder {\n         range: TextRange,\n         snippet: impl Into<String>,\n     ) {\n-        self.is_snippet = true;\n+        self.source_change.is_snippet = true;\n         self.replace(range, snippet);\n     }\n     pub(crate) fn replace_ast<N: AstNode>(&mut self, old: N, new: N) {\n@@ -260,15 +244,11 @@ impl AssistBuilder {\n     pub(crate) fn create_file(&mut self, dst: AnchoredPathBuf, content: impl Into<String>) {\n         let file_system_edit =\n             FileSystemEdit::CreateFile { dst: dst.clone(), initial_contents: content.into() };\n-        self.file_system_edits.push(file_system_edit);\n+        self.source_change.push_file_system_edit(file_system_edit);\n     }\n \n     fn finish(mut self) -> SourceChange {\n         self.commit();\n-        SourceChange {\n-            source_file_edits: mem::take(&mut self.source_file_edits),\n-            file_system_edits: mem::take(&mut self.file_system_edits),\n-            is_snippet: self.is_snippet,\n-        }\n+        mem::take(&mut self.source_change)\n     }\n }"}, {"sha": "71431b4065c7b1d32e3238c156766aea73c340fb", "filename": "crates/assists/src/tests.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fassists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fassists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -80,10 +80,8 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let actual = {\n         let source_change = assist.source_change.unwrap();\n         let mut actual = before;\n-        for source_file_edit in source_change.source_file_edits {\n-            if source_file_edit.file_id == file_id {\n-                source_file_edit.edit.apply(&mut actual)\n-            }\n+        if let Some(source_file_edit) = source_change.get_source_edit(file_id) {\n+            source_file_edit.apply(&mut actual);\n         }\n         actual\n     };\n@@ -116,37 +114,33 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n \n     match (assist, expected) {\n         (Some(assist), ExpectedResult::After(after)) => {\n-            let mut source_change = assist.source_change.unwrap();\n+            let source_change = assist.source_change.unwrap();\n             assert!(!source_change.source_file_edits.is_empty());\n             let skip_header = source_change.source_file_edits.len() == 1\n                 && source_change.file_system_edits.len() == 0;\n-            source_change.source_file_edits.sort_by_key(|it| it.file_id);\n \n             let mut buf = String::new();\n-            for source_file_edit in source_change.source_file_edits {\n-                let mut text = db.file_text(source_file_edit.file_id).as_ref().to_owned();\n-                source_file_edit.edit.apply(&mut text);\n+            for (file_id, edit) in source_change.source_file_edits {\n+                let mut text = db.file_text(file_id).as_ref().to_owned();\n+                edit.apply(&mut text);\n                 if !skip_header {\n-                    let sr = db.file_source_root(source_file_edit.file_id);\n+                    let sr = db.file_source_root(file_id);\n                     let sr = db.source_root(sr);\n-                    let path = sr.path_for_file(&source_file_edit.file_id).unwrap();\n+                    let path = sr.path_for_file(&file_id).unwrap();\n                     format_to!(buf, \"//- {}\\n\", path)\n                 }\n                 buf.push_str(&text);\n             }\n \n-            for file_system_edit in source_change.file_system_edits.clone() {\n-                match file_system_edit {\n-                    FileSystemEdit::CreateFile { dst, initial_contents } => {\n-                        let sr = db.file_source_root(dst.anchor);\n-                        let sr = db.source_root(sr);\n-                        let mut base = sr.path_for_file(&dst.anchor).unwrap().clone();\n-                        base.pop();\n-                        let created_file_path = format!(\"{}{}\", base.to_string(), &dst.path[1..]);\n-                        format_to!(buf, \"//- {}\\n\", created_file_path);\n-                        buf.push_str(&initial_contents);\n-                    }\n-                    _ => (),\n+            for file_system_edit in source_change.file_system_edits {\n+                if let FileSystemEdit::CreateFile { dst, initial_contents } = file_system_edit {\n+                    let sr = db.file_source_root(dst.anchor);\n+                    let sr = db.source_root(sr);\n+                    let mut base = sr.path_for_file(&dst.anchor).unwrap().clone();\n+                    base.pop();\n+                    let created_file_path = format!(\"{}{}\", base.to_string(), &dst.path[1..]);\n+                    format_to!(buf, \"//- {}\\n\", created_file_path);\n+                    buf.push_str(&initial_contents);\n                 }\n             }\n "}, {"sha": "2e5395b518cf65540557d4f08f71431543d8392b", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -13,8 +13,7 @@ use hir::{\n     diagnostics::{Diagnostic as _, DiagnosticCode, DiagnosticSinkBuilder},\n     Semantics,\n };\n-use ide_db::base_db::SourceDatabase;\n-use ide_db::RootDatabase;\n+use ide_db::{base_db::SourceDatabase, RootDatabase};\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n@@ -23,7 +22,7 @@ use syntax::{\n };\n use text_edit::TextEdit;\n \n-use crate::{FileId, Label, SourceChange, SourceFileEdit};\n+use crate::{FileId, Label, SourceChange};\n \n use self::fixes::DiagnosticWithFix;\n \n@@ -220,7 +219,7 @@ fn check_unnecessary_braces_in_use_statement(\n             Diagnostic::hint(use_range, \"Unnecessary braces in use statement\".to_string())\n                 .with_fix(Some(Fix::new(\n                     \"Remove unnecessary braces\",\n-                    SourceFileEdit { file_id, edit }.into(),\n+                    SourceChange::from_text_edit(file_id, edit),\n                     use_range,\n                 ))),\n         );\n@@ -265,13 +264,11 @@ mod tests {\n             .unwrap();\n         let fix = diagnostic.fix.unwrap();\n         let actual = {\n-            let file_id = fix.source_change.source_file_edits.first().unwrap().file_id;\n+            let file_id = *fix.source_change.source_file_edits.keys().next().unwrap();\n             let mut actual = analysis.file_text(file_id).unwrap().to_string();\n \n-            // Go from the last one to the first one, so that ranges won't be affected by previous edits.\n-            // FIXME: https://github.com/rust-analyzer/rust-analyzer/issues/4901#issuecomment-644675309\n-            for edit in fix.source_change.source_file_edits.iter().rev() {\n-                edit.edit.apply(&mut actual);\n+            for edit in fix.source_change.source_file_edits.values() {\n+                edit.apply(&mut actual);\n             }\n             actual\n         };\n@@ -616,7 +613,7 @@ fn test_fn() {\n                             Fix {\n                                 label: \"Create module\",\n                                 source_change: SourceChange {\n-                                    source_file_edits: [],\n+                                    source_file_edits: {},\n                                     file_system_edits: [\n                                         CreateFile {\n                                             dst: AnchoredPathBuf {"}, {"sha": "5c89e21707e8a85ca651698bac568e89105880c8", "filename": "crates/ide/src/diagnostics/field_shorthand.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -1,8 +1,7 @@\n //! Suggests shortening `Foo { field: field }` to `Foo { field }` in both\n //! expressions and patterns.\n \n-use ide_db::base_db::FileId;\n-use ide_db::source_change::SourceFileEdit;\n+use ide_db::{base_db::FileId, source_change::SourceChange};\n use syntax::{ast, match_ast, AstNode, SyntaxNode};\n use text_edit::TextEdit;\n \n@@ -50,7 +49,7 @@ fn check_expr_field_shorthand(\n             Diagnostic::hint(field_range, \"Shorthand struct initialization\".to_string()).with_fix(\n                 Some(Fix::new(\n                     \"Use struct shorthand initialization\",\n-                    SourceFileEdit { file_id, edit }.into(),\n+                    SourceChange::from_text_edit(file_id, edit),\n                     field_range,\n                 )),\n             ),\n@@ -89,7 +88,7 @@ fn check_pat_field_shorthand(\n         acc.push(Diagnostic::hint(field_range, \"Shorthand struct pattern\".to_string()).with_fix(\n             Some(Fix::new(\n                 \"Use struct field shorthand\",\n-                SourceFileEdit { file_id, edit }.into(),\n+                SourceChange::from_text_edit(file_id, edit),\n                 field_range,\n             )),\n         ));"}, {"sha": "e4335119bc9e22bb4f0324036882bfcd876d2db2", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -8,9 +8,9 @@ use hir::{\n     },\n     HasSource, HirDisplay, InFile, Semantics, VariantDef,\n };\n-use ide_db::base_db::{AnchoredPathBuf, FileId};\n use ide_db::{\n-    source_change::{FileSystemEdit, SourceFileEdit},\n+    base_db::{AnchoredPathBuf, FileId},\n+    source_change::{FileSystemEdit, SourceChange},\n     RootDatabase,\n };\n use syntax::{\n@@ -88,7 +88,7 @@ impl DiagnosticWithFix for MissingFields {\n         };\n         Some(Fix::new(\n             \"Fill struct fields\",\n-            SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into(),\n+            SourceChange::from_text_edit(self.file.original_file(sema.db), edit),\n             sema.original_range(&field_list_parent.syntax()).range,\n         ))\n     }\n@@ -101,8 +101,7 @@ impl DiagnosticWithFix for MissingOkOrSomeInTailExpr {\n         let tail_expr_range = tail_expr.syntax().text_range();\n         let replacement = format!(\"{}({})\", self.required, tail_expr.syntax());\n         let edit = TextEdit::replace(tail_expr_range, replacement);\n-        let source_change =\n-            SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into();\n+        let source_change = SourceChange::from_text_edit(self.file.original_file(sema.db), edit);\n         let name = if self.required == \"Ok\" { \"Wrap with Ok\" } else { \"Wrap with Some\" };\n         Some(Fix::new(name, source_change, tail_expr_range))\n     }\n@@ -122,8 +121,7 @@ impl DiagnosticWithFix for RemoveThisSemicolon {\n             .text_range();\n \n         let edit = TextEdit::delete(semicolon);\n-        let source_change =\n-            SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into();\n+        let source_change = SourceChange::from_text_edit(self.file.original_file(sema.db), edit);\n \n         Some(Fix::new(\"Remove this semicolon\", source_change, semicolon))\n     }\n@@ -204,15 +202,11 @@ fn missing_record_expr_field_fix(\n         new_field = format!(\",{}\", new_field);\n     }\n \n-    let source_change = SourceFileEdit {\n-        file_id: def_file_id,\n-        edit: TextEdit::insert(last_field_syntax.text_range().end(), new_field),\n-    };\n-    return Some(Fix::new(\n-        \"Create field\",\n-        source_change.into(),\n-        record_expr_field.syntax().text_range(),\n-    ));\n+    let source_change = SourceChange::from_text_edit(\n+        def_file_id,\n+        TextEdit::insert(last_field_syntax.text_range().end(), new_field),\n+    );\n+    return Some(Fix::new(\"Create field\", source_change, record_expr_field.syntax().text_range()));\n \n     fn record_field_list(field_def_list: ast::FieldList) -> Option<ast::RecordFieldList> {\n         match field_def_list {"}, {"sha": "afd552008db1431fb829e635304ba5bd53d42022", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -98,7 +98,7 @@ pub use ide_db::{\n     label::Label,\n     line_index::{LineCol, LineIndex},\n     search::SearchScope,\n-    source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n+    source_change::{FileSystemEdit, SourceChange},\n     symbol_index::Query,\n     RootDatabase,\n };\n@@ -553,7 +553,7 @@ impl Analysis {\n             let rule: ssr::SsrRule = query.parse()?;\n             let mut match_finder = ssr::MatchFinder::in_context(db, resolve_context, selections);\n             match_finder.add_rule(rule)?;\n-            let edits = if parse_only { Vec::new() } else { match_finder.edits() };\n+            let edits = if parse_only { Default::default() } else { match_finder.edits() };\n             Ok(SourceChange::from(edits))\n         })\n     }"}, {"sha": "039efb26fdf22c888a1791bdab170f565e065cc0", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 105, "deletions": 134, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -21,7 +21,7 @@ use text_edit::TextEdit;\n \n use crate::{\n     FilePosition, FileSystemEdit, RangeInfo, ReferenceKind, ReferenceSearchResult, SourceChange,\n-    SourceFileEdit, TextRange, TextSize,\n+    TextRange, TextSize,\n };\n \n type RenameResult<T> = Result<T, RenameError>;\n@@ -58,7 +58,7 @@ pub(crate) fn prepare_rename(\n         rename_self_to_param(&sema, position, self_token, \"dummy\")\n     } else {\n         let RangeInfo { range, .. } = find_all_refs(&sema, position)?;\n-        Ok(RangeInfo::new(range, SourceChange::from(vec![])))\n+        Ok(RangeInfo::new(range, SourceChange::default()))\n     }\n     .map(|info| RangeInfo::new(info.range, ()))\n }\n@@ -176,7 +176,7 @@ fn source_edit_from_references(\n     file_id: FileId,\n     references: &[FileReference],\n     new_name: &str,\n-) -> SourceFileEdit {\n+) -> (FileId, TextEdit) {\n     let mut edit = TextEdit::builder();\n     for reference in references {\n         let mut replacement_text = String::new();\n@@ -209,8 +209,7 @@ fn source_edit_from_references(\n         };\n         edit.replace(range, replacement_text);\n     }\n-\n-    SourceFileEdit { file_id, edit: edit.finish() }\n+    (file_id, edit.finish())\n }\n \n fn edit_text_range_for_record_field_expr_or_pat(\n@@ -250,8 +249,8 @@ fn rename_mod(\n     if IdentifierKind::Ident != check_identifier(new_name)? {\n         bail!(\"Invalid name `{0}`: cannot rename module to {0}\", new_name);\n     }\n-    let mut source_file_edits = Vec::new();\n-    let mut file_system_edits = Vec::new();\n+\n+    let mut source_change = SourceChange::default();\n \n     let src = module.definition_source(sema.db);\n     let file_id = src.file_id.original_file(sema.db);\n@@ -265,28 +264,27 @@ fn rename_mod(\n             };\n             let dst = AnchoredPathBuf { anchor: file_id, path };\n             let move_file = FileSystemEdit::MoveFile { src: file_id, dst };\n-            file_system_edits.push(move_file);\n+            source_change.push_file_system_edit(move_file);\n         }\n         ModuleSource::Module(..) => {}\n     }\n \n     if let Some(src) = module.declaration_source(sema.db) {\n         let file_id = src.file_id.original_file(sema.db);\n         let name = src.value.name().unwrap();\n-        let edit = SourceFileEdit {\n+        source_change.insert_source_edit(\n             file_id,\n-            edit: TextEdit::replace(name.syntax().text_range(), new_name.into()),\n-        };\n-        source_file_edits.push(edit);\n+            TextEdit::replace(name.syntax().text_range(), new_name.into()),\n+        );\n     }\n \n     let RangeInfo { range, info: refs } = find_all_refs(sema, position)?;\n     let ref_edits = refs.references().iter().map(|(&file_id, references)| {\n         source_edit_from_references(sema, file_id, references, new_name)\n     });\n-    source_file_edits.extend(ref_edits);\n+    source_change.extend(ref_edits);\n \n-    Ok(RangeInfo::new(range, SourceChange::from_edits(source_file_edits, file_system_edits)))\n+    Ok(RangeInfo::new(range, source_change))\n }\n \n fn rename_to_self(\n@@ -335,20 +333,16 @@ fn rename_to_self(\n \n     let RangeInfo { range, info: refs } = find_all_refs(sema, position)?;\n \n-    let mut edits = refs\n-        .references()\n-        .iter()\n-        .map(|(&file_id, references)| {\n-            source_edit_from_references(sema, file_id, references, \"self\")\n-        })\n-        .collect::<Vec<_>>();\n-\n-    edits.push(SourceFileEdit {\n-        file_id: position.file_id,\n-        edit: TextEdit::replace(param_range, String::from(self_param)),\n-    });\n+    let mut source_change = SourceChange::default();\n+    source_change.extend(refs.references().iter().map(|(&file_id, references)| {\n+        source_edit_from_references(sema, file_id, references, \"self\")\n+    }));\n+    source_change.insert_source_edit(\n+        position.file_id,\n+        TextEdit::replace(param_range, String::from(self_param)),\n+    );\n \n-    Ok(RangeInfo::new(range, SourceChange::from(edits)))\n+    Ok(RangeInfo::new(range, source_change))\n }\n \n fn text_edit_from_self_param(\n@@ -402,7 +396,7 @@ fn rename_self_to_param(\n         .ok_or_else(|| format_err!(\"No surrounding method declaration found\"))?;\n     let search_range = fn_def.syntax().text_range();\n \n-    let mut edits: Vec<SourceFileEdit> = vec![];\n+    let mut source_change = SourceChange::default();\n \n     for (idx, _) in text.match_indices(\"self\") {\n         let offset: TextSize = idx.try_into().unwrap();\n@@ -416,18 +410,18 @@ fn rename_self_to_param(\n             } else {\n                 TextEdit::replace(usage.text_range(), String::from(new_name))\n             };\n-            edits.push(SourceFileEdit { file_id: position.file_id, edit });\n+            source_change.insert_source_edit(position.file_id, edit);\n         }\n     }\n \n-    if edits.len() > 1 && ident_kind == IdentifierKind::Underscore {\n+    if source_change.source_file_edits.len() > 1 && ident_kind == IdentifierKind::Underscore {\n         bail!(\"Cannot rename reference to `_` as it is being referenced multiple times\");\n     }\n \n     let range = ast::SelfParam::cast(self_token.parent())\n         .map_or(self_token.text_range(), |p| p.syntax().text_range());\n \n-    Ok(RangeInfo::new(range, SourceChange::from(edits)))\n+    Ok(RangeInfo::new(range, source_change))\n }\n \n fn rename_reference(\n@@ -464,14 +458,12 @@ fn rename_reference(\n         (IdentifierKind::Ident, _) | (IdentifierKind::Underscore, _) => mark::hit!(rename_ident),\n     }\n \n-    let edit = refs\n-        .into_iter()\n-        .map(|(file_id, references)| {\n-            source_edit_from_references(sema, file_id, &references, new_name)\n-        })\n-        .collect::<Vec<_>>();\n+    let mut source_change = SourceChange::default();\n+    source_change.extend(refs.into_iter().map(|(file_id, references)| {\n+        source_edit_from_references(sema, file_id, &references, new_name)\n+    }));\n \n-    Ok(RangeInfo::new(range, SourceChange::from(edit)))\n+    Ok(RangeInfo::new(range, source_change))\n }\n \n #[cfg(test)]\n@@ -494,8 +486,8 @@ mod tests {\n                 let mut text_edit_builder = TextEdit::builder();\n                 let mut file_id: Option<FileId> = None;\n                 for edit in source_change.info.source_file_edits {\n-                    file_id = Some(edit.file_id);\n-                    for indel in edit.edit.into_iter() {\n+                    file_id = Some(edit.0);\n+                    for indel in edit.1.into_iter() {\n                         text_edit_builder.replace(indel.delete, indel.insert);\n                     }\n                 }\n@@ -895,21 +887,18 @@ mod foo$0;\n                 RangeInfo {\n                     range: 4..7,\n                     info: SourceChange {\n-                        source_file_edits: [\n-                            SourceFileEdit {\n-                                file_id: FileId(\n-                                    1,\n-                                ),\n-                                edit: TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"foo2\",\n-                                            delete: 4..7,\n-                                        },\n-                                    ],\n-                                },\n+                        source_file_edits: {\n+                            FileId(\n+                                1,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"foo2\",\n+                                        delete: 4..7,\n+                                    },\n+                                ],\n                             },\n-                        ],\n+                        },\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n@@ -950,34 +939,28 @@ use crate::foo$0::FooContent;\n                 RangeInfo {\n                     range: 11..14,\n                     info: SourceChange {\n-                        source_file_edits: [\n-                            SourceFileEdit {\n-                                file_id: FileId(\n-                                    0,\n-                                ),\n-                                edit: TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"quux\",\n-                                            delete: 8..11,\n-                                        },\n-                                    ],\n-                                },\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"quux\",\n+                                        delete: 8..11,\n+                                    },\n+                                ],\n                             },\n-                            SourceFileEdit {\n-                                file_id: FileId(\n-                                    2,\n-                                ),\n-                                edit: TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"quux\",\n-                                            delete: 11..14,\n-                                        },\n-                                    ],\n-                                },\n+                            FileId(\n+                                2,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"quux\",\n+                                        delete: 11..14,\n+                                    },\n+                                ],\n                             },\n-                        ],\n+                        },\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n@@ -1012,21 +995,18 @@ mod fo$0o;\n                 RangeInfo {\n                     range: 4..7,\n                     info: SourceChange {\n-                        source_file_edits: [\n-                            SourceFileEdit {\n-                                file_id: FileId(\n-                                    0,\n-                                ),\n-                                edit: TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"foo2\",\n-                                            delete: 4..7,\n-                                        },\n-                                    ],\n-                                },\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"foo2\",\n+                                        delete: 4..7,\n+                                    },\n+                                ],\n                             },\n-                        ],\n+                        },\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n@@ -1062,21 +1042,18 @@ mod outer { mod fo$0o; }\n                 RangeInfo {\n                     range: 16..19,\n                     info: SourceChange {\n-                        source_file_edits: [\n-                            SourceFileEdit {\n-                                file_id: FileId(\n-                                    0,\n-                                ),\n-                                edit: TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"bar\",\n-                                            delete: 16..19,\n-                                        },\n-                                    ],\n-                                },\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"bar\",\n+                                        delete: 16..19,\n+                                    },\n+                                ],\n                             },\n-                        ],\n+                        },\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n@@ -1135,34 +1112,28 @@ pub mod foo$0;\n                 RangeInfo {\n                     range: 8..11,\n                     info: SourceChange {\n-                        source_file_edits: [\n-                            SourceFileEdit {\n-                                file_id: FileId(\n-                                    1,\n-                                ),\n-                                edit: TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"foo2\",\n-                                            delete: 8..11,\n-                                        },\n-                                    ],\n-                                },\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"foo2\",\n+                                        delete: 27..30,\n+                                    },\n+                                ],\n                             },\n-                            SourceFileEdit {\n-                                file_id: FileId(\n-                                    0,\n-                                ),\n-                                edit: TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"foo2\",\n-                                            delete: 27..30,\n-                                        },\n-                                    ],\n-                                },\n+                            FileId(\n+                                1,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"foo2\",\n+                                        delete: 8..11,\n+                                    },\n+                                ],\n                             },\n-                        ],\n+                        },\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId("}, {"sha": "e3c3aebac2dc8ff6f2dd5ac1175b672fd42959f5", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -15,8 +15,10 @@\n \n mod on_enter;\n \n-use ide_db::base_db::{FilePosition, SourceDatabase};\n-use ide_db::{source_change::SourceFileEdit, RootDatabase};\n+use ide_db::{\n+    base_db::{FilePosition, SourceDatabase},\n+    RootDatabase,\n+};\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, edit::IndentLevel, AstToken},\n@@ -56,7 +58,7 @@ pub(crate) fn on_char_typed(\n     let file = &db.parse(position.file_id).tree();\n     assert_eq!(file.syntax().text().char_at(position.offset), Some(char_typed));\n     let edit = on_char_typed_inner(file, position.offset, char_typed)?;\n-    Some(SourceFileEdit { file_id: position.file_id, edit }.into())\n+    Some(SourceChange::from_text_edit(position.file_id, edit))\n }\n \n fn on_char_typed_inner(file: &SourceFile, offset: TextSize, char_typed: char) -> Option<TextEdit> {"}, {"sha": "b1f87731bfdf4389b38d3d6eb27b9f6e5288d83f", "filename": "crates/ide_db/src/source_change.rs", "status": "modified", "additions": 43, "deletions": 13, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsource_change.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -3,12 +3,19 @@\n //!\n //! It can be viewed as a dual for `AnalysisChange`.\n \n+use std::{\n+    collections::hash_map::Entry,\n+    iter::{self, FromIterator},\n+};\n+\n use base_db::{AnchoredPathBuf, FileId};\n+use rustc_hash::FxHashMap;\n+use stdx::assert_never;\n use text_edit::TextEdit;\n \n #[derive(Default, Debug, Clone)]\n pub struct SourceChange {\n-    pub source_file_edits: Vec<SourceFileEdit>,\n+    pub source_file_edits: FxHashMap<FileId, TextEdit>,\n     pub file_system_edits: Vec<FileSystemEdit>,\n     pub is_snippet: bool,\n }\n@@ -17,27 +24,50 @@ impl SourceChange {\n     /// Creates a new SourceChange with the given label\n     /// from the edits.\n     pub fn from_edits(\n-        source_file_edits: Vec<SourceFileEdit>,\n+        source_file_edits: FxHashMap<FileId, TextEdit>,\n         file_system_edits: Vec<FileSystemEdit>,\n     ) -> Self {\n         SourceChange { source_file_edits, file_system_edits, is_snippet: false }\n     }\n-}\n \n-#[derive(Debug, Clone)]\n-pub struct SourceFileEdit {\n-    pub file_id: FileId,\n-    pub edit: TextEdit,\n+    pub fn from_text_edit(file_id: FileId, edit: TextEdit) -> Self {\n+        SourceChange {\n+            source_file_edits: FxHashMap::from_iter(iter::once((file_id, edit))),\n+            ..Default::default()\n+        }\n+    }\n+\n+    pub fn insert_source_edit(&mut self, file_id: FileId, edit: TextEdit) {\n+        match self.source_file_edits.entry(file_id) {\n+            Entry::Occupied(mut entry) => {\n+                assert_never!(\n+                    entry.get_mut().union(edit).is_err(),\n+                    \"overlapping edits for same file\"\n+                );\n+            }\n+            Entry::Vacant(entry) => {\n+                entry.insert(edit);\n+            }\n+        }\n+    }\n+\n+    pub fn push_file_system_edit(&mut self, edit: FileSystemEdit) {\n+        self.file_system_edits.push(edit);\n+    }\n+\n+    pub fn get_source_edit(&self, file_id: FileId) -> Option<&TextEdit> {\n+        self.source_file_edits.get(&file_id)\n+    }\n }\n \n-impl From<SourceFileEdit> for SourceChange {\n-    fn from(edit: SourceFileEdit) -> SourceChange {\n-        vec![edit].into()\n+impl Extend<(FileId, TextEdit)> for SourceChange {\n+    fn extend<T: IntoIterator<Item = (FileId, TextEdit)>>(&mut self, iter: T) {\n+        iter.into_iter().for_each(|(file_id, edit)| self.insert_source_edit(file_id, edit));\n     }\n }\n \n-impl From<Vec<SourceFileEdit>> for SourceChange {\n-    fn from(source_file_edits: Vec<SourceFileEdit>) -> SourceChange {\n+impl From<FxHashMap<FileId, TextEdit>> for SourceChange {\n+    fn from(source_file_edits: FxHashMap<FileId, TextEdit>) -> SourceChange {\n         SourceChange { source_file_edits, file_system_edits: Vec::new(), is_snippet: false }\n     }\n }\n@@ -51,7 +81,7 @@ pub enum FileSystemEdit {\n impl From<FileSystemEdit> for SourceChange {\n     fn from(edit: FileSystemEdit) -> SourceChange {\n         SourceChange {\n-            source_file_edits: Vec::new(),\n+            source_file_edits: Default::default(),\n             file_system_edits: vec![edit],\n             is_snippet: false,\n         }"}, {"sha": "bbb550ec9a5c60730165703b5dcc3b607dab4e1c", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -12,10 +12,10 @@ pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n         match_finder.add_rule(rule)?;\n     }\n     let edits = match_finder.edits();\n-    for edit in edits {\n-        if let Some(path) = vfs.file_path(edit.file_id).as_path() {\n-            let mut contents = db.file_text(edit.file_id).to_string();\n-            edit.edit.apply(&mut contents);\n+    for (file_id, edit) in edits {\n+        if let Some(path) = vfs.file_path(file_id).as_path() {\n+            let mut contents = db.file_text(file_id).to_string();\n+            edit.apply(&mut contents);\n             std::fs::write(path, contents)?;\n         }\n     }"}, {"sha": "1a4e0dd3283d8cc6612ee1449b4ae9a4bbd10a2f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -260,15 +260,15 @@ pub(crate) fn handle_on_type_formatting(\n     }\n \n     let edit = snap.analysis.on_char_typed(position, char_typed)?;\n-    let mut edit = match edit {\n+    let edit = match edit {\n         Some(it) => it,\n         None => return Ok(None),\n     };\n \n     // This should be a single-file edit\n-    let edit = edit.source_file_edits.pop().unwrap();\n+    let (_, edit) = edit.source_file_edits.into_iter().next().unwrap();\n \n-    let change = to_proto::text_edit_vec(&line_index, line_endings, edit.edit);\n+    let change = to_proto::text_edit_vec(&line_index, line_endings, edit);\n     Ok(Some(change))\n }\n \n@@ -463,9 +463,11 @@ pub(crate) fn handle_will_rename_files(\n         .collect();\n \n     // Drop file system edits since we're just renaming things on the same level\n-    let edits = source_changes.into_iter().map(|it| it.source_file_edits).flatten().collect();\n-    let source_change = SourceChange::from_edits(edits, Vec::new());\n-\n+    let mut source_changes = source_changes.into_iter();\n+    let mut source_change = source_changes.next().unwrap_or_default();\n+    source_change.file_system_edits.clear();\n+    // no collect here because we want to merge text edits on same file ids\n+    source_change.extend(source_changes.map(|it| it.source_file_edits).flatten());\n     let workspace_edit = to_proto::workspace_edit(&snap, source_change)?;\n     Ok(Some(workspace_edit))\n }"}, {"sha": "dc67d19a7547ecfd9a05adf33000ca5913f9c1d0", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -8,8 +8,7 @@ use ide::{\n     Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind, Documentation, FileId,\n     FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HlMod, HlPunct, HlRange, HlTag, Indel,\n     InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup, NavigationTarget, ReferenceAccess,\n-    RenameError, Runnable, Severity, SourceChange, SourceFileEdit, SymbolKind, TextEdit, TextRange,\n-    TextSize,\n+    RenameError, Runnable, Severity, SourceChange, SymbolKind, TextEdit, TextRange, TextSize,\n };\n use itertools::Itertools;\n \n@@ -634,13 +633,13 @@ pub(crate) fn goto_definition_response(\n pub(crate) fn snippet_text_document_edit(\n     snap: &GlobalStateSnapshot,\n     is_snippet: bool,\n-    source_file_edit: SourceFileEdit,\n+    file_id: FileId,\n+    edit: TextEdit,\n ) -> Result<lsp_ext::SnippetTextDocumentEdit> {\n-    let text_document = optional_versioned_text_document_identifier(snap, source_file_edit.file_id);\n-    let line_index = snap.analysis.file_line_index(source_file_edit.file_id)?;\n-    let line_endings = snap.file_line_endings(source_file_edit.file_id);\n-    let edits = source_file_edit\n-        .edit\n+    let text_document = optional_versioned_text_document_identifier(snap, file_id);\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_endings = snap.file_line_endings(file_id);\n+    let edits = edit\n         .into_iter()\n         .map(|it| snippet_text_edit(&line_index, line_endings, is_snippet, it))\n         .collect();\n@@ -699,8 +698,8 @@ pub(crate) fn snippet_workspace_edit(\n         let ops = snippet_text_document_ops(snap, op);\n         document_changes.extend_from_slice(&ops);\n     }\n-    for edit in source_change.source_file_edits {\n-        let edit = snippet_text_document_edit(&snap, source_change.is_snippet, edit)?;\n+    for (file_id, edit) in source_change.source_file_edits {\n+        let edit = snippet_text_document_edit(&snap, source_change.is_snippet, file_id, edit)?;\n         document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Edit(edit));\n     }\n     let workspace_edit ="}, {"sha": "a97fc8bcacab263454fc23bfa74ce5bbc6c88c09", "filename": "crates/ssr/src/lib.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Flib.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -75,10 +75,10 @@ pub use crate::matching::Match;\n use crate::matching::MatchFailureReason;\n use hir::Semantics;\n use ide_db::base_db::{FileId, FilePosition, FileRange};\n-use ide_db::source_change::SourceFileEdit;\n use resolving::ResolvedRule;\n use rustc_hash::FxHashMap;\n use syntax::{ast, AstNode, SyntaxNode, TextRange};\n+use text_edit::TextEdit;\n \n // A structured search replace rule. Create by calling `parse` on a str.\n #[derive(Debug)]\n@@ -159,7 +159,7 @@ impl<'db> MatchFinder<'db> {\n     }\n \n     /// Finds matches for all added rules and returns edits for all found matches.\n-    pub fn edits(&self) -> Vec<SourceFileEdit> {\n+    pub fn edits(&self) -> FxHashMap<FileId, TextEdit> {\n         use ide_db::base_db::SourceDatabaseExt;\n         let mut matches_by_file = FxHashMap::default();\n         for m in self.matches().matches {\n@@ -169,13 +169,19 @@ impl<'db> MatchFinder<'db> {\n                 .matches\n                 .push(m);\n         }\n-        let mut edits = vec![];\n-        for (file_id, matches) in matches_by_file {\n-            let edit =\n-                replacing::matches_to_edit(&matches, &self.sema.db.file_text(file_id), &self.rules);\n-            edits.push(SourceFileEdit { file_id, edit });\n-        }\n-        edits\n+        matches_by_file\n+            .into_iter()\n+            .map(|(file_id, matches)| {\n+                (\n+                    file_id,\n+                    replacing::matches_to_edit(\n+                        &matches,\n+                        &self.sema.db.file_text(file_id),\n+                        &self.rules,\n+                    ),\n+                )\n+            })\n+            .collect()\n     }\n \n     /// Adds a search pattern. For use if you intend to only call `find_matches_in_file`. If you"}, {"sha": "42d313f918314984bda0c7fd2ea32ee5ac0f5057", "filename": "crates/ssr/src/matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fmatching.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -810,9 +810,9 @@ mod tests {\n \n         let edits = match_finder.edits();\n         assert_eq!(edits.len(), 1);\n-        let edit = &edits[0];\n+        let edit = &edits[&position.file_id];\n         let mut after = input.to_string();\n-        edit.edit.apply(&mut after);\n+        edit.apply(&mut after);\n         assert_eq!(after, \"fn foo() {} fn bar() {} fn main() { bar(1+2); }\");\n     }\n }"}, {"sha": "a3ea44f23530521739926d782ca0cd88dc463064", "filename": "crates/ssr/src/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Ftests.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -103,11 +103,10 @@ fn assert_ssr_transforms(rules: &[&str], input: &str, expected: Expect) {\n     if edits.is_empty() {\n         panic!(\"No edits were made\");\n     }\n-    assert_eq!(edits[0].file_id, position.file_id);\n     // Note, db.file_text is not necessarily the same as `input`, since fixture parsing alters\n     // stuff.\n     let mut actual = db.file_text(position.file_id).to_string();\n-    edits[0].edit.apply(&mut actual);\n+    edits[&position.file_id].apply(&mut actual);\n     expected.assert_eq(&actual);\n }\n "}, {"sha": "4f5c6100d2a860b085239e263f27750bafbee8ea", "filename": "crates/stdx/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fstdx%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054e2061521292a72748510f3f6cb7c8b1e8611b/crates%2Fstdx%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fmacros.rs?ref=054e2061521292a72748510f3f6cb7c8b1e8611b", "patch": "@@ -66,7 +66,7 @@ macro_rules! impl_from {\n /// Shamelessly stolen from: https://www.sqlite.org/assert.html\n #[macro_export]\n macro_rules! assert_never {\n-    ($cond:expr) => { $crate::assert_always!($cond, \"\") };\n+    ($cond:expr) => { $crate::assert_never!($cond, \"\") };\n     ($cond:expr, $($fmt:tt)*) => {{\n         let value = $cond;\n         if value {"}]}