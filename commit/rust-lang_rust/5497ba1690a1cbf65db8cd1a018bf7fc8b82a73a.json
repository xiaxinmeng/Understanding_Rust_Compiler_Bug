{"sha": "5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OTdiYTE2OTBhMWNiZjY1ZGI4Y2QxYTAxOGJmN2ZjOGI4MmE3M2E=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-05T23:11:36Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-05T23:13:06Z"}, "message": "When suggesting assoc function with type params, include turbofish", "tree": {"sha": "12d0404808eaf6887563487ac80cbb30285266b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12d0404808eaf6887563487ac80cbb30285266b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a", "html_url": "https://github.com/rust-lang/rust/commit/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2023ac599c38a59f86552089e6791c5a73412d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2023ac599c38a59f86552089e6791c5a73412d3", "html_url": "https://github.com/rust-lang/rust/commit/f2023ac599c38a59f86552089e6791c5a73412d3"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "7ce855c73c7c0ab8673784b43f5bf61ecb4c1a95", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a", "patch": "@@ -462,15 +462,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n                 if static_sources.len() == 1 {\n                     if let SelfSource::MethodCall(expr) = source {\n-                        err.span_suggestion(expr.span.to(span),\n-                                            \"use associated function syntax instead\",\n-                                            format!(\"{}::{}\",\n-                                                    self.ty_to_string(actual),\n-                                                    item_name),\n-                                            Applicability::MachineApplicable);\n+                        err.span_suggestion(\n+                            expr.span.to(span),\n+                            \"use associated function syntax instead\",\n+                            format!(\"{}::{}\", self.ty_to_value_string(actual), item_name),\n+                            Applicability::MachineApplicable,\n+                        );\n                     } else {\n-                        err.help(&format!(\"try with `{}::{}`\",\n-                                          self.ty_to_string(actual), item_name));\n+                        err.help(&format!(\n+                            \"try with `{}::{}`\",\n+                            self.ty_to_value_string(actual),\n+                            item_name,\n+                        ));\n                     }\n \n                     report_candidates(span, &mut err, static_sources);\n@@ -579,6 +582,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n+    /// Print out the type for use in value namespace.\n+    fn ty_to_value_string(&self, ty: Ty<'tcx>) -> String {\n+        match ty.kind {\n+            ty::Adt(def, substs) => format!(\"{}\", ty::Instance::new(def.did, substs)),\n+            _ => self.ty_to_string(ty),\n+        }\n+    }\n+\n     fn suggest_use_candidates(&self,\n                               err: &mut DiagnosticBuilder<'_>,\n                               mut msg: String,"}, {"sha": "ef4b38de9473272d78c489e6349319622673832e", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs?ref=5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a", "patch": "@@ -0,0 +1,11 @@\n+struct GenericAssocMethod<T>(T);\n+\n+impl<T> GenericAssocMethod<T> {\n+    fn default_hello() {}\n+}\n+\n+fn main() {\n+    let x = GenericAssocMethod(33i32);\n+    x.default_hello();\n+    //~^ ERROR no method named `default_hello` found for type `GenericAssocMethod<i32>`\n+}"}, {"sha": "8cfa7de08bb38f163ecc4c47a1e86280b2aa6fa4", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr?ref=5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a", "patch": "@@ -0,0 +1,22 @@\n+error[E0599]: no method named `default_hello` found for type `GenericAssocMethod<i32>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:9:7\n+   |\n+LL | struct GenericAssocMethod<T>(T);\n+   | -------------------------------- method `default_hello` not found for this\n+...\n+LL |     x.default_hello();\n+   |     --^^^^^^^^^^^^^\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::default_hello`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `GenericAssocMethod<_>`\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:4:5\n+   |\n+LL |     fn default_hello() {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}