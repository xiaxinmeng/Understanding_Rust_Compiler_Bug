{"sha": "9aa3a8675f115216f4e5d182128450e29a9600ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYTNhODY3NWYxMTUyMTZmNGU1ZDE4MjEyODQ1MGUyOWE5NjAwY2U=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T13:23:48Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T13:23:48Z"}, "message": "Reimplement variant downcast projection.", "tree": {"sha": "973835cea202cb77c92504f468a142dba1c1ab6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/973835cea202cb77c92504f468a142dba1c1ab6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aa3a8675f115216f4e5d182128450e29a9600ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa3a8675f115216f4e5d182128450e29a9600ce", "html_url": "https://github.com/rust-lang/rust/commit/9aa3a8675f115216f4e5d182128450e29a9600ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aa3a8675f115216f4e5d182128450e29a9600ce/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3d58f2498961cb66baa5bbaec43e8235c33235", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3d58f2498961cb66baa5bbaec43e8235c33235", "html_url": "https://github.com/rust-lang/rust/commit/dd3d58f2498961cb66baa5bbaec43e8235c33235"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "bd7a497bd7f6fac9d493d7e47dc9a35eb9b07bba", "filename": "src/interpreter.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9aa3a8675f115216f4e5d182128450e29a9600ce/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa3a8675f115216f4e5d182128450e29a9600ce/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=9aa3a8675f115216f4e5d182128450e29a9600ce", "patch": "@@ -1,5 +1,6 @@\n use rustc::middle::const_eval;\n use rustc::middle::ty::{self, TyCtxt};\n+use rustc::middle::subst::Substs;\n use rustc::mir::mir_map::MirMap;\n use rustc::mir::repr as mir;\n use std::error::Error;\n@@ -340,7 +341,12 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                     Field(field, _) => match base_repr {\n                         Repr::Product { ref fields, .. } =>\n                             base_ptr.offset(fields[field.index()].offset),\n-                        _ => panic!(\"field access on non-product type\"),\n+                        _ => panic!(\"field access on non-product type: {:?}\", base_repr),\n+                    },\n+\n+                    Downcast(_, variant) => match base_repr {\n+                        Repr::Sum { ref discr, .. } => base_ptr.offset(discr.size()),\n+                        _ => panic!(\"variant downcast on non-sum type\"),\n                     },\n \n                     _ => unimplemented!(),\n@@ -350,8 +356,13 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             ref l => panic!(\"can't handle lvalue: {:?}\", l),\n         };\n \n-        let ty = self.current_frame().mir.lvalue_ty(self.tcx, lvalue).to_ty(self.tcx);\n-        Ok((ptr, self.ty_to_repr(ty)))\n+        use rustc::mir::tcx::LvalueTy;\n+        let repr = match self.current_frame().mir.lvalue_ty(self.tcx, lvalue) {\n+            LvalueTy::Ty { ty } => self.ty_to_repr(ty),\n+            LvalueTy::Downcast { ref adt_def, substs, variant_index } =>\n+                self.make_variant_repr(&adt_def.variants[variant_index], substs),\n+        };\n+        Ok((ptr, repr))\n \n         //     mir::Lvalue::Projection(ref proj) => {\n         //         let base_ptr = self.lvalue_to_ptr(&proj.base);\n@@ -426,6 +437,11 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         Repr::Product { size: size, fields: fields }\n     }\n \n+    fn make_variant_repr(&self, v: ty::VariantDef<'tcx>, substs: &'tcx Substs<'tcx>) -> Repr {\n+        let field_tys = v.fields.iter().map(|f| f.ty(self.tcx, substs));\n+        self.make_product_repr(field_tys)\n+    }\n+\n     // TODO(tsion): Cache these outputs.\n     fn ty_to_repr(&self, ty: ty::Ty<'tcx>) -> Repr {\n         use syntax::ast::IntTy;\n@@ -440,7 +456,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n \n             ty::TyTuple(ref fields) => self.make_product_repr(fields.iter().cloned()),\n \n-            ty::TyEnum(adt_def, ref subst) => {\n+            ty::TyEnum(adt_def, substs) => {\n                 let num_variants = adt_def.variants.len();\n \n                 let discr = if num_variants <= 1 {\n@@ -456,8 +472,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 };\n \n                 let variants: Vec<Repr> = adt_def.variants.iter().map(|v| {\n-                    let field_tys = v.fields.iter().map(|f| f.ty(self.tcx, subst));\n-                    self.make_product_repr(field_tys)\n+                    self.make_variant_repr(v, substs)\n                 }).collect();\n \n                 Repr::Sum {\n@@ -467,17 +482,15 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 }\n             }\n \n-            ty::TyStruct(adt_def, ref subst) => {\n+            ty::TyStruct(adt_def, substs) => {\n                 assert_eq!(adt_def.variants.len(), 1);\n-                let field_tys = adt_def.variants[0].fields.iter().map(|f| f.ty(self.tcx, subst));\n-                self.make_product_repr(field_tys)\n+                self.make_variant_repr(&adt_def.variants[0], substs)\n             }\n \n             ref t => panic!(\"can't convert type to repr: {:?}\", t),\n         }\n     }\n \n-\n     fn current_frame(&self) -> &Frame<'a, 'tcx> {\n         self.stack.last().expect(\"no call frames exist\")\n     }"}, {"sha": "c63d3e6804501ba9b195c2c4f7d37079d5300121", "filename": "test/sums.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9aa3a8675f115216f4e5d182128450e29a9600ce/test%2Fsums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa3a8675f115216f4e5d182128450e29a9600ce/test%2Fsums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fsums.rs?ref=9aa3a8675f115216f4e5d182128450e29a9600ce", "patch": "@@ -32,18 +32,18 @@ fn return_some() -> Option<i64> {\n \n #[miri_run]\n fn match_opt_none() -> i8 {\n-    let x = None::<i32>;\n+    let x = None;\n     match x {\n-        Some(_) => 10,\n-        None => 20,\n+        Some(data) => data,\n+        None => 42,\n     }\n }\n \n #[miri_run]\n fn match_opt_some() -> i8 {\n     let x = Some(13);\n     match x {\n-        Some(_) => 10,\n+        Some(data) => data,\n         None => 20,\n     }\n }"}]}