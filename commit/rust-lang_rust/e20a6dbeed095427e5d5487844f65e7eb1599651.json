{"sha": "e20a6dbeed095427e5d5487844f65e7eb1599651", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMGE2ZGJlZWQwOTU0MjdlNWQ1NDg3ODQ0ZjY1ZTdlYjE1OTk2NTE=", "commit": {"author": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2015-05-25T16:37:45Z"}, "committer": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2015-06-06T02:27:09Z"}, "message": "Add methods for handing CStrings back and forth to C", "tree": {"sha": "abd0a78c5af854819398e5e33576b2752961dbcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abd0a78c5af854819398e5e33576b2752961dbcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e20a6dbeed095427e5d5487844f65e7eb1599651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e20a6dbeed095427e5d5487844f65e7eb1599651", "html_url": "https://github.com/rust-lang/rust/commit/e20a6dbeed095427e5d5487844f65e7eb1599651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e20a6dbeed095427e5d5487844f65e7eb1599651/comments", "author": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97294be30c8712a91060d0ce043adefb4f867db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/97294be30c8712a91060d0ce043adefb4f867db8", "html_url": "https://github.com/rust-lang/rust/commit/97294be30c8712a91060d0ce043adefb4f867db8"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "433bb335a805bbb4c4091cd06db4523b41f1ce60", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e20a6dbeed095427e5d5487844f65e7eb1599651/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20a6dbeed095427e5d5487844f65e7eb1599651/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=e20a6dbeed095427e5d5487844f65e7eb1599651", "patch": "@@ -11,7 +11,7 @@\n #![unstable(feature = \"std_misc\")]\n \n use borrow::{Cow, ToOwned};\n-use boxed::Box;\n+use boxed::{self, Box};\n use clone::Clone;\n use convert::{Into, From};\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n@@ -202,6 +202,34 @@ impl CString {\n         CString { inner: v.into_boxed_slice() }\n     }\n \n+    /// Retakes ownership of a CString that was transferred to C.\n+    ///\n+    /// The only appropriate argument is a pointer obtained by calling\n+    /// `into_ptr`. The length of the string will be recalculated\n+    /// using the pointer.\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\")]\n+    pub unsafe fn from_ptr(ptr: *const libc::c_char) -> CString {\n+        let len = libc::strlen(ptr) + 1; // Including the NUL byte\n+        let slice = slice::from_raw_parts(ptr, len as usize);\n+        CString { inner: mem::transmute(slice) }\n+    }\n+\n+    /// Transfers ownership of the string to a C caller.\n+    ///\n+    /// The pointer must be returned to Rust and reconstituted using\n+    /// `from_ptr` to be properly deallocated. Specifically, one\n+    /// should *not* use the standard C `free` function to deallocate\n+    /// this string.\n+    ///\n+    /// Failure to call `from_ptr` will lead to a memory leak.\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\")]\n+    pub fn into_ptr(self) -> *const libc::c_char {\n+        // It is important that the bytes be sized to fit - we need\n+        // the capacity to be determinable from the string length, and\n+        // shrinking to fit is the only way to be sure.\n+        boxed::into_raw(self.inner) as *const libc::c_char\n+    }\n+\n     /// Returns the contents of this `CString` as a slice of bytes.\n     ///\n     /// The returned slice does **not** contain the trailing nul separator and"}]}