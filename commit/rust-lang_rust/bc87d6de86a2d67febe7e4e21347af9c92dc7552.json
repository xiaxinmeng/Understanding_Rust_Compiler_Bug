{"sha": "bc87d6de86a2d67febe7e4e21347af9c92dc7552", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjODdkNmRlODZhMmQ2N2ZlYmU3ZTRlMjEzNDdhZjljOTJkYzc1NTI=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-03-09T18:28:12Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-03-14T00:01:46Z"}, "message": "vscode-postrefactor: global storages", "tree": {"sha": "458231252dabbd94e0817b8e1cc57bda57c9475b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/458231252dabbd94e0817b8e1cc57bda57c9475b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc87d6de86a2d67febe7e4e21347af9c92dc7552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc87d6de86a2d67febe7e4e21347af9c92dc7552", "html_url": "https://github.com/rust-lang/rust/commit/bc87d6de86a2d67febe7e4e21347af9c92dc7552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc87d6de86a2d67febe7e4e21347af9c92dc7552/comments", "author": null, "committer": null, "parents": [{"sha": "77a206e0b2614c13d296b2c36affe5d21df38aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/77a206e0b2614c13d296b2c36affe5d21df38aee", "html_url": "https://github.com/rust-lang/rust/commit/77a206e0b2614c13d296b2c36affe5d21df38aee"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "5371384ba27febcc59993d8b1f2ae6c763601c20", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bc87d6de86a2d67febe7e4e21347af9c92dc7552/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bc87d6de86a2d67febe7e4e21347af9c92dc7552/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=bc87d6de86a2d67febe7e4e21347af9c92dc7552", "patch": "@@ -186,8 +186,8 @@ export class Config {\n         \"rust-analyzer-server-release-date\",\n         this.ctx.globalState\n     );\n-    readonly serverReleaseTag = new StringStorage(\n-        \"rust-analyzer-release-tag\", this.ctx.globalState\n+    readonly serverReleaseTag = new Storage<null | string>(\n+        \"rust-analyzer-release-tag\", this.ctx.globalState, null\n     );\n \n     // We don't do runtime config validation here for simplicity. More on stackoverflow:\n@@ -234,37 +234,36 @@ export class Config {\n     get withSysroot() { return this.cfg.get(\"withSysroot\", true) as boolean; }\n }\n \n-export class StringStorage {\n+export class Storage<T> {\n     constructor(\n         private readonly key: string,\n-        private readonly storage: vscode.Memento\n+        private readonly storage: vscode.Memento,\n+        private readonly defaultVal: T\n     ) { }\n \n-    get(): null | string {\n-        const tag = this.storage.get(this.key, null);\n-        log.debug(this.key, \"==\", tag);\n-        return tag;\n+    get(): T {\n+        const val = this.storage.get(this.key, this.defaultVal);\n+        log.debug(this.key, \"==\", val);\n+        return val;\n     }\n-    async set(tag: string) {\n-        log.debug(this.key, \"=\", tag);\n-        await this.storage.update(this.key, tag);\n+    async set(val: T) {\n+        log.debug(this.key, \"=\", val);\n+        await this.storage.update(this.key, val);\n     }\n }\n export class DateStorage {\n+    inner: Storage<null | string>;\n \n-    constructor(\n-        private readonly key: string,\n-        private readonly storage: vscode.Memento\n-    ) { }\n+    constructor(key: string, storage: vscode.Memento) {\n+        this.inner = new Storage(key, storage, null);\n+    }\n \n     get(): null | Date {\n-        const date = this.storage.get(this.key, null);\n-        log.debug(this.key, \"==\", date);\n-        return date ? new Date(date) : null;\n+        const dateStr = this.inner.get();\n+        return dateStr ? new Date(dateStr) : null;\n     }\n \n     async set(date: null | Date) {\n-        log.debug(this.key, \"=\", date);\n-        await this.storage.update(this.key, date);\n+        await this.inner.set(date ? date.toString() : null);\n     }\n }"}]}