{"sha": "8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNzdmZmI0ODRhZGEyYzhmMTBiZjJkYTViYmU2YTlmODJmOTM1YmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-03T08:51:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-03T08:51:31Z"}, "message": "Auto merge of #31338 - dirk:dirk/add-name-bindings-for-bad-imports, r=nrc\n\nWIP implementation of #31209.\n\nThe goal is to insert fake/dummy definitions for names that we failed to import so that later resolver stages won't complain about them.", "tree": {"sha": "b4d7a426d7d498c38bd1b35b8cfbff6e878717d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4d7a426d7d498c38bd1b35b8cfbff6e878717d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "html_url": "https://github.com/rust-lang/rust/commit/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54664f188403a5bb72634b5e3ba9b2f7b60b4d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f", "html_url": "https://github.com/rust-lang/rust/commit/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f"}, {"sha": "026bcbf91ef77ee85295af87ec578e24d2f24f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/026bcbf91ef77ee85295af87ec578e24d2f24f72", "html_url": "https://github.com/rust-lang/rust/commit/026bcbf91ef77ee85295af87ec578e24d2f24f72"}], "stats": {"total": 91, "additions": 71, "deletions": 20}, "files": [{"sha": "aee8fb10c2a3aa674ad9e6c80d3c2f8abf9420b7", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "patch": "@@ -120,7 +120,7 @@ impl Def {\n             Def::TyParam(..) | Def::Struct(..) | Def::Trait(..) |\n             Def::Method(..) | Def::Const(..) | Def::AssociatedConst(..) |\n             Def::PrimTy(..) | Def::Label(..) | Def::SelfTy(..) | Def::Err => {\n-                panic!(\"attempted .def_id() on invalid {:?}\", self)\n+                panic!(\"attempted .var_id() on invalid {:?}\", self)\n             }\n         }\n     }"}, {"sha": "e1542688239dd94285265b9124f797ee6f70ef58", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "patch": "@@ -1468,7 +1468,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             match search_module.parent_link {\n                 NoParentLink => {\n                     // No more parents. This module was unresolved.\n-                    debug!(\"(resolving item in lexical scope) unresolved module\");\n+                    debug!(\"(resolving item in lexical scope) unresolved module: no parent module\");\n                     return Failed(None);\n                 }\n                 ModuleParentLink(parent_module_node, _) => {\n@@ -3109,7 +3109,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n             Indeterminate => None,\n             Failed(err) => {\n-                debug!(\"(resolving item path by identifier in lexical scope) failed to resolve {}\",\n+                debug!(\"(resolving item path by identifier in lexical scope) failed to \\\n+                        resolve `{}`\",\n                        name);\n \n                 if let Some((span, msg)) = err {"}, {"sha": "9b6879673238fbc0b67a17b5b990b1dff563dd27", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 56, "deletions": 11, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "patch": "@@ -11,6 +11,7 @@\n use self::ImportDirectiveSubclass::*;\n \n use DefModifiers;\n+use DefOrModule;\n use Module;\n use Namespace::{self, TypeNS, ValueNS};\n use NameBinding;\n@@ -50,7 +51,7 @@ pub enum Shadowable {\n }\n \n /// One import directive.\n-#[derive(Debug)]\n+#[derive(Debug,Clone)]\n pub struct ImportDirective {\n     pub module_path: Vec<Name>,\n     pub subclass: ImportDirectiveSubclass,\n@@ -140,9 +141,11 @@ impl<'a> ImportResolution<'a> {\n     }\n }\n \n-struct ImportResolvingError {\n+struct ImportResolvingError<'a> {\n+    /// Module where the error happened\n+    source_module: Module<'a>,\n+    import_directive: ImportDirective,\n     span: Span,\n-    path: String,\n     help: String,\n }\n \n@@ -181,9 +184,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                 // resolving failed\n                 if errors.len() > 0 {\n                     for e in errors {\n-                        resolve_error(self.resolver,\n-                                      e.span,\n-                                      ResolutionError::UnresolvedImport(Some((&e.path, &e.help))));\n+                        self.import_resolving_error(e)\n                     }\n                 } else {\n                     // Report unresolved imports only if no hard error was already reported\n@@ -200,11 +201,55 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         }\n     }\n \n+    /// Resolves an `ImportResolvingError` into the correct enum discriminant\n+    /// and passes that on to `resolve_error`.\n+    fn import_resolving_error(&self, e: ImportResolvingError) {\n+        // If it's a single failed import then create a \"fake\" import\n+        // resolution for it so that later resolve stages won't complain.\n+        if let SingleImport(target, _) = e.import_directive.subclass {\n+            let mut import_resolutions = e.source_module.import_resolutions.borrow_mut();\n+\n+            let resolution = import_resolutions.entry((target, ValueNS)).or_insert_with(|| {\n+                debug!(\"(resolving import error) adding import resolution for `{}`\",\n+                       target);\n+\n+                ImportResolution::new(e.import_directive.id,\n+                                      e.import_directive.is_public)\n+            });\n+\n+            if resolution.target.is_none() {\n+                debug!(\"(resolving import error) adding fake target to import resolution of `{}`\",\n+                       target);\n+\n+                let name_binding = NameBinding {\n+                    modifiers: DefModifiers::IMPORTABLE,\n+                    def_or_module: DefOrModule::Def(Def::Err),\n+                    span: None,\n+                };\n+\n+                // Create a fake target pointing to a fake name binding in our\n+                // own module\n+                let target = Target::new(e.source_module,\n+                                         name_binding,\n+                                         Shadowable::Always);\n+\n+                resolution.target = Some(target);\n+            }\n+        }\n+\n+        let path = import_path_to_string(&e.import_directive.module_path,\n+                                         e.import_directive.subclass);\n+\n+        resolve_error(self.resolver,\n+                      e.span,\n+                      ResolutionError::UnresolvedImport(Some((&path, &e.help))));\n+    }\n+\n     /// Attempts to resolve imports for the given module and all of its\n     /// submodules.\n     fn resolve_imports_for_module_subtree(&mut self,\n                                           module_: Module<'b>)\n-                                          -> Vec<ImportResolvingError> {\n+                                          -> Vec<ImportResolvingError<'b>> {\n         let mut errors = Vec::new();\n         debug!(\"(resolving imports for module subtree) resolving {}\",\n                module_to_string(&*module_));\n@@ -232,7 +277,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     }\n \n     /// Attempts to resolve imports for the given module only.\n-    fn resolve_imports_for_module(&mut self, module: Module<'b>) -> Vec<ImportResolvingError> {\n+    fn resolve_imports_for_module(&mut self, module: Module<'b>) -> Vec<ImportResolvingError<'b>> {\n         let mut errors = Vec::new();\n \n         if module.all_imports_resolved() {\n@@ -254,9 +299,9 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         None => (import_directive.span, String::new()),\n                     };\n                     errors.push(ImportResolvingError {\n+                        source_module: module,\n+                        import_directive: import_directive.clone(),\n                         span: span,\n-                        path: import_path_to_string(&import_directive.module_path,\n-                                                    import_directive.subclass),\n                         help: help,\n                     });\n                 }\n@@ -784,7 +829,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                                  namespace_name,\n                                  name);\n                 span_err!(self.resolver.session, import_directive.span, E0251, \"{}\", msg);\n-           } else {\n+            } else {\n                 let target = Target::new(containing_module,\n                                          name_binding.clone(),\n                                          import_directive.shadowable);"}, {"sha": "bcd2cd816ed4560817dd23a21d682fc710f0567d", "filename": "src/test/compile-fail/import-from-missing.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs?ref=8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "patch": "@@ -15,5 +15,8 @@ mod spam {\n     pub fn ham() { }\n }\n \n-fn main() { ham(); eggs(); }\n-//~^ ERROR unresolved name `eggs`\n+fn main() {\n+    ham();\n+    // Expect eggs to pass because the compiler inserts a fake name for it\n+    eggs();\n+}"}, {"sha": "1f25bce209314e6fe5fb4b2ce31d6daa700c8cd9", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "patch": "@@ -11,10 +11,10 @@\n use baz::zed::bar;\n //~^ ERROR unresolved import `baz::zed::bar`. Could not find `zed` in `baz`\n \n-\n mod baz {}\n mod zed {\n     pub fn bar() { println!(\"bar3\"); }\n }\n-fn main() { bar(); }\n-//~^ ERROR unresolved name `bar`\n+fn main() {\n+    bar();\n+}"}, {"sha": "89f38fa14344580d230d84e46deade7c27e52e32", "filename": "src/test/compile-fail/privacy3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs?ref=8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "patch": "@@ -27,8 +27,10 @@ pub fn foo() {}\n fn test1() {\n     use bar::gpriv;\n     //~^ ERROR unresolved import `bar::gpriv`. There is no `gpriv` in `bar`\n+\n+    // This should pass because the compiler will insert a fake name binding\n+    // for `gpriv`\n     gpriv();\n-    //~^ ERROR unresolved name `gpriv`\n }\n \n #[start] fn main(_: isize, _: *const *const u8) -> isize { 3 }"}]}