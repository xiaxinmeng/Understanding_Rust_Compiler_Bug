{"sha": "e33af7e0b505de6d7c754d2ead26c9ee2bc8974e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzM2FmN2UwYjUwNWRlNmQ3Yzc1NGQyZWFkMjZjOWVlMmJjODk3NGU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-16T11:24:04Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-16T11:45:41Z"}, "message": "Make let bindings' scope start at their definition\n\nAlso, allow let bindings in a block to shadow each other.", "tree": {"sha": "1fc83feb9774a06079fa8fd0991d1b1e419c3295", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fc83feb9774a06079fa8fd0991d1b1e419c3295"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e", "html_url": "https://github.com/rust-lang/rust/commit/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92719e438c4cb38067446388d41a2abe651ab9a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/92719e438c4cb38067446388d41a2abe651ab9a9", "html_url": "https://github.com/rust-lang/rust/commit/92719e438c4cb38067446388d41a2abe651ab9a9"}], "stats": {"total": 98, "additions": 70, "deletions": 28}, "files": [{"sha": "76738fe8737efeead44e5098ce7bc4cd2b03360a", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=e33af7e0b505de6d7c754d2ead26c9ee2bc8974e", "patch": "@@ -53,7 +53,7 @@ tag scope {\n     scope_native_item(@ast::native_item);\n     scope_loop(@ast::local); // there's only 1 decl per loop.\n \n-    scope_block(ast::blk);\n+    scope_block(ast::blk, @mutable uint, @mutable uint);\n     scope_arm(ast::arm);\n }\n \n@@ -254,6 +254,7 @@ fn resolve_names(e: &@env, c: &@ast::crate) {\n         @{visit_native_item: visit_native_item_with_scope,\n           visit_item: visit_item_with_scope,\n           visit_block: visit_block_with_scope,\n+          visit_decl: visit_decl_with_scope,\n           visit_arm: bind walk_arm(e, _, _, _),\n           visit_pat: bind walk_pat(e, _, _, _),\n           visit_expr: bind walk_expr(e, _, _, _),\n@@ -353,7 +354,30 @@ fn visit_fn_with_scope(e: &@env, f: &ast::_fn, tp: &[ast::ty_param],\n }\n \n fn visit_block_with_scope(b: &ast::blk, sc: &scopes, v: &vt[scopes]) {\n-    visit::visit_block(b, cons(scope_block(b), @sc), v);\n+    let pos = @mutable 0u, loc = @mutable 0u;\n+    let block_sc = cons(scope_block(b, pos, loc), @sc);\n+    for stmt in b.node.stmts {\n+        v.visit_stmt(stmt, block_sc, v);\n+        *pos += 1u;\n+        *loc = 0u;\n+    }\n+    visit::visit_expr_opt(b.node.expr, block_sc, v);\n+}\n+\n+fn visit_decl_with_scope(d: &@decl, sc: &scopes, v: &vt[scopes]) {\n+    let loc_pos = alt list::car(sc) {\n+      scope_block(_, _, pos) { pos }\n+      _ { @mutable 0u }\n+    };\n+    alt d.node {\n+      decl_local(locs) {\n+        for loc in locs {\n+            v.visit_local(loc, sc, v);\n+            *loc_pos += 1u;\n+        }\n+      }\n+      decl_item(it) { v.visit_item(it, sc, v); }\n+    }\n }\n \n fn visit_arm_with_scope(a: &ast::arm, sc: &scopes, v: &vt[scopes]) {\n@@ -650,7 +674,9 @@ fn lookup_in_scope(e: &env, sc: scopes, sp: &span, name: &ident,\n                 }\n             }\n           }\n-          scope_block(b) { ret lookup_in_block(name, b.node, ns); }\n+          scope_block(b, pos, loc) {\n+            ret lookup_in_block(name, b.node, *pos, *loc, ns);\n+          }\n           scope_arm(a) {\n             if ns == ns_value {\n                 ret option::map(ast::def_binding,\n@@ -755,18 +781,26 @@ fn lookup_in_obj(name: &ident, ob: &ast::_obj, ty_params: &[ast::ty_param],\n     }\n }\n \n-fn lookup_in_block(name: &ident, b: &ast::blk_, ns: namespace) ->\n-   option::t[def] {\n-    for st: @ast::stmt in b.stmts {\n+fn lookup_in_block(name: &ident, b: &ast::blk_, pos: uint, loc_pos: uint,\n+                   ns: namespace) -> option::t[def] {\n+    let i = ivec::len(b.stmts);\n+    while i > 0u {\n+        i -= 1u;\n+        let st = b.stmts.(i);\n         alt st.node {\n           ast::stmt_decl(d, _) {\n             alt d.node {\n               ast::decl_local(locs) {\n-                for loc: @ast::local in locs {\n-                    if ns == ns_value {\n-                        alt lookup_in_pat(name, loc.node.pat) {\n-                          some(did) { ret some(ast::def_local(did)); }\n-                          _ {}\n+                if i <= pos {\n+                    let j = ivec::len(locs);\n+                    while j > 0u {\n+                        j -= 1u;\n+                        let loc = locs.(j);\n+                        if ns == ns_value && (i < pos || j < loc_pos) {\n+                            alt lookup_in_pat(name, loc.node.pat) {\n+                              some(did) { ret some(ast::def_local(did)); }\n+                              _ {}\n+                            }\n                         }\n                     }\n                 }\n@@ -1272,8 +1306,13 @@ fn check_block(e: &@env, b: &ast::blk, x: &(), v: &vt[()]) {\n           ast::stmt_decl(d, _) {\n             alt d.node {\n               ast::decl_local(locs) {\n-                for loc: @ast::local in locs {\n-                    check_pat(values, loc.node.pat);\n+                let local_values = checker(*e, \"value\");\n+                for loc in locs {\n+                    for each p in ast::pat_bindings(loc.node.pat) {\n+                        let ident = alt p.node { pat_bind(n) { n } };\n+                        add_name(local_values, p.span, ident);\n+                        check_name(values, p.span, ident);\n+                    }\n                 }\n               }\n               ast::decl_item(it) {\n@@ -1339,12 +1378,15 @@ fn checker(e: &env, kind: str) -> checker {\n     ret @{mutable seen: seen, kind: kind, sess: e.sess};\n }\n \n-fn add_name(ch: &checker, sp: &span, name: &ident) {\n+fn check_name(ch: &checker, sp: &span, name: &ident) {\n     for s: ident in ch.seen {\n         if str::eq(s, name) {\n             ch.sess.span_fatal(sp, \"duplicate \" + ch.kind + \" name: \" + name);\n         }\n     }\n+}\n+fn add_name(ch: &checker, sp: &span, name: &ident) {\n+    check_name(ch, sp, name);\n     ch.seen += ~[name];\n }\n "}, {"sha": "613e1e1238275e7c9b561f7cdec568ea3269b924", "filename": "src/test/compile-fail/alt-join.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-join.rs?ref=e33af7e0b505de6d7c754d2ead26c9ee2bc8974e", "patch": "@@ -1,12 +1,10 @@\n-// error-pattern:Unsatisfied precondition constraint\n+// error-pattern:unresolved name\n // a good test that we merge paths correctly in the presence of a\n // variable that's used before it's declared\n-// should be rejected by typestate because we use x without initializing it\n \n fn my_fail() -> ! { fail; }\n \n fn main() {\n-\n     alt (true) {\n       false { my_fail(); }\n       true {}"}, {"sha": "1e8e48aea028b3a6fa4699793c91f6789e2f1aa7", "filename": "src/test/compile-fail/capture1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Fcompile-fail%2Fcapture1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Fcompile-fail%2Fcapture1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcapture1.rs?ref=e33af7e0b505de6d7c754d2ead26c9ee2bc8974e", "patch": "@@ -3,8 +3,6 @@\n // error-pattern: attempted dynamic environment-capture\n \n fn main() {\n-\n-    fn foo() -> int { ret bar; }\n-\n     let bar: int = 5;\n+    fn foo() -> int { ret bar; }\n }\n\\ No newline at end of file"}, {"sha": "294d782f916ac45b755ab18e82cb0714d2e0376d", "filename": "src/test/compile-fail/duplicate-name.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92719e438c4cb38067446388d41a2abe651ab9a9/src%2Ftest%2Fcompile-fail%2Fduplicate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92719e438c4cb38067446388d41a2abe651ab9a9/src%2Ftest%2Fcompile-fail%2Fduplicate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate-name.rs?ref=92719e438c4cb38067446388d41a2abe651ab9a9", "patch": "@@ -1,3 +0,0 @@\n-// error-pattern: duplicate value name: x\n-\n-fn main() { let x = 10; let x: int = 20; }\n\\ No newline at end of file"}, {"sha": "20a4cf314c48ff0294ba6fc5228e49e3b06ff8c8", "filename": "src/test/compile-fail/occurs-check-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs?ref=e33af7e0b505de6d7c754d2ead26c9ee2bc8974e", "patch": "@@ -1,5 +1,6 @@\n // error-pattern: Type inference failed because I could not find\n fn main() {\n-    let f = @f;\n+    let f;\n+    f = @f;\n     f();\n }\n\\ No newline at end of file"}, {"sha": "74a2328f107cc49dced04ab4f8328ee3ab4476bb", "filename": "src/test/compile-fail/occurs-check-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs?ref=e33af7e0b505de6d7c754d2ead26c9ee2bc8974e", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:mismatched types\n // From Issue #778\n tag clam[T] { a(T); }\n-fn main() { let c = a(c); alt c { a[int](_) { } } }\n+fn main() { let c; c = a(c); alt c { a[int](_) { } } }"}, {"sha": "16b2f94045e93e36ae04aed0bf1ffaa0171a1b72", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=e33af7e0b505de6d7c754d2ead26c9ee2bc8974e", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: Type inference failed because I could not find\n fn main() {\n-    let f = @f;\n+    let f;\n+    f = @f;\n }"}, {"sha": "238723b32bc103d99c4a2f8737a186d6876169a1", "filename": "src/test/run-pass/shadow.rs", "status": "renamed", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33af7e0b505de6d7c754d2ead26c9ee2bc8974e/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=e33af7e0b505de6d7c754d2ead26c9ee2bc8974e", "patch": "@@ -1,15 +1,20 @@\n // -*- rust -*-\n-// error-pattern:src/test/compile-fail/shadow.rs\n fn foo(c: [int]) {\n     let a: int = 5;\n     let b: [int] = ~[];\n \n \n     alt none[int] {\n       some[int](_) { for i: int in c { log a; let a = 17; b += ~[a]; } }\n+      _ {}\n     }\n }\n \n tag t[T] { none; some(T); }\n \n-fn main() { foo(~[]); }\n+fn main() {\n+    let x = 10;\n+    let x = x + 20;\n+    assert x == 30;\n+    foo(~[]);\n+}", "previous_filename": "src/test/compile-fail/shadow.rs"}]}