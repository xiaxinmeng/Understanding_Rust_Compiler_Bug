{"sha": "e11959a82ba6728c6a1851827a3e657d16229c23", "node_id": "C_kwDOAAsO6NoAKGUxMTk1OWE4MmJhNjcyOGM2YTE4NTE4MjdhM2U2NTdkMTYyMjljMjM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-08T22:56:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-08T22:56:57Z"}, "message": "Merge #11942\n\n11942: fix: Check whether a parameter can be converted to a local r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11941\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e4ef4e314eb2cae34e7815b8b7635929683bf938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4ef4e314eb2cae34e7815b8b7635929683bf938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e11959a82ba6728c6a1851827a3e657d16229c23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiUL25CRBK7hj4Ov3rIwAA3ukIAB6xhcn6sBOsTDn89xT8MVQM\n0LOMkYmeWy17kwDebvRO6QgLAYL7mZGtqLk5oqJE4BEfBLRUcM6r3eOv7IQn3emZ\nAr9M7lv0ZkkWrRHav6ZzAsYtwVufWUX2ddvYmOHu9kMue6XKaOJh6+6DU4P2eJY5\nFl4Hy9H8+WG83baci8npcnqVyWR0ZVEe+q1zrGAugBO8CBea+whSvp5TBD5IrR0K\nhgvoArw5hzfmFxJSAXQqbz7hn3Wo03IJk0Sz7sALyKcD4XUAfzk8QXEhUtOCCBQ9\n4RDsEW0CKvDgJTl4FTJcSL8xOc0twU3tkuLioNL2gdXuuo5BtOzJELMR6wr+UN8=\n=8yQF\n-----END PGP SIGNATURE-----\n", "payload": "tree e4ef4e314eb2cae34e7815b8b7635929683bf938\nparent 399559e5973a16372b686e05844d930ec4c314c5\nparent 15e7112da31b8ffd246620831b3dc2b70a858af5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649458617 +0000\ncommitter GitHub <noreply@github.com> 1649458617 +0000\n\nMerge #11942\n\n11942: fix: Check whether a parameter can be converted to a local r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11941\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e11959a82ba6728c6a1851827a3e657d16229c23", "html_url": "https://github.com/rust-lang/rust/commit/e11959a82ba6728c6a1851827a3e657d16229c23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e11959a82ba6728c6a1851827a3e657d16229c23/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "399559e5973a16372b686e05844d930ec4c314c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/399559e5973a16372b686e05844d930ec4c314c5", "html_url": "https://github.com/rust-lang/rust/commit/399559e5973a16372b686e05844d930ec4c314c5"}, {"sha": "15e7112da31b8ffd246620831b3dc2b70a858af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e7112da31b8ffd246620831b3dc2b70a858af5", "html_url": "https://github.com/rust-lang/rust/commit/15e7112da31b8ffd246620831b3dc2b70a858af5"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "37bb2e1997d0b3d6a1c7c2aca39b9e1021dfc0f7", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e11959a82ba6728c6a1851827a3e657d16229c23/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11959a82ba6728c6a1851827a3e657d16229c23/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=e11959a82ba6728c6a1851827a3e657d16229c23", "patch": "@@ -1506,10 +1506,15 @@ impl Param {\n         db.function_data(self.func.id).params[self.idx].0.clone()\n     }\n \n-    pub fn as_local(&self, db: &dyn HirDatabase) -> Local {\n+    pub fn as_local(&self, db: &dyn HirDatabase) -> Option<Local> {\n         let parent = DefWithBodyId::FunctionId(self.func.into());\n         let body = db.body(parent);\n-        Local { parent, pat_id: body.params[self.idx] }\n+        let pat_id = body.params[self.idx];\n+        if let Pat::Bind { .. } = &body[pat_id] {\n+            Some(Local { parent, pat_id: body.params[self.idx] })\n+        } else {\n+            None\n+        }\n     }\n \n     pub fn pattern_source(&self, db: &dyn HirDatabase) -> Option<ast::Pat> {"}, {"sha": "1bb3cdb9073bfd830bf5a92ea0b3fbd70f829340", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e11959a82ba6728c6a1851827a3e657d16229c23/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11959a82ba6728c6a1851827a3e657d16229c23/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=e11959a82ba6728c6a1851827a3e657d16229c23", "patch": "@@ -219,8 +219,13 @@ fn rename_to_self(sema: &Semantics<RootDatabase>, local: hir::Local) -> RenameRe\n     let first_param = params\n         .first()\n         .ok_or_else(|| format_err!(\"Cannot rename local to self unless it is a parameter\"))?;\n-    if first_param.as_local(sema.db) != local {\n-        bail!(\"Only the first parameter may be renamed to self\");\n+    match first_param.as_local(sema.db) {\n+        Some(plocal) => {\n+            if plocal != local {\n+                bail!(\"Only the first parameter may be renamed to self\");\n+            }\n+        }\n+        None => bail!(\"rename_to_self invoked on destructuring parameter\"),\n     }\n \n     let assoc_item = fn_def"}, {"sha": "c857adf876ef1010aa1d09506dd2e386b843d4c4", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e11959a82ba6728c6a1851827a3e657d16229c23/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11959a82ba6728c6a1851827a3e657d16229c23/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=e11959a82ba6728c6a1851827a3e657d16229c23", "patch": "@@ -317,30 +317,37 @@ fn inline(\n             if !matches!(pat, ast::Pat::IdentPat(pat) if pat.is_simple_ident()) {\n                 return Vec::new();\n             }\n-            usages_for_locals(param.as_local(sema.db))\n-                .map(|FileReference { name, range, .. }| match name {\n-                    ast::NameLike::NameRef(_) => body\n-                        .syntax()\n-                        .covering_element(range)\n-                        .ancestors()\n-                        .nth(3)\n-                        .and_then(ast::PathExpr::cast),\n-                    _ => None,\n-                })\n-                .collect::<Option<Vec<_>>>()\n-                .unwrap_or_default()\n+            // FIXME: we need to fetch all locals declared in the parameter here\n+            // not only the local if it is a simple binding\n+            match param.as_local(sema.db) {\n+                Some(l) => usages_for_locals(l)\n+                    .map(|FileReference { name, range, .. }| match name {\n+                        ast::NameLike::NameRef(_) => body\n+                            .syntax()\n+                            .covering_element(range)\n+                            .ancestors()\n+                            .nth(3)\n+                            .and_then(ast::PathExpr::cast),\n+                        _ => None,\n+                    })\n+                    .collect::<Option<Vec<_>>>()\n+                    .unwrap_or_default(),\n+                None => Vec::new(),\n+            }\n         })\n         .collect();\n     if function.self_param(sema.db).is_some() {\n         let this = || make::name_ref(\"this\").syntax().clone_for_update();\n-        usages_for_locals(params[0].2.as_local(sema.db))\n-            .flat_map(|FileReference { name, range, .. }| match name {\n-                ast::NameLike::NameRef(_) => Some(body.syntax().covering_element(range)),\n-                _ => None,\n-            })\n-            .for_each(|it| {\n-                ted::replace(it, &this());\n-            })\n+        if let Some(self_local) = params[0].2.as_local(sema.db) {\n+            usages_for_locals(self_local)\n+                .flat_map(|FileReference { name, range, .. }| match name {\n+                    ast::NameLike::NameRef(_) => Some(body.syntax().covering_element(range)),\n+                    _ => None,\n+                })\n+                .for_each(|it| {\n+                    ted::replace(it, &this());\n+                })\n+        }\n     }\n     // Inline parameter expressions or generate `let` statements depending on whether inlining works or not.\n     for ((pat, param_ty, _), usages, expr) in izip!(params, param_use_nodes, arguments).rev() {"}]}