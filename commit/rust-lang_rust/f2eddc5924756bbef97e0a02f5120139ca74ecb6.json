{"sha": "f2eddc5924756bbef97e0a02f5120139ca74ecb6", "node_id": "C_kwDOAAsO6NoAKGYyZWRkYzU5MjQ3NTZiYmVmOTdlMGEwMmY1MTIwMTM5Y2E3NGVjYjY", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-14T17:18:26Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-14T17:18:26Z"}, "message": "Remove box expressions from HIR", "tree": {"sha": "c20ac7b3514808d9bf73b6771245012b208f330b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c20ac7b3514808d9bf73b6771245012b208f330b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2eddc5924756bbef97e0a02f5120139ca74ecb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2eddc5924756bbef97e0a02f5120139ca74ecb6", "html_url": "https://github.com/rust-lang/rust/commit/f2eddc5924756bbef97e0a02f5120139ca74ecb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2eddc5924756bbef97e0a02f5120139ca74ecb6/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "491f63214ad557f1617d11b05b1e2fb4666bba85", "url": "https://api.github.com/repos/rust-lang/rust/commits/491f63214ad557f1617d11b05b1e2fb4666bba85", "html_url": "https://github.com/rust-lang/rust/commit/491f63214ad557f1617d11b05b1e2fb4666bba85"}], "stats": {"total": 34, "additions": 7, "deletions": 27}, "files": [{"sha": "fe28c526be3507692d42f978ef5f1e680c274abc", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -167,7 +167,7 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n             Finite\n         },\n         ExprKind::Block(block, _) => block.expr.as_ref().map_or(Finite, |e| is_infinite(cx, e)),\n-        ExprKind::Box(e) | ExprKind::AddrOf(BorrowKind::Ref, _, e) => is_infinite(cx, e),\n+        ExprKind::AddrOf(BorrowKind::Ref, _, e) => is_infinite(cx, e),\n         ExprKind::Call(path, _) => {\n             if let ExprKind::Path(ref qpath) = path.kind {\n                 cx.qpath_res(qpath, path.hir_id)"}, {"sha": "f0a1b1dfe56281e29339411eade823f6b21c8bb9", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -124,8 +124,7 @@ fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<(&'tcx Expr<'tcx>, Option<&'t\n #[allow(clippy::too_many_lines)]\n fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: HirId) -> NeverLoopResult {\n     match expr.kind {\n-        ExprKind::Box(e)\n-        | ExprKind::Unary(_, e)\n+        ExprKind::Unary(_, e)\n         | ExprKind::Cast(e, _)\n         | ExprKind::Type(e, _)\n         | ExprKind::Field(e, _)"}, {"sha": "04225beeb704b69a20df0f6bcddd73f389381ac8", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -321,7 +321,6 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n                     self.has_significant_drop = true;\n                 }\n             }\n-            ExprKind::Box(..) |\n             ExprKind::Array(..) |\n             ExprKind::Call(..) |\n             ExprKind::Unary(..) |"}, {"sha": "67618f7038addb2dee7b697369f2c088f56e3282", "filename": "clippy_lints/src/methods/unnecessary_sort_by.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -33,10 +33,6 @@ struct SortByKeyDetection {\n /// contains a and the other replaces it with b)\n fn mirrored_exprs(a_expr: &Expr<'_>, a_ident: &Ident, b_expr: &Expr<'_>, b_ident: &Ident) -> bool {\n     match (&a_expr.kind, &b_expr.kind) {\n-        // Two boxes with mirrored contents\n-        (ExprKind::Box(left_expr), ExprKind::Box(right_expr)) => {\n-            mirrored_exprs(left_expr, a_ident, right_expr, b_ident)\n-        },\n         // Two arrays with mirrored contents\n         (ExprKind::Array(left_exprs), ExprKind::Array(right_exprs)) => {\n             iter::zip(*left_exprs, *right_exprs).all(|(left, right)| mirrored_exprs(left, a_ident, right, b_ident))"}, {"sha": "e3712190e67223db03554879d323b2115d0c0fb6", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -127,8 +127,7 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         | ExprKind::Type(inner, _)\n         | ExprKind::Unary(_, inner)\n         | ExprKind::Field(inner, _)\n-        | ExprKind::AddrOf(_, _, inner)\n-        | ExprKind::Box(inner) => has_no_effect(cx, inner),\n+        | ExprKind::AddrOf(_, _, inner) => has_no_effect(cx, inner),\n         ExprKind::Struct(_, fields, ref base) => {\n             !has_drop(cx, cx.typeck_results().expr_ty(expr))\n                 && fields.iter().all(|field| has_no_effect(cx, field.expr))\n@@ -234,8 +233,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<Vec\n         | ExprKind::Type(inner, _)\n         | ExprKind::Unary(_, inner)\n         | ExprKind::Field(inner, _)\n-        | ExprKind::AddrOf(_, _, inner)\n-        | ExprKind::Box(inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n+        | ExprKind::AddrOf(_, _, inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n         ExprKind::Struct(_, fields, ref base) => {\n             if has_drop(cx, cx.typeck_results().expr_ty(expr)) {\n                 None"}, {"sha": "ae7d19624ba617a4c695cc2877bb650f8c547c70", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -213,8 +213,7 @@ fn is_self_shadow(cx: &LateContext<'_>, pat: &Pat<'_>, mut expr: &Expr<'_>, hir_\n     }\n     loop {\n         expr = match expr.kind {\n-            ExprKind::Box(e)\n-            | ExprKind::AddrOf(_, _, e)\n+            ExprKind::AddrOf(_, _, e)\n             | ExprKind::Block(\n                 &Block {\n                     stmts: [],"}, {"sha": "e12681c0a0ca659d80c22383c6c10c02ae3d6681", "filename": "clippy_lints/src/significant_drop_tightening.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -380,7 +380,6 @@ impl<'cx, 'sdt, 'tcx> Visitor<'tcx> for SigDropFinder<'cx, 'sdt, 'tcx> {\n             | hir::ExprKind::Assign(..)\n             | hir::ExprKind::AssignOp(..)\n             | hir::ExprKind::Binary(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::Call(..)\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::If(..)"}, {"sha": "bc4adf1596d44d5fc890642306ae22621d086257", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -395,11 +395,6 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 }\n                 self.expr(field!(let_expr.init));\n             },\n-            ExprKind::Box(inner) => {\n-                bind!(self, inner);\n-                kind!(\"Box({inner})\");\n-                self.expr(inner);\n-            },\n             ExprKind::Array(elements) => {\n                 bind!(self, elements);\n                 kind!(\"Array({elements})\");"}, {"sha": "d3a6929f67e2ce5634c1f6769e192f840043eeda", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -112,7 +112,6 @@ fn qpath_search_pat(path: &QPath<'_>) -> (Pat, Pat) {\n /// Get the search patterns to use for the given expression\n fn expr_search_pat(tcx: TyCtxt<'_>, e: &Expr<'_>) -> (Pat, Pat) {\n     match e.kind {\n-        ExprKind::Box(e) => (Pat::Str(\"box\"), expr_search_pat(tcx, e).1),\n         ExprKind::ConstBlock(_) => (Pat::Str(\"const\"), Pat::Str(\"}\")),\n         ExprKind::Tup([]) => (Pat::Str(\")\"), Pat::Str(\"(\")),\n         ExprKind::Unary(UnOp::Deref, e) => (Pat::Str(\"*\"), expr_search_pat(tcx, e).1),"}, {"sha": "babbc7294a17348c2d4c0878bc39a9701072eebd", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -199,8 +199,7 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 },\n \n                 // Memory allocation, custom operator, loop, or call to an unknown function\n-                ExprKind::Box(_)\n-                | ExprKind::Unary(..)\n+                ExprKind::Unary(..)\n                 | ExprKind::Binary(..)\n                 | ExprKind::Loop(..)\n                 | ExprKind::Call(..) => self.eagerness = Lazy,"}, {"sha": "3a6d23ca5c10221b7a81c80f9f389f79e2b1e957", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -249,7 +249,6 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 both(&li.label, &ri.label, |l, r| l.ident.name == r.ident.name)\n                     && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n-            (&ExprKind::Box(l), &ExprKind::Box(r)) => self.eq_expr(l, r),\n             (&ExprKind::Call(l_fun, l_args), &ExprKind::Call(r_fun, r_args)) => {\n                 self.inner.allow_side_effects && self.eq_expr(l_fun, r_fun) && self.eq_exprs(l_args, r_args)\n             },\n@@ -628,7 +627,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_expr(j);\n                 }\n             },\n-            ExprKind::Box(e) | ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {\n+            ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {\n                 self.hash_expr(e);\n             },\n             ExprKind::Call(fun, args) => {"}, {"sha": "44cb5d5756ada6abd2864a5e9088b5d641449d0d", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -133,7 +133,6 @@ impl<'a> Sugg<'a> {\n \n         match expr.kind {\n             hir::ExprKind::AddrOf(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::If(..)\n             | hir::ExprKind::Let(..)\n             | hir::ExprKind::Closure { .. }"}, {"sha": "86a93f64fb71e78ac5ec52be54d362a8fec4fca0", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eddc5924756bbef97e0a02f5120139ca74ecb6/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=f2eddc5924756bbef97e0a02f5120139ca74ecb6", "patch": "@@ -600,7 +600,6 @@ pub fn for_each_unconsumed_temporary<'tcx, B>(\n                 helper(typeck, false, e, f)?;\n             },\n             ExprKind::Block(&Block { expr: Some(e), .. }, _)\n-            | ExprKind::Box(e)\n             | ExprKind::Cast(e, _)\n             | ExprKind::Unary(_, e) => {\n                 helper(typeck, true, e, f)?;"}]}