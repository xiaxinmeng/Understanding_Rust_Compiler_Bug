{"sha": "a7909522547cb35b32a4f11b78b2b54864189295", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OTA5NTIyNTQ3Y2IzNWIzMmE0ZjExYjc4YjJiNTQ4NjQxODkyOTU=", "commit": {"author": {"name": "Joseph Ryan", "email": "josephryan3.14@gmail.com", "date": "2020-06-26T13:18:20Z"}, "committer": {"name": "Joseph Ryan", "email": "josephryan3.14@gmail.com", "date": "2020-07-27T21:00:38Z"}, "message": "Pull out more types from html", "tree": {"sha": "d1dbc926a8d5f380d70914008fb53b3395e3e9dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1dbc926a8d5f380d70914008fb53b3395e3e9dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7909522547cb35b32a4f11b78b2b54864189295", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEtei29J14PIgXYsIlGom1QEO7zL0FAl8fQHYACgkQGom1QEO7\nzL3tAwgAjS94b6AuajUW6QqoBfeNlgVxtlw7Dmovgq/mF1qKqz83zTQvbQF9u5jP\nQibToSia95rrKHwiRCRIur/U/P6INT5auMoxgF6LZYjvSuVXpYrm+pb/kZLzWAMT\n4+ZKg7BehlbhMtFoJHUKV8b91lu/lW79VEF7cZzcdq5/zvppncs8CaMR3GqC6HGb\ncQTCrGmjIvOi1V2Bs8Z7U/56it62m2CQX7S2R9X21ZhcEfPsNGAFfIZ4lyPPNSds\ncz8eCMs9xzy6JxgmW0Km9pwMOc9J3iC8fCH8FMygO8nS+bkp00wjWkmOW5OKuAtL\nBE8oiAtDSo3tyqu83NfmmF4VeoR2KA==\n=QDKX\n-----END PGP SIGNATURE-----", "payload": "tree d1dbc926a8d5f380d70914008fb53b3395e3e9dd\nparent 6a4396b98c6fcb405429a9798a9ab6554f015b7e\nauthor Joseph Ryan <josephryan3.14@gmail.com> 1593177500 -0500\ncommitter Joseph Ryan <josephryan3.14@gmail.com> 1595883638 -0500\n\nPull out more types from html\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7909522547cb35b32a4f11b78b2b54864189295", "html_url": "https://github.com/rust-lang/rust/commit/a7909522547cb35b32a4f11b78b2b54864189295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7909522547cb35b32a4f11b78b2b54864189295/comments", "author": {"login": "P1n3appl3", "id": 9326885, "node_id": "MDQ6VXNlcjkzMjY4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/9326885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P1n3appl3", "html_url": "https://github.com/P1n3appl3", "followers_url": "https://api.github.com/users/P1n3appl3/followers", "following_url": "https://api.github.com/users/P1n3appl3/following{/other_user}", "gists_url": "https://api.github.com/users/P1n3appl3/gists{/gist_id}", "starred_url": "https://api.github.com/users/P1n3appl3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P1n3appl3/subscriptions", "organizations_url": "https://api.github.com/users/P1n3appl3/orgs", "repos_url": "https://api.github.com/users/P1n3appl3/repos", "events_url": "https://api.github.com/users/P1n3appl3/events{/privacy}", "received_events_url": "https://api.github.com/users/P1n3appl3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P1n3appl3", "id": 9326885, "node_id": "MDQ6VXNlcjkzMjY4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/9326885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P1n3appl3", "html_url": "https://github.com/P1n3appl3", "followers_url": "https://api.github.com/users/P1n3appl3/followers", "following_url": "https://api.github.com/users/P1n3appl3/following{/other_user}", "gists_url": "https://api.github.com/users/P1n3appl3/gists{/gist_id}", "starred_url": "https://api.github.com/users/P1n3appl3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P1n3appl3/subscriptions", "organizations_url": "https://api.github.com/users/P1n3appl3/orgs", "repos_url": "https://api.github.com/users/P1n3appl3/repos", "events_url": "https://api.github.com/users/P1n3appl3/events{/privacy}", "received_events_url": "https://api.github.com/users/P1n3appl3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a4396b98c6fcb405429a9798a9ab6554f015b7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4396b98c6fcb405429a9798a9ab6554f015b7e", "html_url": "https://github.com/rust-lang/rust/commit/6a4396b98c6fcb405429a9798a9ab6554f015b7e"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "97e1af13b8a56fa6ab63a95fe51dc80e5d90601c", "filename": "src/librustdoc/formats/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7909522547cb35b32a4f11b78b2b54864189295/src%2Flibrustdoc%2Fformats%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7909522547cb35b32a4f11b78b2b54864189295/src%2Flibrustdoc%2Fformats%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fmod.rs?ref=a7909522547cb35b32a4f11b78b2b54864189295", "patch": "@@ -9,6 +9,17 @@ use rustc_span::def_id::DefId;\n use crate::clean;\n use crate::clean::types::GetDefId;\n \n+pub enum AssocItemRender<'a> {\n+    All,\n+    DerefFor { trait_: &'a clean::Type, type_: &'a clean::Type, deref_mut_: bool },\n+}\n+\n+#[derive(Copy, Clone, PartialEq)]\n+pub enum RenderMode {\n+    Normal,\n+    ForDeref { mut_: bool },\n+}\n+\n /// Metadata about implementations for a type or trait.\n #[derive(Clone, Debug)]\n pub struct Impl {"}, {"sha": "d4ba6726cd22a44f8f7bd7d8c5aaa31393f0d30d", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7909522547cb35b32a4f11b78b2b54864189295/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7909522547cb35b32a4f11b78b2b54864189295/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=a7909522547cb35b32a4f11b78b2b54864189295", "patch": "@@ -10,6 +10,8 @@ use crate::formats::cache::{Cache, CACHE_KEY};\n pub trait FormatRenderer: Clone {\n     type Output: FormatRenderer;\n \n+    /// Sets up any state required for the emulator. When this is called the cache has already been\n+    /// populated.\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n@@ -30,7 +32,7 @@ pub trait FormatRenderer: Clone {\n     ) -> Result<(), Error>;\n \n     /// Runs after recursively rendering all sub-items of a module.\n-    fn mod_item_out(&mut self, name: &str) -> Result<(), Error>;\n+    fn mod_item_out(&mut self, item_name: &str) -> Result<(), Error>;\n \n     /// Post processing hook for cleanup and dumping output to files.\n     fn after_krate(&mut self, krate: &clean::Crate, cache: &Cache) -> Result<(), Error>;"}, {"sha": "7140cf00b6e9375fa6532fe9524dbaf583bfefdc", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a7909522547cb35b32a4f11b78b2b54864189295/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7909522547cb35b32a4f11b78b2b54864189295/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=a7909522547cb35b32a4f11b78b2b54864189295", "patch": "@@ -70,7 +70,7 @@ use crate::doctree;\n use crate::error::Error;\n use crate::formats::cache::{cache, Cache};\n use crate::formats::item_type::ItemType;\n-use crate::formats::{FormatRenderer, Impl};\n+use crate::formats::{AssocItemRender, FormatRenderer, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::fmt_impl_for_trait_page;\n use crate::html::format::Function;\n@@ -626,7 +626,7 @@ impl FormatRenderer for Context {\n         Ok(())\n     }\n \n-    fn mod_item_out(&mut self, _name: &str) -> Result<(), Error> {\n+    fn mod_item_out(&mut self, _item_name: &str) -> Result<(), Error> {\n         info!(\"Recursed; leaving {}\", self.dst.display());\n \n         // Go back to where we were at\n@@ -3255,17 +3255,6 @@ impl<'a> AssocItemLink<'a> {\n     }\n }\n \n-enum AssocItemRender<'a> {\n-    All,\n-    DerefFor { trait_: &'a clean::Type, type_: &'a clean::Type, deref_mut_: bool },\n-}\n-\n-#[derive(Copy, Clone, PartialEq)]\n-enum RenderMode {\n-    Normal,\n-    ForDeref { mut_: bool },\n-}\n-\n fn render_assoc_items(\n     w: &mut Buffer,\n     cx: &Context,"}]}