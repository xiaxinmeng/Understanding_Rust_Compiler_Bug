{"sha": "f3adec65dd0b05a0a30cd2c134f252e8bece0b76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYWRlYzY1ZGQwYjA1YTBhMzBjZDJjMTM0ZjI1MmU4YmVjZTBiNzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-22T06:50:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-22T06:50:18Z"}, "message": "Auto merge of #53918 - Havvy:doc-sort-by, r=GuillaumeGomez\n\nDoc total order requirement of sort(_unstable)_by\n\nI took the definition of what a total order is from the Ord trait\ndocs. I specifically put \"elements of the slice\" because if you\nhave a slice of f64s, but know none are NaN, then sorting by\npartial ord is total in this case. I'm not sure if I should give\nsuch an example in the docs or not.\n\nr? @GuillaumeGomez", "tree": {"sha": "c54838e3d026957c59ab9cc49a16afd213820961", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c54838e3d026957c59ab9cc49a16afd213820961"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3adec65dd0b05a0a30cd2c134f252e8bece0b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3adec65dd0b05a0a30cd2c134f252e8bece0b76", "html_url": "https://github.com/rust-lang/rust/commit/f3adec65dd0b05a0a30cd2c134f252e8bece0b76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3adec65dd0b05a0a30cd2c134f252e8bece0b76/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bec59c93baa71d599a616fda9f1180febb08386", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bec59c93baa71d599a616fda9f1180febb08386", "html_url": "https://github.com/rust-lang/rust/commit/4bec59c93baa71d599a616fda9f1180febb08386"}, {"sha": "99bed21101ef098393c9e6c8eb64f21892dbc8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/99bed21101ef098393c9e6c8eb64f21892dbc8be", "html_url": "https://github.com/rust-lang/rust/commit/99bed21101ef098393c9e6c8eb64f21892dbc8be"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "22da9dd6e9619804beece5a0487977d82288a15a", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3adec65dd0b05a0a30cd2c134f252e8bece0b76/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3adec65dd0b05a0a30cd2c134f252e8bece0b76/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=f3adec65dd0b05a0a30cd2c134f252e8bece0b76", "patch": "@@ -213,6 +213,22 @@ impl<T> [T] {\n     ///\n     /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n     ///\n+    /// The comparator function must define a total ordering for the elements in the slice. If\n+    /// the ordering is not total, the order of the elements is unspecified. An order is a\n+    /// total order if it is (for all a, b and c):\n+    ///\n+    /// * total and antisymmetric: exactly one of a < b, a == b or a > b is true; and\n+    /// * transitive, a < b and b < c implies a < c. The same must hold for both == and >.\n+    ///\n+    /// For example, while [`f64`] doesn't implement [`Ord`] because `NaN != NaN`, we can use\n+    /// `partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`.\n+    ///\n+    /// ```\n+    /// let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];\n+    /// floats.sort_by(|a, b| a.partial_cmp(b).unwrap());\n+    /// assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);\n+    /// ```\n+    ///\n     /// When applicable, unstable sorting is preferred because it is generally faster than stable\n     /// sorting and it doesn't allocate auxiliary memory.\n     /// See [`sort_unstable_by`](#method.sort_unstable_by)."}, {"sha": "8c55a16f3c8888d289d8257818fbceae0ae1dc50", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3adec65dd0b05a0a30cd2c134f252e8bece0b76/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3adec65dd0b05a0a30cd2c134f252e8bece0b76/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=f3adec65dd0b05a0a30cd2c134f252e8bece0b76", "patch": "@@ -1510,6 +1510,22 @@ impl<T> [T] {\n     /// This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),\n     /// and `O(n log n)` worst-case.\n     ///\n+    /// The comparator function must define a total ordering for the elements in the slice. If\n+    /// the ordering is not total, the order of the elements is unspecified. An order is a\n+    /// total order if it is (for all a, b and c):\n+    ///\n+    /// * total and antisymmetric: exactly one of a < b, a == b or a > b is true; and\n+    /// * transitive, a < b and b < c implies a < c. The same must hold for both == and >.\n+    ///\n+    /// For example, while [`f64`] doesn't implement [`Ord`] because `NaN != NaN`, we can use\n+    /// `partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`.\n+    ///\n+    /// ```\n+    /// let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];\n+    /// floats.sort_by(|a, b| a.partial_cmp(b).unwrap());\n+    /// assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);\n+    /// ```\n+    ///\n     /// # Current implementation\n     ///\n     /// The current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,"}]}