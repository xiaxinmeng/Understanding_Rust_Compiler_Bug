{"sha": "c7b0452ece11bf714f7cf2003747231931504d59", "node_id": "C_kwDOAAsO6NoAKGM3YjA0NTJlY2UxMWJmNzE0ZjdjZjIwMDM3NDcyMzE5MzE1MDRkNTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-04T11:29:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-04T11:29:29Z"}, "message": "Auto merge of #97729 - Dylan-DPC:rollup-dv43xo9, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #96642 (Avoid zero-sized allocs in ThinBox if T and H are both ZSTs.)\n - #97647 (Lazily allocate and initialize pthread locks.)\n - #97715 (Support the `#[expect]` attribute on fn parameters (RFC-2383))\n - #97716 (Fix reachability analysis for const methods)\n - #97722 (Tighten spans for bad fields in struct deriving `Copy`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2b9262057b6893f397e75ad170611e99d53f4973", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9262057b6893f397e75ad170611e99d53f4973"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7b0452ece11bf714f7cf2003747231931504d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b0452ece11bf714f7cf2003747231931504d59", "html_url": "https://github.com/rust-lang/rust/commit/c7b0452ece11bf714f7cf2003747231931504d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7b0452ece11bf714f7cf2003747231931504d59/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a52e0fd7d80e50f22999ce3a765ea1341bd442a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a52e0fd7d80e50f22999ce3a765ea1341bd442a", "html_url": "https://github.com/rust-lang/rust/commit/4a52e0fd7d80e50f22999ce3a765ea1341bd442a"}, {"sha": "8c4c698efb7d396d5821c0328366c709461c2fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4c698efb7d396d5821c0328366c709461c2fe9", "html_url": "https://github.com/rust-lang/rust/commit/8c4c698efb7d396d5821c0328366c709461c2fe9"}], "stats": {"total": 837, "additions": 614, "deletions": 223}, "files": [{"sha": "21db7d0eebcc06fe0783b17bc94b71cf78d8964a", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -420,7 +420,15 @@ impl<'a> AstValidator<'a> {\n             .iter()\n             .flat_map(|i| i.attrs.as_ref())\n             .filter(|attr| {\n-                let arr = [sym::allow, sym::cfg, sym::cfg_attr, sym::deny, sym::forbid, sym::warn];\n+                let arr = [\n+                    sym::allow,\n+                    sym::cfg,\n+                    sym::cfg_attr,\n+                    sym::deny,\n+                    sym::expect,\n+                    sym::forbid,\n+                    sym::warn,\n+                ];\n                 !arr.contains(&attr.name_or_empty()) && rustc_attr::is_builtin_attr(attr)\n             })\n             .for_each(|attr| {\n@@ -435,7 +443,7 @@ impl<'a> AstValidator<'a> {\n                 } else {\n                     self.err_handler().span_err(\n                         attr.span,\n-                        \"allow, cfg, cfg_attr, deny, \\\n+                        \"allow, cfg, cfg_attr, deny, expect, \\\n                 forbid, and warn are the only allowed built-in attributes in function parameters\",\n                     );\n                 }"}, {"sha": "75376cdc592d36597c1d8b5e594d825d779c69cf", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -148,32 +148,15 @@ impl<'tcx> ReachableContext<'tcx> {\n                 hir::TraitItemKind::Fn(_, hir::TraitFn::Required(_))\n                 | hir::TraitItemKind::Type(..) => false,\n             },\n-            Some(Node::ImplItem(impl_item)) => {\n-                match impl_item.kind {\n-                    hir::ImplItemKind::Const(..) => true,\n-                    hir::ImplItemKind::Fn(..) => {\n-                        let attrs = self.tcx.codegen_fn_attrs(def_id);\n-                        let generics = self.tcx.generics_of(def_id);\n-                        if generics.requires_monomorphization(self.tcx) || attrs.requests_inline() {\n-                            true\n-                        } else {\n-                            let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                            let impl_did = self.tcx.hir().get_parent_item(hir_id);\n-                            // Check the impl. If the generics on the self\n-                            // type of the impl require inlining, this method\n-                            // does too.\n-                            match self.tcx.hir().expect_item(impl_did).kind {\n-                                hir::ItemKind::Impl { .. } => {\n-                                    let generics = self.tcx.generics_of(impl_did);\n-                                    generics.requires_monomorphization(self.tcx)\n-                                }\n-                                _ => false,\n-                            }\n-                        }\n-                    }\n-                    hir::ImplItemKind::TyAlias(_) => false,\n+            Some(Node::ImplItem(impl_item)) => match impl_item.kind {\n+                hir::ImplItemKind::Const(..) => true,\n+                hir::ImplItemKind::Fn(..) => {\n+                    let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+                    let impl_did = self.tcx.hir().get_parent_item(hir_id);\n+                    method_might_be_inlined(self.tcx, impl_item, impl_did)\n                 }\n-            }\n+                hir::ImplItemKind::TyAlias(_) => false,\n+            },\n             Some(_) => false,\n             None => false, // This will happen for default methods.\n         }"}, {"sha": "f04f527ccb7af8f3062ab4a2f4361c8876afea16", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -20,7 +20,7 @@ pub fn can_type_implement_copy<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     self_type: Ty<'tcx>,\n-    cause: ObligationCause<'tcx>,\n+    parent_cause: ObligationCause<'tcx>,\n ) -> Result<(), CopyImplementationError<'tcx>> {\n     // FIXME: (@jroesch) float this code up\n     tcx.infer_ctxt().enter(|infcx| {\n@@ -59,7 +59,7 @@ pub fn can_type_implement_copy<'tcx>(\n                     .ty(tcx, traits::InternalSubsts::identity_for_item(tcx, adt.did()))\n                     .has_param_types_or_consts()\n                 {\n-                    cause.clone()\n+                    parent_cause.clone()\n                 } else {\n                     ObligationCause::dummy_with_span(span)\n                 };"}, {"sha": "9f4e6a46d73220596ce13b2108f80868a101805b", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -107,6 +107,10 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n \n             for (field, ty) in fields {\n                 let field_span = tcx.def_span(field.did);\n+                let field_ty_span = match tcx.hir().get_if_local(field.did) {\n+                    Some(hir::Node::Field(field_def)) => field_def.ty.span,\n+                    _ => field_span,\n+                };\n                 err.span_label(field_span, \"this field does not implement `Copy`\");\n                 // Spin up a new FulfillmentContext, so we can get the _precise_ reason\n                 // why this field does not implement Copy. This is useful because sometimes\n@@ -119,7 +123,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                         param_env,\n                         ty,\n                         tcx.lang_items().copy_trait().unwrap(),\n-                        traits::ObligationCause::dummy_with_span(field_span),\n+                        traits::ObligationCause::dummy_with_span(field_ty_span),\n                     );\n                     for error in fulfill_cx.select_all_or_error(&infcx) {\n                         let error_predicate = error.obligation.predicate;"}, {"sha": "807c035fdbd0db099ca3ecc0ff943bb4463b2233", "filename": "library/alloc/src/boxed/thin.rs", "status": "modified", "additions": 46, "deletions": 19, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -138,7 +138,11 @@ impl<T: ?Sized> ThinBox<T> {\n     }\n }\n \n-/// A pointer to type-erased data, guaranteed to have a header `H` before the pointed-to location.\n+/// A pointer to type-erased data, guaranteed to either be:\n+/// 1. `NonNull::dangling()`, in the case where both the pointee (`T`) and\n+///    metadata (`H`) are ZSTs.\n+/// 2. A pointer to a valid `T` that has a header `H` directly before the\n+///    pointed-to location.\n struct WithHeader<H>(NonNull<u8>, PhantomData<H>);\n \n impl<H> WithHeader<H> {\n@@ -156,16 +160,27 @@ impl<H> WithHeader<H> {\n         };\n \n         unsafe {\n-            let ptr = alloc::alloc(layout);\n-\n-            if ptr.is_null() {\n-                alloc::handle_alloc_error(layout);\n-            }\n-            //  Safety:\n-            //  -   The size is at least `aligned_header_size`.\n-            let ptr = ptr.add(value_offset) as *mut _;\n-\n-            let ptr = NonNull::new_unchecked(ptr);\n+            // Note: It's UB to pass a layout with a zero size to `alloc::alloc`, so\n+            // we use `layout.dangling()` for this case, which should have a valid\n+            // alignment for both `T` and `H`.\n+            let ptr = if layout.size() == 0 {\n+                // Some paranoia checking, mostly so that the ThinBox tests are\n+                // more able to catch issues.\n+                debug_assert!(\n+                    value_offset == 0 && mem::size_of::<T>() == 0 && mem::size_of::<H>() == 0\n+                );\n+                layout.dangling()\n+            } else {\n+                let ptr = alloc::alloc(layout);\n+                if ptr.is_null() {\n+                    alloc::handle_alloc_error(layout);\n+                }\n+                // Safety:\n+                // - The size is at least `aligned_header_size`.\n+                let ptr = ptr.add(value_offset) as *mut _;\n+\n+                NonNull::new_unchecked(ptr)\n+            };\n \n             let result = WithHeader(ptr, PhantomData);\n             ptr::write(result.header(), header);\n@@ -175,18 +190,28 @@ impl<H> WithHeader<H> {\n         }\n     }\n \n-    //  Safety:\n-    //  -   Assumes that `value` can be dereferenced.\n+    // Safety:\n+    // - Assumes that either `value` can be dereferenced, or is the\n+    //   `NonNull::dangling()` we use when both `T` and `H` are ZSTs.\n     unsafe fn drop<T: ?Sized>(&self, value: *mut T) {\n         unsafe {\n+            let value_layout = Layout::for_value_raw(value);\n             // SAFETY: Layout must have been computable if we're in drop\n-            let (layout, value_offset) =\n-                Self::alloc_layout(Layout::for_value_raw(value)).unwrap_unchecked();\n+            let (layout, value_offset) = Self::alloc_layout(value_layout).unwrap_unchecked();\n \n-            ptr::drop_in_place::<T>(value);\n             // We only drop the value because the Pointee trait requires that the metadata is copy\n-            // aka trivially droppable\n-            alloc::dealloc(self.0.as_ptr().sub(value_offset), layout);\n+            // aka trivially droppable.\n+            ptr::drop_in_place::<T>(value);\n+\n+            // Note: Don't deallocate if the layout size is zero, because the pointer\n+            // didn't come from the allocator.\n+            if layout.size() != 0 {\n+                alloc::dealloc(self.0.as_ptr().sub(value_offset), layout);\n+            } else {\n+                debug_assert!(\n+                    value_offset == 0 && mem::size_of::<H>() == 0 && value_layout.size() == 0\n+                );\n+            }\n         }\n     }\n \n@@ -198,7 +223,9 @@ impl<H> WithHeader<H> {\n         //    needed to align the header. Subtracting the header size from the aligned data pointer\n         //    will always result in an aligned header pointer, it just may not point to the\n         //    beginning of the allocation.\n-        unsafe { self.0.as_ptr().sub(Self::header_size()) as *mut H }\n+        let hp = unsafe { self.0.as_ptr().sub(Self::header_size()) as *mut H };\n+        debug_assert!(hp.is_aligned());\n+        hp\n     }\n \n     fn value(&self) -> *mut u8 {"}, {"sha": "dbfe58056a53e0cedcb7e33a4e5af3c304b601ea", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -169,6 +169,7 @@\n #![feature(nll)] // Not necessary, but here to test the `nll` feature.\n #![feature(rustc_allow_const_fn_unstable)]\n #![feature(rustc_attrs)]\n+#![feature(pointer_is_aligned)]\n #![feature(slice_internals)]\n #![feature(staged_api)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "ffc7944ec7e1b7176e13f7c3ff5d6e9228a9feac", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -42,6 +42,9 @@\n #![feature(panic_update_hook)]\n #![feature(slice_flatten)]\n #![feature(thin_box)]\n+#![feature(bench_black_box)]\n+#![feature(strict_provenance)]\n+#![feature(once_cell)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "70d1db8b45766c373bbf82eeb053020646cf8a36", "filename": "library/alloc/tests/thin_box.rs", "status": "modified", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Falloc%2Ftests%2Fthin_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Falloc%2Ftests%2Fthin_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fthin_box.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -1,3 +1,4 @@\n+use core::fmt::Debug;\n use core::mem::size_of;\n use std::boxed::ThinBox;\n \n@@ -24,3 +25,231 @@ fn want_thin() {\n     assert!(is_thin::<[i32]>());\n     assert!(is_thin::<i32>());\n }\n+\n+#[track_caller]\n+fn verify_aligned<T>(ptr: *const T) {\n+    // Use `black_box` to attempt to obscure the fact that we're calling this\n+    // function on pointers that come from box/references, which the compiler\n+    // would otherwise realize is impossible (because it would mean we've\n+    // already executed UB).\n+    //\n+    // That is, we'd *like* it to be possible for the asserts in this function\n+    // to detect brokenness in the ThinBox impl.\n+    //\n+    // It would probably be better if we instead had these as debug_asserts\n+    // inside `ThinBox`, prior to the point where we do the UB. Anyway, in\n+    // practice these checks are mostly just smoke-detectors for an extremely\n+    // broken `ThinBox` impl, since it's an extremely subtle piece of code.\n+    let ptr = core::hint::black_box(ptr);\n+    let align = core::mem::align_of::<T>();\n+    assert!(\n+        (ptr.addr() & (align - 1)) == 0 && !ptr.is_null(),\n+        \"misaligned ThinBox data; valid pointers to `{}` should be aligned to {align}: {ptr:p}\",\n+        core::any::type_name::<T>(),\n+    );\n+}\n+\n+#[track_caller]\n+fn check_thin_sized<T: Debug + PartialEq + Clone>(make: impl FnOnce() -> T) {\n+    let value = make();\n+    let boxed = ThinBox::new(value.clone());\n+    let val = &*boxed;\n+    verify_aligned(val as *const T);\n+    assert_eq!(val, &value);\n+}\n+\n+#[track_caller]\n+fn check_thin_dyn<T: Debug + PartialEq + Clone>(make: impl FnOnce() -> T) {\n+    let value = make();\n+    let wanted_debug = format!(\"{value:?}\");\n+    let boxed: ThinBox<dyn Debug> = ThinBox::new_unsize(value.clone());\n+    let val = &*boxed;\n+    // wide reference -> wide pointer -> thin pointer\n+    verify_aligned(val as *const dyn Debug as *const T);\n+    let got_debug = format!(\"{val:?}\");\n+    assert_eq!(wanted_debug, got_debug);\n+}\n+\n+macro_rules! define_test {\n+    (\n+        @test_name: $testname:ident;\n+\n+        $(#[$m:meta])*\n+        struct $Type:ident($inner:ty);\n+\n+        $($test_stmts:tt)*\n+    ) => {\n+        #[test]\n+        fn $testname() {\n+            use core::sync::atomic::{AtomicIsize, Ordering};\n+            // Define the type, and implement new/clone/drop in such a way that\n+            // the number of live instances will be counted.\n+            $(#[$m])*\n+            #[derive(Debug, PartialEq)]\n+            struct $Type {\n+                _priv: $inner,\n+            }\n+\n+            impl Clone for $Type {\n+                fn clone(&self) -> Self {\n+                    verify_aligned(self);\n+                    Self::new(self._priv.clone())\n+                }\n+            }\n+\n+            impl Drop for $Type {\n+                fn drop(&mut self) {\n+                    verify_aligned(self);\n+                    Self::modify_live(-1);\n+                }\n+            }\n+\n+            impl $Type {\n+                fn new(i: $inner) -> Self {\n+                    Self::modify_live(1);\n+                    Self { _priv: i }\n+                }\n+\n+                fn modify_live(n: isize) -> isize {\n+                    static COUNTER: AtomicIsize = AtomicIsize::new(0);\n+                    COUNTER.fetch_add(n, Ordering::Relaxed) + n\n+                }\n+\n+                fn live_objects() -> isize {\n+                    Self::modify_live(0)\n+                }\n+            }\n+            // Run the test statements\n+            let _: () = { $($test_stmts)* };\n+            // Check that we didn't leak anything, or call drop too many times.\n+            assert_eq!(\n+                $Type::live_objects(), 0,\n+                \"Wrong number of drops of {}, `initializations - drops` should be 0.\",\n+                stringify!($Type),\n+            );\n+        }\n+    };\n+}\n+\n+define_test! {\n+    @test_name: align1zst;\n+    struct Align1Zst(());\n+\n+    check_thin_sized(|| Align1Zst::new(()));\n+    check_thin_dyn(|| Align1Zst::new(()));\n+}\n+\n+define_test! {\n+    @test_name: align1small;\n+    struct Align1Small(u8);\n+\n+    check_thin_sized(|| Align1Small::new(50));\n+    check_thin_dyn(|| Align1Small::new(50));\n+}\n+\n+define_test! {\n+    @test_name: align1_size_not_pow2;\n+    struct Align64NotPow2Size([u8; 79]);\n+\n+    check_thin_sized(|| Align64NotPow2Size::new([100; 79]));\n+    check_thin_dyn(|| Align64NotPow2Size::new([100; 79]));\n+}\n+\n+define_test! {\n+    @test_name: align1big;\n+    struct Align1Big([u8; 256]);\n+\n+    check_thin_sized(|| Align1Big::new([5u8; 256]));\n+    check_thin_dyn(|| Align1Big::new([5u8; 256]));\n+}\n+\n+// Note: `#[repr(align(2))]` is worth testing because\n+// - can have pointers which are misaligned, unlike align(1)\n+// - is still expected to have an alignment less than the alignment of a vtable.\n+define_test! {\n+    @test_name: align2zst;\n+    #[repr(align(2))]\n+    struct Align2Zst(());\n+\n+    check_thin_sized(|| Align2Zst::new(()));\n+    check_thin_dyn(|| Align2Zst::new(()));\n+}\n+\n+define_test! {\n+    @test_name: align2small;\n+    #[repr(align(2))]\n+    struct Align2Small(u8);\n+\n+    check_thin_sized(|| Align2Small::new(60));\n+    check_thin_dyn(|| Align2Small::new(60));\n+}\n+\n+define_test! {\n+    @test_name: align2full;\n+    #[repr(align(2))]\n+    struct Align2Full([u8; 2]);\n+    check_thin_sized(|| Align2Full::new([3u8; 2]));\n+    check_thin_dyn(|| Align2Full::new([3u8; 2]));\n+}\n+\n+define_test! {\n+    @test_name: align2_size_not_pow2;\n+    #[repr(align(2))]\n+    struct Align2NotPower2Size([u8; 6]);\n+\n+    check_thin_sized(|| Align2NotPower2Size::new([3; 6]));\n+    check_thin_dyn(|| Align2NotPower2Size::new([3; 6]));\n+}\n+\n+define_test! {\n+    @test_name: align2big;\n+    #[repr(align(2))]\n+    struct Align2Big([u8; 256]);\n+\n+    check_thin_sized(|| Align2Big::new([5u8; 256]));\n+    check_thin_dyn(|| Align2Big::new([5u8; 256]));\n+}\n+\n+define_test! {\n+    @test_name: align64zst;\n+    #[repr(align(64))]\n+    struct Align64Zst(());\n+\n+    check_thin_sized(|| Align64Zst::new(()));\n+    check_thin_dyn(|| Align64Zst::new(()));\n+}\n+\n+define_test! {\n+    @test_name: align64small;\n+    #[repr(align(64))]\n+    struct Align64Small(u8);\n+\n+    check_thin_sized(|| Align64Small::new(50));\n+    check_thin_dyn(|| Align64Small::new(50));\n+}\n+\n+define_test! {\n+    @test_name: align64med;\n+    #[repr(align(64))]\n+    struct Align64Med([u8; 64]);\n+    check_thin_sized(|| Align64Med::new([10; 64]));\n+    check_thin_dyn(|| Align64Med::new([10; 64]));\n+}\n+\n+define_test! {\n+    @test_name: align64_size_not_pow2;\n+    #[repr(align(64))]\n+    struct Align64NotPow2Size([u8; 192]);\n+\n+    check_thin_sized(|| Align64NotPow2Size::new([10; 192]));\n+    check_thin_dyn(|| Align64NotPow2Size::new([10; 192]));\n+}\n+\n+define_test! {\n+    @test_name: align64big;\n+    #[repr(align(64))]\n+    struct Align64Big([u8; 256]);\n+\n+    check_thin_sized(|| Align64Big::new([10; 256]));\n+    check_thin_dyn(|| Align64Big::new([10; 256]));\n+}"}, {"sha": "46f45b1977173e1a0ceecd829552a7a3712e32e3", "filename": "library/std/src/sys/hermit/condvar.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -70,9 +70,13 @@ impl Condvar {\n         mutex.lock();\n         res == 0\n     }\n+}\n \n-    pub unsafe fn destroy(&self) {\n-        let _ = abi::sem_destroy(self.sem1);\n-        let _ = abi::sem_destroy(self.sem2);\n+impl Drop for Condvar {\n+    fn drop(&mut self) {\n+        unsafe {\n+            let _ = abi::sem_destroy(self.sem1);\n+            let _ = abi::sem_destroy(self.sem2);\n+        }\n     }\n }"}, {"sha": "ef44bf411fba5c0bdf3845f1d8eabdd93489de52", "filename": "library/std/src/sys/hermit/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -215,7 +215,4 @@ impl Mutex {\n         }\n         guard.locked\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "d43fa08a17150418700c6e481463dafba6c77880", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -84,12 +84,6 @@ impl RwLock {\n         // FIXME: should only wake up one of these some of the time\n         self.cond.notify_all();\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {\n-        self.lock.destroy();\n-        self.cond.destroy();\n-    }\n }\n \n impl State {"}, {"sha": "008cd8fb1e3926f3dbe5c65bde43afda92ddc31c", "filename": "library/std/src/sys/itron/condvar.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -117,8 +117,6 @@ impl Condvar {\n         unsafe { mutex.lock() };\n         success\n     }\n-\n-    pub unsafe fn destroy(&self) {}\n }\n \n mod waiter_queue {"}, {"sha": "2ba8454ff9245a6836b16843e3ace40e472ffcd9", "filename": "library/std/src/sys/itron/mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -64,8 +64,10 @@ impl Mutex {\n             }\n         }\n     }\n+}\n \n-    pub unsafe fn destroy(&self) {\n+impl Drop for Mutex {\n+    fn drop(&mut self) {\n         if let Some(mtx) = self.mtx.get().map(|x| x.0) {\n             expect_success_aborting(unsafe { abi::del_mtx(mtx) }, &\"del_mtx\");\n         }"}, {"sha": "36534e0eff3fd91595f559ac011de1077a50f53d", "filename": "library/std/src/sys/sgx/condvar.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -1,4 +1,5 @@\n use crate::sys::locks::Mutex;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n use crate::time::Duration;\n \n use super::waitqueue::{SpinMutex, WaitQueue, WaitVariable};\n@@ -7,16 +8,19 @@ pub struct Condvar {\n     inner: SpinMutex<WaitVariable<()>>,\n }\n \n-pub type MovableCondvar = Box<Condvar>;\n+pub(crate) type MovableCondvar = LazyBox<Condvar>;\n+\n+impl LazyInit for Condvar {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n \n impl Condvar {\n     pub const fn new() -> Condvar {\n         Condvar { inner: SpinMutex::new(WaitVariable::new(())) }\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n     #[inline]\n     pub unsafe fn notify_one(&self) {\n         let _ = WaitQueue::notify_one(self.inner.lock());\n@@ -38,7 +42,4 @@ impl Condvar {\n         unsafe { mutex.lock() };\n         success\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "513cd77fd2aad17fff00752d6eba65d12b654929", "filename": "library/std/src/sys/sgx/mutex.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -1,11 +1,18 @@\n use super::waitqueue::{try_lock_or_false, SpinMutex, WaitQueue, WaitVariable};\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n pub struct Mutex {\n     inner: SpinMutex<WaitVariable<bool>>,\n }\n \n // not movable: see UnsafeList implementation\n-pub type MovableMutex = Box<Mutex>;\n+pub(crate) type MovableMutex = LazyBox<Mutex>;\n+\n+impl LazyInit for Mutex {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n \n // Implementation according to \u201cOperating Systems: Three Easy Pieces\u201d, chapter 28\n impl Mutex {\n@@ -52,7 +59,4 @@ impl Mutex {\n             true\n         }\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "a97fb9ab026f02d57cc3f347ac5d62ac891d4c96", "filename": "library/std/src/sys/sgx/rwlock.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -2,6 +2,7 @@\n mod tests;\n \n use crate::num::NonZeroUsize;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n use super::waitqueue::{\n     try_lock_or_false, NotifiedTcs, SpinMutex, SpinMutexGuard, WaitQueue, WaitVariable,\n@@ -13,7 +14,13 @@ pub struct RwLock {\n     writer: SpinMutex<WaitVariable<bool>>,\n }\n \n-pub type MovableRwLock = Box<RwLock>;\n+pub(crate) type MovableRwLock = LazyBox<RwLock>;\n+\n+impl LazyInit for RwLock {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n \n // Check at compile time that RwLock size matches C definition (see test_c_rwlock_initializer below)\n //\n@@ -168,9 +175,6 @@ impl RwLock {\n             unsafe { self.__read_unlock(rguard, wguard) };\n         }\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }\n \n // The following functions are needed by libunwind. These symbols are named"}, {"sha": "433abc895f5d5c5f7b9ecba4f513ae7a74bb4cca", "filename": "library/std/src/sys/solid/rwlock.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -82,9 +82,11 @@ impl RwLock {\n         let rwl = self.raw();\n         expect_success_aborting(unsafe { abi::rwl_unl_rwl(rwl) }, &\"rwl_unl_rwl\");\n     }\n+}\n \n+impl Drop for RwLock {\n     #[inline]\n-    pub unsafe fn destroy(&self) {\n+    fn drop(&mut self) {\n         if let Some(rwl) = self.rwl.get().map(|x| x.0) {\n             expect_success_aborting(unsafe { abi::rwl_del_rwl(rwl) }, &\"rwl_del_rwl\");\n         }"}, {"sha": "a9a1a32c5afb09b41c434739d8de6bdcba73e194", "filename": "library/std/src/sys/unix/locks/futex.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -24,9 +24,6 @@ impl Mutex {\n     #[inline]\n     pub unsafe fn init(&mut self) {}\n \n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n-\n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n         self.futex.compare_exchange(0, 1, Acquire, Relaxed).is_ok()\n@@ -118,12 +115,6 @@ impl Condvar {\n         Self { futex: AtomicU32::new(0) }\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n-\n     // All the memory orderings here are `Relaxed`,\n     // because synchronization is done by unlocking and locking the mutex.\n "}, {"sha": "1f902f50587d2193e8021d507edb01990e52800c", "filename": "library/std/src/sys/unix/locks/futex_rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -63,9 +63,6 @@ impl RwLock {\n         Self { state: AtomicU32::new(0), writer_notify: AtomicU32::new(0) }\n     }\n \n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n-\n     #[inline]\n     pub unsafe fn try_read(&self) -> bool {\n         self.state"}, {"sha": "03400efa3c9aaf43d539d10d7fbea8bbadc95897", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -9,14 +9,14 @@ cfg_if::cfg_if! {\n     ))] {\n         mod futex;\n         mod futex_rwlock;\n-        pub use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n-        pub use futex_rwlock::{RwLock, MovableRwLock};\n+        pub(crate) use futex::{Mutex, MovableMutex, MovableCondvar};\n+        pub(crate) use futex_rwlock::{RwLock, MovableRwLock};\n     } else {\n         mod pthread_mutex;\n         mod pthread_rwlock;\n         mod pthread_condvar;\n-        pub use pthread_mutex::{Mutex, MovableMutex};\n-        pub use pthread_rwlock::{RwLock, MovableRwLock};\n-        pub use pthread_condvar::{Condvar, MovableCondvar};\n+        pub(crate) use pthread_mutex::{Mutex, MovableMutex};\n+        pub(crate) use pthread_rwlock::{RwLock, MovableRwLock};\n+        pub(crate) use pthread_condvar::MovableCondvar;\n     }\n }"}, {"sha": "61c28d696bcaa2dd52b7eaccb726347537ddd8ad", "filename": "library/std/src/sys/unix/locks/pthread_condvar.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -1,12 +1,13 @@\n use crate::cell::UnsafeCell;\n use crate::sys::locks::{pthread_mutex, Mutex};\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n use crate::time::Duration;\n \n pub struct Condvar {\n     inner: UnsafeCell<libc::pthread_cond_t>,\n }\n \n-pub type MovableCondvar = Box<Condvar>;\n+pub(crate) type MovableCondvar = LazyBox<Condvar>;\n \n unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n@@ -18,6 +19,14 @@ fn saturating_cast_to_time_t(value: u64) -> libc::time_t {\n     if value > <libc::time_t>::MAX as u64 { <libc::time_t>::MAX } else { value as libc::time_t }\n }\n \n+impl LazyInit for Condvar {\n+    fn init() -> Box<Self> {\n+        let mut condvar = Box::new(Self::new());\n+        unsafe { condvar.init() };\n+        condvar\n+    }\n+}\n+\n impl Condvar {\n     pub const fn new() -> Condvar {\n         // Might be moved and address is changing it is better to avoid\n@@ -32,14 +41,14 @@ impl Condvar {\n         target_os = \"android\",\n         target_os = \"redox\"\n     ))]\n-    pub unsafe fn init(&mut self) {}\n+    unsafe fn init(&mut self) {}\n \n     // NOTE: ESP-IDF's PTHREAD_COND_INITIALIZER support is not released yet\n     // So on that platform, init() should always be called\n     // Moreover, that platform does not have pthread_condattr_setclock support,\n     // hence that initialization should be skipped as well\n     #[cfg(target_os = \"espidf\")]\n-    pub unsafe fn init(&mut self) {\n+    unsafe fn init(&mut self) {\n         let r = libc::pthread_cond_init(self.inner.get(), crate::ptr::null());\n         assert_eq!(r, 0);\n     }\n@@ -52,7 +61,7 @@ impl Condvar {\n         target_os = \"redox\",\n         target_os = \"espidf\"\n     )))]\n-    pub unsafe fn init(&mut self) {\n+    unsafe fn init(&mut self) {\n         use crate::mem::MaybeUninit;\n         let mut attr = MaybeUninit::<libc::pthread_condattr_t>::uninit();\n         let r = libc::pthread_condattr_init(attr.as_mut_ptr());\n@@ -179,14 +188,14 @@ impl Condvar {\n \n     #[inline]\n     #[cfg(not(target_os = \"dragonfly\"))]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_cond_destroy(self.inner.get());\n         debug_assert_eq!(r, 0);\n     }\n \n     #[inline]\n     #[cfg(target_os = \"dragonfly\")]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_cond_destroy(self.inner.get());\n         // On DragonFly pthread_cond_destroy() returns EINVAL if called on\n         // a condvar that was just initialized with\n@@ -195,3 +204,10 @@ impl Condvar {\n         debug_assert!(r == 0 || r == libc::EINVAL);\n     }\n }\n+\n+impl Drop for Condvar {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe { self.destroy() };\n+    }\n+}"}, {"sha": "916e898d8906e2a8e9d22a44173d7773a92a6a45", "filename": "library/std/src/sys/unix/locks/pthread_mutex.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -1,12 +1,13 @@\n use crate::cell::UnsafeCell;\n use crate::mem::MaybeUninit;\n use crate::sys::cvt_nz;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n pub struct Mutex {\n     inner: UnsafeCell<libc::pthread_mutex_t>,\n }\n \n-pub type MovableMutex = Box<Mutex>;\n+pub(crate) type MovableMutex = LazyBox<Mutex>;\n \n #[inline]\n pub unsafe fn raw(m: &Mutex) -> *mut libc::pthread_mutex_t {\n@@ -16,6 +17,14 @@ pub unsafe fn raw(m: &Mutex) -> *mut libc::pthread_mutex_t {\n unsafe impl Send for Mutex {}\n unsafe impl Sync for Mutex {}\n \n+impl LazyInit for Mutex {\n+    fn init() -> Box<Self> {\n+        let mut mutex = Box::new(Self::new());\n+        unsafe { mutex.init() };\n+        mutex\n+    }\n+}\n+\n impl Mutex {\n     pub const fn new() -> Mutex {\n         // Might be moved to a different address, so it is better to avoid\n@@ -73,13 +82,13 @@ impl Mutex {\n     }\n     #[inline]\n     #[cfg(not(target_os = \"dragonfly\"))]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_mutex_destroy(self.inner.get());\n         debug_assert_eq!(r, 0);\n     }\n     #[inline]\n     #[cfg(target_os = \"dragonfly\")]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_mutex_destroy(self.inner.get());\n         // On DragonFly pthread_mutex_destroy() returns EINVAL if called on a\n         // mutex that was just initialized with libc::PTHREAD_MUTEX_INITIALIZER.\n@@ -89,6 +98,13 @@ impl Mutex {\n     }\n }\n \n+impl Drop for Mutex {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe { self.destroy() };\n+    }\n+}\n+\n pub(super) struct PthreadMutexAttr<'a>(pub &'a mut MaybeUninit<libc::pthread_mutexattr_t>);\n \n impl Drop for PthreadMutexAttr<'_> {"}, {"sha": "75e5759c7879d07caeea7c9a88f1ebd9c756ced4", "filename": "library/std/src/sys/unix/locks/pthread_rwlock.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -1,17 +1,24 @@\n use crate::cell::UnsafeCell;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n pub struct RwLock {\n     inner: UnsafeCell<libc::pthread_rwlock_t>,\n     write_locked: UnsafeCell<bool>, // guarded by the `inner` RwLock\n     num_readers: AtomicUsize,\n }\n \n-pub type MovableRwLock = Box<RwLock>;\n+pub(crate) type MovableRwLock = LazyBox<RwLock>;\n \n unsafe impl Send for RwLock {}\n unsafe impl Sync for RwLock {}\n \n+impl LazyInit for RwLock {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n+\n impl RwLock {\n     pub const fn new() -> RwLock {\n         RwLock {\n@@ -128,7 +135,7 @@ impl RwLock {\n         self.raw_unlock();\n     }\n     #[inline]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_rwlock_destroy(self.inner.get());\n         // On DragonFly pthread_rwlock_destroy() returns EINVAL if called on a\n         // rwlock that was just initialized with\n@@ -141,3 +148,10 @@ impl RwLock {\n         }\n     }\n }\n+\n+impl Drop for RwLock {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe { self.destroy() };\n+    }\n+}"}, {"sha": "f27bf2b26bdaaaf88c397ffd5544e6600412298a", "filename": "library/std/src/sys/unsupported/locks/condvar.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -10,9 +10,6 @@ impl Condvar {\n         Condvar {}\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n     #[inline]\n     pub unsafe fn notify_one(&self) {}\n \n@@ -26,7 +23,4 @@ impl Condvar {\n     pub unsafe fn wait_timeout(&self, _mutex: &Mutex, _dur: Duration) -> bool {\n         panic!(\"condvar wait not supported\");\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "56bad71b189f55a53578c44133ca8492314d10b9", "filename": "library/std/src/sys/unsupported/locks/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -32,7 +32,4 @@ impl Mutex {\n     pub unsafe fn try_lock(&self) -> bool {\n         self.locked.replace(true) == false\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "bf6e2d3d080b435e0f625877a8bbe05f501bc461", "filename": "library/std/src/sys/unsupported/locks/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -62,7 +62,4 @@ impl RwLock {\n     pub unsafe fn write_unlock(&self) {\n         assert_eq!(self.mode.replace(0), -1);\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "55b5ad314daf023ab0b3ca11d835ec740c10a827", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -54,8 +54,8 @@ cfg_if::cfg_if! {\n             #![allow(unsafe_op_in_unsafe_fn)]\n             mod futex;\n             mod futex_rwlock;\n-            pub use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n-            pub use futex_rwlock::{RwLock, MovableRwLock};\n+            pub(crate) use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n+            pub(crate) use futex_rwlock::{RwLock, MovableRwLock};\n         }\n         #[path = \"atomics/futex.rs\"]\n         pub mod futex;"}, {"sha": "59e2c1be0f0f2dc7f86bed106a1f01e061a2d0fe", "filename": "library/std/src/sys/windows/locks/condvar.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -18,9 +18,6 @@ impl Condvar {\n         Condvar { inner: UnsafeCell::new(c::CONDITION_VARIABLE_INIT) }\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n     #[inline]\n     pub unsafe fn wait(&self, mutex: &Mutex) {\n         let r = c::SleepConditionVariableSRW(self.inner.get(), mutex::raw(mutex), c::INFINITE, 0);\n@@ -51,8 +48,4 @@ impl Condvar {\n     pub unsafe fn notify_all(&self) {\n         c::WakeAllConditionVariable(self.inner.get())\n     }\n-\n-    pub unsafe fn destroy(&self) {\n-        // ...\n-    }\n }"}, {"sha": "08f55844a0efa23bdf56f9ee29c8cd333c34f81a", "filename": "library/std/src/sys/windows/locks/mutex.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -53,9 +53,4 @@ impl Mutex {\n     pub unsafe fn unlock(&self) {\n         c::ReleaseSRWLockExclusive(raw(self));\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {\n-        // SRWLock does not need to be destroyed.\n-    }\n }"}, {"sha": "a32df85e2f63c266ddd9693d9a1ef4a03bb9f96d", "filename": "library/std/src/sys/windows/locks/rwlock.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -38,9 +38,4 @@ impl RwLock {\n     pub unsafe fn write_unlock(&self) {\n         c::ReleaseSRWLockExclusive(self.inner.get())\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {\n-        // ...\n-    }\n }"}, {"sha": "1def0518e0a6fff0825ea90205c2c7b805d82cbb", "filename": "library/std/src/sys_common/condvar.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -15,9 +15,7 @@ pub struct Condvar {\n impl Condvar {\n     /// Creates a new condition variable for use.\n     pub fn new() -> Self {\n-        let mut c = imp::MovableCondvar::from(imp::Condvar::new());\n-        unsafe { c.init() };\n-        Self { inner: c, check: CondvarCheck::new() }\n+        Self { inner: imp::MovableCondvar::new(), check: CondvarCheck::new() }\n     }\n \n     /// Signals one waiter on this condition variable to wake up.\n@@ -55,9 +53,3 @@ impl Condvar {\n         self.inner.wait_timeout(mutex.raw(), dur)\n     }\n }\n-\n-impl Drop for Condvar {\n-    fn drop(&mut self) {\n-        unsafe { self.inner.destroy() };\n-    }\n-}"}, {"sha": "ce8f36704877fe390558863f5821fc40fcd3c60b", "filename": "library/std/src/sys_common/condvar/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -1,6 +1,7 @@\n use crate::ptr;\n use crate::sync::atomic::{AtomicPtr, Ordering};\n use crate::sys::locks as imp;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n use crate::sys_common::mutex::MovableMutex;\n \n pub trait CondvarCheck {\n@@ -9,7 +10,7 @@ pub trait CondvarCheck {\n \n /// For boxed mutexes, a `Condvar` will check it's only ever used with the same\n /// mutex, based on its (stable) address.\n-impl CondvarCheck for Box<imp::Mutex> {\n+impl<T: LazyInit> CondvarCheck for LazyBox<T> {\n     type Check = SameMutexCheck;\n }\n "}, {"sha": "647c13d243724122f1a37cd0cc836b1d317b5c1b", "filename": "library/std/src/sys_common/lazy_box.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -0,0 +1,77 @@\n+#![allow(dead_code)] // Only used on some platforms.\n+\n+// This is used to wrap pthread {Mutex, Condvar, RwLock} in.\n+\n+use crate::marker::PhantomData;\n+use crate::ops::{Deref, DerefMut};\n+use crate::ptr::null_mut;\n+use crate::sync::atomic::{\n+    AtomicPtr,\n+    Ordering::{AcqRel, Acquire},\n+};\n+\n+pub(crate) struct LazyBox<T: LazyInit> {\n+    ptr: AtomicPtr<T>,\n+    _phantom: PhantomData<T>,\n+}\n+\n+pub(crate) trait LazyInit {\n+    /// This is called before the box is allocated, to provide the value to\n+    /// move into the new box.\n+    ///\n+    /// It might be called more than once per LazyBox, as multiple threads\n+    /// might race to initialize it concurrently, each constructing and initializing\n+    /// their own box. (All but one of them will be destroyed right after.)\n+    fn init() -> Box<Self>;\n+}\n+\n+impl<T: LazyInit> LazyBox<T> {\n+    #[inline]\n+    pub const fn new() -> Self {\n+        Self { ptr: AtomicPtr::new(null_mut()), _phantom: PhantomData }\n+    }\n+\n+    #[inline]\n+    fn get_pointer(&self) -> *mut T {\n+        let ptr = self.ptr.load(Acquire);\n+        if ptr.is_null() { self.initialize() } else { ptr }\n+    }\n+\n+    #[cold]\n+    fn initialize(&self) -> *mut T {\n+        let new_ptr = Box::into_raw(T::init());\n+        match self.ptr.compare_exchange(null_mut(), new_ptr, AcqRel, Acquire) {\n+            Ok(_) => new_ptr,\n+            Err(ptr) => {\n+                // Lost the race to another thread.\n+                // Drop the box we created, and use the one from the other thread instead.\n+                drop(unsafe { Box::from_raw(new_ptr) });\n+                ptr\n+            }\n+        }\n+    }\n+}\n+\n+impl<T: LazyInit> Deref for LazyBox<T> {\n+    type Target = T;\n+    #[inline]\n+    fn deref(&self) -> &T {\n+        unsafe { &*self.get_pointer() }\n+    }\n+}\n+\n+impl<T: LazyInit> DerefMut for LazyBox<T> {\n+    #[inline]\n+    fn deref_mut(&mut self) -> &mut T {\n+        unsafe { &mut *self.get_pointer() }\n+    }\n+}\n+\n+impl<T: LazyInit> Drop for LazyBox<T> {\n+    fn drop(&mut self) {\n+        let ptr = *self.ptr.get_mut();\n+        if !ptr.is_null() {\n+            drop(unsafe { Box::from_raw(ptr) });\n+        }\n+    }\n+}"}, {"sha": "80f56bf7522b67edbf547f77cf8707fded8c9b21", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -24,6 +24,7 @@ pub mod backtrace;\n pub mod condvar;\n pub mod fs;\n pub mod io;\n+pub mod lazy_box;\n pub mod memchr;\n pub mod mutex;\n pub mod process;"}, {"sha": "36ea888d8de499cb7d3b5a42dac69a32f11a5781", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -61,9 +61,7 @@ unsafe impl Sync for MovableMutex {}\n impl MovableMutex {\n     /// Creates a new mutex.\n     pub fn new() -> Self {\n-        let mut mutex = imp::MovableMutex::from(imp::Mutex::new());\n-        unsafe { mutex.init() };\n-        Self(mutex)\n+        Self(imp::MovableMutex::new())\n     }\n \n     pub(super) fn raw(&self) -> &imp::Mutex {\n@@ -92,9 +90,3 @@ impl MovableMutex {\n         self.0.unlock()\n     }\n }\n-\n-impl Drop for MovableMutex {\n-    fn drop(&mut self) {\n-        unsafe { self.0.destroy() };\n-    }\n-}"}, {"sha": "8921af311d4152bb7b6fc7b4c37763ce35e14915", "filename": "library/std/src/sys_common/remutex.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -168,13 +168,6 @@ impl<T> ReentrantMutex<T> {\n     }\n }\n \n-impl<T> Drop for ReentrantMutex<T> {\n-    fn drop(&mut self) {\n-        // Safety: We're the unique owner of this mutex and not going to use it afterwards.\n-        unsafe { self.mutex.destroy() }\n-    }\n-}\n-\n impl<T> Deref for ReentrantMutexGuard<'_, T> {\n     type Target = T;\n "}, {"sha": "abc9fd561f1f60d89d97157474be1274a6b32007", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -74,7 +74,7 @@ pub struct MovableRwLock(imp::MovableRwLock);\n impl MovableRwLock {\n     /// Creates a new reader-writer lock for use.\n     pub fn new() -> Self {\n-        Self(imp::MovableRwLock::from(imp::RwLock::new()))\n+        Self(imp::MovableRwLock::new())\n     }\n \n     /// Acquires shared access to the underlying lock, blocking the current\n@@ -126,9 +126,3 @@ impl MovableRwLock {\n         self.0.write_unlock()\n     }\n }\n-\n-impl Drop for MovableRwLock {\n-    fn drop(&mut self) {\n-        unsafe { self.0.destroy() };\n-    }\n-}"}, {"sha": "158a4500bde77cc9ba6a63dc11aafb224b4ed9fb", "filename": "src/test/ui/attributes/attrs-on-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -2,7 +2,7 @@\n \n fn function(#[inline] param: u32) {\n     //~^ ERROR attribute should be applied to function or closure\n-    //~| ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes\n+    //~| ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes\n }\n \n fn main() {}"}, {"sha": "306e862cb58d41f178560ff6bad07e3e9b2d71e4", "filename": "src/test/ui/attributes/attrs-on-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.stderr?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -1,4 +1,4 @@\n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/attrs-on-params.rs:3:13\n    |\n LL | fn function(#[inline] param: u32) {"}, {"sha": "e296bd3911310c687b60a58e043c4158e734fbb2", "filename": "src/test/ui/codegen/auxiliary/issue-97708-aux.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fcodegen%2Fauxiliary%2Fissue-97708-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fcodegen%2Fauxiliary%2Fissue-97708-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fauxiliary%2Fissue-97708-aux.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -0,0 +1,41 @@\n+use std::{ptr::NonNull, task::Poll};\n+\n+struct TaskRef;\n+\n+struct Header {\n+    vtable: &'static Vtable,\n+}\n+\n+struct Vtable {\n+    poll: unsafe fn(TaskRef) -> Poll<()>,\n+    deallocate: unsafe fn(NonNull<Header>),\n+}\n+\n+// in the \"Header\" type, which is a private type in maitake\n+impl Header {\n+    pub(crate) const fn new_stub() -> Self {\n+        unsafe fn nop(_ptr: TaskRef) -> Poll<()> {\n+            Poll::Pending\n+        }\n+\n+        unsafe fn nop_deallocate(ptr: NonNull<Header>) {\n+            unreachable!(\"stub task ({ptr:p}) should never be deallocated!\");\n+        }\n+\n+        Self { vtable: &Vtable { poll: nop, deallocate: nop_deallocate } }\n+    }\n+}\n+\n+// This is a public type in `maitake`\n+#[repr(transparent)]\n+#[cfg_attr(loom, allow(dead_code))]\n+pub struct TaskStub {\n+    hdr: Header,\n+}\n+\n+impl TaskStub {\n+    /// Create a new unique stub [`Task`].\n+    pub const fn new() -> Self {\n+        Self { hdr: Header::new_stub() }\n+    }\n+}"}, {"sha": "8cb28e9f1f6613e6bdfee9b0e6a0fdc89b82c030", "filename": "src/test/ui/codegen/issue-97708.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fcodegen%2Fissue-97708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fcodegen%2Fissue-97708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-97708.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -0,0 +1,9 @@\n+// build-pass\n+// aux-build:issue-97708-aux.rs\n+\n+extern crate issue_97708_aux;\n+use issue_97708_aux::TaskStub;\n+\n+static TASK_STUB: TaskStub = TaskStub::new();\n+\n+fn main() {}"}, {"sha": "5fdb710416f04ea6fbbd86ce94a4b9fe59786e7b", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_on_fn_params.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_on_fn_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_on_fn_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_on_fn_params.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+#![feature(lint_reasons)]\n+\n+#[warn(unused_variables)]\n+\n+/// This should catch the unused_variables lint and not emit anything\n+fn check_fulfilled_expectation(#[expect(unused_variables)] unused_value: u32) {}\n+\n+fn check_unfulfilled_expectation(#[expect(unused_variables)] used_value: u32) {\n+    //~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+    //~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+    println!(\"I use the value {used_value}\");\n+}\n+\n+fn main() {}"}, {"sha": "69f7cda08ef0bc90730a45591f7cf5a1ba53c2cd", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_on_fn_params.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_on_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_on_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_on_fn_params.stderr?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -0,0 +1,10 @@\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_on_fn_params.rs:9:43\n+   |\n+LL | fn check_unfulfilled_expectation(#[expect(unused_variables)] used_value: u32) {\n+   |                                           ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "151659e35c0d610b6af3f3e77e6beb08381eb619", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -7,11 +7,11 @@ extern \"C\" {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[no_mangle] b: i32,\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n     );\n }\n \n@@ -23,11 +23,11 @@ type FnType = fn(\n     /// Bar\n     //~^ ERROR documentation comments cannot be applied to function\n     #[must_use]\n-    //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n     /// Baz\n     //~^ ERROR documentation comments cannot be applied to function\n     #[no_mangle] b: i32,\n-    //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n );\n \n pub fn foo(\n@@ -38,11 +38,11 @@ pub fn foo(\n     /// Bar\n     //~^ ERROR documentation comments cannot be applied to function\n     #[must_use]\n-    //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n     /// Baz\n     //~^ ERROR documentation comments cannot be applied to function\n     #[no_mangle] b: i32,\n-    //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n ) {}\n \n struct SelfStruct {}\n@@ -58,11 +58,11 @@ impl SelfStruct {\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n         /// Qux\n         //~^ ERROR documentation comments cannot be applied to function\n         #[no_mangle] b: i32,\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n     ) {}\n \n     fn issue_64682_associated_fn(\n@@ -73,11 +73,11 @@ impl SelfStruct {\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n         /// Qux\n         //~^ ERROR documentation comments cannot be applied to function\n         #[no_mangle] b: i32,\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n     ) {}\n }\n \n@@ -94,11 +94,11 @@ impl RefStruct {\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n         /// Qux\n         //~^ ERROR documentation comments cannot be applied to function\n         #[no_mangle] b: i32,\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n     ) {}\n }\n trait RefTrait {\n@@ -113,11 +113,11 @@ trait RefTrait {\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n         /// Qux\n         //~^ ERROR documentation comments cannot be applied to function\n         #[no_mangle] b: i32,\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n     ) {}\n \n     fn issue_64682_associated_fn(\n@@ -128,11 +128,11 @@ trait RefTrait {\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n         /// Qux\n         //~^ ERROR documentation comments cannot be applied to function\n         #[no_mangle] b: i32,\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n     ) {}\n }\n \n@@ -148,11 +148,11 @@ impl RefTrait for RefStruct {\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n         /// Qux\n         //~^ ERROR documentation comments cannot be applied to function\n         #[no_mangle] b: i32,\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n     ) {}\n }\n \n@@ -165,10 +165,10 @@ fn main() {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[no_mangle] b: i32\n-        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        //~^ ERROR allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n     | {};\n }"}, {"sha": "7573e39d8eb0c8070a210b7be5c0baae7b8c7a7f", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -70,7 +70,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:9:9\n    |\n LL |         #[must_use]\n@@ -82,7 +82,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:13:9\n    |\n LL |         #[no_mangle] b: i32,\n@@ -100,7 +100,7 @@ error: documentation comments cannot be applied to function parameters\n LL |     /// Bar\n    |     ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:25:5\n    |\n LL |     #[must_use]\n@@ -112,7 +112,7 @@ error: documentation comments cannot be applied to function parameters\n LL |     /// Baz\n    |     ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:29:5\n    |\n LL |     #[no_mangle] b: i32,\n@@ -130,7 +130,7 @@ error: documentation comments cannot be applied to function parameters\n LL |     /// Bar\n    |     ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:40:5\n    |\n LL |     #[must_use]\n@@ -142,7 +142,7 @@ error: documentation comments cannot be applied to function parameters\n LL |     /// Baz\n    |     ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:44:5\n    |\n LL |     #[no_mangle] b: i32,\n@@ -166,7 +166,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:60:9\n    |\n LL |         #[must_use]\n@@ -178,7 +178,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:64:9\n    |\n LL |         #[no_mangle] b: i32,\n@@ -196,7 +196,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:75:9\n    |\n LL |         #[must_use]\n@@ -208,7 +208,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:79:9\n    |\n LL |         #[no_mangle] b: i32,\n@@ -232,7 +232,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:96:9\n    |\n LL |         #[must_use]\n@@ -244,7 +244,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:100:9\n    |\n LL |         #[no_mangle] b: i32,\n@@ -268,7 +268,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:115:9\n    |\n LL |         #[must_use]\n@@ -280,7 +280,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:119:9\n    |\n LL |         #[no_mangle] b: i32,\n@@ -298,7 +298,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:130:9\n    |\n LL |         #[must_use]\n@@ -310,7 +310,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:134:9\n    |\n LL |         #[no_mangle] b: i32,\n@@ -334,7 +334,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:150:9\n    |\n LL |         #[must_use]\n@@ -346,7 +346,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:154:9\n    |\n LL |         #[no_mangle] b: i32,\n@@ -364,7 +364,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:167:9\n    |\n LL |         #[must_use]\n@@ -376,7 +376,7 @@ error: documentation comments cannot be applied to function parameters\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:171:9\n    |\n LL |         #[no_mangle] b: i32"}, {"sha": "650a82a23a981c07263bb906eabe0ea801d730ba", "filename": "src/test/ui/rustdoc/check-doc-alias-attr-location.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -1,4 +1,4 @@\n-error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/check-doc-alias-attr-location.rs:22:12\n    |\n LL |     fn foo(#[doc(alias = \"qux\")] _x: u32) -> Self::X {"}, {"sha": "faf730a5ce321bc9d3f338110bb5b2189a9deb3e", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -10,12 +10,12 @@ LL |     pub size: Vector2<K>\n    |     -------------------- this field does not implement `Copy`\n    |\n note: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n-  --> $DIR/missing-bound-in-derive-copy-impl-3.rs:12:5\n+  --> $DIR/missing-bound-in-derive-copy-impl-3.rs:12:14\n    |\n LL |     pub loc: Vector2<K>,\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^\n LL |     pub size: Vector2<K>\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^^^^^^\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |"}, {"sha": "11bc540991775491632e98c875937dbdc4ff1f74", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -10,12 +10,12 @@ LL |     pub size: Vector2<K>\n    |     -------------------- this field does not implement `Copy`\n    |\n note: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n-  --> $DIR/missing-bound-in-derive-copy-impl.rs:11:5\n+  --> $DIR/missing-bound-in-derive-copy-impl.rs:11:14\n    |\n LL |     pub loc: Vector2<K>,\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^\n LL |     pub size: Vector2<K>\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^^^^^^\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `K`\n    |"}, {"sha": "8ecdafdde204553234cd9748e9d4e3a361aefa05", "filename": "src/test/ui/union/union-copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7b0452ece11bf714f7cf2003747231931504d59/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr?ref=c7b0452ece11bf714f7cf2003747231931504d59", "patch": "@@ -8,10 +8,10 @@ LL | impl Copy for W {}\n    |      ^^^^\n    |\n note: the `Copy` impl for `ManuallyDrop<String>` requires that `String: Copy`\n-  --> $DIR/union-copy.rs:8:5\n+  --> $DIR/union-copy.rs:8:8\n    |\n LL |     a: std::mem::ManuallyDrop<String>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}