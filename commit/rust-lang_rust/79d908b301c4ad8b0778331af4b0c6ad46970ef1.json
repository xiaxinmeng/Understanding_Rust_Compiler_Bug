{"sha": "79d908b301c4ad8b0778331af4b0c6ad46970ef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZDkwOGIzMDFjNGFkOGIwNzc4MzMxYWY0YjBjNmFkNDY5NzBlZjE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-27T11:23:30Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T13:55:21Z"}, "message": "rustc_target: add abi::call::Conv::Rust distinct from Conv::C.", "tree": {"sha": "e4e841b335ddd53f37c5a648d3fb327025fd94c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e841b335ddd53f37c5a648d3fb327025fd94c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79d908b301c4ad8b0778331af4b0c6ad46970ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79d908b301c4ad8b0778331af4b0c6ad46970ef1", "html_url": "https://github.com/rust-lang/rust/commit/79d908b301c4ad8b0778331af4b0c6ad46970ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79d908b301c4ad8b0778331af4b0c6ad46970ef1/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e93aa104abaafe35af93d3c5e47ac8bca2f2ff02", "url": "https://api.github.com/repos/rust-lang/rust/commits/e93aa104abaafe35af93d3c5e47ac8bca2f2ff02", "html_url": "https://github.com/rust-lang/rust/commit/e93aa104abaafe35af93d3c5e47ac8bca2f2ff02"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "1662776adf50f78427184e8faabcd942db5663a9", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=79d908b301c4ad8b0778331af4b0c6ad46970ef1", "patch": "@@ -2441,7 +2441,7 @@ where\n \n         use rustc_target::spec::abi::Abi::*;\n         let conv = match cx.tcx().sess.target.target.adjust_abi(sig.abi) {\n-            RustIntrinsic | PlatformIntrinsic | Rust | RustCall => Conv::C,\n+            RustIntrinsic | PlatformIntrinsic | Rust | RustCall => Conv::Rust,\n \n             // It's the ABI's job to select this, not ours.\n             System => bug!(\"system abi should be selected elsewhere\"),"}, {"sha": "1f3c8e1953e4f1709f2df3771f626ef37fae38f1", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=79d908b301c4ad8b0778331af4b0c6ad46970ef1", "patch": "@@ -372,7 +372,7 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n \n     fn llvm_cconv(&self) -> llvm::CallConv {\n         match self.conv {\n-            Conv::C => llvm::CCallConv,\n+            Conv::C | Conv::Rust => llvm::CCallConv,\n             Conv::AmdGpuKernel => llvm::AmdGpuKernel,\n             Conv::ArmAapcs => llvm::ArmAapcsCallConv,\n             Conv::Msp430Intr => llvm::Msp430Intr,"}, {"sha": "33dc2513de5844892e35e0a94007dab34904bc21", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=79d908b301c4ad8b0778331af4b0c6ad46970ef1", "patch": "@@ -6,15 +6,16 @@ use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::Session;\n use rustc::session::config::{Sanitizer, OptLevel};\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, Ty};\n use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::query::Providers;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_target::abi::call::Conv;\n use rustc_target::spec::PanicStrategy;\n use rustc_codegen_ssa::traits::*;\n \n-use crate::abi::Abi;\n+use crate::abi::FnAbi;\n use crate::attributes;\n use crate::llvm::{self, Attribute};\n use crate::llvm::AttributePlace::Function;\n@@ -203,6 +204,7 @@ pub fn from_fn_attrs(\n     cx: &CodegenCx<'ll, 'tcx>,\n     llfn: &'ll Value,\n     instance: ty::Instance<'tcx>,\n+    fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n ) {\n     let codegen_fn_attrs = cx.tcx.codegen_fn_attrs(instance.def_id());\n \n@@ -279,10 +281,7 @@ pub fn from_fn_attrs(\n         // Special attribute for allocator functions, which can't unwind.\n         false\n     } else {\n-        // FIXME(eddyb) avoid this `Instance::fn_sig` call.\n-        // Perhaps store the relevant information in `FnAbi`?\n-        let abi = instance.fn_sig(cx.tcx()).abi();\n-        if abi == Abi::Rust || abi == Abi::RustCall {\n+        if fn_abi.conv == Conv::Rust {\n             // Any Rust method (or `extern \"Rust\" fn` or `extern\n             // \"rust-call\" fn`) is explicitly allowed to unwind\n             // (unless it has no-unwind attribute, handled above)."}, {"sha": "e0db7cae99e1ae8ed2a9756f513baa13268e0215", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=79d908b301c4ad8b0778331af4b0c6ad46970ef1", "patch": "@@ -80,7 +80,7 @@ pub fn get_fn(\n         let llfn = cx.declare_fn(&sym, &fn_abi);\n         debug!(\"get_fn: not casting pointer!\");\n \n-        attributes::from_fn_attrs(cx, llfn, instance);\n+        attributes::from_fn_attrs(cx, llfn, instance, &fn_abi);\n \n         let instance_def_id = instance.def_id();\n "}, {"sha": "cbc8af4fd27109ed6e1672a9020f463dacba4228", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=79d908b301c4ad8b0778331af4b0c6ad46970ef1", "patch": "@@ -70,7 +70,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         debug!(\"predefine_fn: instance = {:?}\", instance);\n \n-        attributes::from_fn_attrs(self, lldecl, instance);\n+        attributes::from_fn_attrs(self, lldecl, instance, &fn_abi);\n \n         self.instances.borrow_mut().insert(instance, lldecl);\n     }"}, {"sha": "6f53577b450550ca064cae8aa7c192c6ada7da65", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d908b301c4ad8b0778331af4b0c6ad46970ef1/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=79d908b301c4ad8b0778331af4b0c6ad46970ef1", "patch": "@@ -492,7 +492,12 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum Conv {\n+    // General language calling conventions, for which every target\n+    // should have its own backend (e.g. LLVM) support.\n     C,\n+    Rust,\n+\n+    // Target-specific calling conventions.\n \n     ArmAapcs,\n "}]}