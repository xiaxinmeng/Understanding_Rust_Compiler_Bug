{"sha": "577d442fe8337338b873d3df1ab5132de6a1af83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3N2Q0NDJmZTgzMzczMzhiODczZDNkZjFhYjUxMzJkZTZhMWFmODM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-24T00:26:11Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-17T23:16:40Z"}, "message": "De-propagate optional session from lint registration\n\nThis is straight up removing dead code, but is a separate commit from\nthe previous to avoid conflating clean up and important changes.", "tree": {"sha": "452076eb7d6eacf79345654cbf54603a313b35a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/452076eb7d6eacf79345654cbf54603a313b35a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/577d442fe8337338b873d3df1ab5132de6a1af83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/577d442fe8337338b873d3df1ab5132de6a1af83", "html_url": "https://github.com/rust-lang/rust/commit/577d442fe8337338b873d3df1ab5132de6a1af83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/577d442fe8337338b873d3df1ab5132de6a1af83/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47a443c50dbeee88cadc78e5c938f3e6d04d6f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/47a443c50dbeee88cadc78e5c938f3e6d04d6f6b", "html_url": "https://github.com/rust-lang/rust/commit/47a443c50dbeee88cadc78e5c938f3e6d04d6f6b"}], "stats": {"total": 70, "additions": 28, "deletions": 42}, "files": [{"sha": "dc16de822ebcd30e20e20b78b178de60844ff0b7", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/577d442fe8337338b873d3df1ab5132de6a1af83/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577d442fe8337338b873d3df1ab5132de6a1af83/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=577d442fe8337338b873d3df1ab5132de6a1af83", "patch": "@@ -26,7 +26,7 @@ use crate::lint::{LintArray, Level, Lint, LintId, LintPass, LintBuffer};\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n use crate::middle::privacy::AccessLevels;\n-use crate::session::{config, early_error, Session};\n+use crate::session::Session;\n use crate::ty::{self, print::Printer, subst::GenericArg, TyCtxt, Ty};\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n use crate::util::nodemap::FxHashMap;\n@@ -169,36 +169,33 @@ impl LintStore {\n     }\n \n     pub fn register_early_pass(&mut self,\n-                               sess: Option<&Session>,\n                                from_plugin: bool,\n                                register_only: bool,\n                                pass: EarlyLintPassObject) {\n-        self.push_pass(sess, from_plugin, &pass);\n+        self.push_pass(from_plugin, &pass);\n         if !register_only {\n             self.early_passes.as_mut().unwrap().push(pass);\n         }\n     }\n \n     pub fn register_pre_expansion_pass(\n         &mut self,\n-        sess: Option<&Session>,\n         from_plugin: bool,\n         register_only: bool,\n         pass: EarlyLintPassObject,\n     ) {\n-        self.push_pass(sess, from_plugin, &pass);\n+        self.push_pass(from_plugin, &pass);\n         if !register_only {\n             self.pre_expansion_passes.as_mut().unwrap().push(pass);\n         }\n     }\n \n     pub fn register_late_pass(&mut self,\n-                              sess: Option<&Session>,\n                               from_plugin: bool,\n                               register_only: bool,\n                               per_module: bool,\n                               pass: LateLintPassObject) {\n-        self.push_pass(sess, from_plugin, &pass);\n+        self.push_pass(from_plugin, &pass);\n         if !register_only {\n             if per_module {\n                 self.late_module_passes.push(pass);\n@@ -210,7 +207,6 @@ impl LintStore {\n \n     // Helper method for register_early/late_pass\n     fn push_pass<P: LintPass + ?Sized + 'static>(&mut self,\n-                                        sess: Option<&Session>,\n                                         from_plugin: bool,\n                                         pass: &Box<P>) {\n         for lint in pass.get_lints() {\n@@ -224,14 +220,13 @@ impl LintStore {\n     }\n \n     pub fn register_future_incompatible(&mut self,\n-                                        sess: Option<&Session>,\n                                         lints: Vec<FutureIncompatibleInfo>) {\n \n         for edition in edition::ALL_EDITIONS {\n             let lints = lints.iter().filter(|f| f.edition == Some(*edition)).map(|f| f.id)\n                              .collect::<Vec<_>>();\n             if !lints.is_empty() {\n-                self.register_group(sess, false, edition.lint_name(), None, lints)\n+                self.register_group(false, edition.lint_name(), None, lints)\n             }\n         }\n \n@@ -242,7 +237,6 @@ impl LintStore {\n         }\n \n         self.register_group(\n-            sess,\n             false,\n             \"future_incompatible\",\n             None,\n@@ -268,7 +262,6 @@ impl LintStore {\n \n     pub fn register_group(\n         &mut self,\n-        sess: Option<&Session>,\n         from_plugin: bool,\n         name: &'static str,\n         deprecated_name: Option<&'static str>,"}, {"sha": "280ac45803b7e544a9486911aafd15a3828d2e99", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/577d442fe8337338b873d3df1ab5132de6a1af83/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577d442fe8337338b873d3df1ab5132de6a1af83/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=577d442fe8337338b873d3df1ab5132de6a1af83", "patch": "@@ -299,14 +299,14 @@ pub fn register_plugins<'a>(\n \n     let mut ls = sess.lint_store.borrow_mut();\n     for pass in early_lint_passes {\n-        ls.register_early_pass(Some(sess), true, false, pass);\n+        ls.register_early_pass(true, false, pass);\n     }\n     for pass in late_lint_passes {\n-        ls.register_late_pass(Some(sess), true, false, false, pass);\n+        ls.register_late_pass(true, false, false, pass);\n     }\n \n     for (name, (to, deprecated_name)) in lint_groups {\n-        ls.register_group(Some(sess), true, name, deprecated_name, to);\n+        ls.register_group(true, name, deprecated_name, to);\n     }\n \n     *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;"}, {"sha": "005f1a44acd6a69a0388a5290a744731f63dd5b8", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/577d442fe8337338b873d3df1ab5132de6a1af83/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577d442fe8337338b873d3df1ab5132de6a1af83/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=577d442fe8337338b873d3df1ab5132de6a1af83", "patch": "@@ -108,9 +108,10 @@ pub fn create_session(\n \n     let codegen_backend = get_codegen_backend(&sess);\n \n-    rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n+    rustc_lint::register_builtins(&mut sess.lint_store.get_mut(),\n+        sess.opts.debugging_opts.no_interleave_lints);\n     if sess.unstable_options() {\n-        rustc_lint::register_internals(&mut sess.lint_store.borrow_mut(), Some(&sess));\n+        rustc_lint::register_internals(&mut sess.lint_store.get_mut());\n     }\n \n     let mut cfg = config::build_configuration(&sess, config::to_crate_config(cfg));"}, {"sha": "5c70e9f8a1a306a538de9735198f3c48a2adae54", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/577d442fe8337338b873d3df1ab5132de6a1af83/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577d442fe8337338b873d3df1ab5132de6a1af83/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=577d442fe8337338b873d3df1ab5132de6a1af83", "patch": "@@ -41,7 +41,6 @@ use rustc::lint::builtin::{\n     PRIVATE_DOC_TESTS,\n     parser::ILL_FORMED_ATTRIBUTE_INPUT,\n };\n-use rustc::session;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::ty::query::Providers;\n@@ -51,7 +50,6 @@ use syntax::ast;\n use syntax::edition::Edition;\n use syntax_pos::Span;\n \n-use session::Session;\n use lint::LintId;\n use lint::FutureIncompatibleInfo;\n \n@@ -198,16 +196,16 @@ late_lint_mod_passes!(declare_combined_late_pass, [BuiltinCombinedModuleLateLint\n /// Tell the `LintStore` about all the built-in lints (the ones\n /// defined in this crate and the ones defined in\n /// `rustc::lint::builtin`).\n-pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n+pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n     macro_rules! add_lint_group {\n-        ($sess:ident, $name:expr, $($lint:ident),*) => (\n-            store.register_group($sess, false, $name, None, vec![$(LintId::of($lint)),*]);\n+        ($name:expr, $($lint:ident),*) => (\n+            store.register_group(false, $name, None, vec![$(LintId::of($lint)),*]);\n         )\n     }\n \n     macro_rules! register_pass {\n         ($method:ident, $constructor:expr, [$($args:expr),*]) => (\n-            store.$method(sess, false, false, $($args,)* box $constructor);\n+            store.$method(false, false, $($args,)* box $constructor);\n         )\n     }\n \n@@ -219,35 +217,32 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         )\n     }\n \n-    if sess.map(|sess| sess.opts.debugging_opts.no_interleave_lints).unwrap_or(false) {\n+    if no_interleave_lints {\n         pre_expansion_lint_passes!(register_passes, [register_pre_expansion_pass, []]);\n         early_lint_passes!(register_passes, [register_early_pass, []]);\n         late_lint_passes!(register_passes, [register_late_pass, [false]]);\n         late_lint_mod_passes!(register_passes, [register_late_pass, [true]]);\n     } else {\n         store.register_pre_expansion_pass(\n-            sess,\n             false,\n             true,\n             box BuiltinCombinedPreExpansionLintPass::new()\n         );\n-        store.register_early_pass(sess, false, true, box BuiltinCombinedEarlyLintPass::new());\n+        store.register_early_pass(false, true, box BuiltinCombinedEarlyLintPass::new());\n         store.register_late_pass(\n-            sess, false, true, true, box BuiltinCombinedModuleLateLintPass::new()\n+            false, true, true, box BuiltinCombinedModuleLateLintPass::new()\n         );\n         store.register_late_pass(\n-            sess, false, true, false, box BuiltinCombinedLateLintPass::new()\n+            false, true, false, box BuiltinCombinedLateLintPass::new()\n         );\n     }\n \n-    add_lint_group!(sess,\n-                    \"nonstandard_style\",\n+    add_lint_group!(\"nonstandard_style\",\n                     NON_CAMEL_CASE_TYPES,\n                     NON_SNAKE_CASE,\n                     NON_UPPER_CASE_GLOBALS);\n \n-    add_lint_group!(sess,\n-                    \"unused\",\n+    add_lint_group!(\"unused\",\n                     UNUSED_IMPORTS,\n                     UNUSED_VARIABLES,\n                     UNUSED_ASSIGNMENTS,\n@@ -267,8 +262,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_LABELS,\n                     UNUSED_PARENS);\n \n-    add_lint_group!(sess,\n-                    \"rust_2018_idioms\",\n+    add_lint_group!(\"rust_2018_idioms\",\n                     BARE_TRAIT_OBJECTS,\n                     UNUSED_EXTERN_CRATES,\n                     ELLIPSIS_INCLUSIVE_RANGE_PATTERNS,\n@@ -284,8 +278,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     // MACRO_USE_EXTERN_CRATE,\n                     );\n \n-    add_lint_group!(sess,\n-                    \"rustdoc\",\n+    add_lint_group!(\"rustdoc\",\n                     INTRA_DOC_LINK_RESOLUTION_FAILURE,\n                     MISSING_DOC_CODE_EXAMPLES,\n                     PRIVATE_DOC_TESTS);\n@@ -298,7 +291,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     //   and include the full URL, sort items in ascending order of issue numbers.\n     // - Later, change lint to error\n     // - Eventually, remove lint\n-    store.register_future_incompatible(sess, vec![\n+    store.register_future_incompatible(vec![\n         FutureIncompatibleInfo {\n             id: LintId::of(PRIVATE_IN_PUBLIC),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n@@ -498,12 +491,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/46205\");\n }\n \n-pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {\n-    store.register_early_pass(sess, false, false, box DefaultHashTypes::new());\n-    store.register_early_pass(sess, false, false, box LintPassImpl);\n-    store.register_late_pass(sess, false, false, false, box TyTyKind);\n+pub fn register_internals(store: &mut lint::LintStore) {\n+    store.register_early_pass(false, false, box DefaultHashTypes::new());\n+    store.register_early_pass(false, false, box LintPassImpl);\n+    store.register_late_pass(false, false, false, box TyTyKind);\n     store.register_group(\n-        sess,\n         false,\n         \"rustc::internal\",\n         None,"}]}