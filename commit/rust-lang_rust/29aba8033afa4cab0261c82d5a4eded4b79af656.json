{"sha": "29aba8033afa4cab0261c82d5a4eded4b79af656", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YWJhODAzM2FmYTRjYWIwMjYxYzgyZDVhNGVkZWQ0Yjc5YWY2NTY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-31T14:21:29Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-31T14:31:26Z"}, "message": "mv the raw pointer {swap,replace}_ptr to std::ptr", "tree": {"sha": "863de7278108500a2dd1dd24d433128fbdfed19d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863de7278108500a2dd1dd24d433128fbdfed19d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29aba8033afa4cab0261c82d5a4eded4b79af656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29aba8033afa4cab0261c82d5a4eded4b79af656", "html_url": "https://github.com/rust-lang/rust/commit/29aba8033afa4cab0261c82d5a4eded4b79af656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29aba8033afa4cab0261c82d5a4eded4b79af656/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "030f471f26dbb6642c54a1e12ce63f7989db01ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/030f471f26dbb6642c54a1e12ce63f7989db01ab", "html_url": "https://github.com/rust-lang/rust/commit/030f471f26dbb6642c54a1e12ce63f7989db01ab"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "ceaf30bdb8fadc09fea206a308f399db54e384a1", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29aba8033afa4cab0261c82d5a4eded4b79af656/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/29aba8033afa4cab0261c82d5a4eded4b79af656/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=29aba8033afa4cab0261c82d5a4eded4b79af656", "patch": "@@ -188,7 +188,7 @@ impl<T: Owned> Drop for Unique<T> {\n         unsafe {\n             let mut x = intrinsics::init(); // dummy value to swap in\n             // moving the object out is needed to call the destructor\n-            util::replace_ptr(self.ptr, x);\n+            ptr::replace_ptr(self.ptr, x);\n             free(self.ptr as *c_void)\n         }\n     }"}, {"sha": "8cd1c893bb6f04ed8d4b66221aec53eb75135b1a", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29aba8033afa4cab0261c82d5a4eded4b79af656/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29aba8033afa4cab0261c82d5a4eded4b79af656/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=29aba8033afa4cab0261c82d5a4eded4b79af656", "patch": "@@ -28,7 +28,6 @@ use core::libc::{c_void, size_t, malloc, free};\n use core::ptr;\n use core::sys;\n use core::unstable::intrinsics;\n-use core::util;\n \n struct RcBox<T> {\n     value: T,\n@@ -73,7 +72,7 @@ impl<T> Drop for Rc<T> {\n         unsafe {\n             (*self.ptr).count -= 1;\n             if (*self.ptr).count == 0 {\n-                util::replace_ptr(self.ptr, intrinsics::uninit());\n+                ptr::replace_ptr(self.ptr, intrinsics::uninit());\n                 free(self.ptr as *c_void)\n             }\n         }\n@@ -223,7 +222,7 @@ impl<T> Drop for RcMut<T> {\n         unsafe {\n             (*self.ptr).count -= 1;\n             if (*self.ptr).count == 0 {\n-                util::replace_ptr(self.ptr, uninit());\n+                ptr::replace_ptr(self.ptr, uninit());\n                 free(self.ptr as *c_void)\n             }\n         }"}, {"sha": "cdd99ee36038bdbcaea30eefbe0d9cb1b0843a00", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/29aba8033afa4cab0261c82d5a4eded4b79af656/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29aba8033afa4cab0261c82d5a4eded4b79af656/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=29aba8033afa4cab0261c82d5a4eded4b79af656", "patch": "@@ -15,6 +15,7 @@ use cast;\n #[cfg(stage0)] use libc::{c_void, size_t};\n use option::{Option, Some, None};\n use sys;\n+use unstable::intrinsics;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n use uint;\n@@ -206,6 +207,36 @@ pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n     memset64(dst, c, count as u64);\n }\n \n+/**\n+ * Swap the values at two mutable locations of the same type, without\n+ * deinitialising or copying either one.\n+ */\n+#[inline]\n+pub unsafe fn swap_ptr<T>(x: *mut T, y: *mut T) {\n+    // Give ourselves some scratch space to work with\n+    let mut tmp: T = intrinsics::uninit();\n+    let t: *mut T = &mut tmp;\n+\n+    // Perform the swap\n+    copy_memory(t, x, 1);\n+    copy_memory(x, y, 1);\n+    copy_memory(y, t, 1);\n+\n+    // y and t now point to the same thing, but we need to completely forget `tmp`\n+    // because it's no longer relevant.\n+    cast::forget(tmp);\n+}\n+\n+/**\n+ * Replace the value at a mutable location with a new one, returning the old\n+ * value, without deinitialising or copying either one.\n+ */\n+#[inline(always)]\n+pub unsafe fn replace_ptr<T>(dest: *mut T, mut src: T) -> T {\n+    swap_ptr(dest, &mut src);\n+    src\n+}\n+\n /**\n   Transform a region pointer - &T - to an unsafe pointer - *T.\n   This is safe, but is implemented with an unsafe block due to"}, {"sha": "21fbe2836cd68264e41de741abe91362a4b85a2c", "filename": "src/libstd/util.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/29aba8033afa4cab0261c82d5a4eded4b79af656/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29aba8033afa4cab0261c82d5a4eded4b79af656/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=29aba8033afa4cab0261c82d5a4eded4b79af656", "patch": "@@ -64,26 +64,6 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n     }\n }\n \n-/**\n- * Swap the values at two mutable locations of the same type, without\n- * deinitialising or copying either one.\n- */\n-#[inline]\n-pub unsafe fn swap_ptr<T>(x: *mut T, y: *mut T) {\n-    // Give ourselves some scratch space to work with\n-    let mut tmp: T = intrinsics::uninit();\n-    let t: *mut T = &mut tmp;\n-\n-    // Perform the swap\n-    ptr::copy_memory(t, x, 1);\n-    ptr::copy_memory(x, y, 1);\n-    ptr::copy_memory(y, t, 1);\n-\n-    // y and t now point to the same thing, but we need to completely forget `tmp`\n-    // because it's no longer relevant.\n-    cast::forget(tmp);\n-}\n-\n /**\n  * Replace the value at a mutable location with a new one, returning the old\n  * value, without deinitialising or copying either one.\n@@ -94,16 +74,6 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n     src\n }\n \n-/**\n- * Replace the value at a mutable location with a new one, returning the old\n- * value, without deinitialising or copying either one.\n- */\n-#[inline(always)]\n-pub unsafe fn replace_ptr<T>(dest: *mut T, mut src: T) -> T {\n-    swap_ptr(dest, ptr::to_mut_unsafe_ptr(&mut src));\n-    src\n-}\n-\n /// A non-copyable dummy type.\n pub struct NonCopyable {\n     priv i: (),"}, {"sha": "795c3cdb405e16da17c0c29b6493761a0e77596e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/29aba8033afa4cab0261c82d5a4eded4b79af656/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29aba8033afa4cab0261c82d5a4eded4b79af656/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=29aba8033afa4cab0261c82d5a4eded4b79af656", "patch": "@@ -506,7 +506,7 @@ pub fn shift<T>(v: &mut ~[T]) -> T {\n         let vp = raw::to_mut_ptr(*v);\n         let vp = ptr::mut_offset(vp, next_ln - 1);\n \n-        util::replace_ptr(vp, work_elt)\n+        ptr::replace_ptr(vp, work_elt)\n     }\n }\n \n@@ -570,7 +570,7 @@ pub fn consume<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n                 // elements during unwinding\n                 let x = intrinsics::init();\n                 let p = ptr::mut_offset(p, i);\n-                f(i, util::replace_ptr(p, x));\n+                f(i, ptr::replace_ptr(p, x));\n             }\n         }\n \n@@ -597,7 +597,7 @@ pub fn consume_reverse<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n                 // elements during unwinding\n                 let x = intrinsics::init();\n                 let p = ptr::mut_offset(p, i);\n-                f(i, util::replace_ptr(p, x));\n+                f(i, ptr::replace_ptr(p, x));\n             }\n         }\n \n@@ -613,7 +613,7 @@ pub fn pop<T>(v: &mut ~[T]) -> T {\n     }\n     let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n     unsafe {\n-        let val = util::replace_ptr(valptr, intrinsics::init());\n+        let val = ptr::replace_ptr(valptr, intrinsics::init());\n         raw::set_len(v, ln - 1u);\n         val\n     }\n@@ -707,8 +707,8 @@ pub fn push_all_move<T>(v: &mut ~[T], mut rhs: ~[T]) {\n     unsafe {\n         do as_mut_buf(rhs) |p, len| {\n             for uint::range(0, len) |i| {\n-                let x = util::replace_ptr(ptr::mut_offset(p, i),\n-                                          intrinsics::uninit());\n+                let x = ptr::replace_ptr(ptr::mut_offset(p, i),\n+                                         intrinsics::uninit());\n                 push(&mut *v, x);\n             }\n         }\n@@ -723,7 +723,7 @@ pub fn truncate<T>(v: &mut ~[T], newlen: uint) {\n         unsafe {\n             // This loop is optimized out for non-drop types.\n             for uint::range(newlen, oldlen) |i| {\n-                util::replace_ptr(ptr::mut_offset(p, i), intrinsics::uninit());\n+                ptr::replace_ptr(ptr::mut_offset(p, i), intrinsics::uninit());\n             }\n         }\n     }\n@@ -747,14 +747,14 @@ pub fn dedup<T:Eq>(v: &mut ~[T]) {\n                 // last_written < next_to_read < ln\n                 if *ptr::mut_offset(p, next_to_read) ==\n                     *ptr::mut_offset(p, last_written) {\n-                    util::replace_ptr(ptr::mut_offset(p, next_to_read),\n-                                      intrinsics::uninit());\n+                    ptr::replace_ptr(ptr::mut_offset(p, next_to_read),\n+                                     intrinsics::uninit());\n                 } else {\n                     last_written += 1;\n                     // last_written <= next_to_read < ln\n                     if next_to_read != last_written {\n-                        util::swap_ptr(ptr::mut_offset(p, last_written),\n-                                       ptr::mut_offset(p, next_to_read));\n+                        ptr::swap_ptr(ptr::mut_offset(p, last_written),\n+                                      ptr::mut_offset(p, next_to_read));\n                     }\n                 }\n                 // last_written <= next_to_read < ln\n@@ -1398,7 +1398,7 @@ pub fn swap<T>(v: &mut [T], a: uint, b: uint) {\n         // them to their raw pointers to do the swap\n         let pa: *mut T = ptr::to_mut_unsafe_ptr(&mut v[a]);\n         let pb: *mut T = ptr::to_mut_unsafe_ptr(&mut v[b]);\n-        util::swap_ptr(pa, pb);\n+        ptr::swap_ptr(pa, pb);\n     }\n }\n "}, {"sha": "07d1226d3829734ac48d012cd47a48dedd7b497a", "filename": "src/test/run-pass/swap-overlapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29aba8033afa4cab0261c82d5a4eded4b79af656/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29aba8033afa4cab0261c82d5a4eded4b79af656/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs?ref=29aba8033afa4cab0261c82d5a4eded4b79af656", "patch": "@@ -26,8 +26,8 @@ pub fn main() {\n \n fn do_swap(test: &mut TestDescAndFn) {\n     unsafe {\n-        util::swap_ptr(ptr::to_mut_unsafe_ptr(test),\n-                       ptr::to_mut_unsafe_ptr(test));\n+        ptr::swap_ptr(ptr::to_mut_unsafe_ptr(test),\n+                      ptr::to_mut_unsafe_ptr(test));\n     }\n }\n "}]}