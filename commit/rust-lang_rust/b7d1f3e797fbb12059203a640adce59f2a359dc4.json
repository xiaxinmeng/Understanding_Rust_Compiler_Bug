{"sha": "b7d1f3e797fbb12059203a640adce59f2a359dc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZDFmM2U3OTdmYmIxMjA1OTIwM2E2NDBhZGNlNTlmMmEzNTlkYzQ=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-25T04:44:48Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-25T04:44:48Z"}, "message": "Improve Debug implementation, add additional formatting traits", "tree": {"sha": "4e17e8229cf5d76aa6364ed74aa8f7dfe660579b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e17e8229cf5d76aa6364ed74aa8f7dfe660579b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7d1f3e797fbb12059203a640adce59f2a359dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d1f3e797fbb12059203a640adce59f2a359dc4", "html_url": "https://github.com/rust-lang/rust/commit/b7d1f3e797fbb12059203a640adce59f2a359dc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7d1f3e797fbb12059203a640adce59f2a359dc4/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "613f2420885432aecafb5493e3d0cd3f9a4d67f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/613f2420885432aecafb5493e3d0cd3f9a4d67f1", "html_url": "https://github.com/rust-lang/rust/commit/613f2420885432aecafb5493e3d0cd3f9a4d67f1"}], "stats": {"total": 129, "additions": 123, "deletions": 6}, "files": [{"sha": "62a21b442d2647d80e53cb22f55f72ebb996f7dc", "filename": "crates/core_simd/src/fmt.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/b7d1f3e797fbb12059203a640adce59f2a359dc4/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d1f3e797fbb12059203a640adce59f2a359dc4/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ffmt.rs?ref=b7d1f3e797fbb12059203a640adce59f2a359dc4", "patch": "@@ -0,0 +1,106 @@\n+macro_rules! debug_wrapper {\n+    { $($trait:ident => $name:ident,)* } => {\n+        $(\n+            pub(crate) fn $name<T: core::fmt::$trait>(slice: &[T], f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                #[repr(transparent)]\n+                struct Wrapper<'a, T: core::fmt::$trait>(&'a T);\n+\n+                impl<T: core::fmt::$trait> core::fmt::Debug for Wrapper<'_, T> {\n+                    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                        self.0.fmt(f)\n+                    }\n+                }\n+\n+                f.debug_list()\n+                    .entries(slice.iter().map(|x| Wrapper(x)))\n+                    .finish()\n+            }\n+        )*\n+    }\n+}\n+\n+debug_wrapper! {\n+    Debug => format,\n+    Binary => format_binary,\n+    LowerExp => format_lower_exp,\n+    UpperExp => format_upper_exp,\n+    Octal => format_octal,\n+    LowerHex => format_lower_hex,\n+    UpperHex => format_upper_hex,\n+    Pointer => format_pointer,\n+}\n+\n+macro_rules! impl_fmt_trait {\n+    { $($type:ty => $(($trait:ident, $format:ident)),*;)* } => {\n+        $( // repeat type\n+            $( // repeat trait\n+                impl core::fmt::$trait for $type {\n+                    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                        $format(self.as_ref(), f)\n+                    }\n+                }\n+            )*\n+        )*\n+    };\n+    { integers: $($type:ty,)* } => {\n+        impl_fmt_trait! {\n+            $($type =>\n+              (Debug, format),\n+              (Binary, format_binary),\n+              (LowerExp, format_lower_exp),\n+              (UpperExp, format_upper_exp),\n+              (Octal, format_octal),\n+              (LowerHex, format_lower_hex),\n+              (UpperHex, format_upper_hex);\n+            )*\n+        }\n+    };\n+    { floats: $($type:ty,)* } => {\n+        impl_fmt_trait! {\n+            $($type =>\n+              (Debug, format),\n+              (LowerExp, format_lower_exp),\n+              (UpperExp, format_upper_exp);\n+            )*\n+        }\n+    };\n+    { masks: $($type:ty,)* } => {\n+        impl_fmt_trait! {\n+            $($type =>\n+              (Debug, format);\n+            )*\n+        }\n+    }\n+}\n+\n+impl_fmt_trait! {\n+    integers:\n+        crate::u8x2,    crate::u8x4,    crate::u8x8,    crate::u8x16,    crate::u8x32,    crate::u8x64,\n+        crate::i8x2,    crate::i8x4,    crate::i8x8,    crate::i8x16,    crate::i8x32,    crate::i8x64,\n+        crate::u16x2,   crate::u16x4,   crate::u16x8,   crate::u16x16,   crate::u16x32,\n+        crate::i16x2,   crate::i16x4,   crate::i16x8,   crate::i16x16,   crate::i16x32,\n+        crate::u32x2,   crate::u32x4,   crate::u32x8,   crate::u32x16,\n+        crate::i32x2,   crate::i32x4,   crate::i32x8,   crate::i32x16,\n+        crate::u64x2,   crate::u64x4,   crate::u64x8,\n+        crate::i64x2,   crate::i64x4,   crate::i64x8,\n+        crate::u128x2,  crate::u128x4,\n+        crate::i128x2,  crate::i128x4,\n+        crate::usizex2, crate::usizex4, crate::usizex8,\n+        crate::isizex2, crate::isizex4, crate::isizex8,\n+}\n+\n+impl_fmt_trait! {\n+    floats:\n+        crate::f32x2, crate::f32x4, crate::f32x8, crate::f32x16,\n+        crate::f64x2, crate::f64x4, crate::f64x8,\n+}\n+\n+impl_fmt_trait! {\n+    masks:\n+        crate::mask8x2,    crate::mask8x4,    crate::mask8x8,    crate::mask8x16,    crate::mask8x32,    crate::mask8x64,\n+        crate::mask16x2,   crate::mask16x4,   crate::mask16x8,   crate::mask16x16,   crate::mask16x32,\n+        crate::mask32x2,   crate::mask32x4,   crate::mask32x8,   crate::mask32x16,\n+        crate::mask64x2,   crate::mask64x4,   crate::mask64x8,\n+        crate::mask128x2,  crate::mask128x4,\n+        crate::masksizex2, crate::masksizex4, crate::masksizex8,\n+}"}, {"sha": "f6ddc4c6cfdad225d8f930d57f8883cdc6ab5a4f", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7d1f3e797fbb12059203a640adce59f2a359dc4/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d1f3e797fbb12059203a640adce59f2a359dc4/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=b7d1f3e797fbb12059203a640adce59f2a359dc4", "patch": "@@ -6,6 +6,8 @@\n #[macro_use]\n mod macros;\n \n+mod fmt;\n+\n mod masks;\n pub use masks::*;\n "}, {"sha": "33541899ca36cc8d0094564c80641b77321dbbbd", "filename": "crates/core_simd/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d1f3e797fbb12059203a640adce59f2a359dc4/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d1f3e797fbb12059203a640adce59f2a359dc4/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=b7d1f3e797fbb12059203a640adce59f2a359dc4", "patch": "@@ -247,7 +247,7 @@ macro_rules! define_vector {\n     { def $(#[$attr:meta])* | $name:ident | $($itype:ty)* } => {\n         $(#[$attr])*\n         #[allow(non_camel_case_types)]\n-        #[derive(Copy, Clone, Debug, Default, PartialEq, PartialOrd)]\n+        #[derive(Copy, Clone, Default, PartialEq, PartialOrd)]\n         #[repr(simd)]\n         pub struct $name($($itype),*);\n     };\n@@ -284,7 +284,7 @@ macro_rules! define_mask_vector {\n     { def $(#[$attr:meta])* | $name:ident | $($itype:ty)* } => {\n         $(#[$attr])*\n         #[allow(non_camel_case_types)]\n-        #[derive(Copy, Clone, Debug, Default, PartialEq, PartialOrd, Eq, Ord)]\n+        #[derive(Copy, Clone, Default, PartialEq, PartialOrd, Eq, Ord)]\n         #[repr(simd)]\n         pub struct $name($($itype),*);\n     };"}, {"sha": "ceefbfc94447ce023736fa3474c5252b20f6418d", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7d1f3e797fbb12059203a640adce59f2a359dc4/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d1f3e797fbb12059203a640adce59f2a359dc4/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=b7d1f3e797fbb12059203a640adce59f2a359dc4", "patch": "@@ -2,7 +2,7 @@ macro_rules! define_mask {\n     { $(#[$attr:meta])* struct $name:ident($type:ty); } => {\n         $(#[$attr])*\n         #[allow(non_camel_case_types)]\n-        #[derive(Copy, Clone, Debug, Default, PartialEq, PartialOrd, Eq, Ord, Hash)]\n+        #[derive(Copy, Clone, Default, PartialEq, PartialOrd, Eq, Ord, Hash)]\n         #[repr(transparent)]\n         pub struct $name(pub(crate) $type);\n \n@@ -33,6 +33,12 @@ macro_rules! define_mask {\n                 mask.test()\n             }\n         }\n+\n+        impl core::fmt::Debug for $name {\n+            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                self.test().fmt(f)\n+            }\n+        }\n     }\n }\n "}, {"sha": "a7c514aae7a32190aad8406e01ade0e4bf332c55", "filename": "crates/core_simd/src/pointers.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7d1f3e797fbb12059203a640adce59f2a359dc4/crates%2Fcore_simd%2Fsrc%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d1f3e797fbb12059203a640adce59f2a359dc4/crates%2Fcore_simd%2Fsrc%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fpointers.rs?ref=b7d1f3e797fbb12059203a640adce59f2a359dc4", "patch": "@@ -100,9 +100,12 @@ macro_rules! define_pointer_vector {\n     { debug $name:ident | $type:ty | $($index:tt)* } => {\n         impl<T> core::fmt::Debug for $name<T> {\n             fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n-                f.debug_tuple(stringify!($name))\n-                    $(.field(&(AsRef::<[isize]>::as_ref(&self.0)[$index] as $type)))*\n-                    .finish()\n+                crate::fmt::format(self.as_ref(), f)\n+            }\n+        }\n+        impl<T> core::fmt::Pointer for $name<T> {\n+            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                crate::fmt::format_pointer(self.as_ref(), f)\n             }\n         }\n     }"}]}