{"sha": "5065f0c2a2a37ad160268a214523f45402502be2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNjVmMGMyYTJhMzdhZDE2MDI2OGEyMTQ1MjNmNDU0MDI1MDJiZTI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-25T22:14:44Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-25T22:14:44Z"}, "message": "save-analysis-json: thread through -z option\n\nIn fact, we make JSOn the default and add an option for save-analysis-csv for the legacy behaviour.\n\nWe also rename some bits and pieces `dxr` -> `save-analysis`", "tree": {"sha": "a9df057d80f211af3f06930ba8b16069ecd3437b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9df057d80f211af3f06930ba8b16069ecd3437b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5065f0c2a2a37ad160268a214523f45402502be2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5065f0c2a2a37ad160268a214523f45402502be2", "html_url": "https://github.com/rust-lang/rust/commit/5065f0c2a2a37ad160268a214523f45402502be2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5065f0c2a2a37ad160268a214523f45402502be2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91b5ed5ce38e3833e985c2cf023e1902891f30e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b5ed5ce38e3833e985c2cf023e1902891f30e2", "html_url": "https://github.com/rust-lang/rust/commit/91b5ed5ce38e3833e985c2cf023e1902891f30e2"}], "stats": {"total": 111, "additions": 92, "deletions": 19}, "files": [{"sha": "9f29f9050e6a6df659a74f03f7c504a7de0db921", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5065f0c2a2a37ad160268a214523f45402502be2/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5065f0c2a2a37ad160268a214523f45402502be2/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5065f0c2a2a37ad160268a214523f45402502be2", "patch": "@@ -618,7 +618,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     ls: bool = (false, parse_bool,\n         \"list the symbols defined by a library crate\"),\n     save_analysis: bool = (false, parse_bool,\n-        \"write syntax and type analysis information in addition to normal output\"),\n+        \"write syntax and type analysis (in JSON format) information in addition to normal output\"),\n+    save_analysis_csv: bool = (false, parse_bool,\n+        \"write syntax and type analysis (in CSV format) information in addition to normal output\"),\n     print_move_fragments: bool = (false, parse_bool,\n         \"print out move-fragment data for every fn\"),\n     flowgraph_print_loans: bool = (false, parse_bool,"}, {"sha": "81a21a6eb2ed86d262996c217b365e1b46a8376b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5065f0c2a2a37ad160268a214523f45402502be2/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5065f0c2a2a37ad160268a214523f45402502be2/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=5065f0c2a2a37ad160268a214523f45402502be2", "patch": "@@ -141,8 +141,7 @@ pub fn compile_input(sess: &Session,\n                                                            dep_graph));\n \n         // Discard MTWT tables that aren't required past lowering to HIR.\n-        if !sess.opts.debugging_opts.keep_mtwt_tables &&\n-           !sess.opts.debugging_opts.save_analysis {\n+        if !keep_mtwt_tables(sess) {\n             syntax::ext::mtwt::clear_tables();\n         }\n \n@@ -179,8 +178,7 @@ pub fn compile_input(sess: &Session,\n              \"early lint checks\",\n              || lint::check_ast_crate(sess, &expanded_crate));\n \n-        let opt_crate = if sess.opts.debugging_opts.keep_ast ||\n-                           sess.opts.debugging_opts.save_analysis {\n+        let opt_crate = if keep_ast(sess) {\n             Some(&expanded_crate)\n         } else {\n             drop(expanded_crate);\n@@ -249,6 +247,18 @@ pub fn compile_input(sess: &Session,\n     Ok(())\n }\n \n+fn keep_mtwt_tables(sess: &Session) -> bool {\n+    sess.opts.debugging_opts.keep_mtwt_tables ||\n+    sess.opts.debugging_opts.save_analysis ||\n+    sess.opts.debugging_opts.save_analysis_csv\n+}\n+\n+fn keep_ast(sess: &Session) -> bool {\n+    sess.opts.debugging_opts.keep_ast ||\n+    sess.opts.debugging_opts.save_analysis ||\n+    sess.opts.debugging_opts.save_analysis_csv\n+}\n+\n /// The name used for source code that doesn't originate in a file\n /// (e.g. source from stdin or a string)\n pub fn anon_src() -> String {"}, {"sha": "b04503d12ae208a86f1d88638a3d33d6df10957d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5065f0c2a2a37ad160268a214523f45402502be2/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5065f0c2a2a37ad160268a214523f45402502be2/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5065f0c2a2a37ad160268a214523f45402502be2", "patch": "@@ -483,15 +483,16 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.after_llvm.stop = Compilation::Stop;\n         }\n \n-        if sess.opts.debugging_opts.save_analysis {\n+        if save_analysis(sess) {\n             control.after_analysis.callback = box |state| {\n                 time(state.session.time_passes(), \"save analysis\", || {\n                     save::process_crate(state.tcx.unwrap(),\n                                         state.lcx.unwrap(),\n                                         state.krate.unwrap(),\n                                         state.analysis.unwrap(),\n                                         state.crate_name.unwrap(),\n-                                        state.out_dir)\n+                                        state.out_dir,\n+                                        save_analysis_format(state.session))\n                 });\n             };\n             control.after_analysis.run_callback_on_error = true;\n@@ -502,6 +503,21 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     }\n }\n \n+fn save_analysis(sess: &Session) -> bool {\n+    sess.opts.debugging_opts.save_analysis ||\n+    sess.opts.debugging_opts.save_analysis_csv\n+}\n+\n+fn save_analysis_format(sess: &Session) -> save::Format {\n+    if sess.opts.debugging_opts.save_analysis {\n+        save::Format::Json\n+    } else if sess.opts.debugging_opts.save_analysis_csv {\n+        save::Format::Csv\n+    } else {\n+        unreachable!();\n+    }\n+}\n+\n impl RustcDefaultCalls {\n     pub fn list_metadata(sess: &Session, matches: &getopts::Matches, input: &Input) -> Compilation {\n         let r = matches.opt_strs(\"Z\");"}, {"sha": "212e3eea8f99a296dd727c4f01bbab7dc104b9a3", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5065f0c2a2a37ad160268a214523f45402502be2/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5065f0c2a2a37ad160268a214523f45402502be2/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=5065f0c2a2a37ad160268a214523f45402502be2", "patch": "@@ -19,20 +19,39 @@ use syntax::ast::{CrateNum, NodeId};\n use super::data::{self, SpanData};\n use super::dump::Dump;\n \n-pub struct JsonDumper<'a, 'b, W: 'b> {\n+pub struct JsonDumper<'a, 'b, W: Write + 'b> {\n     output: &'b mut W,\n     codemap: &'a CodeMap,\n+    first: bool,\n }\n \n impl<'a, 'b, W: Write> JsonDumper<'a, 'b, W> {\n     pub fn new(writer: &'b mut W, codemap: &'a CodeMap) -> JsonDumper<'a, 'b, W> {\n-        JsonDumper { output: writer, codemap:codemap }\n+        if let Err(_) = write!(writer, \"[\") {\n+            error!(\"Error writing output\");\n+        }        \n+        JsonDumper { output: writer, codemap:codemap, first: true }\n+    }\n+}\n+\n+impl<'a, 'b, W: Write> Drop for JsonDumper<'a, 'b, W> {\n+    fn drop(&mut self) {\n+        if let Err(_) = write!(self.output, \"]\") {\n+            error!(\"Error writing output\");\n+        }\n     }\n }\n \n macro_rules! impl_fn {\n     ($fn_name: ident, $data_type: ident) => {\n         fn $fn_name(&mut self, data: data::$data_type) {\n+            if self.first {\n+                self.first = false;\n+            } else {\n+                if let Err(_) = write!(self.output, \",\") {\n+                    error!(\"Error writing output\");\n+                }\n+            }\n             let data = data.lower(self.codemap);\n             if let Err(_) = write!(self.output, \"{}\", as_json(&data)) {\n                 error!(\"Error writing output '{}'\", as_json(&data));"}, {"sha": "d529f66a64069cde91cb5039fa0de33a9a1d3547", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5065f0c2a2a37ad160268a214523f45402502be2/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5065f0c2a2a37ad160268a214523f45402502be2/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=5065f0c2a2a37ad160268a214523f45402502be2", "patch": "@@ -688,24 +688,40 @@ impl<'v> Visitor<'v> for PathCollector {\n     }\n }\n \n+#[derive(Clone, Copy, Debug)]\n+pub enum Format {\n+    Csv,\n+    Json,\n+}\n+\n+impl Format {\n+    fn extension(&self) -> &'static str {\n+        match *self {\n+            Format::Csv => \".csv\",\n+            Format::Json => \".json\",\n+        }\n+    }\n+}\n+\n pub fn process_crate<'l, 'tcx>(tcx: &'l TyCtxt<'tcx>,\n                                lcx: &'l lowering::LoweringContext<'l>,\n                                krate: &ast::Crate,\n                                analysis: &'l ty::CrateAnalysis<'l>,\n                                cratename: &str,\n-                               odir: Option<&Path>) {\n+                               odir: Option<&Path>,\n+                               format: Format) {\n     let _ignore = tcx.dep_graph.in_ignore();\n \n     assert!(analysis.glob_map.is_some());\n \n     info!(\"Dumping crate {}\", cratename);\n \n     // find a path to dump our data to\n-    let mut root_path = match env::var_os(\"DXR_RUST_TEMP_FOLDER\") {\n+    let mut root_path = match env::var_os(\"RUST_SAVE_ANALYSIS_FOLDER\") {\n         Some(val) => PathBuf::from(val),\n         None => match odir {\n-            Some(val) => val.join(\"dxr\"),\n-            None => PathBuf::from(\"dxr-temp\"),\n+            Some(val) => val.join(\"save-analysis\"),\n+            None => PathBuf::from(\"save-analysis-temp\"),\n         },\n     };\n \n@@ -729,22 +745,32 @@ pub fn process_crate<'l, 'tcx>(tcx: &'l TyCtxt<'tcx>,\n     };\n     out_name.push_str(&cratename);\n     out_name.push_str(&tcx.sess.opts.cg.extra_filename);\n-    out_name.push_str(\".csv\");\n+    out_name.push_str(format.extension());\n     root_path.push(&out_name);\n     let mut output_file = File::create(&root_path).unwrap_or_else(|e| {\n         let disp = root_path.display();\n         tcx.sess.fatal(&format!(\"Could not open {}: {}\", disp, e));\n     });\n     root_path.pop();\n+    let output = &mut output_file;\n \n     let utils: SpanUtils<'tcx> = SpanUtils::new(&tcx.sess);\n     let save_ctxt = SaveContext::new(tcx, lcx);\n-    let mut dumper = CsvDumper::new(&mut output_file, utils);\n-    let mut visitor = DumpVisitor::new(tcx, save_ctxt, analysis, &mut dumper);\n-    // FIXME: we don't write anything!\n \n-    visitor.dump_crate_info(cratename, krate);\n-    visit::walk_crate(&mut visitor, krate);\n+    macro_rules! dump {\n+        ($new_dumper: expr) => {{\n+            let mut dumper = $new_dumper;\n+            let mut visitor = DumpVisitor::new(tcx, save_ctxt, analysis, &mut dumper);\n+\n+            visitor.dump_crate_info(cratename, krate);\n+            visit::walk_crate(&mut visitor, krate);            \n+        }}\n+    }\n+\n+    match format {\n+        Format::Csv => dump!(CsvDumper::new(output, utils)),\n+        Format::Json => dump!(JsonDumper::new(output, utils.sess.codemap())),\n+    }\n }\n \n // Utility functions for the module."}]}