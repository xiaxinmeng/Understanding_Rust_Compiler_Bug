{"sha": "ea42911561842b4331c3fa5a5a30b97497cbf871", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDI5MTE1NjE4NDJiNDMzMWMzZmE1YTVhMzBiOTc0OTdjYmY4NzE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-28T22:34:25Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-28T22:34:25Z"}, "message": "Pass tydesc array into type glue fns as first arg. Required for derived tydescs to work.", "tree": {"sha": "a40f9eec2ad0f2aadf87fc2223d8b62775287dcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a40f9eec2ad0f2aadf87fc2223d8b62775287dcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea42911561842b4331c3fa5a5a30b97497cbf871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea42911561842b4331c3fa5a5a30b97497cbf871", "html_url": "https://github.com/rust-lang/rust/commit/ea42911561842b4331c3fa5a5a30b97497cbf871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea42911561842b4331c3fa5a5a30b97497cbf871/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65f0f8e64d9dd5310a6f4692fb6e223df5861689", "url": "https://api.github.com/repos/rust-lang/rust/commits/65f0f8e64d9dd5310a6f4692fb6e223df5861689", "html_url": "https://github.com/rust-lang/rust/commit/65f0f8e64d9dd5310a6f4692fb6e223df5861689"}], "stats": {"total": 93, "additions": 53, "deletions": 40}, "files": [{"sha": "0303f9f29c74db89b85c76aea458fd0a25787558", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 53, "deletions": 40, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ea42911561842b4331c3fa5a5a30b97497cbf871/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea42911561842b4331c3fa5a5a30b97497cbf871/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ea42911561842b4331c3fa5a5a30b97497cbf871", "patch": "@@ -237,18 +237,27 @@ fn T_task() -> TypeRef {\n }\n \n fn T_tydesc() -> TypeRef {\n+\n+    auto th = mk_type_handle();\n+    auto abs_tydesc = llvm.LLVMResolveTypeHandle(th.llth);\n+\n     auto pvoid = T_ptr(T_i8());\n-    auto glue_fn_ty = T_ptr(T_fn(vec(T_taskptr(), pvoid), T_void()));\n-    ret T_struct(vec(pvoid,             // first_param\n-                     T_int(),           // size\n-                     T_int(),           // align\n-                     glue_fn_ty,        // take_glue_off\n-                     glue_fn_ty,        // drop_glue_off\n-                     glue_fn_ty,        // free_glue_off\n-                     glue_fn_ty,        // sever_glue_off\n-                     glue_fn_ty,        // mark_glue_off\n-                     glue_fn_ty,        // obj_drop_glue_off\n-                     glue_fn_ty));      // is_stateful\n+    auto glue_fn_ty = T_ptr(T_fn(vec(T_taskptr(),\n+                                     T_ptr(abs_tydesc),\n+                                     pvoid), T_void()));\n+    auto tydesc = T_struct(vec(T_ptr(abs_tydesc), // first_param\n+                               T_int(),           // size\n+                               T_int(),           // align\n+                               glue_fn_ty,        // take_glue_off\n+                               glue_fn_ty,        // drop_glue_off\n+                               glue_fn_ty,        // free_glue_off\n+                               glue_fn_ty,        // sever_glue_off\n+                               glue_fn_ty,        // mark_glue_off\n+                               glue_fn_ty,        // obj_drop_glue_off\n+                               glue_fn_ty));      // is_stateful\n+\n+    llvm.LLVMRefineType(abs_tydesc, tydesc);\n+    ret llvm.LLVMResolveTypeHandle(th.llth);\n }\n \n fn T_array(TypeRef t, uint n) -> TypeRef {\n@@ -960,8 +969,10 @@ fn make_tydesc(@crate_ctxt cx, @ty.t t) {\n \n     auto llty = type_of(cx, t);\n     auto pvoid = T_ptr(T_i8());\n-    auto glue_fn_ty = T_ptr(T_fn(vec(T_taskptr(), pvoid), T_void()));\n-    auto tydesc = C_struct(vec(C_null(pvoid),\n+    auto glue_fn_ty = T_ptr(T_fn(vec(T_taskptr(),\n+                                     T_ptr(T_tydesc()),\n+                                     pvoid), T_void()));\n+    auto tydesc = C_struct(vec(C_null(T_ptr(T_tydesc())),\n                                llsize_of(llty),\n                                llalign_of(llty),\n                                take_glue,             // take_glue_off\n@@ -983,7 +994,9 @@ fn make_tydesc(@crate_ctxt cx, @ty.t t) {\n \n fn make_generic_glue(@crate_ctxt cx, @ty.t t, str name,\n                      val_and_ty_fn helper) -> ValueRef {\n-    auto llfnty = T_fn(vec(T_taskptr(), T_ptr(T_i8())), T_void());\n+    auto llfnty = T_fn(vec(T_taskptr(),\n+                           T_ptr(T_tydesc()),\n+                           T_ptr(T_i8())), T_void());\n \n     auto fn_name = cx.names.next(\"_rust_\" + name) + \".\" + ty.ty_to_str(t);\n     fn_name = sanitize(fn_name);\n@@ -1001,7 +1014,7 @@ fn make_generic_glue(@crate_ctxt cx, @ty.t t, str name,\n             llty = type_of(cx, t);\n         }\n \n-        auto llrawptr = llvm.LLVMGetParam(llfn, 1u);\n+        auto llrawptr = llvm.LLVMGetParam(llfn, 2u);\n         auto llval = bcx.build.BitCast(llrawptr, llty);\n \n         re = helper(bcx, llval, t);\n@@ -1097,19 +1110,13 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v, @ty.t t) -> result {\n                     cx.build.GEP(body,\n                                  vec(C_int(0),\n                                      C_int(abi.obj_body_elt_fields)));\n-                auto llrawptr = cx.build.BitCast(fields, T_ptr(T_i8()));\n-\n                 auto tydescptr =\n                     cx.build.GEP(body,\n                                  vec(C_int(0),\n                                      C_int(abi.obj_body_elt_tydesc)));\n-                auto tydesc = cx.build.Load(tydescptr);\n-                auto llfnptr =\n-                    cx.build.GEP(tydesc,\n-                                 vec(C_int(0),\n-                                     C_int(abi.tydesc_field_drop_glue_off)));\n-                auto llfn = cx.build.Load(llfnptr);\n-                cx.build.FastCall(llfn, vec(cx.fcx.lltaskptr, llrawptr));\n+\n+                call_tydesc_glue_full(cx, fields, cx.build.Load(tydescptr),\n+                                      abi.tydesc_field_drop_glue_off);\n \n                 // Then free the body.\n                 // FIXME: switch gc/non-gc on layer of the type.\n@@ -1141,19 +1148,15 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v, @ty.t t) -> result {\n                     cx.build.GEP(body,\n                                  vec(C_int(0),\n                                      C_int(abi.closure_elt_bindings)));\n-                auto llrawptr = cx.build.BitCast(bindings, T_ptr(T_i8()));\n \n                 auto tydescptr =\n                     cx.build.GEP(body,\n                                  vec(C_int(0),\n                                      C_int(abi.closure_elt_tydesc)));\n-                auto tydesc = cx.build.Load(tydescptr);\n-                auto llfnptr =\n-                    cx.build.GEP(tydesc,\n-                                 vec(C_int(0),\n-                                     C_int(abi.tydesc_field_drop_glue_off)));\n-                auto llfn = cx.build.Load(llfnptr);\n-                cx.build.FastCall(llfn, vec(cx.fcx.lltaskptr, llrawptr));\n+\n+                call_tydesc_glue_full(cx, bindings, cx.build.Load(tydescptr),\n+                                      abi.tydesc_field_drop_glue_off);\n+\n \n                 // Then free the body.\n                 // FIXME: switch gc/non-gc on layer of the type.\n@@ -1469,15 +1472,28 @@ fn iter_sequence(@block_ctxt cx,\n     fail;\n }\n \n+fn call_tydesc_glue_full(@block_ctxt cx, ValueRef v,\n+                         ValueRef tydesc, int field) {\n+    auto llrawptr = cx.build.BitCast(v, T_ptr(T_i8()));\n+    auto lltydescs = cx.build.GEP(tydesc,\n+                                  vec(C_int(0),\n+                                      C_int(abi.tydesc_field_first_param)));\n+    lltydescs = cx.build.Load(lltydescs);\n+    auto llfnptr = cx.build.GEP(tydesc, vec(C_int(0), C_int(field)));\n+    auto llfn = cx.build.Load(llfnptr);\n+    cx.build.FastCall(llfn, vec(cx.fcx.lltaskptr, lltydescs, llrawptr));\n+}\n+\n+fn call_tydesc_glue(@block_ctxt cx, ValueRef v, @ty.t t, int field) {\n+    call_tydesc_glue_full(cx, v, get_tydesc(cx, t), field);\n+}\n+\n fn incr_all_refcnts(@block_ctxt cx,\n                     ValueRef v,\n                     @ty.t t) -> result {\n \n     if (!ty.type_is_scalar(t)) {\n-        auto llrawptr = cx.build.BitCast(v, T_ptr(T_i8()));\n-        auto llfnptr = field_of_tydesc(cx, t, abi.tydesc_field_take_glue_off);\n-        auto llfn = cx.build.Load(llfnptr);\n-        cx.build.FastCall(llfn, vec(cx.fcx.lltaskptr, llrawptr));\n+        call_tydesc_glue(cx, v, t, abi.tydesc_field_take_glue_off);\n     }\n     ret res(cx, C_nil());\n }\n@@ -1499,10 +1515,7 @@ fn drop_ty(@block_ctxt cx,\n            @ty.t t) -> result {\n \n     if (!ty.type_is_scalar(t)) {\n-        auto llrawptr = cx.build.BitCast(v, T_ptr(T_i8()));\n-        auto llfnptr = field_of_tydesc(cx, t, abi.tydesc_field_drop_glue_off);\n-        auto llfn = cx.build.Load(llfnptr);\n-        cx.build.FastCall(llfn, vec(cx.fcx.lltaskptr, llrawptr));\n+        call_tydesc_glue(cx, v, t, abi.tydesc_field_drop_glue_off);\n     }\n     ret res(cx, C_nil());\n }"}]}