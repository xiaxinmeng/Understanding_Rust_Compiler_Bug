{"sha": "fef2f5b815fd9cf48895063e35054e34c31562d9", "node_id": "C_kwDOAAsO6NoAKGZlZjJmNWI4MTVmZDljZjQ4ODk1MDYzZTM1MDU0ZTM0YzMxNTYyZDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-03T20:13:32Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-03T20:13:32Z"}, "message": "Rename things to reflect that they're not item specific", "tree": {"sha": "90aabcfca1893c229b9133637939c453b88ceee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90aabcfca1893c229b9133637939c453b88ceee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fef2f5b815fd9cf48895063e35054e34c31562d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fef2f5b815fd9cf48895063e35054e34c31562d9", "html_url": "https://github.com/rust-lang/rust/commit/fef2f5b815fd9cf48895063e35054e34c31562d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fef2f5b815fd9cf48895063e35054e34c31562d9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "html_url": "https://github.com/rust-lang/rust/commit/20a83144b2a8dacc2ce2d2b129959c827d58b2ce"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "7880a248cb08c8c608d2d98646fcf6f5247b6323", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=fef2f5b815fd9cf48895063e35054e34c31562d9", "patch": "@@ -1040,7 +1040,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n     /// Convert the bounds in `ast_bounds` that refer to traits which define an associated type\n     /// named `assoc_name` into ty::Bounds. Ignore the rest.\n-    pub(crate) fn compute_bounds_that_match_assoc_type(\n+    pub(crate) fn compute_bounds_that_match_assoc_item(\n         &self,\n         param_ty: Ty<'tcx>,\n         ast_bounds: &[hir::GenericBound<'_>],\n@@ -1051,7 +1051,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         for ast_bound in ast_bounds {\n             if let Some(trait_ref) = ast_bound.trait_ref()\n                 && let Some(trait_did) = trait_ref.trait_def_id()\n-                && self.tcx().trait_may_define_assoc_type(trait_did, assoc_name)\n+                && self.tcx().trait_may_define_assoc_item(trait_did, assoc_name)\n             {\n                 result.push(ast_bound.clone());\n             }\n@@ -1923,7 +1923,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let param_name = tcx.hir().ty_param_name(ty_param_def_id);\n         self.one_bound_for_assoc_type(\n             || {\n-                traits::transitive_bounds_that_define_assoc_type(\n+                traits::transitive_bounds_that_define_assoc_item(\n                     tcx,\n                     predicates.iter().filter_map(|(p, _)| {\n                         Some(p.to_opt_poly_trait_pred()?.map_bound(|t| t.trait_ref))"}, {"sha": "b65817ee95e92e7aa437e570689416786f9985e7", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=fef2f5b815fd9cf48895063e35054e34c31562d9", "patch": "@@ -64,8 +64,8 @@ pub fn provide(providers: &mut Providers) {\n         explicit_predicates_of: predicates_of::explicit_predicates_of,\n         super_predicates_of: predicates_of::super_predicates_of,\n         implied_predicates_of: predicates_of::implied_predicates_of,\n-        super_predicates_that_define_assoc_type:\n-            predicates_of::super_predicates_that_define_assoc_type,\n+        super_predicates_that_define_assoc_item:\n+            predicates_of::super_predicates_that_define_assoc_item,\n         trait_explicit_predicates_and_bounds: predicates_of::trait_explicit_predicates_and_bounds,\n         type_param_predicates: predicates_of::type_param_predicates,\n         trait_def,"}, {"sha": "6c06957d1ee12722ade8b4ef8446b856e6fa840e", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=fef2f5b815fd9cf48895063e35054e34c31562d9", "patch": "@@ -565,7 +565,7 @@ pub(super) fn super_predicates_of(\n     implied_predicates_with_filter(tcx, trait_def_id.to_def_id(), PredicateFilter::SelfOnly)\n }\n \n-pub(super) fn super_predicates_that_define_assoc_type(\n+pub(super) fn super_predicates_that_define_assoc_item(\n     tcx: TyCtxt<'_>,\n     (trait_def_id, assoc_name): (DefId, Ident),\n ) -> ty::GenericPredicates<'_> {\n@@ -640,7 +640,7 @@ pub(super) fn implied_predicates_with_filter(\n         ),\n         PredicateFilter::SelfThatDefines(assoc_name) => (\n             // Convert the bounds that follow the colon (or equal) that reference the associated name\n-            icx.astconv().compute_bounds_that_match_assoc_type(self_param_ty, bounds, assoc_name),\n+            icx.astconv().compute_bounds_that_match_assoc_item(self_param_ty, bounds, assoc_name),\n             // Include where clause bounds for `Self` that reference the associated name\n             icx.type_parameter_bounds_in_generics(\n                 generics,\n@@ -819,7 +819,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n             hir::GenericBound::Trait(poly_trait_ref, _) => {\n                 let trait_ref = &poly_trait_ref.trait_ref;\n                 if let Some(trait_did) = trait_ref.trait_def_id() {\n-                    self.tcx.trait_may_define_assoc_type(trait_did, assoc_name)\n+                    self.tcx.trait_may_define_assoc_item(trait_did, assoc_name)\n                 } else {\n                     false\n                 }"}, {"sha": "ab0dd01ce3aed72bf385a12fe496a8236885ce5a", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=fef2f5b815fd9cf48895063e35054e34c31562d9", "patch": "@@ -1728,7 +1728,7 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n         assoc_name: Ident,\n         assoc_kind: ty::AssocKind,\n     ) -> Option<(Vec<ty::BoundVariableKind>, &'tcx ty::AssocItem)> {\n-        let trait_defines_associated_type_named = |trait_def_id: DefId| {\n+        let trait_defines_associated_item_named = |trait_def_id: DefId| {\n             tcx.associated_items(trait_def_id).find_by_name_and_kind(\n                 tcx,\n                 assoc_name,\n@@ -1752,10 +1752,10 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n                 _ => break None,\n             }\n \n-            if let Some(assoc_item) = trait_defines_associated_type_named(def_id) {\n+            if let Some(assoc_item) = trait_defines_associated_item_named(def_id) {\n                 break Some((bound_vars.into_iter().collect(), assoc_item));\n             }\n-            let predicates = tcx.super_predicates_that_define_assoc_type((def_id, assoc_name));\n+            let predicates = tcx.super_predicates_that_define_assoc_item((def_id, assoc_name));\n             let obligations = predicates.predicates.iter().filter_map(|&(pred, _)| {\n                 let bound_predicate = pred.kind();\n                 match bound_predicate.skip_binder() {"}, {"sha": "1acefcef3b4cf8ae39f6b713be3cd95c5056d42e", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=fef2f5b815fd9cf48895063e35054e34c31562d9", "patch": "@@ -376,11 +376,11 @@ pub fn transitive_bounds<'tcx>(\n }\n \n /// A specialized variant of `elaborate` that only elaborates trait references that may\n-/// define the given associated type `assoc_name`. It uses the\n-/// `super_predicates_that_define_assoc_type` query to avoid enumerating super-predicates that\n+/// define the given associated item with the name `assoc_name`. It uses the\n+/// `super_predicates_that_define_assoc_item` query to avoid enumerating super-predicates that\n /// aren't related to `assoc_item`. This is used when resolving types like `Self::Item` or\n /// `T::Item` and helps to avoid cycle errors (see e.g. #35237).\n-pub fn transitive_bounds_that_define_assoc_type<'tcx>(\n+pub fn transitive_bounds_that_define_assoc_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,\n     assoc_name: Ident,\n@@ -393,7 +393,7 @@ pub fn transitive_bounds_that_define_assoc_type<'tcx>(\n             let anon_trait_ref = tcx.anonymize_bound_vars(trait_ref);\n             if visited.insert(anon_trait_ref) {\n                 let super_predicates =\n-                    tcx.super_predicates_that_define_assoc_type((trait_ref.def_id(), assoc_name));\n+                    tcx.super_predicates_that_define_assoc_item((trait_ref.def_id(), assoc_name));\n                 for (super_predicate, _) in super_predicates.predicates {\n                     let subst_predicate = super_predicate.subst_supertrait(tcx, &trait_ref);\n                     if let Some(binder) = subst_predicate.to_opt_poly_trait_pred() {"}, {"sha": "b425c7600ac688912bdd4363ede77d9e8f624695", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=fef2f5b815fd9cf48895063e35054e34c31562d9", "patch": "@@ -569,7 +569,7 @@ rustc_queries! {\n     /// returns the full set of predicates. If `Some<Ident>`, then the query returns only the\n     /// subset of super-predicates that reference traits that define the given associated type.\n     /// This is used to avoid cycles in resolving types like `T::Item`.\n-    query super_predicates_that_define_assoc_type(key: (DefId, rustc_span::symbol::Ident)) -> ty::GenericPredicates<'tcx> {\n+    query super_predicates_that_define_assoc_item(key: (DefId, rustc_span::symbol::Ident)) -> ty::GenericPredicates<'tcx> {\n         desc { |tcx| \"computing the super traits of `{}` with associated type name `{}`\",\n             tcx.def_path_str(key.0),\n             key.1"}, {"sha": "d57451a8b7141184629ccb4128bf559306cf7d36", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=fef2f5b815fd9cf48895063e35054e34c31562d9", "patch": "@@ -1567,16 +1567,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`\n     /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.\n-    pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n+    pub fn trait_may_define_assoc_item(self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n         self.super_traits_of(trait_def_id).any(|trait_did| {\n             self.associated_items(trait_did)\n-                .find_by_name_and_kinds(\n-                    self,\n-                    assoc_name,\n-                    &[ty::AssocKind::Type, ty::AssocKind::Const, ty::AssocKind::Fn],\n-                    trait_did,\n-                )\n-                .is_some()\n+                .filter_by_name_unhygienic(assoc_name.name)\n+                .any(|item| self.hygienic_eq(assoc_name, item.ident(self), trait_did))\n         })\n     }\n "}, {"sha": "25529f18545790bf24f455f3a471f7ad5d1e84ed", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef2f5b815fd9cf48895063e35054e34c31562d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=fef2f5b815fd9cf48895063e35054e34c31562d9", "patch": "@@ -62,7 +62,7 @@ pub use self::util::elaborate;\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{get_vtable_index_of_object_method, impl_item_is_final, upcast_choices};\n pub use self::util::{\n-    supertrait_def_ids, supertraits, transitive_bounds, transitive_bounds_that_define_assoc_type,\n+    supertrait_def_ids, supertraits, transitive_bounds, transitive_bounds_that_define_assoc_item,\n     SupertraitDefIds,\n };\n "}]}