{"sha": "6212729315be2ac80785ffcecfe0a80c9955c4cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMTI3MjkzMTViZTJhYzgwNzg1ZmZjZWNmZTBhODBjOTk1NWM0Y2Y=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-09T02:46:32Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-10T03:39:59Z"}, "message": "std::vec: Change fn unzip to take an iterator argument\n\nRemove unzip_slice since it's redundant. Old unzip is equivalent to the\n`|x| unzip(x.move_iter())`", "tree": {"sha": "1cf9b631d4734f71560f8c191f219c84d3e3b69a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cf9b631d4734f71560f8c191f219c84d3e3b69a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6212729315be2ac80785ffcecfe0a80c9955c4cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6212729315be2ac80785ffcecfe0a80c9955c4cf", "html_url": "https://github.com/rust-lang/rust/commit/6212729315be2ac80785ffcecfe0a80c9955c4cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6212729315be2ac80785ffcecfe0a80c9955c4cf/comments", "author": null, "committer": null, "parents": [{"sha": "79e78c4b0c49003c8191f7094651753ecfabfd24", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e78c4b0c49003c8191f7094651753ecfabfd24", "html_url": "https://github.com/rust-lang/rust/commit/79e78c4b0c49003c8191f7094651753ecfabfd24"}], "stats": {"total": 46, "additions": 14, "deletions": 32}, "files": [{"sha": "e6d80e1443bb92cea18a7f06300aed85418690d2", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6212729315be2ac80785ffcecfe0a80c9955c4cf/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212729315be2ac80785ffcecfe0a80c9955c4cf/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=6212729315be2ac80785ffcecfe0a80c9955c4cf", "patch": "@@ -112,7 +112,7 @@ pub fn parse_config_(\n     process_output: Process\n ) -> Result<Config, ~str> {\n     let args = args.tail();\n-    let opts = vec::unzip(opts()).first();\n+    let opts = vec::unzip(opts().move_iter()).first();\n     match getopts::getopts(args, opts) {\n         Ok(matches) => {\n             if matches.free.len() == 1 {"}, {"sha": "695217a62f6a9b7d06729a73cfa2acb78f6f4e05", "filename": "src/libstd/select.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6212729315be2ac80785ffcecfe0a80c9955c4cf/src%2Flibstd%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212729315be2ac80785ffcecfe0a80c9955c4cf/src%2Flibstd%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fselect.rs?ref=6212729315be2ac80785ffcecfe0a80c9955c4cf", "patch": "@@ -148,7 +148,7 @@ mod test {\n         // Unfortunately this does not actually test the block_on early-break\n         // codepath in select -- racing between the sender and the receiver in\n         // separate tasks is necessary to get around the optimistic check.\n-        let (ports, chans) = unzip(from_fn(num_ports, |_| oneshot::<()>()));\n+        let (ports, chans) = unzip(range(0, num_ports).map(|_| oneshot::<()>()));\n         let mut dead_chans = ~[];\n         let mut ports = ports;\n         for (i, chan) in chans.move_iter().enumerate() {\n@@ -165,7 +165,7 @@ mod test {\n \n         // Same thing with streams instead.\n         // FIXME(#7971): This should be in a macro but borrowck isn't smart enough.\n-        let (ports, chans) = unzip(from_fn(num_ports, |_| stream::<()>()));\n+        let (ports, chans) = unzip(range(0, num_ports).map(|_| stream::<()>()));\n         let mut dead_chans = ~[];\n         let mut ports = ports;\n         for (i, chan) in chans.move_iter().enumerate() {\n@@ -209,7 +209,7 @@ mod test {\n         // Sends 10 buffered packets, and uses select to retrieve them all.\n         // Puts the port in a different spot in the vector each time.\n         do run_in_newsched_task {\n-            let (ports, _) = unzip(from_fn(10, |_| stream()));\n+            let (ports, _) = unzip(range(0u, 10).map(|_| stream::<int>()));\n             let (port, chan) = stream();\n             do 10.times { chan.send(31337); }\n             let mut ports = ports;\n@@ -327,7 +327,7 @@ mod test {\n                     let (p,c) = oneshot();\n                     let c = Cell::new(c);\n                     do task::spawn {\n-                        let (dead_ps, dead_cs) = unzip(from_fn(5, |_| oneshot::<()>()));\n+                        let (dead_ps, dead_cs) = unzip(range(0u, 5).map(|_| oneshot::<()>()));\n                         let mut ports = dead_ps;\n                         select(ports); // should get killed; nothing should leak\n                         c.take().send(()); // must not happen"}, {"sha": "10a0bf278366ebe76cd3bcb9ae0b9f76a10d6dd3", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6212729315be2ac80785ffcecfe0a80c9955c4cf/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212729315be2ac80785ffcecfe0a80c9955c4cf/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=6212729315be2ac80785ffcecfe0a80c9955c4cf", "patch": "@@ -389,37 +389,19 @@ impl<'self,T:Clone> VectorVector<T> for &'self [&'self [T]] {\n     }\n }\n \n-// FIXME: if issue #586 gets implemented, could have a postcondition\n-// saying the two result lists have the same length -- or, could\n-// return a nominal record with a constraint saying that, instead of\n-// returning a tuple (contingent on issue #869)\n /**\n- * Convert a vector of pairs into a pair of vectors, by reference. As unzip().\n- */\n-pub fn unzip_slice<T:Clone,U:Clone>(v: &[(T, U)]) -> (~[T], ~[U]) {\n-    let mut ts = ~[];\n-    let mut us = ~[];\n-    for p in v.iter() {\n-        let (t, u) = (*p).clone();\n-        ts.push(t);\n-        us.push(u);\n-    }\n-    (ts, us)\n-}\n-\n-/**\n- * Convert a vector of pairs into a pair of vectors.\n+ * Convert an iterator of pairs into a pair of vectors.\n  *\n  * Returns a tuple containing two vectors where the i-th element of the first\n- * vector contains the first element of the i-th tuple of the input vector,\n+ * vector contains the first element of the i-th tuple of the input iterator,\n  * and the i-th element of the second vector contains the second element\n- * of the i-th tuple of the input vector.\n+ * of the i-th tuple of the input iterator.\n  */\n-pub fn unzip<T,U>(v: ~[(T, U)]) -> (~[T], ~[U]) {\n-    let mut ts = ~[];\n-    let mut us = ~[];\n-    for p in v.move_iter() {\n-        let (t, u) = p;\n+pub fn unzip<T, U, V: Iterator<(T, U)>>(mut iter: V) -> (~[T], ~[U]) {\n+    let (lo, _) = iter.size_hint();\n+    let mut ts = with_capacity(lo);\n+    let mut us = with_capacity(lo);\n+    for (t, u) in iter {\n         ts.push(t);\n         us.push(u);\n     }\n@@ -2891,7 +2873,7 @@ mod tests {\n     fn test_zip_unzip() {\n         let z1 = ~[(1, 4), (2, 5), (3, 6)];\n \n-        let (left, right) = unzip(z1);\n+        let (left, right) = unzip(z1.iter().map(|&x| x));\n \n         assert_eq!((1, 4), (left[0], right[0]));\n         assert_eq!((2, 5), (left[1], right[1]));"}]}