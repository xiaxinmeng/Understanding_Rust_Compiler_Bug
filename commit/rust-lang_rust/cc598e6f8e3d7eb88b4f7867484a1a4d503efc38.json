{"sha": "cc598e6f8e3d7eb88b4f7867484a1a4d503efc38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNTk4ZTZmOGUzZDdlYjg4YjRmNzg2NzQ4NGExYTRkNTAzZWZjMzg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-08-31T21:48:19Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-08-31T21:48:19Z"}, "message": "Second approach - using type contents", "tree": {"sha": "7ae454dca2ed88812fd50312aa23da53bb252d81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ae454dca2ed88812fd50312aa23da53bb252d81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38", "html_url": "https://github.com/rust-lang/rust/commit/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdfeb65585a5d6aa4bda0f73f12d4d57d167f322", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322", "html_url": "https://github.com/rust-lang/rust/commit/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322"}], "stats": {"total": 39, "additions": 11, "deletions": 28}, "files": [{"sha": "77e73c46c402cf2f6ac23962b2dc4d80124759be", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=cc598e6f8e3d7eb88b4f7867484a1a4d503efc38", "patch": "@@ -167,6 +167,5 @@ register_diagnostics!(\n     E0155,\n     E0156,\n     E0157,\n-    E0158,\n-    E0159\n+    E0158\n )"}, {"sha": "c3a001116b34c3d52b6ee3f1fb1fb7076c689602", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=cc598e6f8e3d7eb88b4f7867484a1a4d503efc38", "patch": "@@ -596,8 +596,8 @@ fn check_ty(cx: &mut Context, aty: &Ty) {\n                 Some(ref item_substs) => {\n                     let def_map = cx.tcx.def_map.borrow();\n                     let did = def_map.get_copy(&id).def_id();\n-                    let ty = ty::lookup_item_type(cx.tcx, did);\n-                    for def in ty.generics.types.iter() {\n+                    let generics = ty::lookup_item_type(cx.tcx, did).generics;\n+                    for def in generics.types.iter() {\n                         let ty = *item_substs.substs.types.get(def.space,\n                                                                def.index);\n                         check_typaram_bounds(cx, aty.span, ty, def);\n@@ -644,20 +644,6 @@ pub fn check_typaram_bounds(cx: &Context,\n     });\n }\n \n-// Check that the programmer has not added the `Sized` bound to a trait type\n-// which would fool the compiler into thinking that trait types are sized, when\n-// they are really unsized.\n-fn check_false_sized(cx: &Context, sp: Span, ty: ty::t) {\n-    match ty::get(ty).sty {\n-        ty::ty_trait(..) if ty::type_is_sized(cx.tcx, ty) => {\n-            span_err!(cx.tcx.sess, sp, E0159,\n-                      \"explicitly adding `Sized` bound to an unsized type `{}`\",\n-                       ty_to_string(cx.tcx, ty));\n-        }\n-        _ => {}\n-    }\n-}\n-\n fn check_bounds_on_structs_or_enums_in_type_if_possible(cx: &mut Context,\n                                                         span: Span,\n                                                         ty: ty::t) {\n@@ -688,7 +674,6 @@ fn check_bounds_on_structs_or_enums_in_type_if_possible(cx: &mut Context,\n                                                                .types\n                                                                .iter()) {\n                     check_typaram_bounds(cx, span, *ty, type_param_def);\n-                    check_false_sized(cx, span, *ty);\n                 }\n \n                 // Check trait bounds.\n@@ -716,7 +701,6 @@ fn check_bounds_on_structs_or_enums_in_type_if_possible(cx: &mut Context,\n                                             cx.tcx)).as_slice());\n                 })\n             }\n-            ty::ty_uniq(ty) => check_false_sized(cx, span, ty),\n             _ => {}\n         }\n     });"}, {"sha": "2cd76404ecbacf9c870a378f118922d2882ce038", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=cc598e6f8e3d7eb88b4f7867484a1a4d503efc38", "patch": "@@ -2362,7 +2362,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_trait(box ty::TyTrait { bounds, .. }) => {\n-                object_contents(cx, bounds) | TC::ReachesFfiUnsafe\n+                object_contents(cx, bounds) | TC::ReachesFfiUnsafe | TC::Nonsized\n             }\n \n             ty_ptr(ref mt) => {"}, {"sha": "fb9a060cb602a75e66c7e43e867c8f1e162fe70b", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=cc598e6f8e3d7eb88b4f7867484a1a4d503efc38", "patch": "@@ -8,18 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n use std::cell::RefCell;\n \n trait Trait {}\n \n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n-    //~^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n-    //~^^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n-    let x: Vec<Box<Trait + Sized>> = Vec::new();\n-    //~^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n-    //~^^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n+    //~^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n+    //~^^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n+    //~^^^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n     let x: Vec<Box<RefCell<Trait + Sized>>> = Vec::new();\n-    //~^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n-    //~^^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n+    //~^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n+    //~^^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n }"}]}