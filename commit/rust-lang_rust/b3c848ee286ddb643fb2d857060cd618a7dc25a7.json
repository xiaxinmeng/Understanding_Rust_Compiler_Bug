{"sha": "b3c848ee286ddb643fb2d857060cd618a7dc25a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYzg0OGVlMjg2ZGRiNjQzZmIyZDg1NzA2MGNkNjE4YTdkYzI1YTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-17T01:24:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-17T01:24:25Z"}, "message": "Merge #7703\n\n7703: Allow comments between newlines in chaining hints r=Veykril a=unratito\n\nCurrently, chaining hints are not generated if there are comments between newlines, which is a very common pattern:\r\n\r\n```rust\r\nlet vec = (0..10)\r\n    // Multiply by 2\r\n    .map(|x| x * 2)\r\n    // Add 3\r\n    .map(|x| x + 3)\r\n    .collect::<Vec<i32>>();\r\n```\r\n\r\nBesides, it seems a bit weird that this piece of code generates a chaining hint:\r\n\r\n```rust\r\nlet vec = (0..10)\r\n\r\n\r\n\r\n    .collect::<Vec<i32>>();\r\n```\r\n\r\nBut this one doesn't:\r\n\r\n```rust\r\nlet vec = (0..10)\r\n\r\n    // This is a comment\r\n\r\n    .collect::<Vec<i32>>();\r\n```\r\n\n\nCo-authored-by: Paco Sober\u00f3n <unratito@gmail.com>", "tree": {"sha": "e8873ede9e5579085b59dfa716d23438b3f54efc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8873ede9e5579085b59dfa716d23438b3f54efc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3c848ee286ddb643fb2d857060cd618a7dc25a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLHBJCRBK7hj4Ov3rIwAAdHIIADC9ClJ9Db82mygVhyErx/UI\nI2Cpj4/vqL+/7826GTbuUfJjbQH0JwwUX08ls7SupnhhwTqM1BHMfpA0xmhZwGZq\nLElJYN+BpkD2kukrNyh18Hu+DP5geWYw/YNrKL2ts7oU8gL2KWaVkYYvEOQINIT+\nCzAfOxxlDg0R9xcKI35sMhnb/B4D26BlNEh1IyUlE4NX0jMgt2WdbAh5mmSM/COb\nU60OyUX/mXDxJaK34Ng/jsuFb/DtYoALWFN+MkduJm9rOKQmCS4dpUY+/3ACEiao\nY93VnwaTVfuAxJt6P28sGH+p41ewm36PngzfLdkSd8bk0t13HCxOVTsEwWf+KLw=\n=q/am\n-----END PGP SIGNATURE-----\n", "payload": "tree e8873ede9e5579085b59dfa716d23438b3f54efc\nparent 94f56ebccf2e558c178d2d73161fe78803b6f3e2\nparent e0eb80eaee9451fa91e16333f31e5b049179b483\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1613525065 +0000\ncommitter GitHub <noreply@github.com> 1613525065 +0000\n\nMerge #7703\n\n7703: Allow comments between newlines in chaining hints r=Veykril a=unratito\n\nCurrently, chaining hints are not generated if there are comments between newlines, which is a very common pattern:\r\n\r\n```rust\r\nlet vec = (0..10)\r\n    // Multiply by 2\r\n    .map(|x| x * 2)\r\n    // Add 3\r\n    .map(|x| x + 3)\r\n    .collect::<Vec<i32>>();\r\n```\r\n\r\nBesides, it seems a bit weird that this piece of code generates a chaining hint:\r\n\r\n```rust\r\nlet vec = (0..10)\r\n\r\n\r\n\r\n    .collect::<Vec<i32>>();\r\n```\r\n\r\nBut this one doesn't:\r\n\r\n```rust\r\nlet vec = (0..10)\r\n\r\n    // This is a comment\r\n\r\n    .collect::<Vec<i32>>();\r\n```\r\n\n\nCo-authored-by: Paco Sober\u00f3n <unratito@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c848ee286ddb643fb2d857060cd618a7dc25a7", "html_url": "https://github.com/rust-lang/rust/commit/b3c848ee286ddb643fb2d857060cd618a7dc25a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3c848ee286ddb643fb2d857060cd618a7dc25a7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94f56ebccf2e558c178d2d73161fe78803b6f3e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f56ebccf2e558c178d2d73161fe78803b6f3e2", "html_url": "https://github.com/rust-lang/rust/commit/94f56ebccf2e558c178d2d73161fe78803b6f3e2"}, {"sha": "e0eb80eaee9451fa91e16333f31e5b049179b483", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb80eaee9451fa91e16333f31e5b049179b483", "html_url": "https://github.com/rust-lang/rust/commit/e0eb80eaee9451fa91e16333f31e5b049179b483"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "4ceb2074209d62842ba53afb5bfdf801c6c6741c", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b3c848ee286ddb643fb2d857060cd618a7dc25a7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c848ee286ddb643fb2d857060cd618a7dc25a7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b3c848ee286ddb643fb2d857060cd618a7dc25a7", "patch": "@@ -109,26 +109,31 @@ fn get_chaining_hints(\n     // Chaining can be defined as an expression whose next sibling tokens are newline and dot\n     // Ignoring extra whitespace and comments\n     let next = tokens.next()?.kind();\n-    let next_next = tokens.next()?.kind();\n-    if next == SyntaxKind::WHITESPACE && next_next == T![.] {\n-        let ty = sema.type_of_expr(&expr)?;\n-        if ty.is_unknown() {\n-            return None;\n+    if next == SyntaxKind::WHITESPACE {\n+        let mut next_next = tokens.next()?.kind();\n+        while next_next == SyntaxKind::WHITESPACE {\n+            next_next = tokens.next()?.kind();\n         }\n-        if matches!(expr, ast::Expr::PathExpr(_)) {\n-            if let Some(hir::Adt::Struct(st)) = ty.as_adt() {\n-                if st.fields(sema.db).is_empty() {\n-                    return None;\n+        if next_next == T![.] {\n+            let ty = sema.type_of_expr(&expr)?;\n+            if ty.is_unknown() {\n+                return None;\n+            }\n+            if matches!(expr, ast::Expr::PathExpr(_)) {\n+                if let Some(hir::Adt::Struct(st)) = ty.as_adt() {\n+                    if st.fields(sema.db).is_empty() {\n+                        return None;\n+                    }\n                 }\n             }\n+            acc.push(InlayHint {\n+                range: expr.syntax().text_range(),\n+                kind: InlayKind::ChainingHint,\n+                label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n+                    ty.display_truncated(sema.db, config.max_length).to_string().into()\n+                }),\n+            });\n         }\n-        acc.push(InlayHint {\n-            range: expr.syntax().text_range(),\n-            kind: InlayKind::ChainingHint,\n-            label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n-                ty.display_truncated(sema.db, config.max_length).to_string().into()\n-            }),\n-        });\n     }\n     Some(())\n }\n@@ -983,6 +988,7 @@ struct C;\n fn main() {\n     let c = A(B(C))\n         .into_b() // This is a comment\n+        // This is another comment\n         .into_c();\n }\n \"#,"}]}