{"sha": "b55cb897e5104ef30a3d13fe36cb97d6bf6a3597", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NWNiODk3ZTUxMDRlZjMwYTNkMTNmZTM2Y2I5N2Q2YmY2YTM1OTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-17T18:32:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-17T18:32:13Z"}, "message": "Merge #6912\n\n6912: Default to host platform for cargo metadata r=jonhoo a=jonhoo\n\nThis modifies the logic for calling cargo metadata so that it will use\r\nthe host platform if no explicit target platform is given. This is\r\nneeded since cargo metadata defaults to outputting information for _all_\r\ntargets.\r\n\r\nFixes #6908.\n\nCo-authored-by: Jon Gjengset <jongje@amazon.com>\nCo-authored-by: Jon Gjengset <jon@thesquareplanet.com>", "tree": {"sha": "7f4c106f52341744575e876eb41ea13c626c49ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f4c106f52341744575e876eb41ea13c626c49ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b55cb897e5104ef30a3d13fe36cb97d6bf6a3597", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf26QtCRBK7hj4Ov3rIwAAdHIIALAzJQdod5DsEjRK2rSXEjKu\ng7LnCa7ayOYSbFdORZL+xt2fheud2fA8c885OR3O7Z659dLEtfmGsVKW6rPOdTTw\n2EYy9sTng8D6bMZaTv0xAILBUOilGwHrZW1XVYXyYwUo1Uj6uuN0NlB9vrjHZQR5\n+xhVgQgCPKM04Vq/Z10HQmoHdnpD+G2FyT/zYv/T8K337u1J1xuKrnim2FaaECtI\nIOfmOt570HfnRbVmBZTVGxi+CsvROV0o1pCuvmWQ9UCZMyyjEKtrSlk1dABdbPRq\n8hhME4lCZwX7CpEk4U/FQV08XEmpiVrEhjbcBSWdzbhp/ZKc6exb21USHvf9ZAM=\n=v38S\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f4c106f52341744575e876eb41ea13c626c49ef\nparent b0e5d1efdbf81fccf655b202d2433700d6e312e1\nparent faed47b3d31d2bf533aac489046ed9efc30f239d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608229933 +0000\ncommitter GitHub <noreply@github.com> 1608229933 +0000\n\nMerge #6912\n\n6912: Default to host platform for cargo metadata r=jonhoo a=jonhoo\n\nThis modifies the logic for calling cargo metadata so that it will use\r\nthe host platform if no explicit target platform is given. This is\r\nneeded since cargo metadata defaults to outputting information for _all_\r\ntargets.\r\n\r\nFixes #6908.\n\nCo-authored-by: Jon Gjengset <jongje@amazon.com>\nCo-authored-by: Jon Gjengset <jon@thesquareplanet.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b55cb897e5104ef30a3d13fe36cb97d6bf6a3597", "html_url": "https://github.com/rust-lang/rust/commit/b55cb897e5104ef30a3d13fe36cb97d6bf6a3597", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b55cb897e5104ef30a3d13fe36cb97d6bf6a3597/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0e5d1efdbf81fccf655b202d2433700d6e312e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e5d1efdbf81fccf655b202d2433700d6e312e1", "html_url": "https://github.com/rust-lang/rust/commit/b0e5d1efdbf81fccf655b202d2433700d6e312e1"}, {"sha": "faed47b3d31d2bf533aac489046ed9efc30f239d", "url": "https://api.github.com/repos/rust-lang/rust/commits/faed47b3d31d2bf533aac489046ed9efc30f239d", "html_url": "https://github.com/rust-lang/rust/commit/faed47b3d31d2bf533aac489046ed9efc30f239d"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "bb3b6f2efbbf76ce5e4e247961029101bedc69a2", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b55cb897e5104ef30a3d13fe36cb97d6bf6a3597/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55cb897e5104ef30a3d13fe36cb97d6bf6a3597/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=b55cb897e5104ef30a3d13fe36cb97d6bf6a3597", "patch": "@@ -16,6 +16,7 @@ use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n \n use crate::cfg_flag::CfgFlag;\n+use crate::utf8_stdout;\n \n /// `CargoWorkspace` represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n@@ -166,8 +167,34 @@ impl CargoWorkspace {\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent.to_path_buf());\n         }\n-        if let Some(target) = config.target.as_ref() {\n-            meta.other_options(vec![String::from(\"--filter-platform\"), target.clone()]);\n+        let target = if let Some(target) = config.target.as_ref() {\n+            Some(target.clone())\n+        } else {\n+            // cargo metadata defaults to giving information for _all_ targets.\n+            // In the absence of a preference from the user, we use the host platform.\n+            let mut rustc = Command::new(toolchain::rustc());\n+            rustc.current_dir(cargo_toml.parent().unwrap()).arg(\"-vV\");\n+            log::debug!(\"Discovering host platform by {:?}\", rustc);\n+            match utf8_stdout(rustc) {\n+                Ok(stdout) => {\n+                    let field = \"host: \";\n+                    let target = stdout.lines().find_map(|l| l.strip_prefix(field));\n+                    if let Some(target) = target {\n+                        Some(target.to_string())\n+                    } else {\n+                        // If we fail to resolve the host platform, it's not the end of the world.\n+                        log::info!(\"rustc -vV did not report host platform, got:\\n{}\", stdout);\n+                        None\n+                    }\n+                }\n+                Err(e) => {\n+                    log::warn!(\"Failed to discover host platform: {}\", e);\n+                    None\n+                }\n+            }\n+        };\n+        if let Some(target) = target {\n+            meta.other_options(vec![String::from(\"--filter-platform\"), target]);\n         }\n         let mut meta = meta.exec().with_context(|| {\n             format!(\"Failed to run `cargo metadata --manifest-path {}`\", cargo_toml.display())"}]}