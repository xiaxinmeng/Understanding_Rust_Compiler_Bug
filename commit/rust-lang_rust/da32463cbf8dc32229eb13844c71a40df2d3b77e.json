{"sha": "da32463cbf8dc32229eb13844c71a40df2d3b77e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMzI0NjNjYmY4ZGMzMjIyOWViMTM4NDRjNzFhNDBkZjJkM2I3N2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T16:41:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T16:41:43Z"}, "message": "inline goto_defention tests", "tree": {"sha": "b64b08018711ef6021a1ad00c4246d10cfdc44e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b64b08018711ef6021a1ad00c4246d10cfdc44e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da32463cbf8dc32229eb13844c71a40df2d3b77e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da32463cbf8dc32229eb13844c71a40df2d3b77e", "html_url": "https://github.com/rust-lang/rust/commit/da32463cbf8dc32229eb13844c71a40df2d3b77e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da32463cbf8dc32229eb13844c71a40df2d3b77e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5", "html_url": "https://github.com/rust-lang/rust/commit/c2a0f5e50f6deb2e15bbfa6056a3cc0866c203a5"}], "stats": {"total": 124, "additions": 58, "deletions": 66}, "files": [{"sha": "08d1809ee1ae21e974a3a1958c5c6333e99491dd", "filename": "crates/ra_analysis/src/goto_defenition.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/da32463cbf8dc32229eb13844c71a40df2d3b77e/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32463cbf8dc32229eb13844c71a40df2d3b77e/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs?ref=da32463cbf8dc32229eb13844c71a40df2d3b77e", "patch": "@@ -78,3 +78,61 @@ fn name_defenition(\n     }\n     Ok(None)\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use test_utils::assert_eq_dbg;\n+    use crate::mock_analysis::analysis_and_position;\n+\n+    #[test]\n+    fn goto_defenition_works_in_items() {\n+        let (analysis, pos) = analysis_and_position(\n+            \"\n+            //- /lib.rs\n+            struct Foo;\n+            enum E { X(Foo<|>) }\n+            \",\n+        );\n+\n+        let symbols = analysis.goto_defenition(pos).unwrap().unwrap();\n+        assert_eq_dbg(\n+            r#\"[NavigationTarget { file_id: FileId(1), name: \"Foo\",\n+                                   kind: STRUCT_DEF, range: [0; 11),\n+                                   ptr: Some(LocalSyntaxPtr { range: [0; 11), kind: STRUCT_DEF }) }]\"#,\n+            &symbols,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_defenition_works_for_module_declaration() {\n+        let (analysis, pos) = analysis_and_position(\n+            \"\n+            //- /lib.rs\n+            mod <|>foo;\n+            //- /foo.rs\n+            // empty\n+        \",\n+        );\n+\n+        let symbols = analysis.goto_defenition(pos).unwrap().unwrap();\n+        assert_eq_dbg(\n+            r#\"[NavigationTarget { file_id: FileId(2), name: \"foo\", kind: MODULE, range: [0; 0), ptr: None }]\"#,\n+            &symbols,\n+        );\n+\n+        let (analysis, pos) = analysis_and_position(\n+            \"\n+            //- /lib.rs\n+            mod <|>foo;\n+            //- /foo/mod.rs\n+            // empty\n+        \",\n+        );\n+\n+        let symbols = analysis.goto_defenition(pos).unwrap().unwrap();\n+        assert_eq_dbg(\n+            r#\"[NavigationTarget { file_id: FileId(2), name: \"foo\", kind: MODULE, range: [0; 0), ptr: None }]\"#,\n+            &symbols,\n+        );\n+    }\n+}"}, {"sha": "13527e628f341a665c66faed5189eb5b2a3b02cd", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/da32463cbf8dc32229eb13844c71a40df2d3b77e/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32463cbf8dc32229eb13844c71a40df2d3b77e/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=da32463cbf8dc32229eb13844c71a40df2d3b77e", "patch": "@@ -399,13 +399,6 @@ impl Analysis {\n     ) -> Cancelable<Option<Vec<NavigationTarget>>> {\n         goto_defenition::goto_defenition(&*self.db, position)\n     }\n-    // /// Resolves reference to definition, but does not gurantee correctness.\n-    // pub fn approximately_resolve_symbol(\n-    //     &self,\n-    //     position: FilePosition,\n-    // ) -> Cancelable<Option<ReferenceResolution>> {\n-    //     self.db.approximately_resolve_symbol(position)\n-    // }\n     /// Finds all usages of the reference at point.\n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n         self.db.find_all_refs(position)"}, {"sha": "e15035304bac4ecdf117d2e77912fecd65cd8b7c", "filename": "crates/ra_analysis/tests/test/main.rs", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/da32463cbf8dc32229eb13844c71a40df2d3b77e/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da32463cbf8dc32229eb13844c71a40df2d3b77e/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs?ref=da32463cbf8dc32229eb13844c71a40df2d3b77e", "patch": "@@ -14,65 +14,6 @@ fn get_signature(text: &str) -> (FnSignatureInfo, Option<usize>) {\n     analysis.resolve_callable(position).unwrap().unwrap()\n }\n \n-#[test]\n-fn approximate_resolve_works_in_items() {\n-    let (analysis, pos) = analysis_and_position(\n-        \"\n-        //- /lib.rs\n-        struct Foo;\n-        enum E { X(Foo<|>) }\n-    \",\n-    );\n-\n-    let symbols = analysis.approximately_resolve_symbol(pos).unwrap().unwrap();\n-    assert_eq_dbg(\n-        r#\"ReferenceResolution {\n-            reference_range: [23; 26),\n-            resolves_to: [NavigationTarget { file_id: FileId(1), name: \"Foo\", kind: STRUCT_DEF, range: [0; 11), ptr: Some(LocalSyntaxPtr { range: [0; 11), kind: STRUCT_DEF }) }]\n-        }\"#,\n-        &symbols,\n-    );\n-}\n-\n-#[test]\n-fn test_resolve_module() {\n-    let (analysis, pos) = analysis_and_position(\n-        \"\n-        //- /lib.rs\n-        mod <|>foo;\n-        //- /foo.rs\n-        // empty\n-    \",\n-    );\n-\n-    let symbols = analysis.approximately_resolve_symbol(pos).unwrap().unwrap();\n-    assert_eq_dbg(\n-        r#\"ReferenceResolution {\n-            reference_range: [4; 7),\n-            resolves_to: [NavigationTarget { file_id: FileId(2), name: \"foo\", kind: MODULE, range: [0; 0), ptr: None }]\n-        }\"#,\n-        &symbols,\n-    );\n-\n-    let (analysis, pos) = analysis_and_position(\n-        \"\n-        //- /lib.rs\n-        mod <|>foo;\n-        //- /foo/mod.rs\n-        // empty\n-    \",\n-    );\n-\n-    let symbols = analysis.approximately_resolve_symbol(pos).unwrap().unwrap();\n-    assert_eq_dbg(\n-        r#\"ReferenceResolution {\n-            reference_range: [4; 7),\n-            resolves_to: [NavigationTarget { file_id: FileId(2), name: \"foo\", kind: MODULE, range: [0; 0), ptr: None }]\n-        }\"#,\n-        &symbols,\n-    );\n-}\n-\n #[test]\n fn test_unresolved_module_diagnostic() {\n     let (analysis, file_id) = single_file(\"mod foo;\");"}]}