{"sha": "bb453edebe477ab754d6c78e11db1bf3af08833c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNDUzZWRlYmU0NzdhYjc1NGQ2Yzc4ZTExZGIxYmYzYWYwODgzM2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-10T19:38:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-10T19:38:35Z"}, "message": "Honor client's dynamic registration caps\n\ncc https://github.com/rust-analyzer/rust-analyzer/pull/5516#issuecomment-757520828", "tree": {"sha": "262275f1d401de42d0410d87feb8c789d9f0015c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/262275f1d401de42d0410d87feb8c789d9f0015c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb453edebe477ab754d6c78e11db1bf3af08833c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb453edebe477ab754d6c78e11db1bf3af08833c", "html_url": "https://github.com/rust-lang/rust/commit/bb453edebe477ab754d6c78e11db1bf3af08833c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb453edebe477ab754d6c78e11db1bf3af08833c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "035fed5f9f7c062da7d23190dab1a7021fd48a5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/035fed5f9f7c062da7d23190dab1a7021fd48a5d", "html_url": "https://github.com/rust-lang/rust/commit/035fed5f9f7c062da7d23190dab1a7021fd48a5d"}], "stats": {"total": 123, "additions": 71, "deletions": 52}, "files": [{"sha": "27b92a5a9bf47478e06488758518761e0a7712f5", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb453edebe477ab754d6c78e11db1bf3af08833c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb453edebe477ab754d6c78e11db1bf3af08833c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=bb453edebe477ab754d6c78e11db1bf3af08833c", "patch": "@@ -334,6 +334,18 @@ impl Config {\n         }\n     }\n \n+    pub fn did_save_text_document_dynamic_registration(&self) -> bool {\n+        let caps =\n+            try_or!(self.caps.text_document.as_ref()?.synchronization.clone()?, Default::default());\n+        caps.did_save == Some(true) && caps.dynamic_registration == Some(true)\n+    }\n+    pub fn did_change_watched_files_dynamic_registration(&self) -> bool {\n+        try_or!(\n+            self.caps.workspace.as_ref()?.did_change_watched_files.as_ref()?.dynamic_registration?,\n+            false\n+        )\n+    }\n+\n     pub fn location_link(&self) -> bool {\n         try_or!(self.caps.text_document.as_ref()?.definition?.link_support?, false)\n     }"}, {"sha": "6d2475a590a7be02989090a38f44e840da5e7fc3", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bb453edebe477ab754d6c78e11db1bf3af08833c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb453edebe477ab754d6c78e11db1bf3af08833c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=bb453edebe477ab754d6c78e11db1bf3af08833c", "patch": "@@ -108,38 +108,40 @@ impl GlobalState {\n             );\n         };\n \n-        let save_registration_options = lsp_types::TextDocumentSaveRegistrationOptions {\n-            include_text: Some(false),\n-            text_document_registration_options: lsp_types::TextDocumentRegistrationOptions {\n-                document_selector: Some(vec![\n-                    lsp_types::DocumentFilter {\n-                        language: None,\n-                        scheme: None,\n-                        pattern: Some(\"**/*.rs\".into()),\n-                    },\n-                    lsp_types::DocumentFilter {\n-                        language: None,\n-                        scheme: None,\n-                        pattern: Some(\"**/Cargo.toml\".into()),\n-                    },\n-                    lsp_types::DocumentFilter {\n-                        language: None,\n-                        scheme: None,\n-                        pattern: Some(\"**/Cargo.lock\".into()),\n-                    },\n-                ]),\n-            },\n-        };\n-\n-        let registration = lsp_types::Registration {\n-            id: \"textDocument/didSave\".to_string(),\n-            method: \"textDocument/didSave\".to_string(),\n-            register_options: Some(serde_json::to_value(save_registration_options).unwrap()),\n-        };\n-        self.send_request::<lsp_types::request::RegisterCapability>(\n-            lsp_types::RegistrationParams { registrations: vec![registration] },\n-            |_, _| (),\n-        );\n+        if self.config.did_save_text_document_dynamic_registration() {\n+            let save_registration_options = lsp_types::TextDocumentSaveRegistrationOptions {\n+                include_text: Some(false),\n+                text_document_registration_options: lsp_types::TextDocumentRegistrationOptions {\n+                    document_selector: Some(vec![\n+                        lsp_types::DocumentFilter {\n+                            language: None,\n+                            scheme: None,\n+                            pattern: Some(\"**/*.rs\".into()),\n+                        },\n+                        lsp_types::DocumentFilter {\n+                            language: None,\n+                            scheme: None,\n+                            pattern: Some(\"**/Cargo.toml\".into()),\n+                        },\n+                        lsp_types::DocumentFilter {\n+                            language: None,\n+                            scheme: None,\n+                            pattern: Some(\"**/Cargo.lock\".into()),\n+                        },\n+                    ]),\n+                },\n+            };\n+\n+            let registration = lsp_types::Registration {\n+                id: \"textDocument/didSave\".to_string(),\n+                method: \"textDocument/didSave\".to_string(),\n+                register_options: Some(serde_json::to_value(save_registration_options).unwrap()),\n+            };\n+            self.send_request::<lsp_types::request::RegisterCapability>(\n+                lsp_types::RegistrationParams { registrations: vec![registration] },\n+                |_, _| (),\n+            );\n+        }\n \n         self.fetch_workspaces_request();\n         self.fetch_workspaces_if_needed();"}, {"sha": "97e20362f65c1cd9aba00fe97668038edac335c0", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bb453edebe477ab754d6c78e11db1bf3af08833c/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb453edebe477ab754d6c78e11db1bf3af08833c/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=bb453edebe477ab754d6c78e11db1bf3af08833c", "patch": "@@ -182,26 +182,31 @@ impl GlobalState {\n         }\n \n         if let FilesWatcher::Client = self.config.files().watcher {\n-            let registration_options = lsp_types::DidChangeWatchedFilesRegistrationOptions {\n-                watchers: workspaces\n-                    .iter()\n-                    .flat_map(ProjectWorkspace::to_roots)\n-                    .filter(|it| it.is_member)\n-                    .flat_map(|root| {\n-                        root.include.into_iter().map(|it| format!(\"{}/**/*.rs\", it.display()))\n-                    })\n-                    .map(|glob_pattern| lsp_types::FileSystemWatcher { glob_pattern, kind: None })\n-                    .collect(),\n-            };\n-            let registration = lsp_types::Registration {\n-                id: \"workspace/didChangeWatchedFiles\".to_string(),\n-                method: \"workspace/didChangeWatchedFiles\".to_string(),\n-                register_options: Some(serde_json::to_value(registration_options).unwrap()),\n-            };\n-            self.send_request::<lsp_types::request::RegisterCapability>(\n-                lsp_types::RegistrationParams { registrations: vec![registration] },\n-                |_, _| (),\n-            );\n+            if self.config.did_change_watched_files_dynamic_registration() {\n+                let registration_options = lsp_types::DidChangeWatchedFilesRegistrationOptions {\n+                    watchers: workspaces\n+                        .iter()\n+                        .flat_map(ProjectWorkspace::to_roots)\n+                        .filter(|it| it.is_member)\n+                        .flat_map(|root| {\n+                            root.include.into_iter().map(|it| format!(\"{}/**/*.rs\", it.display()))\n+                        })\n+                        .map(|glob_pattern| lsp_types::FileSystemWatcher {\n+                            glob_pattern,\n+                            kind: None,\n+                        })\n+                        .collect(),\n+                };\n+                let registration = lsp_types::Registration {\n+                    id: \"workspace/didChangeWatchedFiles\".to_string(),\n+                    method: \"workspace/didChangeWatchedFiles\".to_string(),\n+                    register_options: Some(serde_json::to_value(registration_options).unwrap()),\n+                };\n+                self.send_request::<lsp_types::request::RegisterCapability>(\n+                    lsp_types::RegistrationParams { registrations: vec![registration] },\n+                    |_, _| (),\n+                );\n+            }\n         }\n \n         let mut change = Change::new();"}]}