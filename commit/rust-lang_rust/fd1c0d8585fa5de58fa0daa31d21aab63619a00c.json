{"sha": "fd1c0d8585fa5de58fa0daa31d21aab63619a00c", "node_id": "C_kwDOAAsO6NoAKGZkMWMwZDg1ODVmYTVkZTU4ZmEwZGFhMzFkMjFhYWI2MzYxOWEwMGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-31T09:19:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-31T09:19:07Z"}, "message": "Rollup merge of #111772 - liushuyu:ubuntu/mips64-linkage, r=jackh726\n\nFix linkage for large binaries on mips64 platforms\n\nThis pull request fixes the linkage for large binaries on mips64 platforms by enabling the `xgot` feature in LLVM.\n\nIt is well understood that the generated binary will gain a hefty performance penalty where the external symbol jumps now cost at least three instructions each.\n\nAlso, this pull request does not address the same issue on the mips32 counterparts (due to being unable to test the changes thoroughly).\n\nShould fix #52108", "tree": {"sha": "69b4304be113efab3b4a4f4343f34b858ff90a21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69b4304be113efab3b4a4f4343f34b858ff90a21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd1c0d8585fa5de58fa0daa31d21aab63619a00c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkdxELCRBK7hj4Ov3rIwAA0SsIAAJRxecSWBEVORRMc4KgberS\nECLBep126pJpy5EYmP677fRvTikueNdew/Q6VxPbngW8BrIsG0QnQmpPOZJOJa3u\nezlLevDeGuPge3hw4rclzDBhpgr7+c8mWvqAeqyz9S+uxRE2LaMU2Ud6dXSHphlG\np4RuYrtHTfLjcsATFd8gBecjw0XMGzNLluZrjojA+6Jhi3YvY+HzYAYqjN7z/9sg\nHvw2oiv9d3RNpW+fQHfLno7QipATMovQ3l5GZMU75bHtEVwQ0CAyEj+0gUAcfQ1x\nKfQ1LnVqWjQsGFJj1TfL7VUExaVxLwP0IimtZ80teryvMhlFjsKPwHkOsSmZCJU=\n=HwLl\n-----END PGP SIGNATURE-----\n", "payload": "tree 69b4304be113efab3b4a4f4343f34b858ff90a21\nparent 617d3d6d722c432cdcbf210e6db55c3bdeafe381\nparent b65c2afdfd9aaee977302516c9ef177861abfe74\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685524747 +0200\ncommitter GitHub <noreply@github.com> 1685524747 +0200\n\nRollup merge of #111772 - liushuyu:ubuntu/mips64-linkage, r=jackh726\n\nFix linkage for large binaries on mips64 platforms\n\nThis pull request fixes the linkage for large binaries on mips64 platforms by enabling the `xgot` feature in LLVM.\n\nIt is well understood that the generated binary will gain a hefty performance penalty where the external symbol jumps now cost at least three instructions each.\n\nAlso, this pull request does not address the same issue on the mips32 counterparts (due to being unable to test the changes thoroughly).\n\nShould fix #52108\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1c0d8585fa5de58fa0daa31d21aab63619a00c", "html_url": "https://github.com/rust-lang/rust/commit/fd1c0d8585fa5de58fa0daa31d21aab63619a00c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd1c0d8585fa5de58fa0daa31d21aab63619a00c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "617d3d6d722c432cdcbf210e6db55c3bdeafe381", "url": "https://api.github.com/repos/rust-lang/rust/commits/617d3d6d722c432cdcbf210e6db55c3bdeafe381", "html_url": "https://github.com/rust-lang/rust/commit/617d3d6d722c432cdcbf210e6db55c3bdeafe381"}, {"sha": "b65c2afdfd9aaee977302516c9ef177861abfe74", "url": "https://api.github.com/repos/rust-lang/rust/commits/b65c2afdfd9aaee977302516c9ef177861abfe74", "html_url": "https://github.com/rust-lang/rust/commit/b65c2afdfd9aaee977302516c9ef177861abfe74"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "b9df0046b12bafb9c3d07306ac701789f836123e", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd1c0d8585fa5de58fa0daa31d21aab63619a00c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1c0d8585fa5de58fa0daa31d21aab63619a00c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs?ref=fd1c0d8585fa5de58fa0daa31d21aab63619a00c", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n             endian: Endian::Big,\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".into(),\n-            features: \"+mips64r2\".into(),\n+            features: \"+mips64r2,+xgot\".into(),\n             max_atomic_width: Some(64),\n             mcount: \"_mcount\".into(),\n "}, {"sha": "57ad8c47399b3cacef97d7c4fffdfe4ece82f936", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd1c0d8585fa5de58fa0daa31d21aab63619a00c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1c0d8585fa5de58fa0daa31d21aab63619a00c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs?ref=fd1c0d8585fa5de58fa0daa31d21aab63619a00c", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n             abi: \"abi64\".into(),\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".into(),\n-            features: \"+mips64r2\".into(),\n+            features: \"+mips64r2,+xgot\".into(),\n             max_atomic_width: Some(64),\n             mcount: \"_mcount\".into(),\n "}, {"sha": "de484f3a571a13aec1c1d1d50134e7895cf5a52d", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd1c0d8585fa5de58fa0daa31d21aab63619a00c/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/fd1c0d8585fa5de58fa0daa31d21aab63619a00c/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=fd1c0d8585fa5de58fa0daa31d21aab63619a00c", "patch": "@@ -877,6 +877,12 @@ def build_bootstrap(self, color, verbose_count):\n \n         # preserve existing RUSTFLAGS\n         env.setdefault(\"RUSTFLAGS\", \"\")\n+        # we need to explicitly add +xgot here so that we can successfully bootstrap\n+        # a usable stage1 compiler\n+        # FIXME: remove this if condition on the next bootstrap bump\n+        # cfg(bootstrap)\n+        if self.build_triple().startswith('mips'):\n+            env[\"RUSTFLAGS\"] += \" -Ctarget-feature=+xgot\"\n         target_features = []\n         if self.get_toml(\"crt-static\", build_section) == \"true\":\n             target_features += [\"+crt-static\"]"}, {"sha": "27469b22980ab45b124c4fea66f7f0a8538aff3b", "filename": "tests/assembly/asm/mips-types.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd1c0d8585fa5de58fa0daa31d21aab63619a00c/tests%2Fassembly%2Fasm%2Fmips-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1c0d8585fa5de58fa0daa31d21aab63619a00c/tests%2Fassembly%2Fasm%2Fmips-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fasm%2Fmips-types.rs?ref=fd1c0d8585fa5de58fa0daa31d21aab63619a00c", "patch": "@@ -72,7 +72,7 @@ macro_rules! check_reg { ($func:ident, $ty:ty, $reg:tt, $mov:literal) => {\n \n // mips32-LABEL: sym_static_32:\n // mips32: #APP\n-// mips32: lw $3, %got(extern_static)\n+// mips32: lw $3, %got(extern_static)($gp)\n // mips32: #NO_APP\n #[cfg(mips32)]\n #[no_mangle]\n@@ -82,7 +82,7 @@ pub unsafe fn sym_static_32() {\n \n // mips32-LABEL: sym_fn_32:\n // mips32: #APP\n-// mips32: lw $3, %got(extern_func)\n+// mips32: lw $3, %got(extern_func)($gp)\n // mips32: #NO_APP\n #[cfg(mips32)]\n #[no_mangle]\n@@ -92,7 +92,9 @@ pub unsafe fn sym_fn_32() {\n \n // mips64-LABEL: sym_static_64:\n // mips64: #APP\n-// mips64: ld $3, %got_disp(extern_static)\n+// mips64: lui    $3, %got_hi(extern_static)\n+// mips64: daddu  $3, $3, $gp\n+// mips64: ld     $3, %got_lo(extern_static)($3)\n // mips64: #NO_APP\n #[cfg(mips64)]\n #[no_mangle]\n@@ -102,7 +104,9 @@ pub unsafe fn sym_static_64() {\n \n // mips64-LABEL: sym_fn_64:\n // mips64: #APP\n-// mips64: ld $3, %got_disp(extern_func)\n+// mips64: lui    $3, %got_hi(extern_func)\n+// mips64: daddu  $3, $3, $gp\n+// mips64: ld     $3, %got_lo(extern_func)($3)\n // mips64: #NO_APP\n #[cfg(mips64)]\n #[no_mangle]"}]}