{"sha": "98c34b725f6d154092e408a067f41663148b1ee1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YzM0YjcyNWY2ZDE1NDA5MmU0MDhhMDY3ZjQxNjYzMTQ4YjFlZTE=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-03-16T00:35:59Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-03-16T00:35:59Z"}, "message": "ra_ide: refactor readonly String -> &str", "tree": {"sha": "1b587cd9ce217fd190c0fe4b1a560bd905183f32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b587cd9ce217fd190c0fe4b1a560bd905183f32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c34b725f6d154092e408a067f41663148b1ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c34b725f6d154092e408a067f41663148b1ee1", "html_url": "https://github.com/rust-lang/rust/commit/98c34b725f6d154092e408a067f41663148b1ee1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c34b725f6d154092e408a067f41663148b1ee1/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fd07a02a2bcbb8ff97df6d24112ee6204be362a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd07a02a2bcbb8ff97df6d24112ee6204be362a", "html_url": "https://github.com/rust-lang/rust/commit/4fd07a02a2bcbb8ff97df6d24112ee6204be362a"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "c395057a794a3ef4065664b6e1dcd32fe2613f10", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/98c34b725f6d154092e408a067f41663148b1ee1/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c34b725f6d154092e408a067f41663148b1ee1/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=98c34b725f6d154092e408a067f41663148b1ee1", "patch": "@@ -6,6 +6,8 @@ mod navigation_target;\n mod structure;\n mod short_label;\n \n+use std::fmt::{Display, Write};\n+\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner, NameOwner, TypeParamsOwner},\n     SyntaxKind::{ATTR, COMMENT},\n@@ -67,24 +69,27 @@ pub(crate) fn macro_label(node: &ast::MacroCall) -> String {\n     format!(\"{}macro_rules! {}\", vis, name)\n }\n \n-pub(crate) fn rust_code_markup<CODE: AsRef<str>>(val: CODE) -> String {\n-    rust_code_markup_with_doc::<_, &str>(val, None, None)\n+pub(crate) fn rust_code_markup(code: &impl Display) -> String {\n+    rust_code_markup_with_doc(code, None, None)\n }\n \n-pub(crate) fn rust_code_markup_with_doc<CODE, DOC>(\n-    val: CODE,\n-    doc: Option<DOC>,\n-    mod_path: Option<String>,\n-) -> String\n-where\n-    CODE: AsRef<str>,\n-    DOC: AsRef<str>,\n-{\n-    let mod_path =\n-        mod_path.filter(|path| !path.is_empty()).map(|path| path + \"\\n\").unwrap_or_default();\n+pub(crate) fn rust_code_markup_with_doc(\n+    code: &impl Display,\n+    doc: Option<&str>,\n+    mod_path: Option<&str>,\n+) -> String {\n+    let mut markup = \"```rust\\n\".to_owned();\n+\n+    if let Some(mod_path) = mod_path {\n+        if !mod_path.is_empty() {\n+            write!(markup, \"{}\\n\", mod_path).unwrap();\n+        }\n+    }\n+    write!(markup, \"{}\\n```\", code).unwrap();\n+\n     if let Some(doc) = doc {\n-        format!(\"```rust\\n{}{}\\n```\\n\\n{}\", mod_path, val.as_ref(), doc.as_ref())\n-    } else {\n-        format!(\"```rust\\n{}{}\\n```\", mod_path, val.as_ref())\n+        write!(markup, \"\\n\\n{}\", doc).unwrap();\n     }\n+\n+    markup\n }"}, {"sha": "3bdd61a2e3a9999e5e1619c5565b24b87b1e07b4", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98c34b725f6d154092e408a067f41663148b1ee1/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c34b725f6d154092e408a067f41663148b1ee1/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=98c34b725f6d154092e408a067f41663148b1ee1", "patch": "@@ -67,10 +67,10 @@ fn hover_text(\n     desc: Option<String>,\n     mod_path: Option<String>,\n ) -> Option<String> {\n-    match (desc, docs, mod_path) {\n-        (Some(desc), docs, mod_path) => Some(rust_code_markup_with_doc(desc, docs, mod_path)),\n-        (None, Some(docs), _) => Some(docs),\n-        _ => None,\n+    if let Some(desc) = desc {\n+        Some(rust_code_markup_with_doc(&desc, docs.as_deref(), mod_path.as_deref()))\n+    } else {\n+        docs\n     }\n }\n \n@@ -106,7 +106,7 @@ fn determine_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n             .flatten()\n             .join(\"::\")\n     });\n-    mod_path\n+    mod_path // FIXME: replace dashes with underscores in crate display name\n }\n \n fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<String> {\n@@ -143,9 +143,7 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n             ModuleDef::TypeAlias(it) => from_def_source(db, it, mod_path),\n             ModuleDef::BuiltinType(it) => Some(it.to_string()),\n         },\n-        Definition::Local(it) => {\n-            Some(rust_code_markup(it.ty(db).display_truncated(db, None).to_string()))\n-        }\n+        Definition::Local(it) => Some(rust_code_markup(&it.ty(db).display_truncated(db, None))),\n         Definition::TypeParam(_) | Definition::SelfType(_) => {\n             // FIXME: Hover for generic param\n             None\n@@ -210,7 +208,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         }\n     }?;\n \n-    res.extend(Some(rust_code_markup(ty.display_truncated(db, None).to_string())));\n+    res.extend(Some(rust_code_markup(&ty.display_truncated(db, None))));\n     let range = sema.original_range(&node).range;\n     Some(RangeInfo::new(range, res))\n }"}]}