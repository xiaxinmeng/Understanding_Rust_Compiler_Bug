{"sha": "e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOGMyNzllYWNmZDM3Yjg5MjEzNzhjOGJkNGVmOGI4ZGM5YmQxNzY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-29T17:37:32Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-29T18:59:09Z"}, "message": "Rename `syntax` to `rustc_ast` in source code", "tree": {"sha": "a0aba27f258d4c1cc2e9692e4e653f558c819784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0aba27f258d4c1cc2e9692e4e653f558c819784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "html_url": "https://github.com/rust-lang/rust/commit/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6054a30370209472f2af45d2a84a9a9796b3c64a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6054a30370209472f2af45d2a84a9a9796b3c64a", "html_url": "https://github.com/rust-lang/rust/commit/6054a30370209472f2af45d2a84a9a9796b3c64a"}], "stats": {"total": 1287, "additions": 650, "deletions": 637}, "files": [{"sha": "47ac986c224a9faad9fee465fcca309fb605cc72", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -42,7 +42,7 @@ that warns about any item named `lintme`.\n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n \n-extern crate syntax;\n+extern crate rustc_ast;\n \n // Load rustc as a plugin to get macros\n #[macro_use]\n@@ -52,7 +52,7 @@ extern crate rustc_driver;\n use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n                   EarlyLintPassObject, LintArray};\n use rustc_driver::plugin::Registry;\n-use syntax::ast;\n+use rustc_ast::ast;\n \n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n "}, {"sha": "bac2540ab450a8c19aa27c86eaea121292a97d62", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -28,7 +28,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n backtrace = \"0.3.40\"\n parking_lot = \"0.9\""}, {"sha": "0384a9f781578c77e892591939479136b0725f61", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -131,7 +131,7 @@ macro_rules! arena_types {\n             // HIR types\n             [few] hir_krate: rustc_hir::Crate<$tcx>,\n             [] arm: rustc_hir::Arm<$tcx>,\n-            [] attribute: syntax::ast::Attribute,\n+            [] attribute: rustc_ast::ast::Attribute,\n             [] block: rustc_hir::Block<$tcx>,\n             [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n             [few] global_asm: rustc_hir::GlobalAsm,"}, {"sha": "74e32867cdec166ca93623cb9f673fa4e281a04f", "filename": "src/librustc/dep_graph/safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fsafe.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,9 +2,9 @@\n \n use crate::ty::TyCtxt;\n \n+use rustc_ast::ast::NodeId;\n use rustc_hir::def_id::DefId;\n use rustc_hir::BodyId;\n-use syntax::ast::NodeId;\n \n /// The `DepGraphSafe` trait is used to specify what kinds of values\n /// are safe to \"leak\" into a task. The idea is that this should be"}, {"sha": "4c144a54d6345ef9c9b7c3d07134ef71192ade8b", "filename": "src/librustc/hir/exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fhir%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fhir%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fexports.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n use crate::ty;\n \n+use rustc_ast::ast;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::DefIdMap;\n use rustc_macros::HashStable;\n use rustc_span::Span;\n-use syntax::ast;\n \n use std::fmt::Debug;\n "}, {"sha": "618f9a018d1e7ac2a0cf1bac9e43e83e9bd99a7f", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -12,11 +12,11 @@\n //! for the `Code` associated with a particular NodeId.\n \n use crate::hir::map::Map;\n+use rustc_ast::ast::{Attribute, Ident};\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Expr, FnDecl, Node};\n use rustc_span::Span;\n-use syntax::ast::{Attribute, Ident};\n \n /// An FnLikeNode is a Node that is like a fn, in that it has a decl\n /// and a body (as well as a NodeId, a span, etc)."}, {"sha": "ebd335ab35504ee919c37916977b8a44e00ea036", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,6 +3,7 @@ use crate::hir::map::definitions::{self, DefPathHash};\n use crate::hir::map::{Entry, HirEntryMap, Map};\n use crate::ich::StableHashingContext;\n use crate::middle::cstore::CrateStore;\n+use rustc_ast::ast::NodeId;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -16,7 +17,6 @@ use rustc_index::vec::IndexVec;\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::SourceMap;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n-use syntax::ast::NodeId;\n \n use std::iter::repeat;\n "}, {"sha": "047ce8b8445fd5c24cc53f669bf62d80688a477c", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,6 +4,8 @@\n //! There are also some rather random cases (like const initializer\n //! expressions) that are mostly just leftovers.\n \n+use rustc_ast::ast;\n+use rustc_ast::node_id::NodeMap;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -14,8 +16,6 @@ use rustc_session::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast;\n-use syntax::node_id::NodeMap;\n \n use std::borrow::Borrow;\n use std::fmt::Write;"}, {"sha": "b208826560512dfc6dddec82357138e2c3b82f78", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -6,6 +6,7 @@ pub use self::definitions::{\n use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n use crate::middle::cstore::CrateStoreDyn;\n use crate::ty::query::Providers;\n+use rustc_ast::ast::{self, Name, NodeId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n@@ -20,7 +21,6 @@ use rustc_span::source_map::Spanned;\n use rustc_span::symbol::kw;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n-use syntax::ast::{self, Name, NodeId};\n \n pub mod blocks;\n mod collector;"}, {"sha": "d421da6d7521c98551e2ce752b7cdabb1f5c8174", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -5,6 +5,7 @@ use crate::middle::cstore::CrateStore;\n use crate::session::Session;\n use crate::ty::{fast_reject, TyCtxt};\n \n+use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_data_structures::sync::Lrc;\n@@ -13,7 +14,6 @@ use rustc_hir::def_id::{DefId, DefIndex};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n use rustc_span::{BytePos, SourceFile};\n-use syntax::ast;\n \n use smallvec::SmallVec;\n use std::cmp::Ord;"}, {"sha": "daff8a0f1825ed14df420c1d75abca2a77950778", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,10 +3,10 @@\n \n use crate::ich::StableHashingContext;\n \n+use rustc_ast::ast;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_span::SourceFile;\n-use syntax::ast;\n \n use smallvec::SmallVec;\n \n@@ -35,7 +35,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for [ast::Attribute] {\n     }\n }\n \n-impl<'ctx> syntax::HashStableContext for StableHashingContext<'ctx> {\n+impl<'ctx> rustc_ast::HashStableContext for StableHashingContext<'ctx> {\n     fn hash_attr(&mut self, attr: &ast::Attribute, hasher: &mut StableHasher) {\n         // Make sure that these have been filtered out.\n         debug_assert!(!attr.ident().map_or(false, |ident| self.is_ignored_attr(ident.name)));"}, {"sha": "624bd9340987d35c928d31bd48983ff785f8b1cb", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -8,6 +8,8 @@ use crate::session::search_paths::PathKind;\n use crate::session::CrateDisambiguator;\n use crate::ty::TyCtxt;\n \n+use rustc_ast::ast;\n+use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -17,8 +19,6 @@ use rustc_span::Span;\n use rustc_target::spec::Target;\n use std::any::Any;\n use std::path::{Path, PathBuf};\n-use syntax::ast;\n-use syntax::expand::allocator::AllocatorKind;\n \n pub use self::NativeLibraryKind::*;\n pub use rustc_session::utils::NativeLibraryKind;"}, {"sha": "ae31a2cc63da671b671d910db48a19dd3e268aa7", "filename": "src/librustc/middle/recursion_limit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -8,8 +8,8 @@\n use crate::session::Session;\n use core::num::IntErrorKind;\n use rustc::bug;\n+use rustc_ast::ast;\n use rustc_span::symbol::{sym, Symbol};\n-use syntax::ast;\n \n use rustc_data_structures::sync::Once;\n "}, {"sha": "9d3df9623bd62e5e93c662f0452f378ca6f93627", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -5,6 +5,7 @@ pub use self::StabilityLevel::*;\n \n use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::{self, TyCtxt};\n+use rustc_ast::ast::CRATE_NODE_ID;\n use rustc_attr::{self as attr, ConstStability, Deprecation, RustcDeprecation, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n@@ -18,7 +19,6 @@ use rustc_session::lint::{BuiltinLintDiagnostics, Lint, LintBuffer};\n use rustc_session::parse::feature_err_issue;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n-use syntax::ast::CRATE_NODE_ID;\n \n use std::num::NonZeroU32;\n "}, {"sha": "d3efe62e8c15346c6eebd97ff14ca681ff0fb4f0", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -6,12 +6,12 @@ use super::{\n \n use crate::ty::layout::{Align, Size};\n \n+use rustc_ast::ast::Mutability;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_target::abi::HasDataLayout;\n use std::borrow::Cow;\n use std::iter;\n use std::ops::{Deref, DerefMut, Range};\n-use syntax::ast::Mutability;\n \n // NOTE: When adding new fields, make sure to adjust the `Snapshot` impl in\n // `src/librustc_mir/interpret/snapshot.rs`."}, {"sha": "64c07b431db388a4c4665769084b57c9b46cf653", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -107,6 +107,7 @@ use crate::ty::layout::{self, Size};\n use crate::ty::subst::GenericArgKind;\n use crate::ty::{self, Instance, Ty, TyCtxt};\n use byteorder::{BigEndian, LittleEndian, ReadBytesExt, WriteBytesExt};\n+use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock};\n use rustc_data_structures::tiny_list::TinyList;\n@@ -117,7 +118,6 @@ use std::fmt;\n use std::io;\n use std::num::NonZeroU32;\n use std::sync::atomic::{AtomicU32, Ordering};\n-use syntax::ast::LitKind;\n \n /// Uniquely identifies one of the following:\n /// - A constant"}, {"sha": "668240ab42b4cca11f26730f9b33f73e6421ca5e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -18,6 +18,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{self, GeneratorKind};\n \n use polonius_engine::Atom;\n+pub use rustc_ast::ast::Mutability;\n+use rustc_ast::ast::Name;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_data_structures::graph::{self, GraphSuccessors};\n@@ -32,8 +34,6 @@ use std::fmt::{self, Debug, Display, Formatter, Write};\n use std::ops::Index;\n use std::slice;\n use std::{iter, mem, option, u32};\n-pub use syntax::ast::Mutability;\n-use syntax::ast::Name;\n \n pub use self::cache::{BodyAndCache, ReadOnlyBodyAndCache};\n pub use self::query::*;"}, {"sha": "1a4ea66a5f1d979cb8ab0493b076fa0c2a841f5f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -13,11 +13,11 @@ use crate::ty::fold::{TypeFolder, TypeVisitor};\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, AdtKind, List, Ty, TyCtxt};\n \n+use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n-use syntax::ast;\n \n use std::borrow::Cow;\n use std::fmt::Debug;"}, {"sha": "d481e578fc1ddacd62e8d0e9acdd6fbd0e08771d", "filename": "src/librustc/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialization_graph.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n use crate::ich::{self, StableHashingContext};\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::{self, TyCtxt};\n+use rustc_ast::ast::Ident;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{DefId, DefIdMap};\n-use syntax::ast::Ident;\n \n /// A per-trait graph of impls in specialization order. At the moment, this\n /// graph forms a tree rooted with the trait itself, with all other nodes"}, {"sha": "31c106cb230b43624466384068b65aebbd1c8480", "filename": "src/librustc/ty/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcast.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,8 +3,8 @@\n \n use crate::ty::{self, Ty};\n \n+use rustc_ast::ast;\n use rustc_macros::HashStable;\n-use syntax::ast;\n \n /// Types that are represented as ints.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]"}, {"sha": "d2108517a0668c5b43d2b05e53c3a63e05f331ab", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -42,6 +42,9 @@ use crate::ty::{InferConst, ParamConst};\n use crate::ty::{List, TyKind, TyS};\n use crate::util::common::ErrorReported;\n use rustc::lint::LintDiagnosticBuilder;\n+use rustc_ast::ast;\n+use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_ast::node_id::NodeMap;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n@@ -65,9 +68,6 @@ use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n-use syntax::ast;\n-use syntax::expand::allocator::AllocatorKind;\n-use syntax::node_id::NodeMap;\n \n use smallvec::SmallVec;\n use std::any::Any;"}, {"sha": "d0bc0d5fabfae5b83e0fac3990aa3314cb921d94", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n use crate::ty::{self, BoundRegion, Region, Ty, TyCtxt};\n+use rustc_ast::ast;\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n use rustc_target::spec::abi;\n-use syntax::ast;\n \n use std::borrow::Cow;\n use std::fmt;"}, {"sha": "2a937d6581d6a3da9f79f5976917dfb21eff0f67", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,11 +1,11 @@\n use crate::ich::StableHashingContext;\n use crate::ty::{self, Ty, TyCtxt};\n+use rustc_ast::ast;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::DefId;\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::mem;\n-use syntax::ast;\n \n use self::SimplifiedTypeGen::*;\n "}, {"sha": "a8266f405cb8ebfeedc48e4a96075518945fda93", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,9 +1,9 @@\n use crate::session::{self, DataTypeKind};\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n \n+use rustc_ast::ast::{self, Ident, IntTy, UintTy};\n use rustc_attr as attr;\n use rustc_span::DUMMY_SP;\n-use syntax::ast::{self, Ident, IntTy, UintTy};\n \n use std::cmp;\n use std::fmt;"}, {"sha": "89ff0b2a0ccbc1984d1480369d89f20049fc6368", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -26,6 +26,8 @@ use crate::ty::layout::VariantIdx;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::{Discr, IntTypeExt};\n use crate::ty::walk::TypeWalker;\n+use rustc_ast::ast::{self, Ident, Name};\n+use rustc_ast::node_id::{NodeId, NodeMap, NodeSet};\n use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n@@ -44,8 +46,6 @@ use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Align;\n-use syntax::ast::{self, Ident, Name};\n-use syntax::node_id::{NodeId, NodeMap, NodeSet};\n \n use std::cell::RefCell;\n use std::cmp::{self, Ordering};"}, {"sha": "3bf92552c862449c053772371ea4d4724dd8868c", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -11,10 +11,10 @@ use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n \n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n+use rustc_ast::ast;\n use rustc_attr::{SignedInt, UnsignedInt};\n use rustc_span::symbol::{kw, Symbol};\n use rustc_target::spec::abi::Abi;\n-use syntax::ast;\n \n use std::cell::Cell;\n use std::collections::BTreeMap;"}, {"sha": "4e88fc54637946dcbba641fcec80c84e73498a75", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -535,11 +535,11 @@ pub unsafe fn handle_deadlock() {\n     let rustc_span_globals =\n         rustc_span::GLOBALS.with(|rustc_span_globals| rustc_span_globals as *const _);\n     let rustc_span_globals = &*rustc_span_globals;\n-    let syntax_globals = syntax::attr::GLOBALS.with(|syntax_globals| syntax_globals as *const _);\n+    let syntax_globals = rustc_ast::attr::GLOBALS.with(|syntax_globals| syntax_globals as *const _);\n     let syntax_globals = &*syntax_globals;\n     thread::spawn(move || {\n         tls::GCX_PTR.set(gcx_ptr, || {\n-            syntax::attr::GLOBALS.set(syntax_globals, || {\n+            rustc_ast::attr::GLOBALS.set(syntax_globals, || {\n                 rustc_span::GLOBALS\n                     .set(rustc_span_globals, || tls::with_global(|tcx| deadlock(tcx, &registry)))\n             });"}, {"sha": "8614fd5cdca9a8715966a5c7c69e443978982b70", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -49,14 +49,14 @@ use rustc_hir::{Crate, HirIdSet, ItemLocalId, TraitCandidate};\n use rustc_index::vec::IndexVec;\n use rustc_target::spec::PanicStrategy;\n \n+use rustc_ast::ast;\n use rustc_attr as attr;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::convert::TryFrom;\n use std::ops::Deref;\n use std::sync::Arc;\n-use syntax::ast;\n \n #[macro_use]\n mod plumbing;"}, {"sha": "109ac97fe62651c33ded7e6fa426dab945e20713", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -7,6 +7,7 @@ use crate::session::{CrateDisambiguator, Session};\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, Ty};\n+use rustc_ast::ast::Ident;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, Once};\n use rustc_data_structures::thin_vec::ThinVec;\n@@ -22,7 +23,6 @@ use rustc_span::hygiene::{ExpnId, SyntaxContext};\n use rustc_span::source_map::{SourceMap, StableSourceFileId};\n use rustc_span::{BytePos, SourceFile, Span, DUMMY_SP};\n use std::mem;\n-use syntax::ast::Ident;\n \n const TAG_FILE_FOOTER: u128 = 0xC0FFEE_C0FFEE_C0FFEE_C0FFEE_C0FFEE;\n "}, {"sha": "e2fa03139110ce60b914c91b52b719371a2d3339", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -260,8 +260,8 @@ CloneTypeFoldableAndLiftImpls! {\n     u64,\n     String,\n     crate::middle::region::Scope,\n-    ::syntax::ast::FloatTy,\n-    ::syntax::ast::NodeId,\n+    ::rustc_ast::ast::FloatTy,\n+    ::rustc_ast::ast::NodeId,\n     ::rustc_span::symbol::Symbol,\n     ::rustc_hir::def::Res,\n     ::rustc_hir::def_id::DefId,"}, {"sha": "fcf23b9023b28a1f17cea93d4a1c32851e2d8a92", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -17,6 +17,7 @@ use crate::ty::{\n };\n use crate::ty::{List, ParamEnv, ParamEnvAnd, TyS};\n use polonius_engine::Atom;\n+use rustc_ast::ast::{self, Ident};\n use rustc_data_structures::captures::Captures;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -29,7 +30,6 @@ use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::marker::PhantomData;\n use std::ops::Range;\n-use syntax::ast::{self, Ident};\n \n #[derive(\n     Clone,"}, {"sha": "7b1f821877baa46eaf8597459b58b42c82a1d35d", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -10,6 +10,7 @@ use crate::ty::TyKind::*;\n use crate::ty::{self, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable};\n use crate::util::common::ErrorReported;\n use rustc_apfloat::Float as _;\n+use rustc_ast::ast;\n use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -21,7 +22,6 @@ use rustc_span::Span;\n use rustc_target::abi::TargetDataLayout;\n use smallvec::SmallVec;\n use std::{cmp, fmt};\n-use syntax::ast;\n \n #[derive(Copy, Clone, Debug)]\n pub struct Discr<'tcx> {"}, {"sha": "23dc80facae1d0bba5cee248a620500ccc4e8ac3", "filename": "src/librustc_ast_lowering/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -20,5 +20,5 @@ rustc_index = { path = \"../librustc_index\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_session = { path = \"../librustc_session\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "6708ffabaf93e146c9045fa99e5bf76f7c3d8db0", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,15 +1,15 @@\n use super::{ImplTraitContext, LoweringContext, ParamMode, ParenthesizedGenericArgs};\n \n use rustc::bug;\n+use rustc_ast::ast::*;\n+use rustc_ast::attr;\n+use rustc_ast::ptr::P as AstP;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n use rustc_span::symbol::{sym, Symbol};\n-use syntax::ast::*;\n-use syntax::attr;\n-use syntax::ptr::P as AstP;\n \n impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_exprs(&mut self, exprs: &[AstP<Expr>]) -> &'hir [hir::Expr<'hir>] {\n@@ -783,7 +783,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         e2: Option<&Expr>,\n         lims: RangeLimits,\n     ) -> hir::ExprKind<'hir> {\n-        use syntax::ast::RangeLimits::*;\n+        use rustc_ast::ast::RangeLimits::*;\n \n         let path = match (e1, e2, lims) {\n             (None, None, HalfOpen) => sym::RangeFull,"}, {"sha": "13148d97a67f30473a081a9a99aad240081b591e", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,6 +3,10 @@ use super::{ImplTraitContext, ImplTraitPosition, ImplTraitTypeIdVisitor};\n \n use rustc::arena::Arena;\n use rustc::bug;\n+use rustc_ast::ast::*;\n+use rustc_ast::attr;\n+use rustc_ast::node_id::NodeMap;\n+use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -11,10 +15,6 @@ use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n-use syntax::ast::*;\n-use syntax::attr;\n-use syntax::node_id::NodeMap;\n-use syntax::visit::{self, AssocCtxt, Visitor};\n \n use log::debug;\n use smallvec::{smallvec, SmallVec};"}, {"sha": "0f7ed9f72f8f61a95dd8785efad3d2fcc5e80efd", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -39,6 +39,14 @@ use rustc::dep_graph::DepGraph;\n use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n use rustc::hir::map::Map;\n use rustc::{bug, span_bug};\n+use rustc_ast::ast;\n+use rustc_ast::ast::*;\n+use rustc_ast::attr;\n+use rustc_ast::node_id::NodeMap;\n+use rustc_ast::token::{self, Nonterminal, Token};\n+use rustc_ast::tokenstream::{TokenStream, TokenTree};\n+use rustc_ast::visit::{self, AssocCtxt, Visitor};\n+use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n@@ -58,14 +66,6 @@ use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind, ExpnData, ExpnKind};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast;\n-use syntax::ast::*;\n-use syntax::attr;\n-use syntax::node_id::NodeMap;\n-use syntax::token::{self, Nonterminal, Token};\n-use syntax::tokenstream::{TokenStream, TokenTree};\n-use syntax::visit::{self, AssocCtxt, Visitor};\n-use syntax::walk_list;\n \n use log::{debug, trace};\n use smallvec::{smallvec, SmallVec};"}, {"sha": "d6f4ba1529be640a470b09b9cb914ac24f513234", "filename": "src/librustc_ast_lowering/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpat.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n use super::{ImplTraitContext, LoweringContext, ParamMode};\n \n+use rustc_ast::ast::*;\n+use rustc_ast::ptr::P;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_span::{source_map::Spanned, Span};\n-use syntax::ast::*;\n-use syntax::ptr::P;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     crate fn lower_pat(&mut self, p: &Pat) -> &'hir hir::Pat<'hir> {"}, {"sha": "80d7e3d0d465a11c47e8abd667df6046a44b42b2", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,14 +3,14 @@ use super::{GenericArgsCtor, ParenthesizedGenericArgs};\n \n use rustc::lint::builtin::ELIDED_LIFETIMES_IN_PATHS;\n use rustc::span_bug;\n+use rustc_ast::ast::{self, *};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, PartialRes, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::Span;\n-use syntax::ast::{self, *};\n \n use log::debug;\n use smallvec::smallvec;"}, {"sha": "5d096e4965ddc7b4664d7570779b2d59c7cab00b", "filename": "src/librustc_ast_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -18,4 +18,4 @@ rustc_feature = { path = \"../librustc_feature\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "9f04c01bfa8f4781ebd143ace6ff17a6a639ac1a", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -6,6 +6,11 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n+use rustc_ast::ast::*;\n+use rustc_ast::attr;\n+use rustc_ast::expand::is_proc_macro_attr;\n+use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n+use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{error_code, struct_span_err, Applicability};\n@@ -16,11 +21,6 @@ use rustc_session::Session;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use std::mem;\n-use syntax::ast::*;\n-use syntax::attr;\n-use syntax::expand::is_proc_macro_attr;\n-use syntax::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n-use syntax::walk_list;\n \n const MORE_EXTERN: &str =\n     \"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\";"}, {"sha": "05e69d0cfd74e1b7548b8bc01dde71fb07b7a551", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,14 +1,14 @@\n+use rustc_ast::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n+use rustc_ast::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n+use rustc_ast::attr;\n+use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_errors::{struct_span_err, Handler};\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Features, GateIssue, UnstableFeatures};\n use rustc_session::parse::{feature_err, feature_err_issue, ParseSess};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n-use syntax::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n-use syntax::attr;\n-use syntax::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n \n use log::debug;\n "}, {"sha": "16bcec8360e3421ed7551faaf950043675c82ae0", "filename": "src/librustc_ast_passes/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_passes%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_passes%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fnode_count.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,8 +1,8 @@\n // Simply gives a rought count of the number of nodes in an AST.\n \n+use rustc_ast::ast::*;\n+use rustc_ast::visit::*;\n use rustc_span::Span;\n-use syntax::ast::*;\n-use syntax::visit::*;\n \n pub struct NodeCounter {\n     pub count: usize,"}, {"sha": "73a66ba566bc6a20a3584b6f53deef6da466c3da", "filename": "src/librustc_ast_passes/show_span.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_passes%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_passes%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fshow_span.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -5,9 +5,9 @@\n \n use std::str::FromStr;\n \n-use syntax::ast;\n-use syntax::visit;\n-use syntax::visit::Visitor;\n+use rustc_ast::ast;\n+use rustc_ast::visit;\n+use rustc_ast::visit::Visitor;\n \n enum Mode {\n     Expression,"}, {"sha": "82be095db88050ef4ead29582c972831902127d2", "filename": "src/librustc_ast_pretty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_pretty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_pretty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -13,4 +13,4 @@ doctest = false\n log = \"0.4\"\n rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "ea8535eabef3f2cccbbb3f373889f95a974b243d", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,19 +1,19 @@\n use crate::pp::Breaks::{Consistent, Inconsistent};\n use crate::pp::{self, Breaks};\n \n+use rustc_ast::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n+use rustc_ast::ast::{Attribute, GenericArg, MacArgs};\n+use rustc_ast::ast::{GenericBound, SelfKind, TraitBoundModifier};\n+use rustc_ast::attr;\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::{self, BinOpToken, DelimToken, Nonterminal, Token, TokenKind};\n+use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n+use rustc_ast::util::parser::{self, AssocOp, Fixity};\n+use rustc_ast::util::{classify, comments};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, IdentPrinter};\n use rustc_span::{BytePos, FileName, Span};\n-use syntax::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n-use syntax::ast::{Attribute, GenericArg, MacArgs};\n-use syntax::ast::{GenericBound, SelfKind, TraitBoundModifier};\n-use syntax::attr;\n-use syntax::ptr::P;\n-use syntax::token::{self, BinOpToken, DelimToken, Nonterminal, Token, TokenKind};\n-use syntax::tokenstream::{self, TokenStream, TokenTree};\n-use syntax::util::parser::{self, AssocOp, Fixity};\n-use syntax::util::{classify, comments};\n \n use std::borrow::Cow;\n "}, {"sha": "455f2e3da3680285774ad4e6288faf6aaa9417e5", "filename": "src/librustc_ast_pretty/pprust/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,9 +1,9 @@\n use super::*;\n \n+use rustc_ast::ast;\n+use rustc_ast::with_default_globals;\n use rustc_span;\n use rustc_span::source_map::respan;\n-use syntax::ast;\n-use syntax::with_default_globals;\n \n fn fun_to_string(\n     decl: &ast::FnDecl,"}, {"sha": "8aaba15d84ad213dc0b45f56cf12b92a8c847077", "filename": "src/librustc_attr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_attr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_attr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -19,4 +19,4 @@ rustc_feature = { path = \"../librustc_feature\" }\n rustc_macros = { path = \"../librustc_macros\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_session = { path = \"../librustc_session\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "08eae24da9b688185fc36f1e224b4643ff33b77e", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,6 +2,7 @@\n \n use super::{find_by_name, mark_used};\n \n+use rustc_ast::ast::{self, Attribute, MetaItem, MetaItemKind, NestedMetaItem};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, Handler};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n@@ -10,7 +11,6 @@ use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::hygiene::Transparency;\n use rustc_span::{symbol::sym, symbol::Symbol, Span};\n use std::num::NonZeroU32;\n-use syntax::ast::{self, Attribute, MetaItem, MetaItemKind, NestedMetaItem};\n \n pub fn is_builtin_attr(attr: &Attribute) -> bool {\n     attr.is_doc_comment() || attr.ident().filter(|ident| is_builtin_attr_name(ident.name)).is_some()"}, {"sha": "9803501fb96c2dc485d2d6781b1325e80aef91b4", "filename": "src/librustc_attr/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_attr%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_attr%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Flib.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,6 +1,6 @@\n //! Functions and types dealing with attributes and meta items.\n //!\n-//! FIXME(Centril): For now being, much of the logic is still in `syntax::attr`.\n+//! FIXME(Centril): For now being, much of the logic is still in `rustc_ast::attr`.\n //! The goal is to move the definition of `MetaItem` and things that don't need to be in `syntax`\n //! to this crate.\n \n@@ -11,6 +11,6 @@ pub use IntType::*;\n pub use ReprAttr::*;\n pub use StabilityLevel::*;\n \n-pub use syntax::attr::*;\n+pub use rustc_ast::attr::*;\n \n-pub(crate) use syntax::HashStableContext;\n+pub(crate) use rustc_ast::HashStableContext;"}, {"sha": "c15438bde440eeca22b45bdf7068d4465c6f9bdc", "filename": "src/librustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -21,6 +21,6 @@ rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_expand = { path = \"../librustc_expand\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "d9d990199637e0a6bc9f985224c14c2d8de86bd3", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,15 +2,15 @@\n //\n use State::*;\n \n+use rustc_ast::ast::{self, AsmDialect};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::{self, Token};\n+use rustc_ast::tokenstream::{self, TokenStream};\n use rustc_errors::{struct_span_err, DiagnosticBuilder, PResult};\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast::{self, AsmDialect};\n-use syntax::ptr::P;\n-use syntax::token::{self, Token};\n-use syntax::tokenstream::{self, TokenStream};\n \n enum State {\n     Asm,"}, {"sha": "c58f004b3f2a0e221564fb14561827ce1f3c2a6f", "filename": "src/librustc_builtin_macros/assert.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fassert.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,14 +1,14 @@\n use rustc_errors::{Applicability, DiagnosticBuilder};\n \n+use rustc_ast::ast::{self, *};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::{self, TokenKind};\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast::{self, *};\n-use syntax::ptr::P;\n-use syntax::token::{self, TokenKind};\n-use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};\n \n pub fn expand_assert<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,"}, {"sha": "3c09b26af42f256b510d3ec35ee8ab8ce79ffa55", "filename": "src/librustc_builtin_macros/cfg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcfg.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,13 +2,13 @@\n //! a literal `true` or `false` based on whether the given cfg matches the\n //! current compilation environment.\n \n+use rustc_ast::ast;\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_attr as attr;\n use rustc_errors::DiagnosticBuilder;\n use rustc_expand::base::{self, *};\n use rustc_span::Span;\n-use syntax::ast;\n-use syntax::token;\n-use syntax::tokenstream::TokenStream;\n \n pub fn expand_cfg(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "7ddbf08306b72031ab2e7695b565d5b59510d506", "filename": "src/librustc_builtin_macros/cmdline_attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,11 +1,11 @@\n //! Attributes injected into the crate root from command line using `-Z crate-attr`.\n \n+use rustc_ast::ast::{self, AttrItem, AttrStyle};\n+use rustc_ast::attr::mk_attr;\n+use rustc_ast::token;\n use rustc_expand::panictry;\n use rustc_session::parse::ParseSess;\n use rustc_span::FileName;\n-use syntax::ast::{self, AttrItem, AttrStyle};\n-use syntax::attr::mk_attr;\n-use syntax::token;\n \n pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {\n     for raw_attr in attrs {"}, {"sha": "f5955604e5fb2b0d8229aa2d5b4079e3ea19a5f6", "filename": "src/librustc_builtin_macros/compile_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcompile_error.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,8 +1,8 @@\n // The compiler code necessary to support the compile_error! extension.\n \n+use rustc_ast::tokenstream::TokenStream;\n use rustc_expand::base::{self, *};\n use rustc_span::Span;\n-use syntax::tokenstream::TokenStream;\n \n pub fn expand_compile_error<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,"}, {"sha": "e0ce37b95fcd6c9a60eafca8f961688e649118d9", "filename": "src/librustc_builtin_macros/concat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fconcat.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,7 +1,7 @@\n+use rustc_ast::ast;\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_expand::base::{self, DummyResult};\n use rustc_span::symbol::Symbol;\n-use syntax::ast;\n-use syntax::tokenstream::TokenStream;\n \n use std::string::String;\n "}, {"sha": "b55e71b2518f40734b170f581899def36377f220", "filename": "src/librustc_builtin_macros/concat_idents.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n+use rustc_ast::ast;\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::{self, Token};\n+use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_expand::base::{self, *};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n-use syntax::ast;\n-use syntax::ptr::P;\n-use syntax::token::{self, Token};\n-use syntax::tokenstream::{TokenStream, TokenTree};\n \n pub fn expand_concat_idents<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,"}, {"sha": "a1c818caff3bf02dd1c8e1f600ba2dd3fa37090c", "filename": "src/librustc_builtin_macros/deriving/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fbounds.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,9 +2,9 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n+use rustc_ast::ast::MetaItem;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::Span;\n-use syntax::ast::MetaItem;\n \n pub fn expand_deriving_copy(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "97569ef8138865b763350268242cb106abf84fea", "filename": "src/librustc_builtin_macros/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,11 +2,11 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n+use rustc_ast::ast::{self, Expr, GenericArg, Generics, ItemKind, MetaItem, VariantData};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast::{self, Expr, GenericArg, Generics, ItemKind, MetaItem, VariantData};\n-use syntax::ptr::P;\n \n pub fn expand_deriving_clone(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "b39f41513ee35863a4d38ff9467e5a542d2f488a", "filename": "src/librustc_builtin_macros/deriving/cmp/eq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,11 +2,11 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n+use rustc_ast::ast::{self, Expr, GenericArg, Ident, MetaItem};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast::{self, Expr, GenericArg, Ident, MetaItem};\n-use syntax::ptr::P;\n \n pub fn expand_deriving_eq(\n     cx: &mut ExtCtxt<'_>,\n@@ -16,8 +16,8 @@ pub fn expand_deriving_eq(\n     push: &mut dyn FnMut(Annotatable),\n ) {\n     let inline = cx.meta_word(span, sym::inline);\n-    let hidden = syntax::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n-    let doc = syntax::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);\n+    let hidden = rustc_ast::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n+    let doc = rustc_ast::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);\n     let attrs = vec![cx.attribute(inline), cx.attribute(doc)];\n     let trait_def = TraitDef {\n         span,"}, {"sha": "b23fbc6f62bdb71869adbca218f11db7b0d32c84", "filename": "src/librustc_builtin_macros/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,11 +2,11 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n+use rustc_ast::ast::{self, Expr, MetaItem};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast::{self, Expr, MetaItem};\n-use syntax::ptr::P;\n \n pub fn expand_deriving_ord(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "d3f1a9c15f49e7595065401cdbc506eb7a0d7d5c", "filename": "src/librustc_builtin_macros/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,11 +2,11 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::{path_local, path_std};\n \n+use rustc_ast::ast::{BinOpKind, Expr, MetaItem};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast::{BinOpKind, Expr, MetaItem};\n-use syntax::ptr::P;\n \n pub fn expand_deriving_partial_eq(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "835ccd1b022e1e552903d29c95e97f6f185a6fe9", "filename": "src/librustc_builtin_macros/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,11 +4,11 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::{path_local, path_std, pathvec_std};\n \n+use rustc_ast::ast::{self, BinOpKind, Expr, MetaItem};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast::{self, BinOpKind, Expr, MetaItem};\n-use syntax::ptr::P;\n \n pub fn expand_deriving_partial_ord(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "f47be3c3c197503bc493f9c9f08eaf67be622c52", "filename": "src/librustc_builtin_macros/deriving/debug.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,12 +2,12 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n+use rustc_ast::ast::{self, Ident};\n+use rustc_ast::ast::{Expr, MetaItem};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast::{self, Ident};\n-use syntax::ast::{Expr, MetaItem};\n-use syntax::ptr::P;\n \n pub fn expand_deriving_debug(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "ac5d08ba62d0dc0bb74af42a148a0357b4351ee7", "filename": "src/librustc_builtin_macros/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,12 +4,12 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::pathvec_std;\n \n+use rustc_ast::ast;\n+use rustc_ast::ast::{Expr, MetaItem, Mutability};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n-use syntax::ast;\n-use syntax::ast::{Expr, MetaItem, Mutability};\n-use syntax::ptr::P;\n \n pub fn expand_deriving_rustc_decodable(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "cb85a0b1a10cc7f94507d5e66fa892a83b6785dc", "filename": "src/librustc_builtin_macros/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,12 +2,12 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n+use rustc_ast::ast::{Expr, MetaItem};\n+use rustc_ast::ptr::P;\n use rustc_errors::struct_span_err;\n use rustc_expand::base::{Annotatable, DummyResult, ExtCtxt};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n-use syntax::ast::{Expr, MetaItem};\n-use syntax::ptr::P;\n \n pub fn expand_deriving_default(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "9073085381ac165d0d32d0485c982585f0113772", "filename": "src/librustc_builtin_macros/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -89,11 +89,11 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::pathvec_std;\n \n+use rustc_ast::ast::{Expr, ExprKind, MetaItem, Mutability};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n-use syntax::ast::{Expr, ExprKind, MetaItem, Mutability};\n-use syntax::ptr::P;\n \n pub fn expand_deriving_rustc_encodable(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "311298c0f40832b07dc00f77722a1b0729da34e3", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -181,16 +181,16 @@ use std::cell::RefCell;\n use std::iter;\n use std::vec;\n \n+use rustc_ast::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n+use rustc_ast::ast::{GenericArg, GenericParamKind, VariantData};\n+use rustc_ast::ptr::P;\n+use rustc_ast::util::map_in_place::MapInPlace;\n use rustc_attr as attr;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n-use syntax::ast::{GenericArg, GenericParamKind, VariantData};\n-use syntax::ptr::P;\n-use syntax::util::map_in_place::MapInPlace;\n \n use ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n \n@@ -339,7 +339,7 @@ fn find_type_parameters(\n     ty_param_names: &[ast::Name],\n     cx: &ExtCtxt<'_>,\n ) -> Vec<P<ast::Ty>> {\n-    use syntax::visit;\n+    use rustc_ast::visit;\n \n     struct Visitor<'a, 'b> {\n         cx: &'a ExtCtxt<'b>,\n@@ -689,11 +689,11 @@ impl<'a> TraitDef<'a> {\n         attr::mark_used(&attr);\n         let opt_trait_ref = Some(trait_ref);\n         let unused_qual = {\n-            let word = syntax::attr::mk_nested_word_item(Ident::new(\n+            let word = rustc_ast::attr::mk_nested_word_item(Ident::new(\n                 Symbol::intern(\"unused_qualifications\"),\n                 self.span,\n             ));\n-            let list = syntax::attr::mk_list_item(Ident::new(sym::allow, self.span), vec![word]);\n+            let list = rustc_ast::attr::mk_list_item(Ident::new(sym::allow, self.span), vec![word]);\n             cx.attribute(list)\n         };\n "}, {"sha": "bd54a735311978e895e4ccf279b9f401a85ba1a4", "filename": "src/librustc_builtin_macros/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,12 +4,12 @@\n pub use PtrTy::*;\n pub use Ty::*;\n \n+use rustc_ast::ast::{self, Expr, GenericArg, GenericParamKind, Generics, Ident, SelfKind};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::ExtCtxt;\n use rustc_span::source_map::{respan, DUMMY_SP};\n use rustc_span::symbol::kw;\n use rustc_span::Span;\n-use syntax::ast::{self, Expr, GenericArg, GenericParamKind, Generics, Ident, SelfKind};\n-use syntax::ptr::P;\n \n /// The types of pointers\n #[derive(Clone)]"}, {"sha": "8776e7ef507903c73a3126c17ca427f3cce5c4f7", "filename": "src/librustc_builtin_macros/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fhash.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,11 +2,11 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::{self, path_std, pathvec_std};\n \n+use rustc_ast::ast::{Expr, MetaItem, Mutability};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast::{Expr, MetaItem, Mutability};\n-use syntax::ptr::P;\n \n pub fn expand_deriving_hash(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "5ba9d3800e11838afca90331d12501f3ca7f31fd", "filename": "src/librustc_builtin_macros/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n //! The compiler code necessary to implement the `#[derive]` extensions.\n \n+use rustc_ast::ast::{self, ItemKind, MetaItem};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt, MultiItemModifier};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast::{self, ItemKind, MetaItem};\n-use syntax::ptr::P;\n \n macro path_local($x:ident) {\n     generic::ty::Path::new_local(stringify!($x))"}, {"sha": "fba76f8b4962fbe3846321ca224f0d6a40c78acf", "filename": "src/librustc_builtin_macros/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fenv.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,11 +3,11 @@\n // interface.\n //\n \n+use rustc_ast::ast::{self, GenericArg, Ident};\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_expand::base::{self, *};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast::{self, GenericArg, Ident};\n-use syntax::tokenstream::TokenStream;\n \n use std::env;\n "}, {"sha": "da81347f59f5ea1cc203f33e992365cd93ac2292", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,15 +3,15 @@ use Position::*;\n \n use fmt_macros as parse;\n \n+use rustc_ast::ast;\n+use rustc_ast::ptr::P;\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n-use syntax::ast;\n-use syntax::ptr::P;\n-use syntax::token;\n-use syntax::tokenstream::TokenStream;\n \n use std::borrow::Cow;\n use std::collections::hash_map::Entry;"}, {"sha": "8de7455a09a6472330282e8cf72d9d25f6a90203", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,12 +1,14 @@\n use crate::util::check_builtin_macro_attribute;\n \n+use rustc_ast::ast::{self, Attribute, Expr, FnHeader, FnSig, Generics, Ident, Param};\n+use rustc_ast::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n+use rustc_ast::expand::allocator::{\n+    AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS,\n+};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast::{self, Attribute, Expr, FnHeader, FnSig, Generics, Ident, Param};\n-use syntax::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n-use syntax::expand::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n-use syntax::ptr::P;\n \n pub fn expand(\n     ecx: &mut ExtCtxt<'_>,"}, {"sha": "307e7fe71212bf383343106281680adc2703b367", "filename": "src/librustc_builtin_macros/global_asm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -8,15 +8,15 @@\n //! LLVM's `module asm \"some assembly here\"`. All of LLVM's caveats\n //! therefore apply.\n \n+use rustc_ast::ast;\n+use rustc_ast::ptr::P;\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::DiagnosticBuilder;\n use rustc_expand::base::{self, *};\n use rustc_span::source_map::respan;\n use rustc_span::Span;\n use smallvec::smallvec;\n-use syntax::ast;\n-use syntax::ptr::P;\n-use syntax::token;\n-use syntax::tokenstream::TokenStream;\n \n pub fn expand_global_asm<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,"}, {"sha": "9a8b0a87cb79383cbc7bad60cb6cf7816b5c1b02", "filename": "src/librustc_builtin_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flib.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -13,11 +13,11 @@ extern crate proc_macro;\n \n use crate::deriving::*;\n \n+use rustc_ast::ast::Ident;\n use rustc_expand::base::{MacroExpanderFn, Resolver, SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::BangProcMacro;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n-use syntax::ast::Ident;\n \n mod asm;\n mod assert;"}, {"sha": "ae3a889428ae45aea9047c723971e0e6e76c0c83", "filename": "src/librustc_builtin_macros/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flog_syntax.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,6 +1,6 @@\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_ast_pretty::pprust;\n use rustc_expand::base;\n-use syntax::tokenstream::TokenStream;\n \n pub fn expand_log_syntax<'cx>(\n     _cx: &'cx mut base::ExtCtxt<'_>,"}, {"sha": "0a9b59f0e9adbb9646559f29c237987a24da4808", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,5 +1,10 @@\n use std::mem;\n \n+use rustc_ast::ast::{self, Ident, NodeId};\n+use rustc_ast::attr;\n+use rustc_ast::expand::is_proc_macro_attr;\n+use rustc_ast::ptr::P;\n+use rustc_ast::visit::{self, Visitor};\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n@@ -9,11 +14,6 @@ use rustc_span::symbol::{kw, sym};\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::smallvec;\n use std::cell::RefCell;\n-use syntax::ast::{self, Ident, NodeId};\n-use syntax::attr;\n-use syntax::expand::is_proc_macro_attr;\n-use syntax::ptr::P;\n-use syntax::visit::{self, Visitor};\n \n struct ProcMacroDerive {\n     id: NodeId,"}, {"sha": "5ad72a7443dd2de3fd8960091c26c2ae455839ea", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,14 +1,14 @@\n+use rustc_ast::ast;\n+use rustc_ast::ptr::P;\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::{self, *};\n use rustc_expand::panictry;\n use rustc_parse::{self, new_sub_parser_from_file, parser::Parser, DirectoryOwnership};\n use rustc_session::lint::builtin::INCOMPLETE_INCLUDE;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, Pos, Span};\n-use syntax::ast;\n-use syntax::ptr::P;\n-use syntax::token;\n-use syntax::tokenstream::TokenStream;\n \n use smallvec::SmallVec;\n "}, {"sha": "30403f6dc41c1c1d72da731f8055b19315d5c374", "filename": "src/librustc_builtin_macros/standard_library_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,12 +1,12 @@\n+use rustc_ast::ptr::P;\n+use rustc_ast::{ast, attr};\n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::ExpansionConfig;\n use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::AstPass;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n-use syntax::ptr::P;\n-use syntax::{ast, attr};\n \n pub fn inject(\n     mut krate: ast::Crate,"}, {"sha": "7fe65f28532d05b85f0e5c76a6c20f9379a1e845", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,13 +2,13 @@\n /// Ideally, this code would be in libtest but for efficiency and error messages it lives here.\n use crate::util::check_builtin_macro_attribute;\n \n+use rustc_ast::ast;\n+use rustc_ast::attr;\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast;\n-use syntax::attr;\n \n use std::iter;\n "}, {"sha": "51a2170280559f54b87a88f17f0efb057003590f", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,6 +1,11 @@\n // Code that generates a test runner to run all the tests in a crate\n \n use log::debug;\n+use rustc_ast::ast::{self, Ident};\n+use rustc_ast::attr;\n+use rustc_ast::entry::{self, EntryPointType};\n+use rustc_ast::mut_visit::{ExpectOne, *};\n+use rustc_ast::ptr::P;\n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_feature::Features;\n@@ -11,11 +16,6 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::PanicStrategy;\n use smallvec::{smallvec, SmallVec};\n-use syntax::ast::{self, Ident};\n-use syntax::attr;\n-use syntax::entry::{self, EntryPointType};\n-use syntax::mut_visit::{ExpectOne, *};\n-use syntax::ptr::P;\n \n use std::{iter, mem};\n "}, {"sha": "c17f2afe4949e83a43c5ada7cc5862942d8cf083", "filename": "src/librustc_builtin_macros/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftrace_macros.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,7 +1,7 @@\n+use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_expand::base::{self, ExtCtxt};\n use rustc_span::symbol::kw;\n use rustc_span::Span;\n-use syntax::tokenstream::{TokenStream, TokenTree};\n \n pub fn expand_trace_macros(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "8ef76a8657e1eaf9404fd343ea0984141bb7d067", "filename": "src/librustc_builtin_macros/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_builtin_macros%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Futil.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,8 +1,8 @@\n+use rustc_ast::ast::MetaItem;\n use rustc_expand::base::ExtCtxt;\n use rustc_feature::AttributeTemplate;\n use rustc_parse::validate_attr;\n use rustc_span::Symbol;\n-use syntax::ast::MetaItem;\n \n pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, name: Symbol) {\n     // All the built-in macro attributes are \"words\" at the moment."}, {"sha": "0776cb19760d5620e1baa4861585603d4654143f", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -33,5 +33,5 @@ rustc_session = { path = \"../librustc_session\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "821377db0ee15645f0f5e2335db0e631fc2f2199", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,7 +4,7 @@ use crate::attributes;\n use libc::c_uint;\n use rustc::bug;\n use rustc::ty::TyCtxt;\n-use syntax::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n \n use crate::llvm::{self, False, True};\n use crate::ModuleLlvm;"}, {"sha": "8066136c2fe42b83f4f1e3f42a9b90a7e955bf8e", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -134,7 +134,7 @@ fn inline_asm_call(\n     output: &'ll llvm::Type,\n     volatile: bool,\n     alignstack: bool,\n-    dia: ::syntax::ast::AsmDialect,\n+    dia: ::rustc_ast::ast::AsmDialect,\n ) -> Option<&'ll Value> {\n     let volatile = if volatile { llvm::True } else { llvm::False };\n     let alignstack = if alignstack { llvm::True } else { llvm::False };"}, {"sha": "32604d5601d30036ddc5c57c3b0b5e1d78765874", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -303,8 +303,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         rhs: Self::Value,\n     ) -> (Self::Value, Self::Value) {\n         use rustc::ty::{Int, Uint};\n-        use syntax::ast::IntTy::*;\n-        use syntax::ast::UintTy::*;\n+        use rustc_ast::ast::IntTy::*;\n+        use rustc_ast::ast::UintTy::*;\n \n         let new_kind = match ty.kind {\n             Int(t @ Isize) => Int(t.normalize(self.tcx.sess.target.ptr_width)),"}, {"sha": "df38eeec00fce9de052fb6cac83b3becb1a1b664", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -18,8 +18,8 @@ use rustc_codegen_ssa::mir::place::PlaceRef;\n \n use libc::{c_char, c_uint};\n \n+use rustc_ast::ast::Mutability;\n use rustc_span::symbol::Symbol;\n-use syntax::ast::Mutability;\n \n pub use crate::context::CodegenCx;\n "}, {"sha": "753a4e18faf5e7aa26b719d4d96e4e80747fa0bd", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -9,8 +9,8 @@ use rustc::bug;\n use rustc::session::config::DebugInfo;\n use rustc_codegen_ssa::traits::*;\n \n+use rustc_ast::attr;\n use rustc_span::symbol::sym;\n-use syntax::attr;\n \n /// Inserts a side-effect free instruction sequence that makes sure that the\n /// .debug_gdb_scripts global is referenced, so it isn't removed by the linker."}, {"sha": "6ed3153963f9858dda79a5e77bb4e9f704c0a93f", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -32,6 +32,7 @@ use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::Instance;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc::{bug, span_bug};\n+use rustc_ast::ast;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -45,7 +46,6 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::symbol::{Interner, Symbol};\n use rustc_span::{self, FileName, Span};\n use rustc_target::abi::HasDataLayout;\n-use syntax::ast;\n \n use libc::{c_longlong, c_uint};\n use std::collections::hash_map::Entry;"}, {"sha": "6515d5e3bec7ff655877dfdad89c2bd4875b4cc7", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -35,11 +35,11 @@ use std::cell::RefCell;\n use std::ffi::CString;\n \n use rustc::ty::layout::{self, HasTyCtxt, LayoutOf, Size};\n+use rustc_ast::ast;\n use rustc_codegen_ssa::traits::*;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, BytePos, Span};\n use smallvec::SmallVec;\n-use syntax::ast;\n \n mod create_scope_map;\n pub mod gdb;"}, {"sha": "1ae9d2a6841316e4cd290f848dc68ba5e997ec72", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -10,6 +10,7 @@ use crate::value::Value;\n use rustc::ty::layout::{self, FnAbiExt, HasTyCtxt, LayoutOf, Primitive};\n use rustc::ty::{self, Ty};\n use rustc::{bug, span_bug};\n+use rustc_ast::ast;\n use rustc_codegen_ssa::base::{compare_simd_types, to_immediate, wants_msvc_seh};\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc_codegen_ssa::glue;\n@@ -18,7 +19,6 @@ use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::MemFlags;\n use rustc_hir as hir;\n use rustc_target::abi::HasDataLayout;\n-use syntax::ast;\n \n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n use rustc_codegen_ssa::traits::*;"}, {"sha": "f32657545745f74554ce2e0295c5f1ec0a34ec63", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -19,6 +19,7 @@ use rustc_span::symbol::Symbol;\n \n pub use llvm_util::target_features;\n use rustc::dep_graph::WorkProduct;\n+use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule};\n use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n@@ -28,7 +29,6 @@ use std::any::Any;\n use std::ffi::CStr;\n use std::fs;\n use std::sync::Arc;\n-use syntax::expand::allocator::AllocatorKind;\n \n use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};"}, {"sha": "f56647044e08b2b7014f6b50911390eea7949f01", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -381,10 +381,10 @@ pub enum AsmDialect {\n }\n \n impl AsmDialect {\n-    pub fn from_generic(asm: syntax::ast::AsmDialect) -> Self {\n+    pub fn from_generic(asm: rustc_ast::ast::AsmDialect) -> Self {\n         match asm {\n-            syntax::ast::AsmDialect::Att => AsmDialect::Att,\n-            syntax::ast::AsmDialect::Intel => AsmDialect::Intel,\n+            rustc_ast::ast::AsmDialect::Att => AsmDialect::Att,\n+            rustc_ast::ast::AsmDialect::Intel => AsmDialect::Intel,\n         }\n     }\n }"}, {"sha": "aacaf130f9aa98bb89093163dbb225ea6319e6e9", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -12,10 +12,10 @@ use crate::common;\n use crate::type_of::LayoutLlvmExt;\n use rustc::ty::layout::{self, Align, Size, TyLayout};\n use rustc::ty::Ty;\n+use rustc_ast::ast;\n use rustc_codegen_ssa::common::TypeKind;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_target::abi::call::{CastTarget, FnAbi, Reg};\n-use syntax::ast;\n \n use std::fmt;\n use std::ptr;"}, {"sha": "3181d568b013a98382a33029868badca2e0df9f7", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -20,7 +20,7 @@ jobserver = \"0.1.11\"\n tempfile = \"3.1\"\n \n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc = { path = \"../librustc\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }"}, {"sha": "3fe256ce25b964a505aad1fc4f58392efc868b2c", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -8,14 +8,14 @@ use rustc::ty::query::Providers;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::Instance;\n use rustc::ty::{SymbolName, TyCtxt};\n+use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n use rustc_codegen_utils::symbol_names;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n-use syntax::expand::allocator::ALLOCATOR_METHODS;\n \n pub fn threshold(tcx: TyCtxt<'_>) -> SymbolExportLevel {\n     crates_export_threshold(&tcx.sess.crate_types.borrow())"}, {"sha": "76728e9840616364334f61682ffcf5381efdef9b", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -19,6 +19,7 @@ use rustc::session::config::{\n };\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n+use rustc_ast::attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::profiling::TimingGuard;\n@@ -37,7 +38,6 @@ use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_target::spec::MergeFunctions;\n-use syntax::attr;\n \n use std::any::Any;\n use std::fs;"}, {"sha": "5535841156acd24d4d8a4ff5ed442540a53807fa", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -7,9 +7,9 @@ use rustc::session::{config, Session};\n use rustc::ty::layout::{HasTyCtxt, LayoutOf, TyLayout};\n use rustc::ty::Ty;\n use rustc::ty::TyCtxt;\n+use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_span::symbol::Symbol;\n-use syntax::expand::allocator::AllocatorKind;\n \n use std::sync::Arc;\n "}, {"sha": "14c5a1b8ee9b3c7b59d4b230895380b0be1eb1fc", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,10 +3,10 @@ use crate::mir::debuginfo::{FunctionDebugContext, VariableKind};\n use rustc::mir;\n use rustc::ty::layout::Size;\n use rustc::ty::{Instance, Ty};\n+use rustc_ast::ast::Name;\n use rustc_hir::def_id::CrateNum;\n use rustc_span::{SourceFile, Span};\n use rustc_target::abi::call::FnAbi;\n-use syntax::ast::Name;\n \n pub trait DebugInfoMethods<'tcx>: BackendTypes {\n     fn create_vtable_metadata(&self, ty: Ty<'tcx>, vtable: Self::Value);"}, {"sha": "b5533a8307c3dc501886749c52d1a5c4e68617d4", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -14,7 +14,7 @@ log = \"0.4\"\n punycode = \"0.4.0\"\n rustc-demangle = \"0.1.16\"\n \n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc = { path = \"../librustc\" }\n rustc_hir = { path = \"../librustc_hir\" }"}, {"sha": "524fb0a59c2f19712d655b581b137495b13b80b6", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,9 +1,9 @@\n use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::Session;\n+use rustc_ast::{ast, attr};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use std::path::{Path, PathBuf};\n-use syntax::{ast, attr};\n \n pub fn out_filename(\n     sess: &Session,"}, {"sha": "ce6d0d9dc5ba8962782f90079cf2da8161e0bb53", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,12 +2,12 @@ use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n use rustc::ty::print::{Print, Printer};\n use rustc::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n+use rustc_ast::ast::{FloatTy, IntTy, UintTy};\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_target::spec::abi::Abi;\n-use syntax::ast::{FloatTy, IntTy, UintTy};\n \n use std::fmt::Write;\n use std::ops::Range;"}, {"sha": "26f1741153c8c310747460bc14252e62de187e32", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -31,7 +31,7 @@ rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_interface = { path = \"../librustc_interface\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n \n [target.'cfg(windows)'.dependencies]"}, {"sha": "9a94349e5fde44c52f6cee6032e63e19fb2ec8c6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -55,10 +55,10 @@ use std::process::{self, Command, Stdio};\n use std::str;\n use std::time::Instant;\n \n+use rustc_ast::ast;\n use rustc_span::source_map::FileLoader;\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n-use syntax::ast;\n \n mod args;\n pub mod pretty;"}, {"sha": "ca129ac59849a2798cadc8fa70dbdb06a9ba12ad", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -5,13 +5,13 @@ use rustc::session::config::{Input, PpMode, PpSourceMode};\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n+use rustc_ast::ast;\n use rustc_ast_pretty::pprust;\n use rustc_hir as hir;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::print as pprust_hir;\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n use rustc_span::FileName;\n-use syntax::ast;\n \n use std::cell::Cell;\n use std::fs::File;"}, {"sha": "3cb79030771b8319403302909caef2a16dd3cf9d", "filename": "src/librustc_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -24,4 +24,4 @@ rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "9258b59f79be85b75ec1d4ee4202550d889e6ee5", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,5 +1,11 @@\n use crate::expand::{self, AstFragment, Invocation};\n \n+use rustc_ast::ast::{self, Attribute, Name, NodeId, PatKind};\n+use rustc_ast::mut_visit::{self, MutVisitor};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::{self, TokenStream};\n+use rustc_ast::visit::{AssocCtxt, Visitor};\n use rustc_attr::{self as attr, Deprecation, HasAttrs, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n@@ -12,12 +18,6 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{FileName, MultiSpan, Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n-use syntax::ast::{self, Attribute, Name, NodeId, PatKind};\n-use syntax::mut_visit::{self, MutVisitor};\n-use syntax::ptr::P;\n-use syntax::token;\n-use syntax::tokenstream::{self, TokenStream};\n-use syntax::visit::{AssocCtxt, Visitor};\n \n use std::default::Default;\n use std::iter;"}, {"sha": "48ceaf5fccd8efb089a57e88dfa324ec8ebd0295", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n use crate::base::ExtCtxt;\n \n+use rustc_ast::ast::{self, AttrVec, BlockCheckMode, Expr, Ident, PatKind, UnOp};\n+use rustc_ast::attr;\n+use rustc_ast::ptr::P;\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n-use syntax::ast::{self, AttrVec, BlockCheckMode, Expr, Ident, PatKind, UnOp};\n-use syntax::attr;\n-use syntax::ptr::P;\n \n use rustc_span::Span;\n "}, {"sha": "a2c512fda91ba686037f116959777338ab4ece1a", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -5,6 +5,14 @@ use crate::mbe::macro_rules::annotate_err_with_kind;\n use crate::placeholders::{placeholder, PlaceholderExpander};\n use crate::proc_macro::collect_derives;\n \n+use rustc_ast::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n+use rustc_ast::ast::{ItemKind, MacArgs, MacStmtStyle, StmtKind};\n+use rustc_ast::mut_visit::*;\n+use rustc_ast::ptr::P;\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::{TokenStream, TokenTree};\n+use rustc_ast::util::map_in_place::MapInPlace;\n+use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, is_builtin_attr, HasAttrs};\n use rustc_data_structures::sync::Lrc;\n@@ -20,14 +28,6 @@ use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{FileName, Span, DUMMY_SP};\n-use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n-use syntax::ast::{ItemKind, MacArgs, MacStmtStyle, StmtKind};\n-use syntax::mut_visit::*;\n-use syntax::ptr::P;\n-use syntax::token;\n-use syntax::tokenstream::{TokenStream, TokenTree};\n-use syntax::util::map_in_place::MapInPlace;\n-use syntax::visit::{self, AssocCtxt, Visitor};\n \n use smallvec::{smallvec, SmallVec};\n use std::io::ErrorKind;"}, {"sha": "57957a1fa8bf953734db5284b8515e043bab946b", "filename": "src/librustc_expand/mbe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -9,9 +9,9 @@ crate mod macro_rules;\n crate mod quoted;\n crate mod transcribe;\n \n-use syntax::ast;\n-use syntax::token::{self, Token, TokenKind};\n-use syntax::tokenstream::DelimSpan;\n+use rustc_ast::ast;\n+use rustc_ast::token::{self, Token, TokenKind};\n+use rustc_ast::tokenstream::DelimSpan;\n \n use rustc_span::Span;\n "}, {"sha": "6eb834beac6522f77aa00950a6ae1b29561ac73a", "filename": "src/librustc_expand/mbe/macro_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -106,13 +106,13 @@\n //! bound.\n use crate::mbe::{KleeneToken, TokenTree};\n \n+use rustc_ast::ast::NodeId;\n+use rustc_ast::token::{DelimToken, Token, TokenKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_session::lint::builtin::META_VARIABLE_MISUSE;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::kw;\n use rustc_span::{symbol::Ident, MultiSpan, Span};\n-use syntax::ast::NodeId;\n-use syntax::token::{DelimToken, Token, TokenKind};\n \n use smallvec::SmallVec;\n "}, {"sha": "d2a5c54aae49063437a3ef9e88f1b0e53f35a92c", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -76,13 +76,13 @@ use TokenTreeOrTokenTreeSlice::*;\n \n use crate::mbe::{self, TokenTree};\n \n+use rustc_ast::ast::{Ident, Name};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::{self, DocComment, Nonterminal, Token};\n use rustc_ast_pretty::pprust;\n use rustc_parse::parser::{FollowedByType, Parser, PathStyle};\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use syntax::ast::{Ident, Name};\n-use syntax::ptr::P;\n-use syntax::token::{self, DocComment, Nonterminal, Token};\n \n use rustc_errors::{FatalError, PResult};\n use rustc_span::Span;"}, {"sha": "02f2a386b33eb66e902d9789a9ad473ccec9c319", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -8,6 +8,9 @@ use crate::mbe::macro_parser::{Error, Failure, Success};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq};\n use crate::mbe::transcribe::transcribe;\n \n+use rustc_ast::ast;\n+use rustc_ast::token::{self, NtTT, Token, TokenKind::*};\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, TransparencyError};\n use rustc_data_structures::fx::FxHashMap;\n@@ -21,9 +24,6 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast;\n-use syntax::token::{self, NtTT, Token, TokenKind::*};\n-use syntax::tokenstream::{DelimSpan, TokenStream};\n \n use log::debug;\n use std::borrow::Cow;"}, {"sha": "b19fae6559704addd19ebe6828be94bc5841aa4d", "filename": "src/librustc_expand/mbe/quoted.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,12 +1,12 @@\n use crate::mbe::macro_parser;\n use crate::mbe::{Delimited, KleeneOp, KleeneToken, SequenceRepetition, TokenTree};\n \n+use rustc_ast::ast;\n+use rustc_ast::token::{self, Token};\n+use rustc_ast::tokenstream;\n use rustc_ast_pretty::pprust;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::kw;\n-use syntax::ast;\n-use syntax::token::{self, Token};\n-use syntax::tokenstream;\n \n use rustc_span::Span;\n "}, {"sha": "80bf02b1366e0e86077ad32fbc74c3bc0e5ca496", "filename": "src/librustc_expand/mbe/transcribe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,15 +2,15 @@ use crate::base::ExtCtxt;\n use crate::mbe;\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n \n+use rustc_ast::ast::{Ident, Mac};\n+use rustc_ast::mut_visit::{self, MutVisitor};\n+use rustc_ast::token::{self, NtTT, Token};\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::pluralize;\n use rustc_span::hygiene::{ExpnId, Transparency};\n use rustc_span::Span;\n-use syntax::ast::{Ident, Mac};\n-use syntax::mut_visit::{self, MutVisitor};\n-use syntax::token::{self, NtTT, Token};\n-use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};\n use std::mem;"}, {"sha": "4c947d8fa2b4e7d90e87f04f5aa7a9990adc3856", "filename": "src/librustc_expand/mut_visit/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,9 +1,9 @@\n use crate::tests::{matches_codepattern, string_to_crate};\n \n+use rustc_ast::ast::{self, Ident};\n+use rustc_ast::mut_visit::{self, MutVisitor};\n+use rustc_ast::with_default_globals;\n use rustc_ast_pretty::pprust;\n-use syntax::ast::{self, Ident};\n-use syntax::mut_visit::{self, MutVisitor};\n-use syntax::with_default_globals;\n \n // This version doesn't care about getting comments or doc-strings in.\n fn fake_print_crate(s: &mut pprust::State<'_>, krate: &ast::Crate) {"}, {"sha": "2cb6267e0f6aa874a998fa711db7f4c0c619b3c7", "filename": "src/librustc_expand/parse/lexer/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,13 +1,13 @@\n+use rustc_ast::token::{self, Token, TokenKind};\n+use rustc_ast::util::comments::is_doc_comment;\n+use rustc_ast::with_default_globals;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{emitter::EmitterWriter, Handler};\n use rustc_parse::lexer::StringReader;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::symbol::Symbol;\n use rustc_span::{BytePos, Span};\n-use syntax::token::{self, Token, TokenKind};\n-use syntax::util::comments::is_doc_comment;\n-use syntax::with_default_globals;\n \n use std::io;\n use std::path::PathBuf;"}, {"sha": "55e815bd4a4e0a597fa515685d89fa593baab3db", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,18 +1,18 @@\n use crate::tests::{matches_codepattern, string_to_stream, with_error_checking_parse};\n \n+use rustc_ast::ast::{self, Name, PatKind};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::{self, Token};\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n+use rustc_ast::visit;\n+use rustc_ast::with_default_globals;\n use rustc_ast_pretty::pprust::item_to_string;\n use rustc_errors::PResult;\n use rustc_parse::new_parser_from_source_str;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::FilePathMapping;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, Pos, Span};\n-use syntax::ast::{self, Name, PatKind};\n-use syntax::ptr::P;\n-use syntax::token::{self, Token};\n-use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};\n-use syntax::visit;\n-use syntax::with_default_globals;\n \n use std::path::PathBuf;\n "}, {"sha": "cd4f0a61d424a48a9c32bd98a659a23b45600a2d", "filename": "src/librustc_expand/placeholders.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fplaceholders.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n use crate::base::ExtCtxt;\n use crate::expand::{AstFragment, AstFragmentKind};\n \n+use rustc_ast::ast;\n+use rustc_ast::mut_visit::*;\n+use rustc_ast::ptr::P;\n use rustc_span::source_map::{dummy_spanned, DUMMY_SP};\n-use syntax::ast;\n-use syntax::mut_visit::*;\n-use syntax::ptr::P;\n \n use smallvec::{smallvec, SmallVec};\n "}, {"sha": "84a546345bb285971da67a99ba4af1124ae9c6a1", "filename": "src/librustc_expand/proc_macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,13 +1,13 @@\n use crate::base::{self, *};\n use crate::proc_macro_server;\n \n+use rustc_ast::ast::{self, ItemKind, MetaItemKind, NestedMetaItem};\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::{self, TokenStream};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, FatalError};\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast::{self, ItemKind, MetaItemKind, NestedMetaItem};\n-use syntax::token;\n-use syntax::tokenstream::{self, TokenStream};\n \n const EXEC_STRATEGY: pm::bridge::server::SameThread = pm::bridge::server::SameThread;\n "}, {"sha": "5f21ff503d59ec8c76c40fb0001bcb88b7e29b6d", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,5 +1,9 @@\n use crate::base::ExtCtxt;\n \n+use rustc_ast::ast;\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n+use rustc_ast::util::comments;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::Diagnostic;\n@@ -8,10 +12,6 @@ use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n-use syntax::ast;\n-use syntax::token;\n-use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n-use syntax::util::comments;\n \n use pm::bridge::{server, TokenTree};\n use pm::{Delimiter, Level, LineColumn, Spacing};\n@@ -54,7 +54,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n     fn from_internal(\n         ((tree, is_joint), sess, stack): (TreeAndJoint, &ParseSess, &mut Vec<Self>),\n     ) -> Self {\n-        use syntax::token::*;\n+        use rustc_ast::token::*;\n \n         let joint = is_joint == Joint;\n         let Token { kind, span } = match tree {\n@@ -191,7 +191,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n \n impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n     fn to_internal(self) -> TokenStream {\n-        use syntax::token::*;\n+        use rustc_ast::token::*;\n \n         let (ch, joint, span) = match self {\n             TokenTree::Punct(Punct { ch, joint, span }) => (ch, joint, span),"}, {"sha": "fbc49ddd562b54259f49090e36e7e29724264fba", "filename": "src/librustc_expand/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftests.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n+use rustc_ast::ast;\n+use rustc_ast::tokenstream::TokenStream;\n+use rustc_ast::with_default_globals;\n use rustc_parse::{new_parser_from_source_str, parser::Parser, source_file_to_stream};\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{BytePos, MultiSpan, Span};\n-use syntax::ast;\n-use syntax::tokenstream::TokenStream;\n-use syntax::with_default_globals;\n \n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;"}, {"sha": "db329f22d146f33e28b412a9bab79d588e42f31f", "filename": "src/librustc_expand/tokenstream/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,11 +1,11 @@\n use crate::tests::string_to_stream;\n \n+use rustc_ast::ast::Name;\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::{TokenStream, TokenStreamBuilder, TokenTree};\n+use rustc_ast::with_default_globals;\n use rustc_span::{BytePos, Span};\n use smallvec::smallvec;\n-use syntax::ast::Name;\n-use syntax::token;\n-use syntax::tokenstream::{TokenStream, TokenStreamBuilder, TokenTree};\n-use syntax::with_default_globals;\n \n fn string_to_ts(string: &str) -> TokenStream {\n     string_to_stream(string.to_owned())"}, {"sha": "872d114fb1800ca6154499b7b074977162082457", "filename": "src/librustc_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -18,6 +18,6 @@ rustc_index = { path = \"../librustc_index\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n lazy_static = \"1\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "595543eaf535fd8f34ce25833e4daa2c622142b2", "filename": "src/librustc_hir/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n use crate::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::hir;\n \n+use rustc_ast::ast;\n+use rustc_ast::ast::NodeId;\n use rustc_macros::HashStable_Generic;\n use rustc_span::hygiene::MacroKind;\n-use syntax::ast;\n-use syntax::ast::NodeId;\n \n use std::fmt::Debug;\n "}, {"sha": "1a74b50b57e7f869ae6a697a1cfebf940dd26434", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -8,6 +8,13 @@ crate use BlockCheckMode::*;\n crate use FnRetTy::*;\n crate use UnsafeSource::*;\n \n+use rustc_ast::ast::{self, AsmDialect, CrateSugar, Ident, Name};\n+use rustc_ast::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n+pub use rustc_ast::ast::{BorrowKind, ImplPolarity, IsAuto};\n+pub use rustc_ast::ast::{CaptureBy, Movability, Mutability};\n+use rustc_ast::node_id::NodeMap;\n+use rustc_ast::tokenstream::TokenStream;\n+use rustc_ast::util::parser::ExprPrecedence;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_errors::FatalError;\n@@ -16,13 +23,6 @@ use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n-use syntax::ast::{self, AsmDialect, CrateSugar, Ident, Name};\n-use syntax::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n-pub use syntax::ast::{BorrowKind, ImplPolarity, IsAuto};\n-pub use syntax::ast::{CaptureBy, Movability, Mutability};\n-use syntax::node_id::NodeMap;\n-use syntax::tokenstream::TokenStream;\n-use syntax::util::parser::ExprPrecedence;\n \n use smallvec::SmallVec;\n use std::collections::{BTreeMap, BTreeSet};"}, {"sha": "45257b04d79076cc15b35050c997f7f27523667d", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -34,9 +34,9 @@\n use crate::hir::*;\n use crate::hir_id::CRATE_HIR_ID;\n use crate::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n+use rustc_ast::ast::{Attribute, Ident, Label, Name};\n+use rustc_ast::walk_list;\n use rustc_span::Span;\n-use syntax::ast::{Attribute, Ident, Label, Name};\n-use syntax::walk_list;\n \n pub struct DeepVisitor<'v, V> {\n     visitor: &'v mut V,"}, {"sha": "fc91b68e3ea444d9ec09ff30a675cd143768134a", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -12,12 +12,12 @@ pub use self::LangItem::*;\n use crate::def_id::DefId;\n use crate::Target;\n \n+use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable_Generic;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast;\n \n use lazy_static::lazy_static;\n "}, {"sha": "0b9ffdf21fe8ef4720a9578a966b0b048c6c9edb", "filename": "src/librustc_hir/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fpat_util.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,8 +1,8 @@\n use crate::def::{CtorOf, DefKind, Res};\n use crate::def_id::DefId;\n use crate::hir::{self, HirId, PatKind};\n+use rustc_ast::ast;\n use rustc_span::Span;\n-use syntax::ast;\n \n use std::iter::{Enumerate, ExactSizeIterator};\n "}, {"sha": "8cbbef959ce75ca4d40f26e4c8c49749cc59120b", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,12 +1,12 @@\n+use rustc_ast::ast;\n+use rustc_ast::util::parser::{self, AssocOp, Fixity};\n use rustc_ast_pretty::pp::Breaks::{Consistent, Inconsistent};\n use rustc_ast_pretty::pp::{self, Breaks};\n use rustc_ast_pretty::pprust::{Comments, PrintState};\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, IdentPrinter};\n use rustc_span::{self, BytePos, FileName};\n use rustc_target::spec::abi::Abi;\n-use syntax::ast;\n-use syntax::util::parser::{self, AssocOp, Fixity};\n \n use crate::hir;\n use crate::hir::{GenericArg, GenericParam, GenericParamKind, Node};"}, {"sha": "3938a0369b924cb8ae19c3b7c425ea0a85447b98", "filename": "src/librustc_hir/stable_hash_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fstable_hash_impls.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -6,7 +6,9 @@ use crate::hir_id::HirId;\n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n /// instead of implementing everything in librustc.\n-pub trait HashStableContext: syntax::HashStableContext + rustc_target::HashStableContext {\n+pub trait HashStableContext:\n+    rustc_ast::HashStableContext + rustc_target::HashStableContext\n+{\n     fn hash_hir_id(&mut self, _: HirId, hasher: &mut StableHasher);\n     fn hash_body_id(&mut self, _: BodyId, hasher: &mut StableHasher);\n     fn hash_reference_to_item(&mut self, _: HirId, hasher: &mut StableHasher);"}, {"sha": "405a31d5a69adc1d779416c735c63d6b42d354be", "filename": "src/librustc_hir/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_hir%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fweak_lang_items.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,9 +3,9 @@\n use crate::def_id::DefId;\n use crate::{lang_items, LangItem, LanguageItems};\n \n+use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::symbol::{sym, Symbol};\n-use syntax::ast;\n \n use lazy_static::lazy_static;\n "}, {"sha": "eddfb81ea8b0aab218b93484f362939e1e5d3f1b", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -17,7 +17,7 @@ rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n rustc_session = { path = \"../librustc_session\" }"}, {"sha": "c82ed0c2c49702ce6fe2359596dba82c3ad79c62", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -38,14 +38,14 @@ use rustc::dep_graph::debug::{DepNodeFilter, EdgeFilter};\n use rustc::dep_graph::{DepGraphQuery, DepKind, DepNode};\n use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{Direction, NodeIndex, INCOMING, OUTGOING};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast;\n \n use std::env;\n use std::fs::{self, File};"}, {"sha": "261540abcad5d85d1fe7bb5cf5a56a0a61070164", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -23,11 +23,11 @@\n \n use rustc::mir::mono::CodegenUnitNameBuilder;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_session::cgu_reuse_tracker::*;\n use rustc_span::symbol::{sym, Symbol};\n use std::collections::BTreeSet;\n-use syntax::ast;\n \n pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {"}, {"sha": "f304292d922e5612bfed7ac6a21eb8b21ea61093", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -16,6 +16,7 @@\n use rustc::dep_graph::{label_strs, DepNode};\n use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast::{self, Attribute, NestedMetaItem};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n@@ -28,7 +29,6 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use std::iter::FromIterator;\n use std::vec::Vec;\n-use syntax::ast::{self, Attribute, NestedMetaItem};\n \n const EXCEPT: Symbol = sym::except;\n const LABEL: Symbol = sym::label;\n@@ -168,7 +168,7 @@ pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n \n         // Note that we cannot use the existing \"unused attribute\"-infrastructure\n         // here, since that is running before codegen. This is also the reason why\n-        // all codegen-specific attributes are `Whitelisted` in syntax::feature_gate.\n+        // all codegen-specific attributes are `Whitelisted` in rustc_ast::feature_gate.\n         all_attrs.report_unchecked_attrs(&dirty_clean_visitor.checked_attrs);\n     })\n }"}, {"sha": "de99214901d9b71b55ebb59dc69549e3f38dadcc", "filename": "src/librustc_infer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -25,4 +25,4 @@ rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "9d06e26d9bb3cbad56fcb8b8e89efe9d1abcdd58", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -39,9 +39,9 @@ use rustc::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, InferConst, Ty, TyCtxt};\n use rustc::ty::{IntType, UintType};\n+use rustc_ast::ast;\n use rustc_hir::def_id::DefId;\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast;\n \n #[derive(Clone)]\n pub struct CombineFields<'infcx, 'tcx> {"}, {"sha": "11b08d468b1b919ed0ce04dac7fe720e14e8edc2", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -25,6 +25,7 @@ use rustc::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use rustc::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use rustc::ty::{ConstVid, FloatVid, IntVid, TyVid};\n \n+use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n@@ -36,7 +37,6 @@ use rustc_span::Span;\n use std::cell::{Cell, Ref, RefCell};\n use std::collections::BTreeMap;\n use std::fmt;\n-use syntax::ast;\n \n use self::combine::CombineFields;\n use self::lexical_region_resolve::LexicalRegionResolutions;"}, {"sha": "471f388f0bb18036ca54fa38780f439f25f1485e", "filename": "src/librustc_infer/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -21,6 +21,7 @@ use rustc::ty::SubtypePredicate;\n use rustc::ty::{\n     self, AdtKind, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n+use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -29,7 +30,6 @@ use rustc_hir::{QPath, TyKind, WhereBoundPredicate, WherePredicate};\n use rustc_span::source_map::SourceMap;\n use rustc_span::{ExpnKind, Span, DUMMY_SP};\n use std::fmt;\n-use syntax::ast;\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn report_fulfillment_errors("}, {"sha": "04d7772de83e01ee80322d308d1fca5f3568d0ae", "filename": "src/librustc_infer/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fon_unimplemented.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,13 +3,13 @@ use fmt_macros::{Parser, Piece, Position};\n use rustc::ty::{self, GenericParamDefKind, TyCtxt};\n use rustc::util::common::ErrorReported;\n \n+use rustc_ast::ast::{MetaItem, NestedMetaItem};\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast::{MetaItem, NestedMetaItem};\n \n #[derive(Clone, Debug)]\n pub struct OnUnimplementedFormatString(Symbol);"}, {"sha": "cbe24320502a203d4c7efecfb3934e267a4b6186", "filename": "src/librustc_infer/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fproject.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -17,11 +17,11 @@ use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n+use rustc_ast::ast::Ident;\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n-use syntax::ast::Ident;\n \n pub use rustc::traits::Reveal;\n "}, {"sha": "d468e28ba4d26657c953fb078adad805fdfe9ac8", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -40,13 +40,13 @@ use rustc::ty::fast_reject;\n use rustc::ty::relate::TypeRelation;\n use rustc::ty::subst::{Subst, SubstsRef};\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n+use rustc_ast::attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::symbol::sym;\n use rustc_target::spec::abi::Abi;\n-use syntax::attr;\n \n use std::cell::{Cell, RefCell};\n use std::cmp;"}, {"sha": "b29480a88109f68e7033f3a2fbeed6188a87f376", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -13,7 +13,7 @@ doctest = false\n log = \"0.4\"\n rayon = { version = \"0.3.0\", package = \"rustc-rayon\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_attr = { path = \"../librustc_attr\" }\n rustc_builtin_macros = { path = \"../librustc_builtin_macros\" }\n rustc_expand = { path = \"../librustc_expand\" }"}, {"sha": "e15217dfa67e60298bfd7df5abc07a72005c12d8", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -7,6 +7,8 @@ use rustc::session::early_error;\n use rustc::session::{DiagnosticOutput, Session};\n use rustc::ty;\n use rustc::util::common::ErrorReported;\n+use rustc_ast::ast::{self, MetaItemKind};\n+use rustc_ast::token;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n@@ -20,8 +22,6 @@ use rustc_span::source_map::{FileLoader, FileName, SourceMap};\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n-use syntax::ast::{self, MetaItemKind};\n-use syntax::token;\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n \n@@ -78,7 +78,7 @@ impl Compiler {\n \n /// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`.\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n-    syntax::with_default_globals(move || {\n+    rustc_ast::with_default_globals(move || {\n         let cfg = cfgspecs\n             .into_iter()\n             .map(|s| {"}, {"sha": "1e9b76c3e14d270f7828f3db1d04e6d0016825c7", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -16,6 +16,8 @@ use rustc::session::Session;\n use rustc::ty::steal::Steal;\n use rustc::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc::util::common::ErrorReported;\n+use rustc_ast::mut_visit::MutVisitor;\n+use rustc_ast::{self, ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::filename_for_metadata;\n@@ -36,8 +38,6 @@ use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_span::symbol::Symbol;\n use rustc_span::FileName;\n use rustc_typeck as typeck;\n-use syntax::mut_visit::MutVisitor;\n-use syntax::{self, ast, visit};\n \n use rustc_serialize::json;\n use tempfile::Builder as TempFileBuilder;"}, {"sha": "076a8cef92cbc4729245003138cab788e24cc718", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_ast::attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::symbol::sym;\n-use syntax::attr;\n \n pub fn find(tcx: TyCtxt<'_>) -> Option<DefId> {\n     tcx.proc_macro_decls_static(LOCAL_CRATE)"}, {"sha": "426d97cc09b9234d43cf7d0abec0033ce3bdedbe", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -8,6 +8,7 @@ use rustc::session::Session;\n use rustc::ty::steal::Steal;\n use rustc::ty::{GlobalCtxt, ResolverOutputs};\n use rustc::util::common::ErrorReported;\n+use rustc_ast::{self, ast};\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::sync::{Lrc, Once, WorkerLocal};\n use rustc_hir::def_id::LOCAL_CRATE;\n@@ -18,7 +19,6 @@ use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n use std::mem;\n use std::rc::Rc;\n-use syntax::{self, ast};\n \n /// Represent the result of a query.\n /// This result can be stolen with the `take` method and generated with the `compute` method."}, {"sha": "1b80cf4e3dbc2d7ed15c65a20bf75a19c8dafa5e", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -18,7 +18,6 @@ use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n use std::path::PathBuf;\n-use syntax;\n \n type CfgSpecs = FxHashSet<(String, Option<String>)>;\n \n@@ -64,7 +63,7 @@ fn mk_map<K: Ord, V>(entries: Vec<(K, V)>) -> BTreeMap<K, V> {\n // When the user supplies --test we should implicitly supply --cfg test\n #[test]\n fn test_switch_implies_cfg_test() {\n-    syntax::with_default_globals(|| {\n+    rustc_ast::with_default_globals(|| {\n         let matches = optgroups().parse(&[\"--test\".to_string()]).unwrap();\n         let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n@@ -75,7 +74,7 @@ fn test_switch_implies_cfg_test() {\n // When the user supplies --test and --cfg test, don't implicitly add another --cfg test\n #[test]\n fn test_switch_implies_cfg_test_unless_cfg_test() {\n-    syntax::with_default_globals(|| {\n+    rustc_ast::with_default_globals(|| {\n         let matches = optgroups().parse(&[\"--test\".to_string(), \"--cfg=test\".to_string()]).unwrap();\n         let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n@@ -87,20 +86,20 @@ fn test_switch_implies_cfg_test_unless_cfg_test() {\n \n #[test]\n fn test_can_print_warnings() {\n-    syntax::with_default_globals(|| {\n+    rustc_ast::with_default_globals(|| {\n         let matches = optgroups().parse(&[\"-Awarnings\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(!sess.diagnostic().can_emit_warnings());\n     });\n \n-    syntax::with_default_globals(|| {\n+    rustc_ast::with_default_globals(|| {\n         let matches =\n             optgroups().parse(&[\"-Awarnings\".to_string(), \"-Dwarnings\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());\n     });\n \n-    syntax::with_default_globals(|| {\n+    rustc_ast::with_default_globals(|| {\n         let matches = optgroups().parse(&[\"-Adead_code\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());"}, {"sha": "10a8c0a63f1882f4bf9da355f93e59320c697d22", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,6 +1,11 @@\n use log::info;\n use rustc::lint;\n use rustc::ty;\n+use rustc_ast::ast::{AttrVec, BlockCheckMode};\n+use rustc_ast::mut_visit::{visit_clobber, MutVisitor, *};\n+use rustc_ast::ptr::P;\n+use rustc_ast::util::lev_distance::find_best_match_for_name;\n+use rustc_ast::{self, ast};\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -29,11 +34,6 @@ use std::path::{Path, PathBuf};\n use std::sync::{Arc, Mutex, Once};\n #[cfg(not(parallel_compiler))]\n use std::{panic, thread};\n-use syntax::ast::{AttrVec, BlockCheckMode};\n-use syntax::mut_visit::{visit_clobber, MutVisitor, *};\n-use syntax::ptr::P;\n-use syntax::util::lev_distance::find_best_match_for_name;\n-use syntax::{self, ast};\n \n /// Adds `target_feature = \"...\"` cfgs for a variety of platform\n /// specific features (SSE, NEON etc.).\n@@ -147,7 +147,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     crate::callbacks::setup_callbacks();\n \n     scoped_thread(cfg, || {\n-        syntax::with_globals(edition, || {\n+        rustc_ast::with_globals(edition, || {\n             ty::tls::GCX_PTR.set(&Lock::new(0), || {\n                 if let Some(stderr) = stderr {\n                     io::set_panic(Some(box Sink(stderr.clone())));\n@@ -183,15 +183,15 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n \n     let with_pool = move |pool: &ThreadPool| pool.install(move || f());\n \n-    syntax::with_globals(edition, || {\n-        syntax::GLOBALS.with(|syntax_globals| {\n+    rustc_ast::with_globals(edition, || {\n+        rustc_ast::GLOBALS.with(|syntax_globals| {\n             rustc_span::GLOBALS.with(|rustc_span_globals| {\n                 // The main handler runs for each Rayon worker thread and sets up\n                 // the thread local rustc uses. syntax_globals and rustc_span_globals are\n                 // captured and set on the new threads. ty::tls::with_thread_locals sets up\n                 // thread local callbacks from librustc_ast\n                 let main_handler = move |thread: ThreadBuilder| {\n-                    syntax::GLOBALS.set(syntax_globals, || {\n+                    rustc_ast::GLOBALS.set(syntax_globals, || {\n                         rustc_span::GLOBALS.set(rustc_span_globals, || {\n                             if let Some(stderr) = stderr {\n                                 io::set_panic(Some(box Sink(stderr.clone())));"}, {"sha": "6470d25fe0a2e99e2449b268edab025071f86327", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -17,7 +17,7 @@ rustc_attr = { path = \"../librustc_attr\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }"}, {"sha": "96526b3dad3eece23bff5d3417cd7b81e965435b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -25,6 +25,10 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc::hir::map::Map;\n use rustc::lint::LintDiagnosticBuilder;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n+use rustc_ast::ast::{self, Expr};\n+use rustc_ast::attr::{self, HasAttrs};\n+use rustc_ast::tokenstream::{TokenStream, TokenTree};\n+use rustc_ast::visit::{FnCtxt, FnKind};\n use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n@@ -41,10 +45,6 @@ use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, Span};\n-use syntax::ast::{self, Expr};\n-use syntax::attr::{self, HasAttrs};\n-use syntax::tokenstream::{TokenStream, TokenTree};\n-use syntax::visit::{FnCtxt, FnKind};\n \n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n@@ -1847,7 +1847,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n         /// Test if this constant is all-0.\n         fn is_zero(expr: &hir::Expr<'_>) -> bool {\n             use hir::ExprKind::*;\n-            use syntax::ast::LitKind::*;\n+            use rustc_ast::ast::LitKind::*;\n             match &expr.kind {\n                 Lit(lit) => {\n                     if let Int(i, _) = lit.node {"}, {"sha": "29a6b8c693ff3c5378cf6a547a4ee3b14f664e6f", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -25,6 +25,8 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n use rustc::ty::layout::{LayoutError, LayoutOf, TyLayout};\n use rustc::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n+use rustc_ast::ast;\n+use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n use rustc_errors::{struct_span_err, Applicability};\n@@ -34,8 +36,6 @@ use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};\n-use syntax::ast;\n-use syntax::util::lev_distance::find_best_match_for_name;\n \n use std::slice;\n "}, {"sha": "ff6e9e000b097457df37cae0ca231978d982c1a7", "filename": "src/librustc_lint/early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fearly.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -16,11 +16,11 @@\n \n use crate::context::{EarlyContext, LintContext, LintStore};\n use crate::passes::{EarlyLintPass, EarlyLintPassObject};\n+use rustc_ast::ast;\n+use rustc_ast::visit as ast_visit;\n use rustc_session::lint::{LintBuffer, LintPass};\n use rustc_session::Session;\n use rustc_span::Span;\n-use syntax::ast;\n-use syntax::visit as ast_visit;\n \n use log::debug;\n use std::slice;"}, {"sha": "db109aef6eb8f20fc466b108bc8f9ad636887c5c", "filename": "src/librustc_lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Finternal.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,13 +2,13 @@\n //! Clippy.\n \n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n+use rustc_ast::ast::{Ident, Item, ItemKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::symbol::{sym, Symbol};\n-use syntax::ast::{Ident, Item, ItemKind};\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,"}, {"sha": "ee03232a0ce4c8390ebcfd319556d068a19c23b7", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -17,15 +17,15 @@\n use crate::{passes::LateLintPassObject, LateContext, LateLintPass, LintStore};\n use rustc::hir::map::Map;\n use rustc::ty::{self, TyCtxt};\n+use rustc_ast::ast;\n+use rustc_ast::walk_list;\n use rustc_data_structures::sync::{join, par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor;\n use rustc_session::lint::LintPass;\n use rustc_span::Span;\n-use syntax::ast;\n-use syntax::walk_list;\n \n use log::debug;\n use std::any::Any;"}, {"sha": "7da69f3ed26f2a516b6ce7c8b61f40f4bc4eb64b", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -5,6 +5,9 @@ use rustc::lint::LintDiagnosticBuilder;\n use rustc::lint::{struct_lint_level, LintLevelMap, LintLevelSets, LintSet, LintSource};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast;\n+use rustc_ast::attr;\n+use rustc_ast::unwrap_or;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability};\n@@ -16,9 +19,6 @@ use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{sym, Symbol};\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::unwrap_or;\n \n use std::cmp;\n "}, {"sha": "895c42a84d8e9e1854a90f0709c747060c03a7e3", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -55,14 +55,14 @@ mod unused;\n \n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_session::lint::builtin::{\n     BARE_TRAIT_OBJECTS, ELIDED_LIFETIMES_IN_PATHS, EXPLICIT_OUTLIVES_REQUIREMENTS,\n     INTRA_DOC_LINK_RESOLUTION_FAILURE, MISSING_DOC_CODE_EXAMPLES, PRIVATE_DOC_TESTS,\n };\n use rustc_span::Span;\n-use syntax::ast;\n \n use array_into_iter::ArrayIntoIter;\n use builtin::*;"}, {"sha": "470fac2675bac479064f88aedb4f2d3f827e0ff1", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,5 +1,5 @@\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n-use syntax::ast;\n+use rustc_ast::ast;\n \n declare_lint! {\n     pub NON_ASCII_IDENTS,"}, {"sha": "b0560dc9fdf9c273e6bb49e691d2263630ab7547", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,5 +1,6 @@\n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::ty;\n+use rustc_ast::ast;\n use rustc_attr as attr;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -9,7 +10,6 @@ use rustc_hir::{GenericParamKind, PatKind};\n use rustc_span::symbol::sym;\n use rustc_span::{symbol::Ident, BytePos, Span};\n use rustc_target::spec::abi::Abi;\n-use syntax::ast;\n \n #[derive(PartialEq)]\n pub enum MethodLateContext {"}, {"sha": "813be2a032f8b29ecd9f3258a9e1bcbb53983ddc", "filename": "src/librustc_lint/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fpasses.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,11 +1,11 @@\n use crate::context::{EarlyContext, LateContext};\n \n+use rustc_ast::ast;\n use rustc_data_structures::sync;\n use rustc_hir as hir;\n use rustc_session::lint::builtin::HardwiredLints;\n use rustc_session::lint::LintPass;\n use rustc_span::Span;\n-use syntax::ast;\n \n #[macro_export]\n macro_rules! late_lint_methods {\n@@ -179,9 +179,9 @@ macro_rules! early_lint_methods {\n             fn check_where_predicate(a: &ast::WherePredicate);\n             fn check_poly_trait_ref(a: &ast::PolyTraitRef,\n                                     b: &ast::TraitBoundModifier);\n-            fn check_fn(a: syntax::visit::FnKind<'_>, c: Span, d_: ast::NodeId);\n+            fn check_fn(a: rustc_ast::visit::FnKind<'_>, c: Span, d_: ast::NodeId);\n             fn check_fn_post(\n-                a: syntax::visit::FnKind<'_>,\n+                a: rustc_ast::visit::FnKind<'_>,\n                 c: Span,\n                 d: ast::NodeId\n             );"}, {"sha": "0b66fd92430acde676eab745a14cb45ccc847bdb", "filename": "src/librustc_lint/redundant_semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fredundant_semicolon.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,6 +1,6 @@\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_ast::ast::{ExprKind, Stmt, StmtKind};\n use rustc_errors::Applicability;\n-use syntax::ast::{ExprKind, Stmt, StmtKind};\n \n declare_lint! {\n     pub REDUNDANT_SEMICOLON,"}, {"sha": "86d93612e993bd0e1609975b50a045e540f8c711", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -5,6 +5,7 @@ use rustc::mir::interpret::{sign_extend, truncate};\n use rustc::ty::layout::{self, IntegerExt, LayoutOf, SizeSkeleton, VariantIdx};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n+use rustc_ast::ast;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -16,7 +17,6 @@ use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n-use syntax::ast;\n \n use log::debug;\n use std::cmp;\n@@ -194,8 +194,8 @@ fn report_bin_hex_error(\n //\n // No suggestion for: `isize`, `usize`.\n fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<&'static str> {\n-    use syntax::ast::IntTy::*;\n-    use syntax::ast::UintTy::*;\n+    use rustc_ast::ast::IntTy::*;\n+    use rustc_ast::ast::UintTy::*;\n     macro_rules! find_fit {\n         ($ty:expr, $val:expr, $negative:expr,\n          $($type:ident => [$($utypes:expr),*] => [$($itypes:expr),*]),+) => {"}, {"sha": "7b6741954d9c8b21d339a68c8a8ac2cc0f88011c", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,6 +1,9 @@\n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::ty::adjustment;\n use rustc::ty::{self, Ty};\n+use rustc_ast::ast;\n+use rustc_ast::attr;\n+use rustc_ast::util::parser;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, Applicability};\n@@ -12,9 +15,6 @@ use rustc_session::lint::builtin::UNUSED_ATTRIBUTES;\n use rustc_span::symbol::Symbol;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, Span};\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::util::parser;\n \n use log::debug;\n \n@@ -469,7 +469,7 @@ impl UnusedParens {\n \n impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        use syntax::ast::ExprKind::*;\n+        use rustc_ast::ast::ExprKind::*;\n         let (value, msg, followed_by_block, left_pos, right_pos) = match e.kind {\n             Let(ref pat, ..) => {\n                 self.check_unused_parens_pat(cx, pat, false, false);"}, {"sha": "8abfb20965e489c74835dc0b0d150075c7af7d1f", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -24,7 +24,7 @@ rustc_target = { path = \"../librustc_target\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n stable_deref_trait = \"1.0.0\"\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_expand = { path = \"../librustc_expand\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "293a353a092d078dc829a4f2620da51a931d97fc", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -10,6 +10,9 @@ use rustc::session::config;\n use rustc::session::search_paths::PathKind;\n use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast;\n+use rustc_ast::attr;\n+use rustc_ast::expand::allocator::{global_allocator_spans, AllocatorKind};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n@@ -20,9 +23,6 @@ use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::expand::allocator::{global_allocator_spans, AllocatorKind};\n \n use log::{debug, info, log_enabled};\n use proc_macro::bridge::client::ProcMacro;"}, {"sha": "a72ee0cbe4729bc7b227db568061e6659820f427", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -34,14 +34,14 @@ use std::u32;\n \n use log::debug;\n use proc_macro::bridge::client::ProcMacro;\n+use rustc_ast::ast::{self, Ident};\n use rustc_attr as attr;\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, ProcMacroDerive};\n use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder};\n use rustc_span::source_map::{self, respan, Spanned};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{self, hygiene::MacroKind, BytePos, Pos, Span, DUMMY_SP};\n-use syntax::ast::{self, Ident};\n \n pub use cstore_impl::{provide, provide_extern};\n "}, {"sha": "50ab3811f523604047c950dcc2d84c889b4c7c8b", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -25,15 +25,15 @@ use smallvec::SmallVec;\n use std::any::Any;\n use std::sync::Arc;\n \n+use rustc_ast::ast;\n+use rustc_ast::attr;\n+use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_ast::ptr::P;\n+use rustc_ast::tokenstream::DelimSpan;\n use rustc_span::source_map;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::Symbol;\n use rustc_span::{FileName, Span};\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::expand::allocator::AllocatorKind;\n-use syntax::ptr::P;\n-use syntax::tokenstream::DelimSpan;\n \n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,"}, {"sha": "418b97b74c805fff467e7eafa35c946b25113aac", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -25,15 +25,15 @@ use rustc_data_structures::sync::Lrc;\n use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder};\n \n use log::{debug, trace};\n+use rustc_ast::ast;\n+use rustc_ast::attr;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, FileName, SourceFile, Span};\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::path::Path;\n use std::u32;\n-use syntax::ast;\n-use syntax::attr;\n \n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};"}, {"sha": "9b05fd4734ca35cb8e7e749635a5d9a4fe8f1b77", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -10,6 +10,7 @@ use rustc::mir;\n use rustc::session::config::SymbolManglingVersion;\n use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, ReprOptions, Ty};\n+use rustc_ast::ast;\n use rustc_attr as attr;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n@@ -22,7 +23,6 @@ use rustc_span::edition::Edition;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, Span};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n-use syntax::ast;\n \n use std::marker::PhantomData;\n use std::num::NonZeroUsize;"}, {"sha": "6e606230b6371c27093e04c12f0cf08e4800fdda", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -28,7 +28,7 @@ rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_target = { path = \"../librustc_target\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "28974dcd08bf6e883ed199dfdca687d621f87ebf", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -28,8 +28,8 @@ use std::collections::BTreeMap;\n use std::mem;\n use std::rc::Rc;\n \n+use rustc_ast::ast::Name;\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast::Name;\n \n use crate::dataflow;\n use crate::dataflow::generic::{Analysis, BorrowckFlowState as Flows, BorrowckResults};"}, {"sha": "3373151f82cc85168e7183a71a61116ae5e43f9e", "filename": "src/librustc_mir/dataflow/generic/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -6,12 +6,12 @@ use std::path::PathBuf;\n \n use rustc::mir::{self, traversal, BasicBlock, Location};\n use rustc::ty::{self, TyCtxt};\n+use rustc_ast::ast;\n use rustc_data_structures::work_queue::WorkQueue;\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_span::symbol::{sym, Symbol};\n-use syntax::ast;\n \n use super::graphviz;\n use super::{Analysis, GenKillAnalysis, GenKillSet, Results};"}, {"sha": "4d86ed9cab25c71ecc1e92aebb2fccb726442521", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,6 +1,6 @@\n+use rustc_ast::ast::{self, MetaItem};\n use rustc_ast_pretty::pprust;\n use rustc_span::symbol::{sym, Symbol};\n-use syntax::ast::{self, MetaItem};\n \n use rustc_data_structures::work_queue::WorkQueue;\n use rustc_index::bit_set::{BitSet, HybridBitSet};"}, {"sha": "1a0be582ce67f4a9572933b7b4c70c56e0d2b845", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,8 +1,8 @@\n use rustc::ty::adjustment::PointerCast;\n use rustc::ty::layout::{self, Size, TyLayout};\n use rustc::ty::{self, Ty, TypeAndMut, TypeFoldable};\n+use rustc_ast::ast::FloatTy;\n use rustc_span::symbol::sym;\n-use syntax::ast::FloatTy;\n \n use rustc::mir::interpret::{InterpResult, PointerArithmetic, Scalar};\n use rustc::mir::CastKind;"}, {"sha": "747b2dd4aa007695319fa08a23e1c934fbd1c35a", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -9,7 +9,7 @@ use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n \n-use syntax::ast::Mutability;\n+use rustc_ast::ast::Mutability;\n \n use super::{AllocId, Allocation, InterpCx, MPlaceTy, Machine, MemoryKind, Scalar, ValueVisitor};\n "}, {"sha": "032a4bd58506d6e2e584e58e534d19590c6187e4", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::layout::{Align, HasDataLayout, Size, TargetDataLayout};\n use rustc::ty::{self, query::TyCtxtAt, Instance, ParamEnv};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n-use syntax::ast::Mutability;\n+use rustc_ast::ast::Mutability;\n \n use super::{\n     AllocId, AllocMap, Allocation, AllocationExtra, CheckInAllocMsg, ErrorHandled, GlobalAlloc,"}, {"sha": "ed2d2243ab41b5388077b328bcefcbc9fc6c7b6f", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -13,8 +13,8 @@ pub use rustc::mir::interpret::ScalarMaybeUndef;\n use rustc::mir::interpret::{\n     sign_extend, truncate, AllocId, ConstValue, GlobalId, InterpResult, Pointer, Scalar,\n };\n+use rustc_ast::ast;\n use rustc_macros::HashStable;\n-use syntax::ast;\n \n /// An `Immediate` represents a single immediate self-contained Rust value.\n ///"}, {"sha": "cd7a419af9508e5fe0713db13159b0f6c21590d4", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::{\n     Ty,\n };\n use rustc_apfloat::Float;\n-use syntax::ast::FloatTy;\n+use rustc_ast::ast::FloatTy;\n \n use super::{ImmTy, Immediate, InterpCx, Machine, PlaceTy};\n "}, {"sha": "2353b74016c2b8de37e85d03e1fd344b5a3e5b23", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -15,12 +15,12 @@ use rustc::mir::interpret::{\n \n use rustc::ty::layout::{Align, Size};\n use rustc::ty::{self, TyCtxt};\n+use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_span::source_map::Span;\n-use syntax::ast::Mutability;\n \n use super::eval_context::{LocalState, StackPopCleanup};\n use super::{"}, {"sha": "654130c6fab9bdef3e780b00220d11506beb2149", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -20,14 +20,14 @@ use rustc::ty::layout::{\n };\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable};\n+use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_infer::traits;\n use rustc_span::Span;\n-use syntax::ast::Mutability;\n \n use crate::const_eval::error_to_const_error;\n use crate::interpret::{"}, {"sha": "57e002bf3f3d65158b51d09a1c6c0b37befde2dd", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,13 +4,13 @@ use rustc::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n use rustc::ty::{InstanceDef, TyCtxt, TypeFoldable};\n+use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_span::Span;\n use std::borrow::Cow;\n-use syntax::ast;\n \n pub mod add_call_guards;\n pub mod add_moves_for_packed_drops;"}, {"sha": "286740f99dde681139e11cf83b572c1e1265be97", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -18,10 +18,10 @@ use rustc::mir::*;\n use rustc::ty::cast::CastTy;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, List, TyCtxt, TypeFoldable};\n+use rustc_ast::ast::LitKind;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast::LitKind;\n \n use rustc_index::vec::{Idx, IndexVec};\n use rustc_target::spec::abi::Abi;"}, {"sha": "2ae7bd4d727294cface8ba81b2684cbaef01b8bd", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,7 +1,7 @@\n+use rustc_ast::ast;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n-use syntax::ast;\n \n use crate::transform::{MirPass, MirSource};\n use rustc::mir::{self, Body, BodyAndCache, Local, Location};"}, {"sha": "d53188a39e5e092a1ca996f788c8d25604a40a00", "filename": "src/librustc_mir_build/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -25,5 +25,5 @@ rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_target = { path = \"../librustc_target\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "e7c7e2b47f28fd0fb50d659f6e0a1ce4fca989bc", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -19,7 +19,7 @@ use rustc_hir::HirId;\n use rustc_index::bit_set::BitSet;\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n-use syntax::ast::Name;\n+use rustc_ast::ast::Name;\n \n // helper functions, broken out by category:\n mod simplify;"}, {"sha": "d5e5398b9d41eb3f7ebe2a9e8427bdc1425b6421", "filename": "src/librustc_mir_build/hair/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,8 +2,8 @@ use rustc::mir::interpret::{\n     truncate, Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n };\n use rustc::ty::{self, layout::Size, ParamEnv, TyCtxt, TyS};\n+use rustc_ast::ast;\n use rustc_span::symbol::Symbol;\n-use syntax::ast;\n \n crate fn lit_to_const<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "449e2e7494697a9552864de884cf1645a7619fb3", "filename": "src/librustc_mir_build/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -11,14 +11,14 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::Subst;\n use rustc::ty::subst::{GenericArg, InternalSubsts};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_ast::ast;\n+use rustc_ast::attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::InferCtxt;\n use rustc_span::symbol::{sym, Symbol};\n-use syntax::ast;\n-use syntax::attr;\n \n #[derive(Clone)]\n crate struct Cx<'a, 'tcx> {"}, {"sha": "edd05ee0aa94ec75007d4a3436462f38aa969fe0", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -6,6 +6,7 @@ use super::{PatCtxt, PatKind, PatternError};\n \n use rustc::hir::map::Map;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_ast::ast::Mutability;\n use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::*;\n@@ -17,7 +18,6 @@ use rustc_session::lint::builtin::{IRREFUTABLE_LET_PATTERNS, UNREACHABLE_PATTERN\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::{sym, Span};\n-use syntax::ast::Mutability;\n \n use std::slice;\n "}, {"sha": "f58216fbb4e76bfdf4c722500d3e0197ded7ab6b", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -16,14 +16,14 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::{GenericArg, SubstsRef};\n use rustc::ty::{self, AdtDef, DefIdTree, Region, Ty, TyCtxt, UserType};\n use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n+use rustc_ast::ast;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n use rustc_hir::RangeEnd;\n use rustc_index::vec::Idx;\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast;\n \n use std::cmp::Ordering;\n use std::fmt;"}, {"sha": "b02cabab0a8fc68505c5924db39e3faf1ebca2a6", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -21,5 +21,5 @@ rustc_errors = { path = \"../librustc_errors\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n unicode-normalization = \"0.1.11\""}, {"sha": "17b9e78e5df4677d4a6f211c39bdff4205e0afb4", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -9,6 +9,11 @@\n //! [#64197]: https://github.com/rust-lang/rust/issues/64197\n \n use crate::{parse_in, validate_attr};\n+use rustc_ast::ast::{self, AttrItem, Attribute, MetaItem};\n+use rustc_ast::attr::HasAttrs;\n+use rustc_ast::mut_visit::*;\n+use rustc_ast::ptr::P;\n+use rustc_ast::util::map_in_place::MapInPlace;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{error_code, struct_span_err, Applicability, Handler};\n@@ -20,11 +25,6 @@ use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::edition::{Edition, ALL_EDITIONS};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast::{self, AttrItem, Attribute, MetaItem};\n-use syntax::attr::HasAttrs;\n-use syntax::mut_visit::*;\n-use syntax::ptr::P;\n-use syntax::util::map_in_place::MapInPlace;\n \n use smallvec::SmallVec;\n "}, {"sha": "f7fb704fcbc2c13c2a5984c742d32a68235ca98f", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,12 +1,12 @@\n+use rustc_ast::token::{self, Token, TokenKind};\n+use rustc_ast::util::comments;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{error_code, DiagnosticBuilder, FatalError};\n use rustc_lexer::unescape;\n use rustc_lexer::Base;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Pos, Span};\n-use syntax::token::{self, Token, TokenKind};\n-use syntax::util::comments;\n \n use log::debug;\n use std::char;"}, {"sha": "6c0acd0302fb1a7a1d2e7764383b0af988df4590", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,15 +1,15 @@\n use super::{StringReader, UnmatchedBrace};\n \n-use rustc_ast_pretty::pprust::token_to_string;\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::PResult;\n-use rustc_span::Span;\n-use syntax::token::{self, Token};\n-use syntax::tokenstream::{\n+use rustc_ast::token::{self, Token};\n+use rustc_ast::tokenstream::{\n     DelimSpan,\n     IsJoint::{self, *},\n     TokenStream, TokenTree, TreeAndJoint,\n };\n+use rustc_ast_pretty::pprust::token_to_string;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::PResult;\n+use rustc_span::Span;\n \n impl<'a> StringReader<'a> {\n     crate fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {"}, {"sha": "25f9f8fd3ad4f076359896e5870be8b05f80e705", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,14 +3,14 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n \n+use rustc_ast::ast;\n+use rustc_ast::token::{self, Nonterminal, Token};\n+use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n use rustc_session::parse::ParseSess;\n use rustc_span::{FileName, SourceFile, Span};\n-use syntax::ast;\n-use syntax::token::{self, Nonterminal, Token};\n-use syntax::tokenstream::{self, TokenStream, TokenTree};\n \n use std::path::{Path, PathBuf};\n use std::str;"}, {"sha": "93de5a33fe344bd04ccd64faff1d4fbfb07788ab", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,11 +1,11 @@\n use super::{Parser, PathStyle, TokenType};\n+use rustc_ast::ast;\n+use rustc_ast::attr;\n+use rustc_ast::token::{self, Nonterminal};\n+use rustc_ast::util::comments;\n use rustc_ast_pretty::pprust;\n use rustc_errors::PResult;\n use rustc_span::{Span, Symbol};\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::token::{self, Nonterminal};\n-use syntax::util::comments;\n \n use log::debug;\n "}, {"sha": "c27b429563acace3b6027ba0a7e6914764ce667b", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,20 +1,20 @@\n use super::ty::AllowPlus;\n use super::{BlockMode, Parser, PathStyle, SemiColonMode, SeqSep, TokenExpectType, TokenType};\n \n+use rustc_ast::ast::{\n+    self, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, Param,\n+};\n+use rustc_ast::ast::{AttrVec, ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::{self, TokenKind};\n+use rustc_ast::util::parser::AssocOp;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err};\n use rustc_errors::{Applicability, DiagnosticBuilder, Handler, PResult};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::kw;\n use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n-use syntax::ast::{\n-    self, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, Param,\n-};\n-use syntax::ast::{AttrVec, ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind};\n-use syntax::ptr::P;\n-use syntax::token::{self, TokenKind};\n-use syntax::util::parser::AssocOp;\n \n use log::{debug, trace};\n use std::mem;"}, {"sha": "703fbbb6a6ea3b7749b4964e5bb75b35aa272912", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,19 +4,19 @@ use super::{BlockMode, Parser, PathStyle, Restrictions, TokenType};\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n+use rustc_ast::ast::{self, AttrStyle, AttrVec, CaptureBy, Field, Ident, Lit, DUMMY_NODE_ID};\n+use rustc_ast::ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, Mac, Param, Ty, TyKind, UnOp};\n+use rustc_ast::ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::{self, Token, TokenKind};\n+use rustc_ast::util::classify;\n+use rustc_ast::util::literal::LitError;\n+use rustc_ast::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{Applicability, PResult};\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n-use syntax::ast::{self, AttrStyle, AttrVec, CaptureBy, Field, Ident, Lit, DUMMY_NODE_ID};\n-use syntax::ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, Mac, Param, Ty, TyKind, UnOp};\n-use syntax::ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n-use syntax::ptr::P;\n-use syntax::token::{self, Token, TokenKind};\n-use syntax::util::classify;\n-use syntax::util::literal::LitError;\n-use syntax::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n \n /// Possibly accepts an `token::Interpolated` expression (a pre-parsed expression\n /// dropped into the token stream, which happens while parsing the result of"}, {"sha": "481dde0a35c5726f208716bad02b7ffa480c184d", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,9 +1,9 @@\n use super::Parser;\n \n+use rustc_ast::ast::{self, Attribute, GenericBounds, GenericParam, GenericParamKind, WhereClause};\n+use rustc_ast::token;\n use rustc_errors::PResult;\n use rustc_span::symbol::{kw, sym};\n-use syntax::ast::{self, Attribute, GenericBounds, GenericParam, GenericParamKind, WhereClause};\n-use syntax::token;\n \n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`."}, {"sha": "692ea0cf5bf23c2054a259936aadaa9297dd60b9", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,19 +4,23 @@ use super::{FollowedByType, Parser, PathStyle};\n \n use crate::maybe_whole;\n \n+use rustc_ast::ast::{self, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n+use rustc_ast::ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind};\n+use rustc_ast::ast::{\n+    Async, Const, Defaultness, IsAuto, PathSegment, Unsafe, UseTree, UseTreeKind,\n+};\n+use rustc_ast::ast::{\n+    BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind,\n+};\n+use rustc_ast::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n+use rustc_ast::ast::{FnHeader, ForeignItem, Mutability, Visibility, VisibilityKind};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, PResult, StashKey};\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n-use syntax::ast::{self, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n-use syntax::ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind};\n-use syntax::ast::{Async, Const, Defaultness, IsAuto, PathSegment, Unsafe, UseTree, UseTreeKind};\n-use syntax::ast::{BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind};\n-use syntax::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n-use syntax::ast::{FnHeader, ForeignItem, Mutability, Visibility, VisibilityKind};\n-use syntax::ptr::P;\n-use syntax::token;\n-use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};\n \n use log::debug;\n use std::mem;"}, {"sha": "63a19d5de540f442323f4c03684c703cd1841552", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -16,19 +16,21 @@ use crate::lexer::UnmatchedBrace;\n use crate::{Directory, DirectoryOwnership};\n \n use log::debug;\n+use rustc_ast::ast::DUMMY_NODE_ID;\n+use rustc_ast::ast::{self, AttrStyle, AttrVec, Const, CrateSugar, Extern, Ident, Unsafe};\n+use rustc_ast::ast::{\n+    Async, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind,\n+};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::{self, DelimToken, Token, TokenKind};\n+use rustc_ast::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n+use rustc_ast::util::comments::{doc_comment_style, strip_doc_comment_decoration};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{FileName, Span, DUMMY_SP};\n-use syntax::ast::DUMMY_NODE_ID;\n-use syntax::ast::{self, AttrStyle, AttrVec, Const, CrateSugar, Extern, Ident, Unsafe};\n-use syntax::ast::{Async, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n-use syntax::ptr::P;\n-use syntax::token::{self, DelimToken, Token, TokenKind};\n-use syntax::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n-use syntax::util::comments::{doc_comment_style, strip_doc_comment_decoration};\n \n use std::path::PathBuf;\n use std::{cmp, mem, slice};"}, {"sha": "4e9a9a5021b5c1a46265fc5f6eff1e55493644f6", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,12 +4,12 @@ use super::Parser;\n \n use crate::{new_sub_parser_from_file, DirectoryOwnership};\n \n+use rustc_ast::ast::{self, Attribute, Crate, Ident, ItemKind, Mod};\n+use rustc_ast::attr;\n+use rustc_ast::token::{self, TokenKind};\n use rustc_errors::PResult;\n use rustc_span::source_map::{FileName, SourceMap, Span, DUMMY_SP};\n use rustc_span::symbol::sym;\n-use syntax::ast::{self, Attribute, Crate, Ident, ItemKind, Mod};\n-use syntax::attr;\n-use syntax::token::{self, TokenKind};\n \n use std::path::{self, Path, PathBuf};\n "}, {"sha": "f379474739785a3e953e78f03ff59193f1c0b925", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,14 +1,16 @@\n use super::{Parser, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n+use rustc_ast::ast::{\n+    self, AttrVec, Attribute, FieldPat, Mac, Pat, PatKind, RangeEnd, RangeSyntax,\n+};\n+use rustc_ast::ast::{BindingMode, Expr, ExprKind, Ident, Mutability, Path, QSelf};\n+use rustc_ast::mut_visit::{noop_visit_mac, noop_visit_pat, MutVisitor};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token;\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult};\n use rustc_span::source_map::{respan, Span, Spanned};\n use rustc_span::symbol::{kw, sym};\n-use syntax::ast::{self, AttrVec, Attribute, FieldPat, Mac, Pat, PatKind, RangeEnd, RangeSyntax};\n-use syntax::ast::{BindingMode, Expr, ExprKind, Ident, Mutability, Path, QSelf};\n-use syntax::mut_visit::{noop_visit_mac, noop_visit_pat, MutVisitor};\n-use syntax::ptr::P;\n-use syntax::token;\n \n type Expected = Option<&'static str>;\n "}, {"sha": "6a71ebe218342f6ba76d2a63d237e5a22f77c724", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,14 +1,16 @@\n use super::ty::{AllowPlus, RecoverQPath};\n use super::{Parser, TokenType};\n use crate::maybe_whole;\n+use rustc_ast::ast::{\n+    self, AngleBracketedArgs, Ident, ParenthesizedArgs, Path, PathSegment, QSelf,\n+};\n+use rustc_ast::ast::{\n+    AnonConst, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode, GenericArg,\n+};\n+use rustc_ast::token::{self, Token};\n use rustc_errors::{pluralize, Applicability, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym};\n-use syntax::ast::{self, AngleBracketedArgs, Ident, ParenthesizedArgs, Path, PathSegment, QSelf};\n-use syntax::ast::{\n-    AnonConst, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode, GenericArg,\n-};\n-use syntax::token::{self, Token};\n \n use log::debug;\n use std::mem;"}, {"sha": "e0d8699442f363d1f5b36ce994048d9e1e1c3668", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -6,15 +6,15 @@ use super::{BlockMode, Parser, Restrictions, SemiColonMode};\n use crate::maybe_whole;\n use crate::DirectoryOwnership;\n \n+use rustc_ast::ast;\n+use rustc_ast::ast::{AttrStyle, AttrVec, Attribute, Mac, MacStmtStyle};\n+use rustc_ast::ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt, StmtKind, DUMMY_NODE_ID};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::{self, TokenKind};\n+use rustc_ast::util::classify;\n use rustc_errors::{Applicability, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym};\n-use syntax::ast;\n-use syntax::ast::{AttrStyle, AttrVec, Attribute, Mac, MacStmtStyle};\n-use syntax::ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt, StmtKind, DUMMY_NODE_ID};\n-use syntax::ptr::P;\n-use syntax::token::{self, TokenKind};\n-use syntax::util::classify;\n \n use std::mem;\n "}, {"sha": "8d100c344fa9046b2021d5988bdc4620cf395217", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,16 +2,16 @@ use super::{Parser, PathStyle, TokenType};\n \n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n \n+use rustc_ast::ast::{self, BareFnTy, FnRetTy, GenericParam, Lifetime, MutTy, Ty, TyKind};\n+use rustc_ast::ast::{\n+    GenericBound, GenericBounds, PolyTraitRef, TraitBoundModifier, TraitObjectSyntax,\n+};\n+use rustc_ast::ast::{Mac, Mutability};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::{self, Token, TokenKind};\n use rustc_errors::{pluralize, struct_span_err, Applicability, PResult};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym};\n-use syntax::ast::{self, BareFnTy, FnRetTy, GenericParam, Lifetime, MutTy, Ty, TyKind};\n-use syntax::ast::{\n-    GenericBound, GenericBounds, PolyTraitRef, TraitBoundModifier, TraitObjectSyntax,\n-};\n-use syntax::ast::{Mac, Mutability};\n-use syntax::ptr::P;\n-use syntax::token::{self, Token, TokenKind};\n \n /// Any `?` or `?const` modifiers that appear at the start of a bound.\n struct BoundModifiers {"}, {"sha": "029aa5ed2baea81fc4b2f87acf8653becb364c5b", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,13 +2,13 @@\n \n use crate::parse_in;\n \n+use rustc_ast::ast::{self, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n+use rustc_ast::tokenstream::DelimSpan;\n use rustc_errors::{Applicability, PResult};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_session::lint::builtin::ILL_FORMED_ATTRIBUTE_INPUT;\n use rustc_session::parse::ParseSess;\n use rustc_span::{sym, Symbol};\n-use syntax::ast::{self, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n-use syntax::tokenstream::DelimSpan;\n \n pub fn check_meta(sess: &ParseSess, attr: &Attribute) {\n     if attr.is_doc_comment() {"}, {"sha": "af8e7a5b71e46a86b4417fbbb41cc7bfa4609c28", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -20,5 +20,5 @@ rustc_index = { path = \"../librustc_index\" }\n rustc_infer = { path = \"../librustc_infer\" }\n rustc_session = { path = \"../librustc_session\" }\n rustc_target = { path = \"../librustc_target\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "f1ed074d6ab7708e8a618417597ee7a8722b09f1", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -8,6 +8,8 @@ use rustc::hir::map::Map;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n \n+use rustc_ast::ast::{Attribute, NestedMetaItem};\n+use rustc_ast::attr;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -19,8 +21,6 @@ use rustc_session::lint::builtin::{CONFLICTING_REPR_HINTS, UNUSED_ATTRIBUTES};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast::{Attribute, NestedMetaItem};\n-use syntax::attr;\n \n fn target_from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>) -> Target {\n     match impl_item.kind {"}, {"sha": "53e8213ae4807795254b0888082df6e07ce89a80", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -13,12 +13,12 @@ use rustc::session::config::nightly_options;\n use rustc::session::parse::feature_err;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast::Mutability;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::{sym, Span, Symbol};\n-use syntax::ast::Mutability;\n \n use std::fmt;\n "}, {"sha": "bcf9fd5a5353fdf16cc12aa213d2a0dce1a06033", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -15,8 +15,8 @@ use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{Node, PatKind, TyKind};\n use rustc_session::lint;\n \n+use rustc_ast::{ast, attr};\n use rustc_span::symbol::sym;\n-use syntax::{ast, attr};\n \n // Any local node that may call something in its body block should be\n // explored. For example, if it's a live Node::Item that is a"}, {"sha": "ae23e9e35f93e42df91cbcb1800cb0d6605afbee", "filename": "src/librustc_passes/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostic_items.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -11,12 +11,12 @@\n \n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::symbol::{sym, Symbol};\n-use syntax::ast;\n \n struct DiagnosticItemCollector<'tcx> {\n     // items from this crate"}, {"sha": "f2239ad16eeb329c1e5938dabd96456ff1c5d7f4", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,14 +3,14 @@ use rustc::session::config::EntryFnType;\n use rustc::session::{config, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_ast::attr;\n+use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ImplItem, Item, ItemKind, TraitItem};\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::attr;\n-use syntax::entry::EntryPointType;\n \n struct EntryContext<'a, 'tcx> {\n     session: &'a Session,"}, {"sha": "c819809041f280d46bdba14fd18a8d0e299fb259", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,13 +4,13 @@\n \n use rustc::hir::map::Map;\n use rustc::util::common::to_readable_str;\n+use rustc_ast::ast::{self, AttrId, NodeId};\n+use rustc_ast::visit as ast_visit;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::HirId;\n use rustc_span::Span;\n-use syntax::ast::{self, AttrId, NodeId};\n-use syntax::visit as ast_visit;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n enum Id {"}, {"sha": "9f6598a0ec1fe6727b54e443067a5a184779278d", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -7,12 +7,12 @@ use rustc::ty::layout::TyLayout;\n use rustc::ty::ParamEnv;\n use rustc::ty::Ty;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast::Attribute;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::ItemKind;\n use rustc_span::symbol::sym;\n-use syntax::ast::Attribute;\n \n pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {"}, {"sha": "172d7e7628e2157c4649aa97c72460c1a112a4e2", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -8,12 +8,12 @@ use rustc::hir::map::Map;\n use rustc::middle::lib_features::LibFeatures;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast::{Attribute, MetaItem, MetaItemKind};\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n-use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n \n fn new_lib_features() -> LibFeatures {\n     LibFeatures { stable: Default::default(), unstable: Default::default() }"}, {"sha": "43b615dee9811f3f2783d82d5755050e6dafea59", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -100,6 +100,7 @@ use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n+use rustc_ast::ast;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -109,7 +110,6 @@ use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet, Node};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast;\n \n use std::collections::VecDeque;\n use std::io;"}, {"sha": "e636144794ab6e6ec8d2cd5c5abc1c5de706234e", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -10,6 +10,7 @@ use rustc::hir::map::Map;\n use rustc::middle::region::*;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -18,7 +19,6 @@ use rustc_hir::{Arm, Block, Expr, Local, Node, Pat, PatKind, Stmt};\n use rustc_index::vec::Idx;\n use rustc_span::source_map;\n use rustc_span::Span;\n-use syntax::walk_list;\n \n use std::mem;\n "}, {"sha": "5eae935f050e177e91fe5fd0e6e5a4ee67c85f8f", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -9,6 +9,7 @@ use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast::Attribute;\n use rustc_attr::{self as attr, ConstStability, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n@@ -20,7 +21,6 @@ use rustc_hir::{Generics, HirId, Item, StructField, Variant};\n use rustc_infer::traits::misc::can_type_implement_copy;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use syntax::ast::Attribute;\n \n use std::cmp::Ordering;\n use std::mem::replace;"}, {"sha": "893130725902103e7b024cb06f2c411e37162b60", "filename": "src/librustc_plugin_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_plugin_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_plugin_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -16,5 +16,5 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "03e58d758c5b5fe335c8622e0159097039be7b8e", "filename": "src/librustc_plugin_impl/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_plugin_impl%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_plugin_impl%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fbuild.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,12 +2,12 @@\n \n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_ast::attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::attr;\n \n struct RegistrarFinder {\n     registrars: Vec<(hir::HirId, Span)>,"}, {"sha": "9bd9bcb25ba8825025bc4de8e5046c6bf037d7dd", "filename": "src/librustc_plugin_impl/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_plugin_impl%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_plugin_impl%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fload.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,11 +3,11 @@\n use crate::Registry;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::session::Session;\n+use rustc_ast::ast::{Crate, Ident};\n use rustc_errors::struct_span_err;\n use rustc_metadata::locator;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast::{Crate, Ident};\n \n use std::borrow::ToOwned;\n use std::env;"}, {"sha": "6d1272c117b4d919f03c578f7dde3800366fdcbc", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -14,7 +14,7 @@ rustc_attr = { path = \"../librustc_attr\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n log = \"0.4\""}, {"sha": "8edadc44875442bf0d48aff9de3bb183e0407f05", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -11,6 +11,7 @@ use rustc::ty::fold::TypeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n+use rustc_ast::ast::Ident;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n@@ -22,7 +23,6 @@ use rustc_hir::{AssocItemKind, HirIdSet, Node, PatKind};\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n-use syntax::ast::Ident;\n \n use std::marker::PhantomData;\n use std::{cmp, fmt, mem};"}, {"sha": "11a3cedcc74e9a656f28c4d3b91e3b7036d7fcb8", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -13,7 +13,7 @@ doctest = false\n [dependencies]\n bitflags = \"1.2.1\"\n log = \"0.4\"\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n arena = { path = \"../libarena\" }\n rustc = { path = \"../librustc\" }\n rustc_ast_lowering = { path = \"../librustc_ast_lowering\" }"}, {"sha": "86816fd9f3a2a6981b223d514efe102bd4c660bb", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -20,6 +20,11 @@ use rustc::bug;\n use rustc::hir::exports::Export;\n use rustc::middle::cstore::CrateStore;\n use rustc::ty;\n+use rustc_ast::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n+use rustc_ast::ast::{AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n+use rustc_ast::ast::{Ident, Name};\n+use rustc_ast::token::{self, Token};\n+use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_attr as attr;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n@@ -32,11 +37,6 @@ use rustc_span::hygiene::{ExpnId, MacroKind};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n-use syntax::ast::{AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n-use syntax::ast::{Ident, Name};\n-use syntax::token::{self, Token};\n-use syntax::visit::{self, AssocCtxt, Visitor};\n \n use log::debug;\n use std::cell::Cell;"}, {"sha": "659a54b169b3974f91a1787ec53ba7b15bd85572", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -27,13 +27,13 @@ use crate::imports::ImportDirectiveSubclass;\n use crate::Resolver;\n \n use rustc::{lint, ty};\n+use rustc_ast::ast;\n+use rustc_ast::node_id::NodeMap;\n+use rustc_ast::visit::{self, Visitor};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::pluralize;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n-use syntax::ast;\n-use syntax::node_id::NodeMap;\n-use syntax::visit::{self, Visitor};\n \n struct UnusedImport<'a> {\n     use_tree: &'a ast::UseTree,"}, {"sha": "2e687c88941fac1a95a3a8a42438ae0963959295", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,13 +1,13 @@\n use log::debug;\n use rustc::hir::map::definitions::*;\n+use rustc_ast::ast::*;\n+use rustc_ast::token::{self, Token};\n+use rustc_ast::visit;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def_id::DefIndex;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n-use syntax::ast::*;\n-use syntax::token::{self, Token};\n-use syntax::visit;\n \n crate fn collect_definitions(\n     definitions: &mut Definitions,"}, {"sha": "6d9c78cddf2227ee245f3e5a2e71ce1e99e0f7b2", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,6 +4,8 @@ use log::debug;\n use rustc::bug;\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n+use rustc_ast::ast::{self, Ident, Path};\n+use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n@@ -15,8 +17,6 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, MultiSpan, Span};\n-use syntax::ast::{self, Ident, Path};\n-use syntax::util::lev_distance::find_best_match_for_name;\n \n use crate::imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n use crate::path_names_to_string;"}, {"sha": "9198c74d89a4c829c5342172282dfaf5e68cb5d5", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -15,6 +15,9 @@ use rustc::hir::exports::Export;\n use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc::ty;\n use rustc::{bug, span_bug};\n+use rustc_ast::ast::{Ident, Name, NodeId};\n+use rustc_ast::unwrap_or;\n+use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n@@ -25,9 +28,6 @@ use rustc_session::DiagnosticMessageId;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::kw;\n use rustc_span::{MultiSpan, Span};\n-use syntax::ast::{Ident, Name, NodeId};\n-use syntax::unwrap_or;\n-use syntax::util::lev_distance::find_best_match_for_name;\n \n use log::*;\n "}, {"sha": "e5aa9c7d8962a3a73114406a7bd6f71c660bb74c", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -12,6 +12,11 @@ use crate::{Module, ModuleOrUniformRoot, NameBindingKind, ParentScope, PathResul\n use crate::{ResolutionError, Resolver, Segment, UseError};\n \n use rustc::{bug, lint, span_bug};\n+use rustc_ast::ast::*;\n+use rustc_ast::ptr::P;\n+use rustc_ast::util::lev_distance::find_best_match_for_name;\n+use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n+use rustc_ast::{unwrap_or, walk_list};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::DiagnosticId;\n use rustc_hir::def::Namespace::{self, *};\n@@ -21,11 +26,6 @@ use rustc_hir::TraitCandidate;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n-use syntax::ast::*;\n-use syntax::ptr::P;\n-use syntax::util::lev_distance::find_best_match_for_name;\n-use syntax::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n-use syntax::{unwrap_or, walk_list};\n \n use log::debug;\n use std::collections::BTreeSet;"}, {"sha": "817a276ff3e73fab9ef2f37d3018492eebec3ac9", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -6,6 +6,8 @@ use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n use rustc::session::config::nightly_options;\n+use rustc_ast::ast::{self, Expr, ExprKind, Ident, Item, ItemKind, NodeId, Path, Ty, TyKind};\n+use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -16,8 +18,6 @@ use rustc_hir::PrimTy;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n-use syntax::ast::{self, Expr, ExprKind, Ident, Item, ItemKind, NodeId, Path, Ty, TyKind};\n-use syntax::util::lev_distance::find_best_match_for_name;\n \n use log::debug;\n "}, {"sha": "463452e45ce99b00a9692f0f621b292311105152", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -11,6 +11,9 @@ use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc::{bug, span_bug};\n+use rustc_ast::ast;\n+use rustc_ast::attr;\n+use rustc_ast::walk_list;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -24,9 +27,6 @@ use rustc_span::Span;\n use std::borrow::Cow;\n use std::cell::Cell;\n use std::mem::{replace, take};\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::walk_list;\n \n use log::debug;\n \n@@ -2719,7 +2719,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             span_bug!(\n                 lifetime_ref.span,\n                 \"lifetime reference not renumbered, \\\n-                 probably a bug in syntax::fold\"\n+                 probably a bug in rustc_ast::fold\"\n             );\n         }\n "}, {"sha": "44eba0d533d3afda42a21981fde60437b48cfca1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -23,6 +23,13 @@ use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc::span_bug;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, DefIdTree, ResolverOutputs};\n+use rustc_ast::ast::{self, FloatTy, Ident, IntTy, Name, NodeId, UintTy};\n+use rustc_ast::ast::{Crate, CRATE_NODE_ID};\n+use rustc_ast::ast::{ItemKind, Path};\n+use rustc_ast::attr;\n+use rustc_ast::node_id::{NodeMap, NodeSet};\n+use rustc_ast::unwrap_or;\n+use rustc_ast::visit::{self, Visitor};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;\n@@ -41,13 +48,6 @@ use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparen\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast::{self, FloatTy, Ident, IntTy, Name, NodeId, UintTy};\n-use syntax::ast::{Crate, CRATE_NODE_ID};\n-use syntax::ast::{ItemKind, Path};\n-use syntax::attr;\n-use syntax::node_id::{NodeMap, NodeSet};\n-use syntax::unwrap_or;\n-use syntax::visit::{self, Visitor};\n \n use log::debug;\n use std::cell::{Cell, RefCell};"}, {"sha": "e11aec906693ecca29ffa137bbbbca48e0e88296", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -10,6 +10,7 @@ use rustc::middle::stability;\n use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::{lint, span_bug, ty};\n+use rustc_ast::ast::{self, Ident, NodeId};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, StabilityLevel};\n use rustc_data_structures::fx::FxHashSet;\n@@ -24,7 +25,6 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast::{self, Ident, NodeId};\n \n use rustc_data_structures::sync::Lrc;\n use rustc_span::hygiene::{AstPass, MacroKind};"}, {"sha": "0f4cc4192b626fe2a1ead11ad548db0c9c9d4805", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -17,7 +17,7 @@ rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_parse = { path = \"../librustc_parse\" }\n serde_json = \"1\"\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n rls-data = \"0.19\"\n rls-span = \"0.5\""}, {"sha": "e8cd5ea832db05581adf8e2e2e28e978d9b13030", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -16,17 +16,17 @@\n use rustc::session::config::Input;\n use rustc::span_bug;\n use rustc::ty::{self, DefIdTree, TyCtxt};\n+use rustc_ast::ast::{self, Attribute, NodeId, PatKind};\n+use rustc_ast::ptr::P;\n+use rustc_ast::token;\n+use rustc_ast::visit::{self, Visitor};\n+use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust::{bounds_to_string, generic_params_to_string, ty_to_string};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::{DefKind as HirDefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_span::source_map::{respan, DUMMY_SP};\n use rustc_span::*;\n-use syntax::ast::{self, Attribute, NodeId, PatKind};\n-use syntax::ptr::P;\n-use syntax::token;\n-use syntax::visit::{self, Visitor};\n-use syntax::walk_list;\n \n use std::env;\n use std::path::Path;\n@@ -1260,7 +1260,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n     }\n \n     fn visit_item(&mut self, item: &'l ast::Item) {\n-        use syntax::ast::ItemKind::*;\n+        use rustc_ast::ast::ItemKind::*;\n         self.process_macro_use(item.span);\n         match item.kind {\n             Use(ref use_tree) => {"}, {"sha": "dddee1c99268e06762f37504c9ed64b6ab9b143e", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -13,6 +13,9 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc::{bug, span_bug};\n+use rustc_ast::ast::{self, Attribute, NodeId, PatKind, DUMMY_NODE_ID};\n+use rustc_ast::util::comments::strip_doc_comment_decoration;\n+use rustc_ast::visit::{self, Visitor};\n use rustc_ast_pretty::pprust::{self, param_to_string, ty_to_string};\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n use rustc_hir as hir;\n@@ -21,9 +24,6 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_span::source_map::Spanned;\n use rustc_span::*;\n-use syntax::ast::{self, Attribute, NodeId, PatKind, DUMMY_NODE_ID};\n-use syntax::util::comments::strip_doc_comment_decoration;\n-use syntax::visit::{self, Visitor};\n \n use std::cell::Cell;\n use std::default::Default;"}, {"sha": "4e5ff9aa197deebe44473cf311461dd0b9dcbe2f", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -29,9 +29,9 @@ use crate::{id_from_def_id, id_from_node_id, SaveContext};\n \n use rls_data::{SigElement, Signature};\n \n+use rustc_ast::ast::{self, Extern, NodeId};\n use rustc_ast_pretty::pprust;\n use rustc_hir::def::{DefKind, Res};\n-use syntax::ast::{self, Extern, NodeId};\n \n pub fn item_signature(item: &ast::Item, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {"}, {"sha": "152435206fec43b872aed7f1bdf41c9a69a5ed48", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,8 +1,8 @@\n use crate::generated_code;\n use rustc::session::Session;\n+use rustc_ast::token::{self, TokenKind};\n use rustc_parse::lexer::{self, StringReader};\n use rustc_span::*;\n-use syntax::token::{self, TokenKind};\n \n #[derive(Clone)]\n pub struct SpanUtils<'a> {"}, {"sha": "3895d0f8061c0f7e4cc92227e8eedfdb4b729821", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -19,4 +19,4 @@ rustc_span = { path = \"../librustc_span\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n num_cpus = \"1.0\"\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "3b79972ccbf5b7ce729198c70aa3244913d07253", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,8 +1,8 @@\n pub use self::Level::*;\n+use rustc_ast::node_id::{NodeId, NodeMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n-use syntax::node_id::{NodeId, NodeMap};\n \n pub mod builtin;\n "}, {"sha": "387d35422c43e8090582f8c3b2c76058145e5818", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,6 +2,7 @@\n //! It also serves as an input to the parser itself.\n \n use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n+use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc, Once};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n@@ -11,7 +12,6 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{MultiSpan, Span, Symbol};\n-use syntax::node_id::NodeId;\n \n use std::path::PathBuf;\n use std::str;"}, {"sha": "3fdbb4e68057d1eee1ec897ff3da5e848c6380d7", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -15,7 +15,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_target = { path = \"../librustc_target\" }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n chalk-engine = { version = \"0.9.0\", default-features=false }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "12325ad706f0a3f0a636733a179e83a0d4149491", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -9,12 +9,12 @@ use rustc::traits::{\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, List, TyCtxt};\n+use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::sym;\n-use syntax::ast;\n \n use std::iter;\n "}, {"sha": "51a9b259c8f70927f2b556d56d421fbf156a4f24", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -20,7 +20,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-syntax = { path = \"../librustc_ast\", package = \"rustc_ast\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_infer = { path = \"../librustc_infer\" }"}, {"sha": "bef14d3f4a37b288ece32ac6d9f8cfd81055158f", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -16,6 +16,8 @@ use rustc::session::{parse::feature_err, Session};\n use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, Const, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n+use rustc_ast::ast;\n+use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n use rustc_hir as hir;\n@@ -32,8 +34,6 @@ use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use smallvec::SmallVec;\n-use syntax::ast;\n-use syntax::util::lev_distance::find_best_match_for_name;\n \n use std::collections::BTreeSet;\n use std::iter;"}, {"sha": "67bfb090253f0ac17297003417d4f1a9f8244ae2", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -10,8 +10,8 @@ use rustc_hir as hir;\n use rustc_infer::infer::{InferCtxt, InferOk};\n use rustc_infer::traits::{self, TraitEngine};\n \n+use rustc_ast::ast::Ident;\n use rustc_span::Span;\n-use syntax::ast::Ident;\n \n use std::iter;\n "}, {"sha": "3f8019e64b2db3a1130e7d01ff6fcbc8ce8b7894", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -6,6 +6,7 @@ use crate::type_error_struct;\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_ast::ast::Ident;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -14,7 +15,6 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::{infer, traits};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n-use syntax::ast::Ident;\n \n /// Checks that it is legal to call methods of the trait corresponding\n /// to `trait_id` (this only cares about the trait, not the specific"}, {"sha": "ff100c261f14aaf6444eac232e14760bf9618e1e", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -41,12 +41,12 @@ use rustc::ty::cast::{CastKind, CastTy};\n use rustc::ty::error::TypeError;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeAndMut, TypeFoldable};\n+use rustc_ast::ast;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_infer::traits;\n use rustc_infer::traits::error_reporting::report_object_safety_error;\n use rustc_span::Span;\n-use syntax::ast;\n \n /// Reifies a cast check to be checked once we have full type information for\n /// a function context."}, {"sha": "0c5f3d3e99d75e274635a27da38d46e038c40d06", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,12 +4,12 @@ use rustc_infer::traits::{self, ObligationCause};\n \n use rustc::ty::adjustment::AllowTwoPhase;\n use rustc::ty::{self, AssocItem, Ty};\n+use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, print, Node};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::util::parser::PREC_POSTFIX;\n \n use super::method::probe;\n "}, {"sha": "124d0f4b73164f34d332a527b110df70d4e33781", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -23,6 +23,8 @@ use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoB\n use rustc::ty::Ty;\n use rustc::ty::TypeFoldable;\n use rustc::ty::{AdtKind, Visibility};\n+use rustc_ast::ast;\n+use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n@@ -35,8 +37,6 @@ use rustc_infer::traits::{self, ObligationCauseCode};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use syntax::ast;\n-use syntax::util::lev_distance::find_best_match_for_name;\n \n use std::fmt::Display;\n "}, {"sha": "9b8d88e94b60b0d0f2c8095b3f9cc16e3e20faa8", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -15,6 +15,7 @@ use rustc::ty::subst::Subst;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TypeFoldable, WithConstness};\n+use rustc_ast::ast;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -23,7 +24,6 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer::{self, InferOk};\n use rustc_infer::traits;\n use rustc_span::Span;\n-use syntax::ast;\n \n use self::probe::{IsSuggestion, ProbeScope};\n "}, {"sha": "a52cabd8894779b4e023916118b1d8829cbb8bbc", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -16,6 +16,8 @@ use rustc::ty::GenericParamDefKind;\n use rustc::ty::{\n     self, ParamEnvAnd, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n+use rustc_ast::ast;\n+use rustc_ast::util::lev_distance::{find_best_match_for_name, lev_distance};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n@@ -35,8 +37,6 @@ use std::cmp::max;\n use std::iter;\n use std::mem;\n use std::ops::Deref;\n-use syntax::ast;\n-use syntax::util::lev_distance::{find_best_match_for_name, lev_distance};\n \n use smallvec::{smallvec, SmallVec};\n "}, {"sha": "33fecb81b60c892c47c0a51b1b6ef8f30a588a32", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -7,6 +7,8 @@ use rustc::hir::map as hir_map;\n use rustc::hir::map::Map;\n use rustc::ty::print::with_crate_prefix;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n+use rustc_ast::ast;\n+use rustc_ast::util::lev_distance;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -18,8 +20,6 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::traits::Obligation;\n use rustc_span::symbol::kw;\n use rustc_span::{source_map, FileName, Span};\n-use syntax::ast;\n-use syntax::util::lev_distance;\n \n use std::cmp::Ordering;\n "}, {"sha": "317574ed963da46e1998252c4f64513d6f01b5ad", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -106,6 +106,8 @@ use rustc::ty::{\n     self, AdtKind, CanonicalUserType, Const, GenericParamDefKind, RegionKind, ToPolyTraitRef,\n     ToPredicate, Ty, TyCtxt, UserType, WithConstness,\n };\n+use rustc_ast::ast;\n+use rustc_ast::util::parser::ExprPrecedence;\n use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -130,8 +132,6 @@ use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{self, BytePos, MultiSpan, Span};\n use rustc_target::spec::abi::Abi;\n-use syntax::ast;\n-use syntax::util::parser::ExprPrecedence;\n \n use std::cell::{Cell, Ref, RefCell, RefMut};\n use std::cmp;"}, {"sha": "bf3511a26143cc1d1ef40b46dbe51f2022675e2d", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -5,11 +5,11 @@ use super::{FnCtxt, Needs};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::TyKind::{Adt, Array, Char, FnDef, Never, Ref, Str, Tuple, Uint};\n use rustc::ty::{self, Ty, TypeFoldable};\n+use rustc_ast::ast::Ident;\n use rustc_errors::{self, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_span::Span;\n-use syntax::ast::Ident;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Checks a `a <op>= b`"}, {"sha": "b7aac707a9838835458a543fc2c8d052c4d8755b", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,6 +1,8 @@\n use crate::check::FnCtxt;\n use rustc::ty::subst::GenericArg;\n use rustc::ty::{self, BindingMode, Ty, TypeFoldable};\n+use rustc_ast::ast;\n+use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -12,8 +14,6 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::traits::{ObligationCause, Pattern};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{Span, Spanned};\n-use syntax::ast;\n-use syntax::util::lev_distance::find_best_match_for_name;\n \n use std::cmp;\n use std::collections::hash_map::Entry::{Occupied, Vacant};"}, {"sha": "b5ed6335dc011873e45405c97e5ab8a85806d3fd", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -37,14 +37,14 @@ use crate::mem_categorization as mc;\n use crate::mem_categorization::PlaceBase;\n use rustc::hir::map::Map;\n use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n+use rustc_ast::ast;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_infer::infer::UpvarRegion;\n use rustc_span::Span;\n-use syntax::ast;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn closure_analyze(&self, body: &'tcx hir::Body<'tcx>) {"}, {"sha": "e8e34a4e8f0791d8cc8939f1f61b2c87324f91b2", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -7,6 +7,7 @@ use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{\n     self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n+use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::def_id::DefId;\n@@ -15,7 +16,6 @@ use rustc_infer::infer::opaque_types::may_define_opaque_type;\n use rustc_infer::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast;\n \n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ParItemLikeVisitor;"}, {"sha": "3517e09133c280038b7f7394d1219be9c905f943", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,13 +1,13 @@\n use crate::lint;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::visibility_qualified;\n use rustc_span::Span;\n-use syntax::ast;\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = DefIdSet::default();"}, {"sha": "60e5df68b5842cb7c1545f15ed129255d3743266", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -13,8 +13,8 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n \n+use rustc_ast::ast;\n use rustc_span::Span;\n-use syntax::ast;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n pub fn crate_inherent_impls(tcx: TyCtxt<'_>, crate_num: CrateNum) -> &CrateInherentImpls {"}, {"sha": "74111f8864e6bdbafcc2d686436bcae8767ac31c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -31,6 +31,8 @@ use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::{ReprOptions, ToPredicate, WithConstness};\n+use rustc_ast::ast;\n+use rustc_ast::ast::{Ident, MetaItemKind};\n use rustc_attr::{list_contains_name, mark_used, InlineAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -43,8 +45,6 @@ use rustc_hir::{GenericParamKind, Node, Unsafety};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n-use syntax::ast;\n-use syntax::ast::{Ident, MetaItemKind};\n \n mod type_of;\n \n@@ -2554,7 +2554,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n }\n \n fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<usize> {\n-    use syntax::ast::{Lit, LitIntType, LitKind};\n+    use rustc_ast::ast::{Lit, LitIntType, LitKind};\n     let meta_item_list = attr.meta_item_list();\n     let meta_item_list: Option<&[ast::NestedMetaItem]> = meta_item_list.as_ref().map(Vec::as_ref);\n     let sole_meta_list = match meta_item_list {"}, {"sha": "775d600fc3d4bdf443b347501c2bfaece1129a40", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -7,10 +7,10 @@ use std::fmt::{self, Write};\n use std::mem;\n use std::ops;\n \n+use rustc_ast::ast::{LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n use rustc_feature::Features;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n-use syntax::ast::{LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n \n use rustc_span::Span;\n "}, {"sha": "3b26742e716f86fc9d5246e596a2a458121b26b5", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n use super::*;\n \n+use rustc_ast::ast::*;\n+use rustc_ast::attr;\n+use rustc_ast::with_default_globals;\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n-use syntax::ast::*;\n-use syntax::attr;\n-use syntax::with_default_globals;\n \n fn word_cfg(s: &str) -> Cfg {\n     Cfg::Cfg(Symbol::intern(s), None)"}, {"sha": "618dfa0d33aae5bd68e6daa7bef40ef8a9382b9e", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,6 +3,7 @@\n use std::iter::once;\n \n use rustc::ty;\n+use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -13,7 +14,6 @@ use rustc_mir::const_eval::is_min_const_fn;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast;\n \n use crate::clean::{self, GetDefId, ToSource, TypeKind};\n use crate::core::DocContext;"}, {"sha": "0b26a17e2d55f1af354868770d104857b46c0dd5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -15,6 +15,7 @@ use rustc::middle::stability;\n use rustc::ty::fold::TypeFolder;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n+use rustc_ast::ast::{self, Ident};\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n@@ -27,7 +28,6 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{self, Pos};\n use rustc_typeck::hir_ty_to_ty;\n-use syntax::ast::{self, Ident};\n \n use std::collections::hash_map::Entry;\n use std::default::Default;"}, {"sha": "9c3bedfe37c7a8563c0d14db3228658bf00b3ba9", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -11,6 +11,9 @@ use std::{slice, vec};\n use rustc::middle::lang_items;\n use rustc::middle::stability;\n use rustc::ty::layout::VariantIdx;\n+use rustc_ast::ast::{self, AttrStyle, Ident};\n+use rustc_ast::attr;\n+use rustc_ast::util::comments::strip_doc_comment_decoration;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -22,9 +25,6 @@ use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{self, FileName};\n use rustc_target::spec::abi::Abi;\n-use syntax::ast::{self, AttrStyle, Ident};\n-use syntax::attr;\n-use syntax::util::comments::strip_doc_comment_decoration;\n \n use crate::clean::cfg::Cfg;\n use crate::clean::external_path;\n@@ -421,7 +421,7 @@ pub struct Attributes {\n impl Attributes {\n     /// Extracts the content from an attribute `#[doc(cfg(content))]`.\n     pub fn extract_cfg(mi: &ast::MetaItem) -> Option<&ast::MetaItem> {\n-        use syntax::ast::NestedMetaItem::MetaItem;\n+        use rustc_ast::ast::NestedMetaItem::MetaItem;\n \n         if let ast::MetaItemKind::List(ref nmis) = mi.kind {\n             if nmis.len() == 1 {"}, {"sha": "8bc34e949f175649cd0ec54e72eb92aac4d2c31e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -14,13 +14,13 @@ use rustc_interface::interface;\n use rustc_resolve as resolve;\n use rustc_session::lint;\n \n+use rustc_ast::ast::CRATE_NODE_ID;\n use rustc_attr as attr;\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n-use syntax::ast::CRATE_NODE_ID;\n \n use rustc_data_structures::sync::{self, Lrc};\n use std::cell::RefCell;"}, {"sha": "becdeaba50f782dd241275557256b19a8cf207fd", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,10 +2,10 @@\n //! manner (and with prettier names) before cleaning.\n pub use self::StructType::*;\n \n+use rustc_ast::ast;\n+use rustc_ast::ast::Name;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::{self, Span};\n-use syntax::ast;\n-use syntax::ast::Name;\n \n use rustc_hir as hir;\n use rustc_hir::def_id::CrateNum;"}, {"sha": "0b4bb304fe9e05ae378f8af7c8d7a73e156f601d", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -11,12 +11,12 @@ use std::fmt::Display;\n use std::io;\n use std::io::prelude::*;\n \n+use rustc_ast::token::{self, Token};\n use rustc_parse::lexer;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{FileName, Span};\n-use syntax::token::{self, Token};\n \n /// Highlights `src`, returning the HTML output.\n pub fn render_with_highlighting("}, {"sha": "4aa3fa39fb4ba6b01eba5dbbb4e2dd9539378567", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -44,6 +44,7 @@ use std::sync::Arc;\n \n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n+use rustc_ast::ast;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -57,7 +58,6 @@ use rustc_span::source_map::FileName;\n use rustc_span::symbol::{sym, Symbol};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n-use syntax::ast;\n \n use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy};\n use crate::config::RenderOptions;"}, {"sha": "4ea14ab9077c6dff2702e54c3ea41178a4159e4c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -17,7 +17,7 @@\n extern crate env_logger;\n extern crate getopts;\n extern crate rustc;\n-extern crate rustc_ast as syntax;\n+extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n extern crate rustc_data_structures;"}, {"sha": "d4a7f3313a49b19844947642f5935f5114b9537a", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,9 +3,9 @@ use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n use crate::passes::Pass;\n \n+use rustc_ast::attr;\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n-use syntax::attr;\n \n use std::collections::BTreeMap;\n use std::ops;"}, {"sha": "3e0ff0b3d9a676c1f9f7d8589e816b011034b8b7", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,10 +1,10 @@\n+use rustc_ast::token;\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n use rustc_parse::lexer::StringReader as Lexer;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{FileName, InnerSpan};\n-use syntax::token;\n \n use crate::clean;\n use crate::core::DocContext;"}, {"sha": "ad121a667daf5f49afa1a9ce3159b271b725d57d", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,5 +1,6 @@\n use rustc::lint;\n use rustc::ty;\n+use rustc_ast::ast::{self, Ident};\n use rustc_errors::Applicability;\n use rustc_expand::base::SyntaxExtensionKind;\n use rustc_feature::UnstableFeatures;\n@@ -13,7 +14,6 @@ use rustc_hir::def_id::DefId;\n use rustc_resolve::ParentScope;\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n-use syntax::ast::{self, Ident};\n \n use std::ops::Range;\n \n@@ -60,7 +60,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         &self,\n         path_str: &str,\n         current_item: &Option<String>,\n-        module_id: syntax::ast::NodeId,\n+        module_id: rustc_ast::ast::NodeId,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n         let cx = self.cx;\n \n@@ -896,20 +896,20 @@ fn handle_variant(\n }\n \n const PRIMITIVES: &[(&str, Res)] = &[\n-    (\"u8\", Res::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::U8))),\n-    (\"u16\", Res::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::U16))),\n-    (\"u32\", Res::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::U32))),\n-    (\"u64\", Res::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::U64))),\n-    (\"u128\", Res::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::U128))),\n-    (\"usize\", Res::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::Usize))),\n-    (\"i8\", Res::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::I8))),\n-    (\"i16\", Res::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::I16))),\n-    (\"i32\", Res::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::I32))),\n-    (\"i64\", Res::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::I64))),\n-    (\"i128\", Res::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::I128))),\n-    (\"isize\", Res::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::Isize))),\n-    (\"f32\", Res::PrimTy(hir::PrimTy::Float(syntax::ast::FloatTy::F32))),\n-    (\"f64\", Res::PrimTy(hir::PrimTy::Float(syntax::ast::FloatTy::F64))),\n+    (\"u8\", Res::PrimTy(hir::PrimTy::Uint(rustc_ast::ast::UintTy::U8))),\n+    (\"u16\", Res::PrimTy(hir::PrimTy::Uint(rustc_ast::ast::UintTy::U16))),\n+    (\"u32\", Res::PrimTy(hir::PrimTy::Uint(rustc_ast::ast::UintTy::U32))),\n+    (\"u64\", Res::PrimTy(hir::PrimTy::Uint(rustc_ast::ast::UintTy::U64))),\n+    (\"u128\", Res::PrimTy(hir::PrimTy::Uint(rustc_ast::ast::UintTy::U128))),\n+    (\"usize\", Res::PrimTy(hir::PrimTy::Uint(rustc_ast::ast::UintTy::Usize))),\n+    (\"i8\", Res::PrimTy(hir::PrimTy::Int(rustc_ast::ast::IntTy::I8))),\n+    (\"i16\", Res::PrimTy(hir::PrimTy::Int(rustc_ast::ast::IntTy::I16))),\n+    (\"i32\", Res::PrimTy(hir::PrimTy::Int(rustc_ast::ast::IntTy::I32))),\n+    (\"i64\", Res::PrimTy(hir::PrimTy::Int(rustc_ast::ast::IntTy::I64))),\n+    (\"i128\", Res::PrimTy(hir::PrimTy::Int(rustc_ast::ast::IntTy::I128))),\n+    (\"isize\", Res::PrimTy(hir::PrimTy::Int(rustc_ast::ast::IntTy::Isize))),\n+    (\"f32\", Res::PrimTy(hir::PrimTy::Float(rustc_ast::ast::FloatTy::F32))),\n+    (\"f64\", Res::PrimTy(hir::PrimTy::Float(rustc_ast::ast::FloatTy::F64))),\n     (\"str\", Res::PrimTy(hir::PrimTy::Str)),\n     (\"bool\", Res::PrimTy(hir::PrimTy::Bool)),\n     (\"char\", Res::PrimTy(hir::PrimTy::Char)),"}, {"sha": "b63dbbf80d86421939f50ec0e37f72ea093aaefa", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,6 +1,8 @@\n use rustc::hir::map::Map;\n use rustc::session::{self, config, DiagnosticOutput};\n use rustc::util::common::ErrorReported;\n+use rustc_ast::ast;\n+use rustc_ast::with_globals;\n use rustc_data_structures::sync::Lrc;\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n@@ -17,8 +19,6 @@ use std::panic;\n use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n use std::str;\n-use syntax::ast;\n-use syntax::with_globals;\n use tempfile::Builder as TempFileBuilder;\n \n use crate::clean::Attributes;"}, {"sha": "8f2f88d08bf7a94727d76d9619b8c112ab47ed73", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,6 +3,7 @@\n \n use rustc::middle::privacy::AccessLevel;\n use rustc::ty::TyCtxt;\n+use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -12,7 +13,6 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{self, Span};\n-use syntax::ast;\n \n use std::mem;\n "}, {"sha": "1b6a38acb1c30454c140a274caebd6b9bd8f1593", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -9,7 +9,7 @@ extern crate rustc_lint;\n #[macro_use]\n extern crate rustc_session;\n extern crate rustc_span;\n-extern crate syntax;\n+extern crate rustc_ast;\n \n use rustc_ast_pretty::pprust;\n use rustc_driver::plugin::Registry;"}, {"sha": "4936bdb1ece8c715bd963ca9c247b29a2256df84", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -9,12 +9,12 @@ extern crate rustc_span;\n extern crate rustc_lint;\n #[macro_use]\n extern crate rustc_session;\n-extern crate syntax;\n+extern crate rustc_ast;\n \n use rustc_driver::plugin::Registry;\n use rustc_lint::{LateContext, LateLintPass, LintContext, LintPass};\n use rustc_span::symbol::Symbol;\n-use syntax::attr;\n+use rustc_ast::attr;\n \n macro_rules! fake_lint_pass {\n     ($struct:ident, $($attr:expr),*) => {"}, {"sha": "32b7ed9dfe2c86c76fa5b3de6ba6d6eb507d2cca", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -10,12 +10,12 @@ extern crate rustc_lint;\n #[macro_use]\n extern crate rustc_session;\n extern crate rustc_span;\n-extern crate syntax;\n+extern crate rustc_ast;\n \n use rustc_driver::plugin::Registry;\n use rustc_lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc_span::symbol::Symbol;\n-use syntax::attr;\n+use rustc_ast::attr;\n \n declare_lint! {\n     CRATE_NOT_OKAY,"}, {"sha": "bb2a4d03734de7afb6c8bcc303f854ea9832d729", "filename": "src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -3,7 +3,7 @@\n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n \n-extern crate syntax;\n+extern crate rustc_ast;\n \n // Load rustc as a plugin to get macros\n extern crate rustc_driver;\n@@ -14,7 +14,7 @@ extern crate rustc_session;\n \n use rustc_driver::plugin::Registry;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use syntax::ast;\n+use rustc_ast::ast;\n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n \n declare_lint_pass!(Pass => [TEST_LINT]);"}, {"sha": "8c517e2bb5d54f279eb63f505b3589efe7358fd4", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n \n-extern crate syntax;\n+extern crate rustc_ast;\n \n // Load rustc as a plugin to get macros\n extern crate rustc_driver;\n@@ -12,7 +12,7 @@ extern crate rustc_session;\n \n use rustc_driver::plugin::Registry;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintId, LintPass};\n-use syntax::ast;\n+use rustc_ast::ast;\n declare_tool_lint!(pub clippy::TEST_LINT, Warn, \"Warn about stuff\");\n declare_tool_lint!(\n     /// Some docs"}, {"sha": "56a560acbb44a26c16c58444e7322df5e6100add", "filename": "src/test/ui-fulldeps/auxiliary/macro-crate-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fmacro-crate-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fmacro-crate-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fmacro-crate-test.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,7 +4,7 @@\n #![crate_type = \"proc-macro\"]\n #![feature(rustc_private)]\n \n-extern crate syntax;\n+extern crate rustc_ast;\n extern crate rustc;\n extern crate rustc_driver;\n extern crate proc_macro;"}, {"sha": "1046355a3433f6e18e85fd58f8d87927afc588d2", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(rustc_private)]\n \n-extern crate syntax;\n+extern crate rustc_ast;\n extern crate rustc_parse;\n extern crate rustc_session;\n extern crate rustc_span;\n@@ -18,7 +18,7 @@ use std::path::Path;\n mod gravy;\n \n pub fn main() {\n-    syntax::with_default_globals(|| parse());\n+    rustc_ast::with_default_globals(|| parse());\n \n     assert_eq!(gravy::foo(), 10);\n }"}, {"sha": "365ae301c0fb5f43c8d9d6406608e0b93f865fc3", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -21,7 +21,7 @@\n \n extern crate rustc_ast_pretty;\n extern crate rustc_data_structures;\n-extern crate syntax;\n+extern crate rustc_ast;\n extern crate rustc_parse;\n extern crate rustc_session;\n extern crate rustc_span;\n@@ -32,9 +32,9 @@ use rustc_parse::new_parser_from_source_str;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{Spanned, DUMMY_SP, FileName};\n use rustc_span::source_map::FilePathMapping;\n-use syntax::ast::*;\n-use syntax::mut_visit::{self, MutVisitor, visit_clobber};\n-use syntax::ptr::P;\n+use rustc_ast::ast::*;\n+use rustc_ast::mut_visit::{self, MutVisitor, visit_clobber};\n+use rustc_ast::ptr::P;\n \n fn parse_expr(ps: &ParseSess, src: &str) -> Option<P<Expr>> {\n     let src_as_string = src.to_string();\n@@ -205,7 +205,7 @@ impl MutVisitor for AddParens {\n }\n \n fn main() {\n-    syntax::with_default_globals(|| run());\n+    rustc_ast::with_default_globals(|| run());\n }\n \n fn run() {"}, {"sha": "e2520d978908dc14804830008581c73e2032c1a3", "filename": "src/test/ui/regions/regions-trait-object-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-1.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // This is a regression test for something that only came up while\n // attempting to bootstrap librustc_ast; it is adapted from\n-// `syntax::ext::tt::generic_extension`.\n+// `rustc_ast::ext::tt::generic_extension`.\n \n \n pub struct E<'a> {"}, {"sha": "9c6be50c5c7bd90c5d7842b85bcda12e51fcbcdc", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unique-type-id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -4,7 +4,7 @@\n //\n //    error: internal compiler error: get_unique_type_id_of_type() -\n //    unexpected type: closure,\n-//    Closure(syntax::ast::DefId{krate: 0, node: 66},\n+//    Closure(rustc_ast::ast::DefId{krate: 0, node: 66},\n //    ReScope(63))\n //\n // This is a regression test for issue #17021."}, {"sha": "3335816f09f0e6a90b6fd9e00a0a24dba3575ef8", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08c279eacfd37b8921378c8bd4ef8b8dc9bd176/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=e08c279eacfd37b8921378c8bd4ef8b8dc9bd176", "patch": "@@ -2,8 +2,8 @@\n #![deny(warnings)]\n \n extern crate env_logger;\n+extern crate rustc_ast;\n extern crate rustc_span;\n-extern crate syntax;\n \n use std::cell::RefCell;\n use std::collections::BTreeMap;\n@@ -285,7 +285,7 @@ fn parse_args() -> (OutputFormat, PathBuf) {\n fn main() {\n     env_logger::init();\n     let (format, dst) = parse_args();\n-    let result = syntax::with_default_globals(move || main_with_result(format, &dst));\n+    let result = rustc_ast::with_default_globals(move || main_with_result(format, &dst));\n     if let Err(e) = result {\n         panic!(\"{}\", e.to_string());\n     }"}]}