{"sha": "281a5382262af7f6d5d9caf677b4c7f2315dd359", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MWE1MzgyMjYyYWY3ZjZkNWQ5Y2FmNjc3YjRjN2YyMzE1ZGQzNTk=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-01T19:03:36Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-01T19:03:36Z"}, "message": "Move futex syscall to its own file.", "tree": {"sha": "3222796ba6ff1db580fa41e32efe165c9ec082d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3222796ba6ff1db580fa41e32efe165c9ec082d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/281a5382262af7f6d5d9caf677b4c7f2315dd359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/281a5382262af7f6d5d9caf677b4c7f2315dd359", "html_url": "https://github.com/rust-lang/rust/commit/281a5382262af7f6d5d9caf677b4c7f2315dd359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/281a5382262af7f6d5d9caf677b4c7f2315dd359/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ffc5bb5633dd9bf3a38766fbf78ddc76d8b0bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffc5bb5633dd9bf3a38766fbf78ddc76d8b0bc8", "html_url": "https://github.com/rust-lang/rust/commit/1ffc5bb5633dd9bf3a38766fbf78ddc76d8b0bc8"}], "stats": {"total": 122, "additions": 63, "deletions": 59}, "files": [{"sha": "2241b8d4b3b145063891df1224f50d242518fd4d", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/281a5382262af7f6d5d9caf677b4c7f2315dd359/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281a5382262af7f6d5d9caf677b4c7f2315dd359/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=281a5382262af7f6d5d9caf677b4c7f2315dd359", "patch": "@@ -1,9 +1,9 @@\n use rustc_middle::mir;\n-use rustc_target::abi::{Align, Size};\n \n use crate::*;\n use crate::helpers::check_arg_count;\n use shims::posix::fs::EvalContextExt as _;\n+use shims::posix::linux::sync::futex;\n use shims::posix::sync::EvalContextExt as _;\n use shims::posix::thread::EvalContextExt as _;\n \n@@ -201,61 +201,3 @@ fn getrandom<'tcx>(\n     this.write_scalar(Scalar::from_machine_usize(len, this), dest)?;\n     Ok(())\n }\n-\n-fn futex<'tcx>(\n-    this: &mut MiriEvalContext<'_, 'tcx>,\n-    args: &[OpTy<'tcx, Tag>],\n-    dest: PlaceTy<'tcx, Tag>,\n-) -> InterpResult<'tcx> {\n-    if args.len() < 4 {\n-        throw_ub_format!(\"incorrect number of arguments for futex syscall: got {}, expected at least 4\", args.len());\n-    }\n-    let addr = this.read_scalar(args[1])?.check_init()?;\n-    let op = this.read_scalar(args[2])?.to_i32()?;\n-    let val = this.read_scalar(args[3])?.to_i32()?;\n-\n-    this.memory.check_ptr_access(addr, Size::from_bytes(4), Align::from_bytes(4).unwrap())?;\n-\n-    let addr = addr.assert_ptr();\n-\n-    let thread = this.get_active_thread();\n-\n-    let futex_private = this.eval_libc_i32(\"FUTEX_PRIVATE_FLAG\")?;\n-    let futex_wait = this.eval_libc_i32(\"FUTEX_WAIT\")?;\n-    let futex_wake = this.eval_libc_i32(\"FUTEX_WAKE\")?;\n-\n-    match op & !futex_private {\n-        op if op == futex_wait => {\n-            if args.len() < 5 {\n-                throw_ub_format!(\"incorrect number of arguments for FUTEX_WAIT syscall: got {}, expected at least 5\", args.len());\n-            }\n-            let timeout = this.read_scalar(args[4])?.check_init()?;\n-            if !this.is_null(timeout)? {\n-                throw_ub_format!(\"miri does not support timeouts for futex operations\");\n-            }\n-            let futex_val = this.read_scalar_at_offset(args[1], 0, this.machine.layouts.i32)?.to_i32()?;\n-            if val == futex_val {\n-                this.block_thread(thread);\n-                this.futex_wait(addr, thread);\n-            } else {\n-                let eagain = this.eval_libc(\"EAGAIN\")?;\n-                this.set_last_error(eagain)?;\n-            }\n-        }\n-        op if op == futex_wake => {\n-            let mut n = 0;\n-            for _ in 0..val {\n-                if let Some(thread) = this.futex_wake(addr) {\n-                    this.unblock_thread(thread);\n-                    n += 1;\n-                } else {\n-                    break;\n-                }\n-            }\n-            this.write_scalar(Scalar::from_i32(n), dest)?;\n-        }\n-        op => throw_unsup_format!(\"miri does not support SYS_futex operation {}\", op),\n-    }\n-\n-    Ok(())\n-}"}, {"sha": "eba4a517cf5dc5b0c07675b43704f5d19d10e411", "filename": "src/shims/posix/linux/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/281a5382262af7f6d5d9caf677b4c7f2315dd359/src%2Fshims%2Fposix%2Flinux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281a5382262af7f6d5d9caf677b4c7f2315dd359/src%2Fshims%2Fposix%2Flinux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fmod.rs?ref=281a5382262af7f6d5d9caf677b4c7f2315dd359", "patch": "@@ -1,2 +1,3 @@\n pub mod foreign_items;\n pub mod dlsym;\n+pub mod sync;"}, {"sha": "f9cfb3b8a2b0e65f9d0cf2ba8d07e40aa7a32bc0", "filename": "src/shims/posix/linux/sync.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/281a5382262af7f6d5d9caf677b4c7f2315dd359/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281a5382262af7f6d5d9caf677b4c7f2315dd359/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fsync.rs?ref=281a5382262af7f6d5d9caf677b4c7f2315dd359", "patch": "@@ -0,0 +1,61 @@\n+use crate::*;\n+use rustc_target::abi::{Align, Size};\n+\n+/// Implementation of the SYS_futex syscall.\n+pub fn futex<'tcx>(\n+    this: &mut MiriEvalContext<'_, 'tcx>,\n+    args: &[OpTy<'tcx, Tag>],\n+    dest: PlaceTy<'tcx, Tag>,\n+) -> InterpResult<'tcx> {\n+    if args.len() < 4 {\n+        throw_ub_format!(\"incorrect number of arguments for futex syscall: got {}, expected at least 4\", args.len());\n+    }\n+    let addr = this.read_scalar(args[1])?.check_init()?;\n+    let op = this.read_scalar(args[2])?.to_i32()?;\n+    let val = this.read_scalar(args[3])?.to_i32()?;\n+\n+    this.memory.check_ptr_access(addr, Size::from_bytes(4), Align::from_bytes(4).unwrap())?;\n+\n+    let addr = addr.assert_ptr();\n+\n+    let thread = this.get_active_thread();\n+\n+    let futex_private = this.eval_libc_i32(\"FUTEX_PRIVATE_FLAG\")?;\n+    let futex_wait = this.eval_libc_i32(\"FUTEX_WAIT\")?;\n+    let futex_wake = this.eval_libc_i32(\"FUTEX_WAKE\")?;\n+\n+    match op & !futex_private {\n+        op if op == futex_wait => {\n+            if args.len() < 5 {\n+                throw_ub_format!(\"incorrect number of arguments for FUTEX_WAIT syscall: got {}, expected at least 5\", args.len());\n+            }\n+            let timeout = this.read_scalar(args[4])?.check_init()?;\n+            if !this.is_null(timeout)? {\n+                throw_ub_format!(\"miri does not support timeouts for futex operations\");\n+            }\n+            let futex_val = this.read_scalar_at_offset(args[1], 0, this.machine.layouts.i32)?.to_i32()?;\n+            if val == futex_val {\n+                this.block_thread(thread);\n+                this.futex_wait(addr, thread);\n+            } else {\n+                let eagain = this.eval_libc(\"EAGAIN\")?;\n+                this.set_last_error(eagain)?;\n+            }\n+        }\n+        op if op == futex_wake => {\n+            let mut n = 0;\n+            for _ in 0..val {\n+                if let Some(thread) = this.futex_wake(addr) {\n+                    this.unblock_thread(thread);\n+                    n += 1;\n+                } else {\n+                    break;\n+                }\n+            }\n+            this.write_scalar(Scalar::from_i32(n), dest)?;\n+        }\n+        op => throw_unsup_format!(\"miri does not support SYS_futex operation {}\", op),\n+    }\n+\n+    Ok(())\n+}"}]}