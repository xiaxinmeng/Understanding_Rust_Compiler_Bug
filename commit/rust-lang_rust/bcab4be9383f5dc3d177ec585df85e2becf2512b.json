{"sha": "bcab4be9383f5dc3d177ec585df85e2becf2512b", "node_id": "C_kwDOAAsO6NoAKGJjYWI0YmU5MzgzZjVkYzNkMTc3ZWM1ODVkZjg1ZTJiZWNmMjUxMmI", "commit": {"author": {"name": "Kartavya Vashishtha", "email": "sendtokartavya@gmail.com", "date": "2022-08-07T12:08:20Z"}, "committer": {"name": "Kartavya Vashishtha", "email": "sendtokartavya@gmail.com", "date": "2022-08-07T12:08:20Z"}, "message": "regenerate files with new syntax", "tree": {"sha": "3f07a19a6658e9f9823aa77ac53e9c59ef72b2bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f07a19a6658e9f9823aa77ac53e9c59ef72b2bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcab4be9383f5dc3d177ec585df85e2becf2512b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE+fRQYdEX7Emd36W/pQASwjJOXfAFAmLvqzQACgkQpQASwjJO\nXfAs5g//W3a3co/dvS+GtogLHMWk1jM40Bo+nlyHH0zawQn0P/VK/2Detfme+RMf\njOHZckV2ZSJf8yYvNAApLqBkQAYsFYWTbnFj1JHkgow9QhjqRrqj005hrTXyDnar\n+NE654ZDTIjwCYCH7ePMlw/KOx8F+NRbpysxhoqSv077uicTylLZnYe4kgELMoN0\nxE1+EjtfBbO2ZL7wBjISDHKnbT6NFu5ViNEiBCwetmzCJ4qUC42GvS6qNjvVAYKX\n15vTkDqG9YKQOWKw8sl4Hhi8eWZlN5GOs+37thATKSRau4hPYx0lwGnwAtpa5V/W\nK0k4sjjIWY2+4P2KfApcA2N4c8jREncmw9qs9oUZjLhE42xeqDWGIa3IYWV3lTWK\ngSsTRRpQLy4H7rsuP/l2Pq2ve1SvgD7o0r9OHIfQBZfo7eeFdtaE6F61tTwDuKJi\nplcvNMZqAdqlyDzHEEF1W/543BegTCZ9MV5v7fVdXkJjhhclhUTOAt1kU2Igmd6e\nZjpyGctTpfuV2tq501kGPK8GK5h5isuS63v5Po3lCqNisKbo1cPwJ0+KV7MjCc1e\nddJuHtrLL9Mfep+MwgC6gXSy80U5iAZjxv9b82+edJAz1FukzT2ZPZ63mbOU+u89\n3ndn7xEuWYwjTs+dI/OmZAy9eaL7J7xfecWptG2jkmp+u7WkMAo=\n=fmti\n-----END PGP SIGNATURE-----", "payload": "tree 3f07a19a6658e9f9823aa77ac53e9c59ef72b2bc\nparent a3fc4dbb04e9e9fd639ad5c0988af6c9c540b9a0\nauthor Kartavya Vashishtha <sendtokartavya@gmail.com> 1659874100 +0530\ncommitter Kartavya Vashishtha <sendtokartavya@gmail.com> 1659874100 +0530\n\nregenerate files with new syntax\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcab4be9383f5dc3d177ec585df85e2becf2512b", "html_url": "https://github.com/rust-lang/rust/commit/bcab4be9383f5dc3d177ec585df85e2becf2512b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcab4be9383f5dc3d177ec585df85e2becf2512b/comments", "author": {"login": "DesmondWillowbrook", "id": 51814158, "node_id": "MDQ6VXNlcjUxODE0MTU4", "avatar_url": "https://avatars.githubusercontent.com/u/51814158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesmondWillowbrook", "html_url": "https://github.com/DesmondWillowbrook", "followers_url": "https://api.github.com/users/DesmondWillowbrook/followers", "following_url": "https://api.github.com/users/DesmondWillowbrook/following{/other_user}", "gists_url": "https://api.github.com/users/DesmondWillowbrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesmondWillowbrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesmondWillowbrook/subscriptions", "organizations_url": "https://api.github.com/users/DesmondWillowbrook/orgs", "repos_url": "https://api.github.com/users/DesmondWillowbrook/repos", "events_url": "https://api.github.com/users/DesmondWillowbrook/events{/privacy}", "received_events_url": "https://api.github.com/users/DesmondWillowbrook/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DesmondWillowbrook", "id": 51814158, "node_id": "MDQ6VXNlcjUxODE0MTU4", "avatar_url": "https://avatars.githubusercontent.com/u/51814158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesmondWillowbrook", "html_url": "https://github.com/DesmondWillowbrook", "followers_url": "https://api.github.com/users/DesmondWillowbrook/followers", "following_url": "https://api.github.com/users/DesmondWillowbrook/following{/other_user}", "gists_url": "https://api.github.com/users/DesmondWillowbrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesmondWillowbrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesmondWillowbrook/subscriptions", "organizations_url": "https://api.github.com/users/DesmondWillowbrook/orgs", "repos_url": "https://api.github.com/users/DesmondWillowbrook/repos", "events_url": "https://api.github.com/users/DesmondWillowbrook/events{/privacy}", "received_events_url": "https://api.github.com/users/DesmondWillowbrook/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3fc4dbb04e9e9fd639ad5c0988af6c9c540b9a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fc4dbb04e9e9fd639ad5c0988af6c9c540b9a0", "html_url": "https://github.com/rust-lang/rust/commit/a3fc4dbb04e9e9fd639ad5c0988af6c9c540b9a0"}], "stats": {"total": 540, "additions": 345, "deletions": 195}, "files": [{"sha": "c84f45f1f8e4ec0f059a484354a45fc042fb2e0a", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 107, "deletions": 23, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/bcab4be9383f5dc3d177ec585df85e2becf2512b/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcab4be9383f5dc3d177ec585df85e2becf2512b/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=bcab4be9383f5dc3d177ec585df85e2becf2512b", "patch": "@@ -262,33 +262,117 @@ pub enum SyntaxKind {\n use self::SyntaxKind::*;\n impl SyntaxKind {\n     pub fn is_keyword(self) -> bool {\n-        match self {\n-            AS_KW | ASYNC_KW | AWAIT_KW | BOX_KW | BREAK_KW | CONST_KW | CONTINUE_KW | CRATE_KW\n-            | DYN_KW | ELSE_KW | ENUM_KW | EXTERN_KW | FALSE_KW | FN_KW | FOR_KW | IF_KW\n-            | IMPL_KW | IN_KW | LET_KW | LOOP_KW | MACRO_KW | MATCH_KW | MOD_KW | MOVE_KW\n-            | MUT_KW | PUB_KW | REF_KW | RETURN_KW | SELF_KW | SELF_TYPE_KW | STATIC_KW\n-            | STRUCT_KW | SUPER_KW | TRAIT_KW | TRUE_KW | TRY_KW | TYPE_KW | UNSAFE_KW | USE_KW\n-            | WHERE_KW | WHILE_KW | YIELD_KW | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW\n-            | RAW_KW | MACRO_RULES_KW => true,\n-            _ => false,\n-        }\n+        matches!(\n+            self,\n+            AS_KW\n+                | ASYNC_KW\n+                | AWAIT_KW\n+                | BOX_KW\n+                | BREAK_KW\n+                | CONST_KW\n+                | CONTINUE_KW\n+                | CRATE_KW\n+                | DYN_KW\n+                | ELSE_KW\n+                | ENUM_KW\n+                | EXTERN_KW\n+                | FALSE_KW\n+                | FN_KW\n+                | FOR_KW\n+                | IF_KW\n+                | IMPL_KW\n+                | IN_KW\n+                | LET_KW\n+                | LOOP_KW\n+                | MACRO_KW\n+                | MATCH_KW\n+                | MOD_KW\n+                | MOVE_KW\n+                | MUT_KW\n+                | PUB_KW\n+                | REF_KW\n+                | RETURN_KW\n+                | SELF_KW\n+                | SELF_TYPE_KW\n+                | STATIC_KW\n+                | STRUCT_KW\n+                | SUPER_KW\n+                | TRAIT_KW\n+                | TRUE_KW\n+                | TRY_KW\n+                | TYPE_KW\n+                | UNSAFE_KW\n+                | USE_KW\n+                | WHERE_KW\n+                | WHILE_KW\n+                | YIELD_KW\n+                | AUTO_KW\n+                | DEFAULT_KW\n+                | EXISTENTIAL_KW\n+                | UNION_KW\n+                | RAW_KW\n+                | MACRO_RULES_KW\n+        )\n     }\n     pub fn is_punct(self) -> bool {\n-        match self {\n-            SEMICOLON | COMMA | L_PAREN | R_PAREN | L_CURLY | R_CURLY | L_BRACK | R_BRACK\n-            | L_ANGLE | R_ANGLE | AT | POUND | TILDE | QUESTION | DOLLAR | AMP | PIPE | PLUS\n-            | STAR | SLASH | CARET | PERCENT | UNDERSCORE | DOT | DOT2 | DOT3 | DOT2EQ | COLON\n-            | COLON2 | EQ | EQ2 | FAT_ARROW | BANG | NEQ | MINUS | THIN_ARROW | LTEQ | GTEQ\n-            | PLUSEQ | MINUSEQ | PIPEEQ | AMPEQ | CARETEQ | SLASHEQ | STAREQ | PERCENTEQ | AMP2\n-            | PIPE2 | SHL | SHR | SHLEQ | SHREQ => true,\n-            _ => false,\n-        }\n+        matches!(\n+            self,\n+            SEMICOLON\n+                | COMMA\n+                | L_PAREN\n+                | R_PAREN\n+                | L_CURLY\n+                | R_CURLY\n+                | L_BRACK\n+                | R_BRACK\n+                | L_ANGLE\n+                | R_ANGLE\n+                | AT\n+                | POUND\n+                | TILDE\n+                | QUESTION\n+                | DOLLAR\n+                | AMP\n+                | PIPE\n+                | PLUS\n+                | STAR\n+                | SLASH\n+                | CARET\n+                | PERCENT\n+                | UNDERSCORE\n+                | DOT\n+                | DOT2\n+                | DOT3\n+                | DOT2EQ\n+                | COLON\n+                | COLON2\n+                | EQ\n+                | EQ2\n+                | FAT_ARROW\n+                | BANG\n+                | NEQ\n+                | MINUS\n+                | THIN_ARROW\n+                | LTEQ\n+                | GTEQ\n+                | PLUSEQ\n+                | MINUSEQ\n+                | PIPEEQ\n+                | AMPEQ\n+                | CARETEQ\n+                | SLASHEQ\n+                | STAREQ\n+                | PERCENTEQ\n+                | AMP2\n+                | PIPE2\n+                | SHL\n+                | SHR\n+                | SHLEQ\n+                | SHREQ\n+        )\n     }\n     pub fn is_literal(self) -> bool {\n-        match self {\n-            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING => true,\n-            _ => false,\n-        }\n+        matches!(self, INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING)\n     }\n     pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n         let kw = match ident {"}, {"sha": "8c4825ad69eb6be3903164cb359b0efd64ae5f0f", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 238, "deletions": 172, "changes": 410, "blob_url": "https://github.com/rust-lang/rust/blob/bcab4be9383f5dc3d177ec585df85e2becf2512b/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcab4be9383f5dc3d177ec585df85e2becf2512b/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=bcab4be9383f5dc3d177ec585df85e2becf2512b", "patch": "@@ -3169,10 +3169,7 @@ impl From<ConstArg> for GenericArg {\n }\n impl AstNode for GenericArg {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            TYPE_ARG | ASSOC_TYPE_ARG | LIFETIME_ARG | CONST_ARG => true,\n-            _ => false,\n-        }\n+        matches!(kind, TYPE_ARG | ASSOC_TYPE_ARG | LIFETIME_ARG | CONST_ARG)\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n@@ -3237,12 +3234,23 @@ impl From<TupleType> for Type {\n }\n impl AstNode for Type {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ARRAY_TYPE | DYN_TRAIT_TYPE | FN_PTR_TYPE | FOR_TYPE | IMPL_TRAIT_TYPE | INFER_TYPE\n-            | MACRO_TYPE | NEVER_TYPE | PAREN_TYPE | PATH_TYPE | PTR_TYPE | REF_TYPE\n-            | SLICE_TYPE | TUPLE_TYPE => true,\n-            _ => false,\n-        }\n+        matches!(\n+            kind,\n+            ARRAY_TYPE\n+                | DYN_TRAIT_TYPE\n+                | FN_PTR_TYPE\n+                | FOR_TYPE\n+                | IMPL_TRAIT_TYPE\n+                | INFER_TYPE\n+                | MACRO_TYPE\n+                | NEVER_TYPE\n+                | PAREN_TYPE\n+                | PATH_TYPE\n+                | PTR_TYPE\n+                | REF_TYPE\n+                | SLICE_TYPE\n+                | TUPLE_TYPE\n+        )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n@@ -3384,15 +3392,42 @@ impl From<UnderscoreExpr> for Expr {\n }\n impl AstNode for Expr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ARRAY_EXPR | AWAIT_EXPR | BIN_EXPR | BLOCK_EXPR | BOX_EXPR | BREAK_EXPR | CALL_EXPR\n-            | CAST_EXPR | CLOSURE_EXPR | CONTINUE_EXPR | FIELD_EXPR | FOR_EXPR | IF_EXPR\n-            | INDEX_EXPR | LITERAL | LOOP_EXPR | MACRO_EXPR | MACRO_STMTS | MATCH_EXPR\n-            | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR | PREFIX_EXPR | RANGE_EXPR\n-            | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR\n-            | YIELD_EXPR | LET_EXPR | UNDERSCORE_EXPR => true,\n-            _ => false,\n-        }\n+        matches!(\n+            kind,\n+            ARRAY_EXPR\n+                | AWAIT_EXPR\n+                | BIN_EXPR\n+                | BLOCK_EXPR\n+                | BOX_EXPR\n+                | BREAK_EXPR\n+                | CALL_EXPR\n+                | CAST_EXPR\n+                | CLOSURE_EXPR\n+                | CONTINUE_EXPR\n+                | FIELD_EXPR\n+                | FOR_EXPR\n+                | IF_EXPR\n+                | INDEX_EXPR\n+                | LITERAL\n+                | LOOP_EXPR\n+                | MACRO_EXPR\n+                | MACRO_STMTS\n+                | MATCH_EXPR\n+                | METHOD_CALL_EXPR\n+                | PAREN_EXPR\n+                | PATH_EXPR\n+                | PREFIX_EXPR\n+                | RANGE_EXPR\n+                | RECORD_EXPR\n+                | REF_EXPR\n+                | RETURN_EXPR\n+                | TRY_EXPR\n+                | TUPLE_EXPR\n+                | WHILE_EXPR\n+                | YIELD_EXPR\n+                | LET_EXPR\n+                | UNDERSCORE_EXPR\n+        )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n@@ -3521,11 +3556,25 @@ impl From<Use> for Item {\n }\n impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL | MACRO_CALL | MACRO_RULES\n-            | MACRO_DEF | MODULE | STATIC | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE => true,\n-            _ => false,\n-        }\n+        matches!(\n+            kind,\n+            CONST\n+                | ENUM\n+                | EXTERN_BLOCK\n+                | EXTERN_CRATE\n+                | FN\n+                | IMPL\n+                | MACRO_CALL\n+                | MACRO_RULES\n+                | MACRO_DEF\n+                | MODULE\n+                | STATIC\n+                | STRUCT\n+                | TRAIT\n+                | TYPE_ALIAS\n+                | UNION\n+                | USE\n+        )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n@@ -3629,12 +3678,25 @@ impl From<ConstBlockPat> for Pat {\n }\n impl AstNode for Pat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            IDENT_PAT | BOX_PAT | REST_PAT | LITERAL_PAT | MACRO_PAT | OR_PAT | PAREN_PAT\n-            | PATH_PAT | WILDCARD_PAT | RANGE_PAT | RECORD_PAT | REF_PAT | SLICE_PAT\n-            | TUPLE_PAT | TUPLE_STRUCT_PAT | CONST_BLOCK_PAT => true,\n-            _ => false,\n-        }\n+        matches!(\n+            kind,\n+            IDENT_PAT\n+                | BOX_PAT\n+                | REST_PAT\n+                | LITERAL_PAT\n+                | MACRO_PAT\n+                | OR_PAT\n+                | PAREN_PAT\n+                | PATH_PAT\n+                | WILDCARD_PAT\n+                | RANGE_PAT\n+                | RECORD_PAT\n+                | REF_PAT\n+                | SLICE_PAT\n+                | TUPLE_PAT\n+                | TUPLE_STRUCT_PAT\n+                | CONST_BLOCK_PAT\n+        )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n@@ -3686,12 +3748,7 @@ impl From<TupleFieldList> for FieldList {\n     fn from(node: TupleFieldList) -> FieldList { FieldList::TupleFieldList(node) }\n }\n impl AstNode for FieldList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RECORD_FIELD_LIST | TUPLE_FIELD_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, RECORD_FIELD_LIST | TUPLE_FIELD_LIST) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             RECORD_FIELD_LIST => FieldList::RecordFieldList(RecordFieldList { syntax }),\n@@ -3717,12 +3774,7 @@ impl From<Union> for Adt {\n     fn from(node: Union) -> Adt { Adt::Union(node) }\n }\n impl AstNode for Adt {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ENUM | STRUCT | UNION => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, ENUM | STRUCT | UNION) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             ENUM => Adt::Enum(Enum { syntax }),\n@@ -3753,12 +3805,7 @@ impl From<TypeAlias> for AssocItem {\n     fn from(node: TypeAlias) -> AssocItem { AssocItem::TypeAlias(node) }\n }\n impl AstNode for AssocItem {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONST | FN | MACRO_CALL | TYPE_ALIAS => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, CONST | FN | MACRO_CALL | TYPE_ALIAS) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             CONST => AssocItem::Const(Const { syntax }),\n@@ -3791,12 +3838,7 @@ impl From<TypeAlias> for ExternItem {\n     fn from(node: TypeAlias) -> ExternItem { ExternItem::TypeAlias(node) }\n }\n impl AstNode for ExternItem {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FN | MACRO_CALL | STATIC | TYPE_ALIAS => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, FN | MACRO_CALL | STATIC | TYPE_ALIAS) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             FN => ExternItem::Fn(Fn { syntax }),\n@@ -3827,10 +3869,7 @@ impl From<TypeParam> for GenericParam {\n }\n impl AstNode for GenericParam {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONST_PARAM | LIFETIME_PARAM | TYPE_PARAM => true,\n-            _ => false,\n-        }\n+        matches!(kind, CONST_PARAM | LIFETIME_PARAM | TYPE_PARAM)\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n@@ -3856,12 +3895,7 @@ impl AnyHasArgList {\n     }\n }\n impl AstNode for AnyHasArgList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CALL_EXPR | METHOD_CALL_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, CALL_EXPR | METHOD_CALL_EXPR) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         Self::can_cast(syntax.kind()).then(|| AnyHasArgList { syntax })\n     }\n@@ -3875,76 +3909,76 @@ impl AnyHasAttrs {\n }\n impl AstNode for AnyHasAttrs {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n+        matches!(\n+            kind,\n             MACRO_CALL\n-            | SOURCE_FILE\n-            | CONST\n-            | ENUM\n-            | EXTERN_BLOCK\n-            | EXTERN_CRATE\n-            | FN\n-            | IMPL\n-            | MACRO_RULES\n-            | MACRO_DEF\n-            | MODULE\n-            | STATIC\n-            | STRUCT\n-            | TRAIT\n-            | TYPE_ALIAS\n-            | UNION\n-            | USE\n-            | ITEM_LIST\n-            | BLOCK_EXPR\n-            | SELF_PARAM\n-            | PARAM\n-            | RECORD_FIELD\n-            | TUPLE_FIELD\n-            | VARIANT\n-            | ASSOC_ITEM_LIST\n-            | EXTERN_ITEM_LIST\n-            | CONST_PARAM\n-            | LIFETIME_PARAM\n-            | TYPE_PARAM\n-            | LET_STMT\n-            | ARRAY_EXPR\n-            | AWAIT_EXPR\n-            | BIN_EXPR\n-            | BOX_EXPR\n-            | BREAK_EXPR\n-            | CALL_EXPR\n-            | CAST_EXPR\n-            | CLOSURE_EXPR\n-            | CONTINUE_EXPR\n-            | FIELD_EXPR\n-            | FOR_EXPR\n-            | IF_EXPR\n-            | INDEX_EXPR\n-            | LITERAL\n-            | LOOP_EXPR\n-            | MATCH_EXPR\n-            | METHOD_CALL_EXPR\n-            | PAREN_EXPR\n-            | PATH_EXPR\n-            | PREFIX_EXPR\n-            | RANGE_EXPR\n-            | REF_EXPR\n-            | RETURN_EXPR\n-            | TRY_EXPR\n-            | TUPLE_EXPR\n-            | WHILE_EXPR\n-            | YIELD_EXPR\n-            | LET_EXPR\n-            | UNDERSCORE_EXPR\n-            | STMT_LIST\n-            | RECORD_EXPR_FIELD_LIST\n-            | RECORD_EXPR_FIELD\n-            | MATCH_ARM_LIST\n-            | MATCH_ARM\n-            | IDENT_PAT\n-            | REST_PAT\n-            | RECORD_PAT_FIELD => true,\n-            _ => false,\n-        }\n+                | SOURCE_FILE\n+                | CONST\n+                | ENUM\n+                | EXTERN_BLOCK\n+                | EXTERN_CRATE\n+                | FN\n+                | IMPL\n+                | MACRO_RULES\n+                | MACRO_DEF\n+                | MODULE\n+                | STATIC\n+                | STRUCT\n+                | TRAIT\n+                | TYPE_ALIAS\n+                | UNION\n+                | USE\n+                | ITEM_LIST\n+                | BLOCK_EXPR\n+                | SELF_PARAM\n+                | PARAM\n+                | RECORD_FIELD\n+                | TUPLE_FIELD\n+                | VARIANT\n+                | ASSOC_ITEM_LIST\n+                | EXTERN_ITEM_LIST\n+                | CONST_PARAM\n+                | LIFETIME_PARAM\n+                | TYPE_PARAM\n+                | LET_STMT\n+                | ARRAY_EXPR\n+                | AWAIT_EXPR\n+                | BIN_EXPR\n+                | BOX_EXPR\n+                | BREAK_EXPR\n+                | CALL_EXPR\n+                | CAST_EXPR\n+                | CLOSURE_EXPR\n+                | CONTINUE_EXPR\n+                | FIELD_EXPR\n+                | FOR_EXPR\n+                | IF_EXPR\n+                | INDEX_EXPR\n+                | LITERAL\n+                | LOOP_EXPR\n+                | MATCH_EXPR\n+                | METHOD_CALL_EXPR\n+                | PAREN_EXPR\n+                | PATH_EXPR\n+                | PREFIX_EXPR\n+                | RANGE_EXPR\n+                | REF_EXPR\n+                | RETURN_EXPR\n+                | TRY_EXPR\n+                | TUPLE_EXPR\n+                | WHILE_EXPR\n+                | YIELD_EXPR\n+                | LET_EXPR\n+                | UNDERSCORE_EXPR\n+                | STMT_LIST\n+                | RECORD_EXPR_FIELD_LIST\n+                | RECORD_EXPR_FIELD\n+                | MATCH_ARM_LIST\n+                | MATCH_ARM\n+                | IDENT_PAT\n+                | REST_PAT\n+                | RECORD_PAT_FIELD\n+        )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         Self::can_cast(syntax.kind()).then(|| AnyHasAttrs { syntax })\n@@ -3959,12 +3993,29 @@ impl AnyHasDocComments {\n }\n impl AstNode for AnyHasDocComments {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MACRO_CALL | SOURCE_FILE | CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL\n-            | MACRO_RULES | MACRO_DEF | MODULE | STATIC | STRUCT | TRAIT | TYPE_ALIAS | UNION\n-            | USE | RECORD_FIELD | TUPLE_FIELD | VARIANT => true,\n-            _ => false,\n-        }\n+        matches!(\n+            kind,\n+            MACRO_CALL\n+                | SOURCE_FILE\n+                | CONST\n+                | ENUM\n+                | EXTERN_BLOCK\n+                | EXTERN_CRATE\n+                | FN\n+                | IMPL\n+                | MACRO_RULES\n+                | MACRO_DEF\n+                | MODULE\n+                | STATIC\n+                | STRUCT\n+                | TRAIT\n+                | TYPE_ALIAS\n+                | UNION\n+                | USE\n+                | RECORD_FIELD\n+                | TUPLE_FIELD\n+                | VARIANT\n+        )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         Self::can_cast(syntax.kind()).then(|| AnyHasDocComments { syntax })\n@@ -3979,10 +4030,7 @@ impl AnyHasGenericParams {\n }\n impl AstNode for AnyHasGenericParams {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ENUM | FN | IMPL | STRUCT | TRAIT | TYPE_ALIAS | UNION => true,\n-            _ => false,\n-        }\n+        matches!(kind, ENUM | FN | IMPL | STRUCT | TRAIT | TYPE_ALIAS | UNION)\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         Self::can_cast(syntax.kind()).then(|| AnyHasGenericParams { syntax })\n@@ -3996,12 +4044,7 @@ impl AnyHasLoopBody {\n     }\n }\n impl AstNode for AnyHasLoopBody {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FOR_EXPR | LOOP_EXPR | WHILE_EXPR => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, FOR_EXPR | LOOP_EXPR | WHILE_EXPR) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         Self::can_cast(syntax.kind()).then(|| AnyHasLoopBody { syntax })\n     }\n@@ -4014,12 +4057,7 @@ impl AnyHasModuleItem {\n     }\n }\n impl AstNode for AnyHasModuleItem {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MACRO_ITEMS | SOURCE_FILE | ITEM_LIST => true,\n-            _ => false,\n-        }\n-    }\n+    fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, MACRO_ITEMS | SOURCE_FILE | ITEM_LIST) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         Self::can_cast(syntax.kind()).then(|| AnyHasModuleItem { syntax })\n     }\n@@ -4033,12 +4071,27 @@ impl AnyHasName {\n }\n impl AstNode for AnyHasName {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONST | ENUM | FN | MACRO_RULES | MACRO_DEF | MODULE | STATIC | STRUCT | TRAIT\n-            | TYPE_ALIAS | UNION | RENAME | SELF_PARAM | RECORD_FIELD | VARIANT | CONST_PARAM\n-            | TYPE_PARAM | IDENT_PAT => true,\n-            _ => false,\n-        }\n+        matches!(\n+            kind,\n+            CONST\n+                | ENUM\n+                | FN\n+                | MACRO_RULES\n+                | MACRO_DEF\n+                | MODULE\n+                | STATIC\n+                | STRUCT\n+                | TRAIT\n+                | TYPE_ALIAS\n+                | UNION\n+                | RENAME\n+                | SELF_PARAM\n+                | RECORD_FIELD\n+                | VARIANT\n+                | CONST_PARAM\n+                | TYPE_PARAM\n+                | IDENT_PAT\n+        )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         Self::can_cast(syntax.kind()).then(|| AnyHasName { syntax })\n@@ -4053,10 +4106,10 @@ impl AnyHasTypeBounds {\n }\n impl AstNode for AnyHasTypeBounds {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            ASSOC_TYPE_ARG | TRAIT | TYPE_ALIAS | LIFETIME_PARAM | TYPE_PARAM | WHERE_PRED => true,\n-            _ => false,\n-        }\n+        matches!(\n+            kind,\n+            ASSOC_TYPE_ARG | TRAIT | TYPE_ALIAS | LIFETIME_PARAM | TYPE_PARAM | WHERE_PRED\n+        )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         Self::can_cast(syntax.kind()).then(|| AnyHasTypeBounds { syntax })\n@@ -4071,13 +4124,26 @@ impl AnyHasVisibility {\n }\n impl AstNode for AnyHasVisibility {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            CONST | ENUM | EXTERN_CRATE | FN | IMPL | MACRO_RULES | MACRO_DEF | MODULE | STATIC\n-            | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE | RECORD_FIELD | TUPLE_FIELD | VARIANT => {\n-                true\n-            }\n-            _ => false,\n-        }\n+        matches!(\n+            kind,\n+            CONST\n+                | ENUM\n+                | EXTERN_CRATE\n+                | FN\n+                | IMPL\n+                | MACRO_RULES\n+                | MACRO_DEF\n+                | MODULE\n+                | STATIC\n+                | STRUCT\n+                | TRAIT\n+                | TYPE_ALIAS\n+                | UNION\n+                | USE\n+                | RECORD_FIELD\n+                | TUPLE_FIELD\n+                | VARIANT\n+        )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         Self::can_cast(syntax.kind()).then(|| AnyHasVisibility { syntax })"}]}