{"sha": "71c0bd5c5df8c3810b3c8dc369a9644dfd82c09b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYzBiZDVjNWRmOGMzODEwYjNjOGRjMzY5YTk2NDRkZmQ4MmMwOWI=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-10T16:44:48Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-28T16:49:20Z"}, "message": "simplify, based on invariant that items_allowed != foreign_items_allowed", "tree": {"sha": "91582abedff060305ec3307a17249d152236c0c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91582abedff060305ec3307a17249d152236c0c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71c0bd5c5df8c3810b3c8dc369a9644dfd82c09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71c0bd5c5df8c3810b3c8dc369a9644dfd82c09b", "html_url": "https://github.com/rust-lang/rust/commit/71c0bd5c5df8c3810b3c8dc369a9644dfd82c09b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71c0bd5c5df8c3810b3c8dc369a9644dfd82c09b/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae4e09f71ac545dbf51778ee3ffe695de1d50f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4e09f71ac545dbf51778ee3ffe695de1d50f60", "html_url": "https://github.com/rust-lang/rust/commit/ae4e09f71ac545dbf51778ee3ffe695de1d50f60"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "7da834a5d889f6ffad66dd6f9adc1011e28c2102", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c0bd5c5df8c3810b3c8dc369a9644dfd82c09b/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c0bd5c5df8c3810b3c8dc369a9644dfd82c09b/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=71c0bd5c5df8c3810b3c8dc369a9644dfd82c09b", "patch": "@@ -756,7 +756,6 @@ mod test {\n         assert_eq!(refold_test_sc(3,&t),test_sc);\n     }\n \n-\n     // extend a syntax context with a sequence of marks given\n     // in a vector. v[0] will be the outermost mark.\n     fn unfold_marks(mrks:~[Mrk],tail:SyntaxContext,table: &mut SCTable) -> SyntaxContext {"}, {"sha": "d49ad1663b53eada89e41b9e2aba2319ae135e28", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/71c0bd5c5df8c3810b3c8dc369a9644dfd82c09b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c0bd5c5df8c3810b3c8dc369a9644dfd82c09b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=71c0bd5c5df8c3810b3c8dc369a9644dfd82c09b", "patch": "@@ -4107,38 +4107,34 @@ pub impl Parser {\n                                               maybe_append(attrs,\n                                                            extra_attrs)));\n             }\n-            if !foreign_items_allowed {\n+            if items_allowed {\n                 // EXTERN MODULE ITEM\n                 return self.parse_item_foreign_mod(lo, opt_abis, visibility, attrs,\n                                                    items_allowed);\n             }\n         }\n-        if items_allowed && !foreign_items_allowed &&\n-                self.eat_keyword(&~\"mod\") {\n+        if items_allowed && self.eat_keyword(&~\"mod\") {\n             // MODULE ITEM\n             let (ident, item_, extra_attrs) = self.parse_item_mod(attrs);\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));\n         }\n-        if items_allowed && !foreign_items_allowed &&\n-                self.eat_keyword(&~\"type\") {\n+        if items_allowed && self.eat_keyword(&~\"type\") {\n             // TYPE ITEM\n             let (ident, item_, extra_attrs) = self.parse_item_type();\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));\n         }\n-        if items_allowed && !foreign_items_allowed &&\n-                self.eat_keyword(&~\"enum\") {\n+        if items_allowed && self.eat_keyword(&~\"enum\") {\n             // ENUM ITEM\n             let (ident, item_, extra_attrs) = self.parse_item_enum();\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));\n         }\n-        if items_allowed && !foreign_items_allowed &&\n-                self.eat_keyword(&~\"trait\") {\n+        if items_allowed && self.eat_keyword(&~\"trait\") {\n             // TRAIT ITEM\n             let (ident, item_, extra_attrs) = self.parse_item_trait();\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n@@ -4154,15 +4150,14 @@ pub impl Parser {\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));\n         }\n-        if items_allowed && !foreign_items_allowed &&\n-                self.eat_keyword(&~\"struct\") {\n+        if items_allowed && self.eat_keyword(&~\"struct\") {\n             // STRUCT ITEM\n             let (ident, item_, extra_attrs) = self.parse_item_struct();\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));\n         }\n-        if !foreign_items_allowed && self.eat_keyword(&~\"use\") {\n+        if items_allowed && self.eat_keyword(&~\"use\") {\n             // USE ITEM\n             let view_item = self.parse_use();\n             self.expect(&token::SEMI);"}]}