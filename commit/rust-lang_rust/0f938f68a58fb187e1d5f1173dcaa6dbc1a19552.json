{"sha": "0f938f68a58fb187e1d5f1173dcaa6dbc1a19552", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOTM4ZjY4YTU4ZmIxODdlMWQ1ZjExNzNkY2FhNmRiYzFhMTk1NTI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-03T15:22:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-03T15:22:01Z"}, "message": "Rustup to rustc 1.40.0-nightly (2daa404e9 2019-10-02)", "tree": {"sha": "a556cc34361855f529d81dcbb035b8c6f5fade54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a556cc34361855f529d81dcbb035b8c6f5fade54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552", "html_url": "https://github.com/rust-lang/rust/commit/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e676998b6180f48333300de065e156ad166bb7b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e676998b6180f48333300de065e156ad166bb7b5", "html_url": "https://github.com/rust-lang/rust/commit/e676998b6180f48333300de065e156ad166bb7b5"}], "stats": {"total": 119, "additions": 60, "deletions": 59}, "files": [{"sha": "4b7fe76d690b7a4757421812f8d05e7e9c4ba623", "filename": "config.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552/config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552/config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.sh?ref=0f938f68a58fb187e1d5f1173dcaa6dbc1a19552", "patch": "@@ -12,7 +12,7 @@ fi\n \n TARGET_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n \n-export RUSTFLAGS='-Cpanic=abort -Cdebuginfo=2 -Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n+export RUSTFLAGS='-Cpanic=abort -Cdebuginfo=2 -Zpanic-abort-tests -Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n RUSTC=\"rustc $RUSTFLAGS -L crate=target/out --out-dir target/out\"\n export RUSTC_LOG=warn # display metadata load errors\n "}, {"sha": "05b5675d43b3332fd482745d0ef15c15f2a61e15", "filename": "patches/0017-Fix-libtest-compilation.patch", "status": "modified", "additions": 51, "deletions": 53, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552/patches%2F0017-Fix-libtest-compilation.patch", "raw_url": "https://github.com/rust-lang/rust/raw/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552/patches%2F0017-Fix-libtest-compilation.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0017-Fix-libtest-compilation.patch?ref=0f938f68a58fb187e1d5f1173dcaa6dbc1a19552", "patch": "@@ -1,68 +1,35 @@\n-From e77c222bb7ec0a99a69dcbb039c75fd1ea9db368 Mon Sep 17 00:00:00 2001\n+From e06143d3373293d0490df482261cd4a842f1a5c5 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Thu, 3 Oct 2019 16:22:21 +0200\n+Date: Thu, 3 Oct 2019 16:51:34 +0200\n Subject: [PATCH] Fix libtest compilation\n \n ---\n- src/libtest/lib.rs | 30 +++++-------------------------\n- 1 file changed, 5 insertions(+), 25 deletions(-)\n+ src/libtest/lib.rs | 28 ++++++++--------------------\n+ 1 file changed, 8 insertions(+), 20 deletions(-)\n \n diff --git a/src/libtest/lib.rs b/src/libtest/lib.rs\n-index e441514..8e8b4df 100644\n+index 8b76080..9e65de2 100644\n --- a/src/libtest/lib.rs\n +++ b/src/libtest/lib.rs\n-@@ -24,7 +24,6 @@\n- #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc, rustc_private))]\n- #![feature(nll)]\n- #![feature(set_stdio)]\n--#![feature(panic_unwind)]\n- #![feature(staged_api)]\n- #![feature(termination_trait_lib)]\n- #![feature(test)]\n-@@ -34,16 +33,6 @@ use getopts;\n- extern crate libc;\n- use term;\n- \n--// FIXME(#54291): rustc and/or LLVM don't yet support building with panic-unwind\n--//                on aarch64-pc-windows-msvc, or thumbv7a-pc-windows-msvc\n--//                so we don't link libtest against libunwind (for the time being)\n--//                even though it means that libtest won't be fully functional on\n--//                these platforms.\n--//\n--// See also: https://github.com/rust-lang/rust/issues/54190#issuecomment-422904437\n--#[cfg(not(all(windows, any(target_arch = \"aarch64\", target_arch = \"arm\"))))]\n--extern crate panic_unwind;\n--\n- pub use self::ColorConfig::*;\n- use self::NamePadding::*;\n- use self::OutputLocation::*;\n-@@ -61,7 +50,6 @@ use std::fmt;\n+@@ -52,7 +52,7 @@ use std::fmt;\n  use std::fs::File;\n  use std::io;\n  use std::io::prelude::*;\n--use std::panic::{catch_unwind, AssertUnwindSafe};\n+-use std::panic::{self, catch_unwind, AssertUnwindSafe, PanicInfo};\n++use std::panic::{self, PanicInfo};\n  use std::path::PathBuf;\n  use std::process;\n- use std::process::Termination;\n-@@ -1434,7 +1422,7 @@ pub fn run_test(\n-         monitor_ch: Sender<MonitorMsg>,\n-         nocapture: bool,\n+ use std::process::{ExitStatus, Command, Termination};\n+@@ -1493,7 +1493,7 @@ pub fn run_test(\n          report_time: bool,\n+         strategy: RunStrategy,\n+         monitor_ch: Sender<MonitorMsg>,\n -        testfn: Box<dyn FnOnce() + Send>,\n +        testfn: Box<impl FnOnce() + Send + 'static>,\n          concurrency: Concurrent,\n      ) {\n-         // Buffer for capturing standard I/O\n-@@ -1457,7 +1445,7 @@ pub fn run_test(\n-             } else {\n-                 None\n-             };\n--            let result = catch_unwind(AssertUnwindSafe(testfn));\n-+            let result = Ok(testfn());\n-             let exec_time = start.map(|start| {\n-                 let duration = start.elapsed();\n-                 TestExecTime(duration)\n-@@ -1478,7 +1466,7 @@ pub fn run_test(\n+         let name = desc.name.clone();\n+@@ -1509,7 +1509,7 @@ pub fn run_test(\n          // If the platform is single-threaded we're just going to run\n          // the test synchronously, regardless of the concurrency\n          // level.\n@@ -71,25 +38,56 @@ index e441514..8e8b4df 100644\n          if concurrency == Concurrent::Yes && supports_threads {\n              let cfg = thread::Builder::new().name(name.as_slice().to_owned());\n              cfg.spawn(runtest).unwrap();\n-@@ -1498,16 +1486,8 @@ pub fn run_test(\n+@@ -1531,20 +1531,8 @@ pub fn run_test(\n                  (benchfn.clone())(harness)\n              });\n          }\n -        DynTestFn(f) => {\n--            let cb = move || __rust_begin_short_backtrace(f);\n+-            match strategy {\n+-                RunStrategy::InProcess => (),\n+-                _ => panic!(\"Cannot run dynamic test fn out-of-process\"),\n+-            };\n -            run_test_inner(\n -                desc,\n--                monitor_ch,\n -                opts.nocapture,\n -                opts.report_time,\n--                Box::new(cb),\n--                concurrency,\n--            )\n+-                strategy,\n+-                monitor_ch,\n+-                Box::new(move || __rust_begin_short_backtrace(f)),\n+-                concurrency\n+-            );\n +        DynTestFn(_f) => {\n +            unimplemented!();\n          }\n          StaticTestFn(f) => run_test_inner(\n              desc,\n+@@ -1604,7 +1592,7 @@ fn get_result_from_exit_code(desc: &TestDesc, code: i32) -> TestResult {\n+ fn run_test_in_process(desc: TestDesc,\n+                        nocapture: bool,\n+                        report_time: bool,\n+-                       testfn: Box<dyn FnOnce() + Send>,\n++                       testfn: Box<impl FnOnce() + Send + 'static>,\n+                        monitor_ch: Sender<MonitorMsg>) {\n+     // Buffer for capturing standard I/O\n+     let data = Arc::new(Mutex::new(Vec::new()));\n+@@ -1623,7 +1611,7 @@ fn run_test_in_process(desc: TestDesc,\n+     } else {\n+         None\n+     };\n+-    let result = catch_unwind(AssertUnwindSafe(testfn));\n++    let result = Ok::<(), Box<dyn Any + Send>>(testfn());\n+     let exec_time = start.map(|start| {\n+         let duration = start.elapsed();\n+         TestExecTime(duration)\n+@@ -1688,7 +1676,7 @@ fn spawn_test_subprocess(desc: TestDesc, report_time: bool, monitor_ch: Sender<M\n+     monitor_ch.send((desc.clone(), result, exec_time, test_output)).unwrap();\n+ }\n+ \n+-fn run_test_in_spawned_subprocess(desc: TestDesc, testfn: Box<dyn FnOnce() + Send>) -> ! {\n++fn run_test_in_spawned_subprocess(desc: TestDesc, testfn: Box<impl FnOnce() + Send + 'static>) -> ! {\n+     let builtin_panic_hook = panic::take_hook();\n+     let record_result = Arc::new(move |panic_info: Option<&'_ PanicInfo<'_>>| {\n+         let test_result = match panic_info {\n -- \n 2.20.1\n "}, {"sha": "f02ba35904ff97415570e448340780f21ca49b37", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=0f938f68a58fb187e1d5f1173dcaa6dbc1a19552", "patch": "@@ -219,7 +219,7 @@ fn run_aot(\n     rustc_incremental::finalize_session_directory(tcx.sess, tcx.crate_hash(LOCAL_CRATE));\n \n     let metadata_module = if need_metadata_module {\n-        tcx.sess.profiler(|p| p.start_activity(\"codegen crate metadata\"));\n+        let _timer = tcx.prof.generic_activity(\"codegen crate metadata\");\n         let (metadata_cgu_name, tmp_file) = rustc::util::common::time(tcx.sess, \"write compressed metadata\", || {\n             use rustc::mir::mono::CodegenUnitNameBuilder;\n \n@@ -244,7 +244,6 @@ fn run_aot(\n \n             (metadata_cgu_name, tmp_file)\n         });\n-        tcx.sess.profiler(|p| p.end_activity(\"codegen crate metadata\"));\n \n         Some(CompiledModule {\n             name: metadata_cgu_name,"}, {"sha": "17b667daf0e4949f30b6c6754c4d1258b933b77b", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f938f68a58fb187e1d5f1173dcaa6dbc1a19552/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0f938f68a58fb187e1d5f1173dcaa6dbc1a19552", "patch": "@@ -10,6 +10,7 @@ extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_fs_util;\n extern crate rustc_incremental;\n+extern crate rustc_index;\n extern crate rustc_mir;\n extern crate rustc_target;\n extern crate syntax;\n@@ -74,11 +75,14 @@ mod prelude {\n         self, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt, TypeAndMut,\n         TypeFoldable,\n     };\n+\n     pub use rustc_data_structures::{\n         fx::{FxHashMap, FxHashSet},\n-        indexed_vec::Idx,\n         sync::Lrc,\n     };\n+\n+    pub use rustc_index::vec::Idx;\n+\n     pub use rustc_mir::monomorphize::collector;\n \n     pub use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n@@ -225,7 +229,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             .downcast::<CodegenResults>()\n             .expect(\"Expected CraneliftCodegenBackend's CodegenResult, found Box<Any>\");\n \n-        sess.profiler(|p| p.start_activity(\"link_crate\"));\n+        let _timer = sess.prof.generic_activity(\"link_crate\");\n+\n         rustc::util::common::time(sess, \"linking\", || {\n             let target_cpu = crate::target_triple(sess).to_string();\n             link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n@@ -236,7 +241,6 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 &target_cpu,\n             );\n         });\n-        sess.profiler(|p| p.end_activity(\"link_crate\"));\n \n         Ok(())\n     }"}]}