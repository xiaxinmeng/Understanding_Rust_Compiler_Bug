{"sha": "bf20b40664d699954599d4e7e333b756cec0ad59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMjBiNDA2NjRkNjk5OTU0NTk5ZDRlN2UzMzNiNzU2Y2VjMGFkNTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-08T14:10:02Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-08T14:10:02Z"}, "message": "fix cyclomatic complexity lint triggering because of short circuit operations", "tree": {"sha": "59371b22da09f5fab64f9c1fc2d8c442bd0418e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59371b22da09f5fab64f9c1fc2d8c442bd0418e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf20b40664d699954599d4e7e333b756cec0ad59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf20b40664d699954599d4e7e333b756cec0ad59", "html_url": "https://github.com/rust-lang/rust/commit/bf20b40664d699954599d4e7e333b756cec0ad59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf20b40664d699954599d4e7e333b756cec0ad59/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "html_url": "https://github.com/rust-lang/rust/commit/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "b1b578af759922f075e2e1f2502b3fc072539bcf", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bf20b40664d699954599d4e7e333b756cec0ad59/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf20b40664d699954599d4e7e333b756cec0ad59/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=bf20b40664d699954599d4e7e333b756cec0ad59", "patch": "@@ -51,19 +51,21 @@ impl CyclomaticComplexity {\n         let mut helper = CCHelper {\n             match_arms: 0,\n             divergence: 0,\n+            short_circuits: 0,\n             tcx: &cx.tcx,\n         };\n         helper.visit_block(block);\n         let CCHelper {\n             match_arms,\n             divergence,\n+            short_circuits,\n             ..\n         } = helper;\n \n-        if cc + divergence < match_arms {\n-            report_cc_bug(cx, cc, match_arms, divergence, span);\n+        if cc + divergence < match_arms + short_circuits {\n+            report_cc_bug(cx, cc, match_arms, divergence, short_circuits, span);\n         } else {\n-            let rust_cc = cc + divergence - match_arms;\n+            let rust_cc = cc + divergence - match_arms - short_circuits;\n             if rust_cc > self.limit.limit() {\n                 span_help_and_lint(cx,\n                                    CYCLOMATIC_COMPLEXITY,\n@@ -105,6 +107,7 @@ impl LateLintPass for CyclomaticComplexity {\n struct CCHelper<'a, 'tcx: 'a> {\n     match_arms: u64,\n     divergence: u64,\n+    short_circuits: u64, // && and ||\n     tcx: &'a ty::TyCtxt<'tcx>,\n }\n \n@@ -128,29 +131,38 @@ impl<'a, 'b, 'tcx> Visitor<'a> for CCHelper<'b, 'tcx> {\n                 }\n             }\n             ExprClosure(..) => {}\n+            ExprBinary(op, _, _) => {\n+                walk_expr(self, e);\n+                match op.node {\n+                    BiAnd | BiOr => self.short_circuits += 1,\n+                    _ => {},\n+                }\n+            }\n             _ => walk_expr(self, e),\n         }\n     }\n }\n \n #[cfg(feature=\"debugging\")]\n-fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, span: Span) {\n+fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, span: Span) {\n     cx.sess().span_bug(span,\n                        &format!(\"Clippy encountered a bug calculating cyclomatic complexity: cc = {}, arms = {}, \\\n-                                 div = {}. Please file a bug report.\",\n+                                 div = {}, shorts = {}. Please file a bug report.\",\n                                 cc,\n                                 narms,\n-                                div));;\n+                                div,\n+                                shorts));;\n }\n #[cfg(not(feature=\"debugging\"))]\n-fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, span: Span) {\n+fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, span: Span) {\n     if cx.current_level(CYCLOMATIC_COMPLEXITY) != Level::Allow {\n         cx.sess().span_note_without_error(span,\n                                           &format!(\"Clippy encountered a bug calculating cyclomatic complexity \\\n                                                     (hide this message with `#[allow(cyclomatic_complexity)]`): cc \\\n-                                                    = {}, arms = {}, div = {}. Please file a bug report.\",\n+                                                    = {}, arms = {}, div = {}, shorts = {}. Please file a bug report.\",\n                                                    cc,\n                                                    narms,\n-                                                   div));\n+                                                   div,\n+                                                   shorts));\n     }\n }"}, {"sha": "823cb696901aff607c490770749c0ee0ad637fbe", "filename": "src/overflow_check_conditional.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf20b40664d699954599d4e7e333b756cec0ad59/src%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf20b40664d699954599d4e7e333b756cec0ad59/src%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow_check_conditional.rs?ref=bf20b40664d699954599d4e7e333b756cec0ad59", "patch": "@@ -1,4 +1,3 @@\n-#![allow(cyclomatic_complexity)]\n use rustc::lint::*;\n use rustc_front::hir::*;\n use utils::{span_lint};\n@@ -38,12 +37,12 @@ impl LateLintPass for OverflowCheckConditional {\n         ], {\n             if let BinOp_::BiLt = op.node {\n                 if let BinOp_::BiAdd = op2.node {\n-                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C overflow conditons that will fail in Rust.\");\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n                 }\n             }\n             if let BinOp_::BiGt = op.node {\n                 if let BinOp_::BiSub = op2.node {\n-                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C underflow conditons that will fail in Rust.\");\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C underflow conditions that will fail in Rust.\");\n                 }\n             }\n         }}\n@@ -60,12 +59,12 @@ impl LateLintPass for OverflowCheckConditional {\n         ], {\n             if let BinOp_::BiGt = op.node {\n                 if let BinOp_::BiAdd = op2.node {\n-                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C overflow conditons that will fail in Rust.\");\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n                 }\n             }\n             if let BinOp_::BiLt = op.node {\n                 if let BinOp_::BiSub = op2.node {\n-                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C underflow conditons that will fail in Rust.\");\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C underflow conditions that will fail in Rust.\");\n                 }\n             }\n         }}"}, {"sha": "b4b786f9743111f8031f0a10c62dc79b7bcf4204", "filename": "src/utils/hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf20b40664d699954599d4e7e333b756cec0ad59/src%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf20b40664d699954599d4e7e333b756cec0ad59/src%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fhir.rs?ref=bf20b40664d699954599d4e7e333b756cec0ad59", "patch": "@@ -55,8 +55,6 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         both(&left.expr, &right.expr, |l, r| self.eq_expr(l, r))\n     }\n \n-    // ok, it\u2019s a big function, but mostly one big match with simples cases\n-    #[allow(cyclomatic_complexity)]\n     pub fn eq_expr(&self, left: &Expr, right: &Expr) -> bool {\n         if self.ignore_fn && differing_macro_contexts(left.span, right.span) {\n             return false;"}, {"sha": "30a05c3f87db760d8c1a6f12c4c3e5ba5c0db85f", "filename": "tests/compile-fail/cyclomatic_complexity.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bf20b40664d699954599d4e7e333b756cec0ad59/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf20b40664d699954599d4e7e333b756cec0ad59/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs?ref=bf20b40664d699954599d4e7e333b756cec0ad59", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin, custom_attribute)]\n #![plugin(clippy)]\n-#![deny(clippy)]\n+#![allow(clippy)]\n #![deny(cyclomatic_complexity)]\n #![allow(unused)]\n \n@@ -90,7 +90,7 @@ fn main() { //~ERROR the function has a cyclomatic complexity of 28\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn kaboom() {  //~ ERROR: the function has a cyclomatic complexity of 8\n+fn kaboom() {  //~ ERROR: the function has a cyclomatic complexity of 7\n     let n = 0;\n     'a: for i in 0..20 {\n         'b: for j in i..20 {\n@@ -135,6 +135,16 @@ fn bloo() {\n     }\n }\n \n+#[cyclomatic_complexity = \"0\"]\n+fn lots_of_short_circuits() -> bool { //~ ERROR: the function has a cyclomatic complexity of 1\n+    true && false && true && false && true && false && true\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn lots_of_short_circuits2() -> bool { //~ ERROR: the function has a cyclomatic complexity of 1\n+    true || false || true || false || true || false || true\n+}\n+\n #[cyclomatic_complexity = \"0\"]\n fn baa() { //~ ERROR: the function has a cyclomatic complexity of 2\n     let x = || match 99 {"}, {"sha": "db7b2792484b6b8b829f1e0da9702690028ce6df", "filename": "tests/compile-fail/overflow_check_conditional.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bf20b40664d699954599d4e7e333b756cec0ad59/tests%2Fcompile-fail%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf20b40664d699954599d4e7e333b756cec0ad59/tests%2Fcompile-fail%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflow_check_conditional.rs?ref=bf20b40664d699954599d4e7e333b756cec0ad59", "patch": "@@ -7,28 +7,28 @@ fn main() {\n \tlet a: u32 = 1;\n \tlet b: u32 = 2;\n \tlet c: u32 = 3;\n-\tif a + b < a { //~ERROR You are trying to use classic C overflow conditons that will fail in Rust.\n+\tif a + b < a { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n \n \t}\n-\tif a > a + b { //~ERROR You are trying to use classic C overflow conditons that will fail in Rust.\n+\tif a > a + b { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n \n \t}\n-\tif a + b < b { //~ERROR You are trying to use classic C overflow conditons that will fail in Rust.\n+\tif a + b < b { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n \n \t}\n-\tif b > a + b { //~ERROR You are trying to use classic C overflow conditons that will fail in Rust.\n+\tif b > a + b { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n \n \t}\n-\tif a - b > b { //~ERROR You are trying to use classic C underflow conditons that will fail in Rust.\n+\tif a - b > b { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n \n \t}\n-\tif b < a - b { //~ERROR You are trying to use classic C underflow conditons that will fail in Rust.\n+\tif b < a - b { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n \n \t}\n-\tif a - b > a { //~ERROR You are trying to use classic C underflow conditons that will fail in Rust.\n+\tif a - b > a { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n \n \t}\n-\tif a < a - b { //~ERROR You are trying to use classic C underflow conditons that will fail in Rust.\n+\tif a < a - b { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n \n \t}\n \tif a + b < c {\n@@ -58,4 +58,3 @@ fn main() {\n \n \t}\n }\n-"}]}