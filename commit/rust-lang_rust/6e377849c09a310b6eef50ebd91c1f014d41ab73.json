{"sha": "6e377849c09a310b6eef50ebd91c1f014d41ab73", "node_id": "C_kwDOAAsO6NoAKDZlMzc3ODQ5YzA5YTMxMGI2ZWVmNTBlYmQ5MWMxZjAxNGQ0MWFiNzM", "commit": {"author": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-02-12T12:05:56Z"}, "committer": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-05-03T09:24:56Z"}, "message": "Correctly convert an NT path to a Win32 path\n\nThis can be done by simply changing the `\\??\\` prefix to `\\\\?\\` and then attempting to convert to a user path.\n\nCurrently it simply strips off the prefix which could lead to the wrong path being returned (e.g. if it's not a drive path or if the path contains trailing spaces, etc).", "tree": {"sha": "1b17781bad1484f5b797202fd344f265a4175ac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b17781bad1484f5b797202fd344f265a4175ac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e377849c09a310b6eef50ebd91c1f014d41ab73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmRSKGgACgkQcTRy8vRW\nJ96HnA/+PknfQW3Pio+swY2RkK9ipLeSin06ZFE/Qndj3rmePmBDpFvzWeZanEVb\nqyTPILe/vaNIzxVwlcy5bzy6tWIiPxw3utYCkSlgvXY3FNgqQSfrWUhfLiWmYk/F\nsSRib0+n4agfyXO4V1rRgR/vapl/u4vdEh49jIA14Gn8B0kl0u+iAxo17qWyyhUP\nzkQUzke1OVKW1wHBBXbi4mkVaTE4LlxvY3bJOtNTVK1WqtYEs7ruHXEuX1pYaTsl\nXc/KW9V5dhiZlJvqxvFi55a9OcrZ4xvzSzTjvc28bNRBtcni6JGbStWE8IwtoN2q\nENdz5qH1kzHUap2dFD7Gwli5pr+zd9bPGn9r7bvpgyMzvevrqKMBANmhciOYv6gY\nN5EX1xVCjPxRPdwSGBRnukkDbQi+EsN/ViKUOJEeYRpxAlS5Qn5FWEOYaWxdQbZW\nWnBIQjE2iXjb4+vVrtwwZgNWxYC119gXjjIAgUFdjV5awaipDqbcshya+nOAO/Kc\nTTxcKNaICRRE556Pgx5VbKlKKgjXuPSk4MEixY2q9JRCjFccGvapjKel60wqswki\nZ4+FSpZH7HptT1QIJZddKEc7pi584FCTkuzi2ehM4qXtVp636MlVSX7qZWBlmUox\n+uCCbL1FOyiosSVUfUWl6R4y21JojxJCrEKUEf94di14qLG8Ft0=\n=K0u7\n-----END PGP SIGNATURE-----", "payload": "tree 1b17781bad1484f5b797202fd344f265a4175ac3\nparent cad92b4c979760b088ffd18e6c89801668c944f2\nauthor Chris Denton <chris@chrisdenton.dev> 1676203556 +0000\ncommitter Chris Denton <chris@chrisdenton.dev> 1683105896 +0100\n\nCorrectly convert an NT path to a Win32 path\n\nThis can be done by simply changing the `\\??\\` prefix to `\\\\?\\` and then attempting to convert to a user path.\n\nCurrently it simply strips off the prefix which could lead to the wrong path being returned (e.g. if it's not a drive path or if the path contains trailing spaces, etc).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e377849c09a310b6eef50ebd91c1f014d41ab73", "html_url": "https://github.com/rust-lang/rust/commit/6e377849c09a310b6eef50ebd91c1f014d41ab73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e377849c09a310b6eef50ebd91c1f014d41ab73/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cad92b4c979760b088ffd18e6c89801668c944f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad92b4c979760b088ffd18e6c89801668c944f2", "html_url": "https://github.com/rust-lang/rust/commit/cad92b4c979760b088ffd18e6c89801668c944f2"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "a8a0b9f122d66ac60d99fbe1bf082b7eea36612e", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e377849c09a310b6eef50ebd91c1f014d41ab73/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e377849c09a310b6eef50ebd91c1f014d41ab73/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=6e377849c09a310b6eef50ebd91c1f014d41ab73", "patch": "@@ -919,6 +919,7 @@ fn symlink_noexist() {\n \n #[test]\n fn read_link() {\n+    let tmpdir = tmpdir();\n     if cfg!(windows) {\n         // directory symlink\n         assert_eq!(check!(fs::read_link(r\"C:\\Users\\All Users\")), Path::new(r\"C:\\ProgramData\"));\n@@ -933,8 +934,11 @@ fn read_link() {\n                 Path::new(r\"C:\\Users\")\n             );\n         }\n+        // Check that readlink works with non-drive paths on Windows.\n+        let link = tmpdir.join(\"link_unc\");\n+        check!(symlink_dir(r\"\\\\localhost\\c$\\\", &link));\n+        assert_eq!(check!(fs::read_link(&link)), Path::new(r\"\\\\localhost\\c$\\\"));\n     }\n-    let tmpdir = tmpdir();\n     let link = tmpdir.join(\"link\");\n     if !got_symlink_permission(&tmpdir) {\n         return;"}, {"sha": "ff05d31915cb069f1cb5775624ebb3e5284267af", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6e377849c09a310b6eef50ebd91c1f014d41ab73/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e377849c09a310b6eef50ebd91c1f014d41ab73/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=6e377849c09a310b6eef50ebd91c1f014d41ab73", "patch": "@@ -477,7 +477,7 @@ impl File {\n     fn reparse_point(\n         &self,\n         space: &mut Align8<[MaybeUninit<u8>]>,\n-    ) -> io::Result<(c::DWORD, *const c::REPARSE_DATA_BUFFER)> {\n+    ) -> io::Result<(c::DWORD, *mut c::REPARSE_DATA_BUFFER)> {\n         unsafe {\n             let mut bytes = 0;\n             cvt({\n@@ -496,7 +496,7 @@ impl File {\n                 )\n             })?;\n             const _: () = assert!(core::mem::align_of::<c::REPARSE_DATA_BUFFER>() <= 8);\n-            Ok((bytes, space.0.as_ptr().cast::<c::REPARSE_DATA_BUFFER>()))\n+            Ok((bytes, space.0.as_mut_ptr().cast::<c::REPARSE_DATA_BUFFER>()))\n         }\n     }\n \n@@ -506,22 +506,22 @@ impl File {\n         unsafe {\n             let (path_buffer, subst_off, subst_len, relative) = match (*buf).ReparseTag {\n                 c::IO_REPARSE_TAG_SYMLINK => {\n-                    let info: *const c::SYMBOLIC_LINK_REPARSE_BUFFER =\n-                        ptr::addr_of!((*buf).rest).cast();\n+                    let info: *mut c::SYMBOLIC_LINK_REPARSE_BUFFER =\n+                        ptr::addr_of_mut!((*buf).rest).cast();\n                     assert!(info.is_aligned());\n                     (\n-                        ptr::addr_of!((*info).PathBuffer).cast::<u16>(),\n+                        ptr::addr_of_mut!((*info).PathBuffer).cast::<u16>(),\n                         (*info).SubstituteNameOffset / 2,\n                         (*info).SubstituteNameLength / 2,\n                         (*info).Flags & c::SYMLINK_FLAG_RELATIVE != 0,\n                     )\n                 }\n                 c::IO_REPARSE_TAG_MOUNT_POINT => {\n-                    let info: *const c::MOUNT_POINT_REPARSE_BUFFER =\n-                        ptr::addr_of!((*buf).rest).cast();\n+                    let info: *mut c::MOUNT_POINT_REPARSE_BUFFER =\n+                        ptr::addr_of_mut!((*buf).rest).cast();\n                     assert!(info.is_aligned());\n                     (\n-                        ptr::addr_of!((*info).PathBuffer).cast::<u16>(),\n+                        ptr::addr_of_mut!((*info).PathBuffer).cast::<u16>(),\n                         (*info).SubstituteNameOffset / 2,\n                         (*info).SubstituteNameLength / 2,\n                         false,\n@@ -535,13 +535,18 @@ impl File {\n                 }\n             };\n             let subst_ptr = path_buffer.add(subst_off.into());\n-            let mut subst = slice::from_raw_parts(subst_ptr, subst_len as usize);\n+            let subst = slice::from_raw_parts_mut(subst_ptr, subst_len as usize);\n             // Absolute paths start with an NT internal namespace prefix `\\??\\`\n             // We should not let it leak through.\n             if !relative && subst.starts_with(&[92u16, 63u16, 63u16, 92u16]) {\n-                subst = &subst[4..];\n+                // Turn `\\??\\` into `\\\\?\\` (a verbatim path).\n+                subst[1] = b'\\\\' as u16;\n+                // Attempt to convert to a more user-friendly path.\n+                let user = super::args::to_user_path(subst.iter().copied().chain([0]).collect())?;\n+                Ok(PathBuf::from(OsString::from_wide(&user)))\n+            } else {\n+                Ok(PathBuf::from(OsString::from_wide(subst)))\n             }\n-            Ok(PathBuf::from(OsString::from_wide(subst)))\n         }\n     }\n "}]}