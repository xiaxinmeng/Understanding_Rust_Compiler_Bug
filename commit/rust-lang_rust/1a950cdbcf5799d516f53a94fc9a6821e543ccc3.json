{"sha": "1a950cdbcf5799d516f53a94fc9a6821e543ccc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhOTUwY2RiY2Y1Nzk5ZDUxNmY1M2E5NGZjOWE2ODIxZTU0M2NjYzM=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-07-05T03:01:40Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-07-05T03:01:40Z"}, "message": "&self -> self\n\nhttps://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref", "tree": {"sha": "eb8f5f56b18579d2ce7957af38bbcc15de3bf023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb8f5f56b18579d2ce7957af38bbcc15de3bf023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a950cdbcf5799d516f53a94fc9a6821e543ccc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a950cdbcf5799d516f53a94fc9a6821e543ccc3", "html_url": "https://github.com/rust-lang/rust/commit/1a950cdbcf5799d516f53a94fc9a6821e543ccc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a950cdbcf5799d516f53a94fc9a6821e543ccc3/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b4ec73b7ed2522b837368a11863afb4b432b9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b4ec73b7ed2522b837368a11863afb4b432b9a4", "html_url": "https://github.com/rust-lang/rust/commit/6b4ec73b7ed2522b837368a11863afb4b432b9a4"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "b27537151abd6e4765bb20ebeef316643aec7466", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1a950cdbcf5799d516f53a94fc9a6821e543ccc3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a950cdbcf5799d516f53a94fc9a6821e543ccc3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=1a950cdbcf5799d516f53a94fc9a6821e543ccc3", "patch": "@@ -299,7 +299,7 @@ impl Module {\n             .collect()\n     }\n \n-    fn with_module_id(&self, module_id: CrateModuleId) -> Module {\n+    fn with_module_id(self, module_id: CrateModuleId) -> Module {\n         Module { module_id, krate: self.krate }\n     }\n }\n@@ -463,33 +463,33 @@ pub struct EnumVariant {\n }\n \n impl EnumVariant {\n-    pub fn module(&self, db: &impl HirDatabase) -> Module {\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n         self.parent.module(db)\n     }\n-    pub fn parent_enum(&self, _db: &impl DefDatabase) -> Enum {\n+    pub fn parent_enum(self, _db: &impl DefDatabase) -> Enum {\n         self.parent\n     }\n \n-    pub fn name(&self, db: &impl DefDatabase) -> Option<Name> {\n+    pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n         db.enum_data(self.parent).variants[self.id].name.clone()\n     }\n \n-    pub fn fields(&self, db: &impl HirDatabase) -> Vec<StructField> {\n+    pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n         self.variant_data(db)\n             .fields()\n             .into_iter()\n             .flat_map(|it| it.iter())\n-            .map(|(id, _)| StructField { parent: (*self).into(), id })\n+            .map(|(id, _)| StructField { parent: self.into(), id })\n             .collect()\n     }\n \n-    pub fn field(&self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n+    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n         self.variant_data(db)\n             .fields()\n             .into_iter()\n             .flat_map(|it| it.iter())\n             .find(|(_id, data)| data.name == *name)\n-            .map(|(id, _)| StructField { parent: (*self).into(), id })\n+            .map(|(id, _)| StructField { parent: self.into(), id })\n     }\n }\n \n@@ -517,11 +517,11 @@ impl DefWithBody {\n     }\n \n     /// Builds a resolver for code inside this item.\n-    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n-        match *self {\n-            DefWithBody::Const(ref c) => c.resolver(db),\n-            DefWithBody::Function(ref f) => f.resolver(db),\n-            DefWithBody::Static(ref s) => s.resolver(db),\n+    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n+        match self {\n+            DefWithBody::Const(c) => c.resolver(db),\n+            DefWithBody::Function(f) => f.resolver(db),\n+            DefWithBody::Static(s) => s.resolver(db),\n         }\n     }\n }"}]}