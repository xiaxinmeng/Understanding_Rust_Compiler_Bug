{"sha": "46767b1665245d8efa138f0a79d6ecdc7bfbdb08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NzY3YjE2NjUyNDVkOGVmYTEzOGYwYTc5ZDZlY2RjN2JmYmRiMDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-13T12:02:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-13T12:02:01Z"}, "message": "slice::from_raw_parts: explicitly mention that data must be initialized", "tree": {"sha": "2cfe6dbe42a9593d9de953c2e64408c3b3004118", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cfe6dbe42a9593d9de953c2e64408c3b3004118"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46767b1665245d8efa138f0a79d6ecdc7bfbdb08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46767b1665245d8efa138f0a79d6ecdc7bfbdb08", "html_url": "https://github.com/rust-lang/rust/commit/46767b1665245d8efa138f0a79d6ecdc7bfbdb08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46767b1665245d8efa138f0a79d6ecdc7bfbdb08/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6c84553c4fa47174d2510541a90243000fb44d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6c84553c4fa47174d2510541a90243000fb44d8", "html_url": "https://github.com/rust-lang/rust/commit/b6c84553c4fa47174d2510541a90243000fb44d8"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "3ff33fab431c4e6953a086787bf8910706e4910b", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46767b1665245d8efa138f0a79d6ecdc7bfbdb08/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46767b1665245d8efa138f0a79d6ecdc7bfbdb08/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=46767b1665245d8efa138f0a79d6ecdc7bfbdb08", "patch": "@@ -6680,6 +6680,8 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n ///       them from other data. You can obtain a pointer that is usable as `data`\n ///       for zero-length slices using [`NonNull::dangling()`].\n ///\n+/// * `data` must point to `len` consecutive properly initialized values of type `T`.\n+///\n /// * The memory referenced by the returned slice must not be mutated for the duration\n ///   of lifetime `'a`, except inside an `UnsafeCell`.\n ///\n@@ -6767,6 +6769,8 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n ///       them from other data. You can obtain a pointer that is usable as `data`\n ///       for zero-length slices using [`NonNull::dangling()`].\n ///\n+/// * `data` must point to `len` consecutive properly initialized values of type `T`.\n+///\n /// * The memory referenced by the returned slice must not be accessed through any other pointer\n ///   (not derived from the return value) for the duration of lifetime `'a`.\n ///   Both read and write accesses are forbidden."}]}