{"sha": "8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNTNhMDNkMTViZmQ0MjVjOTlmYzRmNWE3ZDZhMWVjNzFjYmU3MjA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-13T10:12:29Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-27T13:32:48Z"}, "message": "rustc: rename closure_type to fn_sig.", "tree": {"sha": "5d09b3648aa4475622f135ff2daa69f72a51988e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d09b3648aa4475622f135ff2daa69f72a51988e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "html_url": "https://github.com/rust-lang/rust/commit/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f590a44ce61888c78b9044817d8b798db5cd2ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f590a44ce61888c78b9044817d8b798db5cd2ffd", "html_url": "https://github.com/rust-lang/rust/commit/f590a44ce61888c78b9044817d8b798db5cd2ffd"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "d5020b12ee00e12c5e86295d92ad75a9a8219c03", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -1369,7 +1369,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         Some(self.tcx.closure_kind(def_id))\n     }\n \n-    pub fn closure_type(&self, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n+    /// Obtain the signature of a function or closure.\n+    /// For closures, unlike `tcx.fn_sig(def_id)`, this method will\n+    /// work during the type-checking of the enclosing function and\n+    /// return the closure signature in its partially inferred state.\n+    pub fn fn_sig(&self, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n         if let Some(tables) = self.in_progress_tables {\n             if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n                 if let Some(&ty) = tables.borrow().closure_tys.get(&id) {\n@@ -1378,7 +1382,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        self.tcx.closure_type(def_id)\n+        self.tcx.fn_sig(def_id)\n     }\n }\n "}, {"sha": "f71f75dbaa8d0982b9ec27cbe2f7f1fdda85fc62", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -1149,7 +1149,7 @@ fn confirm_closure_candidate<'cx, 'gcx, 'tcx>(\n     -> Progress<'tcx>\n {\n     let closure_typer = selcx.closure_typer();\n-    let closure_type = closure_typer.closure_type(vtable.closure_def_id)\n+    let closure_type = closure_typer.fn_sig(vtable.closure_def_id)\n         .subst(selcx.tcx(), vtable.substs.substs);\n     let Normalized {\n         value: closure_type,"}, {"sha": "c68b8ee14b884975542b26ca81e8c4d0631e67a0", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -2799,7 +2799,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                       substs: ty::ClosureSubsts<'tcx>)\n                                       -> ty::PolyTraitRef<'tcx>\n     {\n-        let closure_type = self.infcx.closure_type(closure_def_id)\n+        let closure_type = self.infcx.fn_sig(closure_def_id)\n             .subst(self.tcx(), substs.substs);\n         let ty::Binder((trait_ref, _)) =\n             self.tcx().closure_trait_ref_and_return_type(obligation.predicate.def_id(),"}, {"sha": "a6c59d4c2235436fc1e6f739b02c34ea76fa2bfc", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -875,13 +875,12 @@ define_maps! { <'tcx>\n     /// for trans. This is also the only query that can fetch non-local MIR, at present.\n     [] optimized_mir: Mir(DefId) -> &'tcx mir::Mir<'tcx>,\n \n-    /// Records the type of each closure. The def ID is the ID of the\n+    /// Type of each closure. The def ID is the ID of the\n     /// expression defining the closure.\n     [] closure_kind: ItemSignature(DefId) -> ty::ClosureKind,\n \n-    /// Records the type of each closure. The def ID is the ID of the\n-    /// expression defining the closure.\n-    [] closure_type: ItemSignature(DefId) -> ty::PolyFnSig<'tcx>,\n+    /// The signature of functions and closures.\n+    [] fn_sig: ItemSignature(DefId) -> ty::PolyFnSig<'tcx>,\n \n     /// Caches CoerceUnsized kinds for impls on custom types.\n     [] coerce_unsized_info: ItemSignature(DefId)"}, {"sha": "502eab44dac52d7c116aa6103b77fae04bc15079", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -106,7 +106,7 @@ provide! { <'tcx> tcx, def_id, cdata,\n     mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     typeck_tables_of => { cdata.item_body_tables(def_id.index, tcx) }\n     closure_kind => { cdata.closure_kind(def_id.index) }\n-    closure_type => { cdata.closure_ty(def_id.index, tcx) }\n+    fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { Rc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n     is_const_fn => { cdata.is_const_fn(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }"}, {"sha": "77f01d5c28c6e8686dd0dfaff924fe6fcd406ee5", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -1084,12 +1084,12 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn closure_ty(&self,\n-                      closure_id: DefIndex,\n-                      tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                      -> ty::PolyFnSig<'tcx> {\n+    pub fn fn_sig(&self,\n+                  closure_id: DefIndex,\n+                  tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+                  -> ty::PolyFnSig<'tcx> {\n         match self.entry(closure_id).kind {\n-            EntryKind::Closure(data) => data.decode(self).ty.decode((self, tcx)),\n+            EntryKind::Closure(data) => data.decode(self).sig.decode((self, tcx)),\n             _ => bug!(),\n         }\n     }"}, {"sha": "860b553959f20da65ee6745a33f2fb96dec7789d", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -1175,7 +1175,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n \n         let data = ClosureData {\n             kind: tcx.closure_kind(def_id),\n-            ty: self.lazy(&tcx.closure_type(def_id)),\n+            sig: self.lazy(&tcx.fn_sig(def_id)),\n         };\n \n         Entry {"}, {"sha": "36977cb5db20c8f917e56fd6eb184dc136c4926a", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -553,6 +553,6 @@ impl_stable_hash_for!(struct MethodData { fn_data, container, has_self });\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct ClosureData<'tcx> {\n     pub kind: ty::ClosureKind,\n-    pub ty: Lazy<ty::PolyFnSig<'tcx>>,\n+    pub sig: Lazy<ty::PolyFnSig<'tcx>>,\n }\n-impl_stable_hash_for!(struct ClosureData<'tcx> { kind, ty });\n+impl_stable_hash_for!(struct ClosureData<'tcx> { kind, sig });"}, {"sha": "0db74c9454ac96206f20106402327a695333539a", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -500,7 +500,7 @@ pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         ty::TyFnPtr(sig) => sig,\n         ty::TyClosure(def_id, substs) => {\n             let tcx = ccx.tcx();\n-            let sig = tcx.closure_type(def_id).subst(tcx, substs.substs);\n+            let sig = tcx.fn_sig(def_id).subst(tcx, substs.substs);\n \n             let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n             let env_ty = match tcx.closure_kind(def_id) {"}, {"sha": "60886b2b35f215fe1ff4b89df854f97c81cc4890", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -579,7 +579,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                     .find(|it| it.kind == ty::AssociatedKind::Method)\n                                     .unwrap().def_id;\n                                 // Now create its substs [Closure, Tuple]\n-                                let input = tcx.closure_type(def_id)\n+                                let input = tcx.fn_sig(def_id)\n                                     .subst(tcx, substs.substs).input(0);\n                                 let input = tcx.erase_late_bound_regions_and_normalize(&input);\n                                 let substs = tcx.mk_substs([operand.ty, input]"}, {"sha": "a5fe70a2fd79c8bdb7a7b681f514c0951b0b5f56", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -40,7 +40,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     let self_ty = tcx.mk_closure_from_closure_substs(\n         closure_did, substs);\n \n-    let sig = tcx.closure_type(closure_did).subst(tcx, substs.substs);\n+    let sig = tcx.fn_sig(closure_did).subst(tcx, substs.substs);\n     let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n     assert_eq!(sig.inputs().len(), 1);\n     let substs = tcx.mk_substs(["}, {"sha": "7cd372f3f009e1ca229758dbb495d3e2d96d71a8", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // haven't yet decided on whether the closure is fn vs\n                 // fnmut vs fnonce. If so, we have to defer further processing.\n                 if self.closure_kind(def_id).is_none() {\n-                    let closure_ty = self.closure_type(def_id).subst(self.tcx, substs.substs);\n+                    let closure_ty = self.fn_sig(def_id).subst(self.tcx, substs.substs);\n                     let fn_sig = self.replace_late_bound_regions_with_fresh_var(call_expr.span,\n                                                                    infer::FnCall,\n                                                                    &closure_ty)"}, {"sha": "c5fd1f563205f1ed3b1ad22aba766e59dce71473", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -639,7 +639,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 //     `extern \"rust-call\" fn((arg0,arg1,...)) -> _`\n                 // to\n                 //     `fn(arg0,arg1,...) -> _`\n-                let sig = self.closure_type(def_id_a).subst(self.tcx, substs_a.substs);\n+                let sig = self.fn_sig(def_id_a).subst(self.tcx, substs_a.substs);\n                 let converted_sig = sig.map_bound(|s| {\n                     let params_iter = match s.inputs()[0].sty {\n                         ty::TyTuple(params, _) => {"}, {"sha": "b92a78987a3e0b4c5fa68979a596dfc2e4f74c7b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8e53a03d15bfd425c99fc4f5a7d6a1ec71cbe720", "patch": "@@ -718,16 +718,16 @@ pub fn provide(providers: &mut Providers) {\n         typeck_item_bodies,\n         typeck_tables_of,\n         has_typeck_tables,\n-        closure_type,\n+        fn_sig,\n         closure_kind,\n         adt_destructor,\n         ..*providers\n     };\n }\n \n-fn closure_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          def_id: DefId)\n-                          -> ty::PolyFnSig<'tcx> {\n+fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    def_id: DefId)\n+                    -> ty::PolyFnSig<'tcx> {\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     tcx.typeck_tables_of(def_id).closure_tys[&node_id]\n }"}]}