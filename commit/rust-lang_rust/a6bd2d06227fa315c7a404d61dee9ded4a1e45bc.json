{"sha": "a6bd2d06227fa315c7a404d61dee9ded4a1e45bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YmQyZDA2MjI3ZmEzMTVjN2E0MDRkNjFkZWU5ZGVkNGExZTQ1YmM=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-12-30T08:38:03Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-12-30T08:38:03Z"}, "message": "Add SEARCH_IS_SOME lint", "tree": {"sha": "7877de95048398e6bf8193923537118824aba03a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7877de95048398e6bf8193923537118824aba03a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc", "html_url": "https://github.com/rust-lang/rust/commit/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd439ec9ea3ef20edefa319b479cb06739ba52d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd439ec9ea3ef20edefa319b479cb06739ba52d", "html_url": "https://github.com/rust-lang/rust/commit/bbd439ec9ea3ef20edefa319b479cb06739ba52d"}], "stats": {"total": 110, "additions": 102, "deletions": 8}, "files": [{"sha": "9fe59d4fdaf80fba2de2632f66f8b7b02ab34a81", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a6bd2d06227fa315c7a404d61dee9ded4a1e45bc", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 87 lints included in this crate:\n+There are 88 lints included in this crate:\n \n name                                                                                                     | default | meaning\n ---------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -69,6 +69,7 @@ name\n [redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)                   | warn    | using `name @ _` in a pattern\n [result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)                 | allow   | using `Result.unwrap()`, which might be better handled\n [reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)                 | warn    | Iterating over an empty range, such as `10..0` or `5..5`\n+[search_is_some](https://github.com/Manishearth/rust-clippy/wiki#search_is_some)                         | warn    | using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\n [shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                             | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n [shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                               | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n [shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                     | allow   | The name is re-bound without even using the original value"}, {"sha": "6d39cad20cdb703a942228cd1b19e1818515bc4e", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a6bd2d06227fa315c7a404d61dee9ded4a1e45bc", "patch": "@@ -180,6 +180,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         methods::OK_EXPECT,\n         methods::OPTION_MAP_UNWRAP_OR,\n         methods::OPTION_MAP_UNWRAP_OR_ELSE,\n+        methods::SEARCH_IS_SOME,\n         methods::SHOULD_IMPLEMENT_TRAIT,\n         methods::STR_TO_STRING,\n         methods::STRING_TO_STRING,"}, {"sha": "081e64b53ead0376a8c945d6f08aaa66ca02ec88", "filename": "src/methods.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=a6bd2d06227fa315c7a404d61dee9ded4a1e45bc", "patch": "@@ -158,6 +158,18 @@ declare_lint!(pub OPTION_MAP_UNWRAP_OR_ELSE, Warn,\n declare_lint!(pub FILTER_NEXT, Warn,\n               \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\");\n \n+/// **What it does:** This lint `Warn`s on an iterator search (such as `find()`, `position()`, or\n+/// `rposition()`) followed by a call to `is_some()`.\n+///\n+/// **Why is this bad?** Readability, this can be written more concisely as `_.any(_)`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `iter.find(|x| x == 0).is_some()`\n+declare_lint!(pub SEARCH_IS_SOME, Warn,\n+              \"using an iterator search followed by `is_some()`, which is more succinctly \\\n+               expressed as a call to `any()`\");\n+\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(OPTION_UNWRAP_USED, RESULT_UNWRAP_USED, STR_TO_STRING, STRING_TO_STRING,\n@@ -187,6 +199,15 @@ impl LateLintPass for MethodsPass {\n             else if let Some(arglists) = method_chain_args(expr, &[\"filter\", \"next\"]) {\n                 lint_filter_next(cx, expr, arglists[0]);\n             }\n+            else if let Some(arglists) = method_chain_args(expr, &[\"find\", \"is_some\"]) {\n+                lint_search_is_some(cx, expr, \"find\", arglists[0], arglists[1]);\n+            }\n+            else if let Some(arglists) = method_chain_args(expr, &[\"position\", \"is_some\"]) {\n+                lint_search_is_some(cx, expr, \"position\", arglists[0], arglists[1]);\n+            }\n+            else if let Some(arglists) = method_chain_args(expr, &[\"rposition\", \"is_some\"]) {\n+                lint_search_is_some(cx, expr, \"rposition\", arglists[0], arglists[1]);\n+            }\n         }\n     }\n \n@@ -362,6 +383,25 @@ fn lint_filter_next(cx: &LateContext, expr: &Expr, filter_args: &MethodArgs) {\n     }\n }\n \n+#[allow(ptr_arg)] // Type of MethodArgs is potentially a Vec\n+/// lint searching an Iterator followed by `is_some()`\n+fn lint_search_is_some(cx: &LateContext, expr: &Expr, search_method: &str, search_args: &MethodArgs,\n+                       is_some_args: &MethodArgs) {\n+    // lint if caller of search is an Iterator\n+    if match_trait_method(cx, &*is_some_args[0], &[\"core\", \"iter\", \"Iterator\"]) {\n+        let msg = format!(\"called `is_some()` after searching an iterator with {}. This is more \\\n+                           succinctly expressed by calling `any()`.\", search_method);\n+        let search_snippet = snippet(cx, search_args[1].span, \"..\");\n+        if search_snippet.lines().count() <= 1 { // add note if not multi-line\n+            span_note_and_lint(cx, SEARCH_IS_SOME, expr.span, &msg, expr.span,\n+                               &format!(\"replace this with `any({})`)\", search_snippet));\n+        }\n+        else {\n+            span_lint(cx, SEARCH_IS_SOME, expr.span, &msg);\n+        }\n+    }\n+}\n+\n // Given a `Result<T, E>` type, return its error type (`E`)\n fn get_error_type<'a>(cx: &LateContext, ty: ty::Ty<'a>) -> Option<ty::Ty<'a>> {\n     if !match_type(cx, ty, &RESULT_PATH) {"}, {"sha": "1878ae15b750fc70ef95aa107a89359dcfea0fcc", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bd2d06227fa315c7a404d61dee9ded4a1e45bc/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=a6bd2d06227fa315c7a404d61dee9ded4a1e45bc", "patch": "@@ -83,18 +83,32 @@ fn option_methods() {\n \n }\n \n-/// Struct to generate false positive for FILTER_NEXT lint\n-struct FilterNextTest {\n-    _foo: u32,\n+/// Struct to generate false positive for Iterator-based lints\n+#[derive(Copy, Clone)]\n+struct IteratorFalsePositives {\n+    foo: u32,\n }\n \n-impl FilterNextTest {\n-    fn filter(self) -> FilterNextTest {\n+impl IteratorFalsePositives {\n+    fn filter(self) -> IteratorFalsePositives {\n         self\n     }\n-    fn next(self) -> FilterNextTest {\n+\n+    fn next(self) -> IteratorFalsePositives {\n         self\n     }\n+\n+    fn find(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn position(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn rposition(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n }\n \n /// Checks implementation of FILTER_NEXT lint\n@@ -112,10 +126,48 @@ fn filter_next() {\n                    ).next();\n \n     // check that we don't lint if the caller is not an Iterator\n-    let foo = FilterNextTest { _foo: 0 };\n+    let foo = IteratorFalsePositives { foo: 0 };\n     let _ = foo.filter().next();\n }\n \n+/// Checks implementation of SEARCH_IS_SOME lint\n+fn search_is_some() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+\n+    // check `find().is_some()`, single-line\n+    let _ = v.iter().find(|&x| *x < 0).is_some(); //~ERROR called `is_some()` after searching\n+                                                  //~| NOTE replace this\n+    // check `find().is_some()`, multi-line\n+    let _ = v.iter().find(|&x| { //~ERROR called `is_some()` after searching\n+                              *x < 0\n+                          }\n+                   ).is_some();\n+\n+    // check `position().is_some()`, single-line\n+    let _ = v.iter().position(|&x| x < 0).is_some(); //~ERROR called `is_some()` after searching\n+                                                     //~| NOTE replace this\n+    // check `position().is_some()`, multi-line\n+    let _ = v.iter().position(|&x| { //~ERROR called `is_some()` after searching\n+                                  x < 0\n+                              }\n+                   ).is_some();\n+\n+    // check `rposition().is_some()`, single-line\n+    let _ = v.iter().rposition(|&x| x < 0).is_some(); //~ERROR called `is_some()` after searching\n+                                                      //~| NOTE replace this\n+    // check `rposition().is_some()`, multi-line\n+    let _ = v.iter().rposition(|&x| { //~ERROR called `is_some()` after searching\n+                                   x < 0\n+                               }\n+                   ).is_some();\n+\n+    // check that we don't lint if the caller is not an Iterator\n+    let foo = IteratorFalsePositives { foo: 0 };\n+    let _ = foo.find().is_some();\n+    let _ = foo.position().is_some();\n+    let _ = foo.rposition().is_some();\n+}\n+\n fn main() {\n     use std::io;\n "}]}