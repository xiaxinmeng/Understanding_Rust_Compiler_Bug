{"sha": "2859f8bf3984c5871df0ee7395ec732e4a79759f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NTlmOGJmMzk4NGM1ODcxZGYwZWU3Mzk1ZWM3MzJlNGE3OTc1OWY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-06-11T15:47:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-08T09:42:57Z"}, "message": "Add tests + Fix rustdoc regression + Fix rebase", "tree": {"sha": "ef87e085392c57148f81407d22b92ff81a0da657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef87e085392c57148f81407d22b92ff81a0da657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2859f8bf3984c5871df0ee7395ec732e4a79759f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2859f8bf3984c5871df0ee7395ec732e4a79759f", "html_url": "https://github.com/rust-lang/rust/commit/2859f8bf3984c5871df0ee7395ec732e4a79759f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2859f8bf3984c5871df0ee7395ec732e4a79759f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "html_url": "https://github.com/rust-lang/rust/commit/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1"}], "stats": {"total": 138, "additions": 134, "deletions": 4}, "files": [{"sha": "9d124dadb766adb911324f8a5cdc78f1eed57e38", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=2859f8bf3984c5871df0ee7395ec732e4a79759f", "patch": "@@ -874,7 +874,7 @@ impl<'a> LoweringContext<'a> {\n                                               ddpos)\n                 }\n                 PatKind::Path(ref opt_qself, ref path) => {\n-                    let opt_qself = opt_qself.map(|qself| {\n+                    let opt_qself = opt_qself.as_ref().map(|qself| {\n                         hir::QSelf { ty: self.lower_ty(&qself.ty), position: qself.position }\n                     });\n                     hir::PatKind::Path(opt_qself, self.lower_path(path))"}, {"sha": "f6f7ee069008a54d68cebcd4def2a62010e5d2f6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2859f8bf3984c5871df0ee7395ec732e4a79759f", "patch": "@@ -3135,7 +3135,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 Some(self.tcx.expect_variant_def(def))\n             }\n             Def::TyAlias(did) | Def::AssociatedTy(_, did) => {\n-                if let ty::TyStruct(adt, _) = self.tcx.lookup_item_type(did).ty.sty {\n+                if let Some(&ty::TyStruct(adt, _)) = self.tcx.opt_lookup_item_type(did)\n+                                                             .map(|scheme| &scheme.ty.sty) {\n                     Some(adt.struct_variant())\n                 } else {\n                     None"}, {"sha": "7da17b3749104ecff45962ead1407cb111076556", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2859f8bf3984c5871df0ee7395ec732e4a79759f", "patch": "@@ -2653,7 +2653,7 @@ fn resolve_type(cx: &DocContext,\n         Def::SelfTy(..) if path.segments.len() == 1 => {\n             return Generic(keywords::SelfType.name().to_string());\n         }\n-        Def::SelfTy(..) | Def::TyParam(..) => true,\n+        Def::SelfTy(..) | Def::TyParam(..) | Def::AssociatedTy(..) => true,\n         _ => false,\n     };\n     let did = register_def(&*cx, def);"}, {"sha": "3c32cb947b382f1107473fd6d81d0437c0ca927e", "filename": "src/test/compile-fail-fulldeps/issue-18986.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs?ref=2859f8bf3984c5871df0ee7395ec732e4a79759f", "patch": "@@ -16,6 +16,5 @@ pub use use_from_trait_xc::Trait;\n fn main() {\n     match () {\n         Trait { x: 42 } => () //~ ERROR expected variant, struct or type alias, found trait `Trait`\n-        //~^ ERROR `Trait` does not name a struct or a struct variant\n     }\n }"}, {"sha": "1049bcd15644fcdd87d25ddec4475fb05263f94f", "filename": "src/test/compile-fail/auxiliary/lint_stability.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_stability.rs?ref=2859f8bf3984c5871df0ee7395ec732e4a79759f", "patch": "@@ -10,6 +10,7 @@\n #![crate_name=\"lint_stability\"]\n #![crate_type = \"lib\"]\n #![feature(staged_api)]\n+#![feature(associated_type_defaults)]\n #![stable(feature = \"lint_stability\", since = \"1.0.0\")]\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n@@ -92,6 +93,15 @@ pub trait Trait {\n     fn trait_stable_text(&self) {}\n }\n \n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+pub trait TraitWithAssociatedTypes {\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    type TypeUnstable = u8;\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    type TypeDeprecated = u8;\n+}\n+\n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n impl Trait for MethodTester {}\n "}, {"sha": "afb972faaca0ef71c24ad9d3dfab828e16da98ca", "filename": "src/test/compile-fail/issue-22933-1.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Fissue-22933-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Fissue-22933-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22933-1.rs?ref=2859f8bf3984c5871df0ee7395ec732e4a79759f", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(warnings)]\n+\n+struct CNFParser {\n+    token: char,\n+}\n+\n+impl CNFParser {\n+    fn is_whitespace(c: char) -> bool {\n+        c == ' ' || c == '\\n'\n+    }\n+\n+    fn consume_whitespace(&mut self) {\n+        self.consume_while(&(CNFParser::is_whitespace))\n+    }\n+\n+    fn consume_while(&mut self, p: &Fn(char) -> bool) {\n+        while p(self.token) {\n+            return\n+        }\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "7d619c270d32b962913e7999a206a1c0fa38762a", "filename": "src/test/compile-fail/issue-22933-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs?ref=2859f8bf3984c5871df0ee7395ec732e4a79759f", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Delicious {\n+    Pie      = 0x1,\n+    Apple    = 0x2,\n+    ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n+    //~^ ERROR constant evaluation error: unresolved path in constant expression\n+}\n+\n+const FOO: [u32; u8::MIN as usize] = [];\n+//~^ ERROR array length constant evaluation error: unresolved path in constant expression\n+\n+fn main() {}"}, {"sha": "6fae18dec10a67e602338a3f15de815a623b1589", "filename": "src/test/compile-fail/issue-34209.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs?ref=2859f8bf3984c5871df0ee7395ec732e4a79759f", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum S {\n+    A,\n+}\n+\n+fn bug(l: S) {\n+    match l {\n+        S::B{ } => { },\n+        //~^ ERROR ambiguous associated type; specify the type using the syntax `<S as Trait>::B`\n+    }\n+}\n+\n+fn main () {}"}, {"sha": "953cd4a2ff5eac744efb08592f9c7b13f58da167", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=2859f8bf3984c5871df0ee7395ec732e4a79759f", "patch": "@@ -128,6 +128,11 @@ mod cross_crate {\n         <Foo>::trait_stable_text(&foo);\n         <Foo as Trait>::trait_stable_text(&foo);\n \n+        struct S1<T: TraitWithAssociatedTypes>(T::TypeUnstable);\n+        //~^ ERROR use of unstable library feature\n+        struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n+        //~^ ERROR use of deprecated item\n+\n         let _ = DeprecatedStruct { //~ ERROR use of deprecated item\n             i: 0 //~ ERROR use of deprecated item\n         };"}, {"sha": "d3f840f4fe9763eb651926233624cab49be00b25", "filename": "src/test/compile-fail/struct-pat-associated-path.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Fstruct-pat-associated-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859f8bf3984c5871df0ee7395ec732e4a79759f/src%2Ftest%2Fcompile-fail%2Fstruct-pat-associated-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-pat-associated-path.rs?ref=2859f8bf3984c5871df0ee7395ec732e4a79759f", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+trait Tr {\n+    type A;\n+}\n+\n+impl Tr for S {\n+    type A = S;\n+}\n+\n+fn f<T: Tr>() {\n+    match S {\n+        T::A {} => {} //~ ERROR `T::A` does not name a struct or a struct variant\n+    }\n+}\n+\n+fn g<T: Tr<A = S>>() {\n+    match S {\n+        T::A {} => {} //~ ERROR `T::A` does not name a struct or a struct variant\n+    }\n+}\n+\n+fn main() {\n+    match S {\n+        S::A {} => {} //~ ERROR ambiguous associated type\n+    }\n+}"}]}