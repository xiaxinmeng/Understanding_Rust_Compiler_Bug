{"sha": "2314ab29c26c9364c7f8e26b55ce091998489f58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMTRhYjI5YzI2YzkzNjRjN2Y4ZTI2YjU1Y2UwOTE5OTg0ODlmNTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-01T21:03:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-13T12:19:16Z"}, "message": "Unify structures and enum variants in HIR", "tree": {"sha": "28d0a135b5a644f87e8224f14caa165eeb97a5e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d0a135b5a644f87e8224f14caa165eeb97a5e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2314ab29c26c9364c7f8e26b55ce091998489f58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2314ab29c26c9364c7f8e26b55ce091998489f58", "html_url": "https://github.com/rust-lang/rust/commit/2314ab29c26c9364c7f8e26b55ce091998489f58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2314ab29c26c9364c7f8e26b55ce091998489f58/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea47c2b6b349d7f252a6a734ced8204e6ef70546", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea47c2b6b349d7f252a6a734ced8204e6ef70546", "html_url": "https://github.com/rust-lang/rust/commit/ea47c2b6b349d7f252a6a734ced8204e6ef70546"}], "stats": {"total": 281, "additions": 62, "deletions": 219}, "files": [{"sha": "3edeaaccbde44f9d89eea12bcc8a56c0be2a3dfd", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -138,22 +138,11 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                                         NodeVariant(&**v),\n                                         DefPathData::EnumVariant(v.node.name));\n \n-                    match v.node.kind {\n-                        TupleVariantKind(ref args) => {\n-                            for arg in args {\n-                                self.create_def_with_parent(Some(variant_def_index),\n-                                                            arg.id,\n-                                                            DefPathData::PositionalField);\n-                            }\n-                        }\n-                        StructVariantKind(ref def) => {\n-                            for field in &def.fields {\n-                                self.create_def_with_parent(\n-                                    Some(variant_def_index),\n-                                    field.node.id,\n-                                    DefPathData::Field(field.node.kind));\n-                            }\n-                        }\n+                    for field in &v.node.def.fields {\n+                        self.create_def_with_parent(\n+                            Some(variant_def_index),\n+                            field.node.id,\n+                            DefPathData::Field(field.node.kind));\n                     }\n                 }\n             }"}, {"sha": "96e103aa4f4b7905a9218ba299465f737924839f", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -475,13 +475,13 @@ impl<'ast> Map<'ast> {\n         match self.find(id) {\n             Some(NodeItem(i)) => {\n                 match i.node {\n-                    ItemStruct(ref struct_def, _) => &**struct_def,\n+                    ItemStruct(ref struct_def, _) => struct_def,\n                     _ => panic!(\"struct ID bound to non-struct\")\n                 }\n             }\n             Some(NodeVariant(variant)) => {\n-                match variant.node.kind {\n-                    StructVariantKind(ref struct_def) => &**struct_def,\n+                match variant.node.def.ctor_id {\n+                    None => &variant.node.def,\n                     _ => panic!(\"struct ID bound to enum variant that isn't struct-like\"),\n                 }\n             }"}, {"sha": "876ec804e278ed0689af5957dfd7bb9d8728c2c8", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -435,24 +435,15 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod { abi, items }: ForeignMod,\n }\n \n pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n-    v.map(|Spanned { node: Variant_ { id, name, attrs, kind, disr_expr }, span }| {\n-        Spanned {\n-            node: Variant_ {\n-                id: fld.new_id(id),\n-                name: name,\n-                attrs: fold_attrs(attrs, fld),\n-                kind: match kind {\n-                    TupleVariantKind(variant_args) => {\n-                        TupleVariantKind(variant_args.move_map(|x| fld.fold_variant_arg(x)))\n-                    }\n-                    StructVariantKind(struct_def) => {\n-                        StructVariantKind(fld.fold_struct_def(struct_def))\n-                    }\n-                },\n-                disr_expr: disr_expr.map(|e| fld.fold_expr(e)),\n-            },\n-            span: fld.new_span(span),\n-        }\n+    v.map(|Spanned {node: Variant_ {id, name, attrs, def, disr_expr}, span}| Spanned {\n+        node: Variant_ {\n+            id: fld.new_id(id),\n+            name: name,\n+            attrs: fold_attrs(attrs, fld),\n+            def: fld.fold_struct_def(def),\n+            disr_expr: disr_expr.map(|e| fld.fold_expr(e)),\n+        },\n+        span: fld.new_span(span),\n     })\n }\n "}, {"sha": "8f5f95b110468e6d2b20a32a5e93f99c3fd4a7b5", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -1038,7 +1038,7 @@ pub struct EnumDef {\n pub struct Variant_ {\n     pub name: Name,\n     pub attrs: Vec<Attribute>,\n-    pub kind: VariantKind,\n+    pub def: P<StructDef>,\n     pub id: NodeId,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,"}, {"sha": "0350c9ff114432e0f546a15b768a159f26b6f31f", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -267,16 +267,8 @@ pub fn lower_variant(_lctx: &LoweringContext, v: &Variant) -> P<hir::Variant> {\n             id: v.node.id,\n             name: v.node.name.name,\n             attrs: v.node.attrs.clone(),\n-            kind: {\n-                if v.node.def.ctor_id.is_none() {\n-                    hir::StructVariantKind(lower_struct_def(_lctx, &v.node.def))\n-                } else {\n-                    hir::TupleVariantKind(v.node.def.fields.iter().map(|ref field| {\n-                        hir::VariantArg { id: field.node.id, ty: lower_ty(_lctx, &field.node.ty) }\n-                    }).collect())\n-                }\n-            },\n-            disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(_lctx, e)),\n+            def: lower_struct_def(_lctx, &v.node.def),\n+            disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(e)),\n         },\n         span: v.span,\n     })"}, {"sha": "ee6be06428e1699101f8d806e406d170b4484ec3", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -734,7 +734,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemStruct(ref struct_def, ref generics) => {\n                 try!(self.head(&visibility_qualified(item.vis, \"struct\")));\n-                try!(self.print_struct(&**struct_def, generics, item.name, item.span));\n+                try!(self.print_struct(&**struct_def, generics, item.name, item.span, true));\n             }\n \n             hir::ItemDefaultImpl(unsafety, ref trait_ref) => {\n@@ -891,7 +891,8 @@ impl<'a> State<'a> {\n                         struct_def: &hir::StructDef,\n                         generics: &hir::Generics,\n                         name: ast::Name,\n-                        span: codemap::Span)\n+                        span: codemap::Span,\n+                        print_finalizer: bool)\n                         -> io::Result<()> {\n         try!(self.print_name(name));\n         try!(self.print_generics(generics));\n@@ -913,7 +914,9 @@ impl<'a> State<'a> {\n                 try!(self.pclose());\n             }\n             try!(self.print_where_clause(&generics.where_clause));\n-            try!(word(&mut self.s, \";\"));\n+            if print_finalizer {\n+                try!(word(&mut self.s, \";\"));\n+            }\n             try!(self.end());\n             self.end() // close the outer-box\n         } else {\n@@ -943,21 +946,9 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_variant(&mut self, v: &hir::Variant) -> io::Result<()> {\n-        match v.node.kind {\n-            hir::TupleVariantKind(ref args) => {\n-                try!(self.print_name(v.node.name));\n-                if !args.is_empty() {\n-                    try!(self.popen());\n-                    try!(self.commasep(Consistent, &args[..], |s, arg| s.print_type(&*arg.ty)));\n-                    try!(self.pclose());\n-                }\n-            }\n-            hir::StructVariantKind(ref struct_def) => {\n-                try!(self.head(\"\"));\n-                let generics = ::util::empty_generics();\n-                try!(self.print_struct(&**struct_def, &generics, v.node.name, v.span));\n-            }\n-        }\n+        try!(self.head(\"\"));\n+        let generics = ::util::empty_generics();\n+        try!(self.print_struct(&v.node.def, &generics, v.node.name, v.span, false));\n         match v.node.disr_expr {\n             Some(ref d) => {\n                 try!(space(&mut self.s));"}, {"sha": "6f9babcc7fd613f77bcc4beb47617d991e5bd8a9", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -333,20 +333,7 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         variant: &'v Variant,\n                                         generics: &'v Generics) {\n     visitor.visit_name(variant.span, variant.node.name);\n-\n-    match variant.node.kind {\n-        TupleVariantKind(ref variant_arguments) => {\n-            for variant_argument in variant_arguments {\n-                visitor.visit_ty(&variant_argument.ty)\n-            }\n-        }\n-        StructVariantKind(ref struct_definition) => {\n-            visitor.visit_struct_def(struct_definition,\n-                                     variant.node.name,\n-                                     generics,\n-                                     variant.node.id)\n-        }\n-    }\n+    visitor.visit_struct_def(&variant.node.def, variant.node.name, generics, variant.node.id);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);\n }"}, {"sha": "a3f40efa483319c227b14defc265f0e80e1ca6fe", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -49,8 +49,6 @@ use rustc_front::hir::{ItemForeignMod, ItemImpl, ItemMod, ItemStatic, ItemDefaul\n use rustc_front::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n use rustc_front::hir::{NamedField, PathListIdent, PathListMod, Public};\n use rustc_front::hir::StmtDecl;\n-use rustc_front::hir::StructVariantKind;\n-use rustc_front::hir::TupleVariantKind;\n use rustc_front::hir::UnnamedField;\n use rustc_front::hir::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n use rustc_front::hir::Visibility;\n@@ -589,9 +587,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                        item_id: DefId,\n                                        parent: &Rc<Module>) {\n         let name = variant.node.name;\n-        let is_exported = match variant.node.kind {\n-            TupleVariantKind(_) => false,\n-            StructVariantKind(_) => {\n+        let is_exported = match variant.node.def.ctor_id {\n+            Some(_) => false,\n+            None => {\n                 // Not adding fields for variants as they are not accessed with a self receiver\n                 let variant_def_id = self.ast_map.local_def_id(variant.node.id);\n                 self.structs.insert(variant_def_id, Vec::new());"}, {"sha": "b3c0aca954ec04e61ca5c21aa13106cf0525d541", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -501,19 +501,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n         }\n \n         // `visit::walk_variant` without the discriminant expression.\n-        match variant.node.kind {\n-            hir::TupleVariantKind(ref variant_arguments) => {\n-                for variant_argument in variant_arguments {\n-                    self.visit_ty(&*variant_argument.ty);\n-                }\n-            }\n-            hir::StructVariantKind(ref struct_definition) => {\n-                self.visit_struct_def(&**struct_definition,\n-                                      variant.node.name,\n-                                      generics,\n-                                      variant.node.id);\n-            }\n-        }\n+        self.visit_struct_def(&variant.node.def, variant.node.name, generics, variant.node.id);\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem) {\n         execute_callback!(hir_map::Node::NodeForeignItem(foreign_item), self);"}, {"sha": "6baa3c5e0db6ddc4b897d3e1bdd40baa0a36fb55", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -2428,13 +2428,12 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n \n         hir_map::NodeVariant(ref v) => {\n             let llfn;\n-            let args = match v.node.kind {\n-                hir::TupleVariantKind(ref args) => args,\n-                hir::StructVariantKind(_) => {\n-                    ccx.sess().bug(\"struct variant kind unexpected in get_item_val\")\n-                }\n+            let fields = if v.node.def.ctor_id.is_none() {\n+                ccx.sess().bug(\"struct variant kind unexpected in get_item_val\")\n+            } else {\n+                &v.node.def.fields\n             };\n-            assert!(!args.is_empty());\n+            assert!(!fields.is_empty());\n             let ty = ccx.tcx().node_id_to_type(id);\n             let parent = ccx.tcx().map.get_parent(id);\n             let enm = ccx.tcx().map.expect_item(parent);"}, {"sha": "debd4d232b8d17fb7480095c1924cb249429a691", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -417,10 +417,9 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n             || \"local item should be in ast map\".to_string());\n \n         match map_node {\n-            hir_map::NodeVariant(v) => match v.node.kind {\n-                hir::TupleVariantKind(ref args) => !args.is_empty(),\n-                _ => false\n-            },\n+            hir_map::NodeVariant(v) => {\n+                v.node.def.ctor_id.is_some() && !v.node.def.fields.is_empty()\n+            }\n             hir_map::NodeStructCtor(_) => true,\n             _ => false\n         }"}, {"sha": "e62b7a53049b58b46be75ca05484d449aa8f1b51", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -647,41 +647,7 @@ fn enum_variants<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                            enum_def: &hir::EnumDef)\n                            -> Vec<AdtVariant<'tcx>> {\n     enum_def.variants.iter()\n-        .map(|variant| {\n-            match variant.node.kind {\n-                hir::TupleVariantKind(ref args) if !args.is_empty() => {\n-                    let ctor_ty = fcx.tcx().node_id_to_type(variant.node.id);\n-\n-                    // the regions in the argument types come from the\n-                    // enum def'n, and hence will all be early bound\n-                    let arg_tys = fcx.tcx().no_late_bound_regions(&ctor_ty.fn_args()).unwrap();\n-                    AdtVariant {\n-                        fields: args.iter().enumerate().map(|(index, arg)| {\n-                            let arg_ty = arg_tys[index];\n-                            let arg_ty =\n-                                fcx.instantiate_type_scheme(variant.span,\n-                                                            &fcx.inh\n-                                                                .infcx\n-                                                                .parameter_environment\n-                                                                .free_substs,\n-                                                            &arg_ty);\n-                            AdtField {\n-                                ty: arg_ty,\n-                                span: arg.ty.span\n-                            }\n-                        }).collect()\n-                    }\n-                }\n-                hir::TupleVariantKind(_) => {\n-                    AdtVariant {\n-                        fields: Vec::new()\n-                    }\n-                }\n-                hir::StructVariantKind(ref struct_def) => {\n-                    struct_variant(fcx, &**struct_def)\n-                }\n-            }\n-        })\n+        .map(|variant| struct_variant(fcx, &variant.node.def))\n         .collect()\n }\n "}, {"sha": "cf1be635ea3af5534b9ef49dcc9d8e331df829f9", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -544,41 +544,7 @@ fn enum_variants<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                            enum_def: &hir::EnumDef)\n                            -> Vec<AdtVariant<'tcx>> {\n     enum_def.variants.iter()\n-        .map(|variant| {\n-            match variant.node.kind {\n-                hir::TupleVariantKind(ref args) if !args.is_empty() => {\n-                    let ctor_ty = fcx.tcx().node_id_to_type(variant.node.id);\n-\n-                    // the regions in the argument types come from the\n-                    // enum def'n, and hence will all be early bound\n-                    let arg_tys = fcx.tcx().no_late_bound_regions(&ctor_ty.fn_args()).unwrap();\n-                    AdtVariant {\n-                        fields: args.iter().enumerate().map(|(index, arg)| {\n-                            let arg_ty = arg_tys[index];\n-                            let arg_ty =\n-                                fcx.instantiate_type_scheme(variant.span,\n-                                                            &fcx.inh\n-                                                                .infcx\n-                                                                .parameter_environment\n-                                                                .free_substs,\n-                                                            &arg_ty);\n-                            AdtField {\n-                                ty: arg_ty,\n-                                span: arg.ty.span\n-                            }\n-                        }).collect()\n-                    }\n-                }\n-                hir::TupleVariantKind(_) => {\n-                    AdtVariant {\n-                        fields: Vec::new()\n-                    }\n-                }\n-                hir::StructVariantKind(ref struct_def) => {\n-                    struct_variant(fcx, &**struct_def)\n-                }\n-            }\n-        })\n+        .map(|variant| struct_variant(fcx, &variant.node.def))\n         .collect()\n }\n "}, {"sha": "4217b0d481f169960b63ce7538f388cf67e11931", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 38, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -1065,31 +1065,16 @@ fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                         scheme: ty::TypeScheme<'tcx>,\n                                         predicates: ty::GenericPredicates<'tcx>,\n                                         variants: &[P<hir::Variant>]) {\n-    let tcx = ccx.tcx;\n-    let icx = ccx.icx(&predicates);\n-\n     // fill the field types\n     for (variant, ty_variant) in variants.iter().zip(def.variants.iter()) {\n-        match variant.node.kind {\n-            hir::TupleVariantKind(ref args) => {\n-                let rs = ExplicitRscope;\n-                let input_tys: Vec<_> = args.iter().map(|va| icx.to_ty(&rs, &*va.ty)).collect();\n-                for (field, &ty) in ty_variant.fields.iter().zip(input_tys.iter()) {\n-                    field.fulfill_ty(ty);\n-                }\n-            }\n-\n-            hir::StructVariantKind(ref struct_def) => {\n-                for (f, ty_f) in struct_def.fields.iter().zip(ty_variant.fields.iter()) {\n-                    convert_field(ccx, &scheme.generics, &predicates, f, ty_f)\n-                }\n-            }\n-        };\n+        for (f, ty_f) in variant.node.def.fields.iter().zip(ty_variant.fields.iter()) {\n+            convert_field(ccx, &scheme.generics, &predicates, f, ty_f)\n+        }\n \n         // Convert the ctor, if any. This also registers the variant as\n         // an item.\n         convert_variant_ctor(\n-            tcx,\n+            ccx.tcx,\n             variant.node.id,\n             ty_variant,\n             scheme.clone(),\n@@ -1223,25 +1208,7 @@ fn convert_enum_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n     {\n         let did = tcx.map.local_def_id(v.node.id);\n         let name = v.node.name;\n-        match v.node.kind {\n-            hir::TupleVariantKind(ref va) => {\n-                ty::VariantDefData {\n-                    did: did,\n-                    name: name,\n-                    disr_val: disr,\n-                    fields: va.iter().map(|&hir::VariantArg { id, .. }| {\n-                        ty::FieldDefData::new(\n-                            tcx.map.local_def_id(id),\n-                            special_idents::unnamed_field.name,\n-                            hir::Visibility::Public\n-                        )\n-                    }).collect()\n-                }\n-            }\n-            hir::StructVariantKind(ref def) => {\n-                convert_struct_variant(tcx, did, name, disr, &def)\n-            }\n-        }\n+        convert_struct_variant(tcx, did, name, disr, &v.node.def)\n     }\n     let did = tcx.map.local_def_id(it.id);\n     let repr_hints = tcx.lookup_repr_hints(did);"}, {"sha": "0d2d1118883b45c645d614de88a5f6c1bdc638c7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -1855,7 +1855,7 @@ impl Clean<Item> for doctree::Variant {\n             stability: self.stab.clean(cx),\n             def_id: cx.map.local_def_id(self.id),\n             inner: VariantItem(Variant {\n-                kind: self.kind.clean(cx),\n+                kind: struct_def_to_variant_kind(&self.def, cx),\n             }),\n         }\n     }\n@@ -1932,6 +1932,16 @@ impl Clean<VariantKind> for hir::VariantKind {\n     }\n }\n \n+fn struct_def_to_variant_kind(struct_def: &hir::StructDef, cx: &DocContext) -> VariantKind {\n+    if struct_def.ctor_id.is_none() {\n+        StructVariant(struct_def.clean(cx))\n+    } else if struct_def.fields.is_empty() {\n+        CLikeVariant\n+    } else {\n+        TupleVariant(struct_def.fields.iter().map(|x| x.node.ty.clean(cx)).collect())\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Span {\n     pub filename: String,"}, {"sha": "4296c79be50f9e05fb8ad6a4132e1eaf2ff088d6", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -119,7 +119,7 @@ pub struct Enum {\n pub struct Variant {\n     pub name: Name,\n     pub attrs: Vec<ast::Attribute>,\n-    pub kind: hir::VariantKind,\n+    pub def: P<hir::StructDef>,\n     pub id: ast::NodeId,\n     pub stab: Option<attr::Stability>,\n     pub whence: Span,"}, {"sha": "303f344d8c3713aa402105d1d879d67bd368b194", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2314ab29c26c9364c7f8e26b55ce091998489f58/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=2314ab29c26c9364c7f8e26b55ce091998489f58", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 attrs: v.node.attrs.clone(),\n                 stab: self.stability(v.node.id),\n                 id: v.node.id,\n-                kind: v.node.kind.clone(),\n+                def: v.node.def.clone(),\n                 whence: v.span,\n             }).collect(),\n             vis: it.vis,"}]}