{"sha": "76fb05d91dbbd8ddbe2f1b108fc3e05e99f96c0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZmIwNWQ5MWRiYmQ4ZGRiZTJmMWIxMDhmYzNlMDVlOTlmOTZjMGY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-24T14:17:34Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-24T14:18:37Z"}, "message": "Clean up Ty a bit\n\nRemoving irrelevant comments copied from rustc etc.", "tree": {"sha": "419e55768bc7b717865d09457ccacd2caa88ed54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/419e55768bc7b717865d09457ccacd2caa88ed54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76fb05d91dbbd8ddbe2f1b108fc3e05e99f96c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76fb05d91dbbd8ddbe2f1b108fc3e05e99f96c0f", "html_url": "https://github.com/rust-lang/rust/commit/76fb05d91dbbd8ddbe2f1b108fc3e05e99f96c0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76fb05d91dbbd8ddbe2f1b108fc3e05e99f96c0f/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1d0b5bc3c09ef511db442c39ff382e8bdd23276", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d0b5bc3c09ef511db442c39ff382e8bdd23276", "html_url": "https://github.com/rust-lang/rust/commit/a1d0b5bc3c09ef511db442c39ff382e8bdd23276"}], "stats": {"total": 60, "additions": 22, "deletions": 38}, "files": [{"sha": "e1edf1bffba8aa1cd410adfc5587511f2ca1cc94", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 22, "deletions": 38, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/76fb05d91dbbd8ddbe2f1b108fc3e05e99f96c0f/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76fb05d91dbbd8ddbe2f1b108fc3e05e99f96c0f/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=76fb05d91dbbd8ddbe2f1b108fc3e05e99f96c0f", "patch": "@@ -35,32 +35,22 @@ pub enum Ty {\n     /// A primitive floating-point type. For example, `f64`.\n     Float(primitive::FloatTy),\n \n-    /// Structures, enumerations and unions.\n-    ///\n-    /// Substs here, possibly against intuition, *may* contain `Param`s.\n-    /// That is, even after substitution it is possible that there are type\n-    /// variables. This happens when the `Adt` corresponds to an ADT\n-    /// definition and not a concrete use of it.\n-    // Adt(&'tcx AdtDef, &'tcx Substs<'tcx>),\n-\n-    // Foreign(DefId),\n-\n+    // Structures, enumerations and unions.\n+    // Adt(AdtDef, Substs),\n     /// The pointee of a string slice. Written as `str`.\n     Str,\n \n-    /// An array with the given length. Written as `[T; n]`.\n-    // Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),\n-\n+    // An array with the given length. Written as `[T; n]`.\n+    // Array(Ty, ty::Const),\n     /// The pointee of an array slice.  Written as `[T]`.\n     Slice(TyRef),\n \n-    /// A raw pointer. Written as `*mut T` or `*const T`\n+    // A raw pointer. Written as `*mut T` or `*const T`\n     // RawPtr(TypeAndMut<'tcx>),\n \n-    /// A reference; a pointer with an associated lifetime. Written as\n-    /// `&'a mut T` or `&'a T`.\n-    // Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),\n-\n+    // A reference; a pointer with an associated lifetime. Written as\n+    // `&'a mut T` or `&'a T`.\n+    // Ref(Ty<'tcx>, hir::Mutability),\n     /// A pointer to a function.  Written as `fn() -> i32`.\n     ///\n     /// For example the type of `bar` here:\n@@ -71,9 +61,8 @@ pub enum Ty {\n     /// ```\n     FnPtr(Arc<FnSig>),\n \n-    /// A trait, defined with `trait`.\n-    // Dynamic(Binder<&'tcx List<ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),\n-\n+    // A trait, defined with `dyn trait`.\n+    // Dynamic(),\n     /// The anonymous type of a closure. Used to represent the type of\n     /// `|a| a`.\n     // Closure(DefId, ClosureSubsts<'tcx>),\n@@ -92,30 +81,25 @@ pub enum Ty {\n     /// A tuple type.  For example, `(i32, bool)`.\n     Tuple(Vec<Ty>),\n \n-    /// The projection of an associated type.  For example,\n-    /// `<T as Trait<..>>::N`.\n-    // Projection(ProjectionTy<'tcx>),\n+    // The projection of an associated type.  For example,\n+    // `<T as Trait<..>>::N`.\n+    // Projection(ProjectionTy),\n \n-    /// Opaque (`impl Trait`) type found in a return type.\n-    /// The `DefId` comes either from\n-    /// * the `impl Trait` ast::Ty node,\n-    /// * or the `existential type` declaration\n-    /// The substitutions are for the generics of the function in question.\n-    /// After typeck, the concrete type can be found in the `types` map.\n-    // Opaque(DefId, &'tcx Substs<'tcx>),\n+    // Opaque (`impl Trait`) type found in a return type.\n+    // The `DefId` comes either from\n+    // * the `impl Trait` ast::Ty node,\n+    // * or the `existential type` declaration\n+    // The substitutions are for the generics of the function in question.\n+    // Opaque(DefId, Substs),\n \n-    /// A type parameter; for example, `T` in `fn f<T>(x: T) {}\n+    // A type parameter; for example, `T` in `fn f<T>(x: T) {}\n     // Param(ParamTy),\n \n-    /// Bound type variable, used only when preparing a trait query.\n-    // Bound(ty::DebruijnIndex, BoundTy),\n-\n-    /// A placeholder type - universally quantified higher-ranked type.\n+    // A placeholder type - universally quantified higher-ranked type.\n     // Placeholder(ty::PlaceholderType),\n \n-    /// A type variable used during type checking.\n+    // A type variable used during type checking.\n     // Infer(InferTy),\n-\n     /// A placeholder for a type which could not be computed; this is\n     /// propagated to avoid useless error messages.\n     Unknown,"}]}