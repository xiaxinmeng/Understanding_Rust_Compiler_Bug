{"sha": "5b71d769ffe751399b538fb0fdb51ec88345061b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNzFkNzY5ZmZlNzUxMzk5YjUzOGZiMGZkYjUxZWM4ODM0NTA2MWI=", "commit": {"author": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-05-04T17:45:56Z"}, "committer": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-05-04T17:45:56Z"}, "message": "moved metadata provider impls to decoder", "tree": {"sha": "22d53e6bfc5cbcf0c4e76d80c95ced0894d9a87d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22d53e6bfc5cbcf0c4e76d80c95ced0894d9a87d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b71d769ffe751399b538fb0fdb51ec88345061b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b71d769ffe751399b538fb0fdb51ec88345061b", "html_url": "https://github.com/rust-lang/rust/commit/5b71d769ffe751399b538fb0fdb51ec88345061b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b71d769ffe751399b538fb0fdb51ec88345061b/comments", "author": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03fe10d91d3361144ab5c8a142daf63bc0ff143e", "url": "https://api.github.com/repos/rust-lang/rust/commits/03fe10d91d3361144ab5c8a142daf63bc0ff143e", "html_url": "https://github.com/rust-lang/rust/commit/03fe10d91d3361144ab5c8a142daf63bc0ff143e"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "a0c887e95d6c7964ef9379cd028918270ccd1b7e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b71d769ffe751399b538fb0fdb51ec88345061b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b71d769ffe751399b538fb0fdb51ec88345061b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=5b71d769ffe751399b538fb0fdb51ec88345061b", "patch": "@@ -41,8 +41,6 @@ use rustc::hir::svh::Svh;\n use rustc_back::target::Target;\n use rustc::hir;\n \n-use std::collections::BTreeMap;\n-\n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $cdata:ident $($name:ident => $compute:block)*) => {\n         pub fn provide<$lt>(providers: &mut Providers<$lt>) {\n@@ -121,21 +119,11 @@ provide! { <'tcx> tcx, def_id, cdata\n     fn_arg_names => { cdata.get_fn_arg_names(def_id.index) }\n     impl_parent => { cdata.get_parent_impl(def_id.index) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n-    item_body_nested_bodies => {\n-        let map: BTreeMap<_, _> = cdata.entry(def_id.index).ast.into_iter().flat_map(|ast| {\n-            ast.decode(cdata).nested_bodies.decode(cdata).map(|body| (body.id(), body))\n-        }).collect();\n-\n-        Rc::new(map)\n-    }\n+    item_body_nested_bodies => { Rc::new(cdata.item_body_nested_bodies(def_id.index)) }\n     const_is_rvalue_promotable_to_static => {\n-        cdata.entry(def_id.index).ast.expect(\"const item missing `ast`\")\n-            .decode(cdata).rvalue_promotable_to_static\n-    }\n-    is_mir_available => {\n-        !cdata.is_proc_macro(def_id.index) &&\n-        cdata.maybe_entry(def_id.index).and_then(|item| item.decode(cdata).mir).is_some()\n+        cdata.const_is_rvalue_promotable_to_static(def_id.index)\n     }\n+    is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n }\n \n impl CrateStore for cstore::CStore {"}, {"sha": "b89b5181e7bb73751eed29ac4229bb29ead83b7c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5b71d769ffe751399b538fb0fdb51ec88345061b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b71d769ffe751399b538fb0fdb51ec88345061b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5b71d769ffe751399b538fb0fdb51ec88345061b", "patch": "@@ -29,6 +29,7 @@ use rustc::mir::Mir;\n \n use std::borrow::Cow;\n use std::cell::Ref;\n+use std::collections::BTreeMap;\n use std::io;\n use std::mem;\n use std::rc::Rc;\n@@ -448,16 +449,16 @@ impl<'tcx> EntryKind<'tcx> {\n }\n \n impl<'a, 'tcx> CrateMetadata {\n-    pub fn is_proc_macro(&self, id: DefIndex) -> bool {\n+    fn is_proc_macro(&self, id: DefIndex) -> bool {\n         self.proc_macros.is_some() && id != CRATE_DEF_INDEX\n     }\n \n-    pub fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n+    fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n         assert!(!self.is_proc_macro(item_id));\n         self.root.index.lookup(self.blob.raw_bytes(), item_id)\n     }\n \n-    pub fn entry(&self, item_id: DefIndex) -> Entry<'tcx> {\n+    fn entry(&self, item_id: DefIndex) -> Entry<'tcx> {\n         match self.maybe_entry(item_id) {\n             None => {\n                 bug!(\"entry: id not found: {:?} in crate {:?} with number {}\",\n@@ -779,6 +780,22 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx.alloc_tables(ast.tables.decode((self, tcx)))\n     }\n \n+    pub fn item_body_nested_bodies(&self, id: DefIndex) -> BTreeMap<hir::BodyId, hir::Body> {\n+        self.entry(id).ast.into_iter().flat_map(|ast| {\n+            ast.decode(self).nested_bodies.decode(self).map(|body| (body.id(), body))\n+        }).collect()\n+    }\n+\n+    pub fn const_is_rvalue_promotable_to_static(&self, id: DefIndex) -> bool {\n+        self.entry(id).ast.expect(\"const item missing `ast`\")\n+            .decode(self).rvalue_promotable_to_static\n+    }\n+\n+    pub fn is_item_mir_available(&self, id: DefIndex) -> bool {\n+        !self.is_proc_macro(id) &&\n+        self.maybe_entry(id).and_then(|item| item.decode(self).mir).is_some()\n+    }\n+\n     pub fn maybe_get_optimized_mir(&self,\n                                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    id: DefIndex)"}]}