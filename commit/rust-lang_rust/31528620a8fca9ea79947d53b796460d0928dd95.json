{"sha": "31528620a8fca9ea79947d53b796460d0928dd95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNTI4NjIwYThmY2E5ZWE3OTk0N2Q1M2I3OTY0NjBkMDkyOGRkOTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-27T10:27:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-27T10:27:01Z"}, "message": "Merge #3740\n\n3740: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bf2c6818ab92edc8089efddc450f17efcbde4201", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf2c6818ab92edc8089efddc450f17efcbde4201"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31528620a8fca9ea79947d53b796460d0928dd95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefdT1CRBK7hj4Ov3rIwAAdHIIAFGIGQ4ND2KbsxE0OCLm6ZwL\nXgGTNCOvJ7f8ADlGF7PjiTw3rgSL1MX37o9C0MnMf+ZkBnpmammOC4HH5/nbZUk5\nvjPXLXE3xgr1Rwy9nOMY0i9Uwpbc1+NpS1XHPlmOrimkH4Csj6y/RpoSSH53vQ6c\nPU62/mIfqMFEXoA3sC3gj4WX/hZwQ8hY4gDdn4aJevXZ3T/GN84Nf2JtCeuxrWDD\ndwigR1+f/2p+sGRZPiHguYHlrmj+HwDgG+Vrtmv2ZsNqvlXOemX7A/z9UTiAen51\nTKZ5zgRxxGS4VNmxYvzA6xfkrv8zfl/lIfXuapMdt2U7yyIRKDMOF78S7E/rKds=\n=4YNQ\n-----END PGP SIGNATURE-----\n", "payload": "tree bf2c6818ab92edc8089efddc450f17efcbde4201\nparent 6aa18de98efe5d7965a48caf5bc3bdea8ac6bca4\nparent d953df319b3057e446b05eac0dcc88a4a5bb4b60\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585304821 +0000\ncommitter GitHub <noreply@github.com> 1585304821 +0000\n\nMerge #3740\n\n3740: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31528620a8fca9ea79947d53b796460d0928dd95", "html_url": "https://github.com/rust-lang/rust/commit/31528620a8fca9ea79947d53b796460d0928dd95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31528620a8fca9ea79947d53b796460d0928dd95/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aa18de98efe5d7965a48caf5bc3bdea8ac6bca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa18de98efe5d7965a48caf5bc3bdea8ac6bca4", "html_url": "https://github.com/rust-lang/rust/commit/6aa18de98efe5d7965a48caf5bc3bdea8ac6bca4"}, {"sha": "d953df319b3057e446b05eac0dcc88a4a5bb4b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/d953df319b3057e446b05eac0dcc88a4a5bb4b60", "html_url": "https://github.com/rust-lang/rust/commit/d953df319b3057e446b05eac0dcc88a4a5bb4b60"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "2cc9ff1537a7ea5eb0caaba2845ed4f5a0654e1b", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/31528620a8fca9ea79947d53b796460d0928dd95/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31528620a8fca9ea79947d53b796460d0928dd95/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=31528620a8fca9ea79947d53b796460d0928dd95", "patch": "@@ -13,13 +13,13 @@ pub fn name_ref(text: &str) -> ast::NameRef {\n }\n \n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n-    ast_from_text(&format!(\"use {};\", name_ref.syntax()))\n+    ast_from_text(&format!(\"use {};\", name_ref))\n }\n pub fn path_unqualified(segment: ast::PathSegment) -> ast::Path {\n-    path_from_text(&format!(\"use {}\", segment.syntax()))\n+    path_from_text(&format!(\"use {}\", segment))\n }\n pub fn path_qualified(qual: ast::Path, segment: ast::PathSegment) -> ast::Path {\n-    path_from_text(&format!(\"{}::{}\", qual.syntax(), segment.syntax()))\n+    path_from_text(&format!(\"{}::{}\", qual, segment))\n }\n fn path_from_text(text: &str) -> ast::Path {\n     ast_from_text(text)\n@@ -33,10 +33,10 @@ pub fn use_tree(\n     let mut buf = \"use \".to_string();\n     buf += &path.syntax().to_string();\n     if let Some(use_tree_list) = use_tree_list {\n-        buf += &format!(\"::{}\", use_tree_list.syntax());\n+        buf += &format!(\"::{}\", use_tree_list);\n     }\n     if let Some(alias) = alias {\n-        buf += &format!(\" {}\", alias.syntax());\n+        buf += &format!(\" {}\", alias);\n     }\n     ast_from_text(&buf)\n }\n@@ -47,13 +47,13 @@ pub fn use_tree_list(use_trees: impl IntoIterator<Item = ast::UseTree>) -> ast::\n }\n \n pub fn use_item(use_tree: ast::UseTree) -> ast::UseItem {\n-    ast_from_text(&format!(\"use {};\", use_tree.syntax()))\n+    ast_from_text(&format!(\"use {};\", use_tree))\n }\n \n pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordField {\n     return match expr {\n-        Some(expr) => from_text(&format!(\"{}: {}\", name.syntax(), expr.syntax())),\n-        None => from_text(&name.syntax().to_string()),\n+        Some(expr) => from_text(&format!(\"{}: {}\", name, expr)),\n+        None => from_text(&name.to_string()),\n     };\n \n     fn from_text(text: &str) -> ast::RecordField {\n@@ -67,17 +67,17 @@ pub fn block_expr(\n ) -> ast::BlockExpr {\n     let mut text = \"{\\n\".to_string();\n     for stmt in stmts.into_iter() {\n-        text += &format!(\"    {}\\n\", stmt.syntax());\n+        text += &format!(\"    {}\\n\", stmt);\n     }\n     if let Some(tail_expr) = tail_expr {\n-        text += &format!(\"    {}\\n\", tail_expr.syntax())\n+        text += &format!(\"    {}\\n\", tail_expr)\n     }\n     text += \"}\";\n     ast_from_text(&format!(\"fn f() {}\", text))\n }\n \n pub fn block_from_expr(e: ast::Expr) -> ast::Block {\n-    return from_text(&format!(\"{{ {} }}\", e.syntax()));\n+    return from_text(&format!(\"{{ {} }}\", e));\n \n     fn from_text(text: &str) -> ast::Block {\n         ast_from_text(&format!(\"fn f() {}\", text))\n@@ -94,7 +94,7 @@ pub fn expr_unimplemented() -> ast::Expr {\n     expr_from_text(\"unimplemented!()\")\n }\n pub fn expr_path(path: ast::Path) -> ast::Expr {\n-    expr_from_text(&path.syntax().to_string())\n+    expr_from_text(&path.to_string())\n }\n pub fn expr_continue() -> ast::Expr {\n     expr_from_text(\"continue\")\n@@ -106,14 +106,14 @@ pub fn expr_return() -> ast::Expr {\n     expr_from_text(\"return\")\n }\n pub fn expr_match(expr: ast::Expr, match_arm_list: ast::MatchArmList) -> ast::Expr {\n-    expr_from_text(&format!(\"match {} {}\", expr.syntax(), match_arm_list.syntax()))\n+    expr_from_text(&format!(\"match {} {}\", expr, match_arm_list))\n }\n pub fn expr_if(condition: ast::Expr, then_branch: ast::BlockExpr) -> ast::Expr {\n-    expr_from_text(&format!(\"if {} {}\", condition.syntax(), then_branch.syntax()))\n+    expr_from_text(&format!(\"if {} {}\", condition, then_branch))\n }\n pub fn expr_prefix(op: SyntaxKind, expr: ast::Expr) -> ast::Expr {\n     let token = token(op);\n-    expr_from_text(&format!(\"{}{}\", token, expr.syntax()))\n+    expr_from_text(&format!(\"{}{}\", token, expr))\n }\n fn expr_from_text(text: &str) -> ast::Expr {\n     ast_from_text(&format!(\"const C: () = {};\", text))\n@@ -157,17 +157,17 @@ pub fn tuple_struct_pat(\n     path: ast::Path,\n     pats: impl IntoIterator<Item = ast::Pat>,\n ) -> ast::TupleStructPat {\n-    let pats_str = pats.into_iter().map(|p| p.syntax().to_string()).join(\", \");\n-    return from_text(&format!(\"{}({})\", path.syntax(), pats_str));\n+    let pats_str = pats.into_iter().join(\", \");\n+    return from_text(&format!(\"{}({})\", path, pats_str));\n \n     fn from_text(text: &str) -> ast::TupleStructPat {\n         ast_from_text(&format!(\"fn f({}: ())\", text))\n     }\n }\n \n pub fn record_pat(path: ast::Path, pats: impl IntoIterator<Item = ast::Pat>) -> ast::RecordPat {\n-    let pats_str = pats.into_iter().map(|p| p.syntax().to_string()).join(\", \");\n-    return from_text(&format!(\"{} {{ {} }}\", path.syntax(), pats_str));\n+    let pats_str = pats.into_iter().join(\", \");\n+    return from_text(&format!(\"{} {{ {} }}\", path, pats_str));\n \n     fn from_text(text: &str) -> ast::RecordPat {\n         ast_from_text(&format!(\"fn f({}: ())\", text))\n@@ -176,16 +176,15 @@ pub fn record_pat(path: ast::Path, pats: impl IntoIterator<Item = ast::Pat>) ->\n \n /// Returns a `BindPat` if the path has just one segment, a `PathPat` otherwise.\n pub fn path_pat(path: ast::Path) -> ast::Pat {\n-    let path_str = path.syntax().text().to_string();\n-    return from_text(path_str.as_str());\n+    return from_text(&path.to_string());\n     fn from_text(text: &str) -> ast::Pat {\n         ast_from_text(&format!(\"fn f({}: ())\", text))\n     }\n }\n \n pub fn match_arm(pats: impl IntoIterator<Item = ast::Pat>, expr: ast::Expr) -> ast::MatchArm {\n-    let pats_str = pats.into_iter().map(|p| p.syntax().to_string()).join(\" | \");\n-    return from_text(&format!(\"{} => {}\", pats_str, expr.syntax()));\n+    let pats_str = pats.into_iter().join(\" | \");\n+    return from_text(&format!(\"{} => {}\", pats_str, expr));\n \n     fn from_text(text: &str) -> ast::MatchArm {\n         ast_from_text(&format!(\"fn f() {{ match () {{{}}} }}\", text))\n@@ -212,16 +211,16 @@ pub fn where_pred(\n     path: ast::Path,\n     bounds: impl IntoIterator<Item = ast::TypeBound>,\n ) -> ast::WherePred {\n-    let bounds = bounds.into_iter().map(|b| b.syntax().to_string()).join(\" + \");\n-    return from_text(&format!(\"{}: {}\", path.syntax(), bounds));\n+    let bounds = bounds.into_iter().join(\" + \");\n+    return from_text(&format!(\"{}: {}\", path, bounds));\n \n     fn from_text(text: &str) -> ast::WherePred {\n         ast_from_text(&format!(\"fn f() where {} {{ }}\", text))\n     }\n }\n \n pub fn where_clause(preds: impl IntoIterator<Item = ast::WherePred>) -> ast::WhereClause {\n-    let preds = preds.into_iter().map(|p| p.syntax().to_string()).join(\", \");\n+    let preds = preds.into_iter().join(\", \");\n     return from_text(preds.as_str());\n \n     fn from_text(text: &str) -> ast::WhereClause {\n@@ -231,13 +230,13 @@ pub fn where_clause(preds: impl IntoIterator<Item = ast::WherePred>) -> ast::Whe\n \n pub fn let_stmt(pattern: ast::Pat, initializer: Option<ast::Expr>) -> ast::LetStmt {\n     let text = match initializer {\n-        Some(it) => format!(\"let {} = {};\", pattern.syntax(), it.syntax()),\n-        None => format!(\"let {};\", pattern.syntax()),\n+        Some(it) => format!(\"let {} = {};\", pattern, it),\n+        None => format!(\"let {};\", pattern),\n     };\n     ast_from_text(&format!(\"fn f() {{ {} }}\", text))\n }\n pub fn expr_stmt(expr: ast::Expr) -> ast::ExprStmt {\n-    ast_from_text(&format!(\"fn f() {{ {}; }}\", expr.syntax()))\n+    ast_from_text(&format!(\"fn f() {{ {}; }}\", expr))\n }\n \n pub fn token(kind: SyntaxKind) -> SyntaxToken {"}]}