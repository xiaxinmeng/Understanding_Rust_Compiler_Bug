{"sha": "f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZWM4OGNjNTZjMGJiMjRjNTZlNmY5Zjg5OGFjNTY3Y2UzNGM3OWY=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2019-05-23T10:26:38Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2019-05-23T12:31:35Z"}, "message": "Improve highlighting of name refs", "tree": {"sha": "72f4f2b23092cebb2632ee430bf29ab69c6d53f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f4f2b23092cebb2632ee430bf29ab69c6d53f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f", "html_url": "https://github.com/rust-lang/rust/commit/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44665685257f18d182ab116855dd9e8b054c49da", "url": "https://api.github.com/repos/rust-lang/rust/commits/44665685257f18d182ab116855dd9e8b054c49da", "html_url": "https://github.com/rust-lang/rust/commit/44665685257f18d182ab116855dd9e8b054c49da"}], "stats": {"total": 232, "additions": 221, "deletions": 11}, "files": [{"sha": "9502fed45c004f56730c5bc4c281bedc427186b9", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f", "patch": "@@ -491,6 +491,7 @@ version = \"0.2.0\"\n dependencies = [\n  \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flexi_logger 0.11.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-types 0.57.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "9d4c04db315a8bdaec1fdf82c6a377a5523aadc8", "filename": "crates/ra_ide_api/src/snapshots/tests__highlighting.snap", "status": "modified", "additions": 120, "deletions": 8, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap", "raw_url": "https://github.com/rust-lang/rust/raw/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap?ref=f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f", "patch": "@@ -1,33 +1,145 @@\n ---\n-created: \"2019-03-23T16:20:31.394314144Z\"\n-creator: insta@0.7.1\n+created: \"2019-05-23T12:10:32.628883358Z\"\n+creator: insta@0.8.1\n source: crates/ra_ide_api/src/syntax_highlighting.rs\n expression: result\n ---\n Ok(\n     [\n         HighlightedRange {\n-            range: [1; 11),\n+            range: [1; 24),\n+            tag: \"attribute\"\n+        },\n+        HighlightedRange {\n+            range: [25; 31),\n+            tag: \"keyword\"\n+        },\n+        HighlightedRange {\n+            range: [32; 35),\n+            tag: \"function\"\n+        },\n+        HighlightedRange {\n+            range: [42; 45),\n+            tag: \"keyword\"\n+        },\n+        HighlightedRange {\n+            range: [46; 47),\n+            tag: \"function\"\n+        },\n+        HighlightedRange {\n+            range: [49; 52),\n+            tag: \"text\"\n+        },\n+        HighlightedRange {\n+            range: [58; 61),\n+            tag: \"keyword\"\n+        },\n+        HighlightedRange {\n+            range: [62; 63),\n+            tag: \"function\"\n+        },\n+        HighlightedRange {\n+            range: [65; 68),\n+            tag: \"text\"\n+        },\n+        HighlightedRange {\n+            range: [73; 75),\n+            tag: \"keyword\"\n+        },\n+        HighlightedRange {\n+            range: [76; 79),\n+            tag: \"function\"\n+        },\n+        HighlightedRange {\n+            range: [80; 81),\n+            tag: \"type\"\n+        },\n+        HighlightedRange {\n+            range: [80; 81),\n+            tag: \"function\"\n+        },\n+        HighlightedRange {\n+            range: [88; 89),\n+            tag: \"type\"\n+        },\n+        HighlightedRange {\n+            range: [96; 110),\n+            tag: \"macro\"\n+        },\n+        HighlightedRange {\n+            range: [117; 127),\n             tag: \"comment\"\n         },\n         HighlightedRange {\n-            range: [12; 14),\n+            range: [128; 130),\n             tag: \"keyword\"\n         },\n         HighlightedRange {\n-            range: [15; 19),\n+            range: [131; 135),\n             tag: \"function\"\n         },\n         HighlightedRange {\n-            range: [29; 37),\n+            range: [145; 153),\n             tag: \"macro\"\n         },\n         HighlightedRange {\n-            range: [38; 50),\n+            range: [154; 166),\n             tag: \"string\"\n         },\n         HighlightedRange {\n-            range: [52; 54),\n+            range: [168; 170),\n+            tag: \"literal\"\n+        },\n+        HighlightedRange {\n+            range: [178; 181),\n+            tag: \"keyword\"\n+        },\n+        HighlightedRange {\n+            range: [182; 185),\n+            tag: \"keyword\"\n+        },\n+        HighlightedRange {\n+            range: [186; 189),\n+            tag: \"macro\"\n+        },\n+        HighlightedRange {\n+            range: [197; 200),\n+            tag: \"macro\"\n+        },\n+        HighlightedRange {\n+            range: [192; 195),\n+            tag: \"text\"\n+        },\n+        HighlightedRange {\n+            range: [208; 211),\n+            tag: \"macro\"\n+        },\n+        HighlightedRange {\n+            range: [212; 216),\n+            tag: \"macro\"\n+        },\n+        HighlightedRange {\n+            range: [226; 227),\n+            tag: \"literal\"\n+        },\n+        HighlightedRange {\n+            range: [232; 233),\n+            tag: \"literal\"\n+        },\n+        HighlightedRange {\n+            range: [242; 248),\n+            tag: \"keyword.unsafe\"\n+        },\n+        HighlightedRange {\n+            range: [251; 254),\n+            tag: \"text\"\n+        },\n+        HighlightedRange {\n+            range: [255; 262),\n+            tag: \"text\"\n+        },\n+        HighlightedRange {\n+            range: [263; 264),\n             tag: \"literal\"\n         }\n     ]"}, {"sha": "89f20260f5e2ec51118ef95d2392fab87c758873", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f", "patch": "@@ -40,8 +40,41 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n             COMMENT => \"comment\",\n             STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => \"string\",\n             ATTR => \"attribute\",\n-            NAME_REF => \"text\",\n+            NAME_REF => {\n+                if let Some(name_ref) = node.as_node().and_then(|n| ast::NameRef::cast(n)) {\n+                    use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n+                    use hir::{ModuleDef, ImplItem};\n+\n+                    // FIXME: try to reuse the SourceAnalyzers\n+                    let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n+                    match classify_name_ref(db, &analyzer, name_ref) {\n+                        Some(Method(_)) => \"function\",\n+                        Some(Macro(_)) => \"macro\",\n+                        Some(FieldAccess(_)) => \"field\",\n+                        Some(AssocItem(ImplItem::Method(_))) => \"function\",\n+                        Some(AssocItem(ImplItem::Const(_))) => \"constant\",\n+                        Some(AssocItem(ImplItem::TypeAlias(_))) => \"type\",\n+                        Some(Def(ModuleDef::Module(_))) => \"module\",\n+                        Some(Def(ModuleDef::Function(_))) => \"function\",\n+                        Some(Def(ModuleDef::Struct(_))) => \"type\",\n+                        Some(Def(ModuleDef::Enum(_))) => \"type\",\n+                        Some(Def(ModuleDef::EnumVariant(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Const(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Static(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Trait(_))) => \"type\",\n+                        Some(Def(ModuleDef::TypeAlias(_))) => \"type\",\n+                        Some(SelfType(_)) => \"type\",\n+                        Some(Pat(_)) => \"text\",\n+                        Some(SelfParam(_)) => \"type\",\n+                        Some(GenericParam(_)) => \"type\",\n+                        None => \"text\",\n+                    }\n+                } else {\n+                    \"text\"\n+                }\n+            }\n             NAME => \"function\",\n+            TYPE_ALIAS_DEF | TYPE_ARG | TYPE_PARAM => \"type\",\n             INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => \"literal\",\n             LIFETIME => \"parameter\",\n             T![unsafe] => \"keyword.unsafe\",\n@@ -87,9 +120,23 @@ mod tests {\n     fn test_highlighting() {\n         let (analysis, file_id) = single_file(\n             r#\"\n+#[derive(Clone, Debug)]\n+struct Foo {\n+    pub x: i32,\n+    pub y: i32,\n+}\n+\n+fn foo<T>() -> T {\n+    unimplemented!();\n+}\n+\n // comment\n fn main() {}\n     println!(\"Hello, {}!\", 92);\n+\n+    let mut vec = Vec::new();\n+    vec.push(Foo { x: 0, y: 1 });\n+    unsafe { vec.set_len(0); }\n \"#,\n         );\n         let result = analysis.highlight(file_id);"}, {"sha": "cde5fbcb8f16bcba446559630762b34246b38f91", "filename": "editors/code/package.json", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f", "patch": "@@ -371,12 +371,57 @@\n             },\n             {\n                 \"id\": \"ralsp.macro\",\n-                \"description\": \"Color for DFAF8F\",\n+                \"description\": \"Color for macros\",\n                 \"defaults\": {\n                     \"dark\": \"#BFEBBF\",\n                     \"light\": \"#DD6718\",\n                     \"highContrast\": \"#ED7718\"\n                 }\n+            },\n+            {\n+                \"id\": \"ralsp.constant\",\n+                \"description\": \"Color for constants\",\n+                \"defaults\": {\n+                    \"dark\": \"#569cd6\",\n+                    \"light\": \"#267cb6\",\n+                    \"highContrast\": \"#569cd6\"\n+                }\n+            },\n+            {\n+                \"id\": \"ralsp.type\",\n+                \"description\": \"Color for types\",\n+                \"defaults\": {\n+                    \"dark\": \"#4EC9B0\",\n+                    \"light\": \"#267F99\",\n+                    \"highContrast\": \"#4EC9B0\"\n+                }\n+            },\n+            {\n+                \"id\": \"ralsp.field\",\n+                \"description\": \"Color for fields\",\n+                \"defaults\": {\n+                    \"dark\": \"#4EC9B0\",\n+                    \"light\": \"#267F99\",\n+                    \"highContrast\": \"#4EC9B0\"\n+                }\n+            },\n+            {\n+                \"id\": \"ralsp.variable\",\n+                \"description\": \"Color for variables\",\n+                \"defaults\": {\n+                    \"dark\": \"#4EC9B0\",\n+                    \"light\": \"#267F99\",\n+                    \"highContrast\": \"#4EC9B0\"\n+                }\n+            },\n+            {\n+                \"id\": \"ralsp.module\",\n+                \"description\": \"Color for modules\",\n+                \"defaults\": {\n+                    \"dark\": \"#D4D4D4\",\n+                    \"light\": \"#000000\",\n+                    \"highContrast\": \"#FFFFFF\"\n+                }\n             }\n         ]\n     }"}, {"sha": "8389d94b8c314f84920ffe4d9b3f95b8bbaf75b2", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=f1ec88cc56c0bb24c56e6f9f898ac567ce34c79f", "patch": "@@ -33,11 +33,16 @@ export class Highlighter {\n             colorContrib('keyword.unsafe'),\n             colorContrib('function'),\n             colorContrib('parameter'),\n+            colorContrib('constant'),\n+            colorContrib('type'),\n             colorContrib('builtin'),\n             colorContrib('text'),\n             colorContrib('attribute'),\n             colorContrib('literal'),\n-            colorContrib('macro')\n+            colorContrib('macro'),\n+            colorContrib('variable'),\n+            colorContrib('field'),\n+            colorContrib('module')\n         ];\n \n         return new Map<string, vscode.TextEditorDecorationType>(decorations);"}]}