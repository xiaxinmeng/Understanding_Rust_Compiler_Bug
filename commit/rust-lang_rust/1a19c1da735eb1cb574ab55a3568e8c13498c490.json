{"sha": "1a19c1da735eb1cb574ab55a3568e8c13498c490", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMTljMWRhNzM1ZWIxY2I1NzRhYjU1YTM1NjhlOGMxMzQ5OGM0OTA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-29T17:48:09Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-09T09:51:38Z"}, "message": "Add some more comments", "tree": {"sha": "57d5dcac2354451ac3cd2034deeb90601f277878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57d5dcac2354451ac3cd2034deeb90601f277878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a19c1da735eb1cb574ab55a3568e8c13498c490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a19c1da735eb1cb574ab55a3568e8c13498c490", "html_url": "https://github.com/rust-lang/rust/commit/1a19c1da735eb1cb574ab55a3568e8c13498c490", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a19c1da735eb1cb574ab55a3568e8c13498c490/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54aa418a6082b364b90feee70b07381ea266c4d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/54aa418a6082b364b90feee70b07381ea266c4d5", "html_url": "https://github.com/rust-lang/rust/commit/54aa418a6082b364b90feee70b07381ea266c4d5"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "1eab5848e0974acc46a47d153920a072d33898bd", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a19c1da735eb1cb574ab55a3568e8c13498c490/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a19c1da735eb1cb574ab55a3568e8c13498c490/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=1a19c1da735eb1cb574ab55a3568e8c13498c490", "patch": "@@ -439,7 +439,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     literal: method,\n                 }),\n                 args: vec![val, expect],\n-                destination: Some((eq_result.clone(), eq_block)),\n+                destination: Some((eq_result, eq_block)),\n                 cleanup: None,\n                 from_hir_call: false,\n             },"}, {"sha": "a3953d4ace3ed976f23ac4008f55d2ee16419804", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1a19c1da735eb1cb574ab55a3568e8c13498c490/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a19c1da735eb1cb574ab55a3568e8c13498c490/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=1a19c1da735eb1cb574ab55a3568e8c13498c490", "patch": "@@ -237,6 +237,9 @@ trait DropTreeBuilder<'tcx> {\n \n impl DropTree {\n     fn new() -> Self {\n+        // The root node of the tree doesn't represent a drop, but instead\n+        // represents the block in the tree that should be jumped to once all\n+        // of the required drops have been performed.\n         let fake_source_info = SourceInfo::outermost(DUMMY_SP);\n         let fake_data =\n             DropData { source_info: fake_source_info, local: Local::MAX, kind: DropKind::Storage };\n@@ -258,6 +261,10 @@ impl DropTree {\n         self.entry_points.push((to, from));\n     }\n \n+    /// Builds the MIR for a given drop tree.\n+    ///\n+    /// `blocks` should have the same length as `self.drops`, and may have its\n+    /// first value set to some already existing block.\n     fn build_mir<'tcx, T: DropTreeBuilder<'tcx>>(\n         &mut self,\n         cfg: &mut CFG<'tcx>,\n@@ -1344,10 +1351,16 @@ impl<'tcx> DropTreeBuilder<'tcx> for GeneratorDrop {\n         cfg.start_new_block()\n     }\n     fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n-        let kind = &mut cfg.block_data_mut(from).terminator_mut().kind;\n-        if let TerminatorKind::Yield { drop, .. } = kind {\n+        let term = cfg.block_data_mut(from).terminator_mut();\n+        if let TerminatorKind::Yield { ref mut drop, .. } = term.kind {\n             *drop = Some(to);\n-        };\n+        } else {\n+            span_bug!(\n+                term.source_info.span,\n+                \"cannot enter generator drop tree from {:?}\",\n+                term.kind\n+            )\n+        }\n     }\n }\n \n@@ -1358,8 +1371,8 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n         cfg.start_new_cleanup_block()\n     }\n     fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n-        let term = &mut cfg.block_data_mut(from).terminator_mut().kind;\n-        match term {\n+        let term = &mut cfg.block_data_mut(from).terminator_mut();\n+        match &mut term.kind {\n             TerminatorKind::Drop { unwind, .. }\n             | TerminatorKind::DropAndReplace { unwind, .. }\n             | TerminatorKind::FalseUnwind { unwind, .. }\n@@ -1375,7 +1388,9 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::FalseEdges { .. } => bug!(\"cannot unwind from {:?}\", term),\n+            | TerminatorKind::FalseEdges { .. } => {\n+                span_bug!(term.source_info.span, \"cannot unwind from {:?}\", term.kind)\n+            }\n         }\n     }\n }"}]}