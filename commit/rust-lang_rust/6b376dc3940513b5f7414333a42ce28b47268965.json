{"sha": "6b376dc3940513b5f7414333a42ce28b47268965", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMzc2ZGMzOTQwNTEzYjVmNzQxNDMzM2E0MmNlMjhiNDcyNjg5NjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-11T13:32:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-11T13:32:59Z"}, "message": "get rid of to_bytes hack", "tree": {"sha": "d1e2e64aae83d83e8fcf819406d15c689d5ccf19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1e2e64aae83d83e8fcf819406d15c689d5ccf19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b376dc3940513b5f7414333a42ce28b47268965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b376dc3940513b5f7414333a42ce28b47268965", "html_url": "https://github.com/rust-lang/rust/commit/6b376dc3940513b5f7414333a42ce28b47268965", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b376dc3940513b5f7414333a42ce28b47268965/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "383d215386f7b9cb4b08bde9b7fd0db4c3f8112a", "url": "https://api.github.com/repos/rust-lang/rust/commits/383d215386f7b9cb4b08bde9b7fd0db4c3f8112a", "html_url": "https://github.com/rust-lang/rust/commit/383d215386f7b9cb4b08bde9b7fd0db4c3f8112a"}], "stats": {"total": 53, "additions": 14, "deletions": 39}, "files": [{"sha": "5d41848b643e76327f22800ab248c19f0f41917d", "filename": "src/fn_call.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b376dc3940513b5f7414333a42ce28b47268965/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b376dc3940513b5f7414333a42ce28b47268965/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=6b376dc3940513b5f7414333a42ce28b47268965", "patch": "@@ -277,7 +277,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n \n             \"memrchr\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n-                let val = this.read_scalar(args[1])?.to_bytes()? as u8;\n+                let val = this.read_scalar(args[1])?.to_i32()? as u8;\n                 let num = this.read_scalar(args[2])?.to_usize(this)?;\n                 if let Some(idx) = this.memory().read_bytes(ptr, Size::from_bytes(num))?\n                     .iter().rev().position(|&c| c == val)\n@@ -291,7 +291,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n \n             \"memchr\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n-                let val = this.read_scalar(args[1])?.to_bytes()? as u8;\n+                let val = this.read_scalar(args[1])?.to_i32()? as u8;\n                 let num = this.read_scalar(args[2])?.to_usize(this)?;\n                 if let Some(idx) = this.memory().read_bytes(ptr, Size::from_bytes(num))?.iter().position(\n                     |&c| c == val,\n@@ -379,9 +379,9 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             }\n \n             \"write\" => {\n-                let fd = this.read_scalar(args[0])?.to_bytes()?;\n+                let fd = this.read_scalar(args[0])?.to_i32()?;\n                 let buf = this.read_scalar(args[1])?.not_undef()?;\n-                let n = this.read_scalar(args[2])?.to_bytes()? as u64;\n+                let n = this.read_scalar(args[2])?.to_usize(&*this.tcx)?;\n                 trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n                 let result = if fd == 1 || fd == 2 {\n                     // stdout/stderr\n@@ -489,18 +489,18 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 this.write_null(dest)?;\n             }\n             \"pthread_key_delete\" => {\n-                let key = this.read_scalar(args[0])?.to_bytes()?;\n+                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n                 this.machine.tls.delete_tls_key(key)?;\n                 // Return success (0)\n                 this.write_null(dest)?;\n             }\n             \"pthread_getspecific\" => {\n-                let key = this.read_scalar(args[0])?.to_bytes()?;\n+                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n                 let ptr = this.machine.tls.load_tls(key)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"pthread_setspecific\" => {\n-                let key = this.read_scalar(args[0])?.to_bytes()?;\n+                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n                 let new_ptr = this.read_scalar(args[1])?.not_undef()?;\n                 this.machine.tls.store_tls(key, new_ptr)?;\n \n@@ -586,12 +586,12 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 this.write_scalar(Scalar::from_uint(key, dest.layout.size), dest)?;\n             }\n             \"TlsGetValue\" => {\n-                let key = this.read_scalar(args[0])?.to_bytes()?;\n+                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n                 let ptr = this.machine.tls.load_tls(key)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"TlsSetValue\" => {\n-                let key = this.read_scalar(args[0])?.to_bytes()?;\n+                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n                 let new_ptr = this.read_scalar(args[1])?.not_undef()?;\n                 this.machine.tls.store_tls(key, new_ptr)?;\n "}, {"sha": "fab0c67d0aa4b111a44ead7acfc5ce5d17e62c19", "filename": "src/helpers.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6b376dc3940513b5f7414333a42ce28b47268965/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b376dc3940513b5f7414333a42ce28b47268965/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=6b376dc3940513b5f7414333a42ce28b47268965", "patch": "@@ -5,31 +5,6 @@ use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n \n use crate::*;\n \n-pub trait ScalarExt {\n-    /// HACK: this function just extracts all bits if `defined != 0`\n-    /// Mainly used for args of C-functions and we should totally correctly fetch the size\n-    /// of their arguments\n-    fn to_bytes(self) -> EvalResult<'static, u128>;\n-}\n-\n-impl<Tag> ScalarExt for Scalar<Tag> {\n-    fn to_bytes(self) -> EvalResult<'static, u128> {\n-        match self {\n-            Scalar::Bits { bits, size } => {\n-                assert_ne!(size, 0);\n-                Ok(bits)\n-            },\n-            Scalar::Ptr(_) => err!(ReadPointerAsBytes),\n-        }\n-    }\n-}\n-\n-impl<Tag> ScalarExt for ScalarMaybeUndef<Tag> {\n-    fn to_bytes(self) -> EvalResult<'static, u128> {\n-        self.not_undef()?.to_bytes()\n-    }\n-}\n-\n impl<'a, 'mir, 'tcx> EvalContextExt<'a, 'mir, 'tcx> for crate::MiriEvalContext<'a, 'mir, 'tcx> {}\n pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a, 'mir, 'tcx> {\n     /// Get an instance for a path."}, {"sha": "0f7382b61b726668be102dbfa44b1b22c4d063ba", "filename": "src/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b376dc3940513b5f7414333a42ce28b47268965/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b376dc3940513b5f7414333a42ce28b47268965/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=6b376dc3940513b5f7414333a42ce28b47268965", "patch": "@@ -6,7 +6,7 @@ use rustc::mir::interpret::{EvalResult, PointerArithmetic};\n \n use crate::{\n     PlaceTy, OpTy, Immediate, Scalar, ScalarMaybeUndef, Borrow,\n-    ScalarExt, OperatorEvalContextExt\n+    OperatorEvalContextExt\n };\n \n impl<'a, 'mir, 'tcx> EvalContextExt<'a, 'mir, 'tcx> for crate::MiriEvalContext<'a, 'mir, 'tcx> {}\n@@ -227,7 +227,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 let a = this.read_immediate(args[0])?;\n                 let b = this.read_immediate(args[1])?;\n                 // check x % y != 0\n-                if this.binary_op_imm(mir::BinOp::Rem, a, b)?.0.to_bytes()? != 0 {\n+                if this.binary_op_imm(mir::BinOp::Rem, a, b)?.0.to_bits(dest.layout.size)? != 0 {\n                     return err!(ValidationFailure(format!(\"exact_div: {:?} cannot be divided by {:?}\", a, b)));\n                 }\n                 this.binop_ignore_overflow(mir::BinOp::Div, a, b, dest)?;\n@@ -375,7 +375,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             \"unchecked_div\" => {\n                 let l = this.read_immediate(args[0])?;\n                 let r = this.read_immediate(args[1])?;\n-                let rval = r.to_scalar()?.to_bytes()?;\n+                let rval = r.to_scalar()?.to_bits(args[1].layout.size)?;\n                 if rval == 0 {\n                     return err!(Intrinsic(format!(\"Division by 0 in unchecked_div\")));\n                 }\n@@ -390,7 +390,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             \"unchecked_rem\" => {\n                 let l = this.read_immediate(args[0])?;\n                 let r = this.read_immediate(args[1])?;\n-                let rval = r.to_scalar()?.to_bytes()?;\n+                let rval = r.to_scalar()?.to_bits(args[1].layout.size)?;\n                 if rval == 0 {\n                     return err!(Intrinsic(format!(\"Division by 0 in unchecked_rem\")));\n                 }"}, {"sha": "28639976aa03fe97f02fcbd0726c8874ccefd7bd", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b376dc3940513b5f7414333a42ce28b47268965/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b376dc3940513b5f7414333a42ce28b47268965/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6b376dc3940513b5f7414333a42ce28b47268965", "patch": "@@ -43,7 +43,7 @@ pub use crate::intrinsic::EvalContextExt as IntrinsicEvalContextExt;\n pub use crate::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n use crate::range_map::RangeMap;\n #[allow(unused_imports)] // FIXME rustc bug https://github.com/rust-lang/rust/issues/53682\n-pub use crate::helpers::{ScalarExt, EvalContextExt as HelpersEvalContextExt};\n+pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};\n use crate::mono_hash_map::MonoHashMap;\n pub use crate::stacked_borrows::{EvalContextExt as StackedBorEvalContextExt};\n "}]}