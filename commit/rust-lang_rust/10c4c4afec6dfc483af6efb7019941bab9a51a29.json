{"sha": "10c4c4afec6dfc483af6efb7019941bab9a51a29", "node_id": "C_kwDOAAsO6NoAKDEwYzRjNGFmZWM2ZGZjNDgzYWY2ZWZiNzAxOTk0MWJhYjlhNTFhMjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-22T23:39:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-22T23:39:21Z"}, "message": "Auto merge of #92998 - Amanieu:hashbrown12, r=Mark-Simulacrum\n\nUpdate hashbrown to 0.12.0\n\n[Changelog](https://github.com/rust-lang/hashbrown/blob/master/CHANGELOG.md#v0120---2022-01-17)", "tree": {"sha": "93f775a0c8cae193ffbfac2f0715944b5dac7c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93f775a0c8cae193ffbfac2f0715944b5dac7c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c4c4afec6dfc483af6efb7019941bab9a51a29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c4c4afec6dfc483af6efb7019941bab9a51a29", "html_url": "https://github.com/rust-lang/rust/commit/10c4c4afec6dfc483af6efb7019941bab9a51a29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c4c4afec6dfc483af6efb7019941bab9a51a29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe15646761a75f0259e204cab071565eed2b1e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe15646761a75f0259e204cab071565eed2b1e5", "html_url": "https://github.com/rust-lang/rust/commit/bfe15646761a75f0259e204cab071565eed2b1e5"}, {"sha": "537439c17796afe735e26324cbb733dc7fd4bb9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/537439c17796afe735e26324cbb733dc7fd4bb9f", "html_url": "https://github.com/rust-lang/rust/commit/537439c17796afe735e26324cbb733dc7fd4bb9f"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "6f9688aa2189c6f1db2b56f85f29b32ad6f3d2f4", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10c4c4afec6dfc483af6efb7019941bab9a51a29/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/10c4c4afec6dfc483af6efb7019941bab9a51a29/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=10c4c4afec6dfc483af6efb7019941bab9a51a29", "patch": "@@ -1587,6 +1587,14 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e\"\n dependencies = [\n  \"ahash\",\n+]\n+\n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.12.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8c21d40587b92fa6a6c6e3c1bdbf87d75511db5672f9c93175574b3a00df1758\"\n+dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\",\n  \"rustc-std-workspace-core\",\n@@ -1736,7 +1744,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"bc633605454125dec4b66843673f01c7df2b89479b32e0ed634e43a91cff62a5\"\n dependencies = [\n  \"autocfg\",\n- \"hashbrown\",\n+ \"hashbrown 0.11.2\",\n  \"serde\",\n ]\n \n@@ -2411,7 +2419,7 @@ checksum = \"7ce8b38d41f9f3618fc23f908faae61510f8d8ce2d99cbe910641e8f1971f084\"\n dependencies = [\n  \"crc32fast\",\n  \"flate2\",\n- \"hashbrown\",\n+ \"hashbrown 0.11.2\",\n  \"indexmap\",\n  \"memchr\",\n ]\n@@ -4814,7 +4822,7 @@ dependencies = [\n  \"core\",\n  \"dlmalloc\",\n  \"fortanix-sgx-abi\",\n- \"hashbrown\",\n+ \"hashbrown 0.12.0\",\n  \"hermit-abi\",\n  \"libc\",\n  \"miniz_oxide\",\n@@ -5096,7 +5104,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"dd95b4559c196987c8451b4e14d08a4c796c2844f9adf4d2a2dbc9b3142843be\"\n dependencies = [\n  \"gimli 0.26.1\",\n- \"hashbrown\",\n+ \"hashbrown 0.11.2\",\n  \"object 0.28.1\",\n  \"tracing\",\n ]"}, {"sha": "165169aedb31571514ffeb30f14bac294232e1d2", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c4c4afec6dfc483af6efb7019941bab9a51a29/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/10c4c4afec6dfc483af6efb7019941bab9a51a29/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=10c4c4afec6dfc483af6efb7019941bab9a51a29", "patch": "@@ -19,7 +19,7 @@ libc = { version = \"0.2.108\", default-features = false, features = ['rustc-dep-o\n compiler_builtins = { version = \"0.1.66\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }\n-hashbrown = { version = \"0.11\", default-features = false, features = ['rustc-dep-of-std'] }\n+hashbrown = { version = \"0.12\", default-features = false, features = ['rustc-dep-of-std'] }\n std_detect = { path = \"../stdarch/crates/std_detect\", default-features = false, features = ['rustc-dep-of-std'] }\n \n # Dependencies of the `backtrace` crate"}, {"sha": "30da22b80849c9c2553d88f77fbb627f89540a7e", "filename": "library/std/src/collections/hash/map/tests.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/10c4c4afec6dfc483af6efb7019941bab9a51a29/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c4c4afec6dfc483af6efb7019941bab9a51a29/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs?ref=10c4c4afec6dfc483af6efb7019941bab9a51a29", "patch": "@@ -817,6 +817,7 @@ fn test_retain() {\n }\n \n #[test]\n+#[cfg_attr(target_os = \"android\", ignore)] // Android used in CI has a broken dlmalloc\n fn test_try_reserve() {\n     let mut empty_bytes: HashMap<u8, u8> = HashMap::new();\n \n@@ -828,11 +829,21 @@ fn test_try_reserve() {\n         \"usize::MAX should trigger an overflow!\"\n     );\n \n-    assert_matches!(\n-        empty_bytes.try_reserve(MAX_USIZE / 8).map_err(|e| e.kind()),\n-        Err(AllocError { .. }),\n-        \"usize::MAX / 8 should trigger an OOM!\"\n-    );\n+    if let Err(AllocError { .. }) = empty_bytes.try_reserve(MAX_USIZE / 16).map_err(|e| e.kind()) {\n+    } else {\n+        // This may succeed if there is enough free memory. Attempt to\n+        // allocate a few more hashmaps to ensure the allocation will fail.\n+        let mut empty_bytes2: HashMap<u8, u8> = HashMap::new();\n+        let _ = empty_bytes2.try_reserve(MAX_USIZE / 16);\n+        let mut empty_bytes3: HashMap<u8, u8> = HashMap::new();\n+        let _ = empty_bytes3.try_reserve(MAX_USIZE / 16);\n+        let mut empty_bytes4: HashMap<u8, u8> = HashMap::new();\n+        assert_matches!(\n+            empty_bytes4.try_reserve(MAX_USIZE / 16).map_err(|e| e.kind()),\n+            Err(AllocError { .. }),\n+            \"usize::MAX / 16 should trigger an OOM!\"\n+        );\n+    }\n }\n \n #[test]"}]}