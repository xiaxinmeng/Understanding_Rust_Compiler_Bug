{"sha": "aa45561183493f274b78ca6be6b841bbc4b29e0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNDU1NjExODM0OTNmMjc0Yjc4Y2E2YmU2Yjg0MWJiYzRiMjllMGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T06:42:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T06:42:55Z"}, "message": "Crate -> CrateId", "tree": {"sha": "130858a6312b6313900e2bed2361029f0dbf415d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/130858a6312b6313900e2bed2361029f0dbf415d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa45561183493f274b78ca6be6b841bbc4b29e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa45561183493f274b78ca6be6b841bbc4b29e0d", "html_url": "https://github.com/rust-lang/rust/commit/aa45561183493f274b78ca6be6b841bbc4b29e0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa45561183493f274b78ca6be6b841bbc4b29e0d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d652e1e67f28c9accc9b98f99085e9509f711d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/d652e1e67f28c9accc9b98f99085e9509f711d33", "html_url": "https://github.com/rust-lang/rust/commit/d652e1e67f28c9accc9b98f99085e9509f711d33"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "17cb63868673c3387d3baba3b1a4c1ae8181970d", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa45561183493f274b78ca6be6b841bbc4b29e0d/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa45561183493f274b78ca6be6b841bbc4b29e0d/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=aa45561183493f274b78ca6be6b841bbc4b29e0d", "patch": "@@ -13,7 +13,7 @@ use crate::{\n         CallableDef, FnSig, GenericPredicate, InferenceResult, Substs, Ty, TyDefId, TypeCtor,\n         ValueTyDefId,\n     },\n-    Crate, DefWithBody, ImplBlock,\n+    DefWithBody, ImplBlock,\n };\n \n pub use hir_def::db::{\n@@ -71,7 +71,7 @@ pub trait HirDatabase: DefDatabase {\n     /// Mutex and the query does an untracked read internally, to make sure the\n     /// cached state is thrown away when input facts change.\n     #[salsa::invoke(crate::ty::traits::trait_solver_query)]\n-    fn trait_solver(&self, krate: Crate) -> crate::ty::traits::TraitSolver;\n+    fn trait_solver(&self, krate: CrateId) -> crate::ty::traits::TraitSolver;\n \n     // Interned IDs for Chalk integration\n     #[salsa::interned]\n@@ -93,35 +93,35 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::ty::traits::chalk::trait_datum_query)]\n     fn trait_datum(\n         &self,\n-        krate: Crate,\n+        krate: CrateId,\n         trait_id: chalk_ir::TraitId,\n     ) -> Arc<chalk_rust_ir::TraitDatum<chalk_ir::family::ChalkIr>>;\n \n     #[salsa::invoke(crate::ty::traits::chalk::struct_datum_query)]\n     fn struct_datum(\n         &self,\n-        krate: Crate,\n+        krate: CrateId,\n         struct_id: chalk_ir::StructId,\n     ) -> Arc<chalk_rust_ir::StructDatum<chalk_ir::family::ChalkIr>>;\n \n     #[salsa::invoke(crate::ty::traits::chalk::impl_datum_query)]\n     fn impl_datum(\n         &self,\n-        krate: Crate,\n+        krate: CrateId,\n         impl_id: chalk_ir::ImplId,\n     ) -> Arc<chalk_rust_ir::ImplDatum<chalk_ir::family::ChalkIr>>;\n \n     #[salsa::invoke(crate::ty::traits::chalk::associated_ty_value_query)]\n     fn associated_ty_value(\n         &self,\n-        krate: Crate,\n+        krate: CrateId,\n         id: chalk_rust_ir::AssociatedTyValueId,\n     ) -> Arc<chalk_rust_ir::AssociatedTyValue<chalk_ir::family::ChalkIr>>;\n \n     #[salsa::invoke(crate::ty::traits::trait_solve_query)]\n     fn trait_solve(\n         &self,\n-        krate: Crate,\n+        krate: CrateId,\n         goal: crate::ty::Canonical<crate::ty::InEnvironment<crate::ty::Obligation>>,\n     ) -> Option<crate::ty::traits::Solution>;\n }"}, {"sha": "a26776b268b944a28dd65b456339afc7d16d96a5", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aa45561183493f274b78ca6be6b841bbc4b29e0d/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa45561183493f274b78ca6be6b841bbc4b29e0d/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=aa45561183493f274b78ca6be6b841bbc4b29e0d", "patch": "@@ -23,13 +23,12 @@ use hir_def::{\n     GenericDefId, HasModule, Lookup, TraitId, TypeAliasId,\n };\n use hir_expand::name::Name;\n-use ra_db::{impl_intern_key, salsa};\n+use ra_db::{impl_intern_key, salsa, CrateId};\n \n use crate::{\n     db::HirDatabase,\n     ty::primitive::{FloatTy, IntTy, Uncertain},\n     util::make_mut_slice,\n-    Crate,\n };\n use display::{HirDisplay, HirFormatter};\n \n@@ -162,7 +161,7 @@ impl TypeCtor {\n         }\n     }\n \n-    pub fn krate(self, db: &impl HirDatabase) -> Option<Crate> {\n+    pub fn krate(self, db: &impl HirDatabase) -> Option<CrateId> {\n         match self {\n             TypeCtor::Bool\n             | TypeCtor::Char\n@@ -178,11 +177,9 @@ impl TypeCtor {\n             | TypeCtor::Tuple { .. } => None,\n             // Closure's krate is irrelevant for coherence I would think?\n             TypeCtor::Closure { .. } => None,\n-            TypeCtor::Adt(adt) => Some(adt.module(db).krate.into()),\n-            TypeCtor::FnDef(callable) => Some(callable.krate(db).into()),\n-            TypeCtor::AssociatedType(type_alias) => {\n-                Some(type_alias.lookup(db).module(db).krate.into())\n-            }\n+            TypeCtor::Adt(adt) => Some(adt.module(db).krate),\n+            TypeCtor::FnDef(callable) => Some(callable.krate(db)),\n+            TypeCtor::AssociatedType(type_alias) => Some(type_alias.lookup(db).module(db).krate),\n         }\n     }\n "}, {"sha": "39b489a4c99389c2b9a4eb746c1c2343b24eec58", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa45561183493f274b78ca6be6b841bbc4b29e0d/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa45561183493f274b78ca6be6b841bbc4b29e0d/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=aa45561183493f274b78ca6be6b841bbc4b29e0d", "patch": "@@ -8,7 +8,7 @@ use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n-use crate::{db::HirDatabase, Crate, ImplBlock, TypeAlias};\n+use crate::{db::HirDatabase, ImplBlock, TypeAlias};\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n \n@@ -18,7 +18,7 @@ pub(crate) mod chalk;\n \n #[derive(Debug, Clone)]\n pub struct TraitSolver {\n-    krate: Crate,\n+    krate: CrateId,\n     inner: Arc<Mutex<chalk_solve::Solver<ChalkIr>>>,\n }\n \n@@ -60,12 +60,12 @@ const CHALK_SOLVER_MAX_SIZE: usize = 4;\n #[derive(Debug, Copy, Clone)]\n struct ChalkContext<'a, DB> {\n     db: &'a DB,\n-    krate: Crate,\n+    krate: CrateId,\n }\n \n pub(crate) fn trait_solver_query(\n     db: &(impl HirDatabase + salsa::Database),\n-    krate: Crate,\n+    krate: CrateId,\n ) -> TraitSolver {\n     db.salsa_runtime().report_untracked_read();\n     // krate parameter is just so we cache a unique solver per crate\n@@ -176,7 +176,7 @@ impl TypeWalk for ProjectionPredicate {\n /// Solve a trait goal using Chalk.\n pub(crate) fn trait_solve_query(\n     db: &impl HirDatabase,\n-    krate: Crate,\n+    krate: CrateId,\n     goal: Canonical<InEnvironment<Obligation>>,\n ) -> Option<Solution> {\n     let _p = profile(\"trait_solve_query\");"}, {"sha": "49fa9550814657eaa7e7ddfed0b1d705939cb095", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/aa45561183493f274b78ca6be6b841bbc4b29e0d/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa45561183493f274b78ca6be6b841bbc4b29e0d/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=aa45561183493f274b78ca6be6b841bbc4b29e0d", "patch": "@@ -8,6 +8,7 @@ use chalk_ir::{\n     TypeKindId, TypeName, UniverseIndex,\n };\n use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n+use ra_db::CrateId;\n \n use hir_def::{\n     lang_item::LangItemTarget, AstItemDef, ContainerId, GenericDefId, Lookup, TraitId, TypeAliasId,\n@@ -21,7 +22,7 @@ use crate::{\n     db::HirDatabase,\n     ty::display::HirDisplay,\n     ty::{ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk},\n-    Crate, ImplBlock, TypeAlias,\n+    ImplBlock, TypeAlias,\n };\n \n /// This represents a trait whose name we could not resolve.\n@@ -448,7 +449,7 @@ where\n         let trait_: TraitId = from_chalk(self.db, trait_id);\n         let mut result: Vec<_> = self\n             .db\n-            .impls_for_trait(self.krate.crate_id, trait_.into())\n+            .impls_for_trait(self.krate, trait_.into())\n             .iter()\n             .copied()\n             .map(Impl::ImplBlock)\n@@ -487,7 +488,7 @@ where\n         &self,\n         id: chalk_rust_ir::AssociatedTyValueId,\n     ) -> Arc<AssociatedTyValue<ChalkIr>> {\n-        self.db.associated_ty_value(self.krate, id)\n+        self.db.associated_ty_value(self.krate.into(), id)\n     }\n     fn custom_clauses(&self) -> Vec<chalk_ir::ProgramClause<ChalkIr>> {\n         vec![]\n@@ -528,7 +529,7 @@ pub(crate) fn associated_ty_data_query(\n \n pub(crate) fn trait_datum_query(\n     db: &impl HirDatabase,\n-    krate: Crate,\n+    krate: CrateId,\n     trait_id: chalk_ir::TraitId,\n ) -> Arc<TraitDatum<ChalkIr>> {\n     debug!(\"trait_datum {:?}\", trait_id);\n@@ -557,7 +558,7 @@ pub(crate) fn trait_datum_query(\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let flags = chalk_rust_ir::TraitFlags {\n         auto: trait_data.auto,\n-        upstream: trait_.module(db).krate != krate.crate_id,\n+        upstream: trait_.module(db).krate != krate,\n         non_enumerable: true,\n         coinductive: false, // only relevant for Chalk testing\n         // FIXME set these flags correctly\n@@ -579,7 +580,7 @@ pub(crate) fn trait_datum_query(\n \n pub(crate) fn struct_datum_query(\n     db: &impl HirDatabase,\n-    krate: Crate,\n+    krate: CrateId,\n     struct_id: chalk_ir::StructId,\n ) -> Arc<StructDatum<ChalkIr>> {\n     debug!(\"struct_datum {:?}\", struct_id);\n@@ -611,7 +612,7 @@ pub(crate) fn struct_datum_query(\n \n pub(crate) fn impl_datum_query(\n     db: &impl HirDatabase,\n-    krate: Crate,\n+    krate: CrateId,\n     impl_id: ImplId,\n ) -> Arc<ImplDatum<ChalkIr>> {\n     let _p = ra_prof::profile(\"impl_datum\");\n@@ -626,15 +627,15 @@ pub(crate) fn impl_datum_query(\n \n fn impl_block_datum(\n     db: &impl HirDatabase,\n-    krate: Crate,\n+    krate: CrateId,\n     impl_id: ImplId,\n     impl_block: ImplBlock,\n ) -> Option<Arc<ImplDatum<ChalkIr>>> {\n     let generic_params = db.generic_params(impl_block.id.into());\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let trait_ref = impl_block.target_trait_ref(db)?.subst(&bound_vars);\n     let trait_ = trait_ref.trait_;\n-    let impl_type = if impl_block.krate(db) == krate {\n+    let impl_type = if impl_block.krate(db).crate_id == krate {\n         chalk_rust_ir::ImplType::Local\n     } else {\n         chalk_rust_ir::ImplType::External\n@@ -698,7 +699,7 @@ fn invalid_impl_datum() -> Arc<ImplDatum<ChalkIr>> {\n \n fn closure_fn_trait_impl_datum(\n     db: &impl HirDatabase,\n-    krate: Crate,\n+    krate: CrateId,\n     data: super::ClosureFnTraitImplData,\n ) -> Option<Arc<ImplDatum<ChalkIr>>> {\n     // for some closure |X, Y| -> Z:\n@@ -755,7 +756,7 @@ fn closure_fn_trait_impl_datum(\n \n pub(crate) fn associated_ty_value_query(\n     db: &impl HirDatabase,\n-    krate: Crate,\n+    krate: CrateId,\n     id: chalk_rust_ir::AssociatedTyValueId,\n ) -> Arc<chalk_rust_ir::AssociatedTyValue<ChalkIr>> {\n     let data: AssocTyValue = from_chalk(db, id);\n@@ -771,7 +772,7 @@ pub(crate) fn associated_ty_value_query(\n \n fn type_alias_associated_ty_value(\n     db: &impl HirDatabase,\n-    _krate: Crate,\n+    _krate: CrateId,\n     type_alias: TypeAlias,\n ) -> Arc<AssociatedTyValue<ChalkIr>> {\n     let impl_block = type_alias.impl_block(db).expect(\"assoc ty value should be in impl\");\n@@ -798,7 +799,7 @@ fn type_alias_associated_ty_value(\n \n fn closure_fn_trait_output_assoc_ty_value(\n     db: &impl HirDatabase,\n-    krate: Crate,\n+    krate: CrateId,\n     data: super::ClosureFnTraitImplData,\n ) -> Arc<AssociatedTyValue<ChalkIr>> {\n     let impl_id = Impl::ClosureFnTraitImpl(data.clone()).to_chalk(db);\n@@ -831,8 +832,12 @@ fn closure_fn_trait_output_assoc_ty_value(\n     Arc::new(value)\n }\n \n-fn get_fn_trait(db: &impl HirDatabase, krate: Crate, fn_trait: super::FnTrait) -> Option<TraitId> {\n-    let target = db.lang_item(krate.crate_id, fn_trait.lang_item_name().into())?;\n+fn get_fn_trait(\n+    db: &impl HirDatabase,\n+    krate: CrateId,\n+    fn_trait: super::FnTrait,\n+) -> Option<TraitId> {\n+    let target = db.lang_item(krate, fn_trait.lang_item_name().into())?;\n     match target {\n         LangItemTarget::TraitId(t) => Some(t),\n         _ => None,"}]}