{"sha": "4d995e66a274511d70eb02abdb80da43ccf70aee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkOTk1ZTY2YTI3NDUxMWQ3MGViMDJhYmRiODBkYTQzY2NmNzBhZWU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-27T07:14:52Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-27T14:04:12Z"}, "message": "std: change default json enum encoder to use strings or a flat vec", "tree": {"sha": "23c02d318afe24ec0014e42f9e593c860e73aae8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23c02d318afe24ec0014e42f9e593c860e73aae8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d995e66a274511d70eb02abdb80da43ccf70aee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d995e66a274511d70eb02abdb80da43ccf70aee", "html_url": "https://github.com/rust-lang/rust/commit/4d995e66a274511d70eb02abdb80da43ccf70aee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d995e66a274511d70eb02abdb80da43ccf70aee/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b10b8c3ee41447299504127c341bc363d180356c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b10b8c3ee41447299504127c341bc363d180356c", "html_url": "https://github.com/rust-lang/rust/commit/b10b8c3ee41447299504127c341bc363d180356c"}], "stats": {"total": 89, "additions": 33, "deletions": 56}, "files": [{"sha": "d69917c9affbe8f21144e7db58197b999915e642", "filename": "src/libstd/json.rs", "status": "modified", "additions": 16, "deletions": 41, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4d995e66a274511d70eb02abdb80da43ccf70aee/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d995e66a274511d70eb02abdb80da43ccf70aee/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=4d995e66a274511d70eb02abdb80da43ccf70aee", "patch": "@@ -119,22 +119,15 @@ impl serialize::Encoder for Encoder {\n         f()\n     }\n \n-    fn emit_enum_variant(&self, name: &str, _id: uint, _cnt: uint, f: &fn()) {\n+    fn emit_enum_variant(&self, name: &str, _id: uint, cnt: uint, f: &fn()) {\n         // encoding of enums is special-cased for Option. Specifically:\n         // Some(34) => 34\n         // None => null\n \n-        // other enums are encoded as vectors:\n+        // other enums are encoded as strings or vectors:\n+        // Bunny => \"Bunny\"\n         // Kangaroo(34,\"William\") => [\"Kangaroo\",[34,\"William\"]]\n \n-        // the default expansion for enums is more verbose than I'd like;\n-        // specifically, the inner pair of brackets seems superfluous,\n-        // BUT the design of the enumeration framework and the requirements\n-        // of the special-case for Option mean that a first argument must\n-        // be encoded \"naked\"--with no commas--and that the option name\n-        // can't be followed by just a comma, because there might not\n-        // be any elements in the tuple.\n-\n         // FIXME #4872: this would be more precise and less frightening\n         // with fully-qualified option names. To get that information,\n         // we'd have to change the expansion of auto-encode to pass\n@@ -144,14 +137,14 @@ impl serialize::Encoder for Encoder {\n             f();\n         } else if name == ~\"None\" {\n             self.wr.write_str(~\"null\");\n+        } else if cnt == 0 {\n+            self.wr.write_str(escape_str(name));\n         } else {\n             self.wr.write_char('[');\n             self.wr.write_str(escape_str(name));\n             self.wr.write_char(',');\n-            self.wr.write_char('[');\n             f();\n             self.wr.write_char(']');\n-            self.wr.write_char(']');\n         }\n     }\n \n@@ -256,28 +249,19 @@ impl serialize::Encoder for PrettyEncoder {\n             f();\n         } else if name == ~\"None\" {\n             self.emit_nil();\n+        } else if cnt == 0 {\n+            self.wr.write_str(escape_str(name));\n         } else {\n             self.wr.write_char('[');\n             self.indent += 2;\n             self.wr.write_char('\\n');\n             self.wr.write_str(spaces(self.indent));\n             self.wr.write_str(escape_str(name));\n-            if cnt == 0 {\n-                self.wr.write_str(\",\\n\");\n-                self.wr.write_str(spaces(self.indent));\n-                self.wr.write_str(\"[]\\n\");\n-            } else {\n-                self.wr.write_str(\",\\n\");\n-                self.wr.write_str(spaces(self.indent));\n-                self.wr.write_str(\"[\\n\");\n-                self.indent += 2;\n-                f();\n-                self.wr.write_char('\\n');\n-                self.indent -= 2;\n-                self.wr.write_str(spaces(self.indent));\n-                self.wr.write_str(\"]\\n\");\n-            }\n+            self.wr.write_str(\",\\n\");\n+            f();\n+            self.wr.write_char('\\n');\n             self.indent -= 2;\n+            self.wr.write_str(spaces(self.indent));\n             self.wr.write_char(']');\n         }\n     }\n@@ -1406,7 +1390,7 @@ mod tests {\n             let encoder = Encoder(wr);\n             animal.encode(&encoder);\n         };\n-        assert_eq!(s, ~\"[\\\"Dog\\\",[]]\");\n+        assert_eq!(s, ~\"\\\"Dog\\\"\");\n     }\n \n     #[test]\n@@ -1417,14 +1401,7 @@ mod tests {\n             let encoder = PrettyEncoder(wr);\n             animal.encode(&encoder);\n         };\n-        assert_eq!(\n-            s,\n-            ~\"\\\n-            [\\n  \\\n-                \\\"Dog\\\",\\n  \\\n-                []\\n\\\n-            ]\"\n-        );\n+        assert_eq!(s, ~\"\\\"Dog\\\"\");\n     }\n \n     #[test]\n@@ -1435,7 +1412,7 @@ mod tests {\n             let encoder = Encoder(wr);\n             animal.encode(&encoder);\n         };\n-        assert_eq!(s, ~\"[\\\"Frog\\\",[\\\"Henry\\\",349]]\");\n+        assert_eq!(s, ~\"[\\\"Frog\\\",\\\"Henry\\\",349]\");\n     }\n \n     #[test]\n@@ -1451,10 +1428,8 @@ mod tests {\n             ~\"\\\n             [\\n  \\\n                 \\\"Frog\\\",\\n  \\\n-                [\\n    \\\n-                    \\\"Henry\\\",\\n    \\\n-                    349\\n  \\\n-                ]\\n\\\n+                \\\"Henry\\\",\\n  \\\n+                349\\n\\\n             ]\"\n         );\n     }"}, {"sha": "0ddf9111e025550c017a7eb96e0f559e9d1a32f7", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4d995e66a274511d70eb02abdb80da43ccf70aee/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d995e66a274511d70eb02abdb80da43ccf70aee/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=4d995e66a274511d70eb02abdb80da43ccf70aee", "patch": "@@ -329,25 +329,27 @@ mod test {\n         assert_eq!(\n             to_json_str(@tts),\n             ~\"[\\\n-                [\\\"tt_tok\\\",[null,[\\\"IDENT\\\",[\\\"fn\\\",false]]]],\\\n-                [\\\"tt_tok\\\",[null,[\\\"IDENT\\\",[\\\"foo\\\",false]]]],\\\n-                [\\\"tt_delim\\\",[\\\n+                [\\\"tt_tok\\\",null,[\\\"IDENT\\\",\\\"fn\\\",false]],\\\n+                [\\\"tt_tok\\\",null,[\\\"IDENT\\\",\\\"foo\\\",false]],\\\n+                [\\\n+                    \\\"tt_delim\\\",\\\n                     [\\\n-                        [\\\"tt_tok\\\",[null,[\\\"LPAREN\\\",[]]]],\\\n-                        [\\\"tt_tok\\\",[null,[\\\"IDENT\\\",[\\\"x\\\",false]]]],\\\n-                        [\\\"tt_tok\\\",[null,[\\\"COLON\\\",[]]]],\\\n-                        [\\\"tt_tok\\\",[null,[\\\"IDENT\\\",[\\\"int\\\",false]]]],\\\n-                        [\\\"tt_tok\\\",[null,[\\\"RPAREN\\\",[]]]]\\\n+                        [\\\"tt_tok\\\",null,\\\"LPAREN\\\"],\\\n+                        [\\\"tt_tok\\\",null,[\\\"IDENT\\\",\\\"x\\\",false]],\\\n+                        [\\\"tt_tok\\\",null,\\\"COLON\\\"],\\\n+                        [\\\"tt_tok\\\",null,[\\\"IDENT\\\",\\\"int\\\",false]],\\\n+                        [\\\"tt_tok\\\",null,\\\"RPAREN\\\"]\\\n                     ]\\\n-                ]],\\\n-                [\\\"tt_delim\\\",[\\\n+                ],\\\n+                [\\\n+                    \\\"tt_delim\\\",\\\n                     [\\\n-                        [\\\"tt_tok\\\",[null,[\\\"LBRACE\\\",[]]]],\\\n-                        [\\\"tt_tok\\\",[null,[\\\"IDENT\\\",[\\\"x\\\",false]]]],\\\n-                        [\\\"tt_tok\\\",[null,[\\\"SEMI\\\",[]]]],\\\n-                        [\\\"tt_tok\\\",[null,[\\\"RBRACE\\\",[]]]]\\\n+                        [\\\"tt_tok\\\",null,\\\"LBRACE\\\"],\\\n+                        [\\\"tt_tok\\\",null,[\\\"IDENT\\\",\\\"x\\\",false]],\\\n+                        [\\\"tt_tok\\\",null,\\\"SEMI\\\"],\\\n+                        [\\\"tt_tok\\\",null,\\\"RBRACE\\\"]\\\n                     ]\\\n-                ]]\\\n+                ]\\\n             ]\"\n         );\n         let ast1 = new_parser_from_tts(new_parse_sess(None),~[],tts)"}]}