{"sha": "499813026f1e84456c9a108b249ed1005c624181", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OTgxMzAyNmYxZTg0NDU2YzlhMTA4YjI0OWVkMTAwNWM2MjQxODE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-02T22:50:22Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-02T22:50:22Z"}, "message": "Fix config parsing", "tree": {"sha": "4dbd1b35fff3e21a56eaf309d9f1503a233fca1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dbd1b35fff3e21a56eaf309d9f1503a233fca1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/499813026f1e84456c9a108b249ed1005c624181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/499813026f1e84456c9a108b249ed1005c624181", "html_url": "https://github.com/rust-lang/rust/commit/499813026f1e84456c9a108b249ed1005c624181", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/499813026f1e84456c9a108b249ed1005c624181/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "857d9f15da507adbc3e59560f3c15568cd0ae0e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/857d9f15da507adbc3e59560f3c15568cd0ae0e5", "html_url": "https://github.com/rust-lang/rust/commit/857d9f15da507adbc3e59560f3c15568cd0ae0e5"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "dc079663fc97ade07afffd238b2a88500d8f934f", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/499813026f1e84456c9a108b249ed1005c624181/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/499813026f1e84456c9a108b249ed1005c624181/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=499813026f1e84456c9a108b249ed1005c624181", "patch": "@@ -28,15 +28,15 @@ macro_rules! define_Conf {\n     ($(\n         #[$doc:meta]\n         $(#[conf_deprecated($dep:literal)])?\n-        ($name:ident: $ty:ty $(= $default:expr)?),\n+        ($name:ident: $ty:ty = $default:expr),\n     )*) => {\n         /// Clippy lint configuration\n         pub struct Conf {\n             $(#[$doc] pub $name: $ty,)*\n         }\n \n         mod defaults {\n-            $(pub fn $name() -> $ty { define_Conf!(@default $($default)?) })*\n+            $(pub fn $name() -> $ty { $default })*\n         }\n \n         impl Default for Conf {\n@@ -90,20 +90,19 @@ macro_rules! define_Conf {\n             }\n         }\n     };\n-    (@default) => (Default::default());\n-    (@default $default:expr) => ($default);\n }\n \n+// N.B., this macro is parsed by util/lintlib.py\n define_Conf! {\n     /// Lint: CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR. The minimum rust version that the project supports\n-    (msrv: Option<String>),\n+    (msrv: Option<String> = None),\n     /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n     (blacklisted_names: Vec<String> = [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),\n     /// Lint: COGNITIVE_COMPLEXITY. The maximum cognitive complexity a function can have\n     (cognitive_complexity_threshold: u64 = 25),\n     /// DEPRECATED LINT: CYCLOMATIC_COMPLEXITY. Use the Cognitive Complexity lint instead.\n     #[conf_deprecated(\"Please use `cognitive-complexity-threshold` instead\")]\n-    (cyclomatic_complexity_threshold: Option<u64>),\n+    (cyclomatic_complexity_threshold: Option<u64> = None),\n     /// Lint: DOC_MARKDOWN. The list of words this lint should not consider as identifiers needing ticks\n     (doc_valid_idents: Vec<String> = [\n         \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\",\n@@ -142,7 +141,7 @@ define_Conf! {\n     /// Lint: DECIMAL_LITERAL_REPRESENTATION. The lower bound for linting decimal literals\n     (literal_representation_threshold: u64 = 16384),\n     /// Lint: TRIVIALLY_COPY_PASS_BY_REF. The maximum size (in bytes) to consider a `Copy` type for passing by value instead of by reference.\n-    (trivial_copy_size_limit: Option<u64>),\n+    (trivial_copy_size_limit: Option<u64> = None),\n     /// Lint: LARGE_TYPE_PASS_BY_MOVE. The minimum size (in bytes) to consider a type for passing by reference instead of by value.\n     (pass_by_value_size_limit: u64 = 256),\n     /// Lint: TOO_MANY_LINES. The maximum number of lines a function or method can have\n@@ -158,15 +157,15 @@ define_Conf! {\n     /// Lint: FN_PARAMS_EXCESSIVE_BOOLS. The maximum number of bools function parameters can have\n     (max_fn_params_bools: u64 = 3),\n     /// Lint: WILDCARD_IMPORTS. Whether to allow certain wildcard imports (prelude, super in tests).\n-    (warn_on_all_wildcard_imports: bool),\n+    (warn_on_all_wildcard_imports: bool = false),\n     /// Lint: DISALLOWED_METHOD. The list of disallowed methods, written as fully qualified paths.\n-    (disallowed_methods: Vec<String>),\n+    (disallowed_methods: Vec<String> = Vec::new()),\n     /// Lint: UNREADABLE_LITERAL. Should the fraction of a decimal be linted to include separators.\n     (unreadable_literal_lint_fractions: bool = true),\n     /// Lint: UPPER_CASE_ACRONYMS. Enables verbose mode. Triggers if there is more than one uppercase char next to each other\n-    (upper_case_acronyms_aggressive: bool),\n+    (upper_case_acronyms_aggressive: bool = false),\n     /// Lint: _CARGO_COMMON_METADATA. For internal testing only, ignores the current `publish` settings in the Cargo manifest.\n-    (cargo_ignore_publish: bool),\n+    (cargo_ignore_publish: bool = false),\n }\n \n /// Search for the configuration file."}, {"sha": "5707cf0ce0f8c08177f68866b7065c6c9feb2182", "filename": "util/lintlib.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/499813026f1e84456c9a108b249ed1005c624181/util%2Flintlib.py", "raw_url": "https://github.com/rust-lang/rust/raw/499813026f1e84456c9a108b249ed1005c624181/util%2Flintlib.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Flintlib.py?ref=499813026f1e84456c9a108b249ed1005c624181", "patch": "@@ -14,7 +14,7 @@\n group_re = re.compile(r'''\\s*([a-z_][a-z_0-9]+)''')\n conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n confvar_re = re.compile(\n-    r'''/// Lint: ([\\w,\\s]+)\\. (.*)\\n\\s*\\([^,]+,\\s+\"([^\"]+)\":\\s+([^,]+),\\s+([^\\.\\)]+).*\\),''', re.MULTILINE)\n+    r'''/// Lint: ([\\w,\\s]+)\\. (.*)\\n\\s*\\(([^:]+):\\s*([^\\s=]+)\\s*=\\s*([^\\.\\)]+).*\\),''', re.MULTILINE)\n comment_re = re.compile(r'''\\s*/// ?(.*)''')\n \n lint_levels = {"}]}