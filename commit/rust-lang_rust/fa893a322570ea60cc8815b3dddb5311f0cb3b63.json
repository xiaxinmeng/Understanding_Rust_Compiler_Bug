{"sha": "fa893a322570ea60cc8815b3dddb5311f0cb3b63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhODkzYTMyMjU3MGVhNjBjYzg4MTViM2RkZGI1MzExZjBjYjNiNjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-31T17:08:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-03T18:15:45Z"}, "message": "use TokenStream rather than &[TokenTree] for built-in macros\n\nThat way, we don't loose the jointness info", "tree": {"sha": "e693cfd3e9ad5b53aba23bcfe17725afa749aa48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e693cfd3e9ad5b53aba23bcfe17725afa749aa48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa893a322570ea60cc8815b3dddb5311f0cb3b63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa893a322570ea60cc8815b3dddb5311f0cb3b63", "html_url": "https://github.com/rust-lang/rust/commit/fa893a322570ea60cc8815b3dddb5311f0cb3b63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa893a322570ea60cc8815b3dddb5311f0cb3b63/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3146549abf25818fecfc7555f35358a948e27ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3146549abf25818fecfc7555f35358a948e27ad", "html_url": "https://github.com/rust-lang/rust/commit/b3146549abf25818fecfc7555f35358a948e27ad"}], "stats": {"total": 222, "additions": 109, "deletions": 113}, "files": [{"sha": "68877b48433d5462d3581d202f483a87d90224f3", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -57,12 +57,12 @@ extern crate rustc;\n extern crate rustc_driver;\n \n use syntax::parse::token::{self, Token};\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax_pos::Span;\n use rustc_driver::plugin::Registry;\n \n-fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: TokenStream)\n         -> Box<dyn MacResult + 'static> {\n \n     static NUMERALS: &'static [(&'static str, usize)] = &[\n@@ -78,7 +78,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         return DummyResult::any(sp);\n     }\n \n-    let text = match args[0] {\n+    let text = match args.into_trees().next().unwrap() {\n         TokenTree::Token(Token { kind: token::Ident(s, _), .. }) => s.to_string(),\n         _ => {\n             cx.span_err(sp, \"argument should be a single identifier\");"}, {"sha": "f430f01542efe4f23fadf7677ec5dbeba013abb1", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -1354,7 +1354,7 @@ impl EncodeContext<'tcx> {\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n         Entry {\n             kind: EntryKind::MacroDef(self.lazy(MacroDef {\n-                body: pprust::tokens_to_string(macro_def.body.clone()),\n+                body: pprust::tts_to_string(macro_def.body.clone()),\n                 legacy: macro_def.legacy,\n             })),\n             visibility: self.lazy(ty::Visibility::Public),"}, {"sha": "5de39c8d14d17d2af304947be1489049c0914f49", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -6,7 +6,7 @@ use crate::ext::base::{ExtCtxt, MacEager, MacResult};\n use crate::parse::token::{self, Token};\n use crate::ptr::P;\n use crate::symbol::kw;\n-use crate::tokenstream::{TokenTree};\n+use crate::tokenstream::{TokenTree, TokenStream};\n \n use smallvec::smallvec;\n use syntax_pos::Span;\n@@ -27,12 +27,11 @@ pub type ErrorMap = BTreeMap<Name, ErrorInfo>;\n \n pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                    span: Span,\n-                                   token_tree: &[TokenTree])\n+                                   tts: TokenStream)\n                                    -> Box<dyn MacResult+'cx> {\n-    let code = match token_tree {\n-        [\n-            TokenTree::Token(Token { kind: token::Ident(code, _), .. })\n-        ] => code,\n+    assert_eq!(tts.len(), 1);\n+    let code = match tts.into_trees().next() {\n+        Some(TokenTree::Token(Token { kind: token::Ident(code, _), .. })) => code,\n         _ => unreachable!()\n     };\n \n@@ -62,20 +61,21 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n \n pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                        span: Span,\n-                                       token_tree: &[TokenTree])\n+                                       tts: TokenStream)\n                                        -> Box<dyn MacResult+'cx> {\n-    let (code, description) = match  token_tree {\n-        [\n-            TokenTree::Token(Token { kind: token::Ident(code, _), .. })\n-        ] => {\n-            (*code, None)\n-        },\n-        [\n-            TokenTree::Token(Token { kind: token::Ident(code, _), .. }),\n-            TokenTree::Token(Token { kind: token::Comma, .. }),\n-            TokenTree::Token(Token { kind: token::Literal(token::Lit { symbol, .. }), ..})\n-        ] => {\n-            (*code, Some(*symbol))\n+    assert!(tts.len() == 1 || tts.len() == 3);\n+    let mut cursor = tts.into_trees();\n+    let code = match cursor.next() {\n+        Some(TokenTree::Token(Token { kind: token::Ident(code, _), .. })) => code,\n+        _ => unreachable!()\n+    };\n+    let description = match  (cursor.next(), cursor.next()) {\n+        (None, None) => None,\n+        (\n+            Some(TokenTree::Token(Token { kind: token::Comma, .. })),\n+            Some(TokenTree::Token(Token { kind: token::Literal(token::Lit { symbol, .. }), ..}))\n+        ) => {\n+            Some(symbol)\n         },\n         _ => unreachable!()\n     };\n@@ -121,12 +121,12 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n \n pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                           span: Span,\n-                                          token_tree: &[TokenTree])\n+                                          tts: TokenStream)\n                                           -> Box<dyn MacResult+'cx> {\n-    assert_eq!(token_tree.len(), 3);\n-    let ident = match &token_tree[2] {\n+    assert_eq!(tts.len(), 3);\n+    let ident = match tts.into_trees().nth(2) {\n         // DIAGNOSTICS ident.\n-        &TokenTree::Token(Token { kind: token::Ident(name, _), span })\n+        Some(TokenTree::Token(Token { kind: token::Ident(name, _), span }))\n         => Ident::new(name, span),\n         _ => unreachable!()\n     };"}, {"sha": "109ba041016c6c4eecb1dfe2a5694c8210d4ced3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -10,7 +10,7 @@ use crate::parse::token;\n use crate::ptr::P;\n use crate::symbol::{kw, sym, Ident, Symbol};\n use crate::{ThinVec, MACRO_ARGUMENTS};\n-use crate::tokenstream::{self, TokenStream, TokenTree};\n+use crate::tokenstream::{self, TokenStream};\n use crate::visit::Visitor;\n \n use errors::{DiagnosticBuilder, DiagnosticId};\n@@ -235,18 +235,18 @@ pub trait TTMacroExpander {\n }\n \n pub type MacroExpanderFn =\n-    for<'cx> fn(&'cx mut ExtCtxt<'_>, Span, &[tokenstream::TokenTree])\n+    for<'cx> fn(&'cx mut ExtCtxt<'_>, Span, TokenStream)\n                 -> Box<dyn MacResult+'cx>;\n \n impl<F> TTMacroExpander for F\n-    where F: for<'cx> Fn(&'cx mut ExtCtxt<'_>, Span, &[tokenstream::TokenTree])\n+    where F: for<'cx> Fn(&'cx mut ExtCtxt<'_>, Span, TokenStream)\n     -> Box<dyn MacResult+'cx>\n {\n     fn expand<'cx>(\n         &self,\n         ecx: &'cx mut ExtCtxt<'_>,\n         span: Span,\n-        input: TokenStream,\n+        mut input: TokenStream,\n     ) -> Box<dyn MacResult+'cx> {\n         struct AvoidInterpolatedIdents;\n \n@@ -268,10 +268,8 @@ impl<F> TTMacroExpander for F\n                 mut_visit::noop_visit_mac(mac, self)\n             }\n         }\n-\n-        let input: Vec<_> =\n-            input.trees().map(|mut tt| { AvoidInterpolatedIdents.visit_tt(&mut tt); tt }).collect();\n-        (*self)(ecx, span, &input)\n+        AvoidInterpolatedIdents.visit_tts(&mut input);\n+        (*self)(ecx, span, input)\n     }\n }\n \n@@ -677,7 +675,7 @@ impl SyntaxExtension {\n     }\n \n     pub fn dummy_bang(edition: Edition) -> SyntaxExtension {\n-        fn expander<'cx>(_: &'cx mut ExtCtxt<'_>, span: Span, _: &[TokenTree])\n+        fn expander<'cx>(_: &'cx mut ExtCtxt<'_>, span: Span, _: TokenStream)\n                          -> Box<dyn MacResult + 'cx> {\n             DummyResult::any(span)\n         }\n@@ -811,9 +809,8 @@ impl<'a> ExtCtxt<'a> {\n     pub fn monotonic_expander<'b>(&'b mut self) -> expand::MacroExpander<'b, 'a> {\n         expand::MacroExpander::new(self, true)\n     }\n-\n-    pub fn new_parser_from_tts(&self, tts: &[tokenstream::TokenTree]) -> parser::Parser<'a> {\n-        parse::stream_to_parser(self.parse_sess, tts.iter().cloned().collect(), MACRO_ARGUMENTS)\n+    pub fn new_parser_from_tts(&self, stream: TokenStream) -> parser::Parser<'a> {\n+        parse::stream_to_parser(self.parse_sess, stream, MACRO_ARGUMENTS)\n     }\n     pub fn source_map(&self) -> &'a SourceMap { self.parse_sess.source_map() }\n     pub fn parse_sess(&self) -> &'a parse::ParseSess { self.parse_sess }\n@@ -1019,7 +1016,7 @@ pub fn expr_to_string(cx: &mut ExtCtxt<'_>, expr: P<ast::Expr>, err_msg: &str)\n /// done as rarely as possible).\n pub fn check_zero_tts(cx: &ExtCtxt<'_>,\n                       sp: Span,\n-                      tts: &[tokenstream::TokenTree],\n+                      tts: TokenStream,\n                       name: &str) {\n     if !tts.is_empty() {\n         cx.span_err(sp, &format!(\"{} takes no arguments\", name));\n@@ -1030,7 +1027,7 @@ pub fn check_zero_tts(cx: &ExtCtxt<'_>,\n /// expect exactly one string literal, or emit an error and return `None`.\n pub fn get_single_str_from_tts(cx: &mut ExtCtxt<'_>,\n                                sp: Span,\n-                               tts: &[tokenstream::TokenTree],\n+                               tts: TokenStream,\n                                name: &str)\n                                -> Option<String> {\n     let mut p = cx.new_parser_from_tts(tts);\n@@ -1053,7 +1050,7 @@ pub fn get_single_str_from_tts(cx: &mut ExtCtxt<'_>,\n /// parsing error, emit a non-fatal error and return `None`.\n pub fn get_exprs_from_tts(cx: &mut ExtCtxt<'_>,\n                           sp: Span,\n-                          tts: &[tokenstream::TokenTree]) -> Option<Vec<P<ast::Expr>>> {\n+                          tts: TokenStream) -> Option<Vec<P<ast::Expr>>> {\n     let mut p = cx.new_parser_from_tts(tts);\n     let mut es = Vec::new();\n     while p.token != token::Eof {"}, {"sha": "4fd0c367288bfa86a35fac6d240b38fce3188177", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -701,7 +701,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         path: &Path,\n         span: Span,\n     ) -> AstFragment {\n-        let mut parser = self.cx.new_parser_from_tts(&toks.into_trees().collect::<Vec<_>>());\n+        let mut parser = self.cx.new_parser_from_tts(toks);\n         match parser.parse_ast_fragment(kind, false) {\n             Ok(fragment) => {\n                 parser.ensure_complete_parse(path, kind.name(), span);"}, {"sha": "37305055e62a3199a0a119bd9f18f5524a8c8746", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -356,11 +356,7 @@ pub fn tt_to_string(tt: tokenstream::TokenTree) -> String {\n     to_string(|s| s.print_tt(tt, false))\n }\n \n-pub fn tts_to_string(tts: &[tokenstream::TokenTree]) -> String {\n-    tokens_to_string(tts.iter().cloned().collect())\n-}\n-\n-pub fn tokens_to_string(tokens: TokenStream) -> String {\n+pub fn tts_to_string(tokens: TokenStream) -> String {\n     to_string(|s| s.print_tts(tokens, false))\n }\n "}, {"sha": "480553586197e37edd97df27b8cbf96dc7e81922", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -506,7 +506,7 @@ impl Cursor {\n \n impl fmt::Display for TokenStream {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&pprust::tokens_to_string(self.clone()))\n+        f.write_str(&pprust::tts_to_string(self.clone()))\n     }\n }\n "}, {"sha": "328b307361d9e077496e7d120d0fc4e89476b161", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -8,13 +8,12 @@ use errors::DiagnosticBuilder;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};\n-use syntax::parse;\n use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::ast::AsmDialect;\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::{self, TokenStream};\n use syntax::{span_err, struct_span_err};\n \n enum State {\n@@ -43,7 +42,7 @@ const OPTIONS: &[Symbol] = &[sym::volatile, sym::alignstack, sym::intel];\n \n pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        sp: Span,\n-                       tts: &[tokenstream::TokenTree])\n+                       tts: TokenStream)\n                        -> Box<dyn base::MacResult + 'cx> {\n     let mut inline_asm = match parse_inline_asm(cx, sp, tts) {\n         Ok(Some(inline_asm)) => inline_asm,\n@@ -71,20 +70,20 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n fn parse_inline_asm<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Result<Option<ast::InlineAsm>, DiagnosticBuilder<'a>> {\n     // Split the tts before the first colon, to avoid `asm!(\"x\": y)`  being\n     // parsed as `asm!(z)` with `z = \"x\": y` which is type ascription.\n-    let first_colon = tts.iter()\n+    let first_colon = tts.trees()\n         .position(|tt| {\n-            match *tt {\n+            match tt {\n                 tokenstream::TokenTree::Token(Token { kind: token::Colon, .. }) |\n                 tokenstream::TokenTree::Token(Token { kind: token::ModSep, .. }) => true,\n                 _ => false,\n             }\n         })\n         .unwrap_or(tts.len());\n-    let mut p = cx.new_parser_from_tts(&tts[first_colon..]);\n+    let mut p = cx.new_parser_from_tts(tts.trees().skip(first_colon).collect());\n     let mut asm = kw::Invalid;\n     let mut asm_str_style = None;\n     let mut outputs = Vec::new();\n@@ -110,7 +109,8 @@ fn parse_inline_asm<'a>(\n                     ));\n                 }\n                 // Nested parser, stop before the first colon (see above).\n-                let mut p2 = cx.new_parser_from_tts(&tts[..first_colon]);\n+                let mut p2 =\n+                    cx.new_parser_from_tts(tts.trees().take(first_colon).collect());\n \n                 if p2.token == token::Eof {\n                     let mut err =\n@@ -129,12 +129,8 @@ fn parse_inline_asm<'a>(\n                 // This is most likely malformed.\n                 if p2.token != token::Eof {\n                     let mut extra_tts = p2.parse_all_token_trees()?;\n-                    extra_tts.extend(tts[first_colon..].iter().cloned());\n-                    p = parse::stream_to_parser(\n-                        cx.parse_sess,\n-                        extra_tts.into_iter().collect(),\n-                        Some(\"inline assembly\"),\n-                    );\n+                    extra_tts.extend(tts.trees().skip(first_colon));\n+                    p = cx.new_parser_from_tts(extra_tts.into_iter().collect());\n                 }\n \n                 asm = s;"}, {"sha": "001996e1db718a0f69c0bb2665d58eecc7022c60", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -13,7 +13,7 @@ use syntax_pos::{Span, DUMMY_SP};\n pub fn expand_assert<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn MacResult + 'cx> {\n     let Assert { cond_expr, custom_message } = match parse_assert(cx, sp, tts) {\n         Ok(assert) => assert,\n@@ -59,9 +59,9 @@ struct Assert {\n fn parse_assert<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[TokenTree]\n+    stream: TokenStream\n ) -> Result<Assert, DiagnosticBuilder<'a>> {\n-    let mut parser = cx.new_parser_from_tts(tts);\n+    let mut parser = cx.new_parser_from_tts(stream);\n \n     if parser.token == token::Eof {\n         let mut err = cx.struct_span_err(sp, \"macro requires a boolean expression as an argument\");"}, {"sha": "0342e442df2e9135699389c8c2e7fd71bf9df659", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -7,14 +7,14 @@ use errors::DiagnosticBuilder;\n use syntax::ast;\n use syntax::ext::base::{self, *};\n use syntax::attr;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use syntax::parse::token;\n use syntax_pos::Span;\n \n pub fn expand_cfg(\n     cx: &mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n     let sp = cx.with_legacy_ctxt(sp);\n \n@@ -33,7 +33,7 @@ pub fn expand_cfg(\n fn parse_cfg<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Result<ast::MetaItem, DiagnosticBuilder<'a>> {\n     let mut p = cx.new_parser_from_tts(tts);\n "}, {"sha": "24f3a66d4ae19efeb8347196a42943b0ab13f2c8", "filename": "src/libsyntax_ext/compile_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcompile_error.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -2,11 +2,11 @@\n \n use syntax::ext::base::{self, *};\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n pub fn expand_compile_error<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n-                              tts: &[tokenstream::TokenTree])\n+                              tts: TokenStream)\n                               -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"compile_error!\") {\n         None => return DummyResult::any(sp),"}, {"sha": "514e95390bca8775bdb9b0c1c5b11adaa665c9fb", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -1,14 +1,14 @@\n use syntax::ast;\n use syntax::ext::base::{self, DummyResult};\n use syntax::symbol::Symbol;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n use std::string::String;\n \n pub fn expand_syntax_ext(\n     cx: &mut base::ExtCtxt<'_>,\n     sp: syntax_pos::Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n     let es = match base::get_exprs_from_tts(cx, sp, tts) {\n         Some(e) => e,"}, {"sha": "73de25b222586f1725bd29ecfd08db9704c8d2f3", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -6,29 +6,29 @@ use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n \n pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n-                              tts: &[TokenTree])\n+                              tts: TokenStream)\n                               -> Box<dyn base::MacResult + 'cx> {\n     if tts.is_empty() {\n         cx.span_err(sp, \"concat_idents! takes 1 or more arguments.\");\n         return DummyResult::any(sp);\n     }\n \n     let mut res_str = String::new();\n-    for (i, e) in tts.iter().enumerate() {\n+    for (i, e) in tts.into_trees().enumerate() {\n         if i & 1 == 1 {\n-            match *e {\n+            match e {\n                 TokenTree::Token(Token { kind: token::Comma, .. }) => {}\n                 _ => {\n                     cx.span_err(sp, \"concat_idents! expecting comma.\");\n                     return DummyResult::any(sp);\n                 }\n             }\n         } else {\n-            match *e {\n+            match e {\n                 TokenTree::Token(Token { kind: token::Ident(name, _), .. }) =>\n                     res_str.push_str(&name.as_str()),\n                 _ => {"}, {"sha": "179b7fe00a97ab31f8a1506a570bbc67905a30a9", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -7,13 +7,13 @@ use syntax::ast::{self, Ident, GenericArg};\n use syntax::ext::base::{self, *};\n use syntax::symbol::{kw, sym, Symbol};\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n use std::env;\n \n pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n-                              tts: &[tokenstream::TokenTree])\n+                              tts: TokenStream)\n                               -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"option_env!\") {\n         None => return DummyResult::any(sp),\n@@ -45,7 +45,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n \n pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        sp: Span,\n-                       tts: &[tokenstream::TokenTree])\n+                       tts: TokenStream)\n                        -> Box<dyn base::MacResult + 'cx> {\n     let mut exprs = match get_exprs_from_tts(cx, sp, tts) {\n         Some(ref exprs) if exprs.is_empty() => {"}, {"sha": "ad275f421af494ab49f937f397cb36a07513b38a", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -11,7 +11,7 @@ use syntax::ext::base::{self, *};\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, sym};\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use syntax_pos::{MultiSpan, Span};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -126,7 +126,7 @@ struct Context<'a, 'b> {\n fn parse_args<'a>(\n     ecx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree]\n+    tts: TokenStream,\n ) -> Result<(P<ast::Expr>, Vec<P<ast::Expr>>, FxHashMap<Symbol, usize>), DiagnosticBuilder<'a>> {\n     let mut args = Vec::<P<ast::Expr>>::new();\n     let mut names = FxHashMap::<Symbol, usize>::default();\n@@ -794,7 +794,7 @@ impl<'a, 'b> Context<'a, 'b> {\n fn expand_format_args_impl<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n     mut sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n     nl: bool,\n ) -> Box<dyn base::MacResult + 'cx> {\n     sp = ecx.with_def_site_ctxt(sp);\n@@ -812,15 +812,15 @@ fn expand_format_args_impl<'cx>(\n pub fn expand_format_args<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n     expand_format_args_impl(ecx, sp, tts, false)\n }\n \n pub fn expand_format_args_nl<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n     expand_format_args_impl(ecx, sp, tts, true)\n }"}, {"sha": "6140f0df58af9be3c595ab3b8676378ebcd6d73d", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -16,12 +16,12 @@ use syntax::ext::base::{self, *};\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use smallvec::smallvec;\n \n pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n-                              tts: &[tokenstream::TokenTree]) -> Box<dyn base::MacResult + 'cx> {\n+                              tts: TokenStream) -> Box<dyn base::MacResult + 'cx> {\n     match parse_global_asm(cx, sp, tts) {\n         Ok(Some(global_asm)) => {\n             MacEager::items(smallvec![P(ast::Item {\n@@ -45,7 +45,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n fn parse_global_asm<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree]\n+    tts: TokenStream\n ) -> Result<Option<ast::GlobalAsm>, DiagnosticBuilder<'a>> {\n     let mut p = cx.new_parser_from_tts(tts);\n "}, {"sha": "d09d72a97be15a0c7ccd122b82311a654ba35d6d", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -1,11 +1,11 @@\n use syntax::ext::base;\n use syntax::print;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use syntax_pos;\n \n pub fn expand_syntax_ext<'cx>(_cx: &'cx mut base::ExtCtxt<'_>,\n                               sp: syntax_pos::Span,\n-                              tts: &[tokenstream::TokenTree])\n+                              tts: TokenStream)\n                               -> Box<dyn base::MacResult + 'cx> {\n     println!(\"{}\", print::pprust::tts_to_string(tts));\n "}, {"sha": "9dc9d66b86f1d31f8f11e429f404d6da397b2b35", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -4,7 +4,7 @@ use syntax::parse::{self, token, DirectoryOwnership};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n use smallvec::SmallVec;\n use syntax_pos::{self, Pos, Span};\n@@ -16,7 +16,7 @@ use rustc_data_structures::sync::Lrc;\n // a given file into the current one.\n \n /// line!(): expands to the current line number\n-pub fn expand_line(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_line(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                    -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"line!\");\n \n@@ -27,7 +27,7 @@ pub fn expand_line(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree\n }\n \n /* column!(): expands to the current column number */\n-pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                   -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"column!\");\n \n@@ -40,7 +40,7 @@ pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTr\n /// file!(): expands to the current filename */\n /// The source_file (`loc.file`) contains a bunch more information we could spit\n /// out if we wanted.\n-pub fn expand_file(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_file(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                    -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"file!\");\n \n@@ -49,13 +49,13 @@ pub fn expand_file(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree\n     base::MacEager::expr(cx.expr_str(topmost, Symbol::intern(&loc.file.name.to_string())))\n }\n \n-pub fn expand_stringify(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_stringify(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                         -> Box<dyn base::MacResult+'static> {\n     let s = pprust::tts_to_string(tts);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&s)))\n }\n \n-pub fn expand_mod(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_mod(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                   -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"module_path!\");\n     let mod_path = &cx.current_expansion.module.mod_path;\n@@ -67,7 +67,7 @@ pub fn expand_mod(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree]\n /// include! : parse the given file as an expr\n /// This is generally a bad idea because it's going to behave\n /// unhygienically.\n-pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                            -> Box<dyn base::MacResult+'cx> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include!\") {\n         Some(f) => f,\n@@ -105,7 +105,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: &[tokenstrea\n }\n \n // include_str! : read the given file, insert it as a literal string expr\n-pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                           -> Box<dyn base::MacResult+'static> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_str!\") {\n         Some(f) => f,\n@@ -130,7 +130,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::To\n     }\n }\n \n-pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                             -> Box<dyn base::MacResult+'static> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_bytes!\") {\n         Some(f) => f,"}, {"sha": "d83c24046d9e5f08b0480df8c6d8cc8f1f0d75e3", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -1,20 +1,27 @@\n use syntax::ext::base::{self, ExtCtxt};\n use syntax::symbol::kw;\n use syntax_pos::Span;\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n \n pub fn expand_trace_macros(cx: &mut ExtCtxt<'_>,\n                            sp: Span,\n-                           tt: &[TokenTree])\n+                           tt: TokenStream)\n                            -> Box<dyn base::MacResult + 'static> {\n-    match tt {\n-        [TokenTree::Token(token)] if token.is_keyword(kw::True) => {\n-            cx.set_trace_macros(true);\n-        }\n-        [TokenTree::Token(token)] if token.is_keyword(kw::False) => {\n-            cx.set_trace_macros(false);\n-        }\n-        _ => cx.span_err(sp, \"trace_macros! accepts only `true` or `false`\"),\n+    let mut cursor = tt.into_trees();\n+    let mut err = false;\n+    let value = match &cursor.next() {\n+        Some(TokenTree::Token(token)) if token.is_keyword(kw::True) => true,\n+        Some(TokenTree::Token(token)) if token.is_keyword(kw::False) => false,\n+        _ => {\n+            err = true;\n+            false\n+        },\n+    };\n+    err |= cursor.next().is_some();\n+    if err {\n+        cx.span_err(sp, \"trace_macros! accepts only `true` or `false`\")\n+    } else {\n+        cx.set_trace_macros(value);\n     }\n \n     base::DummyResult::any_valid(sp)"}, {"sha": "2b57e9289b5255324b90632f9953d8dc7a11f471", "filename": "src/test/ui-fulldeps/auxiliary/roman-numerals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa893a322570ea60cc8815b3dddb5311f0cb3b63/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs?ref=fa893a322570ea60cc8815b3dddb5311f0cb3b63", "patch": "@@ -15,12 +15,12 @@ extern crate rustc;\n extern crate rustc_driver;\n \n use syntax::parse::token::{self, Token};\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax_pos::Span;\n use rustc_driver::plugin::Registry;\n \n-fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: TokenStream)\n         -> Box<dyn MacResult + 'static> {\n \n     static NUMERALS: &'static [(&'static str, usize)] = &[\n@@ -36,7 +36,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         return DummyResult::any(sp);\n     }\n \n-    let text = match args[0] {\n+    let text = match args.into_trees().next().unwrap() {\n         TokenTree::Token(Token { kind: token::Ident(s, _), .. }) => s.to_string(),\n         _ => {\n             cx.span_err(sp, \"argument should be a single identifier\");"}]}