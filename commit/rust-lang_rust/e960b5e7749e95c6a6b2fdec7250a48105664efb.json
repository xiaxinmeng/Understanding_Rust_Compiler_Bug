{"sha": "e960b5e7749e95c6a6b2fdec7250a48105664efb", "node_id": "C_kwDOAAsO6NoAKGU5NjBiNWU3NzQ5ZTk1YzZhNmIyZmRlYzcyNTBhNDgxMDU2NjRlZmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-02T15:31:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-02T15:31:15Z"}, "message": "Auto merge of #104863 - nnethercote:reduce-lint-macros, r=cjgillot\n\nReduce macro usage for lints\n\nr? `@cjgillot`", "tree": {"sha": "46f6e5b84ce2cf1ccca68eb435465cc0635731ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46f6e5b84ce2cf1ccca68eb435465cc0635731ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e960b5e7749e95c6a6b2fdec7250a48105664efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e960b5e7749e95c6a6b2fdec7250a48105664efb", "html_url": "https://github.com/rust-lang/rust/commit/e960b5e7749e95c6a6b2fdec7250a48105664efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e960b5e7749e95c6a6b2fdec7250a48105664efb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef44f53034eac46be3a0e3eec7b2b3d4ef5140b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef44f53034eac46be3a0e3eec7b2b3d4ef5140b", "html_url": "https://github.com/rust-lang/rust/commit/cef44f53034eac46be3a0e3eec7b2b3d4ef5140b"}, {"sha": "406dace6f296c818438620b558b1add62b6e55a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/406dace6f296c818438620b558b1add62b6e55a0", "html_url": "https://github.com/rust-lang/rust/commit/406dace6f296c818438620b558b1add62b6e55a0"}], "stats": {"total": 806, "additions": 255, "deletions": 551}, "files": [{"sha": "22f87514dd8fa133fe2f9993400ecc7d18c37060", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -245,10 +245,8 @@ fn run_compiler(\n                 interface::run_compiler(config, |compiler| {\n                     let sopts = &compiler.session().opts;\n                     if sopts.describe_lints {\n-                        let mut lint_store = rustc_lint::new_lint_store(\n-                            sopts.unstable_opts.no_interleave_lints,\n-                            compiler.session().enable_internal_lints(),\n-                        );\n+                        let mut lint_store =\n+                            rustc_lint::new_lint_store(compiler.session().enable_internal_lints());\n                         let registered_lints =\n                             if let Some(register_lints) = compiler.register_lints() {\n                                 register_lints(compiler.session(), &mut lint_store);"}, {"sha": "6b5b5df9e2a7d441b2c4ba7c36a5030664fab679", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -207,10 +207,7 @@ pub fn register_plugins<'a>(\n         });\n     }\n \n-    let mut lint_store = rustc_lint::new_lint_store(\n-        sess.opts.unstable_opts.no_interleave_lints,\n-        sess.enable_internal_lints(),\n-    );\n+    let mut lint_store = rustc_lint::new_lint_store(sess.enable_internal_lints());\n     register_lints(sess, &mut lint_store);\n \n     let registrars ="}, {"sha": "a6205f4d3a531dd1a519d62ea281fb2ea9876495", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -666,7 +666,6 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(mir_pretty_relative_line_numbers, true);\n     untracked!(nll_facts, true);\n     untracked!(no_analysis, true);\n-    untracked!(no_interleave_lints, true);\n     untracked!(no_leak_check, true);\n     untracked!(no_parallel_llvm, true);\n     untracked!(parse_only, true);"}, {"sha": "215df567e0e02f8e0f2b5bcc22b57c013d61c184", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 17, "deletions": 76, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -25,8 +25,6 @@ use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n-use std::slice;\n-\n macro_rules! run_early_pass { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);\n }) }\n@@ -300,20 +298,14 @@ impl LintPass for EarlyLintPassObjects<'_> {\n     }\n }\n \n-macro_rules! expand_early_lint_pass_impl_methods {\n-    ([$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n-        $(fn $name(&mut self, context: &EarlyContext<'_>, $($param: $arg),*) {\n-            for obj in self.lints.iter_mut() {\n-                obj.$name(context, $($param),*);\n-            }\n-        })*\n-    )\n-}\n-\n macro_rules! early_lint_pass_impl {\n-    ([], [$($methods:tt)*]) => (\n+    ([], [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n         impl EarlyLintPass for EarlyLintPassObjects<'_> {\n-            expand_early_lint_pass_impl_methods!([$($methods)*]);\n+            $(fn $name(&mut self, context: &EarlyContext<'_>, $($param: $arg),*) {\n+                for obj in self.lints.iter_mut() {\n+                    obj.$name(context, $($param),*);\n+                }\n+            })*\n         }\n     )\n }\n@@ -371,87 +363,36 @@ impl<'a> EarlyCheckNode<'a> for (ast::NodeId, &'a [ast::Attribute], &'a [P<ast::\n     }\n }\n \n-fn early_lint_node<'a>(\n-    sess: &Session,\n-    warn_about_weird_lints: bool,\n-    lint_store: &LintStore,\n-    registered_tools: &RegisteredTools,\n-    buffered: LintBuffer,\n-    pass: impl EarlyLintPass,\n-    check_node: impl EarlyCheckNode<'a>,\n-) -> LintBuffer {\n-    let mut cx = EarlyContextAndPass {\n-        context: EarlyContext::new(\n-            sess,\n-            warn_about_weird_lints,\n-            lint_store,\n-            registered_tools,\n-            buffered,\n-        ),\n-        pass,\n-    };\n-\n-    cx.with_lint_attrs(check_node.id(), check_node.attrs(), |cx| check_node.check(cx));\n-    cx.context.buffered\n-}\n-\n pub fn check_ast_node<'a>(\n     sess: &Session,\n     pre_expansion: bool,\n     lint_store: &LintStore,\n     registered_tools: &RegisteredTools,\n     lint_buffer: Option<LintBuffer>,\n-    builtin_lints: impl EarlyLintPass,\n+    builtin_lints: impl EarlyLintPass + 'static,\n     check_node: impl EarlyCheckNode<'a>,\n ) {\n     let passes =\n         if pre_expansion { &lint_store.pre_expansion_passes } else { &lint_store.early_passes };\n     let mut passes: Vec<_> = passes.iter().map(|p| (p)()).collect();\n-    let mut buffered = lint_buffer.unwrap_or_default();\n-\n-    if sess.opts.unstable_opts.no_interleave_lints {\n-        for (i, pass) in passes.iter_mut().enumerate() {\n-            buffered =\n-                sess.prof.verbose_generic_activity_with_arg(\"run_lint\", pass.name()).run(|| {\n-                    early_lint_node(\n-                        sess,\n-                        !pre_expansion && i == 0,\n-                        lint_store,\n-                        registered_tools,\n-                        buffered,\n-                        EarlyLintPassObjects { lints: slice::from_mut(pass) },\n-                        check_node,\n-                    )\n-                });\n-        }\n-    } else {\n-        buffered = early_lint_node(\n+    passes.push(Box::new(builtin_lints));\n+\n+    let mut cx = EarlyContextAndPass {\n+        context: EarlyContext::new(\n             sess,\n             !pre_expansion,\n             lint_store,\n             registered_tools,\n-            buffered,\n-            builtin_lints,\n-            check_node,\n-        );\n-\n-        if !passes.is_empty() {\n-            buffered = early_lint_node(\n-                sess,\n-                false,\n-                lint_store,\n-                registered_tools,\n-                buffered,\n-                EarlyLintPassObjects { lints: &mut passes[..] },\n-                check_node,\n-            );\n-        }\n-    }\n+            lint_buffer.unwrap_or_default(),\n+        ),\n+        pass: EarlyLintPassObjects { lints: &mut passes[..] },\n+    };\n+    cx.with_lint_attrs(check_node.id(), check_node.attrs(), |cx| check_node.check(cx));\n \n     // All of the buffered lints should have been emitted at this point.\n     // If not, that means that we somehow buffered a lint for a node id\n     // that was not lint-checked (perhaps it doesn't exist?). This is a bug.\n-    for (id, lints) in buffered.map {\n+    for (id, lints) in cx.context.buffered.map {\n         for early_lint in lints {\n             sess.delay_span_bug(\n                 early_lint.span,"}, {"sha": "e1aedc26d1b0aee2425391e7d789c6a104083e45", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 23, "deletions": 77, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -28,7 +28,6 @@ use rustc_span::Span;\n \n use std::any::Any;\n use std::cell::Cell;\n-use std::slice;\n \n /// Extract the `LintStore` from the query context.\n /// This function exists because we've erased `LintStore` as `dyn Any` in the context.\n@@ -313,45 +312,42 @@ impl LintPass for LateLintPassObjects<'_, '_> {\n     }\n }\n \n-macro_rules! expand_late_lint_pass_impl_methods {\n-    ([$hir:tt], [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n-        $(fn $name(&mut self, context: &LateContext<$hir>, $($param: $arg),*) {\n-            for obj in self.lints.iter_mut() {\n-                obj.$name(context, $($param),*);\n-            }\n-        })*\n-    )\n-}\n-\n macro_rules! late_lint_pass_impl {\n-    ([], [$hir:tt], $methods:tt) => {\n+    ([], [$hir:tt], [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => {\n         impl<$hir> LateLintPass<$hir> for LateLintPassObjects<'_, $hir> {\n-            expand_late_lint_pass_impl_methods!([$hir], $methods);\n+            $(fn $name(&mut self, context: &LateContext<$hir>, $($param: $arg),*) {\n+                for obj in self.lints.iter_mut() {\n+                    obj.$name(context, $($param),*);\n+                }\n+            })*\n         }\n     };\n }\n \n crate::late_lint_methods!(late_lint_pass_impl, [], ['tcx]);\n \n-fn late_lint_mod_pass<'tcx, T: LateLintPass<'tcx>>(\n+pub(super) fn late_lint_mod<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     module_def_id: LocalDefId,\n-    pass: T,\n+    builtin_lints: T,\n ) {\n-    let effective_visibilities = &tcx.effective_visibilities(());\n-\n     let context = LateContext {\n         tcx,\n         enclosing_body: None,\n         cached_typeck_results: Cell::new(None),\n         param_env: ty::ParamEnv::empty(),\n-        effective_visibilities,\n+        effective_visibilities: &tcx.effective_visibilities(()),\n         lint_store: unerased_lint_store(tcx),\n         last_node_with_lint_attrs: tcx.hir().local_def_id_to_hir_id(module_def_id),\n         generics: None,\n         only_module: true,\n     };\n \n+    let mut passes: Vec<_> =\n+        unerased_lint_store(tcx).late_module_passes.iter().map(|pass| (pass)(tcx)).collect();\n+    passes.push(Box::new(builtin_lints));\n+    let pass = LateLintPassObjects { lints: &mut passes[..] };\n+\n     let mut cx = LateContextAndPass { context, pass };\n \n     let (module, _span, hir_id) = tcx.hir().get_module(module_def_id);\n@@ -365,46 +361,29 @@ fn late_lint_mod_pass<'tcx, T: LateLintPass<'tcx>>(\n     }\n }\n \n-pub fn late_lint_mod<'tcx, T: LateLintPass<'tcx>>(\n-    tcx: TyCtxt<'tcx>,\n-    module_def_id: LocalDefId,\n-    builtin_lints: T,\n-) {\n-    if tcx.sess.opts.unstable_opts.no_interleave_lints {\n-        // These passes runs in late_lint_crate with -Z no_interleave_lints\n-        return;\n-    }\n-\n-    late_lint_mod_pass(tcx, module_def_id, builtin_lints);\n-\n-    let mut passes: Vec<_> =\n-        unerased_lint_store(tcx).late_module_passes.iter().map(|pass| (pass)(tcx)).collect();\n-\n-    if !passes.is_empty() {\n-        late_lint_mod_pass(tcx, module_def_id, LateLintPassObjects { lints: &mut passes[..] });\n-    }\n-}\n-\n-fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T) {\n-    let effective_visibilities = &tcx.effective_visibilities(());\n-\n+fn late_lint_crate<'tcx, T: LateLintPass<'tcx> + 'tcx>(tcx: TyCtxt<'tcx>, builtin_lints: T) {\n     let context = LateContext {\n         tcx,\n         enclosing_body: None,\n         cached_typeck_results: Cell::new(None),\n         param_env: ty::ParamEnv::empty(),\n-        effective_visibilities,\n+        effective_visibilities: &tcx.effective_visibilities(()),\n         lint_store: unerased_lint_store(tcx),\n         last_node_with_lint_attrs: hir::CRATE_HIR_ID,\n         generics: None,\n         only_module: false,\n     };\n \n+    let mut passes =\n+        unerased_lint_store(tcx).late_passes.iter().map(|p| (p)(tcx)).collect::<Vec<_>>();\n+    passes.push(Box::new(builtin_lints));\n+    let pass = LateLintPassObjects { lints: &mut passes[..] };\n+\n     let mut cx = LateContextAndPass { context, pass };\n \n     // Visit the whole crate.\n     cx.with_lint_attrs(hir::CRATE_HIR_ID, |cx| {\n-        // since the root module isn't visited as an item (because it isn't an\n+        // Since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n         lint_callback!(cx, check_crate,);\n         tcx.hir().walk_toplevel_module(cx);\n@@ -413,41 +392,8 @@ fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T)\n     })\n }\n \n-fn late_lint_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, builtin_lints: T) {\n-    let mut passes =\n-        unerased_lint_store(tcx).late_passes.iter().map(|p| (p)(tcx)).collect::<Vec<_>>();\n-\n-    if !tcx.sess.opts.unstable_opts.no_interleave_lints {\n-        if !passes.is_empty() {\n-            late_lint_pass_crate(tcx, LateLintPassObjects { lints: &mut passes[..] });\n-        }\n-\n-        late_lint_pass_crate(tcx, builtin_lints);\n-    } else {\n-        for pass in &mut passes {\n-            tcx.sess.prof.verbose_generic_activity_with_arg(\"run_late_lint\", pass.name()).run(\n-                || {\n-                    late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n-                },\n-            );\n-        }\n-\n-        let mut passes: Vec<_> =\n-            unerased_lint_store(tcx).late_module_passes.iter().map(|pass| (pass)(tcx)).collect();\n-\n-        for pass in &mut passes {\n-            tcx.sess\n-                .prof\n-                .verbose_generic_activity_with_arg(\"run_late_module_lint\", pass.name())\n-                .run(|| {\n-                    late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n-                });\n-        }\n-    }\n-}\n-\n /// Performs lint checking on a crate.\n-pub fn check_crate<'tcx, T: LateLintPass<'tcx>>(\n+pub fn check_crate<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     builtin_lints: impl FnOnce() -> T + Send,\n ) {"}, {"sha": "10bae36e0fd3c3b4eb0d1c53daa1d7934236e15c", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 111, "deletions": 164, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -127,132 +127,116 @@ fn lint_mod(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     late::late_lint_mod(tcx, module_def_id, BuiltinCombinedModuleLateLintPass::new());\n }\n \n-macro_rules! pre_expansion_lint_passes {\n-    ($macro:path, $args:tt) => {\n-        $macro!($args, [KeywordIdents: KeywordIdents,]);\n-    };\n-}\n-\n-macro_rules! early_lint_passes {\n-    ($macro:path, $args:tt) => {\n-        $macro!(\n-            $args,\n-            [\n-                UnusedParens: UnusedParens,\n-                UnusedBraces: UnusedBraces,\n-                UnusedImportBraces: UnusedImportBraces,\n-                UnsafeCode: UnsafeCode,\n-                SpecialModuleName: SpecialModuleName,\n-                AnonymousParameters: AnonymousParameters,\n-                EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::default(),\n-                NonCamelCaseTypes: NonCamelCaseTypes,\n-                DeprecatedAttr: DeprecatedAttr::new(),\n-                WhileTrue: WhileTrue,\n-                NonAsciiIdents: NonAsciiIdents,\n-                HiddenUnicodeCodepoints: HiddenUnicodeCodepoints,\n-                IncompleteFeatures: IncompleteFeatures,\n-                RedundantSemicolons: RedundantSemicolons,\n-                UnusedDocComment: UnusedDocComment,\n-                UnexpectedCfgs: UnexpectedCfgs,\n-            ]\n-        );\n-    };\n-}\n-\n-macro_rules! declare_combined_early_pass {\n-    ([$name:ident], $passes:tt) => (\n-        early_lint_methods!(declare_combined_early_lint_pass, [pub $name, $passes]);\n-    )\n-}\n-\n-pre_expansion_lint_passes!(declare_combined_early_pass, [BuiltinCombinedPreExpansionLintPass]);\n-early_lint_passes!(declare_combined_early_pass, [BuiltinCombinedEarlyLintPass]);\n-\n-macro_rules! late_lint_passes {\n-    ($macro:path, $args:tt) => {\n-        $macro!(\n-            $args,\n-            [\n-                // Tracks state across modules\n-                UnnameableTestItems: UnnameableTestItems::new(),\n-                // Tracks attributes of parents\n-                MissingDoc: MissingDoc::new(),\n-                // Builds a global list of all impls of `Debug`.\n-                // FIXME: Turn the computation of types which implement Debug into a query\n-                // and change this to a module lint pass\n-                MissingDebugImplementations: MissingDebugImplementations::default(),\n-                // Keeps a global list of foreign declarations.\n-                ClashingExternDeclarations: ClashingExternDeclarations::new(),\n-            ]\n-        );\n-    };\n-}\n-\n-macro_rules! late_lint_mod_passes {\n-    ($macro:path, $args:tt) => {\n-        $macro!(\n-            $args,\n-            [\n-                ForLoopsOverFallibles: ForLoopsOverFallibles,\n-                DerefIntoDynSupertrait: DerefIntoDynSupertrait,\n-                HardwiredLints: HardwiredLints,\n-                ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n-                ImproperCTypesDefinitions: ImproperCTypesDefinitions,\n-                VariantSizeDifferences: VariantSizeDifferences,\n-                BoxPointers: BoxPointers,\n-                PathStatements: PathStatements,\n-                LetUnderscore: LetUnderscore,\n-                // Depends on referenced function signatures in expressions\n-                UnusedResults: UnusedResults,\n-                NonUpperCaseGlobals: NonUpperCaseGlobals,\n-                NonShorthandFieldPatterns: NonShorthandFieldPatterns,\n-                UnusedAllocation: UnusedAllocation,\n-                // Depends on types used in type definitions\n-                MissingCopyImplementations: MissingCopyImplementations,\n-                // Depends on referenced function signatures in expressions\n-                MutableTransmutes: MutableTransmutes,\n-                TypeAliasBounds: TypeAliasBounds,\n-                TrivialConstraints: TrivialConstraints,\n-                TypeLimits: TypeLimits::new(),\n-                NonSnakeCase: NonSnakeCase,\n-                InvalidNoMangleItems: InvalidNoMangleItems,\n-                // Depends on effective visibilities\n-                UnreachablePub: UnreachablePub,\n-                ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n-                InvalidValue: InvalidValue,\n-                DerefNullPtr: DerefNullPtr,\n-                // May Depend on constants elsewhere\n-                UnusedBrokenConst: UnusedBrokenConst,\n-                UnstableFeatures: UnstableFeatures,\n-                ArrayIntoIter: ArrayIntoIter::default(),\n-                DropTraitConstraints: DropTraitConstraints,\n-                TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n-                NonPanicFmt: NonPanicFmt,\n-                NoopMethodCall: NoopMethodCall,\n-                EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n-                InvalidAtomicOrdering: InvalidAtomicOrdering,\n-                NamedAsmLabels: NamedAsmLabels,\n-                OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n-            ]\n-        );\n-    };\n-}\n-\n-macro_rules! declare_combined_late_pass {\n-    ([$v:vis $name:ident], $passes:tt) => (\n-        late_lint_methods!(declare_combined_late_lint_pass, [$v $name, $passes], ['tcx]);\n-    )\n-}\n+early_lint_methods!(\n+    declare_combined_early_lint_pass,\n+    [\n+        pub BuiltinCombinedPreExpansionLintPass,\n+        [\n+            KeywordIdents: KeywordIdents,\n+        ]\n+    ]\n+);\n+\n+early_lint_methods!(\n+    declare_combined_early_lint_pass,\n+    [\n+        pub BuiltinCombinedEarlyLintPass,\n+        [\n+            UnusedParens: UnusedParens,\n+            UnusedBraces: UnusedBraces,\n+            UnusedImportBraces: UnusedImportBraces,\n+            UnsafeCode: UnsafeCode,\n+            SpecialModuleName: SpecialModuleName,\n+            AnonymousParameters: AnonymousParameters,\n+            EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::default(),\n+            NonCamelCaseTypes: NonCamelCaseTypes,\n+            DeprecatedAttr: DeprecatedAttr::new(),\n+            WhileTrue: WhileTrue,\n+            NonAsciiIdents: NonAsciiIdents,\n+            HiddenUnicodeCodepoints: HiddenUnicodeCodepoints,\n+            IncompleteFeatures: IncompleteFeatures,\n+            RedundantSemicolons: RedundantSemicolons,\n+            UnusedDocComment: UnusedDocComment,\n+            UnexpectedCfgs: UnexpectedCfgs,\n+        ]\n+    ]\n+);\n \n // FIXME: Make a separate lint type which do not require typeck tables\n-late_lint_passes!(declare_combined_late_pass, [pub BuiltinCombinedLateLintPass]);\n-\n-late_lint_mod_passes!(declare_combined_late_pass, [BuiltinCombinedModuleLateLintPass]);\n-\n-pub fn new_lint_store(no_interleave_lints: bool, internal_lints: bool) -> LintStore {\n+late_lint_methods!(\n+    declare_combined_late_lint_pass,\n+    [\n+        pub BuiltinCombinedLateLintPass,\n+        [\n+            // Tracks state across modules\n+            UnnameableTestItems: UnnameableTestItems::new(),\n+            // Tracks attributes of parents\n+            MissingDoc: MissingDoc::new(),\n+            // Builds a global list of all impls of `Debug`.\n+            // FIXME: Turn the computation of types which implement Debug into a query\n+            // and change this to a module lint pass\n+            MissingDebugImplementations: MissingDebugImplementations::default(),\n+            // Keeps a global list of foreign declarations.\n+            ClashingExternDeclarations: ClashingExternDeclarations::new(),\n+        ]\n+    ],\n+    ['tcx]\n+);\n+\n+late_lint_methods!(\n+    declare_combined_late_lint_pass,\n+    [\n+        BuiltinCombinedModuleLateLintPass,\n+        [\n+            ForLoopsOverFallibles: ForLoopsOverFallibles,\n+            DerefIntoDynSupertrait: DerefIntoDynSupertrait,\n+            HardwiredLints: HardwiredLints,\n+            ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n+            ImproperCTypesDefinitions: ImproperCTypesDefinitions,\n+            VariantSizeDifferences: VariantSizeDifferences,\n+            BoxPointers: BoxPointers,\n+            PathStatements: PathStatements,\n+            LetUnderscore: LetUnderscore,\n+            // Depends on referenced function signatures in expressions\n+            UnusedResults: UnusedResults,\n+            NonUpperCaseGlobals: NonUpperCaseGlobals,\n+            NonShorthandFieldPatterns: NonShorthandFieldPatterns,\n+            UnusedAllocation: UnusedAllocation,\n+            // Depends on types used in type definitions\n+            MissingCopyImplementations: MissingCopyImplementations,\n+            // Depends on referenced function signatures in expressions\n+            MutableTransmutes: MutableTransmutes,\n+            TypeAliasBounds: TypeAliasBounds,\n+            TrivialConstraints: TrivialConstraints,\n+            TypeLimits: TypeLimits::new(),\n+            NonSnakeCase: NonSnakeCase,\n+            InvalidNoMangleItems: InvalidNoMangleItems,\n+            // Depends on effective visibilities\n+            UnreachablePub: UnreachablePub,\n+            ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n+            InvalidValue: InvalidValue,\n+            DerefNullPtr: DerefNullPtr,\n+            // May Depend on constants elsewhere\n+            UnusedBrokenConst: UnusedBrokenConst,\n+            UnstableFeatures: UnstableFeatures,\n+            ArrayIntoIter: ArrayIntoIter::default(),\n+            DropTraitConstraints: DropTraitConstraints,\n+            TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n+            NonPanicFmt: NonPanicFmt,\n+            NoopMethodCall: NoopMethodCall,\n+            EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n+            InvalidAtomicOrdering: InvalidAtomicOrdering,\n+            NamedAsmLabels: NamedAsmLabels,\n+            OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n+        ]\n+    ],\n+    ['tcx]\n+);\n+\n+pub fn new_lint_store(internal_lints: bool) -> LintStore {\n     let mut lint_store = LintStore::new();\n \n-    register_builtins(&mut lint_store, no_interleave_lints);\n+    register_builtins(&mut lint_store);\n     if internal_lints {\n         register_internals(&mut lint_store);\n     }\n@@ -263,54 +247,17 @@ pub fn new_lint_store(no_interleave_lints: bool, internal_lints: bool) -> LintSt\n /// Tell the `LintStore` about all the built-in lints (the ones\n /// defined in this crate and the ones defined in\n /// `rustc_session::lint::builtin`).\n-fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n+fn register_builtins(store: &mut LintStore) {\n     macro_rules! add_lint_group {\n         ($name:expr, $($lint:ident),*) => (\n             store.register_group(false, $name, None, vec![$(LintId::of($lint)),*]);\n         )\n     }\n \n-    macro_rules! register_early_pass {\n-        ($method:ident, $ty:ident, $constructor:expr) => {\n-            store.register_lints(&$ty::get_lints());\n-            store.$method(|| Box::new($constructor));\n-        };\n-    }\n-\n-    macro_rules! register_late_pass {\n-        ($method:ident, $ty:ident, $constructor:expr) => {\n-            store.register_lints(&$ty::get_lints());\n-            store.$method(|_| Box::new($constructor));\n-        };\n-    }\n-\n-    macro_rules! register_early_passes {\n-        ($method:ident, [$($passes:ident: $constructor:expr,)*]) => (\n-            $(\n-                register_early_pass!($method, $passes, $constructor);\n-            )*\n-        )\n-    }\n-\n-    macro_rules! register_late_passes {\n-        ($method:ident, [$($passes:ident: $constructor:expr,)*]) => (\n-            $(\n-                register_late_pass!($method, $passes, $constructor);\n-            )*\n-        )\n-    }\n-\n-    if no_interleave_lints {\n-        pre_expansion_lint_passes!(register_early_passes, register_pre_expansion_pass);\n-        early_lint_passes!(register_early_passes, register_early_pass);\n-        late_lint_passes!(register_late_passes, register_late_pass);\n-        late_lint_mod_passes!(register_late_passes, register_late_mod_pass);\n-    } else {\n-        store.register_lints(&BuiltinCombinedPreExpansionLintPass::get_lints());\n-        store.register_lints(&BuiltinCombinedEarlyLintPass::get_lints());\n-        store.register_lints(&BuiltinCombinedModuleLateLintPass::get_lints());\n-        store.register_lints(&BuiltinCombinedLateLintPass::get_lints());\n-    }\n+    store.register_lints(&BuiltinCombinedPreExpansionLintPass::get_lints());\n+    store.register_lints(&BuiltinCombinedEarlyLintPass::get_lints());\n+    store.register_lints(&BuiltinCombinedModuleLateLintPass::get_lints());\n+    store.register_lints(&BuiltinCombinedLateLintPass::get_lints());\n \n     add_lint_group!(\n         \"nonstandard_style\","}, {"sha": "2f53986139e05cc55500a7b87e112913caf3d357", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -1,7 +1,6 @@\n use crate::context::{EarlyContext, LateContext};\n \n use rustc_ast as ast;\n-use rustc_data_structures::sync;\n use rustc_hir as hir;\n use rustc_session::lint::builtin::HardwiredLints;\n use rustc_session::lint::LintPass;\n@@ -66,16 +65,10 @@ macro_rules! late_lint_methods {\n // FIXME: eliminate the duplication with `Visitor`. But this also\n // contains a few lint-specific methods with no equivalent in `Visitor`.\n \n-macro_rules! expand_lint_pass_methods {\n-    ($context:ty, [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n-        $(#[inline(always)] fn $name(&mut self, _: $context, $(_: $arg),*) {})*\n-    )\n-}\n-\n macro_rules! declare_late_lint_pass {\n-    ([], [$hir:tt], [$($methods:tt)*]) => (\n+    ([], [$hir:tt], [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n         pub trait LateLintPass<$hir>: LintPass {\n-            expand_lint_pass_methods!(&LateContext<$hir>, [$($methods)*]);\n+            $(#[inline(always)] fn $name(&mut self, _: &LateContext<$hir>, $(_: $arg),*) {})*\n         }\n     )\n }\n@@ -175,16 +168,10 @@ macro_rules! early_lint_methods {\n     )\n }\n \n-macro_rules! expand_early_lint_pass_methods {\n-    ($context:ty, [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n-        $(#[inline(always)] fn $name(&mut self, _: $context, $(_: $arg),*) {})*\n-    )\n-}\n-\n macro_rules! declare_early_lint_pass {\n-    ([], [$($methods:tt)*]) => (\n+    ([], [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n         pub trait EarlyLintPass: LintPass {\n-            expand_early_lint_pass_methods!(&EarlyContext<'_>, [$($methods)*]);\n+            $(#[inline(always)] fn $name(&mut self, _: &EarlyContext<'_>, $(_: $arg),*) {})*\n         }\n     )\n }\n@@ -243,5 +230,5 @@ macro_rules! declare_combined_early_lint_pass {\n }\n \n /// A lint pass boxed up as a trait object.\n-pub type EarlyLintPassObject = Box<dyn EarlyLintPass + sync::Send + 'static>;\n-pub type LateLintPassObject<'tcx> = Box<dyn LateLintPass<'tcx> + sync::Send + 'tcx>;\n+pub type EarlyLintPassObject = Box<dyn EarlyLintPass + 'static>;\n+pub type LateLintPassObject<'tcx> = Box<dyn LateLintPass<'tcx> + 'tcx>;"}, {"sha": "01a9361e7867663f200ec7938cccc2da6352a5fa", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -1414,8 +1414,6 @@ options! {\n         \"run all passes except codegen; no output\"),\n     no_generate_arange_section: bool = (false, parse_no_flag, [TRACKED],\n         \"omit DWARF address ranges that give faster lookups\"),\n-    no_interleave_lints: bool = (false, parse_no_flag, [UNTRACKED],\n-        \"execute lints separately; allows benchmarking individual lints\"),\n     no_leak_check: bool = (false, parse_no_flag, [UNTRACKED],\n         \"disable the 'leak check' for subtyping; unsound, but useful for tests\"),\n     no_link: bool = (false, parse_no_flag, [TRACKED],"}, {"sha": "6d34f484754c7a6c2c60d85b3ac9c0ca1e740b5e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -781,10 +781,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n         let sess = compiler.session();\n \n         if sess.opts.describe_lints {\n-            let mut lint_store = rustc_lint::new_lint_store(\n-                sess.opts.unstable_opts.no_interleave_lints,\n-                sess.enable_internal_lints(),\n-            );\n+            let mut lint_store = rustc_lint::new_lint_store(sess.enable_internal_lints());\n             let registered_lints = if let Some(register_lints) = compiler.register_lints() {\n                 register_lints(sess, &mut lint_store);\n                 true"}, {"sha": "55154803098675fdacff687709d0b8ab9c475cec", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -90,7 +90,6 @@\n     -Z                             no-analysis=val -- parse and expand the source, but run no analysis\n     -Z                              no-codegen=val -- run all passes except codegen; no output\n     -Z              no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n-    -Z                     no-interleave-lints=val -- execute lints separately; allows benchmarking individual lints\n     -Z                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n     -Z                                 no-link=val -- compile without linking\n     -Z                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)"}, {"sha": "82679c9e10a100b0ec5241092ed43abc2f8ed7c4", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-load.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -1,11 +1,3 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> <crate attribute>:1:1\n-   |\n-LL | plugin(lint_plugin_test)\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n warning: item is named 'lintme'\n   --> $DIR/lint-plugin-cmdline-load.rs:8:1\n    |\n@@ -14,5 +6,13 @@ LL | fn lintme() { }\n    |\n    = note: `#[warn(test_lint)]` on by default\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> <crate attribute>:1:1\n+   |\n+LL | plugin(lint_plugin_test)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n warning: 2 warnings emitted\n "}, {"sha": "5e8891bf1f1ac224eb860bf78abf98263a39f2a3", "filename": "src/test/ui-fulldeps/lint-plugin-deny-attr.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -1,11 +1,3 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/lint-plugin-deny-attr.rs:5:1\n-   |\n-LL | #![plugin(lint_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-deny-attr.rs:9:1\n    |\n@@ -18,5 +10,13 @@ note: the lint level is defined here\n LL | #![deny(test_lint)]\n    |         ^^^^^^^^^\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> $DIR/lint-plugin-deny-attr.rs:5:1\n+   |\n+LL | #![plugin(lint_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "d5d6b5352145c531ac081fc9e38279117c55bc1a", "filename": "src/test/ui-fulldeps/lint-plugin-deny-cmdline.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -1,11 +1,3 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/lint-plugin-deny-cmdline.rs:6:1\n-   |\n-LL | #![plugin(lint_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-deny-cmdline.rs:9:1\n    |\n@@ -14,5 +6,13 @@ LL | fn lintme() { }\n    |\n    = note: requested on the command line with `-D test-lint`\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> $DIR/lint-plugin-deny-cmdline.rs:6:1\n+   |\n+LL | #![plugin(lint_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "cf31b3ec1587e788d6a1c748c8ed2c55f1ce4d41", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -11,7 +11,6 @@ fn lintme() {} //~ ERROR item is named 'lintme'\n #[allow(test_lint)]\n //~^ ERROR allow(test_lint) incompatible\n //~| ERROR allow(test_lint) incompatible\n-//~| ERROR allow(test_lint) incompatible\n pub fn main() {\n     lintme();\n }"}, {"sha": "ae34b25cc2f808002972340723ac46c7eda961db", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.stderr", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -7,23 +7,6 @@ LL | #![forbid(test_lint)]\n LL | #[allow(test_lint)]\n    |         ^^^^^^^^^ overruled by previous forbid\n \n-error[E0453]: allow(test_lint) incompatible with previous forbid\n-  --> $DIR/lint-plugin-forbid-attrs.rs:11:9\n-   |\n-LL | #![forbid(test_lint)]\n-   |           --------- `forbid` level set here\n-...\n-LL | #[allow(test_lint)]\n-   |         ^^^^^^^^^ overruled by previous forbid\n-\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/lint-plugin-forbid-attrs.rs:5:1\n-   |\n-LL | #![plugin(lint_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-forbid-attrs.rs:9:1\n    |\n@@ -45,6 +28,14 @@ LL | #![forbid(test_lint)]\n LL | #[allow(test_lint)]\n    |         ^^^^^^^^^ overruled by previous forbid\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> $DIR/lint-plugin-forbid-attrs.rs:5:1\n+   |\n+LL | #![plugin(lint_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "b9d1aa85a69308694fae84a4baabb14c86518989", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-cmdline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -9,7 +9,7 @@ fn lintme() { } //~ ERROR item is named 'lintme'\n \n #[allow(test_lint)] //~ ERROR allow(test_lint) incompatible\n                     //~| ERROR allow(test_lint) incompatible\n-                    //~| ERROR allow(test_lint)\n+\n pub fn main() {\n     lintme();\n }"}, {"sha": "491c4d2064681e9ae467a2f5b8a8399160cc253b", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-cmdline.stderr", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -6,22 +6,6 @@ LL | #[allow(test_lint)]\n    |\n    = note: `forbid` lint level was set on command line\n \n-error[E0453]: allow(test_lint) incompatible with previous forbid\n-  --> $DIR/lint-plugin-forbid-cmdline.rs:10:9\n-   |\n-LL | #[allow(test_lint)]\n-   |         ^^^^^^^^^ overruled by previous forbid\n-   |\n-   = note: `forbid` lint level was set on command line\n-\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/lint-plugin-forbid-cmdline.rs:6:1\n-   |\n-LL | #![plugin(lint_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-forbid-cmdline.rs:8:1\n    |\n@@ -38,6 +22,14 @@ LL | #[allow(test_lint)]\n    |\n    = note: `forbid` lint level was set on command line\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> $DIR/lint-plugin-forbid-cmdline.rs:6:1\n+   |\n+LL | #![plugin(lint_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "dd5d3d72ecf39baff81953fceebedeec5c48deee", "filename": "src/test/ui-fulldeps/lint-plugin.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -1,11 +1,3 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/lint-plugin.rs:5:1\n-   |\n-LL | #![plugin(lint_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n warning: item is named 'lintme'\n   --> $DIR/lint-plugin.rs:8:1\n    |\n@@ -14,5 +6,13 @@ LL | fn lintme() { }\n    |\n    = note: `#[warn(test_lint)]` on by default\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> $DIR/lint-plugin.rs:5:1\n+   |\n+LL | #![plugin(lint_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n warning: 2 warnings emitted\n "}, {"sha": "b060e3a3e38b4c10eaac0a881b39258628a46961", "filename": "src/test/ui-fulldeps/lint-tool-cmdline-allow.stderr", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -6,18 +6,6 @@ warning: lint name `test_lint` is deprecated and does not have an effect anymore\n    |\n    = note: requested on the command line with `-A test_lint`\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/lint-tool-cmdline-allow.rs:7:1\n-   |\n-LL | #![plugin(lint_tool_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n-warning: lint name `test_lint` is deprecated and does not have an effect anymore. Use: clippy::test_lint\n-   |\n-   = note: requested on the command line with `-A test_lint`\n-\n warning: item is named 'lintme'\n   --> $DIR/lint-tool-cmdline-allow.rs:9:1\n    |\n@@ -26,9 +14,17 @@ LL | fn lintme() {}\n    |\n    = note: `#[warn(clippy::test_lint)]` on by default\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> $DIR/lint-tool-cmdline-allow.rs:7:1\n+   |\n+LL | #![plugin(lint_tool_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n warning: lint name `test_lint` is deprecated and does not have an effect anymore. Use: clippy::test_lint\n    |\n    = note: requested on the command line with `-A test_lint`\n \n-warning: 6 warnings emitted\n+warning: 5 warnings emitted\n "}, {"sha": "f92bcd213b844a272914c36cf2ceea10bb58ab0f", "filename": "src/test/ui-fulldeps/lint-tool-test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -10,12 +10,10 @@\n //~^ WARNING lint name `test_lint` is deprecated and may not have an effect in the future\n //~| WARNING lint name `test_lint` is deprecated and may not have an effect in the future\n //~| WARNING lint name `test_lint` is deprecated and may not have an effect in the future\n-//~| WARNING lint name `test_lint` is deprecated and may not have an effect in the future\n #![deny(clippy_group)]\n //~^ WARNING lint name `clippy_group` is deprecated and may not have an effect in the future\n //~| WARNING lint name `clippy_group` is deprecated and may not have an effect in the future\n //~| WARNING lint name `clippy_group` is deprecated and may not have an effect in the future\n-//~| WARNING lint name `clippy_group` is deprecated and may not have an effect in the future\n \n fn lintme() { } //~ ERROR item is named 'lintme'\n \n@@ -32,7 +30,6 @@ pub fn main() {\n //~^ WARNING lint name `test_group` is deprecated and may not have an effect in the future\n //~| WARNING lint name `test_group` is deprecated and may not have an effect in the future\n //~| WARNING lint name `test_group` is deprecated and may not have an effect in the future\n-//~| WARNING lint name `test_group` is deprecated and may not have an effect in the future\n #[deny(this_lint_does_not_exist)] //~ WARNING unknown lint: `this_lint_does_not_exist`\n fn hello() {\n     fn lintmetoo() { }"}, {"sha": "027cf8f80cff28b2c1ed539c9b1230dabde0e9c0", "filename": "src/test/ui-fulldeps/lint-tool-test.stderr", "status": "modified", "additions": 26, "deletions": 44, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -7,13 +7,13 @@ LL | #![cfg_attr(foo, warn(test_lint))]\n    = note: `#[warn(renamed_and_removed_lints)]` on by default\n \n warning: lint name `clippy_group` is deprecated and may not have an effect in the future.\n-  --> $DIR/lint-tool-test.rs:14:9\n+  --> $DIR/lint-tool-test.rs:13:9\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^ help: change it to: `clippy::group`\n \n warning: lint name `test_group` is deprecated and may not have an effect in the future.\n-  --> $DIR/lint-tool-test.rs:31:9\n+  --> $DIR/lint-tool-test.rs:29:9\n    |\n LL | #[allow(test_group)]\n    |         ^^^^^^^^^^ help: change it to: `clippy::test_group`\n@@ -25,89 +25,71 @@ LL | #![cfg_attr(foo, warn(test_lint))]\n    |                       ^^^^^^^^^ help: change it to: `clippy::test_lint`\n \n warning: lint name `clippy_group` is deprecated and may not have an effect in the future.\n-  --> $DIR/lint-tool-test.rs:14:9\n-   |\n-LL | #![deny(clippy_group)]\n-   |         ^^^^^^^^^^^^ help: change it to: `clippy::group`\n-\n-warning: lint name `test_group` is deprecated and may not have an effect in the future.\n-  --> $DIR/lint-tool-test.rs:31:9\n-   |\n-LL | #[allow(test_group)]\n-   |         ^^^^^^^^^^ help: change it to: `clippy::test_group`\n-\n-warning: unknown lint: `this_lint_does_not_exist`\n-  --> $DIR/lint-tool-test.rs:36:8\n-   |\n-LL | #[deny(this_lint_does_not_exist)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(unknown_lints)]` on by default\n-\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/lint-tool-test.rs:6:1\n-   |\n-LL | #![plugin(lint_tool_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n-warning: lint name `test_lint` is deprecated and may not have an effect in the future.\n-  --> $DIR/lint-tool-test.rs:9:23\n-   |\n-LL | #![cfg_attr(foo, warn(test_lint))]\n-   |                       ^^^^^^^^^ help: change it to: `clippy::test_lint`\n-\n-warning: lint name `clippy_group` is deprecated and may not have an effect in the future.\n-  --> $DIR/lint-tool-test.rs:14:9\n+  --> $DIR/lint-tool-test.rs:13:9\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^ help: change it to: `clippy::group`\n \n error: item is named 'lintme'\n-  --> $DIR/lint-tool-test.rs:20:1\n+  --> $DIR/lint-tool-test.rs:18:1\n    |\n LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-tool-test.rs:14:9\n+  --> $DIR/lint-tool-test.rs:13:9\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^\n    = note: `#[deny(clippy::test_lint)]` implied by `#[deny(clippy::group)]`\n \n error: item is named 'lintmetoo'\n-  --> $DIR/lint-tool-test.rs:28:5\n+  --> $DIR/lint-tool-test.rs:26:5\n    |\n LL |     fn lintmetoo() { }\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::test_group)]` implied by `#[deny(clippy::group)]`\n \n warning: lint name `test_group` is deprecated and may not have an effect in the future.\n-  --> $DIR/lint-tool-test.rs:31:9\n+  --> $DIR/lint-tool-test.rs:29:9\n    |\n LL | #[allow(test_group)]\n    |         ^^^^^^^^^^ help: change it to: `clippy::test_group`\n \n+warning: unknown lint: `this_lint_does_not_exist`\n+  --> $DIR/lint-tool-test.rs:33:8\n+   |\n+LL | #[deny(this_lint_does_not_exist)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unknown_lints)]` on by default\n+\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> $DIR/lint-tool-test.rs:6:1\n+   |\n+LL | #![plugin(lint_tool_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n warning: lint name `test_lint` is deprecated and may not have an effect in the future.\n   --> $DIR/lint-tool-test.rs:9:23\n    |\n LL | #![cfg_attr(foo, warn(test_lint))]\n    |                       ^^^^^^^^^ help: change it to: `clippy::test_lint`\n \n warning: lint name `clippy_group` is deprecated and may not have an effect in the future.\n-  --> $DIR/lint-tool-test.rs:14:9\n+  --> $DIR/lint-tool-test.rs:13:9\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^ help: change it to: `clippy::group`\n \n warning: lint name `test_group` is deprecated and may not have an effect in the future.\n-  --> $DIR/lint-tool-test.rs:31:9\n+  --> $DIR/lint-tool-test.rs:29:9\n    |\n LL | #[allow(test_group)]\n    |         ^^^^^^^^^^ help: change it to: `clippy::test_group`\n \n-error: aborting due to 2 previous errors; 14 warnings emitted\n+error: aborting due to 2 previous errors; 11 warnings emitted\n "}, {"sha": "a2581658920b9e2195281c84d0955b89ac40ceff", "filename": "src/test/ui/lint/issue-97094.nointerleaved.stderr", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cef44f53034eac46be3a0e3eec7b2b3d4ef5140b/src%2Ftest%2Fui%2Flint%2Fissue-97094.nointerleaved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cef44f53034eac46be3a0e3eec7b2b3d4ef5140b/src%2Ftest%2Fui%2Flint%2Fissue-97094.nointerleaved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-97094.nointerleaved.stderr?ref=cef44f53034eac46be3a0e3eec7b2b3d4ef5140b", "patch": "@@ -1,53 +0,0 @@\n-error: unknown lint: `nonex_lint_top_level`\n-  --> $DIR/issue-97094.rs:14:26\n-   |\n-LL | #![cfg_attr(all(), allow(nonex_lint_top_level))]\n-   |                          ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-97094.rs:10:9\n-   |\n-LL | #![deny(warnings)]\n-   |         ^^^^^^^^\n-   = note: `#[deny(unknown_lints)]` implied by `#[deny(warnings)]`\n-\n-error: lint `bare_trait_object` has been renamed to `bare_trait_objects`\n-  --> $DIR/issue-97094.rs:16:26\n-   |\n-LL | #![cfg_attr(all(), allow(bare_trait_object))]\n-   |                          ^^^^^^^^^^^^^^^^^ help: use the new name: `bare_trait_objects`\n-   |\n-   = note: `#[deny(renamed_and_removed_lints)]` implied by `#[deny(warnings)]`\n-\n-error: unknown lint: `nonex_lint_mod`\n-  --> $DIR/issue-97094.rs:19:25\n-   |\n-LL | #[cfg_attr(all(), allow(nonex_lint_mod))]\n-   |                         ^^^^^^^^^^^^^^\n-\n-error: unknown lint: `nonex_lint_mod_inner`\n-  --> $DIR/issue-97094.rs:22:30\n-   |\n-LL |     #![cfg_attr(all(), allow(nonex_lint_mod_inner))]\n-   |                              ^^^^^^^^^^^^^^^^^^^^\n-\n-error: unknown lint: `nonex_lint_fn`\n-  --> $DIR/issue-97094.rs:26:25\n-   |\n-LL | #[cfg_attr(all(), allow(nonex_lint_fn))]\n-   |                         ^^^^^^^^^^^^^\n-\n-error: unknown lint: `nonex_lint_in_macro`\n-  --> $DIR/issue-97094.rs:37:29\n-   |\n-LL |     #[cfg_attr(all(), allow(nonex_lint_in_macro))]\n-   |                             ^^^^^^^^^^^^^^^^^^^\n-\n-error: unknown lint: `nonex_lint_fn`\n-  --> $DIR/issue-97094.rs:56:13\n-   |\n-LL |     #[allow(nonex_lint_fn)]\n-   |             ^^^^^^^^^^^^^\n-\n-error: aborting due to 7 previous errors\n-"}, {"sha": "22525ca11ae04cefa3abbb465c9beb527e49cc30", "filename": "src/test/ui/lint/issue-97094.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui%2Flint%2Fissue-97094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui%2Flint%2Fissue-97094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-97094.rs?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -1,12 +1,3 @@\n-// revisions: interleaved nointerleaved\n-// [nointerleaved]compile-flags: -Z no-interleave-lints\n-\n-// This test has two revisions because the logic change\n-// needed to make this test pass had to be adjusted\n-// for no-interleave-lints. Should the debug option\n-// be removed one day, please don't remove this\n-// test entirely, just remove the revision from it.\n-\n #![deny(warnings)]\n \n // Ensure that unknown lints inside cfg-attr's are linted for"}, {"sha": "1a0a3eaf25077d407e96bf4455cd240dc6747cf2", "filename": "src/test/ui/lint/issue-97094.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui%2Flint%2Fissue-97094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e960b5e7749e95c6a6b2fdec7250a48105664efb/src%2Ftest%2Fui%2Flint%2Fissue-97094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-97094.stderr?ref=e960b5e7749e95c6a6b2fdec7250a48105664efb", "patch": "@@ -1,50 +1,50 @@\n error: unknown lint: `nonex_lint_top_level`\n-  --> $DIR/issue-97094.rs:14:26\n+  --> $DIR/issue-97094.rs:5:26\n    |\n LL | #![cfg_attr(all(), allow(nonex_lint_top_level))]\n    |                          ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-97094.rs:10:9\n+  --> $DIR/issue-97094.rs:1:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(unknown_lints)]` implied by `#[deny(warnings)]`\n \n error: lint `bare_trait_object` has been renamed to `bare_trait_objects`\n-  --> $DIR/issue-97094.rs:16:26\n+  --> $DIR/issue-97094.rs:7:26\n    |\n LL | #![cfg_attr(all(), allow(bare_trait_object))]\n    |                          ^^^^^^^^^^^^^^^^^ help: use the new name: `bare_trait_objects`\n    |\n    = note: `#[deny(renamed_and_removed_lints)]` implied by `#[deny(warnings)]`\n \n error: unknown lint: `nonex_lint_mod`\n-  --> $DIR/issue-97094.rs:19:25\n+  --> $DIR/issue-97094.rs:10:25\n    |\n LL | #[cfg_attr(all(), allow(nonex_lint_mod))]\n    |                         ^^^^^^^^^^^^^^\n \n error: unknown lint: `nonex_lint_mod_inner`\n-  --> $DIR/issue-97094.rs:22:30\n+  --> $DIR/issue-97094.rs:13:30\n    |\n LL |     #![cfg_attr(all(), allow(nonex_lint_mod_inner))]\n    |                              ^^^^^^^^^^^^^^^^^^^^\n \n error: unknown lint: `nonex_lint_fn`\n-  --> $DIR/issue-97094.rs:26:25\n+  --> $DIR/issue-97094.rs:17:25\n    |\n LL | #[cfg_attr(all(), allow(nonex_lint_fn))]\n    |                         ^^^^^^^^^^^^^\n \n error: unknown lint: `nonex_lint_in_macro`\n-  --> $DIR/issue-97094.rs:37:29\n+  --> $DIR/issue-97094.rs:28:29\n    |\n LL |     #[cfg_attr(all(), allow(nonex_lint_in_macro))]\n    |                             ^^^^^^^^^^^^^^^^^^^\n \n error: unknown lint: `nonex_lint_fn`\n-  --> $DIR/issue-97094.rs:56:13\n+  --> $DIR/issue-97094.rs:47:13\n    |\n LL |     #[allow(nonex_lint_fn)]\n    |             ^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/issue-97094.interleaved.stderr"}]}