{"sha": "fcd2021583a9a708d8333b8dc3c8b0e8ac55380d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZDIwMjE1ODNhOWE3MDhkODMzM2I4ZGMzYzhiMGU4YWM1NTM4MGQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-27T20:08:54Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-27T20:08:54Z"}, "message": "Add visual indent tests for chains", "tree": {"sha": "d71b7096bce91602772fc024bc2c18e0d97ad92d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d71b7096bce91602772fc024bc2c18e0d97ad92d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcd2021583a9a708d8333b8dc3c8b0e8ac55380d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd2021583a9a708d8333b8dc3c8b0e8ac55380d", "html_url": "https://github.com/rust-lang/rust/commit/fcd2021583a9a708d8333b8dc3c8b0e8ac55380d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcd2021583a9a708d8333b8dc3c8b0e8ac55380d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2105d382f64d9351e5b44a0cfb11af8f9abe618", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2105d382f64d9351e5b44a0cfb11af8f9abe618", "html_url": "https://github.com/rust-lang/rust/commit/f2105d382f64d9351e5b44a0cfb11af8f9abe618"}], "stats": {"total": 254, "additions": 254, "deletions": 0}, "files": [{"sha": "a62ec4f492ecadd00ead8aa06f8eb5b8ca8c1eaf", "filename": "tests/source/chains-visual.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/fcd2021583a9a708d8333b8dc3c8b0e8ac55380d/tests%2Fsource%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd2021583a9a708d8333b8dc3c8b0e8ac55380d/tests%2Fsource%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains-visual.rs?ref=fcd2021583a9a708d8333b8dc3c8b0e8ac55380d", "patch": "@@ -0,0 +1,116 @@\n+// rustfmt-chain_indent: Visual\n+// rustfmt-chain_base_indent: Visual\n+// Test chain formatting.\n+\n+fn main() {\n+    // Don't put chains on a single line if it wasn't so in source.\n+    let a = b .c\n+    .d.1\n+                .foo(|x| x + 1);\n+\n+    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc\n+                       .ddddddddddddddddddddddddddd();\n+\n+    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc.ddddddddddddddddddddddddddd.eeeeeeee();\n+\n+    // Test case where first chain element isn't a path, but is shorter than\n+    // the size of a tab.\n+    x()\n+        .y(|| match cond() { true => (), false => () });\n+\n+    loong_func()\n+        .quux(move || if true {\n+            1\n+        } else {\n+            2\n+        });\n+\n+    some_fuuuuuuuuunction()\n+        .method_call_a(aaaaa, bbbbb, |c| {\n+            let x = c;\n+            x\n+        });\n+\n+    some_fuuuuuuuuunction().method_call_a(aaaaa, bbbbb, |c| {\n+        let x = c;\n+        x\n+    }).method_call_b(aaaaa, bbbbb, |c| {\n+        let x = c;\n+        x\n+    });\n+\n+    fffffffffffffffffffffffffffffffffff(a,\n+                                        {\n+                                            SCRIPT_TASK_ROOT\n+                                            .with(|root| {\n+                                                *root.borrow_mut()  =   Some(&script_task);\n+                                            });\n+                                        });                                        \n+\n+    let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum = xxxxxxx\n+        .map(|x| x + 5)\n+        .map(|x| x / 2)\n+        .fold(0, |acc, x| acc + x);\n+\n+    aaaaaaaaaaaaaaaa.map(|x| {\n+                         x += 1;\n+                         x\n+                     }).filter(some_mod::some_filter)\n+}\n+\n+fn floaters() {\n+    let z = Foo {\n+        field1: val1,\n+        field2: val2,\n+    };\n+\n+    let x = Foo {\n+        field1: val1,\n+        field2: val2,\n+    }.method_call().method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+                .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                    Some(d) => d as usize - 1,\n+                    None => return Err(\"bad param number\".to_owned()),\n+                }]\n+                               .clone());\n+            }\n+        }\n+    }\n+\n+    if cond { some(); } else { none(); }\n+        .bar()\n+        .baz();\n+\n+    Foo { x: val } .baz(|| { /*force multiline    */    }) .quux(); \n+\n+    Foo { y: i_am_multi_line, z: ok }\n+        .baz(|| {\n+            // force multiline\n+        })\n+        .quux(); \n+\n+    a + match x { true => \"yay!\", false => \"boo!\" }.bar()\n+}\n+\n+fn is_replaced_content() -> bool {\n+    constellat.send(ConstellationMsg::ViewportConstrained(\n+            self.id, constraints)).unwrap();\n+}\n+\n+fn issue587() {\n+    a.b::<()>(c);\n+\n+    std::mem::transmute(dl.symbol::<()>(\"init\").unwrap())\n+}"}, {"sha": "d17a98e2ada70ea48cb8b605ee32ad8390e3d39b", "filename": "tests/target/chains-visual.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/fcd2021583a9a708d8333b8dc3c8b0e8ac55380d/tests%2Ftarget%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd2021583a9a708d8333b8dc3c8b0e8ac55380d/tests%2Ftarget%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-visual.rs?ref=fcd2021583a9a708d8333b8dc3c8b0e8ac55380d", "patch": "@@ -0,0 +1,138 @@\n+// rustfmt-chain_indent: Visual\n+// rustfmt-chain_base_indent: Visual\n+// Test chain formatting.\n+\n+fn main() {\n+    // Don't put chains on a single line if it wasn't so in source.\n+    let a = b.c\n+             .d\n+             .1\n+             .foo(|x| x + 1);\n+\n+    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc\n+                       .ddddddddddddddddddddddddddd();\n+\n+    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc\n+                       .ddddddddddddddddddddddddddd\n+                       .eeeeeeee();\n+\n+    // Test case where first chain element isn't a path, but is shorter than\n+    // the size of a tab.\n+    x().y(|| match cond() {\n+        true => (),\n+        false => (),\n+    });\n+\n+    loong_func().quux(move || if true {\n+        1\n+    } else {\n+        2\n+    });\n+\n+    some_fuuuuuuuuunction().method_call_a(aaaaa, bbbbb, |c| {\n+        let x = c;\n+        x\n+    });\n+\n+    some_fuuuuuuuuunction()\n+        .method_call_a(aaaaa, bbbbb, |c| {\n+            let x = c;\n+            x\n+        })\n+        .method_call_b(aaaaa, bbbbb, |c| {\n+            let x = c;\n+            x\n+        });\n+\n+    fffffffffffffffffffffffffffffffffff(a, {\n+        SCRIPT_TASK_ROOT.with(|root| {\n+            *root.borrow_mut() = Some(&script_task);\n+        });\n+    });\n+\n+    let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum = xxxxxxx.map(|x| x + 5)\n+                                                                          .map(|x| x / 2)\n+                                                                          .fold(0,\n+                                                                                |acc, x| acc + x);\n+\n+    aaaaaaaaaaaaaaaa.map(|x| {\n+                        x += 1;\n+                        x\n+                    })\n+                    .filter(some_mod::some_filter)\n+}\n+\n+fn floaters() {\n+    let z = Foo {\n+        field1: val1,\n+        field2: val2,\n+    };\n+\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call()\n+            .method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+            .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                               Some(d) => d as usize - 1,\n+                               None => return Err(\"bad param number\".to_owned()),\n+                           }]\n+                           .clone());\n+            }\n+        }\n+    }\n+\n+    if cond {\n+        some();\n+    } else {\n+        none();\n+    }\n+    .bar()\n+    .baz();\n+\n+    Foo { x: val }\n+        .baz(|| {\n+            // force multiline\n+        })\n+        .quux();\n+\n+    Foo {\n+        y: i_am_multi_line,\n+        z: ok,\n+    }\n+    .baz(|| {\n+        // force multiline\n+    })\n+    .quux();\n+\n+    a +\n+    match x {\n+        true => \"yay!\",\n+        false => \"boo!\",\n+    }\n+    .bar()\n+}\n+\n+fn is_replaced_content() -> bool {\n+    constellat.send(ConstellationMsg::ViewportConstrained(self.id, constraints))\n+              .unwrap();\n+}\n+\n+fn issue587() {\n+    a.b::<()>(c);\n+\n+    std::mem::transmute(dl.symbol::<()>(\"init\").unwrap())\n+}"}]}