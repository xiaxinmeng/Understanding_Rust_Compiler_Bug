{"sha": "45ac2b2edec05e417124ebfc2e61ec2a5117f4d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YWMyYjJlZGVjMDVlNDE3MTI0ZWJmYzJlNjFlYzJhNTExN2Y0ZDU=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-04T05:53:34Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-12T08:05:00Z"}, "message": "Code style adjustments", "tree": {"sha": "6dd6edcff72d13f2c0de50a529563b0a514a8ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dd6edcff72d13f2c0de50a529563b0a514a8ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5", "html_url": "https://github.com/rust-lang/rust/commit/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfbee8d3a35f81e710b17e48b8018cd6076a8133", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfbee8d3a35f81e710b17e48b8018cd6076a8133", "html_url": "https://github.com/rust-lang/rust/commit/cfbee8d3a35f81e710b17e48b8018cd6076a8133"}], "stats": {"total": 96, "additions": 88, "deletions": 8}, "files": [{"sha": "3a95f1b82a1013a21b2f682150d433355df6efe8", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=45ac2b2edec05e417124ebfc2e61ec2a5117f4d5", "patch": "@@ -19,7 +19,7 @@ use hir_expand::{\n };\n use syntax::{\n     ast::{self, NameOwner},\n-    AstPtr,\n+    AstNode, AstPtr,\n };\n \n use crate::{\n@@ -259,6 +259,21 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n                 if let Some(expr) = source_ptr.value.as_ref().left() {\n                     let root = source_ptr.file_syntax(db.upcast());\n                     if let ast::Pat::IdentPat(ident_pat) = expr.to_node(&root) {\n+                        let parent = match ident_pat.syntax().parent() {\n+                            Some(parent) => parent,\n+                            None => continue,\n+                        };\n+\n+                        // We have to check that it's either `let var = ...` or `Variant(_) @  var` statement,\n+                        // because e.g. match arms are patterns as well.\n+                        // In other words, we check that it's a named variable binding.\n+                        if !ast::LetStmt::cast(parent.clone()).is_some()\n+                            && !ast::IdentPat::cast(parent).is_some()\n+                        {\n+                            // This pattern is not an actual variable declaration, e.g. `Some(val) => {..}` match arm.\n+                            continue;\n+                        }\n+\n                         let diagnostic = IncorrectCase {\n                             file: source_ptr.file_id,\n                             ident_type: \"Variable\".to_string(),\n@@ -663,7 +678,7 @@ fn foo2(ok_param: &str, CAPS_PARAM: u8) {}\n             r#\"\n fn foo() {\n     let SOME_VALUE = 10;\n-     // ^^^^^^^^^^ Variable `SOME_VALUE` should have a snake_case name, e.g. `some_value`\n+     // ^^^^^^^^^^ Variable `SOME_VALUE` should have snake_case name, e.g. `some_value`\n     let AnotherValue = 20;\n      // ^^^^^^^^^^^^ Variable `AnotherValue` should have snake_case name, e.g. `another_value`\n }\n@@ -758,6 +773,39 @@ impl someStruct {\n          // ^^^^^^^^^^^^^^^ Variable `WHY_VAR_IS_CAPS` should have snake_case name, e.g. `why_var_is_caps`\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_diagnostic_for_enum_varinats() {\n+        check_diagnostics(\n+            r#\"\n+enum Option { Some, None }\n+\n+fn main() {\n+    match Option::None {\n+        None => (),\n+        Some => (),\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn non_let_bind() {\n+        check_diagnostics(\n+            r#\"\n+enum Option { Some, None }\n+\n+fn main() {\n+    match Option::None {\n+        None @ SOME_VAR => (),\n+            // ^^^^^^^^ Variable `SOME_VAR` should have snake_case name, e.g. `some_var`\n+        Some => (),\n+    }\n+}\n \"#,\n         );\n     }"}, {"sha": "8f70c5e846dae5ce390ff330e5778e98e776298b", "filename": "crates/hir_ty/src/diagnostics/decl_check/str_helpers.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fstr_helpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fstr_helpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fstr_helpers.rs?ref=45ac2b2edec05e417124ebfc2e61ec2a5117f4d5", "patch": "@@ -1,3 +1,6 @@\n+//! Functions for string case manipulation, such as detecting the identifier case,\n+//! and converting it into appropriate form.\n+\n #[derive(Debug)]\n enum DetectedCase {\n     LowerCamelCase,\n@@ -44,6 +47,8 @@ fn detect_case(ident: &str) -> DetectedCase {\n     }\n }\n \n+/// Converts an identifier to an UpperCamelCase form.\n+/// Returns `None` if the string is already is UpperCamelCase.\n pub fn to_camel_case(ident: &str) -> Option<String> {\n     let detected_case = detect_case(ident);\n \n@@ -87,9 +92,17 @@ pub fn to_camel_case(ident: &str) -> Option<String> {\n         }\n     }\n \n-    Some(output)\n+    if output == ident {\n+        // While we didn't detect the correct case at the beginning, there\n+        // may be special cases: e.g. `A` is both valid CamelCase and UPPER_SNAKE_CASE.\n+        None\n+    } else {\n+        Some(output)\n+    }\n }\n \n+/// Converts an identifier to a lower_snake_case form.\n+/// Returns `None` if the string is already is lower_snake_case.\n pub fn to_lower_snake_case(ident: &str) -> Option<String> {\n     // First, assume that it's UPPER_SNAKE_CASE.\n     match detect_case(ident) {\n@@ -102,9 +115,18 @@ pub fn to_lower_snake_case(ident: &str) -> Option<String> {\n \n     // Otherwise, assume that it's CamelCase.\n     let lower_snake_case = stdx::to_lower_snake_case(ident);\n-    Some(lower_snake_case)\n+\n+    if lower_snake_case == ident {\n+        // While we didn't detect the correct case at the beginning, there\n+        // may be special cases: e.g. `a` is both valid camelCase and snake_case.\n+        None\n+    } else {\n+        Some(lower_snake_case)\n+    }\n }\n \n+/// Converts an identifier to an UPPER_SNAKE_CASE form.\n+/// Returns `None` if the string is already is UPPER_SNAKE_CASE.\n pub fn to_upper_snake_case(ident: &str) -> Option<String> {\n     match detect_case(ident) {\n         DetectedCase::UpperSnakeCase => return None,\n@@ -117,7 +139,14 @@ pub fn to_upper_snake_case(ident: &str) -> Option<String> {\n     // Normalize the string from whatever form it's in currently, and then just make it uppercase.\n     let upper_snake_case =\n         stdx::to_lower_snake_case(ident).chars().map(|c| c.to_ascii_uppercase()).collect();\n-    Some(upper_snake_case)\n+\n+    if upper_snake_case == ident {\n+        // While we didn't detect the correct case at the beginning, there\n+        // may be special cases: e.g. `A` is both valid CamelCase and UPPER_SNAKE_CASE.\n+        None\n+    } else {\n+        Some(upper_snake_case)\n+    }\n }\n \n #[cfg(test)]\n@@ -139,6 +168,7 @@ mod tests {\n         check(to_lower_snake_case, \"Weird_Case\", expect![[\"weird_case\"]]);\n         check(to_lower_snake_case, \"CamelCase\", expect![[\"camel_case\"]]);\n         check(to_lower_snake_case, \"lowerCamelCase\", expect![[\"lower_camel_case\"]]);\n+        check(to_lower_snake_case, \"a\", expect![[\"\"]]);\n     }\n \n     #[test]\n@@ -151,6 +181,7 @@ mod tests {\n         check(to_camel_case, \"UPPER_SNAKE_CASE\", expect![[\"UpperSnakeCase\"]]);\n         check(to_camel_case, \"Weird_Case\", expect![[\"WeirdCase\"]]);\n         check(to_camel_case, \"name\", expect![[\"Name\"]]);\n+        check(to_camel_case, \"A\", expect![[\"\"]]);\n     }\n \n     #[test]\n@@ -160,5 +191,6 @@ mod tests {\n         check(to_upper_snake_case, \"Weird_Case\", expect![[\"WEIRD_CASE\"]]);\n         check(to_upper_snake_case, \"CamelCase\", expect![[\"CAMEL_CASE\"]]);\n         check(to_upper_snake_case, \"lowerCamelCase\", expect![[\"LOWER_CAMEL_CASE\"]]);\n+        check(to_upper_snake_case, \"A\", expect![[\"\"]]);\n     }\n }"}, {"sha": "21a121aad7e7844a65d90e0745cb18aa6ec87ff9", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=45ac2b2edec05e417124ebfc2e61ec2a5117f4d5", "patch": "@@ -190,13 +190,13 @@ struct Ty {\n     a: u8,\n }\n \n-static mut static_mut: Ty = Ty { a: 0 };\n+static mut STATIC_MUT: Ty = Ty { a: 0 };\n \n fn main() {\n-    let x = static_mut.a;\n+    let x = STATIC_MUT.a;\n           //^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n     unsafe {\n-        let x = static_mut.a;\n+        let x = STATIC_MUT.a;\n     }\n }\n \"#,"}]}