{"sha": "c66b508137c296699bae56fb40bc180c61dfa175", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NmI1MDgxMzdjMjk2Njk5YmFlNTZmYjQwYmMxODBjNjFkZmExNzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-22T18:57:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-22T18:57:48Z"}, "message": "Rollup merge of #66575 - Mark-Simulacrum:no-uii, r=petrochenkov\n\nRemove pretty printing of specific nodes in AST\n\nThe ability to print a specific item as identified by NodeId or path\nseems not particularly useful, and certainly carries quite a bit of\ncomplexity with it.\n\nThis is intended to simplify our CLI parsing a bit and remove a\nnon-uncomplicated piece of it; I largely did this to remove the\ndependency on NodeId from librustc/session but it's not really\nnecessary to do so in this invasive a way. The alternative is\nmoving it to librustc_interface or driver, probably.", "tree": {"sha": "838d0465ed0d893b8e6019f28f8378137fa8bc22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/838d0465ed0d893b8e6019f28f8378137fa8bc22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c66b508137c296699bae56fb40bc180c61dfa175", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2C+sCRBK7hj4Ov3rIwAAdHIIAGPqu+M6KUrkhwAwhVBIAo4S\nFbFx23h855JlQSRJaFCwsdEHBs4sc//4dUOE14kbtHKddiuix2t81Opu9vAS5Qtv\nknYfGZUH2hb9+2+y7MSARtZilP2cxTNP+Oi7751bcNaq+7nJPOCC9FeVitQKkUnS\nDD/6SD5ASwQPhOpmTp9FDO3tNPOz6dsjISAlzLae6tapYHkYCO4qWzntup9WUcOB\nMf8mBkjpscZD8Cz8wF4lUpW9TJzggskbquyluJxQuP0kK6JzMEsW6BJV/wzLXGlW\namkzXVytWD4kI9/FazwJUotN2QsND5hbxc2t3GQbI0tBNH+/z3BLoQA2rDz9ZOs=\n=7ofD\n-----END PGP SIGNATURE-----\n", "payload": "tree 838d0465ed0d893b8e6019f28f8378137fa8bc22\nparent afc78e19dd23260613c4c734650b5068c913b385\nparent 7ec20dd31ddf10e9d8b932a27cca17a056406e07\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574449068 +0100\ncommitter GitHub <noreply@github.com> 1574449068 +0100\n\nRollup merge of #66575 - Mark-Simulacrum:no-uii, r=petrochenkov\n\nRemove pretty printing of specific nodes in AST\n\nThe ability to print a specific item as identified by NodeId or path\nseems not particularly useful, and certainly carries quite a bit of\ncomplexity with it.\n\nThis is intended to simplify our CLI parsing a bit and remove a\nnon-uncomplicated piece of it; I largely did this to remove the\ndependency on NodeId from librustc/session but it's not really\nnecessary to do so in this invasive a way. The alternative is\nmoving it to librustc_interface or driver, probably.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c66b508137c296699bae56fb40bc180c61dfa175", "html_url": "https://github.com/rust-lang/rust/commit/c66b508137c296699bae56fb40bc180c61dfa175", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c66b508137c296699bae56fb40bc180c61dfa175/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afc78e19dd23260613c4c734650b5068c913b385", "url": "https://api.github.com/repos/rust-lang/rust/commits/afc78e19dd23260613c4c734650b5068c913b385", "html_url": "https://github.com/rust-lang/rust/commit/afc78e19dd23260613c4c734650b5068c913b385"}, {"sha": "7ec20dd31ddf10e9d8b932a27cca17a056406e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec20dd31ddf10e9d8b932a27cca17a056406e07", "html_url": "https://github.com/rust-lang/rust/commit/7ec20dd31ddf10e9d8b932a27cca17a056406e07"}], "stats": {"total": 232, "additions": 17, "deletions": 215}, "files": [{"sha": "2b1dfcaf68cec9f190878d4c57d9f457451c6353", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 7, "deletions": 110, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/c66b508137c296699bae56fb40bc180c61dfa175/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66b508137c296699bae56fb40bc180c61dfa175/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c66b508137c296699bae56fb40bc180c61dfa175", "patch": "@@ -1,13 +1,10 @@\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command-line options.\n \n-// ignore-tidy-filelength\n-\n use crate::lint;\n use crate::middle::cstore;\n use crate::session::{early_error, early_warn, Session};\n use crate::session::search_paths::SearchPath;\n-use crate::hir::map as hir_map;\n \n use rustc_data_structures::fx::FxHashSet;\n \n@@ -444,7 +441,7 @@ top_level_options!(\n         // by the compiler.\n         json_artifact_notifications: bool [TRACKED],\n \n-        pretty: Option<(PpMode, Option<UserIdentifiedItem>)> [UNTRACKED],\n+        pretty: Option<PpMode> [UNTRACKED],\n     }\n );\n \n@@ -2562,7 +2559,7 @@ fn parse_pretty(\n     matches: &getopts::Matches,\n     debugging_opts: &DebuggingOptions,\n     efmt: ErrorOutputType,\n-) -> Option<(PpMode, Option<UserIdentifiedItem>)> {\n+) -> Option<PpMode> {\n     let pretty = if debugging_opts.unstable_options {\n         matches.opt_default(\"pretty\", \"normal\").map(|a| {\n             // stable pretty-print variants only\n@@ -2585,13 +2582,10 @@ fn parse_pretty(\n         efmt: ErrorOutputType,\n         name: &str,\n         extended: bool,\n-    ) -> (PpMode, Option<UserIdentifiedItem>) {\n+    ) -> PpMode {\n         use PpMode::*;\n         use PpSourceMode::*;\n-        let mut split = name.splitn(2, '=');\n-        let first = split.next().unwrap();\n-        let opt_second = split.next();\n-        let first = match (first, extended) {\n+        let first = match (name, extended) {\n             (\"normal\", _) => PpmSource(PpmNormal),\n             (\"identified\", _) => PpmSource(PpmIdentified),\n             (\"everybody_loops\", true) => PpmSource(PpmEveryBodyLoops),\n@@ -2619,8 +2613,7 @@ fn parse_pretty(\n                 }\n             }\n         };\n-        let opt_second = opt_second.and_then(|s| s.parse::<UserIdentifiedItem>().ok());\n-        (first, opt_second)\n+        first\n     }\n }\n \n@@ -2752,13 +2745,13 @@ pub enum PpMode {\n }\n \n impl PpMode {\n-    pub fn needs_ast_map(&self, opt_uii: &Option<UserIdentifiedItem>) -> bool {\n+    pub fn needs_ast_map(&self) -> bool {\n         use PpMode::*;\n         use PpSourceMode::*;\n         match *self {\n             PpmSource(PpmNormal) |\n             PpmSource(PpmEveryBodyLoops) |\n-            PpmSource(PpmIdentified) => opt_uii.is_some(),\n+            PpmSource(PpmIdentified) => false,\n \n             PpmSource(PpmExpanded) |\n             PpmSource(PpmExpandedIdentified) |\n@@ -2780,102 +2773,6 @@ impl PpMode {\n     }\n }\n \n-#[derive(Clone, Debug)]\n-pub enum UserIdentifiedItem {\n-    ItemViaNode(ast::NodeId),\n-    ItemViaPath(Vec<String>),\n-}\n-\n-impl FromStr for UserIdentifiedItem {\n-    type Err = ();\n-    fn from_str(s: &str) -> Result<UserIdentifiedItem, ()> {\n-        use UserIdentifiedItem::*;\n-        Ok(s.parse()\n-            .map(ast::NodeId::from_u32)\n-            .map(ItemViaNode)\n-            .unwrap_or_else(|_| ItemViaPath(s.split(\"::\").map(|s| s.to_string()).collect())))\n-    }\n-}\n-\n-pub enum NodesMatchingUII<'a> {\n-    NodesMatchingDirect(std::option::IntoIter<ast::NodeId>),\n-    NodesMatchingSuffix(Box<dyn Iterator<Item = ast::NodeId> + 'a>),\n-}\n-\n-impl<'a> Iterator for NodesMatchingUII<'a> {\n-    type Item = ast::NodeId;\n-\n-    fn next(&mut self) -> Option<ast::NodeId> {\n-        use NodesMatchingUII::*;\n-        match self {\n-            &mut NodesMatchingDirect(ref mut iter) => iter.next(),\n-            &mut NodesMatchingSuffix(ref mut iter) => iter.next(),\n-        }\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        use NodesMatchingUII::*;\n-        match self {\n-            &NodesMatchingDirect(ref iter) => iter.size_hint(),\n-            &NodesMatchingSuffix(ref iter) => iter.size_hint(),\n-        }\n-    }\n-}\n-\n-impl UserIdentifiedItem {\n-    pub fn reconstructed_input(&self) -> String {\n-        use UserIdentifiedItem::*;\n-        match *self {\n-            ItemViaNode(node_id) => node_id.to_string(),\n-            ItemViaPath(ref parts) => parts.join(\"::\"),\n-        }\n-    }\n-\n-    pub fn all_matching_node_ids<'a, 'hir>(&'a self,\n-                                       map: &'a hir_map::Map<'hir>)\n-                                       -> NodesMatchingUII<'a> {\n-        use UserIdentifiedItem::*;\n-        use NodesMatchingUII::*;\n-        match *self {\n-            ItemViaNode(node_id) => NodesMatchingDirect(Some(node_id).into_iter()),\n-            ItemViaPath(ref parts) => {\n-                NodesMatchingSuffix(Box::new(map.nodes_matching_suffix(&parts)))\n-            }\n-        }\n-    }\n-\n-    pub fn to_one_node_id(self,\n-                      user_option: &str,\n-                      sess: &Session,\n-                      map: &hir_map::Map<'_>)\n-                      -> ast::NodeId {\n-        let fail_because = |is_wrong_because| -> ast::NodeId {\n-            let message = format!(\"{} needs NodeId (int) or unique path suffix (b::c::d); got \\\n-                                   {}, which {}\",\n-                                  user_option,\n-                                  self.reconstructed_input(),\n-                                  is_wrong_because);\n-            sess.fatal(&message)\n-        };\n-\n-        let mut saw_node = ast::DUMMY_NODE_ID;\n-        let mut seen = 0;\n-        for node in self.all_matching_node_ids(map) {\n-            saw_node = node;\n-            seen += 1;\n-            if seen > 1 {\n-                fail_because(\"does not resolve uniquely\");\n-            }\n-        }\n-        if seen == 0 {\n-            fail_because(\"does not resolve to any item\");\n-        }\n-\n-        assert!(seen == 1);\n-        return saw_node;\n-    }\n-}\n-\n /// Command-line arguments passed to the compiler have to be incorporated with\n /// the dependency tracking system for incremental compilation. This module\n /// provides some utilities to make this more convenient."}, {"sha": "ffca2bbc869b2e9f5cc83cc86913ba1ed2d62453", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c66b508137c296699bae56fb40bc180c61dfa175/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66b508137c296699bae56fb40bc180c61dfa175/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c66b508137c296699bae56fb40bc180c61dfa175", "patch": "@@ -285,16 +285,15 @@ pub fn run_compiler(\n \n         compiler.parse()?;\n \n-        if let Some((ppm, opt_uii)) = &sess.opts.pretty {\n-            if ppm.needs_ast_map(&opt_uii) {\n+        if let Some(ppm) = &sess.opts.pretty {\n+            if ppm.needs_ast_map() {\n                 compiler.global_ctxt()?.peek_mut().enter(|tcx| {\n                     let expanded_crate = compiler.expansion()?.take().0;\n                     pretty::print_after_hir_lowering(\n                         tcx,\n                         compiler.input(),\n                         &expanded_crate,\n                         *ppm,\n-                        opt_uii.clone(),\n                         compiler.output_file().as_ref().map(|p| &**p),\n                     );\n                     Ok(())"}, {"sha": "11603f6d9c121c10cfe739747fe2d92cde08e64f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 7, "deletions": 58, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c66b508137c296699bae56fb40bc180c61dfa175/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66b508137c296699bae56fb40bc180c61dfa175/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=c66b508137c296699bae56fb40bc180c61dfa175", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::map as hir_map;\n use rustc::hir::print as pprust_hir;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::session::Session;\n-use rustc::session::config::{PpMode, PpSourceMode, UserIdentifiedItem, Input};\n+use rustc::session::config::{PpMode, PpSourceMode, Input};\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_mir::util::{write_mir_pretty, write_mir_graphviz};\n@@ -19,7 +19,6 @@ use std::fs::File;\n use std::io::Write;\n use std::path::Path;\n \n-pub use self::UserIdentifiedItem::*;\n pub use self::PpSourceMode::*;\n pub use self::PpMode::*;\n use crate::abort_on_err;\n@@ -444,14 +443,12 @@ pub fn print_after_hir_lowering<'tcx>(\n     input: &Input,\n     krate: &ast::Crate,\n     ppm: PpMode,\n-    opt_uii: Option<UserIdentifiedItem>,\n     ofile: Option<&Path>,\n ) {\n     if ppm.needs_analysis() {\n         abort_on_err(print_with_analysis(\n             tcx,\n             ppm,\n-            opt_uii,\n             ofile\n         ), tcx.sess);\n         return;\n@@ -461,8 +458,8 @@ pub fn print_after_hir_lowering<'tcx>(\n \n     let mut out = String::new();\n \n-    match (ppm, opt_uii) {\n-            (PpmSource(s), _) => {\n+    match ppm {\n+            PpmSource(s) => {\n                 // Silently ignores an identified node.\n                 let out = &mut out;\n                 let src = src.clone();\n@@ -479,7 +476,7 @@ pub fn print_after_hir_lowering<'tcx>(\n                 })\n             }\n \n-            (PpmHir(s), None) => {\n+            PpmHir(s) => {\n                 let out = &mut out;\n                 let src = src.clone();\n                 call_with_pp_support_hir(&s, tcx, move |annotation, krate| {\n@@ -494,52 +491,14 @@ pub fn print_after_hir_lowering<'tcx>(\n                 })\n             }\n \n-            (PpmHirTree(s), None) => {\n+            PpmHirTree(s) => {\n                 let out = &mut out;\n                 call_with_pp_support_hir(&s, tcx, move |_annotation, krate| {\n                     debug!(\"pretty printing source code {:?}\", s);\n                     *out = format!(\"{:#?}\", krate);\n                 });\n             }\n \n-            (PpmHir(s), Some(uii)) => {\n-                let out = &mut out;\n-                let src = src.clone();\n-                call_with_pp_support_hir(&s, tcx, move |annotation, _| {\n-                    debug!(\"pretty printing source code {:?}\", s);\n-                    let sess = annotation.sess();\n-                    let hir_map = annotation.hir_map().expect(\"-Z unpretty missing HIR map\");\n-                    let mut pp_state = pprust_hir::State::new_from_input(sess.source_map(),\n-                                                                         &sess.parse_sess,\n-                                                                         src_name,\n-                                                                         src,\n-                                                                         annotation.pp_ann());\n-                    for node_id in uii.all_matching_node_ids(hir_map) {\n-                        let hir_id = tcx.hir().node_to_hir_id(node_id);\n-                        let node = hir_map.get(hir_id);\n-                        pp_state.print_node(node);\n-                        pp_state.s.space();\n-                        let path = annotation.node_path(hir_id)\n-                            .expect(\"-Z unpretty missing node paths\");\n-                        pp_state.synth_comment(path);\n-                        pp_state.s.hardbreak();\n-                    }\n-                    *out = pp_state.s.eof();\n-                })\n-            }\n-\n-            (PpmHirTree(s), Some(uii)) => {\n-                let out = &mut out;\n-                call_with_pp_support_hir(&s, tcx, move |_annotation, _krate| {\n-                    debug!(\"pretty printing source code {:?}\", s);\n-                    for node_id in uii.all_matching_node_ids(tcx.hir()) {\n-                        let hir_id = tcx.hir().node_to_hir_id(node_id);\n-                        let node = tcx.hir().get(hir_id);\n-                        out.push_str(&format!(\"{:#?}\", node));\n-                    }\n-                })\n-            }\n-\n             _ => unreachable!(),\n         }\n \n@@ -553,27 +512,17 @@ pub fn print_after_hir_lowering<'tcx>(\n fn print_with_analysis(\n     tcx: TyCtxt<'_>,\n     ppm: PpMode,\n-    uii: Option<UserIdentifiedItem>,\n     ofile: Option<&Path>,\n ) -> Result<(), ErrorReported> {\n-    let nodeid = if let Some(uii) = uii {\n-        debug!(\"pretty printing for {:?}\", uii);\n-        Some(uii.to_one_node_id(\"-Z unpretty\", tcx.sess, tcx.hir()))\n-    } else {\n-        debug!(\"pretty printing for whole crate\");\n-        None\n-    };\n-\n     let mut out = Vec::new();\n \n     tcx.analysis(LOCAL_CRATE)?;\n \n     match ppm {\n         PpmMir | PpmMirCFG => {\n-            let def_id = nodeid.map(|nid| tcx.hir().local_def_id_from_node_id(nid));\n             match ppm {\n-                PpmMir => write_mir_pretty(tcx, def_id, &mut out),\n-                PpmMirCFG => write_mir_graphviz(tcx, def_id, &mut out),\n+                PpmMir => write_mir_pretty(tcx, None, &mut out),\n+                PpmMirCFG => write_mir_graphviz(tcx, None, &mut out),\n                 _ => unreachable!(),\n             }\n         }"}, {"sha": "36bd8345e4359a9666ff30d451d99a043e734a03", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c66b508137c296699bae56fb40bc180c61dfa175/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66b508137c296699bae56fb40bc180c61dfa175/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=c66b508137c296699bae56fb40bc180c61dfa175", "patch": "@@ -388,7 +388,7 @@ fn configure_and_expand_inner<'a>(\n     // If we're actually rustdoc then there's no need to actually compile\n     // anything, so switch everything to just looping\n     let mut should_loop = sess.opts.actually_rustdoc;\n-    if let Some((PpMode::PpmSource(PpSourceMode::PpmEveryBodyLoops), _)) = sess.opts.pretty {\n+    if let Some(PpMode::PpmSource(PpSourceMode::PpmEveryBodyLoops)) = sess.opts.pretty {\n         should_loop |= true;\n     }\n     if should_loop {"}, {"sha": "899457fc7486e5cb9d1689a7d2ba20467782c0a8", "filename": "src/test/run-make-fulldeps/pretty-print-path-suffix/Makefile", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afc78e19dd23260613c4c734650b5068c913b385/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/afc78e19dd23260613c4c734650b5068c913b385/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2FMakefile?ref=afc78e19dd23260613c4c734650b5068c913b385", "patch": "@@ -1,9 +0,0 @@\n--include ../tools.mk\n-\n-all:\n-\t$(RUSTC) -o $(TMPDIR)/foo.out -Z unpretty=hir=foo input.rs\n-\t$(RUSTC) -o $(TMPDIR)/nest_foo.out -Z unpretty=hir=nest::foo input.rs\n-\t$(RUSTC) -o $(TMPDIR)/foo_method.out -Z unpretty=hir=foo_method input.rs\n-\tdiff -u $(TMPDIR)/foo.out foo.pp\n-\tdiff -u $(TMPDIR)/nest_foo.out nest_foo.pp\n-\tdiff -u $(TMPDIR)/foo_method.out foo_method.pp"}, {"sha": "fa754af95600559c4e87e1aed494413b78af9ee3", "filename": "src/test/run-make-fulldeps/pretty-print-path-suffix/foo.pp", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afc78e19dd23260613c4c734650b5068c913b385/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Ffoo.pp", "raw_url": "https://github.com/rust-lang/rust/raw/afc78e19dd23260613c4c734650b5068c913b385/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Ffoo.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Ffoo.pp?ref=afc78e19dd23260613c4c734650b5068c913b385", "patch": "@@ -1,5 +0,0 @@\n-\n-pub fn foo() -> i32 { 45 } /* foo */\n-\n-\n-pub fn foo() -> &'static str { \"i am a foo.\" } /* nest::foo */"}, {"sha": "2408c3a208fdda732b0456394e399e019ed92bfe", "filename": "src/test/run-make-fulldeps/pretty-print-path-suffix/foo_method.pp", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afc78e19dd23260613c4c734650b5068c913b385/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Ffoo_method.pp", "raw_url": "https://github.com/rust-lang/rust/raw/afc78e19dd23260613c4c734650b5068c913b385/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Ffoo_method.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Ffoo_method.pp?ref=afc78e19dd23260613c4c734650b5068c913b385", "patch": "@@ -1,7 +0,0 @@\n-\n-\n-\n-\n-fn foo_method(self: &Self)\n- -> &'static str { return \"i am very similar to foo.\"; } /*\n-nest::{{impl}}::foo_method */"}, {"sha": "d075c46d8b0034d767519ec16585c2df6b1bd0d2", "filename": "src/test/run-make-fulldeps/pretty-print-path-suffix/input.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/afc78e19dd23260613c4c734650b5068c913b385/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc78e19dd23260613c4c734650b5068c913b385/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Finput.rs?ref=afc78e19dd23260613c4c734650b5068c913b385", "patch": "@@ -1,18 +0,0 @@\n-#![crate_type=\"lib\"]\n-\n-pub fn\n-foo() -> i32\n-{ 45 }\n-\n-pub fn bar() -> &'static str { \"i am not a foo.\" }\n-\n-pub mod nest {\n-    pub fn foo() -> &'static str { \"i am a foo.\" }\n-\n-    struct S;\n-    impl S {\n-        fn foo_method(&self) -> &'static str {\n-            return \"i am very similar to foo.\";\n-        }\n-    }\n-}"}, {"sha": "0be392976da1753c4952a6ddd8548bcdad3f5d07", "filename": "src/test/run-make-fulldeps/pretty-print-path-suffix/nest_foo.pp", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afc78e19dd23260613c4c734650b5068c913b385/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Fnest_foo.pp", "raw_url": "https://github.com/rust-lang/rust/raw/afc78e19dd23260613c4c734650b5068c913b385/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Fnest_foo.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-path-suffix%2Fnest_foo.pp?ref=afc78e19dd23260613c4c734650b5068c913b385", "patch": "@@ -1,4 +0,0 @@\n-\n-\n-\n-pub fn foo() -> &'static str { \"i am a foo.\" } /* nest::foo */"}]}