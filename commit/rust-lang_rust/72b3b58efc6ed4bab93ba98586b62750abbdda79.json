{"sha": "72b3b58efc6ed4bab93ba98586b62750abbdda79", "node_id": "C_kwDOAAsO6NoAKDcyYjNiNThlZmM2ZWQ0YmFiOTNiYTk4NTg2YjYyNzUwYWJiZGRhNzk", "commit": {"author": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-06-11T15:44:28Z"}, "committer": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-06-15T09:59:13Z"}, "message": "Extend `unused_must_use` to cover block exprs", "tree": {"sha": "e69ee17e3d202a7a150e4e95c16c9bff6fe637bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e69ee17e3d202a7a150e4e95c16c9bff6fe637bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72b3b58efc6ed4bab93ba98586b62750abbdda79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEze4qXcfh0ileWqZTxf1dMgFP20cFAmSK4PIACgkQxf1dMgFP\n20df8hAAidsPprvkOU376Ilv8b+Wc7QhavrYaPSvZkIZbkbF9gXxdXFvbNJhEWSv\nEPWn3qGgbzPdj2wiGzXI0/+9x9z9ozR6hFFqoSOuIOaZbMekEF9lRjPBXIN+s07l\n2dTPzM3LQVUtNQlaIJ7qcTj00YFy2ctyi4EQRxAT7u8NSGCM6fEw8+krqD2/H8nx\nF9lswuetsGzfJpwmpenRvztEeiTNRjvejcvWyjCc2zX5kdJxQmR5y1z+1buR4bZE\nxm7BMyx32mhL2NopPNP8U2SMAmO0b9u3pDdL0Q7ZoOnOArKxuqrjGYOUgO3ib8i2\n9dNUMkpGRownnJx1br0LLfm84mv8vv/nY+K7r/QZbKc6qoYHi1Wbok0iM6TfNhvU\n4w8n8mAns/msukU+iGsywgo1qxWydszW410AqgOh8dMGyvFNjYam1/N6biiybglT\nSO7t3o2lKN00u/Q4ltdrLu/q4r+BeL6lm1esbGxibCv1/JJahH+w4dMJhwQUysxD\n3LkhY+CQY40JET+vpNrxlr0Mh6zGnUEmT1KFjADImooqaJt5ddY7q0bnypLowXPq\nG/kKehG7qjOknLoEMHVkUHdLwuX8XFwl/bCVTf0iT9i5AvOeyEYWxqE7PmN36CEO\nRQsPQ2CGW6N3Wcejwxq+pnc3QWP72+UnHZ1sF/PESl9tUrcq8Ts=\n=ZqQQ\n-----END PGP SIGNATURE-----", "payload": "tree e69ee17e3d202a7a150e4e95c16c9bff6fe637bd\nparent 314c39d2ea07d8b50649149358ebeb1a6bd09179\nauthor \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1686498268 +0800\ncommitter \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1686823153 +0800\n\nExtend `unused_must_use` to cover block exprs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72b3b58efc6ed4bab93ba98586b62750abbdda79", "html_url": "https://github.com/rust-lang/rust/commit/72b3b58efc6ed4bab93ba98586b62750abbdda79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72b3b58efc6ed4bab93ba98586b62750abbdda79/comments", "author": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314c39d2ea07d8b50649149358ebeb1a6bd09179", "url": "https://api.github.com/repos/rust-lang/rust/commits/314c39d2ea07d8b50649149358ebeb1a6bd09179", "html_url": "https://github.com/rust-lang/rust/commit/314c39d2ea07d8b50649149358ebeb1a6bd09179"}], "stats": {"total": 354, "additions": 289, "deletions": 65}, "files": [{"sha": "ba47ebd68cbf5a6fc7c70473e148c8b815773918", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -67,7 +67,7 @@ struct ArenaChunk<T = u8> {\n \n unsafe impl<#[may_dangle] T> Drop for ArenaChunk<T> {\n     fn drop(&mut self) {\n-        unsafe { Box::from_raw(self.storage.as_mut()) };\n+        unsafe { drop(Box::from_raw(self.storage.as_mut())) }\n     }\n }\n "}, {"sha": "9bcf672672a978d901763241fcbfbd7d0d08587c", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -1534,8 +1534,29 @@ pub struct UnusedOp<'a> {\n     pub op: &'a str,\n     #[label]\n     pub label: Span,\n-    #[suggestion(style = \"verbose\", code = \"let _ = \", applicability = \"maybe-incorrect\")]\n-    pub suggestion: Span,\n+    #[subdiagnostic]\n+    pub suggestion: UnusedOpSuggestion,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum UnusedOpSuggestion {\n+    #[suggestion(\n+        lint_suggestion,\n+        style = \"verbose\",\n+        code = \"let _ = \",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    NormalExpr {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[multipart_suggestion(lint_suggestion, style = \"verbose\", applicability = \"maybe-incorrect\")]\n+    BlockTailExpr {\n+        #[suggestion_part(code = \"let _ = \")]\n+        before_span: Span,\n+        #[suggestion_part(code = \";\")]\n+        after_span: Span,\n+    },\n }\n \n #[derive(LintDiagnostic)]\n@@ -1578,15 +1599,25 @@ pub struct UnusedDef<'a, 'b> {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(\n-    lint_suggestion,\n-    style = \"verbose\",\n-    code = \"let _ = \",\n-    applicability = \"maybe-incorrect\"\n-)]\n-pub struct UnusedDefSuggestion {\n-    #[primary_span]\n-    pub span: Span,\n+\n+pub enum UnusedDefSuggestion {\n+    #[suggestion(\n+        lint_suggestion,\n+        style = \"verbose\",\n+        code = \"let _ = \",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    NormalExpr {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[multipart_suggestion(lint_suggestion, style = \"verbose\", applicability = \"maybe-incorrect\")]\n+    BlockTailExpr {\n+        #[suggestion_part(code = \"let _ = \")]\n+        before_span: Span,\n+        #[suggestion_part(code = \";\")]\n+        after_span: Span,\n+    },\n }\n \n // Needed because of def_path_str"}, {"sha": "9861610612fb0c5b57db9424f65f081831247f76", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 81, "deletions": 13, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -1,7 +1,8 @@\n use crate::lints::{\n     PathStatementDrop, PathStatementDropSub, PathStatementNoEffect, UnusedAllocationDiag,\n     UnusedAllocationMutDiag, UnusedClosure, UnusedDef, UnusedDefSuggestion, UnusedDelim,\n-    UnusedDelimSuggestion, UnusedGenerator, UnusedImportBracesDiag, UnusedOp, UnusedResult,\n+    UnusedDelimSuggestion, UnusedGenerator, UnusedImportBracesDiag, UnusedOp, UnusedOpSuggestion,\n+    UnusedResult,\n };\n use crate::Lint;\n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n@@ -93,7 +94,15 @@ declare_lint_pass!(UnusedResults => [UNUSED_MUST_USE, UNUSED_RESULTS]);\n \n impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, s: &hir::Stmt<'_>) {\n-        let hir::StmtKind::Semi(expr) = s.kind else { return; };\n+        let hir::StmtKind::Semi(mut expr) = s.kind else { return; };\n+\n+        let mut expr_is_from_block = false;\n+        while let hir::ExprKind::Block(blk, ..) = expr.kind\n+            && let hir::Block { expr: Some(e), .. } = blk\n+        {\n+            expr = e;\n+            expr_is_from_block = true;\n+        }\n \n         if let hir::ExprKind::Ret(..) = expr.kind {\n             return;\n@@ -113,6 +122,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 expr.span,\n                 \"output of future returned by \",\n                 \"\",\n+                expr_is_from_block,\n             )\n         {\n             // We have a bare `foo().await;` on an opaque type from an async function that was\n@@ -125,13 +135,13 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n         let must_use_result = is_ty_must_use(cx, ty, &expr, expr.span);\n         let type_lint_emitted_or_suppressed = match must_use_result {\n             Some(path) => {\n-                emit_must_use_untranslated(cx, &path, \"\", \"\", 1, false);\n+                emit_must_use_untranslated(cx, &path, \"\", \"\", 1, false, expr_is_from_block);\n                 true\n             }\n             None => false,\n         };\n \n-        let fn_warned = check_fn_must_use(cx, expr);\n+        let fn_warned = check_fn_must_use(cx, expr, expr_is_from_block);\n \n         if !fn_warned && type_lint_emitted_or_suppressed {\n             // We don't warn about unused unit or uninhabited types.\n@@ -176,7 +186,14 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 UnusedOp {\n                     op: must_use_op,\n                     label: expr.span,\n-                    suggestion: expr.span.shrink_to_lo(),\n+                    suggestion: if expr_is_from_block {\n+                        UnusedOpSuggestion::BlockTailExpr {\n+                            before_span: expr.span.shrink_to_lo(),\n+                            after_span: expr.span.shrink_to_hi(),\n+                        }\n+                    } else {\n+                        UnusedOpSuggestion::NormalExpr { span: expr.span.shrink_to_lo() }\n+                    },\n                 },\n             );\n             op_warned = true;\n@@ -186,7 +203,11 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             cx.emit_spanned_lint(UNUSED_RESULTS, s.span, UnusedResult { ty });\n         }\n \n-        fn check_fn_must_use(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n+        fn check_fn_must_use(\n+            cx: &LateContext<'_>,\n+            expr: &hir::Expr<'_>,\n+            expr_is_from_block: bool,\n+        ) -> bool {\n             let maybe_def_id = match expr.kind {\n                 hir::ExprKind::Call(ref callee, _) => {\n                     match callee.kind {\n@@ -207,7 +228,14 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 _ => None,\n             };\n             if let Some(def_id) = maybe_def_id {\n-                check_must_use_def(cx, def_id, expr.span, \"return value of \", \"\")\n+                check_must_use_def(\n+                    cx,\n+                    def_id,\n+                    expr.span,\n+                    \"return value of \",\n+                    \"\",\n+                    expr_is_from_block,\n+                )\n             } else {\n                 false\n             }\n@@ -350,6 +378,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             span: Span,\n             descr_pre_path: &str,\n             descr_post_path: &str,\n+            expr_is_from_block: bool,\n         ) -> bool {\n             is_def_must_use(cx, def_id, span)\n                 .map(|must_use_path| {\n@@ -360,6 +389,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         descr_post_path,\n                         1,\n                         false,\n+                        expr_is_from_block,\n                     )\n                 })\n                 .is_some()\n@@ -373,28 +403,59 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             descr_post: &str,\n             plural_len: usize,\n             is_inner: bool,\n+            expr_is_from_block: bool,\n         ) {\n             let plural_suffix = pluralize!(plural_len);\n \n             match path {\n                 MustUsePath::Suppressed => {}\n                 MustUsePath::Boxed(path) => {\n                     let descr_pre = &format!(\"{}boxed \", descr_pre);\n-                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len, true);\n+                    emit_must_use_untranslated(\n+                        cx,\n+                        path,\n+                        descr_pre,\n+                        descr_post,\n+                        plural_len,\n+                        true,\n+                        expr_is_from_block,\n+                    );\n                 }\n                 MustUsePath::Opaque(path) => {\n                     let descr_pre = &format!(\"{}implementer{} of \", descr_pre, plural_suffix);\n-                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len, true);\n+                    emit_must_use_untranslated(\n+                        cx,\n+                        path,\n+                        descr_pre,\n+                        descr_post,\n+                        plural_len,\n+                        true,\n+                        expr_is_from_block,\n+                    );\n                 }\n                 MustUsePath::TraitObject(path) => {\n                     let descr_post = &format!(\" trait object{}{}\", plural_suffix, descr_post);\n-                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len, true);\n+                    emit_must_use_untranslated(\n+                        cx,\n+                        path,\n+                        descr_pre,\n+                        descr_post,\n+                        plural_len,\n+                        true,\n+                        expr_is_from_block,\n+                    );\n                 }\n                 MustUsePath::TupleElement(elems) => {\n                     for (index, path) in elems {\n                         let descr_post = &format!(\" in tuple element {}\", index);\n                         emit_must_use_untranslated(\n-                            cx, path, descr_pre, descr_post, plural_len, true,\n+                            cx,\n+                            path,\n+                            descr_pre,\n+                            descr_post,\n+                            plural_len,\n+                            true,\n+                            expr_is_from_block,\n                         );\n                     }\n                 }\n@@ -407,6 +468,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         descr_post,\n                         plural_len.saturating_add(usize::try_from(*len).unwrap_or(usize::MAX)),\n                         true,\n+                        expr_is_from_block,\n                     );\n                 }\n                 MustUsePath::Closure(span) => {\n@@ -433,8 +495,14 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                             cx,\n                             def_id: *def_id,\n                             note: *reason,\n-                            suggestion: (!is_inner)\n-                                .then_some(UnusedDefSuggestion { span: span.shrink_to_lo() }),\n+                            suggestion: (!is_inner).then_some(if expr_is_from_block {\n+                                UnusedDefSuggestion::BlockTailExpr {\n+                                    before_span: span.shrink_to_lo(),\n+                                    after_span: span.shrink_to_hi(),\n+                                }\n+                            } else {\n+                                UnusedDefSuggestion::NormalExpr { span: span.shrink_to_lo() }\n+                            }),\n                         },\n                     );\n                 }"}, {"sha": "80289ca08c3fca85aeaa84d73cb6f171e48a956d", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -308,7 +308,7 @@ mod prim_never {}\n ///\n /// ```no_run\n /// // Undefined behaviour\n-/// unsafe { char::from_u32_unchecked(0x110000) };\n+/// let _ = unsafe { char::from_u32_unchecked(0x110000) };\n /// ```\n ///\n /// USVs are also the exact set of values that may be encoded in UTF-8. Because"}, {"sha": "ee885adfeee616b5a95a6e7d9c5ddad6e0c7e6d6", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -1001,7 +1001,7 @@ fn nonnull_tagged_pointer_with_provenance() {\n     assert_eq!(p.tag(), 3);\n     assert_eq!(unsafe { *p.pointer().as_ptr() }, 10);\n \n-    unsafe { Box::from_raw(p.pointer().as_ptr()) };\n+    unsafe { drop(Box::from_raw(p.pointer().as_ptr())) };\n \n     /// A non-null pointer type which carries several bits of metadata and maintains provenance.\n     #[repr(transparent)]"}, {"sha": "80289ca08c3fca85aeaa84d73cb6f171e48a956d", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -308,7 +308,7 @@ mod prim_never {}\n ///\n /// ```no_run\n /// // Undefined behaviour\n-/// unsafe { char::from_u32_unchecked(0x110000) };\n+/// let _ = unsafe { char::from_u32_unchecked(0x110000) };\n /// ```\n ///\n /// USVs are also the exact set of values that may be encoded in UTF-8. Because"}, {"sha": "ac55ab5a8e2d1c3b20af923b7d0d0b14c0fcb6ce", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ref.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.fixed?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::transmute_ptr_to_ref)]\n #![allow(clippy::match_single_binding)]\n+#![allow(unused_must_use)]\n \n unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n     let _: &T = &*p;\n@@ -38,7 +39,7 @@ fn _issue1231() {\n \n     type Bar<'a> = &'a u8;\n     let raw = 42 as *const i32;\n-    unsafe { &*(raw as *const u8) };\n+    let _ = unsafe { &*(raw as *const u8) };\n }\n \n unsafe fn _issue8924<'a, 'b, 'c>(x: *const &'a u32, y: *const &'b u32) -> &'c &'b u32 {"}, {"sha": "901a3e90dbecceddb53783b384127a9f7cfd5f24", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.rs?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::transmute_ptr_to_ref)]\n #![allow(clippy::match_single_binding)]\n+#![allow(unused_must_use)]\n \n unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n     let _: &T = std::mem::transmute(p);\n@@ -38,7 +39,7 @@ fn _issue1231() {\n \n     type Bar<'a> = &'a u8;\n     let raw = 42 as *const i32;\n-    unsafe { std::mem::transmute::<_, Bar>(raw) };\n+    let _ = unsafe { std::mem::transmute::<_, Bar>(raw) };\n }\n \n unsafe fn _issue8924<'a, 'b, 'c>(x: *const &'a u32, y: *const &'b u32) -> &'c &'b u32 {"}, {"sha": "68007edc4102877f5e466721bcbc818cfa3b095b", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -1,133 +1,133 @@\n error: transmute from a pointer type (`*const T`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:7:17\n+  --> $DIR/transmute_ptr_to_ref.rs:8:17\n    |\n LL |     let _: &T = std::mem::transmute(p);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*p`\n    |\n    = note: `-D clippy::transmute-ptr-to-ref` implied by `-D warnings`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:10:21\n+  --> $DIR/transmute_ptr_to_ref.rs:11:21\n    |\n LL |     let _: &mut T = std::mem::transmute(m);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *m`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:13:17\n+  --> $DIR/transmute_ptr_to_ref.rs:14:17\n    |\n LL |     let _: &T = std::mem::transmute(m);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*m`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:16:21\n+  --> $DIR/transmute_ptr_to_ref.rs:17:21\n    |\n LL |     let _: &mut T = std::mem::transmute(p as *mut T);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(p as *mut T)`\n \n error: transmute from a pointer type (`*const U`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:19:17\n+  --> $DIR/transmute_ptr_to_ref.rs:20:17\n    |\n LL |     let _: &T = std::mem::transmute(o);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(o as *const T)`\n \n error: transmute from a pointer type (`*mut U`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:22:21\n+  --> $DIR/transmute_ptr_to_ref.rs:23:21\n    |\n LL |     let _: &mut T = std::mem::transmute(om);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(om as *mut T)`\n \n error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:25:17\n+  --> $DIR/transmute_ptr_to_ref.rs:26:17\n    |\n LL |     let _: &T = std::mem::transmute(om);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(om as *const T)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, u8>`)\n-  --> $DIR/transmute_ptr_to_ref.rs:35:32\n+  --> $DIR/transmute_ptr_to_ref.rs:36:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*raw.cast::<Foo<_>>()`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, &u8>`)\n-  --> $DIR/transmute_ptr_to_ref.rs:37:33\n+  --> $DIR/transmute_ptr_to_ref.rs:38:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*raw.cast::<Foo<&_>>()`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n-  --> $DIR/transmute_ptr_to_ref.rs:41:14\n+  --> $DIR/transmute_ptr_to_ref.rs:42:22\n    |\n-LL |     unsafe { std::mem::transmute::<_, Bar>(raw) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const u8)`\n+LL |     let _ = unsafe { std::mem::transmute::<_, Bar>(raw) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const u8)`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:46:14\n+  --> $DIR/transmute_ptr_to_ref.rs:47:14\n    |\n LL |         0 => std::mem::transmute(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:47:14\n+  --> $DIR/transmute_ptr_to_ref.rs:48:14\n    |\n LL |         1 => std::mem::transmute(y),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*y.cast::<&u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:48:14\n+  --> $DIR/transmute_ptr_to_ref.rs:49:14\n    |\n LL |         2 => std::mem::transmute::<_, &&'b u32>(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&'b u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:49:14\n+  --> $DIR/transmute_ptr_to_ref.rs:50:14\n    |\n LL |         _ => std::mem::transmute::<_, &&'b u32>(y),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*y.cast::<&'b u32>()`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:57:19\n+  --> $DIR/transmute_ptr_to_ref.rs:58:19\n    |\n LL |     let _: &u32 = std::mem::transmute(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:58:19\n+  --> $DIR/transmute_ptr_to_ref.rs:59:19\n    |\n LL |     let _: &u32 = std::mem::transmute::<_, &u32>(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a.cast::<u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:60:14\n+  --> $DIR/transmute_ptr_to_ref.rs:61:14\n    |\n LL |         0 => std::mem::transmute(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:61:14\n+  --> $DIR/transmute_ptr_to_ref.rs:62:14\n    |\n LL |         _ => std::mem::transmute::<_, &&'b u32>(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&'b u32>()`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:69:19\n+  --> $DIR/transmute_ptr_to_ref.rs:70:19\n    |\n LL |     let _: &u32 = std::mem::transmute(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:70:19\n+  --> $DIR/transmute_ptr_to_ref.rs:71:19\n    |\n LL |     let _: &u32 = std::mem::transmute::<_, &u32>(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(a as *const u32)`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:72:14\n+  --> $DIR/transmute_ptr_to_ref.rs:73:14\n    |\n LL |         0 => std::mem::transmute(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(x as *const () as *const &u32)`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:73:14\n+  --> $DIR/transmute_ptr_to_ref.rs:74:14\n    |\n LL |         _ => std::mem::transmute::<_, &&'b u32>(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(x as *const () as *const &'b u32)`"}, {"sha": "366930a831c88473ad0e7242420c35b0edf946cf", "filename": "src/tools/miri/tests/fail/dangling_pointers/storage_dead_dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -10,7 +10,7 @@ fn fill(v: &mut i32) {\n }\n \n fn evil() {\n-    unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR: is a dangling pointer\n+    let _ = unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR: is a dangling pointer\n }\n \n fn main() {"}, {"sha": "6c41add60ef4afb394ba9ec60a5a0e90f62f5700", "filename": "src/tools/miri/tests/fail/dangling_pointers/storage_dead_dangling.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: dereferencing pointer failed: $HEX[noalloc] is a dangling pointer (it has no provenance)\n   --> $DIR/storage_dead_dangling.rs:LL:CC\n    |\n-LL |     unsafe { &mut *(LEAK as *mut i32) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: $HEX[noalloc] is a dangling pointer (it has no provenance)\n+LL |     let _ = unsafe { &mut *(LEAK as *mut i32) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: $HEX[noalloc] is a dangling pointer (it has no provenance)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "59781f023661c57a78cf160327d2e155a6a3a21e", "filename": "src/tools/miri/tests/fail/intrinsics/uninit_uninhabited_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.rs?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -2,6 +2,6 @@\n \n #[allow(deprecated, invalid_value)]\n fn main() {\n-    unsafe { std::mem::uninitialized::<!>() };\n+    let _ = unsafe { std::mem::uninitialized::<!>() };\n     //~^ ERROR: attempted to instantiate uninhabited type `!`\n }"}, {"sha": "f2cc343032627fe0516b3588ab43f7c1a2eeb46f", "filename": "src/tools/miri/tests/fail/intrinsics/uninit_uninhabited_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.stderr?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -1,8 +1,8 @@\n error: abnormal termination: aborted execution: attempted to instantiate uninhabited type `!`\n   --> $DIR/uninit_uninhabited_type.rs:LL:CC\n    |\n-LL |     unsafe { std::mem::uninitialized::<!>() };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n+LL |     let _ = unsafe { std::mem::uninitialized::<!>() };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n    |\n    = note: inside `main` at $DIR/uninit_uninhabited_type.rs:LL:CC\n "}, {"sha": "e9c6e464e88cf48beb55c6e545c4a4af4eeaa60a", "filename": "src/tools/miri/tests/fail/intrinsics/zero_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.rs?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -1,5 +1,5 @@\n #[allow(deprecated, invalid_value)]\n fn main() {\n-    unsafe { std::mem::zeroed::<fn()>() };\n+    let _ = unsafe { std::mem::zeroed::<fn()>() };\n     //~^ ERROR: attempted to zero-initialize type `fn()`, which is invalid\n }"}, {"sha": "77d5822804315f403c048c6c1300e388f9acefc3", "filename": "src/tools/miri/tests/fail/intrinsics/zero_fn_ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.stderr?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -1,8 +1,8 @@\n error: abnormal termination: aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n   --> $DIR/zero_fn_ptr.rs:LL:CC\n    |\n-LL |     unsafe { std::mem::zeroed::<fn()>() };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n+LL |     let _ = unsafe { std::mem::zeroed::<fn()>() };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n    |\n    = note: inside `main` at $DIR/zero_fn_ptr.rs:LL:CC\n "}, {"sha": "d4a8c8955e233c1a50f2679d92109b22a36ea5d2", "filename": "tests/ui/issues/issue-1460.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/tests%2Fui%2Fissues%2Fissue-1460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/tests%2Fui%2Fissues%2Fissue-1460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-1460.stderr?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -1,8 +1,8 @@\n warning: unused closure that must be used\n-  --> $DIR/issue-1460.rs:6:5\n+  --> $DIR/issue-1460.rs:6:6\n    |\n LL |     {|i: u32| if 1 == i { }};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "642012812bd2a27417e88e7314223f91e350fb11", "filename": "tests/ui/lint/unused/must-use-block-expr.fixed", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.fixed?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -0,0 +1,36 @@\n+// run-rustfix\n+// check-pass\n+\n+#![warn(unused_must_use)]\n+\n+#[must_use]\n+fn foo() -> i32 {\n+    42\n+}\n+\n+fn bar() {\n+    {\n+        let _ = foo();\n+        //~^ WARN unused return value\n+    }\n+}\n+\n+fn baz() {\n+    {\n+        let _ = foo();\n+        //~^ WARN unused return value\n+    };\n+}\n+\n+fn main() {\n+    bar();\n+    baz();\n+    {\n+        let _ = 1 + 2;\n+        //~^ WARN unused arithmetic operation\n+    }\n+    {\n+        let _ = 1 + 2;\n+        //~^ WARN unused arithmetic operation\n+    };\n+}"}, {"sha": "e0a680aa07d088affe22ba4969e144dff7533194", "filename": "tests/ui/lint/unused/must-use-block-expr.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.rs?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -0,0 +1,36 @@\n+// run-rustfix\n+// check-pass\n+\n+#![warn(unused_must_use)]\n+\n+#[must_use]\n+fn foo() -> i32 {\n+    42\n+}\n+\n+fn bar() {\n+    {\n+        foo();\n+        //~^ WARN unused return value\n+    }\n+}\n+\n+fn baz() {\n+    {\n+        foo()\n+        //~^ WARN unused return value\n+    };\n+}\n+\n+fn main() {\n+    bar();\n+    baz();\n+    {\n+        1 + 2;\n+        //~^ WARN unused arithmetic operation\n+    }\n+    {\n+        1 + 2\n+        //~^ WARN unused arithmetic operation\n+    };\n+}"}, {"sha": "d821beb1d92e74c42a43bb33bc2f15ce08e5771f", "filename": "tests/ui/lint/unused/must-use-block-expr.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/72b3b58efc6ed4bab93ba98586b62750abbdda79/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72b3b58efc6ed4bab93ba98586b62750abbdda79/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.stderr?ref=72b3b58efc6ed4bab93ba98586b62750abbdda79", "patch": "@@ -0,0 +1,51 @@\n+warning: unused return value of `foo` that must be used\n+  --> $DIR/must-use-block-expr.rs:13:9\n+   |\n+LL |         foo();\n+   |         ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/must-use-block-expr.rs:4:9\n+   |\n+LL | #![warn(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |         let _ = foo();\n+   |         +++++++\n+\n+warning: unused return value of `foo` that must be used\n+  --> $DIR/must-use-block-expr.rs:20:9\n+   |\n+LL |         foo()\n+   |         ^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |         let _ = foo();\n+   |         +++++++      +\n+\n+warning: unused arithmetic operation that must be used\n+  --> $DIR/must-use-block-expr.rs:29:9\n+   |\n+LL |         1 + 2;\n+   |         ^^^^^ the arithmetic operation produces a value\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |         let _ = 1 + 2;\n+   |         +++++++\n+\n+warning: unused arithmetic operation that must be used\n+  --> $DIR/must-use-block-expr.rs:33:9\n+   |\n+LL |         1 + 2\n+   |         ^^^^^ the arithmetic operation produces a value\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |         let _ = 1 + 2;\n+   |         +++++++      +\n+\n+warning: 4 warnings emitted\n+"}]}