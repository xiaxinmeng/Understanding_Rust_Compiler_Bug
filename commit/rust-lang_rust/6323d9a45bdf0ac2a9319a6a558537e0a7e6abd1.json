{"sha": "6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMjNkOWE0NWJkZjBhYzJhOTMxOWE2YTU1ODUzN2UwYTdlNmFiZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-28T23:10:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-28T23:10:10Z"}, "message": "Auto merge of #52355 - pietroalbini:zfeature, r=eddyb\n\nAdd the -Zcrate-attr=foo unstable rustc option\n\nThis PR adds a new unstable option to `rustc`: `-Zcrate-attr=foo`. The option can be used to inject crate-level attributes from the CLI, and it's meant to be used by tools like Crater that needs to add their own attributes to a crate without changing the source code.\n\nThe exact reason I need this is to implement \"edition runs\" in Crater: we need to add the preview feature flag to every crate, and editing the crates' source code on the fly might produce unexpected results, while a compiler flag is more reliable.\n\ncc https://github.com/rust-lang-nursery/crater/issues/282 @Mark-Simulacrum", "tree": {"sha": "a5564f46570f8ecb53639467095b4ff2a92b6688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5564f46570f8ecb53639467095b4ff2a92b6688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1", "html_url": "https://github.com/rust-lang/rust/commit/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dab71516f1f4f6a63e32dffeb2625a12e5113485", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab71516f1f4f6a63e32dffeb2625a12e5113485", "html_url": "https://github.com/rust-lang/rust/commit/dab71516f1f4f6a63e32dffeb2625a12e5113485"}, {"sha": "71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "html_url": "https://github.com/rust-lang/rust/commit/71276c6abc5b7e0889db1f9e69e02eb5d2596f39"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "c106966fb70be0041ef576f32d1ff6d220d39a11", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1", "patch": "@@ -423,6 +423,7 @@ impl_stable_hash_for!(enum ::syntax_pos::FileName {\n     Anon,\n     MacroExpansion,\n     ProcMacroSourceCode,\n+    CliCrateAttr,\n     CfgSpec,\n     Custom(s)\n });"}, {"sha": "8f3ed3106d586d4aab04971ccdaeca6c8b553fe6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1", "patch": "@@ -1367,6 +1367,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n     no_leak_check: bool = (false, parse_bool, [UNTRACKED],\n         \"disables the 'leak check' for subtyping; unsound, but useful for tests\"),\n+    crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n+        \"inject the given attribute in the crate\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "24a2354775cb55299822f048e1bc421d6ed7c7cd", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1", "patch": "@@ -798,7 +798,7 @@ where\n pub fn phase_2_configure_and_expand_inner<'a, F>(\n     sess: &'a Session,\n     cstore: &'a CStore,\n-    krate: ast::Crate,\n+    mut krate: ast::Crate,\n     registry: Option<Registry>,\n     crate_name: &str,\n     addl_plugins: Option<Vec<String>>,\n@@ -810,6 +810,10 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(\n where\n     F: FnOnce(&ast::Crate) -> CompileResult,\n {\n+    krate = time(sess, \"attributes injection\", || {\n+        syntax::attr::inject(krate, &sess.parse_sess, &sess.opts.debugging_opts.crate_attr)\n+    });\n+\n     let (mut krate, features) = syntax::config::features(\n         krate,\n         &sess.parse_sess,"}, {"sha": "137b94230a3cd251ccdb9864499de835daaa15c7", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1", "patch": "@@ -22,11 +22,11 @@ pub use self::ReprAttr::*;\n pub use self::StabilityLevel::*;\n \n use ast;\n-use ast::{AttrId, Attribute, Name, Ident, Path, PathSegment};\n+use ast::{AttrId, Attribute, AttrStyle, Name, Ident, Path, PathSegment};\n use ast::{MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use ast::{Lit, LitKind, Expr, ExprKind, Item, Local, Stmt, StmtKind, GenericParam};\n use codemap::{BytePos, Spanned, respan, dummy_spanned};\n-use syntax_pos::Span;\n+use syntax_pos::{FileName, Span};\n use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use parse::parser::Parser;\n use parse::{self, ParseSess, PResult};\n@@ -821,3 +821,33 @@ derive_has_attrs! {\n     Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::ImplItem, ast::TraitItem, ast::Arm,\n     ast::Field, ast::FieldPat, ast::Variant_\n }\n+\n+pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {\n+    for raw_attr in attrs {\n+        let mut parser = parse::new_parser_from_source_str(\n+            parse_sess,\n+            FileName::CliCrateAttr,\n+            raw_attr.clone(),\n+        );\n+\n+        let start_span = parser.span;\n+        let (path, tokens) = panictry!(parser.parse_path_and_tokens());\n+        let end_span = parser.span;\n+        if parser.token != token::Eof {\n+            parse_sess.span_diagnostic\n+                .span_err(start_span.to(end_span), \"invalid crate attribute\");\n+            continue;\n+        }\n+\n+        krate.attrs.push(Attribute {\n+            id: mk_attr_id(),\n+            style: AttrStyle::Inner,\n+            path,\n+            tokens,\n+            is_sugared_doc: false,\n+            span: start_span.to(end_span),\n+        });\n+    }\n+\n+    krate\n+}"}, {"sha": "44cd53282ec9f1358adfe5c5e454e6284828ebef", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1", "patch": "@@ -98,6 +98,8 @@ pub enum FileName {\n     ProcMacroSourceCode,\n     /// Strings provided as --cfg [cfgspec] stored in a crate_cfg\n     CfgSpec,\n+    /// Strings provided as crate attributes in the CLI\n+    CliCrateAttr,\n     /// Custom sources for explicit parser calls from plugins and drivers\n     Custom(String),\n }\n@@ -113,6 +115,7 @@ impl std::fmt::Display for FileName {\n             Anon => write!(fmt, \"<anon>\"),\n             ProcMacroSourceCode => write!(fmt, \"<proc-macro source code>\"),\n             CfgSpec => write!(fmt, \"cfgspec\"),\n+            CliCrateAttr => write!(fmt, \"<crate attribute>\"),\n             Custom(ref s) => write!(fmt, \"<{}>\", s),\n         }\n     }\n@@ -135,6 +138,7 @@ impl FileName {\n             MacroExpansion |\n             ProcMacroSourceCode |\n             CfgSpec |\n+            CliCrateAttr |\n             Custom(_) |\n             QuoteExpansion => false,\n         }\n@@ -148,6 +152,7 @@ impl FileName {\n             MacroExpansion |\n             ProcMacroSourceCode |\n             CfgSpec |\n+            CliCrateAttr |\n             Custom(_) |\n             QuoteExpansion => false,\n             Macros(_) => true,"}, {"sha": "3df0985a2a38bdd3200e1fc68c0f5fb2d7240ca3", "filename": "src/test/run-pass/z-crate-attr.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Ftest%2Frun-pass%2Fz-crate-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1/src%2Ftest%2Frun-pass%2Fz-crate-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fz-crate-attr.rs?ref=6323d9a45bdf0ac2a9319a6a558537e0a7e6abd1", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks if an unstable feature is enabled with the -Zcrate-attr=feature(foo) flag. If\n+// the exact feature used here is causing problems feel free to replace it with another\n+// perma-unstable feature.\n+\n+// compile-flags: -Zcrate-attr=feature(abi_unadjusted)\n+\n+#![allow(dead_code)]\n+\n+extern \"unadjusted\" fn foo() {}\n+\n+fn main() {}"}]}