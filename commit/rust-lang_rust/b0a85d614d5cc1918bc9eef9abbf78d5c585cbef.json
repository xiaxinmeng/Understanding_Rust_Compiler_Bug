{"sha": "b0a85d614d5cc1918bc9eef9abbf78d5c585cbef", "node_id": "C_kwDOAAsO6NoAKGIwYTg1ZDYxNGQ1Y2MxOTE4YmM5ZWVmOWFiYmY3OGQ1YzU4NWNiZWY", "commit": {"author": {"name": "mazong1123", "email": "mazong1123@gmail.com", "date": "2023-04-25T03:34:57Z"}, "committer": {"name": "mazong1123", "email": "mazong1123@gmail.com", "date": "2023-04-25T03:34:57Z"}, "message": "Add shortcut for Grisu3 algorithm.\n\nCheck requested digit length and the fractional or integral parts of the number. Falls back earlier without trying the Grisu algorithm if the specific condition meets.\n\nFix #110129", "tree": {"sha": "736fda1d78369a06a039086d4a4a69d0639b90b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/736fda1d78369a06a039086d4a4a69d0639b90b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0a85d614d5cc1918bc9eef9abbf78d5c585cbef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0a85d614d5cc1918bc9eef9abbf78d5c585cbef", "html_url": "https://github.com/rust-lang/rust/commit/b0a85d614d5cc1918bc9eef9abbf78d5c585cbef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0a85d614d5cc1918bc9eef9abbf78d5c585cbef/comments", "author": {"login": "mazong1123", "id": 4554154, "node_id": "MDQ6VXNlcjQ1NTQxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4554154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mazong1123", "html_url": "https://github.com/mazong1123", "followers_url": "https://api.github.com/users/mazong1123/followers", "following_url": "https://api.github.com/users/mazong1123/following{/other_user}", "gists_url": "https://api.github.com/users/mazong1123/gists{/gist_id}", "starred_url": "https://api.github.com/users/mazong1123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mazong1123/subscriptions", "organizations_url": "https://api.github.com/users/mazong1123/orgs", "repos_url": "https://api.github.com/users/mazong1123/repos", "events_url": "https://api.github.com/users/mazong1123/events{/privacy}", "received_events_url": "https://api.github.com/users/mazong1123/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mazong1123", "id": 4554154, "node_id": "MDQ6VXNlcjQ1NTQxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4554154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mazong1123", "html_url": "https://github.com/mazong1123", "followers_url": "https://api.github.com/users/mazong1123/followers", "following_url": "https://api.github.com/users/mazong1123/following{/other_user}", "gists_url": "https://api.github.com/users/mazong1123/gists{/gist_id}", "starred_url": "https://api.github.com/users/mazong1123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mazong1123/subscriptions", "organizations_url": "https://api.github.com/users/mazong1123/orgs", "repos_url": "https://api.github.com/users/mazong1123/repos", "events_url": "https://api.github.com/users/mazong1123/events{/privacy}", "received_events_url": "https://api.github.com/users/mazong1123/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd57c6b407d5f038060d7b94ce9af22ea4b0dcf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd57c6b407d5f038060d7b94ce9af22ea4b0dcf0", "html_url": "https://github.com/rust-lang/rust/commit/fd57c6b407d5f038060d7b94ce9af22ea4b0dcf0"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "17d6b474ad26e5912b4cba64abe207661f85f698", "filename": "library/core/benches/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b0a85d614d5cc1918bc9eef9abbf78d5c585cbef/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a85d614d5cc1918bc9eef9abbf78d5c585cbef/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=b0a85d614d5cc1918bc9eef9abbf78d5c585cbef", "patch": "@@ -81,3 +81,30 @@ fn bench_big_exact_inf(b: &mut Bencher) {\n         format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n+\n+#[bench]\n+fn bench_one_exact_inf(b: &mut Bencher) {\n+    let decoded = decode_finite(1.0);\n+    let mut buf = [MaybeUninit::new(0); 1024];\n+    b.iter(|| {\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n+    });\n+}\n+\n+#[bench]\n+fn bench_trailing_zero_exact_inf(b: &mut Bencher) {\n+    let decoded = decode_finite(250.000000000000000000000000);\n+    let mut buf = [MaybeUninit::new(0); 1024];\n+    b.iter(|| {\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n+    });\n+}\n+\n+#[bench]\n+fn bench_halfway_point_exact_inf(b: &mut Bencher) {\n+    let decoded = decode_finite(1.00000000000000011102230246251565404236316680908203125);\n+    let mut buf = [MaybeUninit::new(0); 1024];\n+    b.iter(|| {\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n+    });\n+}"}, {"sha": "b9f0d114c6a14d2457a2a2c665513bc6d26ae71e", "filename": "library/core/src/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0a85d614d5cc1918bc9eef9abbf78d5c585cbef/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a85d614d5cc1918bc9eef9abbf78d5c585cbef/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=b0a85d614d5cc1918bc9eef9abbf78d5c585cbef", "patch": "@@ -487,6 +487,22 @@ pub fn format_exact_opt<'a>(\n     let vint = (v.f >> e) as u32;\n     let vfrac = v.f & ((1 << e) - 1);\n \n+    let requested_digits = buf.len();\n+\n+    const POW10_UP_TO_9: [u32; 10] =\n+        [1, 10, 100, 1000, 10_000, 100_000, 1_000_000, 10_000_000, 100_000_000, 1_000_000_000];\n+\n+    // We deviate from the original algorithm here and do some early checks to determine if we can satisfy requested_digits.\n+    // If we determine that we can't, we exit early and avoid most of the heavy lifting that the algorithm otherwise does.\n+    //\n+    // When vfrac is zero, we can easily determine if vint can satisfy requested digits:\n+    //      If requested_digits >= 11, vint is not able to exhaust the count by itself since 10^(11 -1) > u32 max value >= vint.\n+    //      If vint < 10^(requested_digits - 1), vint cannot exhaust the count.\n+    //      Otherwise, vint might be able to exhaust the count and we need to execute the rest of the code.\n+    if (vfrac == 0) && ((requested_digits >= 11) || (vint < POW10_UP_TO_9[requested_digits - 1])) {\n+        return None;\n+    }\n+\n     // both old `v` and new `v` (scaled by `10^-k`) has an error of < 1 ulp (Theorem 5.1).\n     // as we don't know the error is positive or negative, we use two approximations\n     // spaced equally and have the maximal error of 2 ulps (same to the shortest case)."}]}