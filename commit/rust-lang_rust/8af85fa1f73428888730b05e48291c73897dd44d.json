{"sha": "8af85fa1f73428888730b05e48291c73897dd44d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZjg1ZmExZjczNDI4ODg4NzMwYjA1ZTQ4MjkxYzczODk3ZGQ0NGQ=", "commit": {"author": {"name": "Edd Barrett", "email": "vext01@gmail.com", "date": "2020-08-26T16:39:43Z"}, "committer": {"name": "Edd Barrett", "email": "vext01@gmail.com", "date": "2020-09-05T18:59:30Z"}, "message": "Improve the documentation of `filter()` and `filter_map()`.\n\nI believe the documentation is currently a little misleading.\n\nFor example, in the docs for `filter()`:\n\n> If the closure returns `false`, it will try again, and call the closure on\n> the next element, seeing if it passes the test.\n\nThis kind of implies that if the closure returns true then we *don't* \"try\nagain\" and no further elements are considered. In actuality that's not the\ncase, every element is tried regardless of what happened with the previous\nelement.\n\nThis change tries to clarify that by removing the uses of \"try again\"\naltogether.", "tree": {"sha": "41e808138c7cec35e7690bb5a39b3e563b60c2d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41e808138c7cec35e7690bb5a39b3e563b60c2d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af85fa1f73428888730b05e48291c73897dd44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af85fa1f73428888730b05e48291c73897dd44d", "html_url": "https://github.com/rust-lang/rust/commit/8af85fa1f73428888730b05e48291c73897dd44d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af85fa1f73428888730b05e48291c73897dd44d/comments", "author": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d289aeade481c03d42e7f6d31bc6b64a73cfa45", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d289aeade481c03d42e7f6d31bc6b64a73cfa45", "html_url": "https://github.com/rust-lang/rust/commit/7d289aeade481c03d42e7f6d31bc6b64a73cfa45"}], "stats": {"total": 26, "additions": 8, "deletions": 18}, "files": [{"sha": "b5aa7257cf38ef876157abde6919674e9f196daf", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8af85fa1f73428888730b05e48291c73897dd44d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af85fa1f73428888730b05e48291c73897dd44d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=8af85fa1f73428888730b05e48291c73897dd44d", "patch": "@@ -648,11 +648,9 @@ pub trait Iterator {\n     /// Creates an iterator which uses a closure to determine if an element\n     /// should be yielded.\n     ///\n-    /// The closure must return `true` or `false`. `filter()` creates an\n-    /// iterator which calls this closure on each element. If the closure\n-    /// returns `true`, then the element is returned. If the closure returns\n-    /// `false`, it will try again, and call the closure on the next element,\n-    /// seeing if it passes the test.\n+    /// Given an element the closure must return `true` or `false`. The returned\n+    /// iterator will yield only the elements for which the closure returns\n+    /// true.\n     ///\n     /// # Examples\n     ///\n@@ -719,24 +717,16 @@ pub trait Iterator {\n \n     /// Creates an iterator that both filters and maps.\n     ///\n-    /// The closure must return an [`Option<T>`]. `filter_map` creates an\n-    /// iterator which calls this closure on each element. If the closure\n-    /// returns [`Some(element)`][`Some`], then that element is returned. If the\n-    /// closure returns [`None`], it will try again, and call the closure on the\n-    /// next element, seeing if it will return [`Some`].\n+    /// The returned iterator yields only the `value`s for which the supplied\n+    /// closure returns `Some(value)`.\n     ///\n-    /// Why `filter_map` and not just [`filter`] and [`map`]? The key is in this\n-    /// part:\n+    /// `filter_map` can be used to make chains of [`filter`] and [`map`] more\n+    /// concise. The example below shows how a `map().filter().map()` can be\n+    /// shortened to a single call to `filter_map`.\n     ///\n     /// [`filter`]: Iterator::filter\n     /// [`map`]: Iterator::map\n     ///\n-    /// > If the closure returns [`Some(element)`][`Some`], then that element is returned.\n-    ///\n-    /// In other words, it removes the [`Option<T>`] layer automatically. If your\n-    /// mapping is already returning an [`Option<T>`] and you want to skip over\n-    /// [`None`]s, then `filter_map` is much, much nicer to use.\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}]}