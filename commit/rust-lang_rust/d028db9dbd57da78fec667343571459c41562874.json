{"sha": "d028db9dbd57da78fec667343571459c41562874", "node_id": "C_kwDOAAsO6NoAKGQwMjhkYjlkYmQ1N2RhNzhmZWM2NjczNDM1NzE0NTljNDE1NjI4NzQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-09-22T14:25:05Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-01T10:03:07Z"}, "message": "`ui-fulldeps`: adopt to the new rustc lint API", "tree": {"sha": "2785d4ffaf8c744857624ef574559a5d8d7bc296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2785d4ffaf8c744857624ef574559a5d8d7bc296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d028db9dbd57da78fec667343571459c41562874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d028db9dbd57da78fec667343571459c41562874", "html_url": "https://github.com/rust-lang/rust/commit/d028db9dbd57da78fec667343571459c41562874", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d028db9dbd57da78fec667343571459c41562874/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3071153c205fbc11caa1a13b3e09004411b2537", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3071153c205fbc11caa1a13b3e09004411b2537", "html_url": "https://github.com/rust-lang/rust/commit/b3071153c205fbc11caa1a13b3e09004411b2537"}], "stats": {"total": 84, "additions": 44, "deletions": 40}, "files": [{"sha": "87007728e9df604d300a242c3e4bdf1cbd91720d", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -917,7 +917,7 @@ pub trait LintContext: Sized {\n     fn lint(\n         &self,\n         lint: &'static Lint,\n-        msg: DiagnosticMessage,\n+        msg: impl Into<DiagnosticMessage>,\n         decorate: impl for<'a, 'b> FnOnce(\n             &'b mut DiagnosticBuilder<'a, ()>,\n         ) -> &'b mut DiagnosticBuilder<'a, ()>,"}, {"sha": "c05443488c3ea9748a5473d7641696e5d8520bf9", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -49,9 +49,11 @@ impl<'tcx> LateLintPass<'tcx> for MissingAllowedAttrPass {\n \n         let allowed = |attr| pprust::attribute_to_string(attr).contains(\"allowed_attr\");\n         if !cx.tcx.hir().attrs(item.hir_id()).iter().any(allowed) {\n-            cx.lint(MISSING_ALLOWED_ATTR, |lint| {\n-                lint.build(\"Missing 'allowed_attr' attribute\").set_span(span).emit();\n-            });\n+            cx.lint(\n+                MISSING_ALLOWED_ATTR,\n+                \"Missing 'allowed_attr' attribute\",\n+                |lint| lint.set_span(span)\n+            );\n         }\n     }\n }"}, {"sha": "073da688c7cd9d47c83b94056638c6bedbe2d707", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -29,9 +29,11 @@ impl<'tcx> LateLintPass<'tcx> for Pass {\n         let attrs = cx.tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n         let span = cx.tcx.def_span(CRATE_DEF_ID);\n         if !cx.sess().contains_name(attrs, Symbol::intern(\"crate_okay\")) {\n-            cx.lint(CRATE_NOT_OKAY, |lint| {\n-                lint.build(\"crate is not marked with #![crate_okay]\").set_span(span).emit();\n-            });\n+            cx.lint(\n+                CRATE_NOT_OKAY,\n+                \"crate is not marked with #![crate_okay]\",\n+                |lint| lint.set_span(span)\n+            );\n         }\n     }\n }"}, {"sha": "4a41e7fbb72a1924af369a2d9b941f0bf56e86a5", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -22,12 +22,10 @@ declare_lint_pass!(Pass => [TEST_LINT, PLEASE_LINT]);\n impl<'tcx> LateLintPass<'tcx> for Pass {\n     fn check_item(&mut self, cx: &LateContext, it: &rustc_hir::Item) {\n         match it.ident.as_str() {\n-            \"lintme\" => cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n-            }),\n-            \"pleaselintme\" => cx.lint(PLEASE_LINT, |lint| {\n-                lint.build(\"item is named 'pleaselintme'\").set_span(it.span).emit();\n-            }),\n+            \"lintme\" => cx.lint(TEST_LINT, \"item is named 'lintme'\", |lint| lint.set_span(it.span)),\n+            \"pleaselintme\" => {\n+                cx.lint(PLEASE_LINT, \"item is named 'pleaselintme'\", |lint| lint.set_span(it.span))\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "30956deb799ed0816a3a1fb5c28686efa12e4c22", "filename": "src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -21,9 +21,7 @@ declare_lint_pass!(Pass => [TEST_LINT]);\n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name.as_str() == \"lintme\" {\n-            cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n-            });\n+            cx.lint(TEST_LINT, \"item is named 'lintme'\", |lint| lint.set_span(it.span));\n         }\n     }\n }"}, {"sha": "c2c024865e8a807f8b1e3e17d0d6d23affc71879", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -31,14 +31,10 @@ declare_lint_pass!(Pass => [TEST_LINT, TEST_GROUP, TEST_RUSTC_TOOL_LINT]);\n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name.as_str() == \"lintme\" {\n-            cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n-            });\n+            cx.lint(TEST_LINT, \"item is named 'lintme'\", |lint| lint.set_span(it.span));\n         }\n         if it.ident.name.as_str() == \"lintmetoo\" {\n-            cx.lint(TEST_GROUP, |lint| {\n-                lint.build(\"item is named 'lintmetoo'\").set_span(it.span).emit();\n-            });\n+            cx.lint(TEST_GROUP, \"item is named 'lintmetoo'\", |lint| lint.set_span(it.span));\n         }\n     }\n }"}, {"sha": "3cb13082f2501bd9034fe1673bc356d5e3b90bc9", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -4,12 +4,12 @@ error: prefer `FxHashMap` over `HashMap`, it has better performance\n LL |     let _map: HashMap<String, String> = HashMap::default();\n    |                                         ^^^^^^^\n    |\n+   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n note: the lint level is defined here\n   --> $DIR/default_hash_types.rs:4:9\n    |\n LL | #![deny(rustc::default_hash_types)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n \n error: prefer `FxHashMap` over `HashMap`, it has better performance\n   --> $DIR/default_hash_types.rs:16:15"}, {"sha": "4e296fff6d0ba68bcdee6f4a9e44c862b01bfc16", "filename": "src/test/ui-fulldeps/internal-lints/existing_doc_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -4,12 +4,12 @@ error: found non-existing keyword `tadam` used in `#[doc(keyword = \\\"...\\\")]`\n LL | #[doc(keyword = \"tadam\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = help: only existing keywords are allowed in core/std\n note: the lint level is defined here\n   --> $DIR/existing_doc_keyword.rs:8:9\n    |\n LL | #![deny(rustc::existing_doc_keyword)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: only existing keywords are allowed in core/std\n \n error: aborting due to previous error\n "}, {"sha": "ad6e93334cdc4074a547c04ce8dedad866e426d3", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -4,12 +4,12 @@ error: implementing `LintPass` by hand\n LL | impl LintPass for Foo {\n    |      ^^^^^^^^\n    |\n+   = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n note: the lint level is defined here\n   --> $DIR/lint_pass_impl_without_macro.rs:4:9\n    |\n LL | #![deny(rustc::lint_pass_impl_without_macro)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n error: implementing `LintPass` by hand\n   --> $DIR/lint_pass_impl_without_macro.rs:30:14"}, {"sha": "ee4ef9982371e2903eb789af5381862e53d58ab5", "filename": "src/test/ui-fulldeps/internal-lints/query_stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -4,12 +4,12 @@ error: using `drain` can result in unstable query results\n LL |     for _ in x.drain() {}\n    |                ^^^^^\n    |\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n note: the lint level is defined here\n   --> $DIR/query_stability.rs:4:9\n    |\n LL | #![deny(rustc::potential_query_instability)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n \n error: using `iter` can result in unstable query results\n   --> $DIR/query_stability.rs:16:16"}, {"sha": "d425f6f34e938602a7dd8eee5c924b4c253cef6e", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -585,6 +585,7 @@ struct LintAttributeOnSessionDiag {}\n #[derive(LintDiagnostic)]\n #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[lint(...)]` is not a valid attribute\n+//~| ERROR `#[lint(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `lint` in this scope\n struct LintAttributeOnLintDiag {}"}, {"sha": "17bab3a1d654a0252555cc34b7064bce379d3f21", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d028db9dbd57da78fec667343571459c41562874/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=d028db9dbd57da78fec667343571459c41562874", "patch": "@@ -440,86 +440,93 @@ error: `#[lint(...)]` is not a valid attribute\n LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: `#[lint(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:586:1\n+   |\n+LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:586:1\n    |\n LL | / #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n+LL | |\n LL | | struct LintAttributeOnLintDiag {}\n    | |_________________________________^\n    |\n    = help: specify the slug as the first argument to the attribute, such as `#[diag(typeck::example_error)]`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:595:52\n+  --> $DIR/diagnostic-derive.rs:596:52\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", code = \",,,\")]\n    |                                                    ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:595:38\n+  --> $DIR/diagnostic-derive.rs:596:38\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", code = \",,,\")]\n    |                                      ^^^^^^^^^^^^\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:604:24\n+  --> $DIR/diagnostic-derive.rs:605:24\n    |\n LL |     suggestion: (Span, usize),\n    |                        ^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:612:17\n+  --> $DIR/diagnostic-derive.rs:613:17\n    |\n LL |     suggestion: (Span,),\n    |                 ^^^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:619:5\n+  --> $DIR/diagnostic-derive.rs:620:5\n    |\n LL |     #[suggestion(typeck::suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:626:1\n+  --> $DIR/diagnostic-derive.rs:627:1\n    |\n LL | #[multipart_suggestion(typeck::suggestion)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:629:1\n+  --> $DIR/diagnostic-derive.rs:630:1\n    |\n LL | #[multipart_suggestion()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:633:5\n+  --> $DIR/diagnostic-derive.rs:634:5\n    |\n LL |     #[multipart_suggestion(typeck::suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:641:1\n+  --> $DIR/diagnostic-derive.rs:642:1\n    |\n LL | #[suggestion(typeck::suggestion, code = \"...\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n error: `#[label]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:650:1\n+  --> $DIR/diagnostic-derive.rs:651:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n@@ -563,19 +570,19 @@ LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:626:3\n+  --> $DIR/diagnostic-derive.rs:627:3\n    |\n LL | #[multipart_suggestion(typeck::suggestion)]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:629:3\n+  --> $DIR/diagnostic-derive.rs:630:3\n    |\n LL | #[multipart_suggestion()]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:633:7\n+  --> $DIR/diagnostic-derive.rs:634:7\n    |\n LL |     #[multipart_suggestion(typeck::suggestion)]\n    |       ^^^^^^^^^^^^^^^^^^^^\n@@ -600,7 +607,7 @@ LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 74 previous errors\n+error: aborting due to 75 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}]}