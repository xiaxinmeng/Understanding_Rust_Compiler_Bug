{"sha": "5377dea7fc8dc1f05ddc4c444fddf1994293bfeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNzdkZWE3ZmM4ZGMxZjA1ZGRjNGM0NDRmZGRmMTk5NDI5M2JmZWI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-06T00:55:09Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-07T09:18:19Z"}, "message": "Fix issue with const arg inference", "tree": {"sha": "b9465d4d9a8c187b2a27ec9f15443125bd5a9678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9465d4d9a8c187b2a27ec9f15443125bd5a9678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb", "html_url": "https://github.com/rust-lang/rust/commit/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1867c549754403ac305be8f22a9e93642b3e288", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1867c549754403ac305be8f22a9e93642b3e288", "html_url": "https://github.com/rust-lang/rust/commit/f1867c549754403ac305be8f22a9e93642b3e288"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "349c4e608c2446c5c577601f0516edb8d8bbf64c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5377dea7fc8dc1f05ddc4c444fddf1994293bfeb", "patch": "@@ -13,7 +13,7 @@ use crate::middle::resolve_lifetime as rl;\n use crate::namespace::Namespace;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n-use rustc::ty::{self, DefIdTree, Ty, TyCtxt, ToPredicate, TypeFoldable};\n+use rustc::ty::{self, DefIdTree, Ty, TyCtxt, Const, ToPredicate, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc::ty::subst::{Kind, Subst, InternalSubsts, SubstsRef};\n use rustc::ty::wf::object_region_bounds;\n@@ -61,6 +61,13 @@ pub trait AstConv<'gcx, 'tcx> {\n                         span: Span) -> Ty<'tcx> {\n         self.ty_infer(span)\n     }\n+    /// What const should we use when a const is omitted?\n+    fn ct_infer(\n+        &self,\n+        ty: Ty<'tcx>,\n+        param: Option<&ty::GenericParamDef>,\n+        span: Span,\n+    ) -> &'tcx Const<'tcx>;\n \n     /// Projecting an associated type from a (potentially)\n     /// higher-ranked trait reference is more complicated, because of\n@@ -280,7 +287,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let param_counts = def.own_counts();\n         let arg_counts = args.own_counts();\n         let infer_lifetimes = position != GenericArgPosition::Type && arg_counts.lifetimes == 0;\n-        let infer_consts = position != GenericArgPosition::Type && arg_counts.consts == 0;\n \n         let mut defaults: ty::GenericParamCount = Default::default();\n         for param in &def.params {\n@@ -333,7 +339,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 offset\n             );\n             // We enforce the following: `required` <= `provided` <= `permitted`.\n-            // For kinds without defaults (i.e., lifetimes), `required == permitted`.\n+            // For kinds without defaults (e.g.., lifetimes), `required == permitted`.\n             // For other kinds (i.e., types), `permitted` may be greater than `required`.\n             if required <= provided && provided <= permitted {\n                 return (reported_late_bound_region_err.unwrap_or(false), None);\n@@ -404,7 +410,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             );\n         }\n         // FIXME(const_generics:defaults)\n-        if !infer_consts || arg_counts.consts > param_counts.consts {\n+        if !infer_args || arg_counts.consts > param_counts.consts {\n             check_kind_count(\n                 \"const\",\n                 param_counts.consts,\n@@ -707,8 +713,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     }\n                     GenericParamDefKind::Const => {\n                         // FIXME(const_generics:defaults)\n-                        // We've already errored above about the mismatch.\n-                        tcx.consts.err.into()\n+                        if infer_args {\n+                            // No const parameters were provided, we can infer all.\n+                            let ty = tcx.at(span).type_of(param.def_id);\n+                            self.ct_infer(ty, Some(param), span).into()\n+                        } else {\n+                            // We've already errored above about the mismatch.\n+                            tcx.consts.err.into()\n+                        }\n                     }\n                 }\n             },"}, {"sha": "acb0b73af886d979615bcac6f3b54f4892c383ec", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5377dea7fc8dc1f05ddc4c444fddf1994293bfeb", "patch": "@@ -100,11 +100,12 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_target::spec::abi::Abi;\n use rustc::infer::opaque_types::OpaqueTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc::middle::region;\n use rustc::mir::interpret::{ConstValue, GlobalId};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{\n-    self, AdtKind, CanonicalUserType, Ty, TyCtxt, GenericParamDefKind, Visibility,\n+    self, AdtKind, CanonicalUserType, Ty, TyCtxt, Const, GenericParamDefKind, Visibility,\n     ToPolyTraitRef, ToPredicate, RegionKind, UserType\n };\n use rustc::ty::adjustment::{\n@@ -1959,6 +1960,22 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n                         span: Span) -> Ty<'tcx> {\n         if let UnpackedKind::Type(ty) = self.var_for_def(span, ty_param_def).unpack() {\n             return ty;\n+    fn ct_infer(\n+        &self,\n+        ty: Ty<'tcx>,\n+        param: Option<&ty::GenericParamDef>,\n+        span: Span,\n+    ) -> &'tcx Const<'tcx> {\n+        if let Some(param) = param {\n+            if let UnpackedKind::Const(ct) = self.var_for_def(span, param).unpack() {\n+                return ct;\n+            }\n+            unreachable!()\n+        } else {\n+            self.next_const_var(ty, ConstVariableOrigin {\n+                kind: ConstVariableOriginKind::ConstInference,\n+                span,\n+            })\n         }\n         unreachable!()\n     }"}, {"sha": "64b92687cfe17c2b471a1489e01699ff53e3063f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5377dea7fc8dc1f05ddc4c444fddf1994293bfeb", "patch": "@@ -26,7 +26,7 @@ use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::subst::UnpackedKind;\n-use rustc::ty::{self, AdtKind, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n+use rustc::ty::{self, AdtKind, DefIdTree, ToPolyTraitRef, Ty, TyCtxt, Const};\n use rustc::ty::{ReprOptions, ToPredicate};\n use rustc::util::captures::Captures;\n use rustc::util::nodemap::FxHashMap;\n@@ -47,7 +47,7 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::GenericParamKind;\n use rustc::hir::{self, CodegenFnAttrFlags, CodegenFnAttrs, Unsafety};\n \n-use errors::Applicability;\n+use errors::{Applicability, DiagnosticId};\n \n use std::iter;\n \n@@ -204,6 +204,22 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n         self.tcx().types.err\n     }\n \n+    fn ct_infer(\n+        &self,\n+        _: Ty<'tcx>,\n+        _: Option<&ty::GenericParamDef>,\n+        span: Span,\n+    ) -> &'tcx Const<'tcx> {\n+        self.tcx().sess.struct_span_err_with_code(\n+            span,\n+            \"the const placeholder `_` is not allowed within types on item signatures\",\n+            DiagnosticId::Error(\"E0121\".into()),\n+        ).span_label(span, \"not allowed in type signatures\")\n+         .emit();\n+\n+        self.tcx().consts.err\n+    }\n+\n     fn projected_ty_from_poly_trait_ref(\n         &self,\n         span: Span,"}, {"sha": "66e9a6e6b2a2e4ae9a943ca7495a7aec8ca1d83b", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=5377dea7fc8dc1f05ddc4c444fddf1994293bfeb", "patch": "@@ -1482,8 +1482,8 @@ impl <'a> Drop for MyWrapper<'a> {\n \"##,\n \n E0121: r##\"\n-In order to be consistent with Rust's lack of global type inference, type\n-placeholders are disallowed by design in item signatures.\n+In order to be consistent with Rust's lack of global type inference,\n+type and const placeholders are disallowed by design in item signatures.\n \n Examples of this error include:\n "}]}