{"sha": "ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYzFkM2U3MDQyZjE5ZWQ4MzZiZjk5ZTZlZGUxMGU0YWQwNDk3NzY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-08T20:08:47Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-08T21:07:31Z"}, "message": "Rename last_total to last_unsafe\n\nSee Issue 1943 for any discussion (reopen it if necessary).\n\nCloses #1943", "tree": {"sha": "d4c216aef1dcb63756f8c0332c1558577fd76a2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4c216aef1dcb63756f8c0332c1558577fd76a2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "html_url": "https://github.com/rust-lang/rust/commit/ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9cf73f0a8ad09ed9c032ce01683fcaa19389d6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cf73f0a8ad09ed9c032ce01683fcaa19389d6a", "html_url": "https://github.com/rust-lang/rust/commit/c9cf73f0a8ad09ed9c032ce01683fcaa19389d6a"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "1cfafd2574056fe90915d2413932f31c5003f265", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "patch": "@@ -169,7 +169,8 @@ fn splitext(p: path) -> (str, str) {\n         let parts = str::split_char(p, '.');\n         if vec::len(parts) > 1u {\n             let base = str::connect(vec::init(parts), \".\");\n-            let ext = \".\" + vec::last_total(parts);\n+            // We just checked that parts is non-empty, so this is safe\n+            let ext = \".\" + vec::last_unsafe(parts);\n \n             fn is_dotfile(base: str) -> bool {\n                 str::is_empty(base)"}, {"sha": "3737f9bac1d7cc3014dbd0c4602f3bce4abe77f6", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "patch": "@@ -200,14 +200,15 @@ pure fn last<T: copy>(v: [const T]) -> option<T> {\n }\n \n /*\n-Function: last_total\n+Function: last_unsafe\n \n-Returns the last element of a non-empty vector `v`\n+Returns the last element of a `v`, failing if the vector is empty.\n \n-Predicates:\n-<is_not_empty> (v)\n */\n-pure fn last_total<T: copy>(v: [const T]) -> T { v[len(v) - 1u] }\n+pure fn last_unsafe<T: copy>(v: [const T]) -> T {\n+    if len(v) == 0u { fail \"last_unsafe: empty vector\" }\n+    v[len(v) - 1u]\n+}\n \n /*\n Function: slice"}, {"sha": "6627b0fec21264c6b2ac64eec069e20eb93fa15a", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "patch": "@@ -270,7 +270,8 @@ fn splitext(p: path) -> (str, str) {\n         let parts = str::split_char(p, '.');\n         if vec::len(parts) > 1u {\n             let base = str::connect(vec::init(parts), \".\");\n-            let ext = \".\" + vec::last_total(parts);\n+            // We just checked that parts is non-empty\n+            let ext = \".\" + vec::last_unsafe(parts);\n \n             fn is_dotfile(base: str) -> bool {\n                 str::is_empty(base)"}, {"sha": "72a89feedd923078909c4883b2373885ad4bdaa1", "filename": "src/rustc/middle/ast_map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Frustc%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Frustc%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fast_map.rs?ref=ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "patch": "@@ -187,7 +187,9 @@ fn map_view_item(vi: @view_item, cx: ctx, _v: vt) {\n             let (id, name) = alt vp.node {\n               view_path_simple(nm, _, id) { (id, nm) }\n               view_path_glob(pth, id) | view_path_list(pth, _, id) {\n-                (id, vec::last_total(*pth))\n+                  // should be a constraint on the type\n+                assert (vec::is_not_empty(*pth));\n+                (id, vec::last_unsafe(*pth))\n               }\n             };\n             cx.map.insert(id, node_export(vp, extend(cx, name)));"}, {"sha": "bc98c621a34557f9ee2ea3fd40da27e3b6915f3c", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "patch": "@@ -68,4 +68,7 @@ fn pat_binding_ids(dm: resolve::def_map, pat: @pat) -> [node_id] {\n     ret found;\n }\n \n-fn path_to_ident(p: @path) -> ident { vec::last_total(p.node.idents) }\n+fn path_to_ident(p: @path) -> ident {\n+  assert (vec::is_not_empty(p.node.idents)); // should be a constraint on path\n+  vec::last_unsafe(p.node.idents)\n+}"}, {"sha": "02ffa3337b489e0fba58b8c932993fbc644e76dd", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "patch": "@@ -161,7 +161,9 @@ fn build_reexport_path_map(srv: astsrv::srv, -def_map: def_map) -> path_map {\n             let path = alt check ctxt.ast_map.get(exp_id) {\n               ast_map::node_export(_, path) { path }\n             };\n-            let name = alt check vec::last_total(*path) {\n+          // should be a constraint on the node_export constructor\n+          // that guarantees path is non-empty\n+            let name = alt check vec::last_unsafe(*path) {\n               ast_map::path_name(nm) { nm }\n             };\n             let modpath = ast_map::path_to_str(vec::init(*path));"}, {"sha": "787fd3e1c1ef6b44fdfc7b7fabf429f60c41f356", "filename": "src/test/run-pass/zip-same-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc1d3e7042f19ed836bf99e6ede10e4ad049776/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzip-same-length.rs?ref=ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "patch": "@@ -19,5 +19,5 @@ fn main() {\n \n     check (is_not_empty(ps));\n     assert (head(ps) == ('a', 1u));\n-    assert (last_total(ps) == (j as char, 10u));\n+    assert (last_unsafe(ps) == (j as char, 10u));\n }"}]}