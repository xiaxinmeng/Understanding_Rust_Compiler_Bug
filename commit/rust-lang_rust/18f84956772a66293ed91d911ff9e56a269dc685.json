{"sha": "18f84956772a66293ed91d911ff9e56a269dc685", "node_id": "C_kwDOAAsO6NoAKDE4Zjg0OTU2NzcyYTY2MjkzZWQ5MWQ5MTFmZjllNTZhMjY5ZGM2ODU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-24T04:06:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-04T00:48:15Z"}, "message": "Add an interesting case to the `deriving-all-codegen.rs` test.", "tree": {"sha": "c41a7d00df53df89f455ab4246687c1d749d69c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c41a7d00df53df89f455ab4246687c1d749d69c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18f84956772a66293ed91d911ff9e56a269dc685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18f84956772a66293ed91d911ff9e56a269dc685", "html_url": "https://github.com/rust-lang/rust/commit/18f84956772a66293ed91d911ff9e56a269dc685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18f84956772a66293ed91d911ff9e56a269dc685/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "url": "https://api.github.com/repos/rust-lang/rust/commits/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "html_url": "https://github.com/rust-lang/rust/commit/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f"}], "stats": {"total": 116, "additions": 114, "deletions": 2}, "files": [{"sha": "028ed9c230524dc88ac717c8962b1b13a620812c", "filename": "src/test/ui/deriving/deriving-all-codegen.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18f84956772a66293ed91d911ff9e56a269dc685/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f84956772a66293ed91d911ff9e56a269dc685/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs?ref=18f84956772a66293ed91d911ff9e56a269dc685", "patch": "@@ -28,12 +28,17 @@ struct Point {\n     y: u32,\n }\n \n-// A long struct.\n+// A large struct.\n #[derive(Clone, Debug, Default, Hash, PartialEq, Eq, PartialOrd, Ord)]\n struct Big {\n     b1: u32, b2: u32, b3: u32, b4: u32, b5: u32, b6: u32, b7: u32, b8:u32,\n }\n \n+// A packed tuple struct.\n+#[derive(Clone, Copy, Debug, Default, Hash, PartialEq, Eq, PartialOrd, Ord)]\n+#[repr(packed)]\n+struct Packed(u32);\n+\n // A C-like, fieldless enum.\n #[derive(Clone, Copy, Debug, Default, Hash, PartialEq, Eq, PartialOrd, Ord)]\n enum Fieldless {"}, {"sha": "7635a4792572bd483620293fd3e868b91e4ed44b", "filename": "src/test/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/18f84956772a66293ed91d911ff9e56a269dc685/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/18f84956772a66293ed91d911ff9e56a269dc685/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=18f84956772a66293ed91d911ff9e56a269dc685", "patch": "@@ -244,7 +244,7 @@ impl ::core::cmp::Ord for Point {\n     }\n }\n \n-// A long struct.\n+// A large struct.\n struct Big {\n     b1: u32,\n     b2: u32,\n@@ -593,6 +593,113 @@ impl ::core::cmp::Ord for Big {\n     }\n }\n \n+// A packed tuple struct.\n+#[repr(packed)]\n+struct Packed(u32);\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::clone::Clone for Packed {\n+    #[inline]\n+    fn clone(&self) -> Packed {\n+        { let _: ::core::clone::AssertParamIsClone<u32>; *self }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::marker::Copy for Packed { }\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::fmt::Debug for Packed {\n+    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+        match *self {\n+            Self(__self_0_0) =>\n+                ::core::fmt::Formatter::debug_tuple_field1_finish(f, \"Packed\",\n+                    &&(__self_0_0)),\n+        }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::default::Default for Packed {\n+    #[inline]\n+    fn default() -> Packed { Packed(::core::default::Default::default()) }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::hash::Hash for Packed {\n+    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n+        match *self {\n+            Self(__self_0_0) => {\n+                ::core::hash::Hash::hash(&(__self_0_0), state)\n+            }\n+        }\n+    }\n+}\n+impl ::core::marker::StructuralPartialEq for Packed {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialEq for Packed {\n+    #[inline]\n+    fn eq(&self, other: &Packed) -> bool {\n+        match *other {\n+            Self(__self_1_0) =>\n+                match *self {\n+                    Self(__self_0_0) => (__self_0_0) == (__self_1_0),\n+                },\n+        }\n+    }\n+}\n+impl ::core::marker::StructuralEq for Packed {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Eq for Packed {\n+    #[inline]\n+    #[doc(hidden)]\n+    #[no_coverage]\n+    fn assert_receiver_is_total_eq(&self) -> () {\n+        { let _: ::core::cmp::AssertParamIsEq<u32>; }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialOrd for Packed {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Packed)\n+        -> ::core::option::Option<::core::cmp::Ordering> {\n+        match *other {\n+            Self(__self_1_0) =>\n+                match *self {\n+                    Self(__self_0_0) =>\n+                        match ::core::cmp::PartialOrd::partial_cmp(&(__self_0_0),\n+                                &(__self_1_0)) {\n+                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)\n+                                =>\n+                                ::core::option::Option::Some(::core::cmp::Ordering::Equal),\n+                            cmp => cmp,\n+                        },\n+                },\n+        }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Ord for Packed {\n+    #[inline]\n+    fn cmp(&self, other: &Packed) -> ::core::cmp::Ordering {\n+        match *other {\n+            Self(__self_1_0) =>\n+                match *self {\n+                    Self(__self_0_0) =>\n+                        match ::core::cmp::Ord::cmp(&(__self_0_0), &(__self_1_0)) {\n+                            ::core::cmp::Ordering::Equal =>\n+                                ::core::cmp::Ordering::Equal,\n+                            cmp => cmp,\n+                        },\n+                },\n+        }\n+    }\n+}\n+\n // A C-like, fieldless enum.\n enum Fieldless {\n "}]}