{"sha": "0492302dbdef106956545b3faaa4b9ee54d99526", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OTIzMDJkYmRlZjEwNjk1NjU0NWIzZmFhYTRiOWVlNTRkOTk1MjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T01:29:41Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T02:36:57Z"}, "message": "syntax refactor `parse_self_param` (5)", "tree": {"sha": "8b064dd759c1a781c306887a97e4727463ab8da2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b064dd759c1a781c306887a97e4727463ab8da2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0492302dbdef106956545b3faaa4b9ee54d99526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0492302dbdef106956545b3faaa4b9ee54d99526", "html_url": "https://github.com/rust-lang/rust/commit/0492302dbdef106956545b3faaa4b9ee54d99526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0492302dbdef106956545b3faaa4b9ee54d99526/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4306d0037e961825abc08bfa39af0b64d1ed52aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/4306d0037e961825abc08bfa39af0b64d1ed52aa", "html_url": "https://github.com/rust-lang/rust/commit/4306d0037e961825abc08bfa39af0b64d1ed52aa"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "5ba1d1a9f03239693b82f3bfdc922758c2117d39", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0492302dbdef106956545b3faaa4b9ee54d99526/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0492302dbdef106956545b3faaa4b9ee54d99526/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0492302dbdef106956545b3faaa4b9ee54d99526", "patch": "@@ -1197,15 +1197,12 @@ impl<'a> Parser<'a> {\n     /// Evaluates the closure with restrictions in place.\n     ///\n     /// Afters the closure is evaluated, restrictions are reset.\n-    fn with_res<F, T>(&mut self, r: Restrictions, f: F) -> T\n-        where F: FnOnce(&mut Self) -> T\n-    {\n+    fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {\n         let old = self.restrictions;\n-        self.restrictions = r;\n-        let r = f(self);\n+        self.restrictions = res;\n+        let res = f(self);\n         self.restrictions = old;\n-        return r;\n-\n+        res\n     }\n \n     fn parse_fn_params(\n@@ -1275,6 +1272,11 @@ impl<'a> Parser<'a> {\n         && self.look_ahead(n + 1, |t| t != &token::ModSep)\n     }\n \n+    fn is_isolated_mut_self(&self, n: usize) -> bool {\n+        self.is_keyword_ahead(n, &[kw::Mut])\n+        && self.is_isolated_self(n + 1)\n+    }\n+\n     fn expect_self_ident(&mut self) -> Ident {\n         match self.token.kind {\n             // Preserve hygienic context.\n@@ -1320,34 +1322,31 @@ impl<'a> Parser<'a> {\n         let eself_lo = self.token.span;\n         let (eself, eself_ident, eself_hi) = match self.token.kind {\n             token::BinOp(token::And) => {\n-                // `&self`\n-                // `&mut self`\n-                // `&'lt self`\n-                // `&'lt mut self`\n-                // `&not_self`\n-                (if self.is_isolated_self(1) {\n+                let eself = if self.is_isolated_self(1) {\n+                    // `&self`\n                     self.bump();\n                     SelfKind::Region(None, Mutability::Immutable)\n-                } else if self.is_keyword_ahead(1, &[kw::Mut]) &&\n-                          self.is_isolated_self(2) {\n+                } else if self.is_isolated_mut_self(1) {\n+                    // `&mut self`\n                     self.bump();\n                     self.bump();\n                     SelfKind::Region(None, Mutability::Mutable)\n-                } else if self.look_ahead(1, |t| t.is_lifetime()) &&\n-                          self.is_isolated_self(2) {\n+                } else if self.look_ahead(1, |t| t.is_lifetime()) && self.is_isolated_self(2) {\n+                    // `&'lt self`\n                     self.bump();\n                     let lt = self.expect_lifetime();\n                     SelfKind::Region(Some(lt), Mutability::Immutable)\n-                } else if self.look_ahead(1, |t| t.is_lifetime()) &&\n-                          self.is_keyword_ahead(2, &[kw::Mut]) &&\n-                          self.is_isolated_self(3) {\n+                } else if self.look_ahead(1, |t| t.is_lifetime()) && self.is_isolated_mut_self(2) {\n+                    // `&'lt mut self`\n                     self.bump();\n                     let lt = self.expect_lifetime();\n                     self.bump();\n                     SelfKind::Region(Some(lt), Mutability::Mutable)\n                 } else {\n+                    // `&not_self`\n                     return Ok(None);\n-                }, self.expect_self_ident(), self.prev_span)\n+                };\n+                (eself, self.expect_self_ident(), self.prev_span)\n             }\n             // `*self`\n             token::BinOp(token::Star) if self.is_isolated_self(1) => {\n@@ -1368,7 +1367,7 @@ impl<'a> Parser<'a> {\n                 self.parse_self_possibly_typed(Mutability::Immutable)?\n             }\n             // `mut self` and `mut self: TYPE`\n-            token::Ident(..) if self.token.is_keyword(kw::Mut) && self.is_isolated_self(1) => {\n+            token::Ident(..) if self.is_isolated_mut_self(0) => {\n                 self.bump();\n                 self.parse_self_possibly_typed(Mutability::Mutable)?\n             }"}]}