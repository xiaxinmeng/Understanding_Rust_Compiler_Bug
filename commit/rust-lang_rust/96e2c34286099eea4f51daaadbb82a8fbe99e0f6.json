{"sha": "96e2c34286099eea4f51daaadbb82a8fbe99e0f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZTJjMzQyODYwOTllZWE0ZjUxZGFhYWRiYjgyYThmYmU5OWUwZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-02T12:11:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-02T12:11:54Z"}, "message": "Auto merge of #41547 - alexeyzab:41425-fix-mismatched-types-error-message, r=arielb1\n\nFix error message for mismatched types\n\nThis addresses #41425 by implementing the changes mentioned in the\nfollowing comment:\nhttps://github.com/rust-lang/rust/issues/41425#issuecomment-296754508", "tree": {"sha": "11b9c36039988c5b30c4ff443659e7f4e6c76ce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11b9c36039988c5b30c4ff443659e7f4e6c76ce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96e2c34286099eea4f51daaadbb82a8fbe99e0f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96e2c34286099eea4f51daaadbb82a8fbe99e0f6", "html_url": "https://github.com/rust-lang/rust/commit/96e2c34286099eea4f51daaadbb82a8fbe99e0f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96e2c34286099eea4f51daaadbb82a8fbe99e0f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50517d58a2f43779c27478baf77f938c0b3ebba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/50517d58a2f43779c27478baf77f938c0b3ebba0", "html_url": "https://github.com/rust-lang/rust/commit/50517d58a2f43779c27478baf77f938c0b3ebba0"}, {"sha": "c741bc80320e18093a328fd36955a2d1bfae689b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c741bc80320e18093a328fd36955a2d1bfae689b", "html_url": "https://github.com/rust-lang/rust/commit/c741bc80320e18093a328fd36955a2d1bfae689b"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "ac10dfd36e25dba5034f9795e807d7e8e5991fc0", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e2c34286099eea4f51daaadbb82a8fbe99e0f6/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e2c34286099eea4f51daaadbb82a8fbe99e0f6/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=96e2c34286099eea4f51daaadbb82a8fbe99e0f6", "patch": "@@ -498,7 +498,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if is_if_let_fallback {\n                 let cause = self.cause(expr.span, ObligationCauseCode::IfExpressionWithNoElse);\n                 assert!(arm_ty.is_nil());\n-                coercion.coerce_forced_unit(self, &cause, &mut |_| ());\n+                coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n             } else {\n                 let cause = self.cause(expr.span, ObligationCauseCode::MatchExpressionArm {\n                     arm_span: arm.body.span,"}, {"sha": "57415021976b349cc10f34ae7f864cfa6ca152f2", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96e2c34286099eea4f51daaadbb82a8fbe99e0f6/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e2c34286099eea4f51daaadbb82a8fbe99e0f6/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=96e2c34286099eea4f51daaadbb82a8fbe99e0f6", "patch": "@@ -1001,7 +1001,12 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                       expression_ty: Ty<'tcx>,\n                       expression_diverges: Diverges)\n     {\n-        self.coerce_inner(fcx, cause, Some(expression), expression_ty, expression_diverges, None)\n+        self.coerce_inner(fcx,\n+                          cause,\n+                          Some(expression),\n+                          expression_ty,\n+                          expression_diverges,\n+                          None, false)\n     }\n \n     /// Indicates that one of the inputs is a \"forced unit\". This\n@@ -1019,14 +1024,16 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n     pub fn coerce_forced_unit<'a>(&mut self,\n                                   fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n                                   cause: &ObligationCause<'tcx>,\n-                                  augment_error: &mut FnMut(&mut DiagnosticBuilder))\n+                                  augment_error: &mut FnMut(&mut DiagnosticBuilder),\n+                                  label_unit_as_expected: bool)\n     {\n         self.coerce_inner(fcx,\n                           cause,\n                           None,\n                           fcx.tcx.mk_nil(),\n                           Diverges::Maybe,\n-                          Some(augment_error))\n+                          Some(augment_error),\n+                          label_unit_as_expected)\n     }\n \n     /// The inner coercion \"engine\". If `expression` is `None`, this\n@@ -1038,7 +1045,8 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                         expression: Option<&'gcx hir::Expr>,\n                         mut expression_ty: Ty<'tcx>,\n                         expression_diverges: Diverges,\n-                        augment_error: Option<&mut FnMut(&mut DiagnosticBuilder)>)\n+                        augment_error: Option<&mut FnMut(&mut DiagnosticBuilder)>,\n+                        label_expression_as_expected: bool)\n     {\n         // Incorporate whatever type inference information we have\n         // until now; in principle we might also want to process\n@@ -1096,7 +1104,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n             // Another example is `break` with no argument expression.\n             assert!(expression_ty.is_nil());\n             assert!(expression_ty.is_nil(), \"if let hack without unit type\");\n-            fcx.eq_types(true, cause, expression_ty, self.merged_ty())\n+            fcx.eq_types(label_expression_as_expected, cause, expression_ty, self.merged_ty())\n                .map(|infer_ok| {\n                    fcx.register_infer_ok_obligations(infer_ok);\n                    expression_ty\n@@ -1119,11 +1127,11 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                 }\n             }\n             Err(err) => {\n-                let (expected, found) = if expression.is_none() {\n+                let (expected, found) = if label_expression_as_expected {\n                     // In the case where this is a \"forced unit\", like\n                     // `break`, we want to call the `()` \"expected\"\n                     // since it is implied by the syntax.\n-                    assert!(expression_ty.is_nil());\n+                    // (Note: not all force-units work this way.)\"\n                     (expression_ty, self.final_ty.unwrap_or(self.expected_ty))\n                 } else {\n                     // Otherwise, the \"expected\" type for error"}, {"sha": "9185b6ec7b1dde4aa974b4911e9accd9f496eecb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/96e2c34286099eea4f51daaadbb82a8fbe99e0f6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e2c34286099eea4f51daaadbb82a8fbe99e0f6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=96e2c34286099eea4f51daaadbb82a8fbe99e0f6", "patch": "@@ -2864,7 +2864,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.diverges.set(cond_diverges | then_diverges & else_diverges);\n         } else {\n             let else_cause = self.cause(sp, ObligationCauseCode::IfExpressionWithNoElse);\n-            coerce.coerce_forced_unit(self, &else_cause, &mut |_| ());\n+            coerce.coerce_forced_unit(self, &else_cause, &mut |_| (), true);\n \n             // If the condition is false we can't diverge.\n             self.diverges.set(cond_diverges);\n@@ -3581,7 +3581,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           coerce.coerce(self, &cause, e, e_ty, e_diverges);\n                       } else {\n                           assert!(e_ty.is_nil());\n-                          coerce.coerce_forced_unit(self, &cause, &mut |_| ());\n+                          coerce.coerce_forced_unit(self, &cause, &mut |_| (), true);\n                       }\n                   } else {\n                       // If `ctxt.coerce` is `None`, we can just ignore\n@@ -3616,7 +3616,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             } else {\n                 let mut coercion = self.ret_coercion.as_ref().unwrap().borrow_mut();\n                 let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);\n-                coercion.coerce_forced_unit(self, &cause, &mut |_| ());\n+                coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n             }\n             tcx.types.never\n           }\n@@ -4154,14 +4154,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // expression (assuming there are no other breaks,\n                 // this implies that the type of the block will be\n                 // `!`).\n+                //\n+                // #41425 -- label the implicit `()` as being the\n+                // \"found type\" here, rather than the \"expected type\".\n                 if !self.diverges.get().always() {\n                     coerce.coerce_forced_unit(self, &self.misc(blk.span), &mut |err| {\n                         if let Some(expected_ty) = expected.only_has_type(self) {\n                             self.consider_hint_about_removing_semicolon(blk,\n                                                                         expected_ty,\n                                                                         err);\n                         }\n-                    });\n+                    }, false);\n                 }\n             }\n         });"}, {"sha": "489ad817ea8b1e0a957fefb23029be0133393a5c", "filename": "src/test/ui/coercion-missing-tail-expected-type.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/96e2c34286099eea4f51daaadbb82a8fbe99e0f6/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e2c34286099eea4f51daaadbb82a8fbe99e0f6/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs?ref=96e2c34286099eea4f51daaadbb82a8fbe99e0f6", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// #41425 -- error message \"mismatched types\" has wrong types\n+\n+fn plus_one(x: i32) -> i32 {\n+    x + 1;\n+}\n+\n+fn main() {\n+    let x = plus_one(5);\n+    println!(\"X = {}\", x);\n+}"}, {"sha": "8f08ff34637707851e48ec63c00a0745e980aa6a", "filename": "src/test/ui/coercion-missing-tail-expected-type.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/96e2c34286099eea4f51daaadbb82a8fbe99e0f6/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e2c34286099eea4f51daaadbb82a8fbe99e0f6/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr?ref=96e2c34286099eea4f51daaadbb82a8fbe99e0f6", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coercion-missing-tail-expected-type.rs:13:28\n+   |\n+13 |   fn plus_one(x: i32) -> i32 {\n+   |  ____________________________^\n+14 | |     x + 1;\n+15 | | }\n+   | |_^ expected i32, found ()\n+   |\n+   = note: expected type `i32`\n+              found type `()`\n+help: consider removing this semicolon:\n+  --> $DIR/coercion-missing-tail-expected-type.rs:14:10\n+   |\n+14 |     x + 1;\n+   |          ^\n+\n+error: aborting due to previous error\n+"}]}