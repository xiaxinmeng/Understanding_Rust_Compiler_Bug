{"sha": "18c8d0da644682e69268c2247aed1f74b9132018", "node_id": "C_kwDOAAsO6NoAKDE4YzhkMGRhNjQ0NjgyZTY5MjY4YzIyNDdhZWQxZjc0YjkxMzIwMTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-28T14:20:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-28T14:20:23Z"}, "message": "Rollup merge of #93239 - Thomasdezeeuw:socketaddr_creation, r=m-ou-se\n\nAdd os::unix::net::SocketAddr::from_path\n\nCreates a new SocketAddr from a path, supports both regular paths and\nabstract namespaces.\n\nNote that `SocketAddr::from_abstract_namespace` could be removed after this as `SocketAddr::unix` also supports abstract namespaces.\n\nUpdates #65275\nUnblocks https://github.com/tokio-rs/mio/issues/1527\n\nr? `@m-ou-se`", "tree": {"sha": "68f421e35819c89015e81a334661c95cdc4292c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f421e35819c89015e81a334661c95cdc4292c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18c8d0da644682e69268c2247aed1f74b9132018", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8/unCRBK7hj4Ov3rIwAA/EkIAJ/Mz3COVldbjzvA0X9VIeXH\nn99NVnTThfOo2TCHxfzCn9M0DmJnNlDbU8Hj14Xra8boqzyhuN+20xr0uo7Qs+qQ\nkTqdUKICbZ6WAMTjstFS6JSBD4lDTOL8IScXAWz8i5jt2BsRg55+sm5B1Vctwzfw\ny/JfDX/Pnd7PGsCvJxvcH8saw76sUz/yEzq4u4XWuNVD5htSG/FjgQgw7CaRb3R9\naTVjFJWJgqwWddZxdSfLxF3Et5Z6yyA/6yT31UQ6pS+PXmZotZmznAkn50PhxcME\ntKk4rgq+v8fvy4N1FgueEyd4dIRHIR+/pkJf5bZAxFdRVcuQoKzBZZkJztcm2Tc=\n=ftIi\n-----END PGP SIGNATURE-----\n", "payload": "tree 68f421e35819c89015e81a334661c95cdc4292c2\nparent 9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2\nparent 35f578fc789a14106b2e32b80846ecd62ccf9672\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643379623 +0100\ncommitter GitHub <noreply@github.com> 1643379623 +0100\n\nRollup merge of #93239 - Thomasdezeeuw:socketaddr_creation, r=m-ou-se\n\nAdd os::unix::net::SocketAddr::from_path\n\nCreates a new SocketAddr from a path, supports both regular paths and\nabstract namespaces.\n\nNote that `SocketAddr::from_abstract_namespace` could be removed after this as `SocketAddr::unix` also supports abstract namespaces.\n\nUpdates #65275\nUnblocks https://github.com/tokio-rs/mio/issues/1527\n\nr? `@m-ou-se`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18c8d0da644682e69268c2247aed1f74b9132018", "html_url": "https://github.com/rust-lang/rust/commit/18c8d0da644682e69268c2247aed1f74b9132018", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18c8d0da644682e69268c2247aed1f74b9132018/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "html_url": "https://github.com/rust-lang/rust/commit/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2"}, {"sha": "35f578fc789a14106b2e32b80846ecd62ccf9672", "url": "https://api.github.com/repos/rust-lang/rust/commits/35f578fc789a14106b2e32b80846ecd62ccf9672", "html_url": "https://github.com/rust-lang/rust/commit/35f578fc789a14106b2e32b80846ecd62ccf9672"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "9dbd4548bc92d02240e64b20a7bf24b9380ce0e5", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/18c8d0da644682e69268c2247aed1f74b9132018/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c8d0da644682e69268c2247aed1f74b9132018/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=18c8d0da644682e69268c2247aed1f74b9132018", "patch": "@@ -2,7 +2,7 @@ use crate::ffi::OsStr;\n use crate::os::unix::ffi::OsStrExt;\n use crate::path::Path;\n use crate::sys::cvt;\n-use crate::{ascii, fmt, io, iter, mem};\n+use crate::{ascii, fmt, io, mem, ptr};\n \n // FIXME(#43348): Make libc adapt #[doc(cfg(...))] so we don't need these fake definitions here?\n #[cfg(not(unix))]\n@@ -22,8 +22,9 @@ fn sun_path_offset(addr: &libc::sockaddr_un) -> usize {\n     path - base\n }\n \n-pub(super) unsafe fn sockaddr_un(path: &Path) -> io::Result<(libc::sockaddr_un, libc::socklen_t)> {\n-    let mut addr: libc::sockaddr_un = mem::zeroed();\n+pub(super) fn sockaddr_un(path: &Path) -> io::Result<(libc::sockaddr_un, libc::socklen_t)> {\n+    // SAFETY: All zeros is a valid representation for `sockaddr_un`.\n+    let mut addr: libc::sockaddr_un = unsafe { mem::zeroed() };\n     addr.sun_family = libc::AF_UNIX as libc::sa_family_t;\n \n     let bytes = path.as_os_str().as_bytes();\n@@ -41,11 +42,13 @@ pub(super) unsafe fn sockaddr_un(path: &Path) -> io::Result<(libc::sockaddr_un,\n             &\"path must be shorter than SUN_LEN\",\n         ));\n     }\n-    for (dst, src) in iter::zip(&mut addr.sun_path, bytes) {\n-        *dst = *src as libc::c_char;\n-    }\n-    // null byte for pathname addresses is already there because we zeroed the\n-    // struct\n+    // SAFETY: `bytes` and `addr.sun_path` are not overlapping and\n+    // both point to valid memory.\n+    // NOTE: We zeroed the memory above, so the path is already null\n+    // terminated.\n+    unsafe {\n+        ptr::copy_nonoverlapping(bytes.as_ptr(), addr.sun_path.as_mut_ptr().cast(), bytes.len())\n+    };\n \n     let mut len = sun_path_offset(&addr) + bytes.len();\n     match bytes.get(0) {\n@@ -127,6 +130,43 @@ impl SocketAddr {\n         Ok(SocketAddr { addr, len })\n     }\n \n+    /// Constructs a `SockAddr` with the family `AF_UNIX` and the provided path.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns an error if the path is longer than `SUN_LEN` or if it contains\n+    /// NULL bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(unix_socket_creation)]\n+    /// use std::os::unix::net::SocketAddr;\n+    /// use std::path::Path;\n+    ///\n+    /// # fn main() -> std::io::Result<()> {\n+    /// let address = SocketAddr::from_path(\"/path/to/socket\")?;\n+    /// assert_eq!(address.as_pathname(), Some(Path::new(\"/path/to/socket\")));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// Creating a `SocketAddr` with a NULL byte results in an error.\n+    ///\n+    /// ```\n+    /// #![feature(unix_socket_creation)]\n+    /// use std::os::unix::net::SocketAddr;\n+    ///\n+    /// assert!(SocketAddr::from_path(\"/path/with/\\0/bytes\").is_err());\n+    /// ```\n+    #[unstable(feature = \"unix_socket_creation\", issue = \"93423\")]\n+    pub fn from_path<P>(path: P) -> io::Result<SocketAddr>\n+    where\n+        P: AsRef<Path>,\n+    {\n+        sockaddr_un(path.as_ref()).map(|(addr, len)| SocketAddr { addr, len })\n+    }\n+\n     /// Returns `true` if the address is unnamed.\n     ///\n     /// # Examples"}]}