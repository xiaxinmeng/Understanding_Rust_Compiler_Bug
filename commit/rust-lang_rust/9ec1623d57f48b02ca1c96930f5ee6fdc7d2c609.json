{"sha": "9ec1623d57f48b02ca1c96930f5ee6fdc7d2c609", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYzE2MjNkNTdmNDhiMDJjYTFjOTY5MzBmNWVlNmZkYzdkMmM2MDk=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-06-06T02:49:41Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:06Z"}, "message": "ident->name", "tree": {"sha": "318ab362baa90256616c56ad0746caddbe92656d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/318ab362baa90256616c56ad0746caddbe92656d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ec1623d57f48b02ca1c96930f5ee6fdc7d2c609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec1623d57f48b02ca1c96930f5ee6fdc7d2c609", "html_url": "https://github.com/rust-lang/rust/commit/9ec1623d57f48b02ca1c96930f5ee6fdc7d2c609", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ec1623d57f48b02ca1c96930f5ee6fdc7d2c609/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1734f6d38a84bea8a4fd3a8a5ed09ae2666cf14", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1734f6d38a84bea8a4fd3a8a5ed09ae2666cf14", "html_url": "https://github.com/rust-lang/rust/commit/e1734f6d38a84bea8a4fd3a8a5ed09ae2666cf14"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "7a463bc60504a728a2db5e8ddc43bdad8be0a3db", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9ec1623d57f48b02ca1c96930f5ee6fdc7d2c609/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec1623d57f48b02ca1c96930f5ee6fdc7d2c609/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=9ec1623d57f48b02ca1c96930f5ee6fdc7d2c609", "patch": "@@ -29,7 +29,7 @@ use syntax::ast_util::{Privacy, Public, Private};\n use syntax::ast_util::{variant_visibility_to_privacy, visibility_to_privacy};\n use syntax::attr;\n use syntax::parse::token;\n-use syntax::parse::token::ident_interner;\n+use syntax::parse::token::{ident_interner, interner_get};\n use syntax::parse::token::special_idents;\n use syntax::print::pprust::path_to_str;\n use syntax::codemap::{Span, dummy_sp, BytePos};\n@@ -311,7 +311,7 @@ pub enum DuplicateCheckingMode {\n \n /// One local scope.\n pub struct Rib {\n-    bindings: @mut HashMap<Ident, DefLike>,\n+    bindings: @mut HashMap<Name, DefLike>,\n     self_binding: @mut Option<DefLike>,\n     kind: RibKind,\n }\n@@ -3508,7 +3508,7 @@ impl Resolver {\n         let mut i = ribs.len();\n         while i != 0 {\n             i -= 1;\n-            match ribs[i].bindings.find(&name) {\n+            match ribs[i].bindings.find(&name.name) {\n                 Some(&def_like) => {\n                     return self.upvarify(ribs, i, def_like, span,\n                                          allow_capturing_self);\n@@ -3591,7 +3591,7 @@ impl Resolver {\n                 // Create a new rib for the self type.\n                 let self_type_rib = @Rib::new(NormalRibKind);\n                 self.type_ribs.push(self_type_rib);\n-                self_type_rib.bindings.insert(self.type_self_ident,\n+                self_type_rib.bindings.insert(self.type_self_ident.name,\n                                               DlDef(DefSelfTy(item.id)));\n \n                 // Create a new rib for the trait-wide type parameters.\n@@ -3723,7 +3723,7 @@ impl Resolver {\n                 self.type_ribs.push(function_type_rib);\n \n                 for (index, type_parameter) in generics.ty_params.iter().enumerate() {\n-                    let name = type_parameter.ident;\n+                    let ident = type_parameter.ident;\n                     debug!(\"with_type_parameter_rib: %d %d\", node_id,\n                            type_parameter.id);\n                     let def_like = DlDef(DefTyParam\n@@ -3733,7 +3733,7 @@ impl Resolver {\n                     // the item that bound it\n                     self.record_def(type_parameter.id,\n                                     DefTyParamBinder(node_id));\n-                    function_type_rib.bindings.insert(name, def_like);\n+                    function_type_rib.bindings.insert(ident.name, def_like);\n                 }\n             }\n \n@@ -4370,7 +4370,7 @@ impl Resolver {\n                                     let this = &mut *self;\n                                     let last_rib = this.value_ribs[\n                                             this.value_ribs.len() - 1];\n-                                    last_rib.bindings.insert(ident,\n+                                    last_rib.bindings.insert(ident.name,\n                                                              DlDef(def));\n                                     bindings_list.insert(ident, pat_id);\n                                 }\n@@ -4391,7 +4391,7 @@ impl Resolver {\n                                     let this = &mut *self;\n                                     let last_rib = this.value_ribs[\n                                             this.value_ribs.len() - 1];\n-                                    last_rib.bindings.insert(ident,\n+                                    last_rib.bindings.insert(ident.name,\n                                                              DlDef(def));\n                                 }\n                             }\n@@ -4957,7 +4957,7 @@ impl Resolver {\n         while j != 0 {\n             j -= 1;\n             for (&k, _) in this.value_ribs[j].bindings.iter() {\n-                maybes.push(this.session.str_of(k));\n+                maybes.push(interner_get(k));\n                 values.push(uint::max_value);\n             }\n         }\n@@ -5146,7 +5146,7 @@ impl Resolver {\n                         let this = &mut *self;\n                         let def_like = DlDef(DefLabel(expr.id));\n                         let rib = this.label_ribs[this.label_ribs.len() - 1];\n-                        rib.bindings.insert(label, def_like);\n+                        rib.bindings.insert(label.name, def_like);\n                     }\n \n                     visit::walk_expr(visitor, expr, ());\n@@ -5554,3 +5554,4 @@ pub fn resolve_crate(session: Session,\n         trait_map: resolver.trait_map.clone(),\n     }\n }\n+"}]}