{"sha": "8b923a19edd32a46ca75f234fef32081376bd111", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOTIzYTE5ZWRkMzJhNDZjYTc1ZjIzNGZlZjMyMDgxMzc2YmQxMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-17T10:40:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-17T10:40:25Z"}, "message": "Auto merge of #53190 - sekineh:thumb-cortex-m, r=jamesmunns\n\nAdd crate build test for `thumb*` targets. [IRR-2018-embedded]\n\n## Summary\n\nThis PR adds `run-make` test that compiles `cortex-m` crate for all supported `thumb*-none-*` targets using `cargo` and stage2 `rustc`.\n\n- Supported `thumb*-none-*` targets:\n  - thumbv6m-none-eabi (Bare Cortex-M0, M0+, M1)\n  - thumbv7em-none-eabi (Bare Cortex-M4, M7)\n  - thumbv7em-none-eabihf (Bare Cortex-M4F, M7F, FPU, hardfloat)\n  - thumbv7m-none-eabi (Bare Cortex-M3)\n\n## How to run & Example output\nI tested locally and all targets succeeded like below:\n```\n./x.py clean\n./x.py test --target thumbv6m-none-eabi,thumbv7em-none-eabi,thumbv7em-none-eabihf,thumbv7m-none-eabi src/test/run-make\n```\n```\nCheck compiletest suite=run-make mode=run-make (x86_64-unknown-linux-gnu -> thumbv6m-none-eabi)\n\nrunning 5 tests\n.....\ntest result: ok. 5 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\n## How to re-run\n\nRemove `stamp` file for the test run.\n```\nrm build/x86_64-unknown-linux-gnu/test/run-make/thumb-none-cortex-m/stamp\n```\nThen run `test`\n```\n./x.py test --target thumbv6m-none-eabi,thumbv7em-none-eabi,thumbv7em-none-eabihf,thumbv7m-none-eabi src/test/run-make\n(snip)\nrunning 5 tests\niiii.\ntest result: ok. 1 passed; 0 failed; 4 ignored; 0 measured; 0 filtered out\n```\n\n## Artifacts\n\nYou can examine the artifacts under the directory below:\n```\nsekineh@sekineh-VirtualBox:~/rustme10$ ls -l build/x86_64-unknown-linux-gnu/test/run-make/thumb-none-cortex-m/thumb-none-cortex-m/\ntotal 4\ndrwxrwxr-x 7 sekineh sekineh 4096  8\u6708 14 22:40 cortex-m\n```\nwhere `build/x86_64-unknown-linux-gnu/test/run-make/thumb-none-cortex-m/thumb-none-cortex-m/` is came from TMPDIR variable.\n\n## Other notes\n\nFor `test.rs` modification, I used the same logic as:\n- https://github.com/rust-lang/rust/blame/d8b3c830fbcdd14d085209a8dcc3399151f3286a/src/bootstrap/dist.rs#L652-L657\n```\n            if builder.no_std(target) == Some(true) {\n                // the `test` doesn't compile for no-std targets\n                builder.ensure(compile::Std { compiler, target });\n            } else {\n                builder.ensure(compile::Test { compiler, target });\n            }\n```\nIt is a useful snippet when adding `no_std` support to `src/bootstrap` code.\n\nCC @kennytm @jamesmunns @nerdyvaishali", "tree": {"sha": "615138636101d4f1b4d39f6a3f05aa82e380f2c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/615138636101d4f1b4d39f6a3f05aa82e380f2c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b923a19edd32a46ca75f234fef32081376bd111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b923a19edd32a46ca75f234fef32081376bd111", "html_url": "https://github.com/rust-lang/rust/commit/8b923a19edd32a46ca75f234fef32081376bd111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b923a19edd32a46ca75f234fef32081376bd111/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d06fa3a46f8e6c938f51718ed964007a81d12a7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d06fa3a46f8e6c938f51718ed964007a81d12a7d", "html_url": "https://github.com/rust-lang/rust/commit/d06fa3a46f8e6c938f51718ed964007a81d12a7d"}, {"sha": "ad78c2fc55b09624846c12f407b39852fbf573e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad78c2fc55b09624846c12f407b39852fbf573e6", "html_url": "https://github.com/rust-lang/rust/commit/ad78c2fc55b09624846c12f407b39852fbf573e6"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "f762d9414cff383d0554c76d3f8f87ad994eb8dd", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b923a19edd32a46ca75f234fef32081376bd111/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b923a19edd32a46ca75f234fef32081376bd111/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=8b923a19edd32a46ca75f234fef32081376bd111", "patch": "@@ -975,9 +975,19 @@ impl Step for Compiletest {\n             builder.ensure(compile::Rustc { compiler, target });\n         }\n \n-        if builder.no_std(target) != Some(true) {\n+        if builder.no_std(target) == Some(true) {\n+            // the `test` doesn't compile for no-std targets\n+            builder.ensure(compile::Std { compiler, target });\n+        } else {\n             builder.ensure(compile::Test { compiler, target });\n         }\n+\n+        if builder.no_std(target) == Some(true) {\n+            // for no_std run-make (e.g. thumb*),\n+            // we need a host compiler which is called by cargo.\n+            builder.ensure(compile::Std { compiler, target: compiler.host });\n+        }\n+\n         builder.ensure(native::TestHelpers { target });\n         builder.ensure(RemoteCopyLibs { compiler, target });\n "}, {"sha": "efcc93c73a5d2daf3cfd2d31a471c82ff7d5ef56", "filename": "src/test/run-make/git_clone_sha1.sh", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8b923a19edd32a46ca75f234fef32081376bd111/src%2Ftest%2Frun-make%2Fgit_clone_sha1.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8b923a19edd32a46ca75f234fef32081376bd111/src%2Ftest%2Frun-make%2Fgit_clone_sha1.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgit_clone_sha1.sh?ref=8b923a19edd32a46ca75f234fef32081376bd111", "patch": "@@ -0,0 +1,33 @@\n+#!/bin/bash -x\n+\n+# Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# Usage: $0 project_name url sha1\n+# Get the crate with the specified sha1.\n+#\n+# all arguments are required.\n+#\n+# See below link for git usage:\n+# https://stackoverflow.com/questions/3489173#14091182\n+\n+# Mandatory arguments:\n+PROJECT_NAME=$1\n+URL=$2\n+SHA1=$3\n+\n+function err_exit() {\n+    echo \"ERROR:\" $*\n+    exit 1\n+}\n+\n+git clone $URL $PROJECT_NAME || err_exit\n+cd $PROJECT_NAME || err_exit\n+git reset --hard $SHA1 || err_exit"}, {"sha": "a267016efc2e354c924e8a1a46329049536cfb3c", "filename": "src/test/run-make/thumb-none-cortex-m/Makefile", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8b923a19edd32a46ca75f234fef32081376bd111/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8b923a19edd32a46ca75f234fef32081376bd111/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile?ref=8b923a19edd32a46ca75f234fef32081376bd111", "patch": "@@ -0,0 +1,38 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# How to run this\n+# $ ./x.py clean\n+# $ ./x.py test --target thumbv6m-none-eabi,thumbv7m-none-eabi src/test/run-make\n+\n+# Supported targets:\n+# - thumbv6m-none-eabi (Bare Cortex-M0, M0+, M1)\n+# - thumbv7em-none-eabi (Bare Cortex-M4, M7)\n+# - thumbv7em-none-eabihf (Bare Cortex-M4F, M7F, FPU, hardfloat)\n+# - thumbv7m-none-eabi (Bare Cortex-M3)\n+\n+# See https://stackoverflow.com/questions/7656425/makefile-ifeq-logical-or\n+ifneq (,$(filter $(TARGET),thumbv6m-none-eabi thumbv7em-none-eabi thumbv7em-none-eabihf thumbv7m-none-eabi))\n+\n+# For cargo setting\n+RUSTC := $(RUSTC_ORIGINAL)\n+LD_LIBRARY_PATH := $(HOST_RPATH_DIR)\n+# We need to be outside of 'src' dir in order to run cargo\n+WORK_DIR := $(TMPDIR)\n+\n+HERE := $(shell pwd)\n+\n+CRATE := cortex-m\n+CRATE_URL := https://github.com/rust-embedded/cortex-m\n+CRATE_SHA1 := a448e9156e2cb1e556e5441fd65426952ef4b927 # 0.5.0\n+\n+all:\n+\tenv\n+\tmkdir -p $(WORK_DIR)\n+\t-cd $(WORK_DIR) && rm -rf $(CRATE)\n+\tcd $(WORK_DIR) && bash -x $(HERE)/../git_clone_sha1.sh $(CRATE) $(CRATE_URL) $(CRATE_SHA1)\n+\tcd $(WORK_DIR) && cd $(CRATE) && $(CARGO) build --target $(TARGET) -v\n+else\n+\n+all:\n+\n+endif"}]}