{"sha": "74cea9fdb9ca77d4104df5c28124817004ead6a3", "node_id": "C_kwDOAAsO6NoAKDc0Y2VhOWZkYjljYTc3ZDQxMDRkZjVjMjgxMjQ4MTcwMDRlYWQ2YTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T23:24:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T23:24:36Z"}, "message": "Auto merge of #96520 - lcnr:general-incoherent-impls, r=petrochenkov\n\ngeneralize \"incoherent impls\" impl for user defined types\n\nTo allow the move of `trait Error` into core.\n\ncontinues the work from #94963, finishes https://github.com/rust-lang/compiler-team/issues/487\n\nr? `@petrochenkov` cc `@yaahc`", "tree": {"sha": "9924462091e0d113140c7e087e66fd102561b63c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9924462091e0d113140c7e087e66fd102561b63c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74cea9fdb9ca77d4104df5c28124817004ead6a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74cea9fdb9ca77d4104df5c28124817004ead6a3", "html_url": "https://github.com/rust-lang/rust/commit/74cea9fdb9ca77d4104df5c28124817004ead6a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74cea9fdb9ca77d4104df5c28124817004ead6a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30f386087564243ab88a93c984c265290a31580b", "url": "https://api.github.com/repos/rust-lang/rust/commits/30f386087564243ab88a93c984c265290a31580b", "html_url": "https://github.com/rust-lang/rust/commit/30f386087564243ab88a93c984c265290a31580b"}, {"sha": "321162b25918d04e8c0196ac3d2541e0733008fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/321162b25918d04e8c0196ac3d2541e0733008fd", "html_url": "https://github.com/rust-lang/rust/commit/321162b25918d04e8c0196ac3d2541e0733008fd"}], "stats": {"total": 344, "additions": 326, "deletions": 18}, "files": [{"sha": "33d2e82b24a26c06d8f7586de88c3b14990fa183", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -650,6 +650,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         rustc_allow_incoherent_impl, AttributeType::Normal, template!(Word), ErrorFollowing,\n         \"#[rustc_allow_incoherent_impl] has to be added to all impl items of an incoherent inherent impl.\"\n     ),\n+    rustc_attr!(\n+        rustc_has_incoherent_inherent_impls, AttributeType::Normal, template!(Word), ErrorFollowing,\n+        \"#[rustc_has_incoherent_inherent_impls] allows the addition of incoherent inherent impls for \\\n+         the given type by annotating all impl items with #[rustc_allow_incoherent_impl].\"\n+    ),\n     BuiltinAttribute {\n         name: sym::rustc_diagnostic_item,\n         type_: Normal,"}, {"sha": "9e5d781892487b0fccf657ac8c354a8e7836df39", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -327,8 +327,6 @@ language_item_table! {\n     Range,                   sym::Range,               range_struct,               Target::Struct,         GenericRequirement::None;\n     RangeToInclusive,        sym::RangeToInclusive,    range_to_inclusive_struct,  Target::Struct,         GenericRequirement::None;\n     RangeTo,                 sym::RangeTo,             range_to_struct,            Target::Struct,         GenericRequirement::None;\n-\n-    CStr,                    sym::CStr,                c_str,                      Target::Struct,         GenericRequirement::None;\n }\n \n pub enum GenericRequirement {"}, {"sha": "b297012f19f2f17475a6e2807ef82cd825cce38e", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -125,6 +125,9 @@ impl CheckAttrVisitor<'_> {\n                 sym::rustc_allow_incoherent_impl => {\n                     self.check_allow_incoherent_impl(&attr, span, target)\n                 }\n+                sym::rustc_has_incoherent_inherent_impls => {\n+                    self.check_has_incoherent_inherent_impls(&attr, span, target)\n+                }\n                 sym::rustc_const_unstable\n                 | sym::rustc_const_stable\n                 | sym::unstable\n@@ -1096,7 +1099,6 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n-    /// Warns against some misuses of `#[pass_by_value]`\n     fn check_allow_incoherent_impl(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Method(MethodKind::Inherent) => true,\n@@ -1114,6 +1116,30 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    fn check_has_incoherent_inherent_impls(\n+        &self,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n+        match target {\n+            Target::Trait | Target::Struct | Target::Enum | Target::Union | Target::ForeignTy => {\n+                true\n+            }\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"`rustc_has_incoherent_inherent_impls` attribute should be applied to types or traits.\",\n+                    )\n+                    .span_label(span, \"only adts, extern types and traits are supported\")\n+                    .emit();\n+                false\n+            }\n+        }\n+    }\n+\n     /// Warns against some misuses of `#[must_use]`\n     fn check_must_use(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         let node = self.tcx.hir().get(hir_id);"}, {"sha": "d6885bebc320eb3d0fe03fca6e9ed16223922a33", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -1189,6 +1189,7 @@ symbols! {\n         rustc_error,\n         rustc_evaluate_where_clauses,\n         rustc_expected_cgu_reuse,\n+        rustc_has_incoherent_inherent_impls,\n         rustc_if_this_changed,\n         rustc_inherit_overflow_checks,\n         rustc_insignificant_dtor,"}, {"sha": "3a36686613b7c69331c1afa12b6d80c5b7793bd2", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -27,6 +27,7 @@ use rustc_span::def_id::LocalDefId;\n use rustc_span::lev_distance::{\n     find_best_match_for_name_with_substrings, lev_distance_with_substrings,\n };\n+use rustc_span::symbol::sym;\n use rustc_span::{symbol::Ident, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::autoderef::{self, Autoderef};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -642,16 +643,22 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n                 self.assemble_inherent_candidates_from_object(generalized_self_ty);\n                 self.assemble_inherent_impl_candidates_for_type(p.def_id());\n+                if self.tcx.has_attr(p.def_id(), sym::rustc_has_incoherent_inherent_impls) {\n+                    self.assemble_inherent_candidates_for_incoherent_ty(raw_self_ty);\n+                }\n             }\n             ty::Adt(def, _) => {\n                 let def_id = def.did();\n                 self.assemble_inherent_impl_candidates_for_type(def_id);\n-                if Some(def_id) == self.tcx.lang_items().c_str() {\n+                if self.tcx.has_attr(def_id, sym::rustc_has_incoherent_inherent_impls) {\n                     self.assemble_inherent_candidates_for_incoherent_ty(raw_self_ty);\n                 }\n             }\n             ty::Foreign(did) => {\n                 self.assemble_inherent_impl_candidates_for_type(did);\n+                if self.tcx.has_attr(did, sym::rustc_has_incoherent_inherent_impls) {\n+                    self.assemble_inherent_candidates_for_incoherent_ty(raw_self_ty);\n+                }\n             }\n             ty::Param(p) => {\n                 self.assemble_inherent_candidates_from_param(p);"}, {"sha": "de29a851e2fdfa21aec103cbb3c94d2e1512c040", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 58, "deletions": 13, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -55,18 +55,13 @@ impl<'tcx> ItemLikeVisitor<'_> for InherentCollect<'tcx> {\n         let self_ty = self.tcx.type_of(item.def_id);\n         match *self_ty.kind() {\n             ty::Adt(def, _) => {\n-                let def_id = def.did();\n-                if !def_id.is_local() && Some(def_id) == self.tcx.lang_items().c_str() {\n-                    self.check_primitive_impl(item.def_id, self_ty, items, ty.span)\n-                } else {\n-                    self.check_def_id(item, def_id);\n-                }\n+                self.check_def_id(item, self_ty, def.did());\n             }\n             ty::Foreign(did) => {\n-                self.check_def_id(item, did);\n+                self.check_def_id(item, self_ty, did);\n             }\n             ty::Dynamic(data, ..) if data.principal_def_id().is_some() => {\n-                self.check_def_id(item, data.principal_def_id().unwrap());\n+                self.check_def_id(item, self_ty, data.principal_def_id().unwrap());\n             }\n             ty::Dynamic(..) => {\n                 struct_span_err!(\n@@ -124,14 +119,67 @@ impl<'tcx> ItemLikeVisitor<'_> for InherentCollect<'tcx> {\n     fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n }\n \n+const INTO_CORE: &str = \"consider moving this inherent impl into `core` if possible\";\n+const INTO_DEFINING_CRATE: &str =\n+    \"consider moving this inherent impl into the crate defining the type if possible\";\n+const ADD_ATTR_TO_TY: &str = \"alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type \\\n+     and `#[rustc_allow_incoherent_impl]` to the relevant impl items\";\n+const ADD_ATTR: &str =\n+    \"alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\";\n+\n impl<'tcx> InherentCollect<'tcx> {\n-    fn check_def_id(&mut self, item: &hir::Item<'_>, def_id: DefId) {\n+    fn check_def_id(&mut self, item: &hir::Item<'_>, self_ty: Ty<'tcx>, def_id: DefId) {\n+        let impl_def_id = item.def_id;\n         if let Some(def_id) = def_id.as_local() {\n             // Add the implementation to the mapping from implementation to base\n             // type def ID, if there is a base type for this implementation and\n             // the implementation does not have any associated traits.\n             let vec = self.impls_map.inherent_impls.entry(def_id).or_default();\n-            vec.push(item.def_id.to_def_id());\n+            vec.push(impl_def_id.to_def_id());\n+            return;\n+        }\n+\n+        if self.tcx.features().rustc_attrs {\n+            let hir::ItemKind::Impl(&hir::Impl { items, .. }) = item.kind else {\n+                bug!(\"expected `impl` item: {:?}\", item);\n+            };\n+\n+            if !self.tcx.has_attr(def_id, sym::rustc_has_incoherent_inherent_impls) {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    item.span,\n+                    E0390,\n+                    \"cannot define inherent `impl` for a type outside of the crate where the type is defined\",\n+                )\n+                .help(INTO_DEFINING_CRATE)\n+                .span_help(item.span, ADD_ATTR_TO_TY)\n+                .emit();\n+                return;\n+            }\n+\n+            for impl_item in items {\n+                if !self\n+                    .tcx\n+                    .has_attr(impl_item.id.def_id.to_def_id(), sym::rustc_allow_incoherent_impl)\n+                {\n+                    struct_span_err!(\n+                        self.tcx.sess,\n+                        item.span,\n+                        E0390,\n+                        \"cannot define inherent `impl` for a type outside of the crate where the type is defined\",\n+                    )\n+                    .help(INTO_DEFINING_CRATE)\n+                    .span_help(impl_item.span, ADD_ATTR)\n+                    .emit();\n+                    return;\n+                }\n+            }\n+\n+            if let Some(simp) = simplify_type(self.tcx, self_ty, TreatParams::AsPlaceholders) {\n+                self.impls_map.incoherent_impls.entry(simp).or_default().push(impl_def_id);\n+            } else {\n+                bug!(\"unexpected self type: {:?}\", self_ty);\n+            }\n         } else {\n             struct_span_err!(\n                 self.tcx.sess,\n@@ -153,9 +201,6 @@ impl<'tcx> InherentCollect<'tcx> {\n         items: &[hir::ImplItemRef],\n         span: Span,\n     ) {\n-        const INTO_CORE: &str = \"consider moving this inherent impl into `core` if possible\";\n-        const ADD_ATTR: &str =\n-            \"alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\";\n         if !self.tcx.hir().rustc_coherence_is_core() {\n             if self.tcx.features().rustc_attrs {\n                 for item in items {"}, {"sha": "ca335d53c7caa4cab2471906db5b87580b2c69e2", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -77,7 +77,7 @@ use crate::str;\n #[derive(Hash)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"CStr\")]\n #[unstable(feature = \"core_c_str\", issue = \"94079\")]\n-#[cfg_attr(not(bootstrap), lang = \"CStr\")]\n+#[cfg_attr(not(bootstrap), rustc_has_incoherent_inherent_impls)]\n // FIXME:\n // `fn from` in `impl From<&CStr> for Box<CStr>` current implementation relies\n // on `CStr` being layout-compatible with `[u8]`."}, {"sha": "22f0d912c8f885fe9146bbe9a71dfd84a608f659", "filename": "src/test/ui/incoherent-inherent-impls/auxiliary/extern-crate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fauxiliary%2Fextern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fauxiliary%2Fextern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fauxiliary%2Fextern-crate.rs?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -0,0 +1,9 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_has_incoherent_inherent_impls]\n+pub struct StructWithAttr;\n+pub struct StructNoAttr;\n+\n+#[rustc_has_incoherent_inherent_impls]\n+pub enum EnumWithAttr {}\n+pub enum EnumNoAttr {}"}, {"sha": "0f7282bec5c0e8d8dcf5e0877457148e1b537f4c", "filename": "src/test/ui/incoherent-inherent-impls/needs-has-incoherent-impls.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.rs?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -0,0 +1,40 @@\n+// aux-build:extern-crate.rs\n+#![feature(rustc_attrs)]\n+extern crate extern_crate;\n+\n+impl extern_crate::StructWithAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n+    fn foo() {}\n+}\n+impl extern_crate::StructWithAttr {\n+    #[rustc_allow_incoherent_impl]\n+    fn bar() {}\n+}\n+impl extern_crate::StructNoAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n+    fn foo() {}\n+}\n+impl extern_crate::StructNoAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n+    #[rustc_allow_incoherent_impl]\n+    fn bar() {}\n+}\n+impl extern_crate::EnumWithAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n+    fn foo() {}\n+}\n+impl extern_crate::EnumWithAttr {\n+    #[rustc_allow_incoherent_impl]\n+    fn bar() {}\n+}\n+impl extern_crate::EnumNoAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n+    fn foo() {}\n+}\n+impl extern_crate::EnumNoAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n+    #[rustc_allow_incoherent_impl]\n+    fn bar() {}\n+}\n+\n+fn main() {}"}, {"sha": "8f70825115dd34ede3c23b669393f836204fc2f3", "filename": "src/test/ui/incoherent-inherent-impls/needs-has-incoherent-impls.stderr", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -0,0 +1,115 @@\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:5:1\n+   |\n+LL | / impl extern_crate::StructWithAttr {\n+LL | |\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:7:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:13:1\n+   |\n+LL | / impl extern_crate::StructNoAttr {\n+LL | |\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:13:1\n+   |\n+LL | / impl extern_crate::StructNoAttr {\n+LL | |\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:17:1\n+   |\n+LL | / impl extern_crate::StructNoAttr {\n+LL | |\n+LL | |     #[rustc_allow_incoherent_impl]\n+LL | |     fn bar() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:17:1\n+   |\n+LL | / impl extern_crate::StructNoAttr {\n+LL | |\n+LL | |     #[rustc_allow_incoherent_impl]\n+LL | |     fn bar() {}\n+LL | | }\n+   | |_^\n+\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:22:1\n+   |\n+LL | / impl extern_crate::EnumWithAttr {\n+LL | |\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:24:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:30:1\n+   |\n+LL | / impl extern_crate::EnumNoAttr {\n+LL | |\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:30:1\n+   |\n+LL | / impl extern_crate::EnumNoAttr {\n+LL | |\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:34:1\n+   |\n+LL | / impl extern_crate::EnumNoAttr {\n+LL | |\n+LL | |     #[rustc_allow_incoherent_impl]\n+LL | |     fn bar() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:34:1\n+   |\n+LL | / impl extern_crate::EnumNoAttr {\n+LL | |\n+LL | |     #[rustc_allow_incoherent_impl]\n+LL | |     fn bar() {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0390`."}, {"sha": "62c249e58822bc5f87bba23306a29250ee8d6b51", "filename": "src/test/ui/incoherent-inherent-impls/no-attr-empty-impl.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.rs?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -0,0 +1,18 @@\n+// aux-build:extern-crate.rs\n+extern crate extern_crate;\n+\n+impl extern_crate::StructWithAttr {}\n+//~^ ERROR cannot define inherent `impl` for a type outside of the crate\n+\n+impl extern_crate::StructNoAttr {}\n+//~^ ERROR cannot define inherent `impl` for a type outside of the crate\n+\n+impl extern_crate::EnumWithAttr {}\n+//~^ ERROR cannot define inherent `impl` for a type outside of the crate\n+\n+impl extern_crate::EnumNoAttr {}\n+//~^ ERROR cannot define inherent `impl` for a type outside of the crate\n+\n+impl f32 {} //~ ERROR cannot define inherent `impl` for primitive types\n+\n+fn main() {}"}, {"sha": "b3f8b51d0ea8bc269cadd6dfc4b3cb89a98fded2", "filename": "src/test/ui/incoherent-inherent-impls/no-attr-empty-impl.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/74cea9fdb9ca77d4104df5c28124817004ead6a3/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74cea9fdb9ca77d4104df5c28124817004ead6a3/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr?ref=74cea9fdb9ca77d4104df5c28124817004ead6a3", "patch": "@@ -0,0 +1,44 @@\n+error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/no-attr-empty-impl.rs:4:1\n+   |\n+LL | impl extern_crate::StructWithAttr {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/no-attr-empty-impl.rs:7:1\n+   |\n+LL | impl extern_crate::StructNoAttr {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/no-attr-empty-impl.rs:10:1\n+   |\n+LL | impl extern_crate::EnumWithAttr {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/no-attr-empty-impl.rs:13:1\n+   |\n+LL | impl extern_crate::EnumNoAttr {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0390]: cannot define inherent `impl` for primitive types\n+  --> $DIR/no-attr-empty-impl.rs:16:6\n+   |\n+LL | impl f32 {}\n+   |      ^^^\n+   |\n+   = help: consider using an extension trait instead\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0116, E0390.\n+For more information about an error, try `rustc --explain E0116`."}]}