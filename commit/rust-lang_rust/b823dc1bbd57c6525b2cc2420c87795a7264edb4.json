{"sha": "b823dc1bbd57c6525b2cc2420c87795a7264edb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MjNkYzFiYmQ1N2M2NTI1YjJjYzI0MjBjODc3OTVhNzI2NGVkYjQ=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-22T10:39:39Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-24T00:24:35Z"}, "message": "Also fix \u201ca RwLock*\u201d", "tree": {"sha": "14a44142aff5c85be0bd7dad854c7d9693ca7aa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14a44142aff5c85be0bd7dad854c7d9693ca7aa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b823dc1bbd57c6525b2cc2420c87795a7264edb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b823dc1bbd57c6525b2cc2420c87795a7264edb4", "html_url": "https://github.com/rust-lang/rust/commit/b823dc1bbd57c6525b2cc2420c87795a7264edb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b823dc1bbd57c6525b2cc2420c87795a7264edb4/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04fa1d81dd435fc5eaf22ed72efdfd699e1d6c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/04fa1d81dd435fc5eaf22ed72efdfd699e1d6c97", "html_url": "https://github.com/rust-lang/rust/commit/04fa1d81dd435fc5eaf22ed72efdfd699e1d6c97"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "4689a027895c2c69011d09b8ba13f67e626fe552", "filename": "compiler/rustc_data_structures/src/owning_ref/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b823dc1bbd57c6525b2cc2420c87795a7264edb4/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b823dc1bbd57c6525b2cc2420c87795a7264edb4/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs?ref=b823dc1bbd57c6525b2cc2420c87795a7264edb4", "patch": "@@ -1157,9 +1157,9 @@ pub type RefRef<'a, T, U = T> = OwningRef<Ref<'a, T>, U>;\n pub type RefMutRef<'a, T, U = T> = OwningRef<RefMut<'a, T>, U>;\n /// Typedef of an owning reference that uses a `MutexGuard` as the owner.\n pub type MutexGuardRef<'a, T, U = T> = OwningRef<MutexGuard<'a, T>, U>;\n-/// Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.\n+/// Typedef of an owning reference that uses an `RwLockReadGuard` as the owner.\n pub type RwLockReadGuardRef<'a, T, U = T> = OwningRef<RwLockReadGuard<'a, T>, U>;\n-/// Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.\n+/// Typedef of an owning reference that uses an `RwLockWriteGuard` as the owner.\n pub type RwLockWriteGuardRef<'a, T, U = T> = OwningRef<RwLockWriteGuard<'a, T>, U>;\n \n /// Typedef of a mutable owning reference that uses a `Box` as the owner.\n@@ -1173,7 +1173,7 @@ pub type StringRefMut = OwningRefMut<String, str>;\n pub type RefMutRefMut<'a, T, U = T> = OwningRefMut<RefMut<'a, T>, U>;\n /// Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.\n pub type MutexGuardRefMut<'a, T, U = T> = OwningRefMut<MutexGuard<'a, T>, U>;\n-/// Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.\n+/// Typedef of a mutable owning reference that uses an `RwLockWriteGuard` as the owner.\n pub type RwLockWriteGuardRefMut<'a, T, U = T> = OwningRef<RwLockWriteGuard<'a, T>, U>;\n \n unsafe impl<'a, T: 'a> IntoErased<'a> for Box<T> {"}, {"sha": "27a599315dc1c580095682525d05da3f03237c4e", "filename": "src/test/ui/drop/dropck_legal_cycles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b823dc1bbd57c6525b2cc2420c87795a7264edb4/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b823dc1bbd57c6525b2cc2420c87795a7264edb4/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs?ref=b823dc1bbd57c6525b2cc2420c87795a7264edb4", "patch": "@@ -368,7 +368,7 @@ pub fn main() {\n     // We can use refcells if we're single-threaded (as this test is).\n     // If one were to generalize these constructions to a\n     // multi-threaded context, then it might seem like we could choose\n-    // between either a RwLock or a Mutex to hold the owned arcs on\n+    // between either an RwLock or a Mutex to hold the owned arcs on\n     // each node.\n     //\n     // Part of the point of this test is to actually confirm that the"}]}