{"sha": "d45aa55bd6f8a3d46e1044b8be697d24623e5a58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NWFhNTViZDZmOGEzZDQ2ZTEwNDRiOGJlNjk3ZDI0NjIzZTVhNTg=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-08T11:25:18Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-08T11:25:18Z"}, "message": "Remove nested parens\n\nAnd make sure that we do not remove comments within parens.", "tree": {"sha": "9288f87113002f552d5737661684c22f63f1c656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9288f87113002f552d5737661684c22f63f1c656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d45aa55bd6f8a3d46e1044b8be697d24623e5a58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d45aa55bd6f8a3d46e1044b8be697d24623e5a58", "html_url": "https://github.com/rust-lang/rust/commit/d45aa55bd6f8a3d46e1044b8be697d24623e5a58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d45aa55bd6f8a3d46e1044b8be697d24623e5a58/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06f5d55dde016d15dbcdac97b6306cd9323cb27e", "url": "https://api.github.com/repos/rust-lang/rust/commits/06f5d55dde016d15dbcdac97b6306cd9323cb27e", "html_url": "https://github.com/rust-lang/rust/commit/06f5d55dde016d15dbcdac97b6306cd9323cb27e"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "85a2e658ef22f62a0962cfea0a6d7f9010f72064", "filename": "src/expr.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d45aa55bd6f8a3d46e1044b8be697d24623e5a58/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45aa55bd6f8a3d46e1044b8be697d24623e5a58/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d45aa55bd6f8a3d46e1044b8be697d24623e5a58", "patch": "@@ -79,7 +79,7 @@ pub fn format_expr(\n             let callee_str = callee.rewrite(context, shape)?;\n             rewrite_call(context, &callee_str, args, inner_span, shape)\n         }\n-        ast::ExprKind::Paren(ref subexpr) => rewrite_paren(context, subexpr, shape),\n+        ast::ExprKind::Paren(ref subexpr) => rewrite_paren(context, subexpr, shape, expr.span),\n         ast::ExprKind::Binary(ref op, ref lhs, ref rhs) => {\n             // FIXME: format comments between operands and operator\n             rewrite_pair(\n@@ -2425,8 +2425,36 @@ fn span_ends_with_comma(context: &RewriteContext, span: Span) -> bool {\n     result\n }\n \n-fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, shape: Shape) -> Option<String> {\n+fn rewrite_paren(\n+    context: &RewriteContext,\n+    mut subexpr: &ast::Expr,\n+    shape: Shape,\n+    mut span: Span,\n+) -> Option<String> {\n     debug!(\"rewrite_paren, shape: {:?}\", shape);\n+\n+    // Extract comments within parens.\n+    let mut pre_comment;\n+    let mut post_comment;\n+    loop {\n+        // 1 = \"(\" or \")\"\n+        let pre_span = mk_sp(span.lo() + BytePos(1), subexpr.span.lo());\n+        let post_span = mk_sp(subexpr.span.hi(), span.hi() - BytePos(1));\n+        pre_comment = rewrite_missing_comment(pre_span, shape, context)?;\n+        post_comment = rewrite_missing_comment(post_span, shape, context)?;\n+\n+        // Remove nested parens if there are no comments.\n+        if let ast::ExprKind::Paren(ref subsubexpr) = subexpr.node {\n+            if pre_comment.is_empty() && post_comment.is_empty() {\n+                span = subexpr.span;\n+                subexpr = subsubexpr;\n+                continue;\n+            }\n+        }\n+\n+        break;\n+    }\n+\n     let total_paren_overhead = paren_overhead(context);\n     let paren_overhead = total_paren_overhead / 2;\n     let sub_shape = shape\n@@ -2435,9 +2463,9 @@ fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, shape: Shape) ->\n \n     let paren_wrapper = |s: &str| {\n         if context.config.spaces_within_parens_and_brackets() && !s.is_empty() {\n-            format!(\"( {} )\", s)\n+            format!(\"( {}{}{} )\", pre_comment, s, post_comment)\n         } else {\n-            format!(\"({})\", s)\n+            format!(\"({}{}{})\", pre_comment, s, post_comment)\n         }\n     };\n "}]}