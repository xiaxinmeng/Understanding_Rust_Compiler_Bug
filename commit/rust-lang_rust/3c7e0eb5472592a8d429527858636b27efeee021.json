{"sha": "3c7e0eb5472592a8d429527858636b27efeee021", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjN2UwZWI1NDcyNTkyYThkNDI5NTI3ODU4NjM2YjI3ZWZlZWUwMjE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-06-03T09:14:27Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-06-03T13:02:21Z"}, "message": "rustc: construct statement vector directly\n\nThis commit simplifies the previous logic to construct the statement\nvector directly rather than constructing a `Vec` of\n`(hir::Stmt, Option<hir::Stmt>)` first.", "tree": {"sha": "3d92f4cb6ef1e5c5c75732b21041f769358f7155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d92f4cb6ef1e5c5c75732b21041f769358f7155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c7e0eb5472592a8d429527858636b27efeee021", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlz1Gl0ACgkQAXYLT59T\n8VTJFw/+Jgmg2P2Wu5kWBogHY8wKqVsFyV9wcPbu6jGGeioB+vM/PJkS8f6l/HL4\n7hCA42F952sEhIOZP5IQDX6+hAC8iG9wZaQx+M7JOXJAJfvdlVeG9DBMu8qQtWQN\nLrq7pzokgzu+uvoXgzCVYdHF8wOCaoNZ4XURQkf5tg/ukgGqaS7l4itZV0LCW/th\nQARG/Qbn9YFKWavbPu7Ujb+yGh/8fHDa3hTFRIFva8BErkrK5saZZxz5Yue00+ve\nnjuHdmjCILSmdhJutRUnuIHt0YLChkH86FAz0/JccYzyBu5THgpyw5kH97nvPt6e\nojS4f5qotx3LyhViUfluV+IeWezupuJI2bQlALFPcSmagjMNU7i3YVsKCrz5Rz+E\naOtlUET2KX0t6/35vcFsYVqWr4c8ywSc2+QOuEomiihETZ2vTxwF9F0EJgSrTOOA\nWy6bcayaEzXdv12mjMBtfuN5kiLDHAva2BlxVI1EvAsVMLaZvA4g+MqhlX16dct6\nm31eVPal4eBMPJa4QdEPZkuHmHkQV5rbuNGFlT43/rVvDJ4OFMrFCsHTX9QMVGF+\nT2+RMmt7Bbw/0KAPYvDllT0iHt5Zh4AFa1UGSBgsTDDnUmLaEi4e5K7cK14Jki6U\nI+i+5UDzspgSCRA1KptZ7qTfW3ID70BpmaauUc0K27FKQZ9jdd8=\n=cERj\n-----END PGP SIGNATURE-----", "payload": "tree 3d92f4cb6ef1e5c5c75732b21041f769358f7155\nparent 3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a\nauthor David Wood <david@davidtw.co> 1559553267 +0100\ncommitter David Wood <david@davidtw.co> 1559566941 +0100\n\nrustc: construct statement vector directly\n\nThis commit simplifies the previous logic to construct the statement\nvector directly rather than constructing a `Vec` of\n`(hir::Stmt, Option<hir::Stmt>)` first.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7e0eb5472592a8d429527858636b27efeee021", "html_url": "https://github.com/rust-lang/rust/commit/3c7e0eb5472592a8d429527858636b27efeee021", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c7e0eb5472592a8d429527858636b27efeee021/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a", "html_url": "https://github.com/rust-lang/rust/commit/3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "ab7a8541126617eaaa1232728483f9a21ba6bf28", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e0eb5472592a8d429527858636b27efeee021/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e0eb5472592a8d429527858636b27efeee021/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3c7e0eb5472592a8d429527858636b27efeee021", "patch": "@@ -3034,7 +3034,7 @@ impl<'a> LoweringContext<'a> {\n \n         self.lower_body(|this| {\n             let mut arguments: Vec<hir::Arg> = Vec::new();\n-            let mut statements: Vec<(hir::Stmt, Option<hir::Stmt>)> = Vec::new();\n+            let mut statements: Vec<hir::Stmt> = Vec::new();\n \n             // Async function arguments are lowered into the closure body so that they are\n             // captured and so that the drop order matches the equivalent non-async functions.\n@@ -3094,14 +3094,14 @@ impl<'a> LoweringContext<'a> {\n                     source: hir::ArgSource::AsyncFn\n                 };\n \n-                let new_statements = if is_simple_argument {\n+                if is_simple_argument {\n                     // If this is the simple case, then we only insert one statement that is\n                     // `let <pat> = <pat>;`. We re-use the original argument's pattern so that\n                     // `HirId`s are densely assigned.\n                     let expr = this.expr_ident(desugared_span, ident, new_argument_id);\n                     let stmt = this.stmt_let_pat(\n                         desugared_span, Some(P(expr)), argument.pat, hir::LocalSource::AsyncFn);\n-                    (stmt, None)\n+                    statements.push(stmt);\n                 } else {\n                     // If this is not the simple case, then we construct two statements:\n                     //\n@@ -3131,26 +3131,17 @@ impl<'a> LoweringContext<'a> {\n                         desugared_span, Some(P(pattern_expr)), argument.pat,\n                         hir::LocalSource::AsyncFn);\n \n-                    (move_stmt, Some(pattern_stmt))\n+                    statements.push(move_stmt);\n+                    statements.push(pattern_stmt);\n                 };\n \n                 arguments.push(new_argument);\n-                statements.push(new_statements);\n             }\n \n             let async_expr = this.make_async_expr(\n                 CaptureBy::Value, closure_id, None, body.span,\n                 |this| {\n-                    let mut stmts = vec![];\n-                    for (move_stmt, pattern_stmt) in statements.drain(..) {\n-                        // Insert the `let __argN = __argN` statement first.\n-                        stmts.push(move_stmt);\n-                        // Then insert the `let <pat> = __argN` statement, if there is one.\n-                        if let Some(pattern_stmt) = pattern_stmt {\n-                            stmts.push(pattern_stmt);\n-                        }\n-                    }\n-                    let body = this.lower_block_with_stmts(body, false, stmts);\n+                    let body = this.lower_block_with_stmts(body, false, statements);\n                     this.expr_block(body, ThinVec::new())\n                 });\n             (HirVec::from(arguments), this.expr(body.span, async_expr, ThinVec::new()))\n@@ -5220,10 +5211,6 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn arg(&mut self, hir_id: hir::HirId, pat: P<hir::Pat>, source: hir::ArgSource) -> hir::Arg {\n-        hir::Arg { hir_id, pat, source }\n-    }\n-\n     fn stmt(&mut self, span: Span, node: hir::StmtKind) -> hir::Stmt {\n         hir::Stmt { span, node, hir_id: self.next_id() }\n     }"}]}