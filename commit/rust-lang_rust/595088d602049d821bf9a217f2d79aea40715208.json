{"sha": "595088d602049d821bf9a217f2d79aea40715208", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NTA4OGQ2MDIwNDlkODIxYmY5YTIxN2YyZDc5YWVhNDA3MTUyMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-04T13:31:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-04T13:31:51Z"}, "message": "Auto merge of #85788 - rylev:force-warns, r=nikomatsakis\n\nSupport for force-warns\n\nImplements https://github.com/rust-lang/rust/issues/85512.\n\nThis PR adds a new command line option `force-warns` which will force the provided lints to warn even if they are allowed by some other mechanism such as `#![allow(warnings)]`.\n\nSome remaining issues:\n* https://github.com/rust-lang/rust/issues/85512 mentions that `force-warns` should also be capable of taking lint groups instead of individual lints. This is not implemented.\n* If a lint has a higher warning level than `warn`, this will cause that lint to warn instead. We probably want to allow the lint to error if it is set to a higher lint and is not allowed somewhere else.\n* One test is currently ignored because it's not working - when a deny-by-default lint is allowed, it does not currently warn under `force-warns`. I'm not sure why, but I wanted to get this in before the weekend.\n\nr? `@nikomatsakis`", "tree": {"sha": "2b3361a54d36e5381071da8bd4a77207de2c4ec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3361a54d36e5381071da8bd4a77207de2c4ec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/595088d602049d821bf9a217f2d79aea40715208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/595088d602049d821bf9a217f2d79aea40715208", "html_url": "https://github.com/rust-lang/rust/commit/595088d602049d821bf9a217f2d79aea40715208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/595088d602049d821bf9a217f2d79aea40715208/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289ada5ed41fd1b9a3ffe2b694e6e73079528587", "url": "https://api.github.com/repos/rust-lang/rust/commits/289ada5ed41fd1b9a3ffe2b694e6e73079528587", "html_url": "https://github.com/rust-lang/rust/commit/289ada5ed41fd1b9a3ffe2b694e6e73079528587"}, {"sha": "896898ed43bb776db830717755bcccc404c20277", "url": "https://api.github.com/repos/rust-lang/rust/commits/896898ed43bb776db830717755bcccc404c20277", "html_url": "https://github.com/rust-lang/rust/commit/896898ed43bb776db830717755bcccc404c20277"}], "stats": {"total": 344, "additions": 321, "deletions": 23}, "files": [{"sha": "a8df1b0952c18297e38febb48793c5ab995947ee", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -334,8 +334,14 @@ impl LintStore {\n         }\n     }\n \n-    /// Checks the validity of lint names derived from the command line\n-    pub fn check_lint_name_cmdline(&self, sess: &Session, lint_name: &str, level: Level) {\n+    /// Checks the validity of lint names derived from the command line. Returns\n+    /// true if the lint is valid, false otherwise.\n+    pub fn check_lint_name_cmdline(\n+        &self,\n+        sess: &Session,\n+        lint_name: &str,\n+        level: Option<Level>,\n+    ) -> bool {\n         let db = match self.check_lint_name(lint_name, None) {\n             CheckLintNameResult::Ok(_) => None,\n             CheckLintNameResult::Warning(ref msg, _) => Some(sess.struct_warn(msg)),\n@@ -361,18 +367,23 @@ impl LintStore {\n         };\n \n         if let Some(mut db) = db {\n-            let msg = format!(\n-                \"requested on the command line with `{} {}`\",\n-                match level {\n-                    Level::Allow => \"-A\",\n-                    Level::Warn => \"-W\",\n-                    Level::Deny => \"-D\",\n-                    Level::Forbid => \"-F\",\n-                },\n-                lint_name\n-            );\n-            db.note(&msg);\n+            if let Some(level) = level {\n+                let msg = format!(\n+                    \"requested on the command line with `{} {}`\",\n+                    match level {\n+                        Level::Allow => \"-A\",\n+                        Level::Warn => \"-W\",\n+                        Level::Deny => \"-D\",\n+                        Level::Forbid => \"-F\",\n+                    },\n+                    lint_name\n+                );\n+                db.note(&msg);\n+            }\n             db.emit();\n+            false\n+        } else {\n+            true\n         }\n     }\n "}, {"sha": "0ee434f5fb50bae3e359d986b90936c9027c1470", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -88,7 +88,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n-            store.check_lint_name_cmdline(sess, &lint_name, level);\n+            store.check_lint_name_cmdline(sess, &lint_name, Some(level));\n             let orig_level = level;\n \n             // If the cap is less than this specified level, e.g., if we've got\n@@ -109,6 +109,16 @@ impl<'s> LintLevelsBuilder<'s> {\n             }\n         }\n \n+        for lint_name in &sess.opts.force_warns {\n+            let valid = store.check_lint_name_cmdline(sess, lint_name, None);\n+            if valid {\n+                let lints = store\n+                    .find_lints(lint_name)\n+                    .unwrap_or_else(|_| bug!(\"A valid lint failed to produce a lint ids\"));\n+                self.sets.force_warns.extend(&lints);\n+            }\n+        }\n+\n         self.sets.list.push(LintSet::CommandLine { specs });\n     }\n \n@@ -142,6 +152,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                     LintLevelSource::Default => false,\n                     LintLevelSource::Node(symbol, _, _) => self.store.is_lint_group(symbol),\n                     LintLevelSource::CommandLine(symbol, _) => self.store.is_lint_group(symbol),\n+                    LintLevelSource::ForceWarn(_symbol) => {\n+                        bug!(\"forced warn lint returned a forbid lint level\")\n+                    }\n                 };\n                 debug!(\n                     \"fcw_warning={:?}, specs.get(&id) = {:?}, old_src={:?}, id_name={:?}\",\n@@ -166,6 +179,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         LintLevelSource::CommandLine(_, _) => {\n                             diag_builder.note(\"`forbid` lint level was set on command line\");\n                         }\n+                        _ => bug!(\"forced warn lint returned a forbid lint level\"),\n                     }\n                     diag_builder.emit();\n                 };"}, {"sha": "4c7ea937ceb7dd1d9f486b05daba3248c89674c7", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -1,7 +1,7 @@\n use std::cmp;\n \n use crate::ich::StableHashingContext;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n@@ -28,6 +28,9 @@ pub enum LintLevelSource {\n     /// The provided `Level` is the level specified on the command line.\n     /// (The actual level may be lower due to `--cap-lints`.)\n     CommandLine(Symbol, Level),\n+\n+    /// Lint is being forced to warn no matter what.\n+    ForceWarn(Symbol),\n }\n \n impl LintLevelSource {\n@@ -36,6 +39,7 @@ impl LintLevelSource {\n             LintLevelSource::Default => symbol::kw::Default,\n             LintLevelSource::Node(name, _, _) => name,\n             LintLevelSource::CommandLine(name, _) => name,\n+            LintLevelSource::ForceWarn(name) => name,\n         }\n     }\n \n@@ -44,6 +48,7 @@ impl LintLevelSource {\n             LintLevelSource::Default => DUMMY_SP,\n             LintLevelSource::Node(_, span, _) => span,\n             LintLevelSource::CommandLine(_, _) => DUMMY_SP,\n+            LintLevelSource::ForceWarn(_) => DUMMY_SP,\n         }\n     }\n }\n@@ -55,6 +60,7 @@ pub type LevelAndSource = (Level, LintLevelSource);\n pub struct LintLevelSets {\n     pub list: Vec<LintSet>,\n     pub lint_cap: Level,\n+    pub force_warns: FxHashSet<LintId>,\n }\n \n #[derive(Debug)]\n@@ -73,7 +79,11 @@ pub enum LintSet {\n \n impl LintLevelSets {\n     pub fn new() -> Self {\n-        LintLevelSets { list: Vec::new(), lint_cap: Level::Forbid }\n+        LintLevelSets {\n+            list: Vec::new(),\n+            lint_cap: Level::Forbid,\n+            force_warns: FxHashSet::default(),\n+        }\n     }\n \n     pub fn get_lint_level(\n@@ -83,6 +93,11 @@ impl LintLevelSets {\n         aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n         sess: &Session,\n     ) -> LevelAndSource {\n+        // Check whether we should always warn\n+        if self.force_warns.contains(&LintId::of(lint)) {\n+            return (Level::Warn, LintLevelSource::ForceWarn(Symbol::intern(lint.name)));\n+        }\n+\n         let (level, mut src) = self.get_lint_id_level(LintId::of(lint), idx, aux);\n \n         // If `level` is none then we actually assume the default level for this\n@@ -176,11 +191,11 @@ impl LintLevelMap {\n impl<'a> HashStable<StableHashingContext<'a>> for LintLevelMap {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let LintLevelMap { ref sets, ref id_to_set } = *self;\n+        let LintLevelMap { ref sets, ref id_to_set, .. } = *self;\n \n         id_to_set.hash_stable(hcx, hasher);\n \n-        let LintLevelSets { ref list, lint_cap } = *sets;\n+        let LintLevelSets { ref list, lint_cap, .. } = *sets;\n \n         lint_cap.hash_stable(hcx, hasher);\n \n@@ -346,6 +361,13 @@ pub fn struct_lint_level<'s, 'd>(\n                     );\n                 }\n             }\n+            LintLevelSource::ForceWarn(_) => {\n+                sess.diag_note_once(\n+                    &mut err,\n+                    DiagnosticMessageId::from(lint),\n+                    \"warning forced by `force-warns` commandline option\",\n+                );\n+            }\n         }\n \n         err.code(DiagnosticId::Lint { name, has_future_breakage });"}, {"sha": "94d2acc0602698104720d956c3a512e351baf777", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -677,6 +677,7 @@ impl Default for Options {\n             optimize: OptLevel::No,\n             debuginfo: DebugInfo::None,\n             lint_opts: Vec::new(),\n+            force_warns: Vec::new(),\n             lint_cap: None,\n             describe_lints: false,\n             output_types: OutputTypes(BTreeMap::new()),\n@@ -1092,6 +1093,13 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n              level\",\n             \"LEVEL\",\n         ),\n+        opt::multi_s(\n+            \"\",\n+            \"force-warns\",\n+            \"Specifiy lints that should warn even if \\\n+             they are allowed somewhere else\",\n+            \"LINT\",\n+        ),\n         opt::multi_s(\"C\", \"codegen\", \"Set a codegen option\", \"OPT[=VALUE]\"),\n         opt::flag_s(\"V\", \"version\", \"Print version info and exit\"),\n         opt::flag_s(\"v\", \"verbose\", \"Use verbose output\"),\n@@ -1156,7 +1164,8 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n pub fn get_cmd_lint_options(\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n-) -> (Vec<(String, lint::Level)>, bool, Option<lint::Level>) {\n+    debugging_opts: &DebuggingOptions,\n+) -> (Vec<(String, lint::Level)>, bool, Option<lint::Level>, Vec<String>) {\n     let mut lint_opts_with_position = vec![];\n     let mut describe_lints = false;\n \n@@ -1189,7 +1198,18 @@ pub fn get_cmd_lint_options(\n         lint::Level::from_str(&cap)\n             .unwrap_or_else(|| early_error(error_format, &format!(\"unknown lint level: `{}`\", cap)))\n     });\n-    (lint_opts, describe_lints, lint_cap)\n+\n+    if !debugging_opts.unstable_options && matches.opt_present(\"force-warns\") {\n+        early_error(\n+            error_format,\n+            \"the `-Z unstable-options` flag must also be passed to enable \\\n+            the flag `--force-warns=lints`\",\n+        );\n+    }\n+\n+    let force_warns = matches.opt_strs(\"force-warns\");\n+\n+    (lint_opts, describe_lints, lint_cap, force_warns)\n }\n \n /// Parses the `--color` flag.\n@@ -1926,9 +1946,10 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n-    let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n-\n     let mut debugging_opts = DebuggingOptions::build(matches, error_format);\n+    let (lint_opts, describe_lints, lint_cap, force_warns) =\n+        get_cmd_lint_options(matches, error_format, &debugging_opts);\n+\n     check_debug_option_stability(&debugging_opts, error_format, json_rendered);\n \n     if !debugging_opts.unstable_options && json_unused_externs {\n@@ -2100,6 +2121,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         optimize: opt_level,\n         debuginfo,\n         lint_opts,\n+        force_warns,\n         lint_cap,\n         describe_lints,\n         output_types,"}, {"sha": "58a53b3de6eb05d52cc8a1c5c740a99a7ba334ed", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -130,6 +130,7 @@ top_level_options!(\n         debuginfo: DebugInfo [TRACKED],\n         lint_opts: Vec<(String, lint::Level)> [TRACKED],\n         lint_cap: Option<lint::Level> [TRACKED],\n+        force_warns: Vec<String> [TRACKED],\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n         search_paths: Vec<SearchPath> [UNTRACKED],"}, {"sha": "0a205be096c004ad54082db33a8d13ca97d781ec", "filename": "src/doc/unstable-book/src/compiler-flags/force-warns.md", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fforce-warns.md", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fforce-warns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fforce-warns.md?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,21 @@\n+# `force-warns`\n+\n+The tracking issue for this feature is: [#85512](https://github.com/rust-lang/rust/issues/85512).\n+\n+------------------------\n+\n+This feature allows you to cause any lint to produce a warning even if the lint has a different level by default or another level is set somewhere else. For instance, the `force-warns` option can be used to make a lint (e.g., `dead_code`) produce a warning even if that lint is allowed in code with `#![allow(dead_code)]`.\n+\n+## Example\n+\n+```rust,ignore (partial-example)\n+#![allow(dead_code)]\n+\n+fn dead_function() {}\n+// This would normally not produce a warning even though the\n+// function is not used, because dead code is being allowed\n+\n+fn main() {}\n+```\n+\n+We can force a warning to be produced by providing `--force-warns dead_code` to rustc."}, {"sha": "1b5a00dde59bce80aeac714e5c982662e96a13c4", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -628,7 +628,8 @@ impl Options {\n         let generate_redirect_map = matches.opt_present(\"generate-redirect-map\");\n         let show_type_layout = matches.opt_present(\"show-type-layout\");\n \n-        let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n+        let (lint_opts, describe_lints, lint_cap, _) =\n+            get_cmd_lint_options(matches, error_format, &debugging_opts);\n \n         Ok(Options {\n             input,"}, {"sha": "7c93a094807139b80dc4645390d9eb433962500c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -510,6 +510,14 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"LEVEL\",\n             )\n         }),\n+        unstable(\"force-warns\", |o| {\n+            o.optopt(\n+                \"\",\n+                \"force-warns\",\n+                \"Lints that will warn even if allowed somewhere else\",\n+                \"LINTS\",\n+            )\n+        }),\n         unstable(\"index-page\", |o| {\n             o.optopt(\"\", \"index-page\", \"Markdown file to be used as index page\", \"PATH\")\n         }),"}, {"sha": "aa20d6aa4bf27b35accfeaed036ec6f0ebd77d1d", "filename": "src/test/run-make/unstable-flag-required/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Frun-make%2Funstable-flag-required%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Frun-make%2Funstable-flag-required%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funstable-flag-required%2FMakefile?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -2,3 +2,4 @@\n \n all:\n \t$(RUSTDOC) --output-format=json x.html 2>&1 | diff - output-format-json.stderr\n+\t$(RUSTC) --force-warns dead_code x.rs 2>&1 | diff - force-warns.stderr"}, {"sha": "e0936196a116f35e6cfd981a673d0634b7a8a5a5", "filename": "src/test/run-make/unstable-flag-required/force-warns.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Frun-make%2Funstable-flag-required%2Fforce-warns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Frun-make%2Funstable-flag-required%2Fforce-warns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funstable-flag-required%2Fforce-warns.stderr?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,2 @@\n+error: the `-Z unstable-options` flag must also be passed to enable the flag `--force-warns=lints`\n+"}, {"sha": "d4a5056ddf3db8f7ea12d29669c671acf988aa12", "filename": "src/test/ui/lint/force-warn/force-allowed-by-default-lint.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-by-default-lint.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: --force-warns elided_lifetimes_in_paths\n+// check-pass\n+\n+struct Foo<'a> {\n+    x: &'a u32,\n+}\n+\n+fn foo(x: &Foo) {}\n+//~^ WARN hidden lifetime parameters in types are deprecated\n+\n+fn main() {}"}, {"sha": "0e0e934c7655f5796d4b2ace32b2a18a62913552", "filename": "src/test/ui/lint/force-warn/force-allowed-by-default-lint.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-by-default-lint.stderr?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,10 @@\n+warning: hidden lifetime parameters in types are deprecated\n+  --> $DIR/force-allowed-by-default-lint.rs:8:12\n+   |\n+LL | fn foo(x: &Foo) {}\n+   |            ^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |\n+   = note: warning forced by `force-warns` commandline option\n+\n+warning: 1 warning emitted\n+"}, {"sha": "afd2d6ec322e4478e6e3179528d6f423f7d2907a", "filename": "src/test/ui/lint/force-warn/force-allowed-deny-by-default-lint.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny-by-default-lint.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: --force-warns const_err\n+// check-pass\n+\n+#![allow(const_err)]\n+const C: i32 = 1 / 0;\n+//~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler\n+\n+fn main() {}"}, {"sha": "bad12f94b18053cec336742f321f7ce3b1e37b2c", "filename": "src/test/ui/lint/force-warn/force-allowed-deny-by-default-lint.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny-by-default-lint.stderr?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,14 @@\n+warning: any use of this value will cause an error\n+  --> $DIR/force-allowed-deny-by-default-lint.rs:5:16\n+   |\n+LL | const C: i32 = 1 / 0;\n+   | ---------------^^^^^-\n+   |                |\n+   |                attempt to divide `1_i32` by zero\n+   |\n+   = note: warning forced by `force-warns` commandline option\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "5c83c525e38b5ddf6f55144f235347183b942a01", "filename": "src/test/ui/lint/force-warn/force-allowed-warning.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: --force-warns dead_code\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+fn dead_function() {}\n+//~^ WARN function is never used\n+\n+fn main() {}"}, {"sha": "145798a32a9eff5c8aa051de6e9d8f30087c6c71", "filename": "src/test/ui/lint/force-warn/force-allowed-warning.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.stderr?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,10 @@\n+warning: function is never used: `dead_function`\n+  --> $DIR/force-allowed-warning.rs:6:4\n+   |\n+LL | fn dead_function() {}\n+   |    ^^^^^^^^^^^^^\n+   |\n+   = note: warning forced by `force-warns` commandline option\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4f267f085d544e4e3e092944391e04d77b4b7ca3", "filename": "src/test/ui/lint/force-warn/force-deny-by-default-lint.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-deny-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-deny-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-deny-by-default-lint.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: --force-warns const_err\n+// check-pass\n+\n+const C: i32 = 1 / 0;\n+//~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler\n+\n+fn main() {}"}, {"sha": "4b004cf367d94cb4b525ac4c866762bfeb779835", "filename": "src/test/ui/lint/force-warn/force-deny-by-default-lint.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-deny-by-default-lint.stderr?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,14 @@\n+warning: any use of this value will cause an error\n+  --> $DIR/force-deny-by-default-lint.rs:4:16\n+   |\n+LL | const C: i32 = 1 / 0;\n+   | ---------------^^^^^-\n+   |                |\n+   |                attempt to divide `1_i32` by zero\n+   |\n+   = note: warning forced by `force-warns` commandline option\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "5501faa437aaea7bfcfabc56ed873d034b726bf4", "filename": "src/test/ui/lint/force-warn/force-lint-allow-all-warnings.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-allow-all-warnings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-allow-all-warnings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-allow-all-warnings.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: --force-warns dead_code\n+// check-pass\n+\n+#![allow(warnings)]\n+\n+fn dead_function() {}\n+//~^ WARN function is never used\n+\n+fn main() {}"}, {"sha": "577dbe1fea8df452eddc5de2cef378ee62c8ea0e", "filename": "src/test/ui/lint/force-warn/force-lint-allow-all-warnings.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-allow-all-warnings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-allow-all-warnings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-allow-all-warnings.stderr?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,10 @@\n+warning: function is never used: `dead_function`\n+  --> $DIR/force-lint-allow-all-warnings.rs:6:4\n+   |\n+LL | fn dead_function() {}\n+   |    ^^^^^^^^^^^^^\n+   |\n+   = note: warning forced by `force-warns` commandline option\n+\n+warning: 1 warning emitted\n+"}, {"sha": "9009971f0cff3544830de802ecf27021c63c1a5c", "filename": "src/test/ui/lint/force-warn/force-lint-group-allow-all-warnings.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-group-allow-all-warnings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-group-allow-all-warnings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-group-allow-all-warnings.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: --force-warns nonstandard_style\n+// check-pass\n+\n+#![allow(warnings)]\n+\n+pub fn FUNCTION() {}\n+//~^ WARN function `FUNCTION` should have a snake case name\n+\n+fn main() {}"}, {"sha": "8665fa2610a3a08f392f08dad25ee59ca240a08d", "filename": "src/test/ui/lint/force-warn/force-lint-group-allow-all-warnings.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-group-allow-all-warnings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-group-allow-all-warnings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-group-allow-all-warnings.stderr?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,10 @@\n+warning: function `FUNCTION` should have a snake case name\n+  --> $DIR/force-lint-group-allow-all-warnings.rs:6:8\n+   |\n+LL | pub fn FUNCTION() {}\n+   |        ^^^^^^^^ help: convert the identifier to snake case: `function`\n+   |\n+   = note: warning forced by `force-warns` commandline option\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b68b979ca11c83ff9e74f619df43b85d81949182", "filename": "src/test/ui/lint/force-warn/force-lint-in-allowed-group.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: --force-warns bare_trait_objects\n+// check-pass\n+\n+#![allow(rust_2018_idioms)]\n+\n+pub trait SomeTrait {}\n+\n+pub fn function(_x: Box<SomeTrait>) {}\n+//~^ WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this was previously accepted by the compiler\n+\n+fn main() {}"}, {"sha": "40750ffea8c87f2b717c4d92e39f29f28a8e9947", "filename": "src/test/ui/lint/force-warn/force-lint-in-allowed-group.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,12 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/force-lint-in-allowed-group.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |\n+   = note: warning forced by `force-warns` commandline option\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "357a79b383d02655339f3fd484489bb998eac743", "filename": "src/test/ui/lint/force-warn/force-warn-group-allow-warning.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: --force-warns rust_2018_idioms\n+// check-pass\n+\n+#![allow(bare_trait_objects)]\n+\n+pub trait SomeTrait {}\n+\n+pub fn function(_x: Box<SomeTrait>) {}\n+//~^ WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this was previously accepted by the compiler\n+\n+fn main() {}"}, {"sha": "88ae846caa0a940e5507ca889975b61f50feeae2", "filename": "src/test/ui/lint/force-warn/force-warn-group-allow-warning.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,12 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/force-warn-group-allow-warning.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |\n+   = note: warning forced by `force-warns` commandline option\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a4615df42de2d388d88adba1fb220fe2ce4fb4e6", "filename": "src/test/ui/lint/force-warn/force-warn-group.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: --force-warns rust_2018_idioms\n+// check-pass\n+\n+#![allow(rust_2018_idioms)]\n+\n+pub trait SomeTrait {}\n+\n+pub fn function(_x: Box<SomeTrait>) {}\n+//~^ WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this was previously accepted by the compiler\n+\n+fn main() {}"}, {"sha": "f808727991ed45da83e17d5f4a8262b09316346e", "filename": "src/test/ui/lint/force-warn/force-warn-group.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595088d602049d821bf9a217f2d79aea40715208/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr?ref=595088d602049d821bf9a217f2d79aea40715208", "patch": "@@ -0,0 +1,12 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/force-warn-group.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |\n+   = note: warning forced by `force-warns` commandline option\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+\n+warning: 1 warning emitted\n+"}]}