{"sha": "ff0f5de3b3220e1276bfc9a70ce1787ca7a45388", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMGY1ZGUzYjMyMjBlMTI3NmJmYzlhNzBjZTE3ODdjYTdhNDUzODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-14T18:47:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-14T18:47:34Z"}, "message": "Auto merge of #45821 - djzin:unreachable-match-arms, r=nikomatsakis\n\nalways add an unreachable branch on matches to give more info to llvm\n\nAs part of https://github.com/djzin/rustc-optimization I discovered that some simple enum optimizations (src/unary/three_valued_enum.rs and src/unary/four_valued_enum.rs in the repo) are not applied - and the reason for this is that we erase the info that the discriminant of an enum is one of the options by putting the last one in an \"otherwise\" branch. This patch adds an extra branch so that LLVM can know what the possibilities are for the discriminant, which fixes the three- and four- valued cases.\n\nNote that for whatever reason, this doesn't fix the case of 2 variants (most notably `Option` and `Result` have 2 variants) - a pass re-ordering might fix this or we may wish to add \"assume\" annotations on discriminants to force it to optimize.", "tree": {"sha": "f7c5ea166f08d25ff100eb6b88a8c9ecea683c01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c5ea166f08d25ff100eb6b88a8c9ecea683c01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388", "html_url": "https://github.com/rust-lang/rust/commit/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbeb5bf890211608bff5d28c3801c1a217a78d81", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbeb5bf890211608bff5d28c3801c1a217a78d81", "html_url": "https://github.com/rust-lang/rust/commit/dbeb5bf890211608bff5d28c3801c1a217a78d81"}, {"sha": "5b1cc1d81024a28b77d40a33b49b2d396a120b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1cc1d81024a28b77d40a33b49b2d396a120b69", "html_url": "https://github.com/rust-lang/rust/commit/5b1cc1d81024a28b77d40a33b49b2d396a120b69"}], "stats": {"total": 134, "additions": 103, "deletions": 31}, "files": [{"sha": "1cf35af3a9e1ba796da7415b18b183a8e7b93d5d", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=ff0f5de3b3220e1276bfc9a70ce1787ca7a45388", "patch": "@@ -205,7 +205,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 if let Some(otherwise_block) = otherwise_block {\n                     targets.push(otherwise_block);\n                 } else {\n-                    values.pop();\n+                    targets.push(self.unreachable_block());\n                 }\n                 debug!(\"num_enum_variants: {}, tested variants: {:?}, variants: {:?}\",\n                        num_enum_variants, values, variants);"}, {"sha": "83326f7323767d2369fa6f2bc76a25d073fbf144", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=ff0f5de3b3220e1276bfc9a70ce1787ca7a45388", "patch": "@@ -307,6 +307,8 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     cached_resume_block: Option<BasicBlock>,\n     /// cached block with the RETURN terminator\n     cached_return_block: Option<BasicBlock>,\n+    /// cached block with the UNREACHABLE terminator\n+    cached_unreachable_block: Option<BasicBlock>,\n }\n \n struct CFG<'tcx> {\n@@ -400,6 +402,11 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                               TerminatorKind::Goto { target: return_block });\n         builder.cfg.terminate(return_block, source_info,\n                               TerminatorKind::Return);\n+        // Attribute any unreachable codepaths to the function's closing brace\n+        if let Some(unreachable_block) = builder.cached_unreachable_block {\n+            builder.cfg.terminate(unreachable_block, source_info,\n+                                  TerminatorKind::Unreachable);\n+        }\n         return_block.unit()\n     }));\n     assert_eq!(block, builder.return_block());\n@@ -502,7 +509,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             var_indices: NodeMap(),\n             unit_temp: None,\n             cached_resume_block: None,\n-            cached_return_block: None\n+            cached_return_block: None,\n+            cached_unreachable_block: None,\n         };\n \n         assert_eq!(builder.cfg.start_new_block(), START_BLOCK);\n@@ -631,6 +639,17 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n         }\n     }\n+\n+    fn unreachable_block(&mut self) -> BasicBlock {\n+        match self.cached_unreachable_block {\n+            Some(ub) => ub,\n+            None => {\n+                let ub = self.cfg.start_new_block();\n+                self.cached_unreachable_block = Some(ub);\n+                ub\n+            }\n+        }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "c0f2f64f82c8d65dd5034b9717aa3afd9c34fb34", "filename": "src/test/codegen/match-optimizes-away.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388/src%2Ftest%2Fcodegen%2Fmatch-optimizes-away.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388/src%2Ftest%2Fcodegen%2Fmatch-optimizes-away.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmatch-optimizes-away.rs?ref=ff0f5de3b3220e1276bfc9a70ce1787ca7a45388", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// no-system-llvm\n+// compile-flags: -O\n+#![crate_type=\"lib\"]\n+\n+pub enum Three { First, Second, Third }\n+use Three::*;\n+\n+pub enum Four { First, Second, Third, Fourth }\n+use Four::*;\n+\n+#[no_mangle]\n+pub fn three_valued(x: Three) -> Three {\n+    // CHECK-LABEL: @three_valued\n+    // CHECK-NEXT: {{^.*:$}}\n+    // CHECK-NEXT: ret i8 %0\n+    match x {\n+        First => First,\n+        Second => Second,\n+        Third => Third,\n+    }\n+}\n+\n+#[no_mangle]\n+pub fn four_valued(x: Four) -> Four {\n+    // CHECK-LABEL: @four_valued\n+    // CHECK-NEXT: {{^.*:$}}\n+    // CHECK-NEXT: ret i8 %0\n+    match x {\n+        First => First,\n+        Second => Second,\n+        Third => Third,\n+        Fourth => Fourth,\n+    }\n+}"}, {"sha": "660b6346c57f16cfde0c095096dfc0404727aaf7", "filename": "src/test/codegen/match.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388/src%2Ftest%2Fcodegen%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388/src%2Ftest%2Fcodegen%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmatch.rs?ref=ff0f5de3b3220e1276bfc9a70ce1787ca7a45388", "patch": "@@ -21,12 +21,15 @@ pub enum E {\n #[no_mangle]\n pub fn exhaustive_match(e: E) {\n // CHECK: switch{{.*}}, label %[[OTHERWISE:[a-zA-Z0-9_]+]] [\n-// CHECK-NEXT: i[[TY:[0-9]+]] [[DISCR:[0-9]+]], label %[[TRUE:[a-zA-Z0-9_]+]]\n+// CHECK-NEXT: i[[TY:[0-9]+]] [[DISCR:[0-9]+]], label %[[A:[a-zA-Z0-9_]+]]\n+// CHECK-NEXT: i[[TY:[0-9]+]] [[DISCR:[0-9]+]], label %[[B:[a-zA-Z0-9_]+]]\n // CHECK-NEXT: ]\n-// CHECK: [[TRUE]]:\n+// CHECK: [[A]]:\n // CHECK-NEXT: br label %[[EXIT:[a-zA-Z0-9_]+]]\n-// CHECK: [[OTHERWISE]]:\n+// CHECK: [[B]]:\n // CHECK-NEXT: br label %[[EXIT:[a-zA-Z0-9_]+]]\n+// CHECK: [[OTHERWISE]]:\n+// CHECK-NEXT: unreachable\n     match e {\n         E::A => (),\n         E::B => (),"}, {"sha": "318db7a9e3e1ab84a34e4d75d2dc03663eb2b59e", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0f5de3b3220e1276bfc9a70ce1787ca7a45388/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=ff0f5de3b3220e1276bfc9a70ce1787ca7a45388", "patch": "@@ -54,53 +54,56 @@ fn main() {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n //      _5 = discriminant(_2);\n-//      switchInt(_5) -> [0isize: bb5, otherwise: bb3];\n+//      switchInt(_5) -> [0isize: bb5, 1isize: bb3, otherwise: bb7];\n //  }\n //  bb1: { // arm1\n //      StorageLive(_7);\n //      _7 = _3;\n //      _1 = (const 1i32, _7);\n //      StorageDead(_7);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n //  bb2: { // binding3(empty) and arm3\n //      _1 = (const 3i32, const 3i32);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n //  bb3: {\n-//      falseEdges -> [real: bb7, imaginary: bb4]; //pre_binding1\n+//      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n //  }\n //  bb4: {\n-//      falseEdges -> [real: bb10, imaginary: bb5]; //pre_binding2\n+//      falseEdges -> [real: bb11, imaginary: bb5]; //pre_binding2\n //  }\n //  bb5: {\n //      falseEdges -> [real: bb2, imaginary: bb6]; //pre_binding3\n //  }\n //  bb6: {\n //      unreachable;\n //  }\n-//  bb7: { // binding1 and guard\n+//  bb7: {\n+//      unreachable;\n+//  }\n+//  bb8: { // binding1 and guard\n //      StorageLive(_3);\n //      _3 = ((_2 as Some).0: i32);\n //      StorageLive(_6);\n-//      _6 = const guard() -> bb8;\n+//      _6 = const guard() -> bb9;\n //  }\n-//  bb8: { // end of guard\n-//      switchInt(_6) -> [0u8: bb9, otherwise: bb1];\n+//  bb9: { // end of guard\n+//      switchInt(_6) -> [0u8: bb10, otherwise: bb1];\n //  }\n-//  bb9: { // to pre_binding2\n+//  bb10: { // to pre_binding2\n //      falseEdges -> [real: bb4, imaginary: bb4];\n //  }\n-//  bb10: { // bindingNoLandingPads.before.mir2 and arm2\n+//  bb11: { // bindingNoLandingPads.before.mir2 and arm2\n //      StorageLive(_4);\n //      _4 = ((_2 as Some).0: i32);\n //      StorageLive(_8);\n //      _8 = _4;\n //      _1 = (const 2i32, _8);\n //      StorageDead(_8);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n-//  bb11: {\n+//  bb12: {\n //      ...\n //      return;\n //  }\n@@ -111,53 +114,56 @@ fn main() {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n //      _5 = discriminant(_2);\n-//      switchInt(_5) -> [0isize: bb4, otherwise: bb3];\n+//      switchInt(_5) -> [0isize: bb4, 1isize: bb3, otherwise: bb7];\n //  }\n //  bb1: { // arm1\n //      StorageLive(_7);\n //      _7 = _3;\n //      _1 = (const 1i32, _7);\n //      StorageDead(_7);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n //  bb2: { // binding3(empty) and arm3\n //      _1 = (const 3i32, const 3i32);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n //  bb3: {\n-//      falseEdges -> [real: bb7, imaginary: bb4]; //pre_binding1\n+//      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n //  }\n //  bb4: {\n //      falseEdges -> [real: bb2, imaginary: bb5]; //pre_binding2\n //  }\n //  bb5: {\n-//      falseEdges -> [real: bb10, imaginary: bb6]; //pre_binding3\n+//      falseEdges -> [real: bb11, imaginary: bb6]; //pre_binding3\n //  }\n //  bb6: {\n //      unreachable;\n //  }\n-//  bb7: { // binding1 and guard\n+//  bb7: {\n+//      unreachable;\n+//  }\n+//  bb8: { // binding1 and guard\n //      StorageLive(_3);\n //      _3 = ((_2 as Some).0: i32);\n //      StorageLive(_6);\n-//      _6 = const guard() -> bb8;\n+//      _6 = const guard() -> bb9;\n //  }\n-//  bb8: { // end of guard\n-//      switchInt(_6) -> [0u8: bb9, otherwise: bb1];\n+//  bb9: { // end of guard\n+//      switchInt(_6) -> [0u8: bb10, otherwise: bb1];\n //  }\n-//  bb9: { // to pre_binding2\n+//  bb10: { // to pre_binding2\n //      falseEdges -> [real: bb5, imaginary: bb4];\n //  }\n-//  bb10: { // binding2 and arm2\n+//  bb11: { // binding2 and arm2\n //      StorageLive(_4);\n //      _4 = ((_2 as Some).0: i32);\n //      StorageLive(_8);\n //      _8 = _4;\n //      _1 = (const 2i32, _8);\n //      StorageDead(_8);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n-//  bb11: {\n+//  bb12: {\n //      ...\n //      return;\n //  }"}]}