{"sha": "5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMGQ4ODBlNGJlNjhjOThhZmZlZTljYzVkNDA1MTlkY2YxZTNiN2I=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-24T00:52:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-24T00:52:36Z"}, "message": "Rollup merge of #83415 - camelid:remove-crate-module-option, r=jyn514\n\nRemove unnecessary `Option` wrapping around `Crate.module`\n\nI'm wondering if it was originally there so that we could `take` the\nmodule which enables `after_krate` to take an `&Crate`. However, the two\nimpls of `after_krate` only use `Crate.name`, so we can pass just the\nname instead.", "tree": {"sha": "b7c353ead50b6fac246982ac11529822593427bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7c353ead50b6fac246982ac11529822593427bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWo1UCRBK7hj4Ov3rIwAAdHIIADq1q7k8uFnq7p4NIypW1SZQ\n8lS9hlewUT+jziYgL3bY/X6xM7vbYsONrBGiZGfz1au7KQQxzN/KblQmSk3RMW3u\nn9OIU45HTU3sk4bq1xYZqx6e68oLg2QIfo25KNeeCqrXFPuXDvokJrsSvKwvemOR\nZ6YaCSsoDqA/frMTadgGIWSS/7JewdNOpPCU0rYDaBjmuU0V5k8vt3rMYD/nDmFo\noKlTi4/lrr3xWg0qbD03xeCrf0nzejPyzD94XzacNRbG1HBepni91S4KlYQkMmUq\n/oLSvjz3MBljACi18ePxHom9PAG0Wei0NYlmCyNIKWYbWuAUEK+Bo9uhXHMuiIM=\n=iw0n\n-----END PGP SIGNATURE-----\n", "payload": "tree b7c353ead50b6fac246982ac11529822593427bb\nparent 78437712b5b1ce73ca0244edc7a373e308e7cb07\nparent a7f902b6934b23504a0716b4f2583d273fd08e2a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616547156 +0100\ncommitter GitHub <noreply@github.com> 1616547156 +0100\n\nRollup merge of #83415 - camelid:remove-crate-module-option, r=jyn514\n\nRemove unnecessary `Option` wrapping around `Crate.module`\n\nI'm wondering if it was originally there so that we could `take` the\nmodule which enables `after_krate` to take an `&Crate`. However, the two\nimpls of `after_krate` only use `Crate.name`, so we can pass just the\nname instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "html_url": "https://github.com/rust-lang/rust/commit/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78437712b5b1ce73ca0244edc7a373e308e7cb07", "url": "https://api.github.com/repos/rust-lang/rust/commits/78437712b5b1ce73ca0244edc7a373e308e7cb07", "html_url": "https://github.com/rust-lang/rust/commit/78437712b5b1ce73ca0244edc7a373e308e7cb07"}, {"sha": "a7f902b6934b23504a0716b4f2583d273fd08e2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f902b6934b23504a0716b4f2583d273fd08e2a", "html_url": "https://github.com/rust-lang/rust/commit/a7f902b6934b23504a0716b4f2583d273fd08e2a"}], "stats": {"total": 146, "additions": 61, "deletions": 85}, "files": [{"sha": "84210276d35c41cbe136d0d14bfd55b3de28b7f6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -231,7 +231,7 @@ impl Clean<Item> for doctree::Module<'_> {\n \n         let what_rustc_thinks = Item::from_hir_id_and_parts(\n             self.id,\n-            self.name,\n+            Some(self.name),\n             ModuleItem(Module { is_crate: self.is_crate, items }),\n             cx,\n         );"}, {"sha": "142121b7346701c6ec54077cc0c5bcfeda789f79", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -51,7 +51,7 @@ thread_local!(crate static MAX_DEF_IDX: RefCell<FxHashMap<CrateNum, DefIndex>> =\n crate struct Crate {\n     crate name: Symbol,\n     crate src: FileName,\n-    crate module: Option<Item>,\n+    crate module: Item,\n     crate externs: Vec<(CrateNum, ExternalCrate)>,\n     crate primitives: Vec<(DefId, PrimitiveType)>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty."}, {"sha": "582cbf69ed117c3cc25c791e4c5af8c0a33fffa9", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -76,7 +76,7 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     Crate {\n         name,\n         src,\n-        module: Some(module),\n+        module,\n         externs,\n         primitives,\n         external_traits: cx.external_traits.clone(),"}, {"sha": "5a022b2d40c56204a1d95d96f3a60bb9eb942762", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -474,21 +474,19 @@ crate fn run_global_ctxt(\n \n     let mut krate = tcx.sess.time(\"clean_crate\", || clean::krate(&mut ctxt));\n \n-    if let Some(ref m) = krate.module {\n-        if m.doc_value().map(|d| d.is_empty()).unwrap_or(true) {\n-            let help = \"The following guide may be of use:\\n\\\n+    if krate.module.doc_value().map(|d| d.is_empty()).unwrap_or(true) {\n+        let help = \"The following guide may be of use:\\n\\\n                 https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\";\n-            tcx.struct_lint_node(\n-                crate::lint::MISSING_CRATE_LEVEL_DOCS,\n-                DocContext::as_local_hir_id(tcx, m.def_id).unwrap(),\n-                |lint| {\n-                    let mut diag =\n-                        lint.build(\"no documentation found for this crate's top-level module\");\n-                    diag.help(help);\n-                    diag.emit();\n-                },\n-            );\n-        }\n+        tcx.struct_lint_node(\n+            crate::lint::MISSING_CRATE_LEVEL_DOCS,\n+            DocContext::as_local_hir_id(tcx, krate.module.def_id).unwrap(),\n+            |lint| {\n+                let mut diag =\n+                    lint.build(\"no documentation found for this crate's top-level module\");\n+                diag.help(help);\n+                diag.emit();\n+            },\n+        );\n     }\n \n     fn report_deprecated_attr(name: &str, diag: &rustc_errors::Handler, sp: Span) {\n@@ -531,7 +529,7 @@ crate fn run_global_ctxt(\n \n     // Process all of the crate attributes, extracting plugin metadata along\n     // with the passes which we are supposed to run.\n-    for attr in krate.module.as_ref().unwrap().attrs.lists(sym::doc) {\n+    for attr in krate.module.attrs.lists(sym::doc) {\n         let diag = ctxt.sess().diagnostic();\n \n         let name = attr.name_or_empty();"}, {"sha": "189624c0d809c35ea7df84971e415271629db459", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -5,7 +5,7 @@ use rustc_span::{self, Span, Symbol};\n use rustc_hir as hir;\n \n crate struct Module<'hir> {\n-    crate name: Option<Symbol>,\n+    crate name: Symbol,\n     crate where_outer: Span,\n     crate where_inner: Span,\n     crate mods: Vec<Module<'hir>>,\n@@ -18,7 +18,7 @@ crate struct Module<'hir> {\n }\n \n impl Module<'hir> {\n-    crate fn new(name: Option<Symbol>) -> Module<'hir> {\n+    crate fn new(name: Symbol) -> Module<'hir> {\n         Module {\n             name,\n             id: hir::CRATE_HIR_ID,"}, {"sha": "376fef6568af7601d8f417f86edeb030298a777d", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -87,7 +87,7 @@ crate trait DocFolder: Sized {\n     }\n \n     fn fold_crate(&mut self, mut c: Crate) -> Crate {\n-        c.module = c.module.take().and_then(|module| self.fold_item(module));\n+        c.module = self.fold_item(c.module).unwrap();\n \n         {\n             let external_traits = { std::mem::take(&mut *c.external_traits.borrow_mut()) };"}, {"sha": "9dcef3a20d6c0010fb5775329800246cf3313c64", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::edition::Edition;\n+use rustc_span::{edition::Edition, Symbol};\n \n use crate::clean;\n use crate::config::RenderOptions;\n@@ -40,7 +40,7 @@ crate trait FormatRenderer<'tcx>: Sized {\n     /// A handler is available if the renderer wants to report errors.\n     fn after_krate(\n         &mut self,\n-        krate: &clean::Crate,\n+        crate_name: Symbol,\n         diag: &rustc_errors::Handler,\n     ) -> Result<(), Error>;\n \n@@ -58,21 +58,15 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n ) -> Result<(), Error> {\n     let prof = &tcx.sess.prof;\n \n-    let (mut format_renderer, mut krate) = prof\n+    let (mut format_renderer, krate) = prof\n         .extra_verbose_generic_activity(\"create_renderer\", T::descr())\n         .run(|| T::init(krate, options, edition, cache, tcx))?;\n \n-    let mut item = match krate.module.take() {\n-        Some(i) => i,\n-        None => return Ok(()),\n-    };\n-\n-    item.name = Some(krate.name);\n-\n     // Render the crate documentation\n-    let mut work = vec![(format_renderer.make_child_renderer(), item)];\n+    let crate_name = krate.name;\n+    let mut work = vec![(format_renderer.make_child_renderer(), krate.module)];\n \n-    let unknown = rustc_span::Symbol::intern(\"<unknown item>\");\n+    let unknown = Symbol::intern(\"<unknown item>\");\n     while let Some((mut cx, item)) = work.pop() {\n         if item.is_mod() {\n             // modules are special because they add a namespace. We also need to\n@@ -102,5 +96,5 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n         }\n     }\n     prof.extra_verbose_generic_activity(\"renderer_after_krate\", T::descr())\n-        .run(|| format_renderer.after_krate(&krate, diag))\n+        .run(|| format_renderer.after_krate(crate_name, diag))\n }"}, {"sha": "5d49a494727679aca23f46d150d2cb3bc3d1231a", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -127,11 +127,8 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n         crate_items.push(&*item);\n     }\n \n-    let crate_doc = krate\n-        .module\n-        .as_ref()\n-        .map(|module| module.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s)))\n-        .unwrap_or_default();\n+    let crate_doc =\n+        krate.module.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s));\n \n     struct CrateData<'a> {\n         doc: String,"}, {"sha": "64d413a5f3119d5cbfa170bb3eb182f071746f0b", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::FileName;\n-use rustc_span::symbol::sym;\n+use rustc_span::{symbol::sym, Symbol};\n \n use super::cache::{build_index, ExternalLocation};\n use super::print_item::{full_path, item_path, print_item};\n@@ -343,29 +343,27 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n \n         // Crawl the crate attributes looking for attributes which control how we're\n         // going to emit HTML\n-        if let Some(attrs) = krate.module.as_ref().map(|m| &m.attrs) {\n-            for attr in attrs.lists(sym::doc) {\n-                match (attr.name_or_empty(), attr.value_str()) {\n-                    (sym::html_favicon_url, Some(s)) => {\n-                        layout.favicon = s.to_string();\n-                    }\n-                    (sym::html_logo_url, Some(s)) => {\n-                        layout.logo = s.to_string();\n-                    }\n-                    (sym::html_playground_url, Some(s)) => {\n-                        playground = Some(markdown::Playground {\n-                            crate_name: Some(krate.name.to_string()),\n-                            url: s.to_string(),\n-                        });\n-                    }\n-                    (sym::issue_tracker_base_url, Some(s)) => {\n-                        issue_tracker_base_url = Some(s.to_string());\n-                    }\n-                    (sym::html_no_source, None) if attr.is_word() => {\n-                        include_sources = false;\n-                    }\n-                    _ => {}\n+        for attr in krate.module.attrs.lists(sym::doc) {\n+            match (attr.name_or_empty(), attr.value_str()) {\n+                (sym::html_favicon_url, Some(s)) => {\n+                    layout.favicon = s.to_string();\n+                }\n+                (sym::html_logo_url, Some(s)) => {\n+                    layout.logo = s.to_string();\n+                }\n+                (sym::html_playground_url, Some(s)) => {\n+                    playground = Some(markdown::Playground {\n+                        crate_name: Some(krate.name.to_string()),\n+                        url: s.to_string(),\n+                    });\n+                }\n+                (sym::issue_tracker_base_url, Some(s)) => {\n+                    issue_tracker_base_url = Some(s.to_string());\n+                }\n+                (sym::html_no_source, None) if attr.is_word() => {\n+                    include_sources = false;\n                 }\n+                _ => {}\n             }\n         }\n         let (sender, receiver) = channel();\n@@ -447,12 +445,11 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n \n     fn after_krate(\n         &mut self,\n-        krate: &clean::Crate,\n+        crate_name: Symbol,\n         diag: &rustc_errors::Handler,\n     ) -> Result<(), Error> {\n-        let final_file = self.dst.join(&*krate.name.as_str()).join(\"all.html\");\n+        let final_file = self.dst.join(&*crate_name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n-        let crate_name = krate.name;\n \n         let mut root_path = self.dst.to_str().expect(\"invalid path\").to_owned();\n         if !root_path.ends_with('/') {\n@@ -515,9 +512,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         if let Some(ref redirections) = self.shared.redirections {\n             if !redirections.borrow().is_empty() {\n                 let redirect_map_path =\n-                    self.dst.join(&*krate.name.as_str()).join(\"redirect-map.json\");\n+                    self.dst.join(&*crate_name.as_str()).join(\"redirect-map.json\");\n                 let paths = serde_json::to_string(&*redirections.borrow()).unwrap();\n-                self.shared.ensure_dir(&self.dst.join(&*krate.name.as_str()))?;\n+                self.shared.ensure_dir(&self.dst.join(&*crate_name.as_str()))?;\n                 self.shared.fs.write(&redirect_map_path, paths.as_bytes())?;\n             }\n         }"}, {"sha": "a4cdad69865ff012538ae5bb452d10e9c2349302", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -14,7 +14,7 @@ use std::rc::Rc;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n-use rustc_span::edition::Edition;\n+use rustc_span::{edition::Edition, Symbol};\n \n use rustdoc_json_types as types;\n \n@@ -202,7 +202,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n     fn after_krate(\n         &mut self,\n-        _krate: &clean::Crate,\n+        _crate_name: Symbol,\n         _diag: &rustc_errors::Handler,\n     ) -> Result<(), Error> {\n         debug!(\"Done with crate\");"}, {"sha": "7b0b2f28fdfff384bd7dd122031dcf122735cf4a", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -131,12 +131,8 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n         }\n     }\n \n-    let items = if let Some(ref mut it) = krate.module {\n-        if let ModuleItem(Module { ref mut items, .. }) = *it.kind {\n-            items\n-        } else {\n-            panic!(\"collect-trait-impls can't run\");\n-        }\n+    let items = if let ModuleItem(Module { ref mut items, .. }) = *krate.module.kind {\n+        items\n     } else {\n         panic!(\"collect-trait-impls can't run\");\n     };"}, {"sha": "17a66d1788e6d23e5ffbedf8a64c9077b5ed38bd", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d880e4be68c98affee9cc5d40519dcf1e3b7b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5c0d880e4be68c98affee9cc5d40519dcf1e3b7b", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             &Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             &krate.item.module,\n-            Some(self.cx.tcx.crate_name),\n+            self.cx.tcx.crate_name,\n         );\n         top_level_module.is_crate = true;\n         // Attach the crate's exported macros to the top-level module.\n@@ -114,7 +114,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     _ => continue 'exported_macros,\n                 };\n                 // Descend into the child module that matches this path segment (if any).\n-                match cur_mod.mods.iter_mut().find(|child| child.name == Some(path_segment_ty_ns)) {\n+                match cur_mod.mods.iter_mut().find(|child| child.name == path_segment_ty_ns) {\n                     Some(child_mod) => cur_mod = &mut *child_mod,\n                     None => continue 'exported_macros,\n                 }\n@@ -133,7 +133,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         vis: &'tcx hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n-        name: Option<Symbol>,\n+        name: Symbol,\n     ) -> Module<'tcx> {\n         let mut om = Module::new(name);\n         om.where_outer = span;\n@@ -312,13 +312,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.items.push((item, renamed))\n             }\n             hir::ItemKind::Mod(ref m) => {\n-                om.mods.push(self.visit_mod_contents(\n-                    item.span,\n-                    &item.vis,\n-                    item.hir_id(),\n-                    m,\n-                    Some(name),\n-                ));\n+                om.mods.push(self.visit_mod_contents(item.span, &item.vis, item.hir_id(), m, name));\n             }\n             hir::ItemKind::Fn(..)\n             | hir::ItemKind::ExternCrate(..)"}]}