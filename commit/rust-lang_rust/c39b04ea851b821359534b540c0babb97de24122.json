{"sha": "c39b04ea851b821359534b540c0babb97de24122", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzOWIwNGVhODUxYjgyMTM1OTUzNGI1NDBjMGJhYmI5N2RlMjQxMjI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-12T01:19:05Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-12T23:13:04Z"}, "message": "When expecting `BoxFuture` and using `async {}`, suggest `Box::pin`", "tree": {"sha": "73a546da015876afaebaa7382089add04622cf10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a546da015876afaebaa7382089add04622cf10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c39b04ea851b821359534b540c0babb97de24122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c39b04ea851b821359534b540c0babb97de24122", "html_url": "https://github.com/rust-lang/rust/commit/c39b04ea851b821359534b540c0babb97de24122", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c39b04ea851b821359534b540c0babb97de24122/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d2be570970d784db5539a1d309cd22b85be910a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2be570970d784db5539a1d309cd22b85be910a", "html_url": "https://github.com/rust-lang/rust/commit/2d2be570970d784db5539a1d309cd22b85be910a"}], "stats": {"total": 109, "additions": 101, "deletions": 8}, "files": [{"sha": "82b73518d09a86d4e84ee6aa5b5f322df38b322d", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c39b04ea851b821359534b540c0babb97de24122/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39b04ea851b821359534b540c0babb97de24122/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c39b04ea851b821359534b540c0babb97de24122", "patch": "@@ -701,10 +701,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     })\n                     .collect::<Vec<_>>();\n                 // Add the suggestion for the return type.\n-                suggestions.push((\n-                    ret_ty.span,\n-                    format!(\"Box<{}{}>\", if has_dyn { \"\" } else { \"dyn \" }, snippet),\n-                ));\n+                suggestions.push((ret_ty.span, format!(\"Box<dyn {}>\", trait_obj)));\n                 err.multipart_suggestion(\n                     \"return a boxed trait object instead\",\n                     suggestions,"}, {"sha": "ac5214ca756b258a25bc5459e73f1747cd0d14b2", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c39b04ea851b821359534b540c0babb97de24122/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39b04ea851b821359534b540c0babb97de24122/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=c39b04ea851b821359534b540c0babb97de24122", "patch": "@@ -25,6 +25,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.suggest_compatible_variants(err, expr, expected, expr_ty);\n         self.suggest_ref_or_into(err, expr, expected, expr_ty);\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n+        self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_await(err, expr, expected, expr_ty);\n     }\n "}, {"sha": "03c1f97246df91cc1d78356a2a09d63975808112", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c39b04ea851b821359534b540c0babb97de24122/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39b04ea851b821359534b540c0babb97de24122/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c39b04ea851b821359534b540c0babb97de24122", "patch": "@@ -5038,10 +5038,46 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Applicability::MachineApplicable,\n             );\n             err.note(\n-                \"for more on the distinction between the stack and the \\\n-                        heap, read https://doc.rust-lang.org/book/ch15-01-box.html, \\\n-                        https://doc.rust-lang.org/rust-by-example/std/box.html, and \\\n-                        https://doc.rust-lang.org/std/boxed/index.html\",\n+                \"for more on the distinction between the stack and the heap, read \\\n+                 https://doc.rust-lang.org/book/ch15-01-box.html, \\\n+                 https://doc.rust-lang.org/rust-by-example/std/box.html, and \\\n+                 https://doc.rust-lang.org/std/boxed/index.html\",\n+            );\n+        }\n+    }\n+\n+    /// When encountering an `impl Future` where `BoxFuture` is expected, suggest `Box::pin`.\n+    fn suggest_calling_boxed_future_when_appropriate(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &hir::Expr<'_>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        // Handle #68197.\n+\n+        if self.tcx.hir().is_const_context(expr.hir_id) {\n+            // Do not suggest `Box::new` in const context.\n+            return;\n+        }\n+        let pin_did = self.tcx.lang_items().pin_type();\n+        match expected.kind {\n+            ty::Adt(def, _) if Some(def.did) != pin_did => return,\n+            // This guards the `unwrap` and `mk_box` below.\n+            _ if pin_did.is_none() || self.tcx.lang_items().owned_box().is_none() => return,\n+            _ => {}\n+        }\n+        let boxed_found = self.tcx.mk_box(found);\n+        let new_found = self.tcx.mk_lang_item(boxed_found, lang_items::PinTypeLangItem).unwrap();\n+        if let (true, Ok(snippet)) = (\n+            self.can_coerce(new_found, expected),\n+            self.sess().source_map().span_to_snippet(expr.span),\n+        ) {\n+            err.span_suggestion(\n+                expr.span,\n+                \"you need to pin and box this expression\",\n+                format!(\"Box::pin({})\", snippet),\n+                Applicability::MachineApplicable,\n             );\n         }\n     }"}, {"sha": "bddfd3ac9ccf027528e3dbf5d87c00856b6a1e4a", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c39b04ea851b821359534b540c0babb97de24122/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c39b04ea851b821359534b540c0babb97de24122/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.fixed?ref=c39b04ea851b821359534b540c0babb97de24122", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+// run-rustfix\n+#![allow(dead_code)]\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + Send + 'a>>;\n+//   ^^^^^^^^^ This would come from the `futures` crate in real code.\n+\n+fn foo() -> BoxFuture<'static, i32> {\n+    Box::pin(async { //~ ERROR mismatched types\n+        42\n+    })\n+}\n+\n+fn main() {}"}, {"sha": "51818d6ae8f69dc8c2fe36e2246bf386ce093157", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c39b04ea851b821359534b540c0babb97de24122/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39b04ea851b821359534b540c0babb97de24122/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs?ref=c39b04ea851b821359534b540c0babb97de24122", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+// run-rustfix\n+#![allow(dead_code)]\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + Send + 'a>>;\n+//   ^^^^^^^^^ This would come from the `futures` crate in real code.\n+\n+fn foo() -> BoxFuture<'static, i32> {\n+    async { //~ ERROR mismatched types\n+        42\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5e6f5c13b7a604f7385a17077fc7c4a429da361e", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c39b04ea851b821359534b540c0babb97de24122/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39b04ea851b821359534b540c0babb97de24122/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=c39b04ea851b821359534b540c0babb97de24122", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:11:5\n+   |\n+LL |   fn foo() -> BoxFuture<'static, i32> {\n+   |               ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n+LL | /     async {\n+LL | |         42\n+LL | |     }\n+   | |_____^ expected struct `std::pin::Pin`, found opaque type\n+   | \n+  ::: $SRC_DIR/libstd/future.rs:LL:COL\n+   |\n+LL |   pub fn from_generator<T: Generator<Yield = ()>>(x: T) -> impl Future<Output = T::Return> {\n+   |                                                            ------------------------------- the found opaque type\n+   |\n+   = note:   expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n+           found opaque type `impl std::future::Future`\n+help: you need to pin and box this expression\n+   |\n+LL |     Box::pin(async {\n+LL |         42\n+LL |     })\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}