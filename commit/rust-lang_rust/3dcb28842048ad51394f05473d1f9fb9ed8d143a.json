{"sha": "3dcb28842048ad51394f05473d1f9fb9ed8d143a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkY2IyODg0MjA0OGFkNTEzOTRmMDU0NzNkMWY5ZmI5ZWQ4ZDE0M2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-16T05:17:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-16T05:17:39Z"}, "message": "Auto merge of #38806 - comex:lint-attr-fix, r=nrc\n\nFix lint attributes on non-item nodes.\n\nCurrently, late lint checking uses two HIR visitors: LateContext and\nIdVisitor.  IdVisitor only overrides visit_id, and for each node searches\nfor builtin lints previously added to the session; LateContext overrides\na number of methods, and runs late lints.  When LateContext encounters an\nitem, it first has IdVisitor walk everything in it except nested items\n(OnlyBodies), then recurses into it itself - i.e. there are two separate\nwalks.\n\nAside from apparently being unnecessary, this separation prevents lint\nattributes (allow/deny/warn) on non-item HIR nodes from working\nproperly.  Test case:\n\n```rust\n// generates warning without this change\nfn main() { #[allow(unreachable_code)] loop { break; break; } }\n```\n\nLateContext contains logic to merge attributes seen into the current lint\nsettings while walking (with_lint_attrs), but IdVisitor does not.  So\nsuch attributes will affect late lints (because they are called from\nLateContext), and if the node contains any items within it, they will\naffect builtin lints within those items (because that IdVisitor is run\nwhile LateContext is within the attributed node), but otherwise the\nattributes will be ignored for builtin lints.\n\nThis change simply removes IdVisitor and moves its visit_id into\nLateContext itself.  Hopefully this doesn't break anything...\n\nAlso added walk calls to visit_lifetime and visit_lifetime_def\nrespectively, so visit_lifetime_def will recurse into the lifetime and\nvisit_lifetime will recurse into the name.  In principle this could\nconfuse lint plugins.  This is \"necessary\" because walk_lifetime calls\nvisit_id on the lifetime; of course, an alternative would be directly\ncalling visit_id (which would require manually iterating over the\nlifetimes in visit_lifetime_def), but that seems less clean.", "tree": {"sha": "d99002015cd60aa02249d48beb67bcc4d64c74ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d99002015cd60aa02249d48beb67bcc4d64c74ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dcb28842048ad51394f05473d1f9fb9ed8d143a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dcb28842048ad51394f05473d1f9fb9ed8d143a", "html_url": "https://github.com/rust-lang/rust/commit/3dcb28842048ad51394f05473d1f9fb9ed8d143a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dcb28842048ad51394f05473d1f9fb9ed8d143a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff591b6dc0e0a107c778d0bb4cf103881527e1a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff591b6dc0e0a107c778d0bb4cf103881527e1a5", "html_url": "https://github.com/rust-lang/rust/commit/ff591b6dc0e0a107c778d0bb4cf103881527e1a5"}, {"sha": "9cfb8b730a473814c2ae090c342abb95e53502db", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cfb8b730a473814c2ae090c342abb95e53502db", "html_url": "https://github.com/rust-lang/rust/commit/9cfb8b730a473814c2ae090c342abb95e53502db"}], "stats": {"total": 102, "additions": 43, "deletions": 59}, "files": [{"sha": "7d85f3607b597445aac03cb7f1256ac05ca4534c", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 12, "deletions": 47, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3dcb28842048ad51394f05473d1f9fb9ed8d143a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dcb28842048ad51394f05473d1f9fb9ed8d143a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=3dcb28842048ad51394f05473d1f9fb9ed8d143a", "patch": "@@ -705,17 +705,6 @@ impl<'a> EarlyContext<'a> {\n     }\n }\n \n-impl<'a, 'tcx> LateContext<'a, 'tcx> {\n-    fn visit_ids<'b, F: 'b>(&'b mut self, f: F)\n-        where F: FnOnce(&mut IdVisitor<'b, 'a, 'tcx>)\n-    {\n-        let mut v = IdVisitor::<'b, 'a, 'tcx> {\n-            cx: self\n-        };\n-        f(&mut v);\n-    }\n-}\n-\n impl<'a, 'tcx> LintContext<'tcx> for LateContext<'a, 'tcx> {\n     /// Get the overall compiler `Session` object.\n     fn sess(&self) -> &Session {\n@@ -782,6 +771,16 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         hir_visit::NestedVisitorMap::All(&self.tcx.map)\n     }\n \n+    // Output any lints that were previously added to the session.\n+    fn visit_id(&mut self, id: ast::NodeId) {\n+        if let Some(lints) = self.sess().lints.borrow_mut().remove(&id) {\n+            debug!(\"LateContext::visit_id: id={:?} lints={:?}\", id, lints);\n+            for early_lint in lints {\n+                self.early_lint(early_lint);\n+            }\n+        }\n+    }\n+\n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n         let old_tables = self.tables;\n         self.tables = self.tcx.body_tables(body);\n@@ -793,7 +792,6 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     fn visit_item(&mut self, it: &'tcx hir::Item) {\n         self.with_lint_attrs(&it.attrs, |cx| {\n             run_lints!(cx, check_item, late_passes, it);\n-            cx.visit_ids(|v| v.visit_item(it));\n             hir_visit::walk_item(cx, it);\n             run_lints!(cx, check_item_post, late_passes, it);\n         })\n@@ -918,7 +916,6 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n         self.with_lint_attrs(&trait_item.attrs, |cx| {\n             run_lints!(cx, check_trait_item, late_passes, trait_item);\n-            cx.visit_ids(|v| hir_visit::walk_trait_item(v, trait_item));\n             hir_visit::walk_trait_item(cx, trait_item);\n             run_lints!(cx, check_trait_item_post, late_passes, trait_item);\n         });\n@@ -927,18 +924,19 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         self.with_lint_attrs(&impl_item.attrs, |cx| {\n             run_lints!(cx, check_impl_item, late_passes, impl_item);\n-            cx.visit_ids(|v| hir_visit::walk_impl_item(v, impl_item));\n             hir_visit::walk_impl_item(cx, impl_item);\n             run_lints!(cx, check_impl_item_post, late_passes, impl_item);\n         });\n     }\n \n     fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n         run_lints!(self, check_lifetime, late_passes, lt);\n+        hir_visit::walk_lifetime(self, lt);\n     }\n \n     fn visit_lifetime_def(&mut self, lt: &'tcx hir::LifetimeDef) {\n         run_lints!(self, check_lifetime_def, late_passes, lt);\n+        hir_visit::walk_lifetime_def(self, lt);\n     }\n \n     fn visit_path(&mut self, p: &'tcx hir::Path, id: ast::NodeId) {\n@@ -1100,35 +1098,6 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n     }\n }\n \n-struct IdVisitor<'a, 'b: 'a, 'tcx: 'a+'b> {\n-    cx: &'a mut LateContext<'b, 'tcx>\n-}\n-\n-// Output any lints that were previously added to the session.\n-impl<'a, 'b, 'tcx> hir_visit::Visitor<'tcx> for IdVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'tcx> {\n-        hir_visit::NestedVisitorMap::OnlyBodies(&self.cx.tcx.map)\n-    }\n-\n-    fn visit_id(&mut self, id: ast::NodeId) {\n-        if let Some(lints) = self.cx.sess().lints.borrow_mut().remove(&id) {\n-            debug!(\"LateContext::visit_id: id={:?} lints={:?}\", id, lints);\n-            for early_lint in lints {\n-                self.cx.early_lint(early_lint);\n-            }\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, _ti: &'tcx hir::TraitItem) {\n-        // Do not recurse into trait or impl items automatically. These are\n-        // processed separately by calling hir_visit::walk_trait_item()\n-    }\n-\n-    fn visit_impl_item(&mut self, _ii: &'tcx hir::ImplItem) {\n-        // See visit_trait_item()\n-    }\n-}\n-\n enum CheckLintNameResult {\n     Ok,\n     // Lint doesn't exist\n@@ -1252,10 +1221,6 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Visit the whole crate.\n     cx.with_lint_attrs(&krate.attrs, |cx| {\n-        cx.visit_ids(|v| {\n-            hir_visit::walk_crate(v, krate);\n-        });\n-\n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n         run_lints!(cx, check_crate, late_passes, krate);"}, {"sha": "930f69e51e176370d581a1ffa9a2d486e387ad1b", "filename": "src/test/compile-fail/lint-attr-non-item-node.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3dcb28842048ad51394f05473d1f9fb9ed8d143a/src%2Ftest%2Fcompile-fail%2Flint-attr-non-item-node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dcb28842048ad51394f05473d1f9fb9ed8d143a/src%2Ftest%2Fcompile-fail%2Flint-attr-non-item-node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-attr-non-item-node.rs?ref=3dcb28842048ad51394f05473d1f9fb9ed8d143a", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks that lint attributes work on non-item AST nodes\n+\n+fn main() {\n+    #[deny(unreachable_code)]\n+    loop {\n+        break;\n+        \"unreachable\"; //~ ERROR unreachable statement\n+    }\n+}"}, {"sha": "dbe5e31287e9793b2d3be74d91b18b9aa391ef46", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3dcb28842048ad51394f05473d1f9fb9ed8d143a/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dcb28842048ad51394f05473d1f9fb9ed8d143a/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=3dcb28842048ad51394f05473d1f9fb9ed8d143a", "patch": "@@ -1,15 +1,3 @@\n-error: unused variable: `theOtherTwo`\n-  --> $DIR/issue-24690.rs:20:9\n-   |\n-20 |     let theOtherTwo = 2;\n-   |         ^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-24690.rs:16:9\n-   |\n-16 | #![deny(warnings)]\n-   |         ^^^^^^^^\n-\n error: variable `theTwo` should have a snake case name such as `the_two`\n   --> $DIR/issue-24690.rs:19:9\n    |\n@@ -28,5 +16,17 @@ error: variable `theOtherTwo` should have a snake case name such as `the_other_t\n 20 |     let theOtherTwo = 2;\n    |         ^^^^^^^^^^^\n \n+error: unused variable: `theOtherTwo`\n+  --> $DIR/issue-24690.rs:20:9\n+   |\n+20 |     let theOtherTwo = 2;\n+   |         ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-24690.rs:16:9\n+   |\n+16 | #![deny(warnings)]\n+   |         ^^^^^^^^\n+\n error: aborting due to 3 previous errors\n "}]}