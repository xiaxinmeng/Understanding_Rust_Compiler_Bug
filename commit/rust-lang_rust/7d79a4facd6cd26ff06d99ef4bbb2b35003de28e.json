{"sha": "7d79a4facd6cd26ff06d99ef4bbb2b35003de28e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNzlhNGZhY2Q2Y2QyNmZmMDZkOTllZjRiYmIyYjM1MDAzZGUyOGU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-27T17:07:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-27T17:07:49Z"}, "message": "rollup merge of #23753: aturon/revise-convert\n\nThis commit revises `path` and `os_str` to use blanket impls for `From`\non reference types. This both cuts down on the number of required impls,\nand means that you can pass through e.g. `T: AsRef<OsStr>` to\n`PathBuf::from` without an intermediate call to `as_ref`.\n\nIt also makes a FIXME note for later generalizing the blanket impls for\n`AsRef` and `AsMut` to use `Deref`/`DerefMut`, once it is possible to do\nso.", "tree": {"sha": "7de48d79407b29b20376345a1f8c9623449b2ab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de48d79407b29b20376345a1f8c9623449b2ab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e", "html_url": "https://github.com/rust-lang/rust/commit/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55c398d651e6b3e4f469325a35e029059ce36f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/55c398d651e6b3e4f469325a35e029059ce36f1e", "html_url": "https://github.com/rust-lang/rust/commit/55c398d651e6b3e4f469325a35e029059ce36f1e"}, {"sha": "e7525cf6200e5b62a4b1a2f3131f68d946fb331e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7525cf6200e5b62a4b1a2f3131f68d946fb331e", "html_url": "https://github.com/rust-lang/rust/commit/e7525cf6200e5b62a4b1a2f3131f68d946fb331e"}], "stats": {"total": 84, "additions": 25, "deletions": 59}, "files": [{"sha": "21f9b1f5513aaaf7f7c8d5184616c3f3552371b8", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=7d79a4facd6cd26ff06d99ef4bbb2b35003de28e", "patch": "@@ -69,6 +69,14 @@ impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U> {\n     }\n }\n \n+// FIXME (#23442): replace the above impls for &/&mut with the following more general one:\n+// // As lifts over Deref\n+// impl<D: ?Sized + Deref, U: ?Sized> AsRef<U> for D where D::Target: AsRef<U> {\n+//     fn as_ref(&self) -> &U {\n+//         self.deref().as_ref()\n+//     }\n+// }\n+\n // AsMut implies Into\n impl<'a, T: ?Sized, U: ?Sized> Into<&'a mut U> for &'a mut T where T: AsMut<U> {\n     fn into(self) -> &'a mut U {\n@@ -83,6 +91,14 @@ impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U> {\n     }\n }\n \n+// FIXME (#23442): replace the above impl for &mut with the following more general one:\n+// // AsMut lifts over DerefMut\n+// impl<D: ?Sized + Deref, U: ?Sized> AsMut<U> for D where D::Target: AsMut<U> {\n+//     fn as_mut(&mut self) -> &mut U {\n+//         self.deref_mut().as_mut()\n+//     }\n+// }\n+\n // From implies Into\n impl<T, U> Into<U> for T where U: From<T> {\n     fn into(self) -> U {"}, {"sha": "24844ad096121eae28c384e048a27436fe1dccc7", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=7d79a4facd6cd26ff06d99ef4bbb2b35003de28e", "patch": "@@ -113,23 +113,9 @@ impl From<String> for OsString {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&'a String> for OsString {\n-    fn from(s: &'a String) -> OsString {\n-        OsString { inner: Buf::from_str(s) }\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&'a str> for OsString {\n-    fn from(s: &'a str) -> OsString {\n-        OsString { inner: Buf::from_str(s) }\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&'a OsStr> for OsString {\n-    fn from(s: &'a OsStr) -> OsString {\n-        OsString { inner: s.inner.to_owned() }\n+impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for OsString {\n+    fn from(s: &'a T) -> OsString {\n+        s.as_ref().to_os_string()\n     }\n }\n "}, {"sha": "58d3ae9f7cfabcff1c975fa162ac2cb6303e88da", "filename": "src/libstd/path.rs", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=7d79a4facd6cd26ff06d99ef4bbb2b35003de28e", "patch": "@@ -1038,23 +1038,16 @@ impl PathBuf {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&'a Path> for PathBuf {\n-    fn from(s: &'a Path) -> PathBuf {\n-        s.to_path_buf()\n+impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for PathBuf {\n+    fn from(s: &'a T) -> PathBuf {\n+        PathBuf::from(s.as_ref().to_os_string())\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&'a str> for PathBuf {\n-    fn from(s: &'a str) -> PathBuf {\n-        PathBuf::from(OsString::from(s))\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&'a String> for PathBuf {\n-    fn from(s: &'a String) -> PathBuf {\n-        PathBuf::from(OsString::from(s))\n+impl From<OsString> for PathBuf {\n+    fn from(s: OsString) -> PathBuf {\n+        PathBuf { inner: s }\n     }\n }\n \n@@ -1065,27 +1058,6 @@ impl From<String> for PathBuf {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&'a OsStr> for PathBuf {\n-    fn from(s: &'a OsStr) -> PathBuf {\n-        PathBuf::from(OsString::from(s))\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&'a OsString> for PathBuf {\n-    fn from(s: &'a OsString) -> PathBuf {\n-        PathBuf::from(s.to_os_string())\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl From<OsString> for PathBuf {\n-    fn from(s: OsString) -> PathBuf {\n-        PathBuf { inner: s }\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<P: AsRef<Path>> iter::FromIterator<P> for PathBuf {\n     fn from_iter<I: IntoIterator<Item = P>>(iter: I) -> PathBuf {"}, {"sha": "69d876a48a4b22b3421aa8e293c074dc1497c7af", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=7d79a4facd6cd26ff06d99ef4bbb2b35003de28e", "patch": "@@ -46,10 +46,6 @@ impl Buf {\n         Buf { inner: s.into_bytes() }\n     }\n \n-    pub fn from_str(s: &str) -> Buf {\n-        Buf { inner: s.as_bytes().to_vec() }\n-    }\n-\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(&*self.inner) }\n     }"}, {"sha": "91905ae7489d528b100b874e19183cedaeca9e4c", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d79a4facd6cd26ff06d99ef4bbb2b35003de28e/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=7d79a4facd6cd26ff06d99ef4bbb2b35003de28e", "patch": "@@ -45,10 +45,6 @@ impl Buf {\n         Buf { inner: Wtf8Buf::from_string(s) }\n     }\n \n-    pub fn from_str(s: &str) -> Buf {\n-        Buf { inner: Wtf8Buf::from_str(s) }\n-    }\n-\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(self.inner.as_slice()) }\n     }"}]}