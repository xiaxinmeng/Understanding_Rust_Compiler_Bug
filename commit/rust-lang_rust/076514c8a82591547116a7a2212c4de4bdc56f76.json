{"sha": "076514c8a82591547116a7a2212c4de4bdc56f76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NjUxNGM4YTgyNTkxNTQ3MTE2YTdhMjIxMmM0ZGU0YmRjNTZmNzY=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-10-01T20:39:20Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-10-01T20:40:42Z"}, "message": "add `str::SplitInclusive::as_str` method\n\nThis commit entroduces `core::str::SplitInclusive::as_str` method similar to\n`core::str::Split::as_str`, but under different gate -\n\"str_split_inclusive_as_str\" (this is done so because `SplitInclusive` is\nitself unstable).", "tree": {"sha": "6fe2ae2f47d6d726f1da06df5501cf37f7b4eee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fe2ae2f47d6d726f1da06df5501cf37f7b4eee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/076514c8a82591547116a7a2212c4de4bdc56f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/076514c8a82591547116a7a2212c4de4bdc56f76", "html_url": "https://github.com/rust-lang/rust/commit/076514c8a82591547116a7a2212c4de4bdc56f76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/076514c8a82591547116a7a2212c4de4bdc56f76/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4747215d778abd9f280202d07f279fdeaea519f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4747215d778abd9f280202d07f279fdeaea519f8", "html_url": "https://github.com/rust-lang/rust/commit/4747215d778abd9f280202d07f279fdeaea519f8"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "8f1826a47e1c5d619b70d6485f8ab912a38c8c4a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/076514c8a82591547116a7a2212c4de4bdc56f76/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076514c8a82591547116a7a2212c4de4bdc56f76/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=076514c8a82591547116a7a2212c4de4bdc56f76", "patch": "@@ -126,6 +126,7 @@\n #![feature(std_internals)]\n #![feature(stmt_expr_attributes)]\n #![feature(str_split_as_str)]\n+#![feature(str_split_inclusive_as_str)]\n #![feature(transparent_unions)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]"}, {"sha": "2da390b2b2b24b01a7456cac9544ac7d0177c7b8", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/076514c8a82591547116a7a2212c4de4bdc56f76/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076514c8a82591547116a7a2212c4de4bdc56f76/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=076514c8a82591547116a7a2212c4de4bdc56f76", "patch": "@@ -699,9 +699,7 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n         }\n \n         // SAFETY: `self.start` and `self.end` always lie on unicode boundaries.\n-        unsafe {\n-            self.matcher.haystack().get_unchecked(self.start..self.end)\n-        }\n+        unsafe { self.matcher.haystack().get_unchecked(self.start..self.end) }\n     }\n }\n \n@@ -1278,6 +1276,28 @@ impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a>> FusedIterator for SplitInclusive<'a, P> {}\n \n+impl<'a, P: Pattern<'a>> SplitInclusive<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_inclusive_as_str)]\n+    /// #![feature(split_inclusive)]\n+    /// let mut split = \"Mary had a little lamb\".split_inclusive(' ');\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_inclusive_as_str\", issue = \"none\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n /// An iterator of [`u16`] over the string encoded as UTF-16.\n ///\n /// This struct is created by the [`encode_utf16`] method on [`str`]."}]}