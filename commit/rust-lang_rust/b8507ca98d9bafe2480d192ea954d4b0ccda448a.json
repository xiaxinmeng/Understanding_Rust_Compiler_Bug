{"sha": "b8507ca98d9bafe2480d192ea954d4b0ccda448a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NTA3Y2E5OGQ5YmFmZTI0ODBkMTkyZWE5NTRkNGIwY2NkYTQ0OGE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-30T17:08:13Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-30T17:08:13Z"}, "message": "Don't add test runnables for outline modules in the wrong file", "tree": {"sha": "c3b2c7056f3ee0ba7dae8670d0938b81ba3888e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3b2c7056f3ee0ba7dae8670d0938b81ba3888e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8507ca98d9bafe2480d192ea954d4b0ccda448a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8507ca98d9bafe2480d192ea954d4b0ccda448a", "html_url": "https://github.com/rust-lang/rust/commit/b8507ca98d9bafe2480d192ea954d4b0ccda448a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8507ca98d9bafe2480d192ea954d4b0ccda448a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a", "html_url": "https://github.com/rust-lang/rust/commit/1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a"}], "stats": {"total": 157, "additions": 139, "deletions": 18}, "files": [{"sha": "3821e1d2460dd9b12e331b9a21ee157c11f9e18d", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8507ca98d9bafe2480d192ea954d4b0ccda448a/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8507ca98d9bafe2480d192ea954d4b0ccda448a/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=b8507ca98d9bafe2480d192ea954d4b0ccda448a", "patch": "@@ -862,6 +862,7 @@ mod tests {\n                                     focus_range: 18..23,\n                                     name: \"tests\",\n                                     kind: Module,\n+                                    description: \"mod tests\",\n                                 },\n                                 kind: TestMod {\n                                     path: \"tests\",\n@@ -883,6 +884,7 @@ mod tests {\n                                     focus_range: 18..23,\n                                     name: \"tests\",\n                                     kind: Module,\n+                                    description: \"mod tests\",\n                                 },\n                                 kind: TestMod {\n                                     path: \"tests\","}, {"sha": "db1596b45a03bf54a86d5c4176070f0f803284f7", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8507ca98d9bafe2480d192ea954d4b0ccda448a/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8507ca98d9bafe2480d192ea954d4b0ccda448a/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=b8507ca98d9bafe2480d192ea954d4b0ccda448a", "patch": "@@ -2508,6 +2508,7 @@ mod tests$0 {\n                                 focus_range: 4..9,\n                                 name: \"tests\",\n                                 kind: Module,\n+                                description: \"mod tests\",\n                             },\n                             kind: TestMod {\n                                 path: \"tests\","}, {"sha": "934f1adcc1277f86ece1fa1c464e6f04e9b16656", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 136, "deletions": 18, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/b8507ca98d9bafe2480d192ea954d4b0ccda448a/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8507ca98d9bafe2480d192ea954d4b0ccda448a/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=b8507ca98d9bafe2480d192ea954d4b0ccda448a", "patch": "@@ -13,12 +13,10 @@ use ide_db::{\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n+use stdx::always;\n use syntax::ast::{self, AstNode, AttrsOwner};\n \n-use crate::{\n-    display::{ToNav, TryToNav},\n-    references, FileId, NavigationTarget,\n-};\n+use crate::{display::TryToNav, references, FileId, NavigationTarget};\n \n #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n pub struct Runnable {\n@@ -58,6 +56,8 @@ pub struct RunnableAction {\n }\n \n const TEST: RunnableAction = RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Test\", debugee: true };\n+const TEST_MOD: RunnableAction =\n+    RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Tests\", debugee: true };\n const DOCTEST: RunnableAction =\n     RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Doctest\", debugee: false };\n const BENCH: RunnableAction = RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Bench\", debugee: true };\n@@ -79,7 +79,8 @@ impl Runnable {\n \n     pub fn action(&self) -> &'static RunnableAction {\n         match &self.kind {\n-            RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => &TEST,\n+            RunnableKind::TestMod { .. } => &TEST_MOD,\n+            RunnableKind::Test { .. } => &TEST,\n             RunnableKind::DocTest { .. } => &DOCTEST,\n             RunnableKind::Bench { .. } => &BENCH,\n             RunnableKind::Bin => &BIN,\n@@ -103,24 +104,38 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     let sema = Semantics::new(db);\n \n     let mut res = Vec::new();\n+    let mut add_opt = |runnable: Option<Runnable>| {\n+        if let Some(runnable) = runnable.filter(|r| {\n+            always!(\n+                r.nav.file_id == file_id,\n+                \"tried adding a runnable pointing to a different file\"\n+            )\n+        }) {\n+            res.push(runnable);\n+        }\n+    };\n     visit_file_defs(&sema, file_id, &mut |def| match def {\n         Either::Left(def) => {\n             let runnable = match def {\n                 hir::ModuleDef::Module(it) => runnable_mod(&sema, it),\n                 hir::ModuleDef::Function(it) => runnable_fn(&sema, it),\n                 _ => None,\n             };\n-            res.extend(runnable.or_else(|| module_def_doctest(&sema, def)))\n+            add_opt(runnable.or_else(|| module_def_doctest(&sema, def)));\n         }\n         Either::Right(impl_) => {\n-            res.extend(runnable_impl(&sema, &impl_));\n-            res.extend(impl_.items(db).into_iter().filter_map(|assoc| match assoc {\n-                hir::AssocItem::Function(it) => {\n-                    runnable_fn(&sema, it).or_else(|| module_def_doctest(&sema, it.into()))\n-                }\n-                hir::AssocItem::Const(it) => module_def_doctest(&sema, it.into()),\n-                hir::AssocItem::TypeAlias(it) => module_def_doctest(&sema, it.into()),\n-            }))\n+            add_opt(runnable_impl(&sema, &impl_));\n+            impl_\n+                .items(db)\n+                .into_iter()\n+                .map(|assoc| match assoc {\n+                    hir::AssocItem::Function(it) => {\n+                        runnable_fn(&sema, it).or_else(|| module_def_doctest(&sema, it.into()))\n+                    }\n+                    hir::AssocItem::Const(it) => module_def_doctest(&sema, it.into()),\n+                    hir::AssocItem::TypeAlias(it) => module_def_doctest(&sema, it.into()),\n+                })\n+                .for_each(|r| add_opt(r));\n         }\n     });\n     res\n@@ -267,7 +282,7 @@ pub(crate) fn runnable_mod(sema: &Semantics<RootDatabase>, def: hir::Module) ->\n \n     let attrs = def.attrs(sema.db);\n     let cfg = attrs.cfg();\n-    let nav = def.to_nav(sema.db);\n+    let nav = NavigationTarget::from_module_to_decl(sema.db, def);\n     Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg })\n }\n \n@@ -855,7 +870,7 @@ mod test_mod {\n     fn test_foo1() {}\n }\n \"#,\n-            &[&TEST, &TEST],\n+            &[&TEST_MOD, &TEST],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -867,6 +882,7 @@ mod test_mod {\n                             focus_range: 5..13,\n                             name: \"test_mod\",\n                             kind: Module,\n+                            description: \"mod test_mod\",\n                         },\n                         kind: TestMod {\n                             path: \"test_mod\",\n@@ -925,7 +941,7 @@ mod root_tests {\n     mod nested_tests_4 {}\n }\n \"#,\n-            &[&TEST, &TEST, &TEST, &TEST, &TEST, &TEST],\n+            &[&TEST_MOD, &TEST_MOD, &TEST_MOD, &TEST, &TEST, &TEST],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -937,6 +953,7 @@ mod root_tests {\n                             focus_range: 26..40,\n                             name: \"nested_tests_0\",\n                             kind: Module,\n+                            description: \"mod nested_tests_0\",\n                         },\n                         kind: TestMod {\n                             path: \"root_tests::nested_tests_0\",\n@@ -952,6 +969,7 @@ mod root_tests {\n                             focus_range: 55..69,\n                             name: \"nested_tests_1\",\n                             kind: Module,\n+                            description: \"mod nested_tests_1\",\n                         },\n                         kind: TestMod {\n                             path: \"root_tests::nested_tests_0::nested_tests_1\",\n@@ -967,6 +985,7 @@ mod root_tests {\n                             focus_range: 206..220,\n                             name: \"nested_tests_2\",\n                             kind: Module,\n+                            description: \"mod nested_tests_2\",\n                         },\n                         kind: TestMod {\n                             path: \"root_tests::nested_tests_0::nested_tests_2\",\n@@ -1210,7 +1229,7 @@ mod tests {\n     gen!();\n }\n \"#,\n-            &[&TEST, &TEST],\n+            &[&TEST_MOD, &TEST],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -1222,6 +1241,7 @@ mod tests {\n                             focus_range: 94..99,\n                             name: \"tests\",\n                             kind: Module,\n+                            description: \"mod tests\",\n                         },\n                         kind: TestMod {\n                             path: \"tests\",\n@@ -1273,6 +1293,104 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn outline_submodule1() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+mod m;\n+//- /m.rs\n+#[test]\n+fn t0() {}\n+#[test]\n+fn t1() {}\n+\"#,\n+            &[&TEST_MOD],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..7,\n+                            focus_range: 5..6,\n+                            name: \"m\",\n+                            kind: Module,\n+                            description: \"mod m\",\n+                        },\n+                        kind: TestMod {\n+                            path: \"m\",\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn outline_submodule2() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+mod m;\n+//- /m.rs\n+$0\n+#[test]\n+fn t0() {}\n+#[test]\n+fn t1() {}\n+\"#,\n+            &[&TEST, &TEST],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 1..19,\n+                            focus_range: 12..14,\n+                            name: \"t0\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"m::t0\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 20..38,\n+                            focus_range: 31..33,\n+                            name: \"t1\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"m::t1\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn find_no_tests() {\n         check_tests("}]}