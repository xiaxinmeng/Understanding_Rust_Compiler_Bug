{"sha": "6e8dad5c073555dcbea9a276f76db47e3d7cc693", "node_id": "C_kwDOAAsO6NoAKDZlOGRhZDVjMDczNTU1ZGNiZWE5YTI3NmY3NmRiNDdlM2Q3Y2M2OTM", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-08-22T16:18:54Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-08-30T07:48:00Z"}, "message": "Use span_suggestion_with_style in SessionSubdiagnostic derive", "tree": {"sha": "7bca1d3a0dda206b2571935b1c56c7443bdf7653", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bca1d3a0dda206b2571935b1c56c7443bdf7653"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e8dad5c073555dcbea9a276f76db47e3d7cc693", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8dad5c073555dcbea9a276f76db47e3d7cc693", "html_url": "https://github.com/rust-lang/rust/commit/6e8dad5c073555dcbea9a276f76db47e3d7cc693", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e8dad5c073555dcbea9a276f76db47e3d7cc693/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af7f4208a789ba27a341c99df2de9c018b79828", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af7f4208a789ba27a341c99df2de9c018b79828", "html_url": "https://github.com/rust-lang/rust/commit/8af7f4208a789ba27a341c99df2de9c018b79828"}], "stats": {"total": 104, "additions": 65, "deletions": 39}, "files": [{"sha": "0db15f0feea720c409cdf843c30ee5c304567ad4", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 65, "deletions": 39, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/6e8dad5c073555dcbea9a276f76db47e3d7cc693/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8dad5c073555dcbea9a276f76db47e3d7cc693/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=6e8dad5c073555dcbea9a276f76db47e3d7cc693", "patch": "@@ -28,6 +28,39 @@ enum SubdiagnosticSuggestionKind {\n     Verbose,\n }\n \n+impl FromStr for SubdiagnosticSuggestionKind {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"\" => Ok(SubdiagnosticSuggestionKind::Normal),\n+            \"_short\" => Ok(SubdiagnosticSuggestionKind::Short),\n+            \"_hidden\" => Ok(SubdiagnosticSuggestionKind::Hidden),\n+            \"_verbose\" => Ok(SubdiagnosticSuggestionKind::Verbose),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl SubdiagnosticSuggestionKind {\n+    pub fn to_suggestion_style(&self) -> TokenStream {\n+        match self {\n+            SubdiagnosticSuggestionKind::Normal => {\n+                quote! { rustc_errors::SuggestionStyle::ShowCode }\n+            }\n+            SubdiagnosticSuggestionKind::Short => {\n+                quote! { rustc_errors::SuggestionStyle::HideCodeInline }\n+            }\n+            SubdiagnosticSuggestionKind::Hidden => {\n+                quote! { rustc_errors::SuggestionStyle::HideCodeAlways }\n+            }\n+            SubdiagnosticSuggestionKind::Verbose => {\n+                quote! { rustc_errors::SuggestionStyle::ShowAlways }\n+            }\n+        }\n+    }\n+}\n+\n /// Which kind of subdiagnostic is being created from a variant?\n #[derive(Clone, Copy)]\n enum SubdiagnosticKind {\n@@ -52,17 +85,15 @@ impl FromStr for SubdiagnosticKind {\n             \"note\" => Ok(SubdiagnosticKind::Note),\n             \"help\" => Ok(SubdiagnosticKind::Help),\n             \"warning\" => Ok(SubdiagnosticKind::Warn),\n-            \"suggestion\" => Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Normal)),\n-            \"suggestion_short\" => {\n-                Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Short))\n-            }\n-            \"suggestion_hidden\" => {\n-                Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Hidden))\n-            }\n-            \"suggestion_verbose\" => {\n-                Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Verbose))\n+            _ => {\n+                if let Some(suggestion_kind) =\n+                    s.strip_prefix(\"suggestion\").and_then(|s| s.parse().ok())\n+                {\n+                    return Ok(SubdiagnosticKind::Suggestion(suggestion_kind));\n+                };\n+\n+                Err(())\n             }\n-            _ => Err(()),\n         }\n     }\n }\n@@ -74,18 +105,7 @@ impl quote::IdentFragment for SubdiagnosticKind {\n             SubdiagnosticKind::Note => write!(f, \"note\"),\n             SubdiagnosticKind::Help => write!(f, \"help\"),\n             SubdiagnosticKind::Warn => write!(f, \"warn\"),\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Normal) => {\n-                write!(f, \"suggestion\")\n-            }\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Short) => {\n-                write!(f, \"suggestion_short\")\n-            }\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Hidden) => {\n-                write!(f, \"suggestion_hidden\")\n-            }\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Verbose) => {\n-                write!(f, \"suggestion_verbose\")\n-            }\n+            SubdiagnosticKind::Suggestion(..) => write!(f, \"suggestion_with_style\"),\n         }\n     }\n \n@@ -461,25 +481,31 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n         let diag = &self.diag;\n         let name = format_ident!(\"{}{}\", if span_field.is_some() { \"span_\" } else { \"\" }, kind);\n         let message = quote! { rustc_errors::fluent::#slug };\n-        let call = if matches!(kind, SubdiagnosticKind::Suggestion(..)) {\n-            if let Some(span) = span_field {\n-                quote! { #diag.#name(#span, #message, #code, #applicability); }\n-            } else {\n-                span_err(self.span, \"suggestion without `#[primary_span]` field\").emit();\n-                quote! { unreachable!(); }\n+        let call = match kind {\n+            SubdiagnosticKind::Suggestion(style) => {\n+                if let Some(span) = span_field {\n+                    let style = style.to_suggestion_style();\n+\n+                    quote! { #diag.#name(#span, #message, #code, #applicability, #style); }\n+                } else {\n+                    span_err(self.span, \"suggestion without `#[primary_span]` field\").emit();\n+                    quote! { unreachable!(); }\n+                }\n             }\n-        } else if matches!(kind, SubdiagnosticKind::Label) {\n-            if let Some(span) = span_field {\n-                quote! { #diag.#name(#span, #message); }\n-            } else {\n-                span_err(self.span, \"label without `#[primary_span]` field\").emit();\n-                quote! { unreachable!(); }\n+            SubdiagnosticKind::Label => {\n+                if let Some(span) = span_field {\n+                    quote! { #diag.#name(#span, #message); }\n+                } else {\n+                    span_err(self.span, \"label without `#[primary_span]` field\").emit();\n+                    quote! { unreachable!(); }\n+                }\n             }\n-        } else {\n-            if let Some(span) = span_field {\n-                quote! { #diag.#name(#span, #message); }\n-            } else {\n-                quote! { #diag.#name(#message); }\n+            _ => {\n+                if let Some(span) = span_field {\n+                    quote! { #diag.#name(#span, #message); }\n+                } else {\n+                    quote! { #diag.#name(#message); }\n+                }\n             }\n         };\n "}]}