{"sha": "cf6e21a17f04ddc766633f1f22144f7e6c59008c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNmUyMWExN2YwNGRkYzc2NjYzM2YxZjIyMTQ0ZjdlNmM1OTAwOGM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-25T02:55:24Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-26T08:22:30Z"}, "message": "libsyntax: change attr::parse_seq_* to take &Token", "tree": {"sha": "69167e8aaf0abf9bad078c4bffb7436e5f02e9fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69167e8aaf0abf9bad078c4bffb7436e5f02e9fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf6e21a17f04ddc766633f1f22144f7e6c59008c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6e21a17f04ddc766633f1f22144f7e6c59008c", "html_url": "https://github.com/rust-lang/rust/commit/cf6e21a17f04ddc766633f1f22144f7e6c59008c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf6e21a17f04ddc766633f1f22144f7e6c59008c/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3180d22dde253c86ff42eb8a3e936a7856477ca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3180d22dde253c86ff42eb8a3e936a7856477ca4", "html_url": "https://github.com/rust-lang/rust/commit/3180d22dde253c86ff42eb8a3e936a7856477ca4"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "a5d2a1783d63ffa4b4508755fe2bf41681a03348", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf6e21a17f04ddc766633f1f22144f7e6c59008c/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6e21a17f04ddc766633f1f22144f7e6c59008c/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=cf6e21a17f04ddc766633f1f22144f7e6c59008c", "patch": "@@ -28,7 +28,7 @@ pub impl proto_parser for parser::Parser {\n         let proto = protocol(id, *self.span);\n \n         self.parse_seq_to_before_end(\n-            token::EOF,\n+            &token::EOF,\n             SeqSep {\n                 sep: None,\n                 trailing_sep_allowed: false,\n@@ -65,8 +65,8 @@ pub impl proto_parser for parser::Parser {\n \n         // parse the messages\n         self.parse_unspanned_seq(\n-            token::LBRACE,\n-            token::RBRACE,\n+            &token::LBRACE,\n+            &token::RBRACE,\n             SeqSep {\n                 sep: Some(token::COMMA),\n                 trailing_sep_allowed: true,\n@@ -80,8 +80,8 @@ pub impl proto_parser for parser::Parser {\n \n         let args = if *self.token == token::LPAREN {\n             self.parse_unspanned_seq(\n-                token::LPAREN,\n-                token::RPAREN,\n+                &token::LPAREN,\n+                &token::RPAREN,\n                 SeqSep {\n                     sep: Some(token::COMMA),\n                     trailing_sep_allowed: true,\n@@ -98,8 +98,8 @@ pub impl proto_parser for parser::Parser {\n             let name = *self.interner.get(self.parse_ident());\n             let ntys = if *self.token == token::LT {\n                 self.parse_unspanned_seq(\n-                    token::LT,\n-                    token::GT,\n+                    &token::LT,\n+                    &token::GT,\n                     SeqSep {\n                         sep: Some(token::COMMA),\n                         trailing_sep_allowed: true,"}, {"sha": "bad6c76c36a2bcb1785609e5becbdc5d597299ea", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf6e21a17f04ddc766633f1f22144f7e6c59008c/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6e21a17f04ddc766633f1f22144f7e6c59008c/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=cf6e21a17f04ddc766633f1f22144f7e6c59008c", "patch": "@@ -152,8 +152,8 @@ impl parser_attr for Parser {\n \n     fn parse_meta_seq() -> ~[@ast::meta_item] {\n         self.parse_seq(\n-            token::LPAREN,\n-            token::RPAREN,\n+            &token::LPAREN,\n+            &token::RPAREN,\n             seq_sep_trailing_disallowed(token::COMMA),\n             |p| p.parse_meta_item()\n         ).node"}, {"sha": "93d3b8b33641631e89bf886db9f0332e1d10c25a", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cf6e21a17f04ddc766633f1f22144f7e6c59008c/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6e21a17f04ddc766633f1f22144f7e6c59008c/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=cf6e21a17f04ddc766633f1f22144f7e6c59008c", "patch": "@@ -295,7 +295,7 @@ pub impl Parser {\n     // f must consume tokens until reaching the next separator or\n     // closing bracket.\n     fn parse_seq_to_end<T: Copy>(\n-        ket: token::Token,\n+        ket: &token::Token,\n         sep: SeqSep,\n         f: fn(Parser) -> T\n     ) -> ~[T] {\n@@ -308,36 +308,36 @@ pub impl Parser {\n     // f must consume tokens until reaching the next separator or\n     // closing bracket.\n     fn parse_seq_to_before_end<T: Copy>(\n-        ket: token::Token,\n+        ket: &token::Token,\n         sep: SeqSep,\n         f: fn(Parser) -> T\n     ) -> ~[T] {\n         let mut first: bool = true;\n         let mut v: ~[T] = ~[];\n-        while *self.token != ket {\n+        while *self.token != *ket {\n             match sep.sep {\n               Some(ref t) => {\n                 if first { first = false; }\n                 else { self.expect(t); }\n               }\n               _ => ()\n             }\n-            if sep.trailing_sep_allowed && *self.token == ket { break; }\n+            if sep.trailing_sep_allowed && *self.token == *ket { break; }\n             v.push(f(self));\n         }\n-        v\n+        return v;\n     }\n \n     // parse a sequence, including the closing delimiter. The function\n     // f must consume tokens until reaching the next separator or\n     // closing bracket.\n     fn parse_unspanned_seq<T: Copy>(\n-        +bra: token::Token,\n-        +ket: token::Token,\n+        bra: &token::Token,\n+        ket: &token::Token,\n         sep: SeqSep,\n         f: fn(Parser) -> T\n     ) -> ~[T] {\n-        self.expect(&bra);\n+        self.expect(bra);\n         let result = self.parse_seq_to_before_end(ket, sep, f);\n         self.bump();\n         result\n@@ -346,13 +346,13 @@ pub impl Parser {\n     // NB: Do not use this function unless you actually plan to place the\n     // spanned list in the AST.\n     fn parse_seq<T: Copy>(\n-        +bra: token::Token,\n-        +ket: token::Token,\n+        bra: &token::Token,\n+        ket: &token::Token,\n         sep: SeqSep,\n         f: fn(Parser) -> T\n     ) -> spanned<~[T]> {\n         let lo = self.span.lo;\n-        self.expect(&bra);\n+        self.expect(bra);\n         let result = self.parse_seq_to_before_end(ket, sep, f);\n         let hi = self.span.hi;\n         self.bump();"}, {"sha": "1e6473c3cb177948c1b2fe6fef41a995f610fe4f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/cf6e21a17f04ddc766633f1f22144f7e6c59008c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6e21a17f04ddc766633f1f22144f7e6c59008c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cf6e21a17f04ddc766633f1f22144f7e6c59008c", "patch": "@@ -421,8 +421,8 @@ pub impl Parser {\n             self.expect(&token::GT);\n         }\n         let inputs = self.parse_unspanned_seq(\n-            token::LPAREN,\n-            token::RPAREN,\n+            &token::LPAREN,\n+            &token::RPAREN,\n             seq_sep_trailing_disallowed(token::COMMA),\n             |p| p.parse_arg_general(false)\n         );\n@@ -432,8 +432,8 @@ pub impl Parser {\n \n     fn parse_trait_methods() -> ~[trait_method] {\n         do self.parse_unspanned_seq(\n-            token::LBRACE,\n-            token::RBRACE,\n+            &token::LBRACE,\n+            &token::RBRACE,\n             seq_sep_none()\n         ) |p| {\n             let attrs = p.parse_outer_attributes();\n@@ -628,8 +628,8 @@ pub impl Parser {\n             ty_ptr(self.parse_mt())\n         } else if *self.token == token::LBRACE {\n             let elems = self.parse_unspanned_seq(\n-                token::LBRACE,\n-                token::RBRACE,\n+                &token::LBRACE,\n+                &token::RBRACE,\n                 seq_sep_trailing_allowed(token::COMMA),\n                 |p| p.parse_ty_field()\n             );\n@@ -1190,7 +1190,7 @@ pub impl Parser {\n                     // Vector with two or more elements.\n                     self.bump();\n                     let remaining_exprs = self.parse_seq_to_end(\n-                        token::RBRACKET,\n+                        &token::RBRACKET,\n                         seq_sep_trailing_allowed(token::COMMA),\n                         |p| p.parse_expr()\n                     );\n@@ -1246,8 +1246,8 @@ pub impl Parser {\n \n                 let ket = token::flip_delimiter(&*self.token);\n                 let tts = self.parse_unspanned_seq(\n-                    *self.token,\n-                    ket,\n+                    &copy *self.token,\n+                    &ket,\n                     seq_sep_none(),\n                     |p| p.parse_token_tree()\n                 );\n@@ -1339,8 +1339,8 @@ pub impl Parser {\n                     match *self.token {\n                         token::LPAREN if self.permits_call() => {\n                             let es = self.parse_unspanned_seq(\n-                                token::LPAREN,\n-                                token::RPAREN,\n+                                &token::LPAREN,\n+                                &token::RPAREN,\n                                 seq_sep_trailing_disallowed(token::COMMA),\n                                 |p| p.parse_expr()\n                             );\n@@ -1363,8 +1363,8 @@ pub impl Parser {\n               // expr(...)\n               token::LPAREN if self.permits_call() => {\n                 let es = self.parse_unspanned_seq(\n-                    token::LPAREN,\n-                    token::RPAREN,\n+                    &token::LPAREN,\n+                    &token::RPAREN,\n                     seq_sep_trailing_disallowed(token::COMMA),\n                     |p| p.parse_expr()\n                 );\n@@ -1434,8 +1434,8 @@ pub impl Parser {\n \n                 if *p.token == token::LPAREN {\n                     let seq = p.parse_seq(\n-                        token::LPAREN,\n-                        token::RPAREN,\n+                        &token::LPAREN,\n+                        &token::RPAREN,\n                         seq_sep_none(),\n                         |p| p.parse_token_tree()\n                     );\n@@ -1471,7 +1471,7 @@ pub impl Parser {\n                         ~[parse_any_tt_tok(self)],\n                         vec::append(\n                             self.parse_seq_to_before_end(\n-                                ket,\n+                                &ket,\n                                 seq_sep_none(),\n                                 |p| p.parse_token_tree()\n                             ),\n@@ -2320,8 +2320,8 @@ pub impl Parser {\n                                   }\n                                 _ => {\n                                     args = self.parse_unspanned_seq(\n-                                        token::LPAREN,\n-                                        token::RPAREN,\n+                                        &token::LPAREN,\n+                                        &token::RPAREN,\n                                         seq_sep_trailing_disallowed(\n                                             token::COMMA\n                                         ),\n@@ -2470,8 +2470,8 @@ pub impl Parser {\n             };\n \n             let tts = self.parse_unspanned_seq(\n-                token::LPAREN,\n-                token::RPAREN,\n+                &token::LPAREN,\n+                &token::RPAREN,\n                 seq_sep_none(),\n                 |p| p.parse_token_tree()\n             );\n@@ -2780,8 +2780,8 @@ pub impl Parser {\n     {\n         let args_or_capture_items: ~[arg_or_capture_item] =\n             self.parse_unspanned_seq(\n-                token::LPAREN,\n-                token::RPAREN,\n+                &token::LPAREN,\n+                &token::RPAREN,\n                 seq_sep_trailing_disallowed(token::COMMA),\n                 parse_arg_fn\n             );\n@@ -2865,7 +2865,7 @@ pub impl Parser {\n                     self.bump();\n                     let sep = seq_sep_trailing_disallowed(token::COMMA);\n                     args_or_capture_items = self.parse_seq_to_before_end(\n-                        token::RPAREN,\n+                        &token::RPAREN,\n                         sep,\n                         parse_arg_fn\n                     );\n@@ -2882,7 +2882,7 @@ pub impl Parser {\n         } else {\n             let sep = seq_sep_trailing_disallowed(token::COMMA);\n             args_or_capture_items = self.parse_seq_to_before_end(\n-                token::RPAREN,\n+                &token::RPAREN,\n                 sep,\n                 parse_arg_fn\n             );\n@@ -2910,8 +2910,8 @@ pub impl Parser {\n                 ~[]\n             } else {\n                 self.parse_unspanned_seq(\n-                    token::BINOP(token::OR),\n-                    token::BINOP(token::OR),\n+                    &token::BINOP(token::OR),\n+                    &token::BINOP(token::OR),\n                     seq_sep_trailing_disallowed(token::COMMA),\n                     |p| p.parse_fn_block_arg()\n                 )\n@@ -3112,7 +3112,7 @@ pub impl Parser {\n \n     fn parse_trait_ref_list(ket: &token::Token) -> ~[@trait_ref] {\n         self.parse_seq_to_before_end(\n-            *ket,\n+            ket,\n             seq_sep_none(),\n             |p| p.parse_trait_ref()\n         )\n@@ -3163,8 +3163,8 @@ pub impl Parser {\n             // It's a tuple-like struct.\n             is_tuple_like = true;\n             fields = do self.parse_unspanned_seq(\n-                token::LPAREN,\n-                token::RPAREN,\n+                &token::LPAREN,\n+                &token::RPAREN,\n                 seq_sep_trailing_allowed(token::COMMA)\n             ) |p| {\n                 let lo = p.span.lo;\n@@ -3729,8 +3729,8 @@ pub impl Parser {\n                 } else if *self.token == token::LPAREN {\n                     all_nullary = false;\n                     let arg_tys = self.parse_unspanned_seq(\n-                        token::LPAREN,\n-                        token::RPAREN,\n+                        &token::LPAREN,\n+                        &token::RPAREN,\n                         seq_sep_trailing_disallowed(token::COMMA),\n                         |p| p.parse_ty(false)\n                     );\n@@ -3982,8 +3982,8 @@ pub impl Parser {\n                 token::LPAREN | token::LBRACE => {\n                     let ket = token::flip_delimiter(&*self.token);\n                     self.parse_unspanned_seq(\n-                        *self.token,\n-                        ket,\n+                        &copy *self.token,\n+                        &ket,\n                         seq_sep_none(),\n                         |p| p.parse_token_tree()\n                     )\n@@ -4074,8 +4074,8 @@ pub impl Parser {\n                   // foo::bar::{a,b,c}\n                   token::LBRACE => {\n                     let idents = self.parse_unspanned_seq(\n-                        token::LBRACE,\n-                        token::RBRACE,\n+                        &token::LBRACE,\n+                        &token::RBRACE,\n                         seq_sep_trailing_allowed(token::COMMA),\n                         |p| p.parse_path_list_ident()\n                     );"}]}