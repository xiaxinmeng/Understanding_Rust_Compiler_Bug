{"sha": "9e1e15209129dad9d3bba90450a43ffb2505df14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMWUxNTIwOTEyOWRhZDlkM2JiYTkwNDUwYTQzZmZiMjUwNWRmMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-23T04:06:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-23T04:06:25Z"}, "message": "auto merge of #8596 : vadimcn/rust/master, r=alexcrichton\n\nThis resolves issue #908.  \r\n\r\nNotable changes:\r\n-  On Windows, LLVM integrated assembler emits bad stack unwind tables when segmented stacks are enabled.  However, unwind info directives in the assembly output are correct, so we generate assembly first and then run it through an external assembler, just like it is already done for Android builds.\r\n\r\n- Linker is invoked  via \"g++\" command instead of \"gcc\": g++ passes the appropriate magic parameters to the linker, which ensure correct registration of stack unwind tables in dynamic libraries.", "tree": {"sha": "13e3f799277ef2fe51b36dc6f83f989f465c87d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13e3f799277ef2fe51b36dc6f83f989f465c87d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e1e15209129dad9d3bba90450a43ffb2505df14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e1e15209129dad9d3bba90450a43ffb2505df14", "html_url": "https://github.com/rust-lang/rust/commit/9e1e15209129dad9d3bba90450a43ffb2505df14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e1e15209129dad9d3bba90450a43ffb2505df14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f703770410aa6b333978f192ff00f2ce94b0523", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f703770410aa6b333978f192ff00f2ce94b0523", "html_url": "https://github.com/rust-lang/rust/commit/6f703770410aa6b333978f192ff00f2ce94b0523"}, {"sha": "651f38258d72742c5961d646f865316f8ea1823c", "url": "https://api.github.com/repos/rust-lang/rust/commits/651f38258d72742c5961d646f865316f8ea1823c", "html_url": "https://github.com/rust-lang/rust/commit/651f38258d72742c5961d646f865316f8ea1823c"}], "stats": {"total": 260, "additions": 94, "deletions": 166}, "files": [{"sha": "1df69945a6057aaee0088b2311ae65c4b414071f", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -612,7 +612,7 @@ mod tests {\n         }\n     }\n \n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_arc_condvar_poison() {\n         unsafe {\n             let arc = ~MutexArc::new(1);\n@@ -636,7 +636,7 @@ mod tests {\n             }\n         }\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_mutex_arc_poison() {\n         unsafe {\n             let arc = ~MutexArc::new(1);\n@@ -651,7 +651,7 @@ mod tests {\n             }\n         }\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     pub fn test_mutex_arc_unwrap_poison() {\n         let arc = MutexArc::new(1);\n         let arc2 = ~(&arc).clone();\n@@ -668,7 +668,7 @@ mod tests {\n         let one = arc.unwrap();\n         assert!(one == 1);\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_rw_arc_poison_wr() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();\n@@ -681,7 +681,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_rw_arc_poison_ww() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();\n@@ -694,7 +694,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_rw_arc_poison_dw() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();\n@@ -709,7 +709,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rw_arc_no_poison_rr() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();\n@@ -722,7 +722,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rw_arc_no_poison_rw() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();\n@@ -735,7 +735,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rw_arc_no_poison_dr() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();"}, {"sha": "e24e747d61ab42ab3f8bf88b4913fc85fdd79125", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -291,7 +291,6 @@ fn test_arena_destructors() {\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(windows))]\n fn test_arena_destructors_fail() {\n     let arena = Arena::new();\n     // Put some stuff in the arena."}, {"sha": "6ae67e7c794ef49d5f7df494c1f3a22c706a60d5", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -185,7 +185,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_overrun_get() {\n         let cv = malloc(16u as size_t);\n \n@@ -194,7 +193,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_overrun_set() {\n         let cv = malloc(16u as size_t);\n "}, {"sha": "d102f6068f5613a49b2f85d9da80be798343dcf9", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -967,12 +967,10 @@ mod test {\n         }\n \n         #[test]\n-        #[ignore(cfg(windows))]\n         fn test_try_recv_none4_reader() {\n             test_try_recv_none4(reader_port_loader);\n         }\n         #[test]\n-        #[ignore(cfg(windows))]\n         fn test_try_recv_none4_pipe() {\n             test_try_recv_none4(pipe_port_loader);\n         }"}, {"sha": "ce56a3dcaa69b479e42277311eaee69ae75efb4a", "filename": "src/libextra/future.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -212,7 +212,6 @@ mod test {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n     fn test_futurefail() {\n         let mut f = spawn(|| fail!());\n         let _x: ~str = f.get();"}, {"sha": "a9341a8075d416a69206d23ff8e7700beb26df3e", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -338,7 +338,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_empty_pop() { let mut heap = PriorityQueue::new::<int>(); heap.pop(); }\n \n     #[test]\n@@ -349,7 +348,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_empty_top() { let empty = PriorityQueue::new::<int>(); empty.top(); }\n \n     #[test]\n@@ -360,7 +358,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_empty_replace() { let mut heap = PriorityQueue::new(); heap.replace(5); }\n \n     #[test]"}, {"sha": "afb4cf3943abae035a6cba94d2cd3f8d791f0e27", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -921,7 +921,7 @@ mod tests {\n             assert!(!cond.signal());\n         }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_mutex_killed_simple() {\n         // Mutex must get automatically unlocked if failed/killed within.\n         let m = ~Mutex::new();\n@@ -937,7 +937,7 @@ mod tests {\n         do m.lock { }\n     }\n     #[ignore(reason = \"linked failure\")]\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_mutex_killed_cond() {\n         // Getting killed during cond wait must not corrupt the mutex while\n         // unwinding (e.g. double unlock).\n@@ -964,7 +964,7 @@ mod tests {\n         }\n     }\n     #[ignore(reason = \"linked failure\")]\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_mutex_killed_broadcast() {\n         use std::unstable::finally::Finally;\n \n@@ -1024,7 +1024,7 @@ mod tests {\n             cond.wait();\n         }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_mutex_different_conds() {\n         let result = do task::try {\n             let m = ~Mutex::new_with_condvars(2);\n@@ -1045,7 +1045,7 @@ mod tests {\n         };\n         assert!(result.is_err());\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_mutex_no_condvars() {\n         let result = do task::try {\n             let m = ~Mutex::new_with_condvars(0);\n@@ -1275,7 +1275,7 @@ mod tests {\n         test_rwlock_cond_broadcast_helper(12, false, true);\n         test_rwlock_cond_broadcast_helper(12, false, false);\n     }\n-    #[cfg(test)] #[ignore(cfg(windows))]\n+    #[cfg(test)]\n     fn rwlock_kill_helper(mode1: RWLockMode, mode2: RWLockMode) {\n         // Mutex must get automatically unlocked if failed/killed within.\n         let x = ~RWLock::new();\n@@ -1290,23 +1290,23 @@ mod tests {\n         // child task must have finished by the time try returns\n         do lock_rwlock_in_mode(x, mode2) { }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rwlock_reader_killed_writer() {\n         rwlock_kill_helper(Read, Write);\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rwlock_writer_killed_reader() {\n         rwlock_kill_helper(Write,Read );\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rwlock_reader_killed_reader() {\n         rwlock_kill_helper(Read, Read );\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rwlock_writer_killed_writer() {\n         rwlock_kill_helper(Write,Write);\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rwlock_kill_downgrader() {\n         rwlock_kill_helper(Downgrade, Read);\n         rwlock_kill_helper(Read, Downgrade);\n@@ -1321,7 +1321,7 @@ mod tests {\n         rwlock_kill_helper(Downgrade, DowngradeRead);\n         rwlock_kill_helper(Downgrade, DowngradeRead);\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_rwlock_downgrade_cant_swap() {\n         // Tests that you can't downgrade with a different rwlock's token.\n         let x = ~RWLock::new();"}, {"sha": "d940e8bb4734d208427e7413956ed67f84f6d401", "filename": "src/libextra/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -1163,7 +1163,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     fn test_should_fail() {\n         fn f() { fail!(); }\n         let desc = TestDescAndFn {"}, {"sha": "db61042b9ff9893649da8ca5819c47c7028e6df1", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -419,16 +419,8 @@ pub mod write {\n         }\n     }\n \n-    pub fn run_ndk(sess: Session, assembly: &Path, object: &Path) {\n-        let cc_prog: ~str = match &sess.opts.android_cross_path {\n-            &Some(ref path) => {\n-                fmt!(\"%s/bin/arm-linux-androideabi-gcc\", *path)\n-            }\n-            &None => {\n-                sess.fatal(\"need Android NDK path for building \\\n-                            (--android-cross-path)\")\n-            }\n-        };\n+    pub fn run_assembler(sess: Session, assembly: &Path, object: &Path) {\n+        let cc_prog = super::get_cc_prog(sess);\n \n         let cc_args = ~[\n             ~\"-c\",\n@@ -813,18 +805,14 @@ pub fn output_dll_filename(os: session::os, lm: LinkMeta) -> ~str {\n     fmt!(\"%s%s-%s-%s%s\", dll_prefix, lm.name, lm.extras_hash, lm.vers, dll_suffix)\n }\n \n-// If the user wants an exe generated we need to invoke\n-// cc to link the object file with some libs\n-pub fn link_binary(sess: Session,\n-                   obj_filename: &Path,\n-                   out_filename: &Path,\n-                   lm: LinkMeta) {\n+pub fn get_cc_prog(sess: Session) -> ~str {\n     // In the future, FreeBSD will use clang as default compiler.\n     // It would be flexible to use cc (system's default C compiler)\n     // instead of hard-coded gcc.\n-    // For win32, there is no cc command,\n-    // so we add a condition to make it use gcc.\n-    let cc_prog: ~str = match sess.opts.linker {\n+    // For win32, there is no cc command, so we add a condition to make it use g++.\n+    // We use g++ rather than gcc because it automatically adds linker options required\n+    // for generation of dll modules that correctly register stack unwind tables.\n+    match sess.opts.linker {\n         Some(ref linker) => linker.to_str(),\n         None => match sess.targ_cfg.os {\n             session::os_android =>\n@@ -837,12 +825,21 @@ pub fn link_binary(sess: Session,\n                                     (--android-cross-path)\")\n                     }\n                 },\n-            session::os_win32 => ~\"gcc\",\n+            session::os_win32 => ~\"g++\",\n             _ => ~\"cc\"\n         }\n-    };\n-    // The invocations of cc share some flags across platforms\n+    }\n+}\n+\n+// If the user wants an exe generated we need to invoke\n+// cc to link the object file with some libs\n+pub fn link_binary(sess: Session,\n+                   obj_filename: &Path,\n+                   out_filename: &Path,\n+                   lm: LinkMeta) {\n \n+    let cc_prog = get_cc_prog(sess);\n+    // The invocations of cc share some flags across platforms\n \n     let output = if *sess.building_library {\n         let long_libname = output_dll_filename(sess.targ_cfg.os, lm);"}, {"sha": "ca3247db669cb3210cdca66084d6f50258888076", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -333,21 +333,31 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n                                trans: &CrateTranslation,\n                                outputs: &OutputFilenames) {\n \n-    // NB: Android hack\n-    if sess.targ_cfg.os == session::os_android &&\n+    // On Windows, LLVM integrated assembler emits bad stack unwind tables when\n+    // segmented stacks are enabled.  However, unwind info directives in assembly\n+    // output are OK, so we generate assembly first and then run it through\n+    // an external assembler.\n+    // Same for Android.\n+    if (sess.targ_cfg.os == session::os_android ||\n+        sess.targ_cfg.os == session::os_win32) &&\n         (sess.opts.output_type == link::output_type_object ||\n          sess.opts.output_type == link::output_type_exe) {\n         let output_type = link::output_type_assembly;\n-        let obj_filename = outputs.obj_filename.with_filetype(\"s\");\n+        let asm_filename = outputs.obj_filename.with_filetype(\"s\");\n \n         time(sess.time_passes(), ~\"LLVM passes\", ||\n             link::write::run_passes(sess,\n                                     trans.context,\n                                     trans.module,\n                                     output_type,\n-                                    &obj_filename));\n+                                    &asm_filename));\n \n-        link::write::run_ndk(sess, &obj_filename, &outputs.obj_filename);\n+        link::write::run_assembler(sess, &asm_filename, &outputs.obj_filename);\n+\n+        // Remove assembly source unless --save-temps was specified\n+        if !sess.opts.save_temps {\n+            os::remove_file(&asm_filename);\n+        }\n     } else {\n         time(sess.time_passes(), ~\"LLVM passes\", ||\n             link::write::run_passes(sess,"}, {"sha": "df2fe70ff0e12a9d97abad9682debece3938edcb", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -283,7 +283,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_with_ref_empty_fail() {\n         let c_str = unsafe { CString::new(ptr::null(), false) };\n         c_str.with_ref(|_| ());\n@@ -306,7 +305,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     fn test_to_c_str_fail() {\n         use c_str::null_byte::cond;\n "}, {"sha": "5db855d5b3c286296badd9d69174efa8d6cd63e8", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -93,15 +93,13 @@ fn test_basic() {\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(windows))]\n fn test_take_empty() {\n     let value_cell = Cell::new_empty::<~int>();\n     value_cell.take();\n }\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(windows))]\n fn test_put_back_non_empty() {\n     let value_cell = Cell::new(~10);\n     value_cell.put_back(~20);"}, {"sha": "2412ce9daf3c1a569ff929b1ee109249d46d6224", "filename": "src/libstd/io.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -2017,7 +2017,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_read_buffer_too_small() {\n         let path = &Path(\"tmp/lib-io-test-read-buffer-too-small.tmp\");\n         // ensure the file exists"}, {"sha": "5d6610e6b55a315c68c955259abf503398ba697f", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -201,7 +201,6 @@ fn test_tls_overwrite_multiple_types() {\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(windows))]\n fn test_tls_cleanup_on_failure() {\n     static str_key: Key<@~str> = &Key;\n     static box_key: Key<@@()> = &Key;"}, {"sha": "e2218ce27362637fd0c415dbf4cbf2dd035b1c07", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -919,7 +919,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_range_step_zero_step() {\n         do range_step(0,10,0) |_i| { true };\n     }"}, {"sha": "d81a2756ad84a5802c0dc32950193079f9095b4a", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -638,14 +638,12 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     pub fn to_str_radix1() {\n         100u.to_str_radix(1u);\n     }\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     pub fn to_str_radix37() {\n         100u.to_str_radix(37u);\n     }\n@@ -697,13 +695,11 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_range_step_zero_step_up() {\n         do range_step(0,10,0) |_i| { true };\n     }\n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_range_step_zero_step_down() {\n         do range_step(0,-10,0) |_i| { true };\n     }"}, {"sha": "34c47d9f61ecdefb86dfb7b031abedf2c12165be", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -479,7 +479,7 @@ mod tests {\n         assert_eq!(y2, 5);\n         assert!(y.is_none());\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_option_too_much_dance() {\n         let mut y = Some(util::NonCopyable);\n         let _y2 = y.take_unwrap();"}, {"sha": "f734a59f67f691a93c038911eb81f77a95fa36f4", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -1815,7 +1815,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     #[ignore]\n     fn test_setenv_overwrite() {\n         let n = make_rand_name();\n@@ -1829,7 +1828,6 @@ mod tests {\n     // Windows GetEnvironmentVariable requires some extra work to make sure\n     // the buffer the variable is copied into is the right size\n     #[test]\n-    #[ignore(cfg(windows))]\n     #[ignore]\n     fn test_getenv_big() {\n         let mut s = ~\"\";"}, {"sha": "12af303f33ffe7fb5a3b1f8f34ae031631b8a9c4", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -711,7 +711,6 @@ pub mod ptr_tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_ptr_array_each_with_len_null_ptr() {\n         unsafe {\n             array_each_with_len(0 as **libc::c_char, 1, |e| {\n@@ -721,7 +720,6 @@ pub mod ptr_tests {\n     }\n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_ptr_array_each_null_ptr() {\n         unsafe {\n             array_each(0 as **libc::c_char, |e| {"}, {"sha": "c7f3fd7740ba23680a4fcf69dcf7fc731739fc3e", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -1007,7 +1007,6 @@ mod test {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_gen_int_from_fail() {\n         let mut r = rng();\n         r.gen_int_range(5, -2);\n@@ -1024,7 +1023,6 @@ mod test {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_gen_uint_range_fail() {\n         let mut r = rng();\n         r.gen_uint_range(5u, 2u);"}, {"sha": "bc07de7d965da817f49c37cb6877059e1464da20", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -751,7 +751,6 @@ mod test {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn push_bytes_fail_reset_len() {\n         // push_bytes unsafely sets the vector length. This is testing that\n         // upon failure the length is reset correctly.\n@@ -806,7 +805,6 @@ mod test {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn read_to_end_error() {\n         let mut reader = MockReader::new();\n         let count = Cell::new(0);"}, {"sha": "531d55f6043b38e08291f9f3cfa5f98148df7c82", "filename": "src/libstd/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fselect.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -136,7 +136,7 @@ mod test {\n     use cell::Cell;\n     use iterator::{Iterator, range};\n \n-    #[test] #[ignore(cfg(windows))] #[should_fail]\n+    #[test] #[should_fail]\n     fn select_doesnt_get_trolled() {\n         select::<PortOne<()>>([]);\n     }\n@@ -316,7 +316,7 @@ mod test {\n         }\n     }\n \n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn select_killed() {\n         do run_in_newsched_task {\n             let (success_p, success_c) = oneshot::<bool>();"}, {"sha": "610ca93494c9971f0e91b9ee2d44d6b598ac9bca", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -2451,7 +2451,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_pop_char_fail() {\n         let mut data = ~\"\";\n         let _cc3 = data.pop_char();\n@@ -2767,7 +2766,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_slice_fail() {\n         \"\u4e2d\u534eVi\u1ec7t Nam\".slice(0u, 2u);\n     }\n@@ -2933,7 +2931,6 @@ mod tests {\n \n \n     #[test]\n-    #[ignore(cfg(windows))]\n     fn test_from_bytes_fail() {\n         use str::not_utf8::cond;\n \n@@ -2983,7 +2980,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_as_bytes_fail() {\n         // Don't double free. (I'm not sure if this exercises the"}, {"sha": "e76b81a904df24efbb82b38db50d2f91847c8ee7", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -616,7 +616,7 @@ pub unsafe fn rekillable<U>(f: &fn() -> U) -> U {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_kill_unkillable_task() {\n     use rt::test::*;\n \n@@ -637,7 +637,7 @@ fn test_kill_unkillable_task() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_kill_rekillable_task() {\n     use rt::test::*;\n \n@@ -658,7 +658,7 @@ fn test_kill_rekillable_task() {\n     }\n }\n \n-#[test] #[should_fail] #[ignore(cfg(windows))]\n+#[test] #[should_fail]\n fn test_cant_dup_task_builder() {\n     let mut builder = task();\n     builder.unlinked();\n@@ -679,7 +679,7 @@ fn test_cant_dup_task_builder() {\n fn block_forever() { let (po, _ch) = stream::<()>(); po.recv(); }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -698,15 +698,15 @@ fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_unlinked_unsup_no_fail_up() { // child unlinked fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n         do spawn_unlinked { fail!(); }\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -716,7 +716,7 @@ fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_unlinked_sup_fail_down() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -729,7 +729,7 @@ fn test_spawn_unlinked_sup_fail_down() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -750,7 +750,7 @@ fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -767,7 +767,7 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -780,7 +780,7 @@ fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_unsup_fail_down() { // parent fails; child fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -793,7 +793,7 @@ fn test_spawn_linked_unsup_fail_down() { // parent fails; child fails\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_unsup_default_opts() { // parent fails; child fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -812,7 +812,7 @@ fn test_spawn_linked_unsup_default_opts() { // parent fails; child fails\n // when the middle task exits successfully early before kill signals are sent.\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_failure_propagate_grandchild() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -829,7 +829,7 @@ fn test_spawn_failure_propagate_grandchild() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_failure_propagate_secondborn() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -846,7 +846,7 @@ fn test_spawn_failure_propagate_secondborn() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_failure_propagate_nephew_or_niece() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -863,7 +863,7 @@ fn test_spawn_failure_propagate_nephew_or_niece() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_sup_propagate_sibling() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -941,7 +941,6 @@ fn test_add_wrapper() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n fn test_future_result() {\n     let mut result = None;\n     let mut builder = task();\n@@ -959,7 +958,7 @@ fn test_future_result() {\n     assert_eq!(result.unwrap().recv(), Failure);\n }\n \n-#[test] #[should_fail] #[ignore(cfg(windows))]\n+#[test] #[should_fail]\n fn test_back_to_the_future_result() {\n     let mut builder = task();\n     builder.future_result(util::ignore);\n@@ -977,7 +976,6 @@ fn test_try_success() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n fn test_try_fail() {\n     match do try {\n         fail!()\n@@ -1159,7 +1157,6 @@ fn test_avoid_copying_the_body_unlinked() {\n \n #[ignore(reason = \"linked failure\")]\n #[test]\n-#[ignore(cfg(windows))]\n #[should_fail]\n fn test_unkillable() {\n     let (po, ch) = stream();\n@@ -1195,7 +1192,6 @@ fn test_unkillable() {\n \n #[ignore(reason = \"linked failure\")]\n #[test]\n-#[ignore(cfg(windows))]\n #[should_fail]\n fn test_unkillable_nested() {\n     let (po, ch) = comm::stream();\n@@ -1261,7 +1257,7 @@ fn test_simple_newsched_spawn() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_watched() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -1284,7 +1280,7 @@ fn test_spawn_watched() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_indestructible() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {"}, {"sha": "783d9c3e810c9557eabaae6002dd5411da36d136", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -722,7 +722,6 @@ fn test_spawn_raw_simple() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n fn test_spawn_raw_unsupervise() {\n     let opts = task::TaskOpts {\n         linked: false,\n@@ -736,7 +735,6 @@ fn test_spawn_raw_unsupervise() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n fn test_spawn_raw_notify_success() {\n     let (notify_po, notify_ch) = comm::stream();\n \n@@ -750,7 +748,6 @@ fn test_spawn_raw_notify_success() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n fn test_spawn_raw_notify_failure() {\n     // New bindings for these\n     let (notify_po, notify_ch) = comm::stream();"}, {"sha": "f2cfd114349e48adecc56dbbaafdc1aaeca76508", "filename": "src/libstd/unstable/extfmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fextfmt.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -441,14 +441,12 @@ pub mod ct {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_parse_type_missing() {\n         parse_type(\"\", 0, 0, die);\n     }\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_parse_type_unknown() {\n         parse_type(\"!\", 0, 1, die);\n     }"}, {"sha": "42820aaaa959d562e33b88a1b897b1c1e792ef26", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -83,7 +83,6 @@ fn test_success() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n #[should_fail]\n fn test_fail() {\n     let mut i = 0;"}, {"sha": "d7f9988edeff92da064b43bcd15e669c305abc2f", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -481,7 +481,7 @@ mod tests {\n         }\n     }\n \n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn exclusive_new_poison() {\n         unsafe {\n             // Tests that if one task fails inside of an Exclusive::new, subsequent\n@@ -599,7 +599,7 @@ mod tests {\n         res.unwrap().recv();\n     }\n \n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn exclusive_new_unwrap_conflict() {\n         let x = Exclusive::new(~~\"hello\");\n         let x2 = Cell::new(x.clone());\n@@ -615,7 +615,7 @@ mod tests {\n         assert!(res.unwrap().recv() == task::Success);\n     }\n \n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn exclusive_new_unwrap_deadlock() {\n         // This is not guaranteed to get to the deadlock before being killed,\n         // but it will show up sometimes, and if the deadlock were not there,"}, {"sha": "f196cf423c130204dda7470c89eb8bcdcf9869d1", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -2521,7 +2521,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_head_empty() {\n         let a: ~[int] = ~[];\n         a.head();\n@@ -2547,7 +2546,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_tail_empty() {\n         let a: ~[int] = ~[];\n         a.tail();\n@@ -2563,7 +2561,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_tailn_empty() {\n         let a: ~[int] = ~[];\n         a.tailn(2);\n@@ -2579,7 +2576,6 @@ mod tests {\n \n     #[init]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_init_empty() {\n         let a: ~[int] = ~[];\n         a.init();\n@@ -2595,7 +2591,6 @@ mod tests {\n \n     #[init]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_initn_empty() {\n         let a: ~[int] = ~[];\n         a.initn(2);\n@@ -2611,7 +2606,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_last_empty() {\n         let a: ~[int] = ~[];\n         a.last();\n@@ -3079,7 +3073,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_insert_oob() {\n         let mut a = ~[1, 2, 3];\n@@ -3102,7 +3095,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_remove_oob() {\n         let mut a = ~[1, 2, 3];\n@@ -3130,7 +3122,6 @@ mod tests {\n \n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_from_fn_fail() {\n         do from_fn(100) |v| {\n@@ -3140,7 +3131,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_build_fail() {\n         do build |push| {\n@@ -3153,7 +3143,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_grow_fn_fail() {\n         let mut v = ~[];\n@@ -3165,8 +3154,8 @@ mod tests {\n         }\n     }\n \n+    #[ignore] // FIXME #8698\n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_map_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3180,8 +3169,8 @@ mod tests {\n         };\n     }\n \n+    #[ignore] // FIXME #8698\n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_flat_map_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3195,8 +3184,8 @@ mod tests {\n         };\n     }\n \n+    #[ignore] // FIXME #8698\n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_rposition_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3210,8 +3199,8 @@ mod tests {\n         };\n     }\n \n+    #[ignore] // FIXME #8698\n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_permute_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3226,7 +3215,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_as_imm_buf_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3236,7 +3224,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_as_mut_buf_fail() {\n         let mut v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3247,7 +3234,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_copy_memory_oob() {\n         unsafe {\n             let mut a = [1, 2, 3, 4];\n@@ -3469,7 +3455,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_window_iterator_0() {\n         let v = &[1i,2,3,4];\n         let _it = v.window_iter(0);\n@@ -3494,7 +3479,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_chunk_iterator_0() {\n         let v = &[1i,2,3,4];\n         let _it = v.chunk_iter(0);"}, {"sha": "eeee7a4e715e36a301a87ea75d9cc243d64c40f5", "filename": "src/rt/arch/i386/ccall.S", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Frt%2Farch%2Fi386%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Frt%2Farch%2Fi386%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fccall.S?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -12,7 +12,7 @@\n \n \t.text\n \n-#if defined(__APPLE__) || defined(_WIN32)\n+#if defined(__APPLE__) || defined(__WIN32__)\n .globl ___morestack\n ___morestack:\n #else\n@@ -21,20 +21,20 @@ ___morestack:\n __morestack:\n #endif\n \n-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__WIN32__)\n \t.cfi_startproc\n #endif\n \n \tpushl %ebp\n \n-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__WIN32__)\n \t.cfi_def_cfa_offset 8\n \t.cfi_offset %ebp, -8\n #endif\n \n \tmovl %esp,%ebp          // save esp\n \n-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__WIN32__)\n \t.cfi_def_cfa_register %ebp\n #endif\n \n@@ -47,6 +47,6 @@ __morestack:\n \n \tret\n \n-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__WIN32__)\n \t.cfi_endproc\n #endif"}, {"sha": "9598f14579f752d5b02052d074792991dfc38894", "filename": "src/rt/arch/i386/morestack.S", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fmorestack.S?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -97,7 +97,7 @@\n #endif\n .globl MORESTACK\n \n-// FIXME: What about _WIN32?\n+// FIXME: What about __WIN32__?\n #if defined(__linux__) || defined(__FreeBSD__)\n \t.hidden MORESTACK\n #else\n@@ -111,7 +111,7 @@\n #endif\n \n MORESTACK:\n-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__WIN32__)\n \t.cfi_startproc\n #endif\n \n@@ -130,15 +130,15 @@ MORESTACK:\n \t// __morestack, and an extra return address.\n \n \tpushl %ebp\n-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__WIN32__)\n \t// The CFA is 20 bytes above the register that it is\n \t// associated with for this frame (which will be %ebp)\n \t.cfi_def_cfa_offset 20\n \t// %ebp is -20 bytes from the CFA\n \t.cfi_offset %ebp, -20\n #endif\n \tmovl %esp, %ebp\n-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__WIN32__)\n \t// Calculate the CFA as an offset from %ebp\n \t.cfi_def_cfa_register %ebp\n #endif\n@@ -232,7 +232,7 @@ MORESTACK:\n \n \tjmpl *%eax\n \n-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__WIN32__)\n \t.cfi_endproc\n #endif\n "}, {"sha": "de86035b6329ac7b948b05015db5f0c8515ea115", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -559,11 +559,7 @@ rust_try(rust_try_fn f, void *fptr, void *env) {\n \n extern \"C\" CDECL void\n rust_begin_unwind(uintptr_t token) {\n-#ifndef __WIN32__\n     throw token;\n-#else\n-    abort();\n-#endif\n }\n \n extern \"C\" CDECL uintptr_t"}, {"sha": "9718a12c83f13e373fbe01de716703d9360e071c", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-win32\n-\n extern mod extra;\n \n use extra::list::{List, Cons, Nil};"}, {"sha": "122ea901805bb9abb8f3ee378da9a8e69fffd76a", "filename": "src/test/run-fail/spawnfail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fspawnfail.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-test linked failure\n-// xfail-win32\n // error-pattern:explicit\n extern mod extra;\n "}, {"sha": "70f70430bb9ee744f8930608a1dc775fbccd698b", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-win32\n-\n use std::task;\n \n fn adder(x: @int, y: @int) -> int { return *x + *y; }"}, {"sha": "978cd586975f91e5e1b408b482cb328a0eafd88b", "filename": "src/test/run-pass/issue-3168.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3168.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -10,7 +10,6 @@\n \n // xfail-test linked failure\n // xfail-fast\n-// xfail-win32 #7999\n \n use std::comm;\n use std::task;"}, {"sha": "b91dadc6891087df14dac9cf87fd0ce51811f0b8", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-test linked failure\n-// xfail-win32 leaks\n extern mod extra;\n \n use std::task;"}, {"sha": "d872680efdb986c360af1cb22a3b5a8518e93269", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-test linked failure\n-// xfail-win32\n extern mod extra;\n \n use std::comm;"}, {"sha": "394b7e4865429f17fc7c133431db28dc575bdcaf", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-// xfail-win32\n \n extern mod extra;\n "}, {"sha": "84b031157656f0ddd5aadba7765a1f1c7e94e247", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-test linked failure\n-// xfail-win32\n \n // A port of task-killjoin to use a class with a dtor to manage\n // the join."}, {"sha": "cba13715068a04e76a10ee196ae2c8c6116d7e54", "filename": "src/test/run-pass/task-killjoin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-test linked failure\n-// xfail-win32\n \n // Create a task that is supervised by another task, join the supervised task\n // from the supervising task, then fail the supervised task. The supervised"}, {"sha": "65dd34ade091269e5ad61d00e976e098a11d0fec", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-win32 leaks\n // Issue #787\n // Don't try to clean up uninitialized locals\n "}, {"sha": "41b971d64d023089ff76f66057955901bb508bb7", "filename": "src/test/run-pass/unit-like-struct-drop-run.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -10,7 +10,6 @@\n \n // Make sure the destructor is run for unit-like structs.\n // xfail-fast\n-// xfail-win32 #7999\n \n use std::task;\n "}, {"sha": "24e898a90bb7706cc206c94c93d967a14c36523e", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-win32\n extern mod extra;\n \n use std::task;"}, {"sha": "4d550d9e4b2f49505eddb6f20b2be2e28e937899", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-win32\n extern mod extra;\n \n use std::task;"}, {"sha": "0038392115b16c1c647ce0e699d3600436fabaa7", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1e15209129dad9d3bba90450a43ffb2505df14/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=9e1e15209129dad9d3bba90450a43ffb2505df14", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-win32\n extern mod extra;\n \n use std::task;"}]}