{"sha": "187bfb333b6c801eb2a89364b033e9303d88387f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4N2JmYjMzM2I2YzgwMWViMmE4OTM2NGIwMzNlOTMwM2Q4ODM4N2Y=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-19T19:18:39Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-22T16:38:20Z"}, "message": "Improve the error when an opaque type captures ReEmtpty", "tree": {"sha": "264815a5eb7cc621b81749a9c3d1ad0a49c3365a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/264815a5eb7cc621b81749a9c3d1ad0a49c3365a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/187bfb333b6c801eb2a89364b033e9303d88387f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/187bfb333b6c801eb2a89364b033e9303d88387f", "html_url": "https://github.com/rust-lang/rust/commit/187bfb333b6c801eb2a89364b033e9303d88387f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/187bfb333b6c801eb2a89364b033e9303d88387f/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33f90f213d4c5495bba988b9d81982d73553096e", "url": "https://api.github.com/repos/rust-lang/rust/commits/33f90f213d4c5495bba988b9d81982d73553096e", "html_url": "https://github.com/rust-lang/rust/commit/33f90f213d4c5495bba988b9d81982d73553096e"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "91b8f6d2da41213abaeb24b94c6f86ee3f571737", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/187bfb333b6c801eb2a89364b033e9303d88387f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bfb333b6c801eb2a89364b033e9303d88387f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=187bfb333b6c801eb2a89364b033e9303d88387f", "patch": "@@ -297,7 +297,18 @@ pub fn unexpected_hidden_region_diagnostic(\n     );\n \n     // Explain the region we are capturing.\n-    if let ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReStatic | ty::ReEmpty(_) = hidden_region {\n+    match hidden_region {\n+        ty::ReEmpty(ty::UniverseIndex::ROOT) => {\n+            // All lifetimes shorter than the function body are `empty` in\n+            // lexical region resolution. The default explanation of \"an empty\n+            // lifetime\" isn't really accurate here.\n+            let message = format!(\n+                \"hidden type `{}` captures lifetime smaller than the function body\",\n+                hidden_ty\n+            );\n+            err.span_note(span, &message);\n+        }\n+        ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReStatic | ty::ReEmpty(_) => {\n         // Assuming regionck succeeded (*), we ought to always be\n         // capturing *some* region from the fn header, and hence it\n         // ought to be free. So under normal circumstances, we will go\n@@ -313,7 +324,8 @@ pub fn unexpected_hidden_region_diagnostic(\n             hidden_region,\n             \"\",\n         );\n-    } else {\n+        }\n+        _ => {\n         // Ugh. This is a painful case: the hidden region is not one\n         // that we can easily summarize or explain. This can happen\n         // in a case like\n@@ -358,6 +370,7 @@ pub fn unexpected_hidden_region_diagnostic(\n             );\n         }\n     }\n+    }\n \n     err\n }"}]}