{"sha": "81207802a0d83a2d43cb57f3a67f1b948d3b108f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMjA3ODAyYTBkODNhMmQ0M2NiNTdmM2E2N2YxYjk0OGQzYjEwOGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-29T19:58:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-29T19:58:14Z"}, "message": "Rollup merge of #67460 - estebank:named-lts, r=nikomatsakis\n\nTweak impl signature mismatch errors involving `RegionKind::ReVar` lifetimes\n\nFix #66406, fix #72106.\n\n```\nerror: `impl` item signature doesn't match `trait` item signature\n  --> $DIR/trait-param-without-lifetime-constraint.rs:14:5\n   |\nLL |     fn get_relation(&self) -> To;\n   |     ----------------------------- expected `fn(&Article) -> &ProofReader`\n...\nLL |     fn get_relation(&self) -> &ProofReader {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&Article) -> &ProofReader`\n   |\n   = note: expected `fn(&Article) -> &ProofReader`\n              found `fn(&Article) -> &ProofReader`\nhelp: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n  --> $DIR/trait-param-without-lifetime-constraint.rs:10:31\n   |\nLL |     fn get_relation(&self) -> To;\n   |                               ^^ consider borrowing this type parameter in the trait\n```\n\nr? @nikomatsakis", "tree": {"sha": "87674bf6f87fe66cd0bff9499fe5e89fbe8ec63f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87674bf6f87fe66cd0bff9499fe5e89fbe8ec63f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81207802a0d83a2d43cb57f3a67f1b948d3b108f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0WlWCRBK7hj4Ov3rIwAAdHIIADzwnON1zyI+aW9O5YODuhEl\nmRRpWG7tRMlgJ1z/WRr52scn4BejvLUsOj72al+r+9KqWoqvOFfIV4JQ5HfbTsMy\n8pqLWpe07NNRoltb0CcAnPVe3JCQTxeBKtUN7ZypC8lAv6+VQDzBY9zs14X/q39j\n788TmzFKOTgZ6POYAQskwFCPFJCdr1akr6bykmjydqIpXNz1KCSHBb1W713/oHSC\nPBKh+orAqHuGPAU4aSYMrIX2wgk2lOEGUEmtyFPFYzncf4lTyJ2M3gIMC7kCr+CX\nmrS1g/wBmtggOwCl6FOWNG5FfXqHbme5sOK0W3F6UZg421Ebjb4uc6Gg76El2Dg=\n=ZOP6\n-----END PGP SIGNATURE-----\n", "payload": "tree 87674bf6f87fe66cd0bff9499fe5e89fbe8ec63f\nparent 96dd4690c3aa70ec312448c3f2d50e6dc6fb87df\nparent 1bd69702de07858ad9c7ae7ed89c3c99aea64550\nauthor Ralf Jung <post@ralfj.de> 1590782294 +0200\ncommitter GitHub <noreply@github.com> 1590782294 +0200\n\nRollup merge of #67460 - estebank:named-lts, r=nikomatsakis\n\nTweak impl signature mismatch errors involving `RegionKind::ReVar` lifetimes\n\nFix #66406, fix #72106.\n\n```\nerror: `impl` item signature doesn't match `trait` item signature\n  --> $DIR/trait-param-without-lifetime-constraint.rs:14:5\n   |\nLL |     fn get_relation(&self) -> To;\n   |     ----------------------------- expected `fn(&Article) -> &ProofReader`\n...\nLL |     fn get_relation(&self) -> &ProofReader {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&Article) -> &ProofReader`\n   |\n   = note: expected `fn(&Article) -> &ProofReader`\n              found `fn(&Article) -> &ProofReader`\nhelp: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n  --> $DIR/trait-param-without-lifetime-constraint.rs:10:31\n   |\nLL |     fn get_relation(&self) -> To;\n   |                               ^^ consider borrowing this type parameter in the trait\n```\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81207802a0d83a2d43cb57f3a67f1b948d3b108f", "html_url": "https://github.com/rust-lang/rust/commit/81207802a0d83a2d43cb57f3a67f1b948d3b108f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81207802a0d83a2d43cb57f3a67f1b948d3b108f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96dd4690c3aa70ec312448c3f2d50e6dc6fb87df", "url": "https://api.github.com/repos/rust-lang/rust/commits/96dd4690c3aa70ec312448c3f2d50e6dc6fb87df", "html_url": "https://github.com/rust-lang/rust/commit/96dd4690c3aa70ec312448c3f2d50e6dc6fb87df"}, {"sha": "1bd69702de07858ad9c7ae7ed89c3c99aea64550", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd69702de07858ad9c7ae7ed89c3c99aea64550", "html_url": "https://github.com/rust-lang/rust/commit/1bd69702de07858ad9c7ae7ed89c3c99aea64550"}], "stats": {"total": 429, "additions": 324, "deletions": 105}, "files": [{"sha": "cff83c3d5cda2a7e39e0520b479d8b0f47b93148", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -193,9 +193,18 @@ impl Diagnostic {\n         expected_extra: &dyn fmt::Display,\n         found_extra: &dyn fmt::Display,\n     ) -> &mut Self {\n-        let expected_label = format!(\"expected {}\", expected_label);\n-\n-        let found_label = format!(\"found {}\", found_label);\n+        let expected_label = expected_label.to_string();\n+        let expected_label = if expected_label.is_empty() {\n+            \"expected\".to_string()\n+        } else {\n+            format!(\"expected {}\", expected_label)\n+        };\n+        let found_label = found_label.to_string();\n+        let found_label = if found_label.is_empty() {\n+            \"found\".to_string()\n+        } else {\n+            format!(\"found {}\", found_label)\n+        };\n         let (found_padding, expected_padding) = if expected_label.len() > found_label.len() {\n             (expected_label.len() - found_label.len(), 0)\n         } else {"}, {"sha": "ae9019828170f80ebfcc389c34cecb9ada0c2596", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -987,12 +987,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         fn push_ty_ref<'tcx>(\n-            r: &ty::Region<'tcx>,\n+            region: &ty::Region<'tcx>,\n             ty: Ty<'tcx>,\n             mutbl: hir::Mutability,\n             s: &mut DiagnosticStyledString,\n         ) {\n-            let mut r = r.to_string();\n+            let mut r = region.to_string();\n             if r == \"'_\" {\n                 r.clear();\n             } else {"}, {"sha": "5f14f799fc7aa89868ae29a70191967ce33803ed", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 99, "deletions": 8, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -2,11 +2,16 @@\n \n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use crate::infer::{Subtype, ValuePairs};\n+use crate::infer::{Subtype, TyCtxtInferExt, ValuePairs};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n use rustc_errors::ErrorReported;\n-use rustc_middle::ty::Ty;\n-use rustc_span::Span;\n+use rustc_hir as hir;\n+use rustc_hir::def::Res;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::Visitor;\n+use rustc_middle::ty::error::ExpectedFound;\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_span::{MultiSpan, Span};\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the `impl` doesn't conform to the `trait`.\n@@ -36,7 +41,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                                 var_origin.span(),\n                                 sub_expected_found.expected,\n                                 sub_expected_found.found,\n-                                self.tcx().def_span(*trait_item_def_id),\n+                                *trait_item_def_id,\n                             );\n                             return Some(ErrorReported);\n                         }\n@@ -47,14 +52,100 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         None\n     }\n \n-    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>, impl_sp: Span) {\n+    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>, trait_def_id: DefId) {\n+        let tcx = self.tcx();\n+        let trait_sp = self.tcx().def_span(trait_def_id);\n         let mut err = self\n             .tcx()\n             .sess\n             .struct_span_err(sp, \"`impl` item signature doesn't match `trait` item signature\");\n-        err.note(&format!(\"expected `{:?}`\\n   found `{:?}`\", expected, found));\n-        err.span_label(sp, &format!(\"found {:?}\", found));\n-        err.span_label(impl_sp, &format!(\"expected {:?}\", expected));\n+        err.span_label(sp, &format!(\"found `{:?}`\", found));\n+        err.span_label(trait_sp, &format!(\"expected `{:?}`\", expected));\n+\n+        // Get the span of all the used type parameters in the method.\n+        let assoc_item = self.tcx().associated_item(trait_def_id);\n+        let mut visitor = TypeParamSpanVisitor { tcx: self.tcx(), types: vec![] };\n+        match assoc_item.kind {\n+            ty::AssocKind::Fn => {\n+                let hir = self.tcx().hir();\n+                if let Some(hir_id) = assoc_item.def_id.as_local().map(|id| hir.as_local_hir_id(id))\n+                {\n+                    if let Some(decl) = hir.fn_decl_by_hir_id(hir_id) {\n+                        visitor.visit_fn_decl(decl);\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        let mut type_param_span: MultiSpan =\n+            visitor.types.iter().cloned().collect::<Vec<_>>().into();\n+        for &span in &visitor.types {\n+            type_param_span.push_span_label(\n+                span,\n+                \"consider borrowing this type parameter in the trait\".to_string(),\n+            );\n+        }\n+\n+        if let Some((expected, found)) = tcx\n+            .infer_ctxt()\n+            .enter(|infcx| infcx.expected_found_str_ty(&ExpectedFound { expected, found }))\n+        {\n+            // Highlighted the differences when showing the \"expected/found\" note.\n+            err.note_expected_found(&\"\", expected, &\"\", found);\n+        } else {\n+            // This fallback shouldn't be necessary, but let's keep it in just in case.\n+            err.note(&format!(\"expected `{:?}`\\n   found `{:?}`\", expected, found));\n+        }\n+        err.span_help(\n+            type_param_span,\n+            \"the lifetime requirements from the `impl` do not correspond to the requirements in \\\n+             the `trait`\",\n+        );\n+        if visitor.types.is_empty() {\n+            err.help(\n+                \"verify the lifetime relationships in the `trait` and `impl` between the `self` \\\n+                 argument, the other inputs and its output\",\n+            );\n+        }\n         err.emit();\n     }\n }\n+\n+struct TypeParamSpanVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    types: Vec<Span>,\n+}\n+\n+impl Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n+    type Map = rustc_middle::hir::map::Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n+        hir::intravisit::NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    }\n+\n+    fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n+        match arg.kind {\n+            hir::TyKind::Rptr(_, ref mut_ty) => {\n+                // We don't want to suggest looking into borrowing `&T` or `&Self`.\n+                hir::intravisit::walk_ty(self, mut_ty.ty);\n+                return;\n+            }\n+            hir::TyKind::Path(hir::QPath::Resolved(None, path)) => match &path.segments {\n+                [segment]\n+                    if segment\n+                        .res\n+                        .map(|res| match res {\n+                            Res::SelfTy(_, _) | Res::Def(hir::def::DefKind::TyParam, _) => true,\n+                            _ => false,\n+                        })\n+                        .unwrap_or(false) =>\n+                {\n+                    self.types.push(path.span);\n+                }\n+                _ => {}\n+            },\n+            _ => {}\n+        }\n+        hir::intravisit::walk_ty(self, arg);\n+    }\n+}"}, {"sha": "137cb83ccd32704f6e8b2920e80fb6067e68cd16", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -14,16 +14,16 @@ note: ...so that the expression is assignable\n    |\n LL |    bar(foo, x)\n    |             ^\n-   = note: expected  `Type<'_>`\n-              found  `Type<'a>`\n+   = note: expected `Type<'_>`\n+              found `Type<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the expression is assignable\n   --> $DIR/project-fn-ret-invariant.rs:48:4\n    |\n LL |    bar(foo, x)\n    |    ^^^^^^^^^^^\n-   = note: expected  `Type<'static>`\n-              found  `Type<'_>`\n+   = note: expected `Type<'static>`\n+              found `Type<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "9ba5bc330ea936f9831f4730b2953e6b67b9e4b5", "filename": "src/test/ui/error-codes/E0490.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -58,8 +58,8 @@ note: ...so that the expression is assignable\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n-   = note: expected  `&'a &()`\n-              found  `&'a &'b ()`\n+   = note: expected `&'a &()`\n+              found `&'a &'b ()`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 1:6...\n   --> $DIR/E0490.rs:1:6\n    |"}, {"sha": "268008c211129e704f6a5412c127a1aa1a9bf573", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -14,16 +14,16 @@ note: ...so that the expression is assignable\n    |\n LL |     static_val(x);\n    |                ^\n-   = note: expected  `std::boxed::Box<dyn std::fmt::Debug>`\n-              found  `std::boxed::Box<(dyn std::fmt::Debug + 'a)>`\n+   = note: expected `std::boxed::Box<dyn std::fmt::Debug>`\n+              found `std::boxed::Box<(dyn std::fmt::Debug + 'a)>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n   --> $DIR/dyn-trait.rs:20:5\n    |\n LL |     static_val(x);\n    |     ^^^^^^^^^^\n-   = note: expected  `StaticTrait`\n-              found  `StaticTrait`\n+   = note: expected `StaticTrait`\n+              found `StaticTrait`\n \n error: aborting due to previous error\n "}, {"sha": "b93d98ca39f4716f7ed978f6d64d5d4e02565321", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -2,15 +2,17 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/mismatched_trait_impl-2.rs:8:5\n    |\n LL |     fn deref(&self) -> &dyn Trait {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&Struct) -> &dyn Trait\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&Struct) -> &dyn Trait`\n    | \n   ::: $SRC_DIR/libcore/ops/deref.rs:LL:COL\n    |\n LL |     fn deref(&self) -> &Self::Target;\n-   |     --------------------------------- expected fn(&Struct) -> &(dyn Trait + 'static)\n+   |     --------------------------------- expected `fn(&Struct) -> &(dyn Trait + 'static)`\n    |\n    = note: expected `fn(&Struct) -> &(dyn Trait + 'static)`\n               found `fn(&Struct) -> &dyn Trait`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error\n "}, {"sha": "149c2aeb958c0712ce8f8c4d10ca7b8a3fc16e0e", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.nll.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -2,13 +2,15 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/mismatched_trait_impl.rs:9:5\n    |\n LL |     fn foo(&self, x: &'a u32, y: &u32) -> &'a u32;\n-   |     ---------------------------------------------- expected fn(&i32, &'a u32, &u32) -> &'a u32\n+   |     ---------------------------------------------- expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n ...\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &u32, &u32) -> &u32\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&i32, &u32, &u32) -> &u32`\n    |\n    = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n               found `fn(&i32, &u32, &u32) -> &u32`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error\n "}, {"sha": "9a0bd827850cf5f0c59e307cb4e4c5cc2c47135f", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -2,13 +2,15 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/mismatched_trait_impl.rs:9:5\n    |\n LL |     fn foo(&self, x: &'a u32, y: &u32) -> &'a u32;\n-   |     ---------------------------------------------- expected fn(&i32, &'a u32, &u32) -> &'a u32\n+   |     ---------------------------------------------- expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n ...\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &u32, &u32) -> &u32\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&i32, &u32, &u32) -> &u32`\n    |\n    = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n               found `fn(&i32, &u32, &u32) -> &u32`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error[E0623]: lifetime mismatch\n   --> $DIR/mismatched_trait_impl.rs:10:9"}, {"sha": "4f658330758141f7b842dd7fd1f9c8037267c4b1", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -26,8 +26,8 @@ note: ...so that the types are compatible\n    |\n LL |         self.a();\n    |              ^\n-   = note: expected  `&'a Self`\n-              found  `&Self`\n+   = note: expected `&'a Self`\n+              found `&Self`\n \n error: aborting due to previous error\n "}, {"sha": "31788cfa61c4cf262ebb3f3628363134e65bb503", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -27,8 +27,8 @@ note: ...so that the types are compatible\n    |\n LL |         self.foo();\n    |              ^^^\n-   = note: expected  `&'a Self`\n-              found  `&Self`\n+   = note: expected `&'a Self`\n+              found `&Self`\n \n error: aborting due to previous error\n "}, {"sha": "e7c1dcc5d698c9e35da163ee206b903601665fd2", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -87,8 +87,8 @@ note: ...so that the types are compatible\n    |\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `Publisher<'_>`\n-              found  `Publisher<'_>`\n+   = note: expected `Publisher<'_>`\n+              found `Publisher<'_>`\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/issue-20831-debruijn.rs:28:33\n@@ -117,8 +117,8 @@ note: ...so that the types are compatible\n    |\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `Publisher<'_>`\n-              found  `Publisher<'_>`\n+   = note: expected `Publisher<'_>`\n+              found `Publisher<'_>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7463af9332a7627c3588c7fc62a163f60e920c2a", "filename": "src/test/ui/issues/issue-52213.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -14,8 +14,8 @@ note: ...so that the types are compatible\n    |\n LL |     match (&t,) {\n    |           ^^^^^\n-   = note: expected  `(&&(T,),)`\n-              found  `(&&'a (T,),)`\n+   = note: expected `(&&(T,),)`\n+              found `(&&'a (T,),)`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 1:27...\n   --> $DIR/issue-52213.rs:1:27\n    |"}, {"sha": "6bfb7af54446df8f04f79caba90c281307028c15", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -20,8 +20,8 @@ note: ...so that the expression is assignable\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n-              found  `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n+   = note: expected `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n+              found `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/issue-55796.rs:21:9\n@@ -45,8 +45,8 @@ note: ...so that the expression is assignable\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n-              found  `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n+   = note: expected `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n+              found `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "060e6954403c0f3a8f0ddf8410bce301d7e3f564", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -2,13 +2,15 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/lifetime-mismatch-between-trait-and-impl.rs:6:5\n    |\n LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32;\n-   |     ------------------------------------------- expected fn(&i32, &'a i32) -> &'a i32\n+   |     ------------------------------------------- expected `fn(&i32, &'a i32) -> &'a i32`\n ...\n LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &i32) -> &i32\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&i32, &i32) -> &i32`\n    |\n    = note: expected `fn(&i32, &'a i32) -> &'a i32`\n               found `fn(&i32, &i32) -> &i32`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error\n "}, {"sha": "ba8d91b8455bfab7a77a05b319372f28cc83a3ed", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -26,8 +26,8 @@ note: ...so that the expression is assignable\n    |\n LL |         Foo { bar }\n    |         ^^^^^^^^^^^\n-   = note: expected  `Foo<'_>`\n-              found  `Foo<'_>`\n+   = note: expected `Foo<'_>`\n+              found `Foo<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "d003acd879a77407d9d161ee6345381fe0944893", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -19,8 +19,8 @@ note: ...so that the types are compatible\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `Visitor<'d>`\n-              found  `Visitor<'_>`\n+   = note: expected `Visitor<'d>`\n+              found `Visitor<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "3317aae83bb08a2e621e552d0d573b0c0e9dcdb0", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -16,8 +16,8 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: b }\n    |                ^\n-   = note: expected  `std::boxed::Box<std::boxed::Box<&isize>>`\n-              found  `std::boxed::Box<std::boxed::Box<&isize>>`\n+   = note: expected `std::boxed::Box<std::boxed::Box<&isize>>`\n+              found `std::boxed::Box<std::boxed::Box<&isize>>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 15:6...\n   --> $DIR/type-alias-free-regions.rs:15:6\n    |\n@@ -28,8 +28,8 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: b }\n    |         ^^^^^^^^^^\n-   = note: expected  `C<'a>`\n-              found  `C<'_>`\n+   = note: expected `C<'a>`\n+              found `C<'_>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/type-alias-free-regions.rs:27:16\n@@ -49,8 +49,8 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: Box::new(b.0) }\n    |                         ^^^\n-   = note: expected  `std::boxed::Box<&isize>`\n-              found  `std::boxed::Box<&isize>`\n+   = note: expected `std::boxed::Box<&isize>`\n+              found `std::boxed::Box<&isize>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 25:6...\n   --> $DIR/type-alias-free-regions.rs:25:6\n    |\n@@ -61,8 +61,8 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: Box::new(b.0) }\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `C<'a>`\n-              found  `C<'_>`\n+   = note: expected `C<'a>`\n+              found `C<'_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8421dc1d0c1303921e0981db1c908c9c8e4aa4e9", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -14,8 +14,8 @@ note: ...so that the types are compatible\n    |\n LL |     <Foo<'a>>::C\n    |     ^^^^^^^^^^^^\n-   = note: expected  `Foo<'_>`\n-              found  `Foo<'a>`\n+   = note: expected `Foo<'_>`\n+              found `Foo<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/constant-in-expr-inherent-1.rs:8:5"}, {"sha": "ba0a1748c5e9fd7e2676a0035809b5b783b05da8", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -14,8 +14,8 @@ note: ...so that the types are compatible\n    |\n LL |     T::C\n    |     ^^^^\n-   = note: expected  `Foo<'_>`\n-              found  `Foo<'a>`\n+   = note: expected `Foo<'_>`\n+              found `Foo<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/constant-in-expr-trait-item-3.rs:10:5"}, {"sha": "79ded5fc875a2d41c97b53c761bf26d9efb5b10b", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -24,8 +24,8 @@ note: ...so that the expression is assignable\n    |\n LL |     ss\n    |     ^^\n-   = note: expected  `&'b (dyn SomeTrait + 'b)`\n-              found  `&dyn SomeTrait`\n+   = note: expected `&'b (dyn SomeTrait + 'b)`\n+              found `&dyn SomeTrait`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/object-lifetime-default-elision.rs:71:5\n@@ -53,8 +53,8 @@ note: ...so that the expression is assignable\n    |\n LL |     ss\n    |     ^^\n-   = note: expected  `&'b (dyn SomeTrait + 'b)`\n-              found  `&dyn SomeTrait`\n+   = note: expected `&'b (dyn SomeTrait + 'b)`\n+              found `&dyn SomeTrait`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "069b897603cb916ac32b458f3fae5ed10e9fcebd", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -39,8 +39,8 @@ note: ...so that the expression is assignable\n    |\n LL |     Box::new(v)\n    |              ^\n-   = note: expected  `&[u8]`\n-              found  `&'a [u8]`\n+   = note: expected `&[u8]`\n+              found `&'a [u8]`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 25:9...\n   --> $DIR/region-object-lifetime-in-coercion.rs:25:9\n    |\n@@ -51,8 +51,8 @@ note: ...so that the expression is assignable\n    |\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn Foo + 'b)>`\n-              found  `std::boxed::Box<dyn Foo>`\n+   = note: expected `std::boxed::Box<(dyn Foo + 'b)>`\n+              found `std::boxed::Box<dyn Foo>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c134b3b3ed554a01598e561b9d75b8de8e698d6c", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -14,8 +14,8 @@ note: ...so that the types are compatible\n    |\n LL | impl<'a> Foo<'static> for &'a i32 {\n    |          ^^^^^^^^^^^^\n-   = note: expected  `Foo<'static>`\n-              found  `Foo<'static>`\n+   = note: expected `Foo<'static>`\n+              found `Foo<'static>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the type `&i32` will meet its required lifetime bounds\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:10\n@@ -39,8 +39,8 @@ note: ...so that the types are compatible\n    |\n LL | impl<'a,'b> Foo<'b> for &'a i64 {\n    |             ^^^^^^^\n-   = note: expected  `Foo<'b>`\n-              found  `Foo<'_>`\n+   = note: expected `Foo<'b>`\n+              found `Foo<'_>`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the impl at 19:9...\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:9\n    |"}, {"sha": "ac8c55ccc8fd4c679f2ee9a22fc0e514d973860d", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -14,8 +14,8 @@ note: ...so that the types are compatible\n    |\n LL | impl<'a> Foo for &'a i32 {\n    |          ^^^\n-   = note: expected  `Foo`\n-              found  `Foo`\n+   = note: expected `Foo`\n+              found `Foo`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the type `&i32` will meet its required lifetime bounds\n   --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:10"}, {"sha": "147f7f3541816c0b0ffca03bf433a4bbc73ca6e4", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -20,8 +20,8 @@ note: ...so that the expression is assignable\n    |\n LL |     box B(&*v) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn X + 'static)>`\n-              found  `std::boxed::Box<dyn X>`\n+   = note: expected `std::boxed::Box<(dyn X + 'static)>`\n+              found `std::boxed::Box<dyn X>`\n \n error: aborting due to previous error\n "}, {"sha": "6e7d6152cd09a28cfef15cbaeebb8caa8ab6879c", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -20,8 +20,8 @@ note: ...so that the expression is assignable\n    |\n LL |     box B(&*v) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn X + 'static)>`\n-              found  `std::boxed::Box<dyn X>`\n+   = note: expected `std::boxed::Box<(dyn X + 'static)>`\n+              found `std::boxed::Box<dyn X>`\n \n error: aborting due to previous error\n "}, {"sha": "2070ce257b18d37a1802b4f35f93037f52e9a892", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -24,8 +24,8 @@ note: ...so that the expression is assignable\n    |\n LL |     box v as Box<dyn SomeTrait + 'a>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn SomeTrait + 'c)>`\n-              found  `std::boxed::Box<dyn SomeTrait>`\n+   = note: expected `std::boxed::Box<(dyn SomeTrait + 'c)>`\n+              found `std::boxed::Box<dyn SomeTrait>`\n \n error: aborting due to previous error\n "}, {"sha": "b24db1df18b0a9451470eac54ca3790da439be36", "filename": "src/test/ui/regions/regions-creating-enums4.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -14,8 +14,8 @@ note: ...so that the expression is assignable\n    |\n LL |     Ast::Add(x, y)\n    |              ^\n-   = note: expected  `&Ast<'_>`\n-              found  `&Ast<'a>`\n+   = note: expected `&Ast<'_>`\n+              found `&Ast<'a>`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 6:19...\n   --> $DIR/regions-creating-enums4.rs:6:19\n    |\n@@ -26,8 +26,8 @@ note: ...so that the expression is assignable\n    |\n LL |     Ast::Add(x, y)\n    |     ^^^^^^^^^^^^^^\n-   = note: expected  `Ast<'b>`\n-              found  `Ast<'_>`\n+   = note: expected `Ast<'b>`\n+              found `Ast<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "9e405d83140d8d2b66f18d8ae9828f179d6ee787", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -39,8 +39,8 @@ LL | |         if false { return ay; }\n LL | |         return z;\n LL | |     }));\n    | |_____^\n-   = note: expected  `&isize`\n-              found  `&isize`\n+   = note: expected `&isize`\n+              found `&isize`\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n   --> $DIR/regions-nested-fns.rs:14:27"}, {"sha": "dc93d620ca637b454afe60af8e8b5db111251c8c", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -29,8 +29,8 @@ LL | |     where <() as Project<'a, 'b>>::Item : Eq\n LL | | {\n LL | | }\n    | |_^\n-   = note: expected  `Project<'a, 'b>`\n-              found  `Project<'_, '_>`\n+   = note: expected `Project<'a, 'b>`\n+              found `Project<'_, '_>`\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n@@ -63,8 +63,8 @@ LL | |     where <() as Project<'a, 'b>>::Item : Eq\n LL | | {\n LL | | }\n    | |_^\n-   = note: expected  `Project<'a, 'b>`\n-              found  `Project<'_, '_>`\n+   = note: expected `Project<'a, 'b>`\n+              found `Project<'_, '_>`\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/regions-normalize-in-where-clause-list.rs:22:4\n@@ -87,8 +87,8 @@ note: ...so that the types are compatible\n    |\n LL | fn bar<'a, 'b>()\n    |    ^^^\n-   = note: expected  `Project<'a, 'b>`\n-              found  `Project<'_, '_>`\n+   = note: expected `Project<'a, 'b>`\n+              found `Project<'_, '_>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2c4769d8e37516e996192a5141f9e8eabf65b25c", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -14,8 +14,8 @@ note: ...so that the expression is assignable\n    |\n LL |     with(|o| o)\n    |              ^\n-   = note: expected  `&isize`\n-              found  `&isize`\n+   = note: expected `&isize`\n+              found `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 9:14...\n   --> $DIR/regions-ret-borrowed-1.rs:9:14\n    |"}, {"sha": "da560107cea997ef81166664786b9ba0b26ddb3c", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -14,8 +14,8 @@ note: ...so that the expression is assignable\n    |\n LL |     with(|o| o)\n    |              ^\n-   = note: expected  `&isize`\n-              found  `&isize`\n+   = note: expected `&isize`\n+              found `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 12:14...\n   --> $DIR/regions-ret-borrowed.rs:12:14\n    |"}, {"sha": "7478b53bd3ccc02c7097f35f8aef4bad0918e205", "filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -41,8 +41,8 @@ note: ...so that the expression is assignable\n    |\n LL |     x\n    |     ^\n-   = note: expected  `&'b mut (dyn Dummy + 'b)`\n-              found  `&mut (dyn Dummy + 'b)`\n+   = note: expected `&'b mut (dyn Dummy + 'b)`\n+              found `&mut (dyn Dummy + 'b)`\n \n error[E0308]: mismatched types\n   --> $DIR/regions-trait-object-subtyping.rs:22:5"}, {"sha": "f819faa27899565c9a33b8a68de659aa05f91eb5", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -118,8 +118,8 @@ note: ...so that the types are compatible\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `W<'l1, 'l2>`\n-              found  `W<'_, '_>`\n+   = note: expected `W<'l1, 'l2>`\n+              found `W<'_, '_>`\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the enum it is implemented for does not\n   --> $DIR/reject-specialized-drops-8142.rs:61:14"}, {"sha": "99013d32ab8d09891a1a13df118826baee0e5864", "filename": "src/test/ui/traits/self-without-lifetime-constraint.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.rs?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -0,0 +1,53 @@\n+use std::error::Error;\n+use std::fmt;\n+\n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub enum ValueRef<'a> {\n+    Null,\n+    Integer(i64),\n+    Real(f64),\n+    Text(&'a [u8]),\n+    Blob(&'a [u8]),\n+}\n+\n+impl<'a> ValueRef<'a> {\n+    pub fn as_str(&self) -> FromSqlResult<&'a str, &'a &'a str> {\n+        match *self {\n+            ValueRef::Text(t) => {\n+                std::str::from_utf8(t).map_err(|_| FromSqlError::InvalidType).map(|x| (x, &x))\n+            }\n+            _ => Err(FromSqlError::InvalidType),\n+        }\n+    }\n+}\n+\n+#[derive(Debug)]\n+#[non_exhaustive]\n+pub enum FromSqlError {\n+    InvalidType\n+}\n+\n+impl fmt::Display for FromSqlError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"InvalidType\")\n+    }\n+}\n+\n+impl Error for FromSqlError {}\n+\n+pub type FromSqlResult<T, K> = Result<(T, K), FromSqlError>;\n+\n+pub trait FromSql: Sized {\n+    fn column_result(value: ValueRef<'_>) -> FromSqlResult<Self, &Self>;\n+}\n+\n+impl FromSql for &str {\n+    fn column_result(value: ValueRef<'_>) -> FromSqlResult<&str, &&str> {\n+    //~^ ERROR `impl` item signature doesn't match `trait` item signature\n+        value.as_str()\n+    }\n+}\n+\n+pub fn main() {\n+    println!(\"{}\", \"Hello World\");\n+}"}, {"sha": "6c7abe753e2bf254d7265234a6f39103cc33e7b8", "filename": "src/test/ui/traits/self-without-lifetime-constraint.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -0,0 +1,19 @@\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/self-without-lifetime-constraint.rs:45:5\n+   |\n+LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<Self, &Self>;\n+   |     -------------------------------------------------------------------- expected `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), FromSqlError>`\n+...\n+LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<&str, &&str> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), FromSqlError>`\n+   |\n+   = note: expected `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), _>`\n+              found `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), _>`\n+help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+  --> $DIR/self-without-lifetime-constraint.rs:41:60\n+   |\n+LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<Self, &Self>;\n+   |                                                            ^^^^ consider borrowing this type parameter in the trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "46aa7db967ad4bb6aca754e3e9fe7a7ab4ac9988", "filename": "src/test/ui/traits/trait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -19,8 +19,8 @@ note: ...so that the types are compatible\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |             ^^^^^^^^^^\n-   = note: expected  `T1<'a>`\n-              found  `T1<'_>`\n+   = note: expected `T1<'a>`\n+              found `T1<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "a79b74dcddead0cba82cf036ebddc215c55b3632", "filename": "src/test/ui/traits/trait-param-without-lifetime-constraint.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.rs?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -0,0 +1,20 @@\n+struct Article {\n+    proof_reader: ProofReader,\n+}\n+\n+struct ProofReader {\n+    name: String,\n+}\n+\n+pub trait HaveRelationship<To> {\n+    fn get_relation(&self) -> To;\n+}\n+\n+impl HaveRelationship<&ProofReader> for Article {\n+    fn get_relation(&self) -> &ProofReader {\n+    //~^ ERROR `impl` item signature doesn't match `trait` item signature\n+        &self.proof_reader\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4942dbe480ba3c73faf208c2aade8f9b51da40cb", "filename": "src/test/ui/traits/trait-param-without-lifetime-constraint.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -0,0 +1,19 @@\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/trait-param-without-lifetime-constraint.rs:14:5\n+   |\n+LL |     fn get_relation(&self) -> To;\n+   |     ----------------------------- expected `fn(&Article) -> &ProofReader`\n+...\n+LL |     fn get_relation(&self) -> &ProofReader {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&Article) -> &ProofReader`\n+   |\n+   = note: expected `fn(&Article) -> &ProofReader`\n+              found `fn(&Article) -> &ProofReader`\n+help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+  --> $DIR/trait-param-without-lifetime-constraint.rs:10:31\n+   |\n+LL |     fn get_relation(&self) -> To;\n+   |                               ^^ consider borrowing this type parameter in the trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "e3c9d50dfe5b31b291c7841a40a00a7c97316404", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81207802a0d83a2d43cb57f3a67f1b948d3b108f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=81207802a0d83a2d43cb57f3a67f1b948d3b108f", "patch": "@@ -23,8 +23,8 @@ note: ...so that the expression is assignable\n    |\n LL |     Box::new(items.iter())\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = &T> + 'static)>`\n-              found  `std::boxed::Box<dyn std::iter::Iterator<Item = &T>>`\n+   = note: expected `std::boxed::Box<(dyn std::iter::Iterator<Item = &T> + 'static)>`\n+              found `std::boxed::Box<dyn std::iter::Iterator<Item = &T>>`\n \n error: aborting due to previous error\n "}]}