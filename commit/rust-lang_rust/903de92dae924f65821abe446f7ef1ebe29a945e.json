{"sha": "903de92dae924f65821abe446f7ef1ebe29a945e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwM2RlOTJkYWU5MjRmNjU4MjFhYmU0NDZmN2VmMWViZTI5YTk0NWU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-25T11:20:50Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-25T11:20:50Z"}, "message": "Avoid cloning RewriteContext", "tree": {"sha": "2f2eef474935ffaa5891128b7925cf05032f0967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f2eef474935ffaa5891128b7925cf05032f0967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/903de92dae924f65821abe446f7ef1ebe29a945e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/903de92dae924f65821abe446f7ef1ebe29a945e", "html_url": "https://github.com/rust-lang/rust/commit/903de92dae924f65821abe446f7ef1ebe29a945e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/903de92dae924f65821abe446f7ef1ebe29a945e/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "html_url": "https://github.com/rust-lang/rust/commit/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad"}], "stats": {"total": 66, "additions": 42, "deletions": 24}, "files": [{"sha": "7fdc0e85686f42c6ee18d46bd026823a1e36d2b8", "filename": "src/closures.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=903de92dae924f65821abe446f7ef1ebe29a945e", "patch": "@@ -170,7 +170,7 @@ fn rewrite_closure_expr(\n \n     // When rewriting closure's body without block, we require it to fit in a single line\n     // unless it is a block-like expression or we are inside macro call.\n-    let veto_multiline = (!allow_multi_line(expr) && !context.inside_macro)\n+    let veto_multiline = (!allow_multi_line(expr) && !context.inside_macro())\n         || context.config.force_multiline_blocks();\n     expr.rewrite(context, shape)\n         .and_then(|rw| {\n@@ -370,7 +370,7 @@ where\n \n fn is_block_closure_forced(context: &RewriteContext, expr: &ast::Expr) -> bool {\n     // If we are inside macro, we do not want to add or remove block from closure body.\n-    if context.inside_macro {\n+    if context.inside_macro() {\n         false\n     } else {\n         is_block_closure_forced_inner(expr)"}, {"sha": "10f2cd2aba77079ab3b75f708c0a3b6a433086e1", "filename": "src/expr.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=903de92dae924f65821abe446f7ef1ebe29a945e", "patch": "@@ -474,7 +474,7 @@ pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n         separator: \",\",\n         trailing_separator: if trailing_comma {\n             SeparatorTactic::Always\n-        } else if context.inside_macro && !exprs.is_empty() {\n+        } else if context.inside_macro() && !exprs.is_empty() {\n             let ends_with_bracket = context.snippet(span).ends_with(']');\n             let bracket_offset = if ends_with_bracket { 1 } else { 0 };\n             let snippet = context.snippet(mk_sp(span.lo(), span.hi() - BytePos(bracket_offset)));\n@@ -656,7 +656,7 @@ pub fn rewrite_block_with_visitor(\n \n     let mut visitor = FmtVisitor::from_context(context);\n     visitor.block_indent = shape.indent;\n-    visitor.is_if_else_block = context.is_if_else_block;\n+    visitor.is_if_else_block = context.is_if_else_block();\n     match block.rules {\n         ast::BlockCheckMode::Unsafe(..) => {\n             let snippet = context.snippet(block.span);\n@@ -1142,10 +1142,13 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             width: block_width,\n             ..shape\n         };\n-        let mut block_context = context.clone();\n-        block_context.is_if_else_block = self.else_block.is_some();\n-        let block_str =\n-            rewrite_block_with_visitor(&block_context, \"\", self.block, None, block_shape, true)?;\n+        let block_str = {\n+            let old_val = context.is_if_else_block.replace(self.else_block.is_some());\n+            let result =\n+                rewrite_block_with_visitor(context, \"\", self.block, None, block_shape, true);\n+            context.is_if_else_block.replace(old_val);\n+            result?\n+        };\n \n         let mut result = format!(\"{}{}\", cond_str, block_str);\n \n@@ -1456,7 +1459,7 @@ pub fn rewrite_call(\n         shape,\n         span,\n         context.config.width_heuristics().fn_call_width,\n-        if context.inside_macro {\n+        if context.inside_macro() {\n             if span_ends_with_comma(context, span) {\n                 Some(SeparatorTactic::Always)\n             } else {\n@@ -1768,7 +1771,7 @@ fn rewrite_struct_lit<'a>(\n         let nested_shape = shape_for_tactic(tactic, h_shape, v_shape);\n \n         let ends_with_comma = span_ends_with_comma(context, span);\n-        let force_no_trailing_comma = if context.inside_macro && !ends_with_comma {\n+        let force_no_trailing_comma = if context.inside_macro() && !ends_with_comma {\n             true\n         } else {\n             false\n@@ -1947,7 +1950,7 @@ where\n     debug!(\"rewrite_tuple {:?}\", shape);\n     if context.use_block_indent() {\n         // We use the same rule as function calls for rewriting tuples.\n-        let force_tactic = if context.inside_macro {\n+        let force_tactic = if context.inside_macro() {\n             if span_ends_with_comma(context, span) {\n                 Some(SeparatorTactic::Always)\n             } else {"}, {"sha": "b3f443a628e7894f494a2d59a27112eea4c43551", "filename": "src/macros.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=903de92dae924f65821abe446f7ef1ebe29a945e", "patch": "@@ -152,11 +152,22 @@ pub fn rewrite_macro(\n     shape: Shape,\n     position: MacroPosition,\n ) -> Option<String> {\n-    let context = &mut context.clone();\n-    context.inside_macro = true;\n+    context.inside_macro.replace(true);\n+    let result = rewrite_macro_inner(mac, extra_ident, context, shape, position);\n+    context.inside_macro.replace(false);\n+    result\n+}\n+\n+pub fn rewrite_macro_inner(\n+    mac: &ast::Mac,\n+    extra_ident: Option<ast::Ident>,\n+    context: &RewriteContext,\n+    shape: Shape,\n+    position: MacroPosition,\n+) -> Option<String> {\n     if context.config.use_try_shorthand() {\n         if let Some(expr) = convert_try_mac(mac, context) {\n-            context.inside_macro = false;\n+            context.inside_macro.replace(false);\n             return expr.rewrite(context, shape);\n         }\n     }\n@@ -295,7 +306,7 @@ pub fn rewrite_macro(\n                 // then we can rewrite this as an usual array literal.\n                 // Otherwise, we must preserve the original existence of trailing comma.\n                 if FORCED_BRACKET_MACROS.contains(&macro_name.as_str()) {\n-                    context.inside_macro = false;\n+                    context.inside_macro.replace(false);\n                     trailing_comma = false;\n                 }\n                 // Convert `MacroArg` into `ast::Expr`, as `rewrite_array` only accepts the latter."}, {"sha": "79f93899fa3787716f9992f9b9d91affa20532d3", "filename": "src/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=903de92dae924f65821abe446f7ef1ebe29a945e", "patch": "@@ -384,7 +384,7 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n         result.push_str(self.ident);\n         result.push_str(self.prefix);\n         if !self.context.use_block_indent()\n-            || (self.context.inside_macro && !items_str.contains('\\n') && fits_one_line)\n+            || (self.context.inside_macro() && !items_str.contains('\\n') && fits_one_line)\n             || (is_extendable && extend_width <= shape.width)\n         {\n             if self.context.config.spaces_within_parens_and_brackets() && !items_str.is_empty() {"}, {"sha": "44e32462a8d4218f0360bd6d28c16e05cba8cd90", "filename": "src/patterns.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=903de92dae924f65821abe446f7ef1ebe29a945e", "patch": "@@ -360,10 +360,6 @@ fn rewrite_tuple_pat(\n \n     // add comma if `(x,)`\n     let add_comma = path_str.is_none() && pat_vec.len() == 1 && dotdot_pos.is_none();\n-    let mut context = context.clone();\n-    if let Some(&TuplePatField::Dotdot(..)) = pat_vec.last() {\n-        context.inside_macro = true;\n-    }\n     let path_str = path_str.unwrap_or_default();\n     let mut pat_ref_vec = Vec::with_capacity(pat_vec.len());\n     for pat in pat_vec {"}, {"sha": "7eb8c18bbe6c6dad1ddde15692f6b6439846e4ff", "filename": "src/rewrite.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=903de92dae924f65821abe446f7ef1ebe29a945e", "patch": "@@ -29,12 +29,12 @@ pub struct RewriteContext<'a> {\n     pub parse_session: &'a ParseSess,\n     pub codemap: &'a CodeMap,\n     pub config: &'a Config,\n-    pub inside_macro: bool,\n+    pub inside_macro: RefCell<bool>,\n     // Force block indent style even if we are using visual indent style.\n     pub use_block: RefCell<bool>,\n     // When `format_if_else_cond_comment` is true, unindent the comment on top\n     // of the `else` or `else if`.\n-    pub is_if_else_block: bool,\n+    pub is_if_else_block: RefCell<bool>,\n     // When rewriting chain, veto going multi line except the last element\n     pub force_one_line_chain: RefCell<bool>,\n     pub snippet_provider: &'a SnippetProvider<'a>,\n@@ -53,4 +53,12 @@ impl<'a> RewriteContext<'a> {\n     pub fn budget(&self, used_width: usize) -> usize {\n         self.config.max_width().checked_sub(used_width).unwrap_or(0)\n     }\n+\n+    pub fn inside_macro(&self) -> bool {\n+        *self.inside_macro.borrow()\n+    }\n+\n+    pub fn is_if_else_block(&self) -> bool {\n+        *self.is_if_else_block.borrow()\n+    }\n }"}, {"sha": "22f892d4fb4aea83a28ab7875ac08e0e126534eb", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903de92dae924f65821abe446f7ef1ebe29a945e/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=903de92dae924f65821abe446f7ef1ebe29a945e", "patch": "@@ -696,9 +696,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             parse_session: self.parse_session,\n             codemap: self.codemap,\n             config: self.config,\n-            inside_macro: false,\n+            inside_macro: RefCell::new(false),\n             use_block: RefCell::new(false),\n-            is_if_else_block: false,\n+            is_if_else_block: RefCell::new(false),\n             force_one_line_chain: RefCell::new(false),\n             snippet_provider: self.snippet_provider,\n         }"}]}