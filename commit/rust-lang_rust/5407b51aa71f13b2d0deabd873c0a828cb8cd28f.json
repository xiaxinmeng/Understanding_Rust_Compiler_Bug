{"sha": "5407b51aa71f13b2d0deabd873c0a828cb8cd28f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MDdiNTFhYTcxZjEzYjJkMGRlYWJkODczYzBhODI4Y2I4Y2QyOGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-09T10:14:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-09T10:14:18Z"}, "message": "Rustup to rustc 1.40.0-nightly (9e346646e 2019-11-08)", "tree": {"sha": "c1bf69b8f5cb541878cf2ac28080493b0bf9e98d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1bf69b8f5cb541878cf2ac28080493b0bf9e98d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5407b51aa71f13b2d0deabd873c0a828cb8cd28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5407b51aa71f13b2d0deabd873c0a828cb8cd28f", "html_url": "https://github.com/rust-lang/rust/commit/5407b51aa71f13b2d0deabd873c0a828cb8cd28f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74ea53f1fbac83ee44addc6a3c08d152344aa356", "url": "https://api.github.com/repos/rust-lang/rust/commits/74ea53f1fbac83ee44addc6a3c08d152344aa356", "html_url": "https://github.com/rust-lang/rust/commit/74ea53f1fbac83ee44addc6a3c08d152344aa356"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "50f794733e32700d8bfadc0e8f6fa3d08e1a955e", "filename": "example/std_example.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=5407b51aa71f13b2d0deabd873c0a828cb8cd28f", "patch": "@@ -71,6 +71,8 @@ fn main() {\n \n     let _a = 1u32 << 2u8;\n \n+    println!(\"{:?}\", unsafe { std::intrinsics::caller_location() });\n+\n     unsafe {\n         test_simd();\n     }"}, {"sha": "881174646afe7bbd32c025ec650debee2fd020b8", "filename": "src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=5407b51aa71f13b2d0deabd873c0a828cb8cd28f", "patch": "@@ -351,6 +351,7 @@ pub fn codegen_terminator_call<'tcx>(\n     func: &Operand<'tcx>,\n     args: &[Operand<'tcx>],\n     destination: &Option<(Place<'tcx>, BasicBlock)>,\n+    span: Span,\n ) {\n     let fn_ty = fx.monomorphize(&func.ty(fx.mir, fx.tcx));\n     let sig = fx\n@@ -378,7 +379,7 @@ pub fn codegen_terminator_call<'tcx>(\n \n         match instance.def {\n             InstanceDef::Intrinsic(_) => {\n-                crate::intrinsics::codegen_intrinsic_call(fx, instance, args, destination);\n+                crate::intrinsics::codegen_intrinsic_call(fx, instance, args, destination, span);\n                 return;\n             }\n             InstanceDef::DropGlue(_, None) => {"}, {"sha": "007ff5390de5d0a64d1bbce41aca53d52ae6aa37", "filename": "src/base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=5407b51aa71f13b2d0deabd873c0a828cb8cd28f", "patch": "@@ -208,7 +208,13 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 cleanup: _,\n                 from_hir_call: _,\n             } => {\n-                crate::abi::codegen_terminator_call(fx, func, args, destination);\n+                crate::abi::codegen_terminator_call(\n+                    fx,\n+                    func,\n+                    args,\n+                    destination,\n+                    bb_data.terminator().source_info.span,\n+                );\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort => {\n                 trap_unreachable(fx, \"[corruption] Unwinding bb reached.\");"}, {"sha": "838c8d3315bfcb9b51c057ce7581814ef6ccd77b", "filename": "src/common.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=5407b51aa71f13b2d0deabd873c0a828cb8cd28f", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::layout::{FloatTy, Integer, Primitive};\n+use rustc::ty::layout::{Integer, Primitive};\n use rustc_target::spec::{HasTargetSpec, Target};\n \n use cranelift::codegen::ir::{InstructionData, Opcode, ValueDef};\n@@ -27,10 +27,8 @@ pub fn scalar_to_clif_type(tcx: TyCtxt, scalar: Scalar) -> Type {\n             Integer::I64 => types::I64,\n             Integer::I128 => types::I128,\n         },\n-        Primitive::Float(flt) => match flt {\n-            FloatTy::F32 => types::F32,\n-            FloatTy::F64 => types::F64,\n-        },\n+        Primitive::F32 => types::F32,\n+        Primitive::F64 => types::F64,\n         Primitive::Pointer => pointer_ty(tcx),\n     }\n }\n@@ -370,4 +368,15 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         let (index, _) = self.source_info_set.insert_full((source_info.span, source_info.scope));\n         self.bcx.set_srcloc(SourceLoc::new(index as u32));\n     }\n+\n+    pub fn get_caller_location(&mut self, span: Span) -> CValue<'tcx> {\n+        let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n+        let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n+        let const_loc = self.tcx.const_caller_location((\n+            syntax::symbol::Symbol::intern(&caller.file.name.to_string()),\n+            caller.line as u32,\n+            caller.col_display as u32 + 1,\n+        ));\n+        crate::constant::trans_const_value(self, const_loc)\n+    }\n }"}, {"sha": "d366cf4bf88ceec7f19eb62cc69dc7264d9d76ee", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=5407b51aa71f13b2d0deabd873c0a828cb8cd28f", "patch": "@@ -172,7 +172,7 @@ fn trans_const_place<'tcx>(\n         ecx.copy_op(op, ptr.into())?;\n         let alloc = ecx\n             .memory\n-            .get(ptr.to_ref().to_scalar()?.to_ptr()?.alloc_id)?;\n+            .get_raw(ptr.to_ref().to_scalar()?.to_ptr()?.alloc_id)?;\n         Ok(fx.tcx.intern_const_alloc(alloc.clone()))\n     };\n     let alloc = result().expect(\"unable to convert ConstValue to Allocation\");\n@@ -274,7 +274,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n         let (data_id, alloc) = match todo_item {\n             TodoItem::Alloc(alloc_id) => {\n                 //println!(\"alloc_id {}\", alloc_id);\n-                let alloc = memory.get(alloc_id).unwrap();\n+                let alloc = memory.get_raw(alloc_id).unwrap();\n                 let data_id = data_id_for_alloc_id(module, alloc_id, alloc.align);\n                 (data_id, alloc)\n             }"}, {"sha": "211c8a2443d4ac88a5e00d847df980e3f959ab54", "filename": "src/intrinsics.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5407b51aa71f13b2d0deabd873c0a828cb8cd28f/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=5407b51aa71f13b2d0deabd873c0a828cb8cd28f", "patch": "@@ -338,6 +338,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n     instance: Instance<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     destination: Option<(CPlace<'tcx>, BasicBlock)>,\n+    span: Span,\n ) {\n     let def_id = instance.def_id();\n     let substs = instance.substs;\n@@ -834,6 +835,21 @@ pub fn codegen_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, val);\n         };\n \n+        ptr_offset_from, <T> (v ptr, v base) {\n+            let isize_layout = fx.layout_of(fx.tcx.types.isize);\n+\n+            let pointee_size: u64 = fx.layout_of(T).size.bytes();\n+            let diff = fx.bcx.ins().isub(ptr, base);\n+            // FIXME this can be an exact division.\n+            let val = CValue::by_val(fx.bcx.ins().udiv_imm(diff, pointee_size as i64), isize_layout);\n+            ret.write_cvalue(fx, val);\n+        };\n+\n+        caller_location, () {\n+            let caller_location = fx.get_caller_location(span);\n+            ret.write_cvalue(fx, caller_location);\n+        };\n+\n         _ if intrinsic.starts_with(\"atomic_fence\"), () {};\n         _ if intrinsic.starts_with(\"atomic_singlethreadfence\"), () {};\n         _ if intrinsic.starts_with(\"atomic_load\"), (c ptr) {"}]}