{"sha": "55121a9c460115a6a5758dd5b7057c20407f5b71", "node_id": "C_kwDOAAsO6NoAKDU1MTIxYTljNDYwMTE1YTZhNTc1OGRkNWI3MDU3YzIwNDA3ZjViNzE", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-10T11:17:36Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-03T07:30:23Z"}, "message": "avoid cloning the whole compiletest configuration for every test", "tree": {"sha": "625c223e367963cbabb2c97139df2861306afc56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/625c223e367963cbabb2c97139df2861306afc56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55121a9c460115a6a5758dd5b7057c20407f5b71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQqgJAACgkQzXazX3c0\ndp5yqQ/+PWIVzwXrYu0nLqfLId1OYDmaGd4MyTAHuCSAEjEYtFqW9sxCsXOS69iB\nKhwpl2nfPXUryM8KcaTMDdhrcWIimjTliOpJF0QK1RmZBXeIicm6wfAkBOyvU3Dk\ny67xsCtAQ6/deFUpTXebmOViphNOV7NlL3Xzg2GiL808nKaDvS9ZvYraFoc6glar\n84D1ijpwLUBe6xsN5jyJYpLEC6Qmylqqf3WsQ7S5u5DfhJRtTdEJ5ExB2YiLOMek\nwj1quvte3hYiKBEsGnD68wPL1XGW1/r/DUfrkE3f/IPJv79EpbaJR2F1uUUsi7V6\nWZFKYfkB5fiESXau5wAZHBKBwi3en/IvFDIVKCtZ5Gg3568rtQ9lLxXOJDRXmHUe\no5R36AflPIOAPMJ/4WaaHbEpFLT90lKrza80vzNZvP8KyZnmV4u967po4Pbt6mA3\nv3ao1coi/H+7PTVkkuJdSyLj2fjo0k1iz1OKy6+doOWQc0MKiKIgrvSOxu+CnNtG\nObylzL07To9wAytvm4Clf81hVDQ3E3r1wBZhDW/9AcPwGKyudzGm59SLvGbqcbDP\nC740AypY8Nwn8N0IpD1HyoAXcVNqA4m5Ea7I01oHC/7ssaqN2FPZVsOCQbxIUys3\nfHY9IBddWGEztpPV6ExT4Te/cejujwUNQN/fNLBxxGAs0UzS87A=\n=gVba\n-----END PGP SIGNATURE-----", "payload": "tree 625c223e367963cbabb2c97139df2861306afc56\nparent c075691b825dce55e4261aba570cd2d9665950c0\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1678447056 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1680507023 +0200\n\navoid cloning the whole compiletest configuration for every test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55121a9c460115a6a5758dd5b7057c20407f5b71", "html_url": "https://github.com/rust-lang/rust/commit/55121a9c460115a6a5758dd5b7057c20407f5b71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55121a9c460115a6a5758dd5b7057c20407f5b71/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c075691b825dce55e4261aba570cd2d9665950c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c075691b825dce55e4261aba570cd2d9665950c0", "html_url": "https://github.com/rust-lang/rust/commit/c075691b825dce55e4261aba570cd2d9665950c0"}], "stats": {"total": 81, "additions": 50, "deletions": 31}, "files": [{"sha": "3d3f8278f65282afddbf73deebacee859d4874c3", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55121a9c460115a6a5758dd5b7057c20407f5b71/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55121a9c460115a6a5758dd5b7057c20407f5b71/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=55121a9c460115a6a5758dd5b7057c20407f5b71", "patch": "@@ -8,7 +8,7 @@ use std::process::Command;\n use std::str::FromStr;\n \n use crate::util::{add_dylib_path, PathBufExt};\n-use lazycell::LazyCell;\n+use lazycell::AtomicLazyCell;\n use serde::de::{Deserialize, Deserializer, Error as _};\n use std::collections::{HashMap, HashSet};\n use test::{ColorConfig, OutputFormat};\n@@ -326,7 +326,7 @@ pub struct Config {\n     /// Only rerun the tests that result has been modified accoring to Git status\n     pub only_modified: bool,\n \n-    pub target_cfg: LazyCell<TargetCfg>,\n+    pub target_cfgs: AtomicLazyCell<TargetCfgs>,\n \n     pub nocapture: bool,\n }\n@@ -340,7 +340,13 @@ impl Config {\n     }\n \n     pub fn target_cfgs(&self) -> &TargetCfgs {\n-        self.target_cfgs.borrow_with(|| TargetCfgs::new(self))\n+        match self.target_cfgs.borrow() {\n+            Some(cfgs) => cfgs,\n+            None => {\n+                let _ = self.target_cfgs.fill(TargetCfgs::new(self));\n+                self.target_cfgs.borrow().unwrap()\n+            }\n+        }\n     }\n \n     pub fn target_cfg(&self) -> &TargetCfg {"}, {"sha": "cfb1ee34f679a5d37fef0fefc13a3b6abedd141f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/55121a9c460115a6a5758dd5b7057c20407f5b71/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55121a9c460115a6a5758dd5b7057c20407f5b71/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=55121a9c460115a6a5758dd5b7057c20407f5b71", "patch": "@@ -11,7 +11,7 @@ use crate::util::logv;\n use build_helper::git::{get_git_modified_files, get_git_untracked_files};\n use core::panic;\n use getopts::Options;\n-use lazycell::LazyCell;\n+use lazycell::AtomicLazyCell;\n use std::collections::BTreeSet;\n use std::ffi::OsString;\n use std::fs;\n@@ -25,6 +25,7 @@ use tracing::*;\n use walkdir::WalkDir;\n \n use self::header::{make_test_description, EarlyProps};\n+use std::sync::Arc;\n \n #[cfg(test)]\n mod tests;\n@@ -42,7 +43,7 @@ pub mod util;\n fn main() {\n     tracing_subscriber::fmt::init();\n \n-    let config = parse_config(env::args().collect());\n+    let config = Arc::new(parse_config(env::args().collect()));\n \n     if config.valgrind_path.is_none() && config.force_valgrind {\n         panic!(\"Can't find Valgrind to run Valgrind tests\");\n@@ -313,7 +314,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n \n         force_rerun: matches.opt_present(\"force-rerun\"),\n \n-        target_cfgs: LazyCell::new(),\n+        target_cfgs: AtomicLazyCell::new(),\n \n         nocapture: matches.opt_present(\"nocapture\"),\n     }\n@@ -369,7 +370,7 @@ pub fn opt_str2(maybestr: Option<String>) -> String {\n     }\n }\n \n-pub fn run_tests(config: Config) {\n+pub fn run_tests(config: Arc<Config>) {\n     // If we want to collect rustfix coverage information,\n     // we first make sure that the coverage file does not exist.\n     // It will be created later on.\n@@ -411,7 +412,7 @@ pub fn run_tests(config: Config) {\n     };\n \n     let mut tests = Vec::new();\n-    for c in &configs {\n+    for c in configs {\n         let mut found_paths = BTreeSet::new();\n         make_tests(c, &mut tests, &mut found_paths);\n         check_overlapping_tests(&found_paths);\n@@ -433,7 +434,11 @@ pub fn run_tests(config: Config) {\n             println!(\n                 \"Some tests failed in compiletest suite={}{} mode={} host={} target={}\",\n                 config.suite,\n-                config.compare_mode.map(|c| format!(\" compare_mode={:?}\", c)).unwrap_or_default(),\n+                config\n+                    .compare_mode\n+                    .as_ref()\n+                    .map(|c| format!(\" compare_mode={:?}\", c))\n+                    .unwrap_or_default(),\n                 config.mode,\n                 config.host,\n                 config.target\n@@ -453,13 +458,13 @@ pub fn run_tests(config: Config) {\n     }\n }\n \n-fn configure_cdb(config: &Config) -> Option<Config> {\n+fn configure_cdb(config: &Config) -> Option<Arc<Config>> {\n     config.cdb.as_ref()?;\n \n-    Some(Config { debugger: Some(Debugger::Cdb), ..config.clone() })\n+    Some(Arc::new(Config { debugger: Some(Debugger::Cdb), ..config.clone() }))\n }\n \n-fn configure_gdb(config: &Config) -> Option<Config> {\n+fn configure_gdb(config: &Config) -> Option<Arc<Config>> {\n     config.gdb_version?;\n \n     if config.matches_env(\"msvc\") {\n@@ -490,10 +495,10 @@ fn configure_gdb(config: &Config) -> Option<Config> {\n         env::set_var(\"RUST_TEST_THREADS\", \"1\");\n     }\n \n-    Some(Config { debugger: Some(Debugger::Gdb), ..config.clone() })\n+    Some(Arc::new(Config { debugger: Some(Debugger::Gdb), ..config.clone() }))\n }\n \n-fn configure_lldb(config: &Config) -> Option<Config> {\n+fn configure_lldb(config: &Config) -> Option<Arc<Config>> {\n     config.lldb_python_dir.as_ref()?;\n \n     if let Some(350) = config.lldb_version {\n@@ -506,7 +511,7 @@ fn configure_lldb(config: &Config) -> Option<Config> {\n         return None;\n     }\n \n-    Some(Config { debugger: Some(Debugger::Lldb), ..config.clone() })\n+    Some(Arc::new(Config { debugger: Some(Debugger::Lldb), ..config.clone() }))\n }\n \n pub fn test_opts(config: &Config) -> test::TestOpts {\n@@ -541,17 +546,17 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n }\n \n pub fn make_tests(\n-    config: &Config,\n+    config: Arc<Config>,\n     tests: &mut Vec<test::TestDescAndFn>,\n     found_paths: &mut BTreeSet<PathBuf>,\n ) {\n     debug!(\"making tests from {:?}\", config.src_base.display());\n-    let inputs = common_inputs_stamp(config);\n-    let modified_tests = modified_tests(config, &config.src_base).unwrap_or_else(|err| {\n+    let inputs = common_inputs_stamp(&config);\n+    let modified_tests = modified_tests(&config, &config.src_base).unwrap_or_else(|err| {\n         panic!(\"modified_tests got error from dir: {}, error: {}\", config.src_base.display(), err)\n     });\n     collect_tests_from_dir(\n-        config,\n+        config.clone(),\n         &config.src_base,\n         &PathBuf::new(),\n         &inputs,\n@@ -622,7 +627,7 @@ fn modified_tests(config: &Config, dir: &Path) -> Result<Vec<PathBuf>, String> {\n }\n \n fn collect_tests_from_dir(\n-    config: &Config,\n+    config: Arc<Config>,\n     dir: &Path,\n     relative_dir_path: &Path,\n     inputs: &Stamp,\n@@ -650,7 +655,7 @@ fn collect_tests_from_dir(\n     // sequential loop because otherwise, if we do it in the\n     // tests themselves, they race for the privilege of\n     // creating the directories and sometimes fail randomly.\n-    let build_dir = output_relative_path(config, relative_dir_path);\n+    let build_dir = output_relative_path(&config, relative_dir_path);\n     fs::create_dir_all(&build_dir).unwrap();\n \n     // Add each `.rs` file as a test, and recurse further on any\n@@ -666,13 +671,13 @@ fn collect_tests_from_dir(\n             let paths =\n                 TestPaths { file: file_path, relative_dir: relative_dir_path.to_path_buf() };\n \n-            tests.extend(make_test(config, &paths, inputs))\n+            tests.extend(make_test(config.clone(), &paths, inputs))\n         } else if file_path.is_dir() {\n             let relative_file_path = relative_dir_path.join(file.file_name());\n             if &file_name != \"auxiliary\" {\n                 debug!(\"found directory: {:?}\", file_path.display());\n                 collect_tests_from_dir(\n-                    config,\n+                    config.clone(),\n                     &file_path,\n                     &relative_file_path,\n                     inputs,\n@@ -701,14 +706,18 @@ pub fn is_test(file_name: &OsString) -> bool {\n     !invalid_prefixes.iter().any(|p| file_name.starts_with(p))\n }\n \n-fn make_test(config: &Config, testpaths: &TestPaths, inputs: &Stamp) -> Vec<test::TestDescAndFn> {\n+fn make_test(\n+    config: Arc<Config>,\n+    testpaths: &TestPaths,\n+    inputs: &Stamp,\n+) -> Vec<test::TestDescAndFn> {\n     let test_path = if config.mode == Mode::RunMake {\n         // Parse directives in the Makefile\n         testpaths.file.join(\"Makefile\")\n     } else {\n         PathBuf::from(&testpaths.file)\n     };\n-    let early_props = EarlyProps::from_file(config, &test_path);\n+    let early_props = EarlyProps::from_file(&config, &test_path);\n \n     // Incremental tests are special, they inherently cannot be run in parallel.\n     // `runtest::run` will be responsible for iterating over revisions.\n@@ -723,19 +732,22 @@ fn make_test(config: &Config, testpaths: &TestPaths, inputs: &Stamp) -> Vec<test\n             let src_file =\n                 std::fs::File::open(&test_path).expect(\"open test file to parse ignores\");\n             let cfg = revision.map(|v| &**v);\n-            let test_name = crate::make_test_name(config, testpaths, revision);\n-            let mut desc = make_test_description(config, test_name, &test_path, src_file, cfg);\n+            let test_name = crate::make_test_name(&config, testpaths, revision);\n+            let mut desc = make_test_description(&config, test_name, &test_path, src_file, cfg);\n             // Ignore tests that already run and are up to date with respect to inputs.\n             if !config.force_rerun {\n                 desc.ignore |= is_up_to_date(\n-                    config,\n+                    &config,\n                     testpaths,\n                     &early_props,\n                     revision.map(|s| s.as_str()),\n                     inputs,\n                 );\n             }\n-            test::TestDescAndFn { desc, testfn: make_test_closure(config, testpaths, revision) }\n+            test::TestDescAndFn {\n+                desc,\n+                testfn: make_test_closure(config.clone(), testpaths, revision),\n+            }\n         })\n         .collect()\n }\n@@ -869,7 +881,7 @@ fn make_test_name(\n }\n \n fn make_test_closure(\n-    config: &Config,\n+    config: Arc<Config>,\n     testpaths: &TestPaths,\n     revision: Option<&String>,\n ) -> test::TestFn {"}, {"sha": "794c845458b24a386dfab0f9f174a921afacd264", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55121a9c460115a6a5758dd5b7057c20407f5b71/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55121a9c460115a6a5758dd5b7057c20407f5b71/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=55121a9c460115a6a5758dd5b7057c20407f5b71", "patch": "@@ -30,6 +30,7 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::{Child, Command, ExitStatus, Output, Stdio};\n use std::str;\n+use std::sync::Arc;\n \n use glob::glob;\n use once_cell::sync::Lazy;\n@@ -96,7 +97,7 @@ pub fn get_lib_name(lib: &str, dylib: bool) -> String {\n     }\n }\n \n-pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n+pub fn run(config: Arc<Config>, testpaths: &TestPaths, revision: Option<&str>) {\n     match &*config.target {\n         \"arm-linux-androideabi\"\n         | \"armv7-linux-androideabi\""}]}