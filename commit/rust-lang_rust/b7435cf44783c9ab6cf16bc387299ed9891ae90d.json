{"sha": "b7435cf44783c9ab6cf16bc387299ed9891ae90d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NDM1Y2Y0NDc4M2M5YWI2Y2YxNmJjMzg3Mjk5ZWQ5ODkxYWU5MGQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-12T05:01:59Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-12T05:58:39Z"}, "message": "implement raw pointer comparisons in librustc\n\nThis is mostly for consistency, as you can now compare raw pointers in\nconstant expressions or without the standard library.\n\nIt also reduces the number of `ptrtoint` instructions in the IR, making\ntracking down culprits of what's usually an anti-pattern easier.", "tree": {"sha": "5085980b7f4cc6798dc806c291eb420c4f8aec1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5085980b7f4cc6798dc806c291eb420c4f8aec1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7435cf44783c9ab6cf16bc387299ed9891ae90d", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7435cf44783c9ab6cf16bc387299ed9891ae90d", "html_url": "https://github.com/rust-lang/rust/commit/b7435cf44783c9ab6cf16bc387299ed9891ae90d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7435cf44783c9ab6cf16bc387299ed9891ae90d/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62166611e7510b86f395dbf19973e442fd43c403", "url": "https://api.github.com/repos/rust-lang/rust/commits/62166611e7510b86f395dbf19973e442fd43c403", "html_url": "https://github.com/rust-lang/rust/commit/62166611e7510b86f395dbf19973e442fd43c403"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "f5bb5dab41e18a5543999e34016792feeca9dbf3", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7435cf44783c9ab6cf16bc387299ed9891ae90d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7435cf44783c9ab6cf16bc387299ed9891ae90d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b7435cf44783c9ab6cf16bc387299ed9891ae90d", "patch": "@@ -4266,6 +4266,7 @@ pub fn is_binopable(cx: ctxt, ty: t, op: ast::BinOp) -> bool {\n     static tycat_int: int = 3;\n     static tycat_float: int = 4;\n     static tycat_bot: int = 5;\n+    static tycat_raw_ptr: int = 6;\n \n     static opcat_add: int = 0;\n     static opcat_sub: int = 1;\n@@ -4309,6 +4310,7 @@ pub fn is_binopable(cx: ctxt, ty: t, op: ast::BinOp) -> bool {\n           ty_int(_) | ty_uint(_) | ty_infer(IntVar(_)) => tycat_int,\n           ty_float(_) | ty_infer(FloatVar(_)) => tycat_float,\n           ty_bot => tycat_bot,\n+          ty_ptr(_) => tycat_raw_ptr,\n           _ => tycat_other\n         }\n     }\n@@ -4323,7 +4325,8 @@ pub fn is_binopable(cx: ctxt, ty: t, op: ast::BinOp) -> bool {\n     /*char*/    [f, f, f, f,     t,   t,  f,   f],\n     /*int*/     [t, t, t, t,     t,   t,  t,   f],\n     /*float*/   [t, t, t, f,     t,   t,  f,   f],\n-    /*bot*/     [t, t, t, t,     f,   f,  t,   t]];\n+    /*bot*/     [t, t, t, t,     f,   f,  t,   t],\n+    /*raw ptr*/ [f, f, f, f,     t,   t,  f,   f]];\n \n     return tbl[tycat(cx, ty)][opcat(op)];\n }"}, {"sha": "6e90e2a1070b59aea6aeb383f74262a666eb5ade", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 64, "deletions": 4, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b7435cf44783c9ab6cf16bc387299ed9891ae90d/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7435cf44783c9ab6cf16bc387299ed9891ae90d/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=b7435cf44783c9ab6cf16bc387299ed9891ae90d", "patch": "@@ -383,7 +383,7 @@ impl<T> RawPtr<T> for *mut T {\n }\n \n // Equality for pointers\n-#[cfg(not(test))]\n+#[cfg(stage0, not(test))]\n impl<T> Eq for *T {\n     #[inline]\n     fn eq(&self, other: &*T) -> bool {\n@@ -393,7 +393,17 @@ impl<T> Eq for *T {\n     fn ne(&self, other: &*T) -> bool { !self.eq(other) }\n }\n \n-#[cfg(not(test))]\n+#[cfg(not(stage0), not(test))]\n+impl<T> Eq for *T {\n+    #[inline]\n+    fn eq(&self, other: &*T) -> bool {\n+        *self == *other\n+    }\n+    #[inline]\n+    fn ne(&self, other: &*T) -> bool { !self.eq(other) }\n+}\n+\n+#[cfg(stage0, not(test))]\n impl<T> Eq for *mut T {\n     #[inline]\n     fn eq(&self, other: &*mut T) -> bool {\n@@ -403,6 +413,16 @@ impl<T> Eq for *mut T {\n     fn ne(&self, other: &*mut T) -> bool { !self.eq(other) }\n }\n \n+#[cfg(not(stage0), not(test))]\n+impl<T> Eq for *mut T {\n+    #[inline]\n+    fn eq(&self, other: &*mut T) -> bool {\n+        *self == *other\n+    }\n+    #[inline]\n+    fn ne(&self, other: &*mut T) -> bool { !self.eq(other) }\n+}\n+\n // Equivalence for pointers\n #[cfg(not(test))]\n impl<T> Equiv<*mut T> for *T {\n@@ -460,7 +480,7 @@ mod externfnpointers {\n }\n \n // Comparison for pointers\n-#[cfg(not(test))]\n+#[cfg(stage0, not(test))]\n impl<T> Ord for *T {\n     #[inline]\n     fn lt(&self, other: &*T) -> bool {\n@@ -480,7 +500,27 @@ impl<T> Ord for *T {\n     }\n }\n \n-#[cfg(not(test))]\n+#[cfg(not(stage0), not(test))]\n+impl<T> Ord for *T {\n+    #[inline]\n+    fn lt(&self, other: &*T) -> bool {\n+        *self < *other\n+    }\n+    #[inline]\n+    fn le(&self, other: &*T) -> bool {\n+        *self <= *other\n+    }\n+    #[inline]\n+    fn ge(&self, other: &*T) -> bool {\n+        *self >= *other\n+    }\n+    #[inline]\n+    fn gt(&self, other: &*T) -> bool {\n+        *self > *other\n+    }\n+}\n+\n+#[cfg(stage0, not(test))]\n impl<T> Ord for *mut T {\n     #[inline]\n     fn lt(&self, other: &*mut T) -> bool {\n@@ -500,6 +540,26 @@ impl<T> Ord for *mut T {\n     }\n }\n \n+#[cfg(not(stage0), not(test))]\n+impl<T> Ord for *mut T {\n+    #[inline]\n+    fn lt(&self, other: &*mut T) -> bool {\n+        *self < *other\n+    }\n+    #[inline]\n+    fn le(&self, other: &*mut T) -> bool {\n+        *self <= *other\n+    }\n+    #[inline]\n+    fn ge(&self, other: &*mut T) -> bool {\n+        *self >= *other\n+    }\n+    #[inline]\n+    fn gt(&self, other: &*mut T) -> bool {\n+        *self > *other\n+    }\n+}\n+\n #[cfg(test)]\n pub mod ptr_tests {\n     use super::*;"}]}