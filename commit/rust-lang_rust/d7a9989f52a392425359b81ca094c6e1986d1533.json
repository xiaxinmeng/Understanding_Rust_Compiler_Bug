{"sha": "d7a9989f52a392425359b81ca094c6e1986d1533", "node_id": "C_kwDOAAsO6NoAKGQ3YTk5ODlmNTJhMzkyNDI1MzU5YjgxY2EwOTRjNmUxOTg2ZDE1MzM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-04T19:15:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-04T19:23:31Z"}, "message": "add command to run our benchmarks", "tree": {"sha": "7f592f528e1fe4ac9c3e897c5399f31b40e78787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f592f528e1fe4ac9c3e897c5399f31b40e78787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a9989f52a392425359b81ca094c6e1986d1533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a9989f52a392425359b81ca094c6e1986d1533", "html_url": "https://github.com/rust-lang/rust/commit/d7a9989f52a392425359b81ca094c6e1986d1533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a9989f52a392425359b81ca094c6e1986d1533/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a0135af772f8ce34a5473dcc7a350c1a80d598", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a0135af772f8ce34a5473dcc7a350c1a80d598", "html_url": "https://github.com/rust-lang/rust/commit/04a0135af772f8ce34a5473dcc7a350c1a80d598"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "bde1921eb8ce467fbb85e5b86443ea7ebf2ce0ee", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a9989f52a392425359b81ca094c6e1986d1533/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7a9989f52a392425359b81ca094c6e1986d1533/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=d7a9989f52a392425359b81ca094c6e1986d1533", "patch": "@@ -147,6 +147,12 @@ does not automatically trigger a re-build of the standard library; you have to\n clear the Miri build cache manually (on Linux, `rm -rf ~/.cache/miri`;\n and on Windows, `rmdir /S \"%LOCALAPPDATA%\\rust-lang\\miri\\cache\"`).\n \n+### Benchmarking\n+\n+Miri comes with a few benchmarks; you can run `./miri bench` to run them with the locally built\n+Miri. Note: this will run `./miri install` as a side-effect. Also requires `hyperfine` to be\n+installed (`cargo install hyperfine`).\n+\n ## Configuring `rust-analyzer`\n \n To configure `rust-analyzer` and VS Code for working on Miri, save the following"}, {"sha": "2debf70c1664449b071421cd8208e04fd090a0f0", "filename": "miri", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d7a9989f52a392425359b81ca094c6e1986d1533/miri", "raw_url": "https://github.com/rust-lang/rust/raw/d7a9989f52a392425359b81ca094c6e1986d1533/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=d7a9989f52a392425359b81ca094c6e1986d1533", "patch": "@@ -37,6 +37,10 @@ Runs <command> over and over again with different seeds for Miri. The MIRIFLAGS\n variable is set to its original value appended with ` -Zmiri-seed=$SEED` for\n many different seeds.\n \n+./miri bench <benches>:\n+Runs the benchmarks from bench-cargo-miri in hyperfine. hyperfine needs to be installed.\n+<benches> can explicitly list the benchmarks to run; by default, all of them are run.\n+\n   ENVIRONMENT VARIABLES\n \n MIRI_SYSROOT:\n@@ -47,6 +51,11 @@ Pass extra flags to all cargo invocations.\n EOF\n )\n \n+## Preparation\n+# macOS does not have a useful readlink/realpath so we have to use Python instead...\n+MIRIDIR=$(python3 -c 'import os, sys; print(os.path.dirname(os.path.realpath(sys.argv[1])))' \"$0\")\n+TOOLCHAIN=$(cd \"$MIRIDIR\"; rustup show active-toolchain | head -n 1 | cut -d ' ' -f 1)\n+\n # Determine command.\n COMMAND=\"$1\"\n [ $# -gt 0 ] && shift\n@@ -60,14 +69,23 @@ many-seeds)\n     done\n     exit 0\n     ;;\n+bench)\n+    # Make sure we have an up-to-date Miri installed\n+    \"$0\" install\n+    # Run the requested benchmarks\n+    if [ -z \"$@\" ]; then\n+        BENCHES=( $(ls \"$MIRIDIR/bench-cargo-miri\" ) )\n+    else\n+        BENCHES=(\"$@\")\n+    fi\n+    for BENCH in \"${BENCHES[@]}\"; do\n+        hyperfine -w 1 -m 5 --shell=none \"cargo +$TOOLCHAIN miri run --manifest-path bench-cargo-miri/$BENCH/Cargo.toml\"\n+    done\n+    exit 0\n+    ;;\n esac\n \n-## Preparation\n-# macOS does not have a useful readlink/realpath so we have to use Python instead...\n-MIRIDIR=$(python3 -c 'import os, sys; print(os.path.dirname(os.path.realpath(sys.argv[1])))' \"$0\")\n-# Determine toolchain *in the Miri dir* and use that.\n-TOOLCHAIN=$(cd \"$MIRIDIR\"; rustup show active-toolchain | head -n 1 | cut -d ' ' -f 1)\n-\n+## Prepare the environment\n # Determine some toolchain properties\n TARGET=$(rustc +$TOOLCHAIN --version --verbose | grep \"^host:\" | cut -d ' ' -f 2)\n SYSROOT=$(rustc +$TOOLCHAIN --print sysroot)"}]}