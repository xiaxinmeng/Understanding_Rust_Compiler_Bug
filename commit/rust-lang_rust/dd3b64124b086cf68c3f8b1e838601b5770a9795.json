{"sha": "dd3b64124b086cf68c3f8b1e838601b5770a9795", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkM2I2NDEyNGIwODZjZjY4YzNmOGIxZTgzODYwMWI1NzcwYTk3OTU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-23T21:23:26Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-24T08:43:24Z"}, "message": "Add a test", "tree": {"sha": "c9afbe6d9c1c40bea7dedc05dded93aa6c7c146b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9afbe6d9c1c40bea7dedc05dded93aa6c7c146b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd3b64124b086cf68c3f8b1e838601b5770a9795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3b64124b086cf68c3f8b1e838601b5770a9795", "html_url": "https://github.com/rust-lang/rust/commit/dd3b64124b086cf68c3f8b1e838601b5770a9795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd3b64124b086cf68c3f8b1e838601b5770a9795/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "url": "https://api.github.com/repos/rust-lang/rust/commits/944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "html_url": "https://github.com/rust-lang/rust/commit/944f28fe5bf2b8e4316cc67bf5f824333fc4f180"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "99682e023e92048fb513082dc6d2253411edf8d7", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dd3b64124b086cf68c3f8b1e838601b5770a9795/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3b64124b086cf68c3f8b1e838601b5770a9795/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=dd3b64124b086cf68c3f8b1e838601b5770a9795", "patch": "@@ -59,6 +59,7 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n     group.finish()\n }\n \n+#[derive(Debug)]\n struct AutoImportAssets {\n     import_candidate: ImportCandidate,\n     module_with_name_to_import: Module,\n@@ -449,6 +450,30 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn macro_import() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+                    //- /lib.rs crate:crate_with_macro\n+                    #[macro_export]\n+                    macro_rules! foo {\n+                        () => ()\n+                    }\n+\n+                    //- /main.rs crate:main deps:crate_with_macro\n+                    fn main() {\n+                        foo<|>\n+                    }\",\n+            r\"use crate_with_macro::foo;\n+\n+fn main() {\n+    foo<|>\n+}\n+\",\n+        );\n+    }\n+\n     #[test]\n     fn auto_import_target() {\n         check_assist_target("}, {"sha": "bcc9b3f10cfdf077a9862488ca45bf5c18577cf3", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dd3b64124b086cf68c3f8b1e838601b5770a9795/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3b64124b086cf68c3f8b1e838601b5770a9795/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=dd3b64124b086cf68c3f8b1e838601b5770a9795", "patch": "@@ -165,7 +165,6 @@ mod helpers {\n \n     use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n     use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n-    use ra_syntax::TextRange;\n     use test_utils::{add_cursor, assert_eq_text, extract_range_or_offset, RangeOrOffset};\n \n     use crate::{AssistCtx, AssistHandler};\n@@ -175,8 +174,7 @@ mod helpers {\n         let (mut db, file_id) = RootDatabase::with_single_file(text);\n         // FIXME: ideally, this should be done by the above `RootDatabase::with_single_file`,\n         // but it looks like this might need specialization? :(\n-        let local_roots = vec![db.file_source_root(file_id)];\n-        db.set_local_roots(Arc::new(local_roots));\n+        db.set_local_roots(Arc::new(vec![db.file_source_root(file_id)]));\n         (db, file_id)\n     }\n \n@@ -206,19 +204,32 @@ mod helpers {\n     }\n \n     fn check(assist: AssistHandler, before: &str, expected: ExpectedResult) {\n-        let (range_or_offset, before) = extract_range_or_offset(before);\n-        let range: TextRange = range_or_offset.into();\n+        let (text_without_caret, file_with_caret_id, range_or_offset, db) =\n+            if before.contains(\"//-\") {\n+                let (mut db, position) = RootDatabase::with_position(before);\n+                db.set_local_roots(Arc::new(vec![db.file_source_root(position.file_id)]));\n+                (\n+                    db.file_text(position.file_id).as_ref().to_owned(),\n+                    position.file_id,\n+                    RangeOrOffset::Offset(position.offset),\n+                    db,\n+                )\n+            } else {\n+                let (range_or_offset, text_without_caret) = extract_range_or_offset(before);\n+                let (db, file_id) = with_single_file(&text_without_caret);\n+                (text_without_caret, file_id, range_or_offset, db)\n+            };\n+\n+        let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n \n-        let (db, file_id) = with_single_file(&before);\n-        let frange = FileRange { file_id, range };\n         let sema = Semantics::new(&db);\n         let assist_ctx = AssistCtx::new(&sema, frange, true);\n \n         match (assist(assist_ctx), expected) {\n             (Some(assist), ExpectedResult::After(after)) => {\n                 let action = assist.0[0].action.clone().unwrap();\n \n-                let mut actual = action.edit.apply(&before);\n+                let mut actual = action.edit.apply(&text_without_caret);\n                 match action.cursor_position {\n                     None => {\n                         if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n@@ -237,7 +248,7 @@ mod helpers {\n             (Some(assist), ExpectedResult::Target(target)) => {\n                 let action = assist.0[0].action.clone().unwrap();\n                 let range = action.target.expect(\"expected target on action\");\n-                assert_eq_text!(&before[range], target);\n+                assert_eq_text!(&text_without_caret[range], target);\n             }\n             (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n             (None, ExpectedResult::After(_)) | (None, ExpectedResult::Target(_)) => {"}]}