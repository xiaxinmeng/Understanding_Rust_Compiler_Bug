{"sha": "f89e2dd935d86bf2da3e4181e47ecaf56b5de026", "node_id": "C_kwDOAAsO6NoAKGY4OWUyZGQ5MzVkODZiZjJkYTNlNDE4MWU0N2VjYWY1NmI1ZGUwMjY", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T00:50:20Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T19:40:36Z"}, "message": "Move anchor conflict check to call site\n\nI think it makes the code easier to understand.", "tree": {"sha": "5a7119190132d42c22e00ed983b7832f23fdcee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a7119190132d42c22e00ed983b7832f23fdcee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f89e2dd935d86bf2da3e4181e47ecaf56b5de026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f89e2dd935d86bf2da3e4181e47ecaf56b5de026", "html_url": "https://github.com/rust-lang/rust/commit/f89e2dd935d86bf2da3e4181e47ecaf56b5de026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f89e2dd935d86bf2da3e4181e47ecaf56b5de026/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa4ac66c194046f631ce076c75516ecfdeb77ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa4ac66c194046f631ce076c75516ecfdeb77ee", "html_url": "https://github.com/rust-lang/rust/commit/cfa4ac66c194046f631ce076c75516ecfdeb77ee"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "40b3cb8641c0aee49187401fcc5b1aa466cef7a1", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f89e2dd935d86bf2da3e4181e47ecaf56b5de026/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89e2dd935d86bf2da3e4181e47ecaf56b5de026/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f89e2dd935d86bf2da3e4181e47ecaf56b5de026", "patch": "@@ -514,7 +514,14 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 Res::Def(DefKind::AssocFn | DefKind::AssocConst, _) => assert_eq!(ns, ValueNS),\n                 Res::Def(DefKind::AssocTy, _) => assert_eq!(ns, TypeNS),\n                 Res::Def(DefKind::Variant, _) => {\n-                    return handle_variant(self.cx, res, extra_fragment);\n+                    if extra_fragment.is_some() {\n+                        // NOTE: `res` can never be a primitive since this match arm means\n+                        //       `tcx.def_kind(res) == DefKind::Variant`.\n+                        return Err(ErrorKind::AnchorFailure(\n+                            AnchorFailure::RustdocAnchorConflict(res),\n+                        ));\n+                    }\n+                    return handle_variant(self.cx, res);\n                 }\n                 // Not a trait item; just return what we found.\n                 _ => return Ok((res, extra_fragment.clone())),\n@@ -2272,14 +2279,9 @@ fn privacy_error(cx: &DocContext<'_>, diag_info: &DiagnosticInfo<'_>, path_str:\n fn handle_variant(\n     cx: &DocContext<'_>,\n     res: Res,\n-    extra_fragment: &Option<UrlFragment>,\n ) -> Result<(Res, Option<UrlFragment>), ErrorKind<'static>> {\n     use rustc_middle::ty::DefIdTree;\n \n-    if extra_fragment.is_some() {\n-        // NOTE: `res` can never be a primitive since this function is only called when `tcx.def_kind(res) == DefKind::Variant`.\n-        return Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(res)));\n-    }\n     cx.tcx\n         .parent(res.def_id(cx.tcx))\n         .map(|parent| {"}]}