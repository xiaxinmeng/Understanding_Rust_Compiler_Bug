{"sha": "e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YmI4MmMzYTQ5NGUwOGNiY2QyODNiODI5MjU3OWE5Y2YwYmIxYTM=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2020-01-03T14:04:54Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2020-01-03T14:04:54Z"}, "message": "Allow disabling Cargo.toml not found error", "tree": {"sha": "8d47f5c3efb1260bc7dc0b75c824613afa5b069b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d47f5c3efb1260bc7dc0b75c824613afa5b069b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJeD0oHAAoJENWyu1zcMzS8cvkH/RN55wkKbjjq0baNLKg14c+c\nygAq6xFOt4BM2O02GdEWABgsonDwzHE2KzxQY6fjw9WSCk/VosypmYaL2iiN5pp4\njAA+qlY5lK3NrFWNtmNgFeyUnseDIrJ1lb5BLyBZaNoG4jcNE2+6TX9FgWZJDYBH\nHxelgk4dEEXynIXFQFsmSB1BcAxFPPUCFYG8kOlITVaKMFPJyuwdpLgiS7lUgBU2\nKBh+Uf73RBc1KY47RTI14VxP9mx4GTngrj4WcHEuKEH8YC8QM+Oro+apHx9cfE51\ngLWKa776+t2bsO8h8S+UTP2l6G70Boqpcn+DiqindHZcrxsDP8GQddXIgf65K6g=\n=Lhgx\n-----END PGP SIGNATURE-----", "payload": "tree 8d47f5c3efb1260bc7dc0b75c824613afa5b069b\nparent 6c321d7318b94ee93dc60dc88d1e68afa94e8c4f\nauthor Wilco Kusee <wilcokusee@gmail.com> 1578060294 +0100\ncommitter Wilco Kusee <wilcokusee@gmail.com> 1578060294 +0100\n\nAllow disabling Cargo.toml not found error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3", "html_url": "https://github.com/rust-lang/rust/commit/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c321d7318b94ee93dc60dc88d1e68afa94e8c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c321d7318b94ee93dc60dc88d1e68afa94e8c4f", "html_url": "https://github.com/rust-lang/rust/commit/6c321d7318b94ee93dc60dc88d1e68afa94e8c4f"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "85617640d67615475ddd16d287780f459c1736df", "filename": "crates/ra_ide/src/feature_flags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3/crates%2Fra_ide%2Fsrc%2Ffeature_flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3/crates%2Fra_ide%2Fsrc%2Ffeature_flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffeature_flags.rs?ref=e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3", "patch": "@@ -56,6 +56,7 @@ impl Default for FeatureFlags {\n             (\"completion.insertion.add-call-parenthesis\", true),\n             (\"completion.enable-postfix\", true),\n             (\"notifications.workspace-loaded\", true),\n+            (\"notifications.cargo-toml-not-found\", true),\n         ])\n     }\n }"}, {"sha": "5ca37981ed1805d7feef2df2bcb3885ef65aa64a", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3", "patch": "@@ -13,6 +13,7 @@ use lsp_types::{ClientCapabilities, NumberOrString};\n use ra_cargo_watch::{CheckOptions, CheckTask};\n use ra_ide::{Canceled, FeatureFlags, FileId, LibraryData, SourceRootId};\n use ra_prof::profile;\n+use ra_project_model::WorkspaceError;\n use ra_vfs::{VfsTask, Watch};\n use relative_path::RelativePathBuf;\n use rustc_hash::FxHashSet;\n@@ -62,6 +63,22 @@ pub fn main_loop(\n \n     let mut loop_state = LoopState::default();\n     let mut world_state = {\n+        let feature_flags = {\n+            let mut ff = FeatureFlags::default();\n+            for (flag, value) in config.feature_flags {\n+                if ff.set(flag.as_str(), value).is_err() {\n+                    log::error!(\"unknown feature flag: {:?}\", flag);\n+                    show_message(\n+                        req::MessageType::Error,\n+                        format!(\"unknown feature flag: {:?}\", flag),\n+                        &connection.sender,\n+                    );\n+                }\n+            }\n+            ff\n+        };\n+        log::info!(\"feature_flags: {:#?}\", feature_flags);\n+\n         // FIXME: support dynamic workspace loading.\n         let workspaces = {\n             let mut loaded_workspaces = Vec::new();\n@@ -75,7 +92,11 @@ pub fn main_loop(\n                     Ok(workspace) => loaded_workspaces.push(workspace),\n                     Err(e) => {\n                         log::error!(\"loading workspace failed: {}\", e);\n-\n+                        if let WorkspaceError::CargoTomlNotFound(_) = e {\n+                            if !feature_flags.get(\"notifications.cargo-toml-not-found\") {\n+                                continue;\n+                            }\n+                        }\n                         show_message(\n                             req::MessageType::Error,\n                             format!(\"rust-analyzer failed to load workspace: {}\", e),\n@@ -136,22 +157,6 @@ pub fn main_loop(\n             }\n         };\n \n-        let feature_flags = {\n-            let mut ff = FeatureFlags::default();\n-            for (flag, value) in config.feature_flags {\n-                if ff.set(flag.as_str(), value).is_err() {\n-                    log::error!(\"unknown feature flag: {:?}\", flag);\n-                    show_message(\n-                        req::MessageType::Error,\n-                        format!(\"unknown feature flag: {:?}\", flag),\n-                        &connection.sender,\n-                    );\n-                }\n-            }\n-            ff\n-        };\n-        log::info!(\"feature_flags: {:#?}\", feature_flags);\n-\n         WorldState::new(\n             ws_roots,\n             workspaces,"}, {"sha": "2aa9270c8003502a1a139d380340f889e6543703", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3", "patch": "@@ -17,12 +17,11 @@ use ra_db::{CrateGraph, CrateId, Edition, Env, FileId};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n-use crate::workspace_error::WorkspaceError;\n-\n pub use crate::{\n     cargo_workspace::{CargoFeatures, CargoWorkspace, Package, Target, TargetKind},\n     json_project::JsonProject,\n     sysroot::Sysroot,\n+    workspace_error::WorkspaceError,\n };\n \n #[derive(Debug, Clone)]"}, {"sha": "8cf4b68fd8091f46c284bc7c3f085a3f7bf68a98", "filename": "docs/user/README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3", "patch": "@@ -118,6 +118,8 @@ host.\n        \"completion.enable-postfix\": true,\n        // Show notification when workspace is fully loaded\n        \"notifications.workspace-loaded\": true,\n+       // Show error when no Cargo.toml was found\n+       \"notifications.cargo-toml-not-found\": true,\n    }\n    ```\n "}]}