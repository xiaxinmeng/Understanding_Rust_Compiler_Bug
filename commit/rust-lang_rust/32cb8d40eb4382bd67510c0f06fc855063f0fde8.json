{"sha": "32cb8d40eb4382bd67510c0f06fc855063f0fde8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyY2I4ZDQwZWI0MzgyYmQ2NzUxMGMwZjA2ZmM4NTUwNjNmMGZkZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-21T09:00:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-21T09:00:49Z"}, "message": "Auto merge of #75765 - JohnTitor:rollup-lexaoa9, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #75324 (clarify documentation of remove_dir errors)\n - #75532 (Fix RFC-1014 test)\n - #75664 (Update mailmap for mati865)\n - #75727 (Switch to intra-doc links in `core::result`)\n - #75750 (Move to intra doc links for std::thread documentation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7de4de383051f02b3b79844ea1d531d67b739814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de4de383051f02b3b79844ea1d531d67b739814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32cb8d40eb4382bd67510c0f06fc855063f0fde8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32cb8d40eb4382bd67510c0f06fc855063f0fde8", "html_url": "https://github.com/rust-lang/rust/commit/32cb8d40eb4382bd67510c0f06fc855063f0fde8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32cb8d40eb4382bd67510c0f06fc855063f0fde8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b51651ae9d0161967617be930415705b2e4d5faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b51651ae9d0161967617be930415705b2e4d5faf", "html_url": "https://github.com/rust-lang/rust/commit/b51651ae9d0161967617be930415705b2e4d5faf"}, {"sha": "2a7f868d7fc99959912e611e16f4b78cc07c4f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7f868d7fc99959912e611e16f4b78cc07c4f69", "html_url": "https://github.com/rust-lang/rust/commit/2a7f868d7fc99959912e611e16f4b78cc07c4f69"}], "stats": {"total": 226, "additions": 65, "deletions": 161}, "files": [{"sha": "cc7b2a677baf6e056006558527a750e823e9c4c3", "filename": ".mailmap", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32cb8d40eb4382bd67510c0f06fc855063f0fde8/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/32cb8d40eb4382bd67510c0f06fc855063f0fde8/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=32cb8d40eb4382bd67510c0f06fc855063f0fde8", "patch": "@@ -176,8 +176,8 @@ Mark Sinclair <mark.edward.x@gmail.com> =Mark Sinclair <=125axel125@gmail.com>\n Markus Westerlind <marwes91@gmail.com> Markus <marwes91@gmail.com>\n Martin Hafskjold Thoresen <martinhath@gmail.com>\n Matej Lach <matej.lach@gmail.com> Matej \u013dach <matej.lach@gmail.com>\n-Mateusz Miku\u0142a <matti@marinelayer.io> <mati865@gmail.com>\n-Mateusz Miku\u0142a <matti@marinelayer.io> <mati865@users.noreply.github.com>\n+Mateusz Miku\u0142a <mati865@gmail.com> <mati865@users.noreply.github.com>\n+Mateusz Miku\u0142a <mati865@gmail.com> <matti@marinelayer.io>\n Matt Brubeck <mbrubeck@limpet.net> <mbrubeck@cs.hmc.edu>\n Matthew Auld <matthew.auld@intel.com>\n Matthew Kraai <kraai@ftbfs.org>"}, {"sha": "ade5472717dde4d9c9228321bacc8cdebba8d549", "filename": "library/core/src/result.rs", "status": "modified", "additions": 16, "deletions": 69, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/32cb8d40eb4382bd67510c0f06fc855063f0fde8/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cb8d40eb4382bd67510c0f06fc855063f0fde8/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=32cb8d40eb4382bd67510c0f06fc855063f0fde8", "patch": "@@ -216,17 +216,14 @@\n //! [`?`] can only be used in functions that return [`Result`] because of the\n //! early return of [`Err`] that it provides.\n //!\n-//! [`expect`]: enum.Result.html#method.expect\n+//! [`expect`]: Result::expect\n //! [`Write`]: ../../std/io/trait.Write.html\n //! [`write_all`]: ../../std/io/trait.Write.html#method.write_all\n //! [`io::Result`]: ../../std/io/type.Result.html\n-//! [`?`]: ../../std/macro.try.html\n-//! [`Result`]: enum.Result.html\n-//! [`Ok(T)`]: enum.Result.html#variant.Ok\n-//! [`Err(E)`]: enum.Result.html#variant.Err\n+//! [`?`]: crate::ops::Try\n+//! [`Ok(T)`]: Ok\n+//! [`Err(E)`]: Err\n //! [`io::Error`]: ../../std/io/struct.Error.html\n-//! [`Ok`]: enum.Result.html#variant.Ok\n-//! [`Err`]: enum.Result.html#variant.Err\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -237,9 +234,6 @@ use crate::{convert, fmt};\n /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///\n /// See the [`std::result`](index.html) module documentation for details.\n-///\n-/// [`Ok`]: enum.Result.html#variant.Ok\n-/// [`Err`]: enum.Result.html#variant.Err\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\n #[rustc_diagnostic_item = \"result_type\"]\n@@ -267,8 +261,6 @@ impl<T, E> Result<T, E> {\n \n     /// Returns `true` if the result is [`Ok`].\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -290,8 +282,6 @@ impl<T, E> Result<T, E> {\n \n     /// Returns `true` if the result is [`Err`].\n     ///\n-    /// [`Err`]: enum.Result.html#variant.Err\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -378,7 +368,7 @@ impl<T, E> Result<T, E> {\n     /// Converts `self` into an [`Option<T>`], consuming `self`,\n     /// and discarding the error, if any.\n     ///\n-    /// [`Option<T>`]: ../../std/option/enum.Option.html\n+    /// [`Option<T>`]: Option\n     ///\n     /// # Examples\n     ///\n@@ -405,7 +395,7 @@ impl<T, E> Result<T, E> {\n     /// Converts `self` into an [`Option<E>`], consuming `self`,\n     /// and discarding the success value, if any.\n     ///\n-    /// [`Option<E>`]: ../../std/option/enum.Option.html\n+    /// [`Option<E>`]: Option\n     ///\n     /// # Examples\n     ///\n@@ -497,9 +487,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// This function can be used to compose the results of two functions.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n-    ///\n     /// # Examples\n     ///\n     /// Print the numbers on each line of a string multiplied by two.\n@@ -530,9 +517,7 @@ impl<T, E> Result<T, E> {\n     /// the result of a function call, it is recommended to use [`map_or_else`],\n     /// which is lazily evaluated.\n     ///\n-    /// [`map_or_else`]: #method.map_or_else\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n+    /// [`map_or_else`]: Result::map_or_else\n     ///\n     /// # Examples\n     ///\n@@ -559,8 +544,6 @@ impl<T, E> Result<T, E> {\n     /// This function can be used to unpack a successful result\n     /// while handling an error.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -590,8 +573,6 @@ impl<T, E> Result<T, E> {\n     /// This function can be used to pass through a successful result while handling\n     /// an error.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -671,8 +652,6 @@ impl<T, E> Result<T, E> {\n \n     /// Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -706,8 +685,6 @@ impl<T, E> Result<T, E> {\n \n     /// Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// This function can be used for control flow based on `Result` values.\n     ///\n@@ -739,9 +716,7 @@ impl<T, E> Result<T, E> {\n     /// result of a function call, it is recommended to use [`or_else`], which is\n     /// lazily evaluated.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n-    /// [`or_else`]: #method.or_else\n+    /// [`or_else`]: Result::or_else\n     ///\n     /// # Examples\n     ///\n@@ -777,8 +752,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// This function can be used for control flow based on result values.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -808,9 +781,7 @@ impl<T, E> Result<T, E> {\n     /// the result of a function call, it is recommended to use [`unwrap_or_else`],\n     /// which is lazily evaluated.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n-    /// [`unwrap_or_else`]: #method.unwrap_or_else\n+    /// [`unwrap_or_else`]: Result::unwrap_or_else\n     ///\n     /// # Examples\n     ///\n@@ -835,7 +806,6 @@ impl<T, E> Result<T, E> {\n \n     /// Returns the contained [`Ok`] value or computes it from a closure.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n     ///\n     /// # Examples\n     ///\n@@ -945,8 +915,6 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// Panics if the value is an [`Err`], with a panic message including the\n     /// passed message, and the content of the [`Err`].\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -973,17 +941,15 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n     /// [`unwrap_or_default`].\n     ///\n-    /// [`unwrap_or`]: #method.unwrap_or\n-    /// [`unwrap_or_else`]: #method.unwrap_or_else\n-    /// [`unwrap_or_default`]: #method.unwrap_or_default\n+    /// [`unwrap_or`]: Result::unwrap_or\n+    /// [`unwrap_or_else`]: Result::unwrap_or_else\n+    /// [`unwrap_or_default`]: Result::unwrap_or_default\n     ///\n     /// # Panics\n     ///\n     /// Panics if the value is an [`Err`], with a panic message provided by the\n     /// [`Err`]'s value.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -1017,8 +983,6 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// Panics if the value is an [`Ok`], with a panic message including the\n     /// passed message, and the content of the [`Ok`].\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -1045,8 +1009,6 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// Panics if the value is an [`Ok`], with a custom panic message provided\n     /// by the [`Ok`]'s value.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     ///\n     /// # Examples\n@@ -1095,10 +1057,8 @@ impl<T: Default, E> Result<T, E> {\n     /// assert_eq!(0, bad_year);\n     /// ```\n     ///\n-    /// [`parse`]: ../../std/primitive.str.html#method.parse\n-    /// [`FromStr`]: ../../std/str/trait.FromStr.html\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n+    /// [`parse`]: str::parse\n+    /// [`FromStr`]: crate::str::FromStr\n     #[inline]\n     #[stable(feature = \"result_unwrap_or_default\", since = \"1.16.0\")]\n     pub fn unwrap_or_default(self) -> T {\n@@ -1119,9 +1079,7 @@ impl<T, E: Into<!>> Result<T, E> {\n     /// to compile if the error type of the `Result` is later changed\n     /// to an error that can actually occur.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n-    /// [`unwrap`]: enum.Result.html#method.unwrap\n+    /// [`unwrap`]: Result::unwrap\n     ///\n     /// # Examples\n     ///\n@@ -1343,10 +1301,6 @@ impl<'a, T, E> IntoIterator for &'a mut Result<T, E> {\n /// The iterator yields one value if the result is [`Ok`], otherwise none.\n ///\n /// Created by [`Result::iter`].\n-///\n-/// [`Ok`]: enum.Result.html#variant.Ok\n-/// [`Result`]: enum.Result.html\n-/// [`Result::iter`]: enum.Result.html#method.iter\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n@@ -1396,10 +1350,6 @@ impl<T> Clone for Iter<'_, T> {\n /// An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].\n ///\n /// Created by [`Result::iter_mut`].\n-///\n-/// [`Ok`]: enum.Result.html#variant.Ok\n-/// [`Result`]: enum.Result.html\n-/// [`Result::iter_mut`]: enum.Result.html#method.iter_mut\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n@@ -1445,10 +1395,7 @@ unsafe impl<A> TrustedLen for IterMut<'_, A> {}\n /// This struct is created by the [`into_iter`] method on\n /// [`Result`] (provided by the [`IntoIterator`] trait).\n ///\n-/// [`Ok`]: enum.Result.html#variant.Ok\n-/// [`Result`]: enum.Result.html\n-/// [`into_iter`]: ../iter/trait.IntoIterator.html#tymethod.into_iter\n-/// [`IntoIterator`]: ../iter/trait.IntoIterator.html\n+/// [`into_iter`]: IntoIterator::into_iter\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {"}, {"sha": "b1630f8f5494c7334a0283831ae27668558b2bcc", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32cb8d40eb4382bd67510c0f06fc855063f0fde8/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cb8d40eb4382bd67510c0f06fc855063f0fde8/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=32cb8d40eb4382bd67510c0f06fc855063f0fde8", "patch": "@@ -1921,7 +1921,7 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     DirBuilder::new().recursive(true).create(path.as_ref())\n }\n \n-/// Removes an existing, empty directory.\n+/// Removes an empty directory.\n ///\n /// # Platform-specific behavior\n ///\n@@ -1936,6 +1936,8 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This function will return an error in the following situations, but is not\n /// limited to just these cases:\n ///\n+/// * `path` doesn't exist.\n+/// * `path` isn't a directory.\n /// * The user lacks permissions to remove the directory at the provided `path`.\n /// * The directory isn't empty.\n ///"}, {"sha": "a4562967f0bcb904ed738f8e8855bfe55acccabd", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32cb8d40eb4382bd67510c0f06fc855063f0fde8/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cb8d40eb4382bd67510c0f06fc855063f0fde8/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=32cb8d40eb4382bd67510c0f06fc855063f0fde8", "patch": "@@ -71,9 +71,7 @@ use crate::fmt;\n ///    not guard typically have a synthetic limit after which point no more\n ///    destructors are run.\n ///\n-/// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n-/// [`thread_local!`]: ../../std/macro.thread_local.html\n-/// [`Drop`]: ../../std/ops/trait.Drop.html\n+/// [`with`]: LocalKey::with\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct LocalKey<T: 'static> {\n     // This outer `LocalKey<T>` type is what's going to be stored in statics,\n@@ -118,10 +116,10 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n /// # fn main() {}\n /// ```\n ///\n-/// See [LocalKey documentation][`std::thread::LocalKey`] for more\n+/// See [`LocalKey` documentation][`std::thread::LocalKey`] for more\n /// information.\n ///\n-/// [`std::thread::LocalKey`]: ../std/thread/struct.LocalKey.html\n+/// [`std::thread::LocalKey`]: crate::thread::LocalKey\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(thread_local_internals)]"}, {"sha": "0b9849517c2526bbfb1a9a4fd5881eac7682cf6a", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 37, "deletions": 82, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/32cb8d40eb4382bd67510c0f06fc855063f0fde8/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cb8d40eb4382bd67510c0f06fc855063f0fde8/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=32cb8d40eb4382bd67510c0f06fc855063f0fde8", "patch": "@@ -129,30 +129,19 @@\n //!\n //! Note that the stack size of the main thread is *not* determined by Rust.\n //!\n-//! [channels]: ../../std/sync/mpsc/index.html\n-//! [`Arc`]: ../../std/sync/struct.Arc.html\n-//! [`spawn`]: ../../std/thread/fn.spawn.html\n-//! [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-//! [`JoinHandle::thread`]: ../../std/thread/struct.JoinHandle.html#method.thread\n-//! [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n-//! [`Result`]: ../../std/result/enum.Result.html\n-//! [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-//! [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-//! [`panic!`]: ../../std/macro.panic.html\n-//! [`Builder`]: ../../std/thread/struct.Builder.html\n-//! [`Builder::stack_size`]: ../../std/thread/struct.Builder.html#method.stack_size\n-//! [`Builder::name`]: ../../std/thread/struct.Builder.html#method.name\n-//! [`thread::current`]: ../../std/thread/fn.current.html\n-//! [`thread::Result`]: ../../std/thread/type.Result.html\n-//! [`Thread`]: ../../std/thread/struct.Thread.html\n-//! [`park`]: ../../std/thread/fn.park.html\n-//! [`unpark`]: ../../std/thread/struct.Thread.html#method.unpark\n-//! [`Thread::name`]: ../../std/thread/struct.Thread.html#method.name\n-//! [`thread::park_timeout`]: ../../std/thread/fn.park_timeout.html\n-//! [`Cell`]: ../cell/struct.Cell.html\n-//! [`RefCell`]: ../cell/struct.RefCell.html\n-//! [`thread_local!`]: ../macro.thread_local.html\n-//! [`with`]: struct.LocalKey.html#method.with\n+//! [channels]: crate::sync::mpsc\n+//! [`join`]: JoinHandle::join\n+//! [`Result`]: crate::result::Result\n+//! [`Ok`]: crate::result::Result::Ok\n+//! [`Err`]: crate::result::Result::Err\n+//! [`thread::current`]: current\n+//! [`thread::Result`]: Result\n+//! [`unpark`]: Thread::unpark\n+//! [`Thread::name`]: Thread::name\n+//! [`thread::park_timeout`]: park_timeout\n+//! [`Cell`]: crate::cell::Cell\n+//! [`RefCell`]: crate::cell::RefCell\n+//! [`with`]: LocalKey::with\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -245,12 +234,12 @@ pub use self::local::statik::Key as __StaticLocalKeyInner;\n /// handler.join().unwrap();\n /// ```\n ///\n-/// [`thread::spawn`]: ../../std/thread/fn.spawn.html\n-/// [`stack_size`]: ../../std/thread/struct.Builder.html#method.stack_size\n-/// [`name`]: ../../std/thread/struct.Builder.html#method.name\n-/// [`spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n-/// [`io::Result`]: ../../std/io/type.Result.html\n-/// [`unwrap`]: ../../std/result/enum.Result.html#method.unwrap\n+/// [`stack_size`]: Builder::stack_size\n+/// [`name`]: Builder::name\n+/// [`spawn`]: Builder::spawn\n+/// [`thread::spawn`]: spawn\n+/// [`io::Result`]: crate::io::Result\n+/// [`unwrap`]: crate::result::Result::unwrap\n /// [naming-threads]: ./index.html#naming-threads\n /// [stack-size]: ./index.html#stack-size\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -355,9 +344,7 @@ impl Builder {\n     /// [`io::Result`] to capture any failure to create the thread at\n     /// the OS level.\n     ///\n-    /// [`spawn`]: ../../std/thread/fn.spawn.html\n-    /// [`io::Result`]: ../../std/io/type.Result.html\n-    /// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n+    /// [`io::Result`]: crate::io::Result\n     ///\n     /// # Panics\n     ///\n@@ -443,11 +430,7 @@ impl Builder {\n     /// handler.join().unwrap();\n     /// ```\n     ///\n-    /// [`spawn`]: ../../std/thread/fn.spawn.html\n-    /// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n-    /// [`io::Result`]: ../../std/io/type.Result.html\n-    /// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-    /// [`JoinHandle::join`]: ../../std/thread/struct.JoinHandle.html#method.join\n+    /// [`io::Result`]: crate::io::Result\n     #[unstable(feature = \"thread_spawn_unchecked\", issue = \"55132\")]\n     pub unsafe fn spawn_unchecked<'a, F, T>(self, f: F) -> io::Result<JoinHandle<T>>\n     where\n@@ -513,7 +496,7 @@ impl Builder {\n /// the main thread finishes). Additionally, the join handle provides a [`join`]\n /// method that can be used to join the child thread. If the child thread\n /// panics, [`join`] will return an [`Err`] containing the argument given to\n-/// [`panic`].\n+/// [`panic!`].\n ///\n /// This will create a thread using default parameters of [`Builder`], if you\n /// want to specify the stack size or the name of the thread, use this API\n@@ -600,15 +583,9 @@ impl Builder {\n /// println!(\"{}\", result);\n /// ```\n ///\n-/// [`channels`]: ../../std/sync/mpsc/index.html\n-/// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-/// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n-/// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-/// [`panic`]: ../../std/macro.panic.html\n-/// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n-/// [`Builder`]: ../../std/thread/struct.Builder.html\n-/// [`Send`]: ../../std/marker/trait.Send.html\n-/// [`Sync`]: ../../std/marker/trait.Sync.html\n+/// [`channels`]: crate::sync::mpsc\n+/// [`join`]: JoinHandle::join\n+/// [`Err`]: crate::result::Result::Err\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn spawn<F, T>(f: F) -> JoinHandle<T>\n where\n@@ -673,11 +650,8 @@ pub fn current() -> Thread {\n /// thread::yield_now();\n /// ```\n ///\n-/// [`channel`]: ../../std/sync/mpsc/index.html\n-/// [`spawn`]: ../../std/thread/fn.spawn.html\n-/// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n-/// [`Mutex`]: ../../std/sync/struct.Mutex.html\n-/// [`Condvar`]: ../../std/sync/struct.Condvar.html\n+/// [`channel`]: crate::sync::mpsc\n+/// [`join`]: JoinHandle::join\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn yield_now() {\n     imp::Thread::yield_now()\n@@ -723,8 +697,6 @@ pub fn yield_now() {\n ///     panic!()\n /// }\n /// ```\n-///\n-/// [Mutex]: ../../std/sync/struct.Mutex.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn panicking() -> bool {\n@@ -881,10 +853,8 @@ const NOTIFIED: usize = 2;\n /// parked_thread.join().unwrap();\n /// ```\n ///\n-/// [`Thread`]: ../../std/thread/struct.Thread.html\n-/// [`park`]: ../../std/thread/fn.park.html\n-/// [`unpark`]: ../../std/thread/struct.Thread.html#method.unpark\n-/// [`thread::park_timeout`]: ../../std/thread/fn.park_timeout.html\n+/// [`unpark`]: Thread::unpark\n+/// [`thread::park_timeout`]: park_timeout\n //\n // The implementation currently uses the trivial strategy of a Mutex+Condvar\n // with wakeup flag, which does not actually allow spurious wakeups. In the\n@@ -939,9 +909,6 @@ pub fn park() {\n /// amount of time waited to be precisely `ms` long.\n ///\n /// See the [park documentation][`park`] for more detail.\n-///\n-/// [`park_timeout`]: fn.park_timeout.html\n-/// [`park`]: ../../std/thread/fn.park.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.6.0\", reason = \"replaced by `std::thread::park_timeout`\")]\n pub fn park_timeout_ms(ms: u32) {\n@@ -986,8 +953,6 @@ pub fn park_timeout_ms(ms: u32) {\n ///     timeout_remaining = timeout - elapsed;\n /// }\n /// ```\n-///\n-/// [park]: fn.park.html\n #[stable(feature = \"park_timeout\", since = \"1.4.0\")]\n pub fn park_timeout(dur: Duration) {\n     let thread = current();\n@@ -1046,8 +1011,7 @@ pub fn park_timeout(dur: Duration) {\n /// assert!(thread::current().id() != other_thread_id);\n /// ```\n ///\n-/// [`id`]: ../../std/thread/struct.Thread.html#method.id\n-/// [`Thread`]: ../../std/thread/struct.Thread.html\n+/// [`id`]: Thread::id\n #[stable(feature = \"thread_id\", since = \"1.19.0\")]\n #[derive(Eq, PartialEq, Clone, Copy, Hash, Debug)]\n pub struct ThreadId(NonZeroU64);\n@@ -1124,12 +1088,7 @@ struct Inner {\n /// should instead use a function like `spawn` to create new threads, see the\n /// docs of [`Builder`] and [`spawn`] for more details.\n ///\n-/// [`Builder`]: ../../std/thread/struct.Builder.html\n-/// [`JoinHandle::thread`]: ../../std/thread/struct.JoinHandle.html#method.thread\n-/// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-/// [`thread::current`]: ../../std/thread/fn.current.html\n-/// [`spawn`]: ../../std/thread/fn.spawn.html\n-\n+/// [`thread::current`]: current\n pub struct Thread {\n     inner: Arc<Inner>,\n }\n@@ -1181,8 +1140,6 @@ impl Thread {\n     ///\n     /// parked_thread.join().unwrap();\n     /// ```\n-    ///\n-    /// [park]: fn.park.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unpark(&self) {\n         // To ensure the unparked thread will observe any writes we made\n@@ -1326,7 +1283,7 @@ impl fmt::Debug for Thread {\n /// }\n /// ```\n ///\n-/// [`Result`]: ../../std/result/enum.Result.html\n+/// [`Result`]: crate::result::Result\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type Result<T> = crate::result::Result<T, Box<dyn Any + Send + 'static>>;\n \n@@ -1421,9 +1378,8 @@ impl<T> JoinInner<T> {\n /// thread::sleep(Duration::from_millis(1000));\n /// ```\n ///\n-/// [`Clone`]: ../../std/clone/trait.Clone.html\n-/// [`thread::spawn`]: fn.spawn.html\n-/// [`thread::Builder::spawn`]: struct.Builder.html#method.spawn\n+/// [`thread::Builder::spawn`]: Builder::spawn\n+/// [`thread::spawn`]: spawn\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct JoinHandle<T>(JoinInner<T>);\n \n@@ -1462,11 +1418,10 @@ impl<T> JoinHandle<T> {\n     /// operations that happen after `join` returns.\n     ///\n     /// If the child thread panics, [`Err`] is returned with the parameter given\n-    /// to [`panic`].\n+    /// to [`panic!`].\n     ///\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`panic`]: ../../std/macro.panic.html\n-    /// [atomic memory orderings]: ../../std/sync/atomic/index.html\n+    /// [`Err`]: crate::result::Result::Err\n+    /// [atomic memory orderings]: crate::sync::atomic\n     ///\n     /// # Panics\n     ///"}, {"sha": "7dd65701f125c135af39103b7484f6104a77dd43", "filename": "src/test/ui/rfcs/rfc-1014-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32cb8d40eb4382bd67510c0f06fc855063f0fde8/src%2Ftest%2Fui%2Frfcs%2Frfc-1014-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cb8d40eb4382bd67510c0f06fc855063f0fde8/src%2Ftest%2Fui%2Frfcs%2Frfc-1014-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-1014-2.rs?ref=32cb8d40eb4382bd67510c0f06fc855063f0fde8", "patch": "@@ -23,7 +23,8 @@ fn close_stdout() {\n #[cfg(windows)]\n fn main() {\n     close_stdout();\n-    println!(\"hello world\");\n+    println!(\"hello\");\n+    println!(\"world\");\n }\n \n #[cfg(not(windows))]"}, {"sha": "53b8fddcf31e0b64001f1262efc953d621b252b0", "filename": "src/test/ui/rfcs/rfc-1014.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32cb8d40eb4382bd67510c0f06fc855063f0fde8/src%2Ftest%2Fui%2Frfcs%2Frfc-1014.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cb8d40eb4382bd67510c0f06fc855063f0fde8/src%2Ftest%2Fui%2Frfcs%2Frfc-1014.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-1014.rs?ref=32cb8d40eb4382bd67510c0f06fc855063f0fde8", "patch": "@@ -30,5 +30,6 @@ fn close_stdout() {\n \n fn main() {\n     close_stdout();\n-    println!(\"hello world\");\n+    println!(\"hello\");\n+    println!(\"world\");\n }"}]}