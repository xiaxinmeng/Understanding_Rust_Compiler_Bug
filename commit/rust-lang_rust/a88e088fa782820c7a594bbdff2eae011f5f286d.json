{"sha": "a88e088fa782820c7a594bbdff2eae011f5f286d", "node_id": "C_kwDOAAsO6NoAKGE4OGUwODhmYTc4MjgyMGM3YTU5NGJiZGZmMmVhZTAxMWY1ZjI4NmQ", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T14:14:53Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T14:16:29Z"}, "message": "Build proc-macro-test-impl out-of-tree\n\nBuilding it in-place fails in rust CI because the source directory\nis read-only. This changes `proc-macro-test`'s build script to first\ncopy `imp` under `OUT_DIR` (which is read-write).\n\nIt also prints stdout/stderr for the nested cargo invocation, should\nit fail. (I've seen failures in rust CI that I couldn't explain, and\nwhen they take 25 minutes to reproduce, you want to have that info)", "tree": {"sha": "935e9b09d5413504f5ca99466451656d08928abb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/935e9b09d5413504f5ca99466451656d08928abb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a88e088fa782820c7a594bbdff2eae011f5f286d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a88e088fa782820c7a594bbdff2eae011f5f286d", "html_url": "https://github.com/rust-lang/rust/commit/a88e088fa782820c7a594bbdff2eae011f5f286d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a88e088fa782820c7a594bbdff2eae011f5f286d/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4439fafafb778f9d287f7369218c744381e8cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4439fafafb778f9d287f7369218c744381e8cd", "html_url": "https://github.com/rust-lang/rust/commit/bd4439fafafb778f9d287f7369218c744381e8cd"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "8e13563c14effb4c1cfd841c2f12e666e3241d92", "filename": "crates/proc-macro-test/build.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a88e088fa782820c7a594bbdff2eae011f5f286d/crates%2Fproc-macro-test%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88e088fa782820c7a594bbdff2eae011f5f286d/crates%2Fproc-macro-test%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-test%2Fbuild.rs?ref=a88e088fa782820c7a594bbdff2eae011f5f286d", "patch": "@@ -17,9 +17,25 @@ fn main() {\n \n     let name = \"proc-macro-test-impl\";\n     let version = \"0.0.0\";\n+\n+    let imp_dir = std::env::current_dir().unwrap().join(\"imp\");\n+    let staging_dir = out_dir.join(\"staging\");\n+    std::fs::create_dir_all(&staging_dir).unwrap();\n+    std::fs::create_dir_all(staging_dir.join(\"src\")).unwrap();\n+\n+    for item_els in [&[\"Cargo.toml\"][..], &[\"Cargo.lock\"], &[\"src\", \"lib.rs\"]] {\n+        let mut src = imp_dir.clone();\n+        let mut dst = staging_dir.clone();\n+        for el in item_els {\n+            src.push(el);\n+            dst.push(el);\n+        }\n+        std::fs::copy(src, dst).unwrap();\n+    }\n+\n     let target_dir = out_dir.join(\"target\");\n     let output = Command::new(toolchain::cargo())\n-        .current_dir(\"imp\")\n+        .current_dir(&staging_dir)\n         .args(&[\"build\", \"-p\", \"proc-macro-test-impl\", \"--message-format\", \"json\"])\n         // Explicit override the target directory to avoid using the same one which the parent\n         // cargo is using, or we'll deadlock.\n@@ -29,7 +45,14 @@ fn main() {\n         .arg(&target_dir)\n         .output()\n         .unwrap();\n-    assert!(output.status.success());\n+    if !output.status.success() {\n+        println!(\"proc-macro-test-impl failed to build\");\n+        println!(\"============ stdout ============\");\n+        println!(\"{}\", String::from_utf8_lossy(&output.stdout));\n+        println!(\"============ stderr ============\");\n+        println!(\"{}\", String::from_utf8_lossy(&output.stderr));\n+        panic!(\"proc-macro-test-impl failed to build\");\n+    }\n \n     let mut artifact_path = None;\n     for message in Message::parse_stream(output.stdout.as_slice()) {"}]}