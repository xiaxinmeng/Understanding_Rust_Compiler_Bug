{"sha": "bf416e7daf533fd4eb6f270da3ab965ac7422f05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNDE2ZTdkYWY1MzNmZDRlYjZmMjcwZGEzYWI5NjVhYzc0MjJmMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-05T22:41:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-05T22:41:35Z"}, "message": "auto merge of #9713 : sfackler/rust/dynamic_lib, r=alexcrichton\n\nThe root issue is that dlerror isn't reentrant or even thread safe.\r\n\r\nThe solution implemented here is to make a yielding spin lock over an\r\nAtomicFlag. This is pretty hacky, but the best we can do at this point.\r\nAs far as I can tell, it isn't possible to create a global mutex without\r\nhaving to initialize it in a single threaded context.\r\n\r\nThe Windows code isn't affected since errno is thread-local on Windows\r\nand it's running in an atomically block to ensure there isn't a green\r\nthread context switch.\r\n\r\nCloses #8156", "tree": {"sha": "34399950e063772b48aa29ea18ff7f61e38bcf08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34399950e063772b48aa29ea18ff7f61e38bcf08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf416e7daf533fd4eb6f270da3ab965ac7422f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf416e7daf533fd4eb6f270da3ab965ac7422f05", "html_url": "https://github.com/rust-lang/rust/commit/bf416e7daf533fd4eb6f270da3ab965ac7422f05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf416e7daf533fd4eb6f270da3ab965ac7422f05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2733b189ac60cea541fbf80e5839e5027ffc9fbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2733b189ac60cea541fbf80e5839e5027ffc9fbf", "html_url": "https://github.com/rust-lang/rust/commit/2733b189ac60cea541fbf80e5839e5027ffc9fbf"}, {"sha": "1d19ad97871d22fb26a6ba0856d106546da8612d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d19ad97871d22fb26a6ba0856d106546da8612d", "html_url": "https://github.com/rust-lang/rust/commit/1d19ad97871d22fb26a6ba0856d106546da8612d"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "62ff8c9fbc80ade0ea77f0661ce0fee7e28cb787", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bf416e7daf533fd4eb6f270da3ab965ac7422f05/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf416e7daf533fd4eb6f270da3ab965ac7422f05/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=bf416e7daf533fd4eb6f270da3ab965ac7422f05", "patch": "@@ -12,7 +12,7 @@\n \n Dynamic library facilities.\n \n-A simple wrapper over the platforms dynamic library facilities\n+A simple wrapper over the platform's dynamic library facilities\n \n */\n use c_str::ToCStr;\n@@ -80,7 +80,6 @@ impl DynamicLibrary {\n     }\n }\n \n-\n #[cfg(test)]\n mod test {\n     use super::*;\n@@ -90,8 +89,7 @@ mod test {\n     use libc;\n \n     #[test]\n-    // #[ignore(cfg(windows))] // FIXME #8818\n-    #[ignore] // FIXME #9137 this library isn't thread-safe\n+    #[ignore(cfg(windows))] // FIXME #8818\n     fn test_loading_cosine() {\n         // The math library does not need to be loaded since it is already\n         // statically linked in\n@@ -100,8 +98,6 @@ mod test {\n             Ok(libm) => libm\n         };\n \n-        // Unfortunately due to issue #6194 it is not possible to call\n-        // this as a C function\n         let cosine: extern fn(libc::c_double) -> libc::c_double = unsafe {\n             match libm.symbol(\"cos\") {\n                 Err(error) => fail2!(\"Could not load function cos: {}\", error),\n@@ -114,15 +110,14 @@ mod test {\n         let result = cosine(argument);\n         if result != expected_result {\n             fail2!(\"cos({:?}) != {:?} but equaled {:?} instead\", argument,\n-                  expected_result, result)\n+                   expected_result, result)\n         }\n     }\n \n     #[test]\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n-    #[ignore] // FIXME #9137 this library isn't thread-safe\n     fn test_errors_do_not_crash() {\n         // Open /dev/null as a library to get an error, and make sure\n         // that only causes an error, and not a crash.\n@@ -164,17 +159,25 @@ pub mod dl {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         unsafe {\n+            // dlerror isn't thread safe, so we need to lock around this entire\n+            // sequence. `atomically` asserts that we don't do anything that\n+            // would cause this task to be descheduled, which could deadlock\n+            // the scheduler if it happens while the lock is held.\n+            // FIXME #9105 use a Rust mutex instead of C++ mutexes.\n             do atomically {\n+                rust_take_dlerror_lock();\n                 let _old_error = dlerror();\n \n                 let result = f();\n \n                 let last_error = dlerror();\n-                if ptr::null() == last_error {\n+                let ret = if ptr::null() == last_error {\n                     Ok(result)\n                 } else {\n                     Err(str::raw::from_c_str(last_error))\n-                }\n+                };\n+                rust_drop_dlerror_lock();\n+                ret\n             }\n         }\n     }\n@@ -197,6 +200,11 @@ pub mod dl {\n         Local = 0,\n     }\n \n+    extern {\n+        fn rust_take_dlerror_lock();\n+        fn rust_drop_dlerror_lock();\n+    }\n+\n     #[link_name = \"dl\"]\n     extern {\n         fn dlopen(filename: *libc::c_char, flag: libc::c_int) -> *libc::c_void;\n@@ -246,6 +254,7 @@ pub mod dl {\n             }\n         }\n     }\n+\n     pub unsafe fn symbol(handle: *libc::c_void, symbol: *libc::c_char) -> *libc::c_void {\n         #[fixed_stack_segment]; #[inline(never)];\n         GetProcAddress(handle, symbol)"}, {"sha": "34d1efd577d48016162fdf57559b2c8af5564278", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf416e7daf533fd4eb6f270da3ab965ac7422f05/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/bf416e7daf533fd4eb6f270da3ab965ac7422f05/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=bf416e7daf533fd4eb6f270da3ab965ac7422f05", "patch": "@@ -609,6 +609,18 @@ rust_drop_linenoise_lock() {\n     linenoise_lock.unlock();\n }\n \n+static lock_and_signal dlerror_lock;\n+\n+extern \"C\" CDECL void\n+rust_take_dlerror_lock() {\n+    dlerror_lock.lock();\n+}\n+\n+extern \"C\" CDECL void\n+rust_drop_dlerror_lock() {\n+    dlerror_lock.unlock();\n+}\n+\n extern \"C\" CDECL unsigned int\n rust_valgrind_stack_register(void *start, void *end) {\n   return VALGRIND_STACK_REGISTER(start, end);"}, {"sha": "d0491a9c059bb1d07badc8920fc8fcd679c244e7", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf416e7daf533fd4eb6f270da3ab965ac7422f05/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/bf416e7daf533fd4eb6f270da3ab965ac7422f05/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=bf416e7daf533fd4eb6f270da3ab965ac7422f05", "patch": "@@ -206,3 +206,5 @@ sd_markdown_render\n sd_markdown_free\n bufrelease\n bufnew\n+rust_take_dlerror_lock\n+rust_drop_dlerror_lock"}]}