{"sha": "9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZTc5M2FlNWRmNGJjOWVhNzNjOGU1NWM2NjYxNmJkNmU1ZmU1NjU=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-03T06:38:02Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-23T17:16:20Z"}, "message": "Add query for const_param_default", "tree": {"sha": "a50b57acc0cf77d84e7df600381d19b5e28b1ff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a50b57acc0cf77d84e7df600381d19b5e28b1ff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "html_url": "https://github.com/rust-lang/rust/commit/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e56a086f72f9319f9c32f209bc07510dfedb70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e56a086f72f9319f9c32f209bc07510dfedb70c", "html_url": "https://github.com/rust-lang/rust/commit/0e56a086f72f9319f9c32f209bc07510dfedb70c"}], "stats": {"total": 135, "additions": 108, "deletions": 27}, "files": [{"sha": "7e82d7ff77d9617c115b610ecbe9807001444d89", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -385,7 +385,6 @@ pub enum GenericParamKind {\n         ty: P<Ty>,\n         /// Span of the `const` keyword.\n         kw_span: Span,\n-\n         /// Optional default value for the const generic param\n         default: Option<AnonConst>,\n     },"}, {"sha": "3d0a9d553b0281a4f579397daa5abf199ae0b9f6", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -953,6 +953,14 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))\n     }\n \n+    fn get_const_param_default(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        id: DefIndex,\n+    ) -> rustc_middle::ty::Const<'tcx> {\n+        self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))\n+    }\n+\n     /// Iterates over all the stability attributes in the given crate.\n     fn get_lib_features(&self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {\n         // FIXME: For a proc macro crate, not sure whether we should return the \"host\""}, {"sha": "7f8f5ef4427014d05335c5b47b575ecc3126542b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -122,6 +122,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n     mir_abstract_const => { cdata.get_mir_abstract_const(tcx, def_id.index) }\n     unused_generic_params => { cdata.get_unused_generic_params(def_id.index) }\n+    const_param_default => { tcx.arena.alloc(cdata.get_const_param_default(tcx, def_id.index)) }\n     mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }"}, {"sha": "fea7ea44c674a869f734719534f645a39c4028af", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -1877,15 +1877,12 @@ impl EncodeContext<'a, 'tcx> {\n                     );\n                 }\n                 GenericParamKind::Const { ref default, .. } => {\n-                    self.encode_info_for_generic_param(\n-                        def_id.to_def_id(),\n-                        EntryKind::ConstParam,\n-                        true,\n-                    );\n+                    let def_id = def_id.to_def_id();\n+                    self.encode_info_for_generic_param(def_id, EntryKind::ConstParam, true);\n                     if default.is_some() {\n-                        self.encode_stability(def_id.to_def_id());\n+                        self.encode_stability(def_id);\n+                        record!(self.tables.const_defaults[def_id] <- self.tcx.const_param_default(def_id))\n                     }\n-                    // FIXME(const_generic_defaults)\n                 }\n             }\n         }"}, {"sha": "94722ad2051bd88bcf411c6f3c7978740e3c0958", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -313,7 +313,8 @@ define_tables! {\n     // `DefPathTable` up front, since we may only ever use a few\n     // definitions from any given crate.\n     def_keys: Table<DefIndex, Lazy<DefKey>>,\n-    def_path_hashes: Table<DefIndex, Lazy<DefPathHash>>\n+    def_path_hashes: Table<DefIndex, Lazy<DefPathHash>>,\n+    const_defaults: Table<DefIndex, Lazy<rustc_middle::ty::Const<'tcx>>>,\n }\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]"}, {"sha": "1666c6065b7de1c9e060d55f61d54e2e1774f260", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -93,6 +93,12 @@ rustc_queries! {\n         desc { |tcx| \"computing the optional const parameter of `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n+    /// Given the def_id of a const-generic parameter, computes the associated default const\n+    /// parameter. i.e. `fn example<const N: usize=3>` called on N would return 3.\n+    query const_param_default(param: DefId) -> &'tcx ty::Const<'tcx> {\n+        desc { |tcx| \"compute const default for a given parameter `{}`\", tcx.def_path_str(param)  }\n+    }\n+\n     /// Records the type of every item.\n     query type_of(key: DefId) -> Ty<'tcx> {\n         desc { |tcx| \"computing type of `{}`\", tcx.def_path_str(key) }"}, {"sha": "6821efcdcc52b1d6c4e61201925b91954a0eb73f", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -5,7 +5,7 @@ use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::{ParamEnv, ParamEnvAnd};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n-use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_macros::HashStable;\n \n mod int;\n@@ -44,11 +44,7 @@ impl<'tcx> Const<'tcx> {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n \n         let body_id = match tcx.hir().get(hir_id) {\n-            hir::Node::AnonConst(ac)\n-            | hir::Node::GenericParam(hir::GenericParam {\n-                kind: hir::GenericParamKind::Const { ty: _, default: Some(ac) },\n-                ..\n-            }) => ac.body,\n+            hir::Node::AnonConst(ac) => ac.body,\n             _ => span_bug!(\n                 tcx.def_span(def.did.to_def_id()),\n                 \"from_anon_const can only process anonymous constants\"\n@@ -206,3 +202,19 @@ impl<'tcx> Const<'tcx> {\n             .unwrap_or_else(|| bug!(\"expected usize, got {:#?}\", self))\n     }\n }\n+\n+pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Const<'tcx> {\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    let default_def_id = match tcx.hir().get(hir_id) {\n+        hir::Node::AnonConst(ac)\n+        | hir::Node::GenericParam(hir::GenericParam {\n+            kind: hir::GenericParamKind::Const { ty: _, default: Some(ac) },\n+            ..\n+        }) => tcx.hir().local_def_id(ac.hir_id),\n+        _ => span_bug!(\n+            tcx.def_span(def_id),\n+            \"const_param_defaults expected a generic parameter with a constant\"\n+        ),\n+    };\n+    Const::from_anon_const(tcx, default_def_id)\n+}"}, {"sha": "78a9f2daeb3f789fb9838c7530640bdd8740a083", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -120,8 +120,8 @@ impl<'tcx> Generics {\n         for param in &self.params {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => (),\n-                GenericParamDefKind::Type { has_default, .. } |\n-                GenericParamDefKind::Const { has_default } => {\n+                GenericParamDefKind::Type { has_default, .. }\n+                | GenericParamDefKind::Const { has_default } => {\n                     own_defaults.types += has_default as usize;\n                 }\n             }\n@@ -146,7 +146,9 @@ impl<'tcx> Generics {\n     pub fn own_requires_monomorphization(&self) -> bool {\n         for param in &self.params {\n             match param.kind {\n-                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => return true,\n+                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n+                    return true;\n+                }\n                 GenericParamDefKind::Lifetime => {}\n             }\n         }"}, {"sha": "ed10a1566223ef282661e4e6802083850bdb7900", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -1949,6 +1949,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         all_local_trait_impls: trait_def::all_local_trait_impls,\n         type_uninhabited_from: inhabitedness::type_uninhabited_from,\n+        const_param_default: consts::const_param_default,\n         ..*providers\n     };\n }"}, {"sha": "a47846828bd6002d3c1ad11134feaa1bb6e56a4b", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -205,10 +205,7 @@ pub trait Printer<'tcx>: Sized {\n                 ty::GenericParamDefKind::Const { has_default } => {\n                     has_default\n                         && substs[param.index as usize]\n-                            == GenericArg::from(crate::ty::Const::from_anon_const(\n-                                self.tcx(),\n-                                param.def_id.expect_local(),\n-                            ))\n+                            == GenericArg::from(self.tcx().const_param_default(param.def_id))\n                 }\n             })\n             .count();"}, {"sha": "8076aa7102c6c82400b303b8f1b1c246e9aa4aba", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -505,10 +505,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         }\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n+                        let ty = tcx.at(self.span).type_of(param.def_id);\n                         if !infer_args && has_default {\n-                            ty::Const::from_anon_const(tcx, param.def_id.expect_local()).into()\n+                            tcx.const_param_default(param.def_id).into()\n                         } else {\n-                            let ty = tcx.at(self.span).type_of(param.def_id);\n                             if infer_args {\n                                 self.astconv.ct_infer(ty, Some(param), self.span).into()\n                             } else {"}, {"sha": "56ff9293dd87fba978a8c3e07d78d3860dee3749", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -1445,7 +1445,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     GenericParamDefKind::Const { has_default, .. } => {\n                         if !infer_args && has_default {\n-                            ty::Const::from_anon_const(tcx, param.def_id.expect_local()).into()\n+                            tcx.const_param_default(param.def_id).into()\n                         } else {\n                             self.fcx.var_for_def(self.span, param)\n                         }"}, {"sha": "8ac24a969f8cbb67eb56fa18cf2296717221b66e", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -774,7 +774,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n             }\n             GenericParamDefKind::Const { .. } => {\n                 if is_our_default(param) {\n-                    let default_ct = ty::Const::from_anon_const(tcx, param.def_id.expect_local());\n+                    let default_ct = tcx.const_param_default(param.def_id);\n                     // Const params have to currently be concrete.\n                     assert!(!default_ct.needs_subst());\n                     default_ct.into()"}, {"sha": "85c5128591a3205062f802e082866fc813671378", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -257,10 +257,11 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n                 hir::GenericParamKind::Const { default, .. } => {\n                     let def_id = self.tcx.hir().local_def_id(param.hir_id);\n                     self.tcx.ensure().type_of(def_id);\n-                    // FIXME(const_generics_defaults)\n                     if let Some(default) = default {\n                         let def_id = self.tcx.hir().local_def_id(default.hir_id);\n+                        // need to store default and type of default\n                         self.tcx.ensure().type_of(def_id);\n+                        self.tcx.ensure().const_param_default(def_id);\n                     }\n                 }\n             }"}, {"sha": "769b6e952dc9caa04fda579957c5b43b4a1d5a96", "filename": "src/test/ui/const-generics/defaults/auxiliary/const_defaulty.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_generics)]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+pub struct Defaulted<const N: usize=3>;\n+impl Defaulted {\n+    pub fn new() -> Self {\n+        Defaulted\n+    }\n+}\n+impl<const N: usize> Defaulted<N> {\n+    pub fn value(&self) -> usize {\n+        N\n+    }\n+}"}, {"sha": "b39e69ab10b668c93e539d609cc6d1831c4ded16", "filename": "src/test/ui/const-generics/defaults/external.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -0,0 +1,27 @@\n+// aux-build:const_defaulty.rs\n+// check-pass\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+extern crate const_defaulty;\n+use const_defaulty::Defaulted;\n+\n+struct Local<const N: usize=4>;\n+impl Local {\n+    fn new() -> Self {\n+        Local\n+    }\n+}\n+impl<const N: usize>Local<N> {\n+    fn value(&self) -> usize {\n+        N\n+    }\n+}\n+\n+fn main() {\n+    let v = Defaulted::new();\n+    assert_eq!(v.value(), 3);\n+\n+    let l = Local::new();\n+    assert_eq!(l.value(), 4);\n+}"}, {"sha": "2ce874c8bf4d38e9ce5ee3e6d43a9e522a6ae104", "filename": "src/test/ui/const-generics/min_const_generics/type_and_const_defaults.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs?ref=9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+#![crate_type = \"lib\"]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+struct Both<T=u32, const N: usize=3> {\n+  arr: [T; N]\n+}\n+\n+trait BothTrait<T=u32, const N: usize=3> {}\n+\n+enum BothEnum<T=u32, const N: usize=3> {\n+  Dummy([T; N])\n+}"}]}