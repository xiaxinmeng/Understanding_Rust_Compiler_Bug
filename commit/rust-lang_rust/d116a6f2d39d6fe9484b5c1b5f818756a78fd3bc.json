{"sha": "d116a6f2d39d6fe9484b5c1b5f818756a78fd3bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMTZhNmYyZDM5ZDZmZTk0ODRiNWMxYjVmODE4NzU2YTc4ZmQzYmM=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-11-30T11:30:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-02T19:38:24Z"}, "message": "ty: added type comparison that subs prim types with targ_cfg machine types", "tree": {"sha": "5655e693e284ece523a4d37a702bc1aaecaf9047", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5655e693e284ece523a4d37a702bc1aaecaf9047"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d116a6f2d39d6fe9484b5c1b5f818756a78fd3bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d116a6f2d39d6fe9484b5c1b5f818756a78fd3bc", "html_url": "https://github.com/rust-lang/rust/commit/d116a6f2d39d6fe9484b5c1b5f818756a78fd3bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d116a6f2d39d6fe9484b5c1b5f818756a78fd3bc/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "236bf7a9b8e426fe764a33b788677e2ddfd2e943", "url": "https://api.github.com/repos/rust-lang/rust/commits/236bf7a9b8e426fe764a33b788677e2ddfd2e943", "html_url": "https://github.com/rust-lang/rust/commit/236bf7a9b8e426fe764a33b788677e2ddfd2e943"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "338a60d0fc7bfab90ece75a1fa9145e952cc498c", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d116a6f2d39d6fe9484b5c1b5f818756a78fd3bc/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d116a6f2d39d6fe9484b5c1b5f818756a78fd3bc/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=d116a6f2d39d6fe9484b5c1b5f818756a78fd3bc", "patch": "@@ -102,6 +102,7 @@ export substitute_type_params;\n export t;\n export tag_variants;\n export tag_variant_with_id;\n+export triv_eq_ty;\n export ty_param_substs_opt_and_ty;\n export ty_param_kinds_and_ty;\n export ty_native_fn;\n@@ -128,6 +129,7 @@ export ty_param;\n export ty_ptr;\n export ty_rec;\n export ty_tag;\n+export ty_to_machine_ty;\n export ty_tup;\n export ty_type;\n export ty_uint;\n@@ -1486,6 +1488,41 @@ fn eq_raw_ty(&&a: @raw_t, &&b: @raw_t) -> bool {\n fn eq_ty(&&a: t, &&b: t) -> bool { ret a == b; }\n \n \n+// Convert type to machine type\n+// (i.e. replace uint, int, float with target architecture machine types)\n+//\n+// Somewhat expensive but casts that need this should be rare\n+fn ty_to_machine_ty(cx: ctxt, ty: t) -> t {\n+    fn sub_fn(cx: ctxt, uint_ty: t, int_ty: t, float_ty: t, in: t) -> t {\n+        alt struct(cx, in) {\n+          ty_uint. { ret uint_ty; }\n+          ty_int. { ret int_ty; }\n+          ty_float. { ret float_ty; }\n+          _ { ret in; }\n+        }\n+    }\n+\n+    let cfg      = cx.sess.get_targ_cfg();\n+    let uint_ty  = mk_mach(cx, cfg.uint_type);\n+    let int_ty   = mk_mach(cx, cfg.int_type);\n+    let float_ty = mk_mach(cx, cfg.float_type);\n+    let fold_m   = fm_general(bind sub_fn(cx, uint_ty, int_ty, float_ty, _));\n+\n+    ret fold_ty(cx, fold_m, ty);\n+}\n+\n+// Two types are trivially equal if they are either\n+// equal or if they are equal after substituting all occurences of\n+//  machine independent primitive types by their machine type equivalents\n+// for the current target architecture\n+//\n+// Somewhat expensive but casts that need this should be rare\n+fn triv_eq_ty(cx: ctxt, &&a: t, &&b: t) -> bool {\n+    let mach_a = ty_to_machine_ty(cx, a);\n+    let mach_b = ty_to_machine_ty(cx, b );\n+    ret eq_ty(a, b) || eq_ty(mach_a, mach_b);\n+}\n+\n // Type lookups\n fn node_id_to_ty_param_substs_opt_and_ty(cx: ctxt, id: ast::node_id) ->\n    ty_param_substs_opt_and_ty {"}]}