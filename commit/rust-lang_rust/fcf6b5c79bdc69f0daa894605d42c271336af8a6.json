{"sha": "fcf6b5c79bdc69f0daa894605d42c271336af8a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZjZiNWM3OWJkYzY5ZjBkYWE4OTQ2MDVkNDJjMjcxMzM2YWY4YTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-04T18:04:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T11:08:00Z"}, "message": "add fixme for potential perf optimization", "tree": {"sha": "b24edebbee6be7af7675ee61427e17cccec6efbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b24edebbee6be7af7675ee61427e17cccec6efbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf6b5c79bdc69f0daa894605d42c271336af8a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf6b5c79bdc69f0daa894605d42c271336af8a6", "html_url": "https://github.com/rust-lang/rust/commit/fcf6b5c79bdc69f0daa894605d42c271336af8a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf6b5c79bdc69f0daa894605d42c271336af8a6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e09e3c898cbc371e8c3f9e6f1be5417b30daa24a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a", "html_url": "https://github.com/rust-lang/rust/commit/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "9e833598ef1175b4d5060e3fdf58b3256fa62ac2", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcf6b5c79bdc69f0daa894605d42c271336af8a6/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf6b5c79bdc69f0daa894605d42c271336af8a6/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=fcf6b5c79bdc69f0daa894605d42c271336af8a6", "patch": "@@ -419,6 +419,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         // Things can be aggregates and have scalar layout at the same time, and that\n         // is very relevant for `NonNull` and similar structs: We need to validate them\n         // at their scalar layout *before* descending into their fields.\n+        // FIXME: We could avoid some redundant checks here. For newtypes wrapping\n+        // scalars, we do the same check on every \"level\" (e.g. first we check\n+        // MyNewtype and then the scalar in there).\n         match dest.layout.abi {\n             layout::Abi::Uninhabited =>\n                 return validation_failure!(\"a value of an uninhabited type\", path),"}]}