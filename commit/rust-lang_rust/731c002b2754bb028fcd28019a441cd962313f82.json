{"sha": "731c002b2754bb028fcd28019a441cd962313f82", "node_id": "C_kwDOAAsO6NoAKDczMWMwMDJiMjc1NGJiMDI4ZmNkMjgwMTlhNDQxY2Q5NjIzMTNmODI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-26T13:54:45Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-29T18:43:00Z"}, "message": "Only allow feeding a value to newly created definitions.", "tree": {"sha": "56b587c9d24cbaefe6b01be21882559ccddf46cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b587c9d24cbaefe6b01be21882559ccddf46cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/731c002b2754bb028fcd28019a441cd962313f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/731c002b2754bb028fcd28019a441cd962313f82", "html_url": "https://github.com/rust-lang/rust/commit/731c002b2754bb028fcd28019a441cd962313f82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/731c002b2754bb028fcd28019a441cd962313f82/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b", "html_url": "https://github.com/rust-lang/rust/commit/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b"}], "stats": {"total": 80, "additions": 47, "deletions": 33}, "files": [{"sha": "266d653b46dd346be6e5b45c3f071608a5e10643", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=731c002b2754bb028fcd28019a441cd962313f82", "patch": "@@ -497,7 +497,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             self.tcx.hir().def_key(self.local_def_id(node_id)),\n         );\n \n-        let def_id = self.tcx.create_def(parent, data);\n+        let def_id = self.tcx.create_def(parent, data).def_id;\n \n         debug!(\"create_def: def_id_to_node_id[{:?}] <-> {:?}\", def_id, node_id);\n         self.resolver.node_id_to_def_id.insert(node_id, def_id);"}, {"sha": "dd37efb6983b429e5db6869e707662775ec444c3", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=731c002b2754bb028fcd28019a441cd962313f82", "patch": "@@ -368,10 +368,6 @@ impl Definitions {\n         LocalDefId { local_def_index: self.table.allocate(key, def_path_hash) }\n     }\n \n-    pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n-        self.table.def_path_hashes.indices().map(|local_def_index| LocalDefId { local_def_index })\n-    }\n-\n     #[inline(always)]\n     pub fn local_def_path_hash_to_def_id(\n         &self,\n@@ -389,6 +385,10 @@ impl Definitions {\n     pub fn def_path_hash_to_def_index_map(&self) -> &DefPathHashMap {\n         &self.table.def_path_hash_to_index\n     }\n+\n+    pub fn num_definitions(&self) -> usize {\n+        self.table.def_path_hashes.len()\n+    }\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]"}, {"sha": "7e4063c2ffd78fb0f0f2280dbcfade275fce56ad", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=731c002b2754bb028fcd28019a441cd962313f82", "patch": "@@ -30,8 +30,10 @@\n #![feature(core_intrinsics)]\n #![feature(discriminant_kind)]\n #![feature(exhaustive_patterns)]\n+#![feature(generators)]\n #![feature(get_mut_unchecked)]\n #![feature(if_let_guard)]\n+#![feature(iter_from_generator)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(extern_types)]"}, {"sha": "38b72ec923193a4e0420d9e49df39bae51a2a29b", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=731c002b2754bb028fcd28019a441cd962313f82", "patch": "@@ -165,7 +165,6 @@ rustc_queries! {\n         }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n-        feedable\n     }\n \n     query collect_trait_impl_trait_tys(key: DefId)"}, {"sha": "60e600f22a2c655c1271c7d53ae885d1611c2374", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=731c002b2754bb028fcd28019a441cd962313f82", "patch": "@@ -53,6 +53,7 @@ use rustc_hir::{\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_middle::mir::FakeReadCause;\n+use rustc_query_system::dep_graph::DepNodeIndex;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{CrateType, OutputFilenames};\n@@ -1009,6 +1010,14 @@ pub struct FreeRegionInfo {\n     pub is_impl_item: bool,\n }\n \n+#[derive(Copy, Clone)]\n+pub struct TyCtxtFeed<'tcx> {\n+    pub tcx: TyCtxt<'tcx>,\n+    pub def_id: LocalDefId,\n+    /// This struct should only be created by `create_def`.\n+    _priv: (),\n+}\n+\n /// The central data structure of the compiler. It stores references\n /// to the various **arenas** and also houses the results of the\n /// various **compiler queries** that have been performed. See the\n@@ -1471,12 +1480,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Create a new definition within the incr. comp. engine.\n-    pub fn create_def(self, parent: LocalDefId, data: hir::definitions::DefPathData) -> LocalDefId {\n+    pub fn create_def(\n+        self,\n+        parent: LocalDefId,\n+        data: hir::definitions::DefPathData,\n+    ) -> TyCtxtFeed<'tcx> {\n         // This function modifies `self.definitions` using a side-effect.\n         // We need to ensure that these side effects are re-run by the incr. comp. engine.\n         // Depending on the forever-red node will tell the graph that the calling query\n         // needs to be re-evaluated.\n-        use rustc_query_system::dep_graph::DepNodeIndex;\n         self.dep_graph.read_index(DepNodeIndex::FOREVER_RED_NODE);\n \n         // The following call has the side effect of modifying the tables inside `definitions`.\n@@ -1493,23 +1505,38 @@ impl<'tcx> TyCtxt<'tcx> {\n         // This is fine because:\n         // - those queries are `eval_always` so we won't miss their result changing;\n         // - this write will have happened before these queries are called.\n-        self.definitions.write().create_def(parent, data)\n+        let def_id = self.definitions.write().create_def(parent, data);\n+\n+        TyCtxtFeed { tcx: self, def_id, _priv: () }\n     }\n \n     pub fn iter_local_def_id(self) -> impl Iterator<Item = LocalDefId> + 'tcx {\n-        // Create a dependency to the crate to be sure we re-execute this when the amount of\n+        // Create a dependency to the red node to be sure we re-execute this when the amount of\n         // definitions change.\n-        self.ensure().hir_crate(());\n-        // Leak a read lock once we start iterating on definitions, to prevent adding new ones\n-        // while iterating.  If some query needs to add definitions, it should be `ensure`d above.\n-        let definitions = self.definitions.leak();\n-        definitions.iter_local_def_id()\n+        self.dep_graph.read_index(DepNodeIndex::FOREVER_RED_NODE);\n+\n+        let definitions = &self.definitions;\n+        std::iter::from_generator(|| {\n+            let mut i = 0;\n+\n+            // Recompute the number of definitions each time, because our caller may be creating\n+            // new ones.\n+            while i < { definitions.read().num_definitions() } {\n+                let local_def_index = rustc_span::def_id::DefIndex::from_usize(i);\n+                yield LocalDefId { local_def_index };\n+                i += 1;\n+            }\n+\n+            // Leak a read lock once we finish iterating on definitions, to prevent adding new ones.\n+            definitions.leak();\n+        })\n     }\n \n     pub fn def_path_table(self) -> &'tcx rustc_hir::definitions::DefPathTable {\n         // Create a dependency to the crate to be sure we re-execute this when the amount of\n         // definitions change.\n-        self.ensure().hir_crate(());\n+        self.dep_graph.read_index(DepNodeIndex::FOREVER_RED_NODE);\n+\n         // Leak a read lock once we start iterating on definitions, to prevent adding new ones\n         // while iterating.  If some query needs to add definitions, it should be `ensure`d above.\n         let definitions = self.definitions.leak();"}, {"sha": "ba85d5c849823bcb33a4ba804bebc36fba6cff37", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731c002b2754bb028fcd28019a441cd962313f82/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=731c002b2754bb028fcd28019a441cd962313f82", "patch": "@@ -28,6 +28,7 @@ use crate::traits::query::{\n };\n use crate::traits::specialization_graph;\n use crate::traits::{self, ImplSource};\n+use crate::ty::context::TyCtxtFeed;\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::layout::TyAndLayout;\n use crate::ty::subst::{GenericArg, SubstsRef};\n@@ -85,11 +86,6 @@ pub struct TyCtxtEnsure<'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n }\n \n-#[derive(Copy, Clone)]\n-pub struct TyCtxtFeed<'tcx> {\n-    pub tcx: TyCtxt<'tcx>,\n-}\n-\n impl<'tcx> TyCtxt<'tcx> {\n     /// Returns a transparent wrapper for `TyCtxt`, which ensures queries\n     /// are executed instead of just returning their results.\n@@ -98,12 +94,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         TyCtxtEnsure { tcx: self }\n     }\n \n-    /// Returns a transparent wrapper for `TyCtxt`, for setting a result into a query.\n-    #[inline(always)]\n-    pub fn feed(self) -> TyCtxtFeed<'tcx> {\n-        TyCtxtFeed { tcx: self }\n-    }\n-\n     /// Returns a transparent wrapper for `TyCtxt` which uses\n     /// `span` as the location of queries performed through it.\n     #[inline(always)]\n@@ -355,12 +345,8 @@ macro_rules! define_feedable {\n         impl<'tcx> TyCtxtFeed<'tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n-            pub fn $name(\n-                self,\n-                key: query_helper_param_ty!($($K)*),\n-                value: $V,\n-            ) -> query_stored::$name<'tcx> {\n-                let key = key.into_query_param();\n+            pub fn $name(self, value: $V) -> query_stored::$name<'tcx> {\n+                let key = self.def_id.into_query_param();\n                 opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 let tcx = self.tcx;"}]}