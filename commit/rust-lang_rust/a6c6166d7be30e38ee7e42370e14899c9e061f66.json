{"sha": "a6c6166d7be30e38ee7e42370e14899c9e061f66", "node_id": "C_kwDOAAsO6NoAKGE2YzYxNjZkN2JlMzBlMzhlZTdlNDIzNzBlMTQ4OTljOWUwNjFmNjY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-09T05:58:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-09T05:58:05Z"}, "message": "Rollup merge of #98980 - RalfJung:const-prop-ice, r=oli-obk\n\nfix ICE in ConstProp\n\nFixes https://github.com/rust-lang/rust/issues/96169", "tree": {"sha": "abce1076f9c3589d010e0f080d31dd50f161c00c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abce1076f9c3589d010e0f080d31dd50f161c00c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c6166d7be30e38ee7e42370e14899c9e061f66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiyRjtCRBK7hj4Ov3rIwAATfEIAE8Yd/jNNtVdwsACdKwCRFc1\nslDEtkNO4/5TLUC9sWFkLKp+3hh6ov6VQWg4ookbdhrJkkdlCaZDwODBGnxKXYEp\n759HLJNILRt1RyTsTw+h19GSxG+0bY+6Pkrdq2EfoMA8eE5wPF9NufHggu/FZ6EJ\nGDqiIfLYmk9AYkTJfgakoyHXZu2rvSCMTASEZAOvwG0U6ipvOBM7AulheSqqrec5\nUo0Z4Xp0cXBRCUT1bn/yfU4Xt2AXhtH+xcNn+YlREqv2D0sdUKeAO/8lv+Kr5Lp2\nniUtxeqrTnAqd5n9rkArbwEHjhxav41uNcGQzGxUNbFx6yOsnzzSitQTEUmVpdA=\n=Ldb4\n-----END PGP SIGNATURE-----\n", "payload": "tree abce1076f9c3589d010e0f080d31dd50f161c00c\nparent 5e6812b5977bfd8c7f1643b29392e554ce46e58d\nparent cf9186ec69ecdc138ab692c36b0c2509a72d0b4f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657346285 +0530\ncommitter GitHub <noreply@github.com> 1657346285 +0530\n\nRollup merge of #98980 - RalfJung:const-prop-ice, r=oli-obk\n\nfix ICE in ConstProp\n\nFixes https://github.com/rust-lang/rust/issues/96169\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c6166d7be30e38ee7e42370e14899c9e061f66", "html_url": "https://github.com/rust-lang/rust/commit/a6c6166d7be30e38ee7e42370e14899c9e061f66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c6166d7be30e38ee7e42370e14899c9e061f66/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e6812b5977bfd8c7f1643b29392e554ce46e58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6812b5977bfd8c7f1643b29392e554ce46e58d", "html_url": "https://github.com/rust-lang/rust/commit/5e6812b5977bfd8c7f1643b29392e554ce46e58d"}, {"sha": "cf9186ec69ecdc138ab692c36b0c2509a72d0b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9186ec69ecdc138ab692c36b0c2509a72d0b4f", "html_url": "https://github.com/rust-lang/rust/commit/cf9186ec69ecdc138ab692c36b0c2509a72d0b4f"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "29ab1d187719ceb60a72cdbe2f2bda607ed9899b", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6c6166d7be30e38ee7e42370e14899c9e061f66/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c6166d7be30e38ee7e42370e14899c9e061f66/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=a6c6166d7be30e38ee7e42370e14899c9e061f66", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::AssertMessage;\n use rustc_session::Limit;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_target::abi::{Align, Size};\n-use rustc_target::spec::abi::Abi;\n+use rustc_target::spec::abi::Abi as CallAbi;\n \n use crate::interpret::{\n     self, compile_time_machine, AllocId, ConstAllocation, Frame, ImmTy, InterpCx, InterpResult,\n@@ -263,7 +263,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n-        _abi: Abi,\n+        _abi: CallAbi,\n         args: &[OpTy<'tcx>],\n         _dest: &PlaceTy<'tcx>,\n         _ret: Option<mir::BasicBlock>,"}, {"sha": "7f8eea94aeeda5db7ffd06d95f4ec5a9871e3d5d", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6c6166d7be30e38ee7e42370e14899c9e061f66/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c6166d7be30e38ee7e42370e14899c9e061f66/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=a6c6166d7be30e38ee7e42370e14899c9e061f66", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_target::abi::Size;\n-use rustc_target::spec::abi::Abi;\n+use rustc_target::spec::abi::Abi as CallAbi;\n \n use super::{\n     AllocId, AllocRange, Allocation, ConstAllocation, Frame, ImmTy, InterpCx, InterpResult,\n@@ -138,7 +138,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Whether to enforce integers and floats not having provenance.\n     fn enforce_number_no_provenance(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n-    /// Whether function calls should be [ABI](Abi)-checked.\n+    /// Whether function calls should be [ABI](CallAbi)-checked.\n     fn enforce_abi(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         true\n     }\n@@ -169,7 +169,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n-        abi: Abi,\n+        abi: CallAbi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         destination: &PlaceTy<'tcx, Self::PointerTag>,\n         target: Option<mir::BasicBlock>,\n@@ -181,7 +181,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn call_extra_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         fn_val: Self::ExtraFnVal,\n-        abi: Abi,\n+        abi: CallAbi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         destination: &PlaceTy<'tcx, Self::PointerTag>,\n         target: Option<mir::BasicBlock>,\n@@ -483,7 +483,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     fn call_extra_fn(\n         _ecx: &mut InterpCx<$mir, $tcx, Self>,\n         fn_val: !,\n-        _abi: Abi,\n+        _abi: CallAbi,\n         _args: &[OpTy<$tcx>],\n         _destination: &PlaceTy<$tcx, Self::PointerTag>,\n         _target: Option<mir::BasicBlock>,"}, {"sha": "576958a855d24ed78da3bd42b15ff9becfeb11c6", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6c6166d7be30e38ee7e42370e14899c9e061f66/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c6166d7be30e38ee7e42370e14899c9e061f66/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=a6c6166d7be30e38ee7e42370e14899c9e061f66", "patch": "@@ -78,6 +78,7 @@ impl<'tcx, Tag: Provenance> Immediate<Tag> {\n     }\n \n     #[inline]\n+    #[cfg_attr(debug_assertions, track_caller)] // only in debug builds due to perf (see #98980)\n     pub fn to_scalar_or_uninit(self) -> ScalarMaybeUninit<Tag> {\n         match self {\n             Immediate::Scalar(val) => val,\n@@ -87,11 +88,13 @@ impl<'tcx, Tag: Provenance> Immediate<Tag> {\n     }\n \n     #[inline]\n+    #[cfg_attr(debug_assertions, track_caller)] // only in debug builds due to perf (see #98980)\n     pub fn to_scalar(self) -> InterpResult<'tcx, Scalar<Tag>> {\n         self.to_scalar_or_uninit().check_init()\n     }\n \n     #[inline]\n+    #[cfg_attr(debug_assertions, track_caller)] // only in debug builds due to perf (see #98980)\n     pub fn to_scalar_or_uninit_pair(self) -> (ScalarMaybeUninit<Tag>, ScalarMaybeUninit<Tag>) {\n         match self {\n             Immediate::ScalarPair(val1, val2) => (val1, val2),\n@@ -101,6 +104,7 @@ impl<'tcx, Tag: Provenance> Immediate<Tag> {\n     }\n \n     #[inline]\n+    #[cfg_attr(debug_assertions, track_caller)] // only in debug builds due to perf (see #98980)\n     pub fn to_scalar_pair(self) -> InterpResult<'tcx, (Scalar<Tag>, Scalar<Tag>)> {\n         let (val1, val2) = self.to_scalar_or_uninit_pair();\n         Ok((val1.check_init()?, val2.check_init()?))"}, {"sha": "fb5423dd157c2fbd97fb7333cbd113ac7a9c4a54", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a6c6166d7be30e38ee7e42370e14899c9e061f66/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c6166d7be30e38ee7e42370e14899c9e061f66/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=a6c6166d7be30e38ee7e42370e14899c9e061f66", "patch": "@@ -22,8 +22,8 @@ use rustc_middle::ty::{\n     self, ConstKind, EarlyBinder, Instance, ParamEnv, Ty, TyCtxt, TypeVisitable,\n };\n use rustc_span::{def_id::DefId, Span};\n-use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};\n-use rustc_target::spec::abi::Abi;\n+use rustc_target::abi::{self, HasDataLayout, Size, TargetDataLayout};\n+use rustc_target::spec::abi::Abi as CallAbi;\n use rustc_trait_selection::traits;\n \n use crate::MirPass;\n@@ -195,7 +195,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::Instance<'tcx>,\n-        _abi: Abi,\n+        _abi: CallAbi,\n         _args: &[OpTy<'tcx>],\n         _destination: &PlaceTy<'tcx>,\n         _target: Option<BasicBlock>,\n@@ -659,6 +659,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     (Ok(_), Ok(_)) => return this.ecx.eval_rvalue_into_place(rvalue, place),\n                 };\n \n+                if !matches!(const_arg.layout.abi, abi::Abi::Scalar(..)) {\n+                    // We cannot handle Scalar Pair stuff.\n+                    return this.ecx.eval_rvalue_into_place(rvalue, place);\n+                }\n+\n                 let arg_value = const_arg.to_scalar()?.to_bits(const_arg.layout.size)?;\n                 let dest = this.ecx.eval_place(place)?;\n "}, {"sha": "09a5cb8280f353a4aa1d18996aee87df6a5fd4ef", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6c6166d7be30e38ee7e42370e14899c9e061f66/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c6166d7be30e38ee7e42370e14899c9e061f66/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=a6c6166d7be30e38ee7e42370e14899c9e061f66", "patch": "@@ -24,7 +24,7 @@ use rustc_middle::ty::{\n use rustc_session::lint;\n use rustc_span::{def_id::DefId, Span};\n use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};\n-use rustc_target::spec::abi::Abi;\n+use rustc_target::spec::abi::Abi as CallAbi;\n use rustc_trait_selection::traits;\n \n use crate::MirLint;\n@@ -191,7 +191,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::Instance<'tcx>,\n-        _abi: Abi,\n+        _abi: CallAbi,\n         _args: &[OpTy<'tcx>],\n         _destination: &PlaceTy<'tcx>,\n         _target: Option<BasicBlock>,"}, {"sha": "14c0a1399a00ebd4b17f3d0bdbbbeac26515f076", "filename": "src/test/ui/consts/issue-96169.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a6c6166d7be30e38ee7e42370e14899c9e061f66/src%2Ftest%2Fui%2Fconsts%2Fissue-96169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c6166d7be30e38ee7e42370e14899c9e061f66/src%2Ftest%2Fui%2Fconsts%2Fissue-96169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-96169.rs?ref=a6c6166d7be30e38ee7e42370e14899c9e061f66", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+// compile-flags: -Zmir-opt-level=4 --emit=mir\n+#![allow(unused)]\n+fn a() -> usize { 0 }\n+\n+fn bar(_: u32) {}\n+\n+fn baz() -> *const dyn Fn(u32) { unimplemented!() }\n+\n+fn foo() {\n+    match () {\n+        _ if baz() == &bar as &dyn Fn(u32) => (),\n+        () => (),\n+    }\n+}\n+\n+fn main() {\n+}"}]}