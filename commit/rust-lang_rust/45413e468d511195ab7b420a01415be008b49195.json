{"sha": "45413e468d511195ab7b420a01415be008b49195", "node_id": "C_kwDOAAsO6NoAKDQ1NDEzZTQ2OGQ1MTExOTVhYjdiNDIwYTAxNDE1YmUwMDhiNDkxOTU", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2023-05-07T12:16:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-07T12:16:05Z"}, "message": "Merge pull request #346 from Sp00ph/update_safety\n\nFix inaccurate safety comments", "tree": {"sha": "c3636551e097da598a4805450a0fff776449b79a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3636551e097da598a4805450a0fff776449b79a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45413e468d511195ab7b420a01415be008b49195", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkV5aFCRBK7hj4Ov3rIwAAsSoIAKzx5DpIMFJa4/hVgzPA+a29\nkTc9fZpz1lGNeRiG2hVGyCDgCkqrhw5qlYxo8w9oEA+pckTyejcuMpv5onE/MRAU\ntsL4YifxPJ7iQzCFBA9/cX8wjtOS1vJvqm53JPVUd/jBpYqlxlLtpQqdbzAmABhq\ndt3k2vZaIJHZfwQaz/V7GpF0xsHfeeeWVorre4wylycPNIWjZhX7lfDsQK5OUwE0\nLVnT0ITE4uMUS5hRaZR4e1CLBfqFt4cKR0JIxaiFL/PjVPvo4Y6RjDApEGoNrl4C\nRT4Xk2sZEpqMgZDQkfkW4m9w5BJEps9LKkyL1uPaTKWL4Ob6XHo7vd16xgJqkzo=\n=UwQD\n-----END PGP SIGNATURE-----\n", "payload": "tree c3636551e097da598a4805450a0fff776449b79a\nparent 195d4cad50c5b8a544de608295e7fdc369f99d9a\nparent b246e454387ef2d80078db36975d2df5d957f9fa\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1683461765 -0400\ncommitter GitHub <noreply@github.com> 1683461765 -0400\n\nMerge pull request #346 from Sp00ph/update_safety\n\nFix inaccurate safety comments"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45413e468d511195ab7b420a01415be008b49195", "html_url": "https://github.com/rust-lang/rust/commit/45413e468d511195ab7b420a01415be008b49195", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45413e468d511195ab7b420a01415be008b49195/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "195d4cad50c5b8a544de608295e7fdc369f99d9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/195d4cad50c5b8a544de608295e7fdc369f99d9a", "html_url": "https://github.com/rust-lang/rust/commit/195d4cad50c5b8a544de608295e7fdc369f99d9a"}, {"sha": "b246e454387ef2d80078db36975d2df5d957f9fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b246e454387ef2d80078db36975d2df5d957f9fa", "html_url": "https://github.com/rust-lang/rust/commit/b246e454387ef2d80078db36975d2df5d957f9fa"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "ff761fc900fabd709fd5adf24c3792af6ad9693e", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45413e468d511195ab7b420a01415be008b49195/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45413e468d511195ab7b420a01415be008b49195/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=45413e468d511195ab7b420a01415be008b49195", "patch": "@@ -156,9 +156,9 @@ where\n     /// assert_eq!(v.as_array(), &[0, 1, 2, 3]);\n     /// ```\n     pub const fn as_array(&self) -> &[T; N] {\n-        // SAFETY: Transmuting between `Simd<T, N>` and `[T; N]`\n-        // is always valid and `Simd<T, N>` never has a lower alignment\n-        // than `[T; N]`.\n+        // SAFETY: `Simd<T, N>` is just an overaligned `[T; N]` with\n+        // potential padding at the end, so pointer casting to a\n+        // `&[T; N]` is safe.\n         //\n         // NOTE: This deliberately doesn't just use `&self.0`, see the comment\n         // on the struct definition for details.\n@@ -167,9 +167,9 @@ where\n \n     /// Returns a mutable array reference containing the entire SIMD vector.\n     pub fn as_mut_array(&mut self) -> &mut [T; N] {\n-        // SAFETY: Transmuting between `Simd<T, N>` and `[T; N]`\n-        // is always valid and `Simd<T, N>` never has a lower alignment\n-        // than `[T; N]`.\n+        // SAFETY: `Simd<T, N>` is just an overaligned `[T; N]` with\n+        // potential padding at the end, so pointer casting to a\n+        // `&mut [T; N]` is safe.\n         //\n         // NOTE: This deliberately doesn't just use `&mut self.0`, see the comment\n         // on the struct definition for details."}]}