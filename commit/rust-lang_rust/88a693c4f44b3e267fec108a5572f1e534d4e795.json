{"sha": "88a693c4f44b3e267fec108a5572f1e534d4e795", "node_id": "C_kwDOAAsO6NoAKDg4YTY5M2M0ZjQ0YjNlMjY3ZmVjMTA4YTU1NzJmMWU1MzRkNGU3OTU", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-12-20T12:38:07Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-05T10:39:03Z"}, "message": "Rename LocalKey's with_{ref,mut} to with_borrow{,_mut}.", "tree": {"sha": "cb83fb81b7f6534dc5ac54f7add7e643fc49fa57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb83fb81b7f6534dc5ac54f7add7e643fc49fa57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88a693c4f44b3e267fec108a5572f1e534d4e795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88a693c4f44b3e267fec108a5572f1e534d4e795", "html_url": "https://github.com/rust-lang/rust/commit/88a693c4f44b3e267fec108a5572f1e534d4e795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88a693c4f44b3e267fec108a5572f1e534d4e795/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52ce11996bb437f46ebe046940ab53d1e5781d4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/52ce11996bb437f46ebe046940ab53d1e5781d4b", "html_url": "https://github.com/rust-lang/rust/commit/52ce11996bb437f46ebe046940ab53d1e5781d4b"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "b73c9270929e96a907cecc0acce24546b526408f", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88a693c4f44b3e267fec108a5572f1e534d4e795/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a693c4f44b3e267fec108a5572f1e534d4e795/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=88a693c4f44b3e267fec108a5572f1e534d4e795", "patch": "@@ -604,10 +604,10 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     ///     static X: RefCell<Vec<i32>> = RefCell::new(Vec::new());\n     /// }\n     ///\n-    /// X.with_ref(|v| assert!(v.is_empty()));\n+    /// X.with_borrow(|v| assert!(v.is_empty()));\n     /// ```\n     #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n-    pub fn with_ref<F, R>(&'static self, f: F) -> R\n+    pub fn with_borrow<F, R>(&'static self, f: F) -> R\n     where\n         F: FnOnce(&T) -> R,\n     {\n@@ -636,12 +636,12 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     ///     static X: RefCell<Vec<i32>> = RefCell::new(Vec::new());\n     /// }\n     ///\n-    /// X.with_mut(|v| v.push(1));\n+    /// X.with_borrow_mut(|v| v.push(1));\n     ///\n-    /// X.with_ref(|v| assert_eq!(*v, vec![1]));\n+    /// X.with_borrow(|v| assert_eq!(*v, vec![1]));\n     /// ```\n     #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n-    pub fn with_mut<F, R>(&'static self, f: F) -> R\n+    pub fn with_borrow_mut<F, R>(&'static self, f: F) -> R\n     where\n         F: FnOnce(&mut T) -> R,\n     {\n@@ -673,7 +673,7 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     ///\n     /// X.set(vec![1, 2, 3]); // But X.set() is fine, as it skips the initializer above.\n     ///\n-    /// X.with_ref(|v| assert_eq!(*v, vec![1, 2, 3]));\n+    /// X.with_borrow(|v| assert_eq!(*v, vec![1, 2, 3]));\n     /// ```\n     #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n     pub fn set(&'static self, value: T) {\n@@ -706,13 +706,13 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     ///     static X: RefCell<Vec<i32>> = RefCell::new(Vec::new());\n     /// }\n     ///\n-    /// X.with_mut(|v| v.push(1));\n+    /// X.with_borrow_mut(|v| v.push(1));\n     ///\n     /// let a = X.take();\n     ///\n     /// assert_eq!(a, vec![1]);\n     ///\n-    /// X.with_ref(|v| assert!(v.is_empty()));\n+    /// X.with_borrow(|v| assert!(v.is_empty()));\n     /// ```\n     #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n     pub fn take(&'static self) -> T\n@@ -744,7 +744,7 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     /// let prev = X.replace(vec![1, 2, 3]);\n     /// assert!(prev.is_empty());\n     ///\n-    /// X.with_ref(|v| assert_eq!(*v, vec![1, 2, 3]));\n+    /// X.with_borrow(|v| assert_eq!(*v, vec![1, 2, 3]));\n     /// ```\n     #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n     pub fn replace(&'static self, value: T) -> T {"}]}