{"sha": "da623844a9b3f9164723bf7ef2c4744b539af13f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNjIzODQ0YTliM2Y5MTY0NzIzYmY3ZWYyYzQ3NDRiNTM5YWYxM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-25T23:40:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-25T23:40:10Z"}, "message": "Auto merge of #24718 - tamird:fix-quote-tests, r=alexcrichton\n\nSniped from @rprichard's work in #24537. r? @alexcrichton", "tree": {"sha": "5b5e46fff60c0f27dd2b3ee4d4060a6a441d560e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b5e46fff60c0f27dd2b3ee4d4060a6a441d560e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da623844a9b3f9164723bf7ef2c4744b539af13f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da623844a9b3f9164723bf7ef2c4744b539af13f", "html_url": "https://github.com/rust-lang/rust/commit/da623844a9b3f9164723bf7ef2c4744b539af13f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da623844a9b3f9164723bf7ef2c4744b539af13f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00c48d3779fb4c372d2dfe7a8654c6cd1e065511", "url": "https://api.github.com/repos/rust-lang/rust/commits/00c48d3779fb4c372d2dfe7a8654c6cd1e065511", "html_url": "https://github.com/rust-lang/rust/commit/00c48d3779fb4c372d2dfe7a8654c6cd1e065511"}, {"sha": "beb373b317dcf25a5d9e3eab121b9fbda25a88d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/beb373b317dcf25a5d9e3eab121b9fbda25a88d5", "html_url": "https://github.com/rust-lang/rust/commit/beb373b317dcf25a5d9e3eab121b9fbda25a88d5"}], "stats": {"total": 364, "additions": 158, "deletions": 206}, "files": [{"sha": "cc42bd9b08b80f85120358bb68c044bc819e9e3a", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/da623844a9b3f9164723bf7ef2c4744b539af13f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da623844a9b3f9164723bf7ef2c4744b539af13f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=da623844a9b3f9164723bf7ef2c4744b539af13f", "patch": "@@ -1835,29 +1835,31 @@ fn decode_item_ast(par_doc: rbml::Doc) -> ast::Item {\n }\n \n #[cfg(test)]\n-trait fake_ext_ctxt {\n+trait FakeExtCtxt {\n+    fn call_site(&self) -> codemap::Span;\n     fn cfg(&self) -> ast::CrateConfig;\n-    fn parse_sess<'a>(&'a self) -> &'a parse::ParseSess;\n-    fn call_site(&self) -> Span;\n     fn ident_of(&self, st: &str) -> ast::Ident;\n+    fn name_of(&self, st: &str) -> ast::Name;\n+    fn parse_sess(&self) -> &parse::ParseSess;\n }\n \n #[cfg(test)]\n-impl fake_ext_ctxt for parse::ParseSess {\n-    fn cfg(&self) -> ast::CrateConfig {\n-        Vec::new()\n-    }\n-    fn parse_sess<'a>(&'a self) -> &'a parse::ParseSess { self }\n-    fn call_site(&self) -> Span {\n+impl FakeExtCtxt for parse::ParseSess {\n+    fn call_site(&self) -> codemap::Span {\n         codemap::Span {\n             lo: codemap::BytePos(0),\n             hi: codemap::BytePos(0),\n-            expn_id: codemap::NO_EXPANSION\n+            expn_id: codemap::NO_EXPANSION,\n         }\n     }\n+    fn cfg(&self) -> ast::CrateConfig { Vec::new() }\n     fn ident_of(&self, st: &str) -> ast::Ident {\n-        token::str_to_ident(st)\n+        parse::token::str_to_ident(st)\n+    }\n+    fn name_of(&self, st: &str) -> ast::Name {\n+        parse::token::intern(st)\n     }\n+    fn parse_sess(&self) -> &parse::ParseSess { self }\n }\n \n #[cfg(test)]\n@@ -1883,15 +1885,14 @@ fn test_basic() {\n         fn foo() {}\n     ));\n }\n-/* NOTE: When there's a snapshot, update this (yay quasiquoter!)\n+\n #[test]\n fn test_smalltalk() {\n     let cx = mk_ctxt();\n     roundtrip(quote_item!(&cx,\n         fn foo() -> isize { 3 + 4 } // first smalltalk program ever executed.\n     ));\n }\n-*/\n \n #[test]\n fn test_more() {"}, {"sha": "8b410dc257249812ecaf25235edd885fbe615393", "filename": "src/test/compile-fail-fulldeps/qquote.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/da623844a9b3f9164723bf7ef2c4744b539af13f/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da623844a9b3f9164723bf7ef2c4744b539af13f/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs?ref=da623844a9b3f9164723bf7ef2c4744b539af13f", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-cross-compile\n+\n+#![feature(quote, rustc_private)]\n+\n+extern crate syntax;\n+\n+use syntax::ast;\n+use syntax::codemap;\n+use syntax::parse;\n+use syntax::print::pprust;\n+\n+trait FakeExtCtxt {\n+    fn call_site(&self) -> codemap::Span;\n+    fn cfg(&self) -> ast::CrateConfig;\n+    fn ident_of(&self, st: &str) -> ast::Ident;\n+    fn name_of(&self, st: &str) -> ast::Name;\n+    fn parse_sess(&self) -> &parse::ParseSess;\n+}\n+\n+impl FakeExtCtxt for parse::ParseSess {\n+    fn call_site(&self) -> codemap::Span {\n+        codemap::Span {\n+            lo: codemap::BytePos(0),\n+            hi: codemap::BytePos(0),\n+            expn_id: codemap::NO_EXPANSION,\n+        }\n+    }\n+    fn cfg(&self) -> ast::CrateConfig { Vec::new() }\n+    fn ident_of(&self, st: &str) -> ast::Ident {\n+        parse::token::str_to_ident(st)\n+    }\n+    fn name_of(&self, st: &str) -> ast::Name {\n+        parse::token::intern(st)\n+    }\n+    fn parse_sess(&self) -> &parse::ParseSess { self }\n+}\n+\n+fn main() {\n+    let cx = parse::new_parse_sess();\n+\n+    assert_eq!(pprust::expr_to_string(&*quote_expr!(&cx, 23)), \"23\");\n+\n+    let expr = quote_expr!(&cx, 2 - $abcd + 7); //~ ERROR unresolved name `abcd`\n+    assert_eq!(pprust::expr_to_string(&*expr), \"2 - $abcd + 7\");\n+}"}, {"sha": "e30308b295a377b7a3eeddd390cf6bfdbe59e735", "filename": "src/test/parse-fail/qquote-1.rs", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/00c48d3779fb4c372d2dfe7a8654c6cd1e065511/src%2Ftest%2Fparse-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c48d3779fb4c372d2dfe7a8654c6cd1e065511/src%2Ftest%2Fparse-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fqquote-1.rs?ref=00c48d3779fb4c372d2dfe7a8654c6cd1e065511", "patch": "@@ -1,70 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-// ignore-test Can't use syntax crate here\n-\n-#![feature(quote)]\n-\n-extern crate syntax;\n-\n-use io::*;\n-\n-use syntax::diagnostic;\n-use syntax::ast;\n-use syntax::codemap;\n-use syntax::parse;\n-use syntax::print::*;\n-\n-\n-trait fake_ext_ctxt {\n-    fn cfg() -> ast::CrateConfig;\n-    fn parse_sess() -> parse::parse_sess;\n-    fn call_site() -> span;\n-    fn ident_of(st: &str) -> ast::ident;\n-}\n-\n-type fake_session = parse::parse_sess;\n-\n-impl fake_ext_ctxt for fake_session {\n-    fn cfg() -> ast::CrateConfig { Vec::new() }\n-    fn parse_sess() -> parse::parse_sess { self }\n-    fn call_site() -> span {\n-        codemap::span {\n-            lo: codemap::BytePos(0),\n-            hi: codemap::BytePos(0),\n-            expn_id: NO_EXPANSION\n-        }\n-    }\n-    fn ident_of(st: &str) -> ast::ident {\n-        self.interner.intern(st)\n-    }\n-}\n-\n-fn mk_ctxt() -> fake_ext_ctxt {\n-    parse::new_parse_sess(None) as fake_ext_ctxt\n-}\n-\n-\n-\n-fn main() {\n-    let cx = mk_ctxt();\n-\n-    let abc = quote_expr!(cx, 23);\n-    check_pp(abc,  pprust::print_expr, \"23\");\n-\n-    let expr3 = quote_expr!(cx, 2 - $abcd + 7); //~ ERROR unresolved name: abcd\n-    check_pp(expr3,  pprust::print_expr, \"2 - 23 + 7\");\n-}\n-\n-fn check_pp<T>(expr: T, f: |pprust::ps, T|, expect: str) {\n-    panic!();\n-}"}, {"sha": "ac501d31beebdc6e7359f2f6a81b5a1d17e108ac", "filename": "src/test/parse-fail/qquote-2.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/00c48d3779fb4c372d2dfe7a8654c6cd1e065511/src%2Ftest%2Fparse-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c48d3779fb4c372d2dfe7a8654c6cd1e065511/src%2Ftest%2Fparse-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fqquote-2.rs?ref=00c48d3779fb4c372d2dfe7a8654c6cd1e065511", "patch": "@@ -1,63 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-// ignore-test Can't use syntax crate here\n-\n-#![feature(quote)]\n-\n-extern crate syntax;\n-\n-use syntax::diagnostic;\n-use syntax::ast;\n-use syntax::codemap;\n-use syntax::parse::parser;\n-use syntax::print::*;\n-\n-trait fake_ext_ctxt {\n-    fn cfg() -> ast::CrateConfig;\n-    fn parse_sess() -> parse::parse_sess;\n-    fn call_site() -> span;\n-    fn ident_of(st: &str) -> ast::ident;\n-}\n-\n-type fake_session = parse::parse_sess;\n-\n-impl fake_ext_ctxt for fake_session {\n-    fn cfg() -> ast::CrateConfig { Vec::new() }\n-    fn parse_sess() -> parse::parse_sess { self }\n-    fn call_site() -> span {\n-        codemap::span {\n-            lo: codemap::BytePos(0),\n-            hi: codemap::BytePos(0),\n-            expn_id: codemap::NO_EXPANSION\n-        }\n-    }\n-    fn ident_of(st: &str) -> ast::ident {\n-        self.interner.intern(st)\n-    }\n-}\n-\n-fn mk_ctxt() -> fake_ext_ctxt {\n-    parse::new_parse_sess(None) as fake_ext_ctxt\n-}\n-\n-\n-fn main() {\n-    let cx = mk_ctxt();\n-\n-    let stmt = quote_stmt!(cx, let x isize = 20;); //~ ERROR expected end-of-string\n-    check_pp(*stmt,  pprust::print_stmt, \"\");\n-}\n-\n-fn check_pp<T>(expr: T, f: |pprust::ps, T|, expect: str) {\n-    panic!();\n-}"}, {"sha": "fe582bc9bf780691a28e8aa9ff090a5389ea77ac", "filename": "src/test/run-fail/qquote.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/da623844a9b3f9164723bf7ef2c4744b539af13f/src%2Ftest%2Frun-fail%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da623844a9b3f9164723bf7ef2c4744b539af13f/src%2Ftest%2Frun-fail%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fqquote.rs?ref=da623844a9b3f9164723bf7ef2c4744b539af13f", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-cross-compile\n+\n+// error-pattern:expected identifier, found keyword `let`\n+\n+#![feature(quote, rustc_private)]\n+\n+extern crate syntax;\n+\n+use syntax::ast;\n+use syntax::codemap;\n+use syntax::parse;\n+use syntax::print::pprust;\n+\n+trait FakeExtCtxt {\n+    fn call_site(&self) -> codemap::Span;\n+    fn cfg(&self) -> ast::CrateConfig;\n+    fn ident_of(&self, st: &str) -> ast::Ident;\n+    fn name_of(&self, st: &str) -> ast::Name;\n+    fn parse_sess(&self) -> &parse::ParseSess;\n+}\n+\n+impl FakeExtCtxt for parse::ParseSess {\n+    fn call_site(&self) -> codemap::Span {\n+        codemap::Span {\n+            lo: codemap::BytePos(0),\n+            hi: codemap::BytePos(0),\n+            expn_id: codemap::NO_EXPANSION,\n+        }\n+    }\n+    fn cfg(&self) -> ast::CrateConfig { Vec::new() }\n+    fn ident_of(&self, st: &str) -> ast::Ident {\n+        parse::token::str_to_ident(st)\n+    }\n+    fn name_of(&self, st: &str) -> ast::Name {\n+        parse::token::intern(st)\n+    }\n+    fn parse_sess(&self) -> &parse::ParseSess { self }\n+}\n+\n+fn main() {\n+    let cx = parse::new_parse_sess();\n+\n+    assert_eq!(pprust::expr_to_string(&*quote_expr!(&cx, 23)), \"23\");\n+\n+    let expr = quote_expr!(&cx, let x isize = 20;);\n+    assert_eq!(pprust::expr_to_string(&*expr), \"let x isize = 20;\");\n+}"}, {"sha": "995dd80df65a042ea41f12ddfcb7f8925a9e5da9", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 32, "deletions": 60, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/da623844a9b3f9164723bf7ef2c4744b539af13f/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da623844a9b3f9164723bf7ef2c4744b539af13f/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=da623844a9b3f9164723bf7ef2c4744b539af13f", "patch": "@@ -10,86 +10,58 @@\n \n // ignore-cross-compile\n // ignore-pretty\n-// ignore-test\n \n-#![feature(quote)]\n+#![feature(quote, rustc_private)]\n \n extern crate syntax;\n \n-use std::io::*;\n-\n-use syntax::diagnostic;\n use syntax::ast;\n use syntax::codemap;\n-use syntax::codemap::span;\n use syntax::parse;\n-use syntax::print::*;\n-\n-\n-trait fake_ext_ctxt {\n-    fn cfg() -> ast::CrateConfig;\n-    fn parse_sess() -> parse::parse_sess;\n-    fn call_site() -> span;\n-    fn ident_of(st: &str) -> ast::ident;\n+use syntax::print::pprust;\n+\n+trait FakeExtCtxt {\n+    fn call_site(&self) -> codemap::Span;\n+    fn cfg(&self) -> ast::CrateConfig;\n+    fn ident_of(&self, st: &str) -> ast::Ident;\n+    fn name_of(&self, st: &str) -> ast::Name;\n+    fn parse_sess(&self) -> &parse::ParseSess;\n }\n \n-type fake_session = parse::parse_sess;\n-\n-impl fake_ext_ctxt for fake_session {\n-    fn cfg() -> ast::CrateConfig { Vec::new() }\n-    fn parse_sess() -> parse::parse_sess { self }\n-    fn call_site() -> span {\n-        codemap::span {\n+impl FakeExtCtxt for parse::ParseSess {\n+    fn call_site(&self) -> codemap::Span {\n+        codemap::Span {\n             lo: codemap::BytePos(0),\n             hi: codemap::BytePos(0),\n-            expn_id: codemap::NO_EXPANSION\n+            expn_id: codemap::NO_EXPANSION,\n         }\n     }\n-    fn ident_of(st: &str) -> ast::ident {\n-        self.interner.intern(st)\n+    fn cfg(&self) -> ast::CrateConfig { Vec::new() }\n+    fn ident_of(&self, st: &str) -> ast::Ident {\n+        parse::token::str_to_ident(st)\n     }\n-}\n-\n-fn mk_ctxt() -> fake_ext_ctxt {\n-    parse::new_parse_sess(None) as fake_ext_ctxt\n+    fn name_of(&self, st: &str) -> ast::Name {\n+        parse::token::intern(st)\n+    }\n+    fn parse_sess(&self) -> &parse::ParseSess { self }\n }\n \n fn main() {\n-    let cx = mk_ctxt();\n+    let cx = parse::new_parse_sess();\n \n-    let abc = quote_expr!(cx, 23);\n-    check_pp(ext_cx, abc,  pprust::print_expr, \"23\".to_string());\n+    assert_eq!(pprust::expr_to_string(&*quote_expr!(&cx, 23)), \"23\");\n+    assert_eq!(pprust::pat_to_string(&*quote_pat!(&cx, Some(_))), \"Some(_)\");\n+    assert_eq!(pprust::ty_to_string(&*quote_ty!(&cx, isize)), \"isize\");\n \n+    let arm = quote_arm!(&cx, (ref x, ref y) => (x, y),);\n+    assert_eq!(pprust::arm_to_string(&arm), \" (ref x, ref y) => (x, y),\");\n \n-    let ty = quote_ty!(cx, isize);\n-    check_pp(ext_cx, ty, pprust::print_type, \"isize\".to_string());\n+    let attr = quote_attr!(&cx, #![cfg(foo = \"bar\")]);\n+    assert_eq!(pprust::attr_to_string(&attr), \"#![cfg(foo = \\\"bar\\\")]\");\n \n-    let item = quote_item!(cx, static x : isize = 10;).get();\n-    check_pp(ext_cx, item, pprust::print_item, \"static x: isize = 10;\".to_string());\n+    let item = quote_item!(&cx, static x : isize = 10;).unwrap();\n+    assert_eq!(pprust::item_to_string(&*item), \"static x: isize = 10;\");\n \n-    let stmt = quote_stmt!(cx, let x = 20;);\n-    check_pp(ext_cx, *stmt, pprust::print_stmt, \"let x = 20;\".to_string());\n-\n-    let pat = quote_pat!(cx, Some(_));\n-    check_pp(ext_cx, pat, pprust::print_pat, \"Some(_)\".to_string());\n-\n-    let arm = quote_arm!(cx, (ref x, ref y) => (x, y));\n-    check_pp(ext_cx, arm, pprust::print_stmt, \"(ref x, ref y) = (x, y)\".to_string());\n-\n-    let attr = quote_attr!(cx, #![cfg(foo = \"bar\")]);\n-    check_pp(ext_cx, attr, pprust::print_attribute, \"#![cfg(foo = \"bar\")]\".to_string());\n-}\n-\n-fn check_pp<T>(cx: fake_ext_ctxt,\n-               expr: T, f: |pprust::ps, T|, expect: String) {\n-    let s = io::with_str_writer(|wr| {\n-        let pp = pprust::rust_printer(wr, cx.parse_sess().interner);\n-        f(pp, expr);\n-        pp::eof(pp.s);\n-    });\n-    stdout().write_line(s);\n-    if expect != \"\".to_string() {\n-        println!(\"expect: '%s', got: '%s'\", expect, s);\n-        assert_eq!(s, expect);\n-    }\n+    let stmt = quote_stmt!(&cx, let x = 20;).unwrap();\n+    assert_eq!(pprust::stmt_to_string(&*stmt), \"let x = 20;\");\n }"}]}