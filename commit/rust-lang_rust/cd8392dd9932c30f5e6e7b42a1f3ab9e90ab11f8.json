{"sha": "cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkODM5MmRkOTkzMmMzMGY1ZTZlN2I0MmExZjNhYjllOTBhYjExZjg=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-04-16T09:06:51Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-04-16T09:06:51Z"}, "message": "Fix tests", "tree": {"sha": "592d7dbcc5d6eb1ca264d961a168780e65e108b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/592d7dbcc5d6eb1ca264d961a168780e65e108b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "html_url": "https://github.com/rust-lang/rust/commit/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7", "url": "https://api.github.com/repos/rust-lang/rust/commits/43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7", "html_url": "https://github.com/rust-lang/rust/commit/43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7"}], "stats": {"total": 356, "additions": 214, "deletions": 142}, "files": [{"sha": "d845e00694a2dfdac606b6a0b7cec12531cb6452", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -13,6 +13,7 @@ fn b() {\n     //~| ERROR expected trait, found constant `BAR`\n     //~| ERROR type provided when a constant was expected\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }\n fn c() {\n     foo::<3 + 3>(); //~ ERROR expressions must be enclosed in braces"}, {"sha": "857498a1111f5d16b9222a3464ca6c3b8c0d8ebf", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -10,7 +10,7 @@ LL |     foo::<{ BAR + 3 }>();\n    |           ^         ^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-suggest-missing-braces.rs:18:11\n+  --> $DIR/const-expression-suggest-missing-braces.rs:19:11\n    |\n LL |     foo::<3 + 3>();\n    |           ^^^^^\n@@ -21,7 +21,7 @@ LL |     foo::<{ 3 + 3 }>();\n    |           ^       ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:21:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:22:15\n    |\n LL |     foo::<BAR - 3>();\n    |               ^ expected one of `,` or `>`\n@@ -32,7 +32,7 @@ LL |     foo::<{ BAR - 3 }>();\n    |           ^         ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:24:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:25:15\n    |\n LL |     foo::<BAR - BAR>();\n    |               ^ expected one of `,` or `>`\n@@ -43,7 +43,7 @@ LL |     foo::<{ BAR - BAR }>();\n    |           ^           ^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-suggest-missing-braces.rs:27:11\n+  --> $DIR/const-expression-suggest-missing-braces.rs:28:11\n    |\n LL |     foo::<100 - BAR>();\n    |           ^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     foo::<{ 100 - BAR }>();\n    |           ^           ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:30:19\n+  --> $DIR/const-expression-suggest-missing-braces.rs:31:19\n    |\n LL |     foo::<bar<i32>()>();\n    |                   ^ expected one of `,` or `>`\n@@ -65,7 +65,7 @@ LL |     foo::<{ bar<i32>() }>();\n    |           ^            ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:33:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:34:21\n    |\n LL |     foo::<bar::<i32>()>();\n    |                     ^ expected one of `,` or `>`\n@@ -76,7 +76,7 @@ LL |     foo::<{ bar::<i32>() }>();\n    |           ^              ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:36:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:37:21\n    |\n LL |     foo::<bar::<i32>() + BAR>();\n    |                     ^ expected one of `,` or `>`\n@@ -87,7 +87,7 @@ LL |     foo::<{ bar::<i32>() + BAR }>();\n    |           ^                    ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:39:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:40:21\n    |\n LL |     foo::<bar::<i32>() - BAR>();\n    |                     ^ expected one of `,` or `>`\n@@ -98,7 +98,7 @@ LL |     foo::<{ bar::<i32>() - BAR }>();\n    |           ^                    ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:42:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:43:15\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |               ^ expected one of `,` or `>`\n@@ -109,7 +109,7 @@ LL |     foo::<{ BAR - bar::<i32>() }>();\n    |           ^                    ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:45:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:46:15\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |               ^ expected one of `,` or `>`\n@@ -138,6 +138,8 @@ LL |     foo::<BAR + BAR>();\n    |           ^^^^^^^^^ help: use `dyn`: `dyn BAR + BAR`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/const-expression-suggest-missing-braces.rs:11:11"}, {"sha": "40ed42c9ce017becbc6190de1be6360032456461", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -11,5 +11,6 @@ fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~^ ERROR: lifetime in trait object type must be followed by `+`\n   //~| ERROR: parenthesized generic arguments cannot be used\n   //~| WARNING: trait objects without an explicit `dyn` are deprecated\n+  //~| WARNING: this was previously accepted by the compiler\n \n fn main() {}"}, {"sha": "0e95c54d8114ff86e44a7c39db51c14d156bfdd4", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -26,6 +26,8 @@ LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                             ^^ help: use `dyn`: `dyn 'a`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:5:8"}, {"sha": "74f838e9ed18dd4e4cedfff46f67464dc85facb9", "filename": "src/test/ui/lint/bare-trait-objects-path.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -11,8 +11,14 @@ trait Dyn {}\n impl Assoc for dyn Dyn {}\n \n fn main() {\n-    Dyn::func(); //~ WARN trait objects without an explicit `dyn` are deprecated\n-    ::Dyn::func(); //~ WARN trait objects without an explicit `dyn` are deprecated\n-    Dyn::CONST; //~ WARN trait objects without an explicit `dyn` are deprecated\n+    Dyn::func();\n+    //~^ WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n+    ::Dyn::func();\n+    //~^ WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n+    Dyn::CONST;\n+    //~^ WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n     let _: Dyn::Ty; //~ ERROR ambiguous associated type\n }"}, {"sha": "55c9ea234de29661081f11889c80c6d04fba0128", "filename": "src/test/ui/lint/bare-trait-objects-path.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -1,5 +1,5 @@\n error[E0223]: ambiguous associated type\n-  --> $DIR/bare-trait-objects-path.rs:17:12\n+  --> $DIR/bare-trait-objects-path.rs:23:12\n    |\n LL |     let _: Dyn::Ty;\n    |            ^^^^^^^ help: use fully-qualified syntax: `<dyn Dyn as Trait>::Ty`\n@@ -11,18 +11,26 @@ LL |     Dyn::func();\n    |     ^^^ help: use `dyn`: `<dyn Dyn>`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/bare-trait-objects-path.rs:15:5\n+  --> $DIR/bare-trait-objects-path.rs:17:5\n    |\n LL |     ::Dyn::func();\n    |     ^^^^^ help: use `dyn`: `<dyn (::Dyn)>`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/bare-trait-objects-path.rs:16:5\n+  --> $DIR/bare-trait-objects-path.rs:20:5\n    |\n LL |     Dyn::CONST;\n    |     ^^^ help: use `dyn`: `<dyn Dyn>`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 3 warnings emitted\n "}, {"sha": "a1b738e33fa9bdfd50bae3ae63d46fb97b5dba9c", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -8,12 +8,14 @@ fn main() {\n     match despondency {\n         1..=2 => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         _ => {}\n     }\n \n     match &despondency {\n         &(1..=2) => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         _ => {}\n     }\n }"}, {"sha": "d3ebbf38e1cba047dbe89b0c5ff3d5b38d01cb2c", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -8,12 +8,14 @@ fn main() {\n     match despondency {\n         1...2 => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         _ => {}\n     }\n \n     match &despondency {\n         &1...2 => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         _ => {}\n     }\n }"}, {"sha": "ba4ae208e39cb2e01ed5b697c84a91fd04e9e7fd", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -9,12 +9,17 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: `...` range patterns are deprecated\n-  --> $DIR/inclusive-range-pattern-syntax.rs:15:9\n+  --> $DIR/inclusive-range-pattern-syntax.rs:16:9\n    |\n LL |         &1...2 => {}\n    |         ^^^^^^ help: use `..=` for an inclusive range: `&(1..=2)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 2 warnings emitted\n "}, {"sha": "88527cc8783c83a6b455dace86b10911cbb231b4", "filename": "src/test/ui/parser/issue-68890-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -4,3 +4,4 @@ type X<'a> = (?'a) +;\n //~^ ERROR `?` may only modify trait bounds, not lifetime bounds\n //~| ERROR at least one trait is required for an object type\n //~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this was previously accepted by the compiler"}, {"sha": "37f38365b016f16fd53edce39cba98666a96ab94", "filename": "src/test/ui/parser/issue-68890-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -11,6 +11,8 @@ LL | type X<'a> = (?'a) +;\n    |              ^^^^^^^ help: use `dyn`: `dyn (?'a) +`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type\n   --> $DIR/issue-68890-2.rs:3:14"}, {"sha": "0733b2d2df781453a82bf598e6dc2ef9cf0014b0", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -14,8 +14,10 @@ mac!('a);\n fn y<'a>(y: &mut 'a + Send) {\n     //~^ ERROR expected a path on the left-hand side of `+`, not `&mut 'a`\n     //~| WARNING trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n     //~| ERROR at least one trait is required for an object type\n     let z = y as &mut 'a + Send;\n     //~^ ERROR expected value, found trait `Send`\n     //~| WARNING trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }"}, {"sha": "9b05383dd7de0e1443e2e5946c11513981791398", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -22,7 +22,7 @@ LL | mac!('a);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0423]: expected value, found trait `Send`\n-  --> $DIR/issue-73568-lifetime-after-mut.rs:18:28\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:19:28\n    |\n LL |     let z = y as &mut 'a + Send;\n    |                            ^^^^ not a value\n@@ -34,12 +34,17 @@ LL | fn y<'a>(y: &mut 'a + Send) {\n    |                  ^^ help: use `dyn`: `dyn 'a`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-73568-lifetime-after-mut.rs:18:23\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:19:23\n    |\n LL |     let z = y as &mut 'a + Send;\n    |                       ^^ help: use `dyn`: `dyn 'a`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type\n   --> $DIR/issue-73568-lifetime-after-mut.rs:14:18"}, {"sha": "0428ea0e2c1b1e74ce09efeeba5297d4d2f01410", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -12,4 +12,5 @@ fn main() {\n     //~^ ERROR lifetime in trait object type must be followed by `+`\n     //~| ERROR at least one trait is required for an object type\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }"}, {"sha": "8ae5611d89d196aa6d9ac0d8ba6f9b0ef77962fc", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -11,6 +11,8 @@ LL |     m!('static);\n    |        ^^^^^^^ help: use `dyn`: `dyn 'static`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type\n   --> $DIR/trait-object-macro-matcher.rs:11:8"}, {"sha": "a10add6d9e523c073c21b099161405d2605be2eb", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -39,20 +39,32 @@ fn inclusive_from_to() {\n }\n \n fn inclusive2_from_to() {\n-    if let 0...3 = 0 {} //~ ERROR `...` range patterns are deprecated\n-    if let 0...Y = 0 {} //~ ERROR `...` range patterns are deprecated\n-    if let X...3 = 0 {} //~ ERROR `...` range patterns are deprecated\n-    if let X...Y = 0 {} //~ ERROR `...` range patterns are deprecated\n+    if let 0...3 = 0 {}\n+    //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n+    if let 0...Y = 0 {}\n+    //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n+    if let X...3 = 0 {}\n+    //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n+    if let X...Y = 0 {}\n+    //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n     if let true...Y = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n     if let X...true = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n     if let .0...Y = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n+    //~| WARN this was previously accepted by the compiler\n     //~| ERROR `...` range patterns are deprecated\n     if let X... .0 = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }\n \n fn exclusive_from() {\n@@ -125,6 +137,7 @@ fn with_macro_expr_var() {\n             let $e1..$e2;\n             let $e1...$e2;\n             //~^ ERROR `...` range patterns are deprecated\n+            //~| WARN this was previously accepted by the compiler\n             let $e1..=$e2;\n         }\n     }"}, {"sha": "45f6b111e259cb03642bec49b5ab1a26cdd75b44", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 72, "deletions": 47, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -23,143 +23,143 @@ LL |     if let X..=.0 = 0 {}\n    |                ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:50:12\n+  --> $DIR/recover-range-pats.rs:60:12\n    |\n LL |     if let .0...Y = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:53:17\n+  --> $DIR/recover-range-pats.rs:64:17\n    |\n LL |     if let X... .0 = 0 {}\n    |                 ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:63:12\n+  --> $DIR/recover-range-pats.rs:75:12\n    |\n LL |     if let .0.. = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:69:13\n+  --> $DIR/recover-range-pats.rs:81:13\n    |\n LL |     if let 0..= = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:70:13\n+  --> $DIR/recover-range-pats.rs:82:13\n    |\n LL |     if let X..= = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:71:16\n+  --> $DIR/recover-range-pats.rs:83:16\n    |\n LL |     if let true..= = 0 {}\n    |                ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:73:12\n+  --> $DIR/recover-range-pats.rs:85:12\n    |\n LL |     if let .0..= = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:73:14\n+  --> $DIR/recover-range-pats.rs:85:14\n    |\n LL |     if let .0..= = 0 {}\n    |              ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:79:13\n+  --> $DIR/recover-range-pats.rs:91:13\n    |\n LL |     if let 0... = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:80:13\n+  --> $DIR/recover-range-pats.rs:92:13\n    |\n LL |     if let X... = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:81:16\n+  --> $DIR/recover-range-pats.rs:93:16\n    |\n LL |     if let true... = 0 {}\n    |                ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:83:12\n+  --> $DIR/recover-range-pats.rs:95:12\n    |\n LL |     if let .0... = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:83:14\n+  --> $DIR/recover-range-pats.rs:95:14\n    |\n LL |     if let .0... = 0 {}\n    |              ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:93:15\n+  --> $DIR/recover-range-pats.rs:105:15\n    |\n LL |     if let .. .0 = 0 {}\n    |               ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:103:15\n+  --> $DIR/recover-range-pats.rs:115:15\n    |\n LL |     if let ..=.0 = 0 {}\n    |               ^^ help: must have an integer part: `0.0`\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:109:12\n+  --> $DIR/recover-range-pats.rs:121:12\n    |\n LL |     if let ...3 = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:111:12\n+  --> $DIR/recover-range-pats.rs:123:12\n    |\n LL |     if let ...Y = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:113:12\n+  --> $DIR/recover-range-pats.rs:125:12\n    |\n LL |     if let ...true = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:116:15\n+  --> $DIR/recover-range-pats.rs:128:15\n    |\n LL |     if let ....3 = 0 {}\n    |               ^^ help: must have an integer part: `0.3`\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:116:12\n+  --> $DIR/recover-range-pats.rs:128:12\n    |\n LL |     if let ....3 = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:137:17\n+  --> $DIR/recover-range-pats.rs:150:17\n    |\n LL |             let ...$e;\n    |                 ^^^ help: use `..=` instead\n@@ -170,7 +170,7 @@ LL |     mac!(0);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:141:19\n+  --> $DIR/recover-range-pats.rs:154:19\n    |\n LL |             let $e...;\n    |                   ^^^ help: use `..` instead\n@@ -182,7 +182,7 @@ LL |     mac!(0);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:142:19\n+  --> $DIR/recover-range-pats.rs:155:19\n    |\n LL |             let $e..=;\n    |                   ^^^ help: use `..` instead\n@@ -204,58 +204,83 @@ note: the lint level is defined here\n    |\n LL | #![deny(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:43:13\n+  --> $DIR/recover-range-pats.rs:45:13\n    |\n LL |     if let 0...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:44:13\n+  --> $DIR/recover-range-pats.rs:48:13\n    |\n LL |     if let X...3 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:45:13\n+  --> $DIR/recover-range-pats.rs:51:13\n    |\n LL |     if let X...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:46:16\n+  --> $DIR/recover-range-pats.rs:54:16\n    |\n LL |     if let true...Y = 0 {}\n    |                ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:48:13\n+  --> $DIR/recover-range-pats.rs:57:13\n    |\n LL |     if let X...true = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:50:14\n+  --> $DIR/recover-range-pats.rs:60:14\n    |\n LL |     if let .0...Y = 0 {}\n    |              ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:53:13\n+  --> $DIR/recover-range-pats.rs:64:13\n    |\n LL |     if let X... .0 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:126:20\n+  --> $DIR/recover-range-pats.rs:138:20\n    |\n LL |             let $e1...$e2;\n    |                    ^^^ help: use `..=` for an inclusive range\n ...\n LL |     mac2!(0, 1);\n    |     ------------ in this macro invocation\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n@@ -325,31 +350,31 @@ LL |     if let X..=.0 = 0 {}\n    |            this is of type `u8`\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:46:12\n+  --> $DIR/recover-range-pats.rs:54:12\n    |\n LL |     if let true...Y = 0 {}\n    |            ^^^^   - this is of type `u8`\n    |            |\n    |            this is of type `bool` but it should be `char` or numeric\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:48:16\n+  --> $DIR/recover-range-pats.rs:57:16\n    |\n LL |     if let X...true = 0 {}\n    |            -   ^^^^ this is of type `bool` but it should be `char` or numeric\n    |            |\n    |            this is of type `u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:50:12\n+  --> $DIR/recover-range-pats.rs:60:12\n    |\n LL |     if let .0...Y = 0 {}\n    |            ^^   - this is of type `u8`\n    |            |\n    |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:53:17\n+  --> $DIR/recover-range-pats.rs:64:17\n    |\n LL |     if let X... .0 = 0 {}\n    |            -    ^^   - this expression has type `u8`\n@@ -358,73 +383,73 @@ LL |     if let X... .0 = 0 {}\n    |            this is of type `u8`\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:61:12\n+  --> $DIR/recover-range-pats.rs:73:12\n    |\n LL |     if let true.. = 0 {}\n    |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:63:12\n+  --> $DIR/recover-range-pats.rs:75:12\n    |\n LL |     if let .0.. = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:71:12\n+  --> $DIR/recover-range-pats.rs:83:12\n    |\n LL |     if let true..= = 0 {}\n    |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:73:12\n+  --> $DIR/recover-range-pats.rs:85:12\n    |\n LL |     if let .0..= = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:81:12\n+  --> $DIR/recover-range-pats.rs:93:12\n    |\n LL |     if let true... = 0 {}\n    |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:83:12\n+  --> $DIR/recover-range-pats.rs:95:12\n    |\n LL |     if let .0... = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:91:14\n+  --> $DIR/recover-range-pats.rs:103:14\n    |\n LL |     if let ..true = 0 {}\n    |              ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:93:15\n+  --> $DIR/recover-range-pats.rs:105:15\n    |\n LL |     if let .. .0 = 0 {}\n    |               ^^ expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:101:15\n+  --> $DIR/recover-range-pats.rs:113:15\n    |\n LL |     if let ..=true = 0 {}\n    |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:103:15\n+  --> $DIR/recover-range-pats.rs:115:15\n    |\n LL |     if let ..=.0 = 0 {}\n    |               ^^ expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:113:15\n+  --> $DIR/recover-range-pats.rs:125:15\n    |\n LL |     if let ...true = 0 {}\n    |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:116:15\n+  --> $DIR/recover-range-pats.rs:128:15\n    |\n LL |     if let ....3 = 0 {}\n    |               ^^ expected integer, found floating-point number"}, {"sha": "7d55da7d09721a75758813eed37ac39820feeb68", "filename": "src/test/ui/parser/trait-object-trait-parens.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -9,12 +9,15 @@ fn main() {\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n+    //~| WARN this was previously accepted by the compiler\n+    let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n+    //~| WARN this was previously accepted by the compiler\n+    let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }"}, {"sha": "79b6892dc079a182e6dfc9a884ec5e09a70e467f", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -5,16 +5,16 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    |                        ^^^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/trait-object-trait-parens.rs:12:17\n+  --> $DIR/trait-object-trait-parens.rs:13:16\n    |\n-LL |     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n-   |                 ^^^^^^\n+LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+   |                ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/trait-object-trait-parens.rs:16:46\n+  --> $DIR/trait-object-trait-parens.rs:18:44\n    |\n-LL |     let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n-   |                                              ^^^^^^^^\n+LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+   |                                            ^^^^^^^^\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/trait-object-trait-parens.rs:8:16\n@@ -23,18 +23,26 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-trait-parens.rs:12:16\n+  --> $DIR/trait-object-trait-parens.rs:13:16\n    |\n-LL |     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (?Sized) + (for<'a> Trait<'a>) + (Obj)`\n+LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn ?Sized + (for<'a> Trait<'a>) + (Obj)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-trait-parens.rs:16:16\n+  --> $DIR/trait-object-trait-parens.rs:18:16\n+   |\n+LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> Trait<'a> + (Obj) + (?Sized)`\n    |\n-LL |     let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (for<'a> Trait<'a>) + (Obj) + (?Sized)`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:8:35\n@@ -48,23 +56,23 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-object-trait-parens.rs:12:49\n+  --> $DIR/trait-object-trait-parens.rs:13:47\n    |\n-LL |     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n-   |                           -------------------   ^^^^^ additional non-auto trait\n-   |                           |\n-   |                           first non-auto trait\n+LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+   |                         -------------------   ^^^^^ additional non-auto trait\n+   |                         |\n+   |                         first non-auto trait\n    |\n    = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-object-trait-parens.rs:16:38\n+  --> $DIR/trait-object-trait-parens.rs:18:36\n    |\n-LL |     let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n-   |                 -----------------    ^^^^^ additional non-auto trait\n-   |                 |\n-   |                 first non-auto trait\n+LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+   |                -----------------   ^^^^^ additional non-auto trait\n+   |                |\n+   |                first non-auto trait\n    |\n    = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>"}, {"sha": "6c01209967605fbc1117a545047c60919c5832fd", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -10,10 +10,11 @@ pub fn main() {\n     match &12 {\n         &(0..=9) => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         //~| HELP use `..=` for an inclusive range\n         &(10 ..=15) => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation\n-        //~^^ HELP add parentheses to clarify the precedence\n+        //~| HELP add parentheses to clarify the precedence\n         &(16..=20) => {}\n         _ => {}\n     }"}, {"sha": "ce763ba267798fc4c43c8f26dd443d493b11ed1f", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -10,10 +10,11 @@ pub fn main() {\n     match &12 {\n         &0...9 => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         //~| HELP use `..=` for an inclusive range\n         &10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation\n-        //~^^ HELP add parentheses to clarify the precedence\n+        //~| HELP add parentheses to clarify the precedence\n         &(16..=20) => {}\n         _ => {}\n     }"}, {"sha": "ffb833535c2f0cf37a06859b89b5c54fe96fe843", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -1,5 +1,5 @@\n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence.rs:14:10\n+  --> $DIR/range-inclusive-pattern-precedence.rs:15:10\n    |\n LL |         &10..=15 => {}\n    |          ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n@@ -15,6 +15,8 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "7fa2698a49603286d3c1c6277c69d9a7c4df55f5", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -9,6 +9,7 @@ fn main() {\n         // FIXME: can we add suggestions like `&(0..=9)`?\n         box 0...9 => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         //~| HELP use `..=` for an inclusive range\n         box 10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation"}, {"sha": "e8e62b485cc1d9615c614fbe99d960956090155c", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -1,5 +1,5 @@\n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence2.rs:13:13\n+  --> $DIR/range-inclusive-pattern-precedence2.rs:14:13\n    |\n LL |         box 10..=15 => {}\n    |             ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n@@ -15,6 +15,8 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "f5afbad9f78fe7741131a55d01199fb98b1b8807", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.fixed", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -14,12 +14,8 @@ pub struct Foo;\n mod test {\n     use crate::foo::foo;\n \n-    #[foo] //~ WARN: absolute paths must start with\n-    //~| WARN: previously accepted\n-    //~| WARN: absolute paths\n-    //~| WARN: previously accepted\n-    fn main() {\n-    }\n+    #[foo]\n+    fn main() {}\n }\n \n fn main() {"}, {"sha": "f5afbad9f78fe7741131a55d01199fb98b1b8807", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -14,12 +14,8 @@ pub struct Foo;\n mod test {\n     use crate::foo::foo;\n \n-    #[foo] //~ WARN: absolute paths must start with\n-    //~| WARN: previously accepted\n-    //~| WARN: absolute paths\n-    //~| WARN: previously accepted\n-    fn main() {\n-    }\n+    #[foo]\n+    fn main() {}\n }\n \n fn main() {"}, {"sha": "45502a5b880815550d49d793d20318cc5f0627ca", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr?ref=43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7", "patch": "@@ -1,28 +0,0 @@\n-warning: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/suggestions-not-always-applicable.rs:17:5\n-   |\n-LL |     #[foo]\n-   |     ^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/suggestions-not-always-applicable.rs:8:9\n-   |\n-LL | #![warn(rust_2018_compatibility)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: `#[warn(absolute_paths_not_starting_with_crate)]` implied by `#[warn(rust_2018_compatibility)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-   = note: this warning originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/suggestions-not-always-applicable.rs:17:5\n-   |\n-LL |     #[foo]\n-   |     ^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-   = note: this warning originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: 2 warnings emitted\n-"}, {"sha": "b5c379ebc6eb94da5e5a716044ca41a269795cf3", "filename": "src/test/ui/suggestions/issue-61963.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -11,15 +11,17 @@ extern crate issue_61963_1;\n // generate code which would trigger the lint.\n \n pub struct Baz;\n-pub trait Bar { }\n+pub trait Bar {}\n pub struct Qux<T>(T);\n \n #[dom_struct]\n pub struct Foo {\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this was previously accepted by the compiler\n     qux: Qux<Qux<Baz>>,\n     bar: Box<Bar>,\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this was previously accepted by the compiler\n }\n \n fn main() {}"}, {"sha": "f8c58b6173477dc7711cfc5489ce7fdc24566862", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -1,5 +1,5 @@\n error: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-61963.rs:21:14\n+  --> $DIR/issue-61963.rs:22:14\n    |\n LL |     bar: Box<Bar>,\n    |              ^^^ help: use `dyn`: `dyn Bar`\n@@ -9,12 +9,17 @@ note: the lint level is defined here\n    |\n LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n    |\n LL | pub struct Foo {\n    | ^^^ help: use `dyn`: `dyn pub`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "08355a55630f643bcc89f65965e66812bca0903c", "filename": "src/test/ui/traits/bound/not-on-bare-trait.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -1,12 +1,13 @@\n trait Foo {\n-    fn dummy(&self) { }\n+    fn dummy(&self) {}\n }\n \n // This should emit the less confusing error, not the more confusing one.\n \n fn foo(_x: Foo + Send) {\n     //~^ ERROR the size for values of type\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "f087a45a6c48861a68e9119690d53104fdeb10c2", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=cd8392dd9932c30f5e6e7b42a1f3ab9e90ab11f8", "patch": "@@ -5,6 +5,8 @@ LL | fn foo(_x: Foo + Send) {\n    |            ^^^^^^^^^^ help: use `dyn`: `dyn Foo + Send`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time\n   --> $DIR/not-on-bare-trait.rs:7:8"}]}