{"sha": "5e10b039a3f215b48a54ce7dd38f95115f92e55a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMTBiMDM5YTNmMjE1YjQ4YTU0Y2U3ZGQzOGY5NTExNWY5MmU1NWE=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-08-03T04:46:18Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-08-03T04:46:18Z"}, "message": "Implement review suggestions", "tree": {"sha": "28a11b35e1b22d85cc8e0db8db38b52a7a58153a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28a11b35e1b22d85cc8e0db8db38b52a7a58153a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e10b039a3f215b48a54ce7dd38f95115f92e55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e10b039a3f215b48a54ce7dd38f95115f92e55a", "html_url": "https://github.com/rust-lang/rust/commit/5e10b039a3f215b48a54ce7dd38f95115f92e55a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e10b039a3f215b48a54ce7dd38f95115f92e55a/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91", "html_url": "https://github.com/rust-lang/rust/commit/bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91"}], "stats": {"total": 40, "additions": 7, "deletions": 33}, "files": [{"sha": "e9ce804320fc9969adf9154dde15ae263fc670ad", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e10b039a3f215b48a54ce7dd38f95115f92e55a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e10b039a3f215b48a54ce7dd38f95115f92e55a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5e10b039a3f215b48a54ce7dd38f95115f92e55a", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::middle::region;\n use rustc_middle::ty::{self, Ty, TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use std::iter::{once, Iterator};\n use std::mem;\n@@ -2442,7 +2442,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if let Some(ref generic_args) = method_name.args;\n                 if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n                 if let ty = cx.typeck_results().node_type(ty.hir_id);\n-                if is_type_diagnostic_item(cx, ty, sym!(vec_type)) ||\n+                if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n                     is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n                     match_type(cx, ty, &paths::LINKED_LIST);\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n@@ -2524,12 +2524,11 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor {\n             if let &[name] = &path.segments;\n             if name.ident == self.target;\n             then {\n-                let into_iter = sym!(into_iter);\n                 let len = sym!(len);\n                 let is_empty = sym!(is_empty);\n                 let contains = sym!(contains);\n                 match method_name.ident.name {\n-                    name if name == into_iter => self.uses.push(\n+                    sym::into_iter => self.uses.push(\n                         IterFunction { func: IterFunctionKind::IntoIter, span: expr.span }\n                     ),\n                     name if name == len => self.uses.push("}, {"sha": "163eaf965dd6ac4cbc55c4c5390b5fa114334363", "filename": "tests/ui/needless_collect_indirect.fixed", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91/tests%2Fui%2Fneedless_collect_indirect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91/tests%2Fui%2Fneedless_collect_indirect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.fixed?ref=bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91", "patch": "@@ -1,22 +0,0 @@\n-// run-rustfix\n-\n-#[allow(unused)]\n-use std::collections::{HashMap, VecDeque};\n-\n-fn main() {\n-    let sample = [1; 5];\n-    let indirect_iter = sample.iter().collect::<Vec<_>>();\n-    indirect_iter.into_iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();\n-    let indirect_len = sample.iter().collect::<VecDeque<_>>();\n-    indirect_len.len();\n-    let indirect_empty = sample.iter().collect::<VecDeque<_>>();\n-    indirect_empty.is_empty();\n-    let indirect_contains = sample.iter().collect::<VecDeque<_>>();\n-    indirect_contains.contains(&&5);\n-    let indirect_negative = sample.iter().collect::<Vec<_>>();\n-    indirect_negative.len();\n-    indirect_negative\n-        .into_iter()\n-        .map(|x| (*x, *x + 1))\n-        .collect::<HashMap<_, _>>();\n-}"}, {"sha": "4cf03e820352356b84f873cac15c7fd094a8020b", "filename": "tests/ui/needless_collect_indirect.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e10b039a3f215b48a54ce7dd38f95115f92e55a/tests%2Fui%2Fneedless_collect_indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e10b039a3f215b48a54ce7dd38f95115f92e55a/tests%2Fui%2Fneedless_collect_indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.rs?ref=5e10b039a3f215b48a54ce7dd38f95115f92e55a", "patch": "@@ -1,6 +1,3 @@\n-// run-rustfix\n-\n-#[allow(unused)]\n use std::collections::{HashMap, VecDeque};\n \n fn main() {"}, {"sha": "0c1e61d749661c5fb4a00652e75f6165407d08a8", "filename": "tests/ui/needless_collect_indirect.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e10b039a3f215b48a54ce7dd38f95115f92e55a/tests%2Fui%2Fneedless_collect_indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e10b039a3f215b48a54ce7dd38f95115f92e55a/tests%2Fui%2Fneedless_collect_indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.stderr?ref=5e10b039a3f215b48a54ce7dd38f95115f92e55a", "patch": "@@ -1,5 +1,5 @@\n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:8:5\n+  --> $DIR/needless_collect_indirect.rs:5:5\n    |\n LL | /     let indirect_iter = sample.iter().collect::<Vec<_>>();\n LL | |     indirect_iter.into_iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();\n@@ -13,7 +13,7 @@ LL |     sample.iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();\n    |\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:10:5\n+  --> $DIR/needless_collect_indirect.rs:7:5\n    |\n LL | /     let indirect_len = sample.iter().collect::<VecDeque<_>>();\n LL | |     indirect_len.len();\n@@ -26,7 +26,7 @@ LL |     sample.iter().count();\n    |\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:12:5\n+  --> $DIR/needless_collect_indirect.rs:9:5\n    |\n LL | /     let indirect_empty = sample.iter().collect::<VecDeque<_>>();\n LL | |     indirect_empty.is_empty();\n@@ -39,7 +39,7 @@ LL |     sample.iter().next().is_none();\n    |\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:14:5\n+  --> $DIR/needless_collect_indirect.rs:11:5\n    |\n LL | /     let indirect_contains = sample.iter().collect::<VecDeque<_>>();\n LL | |     indirect_contains.contains(&&5);"}]}