{"sha": "3ccd05fedc46796f793295901a8619492256468e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjY2QwNWZlZGM0Njc5NmY3OTMyOTU5MDFhODYxOTQ5MjI1NjQ2OGU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-17T18:47:50Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-19T13:49:06Z"}, "message": "Add recursive expand in vscode", "tree": {"sha": "018f46fca85c4d2e0ef4b73fa3971166e65de3e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/018f46fca85c4d2e0ef4b73fa3971166e65de3e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ccd05fedc46796f793295901a8619492256468e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ccd05fedc46796f793295901a8619492256468e", "html_url": "https://github.com/rust-lang/rust/commit/3ccd05fedc46796f793295901a8619492256468e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ccd05fedc46796f793295901a8619492256468e/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2782ab1c1ec0b9f2ac2131859a9ee880f97bc12", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2782ab1c1ec0b9f2ac2131859a9ee880f97bc12", "html_url": "https://github.com/rust-lang/rust/commit/d2782ab1c1ec0b9f2ac2131859a9ee880f97bc12"}], "stats": {"total": 215, "additions": 210, "deletions": 5}, "files": [{"sha": "48dc90932500be480fd370d503b984497f1ca059", "filename": "crates/ra_ide_api/src/expand_macro.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/3ccd05fedc46796f793295901a8619492256468e/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ccd05fedc46796f793295901a8619492256468e/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs?ref=3ccd05fedc46796f793295901a8619492256468e", "patch": "@@ -0,0 +1,112 @@\n+//! FIXME: write short doc here\n+\n+use crate::{db::RootDatabase, FilePosition};\n+use ra_db::SourceDatabase;\n+use rustc_hash::FxHashMap;\n+\n+use hir::db::AstDatabase;\n+use ra_syntax::{\n+    algo::{find_node_at_offset, replace_descendants},\n+    ast::{self},\n+    AstNode, NodeOrToken, SyntaxKind, SyntaxNode, WalkEvent,\n+};\n+\n+fn insert_whitespaces(syn: SyntaxNode) -> String {\n+    let mut res = String::new();\n+\n+    let mut token_iter = syn\n+        .preorder_with_tokens()\n+        .filter_map(|event| {\n+            if let WalkEvent::Enter(NodeOrToken::Token(token)) = event {\n+                Some(token)\n+            } else {\n+                None\n+            }\n+        })\n+        .peekable();\n+\n+    while let Some(token) = token_iter.next() {\n+        res += &token.text().to_string();\n+        if token.kind().is_keyword()\n+            || token.kind().is_literal()\n+            || token.kind() == SyntaxKind::IDENT\n+        {\n+            if !token_iter.peek().map(|it| it.kind().is_punct()).unwrap_or(false) {\n+                res += \" \";\n+            }\n+        }\n+    }\n+\n+    res\n+}\n+\n+fn expand_macro_recur(\n+    db: &RootDatabase,\n+    source: hir::Source<&SyntaxNode>,\n+    macro_call: &ast::MacroCall,\n+) -> Option<SyntaxNode> {\n+    let analyzer = hir::SourceAnalyzer::new(db, source, None);\n+    let expansion = analyzer.expand(db, &macro_call)?;\n+    let expanded: SyntaxNode = db.parse_or_expand(expansion.file_id())?;\n+\n+    let children = expanded.descendants().filter_map(ast::MacroCall::cast);\n+    let mut replaces = FxHashMap::default();\n+\n+    for child in children.into_iter() {\n+        let source = hir::Source::new(expansion.file_id(), source.ast);\n+        let new_node = expand_macro_recur(db, source, &child)?;\n+\n+        replaces.insert(child.syntax().clone().into(), new_node.into());\n+    }\n+\n+    Some(replace_descendants(&expanded, &replaces))\n+}\n+\n+pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<(String, String)> {\n+    let parse = db.parse(position.file_id);\n+    let file = parse.tree();\n+    let name_ref = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)?;\n+    let mac = name_ref.syntax().ancestors().find_map(ast::MacroCall::cast)?;\n+\n+    let source = hir::Source::new(position.file_id.into(), mac.syntax());\n+\n+    let expanded = expand_macro_recur(db, source, &mac)?;\n+\n+    // FIXME:\n+    // macro expansion may lose all white space information\n+    // But we hope someday we can use ra_fmt for that\n+    let res = insert_whitespaces(expanded);\n+    Some((name_ref.text().to_string(), res))\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::mock_analysis::analysis_and_position;\n+\n+    fn check_expand_macro(fixture: &str, expected: (&str, &str)) {\n+        let (analysis, pos) = analysis_and_position(fixture);\n+\n+        let result = analysis.expand_macro(pos).unwrap().unwrap();\n+        assert_eq!(result, (expected.0.to_string(), expected.1.to_string()));\n+    }\n+\n+    #[test]\n+    fn macro_expand_recursive_expansion() {\n+        check_expand_macro(\n+            r#\"\n+        //- /lib.rs\n+        macro_rules! bar {\n+            () => { fn  b() {} }\n+        }\n+        macro_rules! foo {\n+            () => { bar!(); }\n+        }\n+        macro_rules! baz {\n+            () => { foo!(); }\n+        }        \n+        f<|>oo!();\n+        \"#,\n+            (\"foo\", \"fn b(){}\"),\n+        );\n+    }\n+}"}, {"sha": "d1b73ef6fa18e38acdefd544f6dfb8cf5321da14", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ccd05fedc46796f793295901a8619492256468e/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ccd05fedc46796f793295901a8619492256468e/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=3ccd05fedc46796f793295901a8619492256468e", "patch": "@@ -42,6 +42,7 @@ mod display;\n mod inlay_hints;\n mod wasm_shims;\n mod expand;\n+mod expand_macro;\n \n #[cfg(test)]\n mod marks;\n@@ -296,6 +297,10 @@ impl Analysis {\n         self.with_db(|db| syntax_tree::syntax_tree(&db, file_id, text_range))\n     }\n \n+    pub fn expand_macro(&self, position: FilePosition) -> Cancelable<Option<(String, String)>> {\n+        self.with_db(|db| expand_macro::expand_macro(db, position))\n+    }\n+\n     /// Returns an edit to remove all newlines in the range, cleaning up minor\n     /// stuff like trailing commas.\n     pub fn join_lines(&self, frange: FileRange) -> Cancelable<SourceChange> {"}, {"sha": "f828efdee5b1092f334df6035ab2ec7e5bfc8751", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ccd05fedc46796f793295901a8619492256468e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ccd05fedc46796f793295901a8619492256468e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=3ccd05fedc46796f793295901a8619492256468e", "patch": "@@ -436,6 +436,7 @@ fn on_request(\n         })?\n         .on::<req::AnalyzerStatus>(handlers::handle_analyzer_status)?\n         .on::<req::SyntaxTree>(handlers::handle_syntax_tree)?\n+        .on::<req::ExpandMacro>(handlers::handle_expand_macro)?\n         .on::<req::OnTypeFormatting>(handlers::handle_on_type_formatting)?\n         .on::<req::DocumentSymbolRequest>(handlers::handle_document_symbol)?\n         .on::<req::WorkspaceSymbol>(handlers::handle_workspace_symbol)?"}, {"sha": "783b0a82733254f2c9d67e39faec38a18917107a", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ccd05fedc46796f793295901a8619492256468e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ccd05fedc46796f793295901a8619492256468e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=3ccd05fedc46796f793295901a8619492256468e", "patch": "@@ -47,6 +47,21 @@ pub fn handle_syntax_tree(world: WorldSnapshot, params: req::SyntaxTreeParams) -\n     Ok(res)\n }\n \n+pub fn handle_expand_macro(\n+    world: WorldSnapshot,\n+    params: req::ExpandMacroParams,\n+) -> Result<Option<(String, String)>> {\n+    let _p = profile(\"handle_expand_macro\");\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(file_id)?;\n+    let offset = params.position.map(|p| p.conv_with(&line_index));\n+\n+    match offset {\n+        None => Ok(None),\n+        Some(offset) => Ok(world.analysis().expand_macro(FilePosition { file_id, offset })?),\n+    }\n+}\n+\n pub fn handle_selection_range(\n     world: WorldSnapshot,\n     params: req::SelectionRangeParams,"}, {"sha": "dbc0e9624cbaf55f9fc11773c93756908f0a8248", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ccd05fedc46796f793295901a8619492256468e/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ccd05fedc46796f793295901a8619492256468e/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=3ccd05fedc46796f793295901a8619492256468e", "patch": "@@ -45,6 +45,21 @@ pub struct SyntaxTreeParams {\n     pub range: Option<Range>,\n }\n \n+pub enum ExpandMacro {}\n+\n+impl Request for ExpandMacro {\n+    type Params = ExpandMacroParams;\n+    type Result = Option<(String, String)>;\n+    const METHOD: &'static str = \"rust-analyzer/expandMacro\";\n+}\n+\n+#[derive(Deserialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ExpandMacroParams {\n+    pub text_document: TextDocumentIdentifier,\n+    pub position: Option<Position>,\n+}\n+\n pub enum SelectionRangeRequest {}\n \n impl Request for SelectionRangeRequest {"}, {"sha": "bf19231905debcbce213b3f4f24b13dd85501adf", "filename": "editors/code/src/commands/expand_macro.ts", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3ccd05fedc46796f793295901a8619492256468e/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3ccd05fedc46796f793295901a8619492256468e/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts?ref=3ccd05fedc46796f793295901a8619492256468e", "patch": "@@ -0,0 +1,45 @@\n+import * as vscode from 'vscode';\n+import { Position, TextDocumentIdentifier } from 'vscode-languageclient';\n+import { Server } from '../server';\n+\n+type ExpandMacroResult = [string, string]\n+\n+function code_format([name, text]: [string, string]): vscode.MarkdownString {\n+    const markdown = new vscode.MarkdownString(`#### Recursive expansion of ${name}! macro`);\n+    markdown.appendCodeblock(text, 'rust');    \n+    return markdown;\n+}\n+\n+export class ExpandMacroHoverProvider implements vscode.HoverProvider {\n+    public provideHover(\n+        document: vscode.TextDocument,\n+        position: vscode.Position,\n+        token: vscode.CancellationToken,\n+    ): Thenable<vscode.Hover | null> | null {\n+        async function handle() {\n+            const request: MacroExpandParams = {\n+                textDocument: { uri: document.uri.toString() },\n+                position,\n+            };\n+            const result = await Server.client.sendRequest<ExpandMacroResult>(\n+                'rust-analyzer/expandMacro',\n+                request\n+            );\n+            if (result != null) {\n+                const formated = code_format(result);\n+                return new vscode.Hover(formated);\n+            }\n+\n+            return null;\n+        };\n+\n+        return handle();\n+    }\n+}\n+\n+\n+interface MacroExpandParams {\n+    textDocument: TextDocumentIdentifier;\n+    position: Position;\n+}\n+"}, {"sha": "2ade6d331a76ef6cac0c721a024dcfac041165dd", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ccd05fedc46796f793295901a8619492256468e/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3ccd05fedc46796f793295901a8619492256468e/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=3ccd05fedc46796f793295901a8619492256468e", "patch": "@@ -1,5 +1,6 @@\n import * as analyzerStatus from './analyzer_status';\n import * as applySourceChange from './apply_source_change';\n+import * as expandMacro from './expand_macro';\n import * as inlayHints from './inlay_hints';\n import * as joinLines from './join_lines';\n import * as matchingBrace from './matching_brace';\n@@ -11,6 +12,7 @@ import * as syntaxTree from './syntaxTree';\n export {\n     analyzerStatus,\n     applySourceChange,\n+    expandMacro,\n     joinLines,\n     matchingBrace,\n     parentModule,"}, {"sha": "1dfa6046fa87c6eddfdd8a41c5a94fc0bd0f667e", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3ccd05fedc46796f793295901a8619492256468e/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3ccd05fedc46796f793295901a8619492256468e/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=3ccd05fedc46796f793295901a8619492256468e", "patch": "@@ -3,6 +3,7 @@ import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n import { CargoWatchProvider } from './commands/cargo_watch';\n+import { ExpandMacroHoverProvider } from './commands/expand_macro'\n import { HintsUpdater } from './commands/inlay_hints';\n import {\n     interactivelyStartCargoWatch,\n@@ -91,11 +92,11 @@ export function activate(context: vscode.ExtensionContext) {\n     const allNotifications: Iterable<\n         [string, lc.GenericNotificationHandler]\n     > = [\n-        [\n-            'rust-analyzer/publishDecorations',\n-            notifications.publishDecorations.handle\n-        ]\n-    ];\n+            [\n+                'rust-analyzer/publishDecorations',\n+                notifications.publishDecorations.handle\n+            ]\n+        ];\n     const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n \n     // The events below are plain old javascript events, triggered and handled by vscode\n@@ -121,6 +122,15 @@ export function activate(context: vscode.ExtensionContext) {\n         context.subscriptions\n     );\n \n+    const expandMacroContentProvider = new ExpandMacroHoverProvider();\n+\n+    disposeOnDeactivation(\n+        vscode.languages.registerHoverProvider(\n+            'rust',\n+            expandMacroContentProvider\n+        )\n+    );\n+\n     const startServer = () => Server.start(allNotifications);\n     const reloadCommand = () => reloadServer(startServer);\n "}]}