{"sha": "4dded23925994103e3e793d5edbe0d30222cdaa4", "node_id": "C_kwDOAAsO6NoAKDRkZGVkMjM5MjU5OTQxMDNlM2U3OTNkNWVkYmUwZDMwMjIyY2RhYTQ", "commit": {"author": {"name": "Ibraheem Ahmed", "email": "ibraheem@ibraheem.ca", "date": "2022-03-01T00:59:21Z"}, "committer": {"name": "Ibraheem Ahmed", "email": "ibraheem@ibraheem.ca", "date": "2022-03-01T01:10:17Z"}, "message": "add `special_module_name` lint", "tree": {"sha": "b20627167e9dda33ebc4582078b6faac73b40184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b20627167e9dda33ebc4582078b6faac73b40184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dded23925994103e3e793d5edbe0d30222cdaa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dded23925994103e3e793d5edbe0d30222cdaa4", "html_url": "https://github.com/rust-lang/rust/commit/4dded23925994103e3e793d5edbe0d30222cdaa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dded23925994103e3e793d5edbe0d30222cdaa4/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b043faba34ccc053a4d0110634c323f6c03765e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b043faba34ccc053a4d0110634c323f6c03765e", "html_url": "https://github.com/rust-lang/rust/commit/4b043faba34ccc053a4d0110634c323f6c03765e"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "961e1e9507b97a64d8e6eb163222d33e6e07c720", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4dded23925994103e3e793d5edbe0d30222cdaa4/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dded23925994103e3e793d5edbe0d30222cdaa4/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=4dded23925994103e3e793d5edbe0d30222cdaa4", "patch": "@@ -3248,3 +3248,77 @@ impl<'tcx> LateLintPass<'tcx> for NamedAsmLabels {\n         }\n     }\n }\n+\n+declare_lint! {\n+    /// The `special_module_name` lint detects module\n+    /// declarations for files that have a special meaning.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// mod lib;\n+    ///\n+    /// fn main() {\n+    ///     lib::run();\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Cargo recognizes `lib.rs` and `main.rs` as the root of a\n+    /// library or binary crate, so declaring them as modules\n+    /// will lead to miscompilation of the crate unless configured\n+    /// explicitly.\n+    ///\n+    /// To access a library from a binary target within the same crate,\n+    /// use `your_crate_name::` as the path path instead of `lib::`:\n+    ///\n+    /// ```rust,compile_fail\n+    /// // bar/src/lib.rs\n+    /// fn run() {\n+    ///     // ...\n+    /// }\n+    ///\n+    /// // bar/src/main.rs\n+    /// fn main() {\n+    ///     bar::run();\n+    /// }\n+    /// ```\n+    ///\n+    /// Binary targets cannot be used as libraries and so declaring\n+    /// one as a module is not allowed.\n+    pub SPECIAL_MODULE_NAME,\n+    Warn,\n+    \"module declarations for files with a special meaning\",\n+}\n+\n+declare_lint_pass!(SpecialModuleName => [SPECIAL_MODULE_NAME]);\n+\n+impl EarlyLintPass for SpecialModuleName {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &ast::Crate) {\n+        for item in &krate.items {\n+            if let ast::ItemKind::Mod(..) = item.kind {\n+                if item.attrs.iter().any(|a| a.has_name(sym::path)) {\n+                    continue;\n+                }\n+\n+                match item.ident.name.as_str() {\n+                    \"lib\" => cx.struct_span_lint(SPECIAL_MODULE_NAME, item.span, |lint| {\n+                        lint.build(\"found module declaration for lib.rs\")\n+                            .note(\"lib.rs is the root of this crate's library target\")\n+                            .help(\"to refer to it from other targets, use the library's name as the path\")\n+                            .emit()\n+                    }),\n+                    \"main\" => cx.struct_span_lint(SPECIAL_MODULE_NAME, item.span, |lint| {\n+                        lint.build(\"found module declaration for main.rs\")\n+                            .note(\"a binary crate cannot be used as library\")\n+                            .emit()\n+                    }),\n+                    _ => continue\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "107df79c3809b9af96e8ba39ebba69469dabf4e2", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dded23925994103e3e793d5edbe0d30222cdaa4/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dded23925994103e3e793d5edbe0d30222cdaa4/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=4dded23925994103e3e793d5edbe0d30222cdaa4", "patch": "@@ -129,6 +129,7 @@ macro_rules! early_lint_passes {\n                 UnusedBraces: UnusedBraces,\n                 UnusedImportBraces: UnusedImportBraces,\n                 UnsafeCode: UnsafeCode,\n+                SpecialModuleName: SpecialModuleName,\n                 AnonymousParameters: AnonymousParameters,\n                 EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::default(),\n                 NonCamelCaseTypes: NonCamelCaseTypes,"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/modules/dummy.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4dded23925994103e3e793d5edbe0d30222cdaa4/src%2Ftest%2Fui%2Fmodules%2Fdummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dded23925994103e3e793d5edbe0d30222cdaa4/src%2Ftest%2Fui%2Fmodules%2Fdummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fdummy.rs?ref=4dded23925994103e3e793d5edbe0d30222cdaa4"}, {"sha": "15c59b2da828ca33dd668274da54d1b1fd04ad07", "filename": "src/test/ui/modules/special_module_name.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4dded23925994103e3e793d5edbe0d30222cdaa4/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dded23925994103e3e793d5edbe0d30222cdaa4/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.rs?ref=4dded23925994103e3e793d5edbe0d30222cdaa4", "patch": "@@ -0,0 +1,8 @@\n+mod lib;\n+//~^ WARN found module declaration for lib.rs\n+//~| ERROR file not found for module `lib`\n+mod main;\n+//~^ WARN found module declaration for main.rs\n+//~| ERROR file not found for module `main`\n+\n+fn main() {}"}, {"sha": "8b3da29386df2b7b0aba84e98dfcb2d809581773", "filename": "src/test/ui/modules/special_module_name.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4dded23925994103e3e793d5edbe0d30222cdaa4/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dded23925994103e3e793d5edbe0d30222cdaa4/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.stderr?ref=4dded23925994103e3e793d5edbe0d30222cdaa4", "patch": "@@ -0,0 +1,37 @@\n+error[E0583]: file not found for module `lib`\n+  --> $DIR/special_module_name.rs:1:1\n+   |\n+LL | mod lib;\n+   | ^^^^^^^^\n+   |\n+   = help: to create the module `lib`, create file \"$DIR/lib.rs\" or \"$DIR/lib/mod.rs\"\n+\n+error[E0583]: file not found for module `main`\n+  --> $DIR/special_module_name.rs:4:1\n+   |\n+LL | mod main;\n+   | ^^^^^^^^^\n+   |\n+   = help: to create the module `main`, create file \"$DIR/main.rs\" or \"$DIR/main/mod.rs\"\n+\n+warning: found module declaration for lib.rs\n+  --> $DIR/special_module_name.rs:1:1\n+   |\n+LL | mod lib;\n+   | ^^^^^^^^\n+   |\n+   = note: `#[warn(special_module_name)]` on by default\n+   = note: lib.rs is the root of this crate's library target\n+   = help: to refer to it from other targets, use the library's name as the path\n+\n+warning: found module declaration for main.rs\n+  --> $DIR/special_module_name.rs:4:1\n+   |\n+LL | mod main;\n+   | ^^^^^^^^^\n+   |\n+   = note: a binary crate cannot be used as library\n+\n+error: aborting due to 2 previous errors; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0583`."}, {"sha": "cae06b49ee0b79654aabeff2c28f908546ddb71e", "filename": "src/test/ui/modules/special_module_name_ignore.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4dded23925994103e3e793d5edbe0d30222cdaa4/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dded23925994103e3e793d5edbe0d30222cdaa4/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name_ignore.rs?ref=4dded23925994103e3e793d5edbe0d30222cdaa4", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+\n+#[path = \"dummy.rs\"]\n+mod lib;\n+\n+#[path = \"dummy.rs\"]\n+mod main;\n+\n+fn main() {}"}]}