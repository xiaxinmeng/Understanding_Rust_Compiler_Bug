{"sha": "12d90aa949f34712a374984bfaf88a5bf2f08685", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZDkwYWE5NDlmMzQ3MTJhMzc0OTg0YmZhZjg4YTViZjJmMDg2ODU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-28T08:29:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-28T08:29:56Z"}, "message": "put the MaybeUninit inside the UnsafeCell", "tree": {"sha": "84058d85f4269cf4ce2fcb3cf0460dc2fc6eb0ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84058d85f4269cf4ce2fcb3cf0460dc2fc6eb0ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d90aa949f34712a374984bfaf88a5bf2f08685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d90aa949f34712a374984bfaf88a5bf2f08685", "html_url": "https://github.com/rust-lang/rust/commit/12d90aa949f34712a374984bfaf88a5bf2f08685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d90aa949f34712a374984bfaf88a5bf2f08685/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4f12344c68530d1f42c5b00c10ab417137c0491", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f12344c68530d1f42c5b00c10ab417137c0491", "html_url": "https://github.com/rust-lang/rust/commit/a4f12344c68530d1f42c5b00c10ab417137c0491"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "b61a5c973a766ab08773401d958a23d2a9aed22f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12d90aa949f34712a374984bfaf88a5bf2f08685/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d90aa949f34712a374984bfaf88a5bf2f08685/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=12d90aa949f34712a374984bfaf88a5bf2f08685", "patch": "@@ -1106,9 +1106,6 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state, otherwise this will immediately cause undefined behavior.\n-    // FIXME: We currently rely on the above being incorrect, i.e., we have references\n-    // to uninitialized data (e.g. in `libstd/sys/windows/mutex.rs`).  We should make\n-    // a final decision about the rules before stabilization.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub unsafe fn get_ref(&self) -> &T {"}, {"sha": "38ba0c7e035e5be8e1d5f3e83cd2e8cb40c26b7a", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/12d90aa949f34712a374984bfaf88a5bf2f08685/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d90aa949f34712a374984bfaf88a5bf2f08685/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=12d90aa949f34712a374984bfaf88a5bf2f08685", "patch": "@@ -157,37 +157,34 @@ fn kind() -> Kind {\n     return ret;\n }\n \n-pub struct ReentrantMutex { inner: MaybeUninit<UnsafeCell<c::CRITICAL_SECTION>> }\n+pub struct ReentrantMutex { inner: UnsafeCell<MaybeUninit<c::CRITICAL_SECTION>> }\n \n unsafe impl Send for ReentrantMutex {}\n unsafe impl Sync for ReentrantMutex {}\n \n impl ReentrantMutex {\n     pub fn uninitialized() -> ReentrantMutex {\n-        ReentrantMutex { inner: MaybeUninit::uninitialized() }\n+        ReentrantMutex { inner: UnsafeCell::new(MaybeUninit::uninitialized()) }\n     }\n \n     pub unsafe fn init(&mut self) {\n-        // FIXME: Technically, this is calling `get_ref` on an uninitialized\n-        // `MaybeUninit`.  Revisit this once we decided whether that is valid\n-        // or not.\n-        c::InitializeCriticalSection(self.inner.get_ref().get());\n+        c::InitializeCriticalSection(self.inner.get().as_mut_ptr());\n     }\n \n     pub unsafe fn lock(&self) {\n-        c::EnterCriticalSection(self.inner.get_ref().get());\n+        c::EnterCriticalSection(self.inner.get().get_ref());\n     }\n \n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        c::TryEnterCriticalSection(self.inner.get_ref().get()) != 0\n+        c::TryEnterCriticalSection(self.inner.get().get_ref()) != 0\n     }\n \n     pub unsafe fn unlock(&self) {\n-        c::LeaveCriticalSection(self.inner.get_ref().get());\n+        c::LeaveCriticalSection(self.inner.get().get_ref());\n     }\n \n     pub unsafe fn destroy(&self) {\n-        c::DeleteCriticalSection(self.inner.get_ref().get());\n+        c::DeleteCriticalSection(self.inner.get().get_ref());\n     }\n }"}]}