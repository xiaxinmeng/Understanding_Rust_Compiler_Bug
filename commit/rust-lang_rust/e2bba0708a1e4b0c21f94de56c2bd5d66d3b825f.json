{"sha": "e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "node_id": "C_kwDOAAsO6NoAKGUyYmJhMDcwOGExZTRiMGMyMWY5NGRlNTZjMmJkNWQ2NmQzYjgyNWY", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-26T23:14:47Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-04-04T21:06:35Z"}, "message": "Fix list length", "tree": {"sha": "f69b605da80489e297384a9fdde5cc99396f4e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f69b605da80489e297384a9fdde5cc99396f4e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "html_url": "https://github.com/rust-lang/rust/commit/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "html_url": "https://github.com/rust-lang/rust/commit/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2"}], "stats": {"total": 226, "additions": 225, "deletions": 1}, "files": [{"sha": "fdafb2d3d417e3fcfc18e0c39f8d3d309cff659d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -1813,7 +1813,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         let len = impl_candidates.len();\n-        let end = if impl_candidates.len() <= 5 { impl_candidates.len() } else { 4 };\n+        let end = if impl_candidates.len() <= 9 { impl_candidates.len() } else { 8 };\n \n         let normalize = |candidate| {\n             self.tcx.infer_ctxt().enter(|ref infcx| {"}, {"sha": "715e52b41e75c26356e458d5a05c7feb200a802a", "filename": "src/test/ui/binop/binop-mul-i32-f32.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -10,6 +10,10 @@ LL |     x * y\n              <&i32 as Mul<&i32>>\n              <i32 as Mul<&i32>>\n              <i32 as Mul>\n+             <&'a f32 as Mul<f32>>\n+             <&'a f64 as Mul<f64>>\n+             <&'a i128 as Mul<i128>>\n+             <&'a i16 as Mul<i16>>\n            and 49 others\n \n error: aborting due to previous error"}, {"sha": "16b06a0198b2731d204bf7793d54f9cb83dbc70f", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -21,6 +21,10 @@ LL |     assert_eq!(foo, y);\n              <extern \"C\" fn(A) -> Ret as Debug>\n              <extern \"C\" fn(A, ...) -> Ret as Debug>\n              <extern \"C\" fn(A, B) -> Ret as Debug>\n+             <extern \"C\" fn(A, B, ...) -> Ret as Debug>\n+             <extern \"C\" fn(A, B, C) -> Ret as Debug>\n+             <extern \"C\" fn(A, B, C, ...) -> Ret as Debug>\n+             <extern \"C\" fn(A, B, C, D) -> Ret as Debug>\n            and 68 others\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "8fdb377751c245fb7b09131d59ea12c9cb847322", "filename": "src/test/ui/binop/shift-various-bad-types.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -10,6 +10,10 @@ LL |     22 >> p.char;\n              <&'a i128 as Shr<i16>>\n              <&'a i128 as Shr<i32>>\n              <&'a i128 as Shr<i64>>\n+             <&'a i128 as Shr<i8>>\n+             <&'a i128 as Shr<isize>>\n+             <&'a i128 as Shr<u128>>\n+             <&'a i128 as Shr<u16>>\n            and 568 others\n \n error[E0277]: no implementation for `{integer} >> &str`\n@@ -24,6 +28,10 @@ LL |     22 >> p.str;\n              <&'a i128 as Shr<i16>>\n              <&'a i128 as Shr<i32>>\n              <&'a i128 as Shr<i64>>\n+             <&'a i128 as Shr<i8>>\n+             <&'a i128 as Shr<isize>>\n+             <&'a i128 as Shr<u128>>\n+             <&'a i128 as Shr<u16>>\n            and 568 others\n \n error[E0277]: no implementation for `{integer} >> &Panolpy`\n@@ -38,6 +46,10 @@ LL |     22 >> p;\n              <&'a i128 as Shr<i16>>\n              <&'a i128 as Shr<i32>>\n              <&'a i128 as Shr<i64>>\n+             <&'a i128 as Shr<i8>>\n+             <&'a i128 as Shr<isize>>\n+             <&'a i128 as Shr<u128>>\n+             <&'a i128 as Shr<u16>>\n            and 568 others\n \n error[E0308]: mismatched types"}, {"sha": "fcbb41bb4fcc45ab6b711b982fbdb2a8936c1b60", "filename": "src/test/ui/const-generics/exhaustive-value.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -9,6 +9,10 @@ LL |     <() as Foo<N>>::test()\n              <() as Foo<100_u8>>\n              <() as Foo<101_u8>>\n              <() as Foo<102_u8>>\n+             <() as Foo<103_u8>>\n+             <() as Foo<104_u8>>\n+             <() as Foo<105_u8>>\n+             <() as Foo<106_u8>>\n            and 248 others\n \n error: aborting due to previous error"}, {"sha": "d2d68506d4e1c22cbc170e0122b3f66c39383df4", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -16,6 +16,10 @@ LL |     = [0; (i8::MAX + 1u8) as usize];\n              <&i8 as Add<&i8>>\n              <i8 as Add<&i8>>\n              <i8 as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n            and 48 others\n \n error: aborting due to 2 previous errors"}, {"sha": "818e3bc15b19d7ce9958248135e49c91d4e7fad3", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -16,6 +16,10 @@ LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n              <&i8 as Add<&i8>>\n              <i8 as Add<&i8>>\n              <i8 as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n            and 48 others\n \n error[E0604]: only `u8` can be cast as `char`, not `i8`"}, {"sha": "45459b931caac298287d5b3c008468b88c4bd259", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -26,6 +26,10 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n              <&[T] as PartialEq<Vec<U, A>>>\n              <&mut [B] as PartialEq<[A; N]>>\n              <&mut [T] as PartialEq<Vec<U, A>>>\n+             <[A; N] as PartialEq<&[B]>>\n+             <[A; N] as PartialEq<&mut [B]>>\n+             <[A; N] as PartialEq<[B; N]>>\n+             <[A; N] as PartialEq<[B]>>\n            and 3 others\n \n error: aborting due to 3 previous errors"}, {"sha": "f25c7ce00e548ccbd1acab1af23ca69622142ab3", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -9,6 +9,8 @@ LL |     f1.foo(1usize);\n              <Bar as Foo<i32>>\n              <Bar as Foo<i8>>\n              <Bar as Foo<u16>>\n+             <Bar as Foo<u32>>\n+             <Bar as Foo<u8>>\n \n error: aborting due to previous error\n "}, {"sha": "3aa863e900f4aa80848b236338465d848e0a6800", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -11,6 +11,11 @@ LL |     Foo::<i32>::bar(&1i8);\n              <i8 as Foo<u16>>\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n+             <i8 as Foo<u8>>\n+             <u8 as Foo<bool>>\n+             <u8 as Foo<u16>>\n+             <u8 as Foo<u32>>\n+             <u8 as Foo<u64>>\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:25:21\n@@ -25,6 +30,11 @@ LL |     Foo::<i32>::bar(&1u8);\n              <u8 as Foo<u16>>\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n+             <i8 as Foo<bool>>\n+             <i8 as Foo<u16>>\n+             <i8 as Foo<u32>>\n+             <i8 as Foo<u64>>\n+             <i8 as Foo<u8>>\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:26:21\n@@ -39,6 +49,8 @@ LL |     Foo::<i32>::bar(&true);\n              <bool as Foo<i8>>\n              <bool as Foo<u16>>\n              <bool as Foo<u32>>\n+             <bool as Foo<u64>>\n+             <bool as Foo<u8>>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "bd9d9e086e044efda113ce45615a14e2b1b69c28", "filename": "src/test/ui/did_you_mean/issue-49746-unicode-confusable-in-float-literal-expt.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -27,6 +27,10 @@ LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e\u221211; // m\u00b3\u22c5kg\u207b\u00b9\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n              <&'a i16 as Sub<i16>>\n+             <&'a i32 as Sub<i32>>\n+             <&'a i64 as Sub<i64>>\n+             <&'a i8 as Sub<i8>>\n+             <&'a isize as Sub<isize>>\n            and 48 others\n \n error: aborting due to 3 previous errors"}, {"sha": "9137183375aca00231290d49387aa5c71bc77502", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -29,6 +29,10 @@ LL |         n + sum_to(n - 1)\n              <&u32 as Add<&u32>>\n              <u32 as Add<&u32>>\n              <u32 as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n            and 48 others\n \n error: aborting due to 2 previous errors; 1 warning emitted"}, {"sha": "019677775987e69438785dc7bc90ce241ec3707c", "filename": "src/test/ui/issues/issue-11771.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -10,6 +10,10 @@ LL |     1 +\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error[E0277]: cannot add `()` to `{integer}`\n@@ -24,6 +28,10 @@ LL |     1 +\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error: aborting due to 2 previous errors"}, {"sha": "364fbbc981e649f8b9fd0120389c219f5f99fb65", "filename": "src/test/ui/issues/issue-24352.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -10,6 +10,10 @@ LL |     1.0f64 - 1\n              <&f64 as Sub<&f64>>\n              <f64 as Sub<&f64>>\n              <f64 as Sub>\n+             <&'a f32 as Sub<f32>>\n+             <&'a i128 as Sub<i128>>\n+             <&'a i16 as Sub<i16>>\n+             <&'a i32 as Sub<i32>>\n            and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |"}, {"sha": "a1e614807de4aeaac614db84edbf88a2b57829c0", "filename": "src/test/ui/issues/issue-50582.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -19,6 +19,10 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error: aborting due to 2 previous errors"}, {"sha": "c61d44bf89526a8b3d90b7e7d89622fbd1ee16f5", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -99,6 +99,10 @@ LL |     assert_eq!(Foo::Bar, i);\n              <extern \"C\" fn(A) -> Ret as Debug>\n              <extern \"C\" fn(A, ...) -> Ret as Debug>\n              <extern \"C\" fn(A, B) -> Ret as Debug>\n+             <extern \"C\" fn(A, B, ...) -> Ret as Debug>\n+             <extern \"C\" fn(A, B, C) -> Ret as Debug>\n+             <extern \"C\" fn(A, B, C, ...) -> Ret as Debug>\n+             <extern \"C\" fn(A, B, C, D) -> Ret as Debug>\n            and 68 others\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "29c9b872b581603c91c43f95bc7663781f4324b9", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -9,6 +9,10 @@ LL |     assert_copy::<&'static mut isize>();\n              <f32 as Copy>\n              <f64 as Copy>\n              <i128 as Copy>\n+             <i16 as Copy>\n+             <i32 as Copy>\n+             <i64 as Copy>\n+             <i8 as Copy>\n            and 6 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n@@ -27,6 +31,10 @@ LL |     assert_copy::<&'a mut isize>();\n              <f32 as Copy>\n              <f64 as Copy>\n              <i128 as Copy>\n+             <i16 as Copy>\n+             <i32 as Copy>\n+             <i64 as Copy>\n+             <i8 as Copy>\n            and 6 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18"}, {"sha": "9df6c92d1e5785fa30d5f627062732a0e503ce83", "filename": "src/test/ui/lexer/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -43,6 +43,10 @@ LL |     if x == y {}\n              <&'a str as PartialEq<String>>\n              <&'b str as PartialEq<Cow<'a, str>>>\n              <str as PartialEq<Cow<'a, str>>>\n+             <str as PartialEq<OsStr>>\n+             <str as PartialEq<OsString>>\n+             <str as PartialEq<String>>\n+             <str as PartialEq>\n            and 4 others\n \n error[E0308]: mismatched types\n@@ -65,6 +69,10 @@ LL |     if x == z {}\n              <&'a str as PartialEq<String>>\n              <&'b str as PartialEq<Cow<'a, str>>>\n              <str as PartialEq<Cow<'a, str>>>\n+             <str as PartialEq<OsStr>>\n+             <str as PartialEq<OsString>>\n+             <str as PartialEq<String>>\n+             <str as PartialEq>\n            and 4 others\n \n error: aborting due to 6 previous errors"}, {"sha": "843ae5044c37a9d1a7102e415061ff33bd96b4cb", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -10,6 +10,10 @@ LL |     1 + Some(1);\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error[E0277]: cannot subtract `Option<{integer}>` from `usize`\n@@ -24,6 +28,10 @@ LL |     2 as usize - Some(1);\n              <&usize as Sub<&usize>>\n              <usize as Sub<&usize>>\n              <usize as Sub>\n+             <&'a f32 as Sub<f32>>\n+             <&'a f64 as Sub<f64>>\n+             <&'a i128 as Sub<i128>>\n+             <&'a i16 as Sub<i16>>\n            and 48 others\n \n error[E0277]: cannot multiply `{integer}` by `()`\n@@ -38,6 +46,10 @@ LL |     3 * ();\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n              <&'a i16 as Mul<i16>>\n+             <&'a i32 as Mul<i32>>\n+             <&'a i64 as Mul<i64>>\n+             <&'a i8 as Mul<i8>>\n+             <&'a isize as Mul<isize>>\n            and 49 others\n \n error[E0277]: cannot divide `{integer}` by `&str`\n@@ -52,6 +64,10 @@ LL |     4 / \"\";\n              <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>\n              <&'a i16 as Div<i16>>\n+             <&'a i32 as Div<i32>>\n+             <&'a i64 as Div<i64>>\n+             <&'a i8 as Div<i8>>\n+             <&'a isize as Div<isize>>\n            and 54 others\n \n error[E0277]: can't compare `{integer}` with `String`\n@@ -66,6 +82,10 @@ LL |     5 < String::new();\n              <f64 as PartialOrd>\n              <i128 as PartialOrd>\n              <i16 as PartialOrd>\n+             <i32 as PartialOrd>\n+             <i64 as PartialOrd>\n+             <i8 as PartialOrd>\n+             <isize as PartialOrd>\n            and 6 others\n \n error[E0277]: can't compare `{integer}` with `Result<{integer}, _>`\n@@ -80,6 +100,10 @@ LL |     6 == Ok(1);\n              <f64 as PartialEq>\n              <i128 as PartialEq>\n              <i16 as PartialEq>\n+             <i32 as PartialEq>\n+             <i64 as PartialEq>\n+             <i8 as PartialEq>\n+             <isize as PartialEq>\n            and 6 others\n \n error: aborting due to 6 previous errors"}, {"sha": "cfb5d28e7674bedad185f10daa80e977fc9632d0", "filename": "src/test/ui/never_type/issue-13352.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -10,6 +10,10 @@ LL |     2_usize + (loop {});\n              <&usize as Add<&usize>>\n              <usize as Add<&usize>>\n              <usize as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n            and 48 others\n \n error: aborting due to previous error"}, {"sha": "431cbf81b01bd5408fc3aacf85da3c9c91ac7da4", "filename": "src/test/ui/numbers-arithmetic/not-suggest-float-literal.stderr", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -10,6 +10,10 @@ LL |     x + 100.0\n              <&u8 as Add<&u8>>\n              <u8 as Add<&u8>>\n              <u8 as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n            and 48 others\n \n error[E0277]: cannot add `&str` to `f64`\n@@ -24,6 +28,10 @@ LL |     x + \"foo\"\n              <&f64 as Add<&f64>>\n              <f64 as Add<&f64>>\n              <f64 as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n            and 48 others\n \n error[E0277]: cannot add `{integer}` to `f64`\n@@ -38,6 +46,10 @@ LL |     x + y\n              <&f64 as Add<&f64>>\n              <f64 as Add<&f64>>\n              <f64 as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n            and 48 others\n \n error[E0277]: cannot subtract `{float}` from `u8`\n@@ -52,6 +64,10 @@ LL |     x - 100.0\n              <&u8 as Sub<&u8>>\n              <u8 as Sub<&u8>>\n              <u8 as Sub>\n+             <&'a f32 as Sub<f32>>\n+             <&'a f64 as Sub<f64>>\n+             <&'a i128 as Sub<i128>>\n+             <&'a i16 as Sub<i16>>\n            and 48 others\n \n error[E0277]: cannot subtract `&str` from `f64`\n@@ -66,6 +82,10 @@ LL |     x - \"foo\"\n              <&f64 as Sub<&f64>>\n              <f64 as Sub<&f64>>\n              <f64 as Sub>\n+             <&'a f32 as Sub<f32>>\n+             <&'a i128 as Sub<i128>>\n+             <&'a i16 as Sub<i16>>\n+             <&'a i32 as Sub<i32>>\n            and 48 others\n \n error[E0277]: cannot subtract `{integer}` from `f64`\n@@ -80,6 +100,10 @@ LL |     x - y\n              <&f64 as Sub<&f64>>\n              <f64 as Sub<&f64>>\n              <f64 as Sub>\n+             <&'a f32 as Sub<f32>>\n+             <&'a i128 as Sub<i128>>\n+             <&'a i16 as Sub<i16>>\n+             <&'a i32 as Sub<i32>>\n            and 48 others\n \n error[E0277]: cannot multiply `u8` by `{float}`\n@@ -94,6 +118,10 @@ LL |     x * 100.0\n              <&u8 as Mul<&u8>>\n              <u8 as Mul<&u8>>\n              <u8 as Mul>\n+             <&'a f32 as Mul<f32>>\n+             <&'a f64 as Mul<f64>>\n+             <&'a i128 as Mul<i128>>\n+             <&'a i16 as Mul<i16>>\n            and 49 others\n \n error[E0277]: cannot multiply `f64` by `&str`\n@@ -108,6 +136,10 @@ LL |     x * \"foo\"\n              <&f64 as Mul<&f64>>\n              <f64 as Mul<&f64>>\n              <f64 as Mul>\n+             <&'a f32 as Mul<f32>>\n+             <&'a i128 as Mul<i128>>\n+             <&'a i16 as Mul<i16>>\n+             <&'a i32 as Mul<i32>>\n            and 49 others\n \n error[E0277]: cannot multiply `f64` by `{integer}`\n@@ -122,6 +154,10 @@ LL |     x * y\n              <&f64 as Mul<&f64>>\n              <f64 as Mul<&f64>>\n              <f64 as Mul>\n+             <&'a f32 as Mul<f32>>\n+             <&'a i128 as Mul<i128>>\n+             <&'a i16 as Mul<i16>>\n+             <&'a i32 as Mul<i32>>\n            and 49 others\n \n error[E0277]: cannot divide `u8` by `{float}`\n@@ -136,6 +172,10 @@ LL |     x / 100.0\n              <&u8 as Div<&u8>>\n              <u8 as Div<&u8>>\n              <u8 as Div<NonZeroU8>>\n+             <u8 as Div>\n+             <&'a f32 as Div<f32>>\n+             <&'a f64 as Div<f64>>\n+             <&'a i128 as Div<i128>>\n            and 54 others\n \n error[E0277]: cannot divide `f64` by `&str`\n@@ -150,6 +190,10 @@ LL |     x / \"foo\"\n              <&f64 as Div<&f64>>\n              <f64 as Div<&f64>>\n              <f64 as Div>\n+             <&'a f32 as Div<f32>>\n+             <&'a i128 as Div<i128>>\n+             <&'a i16 as Div<i16>>\n+             <&'a i32 as Div<i32>>\n            and 54 others\n \n error[E0277]: cannot divide `f64` by `{integer}`\n@@ -164,6 +208,10 @@ LL |     x / y\n              <&f64 as Div<&f64>>\n              <f64 as Div<&f64>>\n              <f64 as Div>\n+             <&'a f32 as Div<f32>>\n+             <&'a i128 as Div<i128>>\n+             <&'a i16 as Div<i16>>\n+             <&'a i32 as Div<i32>>\n            and 54 others\n \n error: aborting due to 12 previous errors"}, {"sha": "543e3137fdd09ffefeeded2b3aeef4ddee68631a", "filename": "src/test/ui/numbers-arithmetic/suggest-float-literal.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -10,6 +10,10 @@ LL |     x + 100\n              <&f32 as Add<&f32>>\n              <f32 as Add<&f32>>\n              <f32 as Add>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n            and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -28,6 +32,10 @@ LL |     x + 100\n              <&f64 as Add<&f64>>\n              <f64 as Add<&f64>>\n              <f64 as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n            and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -46,6 +54,10 @@ LL |     x - 100\n              <&f32 as Sub<&f32>>\n              <f32 as Sub<&f32>>\n              <f32 as Sub>\n+             <&'a f64 as Sub<f64>>\n+             <&'a i128 as Sub<i128>>\n+             <&'a i16 as Sub<i16>>\n+             <&'a i32 as Sub<i32>>\n            and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -64,6 +76,10 @@ LL |     x - 100\n              <&f64 as Sub<&f64>>\n              <f64 as Sub<&f64>>\n              <f64 as Sub>\n+             <&'a f32 as Sub<f32>>\n+             <&'a i128 as Sub<i128>>\n+             <&'a i16 as Sub<i16>>\n+             <&'a i32 as Sub<i32>>\n            and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -82,6 +98,10 @@ LL |     x * 100\n              <&f32 as Mul<&f32>>\n              <f32 as Mul<&f32>>\n              <f32 as Mul>\n+             <&'a f64 as Mul<f64>>\n+             <&'a i128 as Mul<i128>>\n+             <&'a i16 as Mul<i16>>\n+             <&'a i32 as Mul<i32>>\n            and 49 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -100,6 +120,10 @@ LL |     x * 100\n              <&f64 as Mul<&f64>>\n              <f64 as Mul<&f64>>\n              <f64 as Mul>\n+             <&'a f32 as Mul<f32>>\n+             <&'a i128 as Mul<i128>>\n+             <&'a i16 as Mul<i16>>\n+             <&'a i32 as Mul<i32>>\n            and 49 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -118,6 +142,10 @@ LL |     x / 100\n              <&f32 as Div<&f32>>\n              <f32 as Div<&f32>>\n              <f32 as Div>\n+             <&'a f64 as Div<f64>>\n+             <&'a i128 as Div<i128>>\n+             <&'a i16 as Div<i16>>\n+             <&'a i32 as Div<i32>>\n            and 54 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -136,6 +164,10 @@ LL |     x / 100\n              <&f64 as Div<&f64>>\n              <f64 as Div<&f64>>\n              <f64 as Div>\n+             <&'a f32 as Div<f32>>\n+             <&'a i128 as Div<i128>>\n+             <&'a i16 as Div<i16>>\n+             <&'a i32 as Div<i32>>\n            and 54 others\n help: consider using a floating-point literal by writing it with `.0`\n    |"}, {"sha": "dee457ebd7f3fba88d9449f41fd01dd0bdb84db5", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -10,6 +10,10 @@ LL |     foo(1 as u32 +\n              <&u32 as Add<&u32>>\n              <u32 as Add<&u32>>\n              <u32 as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n            and 48 others\n \n error: aborting due to previous error"}, {"sha": "88a0f8f0650271667fed2557289419a611bab129", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -12,6 +12,8 @@ LL |     foo(String::new());\n              <String as From<&mut str>>\n              <String as From<&str>>\n              <String as From<Box<str>>>\n+             <String as From<Cow<'a, str>>>\n+             <String as From<char>>\n    = note: required because of the requirements on the impl of `Into<&str>` for `String`\n note: required by a bound in `foo`\n   --> $DIR/into-str.rs:1:31"}, {"sha": "6567eca38c81d069fb3e712f0a4e14d91c95bb05", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -12,6 +12,10 @@ LL |     Ok(Err(123_i32)?)\n              <u8 as From<bool>>\n              <f32 as From<i16>>\n              <f32 as From<i8>>\n+             <f32 as From<u16>>\n+             <f32 as From<u8>>\n+             <f64 as From<f32>>\n+             <f64 as From<i16>>\n            and 67 others\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n "}, {"sha": "15bbfeb87c6f306b5eed82f54b0c013348bac071", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -70,6 +70,10 @@ LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n              <&i32 as Add<&i32>>\n              <i32 as Add<&i32>>\n              <i32 as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n            and 48 others\n \n error: aborting due to 7 previous errors"}, {"sha": "9e2d8a6159c48270c90a74fbb2143b181e66aa33", "filename": "src/test/ui/typeck/issue-81293.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -25,6 +25,10 @@ LL |     a = c + b * 5;\n              <&usize as Add<&usize>>\n              <usize as Add<&usize>>\n              <usize as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n            and 48 others\n \n error: aborting due to 3 previous errors"}, {"sha": "64da15c505536d7fca391b0ff70c3497fe0d640c", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "patch": "@@ -10,6 +10,10 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n              <&i32 as Add<&i32>>\n              <i32 as Add<&i32>>\n              <i32 as Add>\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n            and 48 others\n \n error[E0308]: mismatched types"}]}