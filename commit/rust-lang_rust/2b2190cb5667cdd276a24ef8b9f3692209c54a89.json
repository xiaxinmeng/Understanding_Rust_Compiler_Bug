{"sha": "2b2190cb5667cdd276a24ef8b9f3692209c54a89", "node_id": "C_kwDOAAsO6NoAKDJiMjE5MGNiNTY2N2NkZDI3NmEyNGVmOGI5ZjM2OTIyMDljNTRhODk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-11T17:28:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-11T17:28:47Z"}, "message": "Auto merge of #9323 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "05ae66467781ff06bfd833eb3d087534213c9350", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05ae66467781ff06bfd833eb3d087534213c9350"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b2190cb5667cdd276a24ef8b9f3692209c54a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2190cb5667cdd276a24ef8b9f3692209c54a89", "html_url": "https://github.com/rust-lang/rust/commit/2b2190cb5667cdd276a24ef8b9f3692209c54a89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b2190cb5667cdd276a24ef8b9f3692209c54a89/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7e2cb4470f5288e6657166fb0fcdf4b7043517f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7e2cb4470f5288e6657166fb0fcdf4b7043517f", "html_url": "https://github.com/rust-lang/rust/commit/f7e2cb4470f5288e6657166fb0fcdf4b7043517f"}, {"sha": "280b527821c0d598bfd82df18490704f89d012e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/280b527821c0d598bfd82df18490704f89d012e8", "html_url": "https://github.com/rust-lang/rust/commit/280b527821c0d598bfd82df18490704f89d012e8"}], "stats": {"total": 203, "additions": 108, "deletions": 95}, "files": [{"sha": "d648cd7945ef269579351329a14301cc6037e2fd", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.64\"\n+version = \"0.1.65\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "10a8f31f4573f790d63a4c786037abff9ce40004", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -438,7 +438,7 @@ fn setup_mod_file(path: &Path, lint: &LintData<'_>) -> io::Result<&'static str>\n     let mut lint_context = None;\n \n     let mut iter = rustc_lexer::tokenize(&file_contents).map(|t| {\n-        let range = offset..offset + t.len;\n+        let range = offset..offset + t.len as usize;\n         offset = range.end;\n \n         LintDeclSearchResult {"}, {"sha": "05e79a241884f43bb9175afd3b01b483e6596959", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -836,7 +836,7 @@ pub(crate) struct LintDeclSearchResult<'a> {\n fn parse_contents(contents: &str, module: &str, lints: &mut Vec<Lint>) {\n     let mut offset = 0usize;\n     let mut iter = tokenize(contents).map(|t| {\n-        let range = offset..offset + t.len;\n+        let range = offset..offset + t.len as usize;\n         offset = range.end;\n \n         LintDeclSearchResult {\n@@ -899,7 +899,7 @@ fn parse_contents(contents: &str, module: &str, lints: &mut Vec<Lint>) {\n fn parse_deprecated_contents(contents: &str, lints: &mut Vec<DeprecatedLint>) {\n     let mut offset = 0usize;\n     let mut iter = tokenize(contents).map(|t| {\n-        let range = offset..offset + t.len;\n+        let range = offset..offset + t.len as usize;\n         offset = range.end;\n \n         LintDeclSearchResult {\n@@ -946,7 +946,7 @@ fn parse_renamed_contents(contents: &str, lints: &mut Vec<RenamedLint>) {\n     for line in contents.lines() {\n         let mut offset = 0usize;\n         let mut iter = tokenize(line).map(|t| {\n-            let range = offset..offset + t.len;\n+            let range = offset..offset + t.len as usize;\n             offset = range.end;\n \n             LintDeclSearchResult {"}, {"sha": "badd391302b6f2bf37a2dd6fa18ad1c6723d45b5", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.64\"\n+version = \"0.1.65\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "454ec23388af94511525b335d1e672dc8f6e062a", "filename": "clippy_lints/src/crate_in_macro_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -110,14 +110,14 @@ fn contains_unhygienic_crate_reference(tts: &TokenStream) -> Option<Span> {\n \n fn is_crate_keyword(tt: &TokenTree) -> Option<Span> {\n     if_chain! {\n-        if let TokenTree::Token(Token { kind: TokenKind::Ident(symbol, _), span }) = tt;\n+        if let TokenTree::Token(Token { kind: TokenKind::Ident(symbol, _), span }, _) = tt;\n         if symbol.as_str() == \"crate\";\n         then { Some(*span) } else { None }\n     }\n }\n \n fn is_token(tt: &TokenTree, kind: &TokenKind) -> bool {\n-    if let TokenTree::Token(Token { kind: other, .. }) = tt {\n+    if let TokenTree::Token(Token { kind: other, .. }, _) = tt {\n         kind == other\n     } else {\n         false"}, {"sha": "4f9ff97f1fd1a1ace7344eb47c6aa6259fbaa29d", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -220,9 +220,11 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, closure_ty: Ty<'tcx>, call_ty: Ty<'tc\n }\n \n fn get_ufcs_type_name(cx: &LateContext<'_>, method_def_id: DefId) -> String {\n-    match cx.tcx.associated_item(method_def_id).container {\n-        ty::TraitContainer(def_id) => cx.tcx.def_path_str(def_id),\n-        ty::ImplContainer(def_id) => {\n+    let assoc_item = cx.tcx.associated_item(method_def_id);\n+    let def_id = assoc_item.container_id(cx.tcx);\n+    match assoc_item.container {\n+        ty::TraitContainer => cx.tcx.def_path_str(def_id),\n+        ty::ImplContainer => {\n             let ty = cx.tcx.type_of(def_id);\n             match ty.kind() {\n                 ty::Adt(adt, _) => cx.tcx.def_path_str(adt.did()),"}, {"sha": "ef7d75aa8ed9b56a264ace501e0e36e21426d9e5", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::{EarlyBinder, Opaque, PredicateKind::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt;\n-use rustc_trait_selection::traits::{self, FulfillmentError, TraitEngine};\n+use rustc_trait_selection::traits::{self, FulfillmentError};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -80,9 +80,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                 let span = decl.output.span();\n                 let send_errors = cx.tcx.infer_ctxt().enter(|infcx| {\n                     let cause = traits::ObligationCause::misc(span, hir_id);\n-                    let mut fulfillment_cx = traits::FulfillmentContext::new();\n-                    fulfillment_cx.register_bound(&infcx, cx.param_env, ret_ty, send_trait, cause);\n-                    fulfillment_cx.select_all_or_error(&infcx)\n+                    traits::fully_solve_bound(&infcx, cause, cx.param_env, ret_ty, send_trait)\n                 });\n                 if !send_errors.is_empty() {\n                     span_lint_and_then("}, {"sha": "e6b183fc05f25df01fabded1ce6bb49835880cf9", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1112,7 +1112,7 @@ fn span_contains_cfg(cx: &LateContext<'_>, s: Span) -> bool {\n     let mut pos = 0usize;\n     let mut iter = tokenize(&snip).map(|t| {\n         let start = pos;\n-        pos += t.len;\n+        pos += t.len as usize;\n         (t.kind, start..pos)\n     });\n "}, {"sha": "9c3375bf35e7dc523ce4cd89b4b7435354873a8d", "filename": "clippy_lints/src/methods/suspicious_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -12,7 +12,8 @@ pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, count_recv: &hi\n     if_chain! {\n         if is_trait_method(cx, count_recv, sym::Iterator);\n         let closure = expr_or_init(cx, map_arg);\n-        if let Some(body_id) = cx.tcx.hir().maybe_body_owned_by(closure.hir_id);\n+        if let Some(def_id) = cx.tcx.hir().opt_local_def_id(closure.hir_id);\n+        if let Some(body_id) = cx.tcx.hir().maybe_body_owned_by(def_id);\n         let closure_body = cx.tcx.hir().body(body_id);\n         if !cx.typeck_results().expr_ty(&closure_body.value).is_unit();\n         then {"}, {"sha": "ee81f72a0e7081825f6d79269c67f37314094cfa", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -12,7 +12,7 @@ use if_chain::if_chain;\n use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::ty::{self, DefIdTree};\n+use rustc_middle::ty::DefIdTree;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::Span;\n@@ -175,13 +175,12 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         // If the method is an impl for a trait, don't doc.\n-        match cx.tcx.associated_item(impl_item.def_id).container {\n-            ty::TraitContainer(_) => return,\n-            ty::ImplContainer(cid) => {\n-                if cx.tcx.impl_trait_ref(cid).is_some() {\n-                    return;\n-                }\n-            },\n+        if let Some(cid) = cx.tcx.associated_item(impl_item.def_id).impl_container(cx.tcx) {\n+            if cx.tcx.impl_trait_ref(cid).is_some() {\n+                return;\n+            }\n+        } else {\n+            return;\n         }\n \n         let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());"}, {"sha": "07bc2ca5d3cd2fa263893adde7f24e4cb0ef640b", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n                     match tit_.kind {\n                         hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..) => {},\n                         hir::TraitItemKind::Fn(..) => {\n-                            if tit.defaultness.has_value() {\n+                            if cx.tcx.impl_defaultness(tit.id.def_id).has_value() {\n                                 // trait method with default body needs inline in case\n                                 // an impl is not provided\n                                 let desc = \"a default trait method\";\n@@ -151,9 +151,11 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(_) => return,\n         };\n \n-        let trait_def_id = match cx.tcx.associated_item(impl_item.def_id).container {\n-            TraitContainer(cid) => Some(cid),\n-            ImplContainer(cid) => cx.tcx.impl_trait_ref(cid).map(|t| t.def_id),\n+        let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n+        let container_id = assoc_item.container_id(cx.tcx);\n+        let trait_def_id = match assoc_item.container {\n+            TraitContainer => Some(container_id),\n+            ImplContainer => cx.tcx.impl_trait_ref(container_id).map(|t| t.def_id),\n         };\n \n         if let Some(trait_def_id) = trait_def_id {"}, {"sha": "d2e675a783eaaf382517370b34526011b2cf2923", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -345,7 +345,7 @@ fn text_has_safety_comment(src: &str, line_starts: &[BytePos], offset: usize) ->\n         if line.starts_with(\"/*\") {\n             let src = src[line_start..line_starts.last().unwrap().to_usize() - offset].trim_start();\n             let mut tokens = tokenize(src);\n-            return src[..tokens.next().unwrap().len]\n+            return src[..tokens.next().unwrap().len as usize]\n                 .to_ascii_uppercase()\n                 .contains(\"SAFETY:\")\n                 && tokens.all(|t| t.kind == TokenKind::Whitespace);"}, {"sha": "c0726868f77e22eb35b78e8637db18582b2e0a2d", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n \n fn check_item(cx: &LateContext<'_>, hir_id: HirId) {\n     let hir = cx.tcx.hir();\n-    if let Some(body_id) = hir.maybe_body_owned_by(hir_id) {\n+    if let Some(body_id) = hir.maybe_body_owned_by(hir_id.expect_owner()) {\n         check_node(cx, hir_id, |v| {\n             v.expr(&v.bind(\"expr\", &hir.body(body_id).value));\n         });"}, {"sha": "5dcacd604be45f6b0a4c4844e05ece2e13287198", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -496,12 +496,14 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n                     cx,\n                 };\n                 let body_id = cx.tcx.hir().body_owned_by(\n-                    impl_item_refs\n-                        .iter()\n-                        .find(|iiref| iiref.ident.as_str() == \"get_lints\")\n-                        .expect(\"LintPass needs to implement get_lints\")\n-                        .id\n-                        .hir_id(),\n+                    cx.tcx.hir().local_def_id(\n+                        impl_item_refs\n+                            .iter()\n+                            .find(|iiref| iiref.ident.as_str() == \"get_lints\")\n+                            .expect(\"LintPass needs to implement get_lints\")\n+                            .id\n+                            .hir_id(),\n+                    ),\n                 );\n                 collector.visit_expr(&cx.tcx.hir().body(body_id).value);\n             }"}, {"sha": "32718200c0b3a037a2793855e81d0f835bbddcab", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -462,7 +462,7 @@ impl SimpleFormatArgs {\n                     }\n                 }\n             },\n-            ArgumentNamed(n, _) => {\n+            ArgumentNamed(n) => {\n                 let n = Symbol::intern(n);\n                 if let Some(x) = self.named.iter_mut().find(|x| x.0 == n) {\n                     match x.1.as_slice() {"}, {"sha": "a688050f63a6ad659603b248aa78ca785edcf093", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.64\"\n+version = \"0.1.65\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "1834e2a2de8720b861a8690b57313f33c5297996", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -141,7 +141,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 let mut left_pos = 0;\n                 let left = tokenize(&left)\n                     .map(|t| {\n-                        let end = left_pos + t.len;\n+                        let end = left_pos + t.len as usize;\n                         let s = &left[left_pos..end];\n                         left_pos = end;\n                         (t, s)\n@@ -156,7 +156,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 let mut right_pos = 0;\n                 let right = tokenize(&right)\n                     .map(|t| {\n-                        let end = right_pos + t.len;\n+                        let end = right_pos + t.len as usize;\n                         let s = &right[right_pos..end];\n                         right_pos = end;\n                         (t, s)"}, {"sha": "dc772e5efeef39cc8f9f333e3cdab59198cfc556", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -969,7 +969,7 @@ pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'\n                     }\n                 },\n                 ExprKind::Closure { .. } => {\n-                    let closure_id = self.cx.tcx.hir().local_def_id(e.hir_id).to_def_id();\n+                    let closure_id = self.cx.tcx.hir().local_def_id(e.hir_id);\n                     for capture in self.cx.typeck_results().closure_min_captures_flattened(closure_id) {\n                         let local_id = match capture.place.base {\n                             PlaceBase::Local(id) => id,\n@@ -1354,7 +1354,7 @@ pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool\n     if is_integer_literal(e, value) {\n         return true;\n     }\n-    let enclosing_body = cx.tcx.hir().local_def_id(cx.tcx.hir().enclosing_body_owner(e.hir_id));\n+    let enclosing_body = cx.tcx.hir().enclosing_body_owner(e.hir_id);\n     if let Some((Constant::Int(v), _)) = constant(cx, cx.tcx.typeck(enclosing_body), e) {\n         return value == v;\n     }"}, {"sha": "7e14df4feea66316953a53425dcde75eee8bf066", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-07-28\"\n+channel = \"nightly-2022-08-11\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "f13733af3d0d18a04244d716541c232c85700347", "filename": "tests/ui/borrow_interior_mutable_const/auxiliary/helper.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -2,6 +2,7 @@\n // As the most common case is the `http` crate, it replicates `http::HeadewrName`'s structure.\n \n #![allow(clippy::declare_interior_mutable_const)]\n+#![allow(unused_tuple_struct_fields)]\n \n use std::sync::atomic::AtomicUsize;\n "}, {"sha": "6b754f3bd7103bb3f6ff068ab637acc368f85c7c", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::print_literal,\n     clippy::redundant_clone,\n     clippy::to_string_in_format_args,"}, {"sha": "ca9826b356ec8aea1642450c6f3789244323f071", "filename": "tests/ui/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::print_literal,\n     clippy::redundant_clone,\n     clippy::to_string_in_format_args,"}, {"sha": "6c35caeb034d0fe5e817b2c51700a771dd68666d", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,25 +1,25 @@\n error: useless use of `format!`\n-  --> $DIR/format.rs:18:5\n+  --> $DIR/format.rs:19:5\n    |\n LL |     format!(\"foo\");\n    |     ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n    |\n    = note: `-D clippy::useless-format` implied by `-D warnings`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:19:5\n+  --> $DIR/format.rs:20:5\n    |\n LL |     format!(\"{{}}\");\n    |     ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:20:5\n+  --> $DIR/format.rs:21:5\n    |\n LL |     format!(\"{{}} abc {{}}\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{} abc {}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:21:5\n+  --> $DIR/format.rs:22:5\n    |\n LL | /     format!(\n LL | |         r##\"foo {{}}\n@@ -34,91 +34,91 @@ LL ~ \" bar\"##.to_string();\n    |\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:26:13\n+  --> $DIR/format.rs:27:13\n    |\n LL |     let _ = format!(\"\");\n    |             ^^^^^^^^^^^ help: consider using `String::new()`: `String::new()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:28:5\n+  --> $DIR/format.rs:29:5\n    |\n LL |     format!(\"{}\", \"foo\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:32:5\n+  --> $DIR/format.rs:33:5\n    |\n LL |     format!(\"{:+}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:33:5\n+  --> $DIR/format.rs:34:5\n    |\n LL |     format!(\"{:<}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:38:5\n+  --> $DIR/format.rs:39:5\n    |\n LL |     format!(\"{}\", arg);\n    |     ^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:42:5\n+  --> $DIR/format.rs:43:5\n    |\n LL |     format!(\"{:+}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:43:5\n+  --> $DIR/format.rs:44:5\n    |\n LL |     format!(\"{:<}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:70:5\n+  --> $DIR/format.rs:71:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:72:5\n+  --> $DIR/format.rs:73:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:76:18\n+  --> $DIR/format.rs:77:18\n    |\n LL |     let _ = Some(format!(\"{}\", a + \"bar\"));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `a + \"bar\"`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:80:22\n+  --> $DIR/format.rs:81:22\n    |\n LL |     let _s: String = format!(\"{}\", &*v.join(\"/n\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `(&*v.join(\"/n\")).to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:86:13\n+  --> $DIR/format.rs:87:13\n    |\n LL |     let _ = format!(\"{x}\");\n    |             ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:88:13\n+  --> $DIR/format.rs:89:13\n    |\n LL |     let _ = format!(\"{y}\", y = x);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:92:13\n+  --> $DIR/format.rs:93:13\n    |\n LL |     let _ = format!(\"{abc}\");\n    |             ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `abc.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:94:13\n+  --> $DIR/format.rs:95:13\n    |\n LL |     let _ = format!(\"{xx}\");\n    |             ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `xx.to_string()`"}, {"sha": "48f8093311cbdb41ad7c1700873457cb1154a8be", "filename": "tests/ui/from_iter_instead_of_collect.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::from_iter_instead_of_collect)]\n-#![allow(unused_imports)]\n+#![allow(unused_imports, unused_tuple_struct_fields)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n "}, {"sha": "ebe0ad278be30f9502a29aade0f99821092f37fe", "filename": "tests/ui/from_iter_instead_of_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::from_iter_instead_of_collect)]\n-#![allow(unused_imports)]\n+#![allow(unused_imports, unused_tuple_struct_fields)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n "}, {"sha": "04a74a009e09213cb84581fb7ccce94700324a50", "filename": "tests/ui/must_use_candidates.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fmust_use_candidates.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fmust_use_candidates.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.fixed?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![feature(never_type)]\n-#![allow(unused_mut, clippy::redundant_allocation)]\n+#![allow(unused_mut, unused_tuple_struct_fields, clippy::redundant_allocation)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;\n use std::sync::atomic::{AtomicBool, Ordering};"}, {"sha": "f04122f4eeab653057d27b5300e9e8c4ef3d2ebe", "filename": "tests/ui/must_use_candidates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fmust_use_candidates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fmust_use_candidates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![feature(never_type)]\n-#![allow(unused_mut, clippy::redundant_allocation)]\n+#![allow(unused_mut, unused_tuple_struct_fields, clippy::redundant_allocation)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;\n use std::sync::atomic::{AtomicBool, Ordering};"}, {"sha": "68c987eb4c6771702ffac0374e4463631af244a9", "filename": "tests/ui/numbered_fields.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fnumbered_fields.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fnumbered_fields.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbered_fields.fixed?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,5 +1,6 @@\n //run-rustfix\n #![warn(clippy::init_numbered_fields)]\n+#![allow(unused_tuple_struct_fields)]\n \n #[derive(Default)]\n struct TupleStruct(u32, u32, u8);"}, {"sha": "2ef4fb4de5370becc102ce60feb1278f6ff267be", "filename": "tests/ui/numbered_fields.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fnumbered_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fnumbered_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbered_fields.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,5 +1,6 @@\n //run-rustfix\n #![warn(clippy::init_numbered_fields)]\n+#![allow(unused_tuple_struct_fields)]\n \n #[derive(Default)]\n struct TupleStruct(u32, u32, u8);"}, {"sha": "60c0d7898063f5f07087b3e1da51c47c1603f539", "filename": "tests/ui/numbered_fields.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fnumbered_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Fnumbered_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbered_fields.stderr?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,5 +1,5 @@\n error: used a field initializer for a tuple struct\n-  --> $DIR/numbered_fields.rs:18:13\n+  --> $DIR/numbered_fields.rs:19:13\n    |\n LL |       let _ = TupleStruct {\n    |  _____________^\n@@ -12,7 +12,7 @@ LL | |     };\n    = note: `-D clippy::init-numbered-fields` implied by `-D warnings`\n \n error: used a field initializer for a tuple struct\n-  --> $DIR/numbered_fields.rs:25:13\n+  --> $DIR/numbered_fields.rs:26:13\n    |\n LL |       let _ = TupleStruct {\n    |  _____________^"}, {"sha": "b6d5e106f057a36ab1503f701f144a37614e98db", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::redundant_closure,\n     clippy::ref_option_ref,\n     clippy::equatable_if_let,"}, {"sha": "35bae159343587be7ea1a98c959260a0cc3ab62b", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::redundant_closure,\n     clippy::ref_option_ref,\n     clippy::equatable_if_let,"}, {"sha": "daba606004e114d68ed95d95682e94a4fd59c7f2", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,5 +1,5 @@\n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:11:5\n+  --> $DIR/option_if_let_else.rs:12:5\n    |\n LL | /     if let Some(x) = string {\n LL | |         (true, x)\n@@ -11,19 +11,19 @@ LL | |     }\n    = note: `-D clippy::option-if-let-else` implied by `-D warnings`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:29:13\n+  --> $DIR/option_if_let_else.rs:30:13\n    |\n LL |     let _ = if let Some(s) = *string { s.len() } else { 0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `string.map_or(0, |s| s.len())`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:30:13\n+  --> $DIR/option_if_let_else.rs:31:13\n    |\n LL |     let _ = if let Some(s) = &num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:31:13\n+  --> $DIR/option_if_let_else.rs:32:13\n    |\n LL |       let _ = if let Some(s) = &mut num {\n    |  _____________^\n@@ -43,13 +43,13 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:37:13\n+  --> $DIR/option_if_let_else.rs:38:13\n    |\n LL |     let _ = if let Some(ref s) = num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:38:13\n+  --> $DIR/option_if_let_else.rs:39:13\n    |\n LL |       let _ = if let Some(mut s) = num {\n    |  _____________^\n@@ -69,7 +69,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:44:13\n+  --> $DIR/option_if_let_else.rs:45:13\n    |\n LL |       let _ = if let Some(ref mut s) = num {\n    |  _____________^\n@@ -89,7 +89,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:53:5\n+  --> $DIR/option_if_let_else.rs:54:5\n    |\n LL | /     if let Some(x) = arg {\n LL | |         let y = x * x;\n@@ -108,7 +108,7 @@ LL +     })\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:66:13\n+  --> $DIR/option_if_let_else.rs:67:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -120,7 +120,7 @@ LL | |     };\n    | |_____^ help: try: `arg.map_or_else(|| side_effect(), |x| x)`\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:75:13\n+  --> $DIR/option_if_let_else.rs:76:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -143,7 +143,7 @@ LL ~     }, |x| x * x * x * x);\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:108:13\n+  --> $DIR/option_if_let_else.rs:109:13\n    |\n LL | /             if let Some(idx) = s.find('.') {\n LL | |                 vec![s[..idx].to_string(), s[idx..].to_string()]\n@@ -153,13 +153,13 @@ LL | |             }\n    | |_____________^ help: try: `s.find('.').map_or_else(|| vec![s.to_string()], |idx| vec![s[..idx].to_string(), s[idx..].to_string()])`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:132:13\n+  --> $DIR/option_if_let_else.rs:133:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:141:13\n+  --> $DIR/option_if_let_else.rs:142:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^\n@@ -181,13 +181,13 @@ LL ~         });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:169:13\n+  --> $DIR/option_if_let_else.rs:170:13\n    |\n LL |     let _ = if let Some(x) = Some(0) { s.len() + x } else { s.len() };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(0).map_or(s.len(), |x| s.len() + x)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:173:13\n+  --> $DIR/option_if_let_else.rs:174:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^"}, {"sha": "a67363b09ea5ac7e675d053ed791a05466435fb2", "filename": "tests/ui/unreadable_literal.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Funreadable_literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Funreadable_literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.fixed?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::unreadable_literal)]\n+#![allow(unused_tuple_struct_fields)]\n \n struct Foo(u64);\n "}, {"sha": "82f04e7ced5279f95e8959ca7e4a8848ad6e6721", "filename": "tests/ui/unreadable_literal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.rs?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::unreadable_literal)]\n+#![allow(unused_tuple_struct_fields)]\n \n struct Foo(u64);\n "}, {"sha": "b51130c6a6abae11e2ba30908ab8a34ec94a9c7b", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b2190cb5667cdd276a24ef8b9f3692209c54a89/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=2b2190cb5667cdd276a24ef8b9f3692209c54a89", "patch": "@@ -1,69 +1,69 @@\n error: digits of hex or binary literal not grouped by four\n-  --> $DIR/unreadable_literal.rs:25:9\n+  --> $DIR/unreadable_literal.rs:26:9\n    |\n LL |         0x1_234_567,\n    |         ^^^^^^^^^^^ help: consider: `0x0123_4567`\n    |\n    = note: `-D clippy::unusual-byte-groupings` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:17\n+  --> $DIR/unreadable_literal.rs:34:17\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                 ^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:31\n+  --> $DIR/unreadable_literal.rs:34:31\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                               ^^^^^^^^^^^^^^^^ help: consider: `0x1234_5678_usize`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:49\n+  --> $DIR/unreadable_literal.rs:34:49\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                                                 ^^^^^^^^^^ help: consider: `123_456_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:61\n+  --> $DIR/unreadable_literal.rs:34:61\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                                                             ^^^^^^^^^^^^ help: consider: `1.234_567_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:35:20\n+  --> $DIR/unreadable_literal.rs:36:20\n    |\n LL |     let _bad_sci = 1.123456e1;\n    |                    ^^^^^^^^^^ help: consider: `1.123_456e1`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:37:18\n+  --> $DIR/unreadable_literal.rs:38:18\n    |\n LL |     let _fail1 = 0xabcdef;\n    |                  ^^^^^^^^ help: consider: `0x00ab_cdef`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:38:23\n+  --> $DIR/unreadable_literal.rs:39:23\n    |\n LL |     let _fail2: u32 = 0xBAFEBAFE;\n    |                       ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:39:18\n+  --> $DIR/unreadable_literal.rs:40:18\n    |\n LL |     let _fail3 = 0xabcdeff;\n    |                  ^^^^^^^^^ help: consider: `0x0abc_deff`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:40:24\n+  --> $DIR/unreadable_literal.rs:41:24\n    |\n LL |     let _fail4: i128 = 0xabcabcabcabcabcabc;\n    |                        ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:41:18\n+  --> $DIR/unreadable_literal.rs:42:18\n    |\n LL |     let _fail5 = 1.100300400;\n    |                  ^^^^^^^^^^^ help: consider: `1.100_300_400`"}]}