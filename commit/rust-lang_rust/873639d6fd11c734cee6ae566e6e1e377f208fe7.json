{"sha": "873639d6fd11c734cee6ae566e6e1e377f208fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MzYzOWQ2ZmQxMWM3MzRjZWU2YWU1NjZlNmUxZTM3N2YyMDhmZTc=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-07T18:51:54Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-07T18:51:54Z"}, "message": "Use bitxor to implement Neg for floats", "tree": {"sha": "9c0c8f7256ac5b091685ce221d7b7b0b88a5d9fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c0c8f7256ac5b091685ce221d7b7b0b88a5d9fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/873639d6fd11c734cee6ae566e6e1e377f208fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/873639d6fd11c734cee6ae566e6e1e377f208fe7", "html_url": "https://github.com/rust-lang/rust/commit/873639d6fd11c734cee6ae566e6e1e377f208fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/873639d6fd11c734cee6ae566e6e1e377f208fe7/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c327a034425b1cc44f47a825ab2dcbfdd24b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c327a034425b1cc44f47a825ab2dcbfdd24b22", "html_url": "https://github.com/rust-lang/rust/commit/a1c327a034425b1cc44f47a825ab2dcbfdd24b22"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "9e0bc3f42a66e8fbdc3cb5308be0c6cd4b455d18", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/873639d6fd11c734cee6ae566e6e1e377f208fe7/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/873639d6fd11c734cee6ae566e6e1e377f208fe7/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=873639d6fd11c734cee6ae566e6e1e377f208fe7", "patch": "@@ -212,7 +212,18 @@ macro_rules! impl_op {\n             impl core::ops::Neg for $type {\n                 type Output = Self;\n                 fn neg(self) -> Self::Output {\n-                    <$type>::splat(-<$scalar>::default()) - self\n+                    <$type>::splat(0) - self\n+                }\n+            }\n+        }\n+    };\n+\n+    { impl Neg for $type:ty, $scalar:ty, @float } => {\n+        impl_ref_ops! {\n+            impl core::ops::Neg for $type {\n+                type Output = Self;\n+                fn neg(self) -> Self::Output {\n+                    Self::from_bits(<$type>::splat(-0.0).to_bits() ^ self.to_bits())\n                 }\n             }\n         }\n@@ -310,7 +321,7 @@ macro_rules! impl_float_ops {\n                 impl_op! { impl Mul for $vector, $scalar }\n                 impl_op! { impl Div for $vector, $scalar }\n                 impl_op! { impl Rem for $vector, $scalar }\n-                impl_op! { impl Neg for $vector, $scalar }\n+                impl_op! { impl Neg for $vector, $scalar, @float }\n                 impl_op! { impl Index for $vector, $scalar }\n             )*\n         )*"}, {"sha": "7df30ec39f6c1205db316b89edf4abfebdab90b4", "filename": "crates/core_simd/tests/ops_impl/float_macros.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/873639d6fd11c734cee6ae566e6e1e377f208fe7/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/873639d6fd11c734cee6ae566e6e1e377f208fe7/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs?ref=873639d6fd11c734cee6ae566e6e1e377f208fe7", "patch": "@@ -289,6 +289,15 @@ macro_rules! float_tests {\n                 assert_biteq!(-v, expected);\n             }\n \n+            #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+            fn neg_odd_floats() {\n+                for v in slice_chunks(&C) {\n+                    let expected = apply_unary_lanewise(v, core::ops::Neg::neg);\n+                    assert_biteq!(-v, expected);\n+                }\n+            }\n+\n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn abs_negative() {"}]}