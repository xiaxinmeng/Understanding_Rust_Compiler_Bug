{"sha": "0ac6afafa61044831c6e019e8aee46ecc7243d90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYzZhZmFmYTYxMDQ0ODMxYzZlMDE5ZThhZWU0NmVjYzcyNDNkOTA=", "commit": {"author": {"name": "Nathan", "email": "nathan.whitaker01@gmail.com", "date": "2019-07-23T14:20:33Z"}, "committer": {"name": "Nathan", "email": "nathan.whitaker01@gmail.com", "date": "2019-07-23T17:49:37Z"}, "message": "Cleanup std::sys::cloudabi", "tree": {"sha": "f169993981e80cce69b6ca92aaf3a9cd1ea2473a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f169993981e80cce69b6ca92aaf3a9cd1ea2473a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac6afafa61044831c6e019e8aee46ecc7243d90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac6afafa61044831c6e019e8aee46ecc7243d90", "html_url": "https://github.com/rust-lang/rust/commit/0ac6afafa61044831c6e019e8aee46ecc7243d90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac6afafa61044831c6e019e8aee46ecc7243d90/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82dd54baf3fda351abd56ee4bda9f8464da2df67", "url": "https://api.github.com/repos/rust-lang/rust/commits/82dd54baf3fda351abd56ee4bda9f8464da2df67", "html_url": "https://github.com/rust-lang/rust/commit/82dd54baf3fda351abd56ee4bda9f8464da2df67"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "6e147612eb4b7b41a44501987019c8566235bbd3", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6afafa61044831c6e019e8aee46ecc7243d90/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6afafa61044831c6e019e8aee46ecc7243d90/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=0ac6afafa61044831c6e019e8aee46ecc7243d90", "patch": "@@ -64,7 +64,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n         let mut v: mem::MaybeUninit<(u64, u64)> = mem::MaybeUninit::uninit();\n         libc::arc4random_buf(\n             v.as_mut_ptr() as *mut libc::c_void,\n-            mem::size_of_val(v.get_ref())\n+            mem::size_of_val(&v)\n         );\n         v.assume_init()\n     }"}, {"sha": "d3ff0077b20e53ea6af8a5f1535090edcd3f17e6", "filename": "src/libstd/sys/cloudabi/mutex.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6afafa61044831c6e019e8aee46ecc7243d90/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6afafa61044831c6e019e8aee46ecc7243d90/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs?ref=0ac6afafa61044831c6e019e8aee46ecc7243d90", "patch": "@@ -54,7 +54,7 @@ pub struct ReentrantMutex {\n \n impl ReentrantMutex {\n     pub unsafe fn uninitialized() -> ReentrantMutex {\n-        ReentrantMutex { \n+        ReentrantMutex {\n             lock: UnsafeCell::new(MaybeUninit::uninit()),\n             recursion: UnsafeCell::new(MaybeUninit::uninit())\n         }\n@@ -67,9 +67,9 @@ impl ReentrantMutex {\n \n     pub unsafe fn try_lock(&self) -> bool {\n         // Attempt to acquire the lock.\n-        let lock = self.lock.get();\n-        let recursion = self.recursion.get();\n-        if let Err(old) = (*(*lock).as_mut_ptr()).compare_exchange(\n+        let lock = (*self.lock.get()).as_mut_ptr();\n+        let recursion = (*self.recursion.get()).as_mut_ptr();\n+        if let Err(old) = (*lock).compare_exchange(\n             abi::LOCK_UNLOCKED.0,\n             __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n             Ordering::Acquire,\n@@ -78,14 +78,14 @@ impl ReentrantMutex {\n             // If we fail to acquire the lock, it may be the case\n             // that we've already acquired it and may need to recurse.\n             if old & !abi::LOCK_KERNEL_MANAGED.0 == __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0 {\n-                *(*recursion).as_mut_ptr() += 1;\n+                *recursion += 1;\n                 true\n             } else {\n                 false\n             }\n         } else {\n             // Success.\n-            assert_eq!(*(*recursion).as_mut_ptr(), 0, \"Mutex has invalid recursion count\");\n+            assert_eq!(*recursion, 0, \"Mutex has invalid recursion count\");\n             true\n         }\n     }\n@@ -113,17 +113,17 @@ impl ReentrantMutex {\n     }\n \n     pub unsafe fn unlock(&self) {\n-        let lock = self.lock.get();\n-        let recursion = self.recursion.get();\n+        let lock = (*self.lock.get()).as_mut_ptr();\n+        let recursion = (*self.recursion.get()).as_mut_ptr();\n         assert_eq!(\n-            (*(*lock).as_mut_ptr()).load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n+            (*lock).load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n             __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n             \"This mutex is locked by a different thread\"\n         );\n \n-        if *(*recursion).as_mut_ptr() > 0 {\n-            *(*recursion).as_mut_ptr() -= 1;\n-        } else if !(*(*lock).as_mut_ptr())\n+        if *recursion > 0 {\n+            *recursion -= 1;\n+        } else if !(*lock)\n             .compare_exchange(\n                 __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n                 abi::LOCK_UNLOCKED.0,\n@@ -140,13 +140,13 @@ impl ReentrantMutex {\n     }\n \n     pub unsafe fn destroy(&self) {\n-        let lock = self.lock.get();\n-        let recursion = self.recursion.get();\n+        let lock = (*self.lock.get()).as_mut_ptr();\n+        let recursion = (*self.recursion.get()).as_mut_ptr();\n         assert_eq!(\n-            (*(*lock).as_mut_ptr()).load(Ordering::Relaxed),\n+            (*lock).load(Ordering::Relaxed),\n             abi::LOCK_UNLOCKED.0,\n             \"Attempted to destroy locked mutex\"\n         );\n-        assert_eq!(*(*recursion).as_mut_ptr(), 0, \"Recursion counter invalid\");\n+        assert_eq!(*recursion, 0, \"Recursion counter invalid\");\n     }\n }"}, {"sha": "d90f7dec496cfa2ab2f33aefb528007b80f99f17", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6afafa61044831c6e019e8aee46ecc7243d90/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6afafa61044831c6e019e8aee46ecc7243d90/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=0ac6afafa61044831c6e019e8aee46ecc7243d90", "patch": "@@ -21,7 +21,7 @@ impl Instant {\n             let mut t: mem::MaybeUninit<abi::timestamp> = mem::MaybeUninit::uninit();\n             let ret = abi::clock_time_get(abi::clockid::MONOTONIC, 0, t.get_mut());\n             assert_eq!(ret, abi::errno::SUCCESS);\n-            Instant { t }\n+            Instant { t: t.assume_init() }\n         }\n     }\n \n@@ -62,7 +62,7 @@ impl SystemTime {\n             let mut t: mem::MaybeUninit<abi::timestamp> = mem::MaybeUninit::uninit();\n             let ret = abi::clock_time_get(abi::clockid::REALTIME, 0, t.get_mut());\n             assert_eq!(ret, abi::errno::SUCCESS);\n-            SystemTime { t }\n+            SystemTime { t: t.assume_init() }\n         }\n     }\n "}]}