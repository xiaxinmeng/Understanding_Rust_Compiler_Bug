{"sha": "81be7b86d348a5b7cad08386003c43d44d1e9f94", "node_id": "C_kwDOAAsO6NoAKDgxYmU3Yjg2ZDM0OGE1YjdjYWQwODM4NjAwM2M0M2Q0NGQxZTlmOTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-06T22:15:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-06T22:15:55Z"}, "message": "Auto merge of #108821 - matthiaskrgr:rollup-cmkbgpr, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #107801 (const_eval: `implies_by` in `rustc_const_unstable`)\n - #108750 (Fix `ObligationCtxt::sub`)\n - #108780 (Add regression tests for issue 70919)\n - #108786 (Check for free regions in MIR validation)\n - #108790 (Do not ICE when interpreting a cast between non-monomorphic types)\n - #108803 (Do not ICE when failing to normalize in ConstProp.)\n - #108807 (Emit the suspicious_auto_trait_impls for negative impls as well)\n - #108812 (Add regression test for #98444)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8807e8abf260602a1c23d6e3f5e1164ca6388932", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8807e8abf260602a1c23d6e3f5e1164ca6388932"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81be7b86d348a5b7cad08386003c43d44d1e9f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81be7b86d348a5b7cad08386003c43d44d1e9f94", "html_url": "https://github.com/rust-lang/rust/commit/81be7b86d348a5b7cad08386003c43d44d1e9f94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81be7b86d348a5b7cad08386003c43d44d1e9f94/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f63ccaf25f74151a5d8ce057904cd944074b01d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f63ccaf25f74151a5d8ce057904cd944074b01d2", "html_url": "https://github.com/rust-lang/rust/commit/f63ccaf25f74151a5d8ce057904cd944074b01d2"}, {"sha": "567cab93d5b32cbd85fd583cbc7f886551fca379", "url": "https://api.github.com/repos/rust-lang/rust/commits/567cab93d5b32cbd85fd583cbc7f886551fca379", "html_url": "https://github.com/rust-lang/rust/commit/567cab93d5b32cbd85fd583cbc7f886551fca379"}], "stats": {"total": 489, "additions": 443, "deletions": 46}, "files": [{"sha": "6dcfdc14790886a9fb82bbdd893af6ded76e9c86", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -1,15 +1,22 @@\n+use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n \n-/// Whether the `def_id` is an unstable const fn and what feature gate is necessary to enable it\n-pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n+/// Whether the `def_id` is an unstable const fn and what feature gate(s) are necessary to enable\n+/// it.\n+pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<(Symbol, Option<Symbol>)> {\n     if tcx.is_const_fn_raw(def_id) {\n         let const_stab = tcx.lookup_const_stability(def_id)?;\n-        if const_stab.is_const_unstable() { Some(const_stab.feature) } else { None }\n+        match const_stab.level {\n+            attr::StabilityLevel::Unstable { implied_by, .. } => {\n+                Some((const_stab.feature, implied_by))\n+            }\n+            attr::StabilityLevel::Stable { .. } => None,\n+        }\n     } else {\n         None\n     }"}, {"sha": "c14152a916a2937d8cf7c9e484f2ecffe6e3f449", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -67,12 +67,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Pointer(PointerCast::ReifyFnPointer) => {\n+                // All reifications must be monomorphic, bail out otherwise.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+\n                 // The src operand does not matter, just its type\n                 match *src.layout.ty.kind() {\n                     ty::FnDef(def_id, substs) => {\n-                        // All reifications must be monomorphic, bail out otherwise.\n-                        ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n-\n                         let instance = ty::Instance::resolve_for_fn_ptr(\n                             *self.tcx,\n                             self.param_env,\n@@ -100,12 +100,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Pointer(PointerCast::ClosureFnPointer(_)) => {\n+                // All reifications must be monomorphic, bail out otherwise.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+\n                 // The src operand does not matter, just its type\n                 match *src.layout.ty.kind() {\n                     ty::Closure(def_id, substs) => {\n-                        // All reifications must be monomorphic, bail out otherwise.\n-                        ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n-\n                         let instance = ty::Instance::resolve_closure(\n                             *self.tcx,\n                             def_id,\n@@ -359,8 +359,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = Immediate::new_dyn_trait(ptr, vtable, &*self.tcx);\n                 self.write_immediate(val, dest)\n             }\n-\n             _ => {\n+                // Do not ICE if we are not monomorphic enough.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+                ensure_monomorphic_enough(*self.tcx, cast_ty)?;\n+\n                 span_bug!(\n                     self.cur_span(),\n                     \"invalid pointer unsizing {:?} -> {:?}\",\n@@ -404,12 +407,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n                 Ok(())\n             }\n-            _ => span_bug!(\n-                self.cur_span(),\n-                \"unsize_into: invalid conversion: {:?} -> {:?}\",\n-                src.layout,\n-                dest.layout\n-            ),\n+            _ => {\n+                // Do not ICE if we are not monomorphic enough.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+                ensure_monomorphic_enough(*self.tcx, cast_ty.ty)?;\n+\n+                span_bug!(\n+                    self.cur_span(),\n+                    \"unsize_into: invalid conversion: {:?} -> {:?}\",\n+                    src.layout,\n+                    dest.layout\n+                )\n+            }\n         }\n     }\n }"}, {"sha": "39c74191258295dc90a81a80f40994e03de9b55f", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -7,7 +7,7 @@ use either::{Either, Left, Right};\n use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::{ErrorHandled, InterpError, InvalidProgramInfo};\n+use rustc_middle::mir::interpret::{ErrorHandled, InterpError};\n use rustc_middle::ty::layout::{\n     self, FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOf, LayoutOfHelpers,\n     TyAndLayout,\n@@ -508,14 +508,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         frame\n             .instance\n             .try_subst_mir_and_normalize_erasing_regions(*self.tcx, self.param_env, value)\n-            .map_err(|e| {\n-                self.tcx.sess.delay_span_bug(\n-                    self.cur_span(),\n-                    format!(\"failed to normalize {}\", e.get_type_for_failure()).as_str(),\n-                );\n-\n-                InterpError::InvalidProgram(InvalidProgramInfo::TooGeneric)\n-            })\n+            .map_err(|_| err_inval!(TooGeneric))\n     }\n \n     /// The `substs` are assumed to already be in our interpreter \"universe\" (param_env)."}, {"sha": "cc3aa84bd717092efc1c587960d5e953d737a932", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -926,15 +926,24 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n                 // If the `const fn` we are trying to call is not const-stable, ensure that we have\n                 // the proper feature gate enabled.\n-                if let Some(gate) = is_unstable_const_fn(tcx, callee) {\n+                if let Some((gate, implied_by)) = is_unstable_const_fn(tcx, callee) {\n                     trace!(?gate, \"calling unstable const fn\");\n                     if self.span.allows_unstable(gate) {\n                         return;\n                     }\n+                    if let Some(implied_by_gate) = implied_by && self.span.allows_unstable(implied_by_gate) {\n+                        return;\n+                    }\n \n                     // Calling an unstable function *always* requires that the corresponding gate\n-                    // be enabled, even if the function has `#[rustc_allow_const_fn_unstable(the_gate)]`.\n-                    if !tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == gate) {\n+                    // (or implied gate) be enabled, even if the function has\n+                    // `#[rustc_allow_const_fn_unstable(the_gate)]`.\n+                    let gate_declared = |gate| {\n+                        tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == gate)\n+                    };\n+                    let feature_gate_declared = gate_declared(gate);\n+                    let implied_gate_declared = implied_by.map(gate_declared).unwrap_or(false);\n+                    if !feature_gate_declared && !implied_gate_declared {\n                         self.check_op(ops::FnCallUnstable(callee, Some(gate)));\n                         return;\n                     }\n@@ -947,7 +956,6 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     }\n \n                     // Otherwise, we are something const-stable calling a const-unstable fn.\n-\n                     if super::rustc_allow_const_fn_unstable(tcx, caller, gate) {\n                         trace!(\"rustc_allow_const_fn_unstable gate active\");\n                         return;"}, {"sha": "272fe3d1b31092cc848195ea95e49a75c27f940b", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -72,6 +72,17 @@ impl<'tcx> MirPass<'tcx> for Validator {\n         };\n         checker.visit_body(body);\n         checker.check_cleanup_control_flow();\n+\n+        if let MirPhase::Runtime(_) = body.phase {\n+            if let ty::InstanceDef::Item(_) = body.source.instance {\n+                if body.has_free_regions() {\n+                    checker.fail(\n+                        Location::START,\n+                        format!(\"Free regions in optimized {} MIR\", body.phase.name()),\n+                    );\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "47c47de8cedbaa3515e9b8fb8ddde220d8faebd1", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -478,10 +478,6 @@ fn lint_auto_trait_impl<'tcx>(\n     trait_ref: ty::TraitRef<'tcx>,\n     impl_def_id: LocalDefId,\n ) {\n-    if tcx.impl_polarity(impl_def_id) != ImplPolarity::Positive {\n-        return;\n-    }\n-\n     assert_eq!(trait_ref.substs.len(), 1);\n     let self_ty = trait_ref.self_ty();\n     let (self_type_did, substs) = match self_ty.kind() {"}, {"sha": "5fd923190ef591e72a5770a427c7ef0b4ca02b89", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -416,8 +416,6 @@ fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -\n \n     pm::run_passes(tcx, &mut body, &[&ctfe_limit::CtfeLimit], None);\n \n-    debug_assert!(!body.has_free_regions(), \"Free regions in MIR for CTFE\");\n-\n     body\n }\n \n@@ -626,8 +624,6 @@ fn inner_optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> Body<'_> {\n     debug!(\"body: {:#?}\", body);\n     run_optimization_passes(tcx, &mut body);\n \n-    debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");\n-\n     body\n }\n \n@@ -651,7 +647,5 @@ fn promoted_mir(\n         run_analysis_to_runtime_passes(tcx, body);\n     }\n \n-    debug_assert!(!promoted.has_free_regions(), \"Free regions in promoted MIR\");\n-\n     tcx.arena.alloc(promoted)\n }"}, {"sha": "d5cc64a54029a1353d9913d342f5c4ea6e8c410a", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -265,6 +265,15 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 self.index.implications.insert(implied_by, feature);\n             }\n \n+            if let Some(ConstStability {\n+                level: Unstable { implied_by: Some(implied_by), .. },\n+                feature,\n+                ..\n+            }) = const_stab\n+            {\n+                self.index.implications.insert(implied_by, feature);\n+            }\n+\n             self.index.stab_map.insert(def_id, stab);\n             stab\n         });"}, {"sha": "62d5e50dbc5484e916bb7e5b1adcdd5a61320f65", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -158,7 +158,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         self.infcx\n             .at(cause, param_env)\n             .define_opaque_types(true)\n-            .sup(expected, actual)\n+            .sub(expected, actual)\n             .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n     }\n "}, {"sha": "c6920cf8d40c1538c35375bb791665a9e279264e", "filename": "tests/ui/associated-types/issue-67684.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fassociated-types%2Fissue-67684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fassociated-types%2Fissue-67684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-67684.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -1,4 +1,10 @@\n-// check-pass\n+// revisions: check build\n+// [check]check-pass\n+//\n+// This second configuration aims to verify that we do not ICE in ConstProp because of\n+// normalization failure.\n+// [build]build-pass\n+// [build]compile-flags: -Zmir-opt-level=3 --emit=mir\n \n #![allow(dead_code)]\n "}, {"sha": "34842e5944b463c4003104d7c130b0351f68c638", "filename": "tests/ui/auto-traits/suspicious-negative-impls-lint.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,21 @@\n+#![feature(negative_impls)]\n+#![deny(suspicious_auto_trait_impls)]\n+\n+use std::marker::PhantomData;\n+\n+struct ContainsVec<T>(Vec<T>);\n+impl !Send for ContainsVec<u32> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n+\n+pub struct WithPhantomDataSend<T, U>(PhantomData<T>, U);\n+impl<T> !Send for WithPhantomDataSend<*const T, u8> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n+\n+pub struct WithLifetime<'a, T>(&'a (), T);\n+impl<T> !Sync for WithLifetime<'static, Option<T>> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n+\n+fn main() {}"}, {"sha": "ee03ea1255757d539112549235b04d1721be4919", "filename": "tests/ui/auto-traits/suspicious-negative-impls-lint.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.stderr?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,52 @@\n+error: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/suspicious-negative-impls-lint.rs:7:1\n+   |\n+LL | impl !Send for ContainsVec<u32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `u32` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-negative-impls-lint.rs:6:1\n+   |\n+LL | struct ContainsVec<T>(Vec<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/suspicious-negative-impls-lint.rs:2:9\n+   |\n+LL | #![deny(suspicious_auto_trait_impls)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/suspicious-negative-impls-lint.rs:12:1\n+   |\n+LL | impl<T> !Send for WithPhantomDataSend<*const T, u8> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `*const T` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-negative-impls-lint.rs:11:1\n+   |\n+LL | pub struct WithPhantomDataSend<T, U>(PhantomData<T>, U);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cross-crate traits with a default impl, like `Sync`, should not be specialized\n+  --> $DIR/suspicious-negative-impls-lint.rs:17:1\n+   |\n+LL | impl<T> !Sync for WithLifetime<'static, Option<T>> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `Option<T>` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-negative-impls-lint.rs:16:1\n+   |\n+LL | pub struct WithLifetime<'a, T>(&'a (), T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "866c27ef20324221f2bcf7a8bc5393587be5dafa", "filename": "tests/ui/borrowck/drop-in-loop.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fborrowck%2Fdrop-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fborrowck%2Fdrop-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fdrop-in-loop.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,24 @@\n+// A version of `issue-70919-drop-in-loop`, but without\n+// the necessary `drop` call.\n+//\n+// This should fail to compile, since the `Drop` impl\n+// for `WrapperWithDrop` could observe the changed\n+// `base` value.\n+\n+struct WrapperWithDrop<'a>(&'a mut bool);\n+impl<'a> Drop for WrapperWithDrop<'a> {\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+fn drop_in_loop() {\n+    let mut base = true;\n+    let mut wrapper = WrapperWithDrop(&mut base);\n+    loop {\n+        base = false; //~ ERROR: cannot assign to `base`\n+        wrapper = WrapperWithDrop(&mut base);\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "d5734e7ec97707a7154cd7d409dd1ed84139a4fa", "filename": "tests/ui/borrowck/drop-in-loop.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fborrowck%2Fdrop-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fborrowck%2Fdrop-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fdrop-in-loop.stderr?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,14 @@\n+error[E0506]: cannot assign to `base` because it is borrowed\n+  --> $DIR/drop-in-loop.rs:18:9\n+   |\n+LL |     let mut wrapper = WrapperWithDrop(&mut base);\n+   |                                       --------- `base` is borrowed here\n+LL |     loop {\n+LL |         base = false;\n+   |         ^^^^^^^^^^^^ `base` is assigned to here but it was already borrowed\n+LL |         wrapper = WrapperWithDrop(&mut base);\n+   |         ------- borrow might be used here, when `wrapper` is dropped and runs the `Drop` code for type `WrapperWithDrop`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "a8d5849a31c0b068fb7ef0f03ae7342d24df32de", "filename": "tests/ui/borrowck/issue-70919-drop-in-loop.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fborrowck%2Fissue-70919-drop-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fborrowck%2Fissue-70919-drop-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-70919-drop-in-loop.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for issue #70919\n+// Tests that we don't emit a spurious \"borrow might be used\" error\n+// when we have an explicit `drop` in a loop\n+\n+// check-pass\n+\n+struct WrapperWithDrop<'a>(&'a mut bool);\n+impl<'a> Drop for WrapperWithDrop<'a> {\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+fn drop_in_loop() {\n+    let mut base = true;\n+    let mut wrapper = WrapperWithDrop(&mut base);\n+    loop {\n+        drop(wrapper);\n+\n+        base = false;\n+        wrapper = WrapperWithDrop(&mut base);\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "76a57936e6985b1e3d20a0d1f985eb915cce038f", "filename": "tests/ui/coherence/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -13,5 +13,7 @@ impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR found both positive and nega\n unsafe impl<T: 'static> Send for TestType<T> {} //~ ERROR conflicting implementations\n \n impl !Send for TestType<i32> {}\n+//~^ WARNING\n+//~| WARNING this will change its meaning\n \n fn main() {}"}, {"sha": "020199da99141327256d4ec26af91e30cb2892d6", "filename": "tests/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -16,7 +16,23 @@ LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n LL | unsafe impl<T: 'static> Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n \n-error: aborting due to 2 previous errors\n+warning: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:15:1\n+   |\n+LL | impl !Send for TestType<i32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `i32` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:7:1\n+   |\n+LL | struct TestType<T>(::std::marker::PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^\n+   = note: `#[warn(suspicious_auto_trait_impls)]` on by default\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0119, E0751.\n For more information about an error, try `rustc --explain E0119`."}, {"sha": "bed782203af508727210c3ca00435ada7eb6c590", "filename": "tests/ui/coherence/coherence-orphan.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-orphan.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -14,7 +14,8 @@ impl TheTrait<TheType> for isize { }\n \n impl TheTrait<isize> for TheType { }\n \n-impl !Send for Vec<isize> { }\n-//~^ ERROR E0117\n+impl !Send for Vec<isize> { } //~ ERROR E0117\n+//~^ WARNING\n+//~| WARNING this will change its meaning\n \n fn main() { }"}, {"sha": "9ec1d0dc32aa4d5f209a3efbb486ae178400046d", "filename": "tests/ui/coherence/coherence-orphan.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-orphan.stderr?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -21,6 +21,19 @@ LL | impl !Send for Vec<isize> { }\n    |\n    = note: define and implement a trait or new type instead\n \n-error: aborting due to 2 previous errors\n+warning: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/coherence-orphan.rs:17:1\n+   |\n+LL | impl !Send for Vec<isize> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `isize` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   = note: `#[warn(suspicious_auto_trait_impls)]` on by default\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0117`."}, {"sha": "5eabc3bfb13848f954d40ef97603f64d2d98f76f", "filename": "tests/ui/issues/issue-106755.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fissues%2Fissue-106755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fissues%2Fissue-106755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-106755.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -15,5 +15,7 @@ impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR found both positive and nega\n unsafe impl<T: 'static> Send for TestType<T> {} //~ ERROR conflicting implementations\n \n impl !Send for TestType<i32> {}\n+//~^ WARNING\n+//~| WARNING this will change its meaning\n \n fn main() {}"}, {"sha": "6b3a8427e7738033059d37ab01d73ffcd739b672", "filename": "tests/ui/issues/issue-106755.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fissues%2Fissue-106755.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fissues%2Fissue-106755.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-106755.stderr?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -16,7 +16,23 @@ LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n LL | unsafe impl<T: 'static> Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n \n-error: aborting due to 2 previous errors\n+warning: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/issue-106755.rs:17:1\n+   |\n+LL | impl !Send for TestType<i32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `i32` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/issue-106755.rs:9:1\n+   |\n+LL | struct TestType<T>(::std::marker::PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^\n+   = note: `#[warn(suspicious_auto_trait_impls)]` on by default\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0119, E0751.\n For more information about an error, try `rustc --explain E0119`."}, {"sha": "011fabfbbe94c90186cecddd5fda8b652cb7d5f1", "filename": "tests/ui/lint/unconditional_panic_98444.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Flint%2Funconditional_panic_98444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Flint%2Funconditional_panic_98444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funconditional_panic_98444.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,7 @@\n+// build-fail\n+\n+fn main() {\n+    let xs: [i32; 5] = [1, 2, 3, 4, 5];\n+    let _ = &xs;\n+    let _ = xs[7]; //~ ERROR: this operation will panic at runtime [unconditional_panic]\n+}"}, {"sha": "a347458097fa9ef4402a6ecde842170326d36bb8", "filename": "tests/ui/lint/unconditional_panic_98444.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Flint%2Funconditional_panic_98444.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Flint%2Funconditional_panic_98444.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funconditional_panic_98444.stderr?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,10 @@\n+error: this operation will panic at runtime\n+  --> $DIR/unconditional_panic_98444.rs:6:13\n+   |\n+LL |     let _ = xs[7];\n+   |             ^^^^^ index out of bounds: the length is 5 but the index is 7\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "45b5308c0938f58ff5d8fbb40b75d9857854e9d7", "filename": "tests/ui/mir/unsize-trait.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fmir%2Funsize-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fmir%2Funsize-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Funsize-trait.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,15 @@\n+// Check that the interpreter does not ICE when trying to unsize `B` to `[u8]`.\n+// This is a `build` test to ensure that const-prop-lint runs.\n+// build-pass\n+\n+#![feature(unsize)]\n+\n+fn foo<B>(buffer: &mut [B; 2])\n+    where B: std::marker::Unsize<[u8]>,\n+{\n+    let buffer: &[u8] = &buffer[0];\n+}\n+\n+fn main() {\n+    foo(&mut [[0], [5]]);\n+}"}, {"sha": "f78871b5a1d6605549ed1a080ca4a357c31decee", "filename": "tests/ui/stability-attribute/auxiliary/const-stability-attribute-implies.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fauxiliary%2Fconst-stability-attribute-implies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fauxiliary%2Fconst-stability-attribute-implies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fauxiliary%2Fconst-stability-attribute-implies.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,12 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+#![rustc_const_stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"const_foo\", since = \"1.62.0\")]\n+pub const fn foo() {}\n+\n+#[stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_foobar\", issue = \"1\", implied_by = \"const_foo\")]\n+pub const fn foobar() {}"}, {"sha": "6d6d793c62b76c29eae6989ab0ae19f58fa9af75", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-missing.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,16 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+#![rustc_const_stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+\n+// Tests that `implied_by = \"const_bar\"` results in an error being emitted if `const_bar` does not\n+// exist.\n+\n+#[stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_foobar\", issue = \"1\", implied_by = \"const_bar\")]\n+//~^ ERROR feature `const_bar` implying `const_foobar` does not exist\n+pub const fn foobar() -> u32 {\n+    0\n+}\n+\n+const VAR: u32 = foobar();"}, {"sha": "6d8b01a5495233c1a8550c71b71148b81ba68584", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-missing.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.stderr?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,8 @@\n+error: feature `const_bar` implying `const_foobar` does not exist\n+  --> $DIR/const-stability-attribute-implies-missing.rs:10:1\n+   |\n+LL | #[rustc_const_unstable(feature = \"const_foobar\", issue = \"1\", implied_by = \"const_bar\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "47e8d2b3609c5d0aa7018fec2ac255786fe5ec70", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-no-feature.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:const-stability-attribute-implies.rs\n+#![crate_type = \"lib\"]\n+\n+// Tests that despite the `const_foobar` feature being implied by now-stable feature `const_foo`,\n+// if `const_foobar` isn't allowed in this crate then an error will be emitted.\n+\n+extern crate const_stability_attribute_implies;\n+use const_stability_attribute_implies::{foo, foobar};\n+\n+pub const fn bar() -> u32 {\n+    foo(); // no error - stable\n+    foobar(); //~ ERROR `foobar` is not yet stable as a const fn\n+    0\n+}\n+\n+pub const VAR: u32 = bar();"}, {"sha": "8ef5a364ecc457fc4ea54abe7787ccdfd5f9fc75", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-no-feature.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.stderr?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,10 @@\n+error: `foobar` is not yet stable as a const fn\n+  --> $DIR/const-stability-attribute-implies-no-feature.rs:12:5\n+   |\n+LL |     foobar();\n+   |     ^^^^^^^^\n+   |\n+   = help: add `#![feature(const_foobar)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "ffaa171d8a5f7d322e72d7b685512af68007d2c1", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,19 @@\n+// aux-build:const-stability-attribute-implies.rs\n+#![crate_type = \"lib\"]\n+#![deny(stable_features)]\n+#![feature(const_foo)]\n+//~^ ERROR the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`\n+\n+// Tests that the use of `implied_by` in the `#[rustc_const_unstable]` attribute results in a\n+// diagnostic mentioning partial stabilization, and that given the implied unstable feature is\n+// unused (there is no `foobar` call), that the compiler suggests removing the flag.\n+\n+extern crate const_stability_attribute_implies;\n+use const_stability_attribute_implies::foo;\n+\n+pub const fn bar() -> u32 {\n+    foo();\n+    0\n+}\n+\n+pub const VAR: u32 = bar();"}, {"sha": "f6a099cd25e7a5cb9622c2509c3da230eecb8938", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.stderr?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,22 @@\n+error: the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`\n+  --> $DIR/const-stability-attribute-implies-using-stable.rs:4:12\n+   |\n+LL | #![feature(const_foo)]\n+   |            ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-stability-attribute-implies-using-stable.rs:3:9\n+   |\n+LL | #![deny(stable_features)]\n+   |         ^^^^^^^^^^^^^^^\n+help: if you are using features which are still unstable, change to using `const_foobar`\n+   |\n+LL | #![feature(const_foobar)]\n+   |            ~~~~~~~~~~~~\n+help: if you are using features which are now stable, remove this line\n+   |\n+LL - #![feature(const_foo)]\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "2061c5c75bd8148f7929a60d6ecd9c62dcd07c06", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.rs?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,21 @@\n+// aux-build:const-stability-attribute-implies.rs\n+#![crate_type = \"lib\"]\n+#![deny(stable_features)]\n+#![feature(const_foo)]\n+//~^ ERROR the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`\n+\n+// Tests that the use of `implied_by` in the `#[rustc_const_unstable]` attribute results in a\n+// diagnostic mentioning partial stabilization and that given the implied unstable feature is\n+// used (there is a `const_foobar` call), that the compiler suggests changing to that feature and\n+// doesn't error about its use.\n+\n+extern crate const_stability_attribute_implies;\n+use const_stability_attribute_implies::{foo, foobar};\n+\n+pub const fn bar() -> u32 {\n+    foo();\n+    foobar(); // no error!\n+    0\n+}\n+\n+pub const VAR: u32 = bar();"}, {"sha": "0638566765822bdaffffa1078cf8f5eba5746992", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81be7b86d348a5b7cad08386003c43d44d1e9f94/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.stderr?ref=81be7b86d348a5b7cad08386003c43d44d1e9f94", "patch": "@@ -0,0 +1,22 @@\n+error: the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`\n+  --> $DIR/const-stability-attribute-implies-using-unstable.rs:4:12\n+   |\n+LL | #![feature(const_foo)]\n+   |            ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-stability-attribute-implies-using-unstable.rs:3:9\n+   |\n+LL | #![deny(stable_features)]\n+   |         ^^^^^^^^^^^^^^^\n+help: if you are using features which are still unstable, change to using `const_foobar`\n+   |\n+LL | #![feature(const_foobar)]\n+   |            ~~~~~~~~~~~~\n+help: if you are using features which are now stable, remove this line\n+   |\n+LL - #![feature(const_foo)]\n+   |\n+\n+error: aborting due to previous error\n+"}]}