{"sha": "74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OTE5ZGYzYTlhYTA0MTFmMGZmMzlhM2NlZjI1MGFiYmFkZDRhM2Y=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-05-24T19:58:37Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-06-03T04:03:58Z"}, "message": "query-ify const_field", "tree": {"sha": "756d9f02bfc923074806004d6f0ab78059396c22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/756d9f02bfc923074806004d6f0ab78059396c22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "html_url": "https://github.com/rust-lang/rust/commit/74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c747f31ffce95507471156f77d2e5ea1c4ccf9c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c747f31ffce95507471156f77d2e5ea1c4ccf9c9", "html_url": "https://github.com/rust-lang/rust/commit/c747f31ffce95507471156f77d2e5ea1c4ccf9c9"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "e9c4d6b3bad64c46608d57d37acbddd91d477e5b", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "patch": "@@ -2703,7 +2703,6 @@ dependencies = [\n  \"rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n- \"rustc_mir 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "a364a6da2e497ff598ae3e60b90e55f567385c2b", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "patch": "@@ -49,6 +49,7 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n+use crate::mir;\n use crate::mir::interpret::GlobalId;\n use crate::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use crate::hir::map::DefPathHash;"}, {"sha": "00856041edf4631528dcd1ffe6d95b86e4a203fc", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "patch": "@@ -4,6 +4,7 @@ use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use crate::ty::subst::SubstsRef;\n use crate::dep_graph::SerializedDepNodeIndex;\n use crate::hir::def_id::{CrateNum, DefId, DefIndex};\n+use crate::mir;\n use crate::mir::interpret::GlobalId;\n use crate::traits;\n use crate::traits::query::{\n@@ -431,6 +432,15 @@ rustc_queries! {\n                 tcx.queries.on_disk_cache.try_load_query_result(tcx, id).map(Ok)\n             }\n         }\n+\n+        /// Extracts a field of a (variant of a) const.\n+        query const_field(\n+            key: ty::ParamEnvAnd<'tcx, (&'tcx ty::Const<'tcx>, mir::Field)>\n+        ) -> &'tcx ty::Const<'tcx> {\n+            eval_always\n+            no_force\n+            desc { \"extract field of const\" }\n+        }\n     }\n \n     TypeChecking {"}, {"sha": "a7cb7bd3956f00457b30c76b636bc204fe40d574", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "patch": "@@ -7,9 +7,10 @@ use rustc_data_structures::fx::FxHashSet;\n \n // `pretty` is a separate module only for organization.\n mod pretty;\n-pub mod obsolete;\n pub use self::pretty::*;\n \n+pub mod obsolete;\n+\n pub trait Print<'gcx, 'tcx, P> {\n     type Output;\n     type Error;"}, {"sha": "27b0e8e881df9b3700d482c775c5814ed9c28347", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "patch": "@@ -127,6 +127,15 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     }\n }\n \n+impl<'tcx> Key for (&'tcx ty::Const<'tcx>, mir::Field) {\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n     fn query_crate(&self) -> CrateNum {\n         self.def_id().krate"}, {"sha": "78c22206ab7a54d24d48a3fc080d1528b9b85f7c", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "patch": "@@ -1,5 +1,4 @@\n use rustc::mir::interpret::ErrorHandled;\n-use rustc_mir::const_eval::const_field;\n use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc::ty::{self, Ty};\n@@ -46,12 +45,8 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     _ => bug!(\"invalid simd shuffle type: {}\", c.ty),\n                 };\n                 let values: Vec<_> = (0..fields).map(|field| {\n-                    let field = const_field(\n-                        bx.tcx(),\n-                        ty::ParamEnv::reveal_all(),\n-                        None,\n-                        mir::Field::new(field as usize),\n-                        c,\n+                    let field = bx.tcx().const_field(\n+                        ty::ParamEnv::reveal_all().and((&c, mir::Field::new(field as usize)))\n                     );\n                     if let Some(prim) = field.val.try_to_scalar() {\n                         let layout = bx.layout_of(field_ty);"}, {"sha": "d118a61bcc6ce06f03b9776f9f3cafea56b08218", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "patch": "@@ -470,7 +470,7 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n     }\n }\n \n-/// Projects to a field of a (variant of a) const.\n+/// Extracts a field of a (variant of a) const.\n // this function uses `unwrap` copiously, because an already validated constant must have valid\n // fields and can thus never fail outside of compiler bugs\n pub fn const_field<'a, 'tcx>("}, {"sha": "716838b4fc597c4078641bd013371122d13c098a", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "patch": "@@ -5,7 +5,7 @@ mod check_match;\n \n pub(crate) use self::check_match::check_match;\n \n-use crate::const_eval::{const_field, const_variant_index};\n+use crate::const_eval::const_variant_index;\n \n use crate::hair::util::UserAnnotatedTyHelpers;\n use crate::hair::constant::*;\n@@ -949,7 +949,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         debug!(\"const_to_pat: cv={:#?} id={:?}\", cv, id);\n         let adt_subpattern = |i, variant_opt| {\n             let field = Field::new(i);\n-            let val = const_field(self.tcx, self.param_env, variant_opt, field, cv);\n+            let val = crate::const_eval::const_field(\n+                self.tcx, self.param_env, variant_opt, field, cv\n+            );\n             self.const_to_pat(instance, val, id, span)\n         };\n         let adt_subpatterns = |n, variant_opt| {"}, {"sha": "46bda28c13c5c515e4a3cf1a9fbf35007e312781", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74919df3a9aa0411f0ff39a3cef250abbadd4a3f/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=74919df3a9aa0411f0ff39a3cef250abbadd4a3f", "patch": "@@ -63,6 +63,10 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.const_eval = const_eval::const_eval_provider;\n     providers.const_eval_raw = const_eval::const_eval_raw_provider;\n     providers.check_match = hair::pattern::check_match;\n+    providers.const_field = |tcx, param_env_and_value| {\n+        let (param_env, (value, field)) = param_env_and_value.into_parts();\n+        const_eval::const_field(tcx, param_env, None, field, value)\n+    };\n }\n \n __build_diagnostic_array! { librustc_mir, DIAGNOSTICS }"}]}