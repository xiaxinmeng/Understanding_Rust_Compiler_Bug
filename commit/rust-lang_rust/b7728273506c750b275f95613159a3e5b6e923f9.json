{"sha": "b7728273506c750b275f95613159a3e5b6e923f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NzI4MjczNTA2Yzc1MGIyNzVmOTU2MTMxNTlhM2U1YjZlOTIzZjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-30T09:14:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-02T08:40:50Z"}, "message": "encapsulate the `Region` struct within region inference", "tree": {"sha": "0c5a9417139a95a24dd09d1b66889d4080d44c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5a9417139a95a24dd09d1b66889d4080d44c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7728273506c750b275f95613159a3e5b6e923f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7728273506c750b275f95613159a3e5b6e923f9", "html_url": "https://github.com/rust-lang/rust/commit/b7728273506c750b275f95613159a3e5b6e923f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7728273506c750b275f95613159a3e5b6e923f9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc696ad8af7d59edd37480aa3aa56e89878fd97", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc696ad8af7d59edd37480aa3aa56e89878fd97", "html_url": "https://github.com/rust-lang/rust/commit/bfc696ad8af7d59edd37480aa3aa56e89878fd97"}], "stats": {"total": 106, "additions": 62, "deletions": 44}, "files": [{"sha": "e8bf543b70b6a1d443151888d81290cef66722ee", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7728273506c750b275f95613159a3e5b6e923f9/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7728273506c750b275f95613159a3e5b6e923f9/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=b7728273506c750b275f95613159a3e5b6e923f9", "patch": "@@ -139,11 +139,21 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                                            location: Location) {\n         if let Some(regioncx) = self.nonlexical_regioncx {\n             for (borrow_index, borrow_data) in self.borrows.iter_enumerated() {\n-                let borrow_region = regioncx.region_value(borrow_data.region.to_region_index());\n-                if !borrow_region.may_contain_point(location) && location != borrow_data.location {\n-                    debug!(\"kill_loans_out_of_scope_at_location: kill{:?} \\\n-                           location={:?} borrow_data={:?}\", borrow_index, location, borrow_data);\n-                    sets.kill(&borrow_index);\n+                let borrow_region = borrow_data.region.to_region_index();\n+                if !regioncx.region_contains_point(borrow_region, location) {\n+                    // The region checker really considers the borrow\n+                    // to start at the point **after** the location of\n+                    // the borrow, but the borrow checker puts the gen\n+                    // directly **on** the location of the\n+                    // borrow. This results in a gen/kill both being\n+                    // generated for same point if we are not\n+                    // careful. Probably we should change the point of\n+                    // the gen, but for now we hackily account for the\n+                    // mismatch here by not generating a kill for the\n+                    // location on the borrow itself.\n+                    if location != borrow_data.location {\n+                        sets.kill(&borrow_index);\n+                    }\n                 }\n             }\n         }"}, {"sha": "e24def2292ec6e0656f328696cb10c65e79fdb11", "filename": "src/librustc_mir/transform/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b7728273506c750b275f95613159a3e5b6e923f9/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7728273506c750b275f95613159a3e5b6e923f9/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs?ref=b7728273506c750b275f95613159a3e5b6e923f9", "patch": "@@ -9,13 +9,12 @@\n // except according to those terms.\n \n use rustc::ty::{self, RegionKind};\n-use rustc::mir::{Location, Mir};\n+use rustc::mir::Mir;\n use rustc::mir::transform::MirSource;\n use rustc::infer::InferCtxt;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use std::collections::BTreeSet;\n-use std::fmt;\n use util::liveness::{self, LivenessMode, LivenessResult, LocalSet};\n \n use util as mir_util;\n@@ -151,39 +150,6 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     });\n }\n \n-#[derive(Clone, Default, PartialEq, Eq)]\n-pub struct Region {\n-    points: BTreeSet<Location>,\n-    free_regions: BTreeSet<RegionIndex>,\n-}\n-\n-impl fmt::Debug for Region {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        formatter.debug_set()\n-                 .entries(&self.points)\n-                 .entries(&self.free_regions)\n-                 .finish()\n-    }\n-}\n-\n-impl Region {\n-    pub fn add_point(&mut self, point: Location) -> bool {\n-        self.points.insert(point)\n-    }\n-\n-    pub fn add_free_region(&mut self, region: RegionIndex) -> bool {\n-        self.free_regions.insert(region)\n-    }\n-\n-    pub fn may_contain_point(&self, point: Location) -> bool {\n-        self.points.contains(&point)\n-    }\n-\n-    pub fn may_contain_free_region(&self, region: RegionIndex) -> bool {\n-        self.free_regions.contains(&region)\n-    }\n-}\n-\n newtype_index!(RegionIndex {\n     DEBUG_FORMAT = \"'_#{}r\",\n });"}, {"sha": "f4a7682e9d6279566a99892216ab91b7e0a21297", "filename": "src/librustc_mir/transform/nll/region_infer.rs", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b7728273506c750b275f95613159a3e5b6e923f9/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7728273506c750b275f95613159a3e5b6e923f9/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs?ref=b7728273506c750b275f95613159a3e5b6e923f9", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::{Region, RegionIndex};\n+use super::RegionIndex;\n use super::free_regions::FreeRegions;\n use rustc::infer::InferCtxt;\n use rustc::mir::{Location, Mir};\n use rustc::ty;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::fx::FxHashSet;\n+use std::collections::BTreeSet;\n+use std::fmt;\n \n pub struct RegionInferenceContext<'tcx> {\n     /// Contains the definition for every region variable.  Region\n@@ -54,6 +56,41 @@ struct RegionDefinition<'tcx> {\n     value: Region,\n }\n \n+/// The value of an individual region variable. Region variables\n+/// consist of a set of points in the CFG as well as a set of \"free\n+/// regions\", which are sometimes written as `end(R)`. These\n+/// correspond to the named lifetimes and refer to portions of the\n+/// caller's control-flow graph -- specifically some portion that can\n+/// be reached after we return.\n+#[derive(Clone, Default, PartialEq, Eq)]\n+struct Region {\n+    points: BTreeSet<Location>,\n+    free_regions: BTreeSet<RegionIndex>,\n+}\n+\n+impl fmt::Debug for Region {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+        formatter.debug_set()\n+                 .entries(&self.points)\n+                 .entries(&self.free_regions)\n+                 .finish()\n+    }\n+}\n+\n+impl Region {\n+    fn add_point(&mut self, point: Location) -> bool {\n+        self.points.insert(point)\n+    }\n+\n+    fn add_free_region(&mut self, region: RegionIndex) -> bool {\n+        self.free_regions.insert(region)\n+    }\n+\n+    fn contains_point(&self, point: Location) -> bool {\n+        self.points.contains(&point)\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct Constraint {\n     sub: RegionIndex,\n@@ -157,10 +194,15 @@ impl<'a, 'gcx, 'tcx> RegionInferenceContext<'tcx> {\n         self.definitions.indices()\n     }\n \n-    /// Returns the inferred value for the region `r`.\n+    /// Returns true if the region `r` contains the point `p`.\n     ///\n     /// Until `solve()` executes, this value is not particularly meaningful.\n-    pub fn region_value(&self, r: RegionIndex) -> &Region {\n+    pub fn region_contains_point(&self, r: RegionIndex, p: Location) -> bool {\n+        self.definitions[r].value.contains_point(p)\n+    }\n+\n+    /// Returns access to the value of `r` for debugging purposes.\n+    pub(super) fn region_value(&self, r: RegionIndex) -> &fmt::Debug {\n         &self.definitions[r].value\n     }\n \n@@ -235,7 +277,7 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> Dfs<'a, 'gcx, 'tcx> {\n         while let Some(p) = stack.pop() {\n             debug!(\"        dfs: p={:?}\", p);\n \n-            if !from_region.may_contain_point(p) {\n+            if !from_region.contains_point(p) {\n                 debug!(\"            not in from-region\");\n                 continue;\n             }"}]}