{"sha": "83b198249f6a417a96bce9d4264257f53ff7b48f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYjE5ODI0OWY2YTQxN2E5NmJjZTlkNDI2NDI1N2Y1M2ZmN2I0OGY=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-10-17T03:21:25Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-10-19T13:53:56Z"}, "message": "Use TypedArena::alloc_slice in rustc.", "tree": {"sha": "5fac81ea5b2498f633ef0cdc5d6a88f1f4eac563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fac81ea5b2498f633ef0cdc5d6a88f1f4eac563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83b198249f6a417a96bce9d4264257f53ff7b48f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83b198249f6a417a96bce9d4264257f53ff7b48f", "html_url": "https://github.com/rust-lang/rust/commit/83b198249f6a417a96bce9d4264257f53ff7b48f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83b198249f6a417a96bce9d4264257f53ff7b48f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a714c2a15c8cc36dc2cce36e32dfe3a8fc836532", "url": "https://api.github.com/repos/rust-lang/rust/commits/a714c2a15c8cc36dc2cce36e32dfe3a8fc836532", "html_url": "https://github.com/rust-lang/rust/commit/a714c2a15c8cc36dc2cce36e32dfe3a8fc836532"}], "stats": {"total": 104, "additions": 54, "deletions": 50}, "files": [{"sha": "6fe6498ff789ca6d05d9397d75643307edf16ef7", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -163,7 +163,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 let lhs_ty = lhs.ty(mir, tcx);\n                 let rhs_ty = rhs.ty(mir, tcx);\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);\n-                let ty = tcx.mk_tup(vec![ty, tcx.types.bool]);\n+                let ty = tcx.mk_tup(&[ty, tcx.types.bool]);\n                 Some(ty)\n             }\n             &Rvalue::UnaryOp(_, ref operand) => {\n@@ -184,7 +184,7 @@ impl<'tcx> Rvalue<'tcx> {\n                     }\n                     AggregateKind::Tuple => {\n                         Some(tcx.mk_tup(\n-                            ops.iter().map(|op| op.ty(mir, tcx)).collect()\n+                            &ops.iter().map(|op| op.ty(mir, tcx)).collect::<Vec<_>>()\n                         ))\n                     }\n                     AggregateKind::Adt(def, _, substs, _) => {"}, {"sha": "fa951b5efdb2bdcadadda684127279415b81fcbe", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -486,7 +486,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     {\n         let arguments_tuple = match tuple_arguments {\n             TupleArgumentsFlag::No => sig.0.inputs[0],\n-            TupleArgumentsFlag::Yes => self.mk_tup(sig.0.inputs.to_vec()),\n+            TupleArgumentsFlag::Yes => self.mk_tup(&sig.0.inputs),\n         };\n         let trait_ref = ty::TraitRef {\n             def_id: fn_trait_def_id,"}, {"sha": "d075b08f7385ab5293e894f10d0f821e732e071a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -54,8 +54,8 @@ use hir;\n pub struct CtxtArenas<'tcx> {\n     // internings\n     type_: TypedArena<TyS<'tcx>>,\n-    type_list: TypedArena<Vec<Ty<'tcx>>>,\n-    substs: TypedArena<Vec<Kind<'tcx>>>,\n+    type_list: TypedArena<Ty<'tcx>>,\n+    substs: TypedArena<Kind<'tcx>>,\n     bare_fn: TypedArena<BareFnTy<'tcx>>,\n     region: TypedArena<Region>,\n     stability: TypedArena<attr::Stability>,\n@@ -1117,6 +1117,7 @@ impl<'tcx> Borrow<Region> for Interned<'tcx, Region> {\n \n macro_rules! intern_method {\n     ($lt_tcx:tt, $name:ident: $method:ident($alloc:ty,\n+                                            $alloc_method:ident,\n                                             $alloc_to_key:expr,\n                                             $alloc_to_ret:expr,\n                                             $needs_infer:expr) -> $ty:ty) => {\n@@ -1142,7 +1143,8 @@ macro_rules! intern_method {\n                         let v = unsafe {\n                             mem::transmute(v)\n                         };\n-                        let i = ($alloc_to_ret)(self.global_interners.arenas.$name.alloc(v));\n+                        let i = ($alloc_to_ret)(self.global_interners.arenas.$name\n+                                                    .$alloc_method(v));\n                         self.global_interners.$name.borrow_mut().insert(Interned(i));\n                         return i;\n                     }\n@@ -1156,7 +1158,7 @@ macro_rules! intern_method {\n                     }\n                 }\n \n-                let i = ($alloc_to_ret)(self.interners.arenas.$name.alloc(v));\n+                let i = ($alloc_to_ret)(self.interners.arenas.$name.$alloc_method(v));\n                 self.interners.$name.borrow_mut().insert(Interned(i));\n                 i\n             }\n@@ -1180,7 +1182,7 @@ macro_rules! direct_interners {\n             }\n         }\n \n-        intern_method!($lt_tcx, $name: $method($ty, |x| x, |x| x, $needs_infer) -> $ty);)+\n+        intern_method!($lt_tcx, $name: $method($ty, alloc, |x| x, |x| x, $needs_infer) -> $ty);)+\n     }\n }\n \n@@ -1200,16 +1202,18 @@ direct_interners!('tcx,\n     }) -> Region\n );\n \n-intern_method!('tcx,\n-    type_list: mk_type_list(Vec<Ty<'tcx>>, Deref::deref, |xs: &[Ty]| -> &Slice<Ty> {\n-        unsafe { mem::transmute(xs) }\n-    }, keep_local) -> Slice<Ty<'tcx>>\n-);\n+macro_rules! slice_interners {\n+    ($($field:ident: $method:ident($ty:ident)),+) => (\n+        $(intern_method!('tcx, $field: $method(&[$ty<'tcx>], alloc_slice, Deref::deref,\n+                                               |xs: &[$ty]| -> &Slice<$ty> {\n+            unsafe { mem::transmute(xs) }\n+        }, |xs: &[$ty]| xs.iter().any(keep_local)) -> Slice<$ty<'tcx>>);)+\n+    )\n+}\n \n-intern_method!('tcx,\n-    substs: mk_substs(Vec<Kind<'tcx>>, Deref::deref, |xs: &[Kind]| -> &Slice<Kind> {\n-        unsafe { mem::transmute(xs) }\n-    }, keep_local) -> Slice<Kind<'tcx>>\n+slice_interners!(\n+    type_list: mk_type_list(Ty),\n+    substs: mk_substs(Kind)\n );\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n@@ -1314,12 +1318,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TySlice(ty))\n     }\n \n-    pub fn mk_tup(self, ts: Vec<Ty<'tcx>>) -> Ty<'tcx> {\n+    pub fn mk_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n         self.mk_ty(TyTuple(self.mk_type_list(ts)))\n     }\n \n     pub fn mk_nil(self) -> Ty<'tcx> {\n-        self.mk_tup(Vec::new())\n+        self.mk_tup(&[])\n     }\n \n     pub fn mk_diverging_default(self) -> Ty<'tcx> {\n@@ -1361,7 +1365,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn mk_closure(self,\n                       closure_id: DefId,\n                       substs: &'tcx Substs<'tcx>,\n-                      tys: Vec<Ty<'tcx>>)\n+                      tys: &[Ty<'tcx>])\n                       -> Ty<'tcx> {\n         self.mk_closure_from_closure_substs(closure_id, ClosureSubsts {\n             func_substs: substs,"}, {"sha": "018f01e5913c0f63e22ef7a77e98eb8d5107b108", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -1797,7 +1797,7 @@ impl<'a, 'tcx> AdtDefData<'tcx, 'tcx> {\n             _ if tys.references_error() => tcx.types.err,\n             0 => tcx.types.bool,\n             1 => tys[0],\n-            _ => tcx.mk_tup(tys)\n+            _ => tcx.mk_tup(&tys)\n         };\n \n         match self.sized_constraint.get(dep_node()) {"}, {"sha": "48b0b4ec9e58f0347caa71ad552a4b3440b34a3a", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -491,8 +491,8 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             if as_.len() == bs.len() {\n                 let ts = as_.iter().zip(bs)\n                             .map(|(a, b)| relation.relate(a, b))\n-                            .collect::<Result<_, _>>()?;\n-                Ok(tcx.mk_tup(ts))\n+                            .collect::<Result<Vec<_>, _>>()?;\n+                Ok(tcx.mk_tup(&ts))\n             } else if !(as_.is_empty() || bs.is_empty()) {\n                 Err(TypeError::TupleSize(\n                     expected_found(relation, &as_.len(), &bs.len())))\n@@ -547,7 +547,7 @@ impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {\n         let upvar_tys = relation.relate_zip(&a.upvar_tys, &b.upvar_tys)?;\n         Ok(ty::ClosureSubsts {\n             func_substs: substs,\n-            upvar_tys: relation.tcx().mk_type_list(upvar_tys)\n+            upvar_tys: relation.tcx().mk_type_list(&upvar_tys)\n         })\n     }\n }"}, {"sha": "0f4cff3d4875b4b456948bc1f41e6f63641f9457", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -448,8 +448,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TraitObject<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Slice<Ty<'tcx>> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        let tys = self.iter().map(|t| t.fold_with(folder)).collect();\n-        folder.tcx().mk_type_list(tys)\n+        let tys = self.iter().map(|t| t.fold_with(folder)).collect::<Vec<_>>();\n+        folder.tcx().mk_type_list(&tys)\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {"}, {"sha": "b0fdaa170996daf9bde23d5a5f7b079d90e07625", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     pub fn new<I>(tcx: TyCtxt<'a, 'gcx, 'tcx>, params: I)\n                   -> &'tcx Substs<'tcx>\n     where I: IntoIterator<Item=Kind<'tcx>> {\n-        tcx.mk_substs(params.into_iter().collect())\n+        tcx.mk_substs(&params.into_iter().collect::<Vec<_>>())\n     }\n \n     pub fn maybe_new<I, E>(tcx: TyCtxt<'a, 'gcx, 'tcx>, params: I)\n@@ -311,7 +311,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx Substs<'tcx> {\n         if params[..] == self[..] {\n             self\n         } else {\n-            folder.tcx().mk_substs(params)\n+            folder.tcx().mk_substs(&params)\n         }\n     }\n "}, {"sha": "15be80f4ee5a5e5169cc74406413c2bbce62ebe1", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -275,7 +275,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_pair(&self, ty1: Ty<'tcx>, ty2: Ty<'tcx>) -> Ty<'tcx> {\n-        self.infcx.tcx.mk_tup(vec![ty1, ty2])\n+        self.infcx.tcx.mk_tup(&[ty1, ty2])\n     }\n \n     pub fn t_param(&self, index: u32) -> Ty<'tcx> {\n@@ -803,8 +803,8 @@ fn walk_ty() {\n         let tcx = env.infcx.tcx;\n         let int_ty = tcx.types.isize;\n         let uint_ty = tcx.types.usize;\n-        let tup1_ty = tcx.mk_tup(vec![int_ty, uint_ty, int_ty, uint_ty]);\n-        let tup2_ty = tcx.mk_tup(vec![tup1_ty, tup1_ty, uint_ty]);\n+        let tup1_ty = tcx.mk_tup(&[int_ty, uint_ty, int_ty, uint_ty]);\n+        let tup2_ty = tcx.mk_tup(&[tup1_ty, tup1_ty, uint_ty]);\n         let uniq_ty = tcx.mk_box(tup2_ty);\n         let walked: Vec<_> = uniq_ty.walk().collect();\n         assert_eq!(walked,\n@@ -819,8 +819,8 @@ fn walk_ty_skip_subtree() {\n         let tcx = env.infcx.tcx;\n         let int_ty = tcx.types.isize;\n         let uint_ty = tcx.types.usize;\n-        let tup1_ty = tcx.mk_tup(vec![int_ty, uint_ty, int_ty, uint_ty]);\n-        let tup2_ty = tcx.mk_tup(vec![tup1_ty, tup1_ty, uint_ty]);\n+        let tup1_ty = tcx.mk_tup(&[int_ty, uint_ty, int_ty, uint_ty]);\n+        let tup2_ty = tcx.mk_tup(&[tup1_ty, tup1_ty, uint_ty]);\n         let uniq_ty = tcx.mk_box(tup2_ty);\n \n         // types we expect to see (in order), plus a boolean saying"}, {"sha": "e18fd581443987cef115df91fc5ca8466dfec306", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -374,7 +374,7 @@ impl<'a, 'tcx> SpecializedDecoder<ty::GenericPredicates<'tcx>> for DecodeContext\n \n impl<'a, 'tcx> SpecializedDecoder<&'tcx Substs<'tcx>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<&'tcx Substs<'tcx>, Self::Error> {\n-        Ok(self.tcx().mk_substs(Decodable::decode(self)?))\n+        Ok(self.tcx().mk_substs(&Vec::decode(self)?))\n     }\n }\n \n@@ -386,7 +386,7 @@ impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Region> for DecodeContext<'a, 'tcx>\n \n impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Slice<Ty<'tcx>>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<&'tcx ty::Slice<Ty<'tcx>>, Self::Error> {\n-        Ok(self.tcx().mk_type_list(Decodable::decode(self)?))\n+        Ok(self.tcx().mk_type_list(&Vec::decode(self)?))\n     }\n }\n "}, {"sha": "d30af8b82555c0971d192bb9c73e6acd14faeaef", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -257,7 +257,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = self.source_info(span);\n         let bool_ty = self.hir.bool_ty();\n         if self.hir.check_overflow() && op.is_checkable() && ty.is_integral() {\n-            let result_tup = self.hir.tcx().mk_tup(vec![ty, bool_ty]);\n+            let result_tup = self.hir.tcx().mk_tup(&[ty, bool_ty]);\n             let result_value = self.temp(result_tup);\n \n             self.cfg.push_assign(block, source_info,"}, {"sha": "5c7ab77648e5e078fc9dfb151698cc9c457ebadd", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -327,7 +327,7 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n         }\n     };\n     let sig = tcx.erase_late_bound_regions_and_normalize(sig);\n-    let tuple_input_ty = tcx.mk_tup(sig.inputs.to_vec());\n+    let tuple_input_ty = tcx.mk_tup(&sig.inputs);\n     let sig = ty::FnSig {\n         inputs: vec![bare_fn_ty_maybe_ref,\n                      tuple_input_ty],"}, {"sha": "baa306069f1686ea6a4cbe646d317787357ea63a", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -773,7 +773,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 let rhs = self.const_operand(rhs, span)?;\n                 let ty = lhs.ty;\n                 let val_ty = op.ty(tcx, lhs.ty, rhs.ty);\n-                let binop_ty = tcx.mk_tup(vec![val_ty, tcx.types.bool]);\n+                let binop_ty = tcx.mk_tup(&[val_ty, tcx.types.bool]);\n                 let (lhs, rhs) = (lhs.llval, rhs.llval);\n                 assert!(!ty.is_fp());\n "}, {"sha": "5ffaadf972a6392878e55c8389914757ac651645", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -430,7 +430,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                                              lhs.immediate(), rhs.immediate(),\n                                                              lhs.ty);\n                 let val_ty = op.ty(bcx.tcx(), lhs.ty, rhs.ty);\n-                let operand_ty = bcx.tcx().mk_tup(vec![val_ty, bcx.tcx().types.bool]);\n+                let operand_ty = bcx.tcx().mk_tup(&[val_ty, bcx.tcx().types.bool]);\n                 let operand = OperandRef {\n                     val: result,\n                     ty: operand_ty"}, {"sha": "0c4e6324b89110baf8210107be121735157a12ef", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -660,7 +660,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             span: output_span\n         };\n \n-        (self.tcx().mk_tup(inputs), output_binding)\n+        (self.tcx().mk_tup(&inputs), output_binding)\n     }\n \n     pub fn instantiate_poly_trait_ref(&self,\n@@ -1663,8 +1663,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             hir::TyTup(ref fields) => {\n                 let flds = fields.iter()\n                                  .map(|t| self.ast_ty_to_ty(rscope, &t))\n-                                 .collect();\n-                tcx.mk_tup(flds)\n+                                 .collect::<Vec<_>>();\n+                tcx.mk_tup(&flds)\n             }\n             hir::TyBareFn(ref bf) => {\n                 require_c_abi_if_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);"}, {"sha": "f7e590871fc5e5a461d35a17084309a8e239224b", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -169,7 +169,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let max_len = cmp::max(expected_len, elements.len());\n \n                 let element_tys: Vec<_> = (0 .. max_len).map(|_| self.next_ty_var()).collect();\n-                let pat_ty = tcx.mk_tup(element_tys.clone());\n+                let pat_ty = tcx.mk_tup(&element_tys);\n                 self.demand_eqtype(pat.span, expected, pat_ty);\n                 for (i, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n                     self.check_pat(elem, &element_tys[i]);"}, {"sha": "7b05cd1d4832814fa719749af574bd827147e097", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let closure_type = self.tcx.mk_closure(expr_def_id,\n                                                self.parameter_environment.free_substs,\n-                                               upvar_tys);\n+                                               &upvar_tys);\n \n         let fn_sig = self.tcx\n             .liberate_late_bound_regions(self.tcx.region_maps.call_site_extent(expr.id, body.id),\n@@ -88,7 +88,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Tuple up the arguments and insert the resulting function type into\n         // the `closures` table.\n-        fn_ty.sig.0.inputs = vec![self.tcx.mk_tup(fn_ty.sig.0.inputs)];\n+        fn_ty.sig.0.inputs = vec![self.tcx.mk_tup(&fn_ty.sig.0.inputs)];\n \n         debug!(\"closure for {:?} --> sig={:?} opt_kind={:?}\",\n                expr_def_id,"}, {"sha": "7171b33a3af397412b7efa115abe991101de5c71", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -89,7 +89,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n             \"cxchg\" | \"cxchgweak\" => (1, vec!(tcx.mk_mut_ptr(param(ccx, 0)),\n                                               param(ccx, 0),\n                                               param(ccx, 0)),\n-                                      tcx.mk_tup(vec!(param(ccx, 0), tcx.types.bool))),\n+                                      tcx.mk_tup(&[param(ccx, 0), tcx.types.bool])),\n             \"load\" => (1, vec!(tcx.mk_imm_ptr(param(ccx, 0))),\n                        param(ccx, 0)),\n             \"store\" => (1, vec!(tcx.mk_mut_ptr(param(ccx, 0)), param(ccx, 0)),\n@@ -274,7 +274,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n \n             \"add_with_overflow\" | \"sub_with_overflow\"  | \"mul_with_overflow\" =>\n                 (1, vec!(param(ccx, 0), param(ccx, 0)),\n-                tcx.mk_tup(vec!(param(ccx, 0), tcx.types.bool))),\n+                tcx.mk_tup(&[param(ccx, 0), tcx.types.bool])),\n \n             \"unchecked_div\" | \"unchecked_rem\" =>\n                 (1, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 0)),"}, {"sha": "af5a1d7b713832043beb62d25d1991f8f726b2a6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b198249f6a417a96bce9d4264257f53ff7b48f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=83b198249f6a417a96bce9d4264257f53ff7b48f", "patch": "@@ -2380,7 +2380,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             let err_inputs = match tuple_arguments {\n                 DontTupleArguments => err_inputs,\n-                TupleArguments => vec![self.tcx.mk_tup(err_inputs)],\n+                TupleArguments => vec![self.tcx.mk_tup(&err_inputs)],\n             };\n \n             self.check_argument_types(sp, &err_inputs[..], &[], args_no_rcvr,\n@@ -3733,11 +3733,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 };\n                 err_field = err_field || t.references_error();\n                 t\n-            }).collect();\n+            }).collect::<Vec<_>>();\n             if err_field {\n                 tcx.types.err\n             } else {\n-                tcx.mk_tup(elt_ts)\n+                tcx.mk_tup(&elt_ts)\n             }\n           }\n           hir::ExprStruct(ref path, ref fields, ref base_expr) => {"}]}