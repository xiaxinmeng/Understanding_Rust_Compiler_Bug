{"sha": "9cf0ff26f82937a20d60a115cfb331e3f7a8c2d3", "node_id": "C_kwDOAAsO6NoAKDljZjBmZjI2ZjgyOTM3YTIwZDYwYTExNWNmYjMzMWUzZjdhOGMyZDM", "commit": {"author": {"name": "Giacomo Pasini", "email": "giacomo@status.im", "date": "2023-02-16T22:14:04Z"}, "committer": {"name": "Giacomo Pasini", "email": "giacomo@status.im", "date": "2023-03-03T15:33:11Z"}, "message": "use helper function for error reporting", "tree": {"sha": "1d8377a3eb94a6ee91231f674cf5017a8b860deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d8377a3eb94a6ee91231f674cf5017a8b860deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf0ff26f82937a20d60a115cfb331e3f7a8c2d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEElHY+FNnS7QgcFjiQoDhRt4psmkYFAmQCEzcACgkQoDhRt4ps\nmkbktA//ZqQmcF+0YOtArBQ6iWg8CM3jxhcU866lrjMxjn2cLZ4q9zGwqSheTzan\nvGr8JPfyix1WhC1t4mU77ubmPd9ZtIFoH1gE6PtqBzSaito0uTHrvYerqNNDOaa9\nkHVKhhbVJHu9WpakmilPFg2Oj3oR/Ls5vAZG8+3Jq0MmwdqzYUEktOboXkA4ty3S\npj8Ib4XwOcBULaKaD1yJLZ/qJO7DzOx0KtezJAG7S4MHKcWgAXpH2bRO//CJj+RO\ns4yaHJ6p27bezS8IHz+NBQ0Jf9xKE/Iz2YlVELa9lLMWC21WlgrMi2UedrjHkqJI\nNY0THaGjigUBKuKKzRpxMUMYHz3A2va/xA3GiNzG65THYs6Tuc1+puyLQQq8Wrmz\nA/maoUPYjvudc8hXkwIBEe6SDT0e88q93USXyv7OvkcrsKDQOX5vDMuiBF6eWLvg\nrZi3qbBQgujYd1U9KM6DQhj0wTs8Pe47UoBY8+JaCmR4s9O5mkeRv7qdrlFftVSg\nHhXXmvZ71Rplz1tDKBya2TE17ZYzetRDYkY2lQoFuq2W8VS4ZRnTsASlUhodRhk0\ntGzBIdjbzRuy9r13ig02pvZVEsc5i0eN8hcxvYwBfi8R+XBUw0lJiwqpu3cmA1m6\nYkcVSkb0e9ahWAksn+B+WsiNs9O8hLl4K1MmYcYdPBTyxVS7EhI=\n=Ytgy\n-----END PGP SIGNATURE-----", "payload": "tree 1d8377a3eb94a6ee91231f674cf5017a8b860deb\nparent b3a47d9b6b26adebe9ce0e24c7efb26c6380d50a\nauthor Giacomo Pasini <giacomo@status.im> 1676585644 +0100\ncommitter Giacomo Pasini <giacomo@status.im> 1677857591 +0100\n\nuse helper function for error reporting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf0ff26f82937a20d60a115cfb331e3f7a8c2d3", "html_url": "https://github.com/rust-lang/rust/commit/9cf0ff26f82937a20d60a115cfb331e3f7a8c2d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf0ff26f82937a20d60a115cfb331e3f7a8c2d3/comments", "author": {"login": "Zeegomo", "id": 21265557, "node_id": "MDQ6VXNlcjIxMjY1NTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21265557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zeegomo", "html_url": "https://github.com/Zeegomo", "followers_url": "https://api.github.com/users/Zeegomo/followers", "following_url": "https://api.github.com/users/Zeegomo/following{/other_user}", "gists_url": "https://api.github.com/users/Zeegomo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zeegomo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zeegomo/subscriptions", "organizations_url": "https://api.github.com/users/Zeegomo/orgs", "repos_url": "https://api.github.com/users/Zeegomo/repos", "events_url": "https://api.github.com/users/Zeegomo/events{/privacy}", "received_events_url": "https://api.github.com/users/Zeegomo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zeegomo", "id": 21265557, "node_id": "MDQ6VXNlcjIxMjY1NTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21265557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zeegomo", "html_url": "https://github.com/Zeegomo", "followers_url": "https://api.github.com/users/Zeegomo/followers", "following_url": "https://api.github.com/users/Zeegomo/following{/other_user}", "gists_url": "https://api.github.com/users/Zeegomo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zeegomo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zeegomo/subscriptions", "organizations_url": "https://api.github.com/users/Zeegomo/orgs", "repos_url": "https://api.github.com/users/Zeegomo/repos", "events_url": "https://api.github.com/users/Zeegomo/events{/privacy}", "received_events_url": "https://api.github.com/users/Zeegomo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3a47d9b6b26adebe9ce0e24c7efb26c6380d50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a47d9b6b26adebe9ce0e24c7efb26c6380d50a", "html_url": "https://github.com/rust-lang/rust/commit/b3a47d9b6b26adebe9ce0e24c7efb26c6380d50a"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "a622a215a2e8e20583b9eec925043cf602f90c66", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9cf0ff26f82937a20d60a115cfb331e3f7a8c2d3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf0ff26f82937a20d60a115cfb331e3f7a8c2d3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=9cf0ff26f82937a20d60a115cfb331e3f7a8c2d3", "patch": "@@ -1467,6 +1467,32 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     /// Reports StorageDeadOrDrop of `place` conflicts with `borrow`.\n     ///\n+    /// Depending on the origin of the StorageDeadOrDrop, this may be\n+    /// reported as either a drop or an illegal mutation of a borrowed value.\n+    /// The latter is preferred when the this is a drop triggered by a\n+    /// reassignment, as it's more user friendly to report a problem with the\n+    /// explicit assignment than the implicit drop.\n+    #[instrument(level = \"debug\", skip(self))]\n+    pub(crate) fn report_storage_dead_or_drop_of_borrowed(\n+        &mut self,\n+        location: Location,\n+        place_span: (Place<'tcx>, Span),\n+        borrow: &BorrowData<'tcx>,\n+    ) {\n+        // It's sufficient to check the last desugaring as Replace is the last\n+        // one to be applied.\n+        if let Some(DesugaringKind::Replace) = place_span.1.desugaring_kind() {\n+            self.report_illegal_mutation_of_borrowed(location, place_span, borrow)\n+        } else {\n+            self.report_borrowed_value_does_not_live_long_enough(\n+                location,\n+                borrow,\n+                place_span,\n+                Some(WriteKind::StorageDeadOrDrop),\n+            )\n+        }\n+    }\n+\n     /// This means that some data referenced by `borrow` needs to live\n     /// past the point where the StorageDeadOrDrop of `place` occurs.\n     /// This is usually interpreted as meaning that `place` has too"}, {"sha": "115e512a974294f9b3a50dfd07c2087abdd244fc", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9cf0ff26f82937a20d60a115cfb331e3f7a8c2d3/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf0ff26f82937a20d60a115cfb331e3f7a8c2d3/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=9cf0ff26f82937a20d60a115cfb331e3f7a8c2d3", "patch": "@@ -40,7 +40,7 @@ use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, CapturedPlace, ParamEnv, RegionVid, TyCtxt};\n use rustc_session::lint::builtin::UNUSED_MUT;\n-use rustc_span::{DesugaringKind, Span, Symbol};\n+use rustc_span::{Span, Symbol};\n \n use either::Either;\n use smallvec::SmallVec;\n@@ -1184,22 +1184,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 this.report_conflicting_borrow(location, place_span, bk, borrow);\n                             this.buffer_error(err);\n                         }\n-                        WriteKind::StorageDeadOrDrop => {\n-                            if let Some(DesugaringKind::Replace) = place_span.1.desugaring_kind() {\n-                                // If this is a drop triggered by a reassignment, it's more user friendly\n-                                // to report a problem with the explicit assignment than the implicit drop.\n-                                this.report_illegal_mutation_of_borrowed(\n-                                    location, place_span, borrow,\n-                                )\n-                            } else {\n-                                this.report_borrowed_value_does_not_live_long_enough(\n-                                    location,\n-                                    borrow,\n-                                    place_span,\n-                                    Some(kind),\n-                                )\n-                            }\n-                        }\n+                        WriteKind::StorageDeadOrDrop => this\n+                            .report_storage_dead_or_drop_of_borrowed(location, place_span, borrow),\n                         WriteKind::Mutate => {\n                             this.report_illegal_mutation_of_borrowed(location, place_span, borrow)\n                         }"}]}