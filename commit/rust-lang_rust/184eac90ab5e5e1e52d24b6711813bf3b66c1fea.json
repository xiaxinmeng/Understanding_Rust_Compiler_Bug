{"sha": "184eac90ab5e5e1e52d24b6711813bf3b66c1fea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NGVhYzkwYWI1ZTVlMWU1MmQyNGI2NzExODEzYmYzYjY2YzFmZWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-14T05:34:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-16T17:29:08Z"}, "message": "Add and use an ivec interface to std::test", "tree": {"sha": "89fd0cba27a43f1a1b646198dcc729bdbe3cf350", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89fd0cba27a43f1a1b646198dcc729bdbe3cf350"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/184eac90ab5e5e1e52d24b6711813bf3b66c1fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/184eac90ab5e5e1e52d24b6711813bf3b66c1fea", "html_url": "https://github.com/rust-lang/rust/commit/184eac90ab5e5e1e52d24b6711813bf3b66c1fea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/184eac90ab5e5e1e52d24b6711813bf3b66c1fea/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "053b8bff5a81a0cb6c347f8c371fa5b66f48dbda", "url": "https://api.github.com/repos/rust-lang/rust/commits/053b8bff5a81a0cb6c347f8c371fa5b66f48dbda", "html_url": "https://github.com/rust-lang/rust/commit/053b8bff5a81a0cb6c347f8c371fa5b66f48dbda"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "77cf7e3daed6c0cc9339f39ce32074403e24b4c5", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/184eac90ab5e5e1e52d24b6711813bf3b66c1fea/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184eac90ab5e5e1e52d24b6711813bf3b66c1fea/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=184eac90ab5e5e1e52d24b6711813bf3b66c1fea", "patch": "@@ -135,7 +135,7 @@ We're going to be building a module that looks more or less like:\n \n mod __test {\n \n-  fn main(vec[str] args) -> int {\n+  fn main(args: [str]) -> int {\n     std::test::test_main(args, tests())\n   }\n \n@@ -285,7 +285,7 @@ fn mk_test_desc_rec(cx: &test_ctxt, test: test) -> @ast::expr {\n fn mk_main(cx: &test_ctxt) -> @ast::item {\n \n     let args_mt: ast::mt = {ty: @nospan(ast::ty_str), mut: ast::imm};\n-    let args_ty: ast::ty = nospan(ast::ty_vec(args_mt));\n+    let args_ty: ast::ty = nospan(ast::ty_ivec(args_mt));\n \n     let args_arg: ast::arg =\n         {mode: ast::val, ty: @args_ty, ident: \"args\", id: cx.next_node_id()};\n@@ -355,7 +355,7 @@ fn mk_test_main_call(cx: &test_ctxt) -> @ast::expr {\n     // Call std::test::test_main\n     let test_main_path: ast::path =\n         nospan({global: false,\n-                idents: ~[\"std\", \"test\", \"test_main\"],\n+                idents: ~[\"std\", \"test\", \"test_main_ivec\"],\n                 types: ~[]});\n \n     let test_main_path_expr_: ast::expr_ = ast::expr_path(test_main_path);"}, {"sha": "cdd99874c8afae88f6934fe7c2f1b1e5ecae5385", "filename": "src/lib/test.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/184eac90ab5e5e1e52d24b6711813bf3b66c1fea/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184eac90ab5e5e1e52d24b6711813bf3b66c1fea/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=184eac90ab5e5e1e52d24b6711813bf3b66c1fea", "patch": "@@ -10,6 +10,7 @@ export test_name;\n export test_fn;\n export test_desc;\n export test_main;\n+export test_main_ivec;\n export test_result;\n export test_opts;\n export tr_ok;\n@@ -48,18 +49,20 @@ type test_desc = {name: test_name, fn: test_fn, ignore: bool};\n \n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs (generated at compile time).\n-fn test_main(args: &vec[str], tests: &[test_desc]) {\n-    let ivec_args =\n-        { let iargs = ~[]; for arg: str in args { iargs += ~[arg] } iargs };\n-    check (ivec::is_not_empty(ivec_args));\n+fn test_main_ivec(args: &[str], tests: &[test_desc]) {\n+    check (ivec::is_not_empty(args));\n     let opts =\n-        alt parse_opts(ivec_args) {\n+        alt parse_opts(args) {\n           either::left(o) { o }\n           either::right(m) { fail m }\n         };\n     if !run_tests_console(opts, tests) { fail \"Some tests failed\"; }\n }\n \n+fn test_main(args: &vec[str], tests: &[test_desc]) {\n+    test_main_ivec(ivec::from_vec(args), tests);\n+}\n+\n type test_opts = {filter: option::t[str], run_ignored: bool};\n \n type opt_res = either::t[test_opts, str];"}]}