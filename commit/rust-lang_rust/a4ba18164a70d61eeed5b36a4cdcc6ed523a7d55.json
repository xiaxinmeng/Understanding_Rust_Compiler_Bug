{"sha": "a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YmExODE2NGE3MGQ2MWVlZWQ1YjM2YTRjZGNjNmVkNTIzYTdkNTU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-14T06:29:44Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-16T22:29:58Z"}, "message": "Remove some `Symbol:as_str()` calls.", "tree": {"sha": "93778e0285c9f87a0f6394e7a7a8c1a7e64a8ecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93778e0285c9f87a0f6394e7a7a8c1a7e64a8ecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55", "html_url": "https://github.com/rust-lang/rust/commit/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03c7f83eb72d44077f03b8140768eefb60150a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03c7f83eb72d44077f03b8140768eefb60150a0", "html_url": "https://github.com/rust-lang/rust/commit/f03c7f83eb72d44077f03b8140768eefb60150a0"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "043d85cb6efa632f7800517b8db3a03918ac5957", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55", "patch": "@@ -1440,12 +1440,12 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n \n         // FIXME(eddyb) `name` should never be empty, but it\n         // currently is for `extern { ... }` \"foreign modules\".\n-        let name = disambiguated_data.data.as_symbol().as_str();\n-        if !name.is_empty() {\n+        let name = disambiguated_data.data.as_symbol();\n+        if name != kw::Invalid {\n             if !self.empty_path {\n                 write!(self, \"::\")?;\n             }\n-            if Ident::from_str(&name).is_raw_guess() {\n+            if Ident::with_dummy_span(name).is_raw_guess() {\n                 write!(self, \"r#\")?;\n             }\n             write!(self, \"{}\", name)?;"}, {"sha": "0683dc0201129bddca91b54fc36d3a10b1df3c7f", "filename": "src/librustc_middle/ty/query/profiling_support.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs?ref=a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55", "patch": "@@ -60,12 +60,12 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n \n         match def_key.disambiguated_data.data {\n             DefPathData::CrateRoot => {\n-                name = self.tcx.original_crate_name(def_id.krate).as_str();\n+                name = self.tcx.original_crate_name(def_id.krate);\n                 dis = \"\";\n                 end_index = 3;\n             }\n             other => {\n-                name = other.as_symbol().as_str();\n+                name = other.as_symbol();\n                 if def_key.disambiguated_data.disambiguator == 0 {\n                     dis = \"\";\n                     end_index = 3;\n@@ -79,10 +79,11 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n             }\n         }\n \n+        let name = &*name.as_str();\n         let components = [\n             StringComponent::Ref(parent_string_id),\n             StringComponent::Value(\"::\"),\n-            StringComponent::Value(&name[..]),\n+            StringComponent::Value(name),\n             StringComponent::Value(dis),\n         ];\n "}, {"sha": "3112e3101ce57593ca8a5dea453cbfb24da426c5", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55", "patch": "@@ -252,6 +252,7 @@ symbols! {\n         allowed,\n         always,\n         and,\n+        and_then,\n         any,\n         arbitrary_enum_discriminant,\n         arbitrary_self_types,\n@@ -649,6 +650,7 @@ symbols! {\n         main,\n         managed_boxes,\n         manually_drop,\n+        map,\n         marker,\n         marker_trait_attr,\n         masked,"}, {"sha": "a9b045cee6087ce599742d817f77b58eb8532d57", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::ty::{\n     TypeFoldable, WithConstness,\n };\n use rustc_session::DiagnosticMessageId;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{kw, sym};\n use rustc_span::{ExpnKind, MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n \n@@ -1524,7 +1524,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     (self.tcx.sess.source_map().span_to_snippet(span), &obligation.cause.code)\n                 {\n                     let generics = self.tcx.generics_of(*def_id);\n-                    if generics.params.iter().any(|p| p.name.as_str() != \"Self\")\n+                    if generics.params.iter().any(|p| p.name != kw::SelfUpper)\n                         && !snippet.ends_with('>')\n                     {\n                         // FIXME: To avoid spurious suggestions in functions where type arguments"}, {"sha": "f575548ddd6382bb7da09921310e6c286b22ceb6", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=a4ba18164a70d61eeed5b36a4cdcc6ed523a7d55", "patch": "@@ -322,12 +322,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let self_ty = self.tables.borrow().node_type(method_expr[0].hir_id);\n         let self_ty = format!(\"{:?}\", self_ty);\n-        let name = method_path.ident.as_str();\n+        let name = method_path.ident.name;\n         let is_as_ref_able = (self_ty.starts_with(\"&std::option::Option\")\n             || self_ty.starts_with(\"&std::result::Result\")\n             || self_ty.starts_with(\"std::option::Option\")\n             || self_ty.starts_with(\"std::result::Result\"))\n-            && (name == \"map\" || name == \"and_then\");\n+            && (name == sym::map || name == sym::and_then);\n         match (is_as_ref_able, self.sess().source_map().span_to_snippet(*method_span)) {\n             (true, Ok(src)) => {\n                 let suggestion = format!(\"as_ref().{}\", src);"}]}