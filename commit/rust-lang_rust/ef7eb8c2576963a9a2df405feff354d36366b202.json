{"sha": "ef7eb8c2576963a9a2df405feff354d36366b202", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmN2ViOGMyNTc2OTYzYTlhMmRmNDA1ZmVmZjM1NGQzNjM2NmIyMDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-30T19:23:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-30T19:37:20Z"}, "message": "Use Crate instead of CrateId", "tree": {"sha": "b92e52aed2a5b22d73cbebccd08f2870c8212b16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b92e52aed2a5b22d73cbebccd08f2870c8212b16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef7eb8c2576963a9a2df405feff354d36366b202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef7eb8c2576963a9a2df405feff354d36366b202", "html_url": "https://github.com/rust-lang/rust/commit/ef7eb8c2576963a9a2df405feff354d36366b202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef7eb8c2576963a9a2df405feff354d36366b202/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95aa7e46fc69b5279a1af74dfa7008396a4455a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/95aa7e46fc69b5279a1af74dfa7008396a4455a5", "html_url": "https://github.com/rust-lang/rust/commit/95aa7e46fc69b5279a1af74dfa7008396a4455a5"}], "stats": {"total": 81, "additions": 36, "deletions": 45}, "files": [{"sha": "c59b7fbc59da3b9d9c47eb6db6cb99122e598ae9", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=ef7eb8c2576963a9a2df405feff354d36366b202", "patch": "@@ -52,7 +52,7 @@ pub enum Def {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Module {\n-    pub(crate) krate: CrateId,\n+    pub(crate) krate: Crate,\n     pub(crate) module_id: ModuleId,\n }\n \n@@ -133,8 +133,8 @@ impl Module {\n     }\n \n     /// Returns the crate this module is part of.\n-    pub fn krate(&self, db: &impl HirDatabase) -> Option<Crate> {\n-        self.krate_impl(db)\n+    pub fn krate(&self, _db: &impl HirDatabase) -> Option<Crate> {\n+        Some(self.krate)\n     }\n \n     /// Topmost parent of this module. Every module has a `crate_root`, but some"}, {"sha": "86f29d959e5a378ae4cd6bb2d2b8421d9fd5d257", "filename": "crates/ra_hir/src/code_model_impl/krate.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs?ref=ef7eb8c2576963a9a2df405feff354d36366b202", "patch": "@@ -1,31 +1,28 @@\n-use ra_db::CrateId;\n-\n use crate::{\n     Crate, CrateDependency, AsName, Module,\n     db::HirDatabase,\n };\n \n impl Crate {\n-    pub(crate) fn new(crate_id: CrateId) -> Crate {\n-        Crate { crate_id }\n-    }\n     pub(crate) fn dependencies_impl(&self, db: &impl HirDatabase) -> Vec<CrateDependency> {\n         let crate_graph = db.crate_graph();\n         crate_graph\n             .dependencies(self.crate_id)\n             .map(|dep| {\n-                let krate = Crate::new(dep.crate_id());\n+                let krate = Crate {\n+                    crate_id: dep.crate_id(),\n+                };\n                 let name = dep.as_name();\n                 CrateDependency { krate, name }\n             })\n             .collect()\n     }\n     pub(crate) fn root_module_impl(&self, db: &impl HirDatabase) -> Option<Module> {\n-        let module_tree = db.module_tree(self.crate_id);\n+        let module_tree = db.module_tree(*self);\n         let module_id = module_tree.modules().next()?;\n \n         let module = Module {\n-            krate: self.crate_id,\n+            krate: *self,\n             module_id,\n         };\n         Some(module)"}, {"sha": "4a3901b8b709b2931c9ab1b7401021c45ad8af75", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=ef7eb8c2576963a9a2df405feff354d36366b202", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{ast, SyntaxNode, TreeArc};\n \n use crate::{\n     Module, ModuleSource, Problem,\n-    Crate, Name,\n+    Name,\n     module_tree::ModuleId,\n     impl_block::ImplId,\n     nameres::{lower::ImportId},\n@@ -67,10 +67,6 @@ impl Module {\n         source_map.get(&source, impl_id)\n     }\n \n-    pub(crate) fn krate_impl(&self, _db: &impl HirDatabase) -> Option<Crate> {\n-        Some(Crate::new(self.krate))\n-    }\n-\n     pub(crate) fn crate_root_impl(&self, db: &impl HirDatabase) -> Module {\n         let module_tree = db.module_tree(self.krate);\n         let module_id = self.module_id.crate_root(&module_tree);"}, {"sha": "16d5a7877be1b0e8c06c49154acdef31eacc4c1e", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=ef7eb8c2576963a9a2df405feff354d36366b202", "patch": "@@ -1,7 +1,7 @@\n use std::sync::Arc;\n \n use ra_syntax::{SyntaxNode, TreeArc, SourceFile};\n-use ra_db::{SourceDatabase, CrateId, salsa};\n+use ra_db::{SourceDatabase, salsa};\n \n use crate::{\n     MacroCallId, HirFileId,\n@@ -68,10 +68,10 @@ pub trait HirDatabase: SourceDatabase + AsRef<HirInterner> {\n     fn lower_module_source_map(&self, module: Module) -> Arc<ImportSourceMap>;\n \n     #[salsa::invoke(crate::nameres::ItemMap::item_map_query)]\n-    fn item_map(&self, crate_id: CrateId) -> Arc<ItemMap>;\n+    fn item_map(&self, krate: Crate) -> Arc<ItemMap>;\n \n     #[salsa::invoke(crate::module_tree::ModuleTree::module_tree_query)]\n-    fn module_tree(&self, crate_id: CrateId) -> Arc<ModuleTree>;\n+    fn module_tree(&self, krate: Crate) -> Arc<ModuleTree>;\n \n     #[salsa::invoke(crate::impl_block::impls_in_module_with_source_map_query)]\n     fn impls_in_module_with_source_map("}, {"sha": "1f327eeb2843742a94fc6e6e1a9dd17e06e9e24e", "filename": "crates/ra_hir/src/module_tree.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs?ref=ef7eb8c2576963a9a2df405feff354d36366b202", "patch": "@@ -2,7 +2,7 @@ use std::sync::Arc;\n \n use arrayvec::ArrayVec;\n use relative_path::RelativePathBuf;\n-use ra_db::{FileId, SourceRoot, CrateId};\n+use ra_db::{FileId, SourceRoot};\n use ra_syntax::{\n     SyntaxNode, TreeArc,\n     algo::generate,\n@@ -13,6 +13,7 @@ use test_utils::tested_by;\n \n use crate::{\n     Name, AsName, HirDatabase, SourceItemId, HirFileId, Problem, SourceFileItems, ModuleSource,\n+    Crate,\n     ids::SourceFileItemId,\n };\n \n@@ -132,10 +133,10 @@ struct LinkData {\n }\n \n impl ModuleTree {\n-    pub(crate) fn module_tree_query(db: &impl HirDatabase, crate_id: CrateId) -> Arc<ModuleTree> {\n+    pub(crate) fn module_tree_query(db: &impl HirDatabase, krate: Crate) -> Arc<ModuleTree> {\n         db.check_canceled();\n         let mut res = ModuleTree::default();\n-        res.init_crate(db, crate_id);\n+        res.init_crate(db, krate);\n         Arc::new(res)\n     }\n \n@@ -155,9 +156,9 @@ impl ModuleTree {\n         Some(res)\n     }\n \n-    fn init_crate(&mut self, db: &impl HirDatabase, crate_id: CrateId) {\n+    fn init_crate(&mut self, db: &impl HirDatabase, krate: Crate) {\n         let crate_graph = db.crate_graph();\n-        let file_id = crate_graph.crate_root(crate_id);\n+        let file_id = crate_graph.crate_root(krate.crate_id);\n         let source_root_id = db.file_source_root(file_id);\n \n         let source_root = db.source_root(source_root_id);"}, {"sha": "4573a72ba758071fdbd817e7f2427330e362458f", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=ef7eb8c2576963a9a2df405feff354d36366b202", "patch": "@@ -18,7 +18,6 @@ pub(crate) mod lower;\n \n use std::{time, sync::Arc};\n \n-use ra_db::CrateId;\n use ra_arena::map::ArenaMap;\n use test_utils::tested_by;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -159,7 +158,7 @@ impl<T> PerNs<T> {\n struct Resolver<'a, DB> {\n     db: &'a DB,\n     input: &'a FxHashMap<ModuleId, Arc<LoweredModule>>,\n-    krate: CrateId,\n+    krate: Crate,\n     module_tree: Arc<ModuleTree>,\n     processed_imports: FxHashSet<(ModuleId, ImportId)>,\n     result: ItemMap,\n@@ -172,7 +171,7 @@ where\n     fn new(\n         db: &'a DB,\n         input: &'a FxHashMap<ModuleId, Arc<LoweredModule>>,\n-        krate: CrateId,\n+        krate: Crate,\n     ) -> Resolver<'a, DB> {\n         let module_tree = db.module_tree(krate);\n         Resolver {\n@@ -219,7 +218,7 @@ where\n             let crate_graph = self.db.crate_graph();\n             if let Some(crate_id) = crate_graph.crate_id_for_crate_root(file_id.as_original_file())\n             {\n-                let krate = Crate::new(crate_id);\n+                let krate = Crate { crate_id };\n                 for dep in krate.dependencies(self.db) {\n                     if let Some(module) = dep.krate.root_module(self.db) {\n                         let def = module.into();\n@@ -331,23 +330,20 @@ enum ReachedFixedPoint {\n }\n \n impl ItemMap {\n-    pub(crate) fn item_map_query(db: &impl HirDatabase, crate_id: CrateId) -> Arc<ItemMap> {\n+    pub(crate) fn item_map_query(db: &impl HirDatabase, krate: Crate) -> Arc<ItemMap> {\n         let start = time::Instant::now();\n-        let module_tree = db.module_tree(crate_id);\n+        let module_tree = db.module_tree(krate);\n         let input = module_tree\n             .modules()\n             .map(|module_id| {\n                 (\n                     module_id,\n-                    db.lower_module_module(Module {\n-                        krate: crate_id,\n-                        module_id,\n-                    }),\n+                    db.lower_module_module(Module { krate, module_id }),\n                 )\n             })\n             .collect::<FxHashMap<_, _>>();\n \n-        let resolver = Resolver::new(db, &input, crate_id);\n+        let resolver = Resolver::new(db, &input, krate);\n         let res = resolver.resolve();\n         let elapsed = start.elapsed();\n         log::info!(\"item_map: {:?}\", elapsed);"}, {"sha": "9c5ca097ea97db5aefe196c6a7a4e0e6f258965f", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=ef7eb8c2576963a9a2df405feff354d36366b202", "patch": "@@ -16,7 +16,7 @@ fn item_map(fixture: &str) -> (Arc<ItemMap>, ModuleId) {\n     let module = crate::source_binder::module_from_position(&db, pos).unwrap();\n     let krate = module.krate(&db).unwrap();\n     let module_id = module.module_id;\n-    (db.item_map(krate.crate_id), module_id)\n+    (db.item_map(krate), module_id)\n }\n \n /// Sets the crate root to the file of the cursor marker\n@@ -30,7 +30,7 @@ fn item_map_custom_crate_root(fixture: &str) -> (Arc<ItemMap>, ModuleId) {\n     let module = crate::source_binder::module_from_position(&db, pos).unwrap();\n     let krate = module.krate(&db).unwrap();\n     let module_id = module.module_id;\n-    (db.item_map(krate.crate_id), module_id)\n+    (db.item_map(krate), module_id)\n }\n \n fn check_module_item_map(map: &ItemMap, module_id: ModuleId, expected: &str) {\n@@ -297,7 +297,7 @@ fn item_map_across_crates() {\n \n     let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n-    let item_map = db.item_map(krate.crate_id);\n+    let item_map = db.item_map(krate);\n \n     check_module_item_map(\n         &item_map,\n@@ -349,7 +349,7 @@ fn import_across_source_roots() {\n \n     let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n-    let item_map = db.item_map(krate.crate_id);\n+    let item_map = db.item_map(krate);\n \n     check_module_item_map(\n         &item_map,\n@@ -391,7 +391,7 @@ fn reexport_across_crates() {\n \n     let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n-    let item_map = db.item_map(krate.crate_id);\n+    let item_map = db.item_map(krate);\n \n     check_module_item_map(\n         &item_map,\n@@ -409,15 +409,15 @@ fn check_item_map_is_not_recomputed(initial: &str, file_change: &str) {\n     let krate = module.krate(&db).unwrap();\n     {\n         let events = db.log_executed(|| {\n-            db.item_map(krate.crate_id);\n+            db.item_map(krate);\n         });\n         assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n     }\n     db.set_file_text(pos.file_id, Arc::new(file_change.to_string()));\n \n     {\n         let events = db.log_executed(|| {\n-            db.item_map(krate.crate_id);\n+            db.item_map(krate);\n         });\n         assert!(\n             !format!(\"{:?}\", events).contains(\"item_map\"),"}, {"sha": "d1eaccf230190761a91270fd40fd4f207f880567", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=ef7eb8c2576963a9a2df405feff354d36366b202", "patch": "@@ -14,7 +14,7 @@ use ra_syntax::{\n \n use crate::{\n     HirDatabase, Function, ModuleDef, Struct, Enum,\n-    AsName, Module, HirFileId,\n+    AsName, Module, HirFileId, Crate,\n     ids::{LocationCtx, SourceFileItemId},\n };\n \n@@ -83,7 +83,8 @@ fn module_from_source(\n     let source_root_id = db.file_source_root(file_id.as_original_file());\n     db.source_root_crates(source_root_id)\n         .iter()\n-        .find_map(|&krate| {\n+        .map(|&crate_id| Crate { crate_id })\n+        .find_map(|krate| {\n             let module_tree = db.module_tree(krate);\n             let module_id = module_tree.find_module_by_source(file_id, decl_id)?;\n             Some(Module { krate, module_id })"}, {"sha": "37bc3f38ce49c16327ef2bf812519079f22e5be3", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7eb8c2576963a9a2df405feff354d36366b202/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=ef7eb8c2576963a9a2df405feff354d36366b202", "patch": "@@ -52,7 +52,7 @@ impl CrateImplBlocks {\n             .flat_map(|i| i.iter())\n             .map(move |(module_id, impl_id)| {\n                 let module = Module {\n-                    krate: self.krate.crate_id,\n+                    krate: self.krate,\n                     module_id: *module_id,\n                 };\n                 let module_impl_blocks = db.impls_in_module(module);"}]}