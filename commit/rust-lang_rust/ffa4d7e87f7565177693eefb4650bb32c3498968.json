{"sha": "ffa4d7e87f7565177693eefb4650bb32c3498968", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYTRkN2U4N2Y3NTY1MTc3NjkzZWVmYjQ2NTBiYjMyYzM0OTg5Njg=", "commit": {"author": {"name": "Joel Galenson", "email": "jgalenson@google.com", "date": "2019-08-07T16:30:16Z"}, "committer": {"name": "Joel Galenson", "email": "jgalenson@google.com", "date": "2019-08-07T16:30:16Z"}, "message": "Sort the fat LTO modules to produce deterministic output.", "tree": {"sha": "e9badeae903b7892c5cc32b6b435dd2e665c1583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9badeae903b7892c5cc32b6b435dd2e665c1583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa4d7e87f7565177693eefb4650bb32c3498968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa4d7e87f7565177693eefb4650bb32c3498968", "html_url": "https://github.com/rust-lang/rust/commit/ffa4d7e87f7565177693eefb4650bb32c3498968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa4d7e87f7565177693eefb4650bb32c3498968/comments", "author": {"login": "jgalenson", "id": 505819, "node_id": "MDQ6VXNlcjUwNTgxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/505819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgalenson", "html_url": "https://github.com/jgalenson", "followers_url": "https://api.github.com/users/jgalenson/followers", "following_url": "https://api.github.com/users/jgalenson/following{/other_user}", "gists_url": "https://api.github.com/users/jgalenson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgalenson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgalenson/subscriptions", "organizations_url": "https://api.github.com/users/jgalenson/orgs", "repos_url": "https://api.github.com/users/jgalenson/repos", "events_url": "https://api.github.com/users/jgalenson/events{/privacy}", "received_events_url": "https://api.github.com/users/jgalenson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgalenson", "id": 505819, "node_id": "MDQ6VXNlcjUwNTgxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/505819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgalenson", "html_url": "https://github.com/jgalenson", "followers_url": "https://api.github.com/users/jgalenson/followers", "following_url": "https://api.github.com/users/jgalenson/following{/other_user}", "gists_url": "https://api.github.com/users/jgalenson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgalenson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgalenson/subscriptions", "organizations_url": "https://api.github.com/users/jgalenson/orgs", "repos_url": "https://api.github.com/users/jgalenson/repos", "events_url": "https://api.github.com/users/jgalenson/events{/privacy}", "received_events_url": "https://api.github.com/users/jgalenson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4abb08be6c3a06a14e285396f5e3ef367584f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4abb08be6c3a06a14e285396f5e3ef367584f77", "html_url": "https://github.com/rust-lang/rust/commit/d4abb08be6c3a06a14e285396f5e3ef367584f77"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "2bd46b9f6efee0b0faaef4c99d6c83626e3e8db5", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ffa4d7e87f7565177693eefb4650bb32c3498968/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa4d7e87f7565177693eefb4650bb32c3498968/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=ffa4d7e87f7565177693eefb4650bb32c3498968", "patch": "@@ -755,6 +755,15 @@ pub enum FatLTOInput<B: WriteBackendMethods> {\n     InMemory(ModuleCodegen<B::Module>),\n }\n \n+impl<B: WriteBackendMethods> FatLTOInput<B> {\n+    fn name(&'a self) -> &'a String {\n+        match self {\n+            FatLTOInput::Serialized { name, buffer: _ } => &name,\n+            FatLTOInput::InMemory(module) => &module.name,\n+        }\n+    }\n+}\n+\n fn execute_work_item<B: ExtraBackendMethods>(\n     cgcx: &CodegenContext<B>,\n     work_item: WorkItem<B>,\n@@ -1345,10 +1354,15 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                     assert!(!started_lto);\n                     started_lto = true;\n \n-                    let needs_fat_lto = mem::take(&mut needs_fat_lto);\n+                    let mut needs_fat_lto: Vec<FatLTOInput<B>> = mem::take(&mut needs_fat_lto);\n                     let needs_thin_lto = mem::take(&mut needs_thin_lto);\n                     let import_only_modules = mem::take(&mut lto_import_only_modules);\n \n+                    // Regardless of what order these modules completed in, report them to\n+                    // the backend in the same order every time to ensure that we're handing\n+                    // out deterministic results.\n+                    needs_fat_lto.sort_by(|m1, m2| m1.name().cmp(m2.name()));\n+\n                     for (work, cost) in generate_lto_work(&cgcx, needs_fat_lto,\n                                                           needs_thin_lto, import_only_modules) {\n                         let insertion_index = work_items"}]}