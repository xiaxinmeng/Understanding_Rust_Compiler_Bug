{"sha": "1e661642105a1033f1c155ceb1b2335dd11cb40a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNjYxNjQyMTA1YTEwMzNmMWMxNTVjZWIxYjIzMzVkZDExY2I0MGE=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-21T02:30:46Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-21T22:24:30Z"}, "message": "libs: add std::os::windows module\n\nThe new `std::os::windows` module exposes several extension traits\nfor extracting file descriptors, sockets, and handles from `std::io`\ntypes.", "tree": {"sha": "7e1ed6f2eaf93ac4e2b49321aa003c1504ab07bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e1ed6f2eaf93ac4e2b49321aa003c1504ab07bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e661642105a1033f1c155ceb1b2335dd11cb40a", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e661642105a1033f1c155ceb1b2335dd11cb40a", "html_url": "https://github.com/rust-lang/rust/commit/1e661642105a1033f1c155ceb1b2335dd11cb40a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e661642105a1033f1c155ceb1b2335dd11cb40a/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af0c446d3b434a26c6d0482569bbf67e4d9b7df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/af0c446d3b434a26c6d0482569bbf67e4d9b7df4", "html_url": "https://github.com/rust-lang/rust/commit/af0c446d3b434a26c6d0482569bbf67e4d9b7df4"}], "stats": {"total": 108, "additions": 107, "deletions": 1}, "files": [{"sha": "2ba03ac5d6044160685709beb6d97e684ec2b539", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e661642105a1033f1c155ceb1b2335dd11cb40a/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e661642105a1033f1c155ceb1b2335dd11cb40a/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=1e661642105a1033f1c155ceb1b2335dd11cb40a", "patch": "@@ -62,6 +62,11 @@ use vec::Vec;\n #[cfg(unix)] use c_str::ToCStr;\n #[cfg(unix)] use libc::c_char;\n \n+#[cfg(unix)]\n+pub use sys::ext as unix;\n+#[cfg(windows)]\n+pub use sys::ext as windows;\n+\n /// Get the number of cores available\n pub fn num_cpus() -> uint {\n     unsafe {"}, {"sha": "2c58ee69e8b7c37c922b53fcc8cf3dc2c3d5a90c", "filename": "src/libstd/sys/windows/ext.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/1e661642105a1033f1c155ceb1b2335dd11cb40a/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e661642105a1033f1c155ceb1b2335dd11cb40a/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs?ref=1e661642105a1033f1c155ceb1b2335dd11cb40a", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Experimental extensions to `std` for Windows.\n+//!\n+//! For now, this module is limited to extracting handles, file\n+//! descriptors, and sockets, but its functionality will grow over\n+//! time.\n+\n+#![experimental]\n+\n+use sys_common::AsInner;\n+use libc;\n+\n+use io;\n+\n+/// Raw HANDLEs.\n+pub type Handle = libc::HANDLE;\n+\n+/// Raw SOCKETs.\n+pub type Socket = libc::SOCKET;\n+\n+/// Extract raw handles.\n+pub trait AsRawHandle {\n+    /// Extract the raw handle, without taking any ownership.\n+    fn as_raw_handle(&self) -> Handle;\n+}\n+\n+impl AsRawHandle for io::fs::File {\n+    fn as_raw_handle(&self) -> Handle {\n+        self.as_inner().handle()\n+    }\n+}\n+\n+impl AsRawHandle for io::pipe::PipeStream {\n+    fn as_raw_handle(&self) -> Handle {\n+        self.as_inner().handle()\n+    }\n+}\n+\n+impl AsRawHandle for io::net::pipe::UnixStream {\n+    fn as_raw_handle(&self) -> Handle {\n+        self.as_inner().handle()\n+    }\n+}\n+\n+impl AsRawHandle for io::net::pipe::UnixListener {\n+    fn as_raw_handle(&self) -> Handle {\n+        self.as_inner().handle()\n+    }\n+}\n+\n+impl AsRawHandle for io::net::pipe::UnixAcceptor {\n+    fn as_raw_handle(&self) -> Handle {\n+        self.as_inner().handle()\n+    }\n+}\n+\n+/// Extract raw sockets.\n+pub trait AsRawSocket {\n+    fn as_raw_socket(&self) -> Socket;\n+}\n+\n+impl AsRawSocket for io::net::tcp::TcpStream {\n+    fn as_raw_socket(&self) -> Socket {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawSocket for io::net::tcp::TcpListener {\n+    fn as_raw_socket(&self) -> Socket {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawSocket for io::net::tcp::TcpAcceptor {\n+    fn as_raw_socket(&self) -> Socket {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawSocket for io::net::udp::UdpSocket {\n+    fn as_raw_socket(&self) -> Socket {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+/// A prelude for conveniently writing platform-specific code.\n+///\n+/// Includes all extension traits, and some important type definitions.\n+pub mod prelude {\n+    pub use super::{Socket, Handle, AsRawSocket, AsRawHandle};\n+}"}, {"sha": "33e7094612e3932f18ffdc385f0c25f4c58b1dd5", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e661642105a1033f1c155ceb1b2335dd11cb40a/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e661642105a1033f1c155ceb1b2335dd11cb40a/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=1e661642105a1033f1c155ceb1b2335dd11cb40a", "patch": "@@ -34,6 +34,7 @@ macro_rules! helper_init( (static $name:ident: Helper<$m:ty>) => (\n ) )\n \n pub mod c;\n+pub mod ext;\n pub mod fs;\n pub mod os;\n pub mod tcp;"}, {"sha": "ca7985aa35bf8f94ba2af6a2066ce5bdc4b47661", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e661642105a1033f1c155ceb1b2335dd11cb40a/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e661642105a1033f1c155ceb1b2335dd11cb40a/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=1e661642105a1033f1c155ceb1b2335dd11cb40a", "patch": "@@ -735,7 +735,7 @@ impl UnixAcceptor {\n     }\n \n     pub fn handle(&self) -> libc::HANDLE {\n-        self.event.ref0\n+        self.listener.handle()\n     }\n }\n "}]}