{"sha": "9970b04646b4ea20934c6382313022728b2a0d37", "node_id": "C_kwDOAAsO6NoAKDk5NzBiMDQ2NDZiNGVhMjA5MzRjNjM4MjMxMzAyMjcyOGIyYTBkMzc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-09T12:58:45Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-09T12:58:45Z"}, "message": "Don't deadlock when failing to acquire a jobserver token", "tree": {"sha": "98ac78db2e7ca273efd1df43df33a16e13bb99cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ac78db2e7ca273efd1df43df33a16e13bb99cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9970b04646b4ea20934c6382313022728b2a0d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9970b04646b4ea20934c6382313022728b2a0d37", "html_url": "https://github.com/rust-lang/rust/commit/9970b04646b4ea20934c6382313022728b2a0d37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9970b04646b4ea20934c6382313022728b2a0d37/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd4e1d55ea209dcdef728ef0a2d3a9541c25da16", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4e1d55ea209dcdef728ef0a2d3a9541c25da16", "html_url": "https://github.com/rust-lang/rust/commit/fd4e1d55ea209dcdef728ef0a2d3a9541c25da16"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "54df04f8c2c4a7462da0b0761f6bf2640e440f07", "filename": "src/concurrency_limiter.rs", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9970b04646b4ea20934c6382313022728b2a0d37/src%2Fconcurrency_limiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9970b04646b4ea20934c6382313022728b2a0d37/src%2Fconcurrency_limiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency_limiter.rs?ref=9970b04646b4ea20934c6382313022728b2a0d37", "patch": "@@ -25,8 +25,18 @@ impl ConcurrencyLimiter {\n             .clone()\n             .into_helper_thread(move |token| {\n                 let mut state = state_helper.lock().unwrap();\n-                state.add_new_token(token.unwrap());\n-                available_token_condvar_helper.notify_one();\n+                match token {\n+                    Ok(token) => {\n+                        state.add_new_token(token);\n+                        available_token_condvar_helper.notify_one();\n+                    }\n+                    Err(err) => {\n+                        state.poison(format!(\"failed to acquire jobserver token: {}\", err));\n+                        // Notify all threads waiting for a token to give them a chance to\n+                        // gracefully exit.\n+                        available_token_condvar_helper.notify_all();\n+                    }\n+                }\n             })\n             .unwrap();\n         ConcurrencyLimiter {\n@@ -37,16 +47,31 @@ impl ConcurrencyLimiter {\n         }\n     }\n \n-    pub(super) fn acquire(&mut self) -> ConcurrencyLimiterToken {\n+    pub(super) fn acquire(&mut self, handler: &rustc_errors::Handler) -> ConcurrencyLimiterToken {\n         let mut state = self.state.lock().unwrap();\n         loop {\n             state.assert_invariants();\n \n-            if state.try_start_job() {\n-                return ConcurrencyLimiterToken {\n-                    state: self.state.clone(),\n-                    available_token_condvar: self.available_token_condvar.clone(),\n-                };\n+            match state.try_start_job() {\n+                Ok(true) => {\n+                    return ConcurrencyLimiterToken {\n+                        state: self.state.clone(),\n+                        available_token_condvar: self.available_token_condvar.clone(),\n+                    };\n+                }\n+                Ok(false) => {}\n+                Err(err) => {\n+                    // An error happened when acquiring the token. Raise it as fatal error.\n+                    // Make sure to drop the mutex guard first to prevent poisoning the mutex.\n+                    drop(state);\n+                    if let Some(err) = err {\n+                        handler.fatal(&err).raise();\n+                    } else {\n+                        // The error was already emitted, but compilation continued. Raise a silent\n+                        // fatal error.\n+                        rustc_errors::FatalError.raise();\n+                    }\n+                }\n             }\n \n             self.helper_thread.as_mut().unwrap().request_token();\n@@ -100,13 +125,22 @@ mod state {\n         pending_jobs: usize,\n         active_jobs: usize,\n \n+        poisoned: bool,\n+        stored_error: Option<String>,\n+\n         // None is used to represent the implicit token, Some to represent explicit tokens\n         tokens: Vec<Option<Acquired>>,\n     }\n \n     impl ConcurrencyLimiterState {\n         pub(super) fn new(pending_jobs: usize) -> Self {\n-            ConcurrencyLimiterState { pending_jobs, active_jobs: 0, tokens: vec![None] }\n+            ConcurrencyLimiterState {\n+                pending_jobs,\n+                active_jobs: 0,\n+                poisoned: false,\n+                stored_error: None,\n+                tokens: vec![None],\n+            }\n         }\n \n         pub(super) fn assert_invariants(&self) {\n@@ -127,14 +161,18 @@ mod state {\n             self.drop_excess_capacity();\n         }\n \n-        pub(super) fn try_start_job(&mut self) -> bool {\n+        pub(super) fn try_start_job(&mut self) -> Result<bool, Option<String>> {\n+            if self.poisoned {\n+                return Err(self.stored_error.take());\n+            }\n+\n             if self.active_jobs < self.tokens.len() {\n                 // Using existing token\n                 self.job_started();\n-                return true;\n+                return Ok(true);\n             }\n \n-            false\n+            Ok(false)\n         }\n \n         pub(super) fn job_started(&mut self) {\n@@ -161,6 +199,11 @@ mod state {\n             self.assert_invariants();\n         }\n \n+        pub(super) fn poison(&mut self, error: String) {\n+            self.poisoned = true;\n+            self.stored_error = Some(error);\n+        }\n+\n         fn drop_excess_capacity(&mut self) {\n             self.assert_invariants();\n "}, {"sha": "762976c81f8080368e67010585b78fb9a11fd7bd", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9970b04646b4ea20934c6382313022728b2a0d37/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9970b04646b4ea20934c6382313022728b2a0d37/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=9970b04646b4ea20934c6382313022728b2a0d37", "patch": "@@ -407,7 +407,7 @@ pub(crate) fn run_aot(\n                                     backend_config.clone(),\n                                     global_asm_config.clone(),\n                                     cgu.name(),\n-                                    concurrency_limiter.acquire(),\n+                                    concurrency_limiter.acquire(tcx.sess.diagnostic()),\n                                 ),\n                                 module_codegen,\n                                 Some(rustc_middle::dep_graph::hash_result),"}]}