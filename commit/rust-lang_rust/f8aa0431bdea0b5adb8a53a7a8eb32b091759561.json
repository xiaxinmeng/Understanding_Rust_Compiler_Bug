{"sha": "f8aa0431bdea0b5adb8a53a7a8eb32b091759561", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YWEwNDMxYmRlYTBiNWFkYjhhNTNhN2E4ZWIzMmIwOTE3NTk1NjE=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-10-06T23:17:57Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-10-06T23:35:14Z"}, "message": "Suggest using an atomic value instead of a Mutex where possible", "tree": {"sha": "c36275066ea3e2b40cad4a6b53f73456837edf0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c36275066ea3e2b40cad4a6b53f73456837edf0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8aa0431bdea0b5adb8a53a7a8eb32b091759561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8aa0431bdea0b5adb8a53a7a8eb32b091759561", "html_url": "https://github.com/rust-lang/rust/commit/f8aa0431bdea0b5adb8a53a7a8eb32b091759561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8aa0431bdea0b5adb8a53a7a8eb32b091759561/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "html_url": "https://github.com/rust-lang/rust/commit/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "a09a9fefc35d0e19d5a438e15db04101ac468fc8", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8aa0431bdea0b5adb8a53a7a8eb32b091759561/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8aa0431bdea0b5adb8a53a7a8eb32b091759561/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f8aa0431bdea0b5adb8a53a7a8eb32b091759561", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 59 lints included in this crate:\n+There are 60 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -37,6 +37,7 @@ name\n [min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                     | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n [modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                               | warn    | taking a number modulo 1, which always returns 0\n [mut_mut](https://github.com/Manishearth/rust-clippy/wiki#mut_mut)                                     | allow   | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n+[mutex_atomic](https://github.com/Manishearth/rust-clippy/wiki#mutex_atomic)                           | warn    | using a Mutex where an atomic value could be used instead\n [needless_bool](https://github.com/Manishearth/rust-clippy/wiki#needless_bool)                         | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n [needless_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes)               | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n [needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)             | warn    | for-looping over a range of indices where an iterator over items would do"}, {"sha": "0e560978979ebc03ca34233217a743bed6fdd834", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8aa0431bdea0b5adb8a53a7a8eb32b091759561/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8aa0431bdea0b5adb8a53a7a8eb32b091759561/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f8aa0431bdea0b5adb8a53a7a8eb32b091759561", "patch": "@@ -47,6 +47,7 @@ pub mod loops;\n pub mod ranges;\n pub mod matches;\n pub mod precedence;\n+pub mod mutex_atomic;\n \n mod reexport {\n     pub use syntax::ast::{Name, Ident, NodeId};\n@@ -88,6 +89,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box matches::MatchPass);\n     reg.register_late_lint_pass(box misc::PatternPass);\n     reg.register_late_lint_pass(box minmax::MinMaxPass);\n+    reg.register_late_lint_pass(box mutex_atomic::MutexAtomic);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         methods::OPTION_UNWRAP_USED,\n@@ -141,6 +143,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         misc::REDUNDANT_PATTERN,\n         misc::TOPLEVEL_REF_ARG,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n+        mutex_atomic::MUTEX_ATOMIC,\n         needless_bool::NEEDLESS_BOOL,\n         precedence::PRECEDENCE,\n         ranges::RANGE_STEP_BY_ZERO,"}, {"sha": "6cf71fe23bc3d89971569bca812af415483a0265", "filename": "src/mutex_atomic.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f8aa0431bdea0b5adb8a53a7a8eb32b091759561/src%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8aa0431bdea0b5adb8a53a7a8eb32b091759561/src%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmutex_atomic.rs?ref=f8aa0431bdea0b5adb8a53a7a8eb32b091759561", "patch": "@@ -0,0 +1,51 @@\n+//! Checks for uses of Mutex where an atomic value could be used\n+//!\n+//! This lint is **warn** by default\n+\n+use rustc::lint::{LintPass, LintArray, LateLintPass, LateContext};\n+use rustc_front::hir::Expr;\n+\n+use syntax::ast;\n+use rustc::middle::ty;\n+use rustc::middle::subst::ParamSpace;\n+\n+use utils::{span_lint, MUTEX_PATH, match_type};\n+\n+declare_lint! {\n+    pub MUTEX_ATOMIC,\n+    Warn,\n+    \"using a Mutex where an atomic value could be used instead\"\n+}\n+\n+impl LintPass for MutexAtomic {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MUTEX_ATOMIC)\n+    }\n+}\n+pub struct MutexAtomic;\n+\n+impl LateLintPass for MutexAtomic {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        let ty = cx.tcx.expr_ty(expr);\n+        if let &ty::TyStruct(_, subst) = &ty.sty {\n+            if match_type(cx, ty, &MUTEX_PATH) {\n+                let mutex_param = &subst.types.get(ParamSpace::TypeSpace, 0).sty;\n+                if let Some(atomic_name) = get_atomic_name(mutex_param) {\n+                    let msg = format!(\"Consider using an {} instead of a \\\n+                                       Mutex here.\", atomic_name);\n+                    span_lint(cx, MUTEX_ATOMIC, expr.span, &msg);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn get_atomic_name(ty: &ty::TypeVariants) -> Option<(&'static str)> {\n+    match *ty {\n+        ty::TyBool => Some(\"AtomicBool\"),\n+        ty::TyUint(ast::TyUs) => Some(\"AtomicUsize\"),\n+        ty::TyInt(ast::TyIs) => Some(\"AtomicIsize\"),\n+        ty::TyRawPtr(_) => Some(\"AtomicPtr\"),\n+        _ => None\n+    }\n+}"}, {"sha": "4c9f1fb4b3eac48d85d24dade5db9737af15379c", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8aa0431bdea0b5adb8a53a7a8eb32b091759561/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8aa0431bdea0b5adb8a53a7a8eb32b091759561/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=f8aa0431bdea0b5adb8a53a7a8eb32b091759561", "patch": "@@ -14,6 +14,7 @@ pub const RESULT_PATH: [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n pub const STRING_PATH: [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n pub const VEC_PATH:    [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n pub const LL_PATH:     [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n+pub const MUTEX_PATH:  [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n \n /// returns true this expn_info was expanded by any macro\n pub fn in_macro(cx: &LateContext, span: Span) -> bool {"}, {"sha": "97e08d7ba362c53d4fc4c79b5c5b4ac3ab420b59", "filename": "tests/compile-fail/mutex_atomic.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8aa0431bdea0b5adb8a53a7a8eb32b091759561/tests%2Fcompile-fail%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8aa0431bdea0b5adb8a53a7a8eb32b091759561/tests%2Fcompile-fail%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmutex_atomic.rs?ref=f8aa0431bdea0b5adb8a53a7a8eb32b091759561", "patch": "@@ -0,0 +1,15 @@\n+#![feature(plugin)]\n+\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+\n+fn main() {\n+    use std::sync::Mutex;\n+    Mutex::new(true); //~ERROR Consider using an AtomicBool instead of a Mutex here.\n+    Mutex::new(5usize); //~ERROR Consider using an AtomicUsize instead of a Mutex here.\n+    Mutex::new(9isize); //~ERROR Consider using an AtomicIsize instead of a Mutex here.\n+    let mut x = 4u32;\n+    Mutex::new(&x as *const u32); //~ERROR Consider using an AtomicPtr instead of a Mutex here.\n+    Mutex::new(&mut x as *mut u32); //~ERROR Consider using an AtomicPtr instead of a Mutex here.\n+    Mutex::new(0f32); // there are no float atomics, so this should not lint\n+}"}]}