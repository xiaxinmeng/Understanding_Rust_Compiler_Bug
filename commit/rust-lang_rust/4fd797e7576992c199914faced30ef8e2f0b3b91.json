{"sha": "4fd797e7576992c199914faced30ef8e2f0b3b91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZDc5N2U3NTc2OTkyYzE5OTkxNGZhY2VkMzBlZjhlMmYwYjNiOTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-08-08T10:20:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-08-08T11:55:00Z"}, "message": "Register new snapshot 12e0f72", "tree": {"sha": "25f6b5cd6ba3e5ae7e76e11deceab0308bd14d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25f6b5cd6ba3e5ae7e76e11deceab0308bd14d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fd797e7576992c199914faced30ef8e2f0b3b91", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd797e7576992c199914faced30ef8e2f0b3b91", "html_url": "https://github.com/rust-lang/rust/commit/4fd797e7576992c199914faced30ef8e2f0b3b91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fd797e7576992c199914faced30ef8e2f0b3b91/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5b8d89b27ea2976b2e04207815f9fbd4dc8fefe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b8d89b27ea2976b2e04207815f9fbd4dc8fefe", "html_url": "https://github.com/rust-lang/rust/commit/c5b8d89b27ea2976b2e04207815f9fbd4dc8fefe"}], "stats": {"total": 108, "additions": 8, "deletions": 100}, "files": [{"sha": "63ffc4a046f68af72e17e1afac4a559042c73d34", "filename": "src/libcore/char.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -19,9 +19,6 @@ use mem::transmute;\n use option::{None, Option, Some};\n use iter::range_step;\n \n-#[cfg(stage0)]\n-use iter::Iterator; // NOTE(stage0): Remove after snapshot.\n-\n // UTF-8 ranges and tags for encoding characters\n static TAG_CONT: u8    = 0b1000_0000u8;\n static TAG_TWO_B: u8   = 0b1100_0000u8;"}, {"sha": "e764ae17500b6898792ba94c78316046b9768d34", "filename": "src/libcore/failure.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffailure.rs?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -33,29 +33,6 @@\n use fmt;\n use intrinsics;\n \n-#[cfg(stage0)]\n-#[cold] #[inline(never)] // this is the slow path, always\n-#[lang=\"fail_\"]\n-fn fail_(expr: &'static str, file: &'static str, line: uint) -> ! {\n-    format_args!(|args| -> () {\n-        begin_unwind(args, &(file, line));\n-    }, \"{}\", expr);\n-\n-    unsafe { intrinsics::abort() }\n-}\n-\n-#[cfg(stage0)]\n-#[cold]\n-#[lang=\"fail_bounds_check\"]\n-fn fail_bounds_check(file: &'static str, line: uint,\n-                     index: uint, len: uint) -> ! {\n-    format_args!(|args| -> () {\n-        begin_unwind(args, &(file, line));\n-    }, \"index out of bounds: the len is {} but the index is {}\", len, index);\n-    unsafe { intrinsics::abort() }\n-}\n-\n-#[cfg(not(stage0))]\n #[cold] #[inline(never)] // this is the slow path, always\n #[lang=\"fail_\"]\n fn fail_(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n@@ -68,7 +45,6 @@ fn fail_(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n     unsafe { intrinsics::abort() }\n }\n \n-#[cfg(not(stage0))]\n #[cold] #[inline(never)]\n #[lang=\"fail_bounds_check\"]\n fn fail_bounds_check(file_line: &(&'static str, uint),"}, {"sha": "1bfa5168cf7960adf8d63eb15cc975509129ec1c", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -21,11 +21,6 @@ use slice::{ImmutableVector, MutableVector};\n use slice;\n use str::StrSlice;\n \n-#[cfg(stage0)]\n-use iter::Iterator;         // NOTE(stage0): Remove after snapshot.\n-#[cfg(stage0)]\n-use option::{Some, None};   // NOTE(stage0): Remove after snapshot.\n-\n /// A flag that specifies whether to use exponential (scientific) notation.\n pub enum ExponentFormat {\n     /// Do not use exponential notation."}, {"sha": "bba3e4cb9afccdef116e3419940e091cea6d4c34", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -20,11 +20,6 @@ use iter::DoubleEndedIterator;\n use num::{Int, cast, zero};\n use slice::{ImmutableVector, MutableVector};\n \n-#[cfg(stage0)]\n-use iter::Iterator;         // NOTE(stage0): Remove after snapshot.\n-#[cfg(stage0)]\n-use option::{Some, None};   // NOTE(stage0): Remove after snapshot.\n-\n /// A type that represents a specific radix\n #[doc(hidden)]\n trait GenericRadix {"}, {"sha": "23577dd29e0af0c75ee24a463e9ae5ba16e458e2", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -771,7 +771,6 @@ pub trait FnOnce<Args,Result> {\n \n macro_rules! def_fn_mut(\n     ($($args:ident)*) => (\n-        #[cfg(not(stage0))]\n         impl<Result$(,$args)*>\n         FnMut<($($args,)*),Result>\n         for extern \"Rust\" fn($($args: $args,)*) -> Result {"}, {"sha": "eb9bede85d8b25cc95d8b1534c64aab526c7b2fa", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -95,9 +95,6 @@ use option::{Some, None, Option};\n \n use cmp::{PartialEq, Eq, PartialOrd, Equiv, Ordering, Less, Equal, Greater};\n \n-#[cfg(stage0)]\n-use iter::Iterator; // NOTE(stage0): Remove after snapshot.\n-\n pub use intrinsics::copy_memory;\n pub use intrinsics::copy_nonoverlapping_memory;\n pub use intrinsics::set_memory;"}, {"sha": "c1166a7621e193e6515c1745248d0f67c5125737", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -1030,9 +1030,6 @@ pub mod traits {\n     use option::{Option, Some};\n     use str::{Str, StrSlice, eq_slice};\n \n-    #[cfg(stage0)]\n-    use option::None;   // NOTE(stage0): Remove after snapshot.\n-\n     impl<'a> Ord for &'a str {\n         #[inline]\n         fn cmp(&self, other: & &'a str) -> Ordering {"}, {"sha": "79f83df5be8097257760f145eef89a2a0538cf3f", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -523,22 +523,6 @@ pub fn begin_unwind_fmt(msg: &fmt::Arguments, file_line: &(&'static str, uint))\n }\n \n /// This is the entry point of unwinding for fail!() and assert!().\n-#[cfg(stage0)]\n-#[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n-pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> ! {\n-    // Note that this should be the only allocation performed in this code path.\n-    // Currently this means that fail!() on OOM will invoke this code path,\n-    // but then again we're not really ready for failing on OOM anyway. If\n-    // we do start doing this, then we should propagate this allocation to\n-    // be performed in the parent of this task instead of the task that's\n-    // failing.\n-\n-    // see below for why we do the `Any` coercion here.\n-    begin_unwind_inner(box msg, &(file, line))\n-}\n-\n-/// This is the entry point of unwinding for fail!() and assert!().\n-#[cfg(not(stage0))]\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, uint)) -> ! {\n     // Note that this should be the only allocation performed in this code path."}, {"sha": "2faa23a6aa0a5feb008bd9d79a312a0d26d83f98", "filename": "src/libstd/io/tempfile.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibstd%2Fio%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibstd%2Fio%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftempfile.rs?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -21,9 +21,6 @@ use path::{Path, GenericPath};\n use result::{Ok, Err};\n use sync::atomic;\n \n-#[cfg(stage0)]\n-use iter::Iterator; // NOTE(stage0): Remove after snapshot.\n-\n /// A wrapper for a path to temporary directory implementing automatic\n /// scope-based deletion.\n pub struct TempDir {"}, {"sha": "f2d7fb0cea68acb5fa63736da196a069c6fbe4f2", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -37,7 +37,6 @@\n /// fail!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n /// ```\n #[macro_export]\n-#[cfg(not(stage0))]\n macro_rules! fail(\n     () => ({\n         fail!(\"explicit failure\")\n@@ -68,39 +67,6 @@ macro_rules! fail(\n     });\n )\n \n-#[macro_export]\n-#[cfg(stage0)]\n-macro_rules! fail(\n-    () => ({\n-        fail!(\"explicit failure\")\n-    });\n-    ($msg:expr) => ({\n-        // static requires less code at runtime, more constant data\n-        static FILE_LINE: (&'static str, uint) = (file!(), line!());\n-        let (file, line) = FILE_LINE;\n-        ::std::rt::begin_unwind($msg, file, line)\n-    });\n-    ($fmt:expr, $($arg:tt)*) => ({\n-        // a closure can't have return type !, so we need a full\n-        // function to pass to format_args!, *and* we need the\n-        // file and line numbers right here; so an inner bare fn\n-        // is our only choice.\n-        //\n-        // LLVM doesn't tend to inline this, presumably because begin_unwind_fmt\n-        // is #[cold] and #[inline(never)] and because this is flagged as cold\n-        // as returning !. We really do want this to be inlined, however,\n-        // because it's just a tiny wrapper. Small wins (156K to 149K in size)\n-        // were seen when forcing this to be inlined, and that number just goes\n-        // up with the number of calls to fail!()\n-        #[inline(always)]\n-        fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n-            static FILE_LINE: (&'static str, uint) = (file!(), line!());\n-            ::std::rt::begin_unwind_fmt(fmt, &FILE_LINE)\n-        }\n-        format_args!(run_fmt, $fmt, $($arg)*)\n-    });\n-)\n-\n /// Ensure that a boolean expression is `true` at runtime.\n ///\n /// This will invoke the `fail!` macro if the provided expression cannot be"}, {"sha": "ec31181e8a7483f93ce1219b0fafde67ba39aeb4", "filename": "src/libunicode/normalize.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibunicode%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Flibunicode%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fnormalize.rs?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -39,9 +39,6 @@ pub fn decompose_canonical(c: char, i: |char|) { d(c, i, false); }\n pub fn decompose_compatible(c: char, i: |char|) { d(c, i, true); }\n \n fn d(c: char, i: |char|, k: bool) {\n-    #[cfg(stage0)]\n-    use core::iter::Iterator;\n-\n     // 7-bit ASCII never decomposes\n     if c <= '\\x7f' { i(c); return; }\n "}, {"sha": "a07be82d58ef91f0cae09074ac8a5c4513e4088d", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4fd797e7576992c199914faced30ef8e2f0b3b91/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=4fd797e7576992c199914faced30ef8e2f0b3b91", "patch": "@@ -1,3 +1,11 @@\n+S 2014-08-07 12e0f72\n+  freebsd-x86_64 e55055a876ebbde0d3ed3bcb97579afab9264def\n+  linux-i386 2665e45879f2ef77ce0c9015f971642fe424ac33\n+  linux-x86_64 51ed1f4cf0707585a136bb149a443394067c074c\n+  macos-i386 78f1996954a6e0718d684a3756b4870a6f8771ee\n+  macos-x86_64 216f46f65866207a9f41c3ed654f5c1e085cb7f3\n+  winnt-i386 95a9b8a8bf587761ae954392aee2ccee3758a533\n+\n S 2014-07-17 9fc8394\n   freebsd-x86_64 5a4b645e2b42ae06224cc679d4a43b3d89be1482\n   linux-i386 a5e1bb723020ac35173d49600e76b0935e257a6a"}]}