{"sha": "2634309eb39b5af7b1d26a3656079efc0b9340d1", "node_id": "C_kwDOAAsO6NoAKDI2MzQzMDllYjM5YjVhZjdiMWQyNmEzNjU2MDc5ZWZjMGI5MzQwZDE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-29T07:43:22Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-29T07:44:20Z"}, "message": "update comment", "tree": {"sha": "31297e32b1db82b4352c6d9c7edb5616c0ad36b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31297e32b1db82b4352c6d9c7edb5616c0ad36b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2634309eb39b5af7b1d26a3656079efc0b9340d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2634309eb39b5af7b1d26a3656079efc0b9340d1", "html_url": "https://github.com/rust-lang/rust/commit/2634309eb39b5af7b1d26a3656079efc0b9340d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2634309eb39b5af7b1d26a3656079efc0b9340d1/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b21b0ea22d6caa1d0caa9e68ee22f72729229d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d", "html_url": "https://github.com/rust-lang/rust/commit/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "337fbb2c15e3ab66a33858a947d47799586ca41d", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2634309eb39b5af7b1d26a3656079efc0b9340d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2634309eb39b5af7b1d26a3656079efc0b9340d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=2634309eb39b5af7b1d26a3656079efc0b9340d1", "patch": "@@ -746,17 +746,22 @@ impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n         result\n     }\n \n+    /// All possible values for a constant parameter already exist\n+    /// in the crate defining the trait, so they are always non-local[^1].\n+    ///\n+    /// Because there's no way to have an impl where the first local\n+    /// generic argument is a constant, we also don't have to fail\n+    /// the orphan check when encountering a parameter or a generic constant.\n+    ///\n+    /// This means that we can completely ignore constants during the orphan check.\n+    ///\n+    /// See `src/test/ui/coherence/const-generics-orphan-check-ok.rs` for examples.\n+    ///\n+    /// [^1]: This might not hold for function pointers or trait objects in the future.\n+    /// As these should be quite rare as const arguments and especially rare as impl\n+    /// parameters, allowing uncovered const parameters in impls seems more useful\n+    /// than allowing `impl<T> Trait<local_fn_ptr, T> for i32` to compile.\n     fn visit_const(&mut self, _c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        // All possible values for a constant parameter already exist\n-        // in the crate defining the trait, so they are always non-local.\n-        //\n-        // Because there's no way to have an impl where the first local\n-        // generic argument is a constant, we also don't have to fail\n-        // the orphan check when encountering a parameter or a generic constant.\n-        //\n-        // This means that we can completely ignore constants during the orphan check.\n-        //\n-        // See `src/test/ui/coherence/const-generics-orphan-check-ok.rs` for examples.\n         ControlFlow::CONTINUE\n     }\n }"}]}