{"sha": "e2371518c4b03e1770948d9d2429cfeb46e25a20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMzcxNTE4YzRiMDNlMTc3MDk0OGQ5ZDI0MjljZmViNDZlMjVhMjA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-12-15T03:42:05Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-12-16T20:35:51Z"}, "message": "A little more refactoring inside emitter.rs", "tree": {"sha": "11a87cf8a26d47c2bde321fab63ed299c06a4b0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11a87cf8a26d47c2bde321fab63ed299c06a4b0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2371518c4b03e1770948d9d2429cfeb46e25a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2371518c4b03e1770948d9d2429cfeb46e25a20", "html_url": "https://github.com/rust-lang/rust/commit/e2371518c4b03e1770948d9d2429cfeb46e25a20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2371518c4b03e1770948d9d2429cfeb46e25a20/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0334944b173811f4c72e29362e24252dc0ab5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0334944b173811f4c72e29362e24252dc0ab5e", "html_url": "https://github.com/rust-lang/rust/commit/7a0334944b173811f4c72e29362e24252dc0ab5e"}], "stats": {"total": 80, "additions": 35, "deletions": 45}, "files": [{"sha": "e65eab58d9af51d0319d170b9f0a204db2f5d86d", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e2371518c4b03e1770948d9d2429cfeb46e25a20/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2371518c4b03e1770948d9d2429cfeb46e25a20/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=e2371518c4b03e1770948d9d2429cfeb46e25a20", "patch": "@@ -39,6 +39,16 @@ pub enum ColorConfig {\n     Never,\n }\n \n+impl ColorConfig {\n+    fn use_color(&self) -> bool {\n+        match *self {\n+            ColorConfig::Always => true,\n+            ColorConfig::Never  => false,\n+            ColorConfig::Auto   => stderr_isatty(),\n+        }        \n+    }\n+}\n+\n // A basic emitter for when we don't have access to a codemap or registry. Used\n // for reporting very early errors, etc.\n pub struct BasicEmitter {\n@@ -64,24 +74,12 @@ impl Emitter for BasicEmitter {\n }\n \n impl BasicEmitter {\n-    // TODO refactor\n     pub fn stderr(color_config: ColorConfig) -> BasicEmitter {\n-        let stderr = io::stderr();\n-\n-        let use_color = match color_config {\n-            ColorConfig::Always => true,\n-            ColorConfig::Never  => false,\n-            ColorConfig::Auto   => stderr_isatty(),\n-        };\n-\n-        if use_color {\n-            let dst = match term::stderr() {\n-                Some(t) => Terminal(t),\n-                None    => Raw(Box::new(stderr)),\n-            };\n+        if color_config.use_color() {\n+            let dst = Destination::from_stderr();\n             BasicEmitter { dst: dst }\n         } else {\n-            BasicEmitter { dst: Raw(Box::new(stderr)) }\n+            BasicEmitter { dst: Raw(Box::new(io::stderr())) }\n         }\n     }\n }\n@@ -139,22 +137,11 @@ impl EmitterWriter {\n                   registry: Option<diagnostics::registry::Registry>,\n                   code_map: Rc<codemap::CodeMap>)\n                   -> EmitterWriter {\n-        let stderr = io::stderr();\n-\n-        let use_color = match color_config {\n-            ColorConfig::Always => true,\n-            ColorConfig::Never  => false,\n-            ColorConfig::Auto   => stderr_isatty(),\n-        };\n-\n-        if use_color {\n-            let dst = match term::stderr() {\n-                Some(t) => Terminal(t),\n-                None    => Raw(Box::new(stderr)),\n-            };\n+        if color_config.use_color() {\n+            let dst = Destination::from_stderr();\n             EmitterWriter { dst: dst, registry: registry, cm: code_map }\n         } else {\n-            EmitterWriter { dst: Raw(Box::new(stderr)), registry: registry, cm: code_map }\n+            EmitterWriter { dst: Raw(Box::new(io::stderr())), registry: registry, cm: code_map }\n         }\n     }\n \n@@ -476,22 +463,18 @@ impl EmitterWriter {\n \n         loop {\n             let span_name_span = self.cm.with_expn_info(span.expn_id, |expn_info| {\n-                match expn_info {\n-                    Some(ei) => {\n-                        let (pre, post) = match ei.callee.format {\n-                            codemap::MacroAttribute(..) => (\"#[\", \"]\"),\n-                            codemap::MacroBang(..) => (\"\", \"!\"),\n-                        };\n-                        let macro_decl_name = format!(\"in this expansion of {}{}{}\",\n-                                                      pre,\n-                                                      ei.callee.name(),\n-                                                      post);\n-                        let def_site_span = ei.callee.span;\n-                        Some((ei.call_site, macro_decl_name, def_site_span))\n-                    }\n-                    // TODO map\n-                    None => None,\n-                }\n+                expn_info.map(|ei| {\n+                    let (pre, post) = match ei.callee.format {\n+                        codemap::MacroAttribute(..) => (\"#[\", \"]\"),\n+                        codemap::MacroBang(..) => (\"\", \"!\"),\n+                    };\n+                    let macro_decl_name = format!(\"in this expansion of {}{}{}\",\n+                                                  pre,\n+                                                  ei.callee.name(),\n+                                                  post);\n+                    let def_site_span = ei.callee.span;\n+                    (ei.call_site, macro_decl_name, def_site_span)\n+                })\n             });\n             let (macro_decl_name, def_site_span) = match span_name_span {\n                 None => break,\n@@ -573,6 +556,13 @@ enum Destination {\n }\n \n impl Destination {\n+    fn from_stderr() -> Destination {\n+        match term::stderr() {\n+            Some(t) => Terminal(t),\n+            None    => Raw(Box::new(io::stderr())),\n+        }\n+    }\n+\n     fn print_maybe_styled(&mut self,\n                           args: fmt::Arguments,\n                           color: term::Attr,"}]}