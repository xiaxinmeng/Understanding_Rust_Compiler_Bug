{"sha": "66226ca1574fb936743a32f8b584fcfd1712a385", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MjI2Y2ExNTc0ZmI5MzY3NDNhMzJmOGI1ODRmY2ZkMTcxMmEzODU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-10T19:48:17Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-11-02T06:53:59Z"}, "message": "Address some code reviews", "tree": {"sha": "ff20fee5fb4928e62a203bc089d1e8d7a268cc36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff20fee5fb4928e62a203bc089d1e8d7a268cc36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66226ca1574fb936743a32f8b584fcfd1712a385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66226ca1574fb936743a32f8b584fcfd1712a385", "html_url": "https://github.com/rust-lang/rust/commit/66226ca1574fb936743a32f8b584fcfd1712a385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66226ca1574fb936743a32f8b584fcfd1712a385/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad978e55722bdf35e5beb32fcaa52de39650f132", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad978e55722bdf35e5beb32fcaa52de39650f132", "html_url": "https://github.com/rust-lang/rust/commit/ad978e55722bdf35e5beb32fcaa52de39650f132"}], "stats": {"total": 199, "additions": 89, "deletions": 110}, "files": [{"sha": "e0c46a65b56a057c4d191a642d8df1e580c54591", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 85, "deletions": 94, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/66226ca1574fb936743a32f8b584fcfd1712a385/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66226ca1574fb936743a32f8b584fcfd1712a385/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=66226ca1574fb936743a32f8b584fcfd1712a385", "patch": "@@ -1570,99 +1570,66 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             format!(\"does not implement `{}`\", trait_ref.print_only_trait_path())\n         };\n \n-        let mut explain_yield =\n-            |interior_span: Span, yield_span: Span, scope_span: Option<Span>| {\n-                let mut span = MultiSpan::from_span(yield_span);\n-                if let Ok(snippet) = source_map.span_to_snippet(interior_span) {\n-                    // #70935: If snippet contains newlines, display \"the value\" instead\n-                    // so that we do not emit complex diagnostics.\n-                    let snippet = &format!(\"`{}`\", snippet);\n-                    let snippet = if snippet.contains('\\n') { \"the value\" } else { snippet };\n-                    // The multispan can be complex here, like:\n-                    // note: future is not `Send` as this value is used across an await\n-                    //   --> $DIR/issue-70935-complex-spans.rs:13:9\n-                    //    |\n-                    // LL |            baz(|| async{\n-                    //    |  __________^___-\n-                    //    | | _________|\n-                    //    | ||\n-                    // LL | ||             foo(tx.clone());\n-                    // LL | ||         }).await;\n-                    //    | ||         -      ^- value is later dropped here\n-                    //    | ||_________|______|\n-                    //    | |__________|      await occurs here, with value maybe used later\n-                    //    |            has type `closure` which is not `Send`\n-                    //    = note: the return type of a function must have a statically known size\n-                    // So, detect it and separate into some notes, like:\n-                    // note: future is not `Send` as this value is used across an await\n-                    //   --> $DIR/issue-70935-complex-spans.rs:13:9\n-                    //    |\n-                    // LL | /         baz(|| async{\n-                    // LL | |             foo(tx.clone());\n-                    // LL | |         }).await;\n-                    //    | |________________^\n-                    // note: first, await occurs here, with the value maybe used later\n-                    //   --> $DIR/issue-70935-complex-spans.rs:13:9\n-                    //    |\n-                    // LL | /         baz(|| async{\n-                    // LL | |             foo(tx.clone());\n-                    // LL | |         }).await;\n-                    //    | |________________^\n-                    // note: ...but, the value is later dropped here\n-                    //   --> $DIR/issue-70935-complex-spans.rs:15:17\n-                    //    |\n-                    // LL |         }).await;\n-                    //    |                 ^\n-                    //    = note: the return type of a function must have a statically known size\n-\n-                    // If available, use the scope span to annotate the drop location.\n-                    if let Some(scope_span) = scope_span {\n-                        let scope_span = source_map.end_point(scope_span);\n-                        let is_overlapped =\n-                            yield_span.overlaps(scope_span) || yield_span.overlaps(interior_span);\n-                        if is_overlapped {\n-                            err.span_note(\n-                                span,\n-                                &format!(\n-                                    \"{} {} as this value is used across {}\",\n-                                    future_or_generator, trait_explanation, an_await_or_yield\n-                                ),\n-                            );\n-                            err.span_note(\n-                                yield_span,\n-                                &format!(\n-                                    \"first, {} occurs here, with {} maybe used later\",\n-                                    await_or_yield, snippet\n-                                ),\n-                            );\n-                            err.span_note(\n-                                scope_span,\n-                                &format!(\"...but, {} is later dropped here\", snippet),\n-                            );\n-                        } else {\n-                            span.push_span_label(\n-                                yield_span,\n-                                format!(\n-                                    \"{} occurs here, with {} maybe used later\",\n-                                    await_or_yield, snippet\n-                                ),\n-                            );\n-                            span.push_span_label(\n-                                scope_span,\n-                                format!(\"{} is later dropped here\", snippet),\n-                            );\n-                            span.push_span_label(\n-                                interior_span,\n-                                format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n-                            );\n-                            err.span_note(\n-                                span,\n-                                &format!(\n-                                    \"{} {} as this value is used across {}\",\n-                                    future_or_generator, trait_explanation, an_await_or_yield\n-                                ),\n-                            );\n-                        }\n+        let mut explain_yield = |interior_span: Span,\n+                                 yield_span: Span,\n+                                 scope_span: Option<Span>| {\n+            let mut span = MultiSpan::from_span(yield_span);\n+            if let Ok(snippet) = source_map.span_to_snippet(interior_span) {\n+                // #70935: If snippet contains newlines, display \"the value\" instead\n+                // so that we do not emit complex diagnostics.\n+                let snippet = &format!(\"`{}`\", snippet);\n+                let snippet = if snippet.contains('\\n') { \"the value\" } else { snippet };\n+                // The multispan can be complex here, like:\n+                // note: future is not `Send` as this value is used across an await\n+                //   --> $DIR/issue-70935-complex-spans.rs:13:9\n+                //    |\n+                // LL |            baz(|| async{\n+                //    |  __________^___-\n+                //    | | _________|\n+                //    | ||\n+                // LL | ||             foo(tx.clone());\n+                // LL | ||         }).await;\n+                //    | ||         -      ^- value is later dropped here\n+                //    | ||_________|______|\n+                //    | |__________|      await occurs here, with value maybe used later\n+                //    |            has type `closure` which is not `Send`\n+                //\n+                // So, detect it and separate into some notes, like:\n+                //\n+                // note: future is not `Send` as this value is used across an await\n+                //   --> $DIR/issue-70935-complex-spans.rs:13:9\n+                //    |\n+                // LL | /         baz(|| async{\n+                // LL | |             foo(tx.clone());\n+                // LL | |         }).await;\n+                //    | |________________^ first, await occurs here, with the value maybe used later...\n+                // note: the value is later dropped here\n+                //   --> $DIR/issue-70935-complex-spans.rs:15:17\n+                //    |\n+                // LL |         }).await;\n+                //    |                 ^\n+                //\n+                // If available, use the scope span to annotate the drop location.\n+                if let Some(scope_span) = scope_span {\n+                    let scope_span = source_map.end_point(scope_span);\n+                    let is_overlapped =\n+                        yield_span.overlaps(scope_span) || yield_span.overlaps(interior_span);\n+                    if is_overlapped {\n+                        span.push_span_label(\n+                            yield_span,\n+                            format!(\n+                                \"first, {} occurs here, with {} maybe used later...\",\n+                                await_or_yield, snippet\n+                            ),\n+                        );\n+                        err.span_note(\n+                            span,\n+                            &format!(\n+                                \"{} {} as this value is used across {}\",\n+                                future_or_generator, trait_explanation, an_await_or_yield\n+                            ),\n+                        );\n+                        err.span_note(scope_span, &format!(\"{} is later dropped here\", snippet));\n                     } else {\n                         span.push_span_label(\n                             yield_span,\n@@ -1671,6 +1638,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 await_or_yield, snippet\n                             ),\n                         );\n+                        span.push_span_label(\n+                            scope_span,\n+                            format!(\"{} is later dropped here\", snippet),\n+                        );\n                         span.push_span_label(\n                             interior_span,\n                             format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n@@ -1683,8 +1654,28 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             ),\n                         );\n                     }\n+                } else {\n+                    span.push_span_label(\n+                        yield_span,\n+                        format!(\n+                            \"{} occurs here, with {} maybe used later\",\n+                            await_or_yield, snippet\n+                        ),\n+                    );\n+                    span.push_span_label(\n+                        interior_span,\n+                        format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n+                    );\n+                    err.span_note(\n+                        span,\n+                        &format!(\n+                            \"{} {} as this value is used across {}\",\n+                            future_or_generator, trait_explanation, an_await_or_yield\n+                        ),\n+                    );\n                 }\n-            };\n+            }\n+        };\n         match interior_or_upvar_span {\n             GeneratorInteriorOrUpvar::Interior(interior_span) => {\n                 if let Some((scope_span, yield_span, expr, from_awaited_ty)) = interior_extra_info {"}, {"sha": "6b599b5d603d914740c6b13580463ea7ed5c9e24", "filename": "src/test/ui/async-await/issue-70935-complex-spans.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/66226ca1574fb936743a32f8b584fcfd1712a385/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66226ca1574fb936743a32f8b584fcfd1712a385/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr?ref=66226ca1574fb936743a32f8b584fcfd1712a385", "patch": "@@ -11,15 +11,8 @@ note: future is not `Send` as this value is used across an await\n LL | /         baz(|| async{\n LL | |             foo(tx.clone());\n LL | |         }).await;\n-   | |________________^\n-note: first, await occurs here, with the value maybe used later\n-  --> $DIR/issue-70935-complex-spans.rs:13:9\n-   |\n-LL | /         baz(|| async{\n-LL | |             foo(tx.clone());\n-LL | |         }).await;\n-   | |________________^\n-note: ...but, the value is later dropped here\n+   | |________________^ first, await occurs here, with the value maybe used later...\n+note: the value is later dropped here\n   --> $DIR/issue-70935-complex-spans.rs:15:17\n    |\n LL |         }).await;"}, {"sha": "9d3b10c86639160628e257170029785b83964d59", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/66226ca1574fb936743a32f8b584fcfd1712a385/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66226ca1574fb936743a32f8b584fcfd1712a385/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=66226ca1574fb936743a32f8b584fcfd1712a385", "patch": "@@ -12,13 +12,8 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:9\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: first, await occurs here, with `std::ptr::null()` maybe used later\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:9\n-   |\n-LL |         bar(Foo(std::ptr::null())).await;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...but, `std::ptr::null()` is later dropped here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ first, await occurs here, with `std::ptr::null()` maybe used later...\n+note: `std::ptr::null()` is later dropped here\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:41\n    |\n LL |         bar(Foo(std::ptr::null())).await;"}]}