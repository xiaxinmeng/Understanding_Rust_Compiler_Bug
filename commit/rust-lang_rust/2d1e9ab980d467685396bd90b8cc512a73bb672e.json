{"sha": "2d1e9ab980d467685396bd90b8cc512a73bb672e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMWU5YWI5ODBkNDY3Njg1Mzk2YmQ5MGI4Y2M1MTJhNzNiYjY3MmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-14T14:57:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-14T14:57:56Z"}, "message": "Auto merge of #7345 - DevinR528:disallowed-fix, r=Manishearth\n\nRemove requirement of fully qualified path for disallowed_method/type\n\nchangelog: Remove the need for fully qualified paths in disallowed_method and disallowed_type\n\nAfter fixing this issue in [import_rename](https://github.com/rust-lang/rust-clippy/pull/7300#discussion_r650127720) I figured I'd fix it for these two.\n\nIf this does in fact fix the **Known problems:** section I was planning to remove them from both lints after confirmation.", "tree": {"sha": "bfc8ebfa7238f828869b80138a7d51d3b20aca82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfc8ebfa7238f828869b80138a7d51d3b20aca82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d1e9ab980d467685396bd90b8cc512a73bb672e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1e9ab980d467685396bd90b8cc512a73bb672e", "html_url": "https://github.com/rust-lang/rust/commit/2d1e9ab980d467685396bd90b8cc512a73bb672e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d1e9ab980d467685396bd90b8cc512a73bb672e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a36a7c808c2d7357f76201af65345b090d0c3424", "url": "https://api.github.com/repos/rust-lang/rust/commits/a36a7c808c2d7357f76201af65345b090d0c3424", "html_url": "https://github.com/rust-lang/rust/commit/a36a7c808c2d7357f76201af65345b090d0c3424"}, {"sha": "d4eff81282d4784951ae52ffc3b8fe1c948f872e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4eff81282d4784951ae52ffc3b8fe1c948f872e", "html_url": "https://github.com/rust-lang/rust/commit/d4eff81282d4784951ae52ffc3b8fe1c948f872e"}], "stats": {"total": 95, "additions": 54, "deletions": 41}, "files": [{"sha": "aa1a609afedc0b91edfac0fbd4e3720d327f423b", "filename": "clippy_lints/src/disallowed_method.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e9ab980d467685396bd90b8cc512a73bb672e/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e9ab980d467685396bd90b8cc512a73bb672e/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=2d1e9ab980d467685396bd90b8cc512a73bb672e", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::fn_def_id;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::Expr;\n+use rustc_hir::{def::Res, def_id::DefId, Crate, Expr};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Symbol;\n@@ -13,21 +13,14 @@ declare_clippy_lint! {\n     /// **Why is this bad?** Some methods are undesirable in certain contexts,\n     /// and it's beneficial to lint for them as needed.\n     ///\n-    /// **Known problems:** Currently, you must write each function as a\n-    /// fully-qualified path. This lint doesn't support aliases or reexported\n-    /// names; be aware that many types in `std` are actually reexports.\n-    ///\n-    /// For example, if you want to disallow `Duration::as_secs`, your clippy.toml\n-    /// configuration would look like\n-    /// `disallowed-methods = [\"core::time::Duration::as_secs\"]` and not\n-    /// `disallowed-methods = [\"std::time::Duration::as_secs\"]` as you might expect.\n+    /// **Known problems:** None.\n     ///\n     /// **Example:**\n     ///\n     /// An example clippy.toml configuration:\n     /// ```toml\n     /// # clippy.toml\n-    /// disallowed-methods = [\"alloc::vec::Vec::leak\", \"std::time::Instant::now\"]\n+    /// disallowed-methods = [\"std::vec::Vec::leak\", \"std::time::Instant::now\"]\n     /// ```\n     ///\n     /// ```rust,ignore\n@@ -52,6 +45,7 @@ declare_clippy_lint! {\n #[derive(Clone, Debug)]\n pub struct DisallowedMethod {\n     disallowed: FxHashSet<Vec<Symbol>>,\n+    def_ids: FxHashSet<(DefId, Vec<Symbol>)>,\n }\n \n impl DisallowedMethod {\n@@ -61,17 +55,28 @@ impl DisallowedMethod {\n                 .iter()\n                 .map(|s| s.split(\"::\").map(|seg| Symbol::intern(seg)).collect::<Vec<_>>())\n                 .collect(),\n+            def_ids: FxHashSet::default(),\n         }\n     }\n }\n \n impl_lint_pass!(DisallowedMethod => [DISALLOWED_METHOD]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedMethod {\n+    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+        for path in &self.disallowed {\n+            let segs = path.iter().map(ToString::to_string).collect::<Vec<_>>();\n+            if let Res::Def(_, id) = clippy_utils::path_to_res(cx, &segs.iter().map(String::as_str).collect::<Vec<_>>())\n+            {\n+                self.def_ids.insert((id, path.clone()));\n+            }\n+        }\n+    }\n+\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let Some(def_id) = fn_def_id(cx, expr) {\n-            let func_path = cx.get_def_path(def_id);\n-            if self.disallowed.contains(&func_path) {\n+            if self.def_ids.iter().any(|(id, _)| def_id == *id) {\n+                let func_path = cx.get_def_path(def_id);\n                 let func_path_string = func_path\n                     .into_iter()\n                     .map(Symbol::to_ident_string)"}, {"sha": "e4a88c6324ebfdac3958c208b1d2251194deb6e4", "filename": "clippy_lints/src/disallowed_type.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e9ab980d467685396bd90b8cc512a73bb672e/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e9ab980d467685396bd90b8cc512a73bb672e/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_type.rs?ref=2d1e9ab980d467685396bd90b8cc512a73bb672e", "patch": "@@ -1,7 +1,9 @@\n use clippy_utils::diagnostics::span_lint;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{def::Res, Item, ItemKind, PolyTraitRef, TraitBoundModifier, Ty, TyKind, UseKind};\n+use rustc_hir::{\n+    def::Res, def_id::DefId, Crate, Item, ItemKind, PolyTraitRef, TraitBoundModifier, Ty, TyKind, UseKind,\n+};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{Span, Symbol};\n@@ -11,14 +13,7 @@ declare_clippy_lint! {\n     ///\n     /// **Why is this bad?** Some types are undesirable in certain contexts.\n     ///\n-    /// **Known problems:** The fully qualified path must be used. This lint\n-    /// doesn't support aliases or reexported names; be aware that many types\n-    /// in `std` are actually reexports.\n-    ///\n-    /// For example, if you want to disallow `BTreeMap`, your clippy.toml\n-    /// configuration would look like\n-    /// `disallowed-methods = [\"alloc::collections::btree::map::BTreeMap\"]` and not\n-    /// `disallowed-methods = [\"std::collections::BTreeMap\"]` as you might expect.\n+    /// **Known problems:** None.\n     ///\n     /// N.B. There is no way to ban primitive types.\n     ///\n@@ -27,7 +22,7 @@ declare_clippy_lint! {\n     /// An example clippy.toml configuration:\n     /// ```toml\n     /// # clippy.toml\n-    /// disallowed-methods = [\"alloc::collections::btree::map::BTreeMap\"]\n+    /// disallowed-methods = [\"std::collections::BTreeMap\"]\n     /// ```\n     ///\n     /// ```rust,ignore\n@@ -47,6 +42,7 @@ declare_clippy_lint! {\n #[derive(Clone, Debug)]\n pub struct DisallowedType {\n     disallowed: FxHashSet<Vec<Symbol>>,\n+    def_ids: FxHashSet<(DefId, Vec<Symbol>)>,\n }\n \n impl DisallowedType {\n@@ -56,19 +52,29 @@ impl DisallowedType {\n                 .iter()\n                 .map(|s| s.split(\"::\").map(|seg| Symbol::intern(seg)).collect::<Vec<_>>())\n                 .collect(),\n+            def_ids: FxHashSet::default(),\n         }\n     }\n }\n \n impl_lint_pass!(DisallowedType => [DISALLOWED_TYPE]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedType {\n+    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+        for path in &self.disallowed {\n+            let segs = path.iter().map(ToString::to_string).collect::<Vec<_>>();\n+            if let Res::Def(_, id) = clippy_utils::path_to_res(cx, &segs.iter().map(String::as_str).collect::<Vec<_>>())\n+            {\n+                self.def_ids.insert((id, path.clone()));\n+            }\n+        }\n+    }\n+\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if_chain! {\n             if let ItemKind::Use(path, UseKind::Single) = &item.kind;\n-            if let Res::Def(_, id) = path.res;\n-            let use_path = cx.get_def_path(id);\n-            if let Some(name) = self.disallowed.iter().find(|path| **path == use_path);\n+            if let Res::Def(_, did) = path.res;\n+            if let Some((_, name)) = self.def_ids.iter().find(|(id, _)| *id == did);\n             then {\n                 emit(cx, name, item.span,);\n             }\n@@ -79,8 +85,7 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedType {\n         if_chain! {\n             if let TyKind::Path(path) = &ty.kind;\n             if let Some(did) = cx.qpath_res(path, ty.hir_id).opt_def_id();\n-            let use_path = cx.get_def_path(did);\n-            if let Some(name) = self.disallowed.iter().find(|path| **path == use_path);\n+            if let Some((_, name)) = self.def_ids.iter().find(|(id, _)| *id == did);\n             then {\n                 emit(cx, name, path.span());\n             }\n@@ -90,8 +95,7 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedType {\n     fn check_poly_trait_ref(&mut self, cx: &LateContext<'tcx>, poly: &'tcx PolyTraitRef<'tcx>, _: TraitBoundModifier) {\n         if_chain! {\n             if let Res::Def(_, did) = poly.trait_ref.path.res;\n-            let use_path = cx.get_def_path(did);\n-            if let Some(name) = self.disallowed.iter().find(|path| **path == use_path);\n+            if let Some((_, name)) = self.def_ids.iter().find(|(id, _)| *id == did);\n             then {\n                 emit(cx, name, poly.trait_ref.path.span);\n             }"}, {"sha": "a3245da68250c3d28939ddb5da02dc08fbb938ce", "filename": "tests/ui-toml/toml_disallowed_method/clippy.toml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e9ab980d467685396bd90b8cc512a73bb672e/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e9ab980d467685396bd90b8cc512a73bb672e/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml?ref=2d1e9ab980d467685396bd90b8cc512a73bb672e", "patch": "@@ -1 +1,5 @@\n-disallowed-methods = [\"core::iter::traits::iterator::Iterator::sum\", \"regex::re_unicode::Regex::is_match\", \"regex::re_unicode::Regex::new\"]\n+disallowed-methods = [\n+    \"std::iter::Iterator::sum\",\n+    \"regex::Regex::is_match\",\n+    \"regex::Regex::new\"\n+]"}, {"sha": "2eff854c22c3078e55432a8297c3b52190041de1", "filename": "tests/ui-toml/toml_disallowed_type/clippy.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e9ab980d467685396bd90b8cc512a73bb672e/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e9ab980d467685396bd90b8cc512a73bb672e/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml?ref=2d1e9ab980d467685396bd90b8cc512a73bb672e", "patch": "@@ -1,7 +1,7 @@\n disallowed-types = [\n-    \"std::collections::hash::map::HashMap\",\n-    \"core::sync::atomic::AtomicU32\",\n-    \"syn::ty::TypePath\",\n+    \"std::collections::HashMap\",\n+    \"std::sync::atomic::AtomicU32\",\n+    \"syn::TypePath\",\n     \"proc_macro2::Ident\",\n     \"std::thread::Thread\",\n     \"std::time::Instant\","}, {"sha": "4e6fd91fba1192d8d27702073679acbd609aff01", "filename": "tests/ui-toml/toml_disallowed_type/conf_disallowed_type.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2d1e9ab980d467685396bd90b8cc512a73bb672e/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d1e9ab980d467685396bd90b8cc512a73bb672e/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr?ref=2d1e9ab980d467685396bd90b8cc512a73bb672e", "patch": "@@ -1,4 +1,4 @@\n-error: `core::sync::atomic::AtomicU32` is not allowed according to config\n+error: `std::sync::atomic::AtomicU32` is not allowed according to config\n   --> $DIR/conf_disallowed_type.rs:7:1\n    |\n LL | use std::sync::atomic::AtomicU32;\n@@ -24,7 +24,7 @@ error: `std::time::Instant` is not allowed according to config\n LL | fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {\n    |                            ^^^^^^\n \n-error: `core::sync::atomic::AtomicU32` is not allowed according to config\n+error: `std::sync::atomic::AtomicU32` is not allowed according to config\n   --> $DIR/conf_disallowed_type.rs:16:39\n    |\n LL | fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {\n@@ -36,13 +36,13 @@ error: `std::io::Read` is not allowed according to config\n LL | fn trait_obj(_: &dyn std::io::Read) {\n    |                      ^^^^^^^^^^^^^\n \n-error: `std::collections::hash::map::HashMap` is not allowed according to config\n+error: `std::collections::HashMap` is not allowed according to config\n   --> $DIR/conf_disallowed_type.rs:28:48\n    |\n LL |     let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `std::collections::hash::map::HashMap` is not allowed according to config\n+error: `std::collections::HashMap` is not allowed according to config\n   --> $DIR/conf_disallowed_type.rs:28:12\n    |\n LL |     let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();\n@@ -54,25 +54,25 @@ error: `std::time::Instant` is not allowed according to config\n LL |     let _ = Sneaky::now();\n    |             ^^^^^^\n \n-error: `core::sync::atomic::AtomicU32` is not allowed according to config\n+error: `std::sync::atomic::AtomicU32` is not allowed according to config\n   --> $DIR/conf_disallowed_type.rs:30:13\n    |\n LL |     let _ = foo::atomic::AtomicU32::new(0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `core::sync::atomic::AtomicU32` is not allowed according to config\n+error: `std::sync::atomic::AtomicU32` is not allowed according to config\n   --> $DIR/conf_disallowed_type.rs:31:17\n    |\n LL |     static FOO: std::sync::atomic::AtomicU32 = foo::atomic::AtomicU32::new(1);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `core::sync::atomic::AtomicU32` is not allowed according to config\n+error: `std::sync::atomic::AtomicU32` is not allowed according to config\n   --> $DIR/conf_disallowed_type.rs:31:48\n    |\n LL |     static FOO: std::sync::atomic::AtomicU32 = foo::atomic::AtomicU32::new(1);\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `syn::ty::TypePath` is not allowed according to config\n+error: `syn::TypePath` is not allowed according to config\n   --> $DIR/conf_disallowed_type.rs:32:43\n    |\n LL |     let _: std::collections::BTreeMap<(), syn::TypePath> = Default::default();"}]}