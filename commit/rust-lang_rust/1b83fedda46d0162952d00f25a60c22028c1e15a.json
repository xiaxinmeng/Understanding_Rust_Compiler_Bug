{"sha": "1b83fedda46d0162952d00f25a60c22028c1e15a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiODNmZWRkYTQ2ZDAxNjI5NTJkMDBmMjVhNjBjMjIwMjhjMWUxNWE=", "commit": {"author": {"name": "bstrie", "email": "865233+bstrie@users.noreply.github.com", "date": "2021-07-24T18:04:51Z"}, "committer": {"name": "bstrie", "email": "865233+bstrie@users.noreply.github.com", "date": "2021-07-24T18:04:51Z"}, "message": "Update std_collections_from_array stability version", "tree": {"sha": "67c9b4844104cab000a0ae11b74d5edc19fab7bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67c9b4844104cab000a0ae11b74d5edc19fab7bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b83fedda46d0162952d00f25a60c22028c1e15a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b83fedda46d0162952d00f25a60c22028c1e15a", "html_url": "https://github.com/rust-lang/rust/commit/1b83fedda46d0162952d00f25a60c22028c1e15a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b83fedda46d0162952d00f25a60c22028c1e15a/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2db05230d35c068c557fe476cf16197836580c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db05230d35c068c557fe476cf16197836580c2d", "html_url": "https://github.com/rust-lang/rust/commit/2db05230d35c068c557fe476cf16197836580c2d"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "a6bd554c5c3b2efa90f85ac2389fdc5ae5272883", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=1b83fedda46d0162952d00f25a60c22028c1e15a", "patch": "@@ -1451,7 +1451,7 @@ impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {\n     }\n }\n \n-#[stable(feature = \"std_collections_from_array\", since = \"1.55.0\")]\n+#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T: Ord, const N: usize> From<[T; N]> for BinaryHeap<T> {\n     /// ```\n     /// use std::collections::BinaryHeap;"}, {"sha": "c45e3888d93d9253d8e8248d7988bee5461c395b", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=1b83fedda46d0162952d00f25a60c22028c1e15a", "patch": "@@ -2043,7 +2043,7 @@ where\n     }\n }\n \n-#[stable(feature = \"std_collections_from_array\", since = \"1.55.0\")]\n+#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<K: Ord, V, const N: usize> From<[(K, V); N]> for BTreeMap<K, V> {\n     /// ```\n     /// use std::collections::BTreeMap;"}, {"sha": "f02c1640e491f78f076e9761f6f06c7f38ea0d66", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=1b83fedda46d0162952d00f25a60c22028c1e15a", "patch": "@@ -1065,7 +1065,7 @@ impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n     }\n }\n \n-#[stable(feature = \"std_collections_from_array\", since = \"1.55.0\")]\n+#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T: Ord, const N: usize> From<[T; N]> for BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;"}, {"sha": "32ba5be3bd3d3bb756f342f23dbb8666a14133e1", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=1b83fedda46d0162952d00f25a60c22028c1e15a", "patch": "@@ -1774,7 +1774,7 @@ impl<T: Hash> Hash for LinkedList<T> {\n     }\n }\n \n-#[stable(feature = \"std_collections_from_array\", since = \"1.55.0\")]\n+#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T, const N: usize> From<[T; N]> for LinkedList<T> {\n     /// ```\n     /// use std::collections::LinkedList;"}, {"sha": "4d2fb6310fe88078a41e8b54ab916848160c6c12", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=1b83fedda46d0162952d00f25a60c22028c1e15a", "patch": "@@ -2864,7 +2864,7 @@ impl<T> From<VecDeque<T>> for Vec<T> {\n     }\n }\n \n-#[stable(feature = \"std_collections_from_array\", since = \"1.55.0\")]\n+#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T, const N: usize> From<[T; N]> for VecDeque<T> {\n     /// ```\n     /// use std::collections::VecDeque;"}, {"sha": "184c9f5d1a17387aeadfaed666966be5137fb771", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=1b83fedda46d0162952d00f25a60c22028c1e15a", "patch": "@@ -1154,7 +1154,7 @@ where\n     }\n }\n \n-#[stable(feature = \"std_collections_from_array\", since = \"1.55.0\")]\n+#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n // Note: as what is currently the most convenient built-in way to construct\n // a HashMap, a simple usage of this function must not *require* the user\n // to provide a type annotation in order to infer the third type parameter"}, {"sha": "96c9722b001609f1a40616e01f62c25832c679c7", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b83fedda46d0162952d00f25a60c22028c1e15a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=1b83fedda46d0162952d00f25a60c22028c1e15a", "patch": "@@ -996,7 +996,7 @@ where\n     }\n }\n \n-#[stable(feature = \"std_collections_from_array\", since = \"1.55.0\")]\n+#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n // Note: as what is currently the most convenient built-in way to construct\n // a HashSet, a simple usage of this function must not *require* the user\n // to provide a type annotation in order to infer the third type parameter"}]}