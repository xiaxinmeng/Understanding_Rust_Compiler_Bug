{"sha": "0bae326f6d3b647ebd01901854b0920976780755", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYWUzMjZmNmQzYjY0N2ViZDAxOTAxODU0YjA5MjA5NzY3ODA3NTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-10T23:34:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-10T23:34:11Z"}, "message": "Auto merge of #48419 - bobtwinkles:fix_late_bound_reg_self, r=nikomatsakis\n\nUse free regions when determining self type in `compare_impl_method`\n\nThe ExplicitSelf::determine function expects to be able to compare regions. However, when the compare_self_type error reporting code runs we haven't resolved bound regions yet. Thus we replace them with free regions first. Fixes #48276", "tree": {"sha": "120f04366a5f02b4fef3abff31cb93afee0d9312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/120f04366a5f02b4fef3abff31cb93afee0d9312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bae326f6d3b647ebd01901854b0920976780755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bae326f6d3b647ebd01901854b0920976780755", "html_url": "https://github.com/rust-lang/rust/commit/0bae326f6d3b647ebd01901854b0920976780755", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bae326f6d3b647ebd01901854b0920976780755/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f0e6a3ba585e00205805d6cb9fdcbe4b1d1be63", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0e6a3ba585e00205805d6cb9fdcbe4b1d1be63", "html_url": "https://github.com/rust-lang/rust/commit/2f0e6a3ba585e00205805d6cb9fdcbe4b1d1be63"}, {"sha": "c0d41fb22c050803fb0e831113b6837f80a1db62", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d41fb22c050803fb0e831113b6837f80a1db62", "html_url": "https://github.com/rust-lang/rust/commit/c0d41fb22c050803fb0e831113b6837f80a1db62"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "a3a1f2a930778936ce72d779c3bed7b44dd02bbe", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bae326f6d3b647ebd01901854b0920976780755/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bae326f6d3b647ebd01901854b0920976780755/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0bae326f6d3b647ebd01901854b0920976780755", "patch": "@@ -504,6 +504,10 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let param_env = ty::ParamEnv::empty(Reveal::All);\n \n         tcx.infer_ctxt().enter(|infcx| {\n+            let self_arg_ty = tcx.liberate_late_bound_regions(\n+                method.def_id,\n+                &ty::Binder(self_arg_ty)\n+            );\n             let can_eq_self = |ty| infcx.can_eq(param_env, untransformed_self_ty, ty).is_ok();\n             match ExplicitSelf::determine(self_arg_ty, can_eq_self) {\n                 ExplicitSelf::ByValue => \"self\".to_string(),"}, {"sha": "30d11a2e37f15c717a0e38c0fd12fe7b9d141c4f", "filename": "src/test/ui/issue-48276.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0bae326f6d3b647ebd01901854b0920976780755/src%2Ftest%2Fui%2Fissue-48276.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bae326f6d3b647ebd01901854b0920976780755/src%2Ftest%2Fui%2Fissue-48276.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48276.rs?ref=0bae326f6d3b647ebd01901854b0920976780755", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #48276 - ICE when self type does not match what is\n+// required by a trait and regions are involved.\n+\n+trait MyFrom<A> {\n+    fn from(a: A) -> Self;\n+}\n+\n+struct A;\n+\n+impl<'a, 'b> MyFrom<A> for &'a str {\n+    fn from(self: &'a Self) -> &'b str {\n+        //~^ ERROR: method `from` has a `&self` declaration in the impl, but not in the trait\n+        \"asdf\"\n+    }\n+}\n+\n+struct B;\n+\n+impl From<A> for B {\n+    fn from(&self) -> B {\n+        //~^ ERROR: method `from` has a `&self` declaration in the impl, but not in the trait\n+        B\n+    }\n+}\n+\n+impl From<A> for &'static str {\n+    fn from(&self) -> &'static str {\n+        //~^ ERROR: method `from` has a `&self` declaration in the impl, but not in the trait\n+        \"\"\n+    }\n+}\n+\n+fn main(){}"}, {"sha": "9273ece2c908c02616996768928d92fff7493590", "filename": "src/test/ui/issue-48276.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0bae326f6d3b647ebd01901854b0920976780755/src%2Ftest%2Fui%2Fissue-48276.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bae326f6d3b647ebd01901854b0920976780755/src%2Ftest%2Fui%2Fissue-48276.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48276.stderr?ref=0bae326f6d3b647ebd01901854b0920976780755", "patch": "@@ -0,0 +1,28 @@\n+error[E0185]: method `from` has a `&self` declaration in the impl, but not in the trait\n+  --> $DIR/issue-48276.rs:21:5\n+   |\n+LL |     fn from(a: A) -> Self;\n+   |     ---------------------- trait method declared without `&self`\n+...\n+LL |     fn from(self: &'a Self) -> &'b str {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&self` used in impl\n+\n+error[E0185]: method `from` has a `&self` declaration in the impl, but not in the trait\n+  --> $DIR/issue-48276.rs:30:5\n+   |\n+LL |     fn from(&self) -> B {\n+   |     ^^^^^^^^^^^^^^^^^^^ `&self` used in impl\n+   |\n+   = note: `from` from trait: `fn(T) -> Self`\n+\n+error[E0185]: method `from` has a `&self` declaration in the impl, but not in the trait\n+  --> $DIR/issue-48276.rs:37:5\n+   |\n+LL |     fn from(&self) -> &'static str {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&self` used in impl\n+   |\n+   = note: `from` from trait: `fn(T) -> Self`\n+\n+error: aborting due to 3 previous errors\n+\n+If you want more information on this error, try using \"rustc --explain E0185\""}]}