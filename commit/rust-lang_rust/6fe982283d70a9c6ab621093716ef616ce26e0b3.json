{"sha": "6fe982283d70a9c6ab621093716ef616ce26e0b3", "node_id": "C_kwDOAAsO6NoAKDZmZTk4MjI4M2Q3MGE5YzZhYjYyMTA5MzcxNmVmNjE2Y2UyNmUwYjM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-16T14:53:57Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-16T14:53:57Z"}, "message": "Remove `DefId` from `CrateItem` in favor of a lookup table", "tree": {"sha": "eced1dcae0eb50f6cfe65280a152de260cc6db42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eced1dcae0eb50f6cfe65280a152de260cc6db42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fe982283d70a9c6ab621093716ef616ce26e0b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe982283d70a9c6ab621093716ef616ce26e0b3", "html_url": "https://github.com/rust-lang/rust/commit/6fe982283d70a9c6ab621093716ef616ce26e0b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fe982283d70a9c6ab621093716ef616ce26e0b3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18e305dfca6dfef07478378cb9a673fdba6ac3b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/18e305dfca6dfef07478378cb9a673fdba6ac3b3", "html_url": "https://github.com/rust-lang/rust/commit/18e305dfca6dfef07478378cb9a673fdba6ac3b3"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "5998c8b6500456668e1e3d808f31b86e48304d4c", "filename": "compiler/rustc_smir/src/rustc_internal/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6fe982283d70a9c6ab621093716ef616ce26e0b3/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe982283d70a9c6ab621093716ef616ce26e0b3/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs?ref=6fe982283d70a9c6ab621093716ef616ce26e0b3", "patch": "@@ -3,11 +3,28 @@\n //! For that, we define APIs that will temporarily be public to 3P that exposes rustc internal APIs\n //! until stable MIR is complete.\n \n+use std::sync::RwLock;\n+\n use crate::stable_mir;\n pub use rustc_span::def_id::{CrateNum, DefId};\n \n+static DEF_ID_MAP: RwLock<Vec<DefId>> = RwLock::new(Vec::new());\n+\n pub fn item_def_id(item: &stable_mir::CrateItem) -> DefId {\n-    item.0\n+    DEF_ID_MAP.read().unwrap()[item.0]\n+}\n+\n+pub fn crate_item(did: DefId) -> stable_mir::CrateItem {\n+    // FIXME: this becomes inefficient when we have too many ids\n+    let mut map = DEF_ID_MAP.write().unwrap();\n+    for (i, &d) in map.iter().enumerate() {\n+        if d == did {\n+            return stable_mir::CrateItem(i);\n+        }\n+    }\n+    let id = map.len();\n+    map.push(did);\n+    stable_mir::CrateItem(id)\n }\n \n pub fn crate_num(item: &stable_mir::Crate) -> CrateNum {"}, {"sha": "c17dab6dce06db3659615fa2494c3afeba862771", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fe982283d70a9c6ab621093716ef616ce26e0b3/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe982283d70a9c6ab621093716ef616ce26e0b3/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=6fe982283d70a9c6ab621093716ef616ce26e0b3", "patch": "@@ -7,7 +7,10 @@\n //!\n //! For now, we are developing everything inside `rustc`, thus, we keep this module private.\n \n-use crate::stable_mir::{self};\n+use crate::{\n+    rustc_internal::crate_item,\n+    stable_mir::{self},\n+};\n use rustc_middle::ty::{tls::with, TyCtxt};\n use rustc_span::def_id::{CrateNum, LOCAL_CRATE};\n use tracing::debug;\n@@ -34,9 +37,7 @@ pub fn find_crate(name: &str) -> Option<stable_mir::Crate> {\n \n /// Retrieve all items of the local crate that have a MIR associated with them.\n pub fn all_local_items() -> stable_mir::CrateItems {\n-    with(|tcx| {\n-        tcx.mir_keys(()).iter().map(|item| stable_mir::CrateItem(item.to_def_id())).collect()\n-    })\n+    with(|tcx| tcx.mir_keys(()).iter().map(|item| crate_item(item.to_def_id())).collect())\n }\n \n /// Build a stable mir crate from a given crate number."}, {"sha": "6b3ab620e2d65fc14695c40a4cd45ddff42c64df", "filename": "compiler/rustc_smir/src/stable_mir/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fe982283d70a9c6ab621093716ef616ce26e0b3/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe982283d70a9c6ab621093716ef616ce26e0b3/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs?ref=6fe982283d70a9c6ab621093716ef616ce26e0b3", "patch": "@@ -11,8 +11,6 @@\n //! There shouldn't be any direct references to internal compiler constructs in this module.\n //! If you need an internal construct, consider using `rustc_internal` or `rustc_smir`.\n \n-use crate::rustc_internal;\n-\n /// Use String for now but we should replace it.\n pub type Symbol = String;\n \n@@ -37,7 +35,7 @@ pub struct Crate {\n /// For now, it only stores the item DefId. Use functions inside `rustc_internal` module to\n /// use this item.\n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub struct CrateItem(pub(crate) rustc_internal::DefId);\n+pub struct CrateItem(pub(crate) DefId);\n \n /// Access to the local crate.\n pub fn local_crate() -> Crate {"}]}