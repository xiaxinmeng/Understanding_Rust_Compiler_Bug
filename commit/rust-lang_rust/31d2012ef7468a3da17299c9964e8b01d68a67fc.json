{"sha": "31d2012ef7468a3da17299c9964e8b01d68a67fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZDIwMTJlZjc0NjhhM2RhMTcyOTljOTk2NGU4YjAxZDY4YTY3ZmM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-05-08T14:50:48Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-05-09T08:33:45Z"}, "message": "Adapt some method visibilities in librustc_metadata::cstore.", "tree": {"sha": "0a8ce6402b551027cf6332d5fc8108d2ee5afd49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a8ce6402b551027cf6332d5fc8108d2ee5afd49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31d2012ef7468a3da17299c9964e8b01d68a67fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31d2012ef7468a3da17299c9964e8b01d68a67fc", "html_url": "https://github.com/rust-lang/rust/commit/31d2012ef7468a3da17299c9964e8b01d68a67fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31d2012ef7468a3da17299c9964e8b01d68a67fc/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "295d98069f34dce6f7a88422bfa7fbd0a1425aac", "url": "https://api.github.com/repos/rust-lang/rust/commits/295d98069f34dce6f7a88422bfa7fbd0a1425aac", "html_url": "https://github.com/rust-lang/rust/commit/295d98069f34dce6f7a88422bfa7fbd0a1425aac"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "abecee2277c4b623474014ae23cd78a3a4bc9ca1", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/31d2012ef7468a3da17299c9964e8b01d68a67fc/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d2012ef7468a3da17299c9964e8b01d68a67fc/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=31d2012ef7468a3da17299c9964e8b01d68a67fc", "patch": "@@ -104,15 +104,15 @@ impl CStore {\n \n     /// You cannot use this function to allocate a CrateNum in a thread-safe manner.\n     /// It is currently only used in CrateLoader which is single-threaded code.\n-    pub fn next_crate_num(&self) -> CrateNum {\n+    pub(super) fn next_crate_num(&self) -> CrateNum {\n         CrateNum::new(self.metas.borrow().len() + 1)\n     }\n \n-    pub fn get_crate_data(&self, cnum: CrateNum) -> Lrc<CrateMetadata> {\n+    pub(super) fn get_crate_data(&self, cnum: CrateNum) -> Lrc<CrateMetadata> {\n         self.metas.borrow()[cnum].clone().unwrap()\n     }\n \n-    pub fn set_crate_data(&self, cnum: CrateNum, data: Lrc<CrateMetadata>) {\n+    pub(super) fn set_crate_data(&self, cnum: CrateNum, data: Lrc<CrateMetadata>) {\n         use rustc_data_structures::indexed_vec::Idx;\n         let mut met = self.metas.borrow_mut();\n         while met.len() <= cnum.index() {\n@@ -121,7 +121,7 @@ impl CStore {\n         met[cnum] = Some(data);\n     }\n \n-    pub fn iter_crate_data<I>(&self, mut i: I)\n+    pub(super) fn iter_crate_data<I>(&self, mut i: I)\n         where I: FnMut(CrateNum, &Lrc<CrateMetadata>)\n     {\n         for (k, v) in self.metas.borrow().iter_enumerated() {\n@@ -131,14 +131,16 @@ impl CStore {\n         }\n     }\n \n-    pub fn crate_dependencies_in_rpo(&self, krate: CrateNum) -> Vec<CrateNum> {\n+    pub(super) fn crate_dependencies_in_rpo(&self, krate: CrateNum) -> Vec<CrateNum> {\n         let mut ordering = Vec::new();\n         self.push_dependencies_in_postorder(&mut ordering, krate);\n         ordering.reverse();\n         ordering\n     }\n \n-    pub fn push_dependencies_in_postorder(&self, ordering: &mut Vec<CrateNum>, krate: CrateNum) {\n+    pub(super) fn push_dependencies_in_postorder(&self,\n+                                                 ordering: &mut Vec<CrateNum>,\n+                                                 krate: CrateNum) {\n         if ordering.contains(&krate) {\n             return;\n         }\n@@ -153,7 +155,7 @@ impl CStore {\n         ordering.push(krate);\n     }\n \n-    pub fn do_postorder_cnums_untracked(&self) -> Vec<CrateNum> {\n+    pub(super) fn do_postorder_cnums_untracked(&self) -> Vec<CrateNum> {\n         let mut ordering = Vec::new();\n         for (num, v) in self.metas.borrow().iter_enumerated() {\n             if let &Some(_) = v {\n@@ -163,11 +165,11 @@ impl CStore {\n         return ordering\n     }\n \n-    pub fn add_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId, cnum: CrateNum) {\n+    pub(super) fn add_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId, cnum: CrateNum) {\n         self.extern_mod_crate_map.borrow_mut().insert(emod_id, cnum);\n     }\n \n-    pub fn do_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum> {\n+    pub(super) fn do_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum> {\n         self.extern_mod_crate_map.borrow().get(&emod_id).cloned()\n     }\n }"}]}