{"sha": "3a9609b936a302566b1fc76aded105e13d1a8f43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOTYwOWI5MzZhMzAyNTY2YjFmYzc2YWRlZDEwNWUxM2QxYThmNDM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-09T03:04:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-09T03:04:08Z"}, "message": "Rollup merge of #86142 - m-ou-se:proc-macro-subspan-bound-cloned-cleanup, r=petrochenkov\n\nSimplify proc_macro code using Bound::cloned().", "tree": {"sha": "69d80779afca95855f2879c5c0e011280eee4fff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69d80779afca95855f2879c5c0e011280eee4fff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a9609b936a302566b1fc76aded105e13d1a8f43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwC+oCRBK7hj4Ov3rIwAA6WgIAAz1BP43dYovpIwEJAaH5W/N\nb9mN8iHhBNmbgbrr9DnyROCw+7JksG2I8RF3xxX570daC1Gd14IxGTuR0mXuv5Ij\nPeHeqN3Wz+jZKb+dUiu4b6XRygSaEaTD2vRnUeXkp+pN8Pryq6RO7YfcMn9fBNfC\nDoSMP28yFKfWxJnyv5m5Jtuvy3KdI1K88nKhMYX3jnh6NdKq0hp+DO6+52vF7hEQ\n+0Ct1I0NwyIV2HfS51YapoyqhC9X1IBgO5gKHeg72vEm+EIUloQ24RG1RZqs3ohR\nKqB2v73w5h1C6q8zW60yA3SZyqDIKFpr9NY28TSqHXPa108OhIynEJovaGaGcoU=\n=Yucb\n-----END PGP SIGNATURE-----\n", "payload": "tree 69d80779afca95855f2879c5c0e011280eee4fff\nparent e163e3c0434041dae60c575854758dd68ddb6b16\nparent 58e0889bf58672da36673982de510045557de2c9\nauthor Yuki Okushi <jtitor@2k36.org> 1623207848 +0900\ncommitter GitHub <noreply@github.com> 1623207848 +0900\n\nRollup merge of #86142 - m-ou-se:proc-macro-subspan-bound-cloned-cleanup, r=petrochenkov\n\nSimplify proc_macro code using Bound::cloned().\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a9609b936a302566b1fc76aded105e13d1a8f43", "html_url": "https://github.com/rust-lang/rust/commit/3a9609b936a302566b1fc76aded105e13d1a8f43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a9609b936a302566b1fc76aded105e13d1a8f43/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e163e3c0434041dae60c575854758dd68ddb6b16", "url": "https://api.github.com/repos/rust-lang/rust/commits/e163e3c0434041dae60c575854758dd68ddb6b16", "html_url": "https://github.com/rust-lang/rust/commit/e163e3c0434041dae60c575854758dd68ddb6b16"}, {"sha": "58e0889bf58672da36673982de510045557de2c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/58e0889bf58672da36673982de510045557de2c9", "html_url": "https://github.com/rust-lang/rust/commit/58e0889bf58672da36673982de510045557de2c9"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "26fbf50e2dfdf903f940495dc28a30d3adddc774", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a9609b936a302566b1fc76aded105e13d1a8f43/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9609b936a302566b1fc76aded105e13d1a8f43/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=3a9609b936a302566b1fc76aded105e13d1a8f43", "patch": "@@ -31,6 +31,7 @@\n #![feature(restricted_std)]\n #![feature(rustc_attrs)]\n #![feature(min_specialization)]\n+#![feature(bound_cloned)]\n #![recursion_limit = \"256\"]\n \n #[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n@@ -43,7 +44,7 @@ mod diagnostic;\n pub use diagnostic::{Diagnostic, Level, MultiSpan};\n \n use std::cmp::Ordering;\n-use std::ops::{Bound, RangeBounds};\n+use std::ops::RangeBounds;\n use std::path::PathBuf;\n use std::str::FromStr;\n use std::{error, fmt, iter, mem};\n@@ -1162,16 +1163,7 @@ impl Literal {\n     // was 'c' or whether it was '\\u{63}'.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn subspan<R: RangeBounds<usize>>(&self, range: R) -> Option<Span> {\n-        // HACK(eddyb) something akin to `Option::cloned`, but for `Bound<&T>`.\n-        fn cloned_bound<T: Clone>(bound: Bound<&T>) -> Bound<T> {\n-            match bound {\n-                Bound::Included(x) => Bound::Included(x.clone()),\n-                Bound::Excluded(x) => Bound::Excluded(x.clone()),\n-                Bound::Unbounded => Bound::Unbounded,\n-            }\n-        }\n-\n-        self.0.subspan(cloned_bound(range.start_bound()), cloned_bound(range.end_bound())).map(Span)\n+        self.0.subspan(range.start_bound().cloned(), range.end_bound().cloned()).map(Span)\n     }\n }\n "}]}