{"sha": "a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "node_id": "C_kwDOAAsO6NoAKGExYTc1MGI1YWRjZTA2ZmM3N2IyMmVlMzJlZWNkN2M4M2FkMmQwOTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-17T05:30:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-17T05:30:02Z"}, "message": "Rollup merge of #94030 - ChayimFriedman2:issue-94010, r=petrochenkov\n\nCorrectly mark the span of captured arguments in `format_args!()`\n\nIt should not include the braces, or misspelling suggestions will be wrong.\n\nFixes #94010.", "tree": {"sha": "09c21dda1fc679cc9363d6635abcaf305be0deb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09c21dda1fc679cc9363d6635abcaf305be0deb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiDd1aCRBK7hj4Ov3rIwAAYOUIAKdEOJ3ZkFDcqmkKZPGLyRHa\n0+SjrBvdjBew0QpNfpKW00sCzUgbGf2mlssTdSicwBAo+865Ld2cccPw0yhIgOJC\nJ42qgmZKfs6pDS4P3NXSxw8IxL0xhxCd/WDXb1+ehgAi1pmyogCxr6PaWSoaOD3p\nIgkqPLa+odhQNqQj+MozANwS11DwaIMaScdAUm3aZWIHDU7XrVByJOfU1zNLLwAu\ntHOm+B57wO+9EEsRJP/1GE4n3EWVZdaWPBjDOTAg+QZJh3GYmz5SPobBHhTgwBOH\n1/AXA4lYZaVMIDIHyknEGfuuq/oPQs4gDMie8ntRhmgvpce8QyMLbx7c2QAhmJE=\n=0Zxx\n-----END PGP SIGNATURE-----\n", "payload": "tree 09c21dda1fc679cc9363d6635abcaf305be0deb4\nparent 3e727054ad7671b64bea2a0a8ae97c78c2237ae4\nparent 91adb6ccd693737aaf740bc18bc6f82e3898d322\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645075802 +0100\ncommitter GitHub <noreply@github.com> 1645075802 +0100\n\nRollup merge of #94030 - ChayimFriedman2:issue-94010, r=petrochenkov\n\nCorrectly mark the span of captured arguments in `format_args!()`\n\nIt should not include the braces, or misspelling suggestions will be wrong.\n\nFixes #94010.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "html_url": "https://github.com/rust-lang/rust/commit/a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e727054ad7671b64bea2a0a8ae97c78c2237ae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e727054ad7671b64bea2a0a8ae97c78c2237ae4", "html_url": "https://github.com/rust-lang/rust/commit/3e727054ad7671b64bea2a0a8ae97c78c2237ae4"}, {"sha": "91adb6ccd693737aaf740bc18bc6f82e3898d322", "url": "https://api.github.com/repos/rust-lang/rust/commits/91adb6ccd693737aaf740bc18bc6f82e3898d322", "html_url": "https://github.com/rust-lang/rust/commit/91adb6ccd693737aaf740bc18bc6f82e3898d322"}], "stats": {"total": 179, "additions": 105, "deletions": 74}, "files": [{"sha": "ac37c4973d8709c09bdc8c4f85cfe675e8d7fc44", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -700,11 +700,11 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                                 Some(idx)\n                             }\n                         }\n-                        parse::ArgumentNamed(name) => match args.named_args.get(&name) {\n+                        parse::ArgumentNamed(name, span) => match args.named_args.get(&name) {\n                             Some(&idx) => Some(idx),\n                             None => {\n                                 let msg = format!(\"there is no argument named `{}`\", name);\n-                                ecx.struct_span_err(span, &msg).emit();\n+                                ecx.struct_span_err(template_span.from_inner(span), &msg).emit();\n                                 None\n                             }\n                         },"}, {"sha": "6141d00f69712ab39e35c288bb4be8e8d9e46777", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_parse_format as parse;\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::{InnerSpan, MultiSpan, Span};\n use smallvec::SmallVec;\n \n use std::borrow::Cow;\n@@ -26,7 +26,7 @@ enum ArgumentType {\n enum Position {\n     Exact(usize),\n     Capture(usize),\n-    Named(Symbol),\n+    Named(Symbol, InnerSpan),\n }\n \n struct Context<'a, 'b> {\n@@ -247,13 +247,13 @@ impl<'a, 'b> Context<'a, 'b> {\n         match *p {\n             parse::String(_) => {}\n             parse::NextArgument(ref mut arg) => {\n-                if let parse::ArgumentNamed(s) = arg.position {\n+                if let parse::ArgumentNamed(s, _) = arg.position {\n                     arg.position = parse::ArgumentIs(lookup(s));\n                 }\n-                if let parse::CountIsName(s) = arg.format.width {\n+                if let parse::CountIsName(s, _) = arg.format.width {\n                     arg.format.width = parse::CountIsParam(lookup(s));\n                 }\n-                if let parse::CountIsName(s) = arg.format.precision {\n+                if let parse::CountIsName(s, _) = arg.format.precision {\n                     arg.format.precision = parse::CountIsParam(lookup(s));\n                 }\n             }\n@@ -276,7 +276,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 // it's written second, so it should come after width/precision.\n                 let pos = match arg.position {\n                     parse::ArgumentIs(i) | parse::ArgumentImplicitlyIs(i) => Exact(i),\n-                    parse::ArgumentNamed(s) => Named(s),\n+                    parse::ArgumentNamed(s, span) => Named(s, span),\n                 };\n \n                 let ty = Placeholder(match arg.format.ty {\n@@ -346,8 +346,8 @@ impl<'a, 'b> Context<'a, 'b> {\n             parse::CountIsParam(i) => {\n                 self.verify_arg_type(Exact(i), Count);\n             }\n-            parse::CountIsName(s) => {\n-                self.verify_arg_type(Named(s), Count);\n+            parse::CountIsName(s, span) => {\n+                self.verify_arg_type(Named(s, span), Count);\n             }\n         }\n     }\n@@ -533,7 +533,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 }\n             }\n \n-            Named(name) => {\n+            Named(name, span) => {\n                 match self.names.get(&name) {\n                     Some(&idx) => {\n                         // Treat as positional arg.\n@@ -548,7 +548,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                             self.arg_types.push(Vec::new());\n                             self.arg_unique_types.push(Vec::new());\n                             let span = if self.is_literal {\n-                                *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp)\n+                                self.fmtsp.from_inner(span)\n                             } else {\n                                 self.fmtsp\n                             };\n@@ -559,7 +559,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                         } else {\n                             let msg = format!(\"there is no argument named `{}`\", name);\n                             let sp = if self.is_literal {\n-                                *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp)\n+                                self.fmtsp.from_inner(span)\n                             } else {\n                                 self.fmtsp\n                             };\n@@ -629,7 +629,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             }\n             parse::CountImplied => count(sym::Implied, None),\n             // should never be the case, names are already resolved\n-            parse::CountIsName(_) => panic!(\"should never happen\"),\n+            parse::CountIsName(..) => panic!(\"should never happen\"),\n         }\n     }\n \n@@ -676,7 +676,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n                         // should never be the case, because names are already\n                         // resolved.\n-                        parse::ArgumentNamed(_) => panic!(\"should never happen\"),\n+                        parse::ArgumentNamed(..) => panic!(\"should never happen\"),\n                     }\n                 };\n "}, {"sha": "a6a2cbc277c208c98643d87fb80d82f202f703ad", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -95,7 +95,7 @@ pub enum Position {\n     /// The argument is located at a specific index given in the format\n     ArgumentIs(usize),\n     /// The argument has a name.\n-    ArgumentNamed(Symbol),\n+    ArgumentNamed(Symbol, InnerSpan),\n }\n \n impl Position {\n@@ -147,7 +147,7 @@ pub enum Count {\n     /// The count is specified explicitly.\n     CountIs(usize),\n     /// The count is specified by the argument with the given name.\n-    CountIsName(Symbol),\n+    CountIsName(Symbol, InnerSpan),\n     /// The count is specified by the argument at the given index.\n     CountIsParam(usize),\n     /// The count is implied and cannot be explicitly specified.\n@@ -494,8 +494,11 @@ impl<'a> Parser<'a> {\n             Some(ArgumentIs(i))\n         } else {\n             match self.cur.peek() {\n-                Some(&(_, c)) if rustc_lexer::is_id_start(c) => {\n-                    Some(ArgumentNamed(Symbol::intern(self.word())))\n+                Some(&(start, c)) if rustc_lexer::is_id_start(c) => {\n+                    let word = self.word();\n+                    let end = start + word.len();\n+                    let span = self.to_span_index(start).to(self.to_span_index(end));\n+                    Some(ArgumentNamed(Symbol::intern(word), span))\n                 }\n \n                 // This is an `ArgumentNext`.\n@@ -662,8 +665,9 @@ impl<'a> Parser<'a> {\n             if word.is_empty() {\n                 self.cur = tmp;\n                 (CountImplied, None)\n-            } else if self.consume('$') {\n-                (CountIsName(Symbol::intern(word)), None)\n+            } else if let Some(end) = self.consume_pos('$') {\n+                let span = self.to_span_index(start + 1).to(self.to_span_index(end));\n+                (CountIsName(Symbol::intern(word), span), None)\n             } else {\n                 self.cur = tmp;\n                 (CountImplied, None)"}, {"sha": "6c960fdc72bfd583ab0ffd243829ef8da57103b3", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -221,8 +221,8 @@ fn format_counts() {\n                     fill: None,\n                     align: AlignUnknown,\n                     flags: 0,\n-                    precision: CountIsName(Symbol::intern(\"b\")),\n-                    width: CountIsName(Symbol::intern(\"a\")),\n+                    precision: CountIsName(Symbol::intern(\"b\"), InnerSpan::new(6, 7)),\n+                    width: CountIsName(Symbol::intern(\"a\"), InnerSpan::new(4, 4)),\n                     precision_span: None,\n                     width_span: None,\n                     ty: \"?\","}, {"sha": "b05dbbe898a41d7498f75d5242a341ad81776b80", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -309,23 +309,23 @@ impl<'tcx> OnUnimplementedFormatString {\n                 Piece::String(_) => (), // Normal string, no need to check it\n                 Piece::NextArgument(a) => match a.position {\n                     // `{Self}` is allowed\n-                    Position::ArgumentNamed(s) if s == kw::SelfUpper => (),\n+                    Position::ArgumentNamed(s, _) if s == kw::SelfUpper => (),\n                     // `{ThisTraitsName}` is allowed\n-                    Position::ArgumentNamed(s) if s == name => (),\n+                    Position::ArgumentNamed(s, _) if s == name => (),\n                     // `{from_method}` is allowed\n-                    Position::ArgumentNamed(s) if s == sym::from_method => (),\n+                    Position::ArgumentNamed(s, _) if s == sym::from_method => (),\n                     // `{from_desugaring}` is allowed\n-                    Position::ArgumentNamed(s) if s == sym::from_desugaring => (),\n+                    Position::ArgumentNamed(s, _) if s == sym::from_desugaring => (),\n                     // `{ItemContext}` is allowed\n-                    Position::ArgumentNamed(s) if s == sym::ItemContext => (),\n+                    Position::ArgumentNamed(s, _) if s == sym::ItemContext => (),\n                     // `{integral}` and `{integer}` and `{float}` are allowed\n-                    Position::ArgumentNamed(s)\n+                    Position::ArgumentNamed(s, _)\n                         if s == sym::integral || s == sym::integer_ || s == sym::float =>\n                     {\n                         ()\n                     }\n                     // So is `{A}` if A is a type parameter\n-                    Position::ArgumentNamed(s) => {\n+                    Position::ArgumentNamed(s, _) => {\n                         match generics.params.iter().find(|param| param.name == s) {\n                             Some(_) => (),\n                             None => {\n@@ -392,7 +392,7 @@ impl<'tcx> OnUnimplementedFormatString {\n             .map(|p| match p {\n                 Piece::String(s) => s,\n                 Piece::NextArgument(a) => match a.position {\n-                    Position::ArgumentNamed(s) => match generic_map.get(&s) {\n+                    Position::ArgumentNamed(s, _) => match generic_map.get(&s) {\n                         Some(val) => val,\n                         None if s == name => &trait_str,\n                         None => {"}, {"sha": "11c4e01f4186d8a8371cfb88b36df2382f230bd2", "filename": "src/test/ui/asm/bad-template.aarch64_mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -23,10 +23,10 @@ LL |         asm!(\"{1}\", in(reg) foo);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:36:15\n+  --> $DIR/bad-template.rs:36:16\n    |\n LL |         asm!(\"{a}\");\n-   |               ^^^\n+   |                ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:38:15\n@@ -123,10 +123,10 @@ LL | global_asm!(\"{1}\", const FOO);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:14\n+  --> $DIR/bad-template.rs:63:15\n    |\n LL | global_asm!(\"{a}\");\n-   |              ^^^\n+   |               ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:65:14"}, {"sha": "11c4e01f4186d8a8371cfb88b36df2382f230bd2", "filename": "src/test/ui/asm/bad-template.aarch64_thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -23,10 +23,10 @@ LL |         asm!(\"{1}\", in(reg) foo);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:36:15\n+  --> $DIR/bad-template.rs:36:16\n    |\n LL |         asm!(\"{a}\");\n-   |               ^^^\n+   |                ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:38:15\n@@ -123,10 +123,10 @@ LL | global_asm!(\"{1}\", const FOO);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:14\n+  --> $DIR/bad-template.rs:63:15\n    |\n LL | global_asm!(\"{a}\");\n-   |              ^^^\n+   |               ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:65:14"}, {"sha": "c198e0a69dde18049c4e42121cf37e28e22a771d", "filename": "src/test/ui/asm/bad-template.x86_64_mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -23,10 +23,10 @@ LL |         asm!(\"{1}\", in(reg) foo);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:36:15\n+  --> $DIR/bad-template.rs:36:16\n    |\n LL |         asm!(\"{a}\");\n-   |               ^^^\n+   |                ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:38:15\n@@ -123,10 +123,10 @@ LL | global_asm!(\"{1}\", const FOO);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:14\n+  --> $DIR/bad-template.rs:63:15\n    |\n LL | global_asm!(\"{a}\");\n-   |              ^^^\n+   |               ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:65:14"}, {"sha": "c198e0a69dde18049c4e42121cf37e28e22a771d", "filename": "src/test/ui/asm/bad-template.x86_64_thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -23,10 +23,10 @@ LL |         asm!(\"{1}\", in(reg) foo);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:36:15\n+  --> $DIR/bad-template.rs:36:16\n    |\n LL |         asm!(\"{a}\");\n-   |               ^^^\n+   |                ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:38:15\n@@ -123,10 +123,10 @@ LL | global_asm!(\"{1}\", const FOO);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:14\n+  --> $DIR/bad-template.rs:63:15\n    |\n LL | global_asm!(\"{a}\");\n-   |              ^^^\n+   |               ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:65:14"}, {"sha": "b8e2b2afb38674d6f42f7cbb1936dd11100fe673", "filename": "src/test/ui/fmt/format-args-capture-issue-93378.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -10,10 +10,10 @@ error: invalid reference to positional argument 0 (no arguments were given)\n   --> $DIR/format-args-capture-issue-93378.rs:9:23\n    |\n LL |     println!(\"{a:.n$} {b:.*}\");\n-   |               ------- ^^^--^\n-   |               |          |\n-   |               |          this precision flag adds an extra required argument at position 0, which is why there are 3 arguments expected\n-   |               this parameter corresponds to the precision flag\n+   |                   -   ^^^--^\n+   |                   |      |\n+   |                   |      this precision flag adds an extra required argument at position 0, which is why there are 3 arguments expected\n+   |                   this parameter corresponds to the precision flag\n    |\n    = note: positional arguments are zero-based\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html"}, {"sha": "bd03e9c93ae2a801187a75710abe22e29bb064bb", "filename": "src/test/ui/fmt/format-args-capture-issue-94010.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.rs?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    const FOO: i32 = 123;\n+    println!(\"{foo:X}\");\n+    //~^ ERROR: cannot find value `foo` in this scope\n+    println!(\"{:.foo$}\", 0);\n+    //~^ ERROR: cannot find value `foo` in this scope\n+}"}, {"sha": "ed90dc855360ac18a3656b94296c4dc16e3aef50", "filename": "src/test/ui/fmt/format-args-capture-issue-94010.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.stderr?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -0,0 +1,20 @@\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-issue-94010.rs:3:16\n+   |\n+LL |     const FOO: i32 = 123;\n+   |     --------------------- similarly named constant `FOO` defined here\n+LL |     println!(\"{foo:X}\");\n+   |                ^^^ help: a constant with a similar name exists (notice the capitalization): `FOO`\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-issue-94010.rs:5:18\n+   |\n+LL |     const FOO: i32 = 123;\n+   |     --------------------- similarly named constant `FOO` defined here\n+...\n+LL |     println!(\"{:.foo$}\", 0);\n+   |                  ^^^ help: a constant with a similar name exists (notice the capitalization): `FOO`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "d980e7be273e8547e6568eb47df192fafd3603c0", "filename": "src/test/ui/fmt/format-args-capture-missing-variables.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -7,40 +7,40 @@ LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n    |             formatting specifier missing\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:2:17\n+  --> $DIR/format-args-capture-missing-variables.rs:2:18\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |                 ^^^^^ not found in this scope\n+   |                  ^^^ not found in this scope\n \n error[E0425]: cannot find value `bar` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:2:26\n+  --> $DIR/format-args-capture-missing-variables.rs:2:27\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |                          ^^^^^ not found in this scope\n+   |                           ^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:6:14\n+  --> $DIR/format-args-capture-missing-variables.rs:6:15\n    |\n LL |     format!(\"{foo}\");\n-   |              ^^^^^ not found in this scope\n+   |               ^^^ not found in this scope\n \n error[E0425]: cannot find value `valueb` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:8:23\n+  --> $DIR/format-args-capture-missing-variables.rs:8:24\n    |\n LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n-   |                       ^^^^^^^^ not found in this scope\n+   |                        ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:14:9\n+  --> $DIR/format-args-capture-missing-variables.rs:14:10\n    |\n LL |         {foo}\n-   |         ^^^^^ not found in this scope\n+   |          ^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:19:13\n+  --> $DIR/format-args-capture-missing-variables.rs:19:14\n    |\n LL |     panic!(\"{foo} {bar}\", bar=1);\n-   |             ^^^^^ not found in this scope\n+   |              ^^^ not found in this scope\n \n error: aborting due to 7 previous errors\n "}, {"sha": "3f1f1006713ba46d9ffbdbee1af523e4ddfcb635", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -263,34 +263,34 @@ LL |     println!(\"{:.*}\");\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/ifmt-bad-arg.rs:27:17\n+  --> $DIR/ifmt-bad-arg.rs:27:18\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |                 ^^^^^ not found in this scope\n+   |                  ^^^ not found in this scope\n \n error[E0425]: cannot find value `bar` in this scope\n-  --> $DIR/ifmt-bad-arg.rs:27:26\n+  --> $DIR/ifmt-bad-arg.rs:27:27\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |                          ^^^^^ not found in this scope\n+   |                           ^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/ifmt-bad-arg.rs:31:14\n+  --> $DIR/ifmt-bad-arg.rs:31:15\n    |\n LL |     format!(\"{foo}\");\n-   |              ^^^^^ not found in this scope\n+   |               ^^^ not found in this scope\n \n error[E0425]: cannot find value `valueb` in this scope\n-  --> $DIR/ifmt-bad-arg.rs:45:23\n+  --> $DIR/ifmt-bad-arg.rs:45:24\n    |\n LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n-   |                       ^^^^^^^^ not found in this scope\n+   |                        ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/ifmt-bad-arg.rs:60:9\n+  --> $DIR/ifmt-bad-arg.rs:60:10\n    |\n LL |         {foo}\n-   |         ^^^^^ not found in this scope\n+   |          ^^^ not found in this scope\n \n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:78:32"}, {"sha": "1fa6301ebd73dfcc04f1e555fda3b93ab03204ad", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a750b5adce06fc77b22ee32eecd7c83ad2d090/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=a1a750b5adce06fc77b22ee32eecd7c83ad2d090", "patch": "@@ -453,7 +453,7 @@ impl SimpleFormatArgs {\n                     }\n                 }\n             },\n-            ArgumentNamed(n) => {\n+            ArgumentNamed(n, _) => {\n                 if let Some(x) = self.named.iter_mut().find(|x| x.0 == n) {\n                     match x.1.as_slice() {\n                         // A non-empty format string has been seen already."}]}