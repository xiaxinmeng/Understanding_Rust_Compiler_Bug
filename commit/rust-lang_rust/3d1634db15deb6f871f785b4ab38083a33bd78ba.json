{"sha": "3d1634db15deb6f871f785b4ab38083a33bd78ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMTYzNGRiMTVkZWI2Zjg3MWY3ODViNGFiMzgwODNhMzNiZDc4YmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T17:40:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:14:07Z"}, "message": "Remove all usages of std::vec::vbuf", "tree": {"sha": "a97baceeb5dc1c4144ca2221aaaa48bb0311d01a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a97baceeb5dc1c4144ca2221aaaa48bb0311d01a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d1634db15deb6f871f785b4ab38083a33bd78ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1634db15deb6f871f785b4ab38083a33bd78ba", "html_url": "https://github.com/rust-lang/rust/commit/3d1634db15deb6f871f785b4ab38083a33bd78ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d1634db15deb6f871f785b4ab38083a33bd78ba/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9db0390f913f3839d440b041d26c498e329fb8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9db0390f913f3839d440b041d26c498e329fb8b", "html_url": "https://github.com/rust-lang/rust/commit/f9db0390f913f3839d440b041d26c498e329fb8b"}], "stats": {"total": 66, "additions": 20, "deletions": 46}, "files": [{"sha": "966dd1e05a9f657cdbe22e617f5423f42aa39578", "filename": "src/lib/aio.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Faio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Faio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Faio.rs?ref=3d1634db15deb6f871f785b4ab38083a33bd78ba", "patch": "@@ -1,5 +1,4 @@\n import str::sbuf;\n-import vec::vbuf;\n \n native \"rust\" mod rustrt {\n     type socket;"}, {"sha": "35969a3c8d7b46e2c329ca71ba8f2e2e11246d24", "filename": "src/lib/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=3d1634db15deb6f871f785b4ab38083a33bd78ba", "patch": "@@ -63,7 +63,7 @@ obj FILE_buf_reader(f: os::libc::FILE, res: option::t[@FILE_res]) {\n     fn read(len: uint) -> [u8] {\n         let buf = ~[];\n         ivec::reserve[u8](buf, len);\n-        let read = os::libc_ivec::fread(ivec::to_ptr[u8](buf), 1u, len, f);\n+        let read = os::libc::fread(ivec::to_ptr[u8](buf), 1u, len, f);\n         ivec::unsafe::set_len[u8](buf, read);\n         ret buf;\n     }\n@@ -247,7 +247,7 @@ obj FILE_writer(f: os::libc::FILE, res: option::t[@FILE_res]) {\n     fn write(v: &[u8]) {\n         let len = ivec::len[u8](v);\n         let vbuf = ivec::to_ptr[u8](v);\n-        let nout = os::libc_ivec::fwrite(vbuf, len, 1u, f);\n+        let nout = os::libc::fwrite(vbuf, len, 1u, f);\n         if nout < 1u { log_err \"error dumping buffer\"; }\n     }\n     fn seek(offset: int, whence: seek_style) {\n@@ -269,7 +269,7 @@ obj fd_buf_writer(fd: int, res: option::t[@fd_res]) {\n         let vbuf;\n         while count < len {\n             vbuf = ptr::offset(ivec::to_ptr[u8](v), count);\n-            let nout = os::libc_ivec::write(fd, vbuf, len);\n+            let nout = os::libc::write(fd, vbuf, len);\n             if nout < 0 {\n                 log_err \"error dumping buffer\";\n                 log_err sys::rustrt::last_os_error();"}, {"sha": "868b47471bce68b1b6dea519bace01f518355633", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=3d1634db15deb6f871f785b4ab38083a33bd78ba", "patch": "@@ -1,14 +1,15 @@\n \n import str::sbuf;\n-import vec::vbuf;\n \n \n // FIXME Somehow merge stuff duplicated here and macosx_os.rs. Made difficult\n // by https://github.com/graydon/rust/issues#issue/268\n native \"cdecl\" mod libc = \"\" {\n+    fn read(fd: int, buf: *u8, count: uint) -> int;\n+    fn write(fd: int, buf: *u8, count: uint) -> int;\n+    fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n+    fn fwrite(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n     fn open(s: sbuf, flags: int, mode: uint) -> int;\n-    fn read(fd: int, buf: vbuf, count: uint) -> int;\n-    fn write(fd: int, buf: vbuf, count: uint) -> int;\n     fn close(fd: int) -> int;\n     type FILE;\n     fn fopen(path: sbuf, mode: sbuf) -> FILE;\n@@ -17,8 +18,6 @@ native \"cdecl\" mod libc = \"\" {\n     fn fgetc(f: FILE) -> int;\n     fn ungetc(c: int, f: FILE);\n     fn feof(f: FILE) -> int;\n-    fn fread(buf: vbuf, size: uint, n: uint, f: FILE) -> uint;\n-    fn fwrite(buf: vbuf, size: uint, n: uint, f: FILE) -> uint;\n     fn fseek(f: FILE, offset: int, whence: int) -> int;\n     fn ftell(f: FILE) -> int;\n     type dir;\n@@ -33,13 +32,6 @@ native \"cdecl\" mod libc = \"\" {\n     fn waitpid(pid: int, status: &mutable int, options: int) -> int;\n }\n \n-native \"cdecl\" mod libc_ivec = \"\" {\n-    fn read(fd: int, buf: *u8, count: uint) -> int;\n-    fn write(fd: int, buf: *u8, count: uint) -> int;\n-    fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n-    fn fwrite(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n-}\n-\n mod libc_constants {\n     fn O_RDONLY() -> int { ret 0; }\n     fn O_WRONLY() -> int { ret 1; }"}, {"sha": "ba79eddcfc22e6b4ea640c5a076bfe4a4a89318c", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=3d1634db15deb6f871f785b4ab38083a33bd78ba", "patch": "@@ -1,11 +1,12 @@\n \n import str::sbuf;\n-import vec::vbuf;\n \n native \"cdecl\" mod libc = \"\" {\n+    fn read(fd: int, buf: *u8, count: uint) -> int;\n+    fn write(fd: int, buf: *u8, count: uint) -> int;\n+    fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n+    fn fwrite(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n     fn open(s: sbuf, flags: int, mode: uint) -> int;\n-    fn read(fd: int, buf: vbuf, count: uint) -> int;\n-    fn write(fd: int, buf: vbuf, count: uint) -> int;\n     fn close(fd: int) -> int;\n     type FILE;\n     fn fopen(path: sbuf, mode: sbuf) -> FILE;\n@@ -14,8 +15,6 @@ native \"cdecl\" mod libc = \"\" {\n     fn fgetc(f: FILE) -> int;\n     fn ungetc(c: int, f: FILE);\n     fn feof(f: FILE) -> int;\n-    fn fread(buf: vbuf, size: uint, n: uint, f: FILE) -> uint;\n-    fn fwrite(buf: vbuf, size: uint, n: uint, f: FILE) -> uint;\n     fn fseek(f: FILE, offset: int, whence: int) -> int;\n     fn ftell(f: FILE) -> int;\n     type dir;\n@@ -30,13 +29,6 @@ native \"cdecl\" mod libc = \"\" {\n     fn waitpid(pid: int, status: &mutable int, options: int) -> int;\n }\n \n-native \"cdecl\" mod libc_ivec = \"\" {\n-    fn read(fd: int, buf: *u8, count: uint) -> int;\n-    fn write(fd: int, buf: *u8, count: uint) -> int;\n-    fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n-    fn fwrite(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n-}\n-\n mod libc_constants {\n     fn O_RDONLY() -> int { ret 0; }\n     fn O_WRONLY() -> int { ret 1; }"}, {"sha": "72e34ac1970da6103dcd3e5d930497c26715b35f", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=3d1634db15deb6f871f785b4ab38083a33bd78ba", "patch": "@@ -1,6 +1,5 @@\n \n import str::sbuf;\n-import vec::vbuf;\n \n export program;\n export run_program;"}, {"sha": "cfd03dfce850baab1f16817309f915e6a5c6b62b", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=3d1634db15deb6f871f785b4ab38083a33bd78ba", "patch": "@@ -1,11 +1,12 @@\n \n import str::sbuf;\n-import vec::vbuf;\n \n native \"cdecl\" mod libc = \"\" {\n+    fn read(fd: int, buf: *u8, count: uint) -> int;\n+    fn write(fd: int, buf: *u8, count: uint) -> int;\n+    fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n+    fn fwrite(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n     fn open(s: sbuf, flags: int, mode: uint) -> int = \"_open\";\n-    fn read(fd: int, buf: vbuf, count: uint) -> int = \"_read\";\n-    fn write(fd: int, buf: vbuf, count: uint) -> int = \"_write\";\n     fn close(fd: int) -> int = \"_close\";\n     type FILE;\n     fn fopen(path: sbuf, mode: sbuf) -> FILE;\n@@ -14,20 +15,11 @@ native \"cdecl\" mod libc = \"\" {\n     fn fgetc(f: FILE) -> int;\n     fn ungetc(c: int, f: FILE);\n     fn feof(f: FILE) -> int;\n-    fn fread(buf: vbuf, size: uint, n: uint, f: FILE) -> uint;\n-    fn fwrite(buf: vbuf, size: uint, n: uint, f: FILE) -> uint;\n     fn fseek(f: FILE, offset: int, whence: int) -> int;\n     fn ftell(f: FILE) -> int;\n     fn _pipe(fds: *mutable int, size: uint, mode: int) -> int;\n }\n \n-native \"cdecl\" mod libc_ivec = \"\" {\n-    fn read(fd: int, buf: *u8, count: uint) -> int;\n-    fn write(fd: int, buf: *u8, count: uint) -> int;\n-    fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n-    fn fwrite(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n-}\n-\n mod libc_constants {\n     fn O_RDONLY() -> int { ret 0; }\n     fn O_WRONLY() -> int { ret 1; }"}, {"sha": "8d34414cc0773b1ad88d9eb4fa10bdee66e12837", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=3d1634db15deb6f871f785b4ab38083a33bd78ba", "patch": "@@ -186,10 +186,10 @@ mod test_native_items {\n         #[attr];\n \n         #[attr]\n-        type vbuf;\n+        type sbuf;\n \n         #[attr]\n-        fn vec_len[T](v: vec[T]) -> uint;\n+        fn str_buf(s: str) -> sbuf;\n     }\n }\n "}, {"sha": "e5fe1a1d514919dec9f1a6746b97b9152a4fc341", "filename": "src/test/run-pass/native2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Ftest%2Frun-pass%2Fnative2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1634db15deb6f871f785b4ab38083a33bd78ba/src%2Ftest%2Frun-pass%2Fnative2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative2.rs?ref=3d1634db15deb6f871f785b4ab38083a33bd78ba", "patch": "@@ -1,16 +1,16 @@\n \n \n native \"rust\" mod rustrt {\n-    type vbuf;\n-    fn vec_buf[T](v: vec[T], offset: uint) -> vbuf;\n+    type sbuf;\n+    fn str_buf(s: str) -> sbuf;\n }\n \n native \"rust\" mod bar = \"\" { }\n \n native \"cdecl\" mod zed = \"\" { }\n \n native \"cdecl\" mod libc = \"\" {\n-    fn write(fd: int, buf: rustrt::vbuf, count: uint) -> int;\n+    fn write(fd: int, buf: *u8, count: uint) -> int;\n }\n \n native \"cdecl\" mod baz = \"\" { }"}]}