{"sha": "fedab39011e1225b580f5afce8607c8eedad77e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZGFiMzkwMTFlMTIyNWI1ODBmNWFmY2U4NjA3YzhlZWRhZDc3ZTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-27T15:48:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-27T15:48:22Z"}, "message": "Merge pull request #3350 from edwin0cheng/give-up-hover-in-builtin-macro\n\nIgnore hover on builtin macro", "tree": {"sha": "b65e2b8b20f490b6d634b52553cdc527cea610d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b65e2b8b20f490b6d634b52553cdc527cea610d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fedab39011e1225b580f5afce8607c8eedad77e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeV+TGCRBK7hj4Ov3rIwAAdHIIABXgJoTPRHV0EuIFTliZsB28\ngD5ehM/SHJAvs6zGLIyAmIYgDvqLEoT+H5z6IbSG4Ul861h6aB63+Znp1kykbV4f\nW1RSuozvNaSVTVAxkKzrokwm8OmtICuOgTVQIUtwBxmwAnBlMZTrr5m3Gqy+qWRm\ndEKhjSbV2gZMSZ9NjYgQ4K7jB5BmWZSXNYO3ftNy3qjC9dG2VlyAUT7GaLwsGoGP\n5IEFon+KYMscnJEvKQfNTp+mmUP5mJrjw9jjNC31sUqIylSIyWA8TnAMKfcuDC3r\nEYevPgKJozpfuk6ertouB2fdwiSBSEFQLEmal3IxzkHN4+ALdSxkoQlD9Q3hyAo=\n=k1Rg\n-----END PGP SIGNATURE-----\n", "payload": "tree b65e2b8b20f490b6d634b52553cdc527cea610d0\nparent de492d439f0cda73fe2d9b25e4d9f028f70eb095\nparent c42bbc5e37dee8b1de309a6dd5b892651de4b676\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1582818502 +0100\ncommitter GitHub <noreply@github.com> 1582818502 +0100\n\nMerge pull request #3350 from edwin0cheng/give-up-hover-in-builtin-macro\n\nIgnore hover on builtin macro"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fedab39011e1225b580f5afce8607c8eedad77e1", "html_url": "https://github.com/rust-lang/rust/commit/fedab39011e1225b580f5afce8607c8eedad77e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fedab39011e1225b580f5afce8607c8eedad77e1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de492d439f0cda73fe2d9b25e4d9f028f70eb095", "url": "https://api.github.com/repos/rust-lang/rust/commits/de492d439f0cda73fe2d9b25e4d9f028f70eb095", "html_url": "https://github.com/rust-lang/rust/commit/de492d439f0cda73fe2d9b25e4d9f028f70eb095"}, {"sha": "c42bbc5e37dee8b1de309a6dd5b892651de4b676", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42bbc5e37dee8b1de309a6dd5b892651de4b676", "html_url": "https://github.com/rust-lang/rust/commit/c42bbc5e37dee8b1de309a6dd5b892651de4b676"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "dfa0f1d973c0a11d9a566e63a717386f6792138c", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fedab39011e1225b580f5afce8607c8eedad77e1/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedab39011e1225b580f5afce8607c8eedad77e1/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=fedab39011e1225b580f5afce8607c8eedad77e1", "patch": "@@ -174,6 +174,12 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         .ancestors()\n         .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())?;\n \n+    // if this node is a MACRO_CALL, it means that `descend_into_macros` is failed to resolve.\n+    // (e.g expanding a builtin macro). So we give up here.\n+    if node.kind() == MACRO_CALL {\n+        return None;\n+    }\n+\n     // FIXME: Currently `hover::typeof` do not work inside\n     // macro expansion such that if the hover range is pointing to\n     // a string literal, the following type_of will return None.\n@@ -801,6 +807,25 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n     }\n \n+    #[test]\n+    fn test_hover_through_literal_string_in_builtin_macro() {\n+        check_hover_no_result(\n+            r#\"\n+            //- /lib.rs            \n+            #[rustc_builtin_macro]\n+            macro_rules! assert {\n+                ($cond:expr) => {{ /* compiler built-in */ }};\n+                ($cond:expr,) => {{ /* compiler built-in */ }};\n+                ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};\n+            }        \n+\n+            fn foo() {\n+                assert!(\"hel<|>lo\");\n+            }\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_hover_non_ascii_space_doc() {\n         check_hover_result("}]}