{"sha": "7c1e62d9628365530de69aeef86e30bd0b8a9604", "node_id": "C_kwDOAAsO6NoAKDdjMWU2MmQ5NjI4MzY1NTMwZGU2OWFlZWY4NmUzMGJkMGI4YTk2MDQ", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-10-12T20:51:44Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-11-10T18:48:29Z"}, "message": "Added `clippy::version` attribute as lint metadata", "tree": {"sha": "ad4fa2644ddf03dce221959910a964254137503f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad4fa2644ddf03dce221959910a964254137503f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c1e62d9628365530de69aeef86e30bd0b8a9604", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmGME/0ACgkQ/Ny/Ka9k\n1gEnJw/9GjK+J95kmKbXF3rGPmhonjdmHGNsxBQ1/CGFGtKkQP128AsU3QoXeG9U\nWdXfyLyGwXqNaR8qzuwu9F/1u9W5TylfldobPx20or7TRFFp3iHmfInOkuBl33K1\neW+/owZaZdSZquBfty56wI1fQJcYXPTBRg3pV2QzoSnSNXqXy0DF+Y1rKMXoOZwA\nzCza500+9DOd5IUnH7DRnk+8cxAqqtYP3/Zmpa0wUKnkOrPaaCXibKpNDGNycnTx\n34cZSHxB3MQULcJzHRYGyDUBNC4rNEct2z15kh7BD4tAXlCOThkEclXaXoLTURti\nS7+MvdVuOKf2Uvm8NoCrjqpjo3ojsuj/+ETkTxO0ZF6xamKiehYp9Zyw53Wa+HDY\nTcZ2/d8ZclWsnXaEE1yWs/xbV8A+RzsL/vqc+IuSL4N5weILXFGK6Zc77p9AZd79\nwJwsuUwRwVlZFPTXKyg/S/axCI9m6F5flHLyYeOFxX9TfeTTuAPZM8RQVJcbLjkK\nKSV6O0dkug3HyfwonReoeDLS5LGn0w3z1ti8fLJNxTuyPbLIgLnGcZDX/GOC54Ug\nbiFiUdZhF8cNFrAlp/Rbh0vnBbSHaGIAK7Z+zolBWC+vu9hGCQEerf93LyM3+A9e\nizBQbf7C8am4TtOewzhEr2XAw1X1DXlpJM1PFkyts7RDX2wQVto=\n=3W3I\n-----END PGP SIGNATURE-----", "payload": "tree ad4fa2644ddf03dce221959910a964254137503f\nparent 2e170357146b37cef8764ada47e4727e237b80b1\nauthor xFrednet <xFrednet@gmail.com> 1634071904 +0200\ncommitter xFrednet <xFrednet@gmail.com> 1636570109 +0100\n\nAdded `clippy::version` attribute as lint metadata\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1e62d9628365530de69aeef86e30bd0b8a9604", "html_url": "https://github.com/rust-lang/rust/commit/7c1e62d9628365530de69aeef86e30bd0b8a9604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c1e62d9628365530de69aeef86e30bd0b8a9604/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e170357146b37cef8764ada47e4727e237b80b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e170357146b37cef8764ada47e4727e237b80b1", "html_url": "https://github.com/rust-lang/rust/commit/2e170357146b37cef8764ada47e4727e237b80b1"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "d7a023fada2fda1bcd0dc2a7ede63d08a005d451", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7c1e62d9628365530de69aeef86e30bd0b8a9604/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1e62d9628365530de69aeef86e30bd0b8a9604/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=7c1e62d9628365530de69aeef86e30bd0b8a9604", "patch": "@@ -116,6 +116,8 @@ const DEPRECATED_LINT_TYPE: [&str; 3] = [\"clippy_lints\", \"deprecated_lints\", \"Cl\n const APPLICABILITY_NAME_INDEX: usize = 2;\n /// This applicability will be set for unresolved applicability values.\n const APPLICABILITY_UNRESOLVED_STR: &str = \"Unresolved\";\n+/// The version that will be displayed if none has been defined\n+const VERION_DEFAULT_STR: &str = \"Unknown\";\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -144,6 +146,7 @@ declare_clippy_lint! {\n     ///     \"docs\": \" ### What it does\\nCollects metadata about clippy lints for the website. [...] \"\n     /// }\n     /// ```\n+    #[clippy::version = \"0.1.56\"]\n     pub INTERNAL_METADATA_COLLECTOR,\n     internal_warn,\n     \"A busy bee collection metadata about lints\"\n@@ -215,18 +218,27 @@ struct LintMetadata {\n     group: String,\n     level: String,\n     docs: String,\n+    version: String,\n     /// This field is only used in the output and will only be\n     /// mapped shortly before the actual output.\n     applicability: Option<ApplicabilityInfo>,\n }\n \n impl LintMetadata {\n-    fn new(id: String, id_span: SerializableSpan, group: String, level: &'static str, docs: String) -> Self {\n+    fn new(\n+        id: String,\n+        id_span: SerializableSpan,\n+        group: String,\n+        level: &'static str,\n+        version: String,\n+        docs: String,\n+    ) -> Self {\n         Self {\n             id,\n             id_span,\n             group,\n             level: level.to_string(),\n+            version,\n             docs,\n             applicability: None,\n         }\n@@ -410,12 +422,14 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                     if let Some(configuration_section) = self.get_lint_configs(&lint_name) {\n                         docs.push_str(&configuration_section);\n                     }\n+                    let version = get_lint_version(cx, item);\n \n                     self.lints.push(LintMetadata::new(\n                         lint_name,\n                         SerializableSpan::from_item(cx, item),\n                         group,\n                         level,\n+                        version,\n                         docs,\n                     ));\n                 }\n@@ -429,11 +443,14 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                 // Metadata the little we can get from a deprecated lint\n                 if let Some(docs) = extract_attr_docs_or_lint(cx, item);\n                 then {\n+                    let version = get_lint_version(cx, item);\n+\n                     self.lints.push(LintMetadata::new(\n                         lint_name,\n                         SerializableSpan::from_item(cx, item),\n                         DEPRECATED_LINT_GROUP_STR.to_string(),\n                         DEPRECATED_LINT_LEVEL,\n+                        version,\n                         docs,\n                     ));\n                 }\n@@ -552,6 +569,28 @@ fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n     Some(docs)\n }\n \n+fn get_lint_version(cx: &LateContext<'_>, item: &Item<'_>) -> String {\n+    let attrs = cx.tcx.hir().attrs(item.hir_id());\n+    attrs\n+        .iter()\n+        .find_map(|attr| {\n+            if_chain! {\n+                // Identify attribute\n+                if let ast::AttrKind::Normal(ref attr_kind, _) = &attr.kind;\n+                if let [tool_name, attr_name] = &attr_kind.path.segments[..];\n+                if tool_name.ident.name == sym::clippy;\n+                if attr_name.ident.name == sym::version;\n+                if let Some(version) = attr.value_str();\n+                then {\n+                    Some(version.as_str().to_string())\n+                } else {\n+                    None\n+                }\n+            }\n+        })\n+        .unwrap_or_else(|| VERION_DEFAULT_STR.to_string())\n+}\n+\n fn get_lint_group_and_level_or_lint(\n     cx: &LateContext<'_>,\n     lint_name: &str,\n@@ -663,7 +702,6 @@ fn extract_emission_info<'hir>(\n             applicability = resolve_applicability(cx, arg);\n         } else if arg_ty.is_closure() {\n             multi_part |= check_is_multi_part(cx, arg);\n-            // TODO xFrednet 2021-03-01: don't use or_else but rather a comparison\n             applicability = applicability.or_else(|| resolve_applicability(cx, arg));\n         }\n     }"}, {"sha": "7ae9615d560b662095a84fd9e64c6f2070adbee7", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c1e62d9628365530de69aeef86e30bd0b8a9604/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1e62d9628365530de69aeef86e30bd0b8a9604/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=7c1e62d9628365530de69aeef86e30bd0b8a9604", "patch": "@@ -14,15 +14,14 @@ pub enum DeprecationStatus {\n     None,\n }\n \n+#[rustfmt::skip]\n pub const BUILTIN_ATTRIBUTES: &[(&str, DeprecationStatus)] = &[\n-    (\"author\", DeprecationStatus::None),\n-    (\"cognitive_complexity\", DeprecationStatus::None),\n-    (\n-        \"cyclomatic_complexity\",\n-        DeprecationStatus::Replaced(\"cognitive_complexity\"),\n-    ),\n-    (\"dump\", DeprecationStatus::None),\n-    (\"msrv\", DeprecationStatus::None),\n+    (\"author\",                DeprecationStatus::None),\n+    (\"version\",               DeprecationStatus::None),\n+    (\"cognitive_complexity\",  DeprecationStatus::None),\n+    (\"cyclomatic_complexity\", DeprecationStatus::Replaced(\"cognitive_complexity\")),\n+    (\"dump\",                  DeprecationStatus::None),\n+    (\"msrv\",                  DeprecationStatus::None),\n ];\n \n pub struct LimitStack {"}]}