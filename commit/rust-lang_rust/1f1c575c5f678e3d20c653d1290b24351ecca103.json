{"sha": "1f1c575c5f678e3d20c653d1290b24351ecca103", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMWM1NzVjNWY2NzhlM2QyMGM2NTNkMTI5MGIyNDM1MWVjY2ExMDM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-07T05:59:27Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-13T01:54:43Z"}, "message": "Make the 'a lifetime on TyCtxt useless", "tree": {"sha": "6ed06aab280de0a15570ba787b4e1f96d5296cf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ed06aab280de0a15570ba787b4e1f96d5296cf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f1c575c5f678e3d20c653d1290b24351ecca103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f1c575c5f678e3d20c653d1290b24351ecca103", "html_url": "https://github.com/rust-lang/rust/commit/1f1c575c5f678e3d20c653d1290b24351ecca103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f1c575c5f678e3d20c653d1290b24351ecca103/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0076f58d5333f24f709aa46b4bad760ffb51b9b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0076f58d5333f24f709aa46b4bad760ffb51b9b0", "html_url": "https://github.com/rust-lang/rust/commit/0076f58d5333f24f709aa46b4bad760ffb51b9b0"}], "stats": {"total": 98, "additions": 51, "deletions": 47}, "files": [{"sha": "5c97087351b4fb344fc9413cebd5e4cec1d837a7", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=1f1c575c5f678e3d20c653d1290b24351ecca103", "patch": "@@ -37,7 +37,7 @@ use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use ty::fold::TypeFoldable;\n use ty::relate::RelateResult;\n use ty::subst::{Kind, Substs};\n-use ty::{self, GenericParamDefKind, Ty, TyCtxt};\n+use ty::{self, GenericParamDefKind, Ty, TyCtxt, CtxtInterners};\n use ty::{FloatVid, IntVid, TyVid};\n use util::nodemap::FxHashMap;\n \n@@ -471,6 +471,7 @@ impl fmt::Display for FixupError {\n pub struct InferCtxtBuilder<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     global_tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     arena: SyncDroplessArena,\n+    interners: Option<CtxtInterners<'tcx>>,\n     fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n }\n \n@@ -479,6 +480,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n         InferCtxtBuilder {\n             global_tcx: self,\n             arena: SyncDroplessArena::default(),\n+            interners: None,\n             fresh_tables: None,\n         }\n     }\n@@ -519,10 +521,11 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         let InferCtxtBuilder {\n             global_tcx,\n             ref arena,\n+            ref mut interners,\n             ref fresh_tables,\n         } = *self;\n         let in_progress_tables = fresh_tables.as_ref();\n-        global_tcx.enter_local(arena, |tcx| {\n+        global_tcx.enter_local(arena, interners, |tcx| {\n             f(InferCtxt {\n                 tcx,\n                 in_progress_tables,"}, {"sha": "94415315a11b779031b49e4452a1cdbe6a54207d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1f1c575c5f678e3d20c653d1290b24351ecca103", "patch": "@@ -72,6 +72,7 @@ use std::ops::{Deref, Bound};\n use std::iter;\n use std::sync::mpsc;\n use std::sync::Arc;\n+use std::marker::PhantomData;\n use rustc_target::spec::abi;\n use syntax::ast::{self, NodeId};\n use syntax::attr;\n@@ -86,13 +87,15 @@ use hir;\n pub struct AllArenas<'tcx> {\n     pub global: WorkerLocal<GlobalArenas<'tcx>>,\n     pub interner: SyncDroplessArena,\n+    global_ctxt: Option<GlobalCtxt<'tcx>>,\n }\n \n impl<'tcx> AllArenas<'tcx> {\n     pub fn new() -> Self {\n         AllArenas {\n             global: WorkerLocal::new(|_| GlobalArenas::default()),\n             interner: SyncDroplessArena::default(),\n+            global_ctxt: None,\n         }\n     }\n }\n@@ -869,12 +872,13 @@ pub struct FreeRegionInfo {\n /// [rustc guide]: https://rust-lang.github.io/rustc-guide/ty.html\n #[derive(Copy, Clone)]\n pub struct TyCtxt<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    gcx: &'a GlobalCtxt<'gcx>,\n-    interners: &'a CtxtInterners<'tcx>\n+    gcx: &'gcx GlobalCtxt<'gcx>,\n+    interners: &'tcx CtxtInterners<'tcx>,\n+    dummy: PhantomData<&'a ()>,\n }\n \n-impl<'a, 'gcx, 'tcx> Deref for TyCtxt<'a, 'gcx, 'tcx> {\n-    type Target = &'a GlobalCtxt<'gcx>;\n+impl<'gcx> Deref for TyCtxt<'_, 'gcx, '_> {\n+    type Target = &'gcx GlobalCtxt<'gcx>;\n     #[inline(always)]\n     fn deref(&self) -> &Self::Target {\n         &self.gcx\n@@ -964,10 +968,11 @@ pub struct GlobalCtxt<'tcx> {\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Get the global TyCtxt.\n     #[inline]\n-    pub fn global_tcx(self) -> TyCtxt<'a, 'gcx, 'gcx> {\n+    pub fn global_tcx(self) -> TyCtxt<'gcx, 'gcx, 'gcx> {\n         TyCtxt {\n             gcx: self.gcx,\n             interners: &self.gcx.global_interners,\n+            dummy: PhantomData,\n         }\n     }\n \n@@ -1105,7 +1110,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   cstore: &'tcx CrateStoreDyn,\n                                   local_providers: ty::query::Providers<'tcx>,\n                                   extern_providers: ty::query::Providers<'tcx>,\n-                                  arenas: &'tcx AllArenas<'tcx>,\n+                                  arenas: &'tcx mut AllArenas<'tcx>,\n                                   resolutions: ty::Resolutions,\n                                   hir: hir_map::Map<'tcx>,\n                                   on_disk_query_result_cache: query::OnDiskCache<'tcx>,\n@@ -1166,7 +1171,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                      Lrc::new(StableVec::new(v)));\n         }\n \n-        let gcx = &GlobalCtxt {\n+        arenas.global_ctxt = Some(GlobalCtxt {\n             sess: s,\n             cstore,\n             global_arenas: &arenas.global,\n@@ -1209,7 +1214,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n             tx_to_llvm_workers: Lock::new(tx),\n             output_filenames: Arc::new(output_filenames.clone()),\n-        };\n+        });\n+\n+        let gcx = arenas.global_ctxt.as_ref().unwrap();\n \n         sync::assert_send_val(&gcx);\n \n@@ -1609,20 +1616,23 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     }\n }\n \n-impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {\n+impl<'gcx> GlobalCtxt<'gcx> {\n     /// Call the closure with a local `TyCtxt` using the given arena.\n-    pub fn enter_local<F, R>(\n-        &self,\n+    pub fn enter_local<'tcx, F, R>(\n+        &'gcx self,\n         arena: &'tcx SyncDroplessArena,\n+        interners: &'tcx mut Option<CtxtInterners<'tcx>>,\n         f: F\n     ) -> R\n     where\n-        F: for<'a> FnOnce(TyCtxt<'a, 'gcx, 'tcx>) -> R\n+        F: FnOnce(TyCtxt<'tcx, 'gcx, 'tcx>) -> R,\n+        'gcx: 'tcx,\n     {\n-        let interners = CtxtInterners::new(arena);\n+        *interners = Some(CtxtInterners::new(&arena));\n         let tcx = TyCtxt {\n             gcx: self,\n-            interners: &interners,\n+            interners: interners.as_ref().unwrap(),\n+            dummy: PhantomData,\n         };\n         ty::tls::with_related_context(tcx.global_tcx(), |icx| {\n             let new_icx = ty::tls::ImplicitCtxt {\n@@ -1631,8 +1641,8 @@ impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {\n                 layout_depth: icx.layout_depth,\n                 task: icx.task,\n             };\n-            ty::tls::enter_context(&new_icx, |new_icx| {\n-                f(new_icx.tcx)\n+            ty::tls::enter_context(&new_icx, |_| {\n+                f(tcx)\n             })\n         })\n     }\n@@ -1872,6 +1882,7 @@ pub mod tls {\n \n     use std::fmt;\n     use std::mem;\n+    use std::marker::PhantomData;\n     use syntax_pos;\n     use ty::query;\n     use errors::{Diagnostic, TRACK_DIAGNOSTICS};\n@@ -1891,10 +1902,10 @@ pub mod tls {\n     /// you should also have access to an ImplicitCtxt through the functions\n     /// in this module.\n     #[derive(Clone)]\n-    pub struct ImplicitCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n+    pub struct ImplicitCtxt<'a, 'gcx: 'tcx, 'tcx> {\n         /// The current TyCtxt. Initially created by `enter_global` and updated\n         /// by `enter_local` with a new local interner\n-        pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        pub tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n \n         /// The current query job, if any. This is updated by start_job in\n         /// ty::query::plumbing when executing a query\n@@ -2008,7 +2019,7 @@ pub mod tls {\n     /// creating a initial TyCtxt and ImplicitCtxt.\n     /// This happens once per rustc session and TyCtxts only exists\n     /// inside the `f` function.\n-    pub fn enter_global<'gcx, F, R>(gcx: &GlobalCtxt<'gcx>, f: F) -> R\n+    pub fn enter_global<'gcx, F, R>(gcx: &'gcx GlobalCtxt<'gcx>, f: F) -> R\n         where F: for<'a> FnOnce(TyCtxt<'a, 'gcx, 'gcx>) -> R\n     {\n         with_thread_locals(|| {\n@@ -2024,6 +2035,7 @@ pub mod tls {\n             let tcx = TyCtxt {\n                 gcx,\n                 interners: &gcx.global_interners,\n+                dummy: PhantomData,\n             };\n             let icx = ImplicitCtxt {\n                 tcx,\n@@ -2053,6 +2065,7 @@ pub mod tls {\n         let tcx = TyCtxt {\n             gcx,\n             interners: &gcx.global_interners,\n+            dummy: PhantomData,\n         };\n         let icx = ImplicitCtxt {\n             query: None,"}, {"sha": "91e1df3f74b3ab774ca11a082dedb95de7c4e892", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1f1c575c5f678e3d20c653d1290b24351ecca103", "patch": "@@ -82,7 +82,7 @@ pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n \n pub use self::context::{TyCtxt, FreeRegionInfo, GlobalArenas, AllArenas, tls, keep_local};\n-pub use self::context::{Lift, TypeckTables};\n+pub use self::context::{Lift, TypeckTables, CtxtInterners};\n \n pub use self::instance::{Instance, InstanceDef};\n "}, {"sha": "f946ce85adcea9e161f80bf5c9b62dff27fdab4b", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=1f1c575c5f678e3d20c653d1290b24351ecca103", "patch": "@@ -197,7 +197,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n         let r = tls::with_related_context(tcx, move |current_icx| {\n             // Update the ImplicitCtxt to point to our new query job\n             let new_icx = tls::ImplicitCtxt {\n-                tcx,\n+                tcx: tcx.global_tcx(),\n                 query: Some(self.job.clone()),\n                 layout_depth: current_icx.layout_depth,\n                 task: current_icx.task,"}, {"sha": "0f6799710f18e391ec18ad47f46e46b5a19ba76c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1f1c575c5f678e3d20c653d1290b24351ecca103", "patch": "@@ -246,8 +246,6 @@ pub fn compile_input(\n             }\n         }\n \n-        let arenas = AllArenas::new();\n-\n         // Construct the HIR map\n         let hir_map = time(sess, \"indexing hir\", || {\n             hir_map::map_crate(sess, cstore, &mut hir_forest, &defs)\n@@ -263,7 +261,6 @@ pub fn compile_input(\n                     sess,\n                     outdir,\n                     output,\n-                    &arenas,\n                     &cstore,\n                     &hir_map,\n                     &analysis,\n@@ -284,6 +281,8 @@ pub fn compile_input(\n             None\n         };\n \n+        let mut arenas = AllArenas::new();\n+\n         phase_3_run_analysis_passes(\n             &*codegen_backend,\n             control,\n@@ -292,7 +291,7 @@ pub fn compile_input(\n             hir_map,\n             analysis,\n             resolutions,\n-            &arenas,\n+            &mut arenas,\n             &crate_name,\n             &outputs,\n             |tcx, analysis, rx, result| {\n@@ -533,7 +532,6 @@ pub struct CompileState<'a, 'tcx: 'a> {\n     pub output_filenames: Option<&'a OutputFilenames>,\n     pub out_dir: Option<&'a Path>,\n     pub out_file: Option<&'a Path>,\n-    pub arenas: Option<&'tcx AllArenas<'tcx>>,\n     pub expanded_crate: Option<&'a ast::Crate>,\n     pub hir_crate: Option<&'a hir::Crate>,\n     pub hir_map: Option<&'a hir_map::Map<'tcx>>,\n@@ -549,7 +547,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n             session,\n             out_dir: out_dir.as_ref().map(|s| &**s),\n             out_file: None,\n-            arenas: None,\n             krate: None,\n             registry: None,\n             cstore: None,\n@@ -605,7 +602,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n         session: &'tcx Session,\n         out_dir: &'a Option<PathBuf>,\n         out_file: &'a Option<PathBuf>,\n-        arenas: &'tcx AllArenas<'tcx>,\n         cstore: &'tcx CStore,\n         hir_map: &'a hir_map::Map<'tcx>,\n         analysis: &'a ty::CrateAnalysis,\n@@ -617,7 +613,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n     ) -> Self {\n         CompileState {\n             crate_name: Some(crate_name),\n-            arenas: Some(arenas),\n             cstore: Some(cstore),\n             hir_map: Some(hir_map),\n             analysis: Some(analysis),\n@@ -1216,7 +1211,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(\n     hir_map: hir_map::Map<'tcx>,\n     mut analysis: ty::CrateAnalysis,\n     resolutions: Resolutions,\n-    arenas: &'tcx AllArenas<'tcx>,\n+    arenas: &'tcx mut AllArenas<'tcx>,\n     name: &str,\n     output_filenames: &OutputFilenames,\n     f: F,"}, {"sha": "041c8aa2f57aded0dc512a26b2a831a06a35cbe1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=1f1c575c5f678e3d20c653d1290b24351ecca103", "patch": "@@ -911,7 +911,6 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                                                      &state.expanded_crate.take().unwrap(),\n                                                      state.crate_name.unwrap(),\n                                                      ppm,\n-                                                     state.arenas.unwrap(),\n                                                      state.output_filenames.unwrap(),\n                                                      opt_uii.clone(),\n                                                      state.out_file);"}, {"sha": "bc991016bbee5ddf9ff84f0f8df745890bba25dd", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=1f1c575c5f678e3d20c653d1290b24351ecca103", "patch": "@@ -202,7 +202,6 @@ impl PpSourceMode {\n         hir_map: &hir_map::Map<'tcx>,\n         analysis: &ty::CrateAnalysis,\n         resolutions: &Resolutions,\n-        arenas: &'tcx AllArenas<'tcx>,\n         output_filenames: &OutputFilenames,\n         id: &str,\n         f: F\n@@ -228,14 +227,15 @@ impl PpSourceMode {\n             PpmTyped => {\n                 let control = &driver::CompileController::basic();\n                 let codegen_backend = ::get_codegen_backend(sess);\n+                let mut arenas = AllArenas::new();\n                 abort_on_err(driver::phase_3_run_analysis_passes(&*codegen_backend,\n                                                                  control,\n                                                                  sess,\n                                                                  cstore,\n                                                                  hir_map.clone(),\n                                                                  analysis.clone(),\n                                                                  resolutions.clone(),\n-                                                                 arenas,\n+                                                                 &mut arenas,\n                                                                  id,\n                                                                  output_filenames,\n                                                                  |tcx, _, _, _| {\n@@ -977,7 +977,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                                 krate: &ast::Crate,\n                                                 crate_name: &str,\n                                                 ppm: PpMode,\n-                                                arenas: &'tcx AllArenas<'tcx>,\n                                                 output_filenames: &OutputFilenames,\n                                                 opt_uii: Option<UserIdentifiedItem>,\n                                                 ofile: Option<&Path>) {\n@@ -988,7 +987,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                             analysis,\n                             resolutions,\n                             crate_name,\n-                            arenas,\n                             output_filenames,\n                             ppm,\n                             opt_uii,\n@@ -1026,7 +1024,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arenas,\n                                            output_filenames,\n                                            crate_name,\n                                            move |annotation, krate| {\n@@ -1050,7 +1047,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arenas,\n                                            output_filenames,\n                                            crate_name,\n                                            move |_annotation, krate| {\n@@ -1066,7 +1062,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arenas,\n                                            output_filenames,\n                                            crate_name,\n                                            move |annotation, _| {\n@@ -1100,7 +1095,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arenas,\n                                            output_filenames,\n                                            crate_name,\n                                            move |_annotation, _krate| {\n@@ -1130,7 +1124,6 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                        analysis: &ty::CrateAnalysis,\n                                        resolutions: &Resolutions,\n                                        crate_name: &str,\n-                                       arenas: &'tcx AllArenas<'tcx>,\n                                        output_filenames: &OutputFilenames,\n                                        ppm: PpMode,\n                                        uii: Option<UserIdentifiedItem>,\n@@ -1147,14 +1140,15 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n \n     let control = &driver::CompileController::basic();\n     let codegen_backend = ::get_codegen_backend(sess);\n+    let mut arenas = AllArenas::new();\n     abort_on_err(driver::phase_3_run_analysis_passes(&*codegen_backend,\n                                                      control,\n                                                      sess,\n                                                      cstore,\n                                                      hir_map.clone(),\n                                                      analysis.clone(),\n                                                      resolutions.clone(),\n-                                                     arenas,\n+                                                     &mut arenas,\n                                                      crate_name,\n                                                      output_filenames,\n                                                      |tcx, _, _, _| {"}, {"sha": "5b337fbf5bef39a248e50b48d0bbb773803330bb", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=1f1c575c5f678e3d20c653d1290b24351ecca103", "patch": "@@ -151,7 +151,7 @@ fn test_env_with_pool<F>(\n         ).expect(\"phase 2 aborted\")\n     };\n \n-    let arenas = ty::AllArenas::new();\n+    let mut arenas = ty::AllArenas::new();\n     let hir_map = hir_map::map_crate(&sess, &cstore, &mut hir_forest, &defs);\n \n     // Run just enough stuff to build a tcx.\n@@ -168,7 +168,7 @@ fn test_env_with_pool<F>(\n         &cstore,\n         ty::query::Providers::default(),\n         ty::query::Providers::default(),\n-        &arenas,\n+        &mut arenas,\n         resolutions,\n         hir_map,\n         OnDiskCache::new_empty(sess.source_map()),"}, {"sha": "8af9697b312d0bfb451c8dbc3590647890628598", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c575c5f678e3d20c653d1290b24351ecca103/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1f1c575c5f678e3d20c653d1290b24351ecca103", "patch": "@@ -485,7 +485,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             glob_map: if resolver.make_glob_map { Some(resolver.glob_map.clone()) } else { None },\n         };\n \n-        let arenas = AllArenas::new();\n+        let mut arenas = AllArenas::new();\n         let hir_map = hir_map::map_crate(&sess, &*cstore, &mut hir_forest, &defs);\n         let output_filenames = driver::build_output_filenames(&input,\n                                                             &None,\n@@ -501,7 +501,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                                                         hir_map,\n                                                         analysis,\n                                                         resolutions,\n-                                                        &arenas,\n+                                                        &mut arenas,\n                                                         &name,\n                                                         &output_filenames,\n                                                         |tcx, analysis, _, result| {"}]}