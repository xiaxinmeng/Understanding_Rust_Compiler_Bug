{"sha": "687e099b441ff62d6ab69577e28e0eebfa82a186", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4N2UwOTliNDQxZmY2MmQ2YWI2OTU3N2UyOGUwZWViZmE4MmExODY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-22T13:39:32Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-28T12:03:39Z"}, "message": "incr.comp.: Make a bunch of query results encodable.", "tree": {"sha": "2f69e5be22701d79edee47c7bef4df3ff90d3b1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f69e5be22701d79edee47c7bef4df3ff90d3b1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/687e099b441ff62d6ab69577e28e0eebfa82a186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/687e099b441ff62d6ab69577e28e0eebfa82a186", "html_url": "https://github.com/rust-lang/rust/commit/687e099b441ff62d6ab69577e28e0eebfa82a186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/687e099b441ff62d6ab69577e28e0eebfa82a186/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "html_url": "https://github.com/rust-lang/rust/commit/8fbc91cfe1fecfd8534b1b828bb64806a67d9659"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "380f79361e27f5466e669332f0229044891cbf12", "filename": "src/librustc/middle/borrowck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck.rs?ref=687e099b441ff62d6ab69577e28e0eebfa82a186", "patch": "@@ -15,6 +15,7 @@ use util::nodemap::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n \n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct BorrowCheckResult {\n     pub used_mut_nodes: FxHashSet<HirId>,\n }"}, {"sha": "4946ef93c7dde0903d785ed5c021e531e80d3dec", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=687e099b441ff62d6ab69577e28e0eebfa82a186", "patch": "@@ -36,6 +36,7 @@ use std::ops::{Index, IndexMut};\n use std::rc::Rc;\n use std::vec::IntoIter;\n use syntax::ast::{self, Name};\n+use syntax::symbol::InternedString;\n use syntax_pos::Span;\n \n mod cache;\n@@ -1724,21 +1725,21 @@ impl Location {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum UnsafetyViolationKind {\n     General,\n     ExternStatic(ast::NodeId),\n     BorrowPacked(ast::NodeId),\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n-    pub description: &'static str,\n+    pub description: InternedString,\n     pub kind: UnsafetyViolationKind,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct UnsafetyCheckResult {\n     /// Violations that are propagated *upwards* from this function\n     pub violations: Rc<[UnsafetyViolation]>,"}, {"sha": "591d1525c827ab0e91fc0ffd7c7d89257642f15d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=687e099b441ff62d6ab69577e28e0eebfa82a186", "patch": "@@ -2702,7 +2702,7 @@ impl<'tcx> DtorckConstraint<'tcx> {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable)]\n pub struct SymbolName {\n     // FIXME: we don't rely on interning or equality here - better have\n     // this be a `&'tcx str`."}, {"sha": "cb80f602a1c7f72dcb02632980896da0a6f62aab", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=687e099b441ff62d6ab69577e28e0eebfa82a186", "patch": "@@ -17,6 +17,7 @@ use std::slice;\n use bitslice::{BitSlice, Word};\n use bitslice::{bitwise, Union, Subtract, Intersect};\n use indexed_vec::Idx;\n+use rustc_serialize;\n \n /// Represents a set (or packed family of sets), of some element type\n /// E, where each E is identified by some unique index type `T`.\n@@ -35,6 +36,26 @@ impl<T: Idx> Clone for IdxSetBuf<T> {\n     }\n }\n \n+impl<T: Idx> rustc_serialize::Encodable for IdxSetBuf<T> {\n+    fn encode<E: rustc_serialize::Encoder>(&self,\n+                                     encoder: &mut E)\n+                                     -> Result<(), E::Error> {\n+        self.bits.encode(encoder)\n+    }\n+}\n+\n+impl<T: Idx> rustc_serialize::Decodable for IdxSetBuf<T> {\n+    fn decode<D: rustc_serialize::Decoder>(d: &mut D) -> Result<IdxSetBuf<T>, D::Error> {\n+        let words: Vec<Word> = rustc_serialize::Decodable::decode(d)?;\n+\n+        Ok(IdxSetBuf {\n+            _pd: PhantomData,\n+            bits: words,\n+        })\n+    }\n+}\n+\n+\n // pnkfelix wants to have this be `IdxSet<T>([Word]) and then pass\n // around `&mut IdxSet<T>` or `&IdxSet<T>`.\n //"}, {"sha": "fefb1590bd3f94e0077866f9e42aa4db9546bb81", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=687e099b441ff62d6ab69577e28e0eebfa82a186", "patch": "@@ -20,6 +20,7 @@ use rustc::mir::*;\n use rustc::mir::visit::{LvalueContext, Visitor};\n \n use syntax::ast;\n+use syntax::symbol::Symbol;\n \n use std::rc::Rc;\n use util;\n@@ -145,7 +146,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     self.visibility_scope_info[source_info.scope].lint_root;\n                 self.register_violations(&[UnsafetyViolation {\n                     source_info,\n-                    description: \"borrow of packed field\",\n+                    description: Symbol::intern(\"borrow of packed field\").as_str(),\n                     kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n                 }], &[]);\n             }\n@@ -209,7 +210,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         self.visibility_scope_info[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n-                        description: \"use of extern static\",\n+                        description: Symbol::intern(\"use of extern static\").as_str(),\n                         kind: UnsafetyViolationKind::ExternStatic(lint_root)\n                     }], &[]);\n                 }\n@@ -225,7 +226,9 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n-            source_info, description, kind: UnsafetyViolationKind::General\n+            source_info,\n+            description: Symbol::intern(description).as_str(),\n+            kind: UnsafetyViolationKind::General,\n         }], &[]);\n     }\n \n@@ -433,15 +436,15 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                 struct_span_err!(\n                     tcx.sess, source_info.span, E0133,\n                     \"{} requires unsafe function or block\", description)\n-                    .span_label(source_info.span, description)\n+                    .span_label(source_info.span, &description[..])\n                     .emit();\n             }\n             UnsafetyViolationKind::ExternStatic(lint_node_id) => {\n                 tcx.lint_node(SAFE_EXTERN_STATICS,\n                               lint_node_id,\n                               source_info.span,\n                               &format!(\"{} requires unsafe function or \\\n-                                        block (error E0133)\", description));\n+                                        block (error E0133)\", &description[..]));\n             }\n             UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n@@ -451,7 +454,7 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                                   lint_node_id,\n                                   source_info.span,\n                                   &format!(\"{} requires unsafe function or \\\n-                                            block (error E0133)\", description));\n+                                            block (error E0133)\", &description[..]));\n                 }\n             }\n         }"}, {"sha": "d8ae9729224d758820e0c1eb70c56bd79342b03e", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687e099b441ff62d6ab69577e28e0eebfa82a186/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=687e099b441ff62d6ab69577e28e0eebfa82a186", "patch": "@@ -14,6 +14,7 @@ use std::hash::{Hash, BuildHasher};\n \n use {Decodable, Encodable, Decoder, Encoder};\n use std::collections::{LinkedList, VecDeque, BTreeMap, BTreeSet, HashMap, HashSet};\n+use std::rc::Rc;\n \n impl<\n     T: Encodable\n@@ -194,3 +195,26 @@ impl<T, S> Decodable for HashSet<T, S>\n         })\n     }\n }\n+\n+impl<T: Encodable> Encodable for Rc<[T]> {\n+    fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {\n+        s.emit_seq(self.len(), |s| {\n+            for (index, e) in self.iter().enumerate() {\n+                s.emit_seq_elt(index, |s| e.encode(s))?;\n+            }\n+            Ok(())\n+        })\n+    }\n+}\n+\n+impl<T: Decodable> Decodable for Rc<[T]> {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Rc<[T]>, D::Error> {\n+        d.read_seq(|d, len| {\n+            let mut vec = Vec::with_capacity(len);\n+            for index in 0..len {\n+                vec.push(d.read_seq_elt(index, |d| Decodable::decode(d))?);\n+            }\n+            Ok(vec.into())\n+        })\n+    }\n+}"}]}