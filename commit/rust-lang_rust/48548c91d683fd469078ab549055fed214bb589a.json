{"sha": "48548c91d683fd469078ab549055fed214bb589a", "node_id": "C_kwDOAAsO6NoAKDQ4NTQ4YzkxZDY4M2ZkNDY5MDc4YWI1NDkwNTVmZWQyMTRiYjU4OWE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-10-07T14:24:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-07T14:24:50Z"}, "message": "Rollup merge of #89477 - Nicholas-Baron:compute_diff_rs, r=Mark-Simulacrum\n\nMove items related to computing diffs to a separate file\n\nWork towards #89475.", "tree": {"sha": "df415bc8e330370e9e8b709116ce4ffb02797ff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df415bc8e330370e9e8b709116ce4ffb02797ff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48548c91d683fd469078ab549055fed214bb589a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXwMyCRBK7hj4Ov3rIwAAiv8IABPGBVRQMeGk4M9tYBRJS4da\n/GDj0DJCGvG/DJ5TW3VwQL1QeKADvY0HDAJcemtEYON/yhRRjAPeZTB81lnl27ZG\noNXHRVqE2Trqpm/hhHlupY2aRyJBYmxIgboGhIteR87AyVPy0MmP8Z2tc984syMe\n05yuaKYby3fdwv1QKBWjVIfTT7F3pnYrHyeXN1JJgWyUlz7GF6PS3W0wkA/qMTE5\nyhIAC1ylGG3b4v67E08Jxe9GzFXHDq4qOIT8YGC/LFB6Vcwm0WUYHWRJ8VEa5MQg\nyCNTftoG/QLTQfeuSgFv5p0Z9D0qelMEmM6lROWJHAeNcb3u/z1Af6vv19/upG4=\n=Fq1+\n-----END PGP SIGNATURE-----\n", "payload": "tree df415bc8e330370e9e8b709116ce4ffb02797ff4\nparent ab276b82b020b5c68d4246641203faba6295dc69\nparent 3760c91252b1a6697fbd05e98e72c7e78493a72e\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1633616690 +0200\ncommitter GitHub <noreply@github.com> 1633616690 +0200\n\nRollup merge of #89477 - Nicholas-Baron:compute_diff_rs, r=Mark-Simulacrum\n\nMove items related to computing diffs to a separate file\n\nWork towards #89475.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48548c91d683fd469078ab549055fed214bb589a", "html_url": "https://github.com/rust-lang/rust/commit/48548c91d683fd469078ab549055fed214bb589a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48548c91d683fd469078ab549055fed214bb589a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab276b82b020b5c68d4246641203faba6295dc69", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab276b82b020b5c68d4246641203faba6295dc69", "html_url": "https://github.com/rust-lang/rust/commit/ab276b82b020b5c68d4246641203faba6295dc69"}, {"sha": "3760c91252b1a6697fbd05e98e72c7e78493a72e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3760c91252b1a6697fbd05e98e72c7e78493a72e", "html_url": "https://github.com/rust-lang/rust/commit/3760c91252b1a6697fbd05e98e72c7e78493a72e"}], "stats": {"total": 312, "additions": 170, "deletions": 142}, "files": [{"sha": "92c80c27de03bea3ced5f5b696ea0e856ace9e72", "filename": "src/tools/compiletest/src/compute_diff.rs", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/48548c91d683fd469078ab549055fed214bb589a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48548c91d683fd469078ab549055fed214bb589a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs?ref=48548c91d683fd469078ab549055fed214bb589a", "patch": "@@ -0,0 +1,157 @@\n+use std::collections::VecDeque;\n+use std::fs::{File, FileType};\n+use std::path::Path;\n+\n+#[derive(Debug, PartialEq)]\n+pub enum DiffLine {\n+    Context(String),\n+    Expected(String),\n+    Resulting(String),\n+}\n+\n+#[derive(Debug, PartialEq)]\n+pub struct Mismatch {\n+    pub line_number: u32,\n+    pub lines: Vec<DiffLine>,\n+}\n+\n+impl Mismatch {\n+    fn new(line_number: u32) -> Mismatch {\n+        Mismatch { line_number, lines: Vec::new() }\n+    }\n+}\n+\n+// Produces a diff between the expected output and actual output.\n+pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n+    let mut line_number = 1;\n+    let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n+    let mut lines_since_mismatch = context_size + 1;\n+    let mut results = Vec::new();\n+    let mut mismatch = Mismatch::new(0);\n+\n+    for result in diff::lines(expected, actual) {\n+        match result {\n+            diff::Result::Left(str) => {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n+                line_number += 1;\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Right(str) => {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Both(str, _) => {\n+                if context_queue.len() >= context_size {\n+                    let _ = context_queue.pop_front();\n+                }\n+\n+                if lines_since_mismatch < context_size {\n+                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n+                } else if context_size > 0 {\n+                    context_queue.push_back(str);\n+                }\n+\n+                line_number += 1;\n+                lines_since_mismatch += 1;\n+            }\n+        }\n+    }\n+\n+    results.push(mismatch);\n+    results.remove(0);\n+\n+    results\n+}\n+\n+pub(crate) fn write_diff(expected: &str, actual: &str, context_size: usize) -> String {\n+    use std::fmt::Write;\n+    let mut output = String::new();\n+    let diff_results = make_diff(expected, actual, context_size);\n+    for result in diff_results {\n+        let mut line_number = result.line_number;\n+        for line in result.lines {\n+            match line {\n+                DiffLine::Expected(e) => {\n+                    writeln!(output, \"-\\t{}\", e).unwrap();\n+                    line_number += 1;\n+                }\n+                DiffLine::Context(c) => {\n+                    writeln!(output, \"{}\\t{}\", line_number, c).unwrap();\n+                    line_number += 1;\n+                }\n+                DiffLine::Resulting(r) => {\n+                    writeln!(output, \"+\\t{}\", r).unwrap();\n+                }\n+            }\n+        }\n+        writeln!(output).unwrap();\n+    }\n+    output\n+}\n+\n+/// Filters based on filetype and extension whether to diff a file.\n+///\n+/// Returns whether any data was actually written.\n+pub(crate) fn write_filtered_diff<Filter>(\n+    diff_filename: &str,\n+    out_dir: &Path,\n+    compare_dir: &Path,\n+    verbose: bool,\n+    filter: Filter,\n+) -> bool\n+where\n+    Filter: Fn(FileType, Option<&str>) -> bool,\n+{\n+    use std::io::{Read, Write};\n+    let mut diff_output = File::create(diff_filename).unwrap();\n+    let mut wrote_data = false;\n+    for entry in walkdir::WalkDir::new(out_dir) {\n+        let entry = entry.expect(\"failed to read file\");\n+        let extension = entry.path().extension().and_then(|p| p.to_str());\n+        if filter(entry.file_type(), extension) {\n+            let expected_path = compare_dir.join(entry.path().strip_prefix(&out_dir).unwrap());\n+            let expected = if let Ok(s) = std::fs::read(&expected_path) { s } else { continue };\n+            let actual_path = entry.path();\n+            let actual = std::fs::read(&actual_path).unwrap();\n+            let diff = unified_diff::diff(\n+                &expected,\n+                &expected_path.to_string_lossy(),\n+                &actual,\n+                &actual_path.to_string_lossy(),\n+                3,\n+            );\n+            wrote_data |= !diff.is_empty();\n+            diff_output.write_all(&diff).unwrap();\n+        }\n+    }\n+\n+    if !wrote_data {\n+        println!(\"note: diff is identical to nightly rustdoc\");\n+        assert!(diff_output.metadata().unwrap().len() == 0);\n+        return false;\n+    } else if verbose {\n+        eprintln!(\"printing diff:\");\n+        let mut buf = Vec::new();\n+        diff_output.read_to_end(&mut buf).unwrap();\n+        std::io::stderr().lock().write_all(&mut buf).unwrap();\n+    }\n+    true\n+}"}, {"sha": "fbf3249db94d10d18c74ba3d87e9e91362616c31", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48548c91d683fd469078ab549055fed214bb589a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48548c91d683fd469078ab549055fed214bb589a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=48548c91d683fd469078ab549055fed214bb589a", "patch": "@@ -28,6 +28,7 @@ use self::header::{make_test_description, EarlyProps};\n mod tests;\n \n pub mod common;\n+pub mod compute_diff;\n pub mod errors;\n pub mod header;\n mod json;"}, {"sha": "0821e279d2485a9efeb2cc64e34772024a42a969", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 12, "deletions": 142, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/48548c91d683fd469078ab549055fed214bb589a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48548c91d683fd469078ab549055fed214bb589a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=48548c91d683fd469078ab549055fed214bb589a", "patch": "@@ -8,6 +8,7 @@ use crate::common::{CompareMode, FailMode, PassMode};\n use crate::common::{Config, TestPaths};\n use crate::common::{Pretty, RunPassValgrind};\n use crate::common::{UI_RUN_STDERR, UI_RUN_STDOUT};\n+use crate::compute_diff::{write_diff, write_filtered_diff};\n use crate::errors::{self, Error, ErrorKind};\n use crate::header::TestProps;\n use crate::json;\n@@ -18,7 +19,7 @@ use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n \n use std::collections::hash_map::DefaultHasher;\n-use std::collections::{HashMap, HashSet, VecDeque};\n+use std::collections::{HashMap, HashSet};\n use std::env;\n use std::ffi::{OsStr, OsString};\n use std::fs::{self, create_dir_all, File, OpenOptions};\n@@ -100,111 +101,6 @@ pub fn get_lib_name(lib: &str, dylib: bool) -> String {\n     }\n }\n \n-#[derive(Debug, PartialEq)]\n-pub enum DiffLine {\n-    Context(String),\n-    Expected(String),\n-    Resulting(String),\n-}\n-\n-#[derive(Debug, PartialEq)]\n-pub struct Mismatch {\n-    pub line_number: u32,\n-    pub lines: Vec<DiffLine>,\n-}\n-\n-impl Mismatch {\n-    fn new(line_number: u32) -> Mismatch {\n-        Mismatch { line_number, lines: Vec::new() }\n-    }\n-}\n-\n-// Produces a diff between the expected output and actual output.\n-pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n-    let mut line_number = 1;\n-    let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n-    let mut lines_since_mismatch = context_size + 1;\n-    let mut results = Vec::new();\n-    let mut mismatch = Mismatch::new(0);\n-\n-    for result in diff::lines(expected, actual) {\n-        match result {\n-            diff::Result::Left(str) => {\n-                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n-                    results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n-                }\n-\n-                while let Some(line) = context_queue.pop_front() {\n-                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n-                }\n-\n-                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n-                line_number += 1;\n-                lines_since_mismatch = 0;\n-            }\n-            diff::Result::Right(str) => {\n-                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n-                    results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n-                }\n-\n-                while let Some(line) = context_queue.pop_front() {\n-                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n-                }\n-\n-                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n-                lines_since_mismatch = 0;\n-            }\n-            diff::Result::Both(str, _) => {\n-                if context_queue.len() >= context_size {\n-                    let _ = context_queue.pop_front();\n-                }\n-\n-                if lines_since_mismatch < context_size {\n-                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n-                } else if context_size > 0 {\n-                    context_queue.push_back(str);\n-                }\n-\n-                line_number += 1;\n-                lines_since_mismatch += 1;\n-            }\n-        }\n-    }\n-\n-    results.push(mismatch);\n-    results.remove(0);\n-\n-    results\n-}\n-\n-fn write_diff(expected: &str, actual: &str, context_size: usize) -> String {\n-    use std::fmt::Write;\n-    let mut output = String::new();\n-    let diff_results = make_diff(expected, actual, context_size);\n-    for result in diff_results {\n-        let mut line_number = result.line_number;\n-        for line in result.lines {\n-            match line {\n-                DiffLine::Expected(e) => {\n-                    writeln!(output, \"-\\t{}\", e).unwrap();\n-                    line_number += 1;\n-                }\n-                DiffLine::Context(c) => {\n-                    writeln!(output, \"{}\\t{}\", line_number, c).unwrap();\n-                    line_number += 1;\n-                }\n-                DiffLine::Resulting(r) => {\n-                    writeln!(output, \"+\\t{}\", r).unwrap();\n-                }\n-            }\n-        }\n-        writeln!(output).unwrap();\n-    }\n-    output\n-}\n-\n pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n     match &*config.target {\n         \"arm-linux-androideabi\"\n@@ -2507,43 +2403,17 @@ impl<'test> TestCx<'test> {\n \n         let diff_filename = format!(\"build/tmp/rustdoc-compare-{}.diff\", std::process::id());\n \n-        {\n-            let mut diff_output = File::create(&diff_filename).unwrap();\n-            let mut wrote_data = false;\n-            for entry in walkdir::WalkDir::new(out_dir) {\n-                let entry = entry.expect(\"failed to read file\");\n-                let extension = entry.path().extension().and_then(|p| p.to_str());\n-                if entry.file_type().is_file()\n+        if !write_filtered_diff(\n+            &diff_filename,\n+            out_dir,\n+            &compare_dir,\n+            self.config.verbose,\n+            |file_type, extension| {\n+                file_type.is_file()\n                     && (extension == Some(\"html\".into()) || extension == Some(\"js\".into()))\n-                {\n-                    let expected_path =\n-                        compare_dir.join(entry.path().strip_prefix(&out_dir).unwrap());\n-                    let expected =\n-                        if let Ok(s) = std::fs::read(&expected_path) { s } else { continue };\n-                    let actual_path = entry.path();\n-                    let actual = std::fs::read(&actual_path).unwrap();\n-                    let diff = unified_diff::diff(\n-                        &expected,\n-                        &expected_path.to_string_lossy(),\n-                        &actual,\n-                        &actual_path.to_string_lossy(),\n-                        3,\n-                    );\n-                    wrote_data |= !diff.is_empty();\n-                    diff_output.write_all(&diff).unwrap();\n-                }\n-            }\n-\n-            if !wrote_data {\n-                println!(\"note: diff is identical to nightly rustdoc\");\n-                assert!(diff_output.metadata().unwrap().len() == 0);\n-                return;\n-            } else if self.config.verbose {\n-                eprintln!(\"printing diff:\");\n-                let mut buf = Vec::new();\n-                diff_output.read_to_end(&mut buf).unwrap();\n-                std::io::stderr().lock().write_all(&mut buf).unwrap();\n-            }\n+            },\n+        ) {\n+            return;\n         }\n \n         match self.config.color {"}]}