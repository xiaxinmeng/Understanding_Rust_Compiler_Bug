{"sha": "2d4b633be36a59667f8648d987169f59f8314b1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNGI2MzNiZTM2YTU5NjY3Zjg2NDhkOTg3MTY5ZjU5ZjgzMTRiMWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-30T19:34:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-02T12:42:30Z"}, "message": "Delay gensym creation for \"underscore items\" until name resolution\n\nProhibit `static _`\nFis unused import warnings for `use foo as _`\nAdd more tests for `use foo as _`", "tree": {"sha": "3268a6bf510ec3ba5397a0102813cba3abd4bb54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3268a6bf510ec3ba5397a0102813cba3abd4bb54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d4b633be36a59667f8648d987169f59f8314b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4b633be36a59667f8648d987169f59f8314b1c", "html_url": "https://github.com/rust-lang/rust/commit/2d4b633be36a59667f8648d987169f59f8314b1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d4b633be36a59667f8648d987169f59f8314b1c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c658d7340149274bb30a56fb3e7de799c266f4bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c658d7340149274bb30a56fb3e7de799c266f4bc", "html_url": "https://github.com/rust-lang/rust/commit/c658d7340149274bb30a56fb3e7de799c266f4bc"}], "stats": {"total": 193, "additions": 157, "deletions": 36}, "files": [{"sha": "b40988d0d09c9f50bb07eafedf3aeb1bd87b08b2", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -157,7 +157,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         };\n         match use_tree.kind {\n             ast::UseTreeKind::Simple(rename, ..) => {\n-                let mut ident = use_tree.ident();\n+                let mut ident = use_tree.ident().gensym_if_underscore();\n                 let mut module_path = prefix;\n                 let mut source = module_path.pop().unwrap();\n                 let mut type_ns_only = false;\n@@ -334,7 +334,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n     fn build_reduced_graph_for_item(&mut self, item: &Item, parent_scope: ParentScope<'a>) {\n         let parent = parent_scope.module;\n         let expansion = parent_scope.expansion;\n-        let ident = item.ident;\n+        let ident = item.ident.gensym_if_underscore();\n         let sp = item.span;\n         let vis = self.resolve_visibility(&item.vis);\n \n@@ -628,7 +628,11 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n     /// Builds the reduced graph for a single item in an external crate.\n     fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'a>, child: Export) {\n-        let Export { ident, def, vis, span, .. } = child;\n+        let Export { ident, def, vis, span } = child;\n+        // FIXME: We shouldn't create the gensym here, it should come from metadata,\n+        // but metadata cannot encode gensyms currently, so we create it here.\n+        // This is only a guess, two equivalent idents may incorrectly get different gensyms here.\n+        let ident = ident.gensym_if_underscore();\n         let def_id = def.def_id();\n         let expansion = Mark::root(); // FIXME(jseyfried) intercrate hygiene\n         match def {"}, {"sha": "65224badc83cdf132a278135e7becccdf5c08045", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -888,9 +888,11 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             PathResult::Indeterminate | PathResult::NonModule(..) => unreachable!(),\n         };\n \n-        let (ident, source_bindings, target_bindings, type_ns_only) = match directive.subclass {\n-            SingleImport { source, ref source_bindings, ref target_bindings, type_ns_only, .. } =>\n-                (source, source_bindings, target_bindings, type_ns_only),\n+        let (ident, target, source_bindings, target_bindings, type_ns_only) =\n+                match directive.subclass {\n+            SingleImport { source, target, ref source_bindings,\n+                           ref target_bindings, type_ns_only } =>\n+                (source, target, source_bindings, target_bindings, type_ns_only),\n             GlobImport { is_prelude, ref max_vis } => {\n                 if directive.module_path.len() <= 1 {\n                     // HACK(eddyb) `lint_if_path_starts_with_module` needs at least\n@@ -944,8 +946,10 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                     // Consistency checks, analogous to `finalize_current_module_macro_resolutions`.\n                     let initial_def = source_bindings[ns].get().map(|initial_binding| {\n                         all_ns_err = false;\n-                        this.record_use(ident, ns, initial_binding,\n-                                        directive.module_path.is_empty());\n+                        if target.name == \"_\" &&\n+                           initial_binding.is_extern_crate() && !initial_binding.is_import() {\n+                            this.used_imports.insert((directive.id, TypeNS));\n+                        }\n                         initial_binding.def_ignoring_ambiguity()\n                     });\n                     let def = binding.def_ignoring_ambiguity();"}, {"sha": "280060863623ab248bcb37a15e3622f19af13604", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -2017,6 +2017,17 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn parse_ident_or_underscore(&mut self) -> PResult<'a, ast::Ident> {\n+        match self.token {\n+            token::Ident(ident, false) if ident.name == keywords::Underscore.name() => {\n+                let span = self.span;\n+                self.bump();\n+                Ok(Ident::new(ident.name, span))\n+            }\n+            _ => self.parse_ident(),\n+        }\n+    }\n+\n     /// Parses qualified path.\n     /// Assumes that the leading `<` has been parsed already.\n     ///\n@@ -6435,13 +6446,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_item_const(&mut self, m: Option<Mutability>) -> PResult<'a, ItemInfo> {\n-        let id = match self.token {\n-                token::Ident(ident, false) if ident.name == keywords::Underscore.name() => {\n-                    self.bump(); // `_`\n-                    ident.gensym()\n-                    },\n-                _ => self.parse_ident()?,\n-            };\n+        let id = if m.is_none() { self.parse_ident_or_underscore() } else { self.parse_ident() }?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n         self.expect(&token::Eq)?;\n@@ -7726,13 +7731,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_rename(&mut self) -> PResult<'a, Option<Ident>> {\n         if self.eat_keyword(keywords::As) {\n-            match self.token {\n-                token::Ident(ident, false) if ident.name == keywords::Underscore.name() => {\n-                    self.bump(); // `_`\n-                    Ok(Some(ident.gensym()))\n-                }\n-                _ => self.parse_ident().map(Some),\n-            }\n+            self.parse_ident_or_underscore().map(Some)\n         } else {\n             Ok(None)\n         }"}, {"sha": "2721ab70e223de08d47ab09d70e0e2c34dc25178", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -80,6 +80,10 @@ impl Ident {\n         Ident::new(self.name.gensymed(), self.span)\n     }\n \n+    pub fn gensym_if_underscore(self) -> Ident {\n+        if self.name == keywords::Underscore.name() { self.gensym() } else { self }\n+    }\n+\n     pub fn as_str(self) -> LocalInternedString {\n         self.name.as_str()\n     }\n@@ -465,7 +469,7 @@ impl Ident {\n     // We see this identifier in a normal identifier position, like variable name or a type.\n     // How was it written originally? Did it use the raw form? Let's try to guess.\n     pub fn is_raw_guess(self) -> bool {\n-        self.name != keywords::Invalid.name() &&\n+        self.name != keywords::Invalid.name() && self.name != keywords::Underscore.name() &&\n         self.is_reserved() && !self.is_path_segment_keyword()\n     }\n }"}, {"sha": "b41e3503d7ab5cee76eec7c3c6c155340aeb3aeb", "filename": "src/test/ui/feature-gates/underscore_const_names_feature_gate.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -9,6 +9,5 @@\n // except according to those terms.\n \n const _: () = (); //~ ERROR is unstable\n-static _: () = (); //~ ERROR is unstable\n \n fn main() {}", "previous_filename": "src/test/ui/underscore_const_names_feature_gate.rs"}, {"sha": "192cc258cf4e163e72657cea563397b463523922", "filename": "src/test/ui/feature-gates/underscore_const_names_feature_gate.stderr", "status": "renamed", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -6,14 +6,6 @@ LL | const _: () = (); //~ ERROR is unstable\n    |\n    = help: add #![feature(underscore_const_names)] to the crate attributes to enable\n \n-error[E0658]: naming constants with `_` is unstable (see issue #54912)\n-  --> $DIR/underscore_const_names_feature_gate.rs:12:1\n-   |\n-LL | static _: () = (); //~ ERROR is unstable\n-   | ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(underscore_const_names)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`.", "previous_filename": "src/test/ui/underscore_const_names_feature_gate.stderr"}, {"sha": "e1a9a02f9aaae75295b1b37039c46289b556243b", "filename": "src/test/ui/parser/underscore_static.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Fparser%2Funderscore_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Fparser%2Funderscore_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_static.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: -Z parse-only\n+\n+static _: () = (); //~ ERROR expected identifier, found reserved identifier `_`"}, {"sha": "1b766f785a52410c88961e0c7500ba1e22530076", "filename": "src/test/ui/parser/underscore_static.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Fparser%2Funderscore_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Fparser%2Funderscore_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_static.stderr?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_static.rs:3:8\n+   |\n+LL | static _: () = (); //~ ERROR expected identifier, found reserved identifier `_`\n+   |        ^ expected identifier, found reserved identifier\n+\n+error: aborting due to previous error\n+"}, {"sha": "92d741b6a26631a89a809df0bd32fb7032515db5", "filename": "src/test/ui/rfc-2166-underscore-imports/auxiliary/duplicate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Fduplicate.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -0,0 +1,14 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro_attribute]\n+pub fn duplicate(_: TokenStream, input: TokenStream) -> TokenStream {\n+    let clone = input.clone();\n+    input.into_iter().chain(clone.into_iter()).collect()\n+}"}, {"sha": "70de9167332b01cf5ff554fedf08d7092c5f0ff5", "filename": "src/test/ui/rfc-2166-underscore-imports/auxiliary/underscore-imports.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Funderscore-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Funderscore-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Funderscore-imports.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -0,0 +1,22 @@\n+#![feature(underscore_imports)]\n+\n+#[macro_export]\n+macro_rules! do_nothing {\n+    () => ()\n+}\n+\n+mod m1 {\n+    pub trait InScope1 {\n+        fn in_scope1(&self) {}\n+    }\n+    impl InScope1 for () {}\n+}\n+mod m2 {\n+    pub trait InScope2 {\n+        fn in_scope2(&self) {}\n+    }\n+    impl InScope2 for () {}\n+}\n+\n+pub use m1::InScope1 as _;\n+pub use m2::InScope2 as _;"}, {"sha": "64a8d0720d628c45afd9e0ce838ecc4c519d8979", "filename": "src/test/ui/rfc-2166-underscore-imports/basic.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -9,10 +9,16 @@\n // except according to those terms.\n \n // compile-pass\n+// aux-build:underscore-imports.rs\n \n #![feature(underscore_imports)]\n #![warn(unused_imports, unused_extern_crates)]\n \n+#[macro_use]\n+extern crate underscore_imports as _;\n+\n+do_nothing!(); // OK\n+\n struct S;\n \n mod m {"}, {"sha": "e1fe5cc0783d960bc1feb171e5558c2adfb75c51", "filename": "src/test/ui/rfc-2166-underscore-imports/basic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -1,17 +1,17 @@\n warning: unused import: `m::Tr1 as _`\n-  --> $DIR/basic.rs:31:9\n+  --> $DIR/basic.rs:37:9\n    |\n LL |     use m::Tr1 as _; //~ WARN unused import\n    |         ^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/basic.rs:14:9\n+  --> $DIR/basic.rs:15:9\n    |\n LL | #![warn(unused_imports, unused_extern_crates)]\n    |         ^^^^^^^^^^^^^^\n \n warning: unused import: `S as _`\n-  --> $DIR/basic.rs:32:9\n+  --> $DIR/basic.rs:38:9\n    |\n LL |     use S as _; //~ WARN unused import\n    |         ^^^^^^"}, {"sha": "92615c4966dae0fe76b4fbdfb4ddc1e9e1a90bd6", "filename": "src/test/ui/rfc-2166-underscore-imports/duplicate.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fduplicate.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+// aux-build:duplicate.rs\n+\n+#![feature(underscore_imports)]\n+\n+extern crate duplicate;\n+\n+#[duplicate::duplicate]\n+use main as _; // OK\n+\n+macro_rules! duplicate {\n+    ($item: item) => { $item $item }\n+}\n+\n+duplicate!(use std as _;); // OK\n+\n+fn main() {}"}, {"sha": "8b5bb8b326097c4e50bdb6c630c6cb779da67a95", "filename": "src/test/ui/rfc-2166-underscore-imports/intercrate.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fintercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fintercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fintercrate.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -0,0 +1,11 @@\n+// compile-pass\n+// aux-build:underscore-imports.rs\n+\n+extern crate underscore_imports;\n+\n+use underscore_imports::*;\n+\n+fn main() {\n+    ().in_scope1();\n+    ().in_scope2();\n+}"}, {"sha": "611eb3c67ca52299ef73eec1f902cca999bfdd1e", "filename": "src/test/ui/rfc-2166-underscore-imports/unused-2018.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.rs?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -0,0 +1,18 @@\n+// edition:2018\n+\n+#![feature(underscore_imports)]\n+#![deny(unused_imports)]\n+\n+mod multi_segment {\n+    use core::any; //~ ERROR unused import: `core::any`\n+}\n+\n+mod single_segment {\n+    use core; //~ ERROR unused import: `core`\n+}\n+\n+mod single_segment_underscore {\n+    use core as _; // OK\n+}\n+\n+fn main() {}"}, {"sha": "02b29b3f4fe617eadb9d098a05c6f75a874e0e3f", "filename": "src/test/ui/rfc-2166-underscore-imports/unused-2018.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b633be36a59667f8648d987169f59f8314b1c/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr?ref=2d4b633be36a59667f8648d987169f59f8314b1c", "patch": "@@ -0,0 +1,20 @@\n+error: unused import: `core::any`\n+  --> $DIR/unused-2018.rs:7:9\n+   |\n+LL |     use core::any; //~ ERROR unused import: `core::any`\n+   |         ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unused-2018.rs:4:9\n+   |\n+LL | #![deny(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: unused import: `core`\n+  --> $DIR/unused-2018.rs:11:9\n+   |\n+LL |     use core; //~ ERROR unused import: `core`\n+   |         ^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}