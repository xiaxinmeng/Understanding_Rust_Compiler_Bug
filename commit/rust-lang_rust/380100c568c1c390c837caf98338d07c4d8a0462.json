{"sha": "380100c568c1c390c837caf98338d07c4d8a0462", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MDEwMGM1NjhjMWMzOTBjODM3Y2FmOTgzMzhkMDdjNGQ4YTA0NjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-20T09:44:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-20T09:44:40Z"}, "message": "Auto merge of #42571 - tlively:wasm-dev, r=alexcrichton\n\nEnable wasm LLVM backend\n\nEnables compilation to WebAssembly with the LLVM backend using the target triple \"wasm32-unknown-unknown\". This is the beginning of my work on #38804.\n\n**edit:** The new new target is now wasm32-experimental-emscripten instead of wasm32-unknown-unknown.", "tree": {"sha": "68e64b465c4421c49d8ec9b75df884cd19fe8503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68e64b465c4421c49d8ec9b75df884cd19fe8503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/380100c568c1c390c837caf98338d07c4d8a0462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/380100c568c1c390c837caf98338d07c4d8a0462", "html_url": "https://github.com/rust-lang/rust/commit/380100c568c1c390c837caf98338d07c4d8a0462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/380100c568c1c390c837caf98338d07c4d8a0462/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "753fee4ab69e71185b3903bad383dd5418e97895", "url": "https://api.github.com/repos/rust-lang/rust/commits/753fee4ab69e71185b3903bad383dd5418e97895", "html_url": "https://github.com/rust-lang/rust/commit/753fee4ab69e71185b3903bad383dd5418e97895"}, {"sha": "a1981a64a22024bbda98cf1b76b7c751fb1dcddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1981a64a22024bbda98cf1b76b7c751fb1dcddb", "html_url": "https://github.com/rust-lang/rust/commit/a1981a64a22024bbda98cf1b76b7c751fb1dcddb"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "fd8aa320fb3d7408ba89801d2d3a87aaf3992791", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/380100c568c1c390c837caf98338d07c4d8a0462/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380100c568c1c390c837caf98338d07c4d8a0462/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=380100c568c1c390c837caf98338d07c4d8a0462", "patch": "@@ -60,6 +60,7 @@ pub struct Config {\n     pub llvm_static_stdcpp: bool,\n     pub llvm_link_shared: bool,\n     pub llvm_targets: Option<String>,\n+    pub llvm_experimental_targets: Option<String>,\n     pub llvm_link_jobs: Option<u32>,\n     pub llvm_clean_rebuild: bool,\n \n@@ -189,6 +190,7 @@ struct Llvm {\n     version_check: Option<bool>,\n     static_libstdcpp: Option<bool>,\n     targets: Option<String>,\n+    experimental_targets: Option<String>,\n     link_jobs: Option<u32>,\n     clean_rebuild: Option<bool>,\n }\n@@ -350,6 +352,7 @@ impl Config {\n             set(&mut config.llvm_static_stdcpp, llvm.static_libstdcpp);\n             set(&mut config.llvm_clean_rebuild, llvm.clean_rebuild);\n             config.llvm_targets = llvm.targets.clone();\n+            config.llvm_experimental_targets = llvm.experimental_targets.clone();\n             config.llvm_link_jobs = llvm.link_jobs;\n         }\n "}, {"sha": "7a52222e46e90d9edbb1033c1e6284eeff373924", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/380100c568c1c390c837caf98338d07c4d8a0462/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/380100c568c1c390c837caf98338d07c4d8a0462/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=380100c568c1c390c837caf98338d07c4d8a0462", "patch": "@@ -53,6 +53,14 @@\n # Rust team and file an issue if you need assistance in porting!\n #targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\"\n \n+# LLVM experimental targets to build support for. These targets are specified in\n+# the same format as above, but since these targets are experimental, they are\n+# not built by default and the experimental Rust compilation targets that depend\n+# on them will not work unless the user opts in to building them. Possible\n+# experimental LLVM targets include WebAssembly for the\n+# wasm32-experimental-emscripten Rust target.\n+#experimental-targets = \"\"\n+\n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly\n # increases the size of binaries and consequently the memory required by"}, {"sha": "a23be37b15e0edde19286cdf66830d1fcf255666", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/380100c568c1c390c837caf98338d07c4d8a0462/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380100c568c1c390c837caf98338d07c4d8a0462/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=380100c568c1c390c837caf98338d07c4d8a0462", "patch": "@@ -86,6 +86,11 @@ pub fn llvm(build: &Build, target: &str) {\n         None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\",\n     };\n \n+    let llvm_exp_targets = match build.config.llvm_experimental_targets {\n+        Some(ref s) => s,\n+        None => \"\",\n+    };\n+\n     let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n \n     cfg.target(target)\n@@ -94,6 +99,7 @@ pub fn llvm(build: &Build, target: &str) {\n        .profile(profile)\n        .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n        .define(\"LLVM_TARGETS_TO_BUILD\", llvm_targets)\n+       .define(\"LLVM_EXPERIMENTAL_TARGETS_TO_BUILD\", llvm_exp_targets)\n        .define(\"LLVM_INCLUDE_EXAMPLES\", \"OFF\")\n        .define(\"LLVM_INCLUDE_TESTS\", \"OFF\")\n        .define(\"LLVM_INCLUDE_DOCS\", \"OFF\")"}, {"sha": "37d6a6b95d937dddcb24db02de531d792ca2f5e5", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/380100c568c1c390c837caf98338d07c4d8a0462/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380100c568c1c390c837caf98338d07c4d8a0462/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=380100c568c1c390c837caf98338d07c4d8a0462", "patch": "@@ -214,6 +214,7 @@ supported_targets! {\n     (\"le32-unknown-nacl\", le32_unknown_nacl),\n     (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n+    (\"wasm32-experimental-emscripten\", wasm32_experimental_emscripten),\n \n     (\"thumbv6m-none-eabi\", thumbv6m_none_eabi),\n     (\"thumbv7m-none-eabi\", thumbv7m_none_eabi),"}, {"sha": "1a95c93363adb9095ca88b6ed62cf8738600f16a", "filename": "src/librustc_back/target/wasm32_experimental_emscripten.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/380100c568c1c390c837caf98338d07c4d8a0462/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380100c568c1c390c837caf98338d07c4d8a0462/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs?ref=380100c568c1c390c837caf98338d07c4d8a0462", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use LinkerFlavor;\n+use super::{LinkArgs, Target, TargetOptions};\n+use super::emscripten_base::{cmd};\n+\n+pub fn target() -> Result<Target, String> {\n+    let mut post_link_args = LinkArgs::new();\n+    post_link_args.insert(LinkerFlavor::Em,\n+                          vec![\"-s\".to_string(),\n+                               \"WASM=1\".to_string(),\n+                               \"-s\".to_string(),\n+                               \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()]);\n+\n+    let opts = TargetOptions {\n+        linker: cmd(\"emcc\"),\n+        ar: cmd(\"emar\"),\n+\n+        dynamic_linking: false,\n+        executables: true,\n+        // Today emcc emits two files - a .js file to bootstrap and\n+        // possibly interpret the wasm, and a .wasm file\n+        exe_suffix: \".js\".to_string(),\n+        linker_is_gnu: true,\n+        allow_asm: false,\n+        obj_is_bitcode: true,\n+        is_like_emscripten: true,\n+        max_atomic_width: Some(32),\n+        post_link_args: post_link_args,\n+        target_family: Some(\"unix\".to_string()),\n+        .. Default::default()\n+    };\n+    Ok(Target {\n+        llvm_target: \"wasm32-unknown-unknown\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_os: \"emscripten\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n+        arch: \"wasm32\".to_string(),\n+        linker_flavor: LinkerFlavor::Em,\n+        options: opts,\n+    })\n+}"}, {"sha": "01b37a55f4fe745b6cbb5e9ca70b5a134efd5b4e", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/380100c568c1c390c837caf98338d07c4d8a0462/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380100c568c1c390c837caf98338d07c4d8a0462/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=380100c568c1c390c837caf98338d07c4d8a0462", "patch": "@@ -93,7 +93,7 @@ fn main() {\n \n     let mut optional_components =\n         vec![\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\",\n-             \"systemz\", \"jsbackend\", \"msp430\", \"sparc\", \"nvptx\"];\n+             \"systemz\", \"jsbackend\", \"webassembly\", \"msp430\", \"sparc\", \"nvptx\"];\n \n     let mut version_cmd = Command::new(&llvm_config);\n     version_cmd.arg(\"--version\");"}, {"sha": "b5dfe9bb1678cd6acc909cdf38c9df53ce76dfc6", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/380100c568c1c390c837caf98338d07c4d8a0462/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380100c568c1c390c837caf98338d07c4d8a0462/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=380100c568c1c390c837caf98338d07c4d8a0462", "patch": "@@ -385,6 +385,11 @@ pub fn initialize_available_targets() {\n                  LLVMInitializeHexagonTargetMC,\n                  LLVMInitializeHexagonAsmPrinter,\n                  LLVMInitializeHexagonAsmParser);\n+    init_target!(llvm_component = \"webassembly\",\n+                 LLVMInitializeWebAssemblyTargetInfo,\n+                 LLVMInitializeWebAssemblyTarget,\n+                 LLVMInitializeWebAssemblyTargetMC,\n+                 LLVMInitializeWebAssemblyAsmPrinter);\n }\n \n pub fn last_error() -> Option<String> {"}]}