{"sha": "670cf11de22583e1192636f0e6c36007ebcbb776", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MGNmMTFkZTIyNTgzZTExOTI2MzZmMGU2YzM2MDA3ZWJjYmI3NzY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-06T13:16:07Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-06T13:16:07Z"}, "message": "Clean up `push_const_name`\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "8f829d13962d24a4871298ecccef6a866ca04296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f829d13962d24a4871298ecccef6a866ca04296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/670cf11de22583e1192636f0e6c36007ebcbb776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/670cf11de22583e1192636f0e6c36007ebcbb776", "html_url": "https://github.com/rust-lang/rust/commit/670cf11de22583e1192636f0e6c36007ebcbb776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/670cf11de22583e1192636f0e6c36007ebcbb776/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6197541f73c570f5104c36920b387992c7658d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6197541f73c570f5104c36920b387992c7658d2", "html_url": "https://github.com/rust-lang/rust/commit/c6197541f73c570f5104c36920b387992c7658d2"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "999e7402afd93a57f64787feee4416534a6a2d33", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/670cf11de22583e1192636f0e6c36007ebcbb776/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670cf11de22583e1192636f0e6c36007ebcbb776/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=670cf11de22583e1192636f0e6c36007ebcbb776", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::interpret::ConstValue;\n use rustc::session::config::OptLevel;\n-use rustc::ty::{self, Ty, TyCtxt, Const, ClosureSubsts, GeneratorSubsts, ParamConst};\n+use rustc::ty::{self, Ty, TyCtxt, Const, ClosureSubsts, GeneratorSubsts};\n use rustc::ty::subst::{SubstsRef, InternalSubsts};\n use syntax::ast;\n use syntax::attr::InlineAttr;\n@@ -240,11 +240,11 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n     }\n \n     // Pushes the type name of the specified type to the provided string.\n-    // If 'debug' is true, printing normally unprintable types is allowed\n-    // (e.g. ty::GeneratorWitness). This parameter should only be set when\n-    // this method is being used for logging purposes (e.g. with debug! or info!)\n-    // When being used for codegen purposes, 'debug' should be set to 'false'\n-    // in order to catch unexpected types that should never end up in a type name\n+    // If `debug` is true, printing normally unprintable types is allowed\n+    // (e.g. `ty::GeneratorWitness`). This parameter should only be set when\n+    // this method is being used for logging purposes (e.g. with `debug!` or `info!`)\n+    // When being used for codegen purposes, `debug` should be set to `false`\n+    // in order to catch unexpected types that should never end up in a type name.\n     pub fn push_type_name(&self, t: Ty<'tcx>, output: &mut String, debug: bool) {\n         match t.sty {\n             ty::Bool              => output.push_str(\"bool\"),\n@@ -387,22 +387,34 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 if debug {\n                     output.push_str(&format!(\"`{:?}`\", t));\n                 } else {\n-                    bug!(\"DefPathBasedNames: Trying to create type name for \\\n-                                         unexpected type: {:?}\", t);\n+                    bug!(\n+                        \"DefPathBasedNames: trying to create type name for unexpected type: {:?}\",\n+                        t,\n+                    );\n                 }\n             }\n         }\n     }\n \n-    // FIXME(const_generics): handle debug printing.\n+    // Pushes the the name of the specified const to the provided string.\n+    // If `debug` is true, usually-unprintable consts (such as `Infer`) will be printed,\n+    // as well as the unprintable types of constants (see `push_type_name` for more details).\n     pub fn push_const_name(&self, c: &Const<'tcx>, output: &mut String, debug: bool) {\n         match c.val {\n-            ConstValue::Infer(..) | ConstValue::Placeholder(_) => output.push_str(\"_\"),\n-            ConstValue::Param(ParamConst { name, .. }) => {\n-                write!(output, \"{}\", name).unwrap();\n+            ConstValue::Scalar(..) | ConstValue::Slice(..) | ConstValue::ByRef(..) => {\n+                // FIXME(const_generics): we could probably do a better job here.\n+                write!(output, \"{:?}\", c).unwrap()\n+            }\n+            _ => {\n+                if debug {\n+                    write!(output, \"{:?}\", c).unwrap()\n+                } else {\n+                    bug!(\n+                        \"DefPathBasedNames: trying to create const name for unexpected const: {:?}\",\n+                        c,\n+                    );\n+                }\n             }\n-            ConstValue::Unevaluated(..) => output.push_str(\"_: _\"),\n-            _ => write!(output, \"{:?}\", c).unwrap(),\n         }\n         output.push_str(\": \");\n         self.push_type_name(c.ty, output, debug);"}]}