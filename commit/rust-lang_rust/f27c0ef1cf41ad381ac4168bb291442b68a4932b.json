{"sha": "f27c0ef1cf41ad381ac4168bb291442b68a4932b", "node_id": "C_kwDOAAsO6NoAKGYyN2MwZWYxY2Y0MWFkMzgxYWM0MTY4YmIyOTE0NDJiNjhhNDkzMmI", "commit": {"author": {"name": "Morgan Thomas", "email": "corp@m0rg.dev", "date": "2022-03-12T13:01:25Z"}, "committer": {"name": "Morgan Thomas", "email": "corp@m0rg.dev", "date": "2022-03-12T13:01:25Z"}, "message": "Reduce intermediate string allocations in render::compound::render_record and ::render_tuple", "tree": {"sha": "22a51aa9337576ac990f906c72a88dabfc2c4de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a51aa9337576ac990f906c72a88dabfc2c4de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f27c0ef1cf41ad381ac4168bb291442b68a4932b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f27c0ef1cf41ad381ac4168bb291442b68a4932b", "html_url": "https://github.com/rust-lang/rust/commit/f27c0ef1cf41ad381ac4168bb291442b68a4932b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f27c0ef1cf41ad381ac4168bb291442b68a4932b/comments", "author": {"login": "m0rg-dev", "id": 38578268, "node_id": "MDQ6VXNlcjM4NTc4MjY4", "avatar_url": "https://avatars.githubusercontent.com/u/38578268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m0rg-dev", "html_url": "https://github.com/m0rg-dev", "followers_url": "https://api.github.com/users/m0rg-dev/followers", "following_url": "https://api.github.com/users/m0rg-dev/following{/other_user}", "gists_url": "https://api.github.com/users/m0rg-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/m0rg-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m0rg-dev/subscriptions", "organizations_url": "https://api.github.com/users/m0rg-dev/orgs", "repos_url": "https://api.github.com/users/m0rg-dev/repos", "events_url": "https://api.github.com/users/m0rg-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/m0rg-dev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m0rg-dev", "id": 38578268, "node_id": "MDQ6VXNlcjM4NTc4MjY4", "avatar_url": "https://avatars.githubusercontent.com/u/38578268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m0rg-dev", "html_url": "https://github.com/m0rg-dev", "followers_url": "https://api.github.com/users/m0rg-dev/followers", "following_url": "https://api.github.com/users/m0rg-dev/following{/other_user}", "gists_url": "https://api.github.com/users/m0rg-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/m0rg-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m0rg-dev/subscriptions", "organizations_url": "https://api.github.com/users/m0rg-dev/orgs", "repos_url": "https://api.github.com/users/m0rg-dev/repos", "events_url": "https://api.github.com/users/m0rg-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/m0rg-dev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d430ddd809c7bb9721f4a5550cc1ff63eb700845", "url": "https://api.github.com/repos/rust-lang/rust/commits/d430ddd809c7bb9721f4a5550cc1ff63eb700845", "html_url": "https://github.com/rust-lang/rust/commit/d430ddd809c7bb9721f4a5550cc1ff63eb700845"}], "stats": {"total": 56, "additions": 24, "deletions": 32}, "files": [{"sha": "c7f3bd1f79a92685178b98a40ec46c7c9bf5567a", "filename": "crates/ide_completion/src/render/compound.rs", "status": "modified", "additions": 24, "deletions": 32, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f27c0ef1cf41ad381ac4168bb291442b68a4932b/crates%2Fide_completion%2Fsrc%2Frender%2Fcompound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f27c0ef1cf41ad381ac4168bb291442b68a4932b/crates%2Fide_completion%2Fsrc%2Frender%2Fcompound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fcompound.rs?ref=f27c0ef1cf41ad381ac4168bb291442b68a4932b", "patch": "@@ -22,24 +22,21 @@ pub(crate) fn render_record(\n     fields: &[hir::Field],\n     name: Option<&str>,\n ) -> RenderedCompound {\n-    let fields = fields.iter();\n+    let completions = fields.iter().enumerate().format_with(\", \", |(idx, field), f| {\n+        if snippet_cap.is_some() {\n+            f(&format_args!(\"{}: ${{{}:()}}\", field.name(db), idx + 1))\n+        } else {\n+            f(&format_args!(\"{}: ()\", field.name(db)))\n+        }\n+    });\n+\n+    let types = fields.iter().format_with(\", \", |field, f| {\n+        f(&format_args!(\"{}: {}\", field.name(db), field.ty(db).display(db)))\n+    });\n \n-    let (completions, types): (Vec<_>, Vec<_>) = fields\n-        .enumerate()\n-        .map(|(idx, field)| {\n-            (\n-                if snippet_cap.is_some() {\n-                    format!(\"{}: ${{{}:()}}\", field.name(db), idx + 1)\n-                } else {\n-                    format!(\"{}: ()\", field.name(db))\n-                },\n-                format!(\"{}: {}\", field.name(db), field.ty(db).display(db)),\n-            )\n-        })\n-        .unzip();\n     RenderedCompound {\n-        literal: format!(\"{} {{ {} }}\", name.unwrap_or(\"\"), completions.iter().format(\", \")),\n-        detail: format!(\"{} {{ {} }}\", name.unwrap_or(\"\"), types.iter().format(\", \")),\n+        literal: format!(\"{} {{ {} }}\", name.unwrap_or(\"\"), completions),\n+        detail: format!(\"{} {{ {} }}\", name.unwrap_or(\"\"), types),\n     }\n }\n \n@@ -51,24 +48,19 @@ pub(crate) fn render_tuple(\n     fields: &[hir::Field],\n     name: Option<&str>,\n ) -> RenderedCompound {\n-    let fields = fields.iter();\n+    let completions = fields.iter().enumerate().format_with(\", \", |(idx, _), f| {\n+        if snippet_cap.is_some() {\n+            f(&format_args!(\"${{{}:()}}\", idx + 1))\n+        } else {\n+            f(&format_args!(\"()\"))\n+        }\n+    });\n+\n+    let types = fields.iter().format_with(\", \", |field, f| f(&field.ty(db).display(db)));\n \n-    let (completions, types): (Vec<_>, Vec<_>) = fields\n-        .enumerate()\n-        .map(|(idx, field)| {\n-            (\n-                if snippet_cap.is_some() {\n-                    format!(\"${{{}:()}}\", (idx + 1).to_string())\n-                } else {\n-                    \"()\".to_string()\n-                },\n-                field.ty(db).display(db).to_string(),\n-            )\n-        })\n-        .unzip();\n     RenderedCompound {\n-        literal: format!(\"{}({})\", name.unwrap_or(\"\"), completions.iter().format(\", \")),\n-        detail: format!(\"{}({})\", name.unwrap_or(\"\"), types.iter().format(\", \")),\n+        literal: format!(\"{}({})\", name.unwrap_or(\"\"), completions),\n+        detail: format!(\"{}({})\", name.unwrap_or(\"\"), types),\n     }\n }\n "}]}