{"sha": "19dcbd151b9c8a061eb96a70c9a39a3f9796a701", "node_id": "C_kwDOAAsO6NoAKDE5ZGNiZDE1MWI5YzhhMDYxZWI5NmE3MGM5YTM5YTNmOTc5NmE3MDE", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-07-26T18:11:15Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:52Z"}, "message": "Explicitly gather lifetimes and definitions for bare async fns", "tree": {"sha": "4164e121dedc869d9acc6edad3db49ee88c297be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4164e121dedc869d9acc6edad3db49ee88c297be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19dcbd151b9c8a061eb96a70c9a39a3f9796a701", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1ywACgkQgTGiTgx5\n769H+xAApiUzGSpJL6RZBrFyZPW8c6DZ41PAYfmoDBcaloWLEQ0Tq1Q/Q+PyDIrJ\nyHU0y8rO0lJ6/Q/OO4MAdTtiJxNffVhYpU05+QXutCL5reBcreIZ7NJKPFJgvomW\n8YpJUNL4G2rtQH3HKfqFrTAqje0/jRavzA7vFzhlwatmK4+bsWOhBhztIzlGiWJp\nSMJqYhCJ/lWmdf5B0rvN2QQ02bCIrqzhKLkWKaDWIIC4lV5anY9FlHaaq1wRggOJ\n49wCXYth/rNsqsPnb34pP4wevypwb+bAhzGldamGMwHx2LRG7L1/UEzajK+akJJ6\npwmZVYnsSyxJp0OL+g5g6i5iZYrXt8Cs7G4m+31c3Zd4HsfoPYI+kgRNKETOZMK4\nRjJCZpvk3PpFZ4b+43I16QvuY3B8BnTCyMAkVYz7TYwr3EsWqSPLnlc5RxD/zf/y\nNZxNrf413jv6Bp+R47uOqSXGR93cBFRSSuBVb3+JE6c+osh3gALt/BupU6EooPRM\ni+0uSjz+eCB8kD8+HksBxuoM3y0cwNI+ANfT6ZItyK55zzlU+xD02DID/mh4aPn0\ndP+Z82IYoJMK7yv5glb/l1YiWJx+LhcZs2pfI1vMZ3lI7Oxax/meYBnO116Ly3kN\nzDxBWz3HymX+wdEMJF6WmgMQ6BMcoC9dip74+FN3Mzn21/4uVIU=\n=Nx1S\n-----END PGP SIGNATURE-----", "payload": "tree 4164e121dedc869d9acc6edad3db49ee88c297be\nparent 25825cd4fa735c4b6d8b004940709bc066477c7c\nauthor Santiago Pastorino <spastorino@gmail.com> 1658859075 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623212 -0300\n\nExplicitly gather lifetimes and definitions for bare async fns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19dcbd151b9c8a061eb96a70c9a39a3f9796a701", "html_url": "https://github.com/rust-lang/rust/commit/19dcbd151b9c8a061eb96a70c9a39a3f9796a701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19dcbd151b9c8a061eb96a70c9a39a3f9796a701/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25825cd4fa735c4b6d8b004940709bc066477c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/25825cd4fa735c4b6d8b004940709bc066477c7c", "html_url": "https://github.com/rust-lang/rust/commit/25825cd4fa735c4b6d8b004940709bc066477c7c"}], "stats": {"total": 69, "additions": 30, "deletions": 39}, "files": [{"sha": "bc4841eb363993b7a7ec1b12974ed210d195dea3", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 30, "deletions": 39, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/19dcbd151b9c8a061eb96a70c9a39a3f9796a701/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dcbd151b9c8a061eb96a70c9a39a3f9796a701/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=19dcbd151b9c8a061eb96a70c9a39a3f9796a701", "patch": "@@ -751,31 +751,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         })\n     }\n \n-    /// Setup lifetime capture for and impl-trait.\n-    /// The captures will be added to `captures`.\n-    fn while_capturing_lifetimes<T>(\n-        &mut self,\n-        parent_def_id: LocalDefId,\n-        captures: &mut FxHashMap<LocalDefId, (Span, NodeId, ParamName, LifetimeRes)>,\n-        f: impl FnOnce(&mut Self) -> T,\n-    ) -> T {\n-        let lifetime_stash = std::mem::replace(\n-            &mut self.captured_lifetimes,\n-            Some(LifetimeCaptureContext {\n-                parent_def_id,\n-                captures: std::mem::take(captures),\n-                binders_to_ignore: Default::default(),\n-            }),\n-        );\n-\n-        let ret = f(self);\n-\n-        let ctxt = std::mem::replace(&mut self.captured_lifetimes, lifetime_stash).unwrap();\n-        *captures = ctxt.captures;\n-\n-        ret\n-    }\n-\n     /// Register a binder to be ignored for lifetime capture.\n     #[tracing::instrument(level = \"debug\", skip(self, f))]\n     #[inline]\n@@ -1786,20 +1761,36 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         debug!(?captures);\n \n         self.with_hir_id_owner(opaque_ty_node_id, |this| {\n-            let future_bound =\n-                this.while_capturing_lifetimes(opaque_ty_def_id, &mut captures, |this| {\n-                    // We have to be careful to get elision right here. The\n-                    // idea is that we create a lifetime parameter for each\n-                    // lifetime in the return type.  So, given a return type\n-                    // like `async fn foo(..) -> &[&u32]`, we lower to `impl\n-                    // Future<Output = &'1 [ &'2 u32 ]>`.\n-                    //\n-                    // Then, we will create `fn foo(..) -> Foo<'_, '_>`, and\n-                    // hence the elision takes place at the fn site.\n-                    this.lower_async_fn_output_type_to_future_bound(output, fn_def_id, span)\n-                });\n-            debug!(\"lower_async_fn_ret_ty: future_bound={:#?}\", future_bound);\n-            debug!(\"lower_async_fn_ret_ty: captures={:#?}\", captures);\n+            let lifetime_stash = std::mem::replace(\n+                &mut this.captured_lifetimes,\n+                Some(LifetimeCaptureContext {\n+                    parent_def_id: opaque_ty_def_id,\n+                    captures: std::mem::take(&mut captures),\n+                    binders_to_ignore: Default::default(),\n+                }),\n+            );\n+\n+            let (lifetimes_in_bounds, binders_to_ignore) = ast::lifetimes_in_ret_ty(output);\n+            debug!(?lifetimes_in_bounds);\n+            debug!(?binders_to_ignore);\n+\n+            this.create_and_capture_lifetime_defs(&lifetimes_in_bounds, &binders_to_ignore);\n+\n+            // We have to be careful to get elision right here. The\n+            // idea is that we create a lifetime parameter for each\n+            // lifetime in the return type.  So, given a return type\n+            // like `async fn foo(..) -> &[&u32]`, we lower to `impl\n+            // Future<Output = &'1 [ &'2 u32 ]>`.\n+            //\n+            // Then, we will create `fn foo(..) -> Foo<'_, '_>`, and\n+            // hence the elision takes place at the fn site.\n+            let ret = this.lower_async_fn_output_type_to_future_bound(output, fn_def_id, span);\n+\n+            let ctxt = std::mem::replace(&mut this.captured_lifetimes, lifetime_stash).unwrap();\n+\n+            captures = ctxt.captures;\n+\n+            let future_bound = ret;\n \n             let generic_params =\n                 this.arena.alloc_from_iter(captures.iter().map(|(_, &(span, p_id, p_name, _))| {"}]}