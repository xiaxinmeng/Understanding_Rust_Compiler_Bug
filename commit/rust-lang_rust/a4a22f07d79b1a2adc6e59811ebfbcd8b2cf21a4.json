{"sha": "a4a22f07d79b1a2adc6e59811ebfbcd8b2cf21a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YTIyZjA3ZDc5YjFhMmFkYzZlNTk4MTFlYmZiY2Q4YjJjZjIxYTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-31T16:31:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-08T16:25:46Z"}, "message": "Doc comments", "tree": {"sha": "5e9b0f1fc9a84c9638c7cf5a73eb1dbf2ad98aaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e9b0f1fc9a84c9638c7cf5a73eb1dbf2ad98aaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4a22f07d79b1a2adc6e59811ebfbcd8b2cf21a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a22f07d79b1a2adc6e59811ebfbcd8b2cf21a4", "html_url": "https://github.com/rust-lang/rust/commit/a4a22f07d79b1a2adc6e59811ebfbcd8b2cf21a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4a22f07d79b1a2adc6e59811ebfbcd8b2cf21a4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "434cb437b55d61bcb54a01921de7ac752e6dee13", "url": "https://api.github.com/repos/rust-lang/rust/commits/434cb437b55d61bcb54a01921de7ac752e6dee13", "html_url": "https://github.com/rust-lang/rust/commit/434cb437b55d61bcb54a01921de7ac752e6dee13"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "a9999e1d92197355f3f67bb5b287e5cbb1b2b867", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4a22f07d79b1a2adc6e59811ebfbcd8b2cf21a4/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4a22f07d79b1a2adc6e59811ebfbcd8b2cf21a4/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=a4a22f07d79b1a2adc6e59811ebfbcd8b2cf21a4", "patch": "@@ -1,3 +1,5 @@\n+//! A module for searching for libraries\n+\n pub use self::FileMatch::*;\n \n use std::env;\n@@ -14,8 +16,6 @@ pub enum FileMatch {\n     FileDoesntMatch,\n }\n \n-// A module for searching for libraries\n-\n #[derive(Clone)]\n pub struct FileSearch<'a> {\n     sysroot: &'a Path,\n@@ -83,12 +83,12 @@ impl<'a> FileSearch<'a> {\n         FileSearch { sysroot, triple, search_paths, tlib_path, kind }\n     }\n \n-    // Returns just the directories within the search paths.\n+    /// Returns just the directories within the search paths.\n     pub fn search_path_dirs(&self) -> Vec<PathBuf> {\n         self.search_paths().map(|sp| sp.dir.to_path_buf()).collect()\n     }\n \n-    // Returns a list of directories where target-specific tool binaries are located.\n+    /// Returns a list of directories where target-specific tool binaries are located.\n     pub fn get_tools_search_paths(&self, self_contained: bool) -> Vec<PathBuf> {\n         let rustlib_path = rustc_target::target_rustlib_path(self.sysroot, &self.triple);\n         let p = std::array::IntoIter::new([\n@@ -107,8 +107,8 @@ pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n         .collect::<PathBuf>()\n }\n \n-// This function checks if sysroot is found using env::args().next(), and if it\n-// is not found, uses env::current_exe() to imply sysroot.\n+/// This function checks if sysroot is found using env::args().next(), and if it\n+/// is not found, uses env::current_exe() to imply sysroot.\n pub fn get_or_default_sysroot() -> PathBuf {\n     // Follow symlinks.  If the resolved path is relative, make it absolute.\n     fn canonicalize(path: PathBuf) -> PathBuf {"}, {"sha": "acb6c735e051ebc2cfb90b5310e07c7bc8208533", "filename": "compiler/rustc_session/src/search_paths.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a4a22f07d79b1a2adc6e59811ebfbcd8b2cf21a4/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4a22f07d79b1a2adc6e59811ebfbcd8b2cf21a4/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs?ref=a4a22f07d79b1a2adc6e59811ebfbcd8b2cf21a4", "patch": "@@ -9,17 +9,17 @@ pub struct SearchPath {\n     pub files: Vec<SearchPathFile>,\n }\n \n-// The obvious implementation of `SearchPath::files` is a `Vec<PathBuf>`. But\n-// it is searched repeatedly by `find_library_crate`, and the searches involve\n-// checking the prefix and suffix of the filename of each `PathBuf`. This is\n-// doable, but very slow, because it involves calls to `file_name` and\n-// `extension` that are themselves slow.\n-//\n-// This type augments the `PathBuf` with an `Option<String>` containing the\n-// `PathBuf`'s filename. The prefix and suffix checking is much faster on the\n-// `Option<String>` than the `PathBuf`. (It's an `Option` because\n-// `Path::file_name` can fail; if that happens then all subsequent checking\n-// will also fail, which is fine.)\n+/// The obvious implementation of `SearchPath::files` is a `Vec<PathBuf>`. But\n+/// it is searched repeatedly by `find_library_crate`, and the searches involve\n+/// checking the prefix and suffix of the filename of each `PathBuf`. This is\n+/// doable, but very slow, because it involves calls to `file_name` and\n+/// `extension` that are themselves slow.\n+///\n+/// This type augments the `PathBuf` with an `Option<String>` containing the\n+/// `PathBuf`'s filename. The prefix and suffix checking is much faster on the\n+/// `Option<String>` than the `PathBuf`. (It's an `Option` because\n+/// `Path::file_name` can fail; if that happens then all subsequent checking\n+/// will also fail, which is fine.)\n #[derive(Clone, Debug)]\n pub struct SearchPathFile {\n     pub path: PathBuf,"}]}