{"sha": "cfb4ad2f2383d20f6446d8c63a3e992edbb8b8b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjRhZDJmMjM4M2QyMGY2NDQ2ZDhjNjNhM2U5OTJlZGJiOGI4Yjg=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2016-06-02T15:16:21Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2016-06-02T16:49:53Z"}, "message": "rustdoc: Don't generate empty files for stripped items\n\nWe need to traverse stripped modules to generate redirect pages, but we shouldn't generate\nanything else for them.\n\nThis now renders the file contents to a Vec before writing it to a file in one go. I think\nthat's probably a better strategy anyway.", "tree": {"sha": "0225082cae161242378738c78053a1fbe17e8d3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0225082cae161242378738c78053a1fbe17e8d3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb4ad2f2383d20f6446d8c63a3e992edbb8b8b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb4ad2f2383d20f6446d8c63a3e992edbb8b8b8", "html_url": "https://github.com/rust-lang/rust/commit/cfb4ad2f2383d20f6446d8c63a3e992edbb8b8b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb4ad2f2383d20f6446d8c63a3e992edbb8b8b8/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "433d70cda2e6d61d5bbb20423f0937a643cf34b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/433d70cda2e6d61d5bbb20423f0937a643cf34b4", "html_url": "https://github.com/rust-lang/rust/commit/433d70cda2e6d61d5bbb20423f0937a643cf34b4"}], "stats": {"total": 63, "additions": 46, "deletions": 17}, "files": [{"sha": "bc721a67b1c4a8218c306c33ab1f280c28bbfb78", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad2f2383d20f6446d8c63a3e992edbb8b8b8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad2f2383d20f6446d8c63a3e992edbb8b8b8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cfb4ad2f2383d20f6446d8c63a3e992edbb8b8b8", "patch": "@@ -1255,7 +1255,6 @@ impl Context {\n \n         info!(\"Recursing into {}\", self.dst.display());\n \n-        mkdir(&self.dst).unwrap();\n         let ret = f(self);\n \n         info!(\"Recursed; leaving {}\", self.dst.display());\n@@ -1299,7 +1298,7 @@ impl Context {\n     fn item<F>(&mut self, item: clean::Item, mut f: F) -> Result<(), Error> where\n         F: FnMut(&mut Context, clean::Item),\n     {\n-        fn render(w: File, cx: &Context, it: &clean::Item,\n+        fn render(writer: &mut io::Write, cx: &Context, it: &clean::Item,\n                   pushname: bool) -> io::Result<()> {\n             // A little unfortunate that this is done like this, but it sure\n             // does make formatting *a lot* nicer.\n@@ -1334,12 +1333,8 @@ impl Context {\n \n             reset_ids(true);\n \n-            // We have a huge number of calls to write, so try to alleviate some\n-            // of the pain by using a buffered writer instead of invoking the\n-            // write syscall all the time.\n-            let mut writer = BufWriter::new(w);\n             if !cx.render_redirect_pages {\n-                layout::render(&mut writer, &cx.shared.layout, &page,\n+                layout::render(writer, &cx.shared.layout, &page,\n                                &Sidebar{ cx: cx, item: it },\n                                &Item{ cx: cx, item: it },\n                                cx.shared.css_file_extension.is_some())?;\n@@ -1352,10 +1347,10 @@ impl Context {\n                         url.push_str(\"/\");\n                     }\n                     url.push_str(&item_path(it));\n-                    layout::redirect(&mut writer, &url)?;\n+                    layout::redirect(writer, &url)?;\n                 }\n             }\n-            writer.flush()\n+            Ok(())\n         }\n \n         // Stripped modules survive the rustdoc passes (i.e. `strip-private`)\n@@ -1376,9 +1371,16 @@ impl Context {\n             let mut item = Some(item);\n             self.recurse(name, |this| {\n                 let item = item.take().unwrap();\n-                let joint_dst = this.dst.join(\"index.html\");\n-                let dst = try_err!(File::create(&joint_dst), &joint_dst);\n-                try_err!(render(dst, this, &item, false), &joint_dst);\n+\n+                let mut buf = Vec::new();\n+                render(&mut buf, this, &item, false).unwrap();\n+                // buf will be empty if the module is stripped and there is no redirect for it\n+                if !buf.is_empty() {\n+                    let joint_dst = this.dst.join(\"index.html\");\n+                    try_err!(fs::create_dir_all(&this.dst), &this.dst);\n+                    let mut dst = try_err!(File::create(&joint_dst), &joint_dst);\n+                    try_err!(dst.write_all(&buf), &joint_dst);\n+                }\n \n                 let m = match item.inner {\n                     clean::StrippedItem(box clean::ModuleItem(m)) |\n@@ -1387,7 +1389,7 @@ impl Context {\n                 };\n \n                 // render sidebar-items.js used throughout this module\n-                {\n+                if !this.render_redirect_pages {\n                     let items = this.build_sidebar_items(&m);\n                     let js_dst = this.dst.join(\"sidebar-items.js\");\n                     let mut js_out = BufWriter::new(try_err!(File::create(&js_dst), &js_dst));\n@@ -1401,10 +1403,15 @@ impl Context {\n                 Ok(())\n             })\n         } else if item.name.is_some() {\n-            let joint_dst = self.dst.join(&item_path(&item));\n-\n-            let dst = try_err!(File::create(&joint_dst), &joint_dst);\n-            try_err!(render(dst, self, &item, true), &joint_dst);\n+            let mut buf = Vec::new();\n+            render(&mut buf, self, &item, true).unwrap();\n+            // buf will be empty if the item is stripped and there is no redirect for it\n+            if !buf.is_empty() {\n+                let joint_dst = self.dst.join(&item_path(&item));\n+                try_err!(fs::create_dir_all(&self.dst), &self.dst);\n+                let mut dst = try_err!(File::create(&joint_dst), &joint_dst);\n+                try_err!(dst.write_all(&buf), &joint_dst);\n+            }\n             Ok(())\n         } else {\n             Ok(())"}, {"sha": "8c0a7703c91da216c3e24106b2019d7e1d51b552", "filename": "src/test/rustdoc/issue-34025.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cfb4ad2f2383d20f6446d8c63a3e992edbb8b8b8/src%2Ftest%2Frustdoc%2Fissue-34025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb4ad2f2383d20f6446d8c63a3e992edbb8b8b8/src%2Ftest%2Frustdoc%2Fissue-34025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-34025.rs?ref=cfb4ad2f2383d20f6446d8c63a3e992edbb8b8b8", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @!has 'foo/sys/index.html'\n+// @!has 'foo/sys/sidebar-items.js'\n+#[doc(hidden)]\n+pub mod sys {\n+    extern \"C\" {\n+        // @!has 'foo/sys/fn.foo.html'\n+        #[doc(hidden)]\n+        pub fn foo();\n+    }\n+}"}]}