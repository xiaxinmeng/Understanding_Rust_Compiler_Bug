{"sha": "d685a9b564fe524865cda5713c527aaeb1ca6b1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ODVhOWI1NjRmZTUyNDg2NWNkYTU3MTNjNTI3YWFlYjFjYTZiMWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-01T10:41:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-01T10:41:20Z"}, "message": "Use From to get an owned AST", "tree": {"sha": "67908a8602d4eee25d78d6b467df8d431e29950c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67908a8602d4eee25d78d6b467df8d431e29950c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d685a9b564fe524865cda5713c527aaeb1ca6b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d685a9b564fe524865cda5713c527aaeb1ca6b1d", "html_url": "https://github.com/rust-lang/rust/commit/d685a9b564fe524865cda5713c527aaeb1ca6b1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d685a9b564fe524865cda5713c527aaeb1ca6b1d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ec9f958b39b23b945dd60088843d19fe6cef2d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec9f958b39b23b945dd60088843d19fe6cef2d7", "html_url": "https://github.com/rust-lang/rust/commit/3ec9f958b39b23b945dd60088843d19fe6cef2d7"}], "stats": {"total": 1103, "additions": 701, "deletions": 402}, "files": [{"sha": "755e0581904fa4bf0c4e066ee01661f8cb1762a5", "filename": "crates/ra_analysis/src/descriptors/function/imp.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d685a9b564fe524865cda5713c527aaeb1ca6b1d/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d685a9b564fe524865cda5713c527aaeb1ca6b1d/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs?ref=d685a9b564fe524865cda5713c527aaeb1ca6b1d", "patch": "@@ -11,8 +11,7 @@ use crate::descriptors::{\n /// TODO: this should return something more type-safe then `SyntaxNode`\n pub(crate) fn fn_syntax(db: &impl DescriptorDatabase, fn_id: FnId) -> FnDefNode {\n     let syntax = db.resolve_syntax_ptr(fn_id.0);\n-    let fn_def = FnDef::cast(syntax.borrowed()).unwrap();\n-    FnDefNode::new(fn_def)\n+    FnDef::cast(syntax.borrowed()).unwrap().into()\n }\n \n pub(crate) fn fn_scopes(db: &impl DescriptorDatabase, fn_id: FnId) -> Arc<FnScopes> {"}, {"sha": "f77795d056c953b3c40fd22cb14619e94a6351a4", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 693, "deletions": 396, "changes": 1089, "blob_url": "https://github.com/rust-lang/rust/blob/d685a9b564fe524865cda5713c527aaeb1ca6b1d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d685a9b564fe524865cda5713c527aaeb1ca6b1d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=d685a9b564fe524865cda5713c527aaeb1ca6b1d", "patch": "@@ -15,14 +15,17 @@ use crate::{\n pub struct ArgListNode(SyntaxNode);\n \n impl ArgListNode {\n-    pub fn new(ast: ArgList) -> ArgListNode {\n-        let syntax = ast.syntax().owned();\n-        ArgListNode(syntax)\n-    }\n     pub fn ast(&self) -> ArgList {\n         ArgList::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ArgList<'a>> for ArgListNode {\n+    fn from(ast: ArgList<'a>) -> ArgListNode {\n+        let syntax = ast.syntax().owned();\n+        ArgListNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ArgList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -50,14 +53,17 @@ impl<'a> ArgList<'a> {\n pub struct ArrayExprNode(SyntaxNode);\n \n impl ArrayExprNode {\n-    pub fn new(ast: ArrayExpr) -> ArrayExprNode {\n-        let syntax = ast.syntax().owned();\n-        ArrayExprNode(syntax)\n-    }\n     pub fn ast(&self) -> ArrayExpr {\n         ArrayExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ArrayExpr<'a>> for ArrayExprNode {\n+    fn from(ast: ArrayExpr<'a>) -> ArrayExprNode {\n+        let syntax = ast.syntax().owned();\n+        ArrayExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ArrayExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -81,14 +87,17 @@ impl<'a> ArrayExpr<'a> {}\n pub struct ArrayTypeNode(SyntaxNode);\n \n impl ArrayTypeNode {\n-    pub fn new(ast: ArrayType) -> ArrayTypeNode {\n-        let syntax = ast.syntax().owned();\n-        ArrayTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> ArrayType {\n         ArrayType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ArrayType<'a>> for ArrayTypeNode {\n+    fn from(ast: ArrayType<'a>) -> ArrayTypeNode {\n+        let syntax = ast.syntax().owned();\n+        ArrayTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ArrayType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -112,14 +121,17 @@ impl<'a> ArrayType<'a> {}\n pub struct AttrNode(SyntaxNode);\n \n impl AttrNode {\n-    pub fn new(ast: Attr) -> AttrNode {\n-        let syntax = ast.syntax().owned();\n-        AttrNode(syntax)\n-    }\n     pub fn ast(&self) -> Attr {\n         Attr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Attr<'a>> for AttrNode {\n+    fn from(ast: Attr<'a>) -> AttrNode {\n+        let syntax = ast.syntax().owned();\n+        AttrNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Attr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -147,14 +159,17 @@ impl<'a> Attr<'a> {\n pub struct BinExprNode(SyntaxNode);\n \n impl BinExprNode {\n-    pub fn new(ast: BinExpr) -> BinExprNode {\n-        let syntax = ast.syntax().owned();\n-        BinExprNode(syntax)\n-    }\n     pub fn ast(&self) -> BinExpr {\n         BinExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<BinExpr<'a>> for BinExprNode {\n+    fn from(ast: BinExpr<'a>) -> BinExprNode {\n+        let syntax = ast.syntax().owned();\n+        BinExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct BinExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -178,14 +193,17 @@ impl<'a> BinExpr<'a> {}\n pub struct BindPatNode(SyntaxNode);\n \n impl BindPatNode {\n-    pub fn new(ast: BindPat) -> BindPatNode {\n-        let syntax = ast.syntax().owned();\n-        BindPatNode(syntax)\n-    }\n     pub fn ast(&self) -> BindPat {\n         BindPat::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<BindPat<'a>> for BindPatNode {\n+    fn from(ast: BindPat<'a>) -> BindPatNode {\n+        let syntax = ast.syntax().owned();\n+        BindPatNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct BindPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -210,14 +228,17 @@ impl<'a> BindPat<'a> {}\n pub struct BlockNode(SyntaxNode);\n \n impl BlockNode {\n-    pub fn new(ast: Block) -> BlockNode {\n-        let syntax = ast.syntax().owned();\n-        BlockNode(syntax)\n-    }\n     pub fn ast(&self) -> Block {\n         Block::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Block<'a>> for BlockNode {\n+    fn from(ast: Block<'a>) -> BlockNode {\n+        let syntax = ast.syntax().owned();\n+        BlockNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Block<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -249,14 +270,17 @@ impl<'a> Block<'a> {\n pub struct BlockExprNode(SyntaxNode);\n \n impl BlockExprNode {\n-    pub fn new(ast: BlockExpr) -> BlockExprNode {\n-        let syntax = ast.syntax().owned();\n-        BlockExprNode(syntax)\n-    }\n     pub fn ast(&self) -> BlockExpr {\n         BlockExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<BlockExpr<'a>> for BlockExprNode {\n+    fn from(ast: BlockExpr<'a>) -> BlockExprNode {\n+        let syntax = ast.syntax().owned();\n+        BlockExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct BlockExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -284,14 +308,17 @@ impl<'a> BlockExpr<'a> {\n pub struct BreakExprNode(SyntaxNode);\n \n impl BreakExprNode {\n-    pub fn new(ast: BreakExpr) -> BreakExprNode {\n-        let syntax = ast.syntax().owned();\n-        BreakExprNode(syntax)\n-    }\n     pub fn ast(&self) -> BreakExpr {\n         BreakExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<BreakExpr<'a>> for BreakExprNode {\n+    fn from(ast: BreakExpr<'a>) -> BreakExprNode {\n+        let syntax = ast.syntax().owned();\n+        BreakExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct BreakExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -315,14 +342,17 @@ impl<'a> BreakExpr<'a> {}\n pub struct CallExprNode(SyntaxNode);\n \n impl CallExprNode {\n-    pub fn new(ast: CallExpr) -> CallExprNode {\n-        let syntax = ast.syntax().owned();\n-        CallExprNode(syntax)\n-    }\n     pub fn ast(&self) -> CallExpr {\n         CallExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<CallExpr<'a>> for CallExprNode {\n+    fn from(ast: CallExpr<'a>) -> CallExprNode {\n+        let syntax = ast.syntax().owned();\n+        CallExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct CallExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -351,14 +381,17 @@ impl<'a> CallExpr<'a> {\n pub struct CastExprNode(SyntaxNode);\n \n impl CastExprNode {\n-    pub fn new(ast: CastExpr) -> CastExprNode {\n-        let syntax = ast.syntax().owned();\n-        CastExprNode(syntax)\n-    }\n     pub fn ast(&self) -> CastExpr {\n         CastExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<CastExpr<'a>> for CastExprNode {\n+    fn from(ast: CastExpr<'a>) -> CastExprNode {\n+        let syntax = ast.syntax().owned();\n+        CastExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct CastExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -382,14 +415,17 @@ impl<'a> CastExpr<'a> {}\n pub struct CommentNode(SyntaxNode);\n \n impl CommentNode {\n-    pub fn new(ast: Comment) -> CommentNode {\n-        let syntax = ast.syntax().owned();\n-        CommentNode(syntax)\n-    }\n     pub fn ast(&self) -> Comment {\n         Comment::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Comment<'a>> for CommentNode {\n+    fn from(ast: Comment<'a>) -> CommentNode {\n+        let syntax = ast.syntax().owned();\n+        CommentNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Comment<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -413,14 +449,17 @@ impl<'a> Comment<'a> {}\n pub struct ConditionNode(SyntaxNode);\n \n impl ConditionNode {\n-    pub fn new(ast: Condition) -> ConditionNode {\n-        let syntax = ast.syntax().owned();\n-        ConditionNode(syntax)\n-    }\n     pub fn ast(&self) -> Condition {\n         Condition::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Condition<'a>> for ConditionNode {\n+    fn from(ast: Condition<'a>) -> ConditionNode {\n+        let syntax = ast.syntax().owned();\n+        ConditionNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Condition<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -452,14 +491,17 @@ impl<'a> Condition<'a> {\n pub struct ConstDefNode(SyntaxNode);\n \n impl ConstDefNode {\n-    pub fn new(ast: ConstDef) -> ConstDefNode {\n-        let syntax = ast.syntax().owned();\n-        ConstDefNode(syntax)\n-    }\n     pub fn ast(&self) -> ConstDef {\n         ConstDef::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ConstDef<'a>> for ConstDefNode {\n+    fn from(ast: ConstDef<'a>) -> ConstDefNode {\n+        let syntax = ast.syntax().owned();\n+        ConstDefNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ConstDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -486,14 +528,17 @@ impl<'a> ConstDef<'a> {}\n pub struct ContinueExprNode(SyntaxNode);\n \n impl ContinueExprNode {\n-    pub fn new(ast: ContinueExpr) -> ContinueExprNode {\n-        let syntax = ast.syntax().owned();\n-        ContinueExprNode(syntax)\n-    }\n     pub fn ast(&self) -> ContinueExpr {\n         ContinueExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ContinueExpr<'a>> for ContinueExprNode {\n+    fn from(ast: ContinueExpr<'a>) -> ContinueExprNode {\n+        let syntax = ast.syntax().owned();\n+        ContinueExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ContinueExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -517,14 +562,17 @@ impl<'a> ContinueExpr<'a> {}\n pub struct DynTraitTypeNode(SyntaxNode);\n \n impl DynTraitTypeNode {\n-    pub fn new(ast: DynTraitType) -> DynTraitTypeNode {\n-        let syntax = ast.syntax().owned();\n-        DynTraitTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> DynTraitType {\n         DynTraitType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<DynTraitType<'a>> for DynTraitTypeNode {\n+    fn from(ast: DynTraitType<'a>) -> DynTraitTypeNode {\n+        let syntax = ast.syntax().owned();\n+        DynTraitTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct DynTraitType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -548,14 +596,17 @@ impl<'a> DynTraitType<'a> {}\n pub struct EnumDefNode(SyntaxNode);\n \n impl EnumDefNode {\n-    pub fn new(ast: EnumDef) -> EnumDefNode {\n-        let syntax = ast.syntax().owned();\n-        EnumDefNode(syntax)\n-    }\n     pub fn ast(&self) -> EnumDef {\n         EnumDef::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<EnumDef<'a>> for EnumDefNode {\n+    fn from(ast: EnumDef<'a>) -> EnumDefNode {\n+        let syntax = ast.syntax().owned();\n+        EnumDefNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct EnumDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -582,14 +633,17 @@ impl<'a> EnumDef<'a> {}\n pub struct ExprNode(SyntaxNode);\n \n impl ExprNode {\n-    pub fn new(ast: Expr) -> ExprNode {\n-        let syntax = ast.syntax().owned();\n-        ExprNode(syntax)\n-    }\n     pub fn ast(&self) -> Expr {\n         Expr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Expr<'a>> for ExprNode {\n+    fn from(ast: Expr<'a>) -> ExprNode {\n+        let syntax = ast.syntax().owned();\n+        ExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum Expr<'a> {\n     TupleExpr(TupleExpr<'a>),\n@@ -710,14 +764,17 @@ impl<'a> Expr<'a> {}\n pub struct ExprStmtNode(SyntaxNode);\n \n impl ExprStmtNode {\n-    pub fn new(ast: ExprStmt) -> ExprStmtNode {\n-        let syntax = ast.syntax().owned();\n-        ExprStmtNode(syntax)\n-    }\n     pub fn ast(&self) -> ExprStmt {\n         ExprStmt::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ExprStmt<'a>> for ExprStmtNode {\n+    fn from(ast: ExprStmt<'a>) -> ExprStmtNode {\n+        let syntax = ast.syntax().owned();\n+        ExprStmtNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ExprStmt<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -745,14 +802,17 @@ impl<'a> ExprStmt<'a> {\n pub struct ExternCrateItemNode(SyntaxNode);\n \n impl ExternCrateItemNode {\n-    pub fn new(ast: ExternCrateItem) -> ExternCrateItemNode {\n-        let syntax = ast.syntax().owned();\n-        ExternCrateItemNode(syntax)\n-    }\n     pub fn ast(&self) -> ExternCrateItem {\n         ExternCrateItem::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ExternCrateItem<'a>> for ExternCrateItemNode {\n+    fn from(ast: ExternCrateItem<'a>) -> ExternCrateItemNode {\n+        let syntax = ast.syntax().owned();\n+        ExternCrateItemNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ExternCrateItem<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -776,14 +836,17 @@ impl<'a> ExternCrateItem<'a> {}\n pub struct FieldExprNode(SyntaxNode);\n \n impl FieldExprNode {\n-    pub fn new(ast: FieldExpr) -> FieldExprNode {\n-        let syntax = ast.syntax().owned();\n-        FieldExprNode(syntax)\n-    }\n     pub fn ast(&self) -> FieldExpr {\n         FieldExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<FieldExpr<'a>> for FieldExprNode {\n+    fn from(ast: FieldExpr<'a>) -> FieldExprNode {\n+        let syntax = ast.syntax().owned();\n+        FieldExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct FieldExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -807,14 +870,17 @@ impl<'a> FieldExpr<'a> {}\n pub struct FieldPatListNode(SyntaxNode);\n \n impl FieldPatListNode {\n-    pub fn new(ast: FieldPatList) -> FieldPatListNode {\n-        let syntax = ast.syntax().owned();\n-        FieldPatListNode(syntax)\n-    }\n     pub fn ast(&self) -> FieldPatList {\n         FieldPatList::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<FieldPatList<'a>> for FieldPatListNode {\n+    fn from(ast: FieldPatList<'a>) -> FieldPatListNode {\n+        let syntax = ast.syntax().owned();\n+        FieldPatListNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct FieldPatList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -838,14 +904,17 @@ impl<'a> FieldPatList<'a> {}\n pub struct FnDefNode(SyntaxNode);\n \n impl FnDefNode {\n-    pub fn new(ast: FnDef) -> FnDefNode {\n-        let syntax = ast.syntax().owned();\n-        FnDefNode(syntax)\n-    }\n     pub fn ast(&self) -> FnDef {\n         FnDef::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<FnDef<'a>> for FnDefNode {\n+    fn from(ast: FnDef<'a>) -> FnDefNode {\n+        let syntax = ast.syntax().owned();\n+        FnDefNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct FnDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -885,14 +954,17 @@ impl<'a> FnDef<'a> {\n pub struct FnPointerTypeNode(SyntaxNode);\n \n impl FnPointerTypeNode {\n-    pub fn new(ast: FnPointerType) -> FnPointerTypeNode {\n-        let syntax = ast.syntax().owned();\n-        FnPointerTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> FnPointerType {\n         FnPointerType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<FnPointerType<'a>> for FnPointerTypeNode {\n+    fn from(ast: FnPointerType<'a>) -> FnPointerTypeNode {\n+        let syntax = ast.syntax().owned();\n+        FnPointerTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct FnPointerType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -916,14 +988,17 @@ impl<'a> FnPointerType<'a> {}\n pub struct ForExprNode(SyntaxNode);\n \n impl ForExprNode {\n-    pub fn new(ast: ForExpr) -> ForExprNode {\n-        let syntax = ast.syntax().owned();\n-        ForExprNode(syntax)\n-    }\n     pub fn ast(&self) -> ForExpr {\n         ForExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ForExpr<'a>> for ForExprNode {\n+    fn from(ast: ForExpr<'a>) -> ForExprNode {\n+        let syntax = ast.syntax().owned();\n+        ForExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ForExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -956,14 +1031,17 @@ impl<'a> ForExpr<'a> {\n pub struct ForTypeNode(SyntaxNode);\n \n impl ForTypeNode {\n-    pub fn new(ast: ForType) -> ForTypeNode {\n-        let syntax = ast.syntax().owned();\n-        ForTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> ForType {\n         ForType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ForType<'a>> for ForTypeNode {\n+    fn from(ast: ForType<'a>) -> ForTypeNode {\n+        let syntax = ast.syntax().owned();\n+        ForTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ForType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -987,14 +1065,17 @@ impl<'a> ForType<'a> {}\n pub struct IfExprNode(SyntaxNode);\n \n impl IfExprNode {\n-    pub fn new(ast: IfExpr) -> IfExprNode {\n-        let syntax = ast.syntax().owned();\n-        IfExprNode(syntax)\n-    }\n     pub fn ast(&self) -> IfExpr {\n         IfExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<IfExpr<'a>> for IfExprNode {\n+    fn from(ast: IfExpr<'a>) -> IfExprNode {\n+        let syntax = ast.syntax().owned();\n+        IfExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct IfExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1022,14 +1103,17 @@ impl<'a> IfExpr<'a> {\n pub struct ImplItemNode(SyntaxNode);\n \n impl ImplItemNode {\n-    pub fn new(ast: ImplItem) -> ImplItemNode {\n-        let syntax = ast.syntax().owned();\n-        ImplItemNode(syntax)\n-    }\n     pub fn ast(&self) -> ImplItem {\n         ImplItem::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ImplItem<'a>> for ImplItemNode {\n+    fn from(ast: ImplItem<'a>) -> ImplItemNode {\n+        let syntax = ast.syntax().owned();\n+        ImplItemNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ImplItem<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1053,14 +1137,17 @@ impl<'a> ImplItem<'a> {}\n pub struct ImplTraitTypeNode(SyntaxNode);\n \n impl ImplTraitTypeNode {\n-    pub fn new(ast: ImplTraitType) -> ImplTraitTypeNode {\n-        let syntax = ast.syntax().owned();\n-        ImplTraitTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> ImplTraitType {\n         ImplTraitType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ImplTraitType<'a>> for ImplTraitTypeNode {\n+    fn from(ast: ImplTraitType<'a>) -> ImplTraitTypeNode {\n+        let syntax = ast.syntax().owned();\n+        ImplTraitTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ImplTraitType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1084,14 +1171,17 @@ impl<'a> ImplTraitType<'a> {}\n pub struct IndexExprNode(SyntaxNode);\n \n impl IndexExprNode {\n-    pub fn new(ast: IndexExpr) -> IndexExprNode {\n-        let syntax = ast.syntax().owned();\n-        IndexExprNode(syntax)\n-    }\n     pub fn ast(&self) -> IndexExpr {\n         IndexExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<IndexExpr<'a>> for IndexExprNode {\n+    fn from(ast: IndexExpr<'a>) -> IndexExprNode {\n+        let syntax = ast.syntax().owned();\n+        IndexExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct IndexExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1115,14 +1205,17 @@ impl<'a> IndexExpr<'a> {}\n pub struct ItemListNode(SyntaxNode);\n \n impl ItemListNode {\n-    pub fn new(ast: ItemList) -> ItemListNode {\n-        let syntax = ast.syntax().owned();\n-        ItemListNode(syntax)\n-    }\n     pub fn ast(&self) -> ItemList {\n         ItemList::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ItemList<'a>> for ItemListNode {\n+    fn from(ast: ItemList<'a>) -> ItemListNode {\n+        let syntax = ast.syntax().owned();\n+        ItemListNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ItemList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1148,14 +1241,17 @@ impl<'a> ItemList<'a> {}\n pub struct LabelNode(SyntaxNode);\n \n impl LabelNode {\n-    pub fn new(ast: Label) -> LabelNode {\n-        let syntax = ast.syntax().owned();\n-        LabelNode(syntax)\n-    }\n     pub fn ast(&self) -> Label {\n         Label::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Label<'a>> for LabelNode {\n+    fn from(ast: Label<'a>) -> LabelNode {\n+        let syntax = ast.syntax().owned();\n+        LabelNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Label<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1179,14 +1275,17 @@ impl<'a> Label<'a> {}\n pub struct LambdaExprNode(SyntaxNode);\n \n impl LambdaExprNode {\n-    pub fn new(ast: LambdaExpr) -> LambdaExprNode {\n-        let syntax = ast.syntax().owned();\n-        LambdaExprNode(syntax)\n-    }\n     pub fn ast(&self) -> LambdaExpr {\n         LambdaExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<LambdaExpr<'a>> for LambdaExprNode {\n+    fn from(ast: LambdaExpr<'a>) -> LambdaExprNode {\n+        let syntax = ast.syntax().owned();\n+        LambdaExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct LambdaExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1218,14 +1317,17 @@ impl<'a> LambdaExpr<'a> {\n pub struct LetStmtNode(SyntaxNode);\n \n impl LetStmtNode {\n-    pub fn new(ast: LetStmt) -> LetStmtNode {\n-        let syntax = ast.syntax().owned();\n-        LetStmtNode(syntax)\n-    }\n     pub fn ast(&self) -> LetStmt {\n         LetStmt::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<LetStmt<'a>> for LetStmtNode {\n+    fn from(ast: LetStmt<'a>) -> LetStmtNode {\n+        let syntax = ast.syntax().owned();\n+        LetStmtNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct LetStmt<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1257,14 +1359,17 @@ impl<'a> LetStmt<'a> {\n pub struct LifetimeNode(SyntaxNode);\n \n impl LifetimeNode {\n-    pub fn new(ast: Lifetime) -> LifetimeNode {\n-        let syntax = ast.syntax().owned();\n-        LifetimeNode(syntax)\n-    }\n     pub fn ast(&self) -> Lifetime {\n         Lifetime::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Lifetime<'a>> for LifetimeNode {\n+    fn from(ast: Lifetime<'a>) -> LifetimeNode {\n+        let syntax = ast.syntax().owned();\n+        LifetimeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Lifetime<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1288,14 +1393,17 @@ impl<'a> Lifetime<'a> {}\n pub struct LifetimeParamNode(SyntaxNode);\n \n impl LifetimeParamNode {\n-    pub fn new(ast: LifetimeParam) -> LifetimeParamNode {\n-        let syntax = ast.syntax().owned();\n-        LifetimeParamNode(syntax)\n-    }\n     pub fn ast(&self) -> LifetimeParam {\n         LifetimeParam::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<LifetimeParam<'a>> for LifetimeParamNode {\n+    fn from(ast: LifetimeParam<'a>) -> LifetimeParamNode {\n+        let syntax = ast.syntax().owned();\n+        LifetimeParamNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct LifetimeParam<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1323,14 +1431,17 @@ impl<'a> LifetimeParam<'a> {\n pub struct LiteralNode(SyntaxNode);\n \n impl LiteralNode {\n-    pub fn new(ast: Literal) -> LiteralNode {\n-        let syntax = ast.syntax().owned();\n-        LiteralNode(syntax)\n-    }\n     pub fn ast(&self) -> Literal {\n         Literal::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Literal<'a>> for LiteralNode {\n+    fn from(ast: Literal<'a>) -> LiteralNode {\n+        let syntax = ast.syntax().owned();\n+        LiteralNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Literal<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1354,14 +1465,17 @@ impl<'a> Literal<'a> {}\n pub struct LoopExprNode(SyntaxNode);\n \n impl LoopExprNode {\n-    pub fn new(ast: LoopExpr) -> LoopExprNode {\n-        let syntax = ast.syntax().owned();\n-        LoopExprNode(syntax)\n-    }\n     pub fn ast(&self) -> LoopExpr {\n         LoopExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<LoopExpr<'a>> for LoopExprNode {\n+    fn from(ast: LoopExpr<'a>) -> LoopExprNode {\n+        let syntax = ast.syntax().owned();\n+        LoopExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct LoopExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1386,14 +1500,17 @@ impl<'a> LoopExpr<'a> {}\n pub struct MatchArmNode(SyntaxNode);\n \n impl MatchArmNode {\n-    pub fn new(ast: MatchArm) -> MatchArmNode {\n-        let syntax = ast.syntax().owned();\n-        MatchArmNode(syntax)\n-    }\n     pub fn ast(&self) -> MatchArm {\n         MatchArm::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<MatchArm<'a>> for MatchArmNode {\n+    fn from(ast: MatchArm<'a>) -> MatchArmNode {\n+        let syntax = ast.syntax().owned();\n+        MatchArmNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct MatchArm<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1429,14 +1546,17 @@ impl<'a> MatchArm<'a> {\n pub struct MatchArmListNode(SyntaxNode);\n \n impl MatchArmListNode {\n-    pub fn new(ast: MatchArmList) -> MatchArmListNode {\n-        let syntax = ast.syntax().owned();\n-        MatchArmListNode(syntax)\n-    }\n     pub fn ast(&self) -> MatchArmList {\n         MatchArmList::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<MatchArmList<'a>> for MatchArmListNode {\n+    fn from(ast: MatchArmList<'a>) -> MatchArmListNode {\n+        let syntax = ast.syntax().owned();\n+        MatchArmListNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct MatchArmList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1464,14 +1584,17 @@ impl<'a> MatchArmList<'a> {\n pub struct MatchExprNode(SyntaxNode);\n \n impl MatchExprNode {\n-    pub fn new(ast: MatchExpr) -> MatchExprNode {\n-        let syntax = ast.syntax().owned();\n-        MatchExprNode(syntax)\n-    }\n     pub fn ast(&self) -> MatchExpr {\n         MatchExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<MatchExpr<'a>> for MatchExprNode {\n+    fn from(ast: MatchExpr<'a>) -> MatchExprNode {\n+        let syntax = ast.syntax().owned();\n+        MatchExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct MatchExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1503,14 +1626,17 @@ impl<'a> MatchExpr<'a> {\n pub struct MatchGuardNode(SyntaxNode);\n \n impl MatchGuardNode {\n-    pub fn new(ast: MatchGuard) -> MatchGuardNode {\n-        let syntax = ast.syntax().owned();\n-        MatchGuardNode(syntax)\n-    }\n     pub fn ast(&self) -> MatchGuard {\n         MatchGuard::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<MatchGuard<'a>> for MatchGuardNode {\n+    fn from(ast: MatchGuard<'a>) -> MatchGuardNode {\n+        let syntax = ast.syntax().owned();\n+        MatchGuardNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct MatchGuard<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1534,14 +1660,17 @@ impl<'a> MatchGuard<'a> {}\n pub struct MethodCallExprNode(SyntaxNode);\n \n impl MethodCallExprNode {\n-    pub fn new(ast: MethodCallExpr) -> MethodCallExprNode {\n-        let syntax = ast.syntax().owned();\n-        MethodCallExprNode(syntax)\n-    }\n     pub fn ast(&self) -> MethodCallExpr {\n         MethodCallExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<MethodCallExpr<'a>> for MethodCallExprNode {\n+    fn from(ast: MethodCallExpr<'a>) -> MethodCallExprNode {\n+        let syntax = ast.syntax().owned();\n+        MethodCallExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct MethodCallExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1570,14 +1699,17 @@ impl<'a> MethodCallExpr<'a> {\n pub struct ModuleNode(SyntaxNode);\n \n impl ModuleNode {\n-    pub fn new(ast: Module) -> ModuleNode {\n-        let syntax = ast.syntax().owned();\n-        ModuleNode(syntax)\n-    }\n     pub fn ast(&self) -> Module {\n         Module::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Module<'a>> for ModuleNode {\n+    fn from(ast: Module<'a>) -> ModuleNode {\n+        let syntax = ast.syntax().owned();\n+        ModuleNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Module<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1607,14 +1739,17 @@ impl<'a> Module<'a> {\n pub struct ModuleItemNode(SyntaxNode);\n \n impl ModuleItemNode {\n-    pub fn new(ast: ModuleItem) -> ModuleItemNode {\n-        let syntax = ast.syntax().owned();\n-        ModuleItemNode(syntax)\n-    }\n     pub fn ast(&self) -> ModuleItem {\n         ModuleItem::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ModuleItem<'a>> for ModuleItemNode {\n+    fn from(ast: ModuleItem<'a>) -> ModuleItemNode {\n+        let syntax = ast.syntax().owned();\n+        ModuleItemNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum ModuleItem<'a> {\n     StructDef(StructDef<'a>),\n@@ -1672,14 +1807,17 @@ impl<'a> ModuleItem<'a> {}\n pub struct NameNode(SyntaxNode);\n \n impl NameNode {\n-    pub fn new(ast: Name) -> NameNode {\n-        let syntax = ast.syntax().owned();\n-        NameNode(syntax)\n-    }\n     pub fn ast(&self) -> Name {\n         Name::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Name<'a>> for NameNode {\n+    fn from(ast: Name<'a>) -> NameNode {\n+        let syntax = ast.syntax().owned();\n+        NameNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Name<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1703,14 +1841,17 @@ impl<'a> Name<'a> {}\n pub struct NameRefNode(SyntaxNode);\n \n impl NameRefNode {\n-    pub fn new(ast: NameRef) -> NameRefNode {\n-        let syntax = ast.syntax().owned();\n-        NameRefNode(syntax)\n-    }\n     pub fn ast(&self) -> NameRef {\n         NameRef::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<NameRef<'a>> for NameRefNode {\n+    fn from(ast: NameRef<'a>) -> NameRefNode {\n+        let syntax = ast.syntax().owned();\n+        NameRefNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct NameRef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1734,14 +1875,17 @@ impl<'a> NameRef<'a> {}\n pub struct NamedFieldNode(SyntaxNode);\n \n impl NamedFieldNode {\n-    pub fn new(ast: NamedField) -> NamedFieldNode {\n-        let syntax = ast.syntax().owned();\n-        NamedFieldNode(syntax)\n-    }\n     pub fn ast(&self) -> NamedField {\n         NamedField::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<NamedField<'a>> for NamedFieldNode {\n+    fn from(ast: NamedField<'a>) -> NamedFieldNode {\n+        let syntax = ast.syntax().owned();\n+        NamedFieldNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct NamedField<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1765,14 +1909,17 @@ impl<'a> NamedField<'a> {}\n pub struct NamedFieldDefNode(SyntaxNode);\n \n impl NamedFieldDefNode {\n-    pub fn new(ast: NamedFieldDef) -> NamedFieldDefNode {\n-        let syntax = ast.syntax().owned();\n-        NamedFieldDefNode(syntax)\n-    }\n     pub fn ast(&self) -> NamedFieldDef {\n         NamedFieldDef::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<NamedFieldDef<'a>> for NamedFieldDefNode {\n+    fn from(ast: NamedFieldDef<'a>) -> NamedFieldDefNode {\n+        let syntax = ast.syntax().owned();\n+        NamedFieldDefNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct NamedFieldDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1798,14 +1945,17 @@ impl<'a> NamedFieldDef<'a> {}\n pub struct NamedFieldListNode(SyntaxNode);\n \n impl NamedFieldListNode {\n-    pub fn new(ast: NamedFieldList) -> NamedFieldListNode {\n-        let syntax = ast.syntax().owned();\n-        NamedFieldListNode(syntax)\n-    }\n     pub fn ast(&self) -> NamedFieldList {\n         NamedFieldList::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<NamedFieldList<'a>> for NamedFieldListNode {\n+    fn from(ast: NamedFieldList<'a>) -> NamedFieldListNode {\n+        let syntax = ast.syntax().owned();\n+        NamedFieldListNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct NamedFieldList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1829,14 +1979,17 @@ impl<'a> NamedFieldList<'a> {}\n pub struct NeverTypeNode(SyntaxNode);\n \n impl NeverTypeNode {\n-    pub fn new(ast: NeverType) -> NeverTypeNode {\n-        let syntax = ast.syntax().owned();\n-        NeverTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> NeverType {\n         NeverType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<NeverType<'a>> for NeverTypeNode {\n+    fn from(ast: NeverType<'a>) -> NeverTypeNode {\n+        let syntax = ast.syntax().owned();\n+        NeverTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct NeverType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1860,14 +2013,17 @@ impl<'a> NeverType<'a> {}\n pub struct NominalDefNode(SyntaxNode);\n \n impl NominalDefNode {\n-    pub fn new(ast: NominalDef) -> NominalDefNode {\n-        let syntax = ast.syntax().owned();\n-        NominalDefNode(syntax)\n-    }\n     pub fn ast(&self) -> NominalDef {\n         NominalDef::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<NominalDef<'a>> for NominalDefNode {\n+    fn from(ast: NominalDef<'a>) -> NominalDefNode {\n+        let syntax = ast.syntax().owned();\n+        NominalDefNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum NominalDef<'a> {\n     StructDef(StructDef<'a>),\n@@ -1901,14 +2057,17 @@ impl<'a> NominalDef<'a> {}\n pub struct ParamNode(SyntaxNode);\n \n impl ParamNode {\n-    pub fn new(ast: Param) -> ParamNode {\n-        let syntax = ast.syntax().owned();\n-        ParamNode(syntax)\n-    }\n     pub fn ast(&self) -> Param {\n         Param::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Param<'a>> for ParamNode {\n+    fn from(ast: Param<'a>) -> ParamNode {\n+        let syntax = ast.syntax().owned();\n+        ParamNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Param<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1936,14 +2095,17 @@ impl<'a> Param<'a> {\n pub struct ParamListNode(SyntaxNode);\n \n impl ParamListNode {\n-    pub fn new(ast: ParamList) -> ParamListNode {\n-        let syntax = ast.syntax().owned();\n-        ParamListNode(syntax)\n-    }\n     pub fn ast(&self) -> ParamList {\n         ParamList::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ParamList<'a>> for ParamListNode {\n+    fn from(ast: ParamList<'a>) -> ParamListNode {\n+        let syntax = ast.syntax().owned();\n+        ParamListNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ParamList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1975,14 +2137,17 @@ impl<'a> ParamList<'a> {\n pub struct ParenExprNode(SyntaxNode);\n \n impl ParenExprNode {\n-    pub fn new(ast: ParenExpr) -> ParenExprNode {\n-        let syntax = ast.syntax().owned();\n-        ParenExprNode(syntax)\n-    }\n     pub fn ast(&self) -> ParenExpr {\n         ParenExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ParenExpr<'a>> for ParenExprNode {\n+    fn from(ast: ParenExpr<'a>) -> ParenExprNode {\n+        let syntax = ast.syntax().owned();\n+        ParenExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ParenExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2006,14 +2171,17 @@ impl<'a> ParenExpr<'a> {}\n pub struct ParenTypeNode(SyntaxNode);\n \n impl ParenTypeNode {\n-    pub fn new(ast: ParenType) -> ParenTypeNode {\n-        let syntax = ast.syntax().owned();\n-        ParenTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> ParenType {\n         ParenType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ParenType<'a>> for ParenTypeNode {\n+    fn from(ast: ParenType<'a>) -> ParenTypeNode {\n+        let syntax = ast.syntax().owned();\n+        ParenTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ParenType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2037,14 +2205,17 @@ impl<'a> ParenType<'a> {}\n pub struct PatNode(SyntaxNode);\n \n impl PatNode {\n-    pub fn new(ast: Pat) -> PatNode {\n-        let syntax = ast.syntax().owned();\n-        PatNode(syntax)\n-    }\n     pub fn ast(&self) -> Pat {\n         Pat::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Pat<'a>> for PatNode {\n+    fn from(ast: Pat<'a>) -> PatNode {\n+        let syntax = ast.syntax().owned();\n+        PatNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum Pat<'a> {\n     RefPat(RefPat<'a>),\n@@ -2099,14 +2270,17 @@ impl<'a> Pat<'a> {}\n pub struct PathNode(SyntaxNode);\n \n impl PathNode {\n-    pub fn new(ast: Path) -> PathNode {\n-        let syntax = ast.syntax().owned();\n-        PathNode(syntax)\n-    }\n     pub fn ast(&self) -> Path {\n         Path::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Path<'a>> for PathNode {\n+    fn from(ast: Path<'a>) -> PathNode {\n+        let syntax = ast.syntax().owned();\n+        PathNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Path<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2138,14 +2312,17 @@ impl<'a> Path<'a> {\n pub struct PathExprNode(SyntaxNode);\n \n impl PathExprNode {\n-    pub fn new(ast: PathExpr) -> PathExprNode {\n-        let syntax = ast.syntax().owned();\n-        PathExprNode(syntax)\n-    }\n     pub fn ast(&self) -> PathExpr {\n         PathExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<PathExpr<'a>> for PathExprNode {\n+    fn from(ast: PathExpr<'a>) -> PathExprNode {\n+        let syntax = ast.syntax().owned();\n+        PathExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PathExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2173,14 +2350,17 @@ impl<'a> PathExpr<'a> {\n pub struct PathPatNode(SyntaxNode);\n \n impl PathPatNode {\n-    pub fn new(ast: PathPat) -> PathPatNode {\n-        let syntax = ast.syntax().owned();\n-        PathPatNode(syntax)\n-    }\n     pub fn ast(&self) -> PathPat {\n         PathPat::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<PathPat<'a>> for PathPatNode {\n+    fn from(ast: PathPat<'a>) -> PathPatNode {\n+        let syntax = ast.syntax().owned();\n+        PathPatNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PathPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2204,14 +2384,17 @@ impl<'a> PathPat<'a> {}\n pub struct PathSegmentNode(SyntaxNode);\n \n impl PathSegmentNode {\n-    pub fn new(ast: PathSegment) -> PathSegmentNode {\n-        let syntax = ast.syntax().owned();\n-        PathSegmentNode(syntax)\n-    }\n     pub fn ast(&self) -> PathSegment {\n         PathSegment::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<PathSegment<'a>> for PathSegmentNode {\n+    fn from(ast: PathSegment<'a>) -> PathSegmentNode {\n+        let syntax = ast.syntax().owned();\n+        PathSegmentNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PathSegment<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2239,14 +2422,17 @@ impl<'a> PathSegment<'a> {\n pub struct PathTypeNode(SyntaxNode);\n \n impl PathTypeNode {\n-    pub fn new(ast: PathType) -> PathTypeNode {\n-        let syntax = ast.syntax().owned();\n-        PathTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> PathType {\n         PathType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<PathType<'a>> for PathTypeNode {\n+    fn from(ast: PathType<'a>) -> PathTypeNode {\n+        let syntax = ast.syntax().owned();\n+        PathTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PathType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2270,14 +2456,17 @@ impl<'a> PathType<'a> {}\n pub struct PlaceholderPatNode(SyntaxNode);\n \n impl PlaceholderPatNode {\n-    pub fn new(ast: PlaceholderPat) -> PlaceholderPatNode {\n-        let syntax = ast.syntax().owned();\n-        PlaceholderPatNode(syntax)\n-    }\n     pub fn ast(&self) -> PlaceholderPat {\n         PlaceholderPat::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<PlaceholderPat<'a>> for PlaceholderPatNode {\n+    fn from(ast: PlaceholderPat<'a>) -> PlaceholderPatNode {\n+        let syntax = ast.syntax().owned();\n+        PlaceholderPatNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PlaceholderPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2301,14 +2490,17 @@ impl<'a> PlaceholderPat<'a> {}\n pub struct PlaceholderTypeNode(SyntaxNode);\n \n impl PlaceholderTypeNode {\n-    pub fn new(ast: PlaceholderType) -> PlaceholderTypeNode {\n-        let syntax = ast.syntax().owned();\n-        PlaceholderTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> PlaceholderType {\n         PlaceholderType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<PlaceholderType<'a>> for PlaceholderTypeNode {\n+    fn from(ast: PlaceholderType<'a>) -> PlaceholderTypeNode {\n+        let syntax = ast.syntax().owned();\n+        PlaceholderTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PlaceholderType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2332,14 +2524,17 @@ impl<'a> PlaceholderType<'a> {}\n pub struct PointerTypeNode(SyntaxNode);\n \n impl PointerTypeNode {\n-    pub fn new(ast: PointerType) -> PointerTypeNode {\n-        let syntax = ast.syntax().owned();\n-        PointerTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> PointerType {\n         PointerType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<PointerType<'a>> for PointerTypeNode {\n+    fn from(ast: PointerType<'a>) -> PointerTypeNode {\n+        let syntax = ast.syntax().owned();\n+        PointerTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PointerType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2363,14 +2558,17 @@ impl<'a> PointerType<'a> {}\n pub struct PrefixExprNode(SyntaxNode);\n \n impl PrefixExprNode {\n-    pub fn new(ast: PrefixExpr) -> PrefixExprNode {\n-        let syntax = ast.syntax().owned();\n-        PrefixExprNode(syntax)\n-    }\n     pub fn ast(&self) -> PrefixExpr {\n         PrefixExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<PrefixExpr<'a>> for PrefixExprNode {\n+    fn from(ast: PrefixExpr<'a>) -> PrefixExprNode {\n+        let syntax = ast.syntax().owned();\n+        PrefixExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PrefixExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2394,14 +2592,17 @@ impl<'a> PrefixExpr<'a> {}\n pub struct RangeExprNode(SyntaxNode);\n \n impl RangeExprNode {\n-    pub fn new(ast: RangeExpr) -> RangeExprNode {\n-        let syntax = ast.syntax().owned();\n-        RangeExprNode(syntax)\n-    }\n     pub fn ast(&self) -> RangeExpr {\n         RangeExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<RangeExpr<'a>> for RangeExprNode {\n+    fn from(ast: RangeExpr<'a>) -> RangeExprNode {\n+        let syntax = ast.syntax().owned();\n+        RangeExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct RangeExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2425,14 +2626,17 @@ impl<'a> RangeExpr<'a> {}\n pub struct RangePatNode(SyntaxNode);\n \n impl RangePatNode {\n-    pub fn new(ast: RangePat) -> RangePatNode {\n-        let syntax = ast.syntax().owned();\n-        RangePatNode(syntax)\n-    }\n     pub fn ast(&self) -> RangePat {\n         RangePat::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<RangePat<'a>> for RangePatNode {\n+    fn from(ast: RangePat<'a>) -> RangePatNode {\n+        let syntax = ast.syntax().owned();\n+        RangePatNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct RangePat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2456,14 +2660,17 @@ impl<'a> RangePat<'a> {}\n pub struct RefExprNode(SyntaxNode);\n \n impl RefExprNode {\n-    pub fn new(ast: RefExpr) -> RefExprNode {\n-        let syntax = ast.syntax().owned();\n-        RefExprNode(syntax)\n-    }\n     pub fn ast(&self) -> RefExpr {\n         RefExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<RefExpr<'a>> for RefExprNode {\n+    fn from(ast: RefExpr<'a>) -> RefExprNode {\n+        let syntax = ast.syntax().owned();\n+        RefExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct RefExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2487,14 +2694,17 @@ impl<'a> RefExpr<'a> {}\n pub struct RefPatNode(SyntaxNode);\n \n impl RefPatNode {\n-    pub fn new(ast: RefPat) -> RefPatNode {\n-        let syntax = ast.syntax().owned();\n-        RefPatNode(syntax)\n-    }\n     pub fn ast(&self) -> RefPat {\n         RefPat::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<RefPat<'a>> for RefPatNode {\n+    fn from(ast: RefPat<'a>) -> RefPatNode {\n+        let syntax = ast.syntax().owned();\n+        RefPatNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct RefPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2518,14 +2728,17 @@ impl<'a> RefPat<'a> {}\n pub struct ReferenceTypeNode(SyntaxNode);\n \n impl ReferenceTypeNode {\n-    pub fn new(ast: ReferenceType) -> ReferenceTypeNode {\n-        let syntax = ast.syntax().owned();\n-        ReferenceTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> ReferenceType {\n         ReferenceType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ReferenceType<'a>> for ReferenceTypeNode {\n+    fn from(ast: ReferenceType<'a>) -> ReferenceTypeNode {\n+        let syntax = ast.syntax().owned();\n+        ReferenceTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ReferenceType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2549,14 +2762,17 @@ impl<'a> ReferenceType<'a> {}\n pub struct RetTypeNode(SyntaxNode);\n \n impl RetTypeNode {\n-    pub fn new(ast: RetType) -> RetTypeNode {\n-        let syntax = ast.syntax().owned();\n-        RetTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> RetType {\n         RetType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<RetType<'a>> for RetTypeNode {\n+    fn from(ast: RetType<'a>) -> RetTypeNode {\n+        let syntax = ast.syntax().owned();\n+        RetTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct RetType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2580,14 +2796,17 @@ impl<'a> RetType<'a> {}\n pub struct ReturnExprNode(SyntaxNode);\n \n impl ReturnExprNode {\n-    pub fn new(ast: ReturnExpr) -> ReturnExprNode {\n-        let syntax = ast.syntax().owned();\n-        ReturnExprNode(syntax)\n-    }\n     pub fn ast(&self) -> ReturnExpr {\n         ReturnExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<ReturnExpr<'a>> for ReturnExprNode {\n+    fn from(ast: ReturnExpr<'a>) -> ReturnExprNode {\n+        let syntax = ast.syntax().owned();\n+        ReturnExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ReturnExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2611,14 +2830,17 @@ impl<'a> ReturnExpr<'a> {}\n pub struct RootNode(SyntaxNode);\n \n impl RootNode {\n-    pub fn new(ast: Root) -> RootNode {\n-        let syntax = ast.syntax().owned();\n-        RootNode(syntax)\n-    }\n     pub fn ast(&self) -> Root {\n         Root::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Root<'a>> for RootNode {\n+    fn from(ast: Root<'a>) -> RootNode {\n+        let syntax = ast.syntax().owned();\n+        RootNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Root<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2648,14 +2870,17 @@ impl<'a> Root<'a> {\n pub struct SelfParamNode(SyntaxNode);\n \n impl SelfParamNode {\n-    pub fn new(ast: SelfParam) -> SelfParamNode {\n-        let syntax = ast.syntax().owned();\n-        SelfParamNode(syntax)\n-    }\n     pub fn ast(&self) -> SelfParam {\n         SelfParam::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<SelfParam<'a>> for SelfParamNode {\n+    fn from(ast: SelfParam<'a>) -> SelfParamNode {\n+        let syntax = ast.syntax().owned();\n+        SelfParamNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct SelfParam<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2679,14 +2904,17 @@ impl<'a> SelfParam<'a> {}\n pub struct SlicePatNode(SyntaxNode);\n \n impl SlicePatNode {\n-    pub fn new(ast: SlicePat) -> SlicePatNode {\n-        let syntax = ast.syntax().owned();\n-        SlicePatNode(syntax)\n-    }\n     pub fn ast(&self) -> SlicePat {\n         SlicePat::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<SlicePat<'a>> for SlicePatNode {\n+    fn from(ast: SlicePat<'a>) -> SlicePatNode {\n+        let syntax = ast.syntax().owned();\n+        SlicePatNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct SlicePat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2710,14 +2938,17 @@ impl<'a> SlicePat<'a> {}\n pub struct SliceTypeNode(SyntaxNode);\n \n impl SliceTypeNode {\n-    pub fn new(ast: SliceType) -> SliceTypeNode {\n-        let syntax = ast.syntax().owned();\n-        SliceTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> SliceType {\n         SliceType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<SliceType<'a>> for SliceTypeNode {\n+    fn from(ast: SliceType<'a>) -> SliceTypeNode {\n+        let syntax = ast.syntax().owned();\n+        SliceTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct SliceType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2741,14 +2972,17 @@ impl<'a> SliceType<'a> {}\n pub struct StaticDefNode(SyntaxNode);\n \n impl StaticDefNode {\n-    pub fn new(ast: StaticDef) -> StaticDefNode {\n-        let syntax = ast.syntax().owned();\n-        StaticDefNode(syntax)\n-    }\n     pub fn ast(&self) -> StaticDef {\n         StaticDef::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<StaticDef<'a>> for StaticDefNode {\n+    fn from(ast: StaticDef<'a>) -> StaticDefNode {\n+        let syntax = ast.syntax().owned();\n+        StaticDefNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct StaticDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2775,14 +3009,17 @@ impl<'a> StaticDef<'a> {}\n pub struct StmtNode(SyntaxNode);\n \n impl StmtNode {\n-    pub fn new(ast: Stmt) -> StmtNode {\n-        let syntax = ast.syntax().owned();\n-        StmtNode(syntax)\n-    }\n     pub fn ast(&self) -> Stmt {\n         Stmt::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Stmt<'a>> for StmtNode {\n+    fn from(ast: Stmt<'a>) -> StmtNode {\n+        let syntax = ast.syntax().owned();\n+        StmtNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum Stmt<'a> {\n     ExprStmt(ExprStmt<'a>),\n@@ -2813,14 +3050,17 @@ impl<'a> Stmt<'a> {}\n pub struct StructDefNode(SyntaxNode);\n \n impl StructDefNode {\n-    pub fn new(ast: StructDef) -> StructDefNode {\n-        let syntax = ast.syntax().owned();\n-        StructDefNode(syntax)\n-    }\n     pub fn ast(&self) -> StructDef {\n         StructDef::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<StructDef<'a>> for StructDefNode {\n+    fn from(ast: StructDef<'a>) -> StructDefNode {\n+        let syntax = ast.syntax().owned();\n+        StructDefNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct StructDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2851,14 +3091,17 @@ impl<'a> StructDef<'a> {\n pub struct StructLitNode(SyntaxNode);\n \n impl StructLitNode {\n-    pub fn new(ast: StructLit) -> StructLitNode {\n-        let syntax = ast.syntax().owned();\n-        StructLitNode(syntax)\n-    }\n     pub fn ast(&self) -> StructLit {\n         StructLit::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<StructLit<'a>> for StructLitNode {\n+    fn from(ast: StructLit<'a>) -> StructLitNode {\n+        let syntax = ast.syntax().owned();\n+        StructLitNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct StructLit<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2882,14 +3125,17 @@ impl<'a> StructLit<'a> {}\n pub struct StructPatNode(SyntaxNode);\n \n impl StructPatNode {\n-    pub fn new(ast: StructPat) -> StructPatNode {\n-        let syntax = ast.syntax().owned();\n-        StructPatNode(syntax)\n-    }\n     pub fn ast(&self) -> StructPat {\n         StructPat::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<StructPat<'a>> for StructPatNode {\n+    fn from(ast: StructPat<'a>) -> StructPatNode {\n+        let syntax = ast.syntax().owned();\n+        StructPatNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct StructPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2913,14 +3159,17 @@ impl<'a> StructPat<'a> {}\n pub struct TokenTreeNode(SyntaxNode);\n \n impl TokenTreeNode {\n-    pub fn new(ast: TokenTree) -> TokenTreeNode {\n-        let syntax = ast.syntax().owned();\n-        TokenTreeNode(syntax)\n-    }\n     pub fn ast(&self) -> TokenTree {\n         TokenTree::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<TokenTree<'a>> for TokenTreeNode {\n+    fn from(ast: TokenTree<'a>) -> TokenTreeNode {\n+        let syntax = ast.syntax().owned();\n+        TokenTreeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TokenTree<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2944,14 +3193,17 @@ impl<'a> TokenTree<'a> {}\n pub struct TraitDefNode(SyntaxNode);\n \n impl TraitDefNode {\n-    pub fn new(ast: TraitDef) -> TraitDefNode {\n-        let syntax = ast.syntax().owned();\n-        TraitDefNode(syntax)\n-    }\n     pub fn ast(&self) -> TraitDef {\n         TraitDef::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<TraitDef<'a>> for TraitDefNode {\n+    fn from(ast: TraitDef<'a>) -> TraitDefNode {\n+        let syntax = ast.syntax().owned();\n+        TraitDefNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TraitDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2977,14 +3229,17 @@ impl<'a> TraitDef<'a> {}\n pub struct TryExprNode(SyntaxNode);\n \n impl TryExprNode {\n-    pub fn new(ast: TryExpr) -> TryExprNode {\n-        let syntax = ast.syntax().owned();\n-        TryExprNode(syntax)\n-    }\n     pub fn ast(&self) -> TryExpr {\n         TryExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<TryExpr<'a>> for TryExprNode {\n+    fn from(ast: TryExpr<'a>) -> TryExprNode {\n+        let syntax = ast.syntax().owned();\n+        TryExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TryExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3008,14 +3263,17 @@ impl<'a> TryExpr<'a> {}\n pub struct TupleExprNode(SyntaxNode);\n \n impl TupleExprNode {\n-    pub fn new(ast: TupleExpr) -> TupleExprNode {\n-        let syntax = ast.syntax().owned();\n-        TupleExprNode(syntax)\n-    }\n     pub fn ast(&self) -> TupleExpr {\n         TupleExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<TupleExpr<'a>> for TupleExprNode {\n+    fn from(ast: TupleExpr<'a>) -> TupleExprNode {\n+        let syntax = ast.syntax().owned();\n+        TupleExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TupleExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3039,14 +3297,17 @@ impl<'a> TupleExpr<'a> {}\n pub struct TuplePatNode(SyntaxNode);\n \n impl TuplePatNode {\n-    pub fn new(ast: TuplePat) -> TuplePatNode {\n-        let syntax = ast.syntax().owned();\n-        TuplePatNode(syntax)\n-    }\n     pub fn ast(&self) -> TuplePat {\n         TuplePat::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<TuplePat<'a>> for TuplePatNode {\n+    fn from(ast: TuplePat<'a>) -> TuplePatNode {\n+        let syntax = ast.syntax().owned();\n+        TuplePatNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TuplePat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3070,14 +3331,17 @@ impl<'a> TuplePat<'a> {}\n pub struct TupleStructPatNode(SyntaxNode);\n \n impl TupleStructPatNode {\n-    pub fn new(ast: TupleStructPat) -> TupleStructPatNode {\n-        let syntax = ast.syntax().owned();\n-        TupleStructPatNode(syntax)\n-    }\n     pub fn ast(&self) -> TupleStructPat {\n         TupleStructPat::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<TupleStructPat<'a>> for TupleStructPatNode {\n+    fn from(ast: TupleStructPat<'a>) -> TupleStructPatNode {\n+        let syntax = ast.syntax().owned();\n+        TupleStructPatNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TupleStructPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3101,14 +3365,17 @@ impl<'a> TupleStructPat<'a> {}\n pub struct TupleTypeNode(SyntaxNode);\n \n impl TupleTypeNode {\n-    pub fn new(ast: TupleType) -> TupleTypeNode {\n-        let syntax = ast.syntax().owned();\n-        TupleTypeNode(syntax)\n-    }\n     pub fn ast(&self) -> TupleType {\n         TupleType::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<TupleType<'a>> for TupleTypeNode {\n+    fn from(ast: TupleType<'a>) -> TupleTypeNode {\n+        let syntax = ast.syntax().owned();\n+        TupleTypeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TupleType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3132,14 +3399,17 @@ impl<'a> TupleType<'a> {}\n pub struct TypeDefNode(SyntaxNode);\n \n impl TypeDefNode {\n-    pub fn new(ast: TypeDef) -> TypeDefNode {\n-        let syntax = ast.syntax().owned();\n-        TypeDefNode(syntax)\n-    }\n     pub fn ast(&self) -> TypeDef {\n         TypeDef::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<TypeDef<'a>> for TypeDefNode {\n+    fn from(ast: TypeDef<'a>) -> TypeDefNode {\n+        let syntax = ast.syntax().owned();\n+        TypeDefNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TypeDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3166,14 +3436,17 @@ impl<'a> TypeDef<'a> {}\n pub struct TypeParamNode(SyntaxNode);\n \n impl TypeParamNode {\n-    pub fn new(ast: TypeParam) -> TypeParamNode {\n-        let syntax = ast.syntax().owned();\n-        TypeParamNode(syntax)\n-    }\n     pub fn ast(&self) -> TypeParam {\n         TypeParam::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<TypeParam<'a>> for TypeParamNode {\n+    fn from(ast: TypeParam<'a>) -> TypeParamNode {\n+        let syntax = ast.syntax().owned();\n+        TypeParamNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TypeParam<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3198,14 +3471,17 @@ impl<'a> TypeParam<'a> {}\n pub struct TypeParamListNode(SyntaxNode);\n \n impl TypeParamListNode {\n-    pub fn new(ast: TypeParamList) -> TypeParamListNode {\n-        let syntax = ast.syntax().owned();\n-        TypeParamListNode(syntax)\n-    }\n     pub fn ast(&self) -> TypeParamList {\n         TypeParamList::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<TypeParamList<'a>> for TypeParamListNode {\n+    fn from(ast: TypeParamList<'a>) -> TypeParamListNode {\n+        let syntax = ast.syntax().owned();\n+        TypeParamListNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TypeParamList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3237,14 +3513,17 @@ impl<'a> TypeParamList<'a> {\n pub struct TypeRefNode(SyntaxNode);\n \n impl TypeRefNode {\n-    pub fn new(ast: TypeRef) -> TypeRefNode {\n-        let syntax = ast.syntax().owned();\n-        TypeRefNode(syntax)\n-    }\n     pub fn ast(&self) -> TypeRef {\n         TypeRef::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<TypeRef<'a>> for TypeRefNode {\n+    fn from(ast: TypeRef<'a>) -> TypeRefNode {\n+        let syntax = ast.syntax().owned();\n+        TypeRefNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum TypeRef<'a> {\n     ParenType(ParenType<'a>),\n@@ -3308,14 +3587,17 @@ impl<'a> TypeRef<'a> {}\n pub struct UseItemNode(SyntaxNode);\n \n impl UseItemNode {\n-    pub fn new(ast: UseItem) -> UseItemNode {\n-        let syntax = ast.syntax().owned();\n-        UseItemNode(syntax)\n-    }\n     pub fn ast(&self) -> UseItem {\n         UseItem::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<UseItem<'a>> for UseItemNode {\n+    fn from(ast: UseItem<'a>) -> UseItemNode {\n+        let syntax = ast.syntax().owned();\n+        UseItemNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct UseItem<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3343,14 +3625,17 @@ impl<'a> UseItem<'a> {\n pub struct UseTreeNode(SyntaxNode);\n \n impl UseTreeNode {\n-    pub fn new(ast: UseTree) -> UseTreeNode {\n-        let syntax = ast.syntax().owned();\n-        UseTreeNode(syntax)\n-    }\n     pub fn ast(&self) -> UseTree {\n         UseTree::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<UseTree<'a>> for UseTreeNode {\n+    fn from(ast: UseTree<'a>) -> UseTreeNode {\n+        let syntax = ast.syntax().owned();\n+        UseTreeNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct UseTree<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3382,14 +3667,17 @@ impl<'a> UseTree<'a> {\n pub struct UseTreeListNode(SyntaxNode);\n \n impl UseTreeListNode {\n-    pub fn new(ast: UseTreeList) -> UseTreeListNode {\n-        let syntax = ast.syntax().owned();\n-        UseTreeListNode(syntax)\n-    }\n     pub fn ast(&self) -> UseTreeList {\n         UseTreeList::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<UseTreeList<'a>> for UseTreeListNode {\n+    fn from(ast: UseTreeList<'a>) -> UseTreeListNode {\n+        let syntax = ast.syntax().owned();\n+        UseTreeListNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct UseTreeList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3417,14 +3705,17 @@ impl<'a> UseTreeList<'a> {\n pub struct WhereClauseNode(SyntaxNode);\n \n impl WhereClauseNode {\n-    pub fn new(ast: WhereClause) -> WhereClauseNode {\n-        let syntax = ast.syntax().owned();\n-        WhereClauseNode(syntax)\n-    }\n     pub fn ast(&self) -> WhereClause {\n         WhereClause::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<WhereClause<'a>> for WhereClauseNode {\n+    fn from(ast: WhereClause<'a>) -> WhereClauseNode {\n+        let syntax = ast.syntax().owned();\n+        WhereClauseNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct WhereClause<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3448,14 +3739,17 @@ impl<'a> WhereClause<'a> {}\n pub struct WhileExprNode(SyntaxNode);\n \n impl WhileExprNode {\n-    pub fn new(ast: WhileExpr) -> WhileExprNode {\n-        let syntax = ast.syntax().owned();\n-        WhileExprNode(syntax)\n-    }\n     pub fn ast(&self) -> WhileExpr {\n         WhileExpr::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<WhileExpr<'a>> for WhileExprNode {\n+    fn from(ast: WhileExpr<'a>) -> WhileExprNode {\n+        let syntax = ast.syntax().owned();\n+        WhileExprNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct WhileExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -3484,14 +3778,17 @@ impl<'a> WhileExpr<'a> {\n pub struct WhitespaceNode(SyntaxNode);\n \n impl WhitespaceNode {\n-    pub fn new(ast: Whitespace) -> WhitespaceNode {\n-        let syntax = ast.syntax().owned();\n-        WhitespaceNode(syntax)\n-    }\n     pub fn ast(&self) -> Whitespace {\n         Whitespace::cast(self.0.borrowed()).unwrap()\n     }\n }\n+\n+impl<'a> From<Whitespace<'a>> for WhitespaceNode {\n+    fn from(ast: Whitespace<'a>) -> WhitespaceNode {\n+        let syntax = ast.syntax().owned();\n+        WhitespaceNode(syntax)\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Whitespace<'a> {\n     syntax: SyntaxNodeRef<'a>,"}, {"sha": "1321f0def18424539d1aff9abc5660e3cf45caf7", "filename": "crates/ra_syntax/src/ast/generated.rs.tera", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d685a9b564fe524865cda5713c527aaeb1ca6b1d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/d685a9b564fe524865cda5713c527aaeb1ca6b1d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=d685a9b564fe524865cda5713c527aaeb1ca6b1d", "patch": "@@ -17,15 +17,18 @@ use crate::{\n pub struct {{ node }}Node(SyntaxNode);\n \n impl {{ node }}Node {\n-    pub fn new(ast: {{ node }}) -> {{ node }}Node {\n-        let syntax = ast.syntax().owned();\n-        {{ node }}Node(syntax)\n-    }\n     pub fn ast(&self) -> {{ node }} {\n         {{ node }}::cast(self.0.borrowed()).unwrap()\n     }\n }\n \n+impl<'a> From<{{ node }}<'a>> for {{ node }}Node {\n+    fn from(ast: {{ node}}<'a>) -> {{ node }}Node {\n+        let syntax = ast.syntax().owned();\n+        {{ node }}Node(syntax)\n+    }\n+}\n+\n {%- if methods.enum %}\n #[derive(Debug, Clone, Copy)]\n pub enum {{ node }}<'a> {"}]}