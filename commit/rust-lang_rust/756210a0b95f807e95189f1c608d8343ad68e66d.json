{"sha": "756210a0b95f807e95189f1c608d8343ad68e66d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjIxMGEwYjk1ZjgwN2U5NTE4OWYxYzYwOGQ4MzQzYWQ2OGU2NmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-20T17:46:56Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-20T19:51:22Z"}, "message": "std: Ensure fs::{DirEntry, ReadDir} are Send/Sync\n\nThe windows/unix modules were currently inconsistent about the traits being\nimplemented for `DirEntry` and there isn't much particular reason why the traits\n*couldn't* be implemented for `ReadDir` and `DirEntry`, so this commit ensures\nthat they are implemented.\n\nCloses #22577", "tree": {"sha": "1815d5416407cbd46560e1d1f81b7ea908684a82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1815d5416407cbd46560e1d1f81b7ea908684a82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756210a0b95f807e95189f1c608d8343ad68e66d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756210a0b95f807e95189f1c608d8343ad68e66d", "html_url": "https://github.com/rust-lang/rust/commit/756210a0b95f807e95189f1c608d8343ad68e66d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756210a0b95f807e95189f1c608d8343ad68e66d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "html_url": "https://github.com/rust-lang/rust/commit/522d09dfecbeca1595f25ac58c6d0178bbd21d7d"}], "stats": {"total": 101, "additions": 76, "deletions": 25}, "files": [{"sha": "c6b9c2cba5227f34190513944b590aaf5b2169dc", "filename": "src/libstd/sys/unix/fs2.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/756210a0b95f807e95189f1c608d8343ad68e66d/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756210a0b95f807e95189f1c608d8343ad68e66d/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs?ref=756210a0b95f807e95189f1c608d8343ad68e66d", "patch": "@@ -18,7 +18,7 @@ use libc::{self, c_int, c_void, size_t, off_t, c_char, mode_t};\n use mem;\n use path::{Path, PathBuf};\n use ptr;\n-use rc::Rc;\n+use sync::Arc;\n use sys::fd::FileDesc;\n use sys::{c, cvt, cvt_r};\n use sys_common::FromInner;\n@@ -31,14 +31,18 @@ pub struct FileAttr {\n }\n \n pub struct ReadDir {\n-    dirp: *mut libc::DIR,\n-    root: Rc<PathBuf>,\n+    dirp: Dir,\n+    root: Arc<PathBuf>,\n }\n \n+struct Dir(*mut libc::DIR);\n+\n+unsafe impl Send for Dir {}\n+unsafe impl Sync for Dir {}\n+\n pub struct DirEntry {\n-    buf: Vec<u8>,\n-    dirent: *mut libc::dirent_t,\n-    root: Rc<PathBuf>,\n+    buf: Vec<u8>, // actually *mut libc::dirent_t\n+    root: Arc<PathBuf>,\n }\n \n #[derive(Clone)]\n@@ -109,7 +113,7 @@ impl Iterator for ReadDir {\n \n         let mut entry_ptr = ptr::null_mut();\n         loop {\n-            if unsafe { libc::readdir_r(self.dirp, ptr, &mut entry_ptr) != 0 } {\n+            if unsafe { libc::readdir_r(self.dirp.0, ptr, &mut entry_ptr) != 0 } {\n                 return Some(Err(Error::last_os_error()))\n             }\n             if entry_ptr.is_null() {\n@@ -118,7 +122,6 @@ impl Iterator for ReadDir {\n \n             let entry = DirEntry {\n                 buf: buf,\n-                dirent: entry_ptr,\n                 root: self.root.clone()\n             };\n             if entry.name_bytes() == b\".\" || entry.name_bytes() == b\"..\" {\n@@ -130,9 +133,9 @@ impl Iterator for ReadDir {\n     }\n }\n \n-impl Drop for ReadDir {\n+impl Drop for Dir {\n     fn drop(&mut self) {\n-        let r = unsafe { libc::closedir(self.dirp) };\n+        let r = unsafe { libc::closedir(self.0) };\n         debug_assert_eq!(r, 0);\n     }\n }\n@@ -147,9 +150,13 @@ impl DirEntry {\n             fn rust_list_dir_val(ptr: *mut libc::dirent_t) -> *const c_char;\n         }\n         unsafe {\n-            CStr::from_ptr(rust_list_dir_val(self.dirent)).to_bytes()\n+            CStr::from_ptr(rust_list_dir_val(self.dirent())).to_bytes()\n         }\n     }\n+\n+    fn dirent(&self) -> *mut libc::dirent_t {\n+        self.buf.as_ptr() as *mut _\n+    }\n }\n \n impl OpenOptions {\n@@ -279,14 +286,14 @@ pub fn mkdir(p: &Path) -> io::Result<()> {\n }\n \n pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n-    let root = Rc::new(p.to_path_buf());\n+    let root = Arc::new(p.to_path_buf());\n     let p = try!(cstr(p));\n     unsafe {\n         let ptr = libc::opendir(p.as_ptr());\n         if ptr.is_null() {\n             Err(Error::last_os_error())\n         } else {\n-            Ok(ReadDir { dirp: ptr, root: root })\n+            Ok(ReadDir { dirp: Dir(ptr), root: root })\n         }\n     }\n }"}, {"sha": "117f819eeeb3fd870ac36dc485d6874630ad0ced", "filename": "src/libstd/sys/windows/fs2.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/756210a0b95f807e95189f1c608d8343ad68e66d/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756210a0b95f807e95189f1c608d8343ad68e66d/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs?ref=756210a0b95f807e95189f1c608d8343ad68e66d", "patch": "@@ -19,6 +19,7 @@ use libc::{self, HANDLE};\n use mem;\n use path::{Path, PathBuf};\n use ptr;\n+use sync::Arc;\n use sys::handle::Handle as RawHandle;\n use sys::{c, cvt};\n use vec::Vec;\n@@ -27,12 +28,20 @@ pub struct File { handle: RawHandle }\n pub struct FileAttr { data: c::WIN32_FILE_ATTRIBUTE_DATA }\n \n pub struct ReadDir {\n-    handle: libc::HANDLE,\n-    root: PathBuf,\n+    handle: FindNextFileHandle,\n+    root: Arc<PathBuf>,\n     first: Option<libc::WIN32_FIND_DATAW>,\n }\n \n-pub struct DirEntry { path: PathBuf }\n+struct FindNextFileHandle(libc::HANDLE);\n+\n+unsafe impl Send for FindNextFileHandle {}\n+unsafe impl Sync for FindNextFileHandle {}\n+\n+pub struct DirEntry {\n+    root: Arc<PathBuf>,\n+    data: libc::WIN32_FIND_DATAW,\n+}\n \n #[derive(Clone, Default)]\n pub struct OpenOptions {\n@@ -61,7 +70,7 @@ impl Iterator for ReadDir {\n         unsafe {\n             let mut wfd = mem::zeroed();\n             loop {\n-                if libc::FindNextFileW(self.handle, &mut wfd) == 0 {\n+                if libc::FindNextFileW(self.handle.0, &mut wfd) == 0 {\n                     if libc::GetLastError() ==\n                         c::ERROR_NO_MORE_FILES as libc::DWORD {\n                         return None\n@@ -77,29 +86,31 @@ impl Iterator for ReadDir {\n     }\n }\n \n-impl Drop for ReadDir {\n+impl Drop for FindNextFileHandle {\n     fn drop(&mut self) {\n-        let r = unsafe { libc::FindClose(self.handle) };\n+        let r = unsafe { libc::FindClose(self.0) };\n         debug_assert!(r != 0);\n     }\n }\n \n impl DirEntry {\n-    fn new(root: &Path, wfd: &libc::WIN32_FIND_DATAW) -> Option<DirEntry> {\n+    fn new(root: &Arc<PathBuf>, wfd: &libc::WIN32_FIND_DATAW) -> Option<DirEntry> {\n         match &wfd.cFileName[0..3] {\n             // check for '.' and '..'\n             [46, 0, ..] |\n             [46, 46, 0, ..] => return None,\n             _ => {}\n         }\n \n-        let filename = super::truncate_utf16_at_nul(&wfd.cFileName);\n-        let filename: OsString = OsStringExt::from_wide(filename);\n-        Some(DirEntry { path: root.join(&filename) })\n+        Some(DirEntry {\n+            root: root.clone(),\n+            data: *wfd,\n+        })\n     }\n \n     pub fn path(&self) -> PathBuf {\n-        self.path.clone()\n+        let filename = super::truncate_utf16_at_nul(&self.data.cFileName);\n+        self.root.join(&<OsString as OsStringExt>::from_wide(filename))\n     }\n }\n \n@@ -312,7 +323,11 @@ pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n         let mut wfd = mem::zeroed();\n         let find_handle = libc::FindFirstFileW(path.as_ptr(), &mut wfd);\n         if find_handle != libc::INVALID_HANDLE_VALUE {\n-            Ok(ReadDir { handle: find_handle, root: root, first: Some(wfd) })\n+            Ok(ReadDir {\n+                handle: FindNextFileHandle(find_handle),\n+                root: Arc::new(root),\n+                first: Some(wfd),\n+            })\n         } else {\n             Err(Error::last_os_error())\n         }"}, {"sha": "1ecdd39ca7af5e884e35e01e21650416a221431c", "filename": "src/test/run-pass/issue-22577.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/756210a0b95f807e95189f1c608d8343ad68e66d/src%2Ftest%2Frun-pass%2Fissue-22577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756210a0b95f807e95189f1c608d8343ad68e66d/src%2Ftest%2Frun-pass%2Fissue-22577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22577.rs?ref=756210a0b95f807e95189f1c608d8343ad68e66d", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::{fs, net};\n+\n+fn assert_both<T: Send + Sync>() {}\n+\n+fn main() {\n+    assert_both::<fs::File>();\n+    assert_both::<fs::Metadata>();\n+    assert_both::<fs::ReadDir>();\n+    assert_both::<fs::DirEntry>();\n+    assert_both::<fs::WalkDir>();\n+    assert_both::<fs::OpenOptions>();\n+    assert_both::<fs::Permissions>();\n+\n+    assert_both::<net::TcpStream>();\n+    assert_both::<net::TcpListener>();\n+    assert_both::<net::UdpSocket>();\n+    assert_both::<net::SocketAddr>();\n+    assert_both::<net::IpAddr>();\n+}"}]}