{"sha": "6c8c02f625165bb397068ca0adecd93f49289d6b", "node_id": "C_kwDOAAsO6NoAKDZjOGMwMmY2MjUxNjViYjM5NzA2OGNhMGFkZWNkOTNmNDkyODlkNmI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-10T21:21:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-10T21:21:58Z"}, "message": "Don't parse source files to generate macro completion details", "tree": {"sha": "92899586a72a012dd43c12a397d3776661dc5b7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92899586a72a012dd43c12a397d3776661dc5b7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c8c02f625165bb397068ca0adecd93f49289d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8c02f625165bb397068ca0adecd93f49289d6b", "html_url": "https://github.com/rust-lang/rust/commit/6c8c02f625165bb397068ca0adecd93f49289d6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c8c02f625165bb397068ca0adecd93f49289d6b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1ab5770c9df12504bc09ab912a8b6a8bd15c6c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ab5770c9df12504bc09ab912a8b6a8bd15c6c7", "html_url": "https://github.com/rust-lang/rust/commit/b1ab5770c9df12504bc09ab912a8b6a8bd15c6c7"}], "stats": {"total": 361, "additions": 157, "deletions": 204}, "files": [{"sha": "6e3285fd4ff006f46a5661f9c7c75e1241e8f491", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -18,8 +18,8 @@ use syntax::SmolStr;\n \n use crate::{\n     Adt, Const, ConstParam, Enum, Field, Function, GenericParam, HasCrate, HasVisibility,\n-    LifetimeParam, Module, Static, Struct, Trait, TyBuilder, Type, TypeAlias, TypeOrConstParam,\n-    TypeParam, Union, Variant,\n+    LifetimeParam, Macro, Module, Static, Struct, Trait, TyBuilder, Type, TypeAlias,\n+    TypeOrConstParam, TypeParam, Union, Variant,\n };\n \n impl HirDisplay for Function {\n@@ -509,3 +509,14 @@ impl HirDisplay for Module {\n         }\n     }\n }\n+\n+impl HirDisplay for Macro {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        match self.id {\n+            hir_def::MacroId::Macro2Id(_) => write!(f, \"macro\"),\n+            hir_def::MacroId::MacroRulesId(_) => write!(f, \"macro_rules!\"),\n+            hir_def::MacroId::ProcMacroId(_) => write!(f, \"proc_macro\"),\n+        }?;\n+        write!(f, \" {}\", self.name(f.db))\n+    }\n+}"}, {"sha": "2e141600e80b1c4f56cf54019d5a3704cd5dd79f", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -2,7 +2,7 @@\n use std::fmt::Display;\n \n use either::Either;\n-use hir::{AsAssocItem, AttributeTemplate, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo};\n+use hir::{AsAssocItem, AttributeTemplate, HasAttrs, HirDisplay, Semantics, TypeInfo};\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::Definition,\n@@ -13,9 +13,7 @@ use ide_db::{\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n-    algo, ast,\n-    display::{fn_as_proc_macro_label, macro_label},\n-    match_ast, AstNode, Direction,\n+    algo, ast, match_ast, AstNode, Direction,\n     SyntaxKind::{LET_EXPR, LET_STMT},\n     SyntaxToken, T,\n };\n@@ -342,14 +340,8 @@ pub(super) fn definition(\n ) -> Option<Markup> {\n     let mod_path = definition_mod_path(db, &def);\n     let (label, docs) = match def {\n-        Definition::Macro(it) => (\n-            match &it.source(db)?.value {\n-                Either::Left(mac) => macro_label(mac),\n-                Either::Right(mac_fn) => fn_as_proc_macro_label(mac_fn),\n-            },\n-            it.attrs(db).docs(),\n-        ),\n-        Definition::Field(def) => label_and_docs(db, def),\n+        Definition::Macro(it) => label_and_docs(db, it),\n+        Definition::Field(it) => label_and_docs(db, it),\n         Definition::Module(it) => label_and_docs(db, it),\n         Definition::Function(it) => label_and_docs(db, it),\n         Definition::Adt(it) => label_and_docs(db, it),"}, {"sha": "df27f935c84c44f34677355fb5e86f372e350b3e", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -4102,16 +4102,16 @@ identity!{\n }\n \"#,\n         expect![[r#\"\n-                *Copy*\n+            *Copy*\n \n-                ```rust\n-                test\n-                ```\n+            ```rust\n+            test\n+            ```\n \n-                ```rust\n-                pub macro Copy\n-                ```\n-            \"#]],\n+            ```rust\n+            macro Copy\n+            ```\n+        \"#]],\n     );\n }\n \n@@ -4126,16 +4126,16 @@ pub macro Copy {}\n struct Foo;\n \"#,\n         expect![[r#\"\n-                *Copy*\n+            *Copy*\n \n-                ```rust\n-                test\n-                ```\n+            ```rust\n+            test\n+            ```\n \n-                ```rust\n-                pub macro Copy\n-                ```\n-            \"#]],\n+            ```rust\n+            macro Copy\n+            ```\n+        \"#]],\n     );\n     check(\n         r#\"\n@@ -4148,16 +4148,16 @@ mod foo {\n struct Foo;\n \"#,\n         expect![[r#\"\n-                *Copy*\n+            *Copy*\n \n-                ```rust\n-                test::foo\n-                ```\n+            ```rust\n+            test::foo\n+            ```\n \n-                ```rust\n-                pub macro Copy\n-                ```\n-            \"#]],\n+            ```rust\n+            macro Copy\n+            ```\n+        \"#]],\n     );\n }\n "}, {"sha": "acd02616b157b2a4febd09e8199855dfd5db419a", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -421,10 +421,10 @@ macro_rules! foo { () => {} }\n \n fn main() { let _ = crate::$0 }\n \"#,\n-            expect![[r##\"\n+            expect![[r#\"\n                 fn main()  fn()\n-                ma foo!(\u2026) #[macro_export] macro_rules! foo\n-            \"##]],\n+                ma foo!(\u2026) macro_rules! foo\n+            \"#]],\n         );\n     }\n "}, {"sha": "235d7870c7ca71069a1bd3c7c5fc4bd40c51f834", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -208,12 +208,12 @@ mod macros {\n     macro_rules! concat { }\n }\n \"#,\n-            expect![[r##\"\n+            expect![[r#\"\n                 fn f()        fn()\n-                ma concat!(\u2026) #[macro_export] macro_rules! concat\n+                ma concat!(\u2026) macro_rules! concat\n                 md std\n                 bt u32\n-            \"##]],\n+            \"#]],\n         );\n     }\n "}, {"sha": "d3b0de429ca607c92899351f53d475f3abbf91d8", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -1,12 +1,8 @@\n //! Renderer for macro invocations.\n \n-use either::Either;\n-use hir::{Documentation, HasSource, InFile, Semantics};\n-use ide_db::{RootDatabase, SymbolKind};\n-use syntax::{\n-    display::{fn_as_proc_macro_label, macro_label},\n-    SmolStr,\n-};\n+use hir::{Documentation, HirDisplay};\n+use ide_db::SymbolKind;\n+use syntax::SmolStr;\n \n use crate::{\n     context::PathKind,\n@@ -52,7 +48,7 @@ fn render(\n         label(&ctx, needs_bang, bra, ket, &name),\n     );\n     item.set_deprecated(ctx.is_deprecated(macro_))\n-        .set_detail(detail(&completion.sema, macro_))\n+        .detail(macro_.display(completion.db).to_string())\n         .set_documentation(docs)\n         .set_relevance(ctx.completion_relevance());\n \n@@ -103,18 +99,6 @@ fn banged_name(name: &str) -> SmolStr {\n     SmolStr::from_iter([name, \"!\"])\n }\n \n-fn detail(sema: &Semantics<RootDatabase>, macro_: hir::Macro) -> Option<String> {\n-    // FIXME: This is parsing the file!\n-    let InFile { file_id, value } = macro_.source(sema.db)?;\n-    let _ = sema.parse_or_expand(file_id);\n-    let detail = match value {\n-        Either::Left(node) => macro_label(&node),\n-        // FIXME: this should render with the derive name, not the function name\n-        Either::Right(node) => fn_as_proc_macro_label(&node),\n-    };\n-    Some(detail)\n-}\n-\n fn guess_macro_braces(macro_name: &str, docs: &str) -> (&'static str, &'static str) {\n     let mut votes = [0, 0, 0];\n     for (idx, s) in docs.match_indices(&macro_name) {"}, {"sha": "4ee95e8928170e3bd116d2881b95798da2b3a4a2", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -62,7 +62,7 @@ fn proc_macros_qualified() {\n struct Foo;\n \"#,\n         expect![[r#\"\n-            at identity pub macro identity\n+            at identity proc_macro identity\n         \"#]],\n     )\n }\n@@ -302,7 +302,7 @@ struct Foo;\n \"#,\n         expect![[r#\"\n             md core\n-            at derive           pub macro derive\n+            at derive           macro derive\n             kw self::\n             kw super::\n             kw crate::\n@@ -689,12 +689,12 @@ mod derive {\n \"#,\n             expect![[r#\"\n                 md core\n-                de Default                pub macro Default\n+                de Default                macro Default\n                 de Clone, Copy\n-                de PartialEq              pub macro PartialEq\n+                de PartialEq              macro PartialEq\n                 de PartialEq, Eq\n                 de PartialEq, Eq, PartialOrd, Ord\n-                de Clone                  pub macro Clone\n+                de Clone                  macro Clone\n                 de PartialEq, PartialOrd\n                 kw self::\n                 kw super::\n@@ -712,11 +712,11 @@ mod derive {\n \"#,\n             expect![[r#\"\n                 md core\n-                de Default             pub macro Default\n+                de Default             macro Default\n                 de Clone, Copy\n                 de Eq\n                 de Eq, PartialOrd, Ord\n-                de Clone               pub macro Clone\n+                de Clone               macro Clone\n                 de PartialOrd\n                 kw self::\n                 kw super::\n@@ -734,17 +734,17 @@ mod derive {\n \"#,\n             expect![[r#\"\n                 md core\n-                de Default             pub macro Default\n+                de Default             macro Default\n                 de Clone, Copy\n                 de Eq\n                 de Eq, PartialOrd, Ord\n-                de Clone               pub macro Clone\n+                de Clone               macro Clone\n                 de PartialOrd\n                 kw self::\n                 kw super::\n                 kw crate::\n             \"#]],\n-        )\n+        );\n     }\n \n     #[test]\n@@ -761,7 +761,7 @@ mod derive {\n                 kw self::\n                 kw super::\n                 kw crate::\n-                de DeriveIdentity (use proc_macros::DeriveIdentity) pub macro derive_identity\n+                de DeriveIdentity (use proc_macros::DeriveIdentity) proc_macro DeriveIdentity\n             \"#]],\n         );\n         check_derive(\n@@ -772,7 +772,7 @@ use proc_macros::DeriveIdentity;\n #[derive(der$0)] struct Test;\n \"#,\n             expect![[r#\"\n-                de DeriveIdentity pub macro derive_identity\n+                de DeriveIdentity proc_macro DeriveIdentity\n                 md proc_macros\n                 md core\n                 kw self::\n@@ -808,7 +808,7 @@ use proc_macros::DeriveIdentity;\n #[derive(proc_macros::$0)] struct Test;\n \"#,\n             expect![[r#\"\n-                de DeriveIdentity pub macro derive_identity\n+                de DeriveIdentity proc_macro DeriveIdentity\n             \"#]],\n         );\n         check_derive(\n@@ -818,7 +818,7 @@ use proc_macros::DeriveIdentity;\n #[derive(proc_macros::C$0)] struct Test;\n \"#,\n             expect![[r#\"\n-                de DeriveIdentity pub macro derive_identity\n+                de DeriveIdentity proc_macro DeriveIdentity\n             \"#]],\n         );\n     }"}, {"sha": "a841605e496c4ac449607078721931279b3927e4", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -30,7 +30,7 @@ fn baz() {\n }\n             \"#,\n         // This should not contain `FooDesc {\u2026}`.\n-        expect![[r##\"\n+        expect![[r#\"\n             kw unsafe\n             kw match\n             kw while\n@@ -57,13 +57,13 @@ fn baz() {\n             fn baz()         fn()\n             st Unit\n             md _69latrick\n-            ma makro!(\u2026)     #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)     macro_rules! makro\n             fn function()    fn()\n             sc STATIC\n             un Union\n             ev TupleV(\u2026)     (u32)\n             ct CONST\n-        \"##]],\n+        \"#]],\n     )\n }\n \n@@ -125,7 +125,7 @@ impl Unit {\n }\n \"#,\n         // `self` is in here twice, once as the module, once as the local\n-        expect![[r##\"\n+        expect![[r#\"\n             me self.foo()   fn(self)\n             kw unsafe\n             kw fn\n@@ -166,14 +166,14 @@ impl Unit {\n             md module\n             st Unit\n             md qualified\n-            ma makro!(\u2026)    #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)    macro_rules! makro\n             ?? Unresolved\n             fn function()   fn()\n             sc STATIC\n             un Union\n             ev TupleV(\u2026)    (u32)\n             ct CONST\n-        \"##]],\n+        \"#]],\n     );\n     check(\n         r#\"\n@@ -187,22 +187,22 @@ impl Unit {\n     }\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             tt Trait\n             en Enum\n             st Record\n             st Tuple\n             md module\n             st Unit\n             md qualified\n-            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)  macro_rules! makro\n             ?? Unresolved\n             fn function() fn()\n             sc STATIC\n             un Union\n             ev TupleV(\u2026)  (u32)\n             ct CONST\n-        \"##]],\n+        \"#]],\n     );\n }\n "}, {"sha": "c996a5f01f87372cbfcbc4fb16e09dfa4de83ba5", "filename": "crates/ide_completion/src/tests/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fflyimport.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -1108,7 +1108,7 @@ fn flyimport_attribute() {\n struct Foo;\n \"#,\n         expect![[r#\"\n-            at identity (use proc_macros::identity) pub macro identity\n+            at identity (use proc_macros::identity) proc_macro identity\n         \"#]],\n     );\n     check_edit("}, {"sha": "1d5ddc092e5080462851576f2ad9827135eea200", "filename": "crates/ide_completion/src/tests/item.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -17,7 +17,7 @@ fn target_type_or_trait_in_impl_block() {\n         r#\"\n impl Tra$0\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n@@ -27,10 +27,10 @@ impl Tra$0\n             st Tuple\n             md module\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             un Union\n             bt u32\n-        \"##]],\n+        \"#]],\n     )\n }\n \n@@ -40,7 +40,7 @@ fn target_type_in_trait_impl_block() {\n         r#\"\n impl Trait for Str$0\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n@@ -50,10 +50,10 @@ impl Trait for Str$0\n             st Tuple\n             md module\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             un Union\n             bt u32\n-        \"##]],\n+        \"#]],\n     )\n }\n \n@@ -85,7 +85,7 @@ fn after_struct_name() {\n     // FIXME: This should emit `kw where` only\n     check(\n         r\"struct Struct $0\",\n-        expect![[r##\"\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub(super)\n             kw pub\n@@ -109,8 +109,8 @@ fn after_struct_name() {\n             kw super\n             kw crate\n             md module\n-            ma makro!(\u2026)           #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026)           macro_rules! makro\n+        \"#]],\n     );\n }\n \n@@ -119,7 +119,7 @@ fn after_fn_name() {\n     // FIXME: This should emit `kw where` only\n     check(\n         r\"fn func() $0\",\n-        expect![[r##\"\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub(super)\n             kw pub\n@@ -143,8 +143,8 @@ fn after_fn_name() {\n             kw super\n             kw crate\n             md module\n-            ma makro!(\u2026)           #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026)           macro_rules! makro\n+        \"#]],\n     );\n }\n "}, {"sha": "82824fd3932b4497e6a2320e99f47dc6a697d2a7", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -12,7 +12,7 @@ fn check(ra_fixture: &str, expect: Expect) {\n fn in_mod_item_list() {\n     check(\n         r#\"mod tests { $0 }\"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub(super)\n             kw pub\n@@ -35,16 +35,16 @@ fn in_mod_item_list() {\n             kw self\n             kw super\n             kw crate\n-            ma makro!(\u2026)           #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026)           macro_rules! makro\n+        \"#]],\n     )\n }\n \n #[test]\n fn in_source_file_item_list() {\n     check(\n         r#\"$0\"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub(super)\n             kw pub\n@@ -68,8 +68,8 @@ fn in_source_file_item_list() {\n             kw super\n             kw crate\n             md module\n-            ma makro!(\u2026)           #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026)           macro_rules! makro\n+        \"#]],\n     )\n }\n \n@@ -106,10 +106,10 @@ fn in_qualified_path() {\n     cov_mark::check!(no_keyword_completion_in_non_trivial_path);\n     check(\n         r#\"crate::$0\"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             md module\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026) macro_rules! makro\n+        \"#]],\n     )\n }\n \n@@ -162,7 +162,7 @@ fn after_visibility_unsafe() {\n fn in_impl_assoc_item_list() {\n     check(\n         r#\"impl Struct { $0 }\"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub(super)\n             kw pub\n@@ -174,8 +174,8 @@ fn in_impl_assoc_item_list() {\n             kw super\n             kw crate\n             md module\n-            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026)  macro_rules! makro\n+        \"#]],\n     )\n }\n \n@@ -199,7 +199,7 @@ fn in_impl_assoc_item_list_after_attr() {\n fn in_trait_assoc_item_list() {\n     check(\n         r\"trait Foo { $0 }\",\n-        expect![[r##\"\n+        expect![[r#\"\n             kw unsafe\n             kw fn\n             kw const\n@@ -208,8 +208,8 @@ fn in_trait_assoc_item_list() {\n             kw super\n             kw crate\n             md module\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026) macro_rules! makro\n+        \"#]],\n     );\n }\n \n@@ -233,7 +233,7 @@ impl Test for () {\n     $0\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub(super)\n             kw pub\n@@ -245,7 +245,7 @@ impl Test for () {\n             kw super\n             kw crate\n             md module\n-            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026)  macro_rules! makro\n+        \"#]],\n     );\n }"}, {"sha": "0ca20f93b5e25cc0716f23a1078afc13e07b37f5", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -102,7 +102,7 @@ fn foo() {\n     if let a$0\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw ref\n             kw mut\n             en Enum\n@@ -112,11 +112,11 @@ fn foo() {\n             st Tuple\n             md module\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             bn TupleV    TupleV($1)$0\n             ev TupleV\n             ct CONST\n-        \"##]],\n+        \"#]],\n     );\n }\n \n@@ -132,7 +132,7 @@ fn foo() {\n    let a$0\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw ref\n             kw mut\n             bn Record            Record { field$1 }$0\n@@ -142,8 +142,8 @@ fn foo() {\n             ev Variant\n             en SingleVariantEnum\n             st Unit\n-            ma makro!(\u2026)         #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026)         macro_rules! makro\n+        \"#]],\n     );\n }\n \n@@ -154,32 +154,32 @@ fn in_param() {\n fn foo(a$0) {\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw ref\n             kw mut\n             bn Record    Record { field$1 }: Record$0\n             st Record\n             bn Tuple     Tuple($1): Tuple$0\n             st Tuple\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026) macro_rules! makro\n+        \"#]],\n     );\n     check(\n         r#\"\n fn foo(a$0: Tuple) {\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw ref\n             kw mut\n             bn Record    Record { field$1 }$0\n             st Record\n             bn Tuple     Tuple($1)$0\n             st Tuple\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026) macro_rules! makro\n+        \"#]],\n     );\n }\n "}, {"sha": "5e975d715f66423387e0c62ba66219c50165a58c", "filename": "crates/ide_completion/src/tests/predicate.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -15,7 +15,7 @@ fn predicate_start() {\n         r#\"\n struct Foo<'lt, T, const C: usize> where $0 {}\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n@@ -26,10 +26,10 @@ struct Foo<'lt, T, const C: usize> where $0 {}\n             md module\n             st Foo<\u2026>\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             un Union\n             bt u32\n-        \"##]],\n+        \"#]],\n     );\n }\n \n@@ -39,14 +39,14 @@ fn bound_for_type_pred() {\n         r#\"\n struct Foo<'lt, T, const C: usize> where T: $0 {}\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n             tt Trait\n             md module\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026) macro_rules! makro\n+        \"#]],\n     );\n }\n \n@@ -58,14 +58,14 @@ fn bound_for_lifetime_pred() {\n         r#\"\n struct Foo<'lt, T, const C: usize> where 'lt: $0 {}\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n             tt Trait\n             md module\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026) macro_rules! makro\n+        \"#]],\n     );\n }\n \n@@ -75,14 +75,14 @@ fn bound_for_for_pred() {\n         r#\"\n struct Foo<'lt, T, const C: usize> where for<'a> T: $0 {}\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n             tt Trait\n             md module\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n-        \"##]],\n+            ma makro!(\u2026) macro_rules! makro\n+        \"#]],\n     );\n }\n \n@@ -92,7 +92,7 @@ fn param_list_for_for_pred() {\n         r#\"\n struct Foo<'lt, T, const C: usize> where for<'a> $0 {}\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n@@ -103,10 +103,10 @@ struct Foo<'lt, T, const C: usize> where for<'a> $0 {}\n             md module\n             st Foo<\u2026>\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             un Union\n             bt u32\n-        \"##]],\n+        \"#]],\n     );\n }\n \n@@ -118,7 +118,7 @@ impl Record {\n     fn method(self) where $0 {}\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n@@ -129,9 +129,9 @@ impl Record {\n             st Tuple\n             md module\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             un Union\n             bt u32\n-        \"##]],\n+        \"#]],\n     );\n }"}, {"sha": "c8260f6e23c0345d8269e2688cb1797444a06d58", "filename": "crates/ide_completion/src/tests/type_pos.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -16,7 +16,7 @@ struct Foo<'lt, T, const C: usize> {\n     f: $0\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n@@ -29,10 +29,10 @@ struct Foo<'lt, T, const C: usize> {\n             md module\n             st Foo<\u2026>\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             un Union\n             bt u32\n-        \"##]],\n+        \"#]],\n     )\n }\n \n@@ -42,7 +42,7 @@ fn tuple_struct_field() {\n         r#\"\n struct Foo<'lt, T, const C: usize>(f$0);\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub(super)\n             kw pub\n@@ -58,10 +58,10 @@ struct Foo<'lt, T, const C: usize>(f$0);\n             md module\n             st Foo<\u2026>\n             st Unit\n-            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)  macro_rules! makro\n             un Union\n             bt u32\n-        \"##]],\n+        \"#]],\n     )\n }\n \n@@ -71,7 +71,7 @@ fn fn_return_type() {\n         r#\"\n fn x<'lt, T, const C: usize>() -> $0\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n@@ -82,10 +82,10 @@ fn x<'lt, T, const C: usize>() -> $0\n             st Tuple\n             md module\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             un Union\n             bt u32\n-        \"##]],\n+        \"#]],\n     );\n }\n \n@@ -98,7 +98,7 @@ fn foo<'lt, T, const C: usize>() {\n     let _: $0;\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n@@ -109,10 +109,10 @@ fn foo<'lt, T, const C: usize>() {\n             st Tuple\n             md module\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             un Union\n             bt u32\n-        \"##]],\n+        \"#]],\n     );\n     check(\n         r#\"\n@@ -121,16 +121,16 @@ fn foo<'lt, T, const C: usize>() {\n     let _: self::$0;\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             tt Trait\n             en Enum\n             st Record\n             st Tuple\n             md module\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             un Union\n-        \"##]],\n+        \"#]],\n     );\n }\n \n@@ -144,7 +144,7 @@ trait Trait2 {\n \n fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw self\n             kw super\n             kw crate\n@@ -157,12 +157,12 @@ fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n             st Tuple\n             md module\n             st Unit\n-            ma makro!(\u2026)          #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)          macro_rules! makro\n             tt Trait2\n             un Union\n             ct CONST\n             bt u32\n-        \"##]],\n+        \"#]],\n     );\n     check(\n         r#\"\n@@ -172,18 +172,18 @@ trait Trait2 {\n \n fn foo<'lt, T: Trait2<self::$0>, const CONST_PARAM: usize>(_: T) {}\n     \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             tt Trait\n             en Enum\n             st Record\n             st Tuple\n             md module\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             tt Trait2\n             un Union\n             ct CONST\n-        \"##]],\n+        \"#]],\n     );\n }\n "}, {"sha": "f7322656a3e0c449c118d86be7142af796322307", "filename": "crates/syntax/src/display.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c02f625165bb397068ca0adecd93f49289d6b/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=6c8c02f625165bb397068ca0adecd93f49289d6b", "patch": "@@ -1,6 +1,6 @@\n //! This module contains utilities for rendering syntax nodes into a string representing their signature.\n \n-use crate::ast::{self, HasAttrs, HasGenericParams, HasName};\n+use crate::ast::{self, HasGenericParams, HasName};\n \n use ast::HasVisibility;\n use stdx::format_to;\n@@ -49,37 +49,3 @@ pub fn function_declaration(node: &ast::Fn) -> String {\n     }\n     buf\n }\n-\n-pub fn macro_label(node: &ast::Macro) -> String {\n-    let name = node.name();\n-    let mut s = String::new();\n-    match node {\n-        ast::Macro::MacroRules(node) => {\n-            let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export] \" } else { \"\" };\n-            format_to!(s, \"{}macro_rules!\", vis);\n-        }\n-        ast::Macro::MacroDef(node) => {\n-            if let Some(vis) = node.visibility() {\n-                format_to!(s, \"{} \", vis);\n-            }\n-            format_to!(s, \"macro\");\n-        }\n-    }\n-    if let Some(name) = name {\n-        format_to!(s, \" {}\", name);\n-    }\n-    s\n-}\n-\n-pub fn fn_as_proc_macro_label(node: &ast::Fn) -> String {\n-    let name = node.name();\n-    let mut s = String::new();\n-    if let Some(vis) = node.visibility() {\n-        format_to!(s, \"{} \", vis);\n-    }\n-    format_to!(s, \"macro\");\n-    if let Some(name) = name {\n-        format_to!(s, \" {}\", name);\n-    }\n-    s\n-}"}]}