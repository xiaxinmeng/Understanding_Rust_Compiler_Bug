{"sha": "d7c3f588eb78917952aab237c11a0edaae3c84f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YzNmNTg4ZWI3ODkxNzk1MmFhYjIzN2MxMWEwZWRhYWUzYzg0ZjM=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-25T18:57:15Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-23T21:02:49Z"}, "message": "Add shims for opendir and closedir", "tree": {"sha": "d87a266fb5526c4fb929de082904016a7bfb07c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d87a266fb5526c4fb929de082904016a7bfb07c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7c3f588eb78917952aab237c11a0edaae3c84f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c3f588eb78917952aab237c11a0edaae3c84f3", "html_url": "https://github.com/rust-lang/rust/commit/d7c3f588eb78917952aab237c11a0edaae3c84f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7c3f588eb78917952aab237c11a0edaae3c84f3/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b34f06bae63f9da496a907408789e17fc2ead0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b34f06bae63f9da496a907408789e17fc2ead0b", "html_url": "https://github.com/rust-lang/rust/commit/5b34f06bae63f9da496a907408789e17fc2ead0b"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "0c4439287b329ba57ad1a00b50ad149daf334ad5", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7c3f588eb78917952aab237c11a0edaae3c84f3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c3f588eb78917952aab237c11a0edaae3c84f3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d7c3f588eb78917952aab237c11a0edaae3c84f3", "patch": "@@ -36,7 +36,7 @@ pub use rustc_mir::interpret::{self, AllocMap, PlaceTy};\n pub use crate::shims::dlsym::{Dlsym, EvalContextExt as DlsymEvalContextExt};\n pub use crate::shims::env::{EnvVars, EvalContextExt as EnvEvalContextExt};\n pub use crate::shims::foreign_items::EvalContextExt as ForeignItemsEvalContextExt;\n-pub use crate::shims::fs::{EvalContextExt as FileEvalContextExt, FileHandler};\n+pub use crate::shims::fs::{DirHandler, EvalContextExt as FileEvalContextExt, FileHandler};\n pub use crate::shims::intrinsics::EvalContextExt as IntrinsicsEvalContextExt;\n pub use crate::shims::panic::{CatchUnwindData, EvalContextExt as PanicEvalContextExt};\n pub use crate::shims::time::EvalContextExt as TimeEvalContextExt;"}, {"sha": "a6bb35c811aae3922aa4fc080fe0859186168730", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7c3f588eb78917952aab237c11a0edaae3c84f3/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c3f588eb78917952aab237c11a0edaae3c84f3/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=d7c3f588eb78917952aab237c11a0edaae3c84f3", "patch": "@@ -115,6 +115,7 @@ pub struct Evaluator<'tcx> {\n     pub(crate) communicate: bool,\n \n     pub(crate) file_handler: FileHandler,\n+    pub(crate) dir_handler: DirHandler,\n \n     /// The temporary used for storing the argument of\n     /// the call to `miri_start_panic` (the panic payload) when unwinding.\n@@ -134,6 +135,7 @@ impl<'tcx> Evaluator<'tcx> {\n             tls: TlsData::default(),\n             communicate,\n             file_handler: Default::default(),\n+            dir_handler: Default::default(),\n             panic_payload: None,\n         }\n     }"}, {"sha": "636137f62de05d8e4c315181de04dbf6d4bdce3e", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7c3f588eb78917952aab237c11a0edaae3c84f3/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c3f588eb78917952aab237c11a0edaae3c84f3/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=d7c3f588eb78917952aab237c11a0edaae3c84f3", "patch": "@@ -119,6 +119,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"closedir\" => {\n+                let result = this.closedir(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"lseek\" | \"lseek64\" => {\n                 let result = this.lseek64(args[0], args[1], args[2])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;"}, {"sha": "4c13624008c9084477741c5cd1ab9b39fd2d27d5", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7c3f588eb78917952aab237c11a0edaae3c84f3/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c3f588eb78917952aab237c11a0edaae3c84f3/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=d7c3f588eb78917952aab237c11a0edaae3c84f3", "patch": "@@ -27,6 +27,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            // The only reason this is not in the `posix` module is because the `macos` item has a\n+            // different name.\n+            \"opendir\" => {\n+                let result = this.opendir(args[0])?;\n+                this.write_scalar(result, dest)?;\n+            }\n+\n             // Time related shims\n \n             // This is a POSIX function but it has only been tested on linux."}, {"sha": "333b559627c1a602de0737b99aa15b1ce3f9be3e", "filename": "src/shims/fs.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d7c3f588eb78917952aab237c11a0edaae3c84f3/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c3f588eb78917952aab237c11a0edaae3c84f3/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=d7c3f588eb78917952aab237c11a0edaae3c84f3", "patch": "@@ -1,6 +1,7 @@\n use std::collections::BTreeMap;\n+use std::collections::HashMap;\n use std::convert::{TryFrom, TryInto};\n-use std::fs::{remove_dir, remove_file, rename, DirBuilder, File, OpenOptions};\n+use std::fs::{read_dir, remove_dir, remove_file, rename, DirBuilder, File, OpenOptions, ReadDir};\n use std::io::{Read, Seek, SeekFrom, Write};\n use std::path::PathBuf;\n use std::time::SystemTime;\n@@ -162,6 +163,11 @@ trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, '\n     }\n }\n \n+#[derive(Debug, Default)]\n+pub struct DirHandler {\n+    streams: HashMap<Pointer<Tag>, ReadDir>,\n+}\n+\n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn open(\n@@ -761,6 +767,55 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.try_unwrap_io_result(result)\n     }\n+\n+    fn opendir(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"opendir\")?;\n+\n+        let name = this.read_os_str_from_c_str(this.read_scalar(name_op)?.not_undef()?)?;\n+\n+        let result = read_dir(name);\n+\n+        match result {\n+            Ok(dir_iter) => {\n+                let size = 1;\n+                let kind = MiriMemoryKind::Env;\n+                let align = this.min_align(size, kind);\n+                let dir_ptr = this.memory.allocate(Size::from_bytes(size), align, kind.into());\n+                let prev = this\n+                    .machine\n+                    .dir_handler\n+                    .streams\n+                    .insert(dir_ptr, dir_iter);\n+                if let Some(_) = prev {\n+                    throw_unsup_format!(\"The pointer allocated for opendir was already registered by a previous call to opendir\")\n+                } else {\n+                    Ok(Scalar::Ptr(dir_ptr))\n+                }\n+            }\n+            Err(e) => {\n+                this.set_last_error_from_io_error(e)?;\n+                Ok(Scalar::from_int(0, this.memory.pointer_size()))\n+            }\n+        }\n+    }\n+\n+    fn closedir(&mut self, dirp_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"closedir\")?;\n+\n+        let dirp = this.force_ptr(this.read_scalar(dirp_op)?.not_undef()?)?;\n+\n+        if let Some(dir_iter) = this.machine.dir_handler.streams.remove(&dirp) {\n+            drop(dir_iter);\n+            this.memory.deallocate(dirp, None, MiriMemoryKind::Env.into())?;\n+            Ok(0)\n+        } else {\n+            this.handle_not_found()\n+        }\n+    }\n }\n \n /// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when"}]}