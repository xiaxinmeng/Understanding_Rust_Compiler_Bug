{"sha": "6d26c5f73ca1c6d1615c141b181374e152cab61a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMjZjNWY3M2NhMWM2ZDE2MTVjMTQxYjE4MTM3NGUxNTJjYWI2MWE=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-05-06T18:42:15Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-05-06T18:42:15Z"}, "message": "rustfmt", "tree": {"sha": "f6f593dd54d56fdc1d41cd7ab5948a21547735c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6f593dd54d56fdc1d41cd7ab5948a21547735c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d26c5f73ca1c6d1615c141b181374e152cab61a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d26c5f73ca1c6d1615c141b181374e152cab61a", "html_url": "https://github.com/rust-lang/rust/commit/6d26c5f73ca1c6d1615c141b181374e152cab61a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d26c5f73ca1c6d1615c141b181374e152cab61a/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3b8ab5199af4a3c11d14b0cbdb17a641e8eee71", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b8ab5199af4a3c11d14b0cbdb17a641e8eee71", "html_url": "https://github.com/rust-lang/rust/commit/c3b8ab5199af4a3c11d14b0cbdb17a641e8eee71"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "5eb5475b2a9484aa75b9125678e71d2a944e0cb4", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/6d26c5f73ca1c6d1615c141b181374e152cab61a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d26c5f73ca1c6d1615c141b181374e152cab61a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=6d26c5f73ca1c6d1615c141b181374e152cab61a", "patch": "@@ -1,10 +1,10 @@\n use crate::ast::Ident;\n use crate::ext::base::ExtCtxt;\n use crate::ext::expand::Marker;\n-use crate::ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n+use crate::ext::tt::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n use crate::ext::tt::quoted;\n use crate::mut_visit::noop_visit_tt;\n-use crate::parse::token::{self, Token, NtTT};\n+use crate::parse::token::{self, NtTT, Token};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};\n@@ -16,18 +16,10 @@ use std::mem;\n use std::ops::Add;\n use std::rc::Rc;\n \n-// An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`).\n+/// An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`).\n enum Frame {\n-    Delimited {\n-        forest: Lrc<quoted::Delimited>,\n-        idx: usize,\n-        span: DelimSpan,\n-    },\n-    Sequence {\n-        forest: Lrc<quoted::SequenceRepetition>,\n-        idx: usize,\n-        sep: Option<Token>,\n-    },\n+    Delimited { forest: Lrc<quoted::Delimited>, idx: usize, span: DelimSpan },\n+    Sequence { forest: Lrc<quoted::SequenceRepetition>, idx: usize, sep: Option<Token> },\n }\n \n impl Frame {\n@@ -54,13 +46,13 @@ impl Iterator for Frame {\n     }\n }\n \n-/// This can do Macro-By-Example transcription. On the other hand, if\n-/// `src` contains no `TokenTree::{Sequence, MetaVar, MetaVarDecl}`s, `interp` can\n-/// (and should) be None.\n-pub fn transcribe(cx: &ExtCtxt<'_>,\n-                  interp: Option<FxHashMap<Ident, Rc<NamedMatch>>>,\n-                  src: Vec<quoted::TokenTree>)\n-                  -> TokenStream {\n+/// This can do Macro-By-Example transcription. On the other hand, if `src` contains no\n+/// `TokenTree::{Sequence, MetaVar, MetaVarDecl}`s, `interp` can (and should) be `None`.\n+pub fn transcribe(\n+    cx: &ExtCtxt<'_>,\n+    interp: Option<FxHashMap<Ident, Rc<NamedMatch>>>,\n+    src: Vec<quoted::TokenTree>,\n+) -> TokenStream {\n     let mut stack: SmallVec<[Frame; 1]> = smallvec![Frame::new(src)];\n     let interpolations = interp.unwrap_or_else(FxHashMap::default); /* just a convenience */\n     let mut repeats = Vec::new();\n@@ -84,7 +76,7 @@ pub fn transcribe(cx: &ExtCtxt<'_>,\n                         };\n                         result.push(TokenTree::Token(prev_span, sep).into());\n                     }\n-                    continue\n+                    continue;\n                 }\n             }\n \n@@ -96,29 +88,30 @@ pub fn transcribe(cx: &ExtCtxt<'_>,\n                     if result_stack.is_empty() {\n                         return TokenStream::new(result);\n                     }\n-                    let tree = TokenTree::Delimited(\n-                        span,\n-                        forest.delim,\n-                        TokenStream::new(result).into(),\n-                    );\n+                    let tree =\n+                        TokenTree::Delimited(span, forest.delim, TokenStream::new(result).into());\n                     result = result_stack.pop().unwrap();\n                     result.push(tree.into());\n                 }\n             }\n-            continue\n+            continue;\n         };\n \n         match tree {\n             quoted::TokenTree::Sequence(sp, seq) => {\n                 // FIXME(pcwalton): Bad copy.\n-                match lockstep_iter_size(&quoted::TokenTree::Sequence(sp, seq.clone()),\n-                                         &interpolations,\n-                                         &repeats) {\n+                match lockstep_iter_size(\n+                    &quoted::TokenTree::Sequence(sp, seq.clone()),\n+                    &interpolations,\n+                    &repeats,\n+                ) {\n                     LockstepIterSize::Unconstrained => {\n-                        cx.span_fatal(sp.entire(), /* blame macro writer */\n+                        cx.span_fatal(\n+                            sp.entire(), /* blame macro writer */\n                             \"attempted to repeat an expression \\\n                              containing no syntax \\\n-                             variables matched as repeating at this depth\");\n+                             variables matched as repeating at this depth\",\n+                        );\n                     }\n                     LockstepIterSize::Contradiction(ref msg) => {\n                         // FIXME #2887 blame macro invoker instead\n@@ -153,8 +146,10 @@ pub fn transcribe(cx: &ExtCtxt<'_>,\n                             result.push(token.into());\n                         }\n                     } else {\n-                        cx.span_fatal(sp, /* blame the macro writer */\n-                            &format!(\"variable '{}' is still repeating at this depth\", ident));\n+                        cx.span_fatal(\n+                            sp, /* blame the macro writer */\n+                            &format!(\"variable '{}' is still repeating at this depth\", ident),\n+                        );\n                     }\n                 } else {\n                     let ident =\n@@ -180,10 +175,11 @@ pub fn transcribe(cx: &ExtCtxt<'_>,\n     }\n }\n \n-fn lookup_cur_matched(ident: Ident,\n-                      interpolations: &FxHashMap<Ident, Rc<NamedMatch>>,\n-                      repeats: &[(usize, usize)])\n-                      -> Option<Rc<NamedMatch>> {\n+fn lookup_cur_matched(\n+    ident: Ident,\n+    interpolations: &FxHashMap<Ident, Rc<NamedMatch>>,\n+    repeats: &[(usize, usize)],\n+) -> Option<Rc<NamedMatch>> {\n     interpolations.get(&ident).map(|matched| {\n         let mut matched = matched.clone();\n         for &(idx, _) in repeats {\n@@ -217,40 +213,44 @@ impl Add for LockstepIterSize {\n                 LockstepIterSize::Contradiction(_) => other,\n                 LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self,\n                 LockstepIterSize::Constraint(r_len, r_id) => {\n-                    let msg = format!(\"inconsistent lockstep iteration: \\\n-                                       '{}' has {} items, but '{}' has {}\",\n-                                      l_id, l_len, r_id, r_len);\n+                    let msg = format!(\n+                        \"inconsistent lockstep iteration: \\\n+                         '{}' has {} items, but '{}' has {}\",\n+                        l_id, l_len, r_id, r_len\n+                    );\n                     LockstepIterSize::Contradiction(msg)\n                 }\n             },\n         }\n     }\n }\n \n-fn lockstep_iter_size(tree: &quoted::TokenTree,\n-                      interpolations: &FxHashMap<Ident, Rc<NamedMatch>>,\n-                      repeats: &[(usize, usize)])\n-                      -> LockstepIterSize {\n+fn lockstep_iter_size(\n+    tree: &quoted::TokenTree,\n+    interpolations: &FxHashMap<Ident, Rc<NamedMatch>>,\n+    repeats: &[(usize, usize)],\n+) -> LockstepIterSize {\n     use quoted::TokenTree;\n     match *tree {\n         TokenTree::Delimited(_, ref delimed) => {\n             delimed.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {\n                 size + lockstep_iter_size(tt, interpolations, repeats)\n             })\n-        },\n+        }\n         TokenTree::Sequence(_, ref seq) => {\n             seq.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {\n                 size + lockstep_iter_size(tt, interpolations, repeats)\n             })\n-        },\n-        TokenTree::MetaVar(_, name) | TokenTree::MetaVarDecl(_, name, _) =>\n+        }\n+        TokenTree::MetaVar(_, name) | TokenTree::MetaVarDecl(_, name, _) => {\n             match lookup_cur_matched(name, interpolations, repeats) {\n                 Some(matched) => match *matched {\n                     MatchedNonterminal(_) => LockstepIterSize::Unconstrained,\n                     MatchedSeq(ref ads, _) => LockstepIterSize::Constraint(ads.len(), name),\n                 },\n-                _ => LockstepIterSize::Unconstrained\n-            },\n+                _ => LockstepIterSize::Unconstrained,\n+            }\n+        }\n         TokenTree::Token(..) => LockstepIterSize::Unconstrained,\n     }\n }"}]}