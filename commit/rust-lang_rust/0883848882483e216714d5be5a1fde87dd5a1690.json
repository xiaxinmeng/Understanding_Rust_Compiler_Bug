{"sha": "0883848882483e216714d5be5a1fde87dd5a1690", "node_id": "C_kwDOAAsO6NoAKDA4ODM4NDg4ODI0ODNlMjE2NzE0ZDViZTVhMWZkZTg3ZGQ1YTE2OTA", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-28T10:51:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-28T10:51:11Z"}, "message": "Rollup merge of #92284 - the8472:simplify-advance-by, r=scottmcm\n\nChange advance(_back)_by to return the remainder instead of the number of processed elements\n\nWhen advance_by can't advance the iterator by the number of requested elements it now returns the amount by which it couldn't be advanced instead of the amount by which it did.\n\nThis simplifies adapters like chain, flatten or cycle because the remainder doesn't have to be calculated as the difference between requested steps and completed steps anymore.\n\nAdditionally switching from `Result<(), usize>` to `Result<(), NonZeroUsize>` reduces the size of the result and makes converting from/to a usize representing the number of remaining steps cheap.", "tree": {"sha": "d95b525e10a670b6f775785c18dd41d68c9f84bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d95b525e10a670b6f775785c18dd41d68c9f84bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0883848882483e216714d5be5a1fde87dd5a1690", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkIsafCRBK7hj4Ov3rIwAAWvAIAKzTMdD8sE0dzvX6Acnt0UNL\nuEmCA5tiUic5OnxXakjQLe8j0l0qcbDhb/dlSfWNLndQbAtVAj0w0AfM8oRNAV9b\nK6gfgmN4AbNq1jVICJ4v7fkbhRsElM5H/zDP1+zbsr4hU02TeQ1+9uN5IeWyF508\nZwVsrwUKynO+N/pzK45P/uLO72sAQ4VlC3J9I3bIjpm3pnZSSzqKdyJ2iUgSjtik\n/hBURpR4ej+vdDECik3joQ9bJTskCGZRYdboRtNEF4pu6sFi1ip2had7uk212Hyt\nxJ2tbs7TyzL1CJlQAFeVG576PvgYcLxeUPO39RHvSYwuxzqfI5NqiF7oeNjq+Ns=\n=nkwb\n-----END PGP SIGNATURE-----\n", "payload": "tree d95b525e10a670b6f775785c18dd41d68c9f84bc\nparent 857b6316163158b7b44b5521cf4b8e023e375a8f\nparent 41807938d2fbc7928d75b1d68ac08899682168a2\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1680000671 +0200\ncommitter GitHub <noreply@github.com> 1680000671 +0200\n\nRollup merge of #92284 - the8472:simplify-advance-by, r=scottmcm\n\nChange advance(_back)_by to return the remainder instead of the number of processed elements\n\nWhen advance_by can't advance the iterator by the number of requested elements it now returns the amount by which it couldn't be advanced instead of the amount by which it did.\n\nThis simplifies adapters like chain, flatten or cycle because the remainder doesn't have to be calculated as the difference between requested steps and completed steps anymore.\n\nAdditionally switching from `Result<(), usize>` to `Result<(), NonZeroUsize>` reduces the size of the result and makes converting from/to a usize representing the number of remaining steps cheap.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0883848882483e216714d5be5a1fde87dd5a1690", "html_url": "https://github.com/rust-lang/rust/commit/0883848882483e216714d5be5a1fde87dd5a1690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0883848882483e216714d5be5a1fde87dd5a1690/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "857b6316163158b7b44b5521cf4b8e023e375a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/857b6316163158b7b44b5521cf4b8e023e375a8f", "html_url": "https://github.com/rust-lang/rust/commit/857b6316163158b7b44b5521cf4b8e023e375a8f"}, {"sha": "41807938d2fbc7928d75b1d68ac08899682168a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/41807938d2fbc7928d75b1d68ac08899682168a2", "html_url": "https://github.com/rust-lang/rust/commit/41807938d2fbc7928d75b1d68ac08899682168a2"}], "stats": {"total": 709, "additions": 383, "deletions": 326}, "files": [{"sha": "e2b40f7912e0f308ca57b7652b75ef5430651733", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,4 +1,5 @@\n use core::iter::{FusedIterator, TrustedLen};\n+use core::num::NonZeroUsize;\n use core::{array, fmt, mem::MaybeUninit, ops::Try, ptr};\n \n use crate::alloc::{Allocator, Global};\n@@ -54,15 +55,16 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        if self.inner.len < n {\n-            let len = self.inner.len;\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        let len = self.inner.len;\n+        let rem = if len < n {\n             self.inner.clear();\n-            Err(len)\n+            n - len\n         } else {\n             self.inner.drain(..n);\n-            Ok(())\n-        }\n+            0\n+        };\n+        NonZeroUsize::new(rem).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n@@ -182,15 +184,16 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let len = self.inner.len;\n-        if len >= n {\n-            self.inner.truncate(len - n);\n-            Ok(())\n-        } else {\n+        let rem = if len < n {\n             self.inner.clear();\n-            Err(len)\n-        }\n+            n - len\n+        } else {\n+            self.inner.truncate(len - n);\n+            0\n+        };\n+        NonZeroUsize::new(rem).map_or(Ok(()), Err)\n     }\n \n     fn try_rfold<B, F, R>(&mut self, mut init: B, mut f: F) -> R"}, {"sha": "646a2a991e701903123a96ec46cdd0755fa0cccc", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,4 +1,5 @@\n use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n+use core::num::NonZeroUsize;\n use core::ops::Try;\n use core::{fmt, mem, slice};\n \n@@ -55,13 +56,15 @@ impl<'a, T> Iterator for Iter<'a, T> {\n         }\n     }\n \n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let m = match self.i1.advance_by(n) {\n-            Ok(_) => return Ok(()),\n-            Err(m) => m,\n-        };\n-        mem::swap(&mut self.i1, &mut self.i2);\n-        self.i1.advance_by(n - m).map_err(|o| o + m)\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        let remaining = self.i1.advance_by(n);\n+        match remaining {\n+            Ok(()) => return Ok(()),\n+            Err(n) => {\n+                mem::swap(&mut self.i1, &mut self.i2);\n+                self.i1.advance_by(n.get())\n+            }\n+        }\n     }\n \n     #[inline]\n@@ -125,14 +128,14 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n         }\n     }\n \n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let m = match self.i2.advance_back_by(n) {\n-            Ok(_) => return Ok(()),\n-            Err(m) => m,\n-        };\n-\n-        mem::swap(&mut self.i1, &mut self.i2);\n-        self.i2.advance_back_by(n - m).map_err(|o| m + o)\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        match self.i2.advance_back_by(n) {\n+            Ok(()) => return Ok(()),\n+            Err(n) => {\n+                mem::swap(&mut self.i1, &mut self.i2);\n+                self.i2.advance_back_by(n.get())\n+            }\n+        }\n     }\n \n     fn rfold<Acc, F>(self, accum: Acc, mut f: F) -> Acc"}, {"sha": "7defbb1090ffd682b86e2ebe1d1647ab79fa5054", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,4 +1,5 @@\n use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n+use core::num::NonZeroUsize;\n use core::ops::Try;\n use core::{fmt, mem, slice};\n \n@@ -47,13 +48,14 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n         }\n     }\n \n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let m = match self.i1.advance_by(n) {\n-            Ok(_) => return Ok(()),\n-            Err(m) => m,\n-        };\n-        mem::swap(&mut self.i1, &mut self.i2);\n-        self.i1.advance_by(n - m).map_err(|o| o + m)\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        match self.i1.advance_by(n) {\n+            Ok(()) => return Ok(()),\n+            Err(remaining) => {\n+                mem::swap(&mut self.i1, &mut self.i2);\n+                self.i1.advance_by(remaining.get())\n+            }\n+        }\n     }\n \n     #[inline]\n@@ -117,14 +119,14 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n         }\n     }\n \n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let m = match self.i2.advance_back_by(n) {\n-            Ok(_) => return Ok(()),\n-            Err(m) => m,\n-        };\n-\n-        mem::swap(&mut self.i1, &mut self.i2);\n-        self.i2.advance_back_by(n - m).map_err(|o| m + o)\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        match self.i2.advance_back_by(n) {\n+            Ok(()) => return Ok(()),\n+            Err(remaining) => {\n+                mem::swap(&mut self.i1, &mut self.i2);\n+                self.i2.advance_back_by(remaining.get())\n+            }\n+        }\n     }\n \n     fn rfold<Acc, F>(self, accum: Acc, mut f: F) -> Acc"}, {"sha": "6a05f70e4374753a3a6254f2d21f40860bcfba85", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -11,6 +11,7 @@ use core::iter::{\n };\n use core::marker::PhantomData;\n use core::mem::{self, ManuallyDrop, MaybeUninit, SizedTypeProperties};\n+use core::num::NonZeroUsize;\n #[cfg(not(no_global_oom_handling))]\n use core::ops::Deref;\n use core::ptr::{self, NonNull};\n@@ -213,7 +214,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let step_size = self.len().min(n);\n         let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);\n         if T::IS_ZST {\n@@ -227,10 +228,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         unsafe {\n             ptr::drop_in_place(to_drop);\n         }\n-        if step_size < n {\n-            return Err(step_size);\n-        }\n-        Ok(())\n+        NonZeroUsize::new(n - step_size).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n@@ -313,7 +311,7 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let step_size = self.len().min(n);\n         if T::IS_ZST {\n             // SAFETY: same as for advance_by()\n@@ -327,10 +325,7 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n         unsafe {\n             ptr::drop_in_place(to_drop);\n         }\n-        if step_size < n {\n-            return Err(step_size);\n-        }\n-        Ok(())\n+        NonZeroUsize::new(n - step_size).map_or(Ok(()), Err)\n     }\n }\n "}, {"sha": "3ee16f04e92f58fd5d734980f102cc53e8583b9d", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,5 +1,7 @@\n use core::alloc::{Allocator, Layout};\n+use core::assert_eq;\n use core::iter::IntoIterator;\n+use core::num::NonZeroUsize;\n use core::ptr::NonNull;\n use std::alloc::System;\n use std::assert_matches::assert_matches;\n@@ -1062,21 +1064,21 @@ fn test_into_iter_leak() {\n \n #[test]\n fn test_into_iter_advance_by() {\n-    let mut i = [1, 2, 3, 4, 5].into_iter();\n-    i.advance_by(0).unwrap();\n-    i.advance_back_by(0).unwrap();\n+    let mut i = vec![1, 2, 3, 4, 5].into_iter();\n+    assert_eq!(i.advance_by(0), Ok(()));\n+    assert_eq!(i.advance_back_by(0), Ok(()));\n     assert_eq!(i.as_slice(), [1, 2, 3, 4, 5]);\n \n-    i.advance_by(1).unwrap();\n-    i.advance_back_by(1).unwrap();\n+    assert_eq!(i.advance_by(1), Ok(()));\n+    assert_eq!(i.advance_back_by(1), Ok(()));\n     assert_eq!(i.as_slice(), [2, 3, 4]);\n \n-    assert_eq!(i.advance_back_by(usize::MAX), Err(3));\n+    assert_eq!(i.advance_back_by(usize::MAX), Err(NonZeroUsize::new(usize::MAX - 3).unwrap()));\n \n-    assert_eq!(i.advance_by(usize::MAX), Err(0));\n+    assert_eq!(i.advance_by(usize::MAX), Err(NonZeroUsize::new(usize::MAX).unwrap()));\n \n-    i.advance_by(0).unwrap();\n-    i.advance_back_by(0).unwrap();\n+    assert_eq!(i.advance_by(0), Ok(()));\n+    assert_eq!(i.advance_back_by(0), Ok(()));\n \n     assert_eq!(i.len(), 0);\n }\n@@ -1124,7 +1126,7 @@ fn test_into_iter_zst() {\n     for _ in vec![C; 5].into_iter().rev() {}\n \n     let mut it = vec![C, C].into_iter();\n-    it.advance_by(1).unwrap();\n+    assert_eq!(it.advance_by(1), Ok(()));\n     drop(it);\n \n     let mut it = vec![C, C].into_iter();"}, {"sha": "ddc27e34ed994c7be4a86ac4f2f8f20647a2647c", "filename": "library/alloc/tests/vec_deque.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Falloc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec_deque.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,3 +1,4 @@\n+use core::num::NonZeroUsize;\n use std::assert_matches::assert_matches;\n use std::collections::TryReserveErrorKind::*;\n use std::collections::{vec_deque::Drain, VecDeque};\n@@ -426,6 +427,28 @@ fn test_into_iter() {\n         assert_eq!(it.next(), Some(7));\n         assert_eq!(it.size_hint(), (5, Some(5)));\n     }\n+\n+    // advance_by\n+    {\n+        let mut d = VecDeque::new();\n+        for i in 0..=4 {\n+            d.push_back(i);\n+        }\n+        for i in 6..=8 {\n+            d.push_front(i);\n+        }\n+\n+        let mut it = d.into_iter();\n+        assert_eq!(it.advance_by(1), Ok(()));\n+        assert_eq!(it.next(), Some(7));\n+        assert_eq!(it.advance_back_by(1), Ok(()));\n+        assert_eq!(it.next_back(), Some(3));\n+\n+        let mut it = VecDeque::from(vec![1, 2, 3, 4, 5]).into_iter();\n+        assert_eq!(it.advance_by(10), Err(NonZeroUsize::new(5).unwrap()));\n+        let mut it = VecDeque::from(vec![1, 2, 3, 4, 5]).into_iter();\n+        assert_eq!(it.advance_back_by(10), Err(NonZeroUsize::new(5).unwrap()));\n+    }\n }\n \n #[test]"}, {"sha": "73e2c2cfbbef6d19b7cd33ec4ee6f428d61ed1b3", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,5 +1,6 @@\n //! Defines the `IntoIter` owned iterator for arrays.\n \n+use crate::num::NonZeroUsize;\n use crate::{\n     fmt,\n     iter::{self, ExactSizeIterator, FusedIterator, TrustedLen},\n@@ -284,20 +285,19 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n         self.next_back()\n     }\n \n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let original_len = self.len();\n-\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // This also moves the start, which marks them as conceptually \"dropped\",\n         // so if anything goes bad then our drop impl won't double-free them.\n         let range_to_drop = self.alive.take_prefix(n);\n+        let remaining = n - range_to_drop.len();\n \n         // SAFETY: These elements are currently initialized, so it's fine to drop them.\n         unsafe {\n             let slice = self.data.get_unchecked_mut(range_to_drop);\n             ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(slice));\n         }\n \n-        if n > original_len { Err(original_len) } else { Ok(()) }\n+        NonZeroUsize::new(remaining).map_or(Ok(()), Err)\n     }\n }\n \n@@ -334,20 +334,19 @@ impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N> {\n         })\n     }\n \n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let original_len = self.len();\n-\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // This also moves the end, which marks them as conceptually \"dropped\",\n         // so if anything goes bad then our drop impl won't double-free them.\n         let range_to_drop = self.alive.take_suffix(n);\n+        let remaining = n - range_to_drop.len();\n \n         // SAFETY: These elements are currently initialized, so it's fine to drop them.\n         unsafe {\n             let slice = self.data.get_unchecked_mut(range_to_drop);\n             ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(slice));\n         }\n \n-        if n > original_len { Err(original_len) } else { Ok(()) }\n+        NonZeroUsize::new(remaining).map_or(Ok(()), Err)\n     }\n }\n "}, {"sha": "4e0e19ddc78223f40a2d10f058242597d093d747", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,3 +1,4 @@\n+use crate::num::NonZeroUsize;\n use crate::ops::{NeverShortCircuit, Try};\n \n /// Like `Iterator::by_ref`, but requiring `Sized` so it can forward generics.\n@@ -26,7 +27,7 @@ impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         I::advance_by(self.0, n)\n     }\n \n@@ -62,7 +63,7 @@ impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         I::advance_back_by(self.0, n)\n     }\n "}, {"sha": "2046b70c9c6b43edfa8632272e86e2bfe0779665", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,4 +1,5 @@\n use crate::iter::{DoubleEndedIterator, FusedIterator, Iterator, TrustedLen};\n+use crate::num::NonZeroUsize;\n use crate::ops::Try;\n \n /// An iterator that links two iterators together, in a chain.\n@@ -95,38 +96,33 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let mut rem = n;\n-\n+    fn advance_by(&mut self, mut n: usize) -> Result<(), NonZeroUsize> {\n         if let Some(ref mut a) = self.a {\n-            match a.advance_by(rem) {\n+            n = match a.advance_by(n) {\n                 Ok(()) => return Ok(()),\n-                Err(k) => rem -= k,\n-            }\n+                Err(k) => k.get(),\n+            };\n             self.a = None;\n         }\n \n         if let Some(ref mut b) = self.b {\n-            match b.advance_by(rem) {\n-                Ok(()) => return Ok(()),\n-                Err(k) => rem -= k,\n-            }\n+            return b.advance_by(n);\n             // we don't fuse the second iterator\n         }\n \n-        if rem == 0 { Ok(()) } else { Err(n - rem) }\n+        NonZeroUsize::new(n).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n     fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n         if let Some(ref mut a) = self.a {\n-            match a.advance_by(n) {\n+            n = match a.advance_by(n) {\n                 Ok(()) => match a.next() {\n-                    None => n = 0,\n+                    None => 0,\n                     x => return x,\n                 },\n-                Err(k) => n -= k,\n-            }\n+                Err(k) => k.get(),\n+            };\n \n             self.a = None;\n         }\n@@ -186,38 +182,33 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let mut rem = n;\n-\n+    fn advance_back_by(&mut self, mut n: usize) -> Result<(), NonZeroUsize> {\n         if let Some(ref mut b) = self.b {\n-            match b.advance_back_by(rem) {\n+            n = match b.advance_back_by(n) {\n                 Ok(()) => return Ok(()),\n-                Err(k) => rem -= k,\n-            }\n+                Err(k) => k.get(),\n+            };\n             self.b = None;\n         }\n \n         if let Some(ref mut a) = self.a {\n-            match a.advance_back_by(rem) {\n-                Ok(()) => return Ok(()),\n-                Err(k) => rem -= k,\n-            }\n+            return a.advance_back_by(n);\n             // we don't fuse the second iterator\n         }\n \n-        if rem == 0 { Ok(()) } else { Err(n - rem) }\n+        NonZeroUsize::new(n).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n     fn nth_back(&mut self, mut n: usize) -> Option<Self::Item> {\n         if let Some(ref mut b) = self.b {\n-            match b.advance_back_by(n) {\n+            n = match b.advance_back_by(n) {\n                 Ok(()) => match b.next_back() {\n-                    None => n = 0,\n+                    None => 0,\n                     x => return x,\n                 },\n-                Err(k) => n -= k,\n-            }\n+                Err(k) => k.get(),\n+            };\n \n             self.b = None;\n         }"}, {"sha": "2289025d0a78087b3d864aa4cd7479b5c7b5149c", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -4,6 +4,7 @@ use crate::iter::adapters::{\n use crate::iter::{FusedIterator, TrustedLen};\n use crate::mem::MaybeUninit;\n use crate::mem::SizedTypeProperties;\n+use crate::num::NonZeroUsize;\n use crate::ops::Try;\n use crate::{array, ptr};\n \n@@ -89,7 +90,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.it.advance_by(n)\n     }\n \n@@ -130,7 +131,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.it.advance_back_by(n)\n     }\n }"}, {"sha": "51bd09b6effe1ea00ba9f184466f8b3858f7e02e", "filename": "library/core/src/iter/adapters/cycle.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,3 +1,4 @@\n+use crate::num::NonZeroUsize;\n use crate::{iter::FusedIterator, ops::Try};\n \n /// An iterator that repeats endlessly.\n@@ -81,23 +82,22 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let mut rem = n;\n-        match self.iter.advance_by(rem) {\n-            ret @ Ok(_) => return ret,\n-            Err(advanced) => rem -= advanced,\n-        }\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        let mut n = match self.iter.advance_by(n) {\n+            Ok(()) => return Ok(()),\n+            Err(rem) => rem.get(),\n+        };\n \n-        while rem > 0 {\n+        while n > 0 {\n             self.iter = self.orig.clone();\n-            match self.iter.advance_by(rem) {\n-                ret @ Ok(_) => return ret,\n-                Err(0) => return Err(n - rem),\n-                Err(advanced) => rem -= advanced,\n-            }\n+            n = match self.iter.advance_by(n) {\n+                Ok(()) => return Ok(()),\n+                e @ Err(rem) if rem.get() == n => return e,\n+                Err(rem) => rem.get(),\n+            };\n         }\n \n-        Ok(())\n+        NonZeroUsize::new(n).map_or(Ok(()), Err)\n     }\n \n     // No `fold` override, because `fold` doesn't make much sense for `Cycle`,"}, {"sha": "479ea6d83c74e9d847585d104775f627a6a94c25", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -2,6 +2,7 @@ use crate::iter::adapters::{\n     zip::try_get_unchecked, SourceIter, TrustedRandomAccess, TrustedRandomAccessNoCoerce,\n };\n use crate::iter::{FusedIterator, InPlaceIterable, TrustedLen};\n+use crate::num::NonZeroUsize;\n use crate::ops::Try;\n \n /// An iterator that yields the current count and the element during iteration.\n@@ -114,17 +115,14 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        match self.iter.advance_by(n) {\n-            ret @ Ok(_) => {\n-                self.count += n;\n-                ret\n-            }\n-            ret @ Err(advanced) => {\n-                self.count += advanced;\n-                ret\n-            }\n-        }\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        let remaining = self.iter.advance_by(n);\n+        let advanced = match remaining {\n+            Ok(()) => n,\n+            Err(rem) => n - rem.get(),\n+        };\n+        self.count += advanced;\n+        remaining\n     }\n \n     #[rustc_inherit_overflow_checks]\n@@ -208,7 +206,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // we do not need to update the count since that only tallies the number of items\n         // consumed from the front. consuming items from the back can never reduce that.\n         self.iter.advance_back_by(n)"}, {"sha": "e0308e3360f45a1880a779ebcc60ac0262d4dc61", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,5 +1,6 @@\n use crate::fmt;\n use crate::iter::{DoubleEndedIterator, Fuse, FusedIterator, Iterator, Map, TrustedLen};\n+use crate::num::NonZeroUsize;\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator that maps each element to an iterator, and yields the elements\n@@ -75,7 +76,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.inner.advance_by(n)\n     }\n \n@@ -120,7 +121,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.inner.advance_back_by(n)\n     }\n }\n@@ -236,7 +237,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.inner.advance_by(n)\n     }\n \n@@ -281,7 +282,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.inner.advance_back_by(n)\n     }\n }\n@@ -552,18 +553,18 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: Iterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_by(n) {\n                 Ok(()) => ControlFlow::Break(()),\n-                Err(advanced) => ControlFlow::Continue(n - advanced),\n+                Err(remaining) => ControlFlow::Continue(remaining.get()),\n             }\n         }\n \n         match self.iter_try_fold(n, advance) {\n-            ControlFlow::Continue(remaining) if remaining > 0 => Err(n - remaining),\n+            ControlFlow::Continue(remaining) => NonZeroUsize::new(remaining).map_or(Ok(()), Err),\n             _ => Ok(()),\n         }\n     }\n@@ -642,18 +643,18 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: DoubleEndedIterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_back_by(n) {\n                 Ok(()) => ControlFlow::Break(()),\n-                Err(advanced) => ControlFlow::Continue(n - advanced),\n+                Err(remaining) => ControlFlow::Continue(remaining.get()),\n             }\n         }\n \n         match self.iter_try_rfold(n, advance) {\n-            ControlFlow::Continue(remaining) if remaining > 0 => Err(n - remaining),\n+            ControlFlow::Continue(remaining) => NonZeroUsize::new(remaining).map_or(Ok(()), Err),\n             _ => Ok(()),\n         }\n     }"}, {"sha": "1d882087f695d9cbdef301588263fc1b4c63c630", "filename": "library/core/src/iter/adapters/rev.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,4 +1,5 @@\n use crate::iter::{FusedIterator, TrustedLen};\n+use crate::num::NonZeroUsize;\n use crate::ops::Try;\n \n /// A double-ended iterator with the direction inverted.\n@@ -38,7 +39,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.iter.advance_back_by(n)\n     }\n \n@@ -83,7 +84,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.iter.advance_by(n)\n     }\n "}, {"sha": "306338bc7cca0b85e2e94e98fe8832513ba0aa0a", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,5 +1,6 @@\n use crate::intrinsics::unlikely;\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable};\n+use crate::num::NonZeroUsize;\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator that skips over `n` elements of `iter`.\n@@ -128,34 +129,27 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let mut rem = n;\n-        let step_one = self.n.saturating_add(rem);\n-\n-        match self.iter.advance_by(step_one) {\n-            Ok(_) => {\n-                rem -= step_one - self.n;\n-                self.n = 0;\n-            }\n-            Err(advanced) => {\n-                let advanced_without_skip = advanced.saturating_sub(self.n);\n-                self.n = self.n.saturating_sub(advanced);\n-                return if n == 0 { Ok(()) } else { Err(advanced_without_skip) };\n-            }\n-        }\n+    fn advance_by(&mut self, mut n: usize) -> Result<(), NonZeroUsize> {\n+        let skip_inner = self.n;\n+        let skip_and_advance = skip_inner.saturating_add(n);\n \n-        // step_one calculation may have saturated\n-        if unlikely(rem > 0) {\n-            return match self.iter.advance_by(rem) {\n-                ret @ Ok(_) => ret,\n-                Err(advanced) => {\n-                    rem -= advanced;\n-                    Err(n - rem)\n-                }\n-            };\n+        let remainder = match self.iter.advance_by(skip_and_advance) {\n+            Ok(()) => 0,\n+            Err(n) => n.get(),\n+        };\n+        let advanced_inner = skip_and_advance - remainder;\n+        n -= advanced_inner.saturating_sub(skip_inner);\n+        self.n = self.n.saturating_sub(advanced_inner);\n+\n+        // skip_and_advance may have saturated\n+        if unlikely(remainder == 0 && n > 0) {\n+            n = match self.iter.advance_by(n) {\n+                Ok(()) => 0,\n+                Err(n) => n.get(),\n+            }\n         }\n \n-        Ok(())\n+        NonZeroUsize::new(n).map_or(Ok(()), Err)\n     }\n }\n \n@@ -209,13 +203,11 @@ where\n     impl_fold_via_try_fold! { rfold -> try_rfold }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let min = crate::cmp::min(self.len(), n);\n-        return match self.iter.advance_back_by(min) {\n-            ret @ Ok(_) if n <= min => ret,\n-            Ok(_) => Err(min),\n-            _ => panic!(\"ExactSizeIterator contract violation\"),\n-        };\n+        let rem = self.iter.advance_back_by(min);\n+        assert!(rem.is_ok(), \"ExactSizeIterator contract violation\");\n+        NonZeroUsize::new(n - min).map_or(Ok(()), Err)\n     }\n }\n "}, {"sha": "ce18bffe7146f9da9d34d58f28c7be62534279cb", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,5 +1,6 @@\n use crate::cmp;\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable, TrustedLen};\n+use crate::num::NonZeroUsize;\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n@@ -121,18 +122,15 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let min = self.n.min(n);\n-        match self.iter.advance_by(min) {\n-            Ok(_) => {\n-                self.n -= min;\n-                if min < n { Err(min) } else { Ok(()) }\n-            }\n-            ret @ Err(advanced) => {\n-                self.n -= advanced;\n-                ret\n-            }\n-        }\n+        let rem = match self.iter.advance_by(min) {\n+            Ok(()) => 0,\n+            Err(rem) => rem.get(),\n+        };\n+        let advanced = min - rem;\n+        self.n -= advanced;\n+        NonZeroUsize::new(n - advanced).map_or(Ok(()), Err)\n     }\n }\n \n@@ -223,7 +221,7 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // The amount by which the inner iterator needs to be shortened for it to be\n         // at most as long as the take() amount.\n         let trim_inner = self.iter.len().saturating_sub(self.n);\n@@ -232,12 +230,14 @@ where\n         // about having to advance more than usize::MAX here.\n         let advance_by = trim_inner.saturating_add(n);\n \n-        let advanced = match self.iter.advance_back_by(advance_by) {\n-            Ok(_) => advance_by - trim_inner,\n-            Err(advanced) => advanced - trim_inner,\n+        let remainder = match self.iter.advance_back_by(advance_by) {\n+            Ok(()) => 0,\n+            Err(rem) => rem.get(),\n         };\n-        self.n -= advanced;\n-        return if advanced < n { Err(advanced) } else { Ok(()) };\n+        let advanced_by_inner = advance_by - remainder;\n+        let advanced_by = advanced_by_inner - trim_inner;\n+        self.n -= advanced_by;\n+        NonZeroUsize::new(n - advanced_by).map_or(Ok(()), Err)\n     }\n }\n "}, {"sha": "1cd71193bd772f693828ae8af8ca5b77857fbff1", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,6 +1,7 @@\n use crate::convert::TryFrom;\n use crate::marker::Destruct;\n use crate::mem;\n+use crate::num::NonZeroUsize;\n use crate::ops::{self, Try};\n \n use super::{\n@@ -530,12 +531,12 @@ trait RangeIteratorImpl {\n     // Iterator\n     fn spec_next(&mut self) -> Option<Self::Item>;\n     fn spec_nth(&mut self, n: usize) -> Option<Self::Item>;\n-    fn spec_advance_by(&mut self, n: usize) -> Result<(), usize>;\n+    fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize>;\n \n     // DoubleEndedIterator\n     fn spec_next_back(&mut self) -> Option<Self::Item>;\n     fn spec_nth_back(&mut self, n: usize) -> Option<Self::Item>;\n-    fn spec_advance_back_by(&mut self, n: usize) -> Result<(), usize>;\n+    fn spec_advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize>;\n }\n \n impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A> {\n@@ -567,7 +568,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n     }\n \n     #[inline]\n-    default fn spec_advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    default fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -579,7 +580,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n         self.start =\n             Step::forward_checked(self.start.clone(), taken).expect(\"`Step` invariants not upheld\");\n \n-        if taken < n { Err(taken) } else { Ok(()) }\n+        NonZeroUsize::new(n - taken).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n@@ -608,7 +609,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n     }\n \n     #[inline]\n-    default fn spec_advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    default fn spec_advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -620,7 +621,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n         self.end =\n             Step::backward_checked(self.end.clone(), taken).expect(\"`Step` invariants not upheld\");\n \n-        if taken < n { Err(taken) } else { Ok(()) }\n+        NonZeroUsize::new(n - taken).map_or(Ok(()), Err)\n     }\n }\n \n@@ -651,7 +652,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n     }\n \n     #[inline]\n-    fn spec_advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -666,7 +667,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n         // Otherwise 0 is returned which always safe to use.\n         self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };\n \n-        if taken < n { Err(taken) } else { Ok(()) }\n+        NonZeroUsize::new(n - taken).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n@@ -695,7 +696,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n     }\n \n     #[inline]\n-    fn spec_advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn spec_advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -707,7 +708,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n         // SAFETY: same as the spec_advance_by() implementation\n         self.end = unsafe { Step::backward_unchecked(self.end.clone(), taken) };\n \n-        if taken < n { Err(taken) } else { Ok(()) }\n+        NonZeroUsize::new(n - taken).map_or(Ok(()), Err)\n     }\n }\n \n@@ -757,7 +758,7 @@ impl<A: ~const Step + ~const Destruct> const Iterator for ops::Range<A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.spec_advance_by(n)\n     }\n \n@@ -836,7 +837,7 @@ impl<A: ~const Step + ~const Destruct> const DoubleEndedIterator for ops::Range<\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.spec_advance_back_by(n)\n     }\n }"}, {"sha": "67051f6e97bdd42b9a3810d8094e83245f543129", "filename": "library/core/src/iter/sources/repeat.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,4 +1,5 @@\n use crate::iter::{FusedIterator, TrustedLen};\n+use crate::num::NonZeroUsize;\n \n /// Creates a new iterator that endlessly repeats a single element.\n ///\n@@ -80,7 +81,7 @@ impl<A: Clone> Iterator for Repeat<A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // Advancing an infinite iterator of a single element is a no-op.\n         let _ = n;\n         Ok(())\n@@ -109,7 +110,7 @@ impl<A: Clone> DoubleEndedIterator for Repeat<A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // Advancing an infinite iterator of a single element is a no-op.\n         let _ = n;\n         Ok(())"}, {"sha": "0b0445850bf526ed02b5a7349e954751ebdab859", "filename": "library/core/src/iter/sources/repeat_n.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,5 +1,6 @@\n use crate::iter::{FusedIterator, TrustedLen};\n use crate::mem::ManuallyDrop;\n+use crate::num::NonZeroUsize;\n \n /// Creates a new iterator that repeats a single element a given number of times.\n ///\n@@ -137,15 +138,16 @@ impl<A: Clone> Iterator for RepeatN<A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, skip: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, skip: usize) -> Result<(), NonZeroUsize> {\n         let len = self.count;\n \n         if skip >= len {\n             self.take_element();\n         }\n \n         if skip > len {\n-            Err(len)\n+            // SAFETY: we just checked that the difference is positive\n+            Err(unsafe { NonZeroUsize::new_unchecked(skip - len) })\n         } else {\n             self.count = len - skip;\n             Ok(())\n@@ -178,7 +180,7 @@ impl<A: Clone> DoubleEndedIterator for RepeatN<A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.advance_by(n)\n     }\n "}, {"sha": "d82ecb698dd085abed3a72806617654221602cba", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,4 +1,5 @@\n use crate::marker::Destruct;\n+use crate::num::NonZeroUsize;\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator able to yield elements from both ends.\n@@ -100,10 +101,11 @@ pub trait DoubleEndedIterator: Iterator {\n     /// eagerly skip `n` elements starting from the back by calling [`next_back`] up\n     /// to `n` times until [`None`] is encountered.\n     ///\n-    /// `advance_back_by(n)` will return [`Ok(())`] if the iterator successfully advances by\n-    /// `n` elements, or [`Err(k)`] if [`None`] is encountered, where `k` is the number of\n-    /// elements the iterator is advanced by before running out of elements (i.e. the length\n-    /// of the iterator). Note that `k` is always less than `n`.\n+    /// `advance_back_by(n)` will return `Ok(())` if the iterator successfully advances by\n+    /// `n` elements, or a `Err(NonZeroUsize)` with value `k` if [`None`] is encountered, where `k`\n+    /// is remaining number of steps that could not be advanced because the iterator ran out.\n+    /// If `self` is empty and `n` is non-zero, then this returns `Err(n)`.\n+    /// Otherwise, `k` is always less than `n`.\n     ///\n     /// Calling `advance_back_by(0)` can do meaningful work, for example [`Flatten`] can advance its\n     /// outer iterator until it finds an inner iterator that is not empty, which then often\n@@ -120,25 +122,29 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     /// #![feature(iter_advance_by)]\n     ///\n+    /// use std::num::NonZeroUsize;\n     /// let a = [3, 4, 5, 6];\n     /// let mut iter = a.iter();\n     ///\n     /// assert_eq!(iter.advance_back_by(2), Ok(()));\n     /// assert_eq!(iter.next_back(), Some(&4));\n     /// assert_eq!(iter.advance_back_by(0), Ok(()));\n-    /// assert_eq!(iter.advance_back_by(100), Err(1)); // only `&3` was skipped\n+    /// assert_eq!(iter.advance_back_by(100), Err(NonZeroUsize::new(99).unwrap())); // only `&3` was skipped\n     /// ```\n     ///\n     /// [`Ok(())`]: Ok\n     /// [`Err(k)`]: Err\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize>\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize>\n     where\n         Self::Item: ~const Destruct,\n     {\n         for i in 0..n {\n-            self.next_back().ok_or(i)?;\n+            if self.next_back().is_none() {\n+                // SAFETY: `i` is always less than `n`.\n+                return Err(unsafe { NonZeroUsize::new_unchecked(n - i) });\n+            }\n         }\n         Ok(())\n     }\n@@ -188,7 +194,9 @@ pub trait DoubleEndedIterator: Iterator {\n     #[stable(feature = \"iter_nth_back\", since = \"1.37.0\")]\n     #[rustc_do_not_const_check]\n     fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n-        self.advance_back_by(n).ok()?;\n+        if self.advance_back_by(n).is_err() {\n+            return None;\n+        }\n         self.next_back()\n     }\n \n@@ -374,7 +382,7 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n     fn next_back(&mut self) -> Option<I::Item> {\n         (**self).next_back()\n     }\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         (**self).advance_back_by(n)\n     }\n     fn nth_back(&mut self, n: usize) -> Option<I::Item> {"}, {"sha": "080330fa41ef5c177eb5ed0602c4c4759954fdf6", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,6 +1,7 @@\n use crate::array;\n use crate::cmp::{self, Ordering};\n use crate::marker::Destruct;\n+use crate::num::NonZeroUsize;\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n \n use super::super::try_process;\n@@ -308,10 +309,11 @@ pub trait Iterator {\n     /// This method will eagerly skip `n` elements by calling [`next`] up to `n`\n     /// times until [`None`] is encountered.\n     ///\n-    /// `advance_by(n)` will return [`Ok(())`][Ok] if the iterator successfully advances by\n-    /// `n` elements, or [`Err(k)`][Err] if [`None`] is encountered, where `k` is the number\n-    /// of elements the iterator is advanced by before running out of elements (i.e. the\n-    /// length of the iterator). Note that `k` is always less than `n`.\n+    /// `advance_by(n)` will return `Ok(())` if the iterator successfully advances by\n+    /// `n` elements, or a `Err(NonZeroUsize)` with value `k` if [`None`] is encountered,\n+    /// where `k` is remaining number of steps that could not be advanced because the iterator ran out.\n+    /// If `self` is empty and `n` is non-zero, then this returns `Err(n)`.\n+    /// Otherwise, `k` is always less than `n`.\n     ///\n     /// Calling `advance_by(0)` can do meaningful work, for example [`Flatten`]\n     /// can advance its outer iterator until it finds an inner iterator that is not empty, which\n@@ -327,22 +329,26 @@ pub trait Iterator {\n     /// ```\n     /// #![feature(iter_advance_by)]\n     ///\n+    /// use std::num::NonZeroUsize;\n     /// let a = [1, 2, 3, 4];\n     /// let mut iter = a.iter();\n     ///\n     /// assert_eq!(iter.advance_by(2), Ok(()));\n     /// assert_eq!(iter.next(), Some(&3));\n     /// assert_eq!(iter.advance_by(0), Ok(()));\n-    /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped\n+    /// assert_eq!(iter.advance_by(100), Err(NonZeroUsize::new(99).unwrap())); // only `&4` was skipped\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize>\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize>\n     where\n         Self::Item: ~const Destruct,\n     {\n         for i in 0..n {\n-            self.next().ok_or(i)?;\n+            if self.next().is_none() {\n+                // SAFETY: `i` is always less than `n`.\n+                return Err(unsafe { NonZeroUsize::new_unchecked(n - i) });\n+            }\n         }\n         Ok(())\n     }\n@@ -4013,7 +4019,7 @@ impl<I: Iterator + ?Sized> Iterator for &mut I {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (**self).size_hint()\n     }\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         (**self).advance_by(n)\n     }\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {"}, {"sha": "265022a394e882fced2cc9fb899d6bc12a8c44c2", "filename": "library/core/src/ops/index_range.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fops%2Findex_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fops%2Findex_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex_range.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,5 +1,6 @@\n use crate::intrinsics::{assert_unsafe_precondition, unchecked_add, unchecked_sub};\n use crate::iter::{FusedIterator, TrustedLen};\n+use crate::num::NonZeroUsize;\n \n /// Like a `Range<usize>`, but with a safety invariant that `start <= end`.\n ///\n@@ -132,10 +133,9 @@ impl Iterator for IndexRange {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let original_len = self.len();\n-        self.take_prefix(n);\n-        if n > original_len { Err(original_len) } else { Ok(()) }\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        let taken = self.take_prefix(n);\n+        NonZeroUsize::new(n - taken.len()).map_or(Ok(()), Err)\n     }\n }\n \n@@ -151,10 +151,9 @@ impl DoubleEndedIterator for IndexRange {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let original_len = self.len();\n-        self.take_suffix(n);\n-        if n > original_len { Err(original_len) } else { Ok(()) }\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        let taken = self.take_suffix(n);\n+        NonZeroUsize::new(n - taken.len()).map_or(Ok(()), Err)\n     }\n }\n "}, {"sha": "b73e35f1e9138b5744afef54cee24073e5048694", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -176,11 +176,11 @@ macro_rules! iterator {\n             }\n \n             #[inline]\n-            fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+            fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n                 let advance = cmp::min(len!(self), n);\n                 // SAFETY: By construction, `advance` does not exceed `self.len()`.\n                 unsafe { self.post_inc_start(advance) };\n-                if advance == n { Ok(()) } else { Err(advance) }\n+                NonZeroUsize::new(n - advance).map_or(Ok(()), Err)\n             }\n \n             #[inline]\n@@ -371,11 +371,11 @@ macro_rules! iterator {\n             }\n \n             #[inline]\n-            fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+            fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n                 let advance = cmp::min(len!(self), n);\n                 // SAFETY: By construction, `advance` does not exceed `self.len()`.\n                 unsafe { self.pre_dec_end(advance) };\n-                if advance == n { Ok(()) } else { Err(advance) }\n+                NonZeroUsize::new(n - advance).map_or(Ok(()), Err)\n             }\n         }\n "}, {"sha": "0869644c040f5572c7222d9e3f2d04a2709dad08", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,5 +1,6 @@\n-use core::array;\n+use core::{array, assert_eq};\n use core::convert::TryFrom;\n+use core::num::NonZeroUsize;\n use core::sync::atomic::{AtomicUsize, Ordering};\n \n #[test]\n@@ -557,7 +558,7 @@ fn array_intoiter_advance_by() {\n     assert_eq!(counter.get(), 13);\n \n     let r = it.advance_by(123456);\n-    assert_eq!(r, Err(87));\n+    assert_eq!(r, Err(NonZeroUsize::new(123456 - 87).unwrap()));\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n \n@@ -567,7 +568,7 @@ fn array_intoiter_advance_by() {\n     assert_eq!(counter.get(), 100);\n \n     let r = it.advance_by(10);\n-    assert_eq!(r, Err(0));\n+    assert_eq!(r, Err(NonZeroUsize::new(10).unwrap()));\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n }\n@@ -610,7 +611,7 @@ fn array_intoiter_advance_back_by() {\n     assert_eq!(counter.get(), 13);\n \n     let r = it.advance_back_by(123456);\n-    assert_eq!(r, Err(87));\n+    assert_eq!(r, Err(NonZeroUsize::new(123456 - 87).unwrap()));\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n \n@@ -620,7 +621,7 @@ fn array_intoiter_advance_back_by() {\n     assert_eq!(counter.get(), 100);\n \n     let r = it.advance_back_by(10);\n-    assert_eq!(r, Err(0));\n+    assert_eq!(r, Err(NonZeroUsize::new(10).unwrap()));\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n }\n@@ -679,8 +680,8 @@ fn array_into_iter_fold() {\n \n     let a = [1, 2, 3, 4, 5, 6];\n     let mut it = a.into_iter();\n-    it.advance_by(1).unwrap();\n-    it.advance_back_by(2).unwrap();\n+    assert_eq!(it.advance_by(1), Ok(()));\n+    assert_eq!(it.advance_back_by(2), Ok(()));\n     let s = it.fold(10, |a, b| 10 * a + b);\n     assert_eq!(s, 10234);\n }\n@@ -695,8 +696,8 @@ fn array_into_iter_rfold() {\n \n     let a = [1, 2, 3, 4, 5, 6];\n     let mut it = a.into_iter();\n-    it.advance_by(1).unwrap();\n-    it.advance_back_by(2).unwrap();\n+    assert_eq!(it.advance_by(1), Ok(()));\n+    assert_eq!(it.advance_back_by(2), Ok(()));\n     let s = it.rfold(10, |a, b| 10 * a + b);\n     assert_eq!(s, 10432);\n }"}, {"sha": "175a1b638e1a1e48995769f90b23561c52ff9fd6", "filename": "library/core/tests/iter/adapters/chain.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,5 +1,6 @@\n use super::*;\n use core::iter::*;\n+use core::num::NonZeroUsize;\n \n #[test]\n fn test_iterator_chain() {\n@@ -31,28 +32,28 @@ fn test_iterator_chain_advance_by() {\n \n         for i in 0..xs.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            iter.advance_by(i).unwrap();\n+            assert_eq!(iter.advance_by(i), Ok(()));\n             assert_eq!(iter.next(), Some(&xs[i]));\n-            assert_eq!(iter.advance_by(100), Err(len - i - 1));\n-            iter.advance_by(0).unwrap();\n+            assert_eq!(iter.advance_by(100), Err(NonZeroUsize::new(100 - (len - i - 1)).unwrap()));\n+            assert_eq!(iter.advance_by(0), Ok(()));\n         }\n \n         for i in 0..ys.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            iter.advance_by(xs.len() + i).unwrap();\n+            assert_eq!(iter.advance_by(xs.len() + i), Ok(()));\n             assert_eq!(iter.next(), Some(&ys[i]));\n-            assert_eq!(iter.advance_by(100), Err(ys.len() - i - 1));\n-            iter.advance_by(0).unwrap();\n+            assert_eq!(iter.advance_by(100), Err(NonZeroUsize::new(100 - (ys.len() - i - 1)).unwrap()));\n+            assert_eq!(iter.advance_by(0), Ok(()));\n         }\n \n         let mut iter = xs.iter().chain(ys);\n-        iter.advance_by(len).unwrap();\n+        assert_eq!(iter.advance_by(len), Ok(()));\n         assert_eq!(iter.next(), None);\n-        iter.advance_by(0).unwrap();\n+        assert_eq!(iter.advance_by(0), Ok(()));\n \n         let mut iter = xs.iter().chain(ys);\n-        assert_eq!(iter.advance_by(len + 1), Err(len));\n-        iter.advance_by(0).unwrap();\n+        assert_eq!(iter.advance_by(len + 1), Err(NonZeroUsize::new(1).unwrap()));\n+        assert_eq!(iter.advance_by(0), Ok(()));\n     }\n \n     test_chain(&[], &[]);\n@@ -68,28 +69,28 @@ fn test_iterator_chain_advance_back_by() {\n \n         for i in 0..ys.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            iter.advance_back_by(i).unwrap();\n+            assert_eq!(iter.advance_back_by(i), Ok(()));\n             assert_eq!(iter.next_back(), Some(&ys[ys.len() - i - 1]));\n-            assert_eq!(iter.advance_back_by(100), Err(len - i - 1));\n-            iter.advance_back_by(0).unwrap();\n+            assert_eq!(iter.advance_back_by(100), Err(NonZeroUsize::new(100 - (len - i - 1)).unwrap()));\n+            assert_eq!(iter.advance_back_by(0), Ok(()));\n         }\n \n         for i in 0..xs.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            iter.advance_back_by(ys.len() + i).unwrap();\n+            assert_eq!(iter.advance_back_by(ys.len() + i), Ok(()));\n             assert_eq!(iter.next_back(), Some(&xs[xs.len() - i - 1]));\n-            assert_eq!(iter.advance_back_by(100), Err(xs.len() - i - 1));\n-            iter.advance_back_by(0).unwrap();\n+            assert_eq!(iter.advance_back_by(100), Err(NonZeroUsize::new(100 - (xs.len() - i - 1)).unwrap()));\n+            assert_eq!(iter.advance_back_by(0), Ok(()));\n         }\n \n         let mut iter = xs.iter().chain(ys);\n-        iter.advance_back_by(len).unwrap();\n+        assert_eq!(iter.advance_back_by(len), Ok(()));\n         assert_eq!(iter.next_back(), None);\n-        iter.advance_back_by(0).unwrap();\n+        assert_eq!(iter.advance_back_by(0), Ok(()));\n \n         let mut iter = xs.iter().chain(ys);\n-        assert_eq!(iter.advance_back_by(len + 1), Err(len));\n-        iter.advance_back_by(0).unwrap();\n+        assert_eq!(iter.advance_back_by(len + 1), Err(NonZeroUsize::new(1).unwrap()));\n+        assert_eq!(iter.advance_back_by(0), Ok(()));\n     }\n \n     test_chain(&[], &[]);"}, {"sha": "ff57973a62a4b41f008f5ed0f2ef5aec803ffe99", "filename": "library/core/tests/iter/adapters/enumerate.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,4 +1,5 @@\n use core::iter::*;\n+use core::num::NonZeroUsize;\n \n #[test]\n fn test_iterator_enumerate() {\n@@ -55,6 +56,20 @@ fn test_iterator_enumerate_count() {\n     assert_eq!(xs.iter().enumerate().count(), 6);\n }\n \n+#[test]\n+fn test_iterator_enumerate_advance_by() {\n+    let xs = [0, 1, 2, 3, 4, 5];\n+    let mut it = xs.iter().enumerate();\n+    assert_eq!(it.advance_by(0), Ok(()));\n+    assert_eq!(it.next(), Some((0, &0)));\n+    assert_eq!(it.advance_by(1), Ok(()));\n+    assert_eq!(it.next(), Some((2, &2)));\n+    assert_eq!(it.advance_by(2), Ok(()));\n+    assert_eq!(it.next(), Some((5, &5)));\n+    assert_eq!(it.advance_by(1), Err(NonZeroUsize::new(1).unwrap()));\n+    assert_eq!(it.next(), None);\n+}\n+\n #[test]\n fn test_iterator_enumerate_fold() {\n     let xs = [0, 1, 2, 3, 4, 5];"}, {"sha": "91809c9e5fd5d66247541a42f12443922a1a886d", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,5 +1,7 @@\n+use core::assert_eq;\n use super::*;\n use core::iter::*;\n+use core::num::NonZeroUsize;\n \n #[test]\n fn test_iterator_flatten() {\n@@ -61,19 +63,19 @@ fn test_flatten_try_folds() {\n fn test_flatten_advance_by() {\n     let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n \n-    it.advance_by(5).unwrap();\n+    assert_eq!(it.advance_by(5), Ok(()));\n     assert_eq!(it.next(), Some(5));\n-    it.advance_by(9).unwrap();\n+    assert_eq!(it.advance_by(9), Ok(()));\n     assert_eq!(it.next(), Some(15));\n-    it.advance_back_by(4).unwrap();\n+    assert_eq!(it.advance_back_by(4), Ok(()));\n     assert_eq!(it.next_back(), Some(35));\n-    it.advance_back_by(9).unwrap();\n+    assert_eq!(it.advance_back_by(9), Ok(()));\n     assert_eq!(it.next_back(), Some(25));\n \n-    assert_eq!(it.advance_by(usize::MAX), Err(9));\n-    assert_eq!(it.advance_back_by(usize::MAX), Err(0));\n-    it.advance_by(0).unwrap();\n-    it.advance_back_by(0).unwrap();\n+    assert_eq!(it.advance_by(usize::MAX), Err(NonZeroUsize::new(usize::MAX - 9).unwrap()));\n+    assert_eq!(it.advance_back_by(usize::MAX), Err(NonZeroUsize::new(usize::MAX).unwrap()));\n+    assert_eq!(it.advance_by(0), Ok(()));\n+    assert_eq!(it.advance_back_by(0), Ok(()));\n     assert_eq!(it.size_hint(), (0, Some(0)));\n }\n \n@@ -174,19 +176,19 @@ fn test_flatten_count() {\n     let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n \n     assert_eq!(it.clone().count(), 40);\n-    it.advance_by(5).unwrap();\n+    assert_eq!(it.advance_by(5), Ok(()));\n     assert_eq!(it.clone().count(), 35);\n-    it.advance_back_by(5).unwrap();\n+    assert_eq!(it.advance_back_by(5), Ok(()));\n     assert_eq!(it.clone().count(), 30);\n-    it.advance_by(10).unwrap();\n+    assert_eq!(it.advance_by(10), Ok(()));\n     assert_eq!(it.clone().count(), 20);\n-    it.advance_back_by(8).unwrap();\n+    assert_eq!(it.advance_back_by(8), Ok(()));\n     assert_eq!(it.clone().count(), 12);\n-    it.advance_by(4).unwrap();\n+    assert_eq!(it.advance_by(4), Ok(()));\n     assert_eq!(it.clone().count(), 8);\n-    it.advance_back_by(5).unwrap();\n+    assert_eq!(it.advance_back_by(5), Ok(()));\n     assert_eq!(it.clone().count(), 3);\n-    it.advance_by(3).unwrap();\n+    assert_eq!(it.advance_by(3), Ok(()));\n     assert_eq!(it.clone().count(), 0);\n }\n \n@@ -195,18 +197,18 @@ fn test_flatten_last() {\n     let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n \n     assert_eq!(it.clone().last(), Some(39));\n-    it.advance_by(5).unwrap(); // 5..40\n+    assert_eq!(it.advance_by(5), Ok(())); // 5..40\n     assert_eq!(it.clone().last(), Some(39));\n-    it.advance_back_by(5).unwrap(); // 5..35\n+    assert_eq!(it.advance_back_by(5), Ok(())); // 5..35\n     assert_eq!(it.clone().last(), Some(34));\n-    it.advance_by(10).unwrap(); // 15..35\n+    assert_eq!(it.advance_by(10), Ok(())); // 15..35\n     assert_eq!(it.clone().last(), Some(34));\n-    it.advance_back_by(8).unwrap(); // 15..27\n+    assert_eq!(it.advance_back_by(8), Ok(())); // 15..27\n     assert_eq!(it.clone().last(), Some(26));\n-    it.advance_by(4).unwrap(); // 19..27\n+    assert_eq!(it.advance_by(4), Ok(())); // 19..27\n     assert_eq!(it.clone().last(), Some(26));\n-    it.advance_back_by(5).unwrap(); // 19..22\n+    assert_eq!(it.advance_back_by(5), Ok(())); // 19..22\n     assert_eq!(it.clone().last(), Some(21));\n-    it.advance_by(3).unwrap(); // 22..22\n+    assert_eq!(it.advance_by(3), Ok(())); // 22..22\n     assert_eq!(it.clone().last(), None);\n }"}, {"sha": "e3e88a84fadf6da200aac49908492e6ebc3e68a6", "filename": "library/core/tests/iter/adapters/skip.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,4 +1,5 @@\n use core::iter::*;\n+use core::num::NonZeroUsize;\n \n use super::Unfuse;\n \n@@ -74,11 +75,14 @@ fn test_iterator_skip_nth() {\n #[test]\n fn test_skip_advance_by() {\n     assert_eq!((0..0).skip(10).advance_by(0), Ok(()));\n-    assert_eq!((0..0).skip(10).advance_by(1), Err(0));\n-    assert_eq!((0u128..(usize::MAX as u128) + 1).skip(usize::MAX).advance_by(usize::MAX), Err(1));\n-    assert_eq!((0u128..u128::MAX).skip(usize::MAX).advance_by(1), Ok(()));\n-\n-    assert_eq!((0..2).skip(1).advance_back_by(10), Err(1));\n+    assert_eq!((0..0).skip(10).advance_by(1), Err(NonZeroUsize::new(1).unwrap()));\n+    assert_eq!(\n+        (0u128..(usize::MAX as u128) + 1).skip(usize::MAX - 10).advance_by(usize::MAX - 5),\n+        Err(NonZeroUsize::new(usize::MAX - 16).unwrap())\n+    );\n+    assert_eq!((0u128..u128::MAX).skip(usize::MAX - 10).advance_by(20), Ok(()));\n+\n+    assert_eq!((0..2).skip(1).advance_back_by(10), Err(NonZeroUsize::new(9).unwrap()));\n     assert_eq!((0..0).skip(1).advance_back_by(0), Ok(()));\n }\n "}, {"sha": "3cad47c06de031e0b47e68ff31cc9210722a6aed", "filename": "library/core/tests/iter/adapters/take.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,4 +1,5 @@\n use core::iter::*;\n+use core::num::NonZeroUsize;\n \n #[test]\n fn test_iterator_take() {\n@@ -78,21 +79,21 @@ fn test_take_advance_by() {\n     let mut take = (0..10).take(3);\n     assert_eq!(take.advance_by(2), Ok(()));\n     assert_eq!(take.next(), Some(2));\n-    assert_eq!(take.advance_by(1), Err(0));\n+    assert_eq!(take.advance_by(1), Err(NonZeroUsize::new(1).unwrap()));\n \n     assert_eq!((0..0).take(10).advance_by(0), Ok(()));\n-    assert_eq!((0..0).take(10).advance_by(1), Err(0));\n-    assert_eq!((0..10).take(4).advance_by(5), Err(4));\n+    assert_eq!((0..0).take(10).advance_by(1), Err(NonZeroUsize::new(1).unwrap()));\n+    assert_eq!((0..10).take(4).advance_by(5), Err(NonZeroUsize::new(1).unwrap()));\n \n     let mut take = (0..10).take(3);\n     assert_eq!(take.advance_back_by(2), Ok(()));\n     assert_eq!(take.next(), Some(0));\n-    assert_eq!(take.advance_back_by(1), Err(0));\n+    assert_eq!(take.advance_back_by(1), Err(NonZeroUsize::new(1).unwrap()));\n \n-    assert_eq!((0..2).take(1).advance_back_by(10), Err(1));\n-    assert_eq!((0..0).take(1).advance_back_by(1), Err(0));\n+    assert_eq!((0..2).take(1).advance_back_by(10), Err(NonZeroUsize::new(9).unwrap()));\n+    assert_eq!((0..0).take(1).advance_back_by(1), Err(NonZeroUsize::new(1).unwrap()));\n     assert_eq!((0..0).take(1).advance_back_by(0), Ok(()));\n-    assert_eq!((0..usize::MAX).take(100).advance_back_by(usize::MAX), Err(100));\n+    assert_eq!((0..usize::MAX).take(100).advance_back_by(usize::MAX), Err(NonZeroUsize::new(usize::MAX - 100).unwrap()));\n }\n \n #[test]"}, {"sha": "0a77ecddb84d5b38776db36b1c53155346928f7d", "filename": "library/core/tests/iter/range.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Frange.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,3 +1,4 @@\n+use core::num::NonZeroUsize;\n use super::*;\n \n #[test]\n@@ -287,25 +288,25 @@ fn test_range_step() {\n #[test]\n fn test_range_advance_by() {\n     let mut r = 0..usize::MAX;\n-    r.advance_by(0).unwrap();\n-    r.advance_back_by(0).unwrap();\n+    assert_eq!(Ok(()), r.advance_by(0));\n+    assert_eq!(Ok(()), r.advance_back_by(0));\n \n     assert_eq!(r.len(), usize::MAX);\n \n-    r.advance_by(1).unwrap();\n-    r.advance_back_by(1).unwrap();\n+    assert_eq!(Ok(()), r.advance_by(1));\n+    assert_eq!(Ok(()), r.advance_back_by(1));\n \n     assert_eq!((r.start, r.end), (1, usize::MAX - 1));\n \n-    assert_eq!(r.advance_by(usize::MAX), Err(usize::MAX - 2));\n+    assert_eq!(Err(NonZeroUsize::new(2).unwrap()), r.advance_by(usize::MAX));\n \n-    r.advance_by(0).unwrap();\n-    r.advance_back_by(0).unwrap();\n+    assert_eq!(Ok(()), r.advance_by(0));\n+    assert_eq!(Ok(()), r.advance_back_by(0));\n \n     let mut r = 0u128..u128::MAX;\n \n-    r.advance_by(usize::MAX).unwrap();\n-    r.advance_back_by(usize::MAX).unwrap();\n+    assert_eq!(Ok(()), r.advance_by(usize::MAX));\n+    assert_eq!(Ok(()), r.advance_back_by(usize::MAX));\n \n     assert_eq!((r.start, r.end), (0u128 + usize::MAX as u128, u128::MAX - usize::MAX as u128));\n }"}, {"sha": "9eebfb1f1f359120a65b1d9127b90f41eb8e86a9", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,3 +1,5 @@\n+use core::num::NonZeroUsize;\n+\n /// A wrapper struct that implements `Eq` and `Ord` based on the wrapped\n /// integer modulo 3. Used to test that `Iterator::max` and `Iterator::min`\n /// return the correct element if some of them are equal.\n@@ -150,11 +152,11 @@ fn test_iterator_advance_by() {\n         let mut iter = v.iter();\n         assert_eq!(iter.advance_by(i), Ok(()));\n         assert_eq!(iter.next().unwrap(), &v[i]);\n-        assert_eq!(iter.advance_by(100), Err(v.len() - 1 - i));\n+        assert_eq!(iter.advance_by(100), Err(NonZeroUsize::new(100 - (v.len() - 1 - i)).unwrap()));\n     }\n \n     assert_eq!(v.iter().advance_by(v.len()), Ok(()));\n-    assert_eq!(v.iter().advance_by(100), Err(v.len()));\n+    assert_eq!(v.iter().advance_by(100), Err(NonZeroUsize::new(100 - v.len()).unwrap()));\n }\n \n #[test]\n@@ -165,11 +167,11 @@ fn test_iterator_advance_back_by() {\n         let mut iter = v.iter();\n         assert_eq!(iter.advance_back_by(i), Ok(()));\n         assert_eq!(iter.next_back().unwrap(), &v[v.len() - 1 - i]);\n-        assert_eq!(iter.advance_back_by(100), Err(v.len() - 1 - i));\n+        assert_eq!(iter.advance_back_by(100), Err(NonZeroUsize::new(100 - (v.len() - 1 - i)).unwrap()));\n     }\n \n     assert_eq!(v.iter().advance_back_by(v.len()), Ok(()));\n-    assert_eq!(v.iter().advance_back_by(100), Err(v.len()));\n+    assert_eq!(v.iter().advance_back_by(100), Err(NonZeroUsize::new(100 - v.len()).unwrap()));\n }\n \n #[test]\n@@ -180,11 +182,11 @@ fn test_iterator_rev_advance_back_by() {\n         let mut iter = v.iter().rev();\n         assert_eq!(iter.advance_back_by(i), Ok(()));\n         assert_eq!(iter.next_back().unwrap(), &v[i]);\n-        assert_eq!(iter.advance_back_by(100), Err(v.len() - 1 - i));\n+        assert_eq!(iter.advance_back_by(100), Err(NonZeroUsize::new(100 - (v.len() - 1 - i)).unwrap()));\n     }\n \n     assert_eq!(v.iter().rev().advance_back_by(v.len()), Ok(()));\n-    assert_eq!(v.iter().rev().advance_back_by(100), Err(v.len()));\n+    assert_eq!(v.iter().rev().advance_back_by(100), Err(NonZeroUsize::new(100 - v.len()).unwrap()));\n }\n \n #[test]\n@@ -424,11 +426,11 @@ fn test_iterator_rev_advance_by() {\n         let mut iter = v.iter().rev();\n         assert_eq!(iter.advance_by(i), Ok(()));\n         assert_eq!(iter.next().unwrap(), &v[v.len() - 1 - i]);\n-        assert_eq!(iter.advance_by(100), Err(v.len() - 1 - i));\n+        assert_eq!(iter.advance_by(100), Err(NonZeroUsize::new(100 - (v.len() - 1 - i)).unwrap()));\n     }\n \n     assert_eq!(v.iter().rev().advance_by(v.len()), Ok(()));\n-    assert_eq!(v.iter().rev().advance_by(100), Err(v.len()));\n+    assert_eq!(v.iter().rev().advance_by(100), Err(NonZeroUsize::new(100 - v.len()).unwrap()));\n }\n \n #[test]"}, {"sha": "88f54591bb4a49036cad9660d25ec739b1dbeda4", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0883848882483e216714d5be5a1fde87dd5a1690/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=0883848882483e216714d5be5a1fde87dd5a1690", "patch": "@@ -1,6 +1,7 @@\n use core::cell::Cell;\n use core::cmp::Ordering;\n use core::mem::MaybeUninit;\n+use core::num::NonZeroUsize;\n use core::result::Result::{Err, Ok};\n use core::slice;\n \n@@ -142,20 +143,20 @@ fn test_iterator_advance_by() {\n \n     for i in 0..=v.len() {\n         let mut iter = v.iter();\n-        iter.advance_by(i).unwrap();\n+        assert_eq!(iter.advance_by(i), Ok(()));\n         assert_eq!(iter.as_slice(), &v[i..]);\n     }\n \n     let mut iter = v.iter();\n-    assert_eq!(iter.advance_by(v.len() + 1), Err(v.len()));\n+    assert_eq!(iter.advance_by(v.len() + 1), Err(NonZeroUsize::new(1).unwrap()));\n     assert_eq!(iter.as_slice(), &[]);\n \n     let mut iter = v.iter();\n-    iter.advance_by(3).unwrap();\n+    assert_eq!(iter.advance_by(3), Ok(()));\n     assert_eq!(iter.as_slice(), &v[3..]);\n-    iter.advance_by(2).unwrap();\n+    assert_eq!(iter.advance_by(2), Ok(()));\n     assert_eq!(iter.as_slice(), &[]);\n-    iter.advance_by(0).unwrap();\n+    assert_eq!(iter.advance_by(0), Ok(()));\n }\n \n #[test]\n@@ -164,20 +165,20 @@ fn test_iterator_advance_back_by() {\n \n     for i in 0..=v.len() {\n         let mut iter = v.iter();\n-        iter.advance_back_by(i).unwrap();\n+        assert_eq!(iter.advance_back_by(i), Ok(()));\n         assert_eq!(iter.as_slice(), &v[..v.len() - i]);\n     }\n \n     let mut iter = v.iter();\n-    assert_eq!(iter.advance_back_by(v.len() + 1), Err(v.len()));\n+    assert_eq!(iter.advance_back_by(v.len() + 1), Err(NonZeroUsize::new(1).unwrap()));\n     assert_eq!(iter.as_slice(), &[]);\n \n     let mut iter = v.iter();\n-    iter.advance_back_by(3).unwrap();\n+    assert_eq!(iter.advance_back_by(3), Ok(()));\n     assert_eq!(iter.as_slice(), &v[..v.len() - 3]);\n-    iter.advance_back_by(2).unwrap();\n+    assert_eq!(iter.advance_back_by(2), Ok(()));\n     assert_eq!(iter.as_slice(), &[]);\n-    iter.advance_back_by(0).unwrap();\n+    assert_eq!(iter.advance_back_by(0), Ok(()));\n }\n \n #[test]"}]}