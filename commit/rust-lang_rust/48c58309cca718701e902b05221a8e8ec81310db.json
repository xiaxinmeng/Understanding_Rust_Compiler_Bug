{"sha": "48c58309cca718701e902b05221a8e8ec81310db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YzU4MzA5Y2NhNzE4NzAxZTkwMmIwNTIyMWE4ZThlYzgxMzEwZGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-02T10:47:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-02T10:47:58Z"}, "message": "Lean onto default implementation of configs", "tree": {"sha": "9f85d9bfb277ca780c2069757a6c11ab6de2229f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f85d9bfb277ca780c2069757a6c11ab6de2229f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48c58309cca718701e902b05221a8e8ec81310db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48c58309cca718701e902b05221a8e8ec81310db", "html_url": "https://github.com/rust-lang/rust/commit/48c58309cca718701e902b05221a8e8ec81310db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48c58309cca718701e902b05221a8e8ec81310db/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4cf40a152120c6c3cba1822e56026ae04be63f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4cf40a152120c6c3cba1822e56026ae04be63f0", "html_url": "https://github.com/rust-lang/rust/commit/e4cf40a152120c6c3cba1822e56026ae04be63f0"}], "stats": {"total": 94, "additions": 24, "deletions": 70}, "files": [{"sha": "15aab7f09c3a6ac5f6ecbb8094ae26c2435f27a8", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48c58309cca718701e902b05221a8e8ec81310db/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c58309cca718701e902b05221a8e8ec81310db/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=48c58309cca718701e902b05221a8e8ec81310db", "patch": "@@ -38,12 +38,12 @@ pub struct Config {\n \n #[derive(Debug, Clone)]\n pub struct FilesConfig {\n-    watcher: FilesWatcher,\n-    exclude: Vec<String>,\n+    pub watcher: FilesWatcher,\n+    pub exclude: Vec<String>,\n }\n \n #[derive(Debug, Clone)]\n-enum FilesWatcher {\n+pub enum FilesWatcher {\n     Client,\n     Notify,\n }"}, {"sha": "36ea85cc6fa5919a213ddc4a250283d81170b0a3", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/48c58309cca718701e902b05221a8e8ec81310db/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c58309cca718701e902b05221a8e8ec81310db/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=48c58309cca718701e902b05221a8e8ec81310db", "patch": "@@ -30,7 +30,7 @@ use serde::{de::DeserializeOwned, Serialize};\n use threadpool::ThreadPool;\n \n use crate::{\n-    config::Config,\n+    config::{Config, FilesWatcher},\n     diagnostics::DiagnosticTask,\n     main_loop::{\n         pending_requests::{PendingRequest, PendingRequests},\n@@ -40,7 +40,6 @@ use crate::{\n     world::{WorldSnapshot, WorldState},\n     Result,\n };\n-use req::ConfigurationParams;\n \n #[derive(Debug)]\n pub struct LspError {\n@@ -122,12 +121,13 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n         };\n \n         let globs = config\n-            .exclude_globs\n+            .files\n+            .exclude\n             .iter()\n             .map(|glob| crate::vfs_glob::Glob::new(glob))\n             .collect::<std::result::Result<Vec<_>, _>>()?;\n \n-        if config.use_client_watching {\n+        if let FilesWatcher::Client = config.files.watcher {\n             let registration_options = req::DidChangeWatchedFilesRegistrationOptions {\n                 watchers: workspaces\n                     .iter()\n@@ -153,7 +153,7 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n             workspaces,\n             config.lru_capacity,\n             &globs,\n-            Watch(!config.use_client_watching),\n+            Watch(matches!(config.files.watcher, FilesWatcher::Notify)),\n             config,\n         )\n     };\n@@ -607,7 +607,12 @@ fn on_notification(\n             let request_id = loop_state.next_request_id();\n             let request = request_new::<req::WorkspaceConfiguration>(\n                 request_id.clone(),\n-                ConfigurationParams::default(),\n+                req::ConfigurationParams {\n+                    items: vec![req::ConfigurationItem {\n+                        scope_uri: None,\n+                        section: Some(\"rust-analyzer\".to_string()),\n+                    }],\n+                },\n             );\n             msg_sender.send(request.into())?;\n             loop_state.configuration_request_id = Some(request_id);"}, {"sha": "b8b627e28671798e742c8c720ddc8e44edc1cddc", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48c58309cca718701e902b05221a8e8ec81310db/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c58309cca718701e902b05221a8e8ec81310db/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=48c58309cca718701e902b05221a8e8ec81310db", "patch": "@@ -6,8 +6,8 @@ use serde::{Deserialize, Serialize};\n \n pub use lsp_types::{\n     notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens,\n-    CodeLensParams, CompletionParams, CompletionResponse, ConfigurationParams, DiagnosticTag,\n-    DidChangeConfigurationParams, DidChangeWatchedFilesParams,\n+    CodeLensParams, CompletionParams, CompletionResponse, ConfigurationItem, ConfigurationParams,\n+    DiagnosticTag, DidChangeConfigurationParams, DidChangeWatchedFilesParams,\n     DidChangeWatchedFilesRegistrationOptions, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n     DocumentSymbolResponse, FileSystemWatcher, Hover, InitializeResult, MessageType,\n     PartialResultParams, ProgressParams, ProgressParamsValue, ProgressToken,"}, {"sha": "1f95cd130c94906ca375226a806e66f821629a02", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48c58309cca718701e902b05221a8e8ec81310db/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/48c58309cca718701e902b05221a8e8ec81310db/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=48c58309cca718701e902b05221a8e8ec81310db", "patch": "@@ -217,7 +217,6 @@\n                     \"type\": \"boolean\",\n                     \"markdownDescription\": \"Whether to show `can't find Cargo.toml` error message\"\n                 },\n-\n                 \"rust-analyzer.cargo.noDefaultFeatures\": {\n                     \"type\": \"boolean\",\n                     \"default\": false,\n@@ -272,7 +271,6 @@\n                     \"default\": true,\n                     \"markdownDescription\": \"Check all targets and tests (will be passed as `--all-targets`)\"\n                 },\n-\n                 \"rust-analyzer.inlayHints.typeHints\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n@@ -298,7 +296,6 @@\n                     \"exclusiveMinimum\": true,\n                     \"description\": \"Maximum length for inlay hints\"\n                 },\n-\n                 \"rust-analyzer.completion.addCallParenthesis\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n@@ -318,7 +315,6 @@\n                     \"type\": \"boolean\",\n                     \"description\": \"Show function name and docs in parameter hints\"\n                 },\n-\n                 \"rust-analyzer.highlighting.semanticTokens\": {\n                     \"type\": \"boolean\",\n                     \"default\": false,\n@@ -370,7 +366,7 @@\n                     \"description\": \"Enable logging of VS Code extensions itself\",\n                     \"type\": \"boolean\",\n                     \"default\": false\n-                },\n+                }\n             }\n         },\n         \"problemPatterns\": ["}, {"sha": "3b1d00bcad464a6f5400ee8fc31ba16e25cac7a9", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/48c58309cca718701e902b05221a8e8ec81310db/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/48c58309cca718701e902b05221a8e8ec81310db/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=48c58309cca718701e902b05221a8e8ec81310db", "patch": "@@ -5,30 +5,6 @@ import { Config } from './config';\n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n import { SemanticTokensFeature, DocumentSemanticsTokensSignature } from 'vscode-languageclient/lib/semanticTokens.proposed';\n \n-export function configToServerOptions(config: Config) {\n-    return {\n-        lruCapacity: config.lruCapacity,\n-\n-        inlayHintsType: config.inlayHints.typeHints,\n-        inlayHintsParameter: config.inlayHints.parameterHints,\n-        inlayHintsChaining: config.inlayHints.chainingHints,\n-        inlayHintsMaxLength: config.inlayHints.maxLength,\n-\n-        cargoWatchEnable: config.cargoWatchOptions.enable,\n-        cargoWatchArgs: config.cargoWatchOptions.arguments,\n-        cargoWatchCommand: config.cargoWatchOptions.command,\n-        cargoWatchAllTargets: config.cargoWatchOptions.allTargets,\n-\n-        excludeGlobs: config.excludeGlobs,\n-        useClientWatching: config.useClientWatching,\n-        featureFlags: config.featureFlags,\n-        withSysroot: config.withSysroot,\n-        cargoFeatures: config.cargoFeatures,\n-        rustfmtArgs: config.rustfmtArgs,\n-        vscodeLldb: vscode.extensions.getExtension(\"vadimcn.vscode-lldb\") != null,\n-    };\n-}\n-\n export async function createClient(config: Config, serverPath: string, cwd: string): Promise<lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n@@ -48,7 +24,7 @@ export async function createClient(config: Config, serverPath: string, cwd: stri\n \n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: 'file', language: 'rust' }],\n-        initializationOptions: configToServerOptions(config),\n+        initializationOptions: vscode.workspace.getConfiguration(\"rust-analyzer\"),\n         traceOutputChannel,\n         middleware: {\n             // Workaround for https://github.com/microsoft/vscode-languageserver-node/issues/576"}, {"sha": "1f45f1de02565950cc1403ca2166d63ae8e64f81", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/48c58309cca718701e902b05221a8e8ec81310db/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/48c58309cca718701e902b05221a8e8ec81310db/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=48c58309cca718701e902b05221a8e8ec81310db", "patch": "@@ -11,9 +11,8 @@ export class Config {\n     private readonly rootSection = \"rust-analyzer\";\n     private readonly requiresReloadOpts = [\n         \"serverPath\",\n-        \"cargoFeatures\",\n-        \"excludeGlobs\",\n-        \"useClientWatching\",\n+        \"cargo\",\n+        \"files\",\n         \"highlighting\",\n         \"updates.channel\",\n     ]\n@@ -71,17 +70,8 @@ export class Config {\n     get channel() { return this.cfg.get<UpdatesChannel>(\"updates.channel\")!; }\n     get askBeforeDownload() { return this.cfg.get<boolean>(\"updates.askBeforeDownload\")!; }\n     get highlightingSemanticTokens() { return this.cfg.get<boolean>(\"highlighting.semanticTokens\")!; }\n-    get lruCapacity() { return this.cfg.get<null | number>(\"lruCapacity\")!; }\n-    get excludeGlobs() { return this.cfg.get<string[]>(\"excludeGlobs\")!; }\n-    get useClientWatching() { return this.cfg.get<boolean>(\"useClientWatching\")!; }\n-    get featureFlags() { return this.cfg.get<Record<string, boolean>>(\"featureFlags\")!; }\n-    get rustfmtArgs() { return this.cfg.get<string[]>(\"rustfmtArgs\")!; }\n-    get loadOutDirsFromCheck() { return this.cfg.get<boolean>(\"loadOutDirsFromCheck\")!; }\n     get traceExtension() { return this.cfg.get<boolean>(\"trace.extension\")!; }\n \n-    // for internal use\n-    get withSysroot() { return this.cfg.get<boolean>(\"withSysroot\", true)!; }\n-\n     get inlayHints() {\n         return {\n             typeHints: this.cfg.get<boolean>(\"inlayHints.typeHints\")!,\n@@ -91,21 +81,9 @@ export class Config {\n         };\n     }\n \n-    get cargoWatchOptions() {\n-        return {\n-            enable: this.cfg.get<boolean>(\"cargo-watch.enable\")!,\n-            arguments: this.cfg.get<string[]>(\"cargo-watch.arguments\")!,\n-            allTargets: this.cfg.get<boolean>(\"cargo-watch.allTargets\")!,\n-            command: this.cfg.get<string>(\"cargo-watch.command\")!,\n-        };\n-    }\n-\n-    get cargoFeatures() {\n+    get checkOnSave() {\n         return {\n-            noDefaultFeatures: this.cfg.get<boolean>(\"cargoFeatures.noDefaultFeatures\")!,\n-            allFeatures: this.cfg.get<boolean>(\"cargoFeatures.allFeatures\")!,\n-            features: this.cfg.get<string[]>(\"cargoFeatures.features\")!,\n-            loadOutDirsFromCheck: this.cfg.get<boolean>(\"cargoFeatures.loadOutDirsFromCheck\")!,\n+            command: this.cfg.get<string>(\"checkOnSave.command\")!,\n         };\n     }\n }"}, {"sha": "bd1c3de07dbb1433f2edb8faf22b98346d11f6e7", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c58309cca718701e902b05221a8e8ec81310db/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/48c58309cca718701e902b05221a8e8ec81310db/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=48c58309cca718701e902b05221a8e8ec81310db", "patch": "@@ -2,7 +2,7 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import { Config } from './config';\n-import { createClient, configToServerOptions } from './client';\n+import { createClient } from './client';\n import { isRustEditor, RustEditor } from './util';\n \n export class Ctx {\n@@ -25,7 +25,6 @@ export class Ctx {\n         const res = new Ctx(config, extCtx, client, serverPath);\n         res.pushCleanup(client.start());\n         await client.onReady();\n-        client.onRequest('workspace/configuration', _ => [configToServerOptions(config)]);\n         return res;\n     }\n "}, {"sha": "f9cadc8a2258c0834f3fa6a74a5efb935bcecdaf", "filename": "editors/code/src/status_display.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48c58309cca718701e902b05221a8e8ec81310db/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/48c58309cca718701e902b05221a8e8ec81310db/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=48c58309cca718701e902b05221a8e8ec81310db", "patch": "@@ -7,7 +7,7 @@ import { Ctx } from './ctx';\n const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n \n export function activateStatusDisplay(ctx: Ctx) {\n-    const statusDisplay = new StatusDisplay(ctx.config.cargoWatchOptions.command);\n+    const statusDisplay = new StatusDisplay(ctx.config.checkOnSave.command);\n     ctx.pushCleanup(statusDisplay);\n     const client = ctx.client;\n     if (client != null) {"}]}