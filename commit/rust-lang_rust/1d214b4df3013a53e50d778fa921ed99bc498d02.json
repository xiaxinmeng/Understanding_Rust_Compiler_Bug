{"sha": "1d214b4df3013a53e50d778fa921ed99bc498d02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMjE0YjRkZjMwMTNhNTNlNTBkNzc4ZmE5MjFlZDk5YmM0OThkMDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-04T00:10:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-05T17:23:22Z"}, "message": "Move the option type to its own module", "tree": {"sha": "c87006304b72bd7fec9962afac5370de4e2d57bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c87006304b72bd7fec9962afac5370de4e2d57bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d214b4df3013a53e50d778fa921ed99bc498d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d214b4df3013a53e50d778fa921ed99bc498d02", "html_url": "https://github.com/rust-lang/rust/commit/1d214b4df3013a53e50d778fa921ed99bc498d02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d214b4df3013a53e50d778fa921ed99bc498d02/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16faef2218ec5c3621079f04e6b093a5bb1b44c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/16faef2218ec5c3621079f04e6b093a5bb1b44c2", "html_url": "https://github.com/rust-lang/rust/commit/16faef2218ec5c3621079f04e6b093a5bb1b44c2"}], "stats": {"total": 114, "additions": 68, "deletions": 46}, "files": [{"sha": "154b87cbcf45c940f65d03c073627b214c464234", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=1d214b4df3013a53e50d778fa921ed99bc498d02", "patch": "@@ -5,9 +5,9 @@ import front.token;\n import middle.trans;\n import middle.resolve;\n \n-import std.util.option;\n-import std.util.some;\n-import std.util.none;\n+import std.option;\n+import std.option.some;\n+import std.option.none;\n import std._str;\n import std._vec;\n \n@@ -39,8 +39,8 @@ fn usage(session.session sess, str argv0) {\n impure fn main(vec[str] args) {\n \n   auto sess = session.session();\n-  let option[str] input_file = none[str];\n-  let option[str] output_file = none[str];\n+  let option.t[str] input_file = none[str];\n+  let option.t[str] output_file = none[str];\n   let bool do_warn = true;\n \n   auto i = 1u;"}, {"sha": "5511a068e649d9393fe82c1cf43c9f2dd0c6fce0", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=1d214b4df3013a53e50d778fa921ed99bc498d02", "patch": "@@ -1,5 +1,4 @@\n \n-import util.common.option;\n import std.map.hashmap;\n import std.util.option;\n import util.common.span;"}, {"sha": "e3066436e8ba9fe745d744584b2c6095cd41bef3", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=1d214b4df3013a53e50d778fa921ed99bc498d02", "patch": "@@ -1,8 +1,8 @@\n import std._io;\n-import std.util.option;\n-import std.util.some;\n-import std.util.none;\n+import std.option.some;\n+import std.option.none;\n import std.map.hashmap;\n+import std.util.option;\n \n import driver.session;\n import util.common;"}, {"sha": "069c5dfde2232db491a83932c95740f5312287ea", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=1d214b4df3013a53e50d778fa921ed99bc498d02", "patch": "@@ -1,7 +1,7 @@\n import std.map.hashmap;\n+import std.option.some;\n+import std.option.none;\n import std.util.option;\n-import std.util.some;\n-import std.util.none;\n \n import util.common.new_str_hash;\n import util.common.spanned;"}, {"sha": "a491b56f950293b1beb331679f6b42e7ed50d6ae", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=1d214b4df3013a53e50d778fa921ed99bc498d02", "patch": "@@ -8,9 +8,9 @@ import std.map.hashmap;\n import std.list.list;\n import std.list.nil;\n import std.list.cons;\n+import std.option.some;\n+import std.option.none;\n import std.util.option;\n-import std.util.some;\n-import std.util.none;\n import std._str;\n \n tag scope {"}, {"sha": "8334ac4af2afeb13730f2286998cd2b50ab41709", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1d214b4df3013a53e50d778fa921ed99bc498d02", "patch": "@@ -3,9 +3,9 @@ import std._vec;\n import std._str.rustrt.sbuf;\n import std._vec.rustrt.vbuf;\n import std.map.hashmap;\n+import std.option.some;\n+import std.option.none;\n import std.util.option;\n-import std.util.some;\n-import std.util.none;\n \n import front.ast;\n import driver.session;"}, {"sha": "92b1aeda13cd9313222932731a667fb19ed55b34", "filename": "src/lib/deque.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Flib%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Flib%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdeque.rs?ref=1d214b4df3013a53e50d778fa921ed99bc498d02", "patch": "@@ -2,7 +2,7 @@\n  * A deque, for fun.  Untested as of yet.  Likely buggy.\n  */\n \n-import std.util;\n+import std.option;\n import std._vec;\n import std._int;\n \n@@ -23,7 +23,7 @@ type t[T] = obj {\n \n fn create[T]() -> t[T] {\n \n-    type cell[T] = mutable util.option[T];\n+    type cell[T] = mutable option.t[T];\n \n     let uint initial_capacity = 32u; // 2^5\n \n@@ -39,7 +39,7 @@ fn create[T]() -> t[T] {\n             if (i < nelts) {\n                 ret old.((lo + i) % nelts);\n             } else {\n-                ret util.none[T];\n+                ret option.none;\n             }\n         }\n \n@@ -50,7 +50,7 @@ fn create[T]() -> t[T] {\n \n     fn get[T](vec[cell[T]] elts, uint i) -> T {\n         alt (elts.(i)) {\n-            case (util.some[T](?t)) { ret t; }\n+            case (option.some[T](?t)) { ret t; }\n             case (_) { fail; }\n         }\n     }\n@@ -77,7 +77,7 @@ fn create[T]() -> t[T] {\n                     hi = nelts;\n                 }\n \n-                elts.(lo) = util.some[T](t);\n+                elts.(lo) = option.some[T](t);\n                 nelts += 1u;\n             }\n \n@@ -88,7 +88,7 @@ fn create[T]() -> t[T] {\n                     hi = nelts;\n                 }\n \n-                elts.(hi) = util.some[T](t);\n+                elts.(hi) = option.some[T](t);\n                 hi = (hi + 1u) % _vec.len[cell[T]](elts);\n                 nelts += 1u;\n             }\n@@ -99,7 +99,7 @@ fn create[T]() -> t[T] {\n              */\n             fn pop_front() -> T {\n                 let T t = get[T](elts, lo);\n-                elts.(lo) = util.none[T];\n+                elts.(lo) = option.none[T];\n                 lo = (lo + 1u) % _vec.len[cell[T]](elts);\n                 nelts -= 1u;\n                 ret t;\n@@ -113,7 +113,7 @@ fn create[T]() -> t[T] {\n                 }\n \n                 let T t = get[T](elts, hi);\n-                elts.(hi) = util.none[T];\n+                elts.(hi) = option.none[T];\n                 nelts -= 1u;\n                 ret t;\n             }\n@@ -132,7 +132,7 @@ fn create[T]() -> t[T] {\n             }\n \n         }\n-    let vec[cell[T]] v = _vec.init_elt[cell[T]](util.none[T],\n+    let vec[cell[T]] v = _vec.init_elt[cell[T]](option.none[T],\n                                                 initial_capacity);\n \n     ret deque[T](0u, 0u, 0u, v);"}, {"sha": "8e0380d1e22cab42dcb15c37d21245cbb47ee899", "filename": "src/lib/list.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=1d214b4df3013a53e50d778fa921ed99bc498d02", "patch": "@@ -1,7 +1,7 @@\n \n-import util.option;\n-import util.some;\n-import util.none;\n+import option;\n+import option.some;\n+import option.none;\n \n // FIXME: It would probably be more appealing to define this as\n // type list[T] = rec(T hd, option[@list[T]] tl), but at the moment\n@@ -27,7 +27,7 @@ fn foldl[T,U](&list[T] ls, &U u, fn(&T t, U u) -> U f) -> U {\n }\n \n fn find[T,U](&list[T] ls,\n-             (fn(&T) -> option[U]) f) -> option[U] {\n+             (fn(&T) -> option.t[U]) f) -> option.t[U] {\n   alt(ls) {\n     case (cons[T](?hd, ?tl)) {\n         alt (f(hd)) {"}, {"sha": "dbf08b3e5f3f25f8aeae8b9fbe64910e6d4aca89", "filename": "src/lib/option.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Flib%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Flib%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Foption.rs?ref=1d214b4df3013a53e50d778fa921ed99bc498d02", "patch": "@@ -0,0 +1,40 @@\n+// lib/option.rs\n+\n+tag t[T] {\n+    none;\n+    some(T);\n+}\n+\n+type operator[T, U] = fn(&T) -> U;\n+\n+fn get[T](&t[T] opt) -> T {\n+    alt (opt) {\n+        case (some[T](?x)) {\n+            ret x;\n+        }\n+        case (none[T]) {\n+            fail;\n+        }\n+    }\n+}\n+\n+fn map[T, U](&operator[T, U] f, &t[T] opt) -> t[U] {\n+    alt (opt) {\n+        case (some[T](?x)) {\n+            ret some[U](f(x));\n+        }\n+        case (none[T]) {\n+            ret none[U];\n+        }\n+    }\n+}\n+\n+// Local Variables:\n+// mode: rust;\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+"}, {"sha": "e00f2ef2eb28933d2dc934f91e6d35aa41f24fa3", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=1d214b4df3013a53e50d778fa921ed99bc498d02", "patch": "@@ -20,6 +20,7 @@ mod _task;\n \n // Utility modules.\n \n+mod option;\n mod util;\n \n // Authorize various rule-bendings."}, {"sha": "72844d5f830eff3a92923577468165ee20f30d68", "filename": "src/lib/util.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Flib%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d214b4df3013a53e50d778fa921ed99bc498d02/src%2Flib%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Futil.rs?ref=1d214b4df3013a53e50d778fa921ed99bc498d02", "patch": "@@ -1,21 +1,3 @@\n-tag option[T] {\n-    none;\n-    some(T);\n-}\n-\n-type operator[T, U] = fn(&T) -> U;\n-\n-fn option_map[T, U](&operator[T, U] f, &option[T] opt) -> option[U] {\n-    alt (opt) {\n-        case (some[T](?x)) {\n-            ret some[U](f(x));\n-        }\n-        case (none[T]) {\n-            ret none[U];\n-        }\n-    }\n-}\n-\n fn id[T](&T x) -> T {\n     ret x;\n }"}]}