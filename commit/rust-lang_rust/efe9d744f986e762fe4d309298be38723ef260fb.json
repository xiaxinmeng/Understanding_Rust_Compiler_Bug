{"sha": "efe9d744f986e762fe4d309298be38723ef260fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZTlkNzQ0Zjk4NmU3NjJmZTRkMzA5Mjk4YmUzODcyM2VmMjYwZmI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-11-22T12:24:49Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-11-22T12:24:49Z"}, "message": "syntax: add a visit_ident method to the Visitor.", "tree": {"sha": "850c02233be8b542a2cf46b596d04f1310290c7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/850c02233be8b542a2cf46b596d04f1310290c7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efe9d744f986e762fe4d309298be38723ef260fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efe9d744f986e762fe4d309298be38723ef260fb", "html_url": "https://github.com/rust-lang/rust/commit/efe9d744f986e762fe4d309298be38723ef260fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efe9d744f986e762fe4d309298be38723ef260fb/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dea21f41d28640d8fa6e9d43a55b9a034383f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dea21f41d28640d8fa6e9d43a55b9a034383f34", "html_url": "https://github.com/rust-lang/rust/commit/1dea21f41d28640d8fa6e9d43a55b9a034383f34"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "342f706ec82b193ba170b39264d1f3017a99bd68", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/efe9d744f986e762fe4d309298be38723ef260fb/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe9d744f986e762fe4d309298be38723ef260fb/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=efe9d744f986e762fe4d309298be38723ef260fb", "patch": "@@ -67,6 +67,9 @@ pub fn generics_of_fn(fk: &fn_kind) -> Generics {\n }\n \n pub trait Visitor<E:Clone> {\n+    fn visit_ident(&mut self, _sp: Span, _ident: Ident, _e: E) {\n+        /*! Visit the idents */\n+    }\n     fn visit_mod(&mut self, m:&_mod, _s:Span, _n:NodeId, e:E) { walk_mod(self, m, e) }\n     fn visit_view_item(&mut self, i:&view_item, e:E) { walk_view_item(self, i, e) }\n     fn visit_foreign_item(&mut self, i:@foreign_item, e:E) { walk_foreign_item(self, i, e) }\n@@ -132,8 +135,31 @@ pub fn walk_mod<E:Clone, V:Visitor<E>>(visitor: &mut V, module: &_mod, env: E) {\n     }\n }\n \n-pub fn walk_view_item<E:Clone, V:Visitor<E>>(_: &mut V, _: &view_item, _: E) {\n-    // Empty!\n+pub fn walk_view_item<E:Clone, V:Visitor<E>>(visitor: &mut V, vi: &view_item, env: E) {\n+    match vi.node {\n+        view_item_extern_mod(name, _, _, _) => {\n+            visitor.visit_ident(vi.span, name, env)\n+        }\n+        view_item_use(ref paths) => {\n+            for vp in paths.iter() {\n+                let path = match vp.node {\n+                    view_path_simple(ident, ref path, _) => {\n+                        visitor.visit_ident(vp.span, ident, env.clone());\n+                        path\n+                    }\n+                    view_path_glob(ref path, _) => path,\n+                    view_path_list(ref path, ref list, _) => {\n+                        for id in list.iter() {\n+                            visitor.visit_ident(id.span, id.node.name, env.clone())\n+                        }\n+                        path\n+                    }\n+                };\n+\n+                walk_path(visitor, path, env.clone());\n+            }\n+        }\n+    }\n }\n \n pub fn walk_local<E:Clone, V:Visitor<E>>(visitor: &mut V, local: &Local, env: E) {\n@@ -164,6 +190,7 @@ fn walk_trait_ref<E:Clone, V:Visitor<E>>(visitor: &mut V,\n }\n \n pub fn walk_item<E:Clone, V:Visitor<E>>(visitor: &mut V, item: &item, env: E) {\n+    visitor.visit_ident(item.span, item.ident, env.clone());\n     match item.node {\n         item_static(ref typ, _, expr) => {\n             visitor.visit_ty(typ, env.clone());\n@@ -243,6 +270,8 @@ pub fn walk_variant<E:Clone, V:Visitor<E>>(visitor:&mut V,\n                                            variant: &variant,\n                                            generics: &Generics,\n                                            env: E) {\n+    visitor.visit_ident(variant.span, variant.node.name, env.clone());\n+\n     match variant.node.kind {\n         tuple_variant_kind(ref variant_arguments) => {\n             for variant_argument in variant_arguments.iter() {\n@@ -328,6 +357,8 @@ fn walk_lifetime_decls<E:Clone, V:Visitor<E>>(visitor: &mut V,\n \n pub fn walk_path<E:Clone, V:Visitor<E>>(visitor: &mut V, path: &Path, env: E) {\n     for segment in path.segments.iter() {\n+        visitor.visit_ident(path.span, segment.identifier, env.clone());\n+\n         for typ in segment.types.iter() {\n             visitor.visit_ty(typ, env.clone());\n         }\n@@ -393,6 +424,8 @@ pub fn walk_pat<E:Clone, V:Visitor<E>>(visitor: &mut V, pattern: &Pat, env: E) {\n pub fn walk_foreign_item<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                    foreign_item: &foreign_item,\n                                    env: E) {\n+    visitor.visit_ident(foreign_item.span, foreign_item.ident, env.clone());\n+\n     match foreign_item.node {\n         foreign_item_fn(ref function_declaration, ref generics) => {\n             walk_fn_decl(visitor, function_declaration, env.clone());\n@@ -441,6 +474,7 @@ pub fn walk_fn_decl<E:Clone, V:Visitor<E>>(visitor: &mut V,\n pub fn walk_method_helper<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                     method: &method,\n                                     env: E) {\n+    visitor.visit_ident(method.span, method.ident, env.clone());\n     visitor.visit_fn(&fk_method(method.ident, &method.generics, method),\n                      &method.decl,\n                      &method.body,\n@@ -477,12 +511,13 @@ pub fn walk_fn<E:Clone, V:Visitor<E>>(visitor: &mut V,\n pub fn walk_ty_method<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                              method_type: &TypeMethod,\n                                              env: E) {\n+    visitor.visit_ident(method_type.span, method_type.ident, env.clone());\n     visitor.visit_explicit_self(&method_type.explicit_self, env.clone());\n     for argument_type in method_type.decl.inputs.iter() {\n         visitor.visit_ty(&argument_type.ty, env.clone())\n     }\n     visitor.visit_generics(&method_type.generics, env.clone());\n-    visitor.visit_ty(&method_type.decl.output, env.clone())\n+    visitor.visit_ty(&method_type.decl.output, env);\n }\n \n pub fn walk_trait_method<E:Clone, V:Visitor<E>>(visitor: &mut V,\n@@ -510,6 +545,13 @@ pub fn walk_struct_def<E:Clone, V:Visitor<E>>(visitor: &mut V,\n pub fn walk_struct_field<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                    struct_field: &struct_field,\n                                    env: E) {\n+    match struct_field.node.kind {\n+        named_field(name, _) => {\n+            visitor.visit_ident(struct_field.span, name, env.clone())\n+        }\n+        _ => {}\n+    }\n+\n     visitor.visit_ty(&struct_field.node.ty, env)\n }\n "}]}