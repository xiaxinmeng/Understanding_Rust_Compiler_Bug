{"sha": "3df72fddc267144a2052167c012b654974d84bb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZjcyZmRkYzI2NzE0NGEyMDUyMTY3YzAxMmI2NTQ5NzRkODRiYjg=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-24T23:48:18Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-24T23:48:18Z"}, "message": "Add masks", "tree": {"sha": "0e66048afc16a80204ea11b5137dff9077e43719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e66048afc16a80204ea11b5137dff9077e43719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3df72fddc267144a2052167c012b654974d84bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3df72fddc267144a2052167c012b654974d84bb8", "html_url": "https://github.com/rust-lang/rust/commit/3df72fddc267144a2052167c012b654974d84bb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3df72fddc267144a2052167c012b654974d84bb8/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872e8f62d6e776436cb830f3178beb4a853e7df8", "url": "https://api.github.com/repos/rust-lang/rust/commits/872e8f62d6e776436cb830f3178beb4a853e7df8", "html_url": "https://github.com/rust-lang/rust/commit/872e8f62d6e776436cb830f3178beb4a853e7df8"}], "stats": {"total": 541, "additions": 433, "deletions": 108}, "files": [{"sha": "1ee180a5e3a15f0d4db0e37a66c31fa0ee5857d3", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,10 +1,14 @@\n #![no_std]\n #![feature(repr_simd)]\n #![warn(missing_docs)]\n+//! Portable SIMD module.\n \n #[macro_use]\n mod macros;\n \n+mod masks;\n+pub use masks::*;\n+\n mod vectors_u8;\n pub use vectors_u8::*;\n mod vectors_u16;\n@@ -17,6 +21,7 @@ mod vectors_u128;\n pub use vectors_u128::*;\n mod vectors_usize;\n pub use vectors_usize::*;\n+\n mod vectors_i8;\n pub use vectors_i8::*;\n mod vectors_i16;\n@@ -29,7 +34,21 @@ mod vectors_i128;\n pub use vectors_i128::*;\n mod vectors_isize;\n pub use vectors_isize::*;\n+\n mod vectors_f32;\n pub use vectors_f32::*;\n mod vectors_f64;\n pub use vectors_f64::*;\n+\n+mod vectors_mask8;\n+pub use vectors_mask8::*;\n+mod vectors_mask16;\n+pub use vectors_mask16::*;\n+mod vectors_mask32;\n+pub use vectors_mask32::*;\n+mod vectors_mask64;\n+pub use vectors_mask64::*;\n+mod vectors_mask128;\n+pub use vectors_mask128::*;\n+mod vectors_masksize;\n+pub use vectors_masksize::*;"}, {"sha": "3b5d70695c61b73e0d50da30df19bd82fa01d8af", "filename": "crates/core_simd/src/macros.rs", "status": "modified", "additions": 173, "deletions": 55, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,3 +1,4 @@\n+/// Provides implementations of `From<$a> for $b` and `From<$b> for $a` that transmutes the value.\n macro_rules! from_transmute {\n     { unsafe $a:ty => $b:ty } => {\n         from_transmute!{ @impl $a => $b }\n@@ -13,6 +14,8 @@ macro_rules! from_transmute {\n     };\n }\n \n+/// Provides implementations of `From<$generic> for core::arch::{x86, x86_64}::$intel` and\n+/// vice-versa that transmutes the value.\n macro_rules! from_transmute_x86 {\n     { unsafe $generic:ty => $intel:ident } => {\n         #[cfg(target_arch = \"x86\")]\n@@ -23,10 +26,118 @@ macro_rules! from_transmute_x86 {\n     }\n }\n \n-macro_rules! define_type {\n-    { $(#[$attr:meta])* struct $name:ident([$type:ty; $lanes:tt]); } => {\n-        define_type! { @impl $(#[$attr])* | $name [$type; $lanes] }\n+/// Calls a the macro `$mac` with the provided `$args` followed by `$repeat` repeated the specified\n+/// number of times.\n+macro_rules! call_repeat {\n+    { 1 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)*\n+        }\n+    };\n+    { 2 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)*\n+        }\n+    };\n+    { 4 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+        }\n+    };\n+    { 8 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+        }\n+    };\n+    { 16 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+        }\n+    };\n+    { 32 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+        }\n+    };\n+    { 64 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+        }\n+    };\n+}\n \n+/// Calls the macro `$mac` with the specified `$args` followed by the specified number of unique\n+/// identifiers.\n+macro_rules! call_counting_args {\n+    { 1 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            value\n+        }\n+    };\n+    { 2 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v1 v2\n+        }\n+    };\n+    { 4 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v0 v1 v2 v3\n+        }\n+    };\n+    { 8 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v0 v1 v2 v3 v4 v5 v6 v7\n+        }\n+    };\n+    { 16 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15\n+        }\n+    };\n+    { 32 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v0  v1  v2  v3  v4  v5  v6  v7  v8  v9  v10 v11 v12 v13 v14 v15\n+            v16 v17 v18 v19 v20 v21 v22 v23 v24 v25 v26 v27 v28 v29 v30 v31\n+        }\n+    };\n+    { 64 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v0  v1  v2  v3  v4  v5  v6  v7  v8  v9  v10 v11 v12 v13 v14 v15\n+            v16 v17 v18 v19 v20 v21 v22 v23 v24 v25 v26 v27 v28 v29 v30 v31\n+            v32 v33 v34 v35 v36 v37 v38 v39 v40 v41 v42 v43 v44 v45 v46 v47\n+            v48 v49 v50 v51 v52 v53 v54 v55 v56 v57 v58 v59 v60 v61 v62 v63\n+        }\n+    };\n+}\n+\n+/// Implements common traits on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n+macro_rules! base_vector_traits {\n+    { $name:path => [$type:ty; $lanes:literal] } => {\n         // array references\n         impl AsRef<[$type; $lanes]> for $name {\n             #[inline]\n@@ -67,71 +178,78 @@ macro_rules! define_type {\n                 Self::splat(value)\n             }\n         }\n-    };\n-    { @impl $(#[$attr:meta])* | $name:ident [$type:ty; 1] } => {\n-        define_type! { @def $(#[$attr])* | $name | $type | $type, | v0, }\n-    };\n-    { @impl $(#[$attr:meta])* | $name:ident [$type:ty; 2] } => {\n-        define_type! { @def $(#[$attr])* | $name | $type | $type, $type, | v0, v1, }\n-    };\n-    { @impl $(#[$attr:meta])* | $name:ident [$type:ty; 4] } => {\n-        define_type! { @def $(#[$attr])* | $name | $type |\n-            $type, $type, $type, $type, |\n-            v0, v1, v2, v3,\n+    }\n+}\n+\n+/// Defines a vector `$name` containing multiple `$lanes` of `$type`.\n+macro_rules! define_vector {\n+    { $(#[$attr:meta])* struct $name:ident([$type:ty; $lanes:tt]); } => {\n+        call_repeat! { $lanes => define_vector [$type] def $(#[$attr])* | $name | }\n+\n+        impl $name {\n+            call_repeat! { $lanes => define_vector [$type] splat $type | }\n+            call_counting_args! { $lanes => define_vector => new $type | }\n         }\n+\n+        base_vector_traits! { $name => [$type; $lanes] }\n     };\n-    { @impl $(#[$attr:meta])* | $name:ident [$type:ty; 8] } => {\n-        define_type! { @def $(#[$attr])* | $name | $type |\n-            $type, $type, $type, $type, $type, $type, $type, $type, |\n-            v0, v1, v2, v3, v4, v5, v6, v7,\n-        }\n+    { def $(#[$attr:meta])* | $name:ident | $($itype:ty)* } => {\n+        $(#[$attr])*\n+        #[allow(non_camel_case_types)]\n+        #[derive(Copy, Clone, Debug, Default, PartialEq, PartialOrd)]\n+        #[repr(simd)]\n+        pub struct $name($($itype),*);\n     };\n-    { @impl $(#[$attr:meta])* | $name:ident [$type:ty; 16] } => {\n-        define_type! { @def $(#[$attr])* | $name | $type |\n-            $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, |\n-            v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15,\n+    { splat $type:ty | $($itype:ty)* } => {\n+        /// Construct a vector by setting all lanes to the given value.\n+        #[inline]\n+        pub const fn splat(value: $type) -> Self {\n+            Self($(value as $itype),*)\n         }\n     };\n-    { @impl $(#[$attr:meta])* | $name:ident [$type:ty; 32] } => {\n-        define_type! { @def $(#[$attr])* | $name | $type |\n-            $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type,\n-            $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, |\n-            v0,  v1,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v10, v11, v12, v13, v14, v15,\n-            v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31,\n+    { new $type:ty | $($var:ident)* } => {\n+        /// Construct a vector by setting each lane to the given values.\n+        #[allow(clippy::too_many_arguments)]\n+        #[inline]\n+        pub const fn new($($var: $type),*) -> Self {\n+            Self($($var),*)\n         }\n-    };\n-    { @impl $(#[$attr:meta])* | $name:ident [$type:ty; 64] } => {\n-        define_type! { @def $(#[$attr])* | $name | $type |\n-            $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type,\n-            $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type,\n-            $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type,\n-            $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, $type, |\n-            v0,  v1,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v10, v11, v12, v13, v14, v15,\n-            v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31,\n-            v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47,\n-            v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63,\n+    }\n+}\n+\n+/// Defines a mask vector `$name` containing multiple `$lanes` of `$type`, represented by the\n+/// underlying type `$impl_type`.\n+macro_rules! define_mask_vector {\n+    { $(#[$attr:meta])* struct $name:ident([$impl_type:ty as $type:ty; $lanes:tt]); } => {\n+        call_repeat! { $lanes => define_mask_vector [$impl_type] def $(#[$attr])* | $name | }\n+\n+        impl $name {\n+            call_repeat! { $lanes => define_mask_vector [$impl_type] splat $type | }\n+            call_counting_args! { $lanes => define_mask_vector => new $type | }\n         }\n+\n+        base_vector_traits! { $name => [$type; $lanes] }\n     };\n-    { @def $(#[$attr:meta])* | $name:ident | $type:ty | $($itype:ty,)* | $($ivar:ident,)* } => {\n+    { def $(#[$attr:meta])* | $name:ident | $($itype:ty)* } => {\n         $(#[$attr])*\n         #[allow(non_camel_case_types)]\n         #[derive(Copy, Clone, Debug, Default, PartialEq, PartialOrd)]\n         #[repr(simd)]\n         pub struct $name($($itype),*);\n-\n-        impl $name {\n-            /// Construct a vector by setting all lanes to the given value.\n-            #[inline]\n-            pub const fn splat(value: $type) -> Self {\n-                Self($(value as $itype),*)\n-            }\n-\n-            /// Construct a vector by setting each lane to the given values.\n-            #[allow(clippy::too_many_arguments)]\n-            #[inline]\n-            pub const fn new($($ivar: $itype),*) -> Self {\n-                Self($($ivar),*)\n-            }\n+    };\n+    { splat $type:ty | $($itype:ty)* } => {\n+        /// Construct a vector by setting all lanes to the given value.\n+        #[inline]\n+        pub const fn splat(value: $type) -> Self {\n+            Self($(value.0 as $itype),*)\n+        }\n+    };\n+    { new $type:ty | $($var:ident)* } => {\n+        /// Construct a vector by setting each lane to the given values.\n+        #[allow(clippy::too_many_arguments)]\n+        #[inline]\n+        pub const fn new($($var: $type),*) -> Self {\n+            Self($($var.0),*)\n         }\n     }\n }"}, {"sha": "970047aabdef8350c400a796301f3ad1ba3fb388", "filename": "crates/core_simd/src/masks.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -0,0 +1,67 @@\n+macro_rules! define_mask {\n+    { $(#[$attr:meta])* struct $name:ident($type:ty); } => {\n+        $(#[$attr])*\n+        #[allow(non_camel_case_types)]\n+        #[derive(Copy, Clone, Debug, Default, PartialEq, PartialOrd, Eq, Ord, Hash)]\n+        #[repr(transparent)]\n+        pub struct $name(pub(crate) $type);\n+\n+        impl $name {\n+            /// Construct a mask from the given value.\n+            pub const fn new(value: bool) -> Self {\n+                if value {\n+                    Self(!0)\n+                } else {\n+                    Self(0)\n+                }\n+            }\n+\n+            /// Test if the mask is set.\n+            pub const fn test(&self) -> bool {\n+                self.0 != 0\n+            }\n+        }\n+\n+        impl core::convert::From<bool> for $name {\n+            fn from(value: bool) -> Self {\n+                Self::new(value)\n+            }\n+        }\n+\n+        impl core::convert::From<$name> for bool {\n+            fn from(mask: $name) -> Self {\n+                mask.test()\n+            }\n+        }\n+    }\n+}\n+\n+define_mask! {\n+    #[doc = \"8-bit mask\"]\n+    struct mask8(i8);\n+}\n+\n+define_mask! {\n+    #[doc = \"16-bit mask\"]\n+    struct mask16(i16);\n+}\n+\n+define_mask! {\n+    #[doc = \"32-bit mask\"]\n+    struct mask32(i32);\n+}\n+\n+define_mask! {\n+    #[doc = \"64-bit mask\"]\n+    struct mask64(i64);\n+}\n+\n+define_mask! {\n+    #[doc = \"128-bit mask\"]\n+    struct mask128(i128);\n+}\n+\n+define_mask! {\n+    #[doc = \"`isize`-wide mask\"]\n+    struct masksize(isize);\n+}"}, {"sha": "c2987a7f6314178a934e9a1d3b84168b268691bc", "filename": "crates/core_simd/src/vectors_f32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,19 +1,19 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `f32` values\"]\n     struct f32x2([f32; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `f32` values\"]\n     struct f32x4([f32; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `f32` values\"]\n     struct f32x8([f32; 8]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 16 `f32` values\"]\n     struct f32x16([f32; 16]);\n }"}, {"sha": "4881df2b6dac8427763814738115f41f554f84f0", "filename": "crates/core_simd/src/vectors_f64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,14 +1,14 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `f64` values\"]\n     struct f64x2([f64; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `f64` values\"]\n     struct f64x4([f64; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `f64` values\"]\n     struct f64x8([f64; 8]);\n }"}, {"sha": "939aeb8ce2e9e5a0f8e1ab5a509700ea9788c1ea", "filename": "crates/core_simd/src/vectors_i128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,9 +1,9 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `i128` values\"]\n     struct i128x2([i128; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `i128` values\"]\n     struct i128x4([i128; 4]);\n }"}, {"sha": "b9089a3b4edf595110570c71cbdf5915e6fae034", "filename": "crates/core_simd/src/vectors_i16.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,24 +1,24 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `i16` values\"]\n     struct i16x2([i16; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `i16` values\"]\n     struct i16x4([i16; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `i16` values\"]\n     struct i16x8([i16; 8]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 16 `i16` values\"]\n     struct i16x16([i16; 16]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 32 `i16` values\"]\n     struct i16x32([i16; 32]);\n }"}, {"sha": "686576baff1873dd1372d171ccb5816db14f578e", "filename": "crates/core_simd/src/vectors_i32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,19 +1,19 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `i32` values\"]\n     struct i32x2([i32; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `i32` values\"]\n     struct i32x4([i32; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `i32` values\"]\n     struct i32x8([i32; 8]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 16 `i32` values\"]\n     struct i32x16([i32; 16]);\n }"}, {"sha": "0a34b4c9d7e813ceefb7380a62e48daf2268ae4d", "filename": "crates/core_simd/src/vectors_i64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,14 +1,14 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `i64` values\"]\n     struct i64x2([i64; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `i64` values\"]\n     struct i64x4([i64; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `i64` values\"]\n     struct i64x8([i64; 8]);\n }"}, {"sha": "2deacfc1feb7c81dee90d205c956f19fb1be5602", "filename": "crates/core_simd/src/vectors_i8.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,29 +1,29 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `i8` values\"]\n     struct i8x2([i8; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `i8` values\"]\n     struct i8x4([i8; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `i8` values\"]\n     struct i8x8([i8; 8]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 16 `i8` values\"]\n     struct i8x16([i8; 16]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 32 `i8` values\"]\n     struct i8x32([i8; 32]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 64 `i8` values\"]\n     struct i8x64([i8; 64]);\n }"}, {"sha": "e709d1758704ecf9e208aef251709f27b5fd0603", "filename": "crates/core_simd/src/vectors_isize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,14 +1,14 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `isize` values\"]\n     struct isizex2([isize; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `isize` values\"]\n     struct isizex4([isize; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `isize` values\"]\n     struct isizex8([isize; 8]);\n }"}, {"sha": "3b1bacb7ad3c89080f389e7cc553e90890e7b962", "filename": "crates/core_simd/src/vectors_mask128.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_mask128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_mask128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask128.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -0,0 +1,11 @@\n+use crate::mask128;\n+\n+define_mask_vector! {\n+    #[doc = \"vector of two `mask128` values\"]\n+    struct mask128x2([i128 as mask128; 2]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of four `mask128` values\"]\n+    struct mask128x4([i128 as mask128; 4]);\n+}"}, {"sha": "8d076636caacec6d56794b472516cbc451a4d905", "filename": "crates/core_simd/src/vectors_mask16.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_mask16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_mask16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask16.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -0,0 +1,26 @@\n+use crate::mask16;\n+\n+define_mask_vector! {\n+    #[doc = \"vector of two `mask16` values\"]\n+    struct mask16x2([i16 as mask16; 2]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of four `mask16` values\"]\n+    struct mask16x4([i16 as mask16; 4]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of eight `mask16` values\"]\n+    struct mask16x8([i16 as mask16; 8]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of 16 `mask16` values\"]\n+    struct mask16x16([i16 as mask16; 16]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of 32 `mask16` values\"]\n+    struct mask16x32([i16 as mask16; 32]);\n+}"}, {"sha": "64044bc4f57882d5f6279f10c29cec2442afecfd", "filename": "crates/core_simd/src/vectors_mask32.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_mask32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_mask32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask32.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -0,0 +1,21 @@\n+use crate::mask32;\n+\n+define_mask_vector! {\n+    #[doc = \"vector of two `mask32` values\"]\n+    struct mask32x2([i32 as mask32; 2]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of four `mask32` values\"]\n+    struct mask32x4([i32 as mask32; 4]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of eight `mask32` values\"]\n+    struct mask32x8([i32 as mask32; 8]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of 16 `mask32` values\"]\n+    struct mask32x16([i32 as mask32; 16]);\n+}"}, {"sha": "b0c62b225c9b0ee366ca4c1694008dc414fd521b", "filename": "crates/core_simd/src/vectors_mask64.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_mask64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_mask64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask64.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -0,0 +1,16 @@\n+use crate::mask64;\n+\n+define_mask_vector! {\n+    #[doc = \"vector of two `mask64` values\"]\n+    struct mask64x2([i64 as mask64; 2]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of four `mask64` values\"]\n+    struct mask64x4([i64 as mask64; 4]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of eight `mask64` values\"]\n+    struct mask64x8([i64 as mask64; 8]);\n+}"}, {"sha": "c8f3cbac3c91d6ccb5387c4008e51c48e4b7cb77", "filename": "crates/core_simd/src/vectors_mask8.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_mask8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_mask8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask8.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -0,0 +1,31 @@\n+use crate::mask8;\n+\n+define_mask_vector! {\n+    #[doc = \"vector of two `mask8` values\"]\n+    struct mask8x2([i8 as mask8; 2]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of four `mask8` values\"]\n+    struct mask8x4([i8 as mask8; 4]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of eight `mask8` values\"]\n+    struct mask8x8([i8 as mask8; 8]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of 16 `mask8` values\"]\n+    struct mask8x16([i8 as mask8; 16]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of 32 `mask8` values\"]\n+    struct mask8x32([i8 as mask8; 32]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of 64 `mask8` values\"]\n+    struct mask8x64([i8 as mask8; 64]);\n+}"}, {"sha": "1bf911caffc6825ae4cbe12c3588f3819dd176d9", "filename": "crates/core_simd/src/vectors_masksize.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_masksize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_masksize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_masksize.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -0,0 +1,16 @@\n+use crate::masksize;\n+\n+define_mask_vector! {\n+    #[doc = \"vector of two `masksize` values\"]\n+    struct masksizex2([isize as masksize; 2]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of four `masksize` values\"]\n+    struct masksizex4([isize as masksize; 4]);\n+}\n+\n+define_mask_vector! {\n+    #[doc = \"vector of eight `masksize` values\"]\n+    struct masksizex8([isize as masksize; 8]);\n+}"}, {"sha": "f98026275c73e8675ddc183306ebda2924f5c994", "filename": "crates/core_simd/src/vectors_u128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,9 +1,9 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `u128` values\"]\n     struct u128x2([u128; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `u128` values\"]\n     struct u128x4([u128; 4]);\n }"}, {"sha": "e6ec15679f8cdde6d22033cf79f86e1b01bd7804", "filename": "crates/core_simd/src/vectors_u16.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,24 +1,24 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `u16` values\"]\n     struct u16x2([u16; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `u16` values\"]\n     struct u16x4([u16; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `u16` values\"]\n     struct u16x8([u16; 8]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 16 `u16` values\"]\n     struct u16x16([u16; 16]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 32 `u16` values\"]\n     struct u16x32([u16; 32]);\n }"}, {"sha": "e347509fa54bbb55c4c4dbefa3bf281ae9e8bf3d", "filename": "crates/core_simd/src/vectors_u32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,19 +1,19 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `u32` values\"]\n     struct u32x2([u32; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `u32` values\"]\n     struct u32x4([u32; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `u32` values\"]\n     struct u32x8([u32; 8]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 16 `u32` values\"]\n     struct u32x16([u32; 16]);\n }"}, {"sha": "a3b786230975d33f73c7b55c5958c0476bce1fe5", "filename": "crates/core_simd/src/vectors_u64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,14 +1,14 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `u64` values\"]\n     struct u64x2([u64; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `u64` values\"]\n     struct u64x4([u64; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `u64` values\"]\n     struct u64x8([u64; 8]);\n }"}, {"sha": "eac58dcc96340639797662e3aec7f0b1424042c8", "filename": "crates/core_simd/src/vectors_u8.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,29 +1,29 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `u8` values\"]\n     struct u8x2([u8; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `u8` values\"]\n     struct u8x4([u8; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `u8` values\"]\n     struct u8x8([u8; 8]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 16 `u8` values\"]\n     struct u8x16([u8; 16]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 32 `u8` values\"]\n     struct u8x32([u8; 32]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of 64 `u8` values\"]\n     struct u8x64([u8; 64]);\n }"}, {"sha": "dc97715f0c8d248af7c2148f533b16e7f581579a", "filename": "crates/core_simd/src/vectors_usize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df72fddc267144a2052167c012b654974d84bb8/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs?ref=3df72fddc267144a2052167c012b654974d84bb8", "patch": "@@ -1,14 +1,14 @@\n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of two `usize` values\"]\n     struct usizex2([usize; 2]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of four `usize` values\"]\n     struct usizex4([usize; 4]);\n }\n \n-define_type! {\n+define_vector! {\n     #[doc = \"Vector of eight `usize` values\"]\n     struct usizex8([usize; 8]);\n }"}]}