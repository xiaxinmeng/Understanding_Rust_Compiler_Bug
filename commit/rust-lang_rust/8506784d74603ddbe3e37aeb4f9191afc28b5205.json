{"sha": "8506784d74603ddbe3e37aeb4f9191afc28b5205", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MDY3ODRkNzQ2MDNkZGJlM2UzN2FlYjRmOTE5MWFmYzI4YjUyMDU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T10:22:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T10:22:58Z"}, "message": "Reduce patching of libcore a bit\n\nThese parts are no longer necessary as of #627", "tree": {"sha": "dc84535a9507f0d871e30997b96629cb8d54dce7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc84535a9507f0d871e30997b96629cb8d54dce7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8506784d74603ddbe3e37aeb4f9191afc28b5205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8506784d74603ddbe3e37aeb4f9191afc28b5205", "html_url": "https://github.com/rust-lang/rust/commit/8506784d74603ddbe3e37aeb4f9191afc28b5205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8506784d74603ddbe3e37aeb4f9191afc28b5205/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a302f88d23c8e7095e675049bc07a7872da52e13", "url": "https://api.github.com/repos/rust-lang/rust/commits/a302f88d23c8e7095e675049bc07a7872da52e13", "html_url": "https://github.com/rust-lang/rust/commit/a302f88d23c8e7095e675049bc07a7872da52e13"}], "stats": {"total": 203, "additions": 0, "deletions": 203}, "files": [{"sha": "0e663c0482b65c1e08610cd3d2e2781f79c4e870", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 0, "deletions": 203, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/8506784d74603ddbe3e37aeb4f9191afc28b5205/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/8506784d74603ddbe3e37aeb4f9191afc28b5205/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=8506784d74603ddbe3e37aeb4f9191afc28b5205", "patch": "@@ -68,209 +68,6 @@ index d0ee5fa..d02c454 100644\n  #[cfg(target_pointer_width = \"16\")]\n  macro_rules! ptr_width {\n      () => { 2 }\n-diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index ae6d807..4414e07 100644\n---- a/src/libcore/time.rs\n-+++ b/src/libcore/time.rs\n-@@ -534,198 +534,6 @@ impl Duration {\n-     pub const fn as_secs_f32(&self) -> f32 {\n-         (self.secs as f32) + (self.nanos as f32) / (NANOS_PER_SEC as f32)\n-     }\n--\n--    /// Creates a new `Duration` from the specified number of seconds represented\n--    /// as `f64`.\n--    ///\n--    /// # Panics\n--    /// This constructor will panic if `secs` is not finite, negative or overflows `Duration`.\n--    ///\n--    /// # Examples\n--    /// ```\n--    /// #![feature(duration_float)]\n--    /// use std::time::Duration;\n--    ///\n--    /// let dur = Duration::from_secs_f64(2.7);\n--    /// assert_eq!(dur, Duration::new(2, 700_000_000));\n--    /// ```\n--    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n--    #[inline]\n--    pub fn from_secs_f64(secs: f64) -> Duration {\n--        const MAX_NANOS_F64: f64 =\n--            ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n--        let nanos =  secs * (NANOS_PER_SEC as f64);\n--        if !nanos.is_finite() {\n--            panic!(\"got non-finite value when converting float to duration\");\n--        }\n--        if nanos >= MAX_NANOS_F64 {\n--            panic!(\"overflow when converting float to duration\");\n--        }\n--        if nanos < 0.0 {\n--            panic!(\"underflow when converting float to duration\");\n--        }\n--        let nanos =  nanos as u128;\n--        Duration {\n--            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n--            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n--        }\n--    }\n--\n--    /// Creates a new `Duration` from the specified number of seconds represented\n--    /// as `f32`.\n--    ///\n--    /// # Panics\n--    /// This constructor will panic if `secs` is not finite, negative or overflows `Duration`.\n--    ///\n--    /// # Examples\n--    /// ```\n--    /// #![feature(duration_float)]\n--    /// use std::time::Duration;\n--    ///\n--    /// let dur = Duration::from_secs_f32(2.7);\n--    /// assert_eq!(dur, Duration::new(2, 700_000_000));\n--    /// ```\n--    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n--    #[inline]\n--    pub fn from_secs_f32(secs: f32) -> Duration {\n--        const MAX_NANOS_F32: f32 =\n--            ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f32;\n--        let nanos =  secs * (NANOS_PER_SEC as f32);\n--        if !nanos.is_finite() {\n--            panic!(\"got non-finite value when converting float to duration\");\n--        }\n--        if nanos >= MAX_NANOS_F32 {\n--            panic!(\"overflow when converting float to duration\");\n--        }\n--        if nanos < 0.0 {\n--            panic!(\"underflow when converting float to duration\");\n--        }\n--        let nanos =  nanos as u128;\n--        Duration {\n--            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n--            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n--        }\n--    }\n--\n--    /// Multiplies `Duration` by `f64`.\n--    ///\n--    /// # Panics\n--    /// This method will panic if result is not finite, negative or overflows `Duration`.\n--    ///\n--    /// # Examples\n--    /// ```\n--    /// #![feature(duration_float)]\n--    /// use std::time::Duration;\n--    ///\n--    /// let dur = Duration::new(2, 700_000_000);\n--    /// assert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));\n--    /// assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n--    /// ```\n--    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n--    #[inline]\n--    pub fn mul_f64(self, rhs: f64) -> Duration {\n--        Duration::from_secs_f64(rhs * self.as_secs_f64())\n--    }\n--\n--    /// Multiplies `Duration` by `f32`.\n--    ///\n--    /// # Panics\n--    /// This method will panic if result is not finite, negative or overflows `Duration`.\n--    ///\n--    /// # Examples\n--    /// ```\n--    /// #![feature(duration_float)]\n--    /// use std::time::Duration;\n--    ///\n--    /// let dur = Duration::new(2, 700_000_000);\n--    /// // note that due to rounding errors result is slightly different\n--    /// // from 8.478 and 847800.0\n--    /// assert_eq!(dur.mul_f32(3.14), Duration::new(8, 478_000_640));\n--    /// assert_eq!(dur.mul_f32(3.14e5), Duration::new(847799, 969_120_256));\n--    /// ```\n--    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n--    #[inline]\n--    pub fn mul_f32(self, rhs: f32) -> Duration {\n--        Duration::from_secs_f32(rhs * self.as_secs_f32())\n--    }\n--\n--    /// Divide `Duration` by `f64`.\n--    ///\n--    /// # Panics\n--    /// This method will panic if result is not finite, negative or overflows `Duration`.\n--    ///\n--    /// # Examples\n--    /// ```\n--    /// #![feature(duration_float)]\n--    /// use std::time::Duration;\n--    ///\n--    /// let dur = Duration::new(2, 700_000_000);\n--    /// assert_eq!(dur.div_f64(3.14), Duration::new(0, 859_872_611));\n--    /// // note that truncation is used, not rounding\n--    /// assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_598));\n--    /// ```\n--    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n--    #[inline]\n--    pub fn div_f64(self, rhs: f64) -> Duration {\n--        Duration::from_secs_f64(self.as_secs_f64() / rhs)\n--    }\n--\n--    /// Divide `Duration` by `f32`.\n--    ///\n--    /// # Panics\n--    /// This method will panic if result is not finite, negative or overflows `Duration`.\n--    ///\n--    /// # Examples\n--    /// ```\n--    /// #![feature(duration_float)]\n--    /// use std::time::Duration;\n--    ///\n--    /// let dur = Duration::new(2, 700_000_000);\n--    /// // note that due to rounding errors result is slightly\n--    /// // different from 0.859_872_611\n--    /// assert_eq!(dur.div_f32(3.14), Duration::new(0, 859_872_576));\n--    /// // note that truncation is used, not rounding\n--    /// assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_598));\n--    /// ```\n--    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n--    #[inline]\n--    pub fn div_f32(self, rhs: f32) -> Duration {\n--        Duration::from_secs_f32(self.as_secs_f32() / rhs)\n--    }\n--\n--    /// Divide `Duration` by `Duration` and return `f64`.\n--    ///\n--    /// # Examples\n--    /// ```\n--    /// #![feature(duration_float)]\n--    /// use std::time::Duration;\n--    ///\n--    /// let dur1 = Duration::new(2, 700_000_000);\n--    /// let dur2 = Duration::new(5, 400_000_000);\n--    /// assert_eq!(dur1.div_duration_f64(dur2), 0.5);\n--    /// ```\n--    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n--    #[inline]\n--    pub fn div_duration_f64(self, rhs: Duration) -> f64 {\n--        self.as_secs_f64() / rhs.as_secs_f64()\n--    }\n--\n--    /// Divide `Duration` by `Duration` and return `f32`.\n--    ///\n--    /// # Examples\n--    /// ```\n--    /// #![feature(duration_float)]\n--    /// use std::time::Duration;\n--    ///\n--    /// let dur1 = Duration::new(2, 700_000_000);\n--    /// let dur2 = Duration::new(5, 400_000_000);\n--    /// assert_eq!(dur1.div_duration_f32(dur2), 0.5);\n--    /// ```\n--    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n--    #[inline]\n--    pub fn div_duration_f32(self, rhs: Duration) -> f32 {\n--        self.as_secs_f32() / rhs.as_secs_f32()\n--    }\n- }\n- \n- #[stable(feature = \"duration\", since = \"1.3.0\")]\n diff --git a/src/libstd/num.rs b/src/libstd/num.rs\n index 828d572..bc04fb1 100644\n --- a/src/libstd/num.rs"}]}