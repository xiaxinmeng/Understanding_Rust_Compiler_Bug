{"sha": "33bfb64e6d7a94db6db024a6069b7d4a7e116603", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYmZiNjRlNmQ3YTk0ZGI2ZGIwMjRhNjA2OWI3ZDRhN2UxMTY2MDM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-29T12:38:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-29T12:38:07Z"}, "message": "Merge pull request #320 from oli-obk/memory\n\nsome more things found in the rustc test suite", "tree": {"sha": "3a116b255ca3e179f35a93700fa4533703309459", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a116b255ca3e179f35a93700fa4533703309459"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33bfb64e6d7a94db6db024a6069b7d4a7e116603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33bfb64e6d7a94db6db024a6069b7d4a7e116603", "html_url": "https://github.com/rust-lang/rust/commit/33bfb64e6d7a94db6db024a6069b7d4a7e116603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33bfb64e6d7a94db6db024a6069b7d4a7e116603/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "941fbf5ed27976ab761801a46734c147dd885635", "url": "https://api.github.com/repos/rust-lang/rust/commits/941fbf5ed27976ab761801a46734c147dd885635", "html_url": "https://github.com/rust-lang/rust/commit/941fbf5ed27976ab761801a46734c147dd885635"}, {"sha": "446ed26412eeb7263b0474b3c9468cc075309c27", "url": "https://api.github.com/repos/rust-lang/rust/commits/446ed26412eeb7263b0474b3c9468cc075309c27", "html_url": "https://github.com/rust-lang/rust/commit/446ed26412eeb7263b0474b3c9468cc075309c27"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "a824f47a509f54cf410c1f223ca8c0243117109f", "filename": "miri/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/33bfb64e6d7a94db6db024a6069b7d4a7e116603/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bfb64e6d7a94db6db024a6069b7d4a7e116603/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=33bfb64e6d7a94db6db024a6069b7d4a7e116603", "patch": "@@ -15,6 +15,7 @@ use rustc::ty::layout::Layout;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n \n+use syntax::ast::Mutability;\n use syntax::codemap::Span;\n \n use std::collections::{HashMap, BTreeMap};\n@@ -98,15 +99,21 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                 dest,\n             )?;\n \n-            // Second argument (argc): 0\n+            // Second argument (argc): 1\n             let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n             let ty = ecx.tcx.types.isize;\n-            ecx.write_null(dest, ty)?;\n+            ecx.write_primval(dest, PrimVal::Bytes(1), ty)?;\n \n-            // Third argument (argv): 0\n+            // FIXME: extract main source file path\n+            // Third argument (argv): &[b\"foo\"]\n             let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n             let ty = ecx.tcx.mk_imm_ptr(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8));\n-            ecx.write_null(dest, ty)?;\n+            let foo = ecx.memory.allocate_cached(b\"foo\\0\")?;\n+            let ptr_size = ecx.memory.pointer_size();\n+            let foo_ptr = ecx.memory.allocate(ptr_size * 1, ptr_size, MemoryKind::UninitializedStatic)?;\n+            ecx.memory.write_primval(foo_ptr.into(), PrimVal::Ptr(foo.into()), ptr_size, false)?;\n+            ecx.memory.mark_static_initalized(foo_ptr.alloc_id, Mutability::Immutable)?;\n+            ecx.write_ptr(dest, foo_ptr.into(), ty)?;\n         } else {\n             ecx.push_stack_frame(\n                 main_instance,"}, {"sha": "b123ad7fd0b65bcbe8d91a13fb3de1816b07d0aa", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33bfb64e6d7a94db6db024a6069b7d4a7e116603/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bfb64e6d7a94db6db024a6069b7d4a7e116603/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=33bfb64e6d7a94db6db024a6069b7d4a7e116603", "patch": "@@ -1138,6 +1138,11 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                             packed: nonnull.packed,\n                         })\n                     }\n+                    // mir optimizations treat single variant enums as structs\n+                    General { .. } if adt_def.variants.len() == 1 => Ok(TyAndPacked {\n+                        ty: adt_def.variants[0].fields[field_index].ty(self.tcx, substs),\n+                        packed: false,\n+                    }),\n                     _ => {\n                         err!(Unimplemented(format!(\n                             \"get_field_ty can't handle enum type: {:?}, {:?}\",\n@@ -1211,6 +1216,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             }\n             StructWrappedNullablePointer { ref nonnull, .. } => Ok(nonnull.offsets[field_index]),\n             UntaggedUnion { .. } => Ok(Size::from_bytes(0)),\n+            // mir optimizations treat single variant enums as structs\n+            General { ref variants, .. } if variants.len() == 1 => Ok(variants[0].offsets[field_index]),\n             _ => {\n                 let msg = format!(\n                     \"get_field_offset: can't handle type: {:?}, with layout: {:?}\","}, {"sha": "f26f5adfff9652d56ac9183607ea01b61501ea68", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33bfb64e6d7a94db6db024a6069b7d4a7e116603/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bfb64e6d7a94db6db024a6069b7d4a7e116603/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=33bfb64e6d7a94db6db024a6069b7d4a7e116603", "patch": "@@ -227,6 +227,11 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         let (offset, packed) = match *base_layout {\n             Univariant { ref variant, .. } => (variant.offsets[field_index], variant.packed),\n \n+            // mir optimizations treat single variant enums as structs\n+            General { ref variants, .. } if variants.len() == 1 => {\n+                (variants[0].offsets[field_index], variants[0].packed)\n+            }\n+\n             General { ref variants, .. } => {\n                 let (_, base_extra) = base.to_ptr_extra_aligned();\n                 if let LvalueExtra::DowncastVariant(variant_idx) = base_extra {"}, {"sha": "7d804156576553419f09fe556c5f11c736939fe4", "filename": "tests/run-pass/issue-34571.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33bfb64e6d7a94db6db024a6069b7d4a7e116603/tests%2Frun-pass%2Fissue-34571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bfb64e6d7a94db6db024a6069b7d4a7e116603/tests%2Frun-pass%2Fissue-34571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-34571.rs?ref=33bfb64e6d7a94db6db024a6069b7d4a7e116603", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(u8)]\n+enum Foo {\n+    Foo(u8),\n+}\n+\n+fn main() {\n+    match Foo::Foo(1) {\n+        _ => ()\n+    }\n+}"}]}