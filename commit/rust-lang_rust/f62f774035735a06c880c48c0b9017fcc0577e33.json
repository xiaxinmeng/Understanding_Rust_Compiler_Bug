{"sha": "f62f774035735a06c880c48c0b9017fcc0577e33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MmY3NzQwMzU3MzVhMDZjODgwYzQ4YzBiOTAxN2ZjYzA1NzdlMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-10T12:29:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-10T12:29:05Z"}, "message": "Auto merge of #47167 - ivanbakel:builtin_indexing, r=nikomatsakis\n\nFix built-in indexing not being used where index type wasn't \"obviously\" usize\n\nFixes #33903\nFixes #46095\n\nThis PR was made possible thanks to the generous help of @eddyb\n\nFollowing the example of binary operators, builtin checking for indexing has been moved from the typecheck stage to a writeback stage, after type constraints have been resolved.", "tree": {"sha": "f9951a684aed69cbec2e1f5876f25bba59789945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9951a684aed69cbec2e1f5876f25bba59789945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f62f774035735a06c880c48c0b9017fcc0577e33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f62f774035735a06c880c48c0b9017fcc0577e33", "html_url": "https://github.com/rust-lang/rust/commit/f62f774035735a06c880c48c0b9017fcc0577e33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f62f774035735a06c880c48c0b9017fcc0577e33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27ede55414e01f13c6869a8763da207e544cc6ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/27ede55414e01f13c6869a8763da207e544cc6ad", "html_url": "https://github.com/rust-lang/rust/commit/27ede55414e01f13c6869a8763da207e544cc6ad"}, {"sha": "6132806d361dce863a220e278c568f83b72a3c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6132806d361dce863a220e278c568f83b72a3c8a", "html_url": "https://github.com/rust-lang/rust/commit/6132806d361dce863a220e278c568f83b72a3c8a"}], "stats": {"total": 116, "additions": 104, "deletions": 12}, "files": [{"sha": "69236d77ed328a44fa97f3f559f9713abe18f11d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f62f774035735a06c880c48c0b9017fcc0577e33/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62f774035735a06c880c48c0b9017fcc0577e33/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f62f774035735a06c880c48c0b9017fcc0577e33", "patch": "@@ -2217,18 +2217,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                adjusted_ty,\n                index_ty);\n \n-        // First, try built-in indexing.\n-        match (adjusted_ty.builtin_index(), &index_ty.sty) {\n-            (Some(ty), &ty::TyUint(ast::UintTy::Usize)) |\n-            (Some(ty), &ty::TyInfer(ty::IntVar(_))) => {\n-                debug!(\"try_index_step: success, using built-in indexing\");\n-                let adjustments = autoderef.adjust_steps(lvalue_pref);\n-                self.apply_adjustments(base_expr, adjustments);\n-                return Some((self.tcx.types.usize, ty));\n-            }\n-            _ => {}\n-        }\n-\n         for &unsize in &[false, true] {\n             let mut self_ty = adjusted_ty;\n             if unsize {"}, {"sha": "5e102c7a4451684c16acb551a29b87fda97788e3", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f62f774035735a06c880c48c0b9017fcc0577e33/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62f774035735a06c880c48c0b9017fcc0577e33/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=f62f774035735a06c880c48c0b9017fcc0577e33", "patch": "@@ -18,6 +18,7 @@ use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::InferCtxt;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::adjustment::{Adjust, Adjustment};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::util::nodemap::DefIdSet;\n use syntax::ast;\n@@ -159,8 +160,52 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n             _ => {}\n         }\n     }\n+\n+    // Similar to operators, indexing is always assumed to be overloaded\n+    // Here, correct cases where an indexing expression can be simplified\n+    // to use builtin indexing because the index type is known to be\n+    // usize-ish\n+    fn fix_index_builtin_expr(&mut self, e: &hir::Expr) {\n+        if let hir::ExprIndex(ref base, ref index) = e.node {\n+            let mut tables = self.fcx.tables.borrow_mut();\n+\n+            match tables.expr_ty_adjusted(&base).sty {\n+                // All valid indexing looks like this\n+                ty::TyRef(_, ty::TypeAndMut { ty: ref base_ty, .. }) => {\n+                    let index_ty = tables.expr_ty_adjusted(&index);\n+                    let index_ty = self.fcx.resolve_type_vars_if_possible(&index_ty);\n+\n+                    if base_ty.builtin_index().is_some()\n+                        && index_ty == self.fcx.tcx.types.usize {\n+                        // Remove the method call record\n+                        tables.type_dependent_defs_mut().remove(e.hir_id);\n+                        tables.node_substs_mut().remove(e.hir_id);\n+\n+                        tables.adjustments_mut().get_mut(base.hir_id).map(|a| {\n+                            // Discard the need for a mutable borrow\n+                            match a.pop() {\n+                                // Extra adjustment made when indexing causes a drop\n+                                // of size information - we need to get rid of it\n+                                // Since this is \"after\" the other adjustment to be\n+                                // discarded, we do an extra `pop()`\n+                                Some(Adjustment { kind: Adjust::Unsize, .. }) => {\n+                                    // So the borrow discard actually happens here\n+                                    a.pop();\n+                                },\n+                                _ => {}\n+                            }\n+                        });\n+                    }\n+                },\n+                // Might encounter non-valid indexes at this point, so there\n+                // has to be a fall-through\n+                _ => {},\n+            }\n+        }\n+    }\n }\n \n+\n ///////////////////////////////////////////////////////////////////////////\n // Impl of Visitor for Resolver\n //\n@@ -176,6 +221,7 @@ impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> {\n \n     fn visit_expr(&mut self, e: &'gcx hir::Expr) {\n         self.fix_scalar_builtin_expr(e);\n+        self.fix_index_builtin_expr(e);\n \n         self.visit_node_id(e.span, e.hir_id);\n "}, {"sha": "ab368537e21c0bfb7a165f757e20c04c9f3384d8", "filename": "src/test/run-pass/issue-33903.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f62f774035735a06c880c48c0b9017fcc0577e33/src%2Ftest%2Frun-pass%2Fissue-33903.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62f774035735a06c880c48c0b9017fcc0577e33/src%2Ftest%2Frun-pass%2Fissue-33903.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33903.rs?ref=f62f774035735a06c880c48c0b9017fcc0577e33", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 33903:\n+// Built-in indexing should be used even when the index is not\n+// trivially an integer\n+// Only built-in indexing can be used in constant expresssions\n+\n+const FOO: i32 = [12, 34][0 + 1];\n+\n+fn main() {}\n+"}, {"sha": "35e51ebe70b89467a5681c22b0a593d03f96d667", "filename": "src/test/run-pass/issue-46095.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f62f774035735a06c880c48c0b9017fcc0577e33/src%2Ftest%2Frun-pass%2Fissue-46095.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62f774035735a06c880c48c0b9017fcc0577e33/src%2Ftest%2Frun-pass%2Fissue-46095.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-46095.rs?ref=f62f774035735a06c880c48c0b9017fcc0577e33", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A;\n+\n+impl A {\n+    fn take_mutably(&mut self) {}\n+}\n+\n+fn identity<T>(t: T) -> T {\n+    t\n+}\n+\n+// Issue 46095\n+// Built-in indexing should be used even when the index is not\n+// trivially an integer\n+// Overloaded indexing would cause wrapped to be borrowed mutably\n+\n+fn main() {\n+    let mut a1 = A;\n+    let mut a2 = A;\n+\n+    let wrapped = [&mut a1, &mut a2];\n+\n+    {\n+        wrapped[0 + 1 - 1].take_mutably();\n+    }\n+\n+    {\n+        wrapped[identity(0)].take_mutably();\n+    }\n+}"}]}