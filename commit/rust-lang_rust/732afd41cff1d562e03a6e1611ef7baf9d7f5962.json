{"sha": "732afd41cff1d562e03a6e1611ef7baf9d7f5962", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMmFmZDQxY2ZmMWQ1NjJlMDNhNmUxNjExZWY3YmFmOWQ3ZjU5NjI=", "commit": {"author": {"name": "Victor Ding", "email": "victording@google.com", "date": "2020-12-19T11:36:35Z"}, "committer": {"name": "Victor Ding", "email": "victording@google.com", "date": "2020-12-23T01:51:10Z"}, "message": "Exclude unnecessary info from CodegenResults\n\n`foreign_module` and `wasm_import_module` are not needed for linking,\nand hence can be removed from CodegenResults.", "tree": {"sha": "afa8e2277745c5e4a0c6e87a0155f33755ae818f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa8e2277745c5e4a0c6e87a0155f33755ae818f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/732afd41cff1d562e03a6e1611ef7baf9d7f5962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/732afd41cff1d562e03a6e1611ef7baf9d7f5962", "html_url": "https://github.com/rust-lang/rust/commit/732afd41cff1d562e03a6e1611ef7baf9d7f5962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/732afd41cff1d562e03a6e1611ef7baf9d7f5962/comments", "author": null, "committer": null, "parents": [{"sha": "969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf", "html_url": "https://github.com/rust-lang/rust/commit/969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "a3a2ef0417568dffcd0a39ef8125d5706ee4f9b8", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/732afd41cff1d562e03a6e1611ef7baf9d7f5962/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732afd41cff1d562e03a6e1611ef7baf9d7f5962/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=732afd41cff1d562e03a6e1611ef7baf9d7f5962", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n-use rustc_middle::middle::cstore::{EncodedMetadata, LibSource, NativeLib};\n+use rustc_middle::middle::cstore::{EncodedMetadata, LibSource};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, SanitizerSet};\n@@ -22,7 +22,8 @@ use super::command::Command;\n use super::linker::{self, Linker};\n use super::rpath::{self, RPathConfig};\n use crate::{\n-    looks_like_rust_object_file, CodegenResults, CompiledModule, CrateInfo, METADATA_FILENAME,\n+    looks_like_rust_object_file, CodegenResults, CompiledModule, CrateInfo, NativeLib,\n+    METADATA_FILENAME,\n };\n \n use cc::windows_registry;"}, {"sha": "18132a2c7a3c094b2b19586f59136bb41d02def9", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/732afd41cff1d562e03a6e1611ef7baf9d7f5962/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732afd41cff1d562e03a6e1611ef7baf9d7f5962/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=732afd41cff1d562e03a6e1611ef7baf9d7f5962", "patch": "@@ -766,7 +766,7 @@ impl CrateInfo {\n             profiler_runtime: None,\n             is_no_builtins: Default::default(),\n             native_libraries: Default::default(),\n-            used_libraries: tcx.native_libraries(LOCAL_CRATE),\n+            used_libraries: tcx.native_libraries(LOCAL_CRATE).iter().map(Into::into).collect(),\n             link_args: tcx.link_args(LOCAL_CRATE),\n             crate_name: Default::default(),\n             used_crates_dynamic: cstore::used_crates(tcx, LinkagePreference::RequireDynamic),\n@@ -787,7 +787,8 @@ impl CrateInfo {\n         info.missing_lang_items.reserve(n_crates);\n \n         for &cnum in crates.iter() {\n-            info.native_libraries.insert(cnum, tcx.native_libraries(cnum));\n+            info.native_libraries\n+                .insert(cnum, tcx.native_libraries(cnum).iter().map(Into::into).collect());\n             info.crate_name.insert(cnum, tcx.crate_name(cnum).to_string());\n             info.used_crate_source.insert(cnum, tcx.used_crate_source(cnum));\n             if tcx.is_panic_runtime(cnum) {"}, {"sha": "bc93bd8b7bd960dc89c026b4a8a2e30802f2f996", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/732afd41cff1d562e03a6e1611ef7baf9d7f5962/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732afd41cff1d562e03a6e1611ef7baf9d7f5962/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=732afd41cff1d562e03a6e1611ef7baf9d7f5962", "patch": "@@ -21,15 +21,17 @@ extern crate tracing;\n #[macro_use]\n extern crate rustc_middle;\n \n+use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::CrateNum;\n use rustc_hir::LangItem;\n use rustc_middle::dep_graph::WorkProduct;\n-use rustc_middle::middle::cstore::{CrateSource, LibSource, NativeLib};\n+use rustc_middle::middle::cstore::{self, CrateSource, LibSource};\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::ty::query::Providers;\n use rustc_session::config::{OutputFilenames, OutputType, RUST_CGU_EXT};\n+use rustc_session::utils::NativeLibKind;\n use rustc_span::symbol::Symbol;\n use std::path::{Path, PathBuf};\n \n@@ -105,6 +107,19 @@ bitflags::bitflags! {\n     }\n }\n \n+#[derive(Clone, Debug, Encodable, Decodable, HashStable)]\n+pub struct NativeLib {\n+    pub kind: NativeLibKind,\n+    pub name: Option<Symbol>,\n+    pub cfg: Option<ast::MetaItem>,\n+}\n+\n+impl From<&cstore::NativeLib> for NativeLib {\n+    fn from(lib: &cstore::NativeLib) -> Self {\n+        NativeLib { kind: lib.kind.clone(), name: lib.name.clone(), cfg: lib.cfg.clone() }\n+    }\n+}\n+\n /// Misc info we load from metadata to persist beyond the tcx.\n ///\n /// Note: though `CrateNum` is only meaningful within the same tcx, information within `CrateInfo`\n@@ -119,9 +134,9 @@ pub struct CrateInfo {\n     pub compiler_builtins: Option<CrateNum>,\n     pub profiler_runtime: Option<CrateNum>,\n     pub is_no_builtins: FxHashSet<CrateNum>,\n-    pub native_libraries: FxHashMap<CrateNum, Lrc<Vec<NativeLib>>>,\n+    pub native_libraries: FxHashMap<CrateNum, Vec<NativeLib>>,\n     pub crate_name: FxHashMap<CrateNum, String>,\n-    pub used_libraries: Lrc<Vec<NativeLib>>,\n+    pub used_libraries: Vec<NativeLib>,\n     pub link_args: Lrc<Vec<String>>,\n     pub used_crate_source: FxHashMap<CrateNum, Lrc<CrateSource>>,\n     pub used_crates_static: Vec<(CrateNum, LibSource)>,"}]}