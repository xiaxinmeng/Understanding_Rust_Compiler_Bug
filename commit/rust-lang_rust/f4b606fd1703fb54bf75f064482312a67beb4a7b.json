{"sha": "f4b606fd1703fb54bf75f064482312a67beb4a7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YjYwNmZkMTcwM2ZiNTRiZjc1ZjA2NDQ4MjMxMmE2N2JlYjRhN2I=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-13T15:05:15Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T08:54:01Z"}, "message": "require a `tcx` for `TypeVisitor`", "tree": {"sha": "439d2cc27cf65355b509d6f4e0ba30efe53dd9a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/439d2cc27cf65355b509d6f4e0ba30efe53dd9a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4b606fd1703fb54bf75f064482312a67beb4a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b606fd1703fb54bf75f064482312a67beb4a7b", "html_url": "https://github.com/rust-lang/rust/commit/f4b606fd1703fb54bf75f064482312a67beb4a7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4b606fd1703fb54bf75f064482312a67beb4a7b/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76e755cf4afc34af586948e7bc25d2f1c589a884", "url": "https://api.github.com/repos/rust-lang/rust/commits/76e755cf4afc34af586948e7bc25d2f1c589a884", "html_url": "https://github.com/rust-lang/rust/commit/76e755cf4afc34af586948e7bc25d2f1c589a884"}], "stats": {"total": 232, "additions": 182, "deletions": 50}, "files": [{"sha": "14fdf03e06d1ec23843ae4053c8fbb160a5aeb09", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -1537,6 +1537,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n+            fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx> {\n+                self.tcx\n+            }\n+\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let Some((kind, def_id)) = TyCategory::from_ty(self.tcx, t) {\n                     let span = self.tcx.def_span(def_id);"}, {"sha": "d3d55d89db67d32bcb91be1a86c527f020971aed", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -9,7 +9,9 @@ use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorRepor\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, ErasedMap, NestedVisitorMap, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n-use rustc_middle::ty::{self, AssocItemContainer, RegionKind, Ty, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{\n+    self, AssocItemContainer, RegionKind, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n+};\n use rustc_span::symbol::Ident;\n use rustc_span::{MultiSpan, Span};\n \n@@ -476,8 +478,12 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n /// Collect all the trait objects in a type that could have received an implicit `'static` lifetime.\n pub(super) struct TraitObjectVisitor(pub(super) FxHashSet<DefId>);\n \n-impl TypeVisitor<'_> for TraitObjectVisitor {\n-    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {\n+impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n+    fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx> {\n+        bug!(\"tcx_for_anon_const_substs called for TraitObjectVisitor\");\n+    }\n+\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Dynamic(preds, RegionKind::ReStatic) => {\n                 if let Some(def_id) = preds.principal_def_id() {"}, {"sha": "8f1ebb116fdb0d380bae1848d8c90fa10b261fd6", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -202,6 +202,7 @@ where\n         };\n \n         value.skip_binder().visit_with(&mut ScopeInstantiator {\n+            tcx: self.infcx.tcx,\n             next_region: &mut next_region,\n             target_index: ty::INNERMOST,\n             bound_region_scope: &mut scope,\n@@ -757,13 +758,18 @@ where\n /// `for<..`>.  For each of those, it creates an entry in\n /// `bound_region_scope`.\n struct ScopeInstantiator<'me, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     next_region: &'me mut dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n     // The debruijn index of the scope we are instantiating.\n     target_index: ty::DebruijnIndex,\n     bound_region_scope: &'me mut BoundRegionScope<'tcx>,\n }\n \n impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n+    fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,"}, {"sha": "e5ad44c74271cea74217dcf0eb70026ad5706a5a", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -126,6 +126,11 @@ impl<'a, 'tcx> UnresolvedTypeFinder<'a, 'tcx> {\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'tcx> {\n     type BreakTy = (Ty<'tcx>, Option<Span>);\n+\n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        self.infcx.tcx\n+    }\n+\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let t = self.infcx.shallow_resolve(t);\n         if t.has_infer_types() {"}, {"sha": "1194d8edc09027c7714bb18ea39b52995d32e96e", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -1160,6 +1160,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n             type BreakTy = Ty<'tcx>;\n+            fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+                self.cx.tcx\n+            }\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 match ty.kind() {"}, {"sha": "40b3ffb8955787bab13ed83e3bcdb39a77ac9eff", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -189,6 +189,12 @@ pub trait TypeFolder<'tcx>: Sized {\n \n pub trait TypeVisitor<'tcx>: Sized {\n     type BreakTy = !;\n+    /// Supplies the `tcx` for an unevaluated anonymous constant in case its default substs\n+    /// are not yet supplied.\n+    ///\n+    /// Visitors which do not look into these substs may leave this unimplemented, so be\n+    /// careful when calling this method elsewhere.\n+    fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx>;\n \n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n@@ -301,7 +307,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         value: &impl TypeFoldable<'tcx>,\n         callback: impl FnMut(ty::Region<'tcx>) -> bool,\n     ) -> bool {\n-        struct RegionVisitor<F> {\n+        struct RegionVisitor<'tcx, F> {\n+            tcx: TyCtxt<'tcx>,\n             /// The index of a binder *just outside* the things we have\n             /// traversed. If we encounter a bound region bound by this\n             /// binder or one outer to it, it appears free. Example:\n@@ -323,12 +330,16 @@ impl<'tcx> TyCtxt<'tcx> {\n             callback: F,\n         }\n \n-        impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<F>\n+        impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<'tcx, F>\n         where\n             F: FnMut(ty::Region<'tcx>) -> bool,\n         {\n             type BreakTy = ();\n \n+            fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+                self.tcx\n+            }\n+\n             fn visit_binder<T: TypeFoldable<'tcx>>(\n                 &mut self,\n                 t: &Binder<'tcx, T>,\n@@ -364,7 +375,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         }\n \n-        value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()\n+        value\n+            .visit_with(&mut RegionVisitor { tcx: self, outer_index: ty::INNERMOST, callback })\n+            .is_break()\n     }\n }\n \n@@ -708,7 +721,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let mut collector = LateBoundRegionsCollector::new(just_constraint);\n+        let mut collector = LateBoundRegionsCollector::new(self, just_constraint);\n         let result = value.as_ref().skip_binder().visit_with(&mut collector);\n         assert!(result.is_continue()); // should never have stopped early\n         collector.regions\n@@ -775,6 +788,10 @@ impl<'tcx> ValidateBoundVars<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n     type BreakTy = ();\n \n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        bug!(\"default anon const substs can't contain bound vars\");\n+    }\n+\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -989,6 +1006,10 @@ struct HasEscapingVarsVisitor {\n impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n     type BreakTy = FoundEscapingVars;\n \n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        bug!(\"tcx_for_anon_const_substs called for HasEscpaingVarsVisitor\");\n+    }\n+\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -1059,6 +1080,9 @@ struct HasTypeFlagsVisitor {\n \n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     type BreakTy = FoundFlags;\n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        bug!(\"tcx_for_anon_const_substs called for HasTypeFlagsVisitor\");\n+    }\n \n     #[inline]\n     fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {\n@@ -1113,7 +1137,8 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n \n /// Collects all the late-bound regions at the innermost binding level\n /// into a hash set.\n-struct LateBoundRegionsCollector {\n+struct LateBoundRegionsCollector<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     current_index: ty::DebruijnIndex,\n     regions: FxHashSet<ty::BoundRegionKind>,\n \n@@ -1127,17 +1152,22 @@ struct LateBoundRegionsCollector {\n     just_constrained: bool,\n }\n \n-impl LateBoundRegionsCollector {\n-    fn new(just_constrained: bool) -> Self {\n+impl LateBoundRegionsCollector<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>, just_constrained: bool) -> Self {\n         LateBoundRegionsCollector {\n+            tcx,\n             current_index: ty::INNERMOST,\n             regions: Default::default(),\n             just_constrained,\n         }\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n+impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector<'tcx> {\n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,"}, {"sha": "ef999285f5374d5b80964372e4b3c1f4a0c64707", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -2017,13 +2017,18 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         debug!(\"prepare_late_bound_region_info(value: {:?})\", value);\n \n         struct LateBoundRegionNameCollector<'a, 'tcx> {\n+            tcx: TyCtxt<'tcx>,\n             used_region_names: &'a mut FxHashSet<Symbol>,\n             type_collector: SsoHashSet<Ty<'tcx>>,\n         }\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_, 'tcx> {\n             type BreakTy = ();\n \n+            fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+                self.tcx\n+            }\n+\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 debug!(\"LateBoundRegionNameCollector::visit_region(r: {:?}, address: {:p})\", r, &r);\n                 if let ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name), .. }) = *r {\n@@ -2053,6 +2058,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n \n         self.used_region_names.clear();\n         let mut collector = LateBoundRegionNameCollector {\n+            tcx: self.tcx,\n             used_region_names: &mut self.used_region_names,\n             type_collector: SsoHashSet::new(),\n         };"}, {"sha": "b7ab2e88b962394aa73ef053cf5b1d2dcd2bff09", "filename": "compiler/rustc_mir/src/interpret/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -21,6 +21,10 @@ where\n     impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n         type BreakTy = FoundParam;\n \n+        fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+            self.tcx\n+        }\n+\n         fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if !c.needs_subst() {\n                 return ControlFlow::CONTINUE;"}, {"sha": "dd7500e9e9d5d7e214c962d9f224a877e4d52ac8", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -178,7 +178,7 @@ fn mark_used_by_predicates<'tcx>(\n             // Consider all generic params in a predicate as used if any other parameter in the\n             // predicate is used.\n             let any_param_used = {\n-                let mut vis = HasUsedGenericParams { unused_parameters };\n+                let mut vis = HasUsedGenericParams { tcx, unused_parameters };\n                 predicate.visit_with(&mut vis).is_break()\n             };\n \n@@ -283,6 +283,9 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n     #[instrument(skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !c.has_param_types_or_consts() {\n@@ -346,13 +349,18 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n }\n \n /// Visitor used to check if a generic parameter is used.\n-struct HasUsedGenericParams<'a> {\n+struct HasUsedGenericParams<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     unused_parameters: &'a FiniteBitSet<u32>,\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n+impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a, 'tcx> {\n     type BreakTy = ();\n \n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     #[instrument(skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !c.has_param_types_or_consts() {"}, {"sha": "435fca4a11b4d542942234151b1cc0174de660c4", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -682,6 +682,10 @@ pub fn write_allocations<'tcx>(\n     }\n     struct CollectAllocIds(BTreeSet<AllocId>);\n     impl<'tcx> TypeVisitor<'tcx> for CollectAllocIds {\n+        fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+            bug!(\"tcx_for_anon_const_substs called for CollectAllocIds\")\n+        }\n+\n         fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::ConstKind::Value(val) = c.val {\n                 self.0.extend(alloc_ids_from_const(val));"}, {"sha": "45d31068668ee61a9a7fd2fce54fb420679728cf", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -179,6 +179,10 @@ where\n {\n     type BreakTy = V::BreakTy;\n \n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        self.def_id_visitor.tcx()\n+    }\n+\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {\n         let tcx = self.def_id_visitor.tcx();\n         // InternalSubsts are not visited here because they are visited below in `super_visit_with`."}, {"sha": "083a962ac7b244bfd0a6dc70dd1a2637b24d0f36", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -352,6 +352,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         if !required_region_bounds.is_empty() {\n             for required_region in required_region_bounds {\n                 concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n+                    tcx,\n                     op: |r| self.sub_regions(infer::CallReturn(span), required_region, r),\n                 });\n             }\n@@ -427,6 +428,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         }\n         concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n+            tcx,\n             op: |r| self.sub_regions(infer::CallReturn(span), least_region, r),\n         });\n     }\n@@ -461,6 +463,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         );\n \n         concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n+            tcx: self.tcx,\n             op: |r| {\n                 self.member_constraint(\n                     opaque_type_key.def_id,\n@@ -546,14 +549,19 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n //\n // We ignore any type parameters because impl trait values are assumed to\n // capture all the in-scope type parameters.\n-struct ConstrainOpaqueTypeRegionVisitor<OP> {\n+struct ConstrainOpaqueTypeRegionVisitor<'tcx, OP> {\n+    tcx: TyCtxt<'tcx>,\n     op: OP,\n }\n \n-impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<OP>\n+impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {\n+    fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,"}, {"sha": "b81ca52f9fd31a372971165438ea54df1ad50ea1", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -771,6 +771,9 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n \n     impl<'tcx> TypeVisitor<'tcx> for IllegalSelfTypeVisitor<'tcx> {\n         type BreakTy = ();\n+        fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx> {\n+            self.tcx\n+        }\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             match t.kind() {"}, {"sha": "fd7dc55ac8413b4dbac0387f53158a600cca68f8", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -130,6 +130,9 @@ impl Search<'a, 'tcx> {\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n     type BreakTy = NonStructuralMatchTy<'tcx>;\n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        self.tcx()\n+    }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"Search visiting ty: {:?}\", ty);"}, {"sha": "d07eeaedd82df18adf364a049b1e264564e397c9", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -806,7 +806,7 @@ crate fn collect_bound_vars<'tcx, T: TypeFoldable<'tcx>>(\n     tcx: TyCtxt<'tcx>,\n     ty: Binder<'tcx, T>,\n ) -> (T, chalk_ir::VariableKinds<RustInterner<'tcx>>, BTreeMap<DefId, u32>) {\n-    let mut bound_vars_collector = BoundVarsCollector::new();\n+    let mut bound_vars_collector = BoundVarsCollector::new(tcx);\n     ty.as_ref().skip_binder().visit_with(&mut bound_vars_collector);\n     let mut parameters = bound_vars_collector.parameters;\n     let named_parameters: BTreeMap<DefId, u32> = bound_vars_collector\n@@ -836,14 +836,16 @@ crate fn collect_bound_vars<'tcx, T: TypeFoldable<'tcx>>(\n }\n \n crate struct BoundVarsCollector<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     binder_index: ty::DebruijnIndex,\n     crate parameters: BTreeMap<u32, chalk_ir::VariableKind<RustInterner<'tcx>>>,\n     crate named_parameters: Vec<DefId>,\n }\n \n impl<'tcx> BoundVarsCollector<'tcx> {\n-    crate fn new() -> Self {\n+    crate fn new(tcx: TyCtxt<'tcx>) -> Self {\n         BoundVarsCollector {\n+            tcx,\n             binder_index: ty::INNERMOST,\n             parameters: BTreeMap::new(),\n             named_parameters: vec![],\n@@ -852,6 +854,10 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -1070,6 +1076,10 @@ impl PlaceholdersCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        bug!(\"tcx_for_anon_const_substs called for PlaceholdersCollector\");\n+    }\n+\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {"}, {"sha": "b9fbb5da3e60417e501e910089e0efe04f082c44", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -54,6 +54,9 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n     type BreakTy = ();\n \n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        bug!(\"default anon const substs can't be bound vars\");\n+    }\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,"}, {"sha": "06fae26f7df4d9f2adda570002b599230ecc3cef", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -470,14 +470,17 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     debug!(?item, ?span);\n \n     struct FoundParentLifetime;\n-    struct FindParentLifetimeVisitor<'tcx>(&'tcx ty::Generics);\n+    struct FindParentLifetimeVisitor<'tcx>(TyCtxt<'tcx>, &'tcx ty::Generics);\n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for FindParentLifetimeVisitor<'tcx> {\n         type BreakTy = FoundParentLifetime;\n+        fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+            self.0\n+        }\n \n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"FindParentLifetimeVisitor: r={:?}\", r);\n             if let RegionKind::ReEarlyBound(ty::EarlyBoundRegion { index, .. }) = r {\n-                if *index < self.0.parent_count as u32 {\n+                if *index < self.1.parent_count as u32 {\n                     return ControlFlow::Break(FoundParentLifetime);\n                 } else {\n                     return ControlFlow::CONTINUE;\n@@ -499,21 +502,24 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     }\n \n     struct ProhibitOpaqueVisitor<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n         opaque_identity_ty: Ty<'tcx>,\n         generics: &'tcx ty::Generics,\n-        tcx: TyCtxt<'tcx>,\n         selftys: Vec<(Span, Option<String>)>,\n     }\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         type BreakTy = Ty<'tcx>;\n+        fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+            self.tcx\n+        }\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n             if t == self.opaque_identity_ty {\n                 ControlFlow::CONTINUE\n             } else {\n-                t.super_visit_with(&mut FindParentLifetimeVisitor(self.generics))\n+                t.super_visit_with(&mut FindParentLifetimeVisitor(self.tcx, self.generics))\n                     .map_break(|FoundParentLifetime| t)\n             }\n         }\n@@ -1580,6 +1586,9 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n             {\n                 struct VisitTypes(Vec<DefId>);\n                 impl<'tcx> ty::fold::TypeVisitor<'tcx> for VisitTypes {\n+                    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+                        bug!(\"tcx_for_anon_const_substs called for VisitTypes\");\n+                    }\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n                             ty::Opaque(def, _) => {"}, {"sha": "3503d68e8f029e18bf1288a1462f4063654eafeb", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -428,7 +428,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n                 if let Some(missing_trait) = missing_trait {\n-                    let mut visitor = TypeParamVisitor(vec![]);\n+                    let mut visitor = TypeParamVisitor(self.tcx, vec![]);\n                     visitor.visit_ty(lhs_ty);\n \n                     if op.node == hir::BinOpKind::Add\n@@ -439,7 +439,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // This has nothing here because it means we did string\n                         // concatenation (e.g., \"Hello \" + \"World!\"). This means\n                         // we don't want the note in the else clause to be emitted\n-                    } else if let [ty] = &visitor.0[..] {\n+                    } else if let [ty] = &visitor.1[..] {\n                         if let ty::Param(p) = *ty.kind() {\n                             // Check if the method would be found if the type param wasn't\n                             // involved. If so, it means that adding a trait bound to the param is\n@@ -1003,12 +1003,15 @@ fn suggest_constraining_param(\n     }\n }\n \n-struct TypeParamVisitor<'tcx>(Vec<Ty<'tcx>>);\n+struct TypeParamVisitor<'tcx>(TyCtxt<'tcx>, Vec<Ty<'tcx>>);\n \n impl<'tcx> TypeVisitor<'tcx> for TypeParamVisitor<'tcx> {\n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        self.0\n+    }\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::Param(_) = ty.kind() {\n-            self.0.push(ty);\n+            self.1.push(ty);\n         }\n         ty.super_visit_with(self)\n     }"}, {"sha": "44caf348a98ee6415623372c8308737e5fe29603", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -825,12 +825,15 @@ fn check_where_clauses<'tcx, 'fcx>(\n         .predicates\n         .iter()\n         .flat_map(|&(pred, sp)| {\n-            #[derive(Default)]\n-            struct CountParams {\n+            struct CountParams<'tcx> {\n+                tcx: TyCtxt<'tcx>,\n                 params: FxHashSet<u32>,\n             }\n-            impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n+            impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams<'tcx> {\n                 type BreakTy = ();\n+                fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+                    self.tcx\n+                }\n \n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::Param(param) = t.kind() {\n@@ -850,7 +853,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                     c.super_visit_with(self)\n                 }\n             }\n-            let mut param_count = CountParams::default();\n+            let mut param_count = CountParams { tcx: fcx.tcx, params: FxHashSet::default() };\n             let has_region = pred.visit_with(&mut param_count).is_break();\n             let substituted_pred = pred.subst(tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)"}, {"sha": "d5316352c546503a415471794ea1b6a0cd9acc46", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -2320,7 +2320,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n             tcx,\n             &mut predicates,\n             trait_ref,\n-            &mut cgp::parameters_for_impl(self_ty, trait_ref),\n+            &mut cgp::parameters_for_impl(tcx, self_ty, trait_ref),\n         );\n     }\n "}, {"sha": "140348ea4ec130a42e135750f1cb7edbc384913c", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -27,12 +27,13 @@ impl From<ty::ParamConst> for Parameter {\n \n /// Returns the set of parameters constrained by the impl header.\n pub fn parameters_for_impl<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     impl_self_ty: Ty<'tcx>,\n     impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n ) -> FxHashSet<Parameter> {\n     let vec = match impl_trait_ref {\n-        Some(tr) => parameters_for(&tr, false),\n-        None => parameters_for(&impl_self_ty, false),\n+        Some(tr) => parameters_for(tcx, &tr, false),\n+        None => parameters_for(tcx, &impl_self_ty, false),\n     };\n     vec.into_iter().collect()\n }\n@@ -43,20 +44,26 @@ pub fn parameters_for_impl<'tcx>(\n /// of parameters whose values are needed in order to constrain `ty` - these\n /// differ, with the latter being a superset, in the presence of projections.\n pub fn parameters_for<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     t: &impl TypeFoldable<'tcx>,\n     include_nonconstraining: bool,\n ) -> Vec<Parameter> {\n-    let mut collector = ParameterCollector { parameters: vec![], include_nonconstraining };\n+    let mut collector = ParameterCollector { tcx, parameters: vec![], include_nonconstraining };\n     t.visit_with(&mut collector);\n     collector.parameters\n }\n \n-struct ParameterCollector {\n+struct ParameterCollector<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     parameters: Vec<Parameter>,\n     include_nonconstraining: bool,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n+impl<'tcx> TypeVisitor<'tcx> for ParameterCollector<'tcx> {\n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *t.kind() {\n             ty::Projection(..) | ty::Opaque(..) if !self.include_nonconstraining => {\n@@ -198,12 +205,12 @@ pub fn setup_constraining_predicates<'tcx>(\n                 //     `<<T as Bar>::Baz as Iterator>::Output = <U as Iterator>::Output`\n                 // Then the projection only applies if `T` is known, but it still\n                 // does not determine `U`.\n-                let inputs = parameters_for(&projection.projection_ty, true);\n+                let inputs = parameters_for(tcx, &projection.projection_ty, true);\n                 let relies_only_on_inputs = inputs.iter().all(|p| input_parameters.contains(&p));\n                 if !relies_only_on_inputs {\n                     continue;\n                 }\n-                input_parameters.extend(parameters_for(&projection.ty, false));\n+                input_parameters.extend(parameters_for(tcx, &projection.ty, false));\n             } else {\n                 continue;\n             }"}, {"sha": "194c4efdbb05888fb8b677e1361f06e22f0b0d7b", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -119,7 +119,7 @@ fn enforce_impl_params_are_constrained(\n     let impl_predicates = tcx.predicates_of(impl_def_id);\n     let impl_trait_ref = tcx.impl_trait_ref(impl_def_id);\n \n-    let mut input_parameters = cgp::parameters_for_impl(impl_self_ty, impl_trait_ref);\n+    let mut input_parameters = cgp::parameters_for_impl(tcx, impl_self_ty, impl_trait_ref);\n     cgp::identify_constrained_generic_params(\n         tcx,\n         impl_predicates,\n@@ -136,7 +136,7 @@ fn enforce_impl_params_are_constrained(\n             match item.kind {\n                 ty::AssocKind::Type => {\n                     if item.defaultness.has_value() {\n-                        cgp::parameters_for(&tcx.type_of(def_id), true)\n+                        cgp::parameters_for(tcx, &tcx.type_of(def_id), true)\n                     } else {\n                         Vec::new()\n                     }"}, {"sha": "2d71c87bee77d0f2f72768bd4e8745e7388429cf", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -207,15 +207,15 @@ fn unconstrained_parent_impl_substs<'tcx>(\n                 continue;\n             }\n \n-            unconstrained_parameters.extend(cgp::parameters_for(&projection_ty, true));\n+            unconstrained_parameters.extend(cgp::parameters_for(tcx, &projection_ty, true));\n \n-            for param in cgp::parameters_for(&projected_ty, false) {\n+            for param in cgp::parameters_for(tcx, &projected_ty, false) {\n                 if !unconstrained_parameters.contains(&param) {\n                     constrained_params.insert(param.0);\n                 }\n             }\n \n-            unconstrained_parameters.extend(cgp::parameters_for(&projected_ty, true));\n+            unconstrained_parameters.extend(cgp::parameters_for(tcx, &projected_ty, true));\n         }\n     }\n \n@@ -249,7 +249,7 @@ fn check_duplicate_params<'tcx>(\n     parent_substs: &Vec<GenericArg<'tcx>>,\n     span: Span,\n ) {\n-    let mut base_params = cgp::parameters_for(parent_substs, true);\n+    let mut base_params = cgp::parameters_for(tcx, parent_substs, true);\n     base_params.sort_by_key(|param| param.0);\n     if let (_, [duplicate, ..]) = base_params.partition_dedup() {\n         let param = impl1_substs[duplicate.0 as usize];"}, {"sha": "2335d2248aa9a8409d9276f0859fc10e50cf2da2", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f4b606fd1703fb54bf75f064482312a67beb4a7b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b606fd1703fb54bf75f064482312a67beb4a7b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=f4b606fd1703fb54bf75f064482312a67beb4a7b", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::{\n     visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n     Mutability,\n };\n-use rustc_middle::ty::{self, fold::TypeVisitor, Ty};\n+use rustc_middle::ty::{self, fold::TypeVisitor, Ty, TyCtxt};\n use rustc_mir::dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n@@ -576,7 +576,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 self.possible_borrower.add(borrowed.local, lhs);\n             },\n             other => {\n-                if ContainsRegion\n+                if ContainsRegion(self.cx.tcx)\n                     .visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty)\n                     .is_continue()\n                 {\n@@ -625,7 +625,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 .flat_map(HybridBitSet::iter)\n                 .collect();\n \n-            if ContainsRegion.visit_ty(self.body.local_decls[*dest].ty).is_break() {\n+            if ContainsRegion(self.cx.tcx).visit_ty(self.body.local_decls[*dest].ty).is_break() {\n                 mutable_variables.push(*dest);\n             }\n \n@@ -701,12 +701,15 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleOriginVisitor<'a, 'tcx> {\n     }\n }\n \n-struct ContainsRegion;\n+struct ContainsRegion<'tcx>(TyCtxt<'tcx>);\n \n-impl TypeVisitor<'_> for ContainsRegion {\n+impl<'tcx> TypeVisitor<'tcx> for ContainsRegion<'tcx> {\n     type BreakTy = ();\n+    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n+        self.0\n+    }\n \n-    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         ControlFlow::BREAK\n     }\n }"}]}