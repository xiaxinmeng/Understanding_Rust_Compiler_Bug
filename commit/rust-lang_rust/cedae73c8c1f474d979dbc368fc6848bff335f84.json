{"sha": "cedae73c8c1f474d979dbc368fc6848bff335f84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZGFlNzNjOGMxZjQ3NGQ5NzlkYmMzNjhmYzY4NDhiZmYzMzVmODQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-27T16:57:15Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-07T07:54:38Z"}, "message": "Fix incremental tests after change to instantiation strategy.", "tree": {"sha": "51da3779b20ed5310ea5c30e043e0a9cdd8e960d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51da3779b20ed5310ea5c30e043e0a9cdd8e960d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cedae73c8c1f474d979dbc368fc6848bff335f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cedae73c8c1f474d979dbc368fc6848bff335f84", "html_url": "https://github.com/rust-lang/rust/commit/cedae73c8c1f474d979dbc368fc6848bff335f84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cedae73c8c1f474d979dbc368fc6848bff335f84/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a3659427e9cdf7a03789cd8aded2e09d171d32a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3659427e9cdf7a03789cd8aded2e09d171d32a", "html_url": "https://github.com/rust-lang/rust/commit/6a3659427e9cdf7a03789cd8aded2e09d171d32a"}], "stats": {"total": 560, "additions": 285, "deletions": 275}, "files": [{"sha": "067ce51d0f7854bb8be86324a59fe6038e74750d", "filename": "src/test/incremental/add_private_fn_at_krate_root_cc/struct_point.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -12,73 +12,72 @@\n // crate. This should not cause anything we use to be invalidated.\n // Regression test for #36168.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n // aux-build:point.rs\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n+#![crate_type = \"rlib\"]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_free_fn\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_free_fn\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n \n extern crate point;\n \n /// A fn item that calls (public) methods on `Point` from the same impl\n-mod fn_calls_methods_in_same_impl {\n+pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n     }\n }\n \n /// A fn item that calls (public) methods on `Point` from another impl\n-mod fn_calls_free_fn {\n+pub mod fn_calls_free_fn {\n     use point::{self, Point};\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         point::distance_squared(&x);\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "b1c566e1739ef8a355aedf5865944f8607d6aa34", "filename": "src/test/incremental/change_add_field/struct_point.rs", "status": "modified", "additions": 34, "deletions": 35, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -13,32 +13,34 @@\n // Fns with that type used only in their body are also recompiled, but\n // their callers are not.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n+#![crate_type = \"rlib\"]\n \n // These are expected to require translation.\n-#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_sig\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-call_fn_with_type_in_sig\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_body\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n-\n-#![rustc_partition_reused(module=\"struct_point-call_fn_with_type_in_body\", cfg=\"rpass2\")]\n-\n-mod point {\n-    #[cfg(rpass1)]\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_sig\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-call_fn_with_type_in_sig\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_body\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n+\n+#![rustc_partition_reused(module=\"struct_point-call_fn_with_type_in_body\", cfg=\"cfail2\")]\n+\n+pub mod point {\n+    #[cfg(cfail1)]\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n     }\n \n-    #[cfg(rpass2)]\n+    #[cfg(cfail2)]\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n@@ -47,18 +49,18 @@ mod point {\n \n     impl Point {\n         pub fn origin() -> Point {\n-            #[cfg(rpass1)]\n+            #[cfg(cfail1)]\n             return Point { x: 0.0, y: 0.0 };\n \n-            #[cfg(rpass2)]\n+            #[cfg(cfail2)]\n             return Point { x: 0.0, y: 0.0, z: 0.0 };\n         }\n \n         pub fn total(&self) -> f32 {\n-            #[cfg(rpass1)]\n+            #[cfg(cfail1)]\n             return self.x + self.y;\n \n-            #[cfg(rpass2)]\n+            #[cfg(cfail2)]\n             return self.x + self.y + self.z;\n         }\n \n@@ -75,10 +77,10 @@ mod point {\n /// sufficiently \"private\", we might not need to type-check again.\n /// Rebuilding is probably always necessary since the layout may be\n /// affected.\n-mod fn_with_type_in_sig {\n+pub mod fn_with_type_in_sig {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn boop(p: Option<&Point>) -> f32 {\n         p.map(|p| p.total()).unwrap_or(0.0)\n     }\n@@ -91,10 +93,10 @@ mod fn_with_type_in_sig {\n /// sufficiently \"private\", we might not need to type-check again.\n /// Rebuilding is probably always necessary since the layout may be\n /// affected.\n-mod call_fn_with_type_in_sig {\n+pub mod call_fn_with_type_in_sig {\n     use fn_with_type_in_sig;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn bip() -> f32 {\n         fn_with_type_in_sig::boop(None)\n     }\n@@ -107,10 +109,10 @@ mod call_fn_with_type_in_sig {\n /// sufficiently \"private\", we might not need to type-check again.\n /// Rebuilding is probably always necessary since the layout may be\n /// affected.\n-mod fn_with_type_in_body {\n+pub mod fn_with_type_in_body {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn boop() -> f32 {\n         Point::origin().total()\n     }\n@@ -120,44 +122,41 @@ mod fn_with_type_in_body {\n /// body. In this case, the effects of the change should be contained\n /// to Y; X should not have to be rebuilt, nor should it need to be\n /// typechecked again.\n-mod call_fn_with_type_in_body {\n+pub mod call_fn_with_type_in_body {\n     use fn_with_type_in_body;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn bip() -> f32 {\n         fn_with_type_in_body::boop()\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin(p: Point) -> Point {\n         Point { ..p }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "d8251a4fbcf6c905031f058409a8403fd8147c92", "filename": "src/test/incremental/change_private_fn/struct_point.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -11,32 +11,34 @@\n // Test where we change the body of a private method in an impl.\n // We then test what sort of functions must be rebuilt as a result.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n+#![crate_type = \"rlib\"]\n \n-#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"cfail2\")]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n \n-mod point {\n+pub mod point {\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n     }\n \n     fn distance_squared(this: &Point) -> f32 {\n-        #[cfg(rpass1)]\n+        #[cfg(cfail1)]\n         return this.x + this.y;\n \n-        #[cfg(rpass2)]\n+        #[cfg(cfail2)]\n         return this.x * this.x + this.y * this.y;\n     }\n \n@@ -56,56 +58,53 @@ mod point {\n }\n \n /// A fn item that calls (public) methods on `Point` from the same impl which changed\n-mod fn_calls_methods_in_same_impl {\n+pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n     }\n }\n \n /// A fn item that calls (public) methods on `Point` from another impl\n-mod fn_calls_methods_in_another_impl {\n+pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "af20336806fd432a3e652193256bd775237641ef", "filename": "src/test/incremental/change_private_fn_cc/auxiliary/point.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fauxiliary%2Fpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fauxiliary%2Fpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fauxiliary%2Fpoint.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -14,10 +14,10 @@ pub struct Point {\n }\n \n fn distance_squared(this: &Point) -> f32 {\n-    #[cfg(rpass1)]\n+    #[cfg(cfail1)]\n     return this.x + this.y;\n \n-    #[cfg(rpass2)]\n+    #[cfg(cfail2)]\n     return this.x * this.x + this.y * this.y;\n }\n "}, {"sha": "b3816b90194e45dd23f6b5248e4aaaefd0554237", "filename": "src/test/incremental/change_private_fn_cc/struct_point.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -11,73 +11,72 @@\n // Test where we change the body of a private method in an impl.\n // We then test what sort of functions must be rebuilt as a result.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n // aux-build:point.rs\n+// must-compile-successfully\n \n+#![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n \n extern crate point;\n \n /// A fn item that calls (public) methods on `Point` from the same impl which changed\n-mod fn_calls_methods_in_same_impl {\n+pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n     }\n }\n \n /// A fn item that calls (public) methods on `Point` from another impl\n-mod fn_calls_methods_in_another_impl {\n+pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "c18f95a631205da605c9dd10821b52f982669672", "filename": "src/test/incremental/change_private_impl_method/struct_point.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -11,33 +11,35 @@\n // Test where we change the body of a private method in an impl.\n // We then test what sort of functions must be rebuilt as a result.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n+#![crate_type = \"rlib\"]\n \n-#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"cfail2\")]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n \n-mod point {\n+pub mod point {\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n     }\n \n     impl Point {\n-        fn distance_squared(&self) -> f32 {\n-            #[cfg(rpass1)]\n+        pub fn distance_squared(&self) -> f32 {\n+            #[cfg(cfail1)]\n             return self.x + self.y;\n \n-            #[cfg(rpass2)]\n+            #[cfg(cfail2)]\n             return self.x * self.x + self.y * self.y;\n         }\n \n@@ -56,56 +58,53 @@ mod point {\n }\n \n /// A fn item that calls (public) methods on `Point` from the same impl which changed\n-mod fn_calls_methods_in_same_impl {\n+pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n     }\n }\n \n /// A fn item that calls (public) methods on `Point` from another impl\n-mod fn_calls_methods_in_another_impl {\n+pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "f5e3a06051cc95b29b3952b7d748f75b89c5555a", "filename": "src/test/incremental/change_private_impl_method_cc/auxiliary/point.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fauxiliary%2Fpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fauxiliary%2Fpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fauxiliary%2Fpoint.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -15,10 +15,10 @@ pub struct Point {\n \n impl Point {\n     fn distance_squared(&self) -> f32 {\n-        #[cfg(rpass1)]\n+        #[cfg(cfail1)]\n         return self.x + self.y;\n \n-        #[cfg(rpass2)]\n+        #[cfg(cfail2)]\n         return self.x * self.x + self.y * self.y;\n     }\n "}, {"sha": "55e1dffe9da41e28ee421b4011cdf94dffc3a3ae", "filename": "src/test/incremental/change_private_impl_method_cc/struct_point.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -11,74 +11,73 @@\n // Test where we change the body of a private method in an impl.\n // We then test what sort of functions must be rebuilt as a result.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n // aux-build:point.rs\n+// must-compile-successfully\n \n+#![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"cfail2\")]\n \n extern crate point;\n \n /// A fn item that calls (public) methods on `Point` from the same impl which changed\n-mod fn_calls_methods_in_same_impl {\n+pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n     }\n }\n \n /// A fn item that calls (public) methods on `Point` from another impl\n-mod fn_calls_methods_in_another_impl {\n+pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn dirty() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "2cb7ef13f8e526bf281300bc588f554f1756b489", "filename": "src/test/incremental/change_pub_inherent_method_body/struct_point.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -10,33 +10,35 @@\n \n // Test where we change the body of a public, inherent method.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n+#![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n \n-#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"cfail2\")]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_changed_method\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_another_method\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_changed_method\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_another_method\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n \n-mod point {\n+pub mod point {\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n     }\n \n     impl Point {\n         pub fn distance_from_origin(&self) -> f32 {\n-            #[cfg(rpass1)]\n+            #[cfg(cfail1)]\n             return self.x * self.x + self.y * self.y;\n \n-            #[cfg(rpass2)]\n+            #[cfg(cfail2)]\n             return (self.x * self.x + self.y * self.y).sqrt();\n         }\n \n@@ -47,56 +49,53 @@ mod point {\n }\n \n /// A fn item that calls the method on `Point` which changed\n-mod fn_calls_changed_method {\n+pub mod fn_calls_changed_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.distance_from_origin();\n     }\n }\n \n /// A fn item that calls a method on `Point` which did not change\n-mod fn_calls_another_method {\n+pub mod fn_calls_another_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.x();\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "f2485a876cc60a4db3b017ab40b53a56241f3acc", "filename": "src/test/incremental/change_pub_inherent_method_sig/struct_point.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -10,38 +10,40 @@\n \n // Test where we change the *signature* of a public, inherent method.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n+#![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n \n // These are expected to require translation.\n-#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_calls_changed_method\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_calls_changed_method\", cfg=\"cfail2\")]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_another_method\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_another_method\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n \n-mod point {\n+pub mod point {\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n     }\n \n     impl Point {\n-        #[cfg(rpass1)]\n+        #[cfg(cfail1)]\n         pub fn distance_from_point(&self, p: Option<Point>) -> f32 {\n             let p = p.unwrap_or(Point { x: 0.0, y: 0.0 });\n             let x_diff = self.x - p.x;\n             let y_diff = self.y - p.y;\n             return x_diff * x_diff + y_diff * y_diff;\n         }\n \n-        #[cfg(rpass2)]\n+        #[cfg(cfail2)]\n         pub fn distance_from_point(&self, p: Option<&Point>) -> f32 {\n             const ORIGIN: &Point = &Point { x: 0.0, y: 0.0 };\n             let p = p.unwrap_or(ORIGIN);\n@@ -57,56 +59,53 @@ mod point {\n }\n \n /// A fn item that calls the method that was changed\n-mod fn_calls_changed_method {\n+pub mod fn_calls_changed_method {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.distance_from_point(None);\n     }\n }\n \n /// A fn item that calls a method that was not changed\n-mod fn_calls_another_method {\n+pub mod fn_calls_another_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.x();\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "b49609cbd17a2d3848bd676c49d8be2a30c75e6c", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -190,7 +190,7 @@ impl Struct2 {\n }\n \n // Change UFCS Callee Indirectly -----------------------------------------------\n-mod change_ufcs_callee_indirectly {\n+pub mod change_ufcs_callee_indirectly {\n     #[cfg(cfail1)]\n     use super::Struct as Struct;\n     #[cfg(not(cfail1))]"}, {"sha": "e38fd58d7d277e7bec3807f00710fcbb0ee171c7", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -25,7 +25,7 @@\n #![crate_type=\"rlib\"]\n \n \n-enum Enum {\n+pub enum Enum {\n     Struct {\n         x: i32,\n         y: i64,\n@@ -36,7 +36,7 @@ enum Enum {\n \n // Change field value (struct-like) -----------------------------------------\n #[cfg(cfail1)]\n-fn change_field_value_struct_like() -> Enum {\n+pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n         x: 0,\n         y: 1,\n@@ -49,7 +49,7 @@ fn change_field_value_struct_like() -> Enum {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_value_struct_like() -> Enum {\n+pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n         x: 0,\n         y: 2,\n@@ -61,7 +61,7 @@ fn change_field_value_struct_like() -> Enum {\n \n // Change field order (struct-like) -----------------------------------------\n #[cfg(cfail1)]\n-fn change_field_order_struct_like() -> Enum {\n+pub fn change_field_order_struct_like() -> Enum {\n     Enum::Struct {\n         x: 3,\n         y: 4,\n@@ -76,7 +76,7 @@ fn change_field_order_struct_like() -> Enum {\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n // FIXME(michaelwoerister):Interesting. I would have thought that that changes the MIR. And it\n // would if it were not all constants\n-fn change_field_order_struct_like() -> Enum {\n+pub fn change_field_order_struct_like() -> Enum {\n     Enum::Struct {\n         y: 4,\n         x: 3,\n@@ -85,7 +85,7 @@ fn change_field_order_struct_like() -> Enum {\n }\n \n \n-enum Enum2 {\n+pub enum Enum2 {\n     Struct {\n         x: i8,\n         y: i8,\n@@ -102,7 +102,7 @@ enum Enum2 {\n \n // Change constructor path (struct-like) ------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_path_struct_like() {\n+pub fn change_constructor_path_struct_like() {\n     let _ = Enum::Struct {\n         x: 0,\n         y: 1,\n@@ -115,7 +115,7 @@ fn change_constructor_path_struct_like() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_path_struct_like() {\n+pub fn change_constructor_path_struct_like() {\n     let _ = Enum2::Struct {\n         x: 0,\n         y: 1,\n@@ -127,7 +127,7 @@ fn change_constructor_path_struct_like() {\n \n // Change variant (regular struct) ------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_variant_struct_like() {\n+pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct {\n         x: 0,\n         y: 1,\n@@ -140,7 +140,7 @@ fn change_constructor_variant_struct_like() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_variant_struct_like() {\n+pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct2 {\n         x: 0,\n         y: 1,\n@@ -150,7 +150,7 @@ fn change_constructor_variant_struct_like() {\n \n \n // Change constructor path indirectly (struct-like) -------------------------\n-mod change_constructor_path_indirectly_struct_like {\n+pub mod change_constructor_path_indirectly_struct_like {\n     #[cfg(cfail1)]\n     use super::Enum as TheEnum;\n     #[cfg(not(cfail1))]\n@@ -164,7 +164,7 @@ mod change_constructor_path_indirectly_struct_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> TheEnum {\n+    pub fn function() -> TheEnum {\n         TheEnum::Struct {\n             x: 0,\n             y: 1,\n@@ -175,7 +175,7 @@ mod change_constructor_path_indirectly_struct_like {\n \n \n // Change constructor variant indirectly (struct-like) ---------------------------\n-mod change_constructor_variant_indirectly_struct_like {\n+pub mod change_constructor_variant_indirectly_struct_like {\n     use super::Enum2;\n     #[cfg(cfail1)]\n     use super::Enum2::Struct as Variant;\n@@ -186,7 +186,7 @@ mod change_constructor_variant_indirectly_struct_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> Enum2 {\n+    pub fn function() -> Enum2 {\n         Variant {\n             x: 0,\n             y: 1,\n@@ -198,7 +198,7 @@ mod change_constructor_variant_indirectly_struct_like {\n \n // Change field value (tuple-like) -------------------------------------------\n #[cfg(cfail1)]\n-fn change_field_value_tuple_like() -> Enum {\n+pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 2)\n }\n \n@@ -207,15 +207,15 @@ fn change_field_value_tuple_like() -> Enum {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_value_tuple_like() -> Enum {\n+pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 3)\n }\n \n \n \n // Change constructor path (tuple-like) --------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_path_tuple_like() {\n+pub fn change_constructor_path_tuple_like() {\n     let _ = Enum::Tuple(0, 1, 2);\n }\n \n@@ -227,15 +227,15 @@ fn change_constructor_path_tuple_like() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_path_tuple_like() {\n+pub fn change_constructor_path_tuple_like() {\n     let _ = Enum2::Tuple(0, 1, 2);\n }\n \n \n \n // Change constructor variant (tuple-like) --------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_variant_tuple_like() {\n+pub fn change_constructor_variant_tuple_like() {\n     let _ = Enum2::Tuple(0, 1, 2);\n }\n \n@@ -247,13 +247,13 @@ fn change_constructor_variant_tuple_like() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_variant_tuple_like() {\n+pub fn change_constructor_variant_tuple_like() {\n     let _ = Enum2::Tuple2(0, 1, 2);\n }\n \n \n // Change constructor path indirectly (tuple-like) ---------------------------\n-mod change_constructor_path_indirectly_tuple_like {\n+pub mod change_constructor_path_indirectly_tuple_like {\n     #[cfg(cfail1)]\n     use super::Enum as TheEnum;\n     #[cfg(not(cfail1))]\n@@ -267,15 +267,15 @@ mod change_constructor_path_indirectly_tuple_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> TheEnum {\n+    pub fn function() -> TheEnum {\n         TheEnum::Tuple(0, 1, 2)\n     }\n }\n \n \n \n // Change constructor variant indirectly (tuple-like) ---------------------------\n-mod change_constructor_variant_indirectly_tuple_like {\n+pub mod change_constructor_variant_indirectly_tuple_like {\n     use super::Enum2;\n     #[cfg(cfail1)]\n     use super::Enum2::Tuple as Variant;\n@@ -286,43 +286,43 @@ mod change_constructor_variant_indirectly_tuple_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> Enum2 {\n+    pub fn function() -> Enum2 {\n         Variant(0, 1, 2)\n     }\n }\n \n \n-enum Clike {\n+pub enum Clike {\n     A,\n     B,\n     C\n }\n \n-enum Clike2 {\n+pub enum Clike2 {\n     B,\n     C,\n     D\n }\n \n // Change constructor path (C-like) --------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_path_c_like() {\n+pub fn change_constructor_path_c_like() {\n     let _ = Clike::B;\n }\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_path_c_like() {\n+pub fn change_constructor_path_c_like() {\n     let _ = Clike2::B;\n }\n \n \n \n // Change constructor variant (C-like) --------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_variant_c_like() {\n+pub fn change_constructor_variant_c_like() {\n     let _ = Clike::A;\n }\n \n@@ -331,13 +331,13 @@ fn change_constructor_variant_c_like() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_variant_c_like() {\n+pub fn change_constructor_variant_c_like() {\n     let _ = Clike::C;\n }\n \n \n // Change constructor path indirectly (C-like) ---------------------------\n-mod change_constructor_path_indirectly_c_like {\n+pub mod change_constructor_path_indirectly_c_like {\n     #[cfg(cfail1)]\n     use super::Clike as TheEnum;\n     #[cfg(not(cfail1))]\n@@ -351,15 +351,15 @@ mod change_constructor_path_indirectly_c_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> TheEnum {\n+    pub fn function() -> TheEnum {\n         TheEnum::B\n     }\n }\n \n \n \n // Change constructor variant indirectly (C-like) ---------------------------\n-mod change_constructor_variant_indirectly_c_like {\n+pub mod change_constructor_variant_indirectly_c_like {\n     use super::Clike;\n     #[cfg(cfail1)]\n     use super::Clike::A as Variant;\n@@ -370,7 +370,7 @@ mod change_constructor_variant_indirectly_c_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> Clike {\n+    pub fn function() -> Clike {\n         Variant\n     }\n }"}, {"sha": "f9e8fb026cabbfb9d14c244f272e9ca0f8833ffe", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -25,7 +25,7 @@\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n-struct Foo;\n+pub struct Foo;\n \n // Change Method Name -----------------------------------------------------------\n #[cfg(cfail1)]\n@@ -578,3 +578,19 @@ impl<T: Clone> Bar<T> {\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_trait_bound_to_impl_parameter(&self) { }\n }\n+\n+\n+// Force instantiation of some fns so we can check their hash.\n+pub fn instantiation_root() {\n+    Foo::method_privacy();\n+\n+    #[cfg(cfail1)]\n+    {\n+        Bar(0u32).change_impl_self_type();\n+    }\n+\n+    #[cfg(not(cfail1))]\n+    {\n+        Bar(0u64).change_impl_self_type();\n+    }\n+}"}, {"sha": "67362e31b250233f8c377bfb3cec55ac61e83df1", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -25,15 +25,15 @@\n #![crate_type=\"rlib\"]\n \n \n-struct RegularStruct {\n+pub struct RegularStruct {\n     x: i32,\n     y: i64,\n     z: i16,\n }\n \n // Change field value (regular struct) -----------------------------------------\n #[cfg(cfail1)]\n-fn change_field_value_regular_struct() -> RegularStruct {\n+pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n         x: 0,\n         y: 1,\n@@ -46,7 +46,7 @@ fn change_field_value_regular_struct() -> RegularStruct {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_value_regular_struct() -> RegularStruct {\n+pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n         x: 0,\n         y: 2,\n@@ -58,7 +58,7 @@ fn change_field_value_regular_struct() -> RegularStruct {\n \n // Change field order (regular struct) -----------------------------------------\n #[cfg(cfail1)]\n-fn change_field_order_regular_struct() -> RegularStruct {\n+pub fn change_field_order_regular_struct() -> RegularStruct {\n     RegularStruct {\n         x: 3,\n         y: 4,\n@@ -71,7 +71,7 @@ fn change_field_order_regular_struct() -> RegularStruct {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_order_regular_struct() -> RegularStruct {\n+pub fn change_field_order_regular_struct() -> RegularStruct {\n     RegularStruct {\n         y: 4,\n         x: 3,\n@@ -83,7 +83,7 @@ fn change_field_order_regular_struct() -> RegularStruct {\n \n // Add field (regular struct) --------------------------------------------------\n #[cfg(cfail1)]\n-fn add_field_regular_struct() -> RegularStruct {\n+pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n         y: 4,\n@@ -101,7 +101,7 @@ fn add_field_regular_struct() -> RegularStruct {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn add_field_regular_struct() -> RegularStruct {\n+pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n         y: 4,\n@@ -119,7 +119,7 @@ fn add_field_regular_struct() -> RegularStruct {\n \n // Change field label (regular struct) -----------------------------------------\n #[cfg(cfail1)]\n-fn change_field_label_regular_struct() -> RegularStruct {\n+pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n         y: 4,\n@@ -138,7 +138,7 @@ fn change_field_label_regular_struct() -> RegularStruct {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_label_regular_struct() -> RegularStruct {\n+pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n         y: 4,\n@@ -154,15 +154,15 @@ fn change_field_label_regular_struct() -> RegularStruct {\n \n \n \n-struct RegularStruct2 {\n+pub struct RegularStruct2 {\n     x: i8,\n     y: i8,\n     z: i8,\n }\n \n // Change constructor path (regular struct) ------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_path_regular_struct() {\n+pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct {\n         x: 0,\n         y: 1,\n@@ -175,7 +175,7 @@ fn change_constructor_path_regular_struct() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_path_regular_struct() {\n+pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct2 {\n         x: 0,\n         y: 1,\n@@ -186,7 +186,7 @@ fn change_constructor_path_regular_struct() {\n \n \n // Change constructor path indirectly (regular struct) -------------------------\n-mod change_constructor_path_indirectly_regular_struct {\n+pub mod change_constructor_path_indirectly_regular_struct {\n     #[cfg(cfail1)]\n     use super::RegularStruct as Struct;\n     #[cfg(not(cfail1))]\n@@ -199,7 +199,7 @@ mod change_constructor_path_indirectly_regular_struct {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> Struct {\n+    pub fn function() -> Struct {\n         Struct {\n             x: 0,\n             y: 1,\n@@ -210,11 +210,11 @@ mod change_constructor_path_indirectly_regular_struct {\n \n \n \n-struct TupleStruct(i32, i64, i16);\n+pub struct TupleStruct(i32, i64, i16);\n \n // Change field value (tuple struct) -------------------------------------------\n #[cfg(cfail1)]\n-fn change_field_value_tuple_struct() -> TupleStruct {\n+pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 2)\n }\n \n@@ -223,17 +223,17 @@ fn change_field_value_tuple_struct() -> TupleStruct {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_value_tuple_struct() -> TupleStruct {\n+pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 3)\n }\n \n \n \n-struct TupleStruct2(u16, u16, u16);\n+pub struct TupleStruct2(u16, u16, u16);\n \n // Change constructor path (tuple struct) --------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_path_tuple_struct() {\n+pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct(0, 1, 2);\n }\n \n@@ -242,14 +242,14 @@ fn change_constructor_path_tuple_struct() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_path_tuple_struct() {\n+pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct2(0, 1, 2);\n }\n \n \n \n // Change constructor path indirectly (tuple struct) ---------------------------\n-mod change_constructor_path_indirectly_tuple_struct {\n+pub mod change_constructor_path_indirectly_tuple_struct {\n     #[cfg(cfail1)]\n     use super::TupleStruct as Struct;\n     #[cfg(not(cfail1))]\n@@ -262,7 +262,7 @@ mod change_constructor_path_indirectly_tuple_struct {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> Struct {\n+    pub fn function() -> Struct {\n         Struct(0, 1, 2)\n     }\n }"}, {"sha": "7bb8af74eeb7e6c6e172130e2d33baa8ac295c7c", "filename": "src/test/incremental/issue-38222.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fissue-38222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fissue-38222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-38222.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -33,10 +33,9 @@ pub fn main() {\n \n mod mod1 {\n     pub fn some_fn() {\n-        let _ = 1;\n-    }\n+        #[cfg(rpass2)]\n+        {}\n \n-    #[cfg(rpass2)]\n-    fn _some_other_fn() {\n+        let _ = 1;\n     }\n }"}, {"sha": "bc3e3a78fd6b899ab81d7e89b52c20d4e8f68116", "filename": "src/test/incremental/krate-inherent.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fkrate-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fkrate-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate-inherent.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -8,27 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// revisions: rpass1 rpass2\n+// revisions: cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n-#![rustc_partition_reused(module=\"krate_inherent-x\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"krate_inherent-x\", cfg=\"cfail2\")]\n+#![crate_type = \"rlib\"]\n \n-fn main() { }\n-\n-mod x {\n-    struct Foo;\n+pub mod x {\n+    pub struct Foo;\n     impl Foo {\n-        fn foo(&self) { }\n+        pub fn foo(&self) { }\n     }\n \n-    fn method() {\n+    pub fn method() {\n         let x: Foo = Foo;\n         x.foo(); // inherent methods used to add an edge from Krate\n     }\n }\n \n-#[cfg(rpass1)]\n-fn bar() { } // remove this unrelated fn in rpass2, which should not affect `x::method`\n+#[cfg(cfail1)]\n+pub fn bar() { } // remove this unrelated fn in cfail2, which should not affect `x::method`\n "}, {"sha": "83b75116c608645e5e67a0404b4b4d478967379c", "filename": "src/test/incremental/krate-inlined.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fkrate-inlined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fkrate-inlined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate-inlined.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -20,12 +20,14 @@\n #![rustc_partition_reused(module=\"krate_inlined-x\", cfg=\"rpass2\")]\n \n fn main() {\n+    x::method();\n+\n     #[cfg(rpass2)]\n     ()\n }\n \n mod x {\n-    fn method() {\n+    pub fn method() {\n         // use some methods that require inlining HIR from another crate:\n         let mut v = vec![];\n         v.push(1);"}, {"sha": "3e75fa985acb42f8e561e852dfc2b2228787e469", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedae73c8c1f474d979dbc368fc6848bff335f84/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=cedae73c8c1f474d979dbc368fc6848bff335f84", "patch": "@@ -8,47 +8,48 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// revisions: rpass1 rpass2\n+// revisions: cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n+#![crate_type = \"rlib\"]\n \n // Here the only thing which changes is the string constant in `x`.\n // Therefore, the compiler deduces (correctly) that typeck is not\n // needed even for callers of `x`.\n \n-fn main() { }\n \n-mod x {\n-    #[cfg(rpass1)]\n+pub mod x {\n+    #[cfg(cfail1)]\n     pub fn x() {\n         println!(\"{}\", \"1\");\n     }\n \n-    #[cfg(rpass2)]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n-    #[rustc_dirty(label=\"MirOptimized\", cfg=\"rpass2\")]\n+    #[cfg(cfail2)]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");\n     }\n }\n \n-mod y {\n+pub mod y {\n     use x;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"MirOptimized\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"MirOptimized\", cfg=\"cfail2\")]\n     pub fn y() {\n         x::x();\n     }\n }\n \n-mod z {\n+pub mod z {\n     use y;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"MirOptimized\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"MirOptimized\", cfg=\"cfail2\")]\n     pub fn z() {\n         y::y();\n     }"}]}