{"sha": "69ed6b928cd427669bf7b8694a86b20a8b672fa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZWQ2YjkyOGNkNDI3NjY5YmY3Yjg2OTRhODZiMjBhOGI2NzJmYTc=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-17T15:45:33Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:35:14Z"}, "message": "rustc_codegen_llvm: fix ownership of DIBuilder.", "tree": {"sha": "ff2036939d7b8121c573fef577ac87b89d0cd8ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff2036939d7b8121c573fef577ac87b89d0cd8ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ed6b928cd427669bf7b8694a86b20a8b672fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ed6b928cd427669bf7b8694a86b20a8b672fa7", "html_url": "https://github.com/rust-lang/rust/commit/69ed6b928cd427669bf7b8694a86b20a8b672fa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ed6b928cd427669bf7b8694a86b20a8b672fa7/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54c98ab0dd5b777ba093361cdc85ec3933f8c8eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/54c98ab0dd5b777ba093361cdc85ec3933f8c8eb", "html_url": "https://github.com/rust-lang/rust/commit/54c98ab0dd5b777ba093361cdc85ec3933f8c8eb"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "143b122a5a172e1098c4da91a9f190082dcd9f73", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69ed6b928cd427669bf7b8694a86b20a8b672fa7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ed6b928cd427669bf7b8694a86b20a8b672fa7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=69ed6b928cd427669bf7b8694a86b20a8b672fa7", "patch": "@@ -69,7 +69,7 @@ const DW_TAG_arg_variable: c_uint = 0x101;\n pub struct CrateDebugContext<'a, 'tcx> {\n     llcontext: &'a llvm::Context,\n     llmod: &'a llvm::Module,\n-    builder: &'a DIBuilder,\n+    builder: &'a mut DIBuilder<'a>,\n     created_files: RefCell<FxHashMap<(Symbol, Symbol), &'a DIFile>>,\n     created_enum_disr_types: RefCell<FxHashMap<(DefId, layout::Primitive), &'a DIType>>,\n \n@@ -81,6 +81,14 @@ pub struct CrateDebugContext<'a, 'tcx> {\n     composite_types_completed: RefCell<FxHashSet<&'a DIType>>,\n }\n \n+impl Drop for CrateDebugContext<'a, 'tcx> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            llvm::LLVMRustDIBuilderDispose(&mut *(self.builder as *mut _));\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> CrateDebugContext<'a, 'tcx> {\n     pub fn new(llmod: &'a llvm::Module) -> Self {\n         debug!(\"CrateDebugContext::new\");\n@@ -166,7 +174,6 @@ pub fn finalize(cx: &CodegenCx) {\n \n     unsafe {\n         llvm::LLVMRustDIBuilderFinalize(DIB(cx));\n-        llvm::LLVMRustDIBuilderDispose(DIB(cx));\n         // Debuginfo generation in LLVM by default uses a higher\n         // version of dwarf than macOS currently understands. We can\n         // instruct LLVM to emit an older version of dwarf, however,"}, {"sha": "9f4a555082ad48452edb94b9ae68b80e5378a966", "filename": "src/librustc_codegen_llvm/debuginfo/utils.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69ed6b928cd427669bf7b8694a86b20a8b672fa7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ed6b928cd427669bf7b8694a86b20a8b672fa7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs?ref=69ed6b928cd427669bf7b8694a86b20a8b672fa7", "patch": "@@ -36,7 +36,10 @@ pub fn is_node_local_to_unit(cx: &CodegenCx, def_id: DefId) -> bool\n }\n \n #[allow(non_snake_case)]\n-pub fn create_DIArray(builder: &'ll DIBuilder, arr: &[Option<&'ll DIDescriptor>]) -> &'ll DIArray {\n+pub fn create_DIArray(\n+    builder: &DIBuilder<'ll>,\n+    arr: &[Option<&'ll DIDescriptor>],\n+) -> &'ll DIArray {\n     return unsafe {\n         llvm::LLVMRustDIBuilderGetOrCreateArray(builder, arr.as_ptr(), arr.len() as u32)\n     };\n@@ -54,7 +57,7 @@ pub fn debug_context(cx: &'a CodegenCx<'ll, 'tcx>) -> &'a CrateDebugContext<'ll,\n \n #[inline]\n #[allow(non_snake_case)]\n-pub fn DIB(cx: &CodegenCx<'ll, '_>) -> &'ll DIBuilder {\n+pub fn DIB(cx: &'a CodegenCx<'ll, '_>) -> &'a DIBuilder<'ll> {\n     cx.dbg_cx.as_ref().unwrap().builder\n }\n "}, {"sha": "898d3d67353634b1ece65bfd1e2dd74fea44f9c8", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/69ed6b928cd427669bf7b8694a86b20a8b672fa7/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ed6b928cd427669bf7b8694a86b20a8b672fa7/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=69ed6b928cd427669bf7b8694a86b20a8b672fa7", "patch": "@@ -426,9 +426,10 @@ pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(&SMDiagnostic, *const c_voi\n \n \n pub mod debuginfo {\n-    use super::Metadata;\n+    use super::{InvariantOpaque, Metadata};\n \n-    extern { pub type DIBuilder; }\n+    #[repr(C)]\n+    pub struct DIBuilder<'a>(InvariantOpaque<'a>);\n \n     pub type DIDescriptor = Metadata;\n     pub type DIScope = DIDescriptor;\n@@ -1211,13 +1212,13 @@ extern \"C\" {\n \n     pub fn LLVMRustMetadataAsValue(C: &'a Context, MD: &'a Metadata) -> &'a Value;\n \n-    pub fn LLVMRustDIBuilderCreate(M: &Module) -> &DIBuilder;\n+    pub fn LLVMRustDIBuilderCreate(M: &'a Module) -> &'a mut DIBuilder<'a>;\n \n-    pub fn LLVMRustDIBuilderDispose(Builder: &DIBuilder);\n+    pub fn LLVMRustDIBuilderDispose(Builder: &'a mut DIBuilder<'a>);\n \n     pub fn LLVMRustDIBuilderFinalize(Builder: &DIBuilder);\n \n-    pub fn LLVMRustDIBuilderCreateCompileUnit(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateCompileUnit(Builder: &DIBuilder<'a>,\n                                               Lang: c_uint,\n                                               File: &'a DIFile,\n                                               Producer: *const c_char,\n@@ -1227,17 +1228,17 @@ extern \"C\" {\n                                               SplitName: *const c_char)\n                                               -> &'a DIDescriptor;\n \n-    pub fn LLVMRustDIBuilderCreateFile(Builder: &DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateFile(Builder: &DIBuilder<'a>,\n                                        Filename: *const c_char,\n                                        Directory: *const c_char)\n-                                       -> &DIFile;\n+                                       -> &'a DIFile;\n \n-    pub fn LLVMRustDIBuilderCreateSubroutineType(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateSubroutineType(Builder: &DIBuilder<'a>,\n                                                  File: &'a DIFile,\n                                                  ParameterTypes: &'a DIArray)\n                                                  -> &'a DICompositeType;\n \n-    pub fn LLVMRustDIBuilderCreateFunction(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateFunction(Builder: &DIBuilder<'a>,\n                                            Scope: &'a DIDescriptor,\n                                            Name: *const c_char,\n                                            LinkageName: *const c_char,\n@@ -1254,21 +1255,21 @@ extern \"C\" {\n                                            Decl: Option<&'a DIDescriptor>)\n                                            -> &'a DISubprogram;\n \n-    pub fn LLVMRustDIBuilderCreateBasicType(Builder: &DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateBasicType(Builder: &DIBuilder<'a>,\n                                             Name: *const c_char,\n                                             SizeInBits: u64,\n                                             AlignInBits: u32,\n                                             Encoding: c_uint)\n-                                            -> &DIBasicType;\n+                                            -> &'a DIBasicType;\n \n-    pub fn LLVMRustDIBuilderCreatePointerType(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreatePointerType(Builder: &DIBuilder<'a>,\n                                               PointeeTy: &'a DIType,\n                                               SizeInBits: u64,\n                                               AlignInBits: u32,\n                                               Name: *const c_char)\n                                               -> &'a DIDerivedType;\n \n-    pub fn LLVMRustDIBuilderCreateStructType(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateStructType(Builder: &DIBuilder<'a>,\n                                              Scope: Option<&'a DIDescriptor>,\n                                              Name: *const c_char,\n                                              File: &'a DIFile,\n@@ -1283,7 +1284,7 @@ extern \"C\" {\n                                              UniqueId: *const c_char)\n                                              -> &'a DICompositeType;\n \n-    pub fn LLVMRustDIBuilderCreateMemberType(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateMemberType(Builder: &DIBuilder<'a>,\n                                              Scope: &'a DIDescriptor,\n                                              Name: *const c_char,\n                                              File: &'a DIFile,\n@@ -1295,19 +1296,19 @@ extern \"C\" {\n                                              Ty: &'a DIType)\n                                              -> &'a DIDerivedType;\n \n-    pub fn LLVMRustDIBuilderCreateLexicalBlock(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateLexicalBlock(Builder: &DIBuilder<'a>,\n                                                Scope: &'a DIScope,\n                                                File: &'a DIFile,\n                                                Line: c_uint,\n                                                Col: c_uint)\n                                                -> &'a DILexicalBlock;\n \n-    pub fn LLVMRustDIBuilderCreateLexicalBlockFile(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateLexicalBlockFile(Builder: &DIBuilder<'a>,\n                                                    Scope: &'a DIScope,\n                                                    File: &'a DIFile)\n                                                    -> &'a DILexicalBlock;\n \n-    pub fn LLVMRustDIBuilderCreateStaticVariable(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateStaticVariable(Builder: &DIBuilder<'a>,\n                                                  Context: Option<&'a DIScope>,\n                                                  Name: *const c_char,\n                                                  LinkageName: *const c_char,\n@@ -1320,7 +1321,7 @@ extern \"C\" {\n                                                  AlignInBits: u32)\n                                                  -> &'a DIGlobalVariable;\n \n-    pub fn LLVMRustDIBuilderCreateVariable(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateVariable(Builder: &DIBuilder<'a>,\n                                            Tag: c_uint,\n                                            Scope: &'a DIDescriptor,\n                                            Name: *const c_char,\n@@ -1333,24 +1334,24 @@ extern \"C\" {\n                                            AlignInBits: u32)\n                                            -> &'a DIVariable;\n \n-    pub fn LLVMRustDIBuilderCreateArrayType(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateArrayType(Builder: &DIBuilder<'a>,\n                                             Size: u64,\n                                             AlignInBits: u32,\n                                             Ty: &'a DIType,\n                                             Subscripts: &'a DIArray)\n                                             -> &'a DIType;\n \n-    pub fn LLVMRustDIBuilderGetOrCreateSubrange(Builder: &DIBuilder,\n+    pub fn LLVMRustDIBuilderGetOrCreateSubrange(Builder: &DIBuilder<'a>,\n                                                 Lo: i64,\n                                                 Count: i64)\n-                                                -> &DISubrange;\n+                                                -> &'a DISubrange;\n \n-    pub fn LLVMRustDIBuilderGetOrCreateArray(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderGetOrCreateArray(Builder: &DIBuilder<'a>,\n                                              Ptr: *const Option<&'a DIDescriptor>,\n                                              Count: c_uint)\n                                              -> &'a DIArray;\n \n-    pub fn LLVMRustDIBuilderInsertDeclareAtEnd(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderInsertDeclareAtEnd(Builder: &DIBuilder<'a>,\n                                                Val: &'a Value,\n                                                VarInfo: &'a DIVariable,\n                                                AddrOps: *const i64,\n@@ -1359,12 +1360,12 @@ extern \"C\" {\n                                                InsertAtEnd: &'a BasicBlock)\n                                                -> &'a Value;\n \n-    pub fn LLVMRustDIBuilderCreateEnumerator(Builder: &DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateEnumerator(Builder: &DIBuilder<'a>,\n                                              Name: *const c_char,\n                                              Val: u64)\n-                                             -> &DIEnumerator;\n+                                             -> &'a DIEnumerator;\n \n-    pub fn LLVMRustDIBuilderCreateEnumerationType(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateEnumerationType(Builder: &DIBuilder<'a>,\n                                                   Scope: &'a DIScope,\n                                                   Name: *const c_char,\n                                                   File: &'a DIFile,\n@@ -1375,7 +1376,7 @@ extern \"C\" {\n                                                   ClassType: &'a DIType)\n                                                   -> &'a DIType;\n \n-    pub fn LLVMRustDIBuilderCreateUnionType(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateUnionType(Builder: &DIBuilder<'a>,\n                                             Scope: &'a DIScope,\n                                             Name: *const c_char,\n                                             File: &'a DIFile,\n@@ -1390,7 +1391,7 @@ extern \"C\" {\n \n     pub fn LLVMSetUnnamedAddr(GlobalVar: &Value, UnnamedAddr: Bool);\n \n-    pub fn LLVMRustDIBuilderCreateTemplateTypeParameter(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateTemplateTypeParameter(Builder: &DIBuilder<'a>,\n                                                         Scope: Option<&'a DIScope>,\n                                                         Name: *const c_char,\n                                                         Ty: &'a DIType,\n@@ -1400,14 +1401,14 @@ extern \"C\" {\n                                                         -> &'a DITemplateTypeParameter;\n \n \n-    pub fn LLVMRustDIBuilderCreateNameSpace(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDIBuilderCreateNameSpace(Builder: &DIBuilder<'a>,\n                                             Scope: Option<&'a DIScope>,\n                                             Name: *const c_char,\n                                             File: &'a DIFile,\n                                             LineNo: c_uint)\n                                             -> &'a DINameSpace;\n \n-    pub fn LLVMRustDICompositeTypeSetTypeArray(Builder: &'a DIBuilder,\n+    pub fn LLVMRustDICompositeTypeSetTypeArray(Builder: &DIBuilder<'a>,\n                                                CompositeType: &'a DIType,\n                                                TypeArray: &'a DIArray);\n "}]}