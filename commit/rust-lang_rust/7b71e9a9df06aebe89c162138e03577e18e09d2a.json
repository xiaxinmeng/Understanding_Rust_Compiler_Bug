{"sha": "7b71e9a9df06aebe89c162138e03577e18e09d2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNzFlOWE5ZGYwNmFlYmU4OWMxNjIxMzhlMDM1NzdlMThlMDlkMmE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-26T21:56:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-26T21:57:02Z"}, "message": "Formatting.", "tree": {"sha": "964e8f15436b0e01e2f80f8f6c0ede273ed3d33b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/964e8f15436b0e01e2f80f8f6c0ede273ed3d33b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b71e9a9df06aebe89c162138e03577e18e09d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b71e9a9df06aebe89c162138e03577e18e09d2a", "html_url": "https://github.com/rust-lang/rust/commit/7b71e9a9df06aebe89c162138e03577e18e09d2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b71e9a9df06aebe89c162138e03577e18e09d2a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b99513be57bfb21c546b29999fc541a402e27a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/b99513be57bfb21c546b29999fc541a402e27a10", "html_url": "https://github.com/rust-lang/rust/commit/b99513be57bfb21c546b29999fc541a402e27a10"}], "stats": {"total": 72, "additions": 35, "deletions": 37}, "files": [{"sha": "b264f1d3fe70f8283b7643974f764aa5d32dde39", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7b71e9a9df06aebe89c162138e03577e18e09d2a/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b71e9a9df06aebe89c162138e03577e18e09d2a/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=7b71e9a9df06aebe89c162138e03577e18e09d2a", "patch": "@@ -766,51 +766,49 @@ pub fn create_global_ctxt<'gcx>(\n     arenas: &'gcx Once<AllArenas>,\n ) -> BoxedGlobalCtxt<'gcx> {\n     let sess = &compiler.session();\n-    let codegen_backend = compiler.codegen_backend().clone();\n     let defs = mem::take(&mut resolver_outputs.definitions);\n-    let override_queries = compiler.override_queries;\n-\n-        let arenas = arenas.init_locking(|| AllArenas::new());\n \n-        // Construct the HIR map.\n-        let hir_map = time(sess, \"indexing HIR\", || {\n-            hir::map::map_crate(sess, &*resolver_outputs.cstore, &hir_forest, defs)\n-        });\n+    // Construct the HIR map.\n+    let hir_map = time(sess, \"indexing HIR\", || {\n+        hir::map::map_crate(sess, &*resolver_outputs.cstore, &hir_forest, defs)\n+    });\n \n-        let query_result_on_disk_cache = time(sess, \"load query result cache\", || {\n-            rustc_incremental::load_query_result_cache(sess)\n-        });\n+    let query_result_on_disk_cache = time(sess, \"load query result cache\", || {\n+        rustc_incremental::load_query_result_cache(sess)\n+    });\n \n-        let mut local_providers = ty::query::Providers::default();\n-        default_provide(&mut local_providers);\n-        codegen_backend.provide(&mut local_providers);\n+    let codegen_backend = compiler.codegen_backend();\n+    let mut local_providers = ty::query::Providers::default();\n+    default_provide(&mut local_providers);\n+    codegen_backend.provide(&mut local_providers);\n \n-        let mut extern_providers = local_providers;\n-        default_provide_extern(&mut extern_providers);\n-        codegen_backend.provide_extern(&mut extern_providers);\n+    let mut extern_providers = local_providers;\n+    default_provide_extern(&mut extern_providers);\n+    codegen_backend.provide_extern(&mut extern_providers);\n \n-        if let Some(callback) = override_queries {\n-            callback(sess, &mut local_providers, &mut extern_providers);\n-        }\n+    let override_queries = compiler.override_queries;\n+    if let Some(callback) = override_queries {\n+        callback(sess, &mut local_providers, &mut extern_providers);\n+    }\n \n-        let gcx = global_ctxt.init_locking(move || TyCtxt::create_global_ctxt(\n-            sess,\n-            lint_store,\n-            local_providers,\n-            extern_providers,\n-            &arenas,\n-            resolver_outputs,\n-            hir_map,\n-            query_result_on_disk_cache,\n-            &crate_name,\n-            &outputs\n-        ));\n+    let arenas = arenas.init_locking(|| AllArenas::new());\n+    let gcx = global_ctxt.init_locking(|| TyCtxt::create_global_ctxt(\n+        sess,\n+        lint_store,\n+        local_providers,\n+        extern_providers,\n+        &arenas,\n+        resolver_outputs,\n+        hir_map,\n+        query_result_on_disk_cache,\n+        &crate_name,\n+        &outputs\n+    ));\n \n-        ty::tls::enter_global(&gcx, |tcx| {\n-            // Do some initialization of the DepGraph that can only be done with the\n-            // tcx available.\n-            time(tcx.sess, \"dep graph tcx init\", || rustc_incremental::dep_graph_tcx_init(tcx));\n-        });\n+    // Do some initialization of the DepGraph that can only be done with the tcx available.\n+    ty::tls::enter_global(&gcx, |tcx| {\n+        time(tcx.sess, \"dep graph tcx init\", || rustc_incremental::dep_graph_tcx_init(tcx));\n+    });\n \n     BoxedGlobalCtxt(gcx)\n }"}]}