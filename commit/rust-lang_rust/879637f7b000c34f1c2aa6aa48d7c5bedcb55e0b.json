{"sha": "879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OTYzN2Y3YjAwMGMzNGYxYzJhYTZhYTQ4ZDdjNWJlZGNiNTVlMGI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-08-15T22:27:07Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-08-17T04:12:37Z"}, "message": "Review changes", "tree": {"sha": "ec19a8c5b103ba3b7dc6175e8b230a6fb1e01a98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec19a8c5b103ba3b7dc6175e8b230a6fb1e01a98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "html_url": "https://github.com/rust-lang/rust/commit/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77ca7dd1073a945afcc451bee79f36cd40100996", "url": "https://api.github.com/repos/rust-lang/rust/commits/77ca7dd1073a945afcc451bee79f36cd40100996", "html_url": "https://github.com/rust-lang/rust/commit/77ca7dd1073a945afcc451bee79f36cd40100996"}], "stats": {"total": 131, "additions": 92, "deletions": 39}, "files": [{"sha": "d654429146d83738d9a39888cbe785f0592c84d0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 66, "deletions": 37, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "patch": "@@ -2036,14 +2036,18 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     fn trait_item(w: &mut fmt::Formatter, cx: &Context, m: &clean::Item, t: &clean::Item)\n                   -> fmt::Result {\n         let name = m.name.as_ref().unwrap();\n-        let id = derive_id(format!(\"{}.{}\", item_type(m), name));\n-        write!(w, \"<h3 id='{id}' class='method stab {stab}'><code>\",\n+        let item_type = item_type(m);\n+        let id = derive_id(format!(\"{}.{}\", item_type, name));\n+        let ns_id = derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n+        write!(w, \"<h3 id='{id}' class='method stab {stab}'>\\\n+                   <span id='{ns_id}' class='invisible'><code>\",\n                id = id,\n-               stab = m.stability_class())?;\n+               stab = m.stability_class(),\n+               ns_id = ns_id)?;\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)))?;\n         write!(w, \"</code>\")?;\n         render_stability_since(w, m, t)?;\n-        write!(w, \"</h3>\")?;\n+        write!(w, \"</span></h3>\")?;\n         document(w, cx, m)?;\n         Ok(())\n     }\n@@ -2282,12 +2286,19 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         if fields.peek().is_some() {\n             write!(w, \"<h2 class='fields'>Fields</h2>\")?;\n             for (field, ty) in fields {\n-                write!(w, \"<span id='{item_type}.{name}' class='{item_type}'>\n-                           <a id='{name}.{name_space}'>\n+                let id = derive_id(format!(\"{}.{}\",\n+                                           ItemType::StructField,\n+                                           field.name.as_ref().unwrap()));\n+                let ns_id = derive_id(format!(\"{}.{}\",\n+                                              field.name.as_ref().unwrap(),\n+                                              ItemType::StructField.name_space()));\n+                write!(w, \"<span id='{id}' class='{item_type}'>\n+                           <span id='{ns_id}' class='invisible'>\n                            <code>{name}: {ty}</code>\n-                           </a></span><span class='stab {stab}'></span>\",\n+                           </span></span><span class='stab {stab}'></span>\",\n                        item_type = ItemType::StructField,\n-                       name_space = ItemType::StructField.name_space(),\n+                       id = id,\n+                       ns_id = ns_id,\n                        stab = field.stability_class(),\n                        name = field.name.as_ref().unwrap(),\n                        ty = ty)?;\n@@ -2356,10 +2367,16 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     if !e.variants.is_empty() {\n         write!(w, \"<h2 class='variants'>Variants</h2>\\n\")?;\n         for variant in &e.variants {\n-            write!(w, \"<span id='{item_type}.{name}' class='variant'>\\\n-                       <a id='{name}.{name_space}'><code>{name}\",\n-                   item_type = ItemType::Variant,\n-                   name_space = ItemType::Variant.name_space(),\n+            let id = derive_id(format!(\"{}.{}\",\n+                                       ItemType::Variant,\n+                                       variant.name.as_ref().unwrap()));\n+            let ns_id = derive_id(format!(\"{}.{}\",\n+                                          variant.name.as_ref().unwrap(),\n+                                          ItemType::Variant.name_space()));\n+            write!(w, \"<span id='{id}' class='variant'>\\\n+                       <span id='{ns_id}' class='invisible'><code>{name}\",\n+                   id = id,\n+                   ns_id = ns_id,\n                    name = variant.name.as_ref().unwrap())?;\n             if let clean::VariantItem(ref var) = variant.inner {\n                 if let clean::TupleVariant(ref tys) = var.kind {\n@@ -2373,7 +2390,7 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                     write!(w, \")\")?;\n                 }\n             }\n-            write!(w, \"</code></a></span>\")?;\n+            write!(w, \"</code></span></span>\")?;\n             document(w, cx, variant)?;\n \n             use clean::{Variant, StructVariant};\n@@ -2383,14 +2400,21 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                 for field in &s.fields {\n                     use clean::StructFieldItem;\n                     if let StructFieldItem(ref ty) = field.inner {\n+                        let id = derive_id(format!(\"variant.{}.field.{}\",\n+                                                   variant.name.as_ref().unwrap(),\n+                                                   field.name.as_ref().unwrap()));\n+                        let ns_id = derive_id(format!(\"{}.{}.{}.{}\",\n+                                                      variant.name.as_ref().unwrap(),\n+                                                      ItemType::Variant.name_space(),\n+                                                      field.name.as_ref().unwrap(),\n+                                                      ItemType::StructField.name_space()));\n                         write!(w, \"<tr><td \\\n-                                   id='variant.{v}.field.{f}'>\\\n-                                   <a id='{v}.{vns}.{f}.{fns}'>\\\n-                                   <code>{f}:&nbsp;{t}</code></a></td><td>\",\n-                               v = variant.name.as_ref().unwrap(),\n+                                   id='{id}'>\\\n+                                   <span id='{ns_id}' class='invisible'>\\\n+                                   <code>{f}:&nbsp;{t}</code></span></td><td>\",\n+                               id = id,\n+                               ns_id = ns_id,\n                                f = field.name.as_ref().unwrap(),\n-                               vns = ItemType::Variant.name_space(),\n-                               fns = ItemType::StructField.name_space(),\n                                t = *ty)?;\n                         document(w, cx, field)?;\n                         write!(w, \"</td></tr>\")?;\n@@ -2606,10 +2630,10 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         }\n     }\n \n-    fn doctraititem(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n-                    link: AssocItemLink, render_static: bool,\n-                    is_default_item: bool, outer_version: Option<&str>,\n-                    trait_: Option<&clean::Trait>) -> fmt::Result {\n+    fn doc_impl_item(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n+                     link: AssocItemLink, render_static: bool,\n+                     is_default_item: bool, outer_version: Option<&str>,\n+                     trait_: Option<&clean::Trait>) -> fmt::Result {\n         let item_type = item_type(item);\n         let name = item.name.as_ref().unwrap();\n \n@@ -2624,42 +2648,47 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                 // Only render when the method is not static or we allow static methods\n                 if !is_static || render_static {\n                     let id = derive_id(format!(\"{}.{}\", item_type, name));\n+                    let ns_id = derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                     write!(w, \"<h4 id='{}' class='{}'>\", id, item_type)?;\n-                    write!(w, \"<a id='{}.{}'>\", name, item_type.name_space())?;\n+                    write!(w, \"<span id='{}' class='invisible'>\", ns_id)?;\n                     write!(w, \"<code>\")?;\n                     render_assoc_item(w, item, link.anchor(&id))?;\n                     write!(w, \"</code>\")?;\n                     render_stability_since_raw(w, item.stable_since(), outer_version)?;\n-                    write!(w, \"</a></h4>\\n\")?;\n+                    write!(w, \"</span></h4>\\n\")?;\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n                 let id = derive_id(format!(\"{}.{}\", ItemType::AssociatedType, name));\n+                let ns_id = derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class='{}'>\", id, item_type)?;\n-                write!(w, \"<a id='{}.{}'><code>\", name, item_type.name_space())?;\n+                write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id))?;\n-                write!(w, \"</code></a></h4>\\n\")?;\n+                write!(w, \"</code></span></h4>\\n\")?;\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n                 let id = derive_id(format!(\"{}.{}\", item_type, name));\n+                let ns_id = derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class='{}'>\", id, item_type)?;\n-                write!(w, \"<a id='{}.{}'><code>\", name, item_type.name_space())?;\n+                write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id))?;\n-                write!(w, \"</code></a></h4>\\n\")?;\n+                write!(w, \"</code></span></h4>\\n\")?;\n             }\n             clean::ConstantItem(ref c) => {\n                 let id = derive_id(format!(\"{}.{}\", item_type, name));\n+                let ns_id = derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class='{}'>\", id, item_type)?;\n-                write!(w, \"<a id='{}.{}'><code>\", name, item_type.name_space())?;\n+                write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_const(w, item, &c.type_, Some(&c.expr), link.anchor(&id))?;\n-                write!(w, \"</code></a></h4>\\n\")?;\n+                write!(w, \"</code></span></h4>\\n\")?;\n             }\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n                 let id = derive_id(format!(\"{}.{}\", item_type, name));\n+                let ns_id = derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class='{}'>\", id, item_type)?;\n-                write!(w, \"<a id='{}.{}'><code>\", name, item_type.name_space())?;\n+                write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id))?;\n-                write!(w, \"</code></a></h4>\\n\")?;\n+                write!(w, \"</code></span></h4>\\n\")?;\n             }\n             clean::StrippedItem(..) => return Ok(()),\n             _ => panic!(\"can't make docs for trait item with name {:?}\", item.name)\n@@ -2698,8 +2727,8 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n \n     write!(w, \"<div class='impl-items'>\")?;\n     for trait_item in &i.inner_impl().items {\n-        doctraititem(w, cx, trait_item, link, render_header,\n-                     false, outer_version, trait_)?;\n+        doc_impl_item(w, cx, trait_item, link, render_header,\n+                      false, outer_version, trait_)?;\n     }\n \n     fn render_default_items(w: &mut fmt::Formatter,\n@@ -2716,8 +2745,8 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             let did = i.trait_.as_ref().unwrap().def_id().unwrap();\n             let assoc_link = AssocItemLink::GotoSource(did, &i.provided_trait_methods);\n \n-            doctraititem(w, cx, trait_item, assoc_link, render_static, true,\n-                         outer_version, None)?;\n+            doc_impl_item(w, cx, trait_item, assoc_link, render_static, true,\n+                          outer_version, None)?;\n         }\n         Ok(())\n     }"}, {"sha": "c97cacd10c3814f74109324409d2e825bb61a2ee", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "patch": "@@ -284,14 +284,20 @@ h3.impl > .out-of-band {\n     font-size: 21px;\n }\n \n-h4 > code, h3 > code {\n+h4 > code, h3 > code, invisible > code {\n     position: inherit;\n }\n \n .in-band, code {\n     z-index: 5;\n }\n \n+.invisible {\n+    background: rgba(0, 0, 0, 0);\n+    width: 100%;\n+    display: inline-block;\n+}\n+\n .content .in-band {\n     margin: 0px;\n     padding: 0px;\n@@ -660,6 +666,7 @@ span.since {\n \n :target > code {\n    background: #FDFFD3;\n+   opacity: 1;\n }\n \n /* Media Queries */"}, {"sha": "c64fb1b67f3d74dd130d9fc0589515f22fba0ed8", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "patch": "@@ -26,7 +26,7 @@ h1.fqn {\n h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod) {\n     border-bottom-color: #DDDDDD;\n }\n-.in-band, code {\n+.in-band {\n     background-color: white;\n }\n "}, {"sha": "e5485c356c2924867e2bbd0a8843b7e2bff8fe80", "filename": "src/test/rustdoc/assoc-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-types.rs?ref=879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "patch": "@@ -13,7 +13,9 @@\n // @has assoc_types/trait.Index.html\n pub trait Index<I: ?Sized> {\n     // @has - '//*[@id=\"associatedtype.Output\"]//code' 'type Output: ?Sized'\n+    // @has - '//*[@id=\"Output.t\"]//code' 'type Output: ?Sized'\n     type Output: ?Sized;\n+    // @has - '//*[@id=\"index.v\"]//code' 'fn index'\n     // @has - '//*[@id=\"tymethod.index\"]//code' \\\n     //      \"fn index<'a>(&'a self, index: I) -> &'a Self::Output\"\n     fn index<'a>(&'a self, index: I) -> &'a Self::Output;"}, {"sha": "15f7528b4ba21c234936a1f099d24f5129401c9f", "filename": "src/test/rustdoc/issue-19190.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fissue-19190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fissue-19190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-19190.rs?ref=879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "patch": "@@ -23,6 +23,9 @@ impl Deref for Bar {\n     fn deref(&self) -> &Foo { loop {} }\n }\n \n+// @has issue_19190/Bar.t.html\n // @has issue_19190/struct.Bar.html\n+// @has - '//*[@id=\"foo.v\"]' 'fn foo(&self)'\n // @has - '//*[@id=\"method.foo\"]' 'fn foo(&self)'\n+// @!has - '//*[@id=\"static_foo.v\"]' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}, {"sha": "8c5bda7584c9f8bd54666ad7e436ffd9d005df29", "filename": "src/test/rustdoc/issue-21092.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fissue-21092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fissue-21092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-21092.rs?ref=879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "patch": "@@ -13,6 +13,7 @@\n \n extern crate issue_21092;\n \n+// @has issue_21092/Bar.t.html\n // @has issue_21092/struct.Bar.html\n // @has - '//*[@id=\"associatedtype.Bar\"]' 'type Bar = i32'\n pub use issue_21092::{Foo, Bar};"}, {"sha": "0b6a8104661afa88186ef752e39e22f42e676068", "filename": "src/test/rustdoc/issue-25001.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fissue-25001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fissue-25001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-25001.rs?ref=879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "patch": "@@ -19,14 +19,17 @@ pub trait Bar {\n \n impl Foo<u8> {\n     // @has - '//*[@id=\"method.pass\"]//code' 'fn pass()'\n+    // @has - '//*[@id=\"pass.v\"]//code' 'fn pass()'\n     pub fn pass() {}\n }\n impl Foo<u16> {\n     // @has - '//*[@id=\"method.pass-1\"]//code' 'fn pass() -> usize'\n+    // @has - '//*[@id=\"pass.v-1\"]//code' 'fn pass() -> usize'\n     pub fn pass() -> usize { 42 }\n }\n impl Foo<u32> {\n     // @has - '//*[@id=\"method.pass-2\"]//code' 'fn pass() -> isize'\n+    // @has - '//*[@id=\"pass.v-2\"]//code' 'fn pass() -> isize'\n     pub fn pass() -> isize { 42 }\n }\n "}, {"sha": "e946e2423167acb101a38f45b79ad9ba7864e714", "filename": "src/test/rustdoc/src-links.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fsrc-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fsrc-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links.rs?ref=879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "patch": "@@ -24,11 +24,13 @@ pub mod bar {\n     // @has foo/bar/baz/index.html '//a/@href' '../../../src/foo/src-links.rs.html'\n     pub mod baz {\n         /// Dox\n+        // @has foo/bar/baz/baz.v.html\n         // @has foo/bar/baz/fn.baz.html '//a/@href' '../../../src/foo/src-links.rs.html'\n         pub fn baz() { }\n     }\n \n     /// Dox\n+    // @has foo/bar/Foobar.t.html\n     // @has foo/bar/trait.Foobar.html '//a/@href' '../../src/foo/src-links.rs.html'\n     pub trait Foobar { fn dummy(&self) { } }\n "}, {"sha": "c0bfe3ffe3cf9ee576832eb096b878b0351bd47f", "filename": "src/test/rustdoc/structfields.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fstructfields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b/src%2Ftest%2Frustdoc%2Fstructfields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstructfields.rs?ref=879637f7b000c34f1c2aa6aa48d7c5bedcb55e0b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// @has structfields/Foo.t.html\n+// @has - struct.Foo.html\n // @has structfields/struct.Foo.html\n pub struct Foo {\n     // @has - //pre \"pub a: ()\"\n@@ -22,13 +24,17 @@ pub struct Foo {\n     pub d: usize,\n }\n \n+// @has structfields/Bar.t.html\n+// @has - struct.Bar.html\n // @has structfields/struct.Bar.html\n pub struct Bar {\n     // @has - //pre \"pub a: ()\"\n     pub a: (),\n     // @!has - //pre \"// some fields omitted\"\n }\n \n+// @has structfields/Qux.t.html\n+// @has - enum.Qux.html\n // @has structfields/enum.Qux.html\n pub enum Qux {\n     Quz {"}]}