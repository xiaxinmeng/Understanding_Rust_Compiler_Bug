{"sha": "1f03ba134f25e518abf1d61e5f088bfc3e86586f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMDNiYTEzNGYyNWU1MThhYmYxZDYxZTVmMDg4YmZjM2U4NjU4NmY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-10T03:12:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-10T03:12:51Z"}, "message": "std: fix net::tcp::test fallout from 2db3abd harder", "tree": {"sha": "9b3a329fbfc520b42eb89ef16f7931c7e41fb48a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b3a329fbfc520b42eb89ef16f7931c7e41fb48a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f03ba134f25e518abf1d61e5f088bfc3e86586f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f03ba134f25e518abf1d61e5f088bfc3e86586f", "html_url": "https://github.com/rust-lang/rust/commit/1f03ba134f25e518abf1d61e5f088bfc3e86586f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f03ba134f25e518abf1d61e5f088bfc3e86586f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6644da5805aa6af93bbe1dcba800d9bdaae56b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/6644da5805aa6af93bbe1dcba800d9bdaae56b13", "html_url": "https://github.com/rust-lang/rust/commit/6644da5805aa6af93bbe1dcba800d9bdaae56b13"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "7ea4f34ba3d01ffa216340ddd82e84d095a8cad8", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f03ba134f25e518abf1d61e5f088bfc3e86586f/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f03ba134f25e518abf1d61e5f088bfc3e86586f/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=1f03ba134f25e518abf1d61e5f088bfc3e86586f", "patch": "@@ -1270,7 +1270,7 @@ type TcpBufferedSocketData = {\n };\n \n //#[cfg(test)]\n-mod test {\n+pub mod test {\n     use net::ip;\n     use net::tcp::{GenericListenErr, TcpConnectErrData, TcpListenErrData};\n     use net::tcp::{connect, accept, read, listen, TcpSocket, socket_buf};\n@@ -1290,13 +1290,14 @@ mod test {\n     #[cfg(target_os=\"win32\")]\n     #[cfg(target_os=\"darwin\")]\n     #[cfg(target_os=\"linux\")]\n-    mod tcp_ipv4_server_and_client_test {\n+    pub mod tcp_ipv4_server_and_client_test {\n         #[cfg(target_arch=\"x86_64\")]\n-        mod impl64 {\n-            use net::tcp::test::tcp_ipv4_server_and_client_test::*;\n+        pub mod impl64 {\n+            use net::tcp::test::*;\n \n             #[test]\n             fn test_gl_tcp_server_and_client_ipv4() unsafe {\n+                use net::tcp::test::tcp_ipv4_server_and_client_test::*;\n                 impl_gl_tcp_ipv4_server_and_client();\n             }\n             #[test]\n@@ -1325,8 +1326,8 @@ mod test {\n             }\n         }\n         #[cfg(target_arch=\"x86\")]\n-        mod impl32 {\n-            use net::tcp::test::tcp_ipv4_server_and_client_test::*;\n+        pub mod impl32 {\n+            use net::tcp::test::*;\n \n             #[test]\n             #[ignore(cfg(target_os = \"linux\"))]\n@@ -1361,7 +1362,7 @@ mod test {\n             }\n         }\n     }\n-    fn impl_gl_tcp_ipv4_server_and_client() {\n+    pub fn impl_gl_tcp_ipv4_server_and_client() {\n         let hl_loop = uv::global_loop::get();\n         let server_ip = ~\"127.0.0.1\";\n         let server_port = 8888u;\n@@ -1407,7 +1408,7 @@ mod test {\n         assert str::contains(actual_req, expected_req);\n         assert str::contains(actual_resp, expected_resp);\n     }\n-    fn impl_gl_tcp_ipv4_get_peer_addr() {\n+    pub fn impl_gl_tcp_ipv4_get_peer_addr() {\n         let hl_loop = uv::global_loop::get();\n         let server_ip = ~\"127.0.0.1\";\n         let server_port = 8887u;\n@@ -1454,7 +1455,7 @@ mod test {\n             client_ch.send(str::from_bytes(read_result.get()));\n         };\n     }\n-    fn impl_gl_tcp_ipv4_client_error_connection_refused() {\n+    pub fn impl_gl_tcp_ipv4_client_error_connection_refused() {\n         let hl_loop = uv::global_loop::get();\n         let server_ip = ~\"127.0.0.1\";\n         let server_port = 8889u;\n@@ -1474,7 +1475,7 @@ mod test {\n           _ => fail ~\"unknown error.. expected connection_refused\"\n         }\n     }\n-    fn impl_gl_tcp_ipv4_server_address_in_use() {\n+    pub fn impl_gl_tcp_ipv4_server_address_in_use() {\n         let hl_loop = uv::global_loop::get();\n         let server_ip = ~\"127.0.0.1\";\n         let server_port = 8890u;\n@@ -1525,7 +1526,7 @@ mod test {\n           }\n         }\n     }\n-    fn impl_gl_tcp_ipv4_server_access_denied() {\n+    pub fn impl_gl_tcp_ipv4_server_access_denied() {\n         let hl_loop = uv::global_loop::get();\n         let server_ip = ~\"127.0.0.1\";\n         let server_port = 80u;\n@@ -1544,7 +1545,7 @@ mod test {\n           }\n         }\n     }\n-    fn impl_gl_tcp_ipv4_server_client_reader_writer() {\n+    pub fn impl_gl_tcp_ipv4_server_client_reader_writer() {\n         /*\n          XXX: Causes an ICE.\n \n@@ -1597,7 +1598,7 @@ mod test {\n         */\n     }\n \n-    fn impl_tcp_socket_impl_reader_handles_eof() {\n+    pub fn impl_tcp_socket_impl_reader_handles_eof() {\n         use core::io::{Reader,ReaderUtil};\n \n         let hl_loop = uv::global_loop::get();"}, {"sha": "a92f03bcfd6fae865a9bfc158923b957d7609fcb", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f03ba134f25e518abf1d61e5f088bfc3e86586f/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f03ba134f25e518abf1d61e5f088bfc3e86586f/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=1f03ba134f25e518abf1d61e5f088bfc3e86586f", "patch": "@@ -1559,13 +1559,15 @@ pub mod test {\n     pub mod tcp_and_server_client_test {\n         #[cfg(target_arch=\"x86_64\")]\n         pub mod impl64 {\n+            use uv_ll::test::*;\n             #[test]\n             pub fn test_uv_ll_tcp_server_and_request() unsafe {\n                 impl_uv_tcp_server_and_request();\n             }\n         }\n         #[cfg(target_arch=\"x86\")]\n         pub mod impl32 {\n+            use uv_ll::test::*;\n             #[test]\n             #[ignore(cfg(target_os = \"linux\"))]\n             pub fn test_uv_ll_tcp_server_and_request() unsafe {"}]}