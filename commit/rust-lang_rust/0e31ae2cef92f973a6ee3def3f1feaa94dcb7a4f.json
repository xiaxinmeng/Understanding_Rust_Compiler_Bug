{"sha": "0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMzFhZTJjZWY5MmY5NzNhNmVlM2RlZjNmMWZlYWE5NGRjYjdhNGY=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-23T04:18:34Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-26T16:18:18Z"}, "message": "completion relevance distinguish between exact type match and could unify", "tree": {"sha": "50832b85e65752b040affcc8d34dc5cd8c2625b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50832b85e65752b040affcc8d34dc5cd8c2625b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f", "html_url": "https://github.com/rust-lang/rust/commit/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957939292ec9038f139bd10e093e9673609eea04", "url": "https://api.github.com/repos/rust-lang/rust/commits/957939292ec9038f139bd10e093e9673609eea04", "html_url": "https://github.com/rust-lang/rust/commit/957939292ec9038f139bd10e093e9673609eea04"}], "stats": {"total": 125, "additions": 81, "deletions": 44}, "files": [{"sha": "cc4ac9ea2ef113c67fad7aa3b182f19f648deb54", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 39, "deletions": 20, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f", "patch": "@@ -122,7 +122,7 @@ impl fmt::Debug for CompletionItem {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, Ord, PartialOrd, Eq, PartialEq, Default)]\n+#[derive(Debug, Clone, Copy, Eq, PartialEq, Default)]\n pub struct CompletionRelevance {\n     /// This is set in cases like these:\n     ///\n@@ -134,31 +134,41 @@ pub struct CompletionRelevance {\n     /// }\n     /// ```\n     pub exact_name_match: bool,\n+    /// See CompletionRelevanceTypeMatch doc comments for cases where this is set.\n+    pub type_match: Option<CompletionRelevanceTypeMatch>,\n     /// This is set in cases like these:\n     ///\n     /// ```\n-    /// fn f(spam: String) {}\n-    /// fn main {\n-    ///     let foo = String::new();\n-    ///     f($0) // type of local matches the type of param\n+    /// fn foo(a: u32) {\n+    ///     let b = 0;\n+    ///     $0 // `a` and `b` are local\n     /// }\n     /// ```\n-    pub exact_type_match: bool,\n+    pub is_local: bool,\n+}\n+\n+#[derive(Debug, Clone, Copy, Eq, PartialEq)]\n+pub enum CompletionRelevanceTypeMatch {\n     /// This is set in cases like these:\n     ///\n     /// ```\n-    /// fn foo(bar: u32) {\n-    ///     $0 // `bar` is local\n+    /// enum Option<T> { Some(T), None }\n+    /// fn f(a: Option<u32>) {}\n+    /// fn main {\n+    ///     f(Option::N$0) // type `Option<T>` could unify with `Option<u32>`\n     /// }\n     /// ```\n+    CouldUnify,\n+    /// This is set in cases like these:\n     ///\n     /// ```\n-    /// fn foo() {\n-    ///     let bar = 0;\n-    ///     $0 // `bar` is local\n+    /// fn f(spam: String) {}\n+    /// fn main {\n+    ///     let foo = String::new();\n+    ///     f($0) // type of local matches the type of param\n     /// }\n     /// ```\n-    pub is_local: bool,\n+    Exact,\n }\n \n impl CompletionRelevance {\n@@ -177,9 +187,11 @@ impl CompletionRelevance {\n         if self.exact_name_match {\n             score += 1;\n         }\n-        if self.exact_type_match {\n-            score += 3;\n-        }\n+        score += match self.type_match {\n+            Some(CompletionRelevanceTypeMatch::Exact) => 4,\n+            Some(CompletionRelevanceTypeMatch::CouldUnify) => 3,\n+            None => 0,\n+        };\n         if self.is_local {\n             score += 1;\n         }\n@@ -342,7 +354,7 @@ impl CompletionItem {\n         // match, but with exact type match set because self.ref_match\n         // is only set if there is an exact type match.\n         let mut relevance = self.relevance;\n-        relevance.exact_type_match = true;\n+        relevance.type_match = Some(CompletionRelevanceTypeMatch::Exact);\n \n         self.ref_match.map(|mutability| (mutability, relevance))\n     }\n@@ -523,7 +535,7 @@ mod tests {\n     use itertools::Itertools;\n     use test_utils::assert_eq_text;\n \n-    use super::CompletionRelevance;\n+    use super::{CompletionRelevance, CompletionRelevanceTypeMatch};\n \n     /// Check that these are CompletionRelevance are sorted in ascending order\n     /// by their relevance score.\n@@ -576,15 +588,22 @@ mod tests {\n                 is_local: true,\n                 ..CompletionRelevance::default()\n             }],\n-            vec![CompletionRelevance { exact_type_match: true, ..CompletionRelevance::default() }],\n+            vec![CompletionRelevance {\n+                type_match: Some(CompletionRelevanceTypeMatch::CouldUnify),\n+                ..CompletionRelevance::default()\n+            }],\n+            vec![CompletionRelevance {\n+                type_match: Some(CompletionRelevanceTypeMatch::Exact),\n+                ..CompletionRelevance::default()\n+            }],\n             vec![CompletionRelevance {\n                 exact_name_match: true,\n-                exact_type_match: true,\n+                type_match: Some(CompletionRelevanceTypeMatch::Exact),\n                 ..CompletionRelevance::default()\n             }],\n             vec![CompletionRelevance {\n                 exact_name_match: true,\n-                exact_type_match: true,\n+                type_match: Some(CompletionRelevanceTypeMatch::Exact),\n                 is_local: true,\n             }],\n         ];"}, {"sha": "1a762d3dc1f0fd6d0cdd05ff746eafc3a0651348", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f", "patch": "@@ -20,8 +20,8 @@ use ide_db::{\n use syntax::TextRange;\n \n use crate::{\n-    item::ImportEdit, CompletionContext, CompletionItem, CompletionItemKind, CompletionKind,\n-    CompletionRelevance,\n+    item::{CompletionRelevanceTypeMatch, ImportEdit},\n+    CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, CompletionRelevance,\n };\n \n use crate::render::{enum_variant::render_variant, function::render_fn, macro_::render_macro};\n@@ -143,7 +143,7 @@ impl<'a> Render<'a> {\n             .set_deprecated(is_deprecated);\n \n         item.set_relevance(CompletionRelevance {\n-            exact_type_match: compute_exact_type_match(self.ctx.completion, ty),\n+            type_match: compute_type_match(self.ctx.completion, ty),\n             exact_name_match: compute_exact_name_match(self.ctx.completion, name.to_string()),\n             ..CompletionRelevance::default()\n         });\n@@ -245,7 +245,7 @@ impl<'a> Render<'a> {\n             }\n \n             item.set_relevance(CompletionRelevance {\n-                exact_type_match: compute_exact_type_match(self.ctx.completion, &ty),\n+                type_match: compute_type_match(self.ctx.completion, &ty),\n                 exact_name_match: compute_exact_name_match(self.ctx.completion, &local_name),\n                 is_local: true,\n                 ..CompletionRelevance::default()\n@@ -309,15 +309,24 @@ impl<'a> Render<'a> {\n     }\n }\n \n-fn compute_exact_type_match(ctx: &CompletionContext, completion_ty: &hir::Type) -> bool {\n-    match ctx.expected_type.as_ref() {\n-        Some(expected_type) => {\n-            // We don't ever consider unit type to be an exact type match, since\n-            // nearly always this is not meaningful to the user.\n-            (completion_ty == expected_type || expected_type.could_unify_with(completion_ty))\n-                && !expected_type.is_unit()\n-        }\n-        None => false,\n+fn compute_type_match(\n+    ctx: &CompletionContext,\n+    completion_ty: &hir::Type,\n+) -> Option<CompletionRelevanceTypeMatch> {\n+    let expected_type = ctx.expected_type.as_ref()?;\n+\n+    // We don't ever consider unit type to be an exact type match, since\n+    // nearly always this is not meaningful to the user.\n+    if expected_type.is_unit() {\n+        return None;\n+    }\n+\n+    if completion_ty == expected_type {\n+        Some(CompletionRelevanceTypeMatch::Exact)\n+    } else if expected_type.could_unify_with(completion_ty) {\n+        Some(CompletionRelevanceTypeMatch::CouldUnify)\n+    } else {\n+        None\n     }\n }\n \n@@ -349,6 +358,7 @@ mod tests {\n     use itertools::Itertools;\n \n     use crate::{\n+        item::CompletionRelevanceTypeMatch,\n         test_utils::{check_edit, do_completion, get_all_items, TEST_CONFIG},\n         CompletionKind, CompletionRelevance,\n     };\n@@ -361,7 +371,11 @@ mod tests {\n     fn check_relevance(ra_fixture: &str, expect: Expect) {\n         fn display_relevance(relevance: CompletionRelevance) -> String {\n             let relevance_factors = vec![\n-                (relevance.exact_type_match, \"type\"),\n+                (relevance.type_match == Some(CompletionRelevanceTypeMatch::Exact), \"type\"),\n+                (\n+                    relevance.type_match == Some(CompletionRelevanceTypeMatch::CouldUnify),\n+                    \"type_could_unify\",\n+                ),\n                 (relevance.exact_name_match, \"name\"),\n                 (relevance.is_local, \"local\"),\n             ]\n@@ -534,7 +548,9 @@ fn main() { let _: m::Spam = S$0 }\n                         detail: \"(i32)\",\n                         relevance: CompletionRelevance {\n                             exact_name_match: false,\n-                            exact_type_match: true,\n+                            type_match: Some(\n+                                Exact,\n+                            ),\n                             is_local: false,\n                         },\n                         trigger_call_info: true,\n@@ -560,7 +576,9 @@ fn main() { let _: m::Spam = S$0 }\n                         detail: \"()\",\n                         relevance: CompletionRelevance {\n                             exact_name_match: false,\n-                            exact_type_match: true,\n+                            type_match: Some(\n+                                Exact,\n+                            ),\n                             is_local: false,\n                         },\n                     },\n@@ -1109,7 +1127,7 @@ fn main() {\n                         detail: \"S\",\n                         relevance: CompletionRelevance {\n                             exact_name_match: true,\n-                            exact_type_match: false,\n+                            type_match: None,\n                             is_local: true,\n                         },\n                         ref_match: \"&mut \",\n@@ -1374,8 +1392,8 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                ev Foo::A(\u2026) [type]\n-                ev Foo::B [type]\n+                ev Foo::A(\u2026) [type_could_unify]\n+                ev Foo::B [type_could_unify]\n                 lc foo [type+local]\n                 en Foo []\n                 fn baz() []"}, {"sha": "832f5ced1310fa146ba41616f7828b0013872c9b", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f", "patch": "@@ -6,7 +6,7 @@ use itertools::Itertools;\n \n use crate::{\n     item::{CompletionItem, CompletionKind, ImportEdit},\n-    render::{builder_ext::Params, compute_exact_type_match, compute_ref_match, RenderContext},\n+    render::{builder_ext::Params, compute_ref_match, compute_type_match, RenderContext},\n     CompletionRelevance,\n };\n \n@@ -77,7 +77,7 @@ impl<'a> EnumRender<'a> {\n \n         let ty = self.variant.parent_enum(self.ctx.completion.db).ty(self.ctx.completion.db);\n         item.set_relevance(CompletionRelevance {\n-            exact_type_match: compute_exact_type_match(self.ctx.completion, &ty),\n+            type_match: compute_type_match(self.ctx.completion, &ty),\n             ..CompletionRelevance::default()\n         });\n "}, {"sha": "d681e2c91b404bd518669c2f0c54ccf3da643deb", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f", "patch": "@@ -8,7 +8,7 @@ use syntax::ast::Fn;\n use crate::{\n     item::{CompletionItem, CompletionItemKind, CompletionKind, CompletionRelevance, ImportEdit},\n     render::{\n-        builder_ext::Params, compute_exact_name_match, compute_exact_type_match, compute_ref_match,\n+        builder_ext::Params, compute_exact_name_match, compute_ref_match, compute_type_match,\n         RenderContext,\n     },\n };\n@@ -73,7 +73,7 @@ impl<'a> FunctionRender<'a> {\n \n         let ret_type = self.func.ret_type(self.ctx.db());\n         item.set_relevance(CompletionRelevance {\n-            exact_type_match: compute_exact_type_match(self.ctx.completion, &ret_type),\n+            type_match: compute_type_match(self.ctx.completion, &ret_type),\n             exact_name_match: compute_exact_name_match(self.ctx.completion, self.name.clone()),\n             ..CompletionRelevance::default()\n         });"}, {"sha": "530c8a5a4f3ccd06beba07d2886350598b890ec5", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=0e31ae2cef92f973a6ee3def3f1feaa94dcb7a4f", "patch": "@@ -1138,7 +1138,7 @@ mod tests {\n                 (\n                     \"&arg\",\n                     Some(\n-                        \"fffffffa\",\n+                        \"fffffff9\",\n                     ),\n                 ),\n                 ("}]}