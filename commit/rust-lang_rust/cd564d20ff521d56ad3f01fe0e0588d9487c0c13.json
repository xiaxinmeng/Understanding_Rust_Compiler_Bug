{"sha": "cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNTY0ZDIwZmY1MjFkNTZhZDNmMDFmZTBlMDU4OGQ5NDg3YzBjMTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-03T11:16:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-15T15:10:56Z"}, "message": "only propagate ClosureRegionRequirements if non-trivial\n\nBefore, we would always have a `Some` ClosureRegionRequirements if we\nwere inferring values for a closure. Now we only do is it has a\nnon-empty set of outlives requirements.", "tree": {"sha": "e8d9357ed74d4c7c6fbccc8e2eb0965c7da567e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8d9357ed74d4c7c6fbccc8e2eb0965c7da567e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "html_url": "https://github.com/rust-lang/rust/commit/cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f0392a6d20dda6fcf7169a81688a0f8e1b51da", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f0392a6d20dda6fcf7169a81688a0f8e1b51da", "html_url": "https://github.com/rust-lang/rust/commit/a0f0392a6d20dda6fcf7169a81688a0f8e1b51da"}], "stats": {"total": 247, "additions": 148, "deletions": 99}, "files": [{"sha": "af88edc22cee35e48e8435a9701e404c83d6407b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 92, "deletions": 81, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "patch": "@@ -251,24 +251,88 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir_def_id: DefId,\n     ) -> Option<ClosureRegionRequirements> {\n         assert!(self.inferred_values.is_none(), \"values already inferred\");\n-        let tcx = infcx.tcx;\n \n-        // Find the minimal regions that can solve the constraints. This is infallible.\n         self.propagate_constraints(mir);\n \n-        // Now, see whether any of the constraints were too strong. In\n-        // particular, we want to check for a case where a universally\n-        // quantified region exceeded its bounds.  Consider:\n-        //\n-        //     fn foo<'a, 'b>(x: &'a u32) -> &'b u32 { x }\n-        //\n-        // In this case, returning `x` requires `&'a u32 <: &'b u32`\n-        // and hence we establish (transitively) a constraint that\n-        // `'a: 'b`. The `propagate_constraints` code above will\n-        // therefore add `end('a)` into the region for `'b` -- but we\n-        // have no evidence that `'a` outlives `'b`, so we want to report\n-        // an error.\n+        let outlives_requirements = self.check_universal_regions(infcx, mir_def_id);\n+\n+        if outlives_requirements.is_empty() {\n+            None\n+        } else {\n+            let num_external_vids = self.universal_regions.num_global_and_external_regions();\n+            Some(ClosureRegionRequirements {\n+                num_external_vids,\n+                outlives_requirements,\n+            })\n+        }\n+    }\n \n+    /// Propagate the region constraints: this will grow the values\n+    /// for each region variable until all the constraints are\n+    /// satisfied. Note that some values may grow **too** large to be\n+    /// feasible, but we check this later.\n+    fn propagate_constraints(&mut self, mir: &Mir<'tcx>) {\n+        let mut changed = true;\n+\n+        debug!(\"propagate_constraints()\");\n+        debug!(\"propagate_constraints: constraints={:#?}\", {\n+            let mut constraints: Vec<_> = self.constraints.iter().collect();\n+            constraints.sort();\n+            constraints\n+        });\n+\n+        // The initial values for each region are derived from the liveness\n+        // constraints we have accumulated.\n+        let mut inferred_values = self.liveness_constraints.clone();\n+\n+        while changed {\n+            changed = false;\n+            debug!(\"propagate_constraints: --------------------\");\n+            for constraint in &self.constraints {\n+                debug!(\"propagate_constraints: constraint={:?}\", constraint);\n+\n+                // Grow the value as needed to accommodate the\n+                // outlives constraint.\n+                let Ok(made_changes) = self.dfs(\n+                    mir,\n+                    CopyFromSourceToTarget {\n+                        source_region: constraint.sub,\n+                        target_region: constraint.sup,\n+                        inferred_values: &mut inferred_values,\n+                        constraint_point: constraint.point,\n+                    },\n+                );\n+\n+                if made_changes {\n+                    debug!(\"propagate_constraints:   sub={:?}\", constraint.sub);\n+                    debug!(\"propagate_constraints:   sup={:?}\", constraint.sup);\n+                    changed = true;\n+                }\n+            }\n+            debug!(\"\\n\");\n+        }\n+\n+        self.inferred_values = Some(inferred_values);\n+    }\n+\n+    /// Once regions have been propagated, this method is used to see\n+    /// whether any of the constraints were too strong. In particular,\n+    /// we want to check for a case where a universally quantified\n+    /// region exceeded its bounds.  Consider:\n+    ///\n+    ///     fn foo<'a, 'b>(x: &'a u32) -> &'b u32 { x }\n+    ///\n+    /// In this case, returning `x` requires `&'a u32 <: &'b u32`\n+    /// and hence we establish (transitively) a constraint that\n+    /// `'a: 'b`. The `propagate_constraints` code above will\n+    /// therefore add `end('a)` into the region for `'b` -- but we\n+    /// have no evidence that `'b` outlives `'a`, so we want to report\n+    /// an error.\n+    fn check_universal_regions(\n+        &self,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        mir_def_id: DefId,\n+    ) -> Vec<ClosureOutlivesRequirement> {\n         // The universal regions are always found in a prefix of the\n         // full list.\n         let universal_definitions = self.definitions\n@@ -283,27 +347,23 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.check_universal_region(infcx, fr, &mut outlives_requirements);\n         }\n \n-        // If this is not a closure, then there is no caller to which we can\n-        // \"pass the buck\". So if there are any outlives-requirements that were\n-        // not satisfied, we just have to report a hard error here.\n-        if !tcx.is_closure(mir_def_id) {\n-            for outlives_requirement in outlives_requirements {\n-                self.report_error(\n-                    infcx,\n-                    outlives_requirement.free_region,\n-                    outlives_requirement.outlived_free_region,\n-                    outlives_requirement.blame_span,\n-                );\n-            }\n-            return None;\n+        // If this is a closure, we can propagate unsatisfied\n+        // `outlives_requirements` to our creator. Otherwise, we have\n+        // to report a hard error here.\n+        if infcx.tcx.is_closure(mir_def_id) {\n+            return outlives_requirements;\n         }\n \n-        let num_external_vids = self.universal_regions.num_global_and_external_regions();\n+        for outlives_requirement in outlives_requirements {\n+            self.report_error(\n+                infcx,\n+                outlives_requirement.free_region,\n+                outlives_requirement.outlived_free_region,\n+                outlives_requirement.blame_span,\n+            );\n+        }\n \n-        Some(ClosureRegionRequirements {\n-            num_external_vids,\n-            outlives_requirements,\n-        })\n+        vec![]\n     }\n \n     /// Check the final value for the free region `fr` to see if it\n@@ -396,54 +456,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         );\n     }\n \n-    /// Propagate the region constraints: this will grow the values\n-    /// for each region variable until all the constraints are\n-    /// satisfied. Note that some values may grow **too** large to be\n-    /// feasible, but we check this later.\n-    fn propagate_constraints(&mut self, mir: &Mir<'tcx>) {\n-        let mut changed = true;\n-\n-        debug!(\"propagate_constraints()\");\n-        debug!(\"propagate_constraints: constraints={:#?}\", {\n-            let mut constraints: Vec<_> = self.constraints.iter().collect();\n-            constraints.sort();\n-            constraints\n-        });\n-\n-        // The initial values for each region are derived from the liveness\n-        // constraints we have accumulated.\n-        let mut inferred_values = self.liveness_constraints.clone();\n-\n-        while changed {\n-            changed = false;\n-            debug!(\"propagate_constraints: --------------------\");\n-            for constraint in &self.constraints {\n-                debug!(\"propagate_constraints: constraint={:?}\", constraint);\n-\n-                // Grow the value as needed to accommodate the\n-                // outlives constraint.\n-                let Ok(made_changes) = self.dfs(\n-                    mir,\n-                    CopyFromSourceToTarget {\n-                        source_region: constraint.sub,\n-                        target_region: constraint.sup,\n-                        inferred_values: &mut inferred_values,\n-                        constraint_point: constraint.point,\n-                    },\n-                );\n-\n-                if made_changes {\n-                    debug!(\"propagate_constraints:   sub={:?}\", constraint.sub);\n-                    debug!(\"propagate_constraints:   sup={:?}\", constraint.sup);\n-                    changed = true;\n-                }\n-            }\n-            debug!(\"\\n\");\n-        }\n-\n-        self.inferred_values = Some(inferred_values);\n-    }\n-\n     /// Tries to finds a good span to blame for the fact that `fr1`\n     /// contains `fr2`.\n     fn blame_span(&self, fr1: RegionVid, fr2: RegionVid) -> Span {\n@@ -589,4 +601,3 @@ impl ClosureRegionRequirementsExt for ClosureRegionRequirements {\n         }\n     }\n }\n-"}, {"sha": "2dfafd8f1725b337b9221fd0b70134628ff04560", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "patch": "@@ -10,7 +10,7 @@ error: free region `'_#4r` does not outlive free region `'_#3r`\n 36 |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                             ^^^^^^\n \n-note: External requirements\n+note: No external requirements\n   --> $DIR/escape-argument-callee.rs:36:38\n    |\n 36 |         let mut closure = expect_sig(|p, y| *p = y);\n@@ -20,7 +20,6 @@ note: External requirements\n                i16,\n                for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0)) i32))\n            ]\n-   = note: number of external vids: 1\n \n note: No external requirements\n   --> $DIR/escape-argument-callee.rs:30:1"}, {"sha": "567ed299ac150f5d90753f447c0beb3a347024b2", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: No external requirements\n   --> $DIR/escape-argument.rs:36:38\n    |\n 36 |         let mut closure = expect_sig(|p, y| *p = y);\n@@ -8,7 +8,6 @@ note: External requirements\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) i32))\n            ]\n-   = note: number of external vids: 1\n \n note: No external requirements\n   --> $DIR/escape-argument.rs:30:1"}, {"sha": "cdda8ab5392bdedd13cd07dd07fa028248e5f0db", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "patch": "@@ -10,7 +10,7 @@ error: free region `'_#5r` does not outlive free region `'_#6r`\n 57 |             demand_y(x, y, p)\n    |                         ^\n \n-note: External requirements\n+note: No external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:53:9\n    |\n 53 | /         |_outlives1, _outlives2, _outlives3, x, y| {\n@@ -26,7 +26,6 @@ note: External requirements\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n-   = note: number of external vids: 4\n \n note: No external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:48:1"}, {"sha": "3e54e62d0110f7066e96efa41e29812bf2ff3f64", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "patch": "@@ -10,7 +10,7 @@ error: free region `'_#2r` does not outlive free region `'_#1r`\n 33 |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n    |         ^^^^^^\n \n-note: External requirements\n+note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:31:15\n    |\n 31 |       foo(cell, |cell_a, cell_x| {\n@@ -25,7 +25,6 @@ note: External requirements\n                i32,\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n            ]\n-   = note: number of external vids: 2\n \n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:28:1"}, {"sha": "e8dc8a13f876bc44d5f7ed22d4d781ea85d01d5a", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-to-empty.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr?ref=cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "patch": "@@ -0,0 +1,45 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/propagate-approximated-to-empty.rs:41:9\n+   |\n+41 |         demand_y(x, y, x.get())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: free region `'_#6r` does not outlive free region `'_#4r`\n+  --> $DIR/propagate-approximated-to-empty.rs:41:21\n+   |\n+41 |         demand_y(x, y, x.get())\n+   |                     ^\n+\n+note: No external requirements\n+  --> $DIR/propagate-approximated-to-empty.rs:39:47\n+   |\n+39 |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |  _______________________________________________^\n+40 | |         // Only works if 'x: 'y:\n+41 | |         demand_y(x, y, x.get())\n+42 | |         //~^ WARN not reporting region error due to -Znll\n+43 | |         //~| ERROR free region `'_#6r` does not outlive free region `'_#4r`\n+44 | |     });\n+   | |_____^\n+   |\n+   = note: defining type: DefId(0/1:18 ~ propagate_approximated_to_empty[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+           ]\n+\n+note: No external requirements\n+  --> $DIR/propagate-approximated-to-empty.rs:38:1\n+   |\n+38 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+39 | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+40 | |         // Only works if 'x: 'y:\n+41 | |         demand_y(x, y, x.get())\n+...  |\n+44 | |     });\n+45 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:6 ~ propagate_approximated_to_empty[317d]::supply[0]) with substs []\n+\n+error: aborting due to previous error\n+"}, {"sha": "f3c40c838fb3ede207b78e55e819a78e877a783f", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "patch": "@@ -5,12 +5,12 @@ warning: not reporting region error due to -Znll\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: free region `'_#6r` does not outlive free region `'_#4r`\n-  --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:47:21\n+  --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:47:18\n    |\n 47 |         demand_y(x, y, x.get())\n-   |                     ^\n+   |                  ^\n \n-note: External requirements\n+note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:45:47\n    |\n 45 |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n@@ -26,7 +26,6 @@ note: External requirements\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n-   = note: number of external vids: 2\n \n note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:44:1"}, {"sha": "a66c2a7897024bc3d3b961901011df5f508a6bcf", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "patch": "@@ -5,12 +5,12 @@ warning: not reporting region error due to -Znll\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: free region `'_#5r` does not outlive free region `'_#7r`\n-  --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:51:21\n+  --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:51:18\n    |\n 51 |         demand_y(x, y, x.get())\n-   |                     ^\n+   |                  ^\n \n-note: External requirements\n+note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:49:47\n    |\n 49 |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n@@ -26,7 +26,6 @@ note: External requirements\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n-   = note: number of external vids: 3\n \n note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:48:1"}, {"sha": "cb2b2e2f1186086d58a27833284b1bd684d5a53d", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd564d20ff521d56ad3f01fe0e0588d9487c0c13/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=cd564d20ff521d56ad3f01fe0e0588d9487c0c13", "patch": "@@ -10,7 +10,7 @@ error: free region `'_#3r` does not outlive free region `'_#2r`\n 21 |     expect_sig(|a, b| b); // ought to return `a`\n    |                       ^\n \n-note: External requirements\n+note: No external requirements\n   --> $DIR/return-wrong-bound-region.rs:21:16\n    |\n 21 |     expect_sig(|a, b| b); // ought to return `a`\n@@ -20,7 +20,6 @@ note: External requirements\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) i32, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) i32)) -> &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) i32\n            ]\n-   = note: number of external vids: 1\n \n note: No external requirements\n   --> $DIR/return-wrong-bound-region.rs:20:1"}]}