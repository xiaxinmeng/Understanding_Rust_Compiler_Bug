{"sha": "cf8531064e44a335c7da75c745279457f42660c5", "node_id": "C_kwDOAAsO6NoAKGNmODUzMTA2NGU0NGEzMzVjN2RhNzVjNzQ1Mjc5NDU3ZjQyNjYwYzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-22T00:26:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-22T00:26:06Z"}, "message": "Auto merge of #95161 - JakobDegen:fix-early-otherwise-branch, r=wesleywiser\n\nDisable almost certainly unsound early otherwise branch MIR opt\n\nOriginally thought this was just an MIR semantics issue, but it's not.\n\nr? rust-lang/mir-opt", "tree": {"sha": "7363158cf4a27ab87fcd01ee47cb5f06b401a5a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7363158cf4a27ab87fcd01ee47cb5f06b401a5a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf8531064e44a335c7da75c745279457f42660c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8531064e44a335c7da75c745279457f42660c5", "html_url": "https://github.com/rust-lang/rust/commit/cf8531064e44a335c7da75c745279457f42660c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf8531064e44a335c7da75c745279457f42660c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c17c84a386e7badf6b2c6018d172496b3a28a04", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c17c84a386e7badf6b2c6018d172496b3a28a04", "html_url": "https://github.com/rust-lang/rust/commit/3c17c84a386e7badf6b2c6018d172496b3a28a04"}, {"sha": "a2f3a1736254401cdc31fc248f1d6aa22402fb04", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f3a1736254401cdc31fc248f1d6aa22402fb04", "html_url": "https://github.com/rust-lang/rust/commit/a2f3a1736254401cdc31fc248f1d6aa22402fb04"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "d72e8d16105879d9761accce0e9f4fac7783fcb0", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cf8531064e44a335c7da75c745279457f42660c5/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8531064e44a335c7da75c745279457f42660c5/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=cf8531064e44a335c7da75c745279457f42660c5", "patch": "@@ -95,7 +95,7 @@ pub struct EarlyOtherwiseBranch;\n \n impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        sess.mir_opt_level() >= 2\n+        sess.mir_opt_level() >= 3 && sess.opts.debugging_opts.unsound_mir_opts\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n@@ -226,6 +226,37 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n \n /// Returns true if computing the discriminant of `place` may be hoisted out of the branch\n fn may_hoist<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, place: Place<'tcx>) -> bool {\n+    // FIXME(JakobDegen): This is unsound. Someone could write code like this:\n+    // ```rust\n+    // let Q = val;\n+    // if discriminant(P) == otherwise {\n+    //     let ptr = &mut Q as *mut _ as *mut u8;\n+    //     unsafe { *ptr = 10; } // Any invalid value for the type\n+    // }\n+    //\n+    // match P {\n+    //    A => match Q {\n+    //        A => {\n+    //            // code\n+    //        }\n+    //        _ => {\n+    //            // don't use Q\n+    //        }\n+    //    }\n+    //    _ => {\n+    //        // don't use Q\n+    //    }\n+    // };\n+    // ```\n+    //\n+    // Hoisting the `discriminant(Q)` out of the `A` arm causes us to compute the discriminant of an\n+    // invalid value, which is UB.\n+    //\n+    // In order to fix this, we would either need to show that the discriminant computation of\n+    // `place` is computed in all branches, including the `otherwise` branch, or we would need\n+    // another analysis pass to determine that the place is fully initialized. It might even be best\n+    // to have the hoisting be performed in a different pass and just do the CFG changing in this\n+    // pass.\n     for (place, proj) in place.iter_projections() {\n         match proj {\n             // Dereferencing in the computation of `place` might cause issues from one of two"}]}