{"sha": "11a902431b8e66da8486b3b9a2d8527746c6ab1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYTkwMjQzMWI4ZTY2ZGE4NDg2YjNiOWEyZDg1Mjc3NDZjNmFiMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-07T02:12:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-07T02:12:35Z"}, "message": "Auto merge of #51007 - AstralSorcerer:master, r=nagisa\n\nMake globals with private linkage unnamed. Fixes #50862.\n\ncc @oli-obk @nagisa", "tree": {"sha": "18d8ba46199784701fbd8f0a8cbaf5bc9902a0dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d8ba46199784701fbd8f0a8cbaf5bc9902a0dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11a902431b8e66da8486b3b9a2d8527746c6ab1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11a902431b8e66da8486b3b9a2d8527746c6ab1a", "html_url": "https://github.com/rust-lang/rust/commit/11a902431b8e66da8486b3b9a2d8527746c6ab1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11a902431b8e66da8486b3b9a2d8527746c6ab1a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9b9b6e078aa81c0faa064bf861e88001684765c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b9b6e078aa81c0faa064bf861e88001684765c", "html_url": "https://github.com/rust-lang/rust/commit/f9b9b6e078aa81c0faa064bf861e88001684765c"}, {"sha": "3da7c65e92e212143bafdb4adf9cfb8054209a93", "url": "https://api.github.com/repos/rust-lang/rust/commits/3da7c65e92e212143bafdb4adf9cfb8054209a93", "html_url": "https://github.com/rust-lang/rust/commit/3da7c65e92e212143bafdb4adf9cfb8054209a93"}], "stats": {"total": 130, "additions": 76, "deletions": 54}, "files": [{"sha": "5e23c6e868f47200e2a4d2131ae18dfee4bf357c", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -541,11 +541,23 @@ unsafe fn optimize(cgcx: &CodegenContext,\n             };\n \n             if config.verify_llvm_ir { assert!(addpass(\"verify\")); }\n+\n+            // Some options cause LLVM bitcode to be emitted, which uses ThinLTOBuffers, so we need\n+            // to make sure we run LLVM's NameAnonGlobals pass when emitting bitcode; otherwise\n+            // we'll get errors in LLVM.\n+            let using_thin_buffers = llvm::LLVMRustThinLTOAvailable() && (config.emit_bc\n+                || config.obj_is_bitcode || config.emit_bc_compressed || config.embed_bitcode);\n+            let mut have_name_anon_globals_pass = false;\n             if !config.no_prepopulate_passes {\n                 llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n                 llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n                 let opt_level = config.opt_level.unwrap_or(llvm::CodeGenOptLevel::None);\n                 let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal;\n+                have_name_anon_globals_pass = have_name_anon_globals_pass || prepare_for_thin_lto;\n+                if using_thin_buffers && !prepare_for_thin_lto {\n+                    assert!(addpass(\"name-anon-globals\"));\n+                    have_name_anon_globals_pass = true;\n+                }\n                 with_llvm_pmb(llmod, &config, opt_level, prepare_for_thin_lto, &mut |b| {\n                     llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n                     llvm::LLVMPassManagerBuilderPopulateModulePassManager(b, mpm);\n@@ -557,6 +569,9 @@ unsafe fn optimize(cgcx: &CodegenContext,\n                     diag_handler.warn(&format!(\"unknown pass `{}`, ignoring\",\n                                             pass));\n                 }\n+                if pass == \"name-anon-globals\" {\n+                    have_name_anon_globals_pass = true;\n+                }\n             }\n \n             for pass in &cgcx.plugin_passes {\n@@ -565,6 +580,22 @@ unsafe fn optimize(cgcx: &CodegenContext,\n                                             `{}` but LLVM does not \\\n                                             recognize it\", pass));\n                 }\n+                if pass == \"name-anon-globals\" {\n+                    have_name_anon_globals_pass = true;\n+                }\n+            }\n+\n+            if using_thin_buffers && !have_name_anon_globals_pass {\n+                // As described above, this will probably cause an error in LLVM\n+                if config.no_prepopulate_passes {\n+                    diag_handler.err(\"The current compilation is going to use thin LTO buffers \\\n+                                     without running LLVM's NameAnonGlobals pass. \\\n+                                     This will likely cause errors in LLVM. Consider adding \\\n+                                     -C passes=name-anon-globals to the compiler command line.\");\n+                } else {\n+                    bug!(\"We are using thin LTO buffers without running the NameAnonGlobals pass. \\\n+                         This will likely cause errors in LLVM and shoud never happen.\");\n+                }\n             }\n         }\n "}, {"sha": "21bf490beb0fb352c1d3168e5d3dca675d345ca8", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -66,16 +66,22 @@ pub fn addr_of_mut(\n     cx: &CodegenCx<'ll, '_>,\n     cv: &'ll Value,\n     align: Align,\n-    kind: &str,\n+    kind: Option<&str>,\n ) -> &'ll Value {\n     unsafe {\n-        let name = cx.generate_local_symbol_name(kind);\n-        let gv = declare::define_global(cx, &name[..], val_ty(cv)).unwrap_or_else(||{\n-            bug!(\"symbol `{}` is already defined\", name);\n-        });\n+        let gv = match kind {\n+            Some(kind) if !cx.tcx.sess.fewer_names() => {\n+                let name = cx.generate_local_symbol_name(kind);\n+                let gv = declare::define_global(cx, &name[..], val_ty(cv)).unwrap_or_else(||{\n+                    bug!(\"symbol `{}` is already defined\", name);\n+                });\n+                llvm::LLVMRustSetLinkage(gv, llvm::Linkage::PrivateLinkage);\n+                gv\n+            },\n+            _ => declare::define_private_global(cx, val_ty(cv)),\n+        };\n         llvm::LLVMSetInitializer(gv, cv);\n         set_global_alignment(cx, gv, align);\n-        llvm::LLVMRustSetLinkage(gv, llvm::Linkage::PrivateLinkage);\n         SetUnnamedAddr(gv, true);\n         gv\n     }\n@@ -85,7 +91,7 @@ pub fn addr_of(\n     cx: &CodegenCx<'ll, '_>,\n     cv: &'ll Value,\n     align: Align,\n-    kind: &str,\n+    kind: Option<&str>,\n ) -> &'ll Value {\n     if let Some(&gv) = cx.const_globals.borrow().get(&cv) {\n         unsafe {"}, {"sha": "a0310eecd591d4f30da92605628f54eb4dfb34a5", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -35,7 +35,6 @@ use value::Value;\n \n use std::ffi::CString;\n \n-\n /// Declare a global value.\n ///\n /// If there\u2019s a value with the same name already declared, the function will\n@@ -170,6 +169,15 @@ pub fn define_global(cx: &CodegenCx<'ll, '_>, name: &str, ty: &'ll Type) -> Opti\n     }\n }\n \n+/// Declare a private global\n+///\n+/// Use this function when you intend to define a global without a name.\n+pub fn define_private_global(cx: &CodegenCx<'ll, '_>, ty: &'ll Type) -> &'ll Value {\n+    unsafe {\n+        llvm::LLVMRustInsertPrivateGlobal(cx.llmod, ty)\n+    }\n+}\n+\n /// Declare a Rust function with an intention to define it.\n ///\n /// Use this function when you intend to define a function. This function will"}, {"sha": "a894f8e2fdb96a95686ceec3986ba3b4308870ba", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -623,6 +623,7 @@ extern \"C\" {\n     pub fn LLVMAddGlobal(M: &'a Module, Ty: &'a Type, Name: *const c_char) -> &'a Value;\n     pub fn LLVMGetNamedGlobal(M: &Module, Name: *const c_char) -> Option<&Value>;\n     pub fn LLVMRustGetOrInsertGlobal(M: &'a Module, Name: *const c_char, T: &'a Type) -> &'a Value;\n+    pub fn LLVMRustInsertPrivateGlobal(M: &'a Module, T: &'a Type) -> &'a Value;\n     pub fn LLVMGetFirstGlobal(M: &Module) -> Option<&Value>;\n     pub fn LLVMGetNextGlobal(GlobalVar: &Value) -> Option<&Value>;\n     pub fn LLVMDeleteGlobal(GlobalVar: &Value);"}, {"sha": "8a1159bc4773cfa4f231d309eb665cd1281044f4", "filename": "src/librustc_codegen_llvm/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmeth.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -106,7 +106,7 @@ pub fn get_vtable(\n \n     let vtable_const = C_struct(cx, &components, false);\n     let align = cx.data_layout().pointer_align;\n-    let vtable = consts::addr_of(cx, vtable_const, align, \"vtable\");\n+    let vtable = consts::addr_of(cx, vtable_const, align, Some(\"vtable\"));\n \n     debuginfo::create_vtable_metadata(cx, ty, vtable);\n "}, {"sha": "4e389c3b915f011ebb4eb35a1f59dc2a2c7b7a45", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -377,7 +377,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                         let file_line_col = consts::addr_of(bx.cx,\n                                                             file_line_col,\n                                                             align,\n-                                                            \"panic_bounds_check_loc\");\n+                                                            Some(\"panic_bounds_check_loc\"));\n                         (lang_items::PanicBoundsCheckFnLangItem,\n                          vec![file_line_col, index, len])\n                     }\n@@ -391,7 +391,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                         let msg_file_line_col = consts::addr_of(bx.cx,\n                                                                 msg_file_line_col,\n                                                                 align,\n-                                                                \"panic_loc\");\n+                                                                Some(\"panic_loc\"));\n                         (lang_items::PanicFnLangItem,\n                          vec![msg_file_line_col])\n                     }"}, {"sha": "a6e14a99f3c8eafe156d2756b59095c21cccc907", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -58,9 +58,9 @@ pub fn scalar_to_llvm(\n                 Some(AllocType::Memory(alloc)) => {\n                     let init = const_alloc_to_llvm(cx, alloc);\n                     if alloc.runtime_mutability == Mutability::Mutable {\n-                        consts::addr_of_mut(cx, init, alloc.align, \"byte_str\")\n+                        consts::addr_of_mut(cx, init, alloc.align, None)\n                     } else {\n-                        consts::addr_of(cx, init, alloc.align, \"byte_str\")\n+                        consts::addr_of(cx, init, alloc.align, None)\n                     }\n                 }\n                 Some(AllocType::Function(fn_instance)) => {"}, {"sha": "6fa0845dd0cebf14d45e56f5e6bcdf8b64675acf", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -63,7 +63,7 @@ impl PlaceRef<'ll, 'tcx> {\n         offset: Size,\n     ) -> PlaceRef<'ll, 'tcx> {\n         let init = const_alloc_to_llvm(bx.cx, alloc);\n-        let base_addr = consts::addr_of(bx.cx, init, layout.align, \"byte_str\");\n+        let base_addr = consts::addr_of(bx.cx, init, layout.align, None);\n \n         let llval = unsafe { LLVMConstInBoundsGEP(\n             consts::bitcast(base_addr, Type::i8p(bx.cx)),"}, {"sha": "9b9c908ea52721ff3f5e4121e322541cbfd5fdab", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -12,6 +12,7 @@\n #include \"llvm/IR/DebugInfoMetadata.h\"\n #include \"llvm/IR/DiagnosticInfo.h\"\n #include \"llvm/IR/DiagnosticPrinter.h\"\n+#include \"llvm/IR/GlobalVariable.h\"\n #include \"llvm/IR/Instructions.h\"\n #include \"llvm/Object/Archive.h\"\n #include \"llvm/Object/ObjectFile.h\"\n@@ -116,6 +117,15 @@ LLVMRustGetOrInsertGlobal(LLVMModuleRef M, const char *Name, LLVMTypeRef Ty) {\n   return wrap(unwrap(M)->getOrInsertGlobal(Name, unwrap(Ty)));\n }\n \n+extern \"C\" LLVMValueRef\n+LLVMRustInsertPrivateGlobal(LLVMModuleRef M, LLVMTypeRef Ty) {\n+  return wrap(new GlobalVariable(*unwrap(M),\n+                                 unwrap(Ty),\n+                                 false,\n+                                 GlobalValue::PrivateLinkage,\n+                                 nullptr));\n+}\n+\n extern \"C\" LLVMTypeRef LLVMRustMetadataTypeInContext(LLVMContextRef C) {\n   return wrap(Type::getMetadataTy(*unwrap(C)));\n }"}, {"sha": "301f5544486270b68cfa652b3e36c5e46be9dc73", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -21,11 +21,11 @@\n // CHECK: @STATIC = {{.*}}, align 4\n \n // This checks the constants from inline_enum_const\n-// CHECK: @byte_str.{{[0-9]+}} = {{.*}}, align 2\n+// CHECK: @{{[0-9]+}} = {{.*}}, align 2\n \n // This checks the constants from {low,high}_align_const, they share the same\n // constant, but the alignment differs, so the higher one should be used\n-// CHECK: [[LOW_HIGH:@byte_str.[0-9]+]] = {{.*}}, align 4\n+// CHECK: [[LOW_HIGH:@[0-9]+]] = {{.*}}, align 4\n \n #[derive(Copy, Clone)]\n "}, {"sha": "dd0f89c931d8aa13d64374490584e4848875d1ac", "filename": "src/test/codegen/remap_path_prefix/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -22,7 +22,7 @@ mod aux_mod;\n include!(\"aux_mod.rs\");\n \n // Here we check that the expansion of the file!() macro is mapped.\n-// CHECK: @byte_str.1 = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c\"/the/src/remap_path_prefix/main.rs\" }>, align 1\n+// CHECK: @0 = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c\"/the/src/remap_path_prefix/main.rs\" }>, align 1\n pub static FILE_PATH: &'static str = file!();\n \n fn main() {"}, {"sha": "a6d294d2a1c0a5be6ecf382316770f73586c10fe", "filename": "src/test/run-make-fulldeps/symbols-are-reasonable/Makefile", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f9b9b6e078aa81c0faa064bf861e88001684765c/src%2Ftest%2Frun-make-fulldeps%2Fsymbols-are-reasonable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f9b9b6e078aa81c0faa064bf861e88001684765c/src%2Ftest%2Frun-make-fulldeps%2Fsymbols-are-reasonable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymbols-are-reasonable%2FMakefile?ref=f9b9b6e078aa81c0faa064bf861e88001684765c", "patch": "@@ -1,13 +0,0 @@\n--include ../tools.mk\n-\n-# check that the compile generated symbols for strings, binaries,\n-# vtables, etc. have semisane names (e.g. `str.1234`); it's relatively\n-# easy to accidentally modify the compiler internals to make them\n-# become things like `str\"str\"(1234)`.\n-\n-OUT=$(TMPDIR)/lib.s\n-\n-all:\n-\t$(RUSTC) lib.rs --emit=asm --crate-type=staticlib\n-\t# just check for symbol declarations with the names we're expecting.\n-\t$(CGREP) -e 'str\\.[0-9]+:' 'byte_str\\.[0-9]+:' 'vtable\\.[0-9]+' < $(OUT)"}, {"sha": "b9285b24cd63f2c612b1ab5390a46c52e06919d2", "filename": "src/test/run-make-fulldeps/symbols-are-reasonable/lib.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f9b9b6e078aa81c0faa064bf861e88001684765c/src%2Ftest%2Frun-make-fulldeps%2Fsymbols-are-reasonable%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b9b6e078aa81c0faa064bf861e88001684765c/src%2Ftest%2Frun-make-fulldeps%2Fsymbols-are-reasonable%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymbols-are-reasonable%2Flib.rs?ref=f9b9b6e078aa81c0faa064bf861e88001684765c", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub static X: &'static str = \"foobarbaz\";\n-pub static Y: &'static [u8] = include_bytes!(\"lib.rs\");\n-\n-trait Foo { fn dummy(&self) { } }\n-impl Foo for usize {}\n-\n-#[no_mangle]\n-pub extern \"C\" fn dummy() {\n-    // force the vtable to be created\n-    let _x = &1usize as &Foo;\n-}"}, {"sha": "baf27d6f57c3cda9c3c45953636b2e59eb9c1452", "filename": "src/test/run-pass-fulldeps/myriad-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Ftest%2Frun-pass-fulldeps%2Fmyriad-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Ftest%2Frun-pass-fulldeps%2Fmyriad-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmyriad-closures.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -14,7 +14,7 @@\n // See https://github.com/rust-lang/rust/issues/34793 for more information.\n \n // Make sure we don't optimize anything away:\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Cpasses=name-anon-globals\n \n // Expand something exponentially\n macro_rules! go_bacterial {"}, {"sha": "dd9f9be7da713de4bfa956db02e81f85c161a843", "filename": "src/test/run-pass/issue-38226.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Ftest%2Frun-pass%2Fissue-38226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Ftest%2Frun-pass%2Fissue-38226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38226.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -15,7 +15,7 @@\n \n // Need -Cno-prepopulate-passes to really disable inlining, otherwise the faulty\n // code gets optimized out:\n-// compile-flags: -Cno-prepopulate-passes\n+// compile-flags: -Cno-prepopulate-passes -Cpasses=name-anon-globals\n \n extern crate issue_38226_aux;\n "}, {"sha": "681842e30e006c8ea1415a112a59d7c2465c3e0f", "filename": "src/test/ui/feature-gate-unwind-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a902431b8e66da8486b3b9a2d8527746c6ab1a/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.rs?ref=11a902431b8e66da8486b3b9a2d8527746c6ab1a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Cpasses=name-anon-globals\n \n #![crate_type = \"lib\"]\n "}]}