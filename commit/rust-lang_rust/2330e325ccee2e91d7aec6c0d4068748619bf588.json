{"sha": "2330e325ccee2e91d7aec6c0d4068748619bf588", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMzBlMzI1Y2NlZTJlOTFkN2FlYzZjMGQ0MDY4NzQ4NjE5YmY1ODg=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "tchiovoloni@mozilla.com", "date": "2020-01-12T22:50:00Z"}, "committer": {"name": "Thom Chiovoloni", "email": "tchiovoloni@mozilla.com", "date": "2020-01-12T22:50:00Z"}, "message": "Tests for leading_trailing_ones", "tree": {"sha": "886b26c502afb263a354190dd6a6ac02f2601a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/886b26c502afb263a354190dd6a6ac02f2601a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2330e325ccee2e91d7aec6c0d4068748619bf588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2330e325ccee2e91d7aec6c0d4068748619bf588", "html_url": "https://github.com/rust-lang/rust/commit/2330e325ccee2e91d7aec6c0d4068748619bf588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2330e325ccee2e91d7aec6c0d4068748619bf588/comments", "author": null, "committer": null, "parents": [{"sha": "6a7a69bde9813ac2868f36a01567c633ed6cd023", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a7a69bde9813ac2868f36a01567c633ed6cd023", "html_url": "https://github.com/rust-lang/rust/commit/6a7a69bde9813ac2868f36a01567c633ed6cd023"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "36476cf01c08c00e354419e11538248b64f6e38d", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2330e325ccee2e91d7aec6c0d4068748619bf588/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2330e325ccee2e91d7aec6c0d4068748619bf588/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=2330e325ccee2e91d7aec6c0d4068748619bf588", "patch": "@@ -41,6 +41,7 @@\n #![feature(const_raw_ptr_deref)]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n+#![feature(leading_trailing_ones)]\n \n extern crate test;\n "}, {"sha": "48a49073b2cf56a226f5674995d229abcbb96fba", "filename": "src/libcore/tests/num/int_macros.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2330e325ccee2e91d7aec6c0d4068748619bf588/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2330e325ccee2e91d7aec6c0d4068748619bf588/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=2330e325ccee2e91d7aec6c0d4068748619bf588", "patch": "@@ -89,6 +89,33 @@ macro_rules! int_module {\n                 assert_eq!(C.count_zeros(), bits as u32 - 5);\n             }\n \n+            #[test]\n+            fn test_leading_trailing_ones() {\n+                let bits = (mem::size_of::<$T>() * 8) as u32;\n+\n+                let a: $T = 0b0101_1111;\n+                assert_eq!(a.trailing_ones(), 5);\n+                assert_eq!((!a).leading_ones(), bits - 7);\n+\n+                assert_eq!(a.reverse_bits().leading_ones(), 5);\n+\n+                assert_eq!(_1.leading_ones(), bits);\n+                assert_eq!(_1.trailing_ones(), bits);\n+\n+                assert_eq!((_1 << 1).trailing_ones(), 0);\n+                assert_eq!(MAX.leading_ones(), 0);\n+\n+                assert_eq!((_1 << 1).leading_ones(), bits - 1);\n+                assert_eq!(MAX.trailing_ones(), bits - 1);\n+\n+                assert_eq!(_0.leading_ones(), 0);\n+                assert_eq!(_0.trailing_ones(), 0);\n+\n+                let x: $T = 0b0010_1100;\n+                assert_eq!(x.leading_ones(), 0);\n+                assert_eq!(x.trailing_ones(), 0);\n+            }\n+\n             #[test]\n             fn test_rotate() {\n                 assert_eq!(A.rotate_left(6).rotate_right(2).rotate_right(4), A);"}, {"sha": "8f1ca8e6fac2c5a60be8072c349fa87cc5d233b5", "filename": "src/libcore/tests/num/uint_macros.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2330e325ccee2e91d7aec6c0d4068748619bf588/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2330e325ccee2e91d7aec6c0d4068748619bf588/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=2330e325ccee2e91d7aec6c0d4068748619bf588", "patch": "@@ -53,6 +53,33 @@ macro_rules! uint_module {\n                 assert!(C.count_zeros() == bits as u32 - 5);\n             }\n \n+            #[test]\n+            fn test_leading_trailing_ones() {\n+                let bits = (mem::size_of::<$T>() * 8) as u32;\n+\n+                let a: $T = 0b0101_1111;\n+                assert_eq!(a.trailing_ones(), 5);\n+                assert_eq!((!a).leading_ones(), bits - 7);\n+\n+                assert_eq!(a.reverse_bits().leading_ones(), 5);\n+\n+                assert_eq!(_1.leading_ones(), bits);\n+                assert_eq!(_1.trailing_ones(), bits);\n+\n+                assert_eq!((_1 << 1).trailing_ones(), 0);\n+                assert_eq!((_1 >> 1).leading_ones(), 0);\n+\n+                assert_eq!((_1 << 1).leading_ones(), bits - 1);\n+                assert_eq!((_1 >> 1).trailing_ones(), bits - 1);\n+\n+                assert_eq!(_0.leading_ones(), 0);\n+                assert_eq!(_0.trailing_ones(), 0);\n+\n+                let x: $T = 0b0010_1100;\n+                assert_eq!(x.leading_ones(), 0);\n+                assert_eq!(x.trailing_ones(), 0);\n+            }\n+\n             #[test]\n             fn test_rotate() {\n                 assert_eq!(A.rotate_left(6).rotate_right(2).rotate_right(4), A);"}]}