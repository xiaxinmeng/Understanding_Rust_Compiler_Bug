{"sha": "e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YjhjYTU0YmI4ZmFmYzgzZTQ4NmFhNTliM2NjZTQ2N2Q5YzI2N2E=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-07-19T22:14:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-19T22:14:51Z"}, "message": "Merge pull request #1796 from topecongiro/small-fixes\n\nSmall fixes", "tree": {"sha": "6278f068c1777c2a9e1b7461db3fcbfd8b6aed31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6278f068c1777c2a9e1b7461db3fcbfd8b6aed31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "html_url": "https://github.com/rust-lang/rust/commit/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "html_url": "https://github.com/rust-lang/rust/commit/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05"}, {"sha": "a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "html_url": "https://github.com/rust-lang/rust/commit/a8b0a6e4c5524460ff7f181ffc0ca45758a02545"}], "stats": {"total": 326, "additions": 154, "deletions": 172}, "files": [{"sha": "5c98308e40c09a3807b06fea87b2dce5f1c4de7c", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -561,7 +561,7 @@ fn choose_first_connector<'a>(\n     if subexpr_list.is_empty() {\n         \"\"\n     } else if extend || subexpr_list.last().map_or(false, is_try) ||\n-               is_extendable_parent(context, parent_str)\n+        is_extendable_parent(context, parent_str)\n     {\n         // 1 = \";\", being conservative here.\n         if last_line_width(parent_str) + first_line_width(first_child_str) + 1 <="}, {"sha": "35ff88d86d1b20c970ed3be53f47084d5ffd9af7", "filename": "src/comment.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -124,7 +124,7 @@ fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle {\n             CommentStyle::DoubleSlash\n         }\n     } else if (orig.starts_with(\"///\") && orig.chars().nth(3).map_or(true, |c| c != '/')) ||\n-               (orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\"))\n+        (orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\"))\n     {\n         CommentStyle::TripleSlash\n     } else if orig.starts_with(\"//!\") || orig.starts_with(\"/*!\") {\n@@ -314,13 +314,13 @@ fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle) -> &'a str {\n             &line[opener.trim_right().len()..]\n         }\n     } else if line.starts_with(\"/* \") || line.starts_with(\"// \") || line.starts_with(\"//!\") ||\n-               line.starts_with(\"///\") ||\n-               line.starts_with(\"** \") || line.starts_with(\"/*!\") ||\n-               (line.starts_with(\"/**\") && !line.starts_with(\"/**/\"))\n+        line.starts_with(\"///\") ||\n+        line.starts_with(\"** \") || line.starts_with(\"/*!\") ||\n+        (line.starts_with(\"/**\") && !line.starts_with(\"/**/\"))\n     {\n         &line[3..]\n     } else if line.starts_with(\"/*\") || line.starts_with(\"* \") || line.starts_with(\"//\") ||\n-               line.starts_with(\"**\")\n+        line.starts_with(\"**\")\n     {\n         &line[2..]\n     } else if line.starts_with('*') {\n@@ -795,7 +795,7 @@ fn remove_comment_header(comment: &str) -> &str {\n     } else if comment.starts_with(\"//\") {\n         &comment[2..]\n     } else if (comment.starts_with(\"/**\") && !comment.starts_with(\"/**/\")) ||\n-               comment.starts_with(\"/*!\")\n+        comment.starts_with(\"/*!\")\n     {\n         &comment[3..comment.len() - 2]\n     } else {"}, {"sha": "d99a73b87ec3f4058cf4ce21a9adf4e4415325dc", "filename": "src/expr.rs", "status": "modified", "additions": 105, "deletions": 113, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -375,7 +375,7 @@ where\n                 }\n \n                 // Try rewriting the rhs into the remaining space.\n-                let rhs_shape = shape.shrink_left(last_line_width(&result) + suffix.len());\n+                let rhs_shape = shape.offset_left(last_line_width(&result) + suffix.len());\n                 if let Some(rhs_shape) = rhs_shape {\n                     if let Some(rhs_result) = rhs.rewrite(context, rhs_shape) {\n                         // FIXME this should always hold.\n@@ -572,7 +572,7 @@ fn rewrite_closure_fn_decl(\n \n     // 1 = |\n     let argument_offset = nested_shape.indent + 1;\n-    let arg_shape = try_opt!(nested_shape.shrink_left(1)).visual_indent(0);\n+    let arg_shape = try_opt!(nested_shape.offset_left(1)).visual_indent(0);\n     let ret_str = try_opt!(fn_decl.output.rewrite(context, arg_shape));\n \n     let arg_items = itemize_list(\n@@ -876,14 +876,7 @@ fn rewrite_block_with_visitor(\n     }\n \n     visitor.visit_block(block);\n-    if visitor.failed && shape.indent.alignment != 0 {\n-        block.rewrite(\n-            context,\n-            Shape::indented(shape.indent.block_only(), context.config),\n-        )\n-    } else {\n-        Some(format!(\"{}{}\", prefix, visitor.buffer))\n-    }\n+    Some(format!(\"{}{}\", prefix, visitor.buffer))\n }\n \n impl Rewrite for ast::Block {\n@@ -1168,7 +1161,7 @@ impl<'a> ControlFlow<'a> {\n         let constr_shape = if self.nested_if {\n             // We are part of an if-elseif-else chain. Our constraints are tightened.\n             // 7 = \"} else \" .len()\n-            try_opt!(shape.shrink_left(7))\n+            try_opt!(shape.offset_left(7))\n         } else {\n             shape\n         };\n@@ -1243,7 +1236,7 @@ impl<'a> ControlFlow<'a> {\n         let block_sep = if self.cond.is_none() && between_kwd_cond_comment.is_some() {\n             \"\"\n         } else if context.config.control_brace_style() == ControlBraceStyle::AlwaysNextLine ||\n-                   force_newline_brace\n+            force_newline_brace\n         {\n             alt_block_sep\n         } else {\n@@ -1435,7 +1428,7 @@ fn block_contains_comment(block: &ast::Block, codemap: &CodeMap) -> bool {\n // the expression.\n pub fn is_simple_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n     (block.stmts.len() == 1 && stmt_is_expr(&block.stmts[0]) &&\n-         !block_contains_comment(block, codemap))\n+        !block_contains_comment(block, codemap))\n }\n \n /// Checks whether a block contains at most one statement or expression, and no comments.\n@@ -1514,15 +1507,17 @@ fn rewrite_match(\n         return None;\n     }\n \n-    // `match `cond` {`\n+    // 6 = `match `, 2 = ` {`\n     let cond_shape = match context.config.control_style() {\n         Style::Legacy => try_opt!(shape.shrink_left(6).and_then(|s| s.sub_width(2))),\n-        Style::Rfc => try_opt!(shape.offset_left(8)),\n+        Style::Rfc => try_opt!(shape.offset_left(6).and_then(|s| s.sub_width(2))),\n     };\n     let cond_str = try_opt!(cond.rewrite(context, cond_shape));\n     let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n     let block_sep = match context.config.control_brace_style() {\n-        ControlBraceStyle::AlwaysNextLine => alt_block_sep.as_str(),\n+        ControlBraceStyle::AlwaysNextLine => &alt_block_sep,\n+        _ if last_line_extendable(&cond_str) => \" \",\n+        _ if cond_str.contains('\\n') => &alt_block_sep,\n         _ => \" \",\n     };\n \n@@ -1549,45 +1544,6 @@ fn arm_comma(config: &Config, body: &ast::Expr) -> &'static str {\n     }\n }\n \n-fn rewrite_match_pattern(\n-    context: &RewriteContext,\n-    pats: &Vec<ptr::P<ast::Pat>>,\n-    guard: &Option<ptr::P<ast::Expr>>,\n-    shape: Shape,\n-) -> Option<String> {\n-    // Patterns\n-    // 5 = ` => {`\n-    let pat_shape = try_opt!(shape.sub_width(5));\n-\n-    let pat_strs = try_opt!(\n-        pats.iter()\n-            .map(|p| p.rewrite(context, pat_shape))\n-            .collect::<Option<Vec<_>>>()\n-    );\n-\n-    let items: Vec<_> = pat_strs.into_iter().map(ListItem::from_str).collect();\n-    let tactic = definitive_tactic(&items, ListTactic::HorizontalVertical, pat_shape.width);\n-    let fmt = ListFormatting {\n-        tactic: tactic,\n-        separator: \" |\",\n-        trailing_separator: SeparatorTactic::Never,\n-        shape: pat_shape,\n-        ends_with_newline: false,\n-        config: context.config,\n-    };\n-    let pats_str = try_opt!(write_list(&items, &fmt));\n-\n-    // Guard\n-    let guard_str = try_opt!(rewrite_guard(\n-        context,\n-        guard,\n-        shape,\n-        trimmed_last_line_width(&pats_str),\n-    ));\n-\n-    Some(format!(\"{}{}\", pats_str, guard_str))\n-}\n-\n fn rewrite_match_arms(\n     context: &RewriteContext,\n     arms: &[ast::Arm],\n@@ -1677,6 +1633,45 @@ fn rewrite_match_arm(context: &RewriteContext, arm: &ast::Arm, shape: Shape) ->\n     rewrite_match_body(context, &arm.body, &pats_str, shape, arm.guard.is_some())\n }\n \n+fn rewrite_match_pattern(\n+    context: &RewriteContext,\n+    pats: &Vec<ptr::P<ast::Pat>>,\n+    guard: &Option<ptr::P<ast::Expr>>,\n+    shape: Shape,\n+) -> Option<String> {\n+    // Patterns\n+    // 5 = ` => {`\n+    let pat_shape = try_opt!(shape.sub_width(5));\n+\n+    let pat_strs = try_opt!(\n+        pats.iter()\n+            .map(|p| p.rewrite(context, pat_shape))\n+            .collect::<Option<Vec<_>>>()\n+    );\n+\n+    let items: Vec<_> = pat_strs.into_iter().map(ListItem::from_str).collect();\n+    let tactic = definitive_tactic(&items, ListTactic::HorizontalVertical, pat_shape.width);\n+    let fmt = ListFormatting {\n+        tactic: tactic,\n+        separator: \" |\",\n+        trailing_separator: SeparatorTactic::Never,\n+        shape: pat_shape,\n+        ends_with_newline: false,\n+        config: context.config,\n+    };\n+    let pats_str = try_opt!(write_list(&items, &fmt));\n+\n+    // Guard\n+    let guard_str = try_opt!(rewrite_guard(\n+        context,\n+        guard,\n+        shape,\n+        trimmed_last_line_width(&pats_str),\n+    ));\n+\n+    Some(format!(\"{}{}\", pats_str, guard_str))\n+}\n+\n fn rewrite_match_body(\n     context: &RewriteContext,\n     body: &ptr::P<ast::Expr>,\n@@ -1686,7 +1681,8 @@ fn rewrite_match_body(\n ) -> Option<String> {\n     let (extend, body) = match body.node {\n         ast::ExprKind::Block(ref block)\n-            if !is_unsafe_block(block) && is_simple_block(block, context.codemap) => {\n+            if !is_unsafe_block(block) && is_simple_block(block, context.codemap) =>\n+        {\n             if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n                 (expr.can_be_overflowed(context, 1), &**expr)\n             } else {\n@@ -1699,48 +1695,56 @@ fn rewrite_match_body(\n     let comma = arm_comma(&context.config, body);\n     let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n     let alt_block_sep = alt_block_sep.as_str();\n-    let is_block = if let ast::ExprKind::Block(..) = body.node {\n-        true\n+    let (is_block, is_empty_block) = if let ast::ExprKind::Block(ref block) = body.node {\n+        (true, is_empty_block(block, context.codemap))\n     } else {\n-        false\n+        (false, false)\n     };\n \n     let combine_orig_body = |body_str: &str| {\n         let block_sep = match context.config.control_brace_style() {\n             ControlBraceStyle::AlwaysNextLine if is_block => alt_block_sep,\n-            _ if has_guard && pats_str.contains('\\n') && is_block && body_str != \"{}\" => {\n-                alt_block_sep\n-            }\n             _ => \" \",\n         };\n \n         Some(format!(\"{} =>{}{}{}\", pats_str, block_sep, body_str, comma))\n     };\n \n+    let forbid_same_line = has_guard && pats_str.contains('\\n') && !is_empty_block;\n+    let next_line_indent = if is_block {\n+        shape.indent\n+    } else {\n+        shape.indent.block_indent(context.config)\n+    };\n     let combine_next_line_body = |body_str: &str| {\n-        let indent_str = shape\n-            .indent\n-            .block_indent(context.config)\n-            .to_string(context.config);\n+        if is_block {\n+            return Some(format!(\n+                \"{} =>\\n{}{}\",\n+                pats_str,\n+                next_line_indent.to_string(context.config),\n+                body_str\n+            ));\n+        }\n+\n+        let indent_str = shape.indent.to_string(context.config);\n+        let nested_indent_str = next_line_indent.to_string(context.config);\n         let (body_prefix, body_suffix) = if context.config.wrap_match_arms() {\n             let comma = if context.config.match_block_trailing_comma() {\n                 \",\"\n             } else {\n                 \"\"\n             };\n-            (\n-                \"{\",\n-                format!(\"\\n{}}}{}\", shape.indent.to_string(context.config), comma),\n-            )\n+            (\"{\", format!(\"\\n{}}}{}\", indent_str, comma))\n         } else {\n             (\"\", String::from(\",\"))\n         };\n \n         let block_sep = match context.config.control_brace_style() {\n             ControlBraceStyle::AlwaysNextLine => format!(\"{}{}\\n\", alt_block_sep, body_prefix),\n             _ if body_prefix.is_empty() => \"\\n\".to_owned(),\n-            _ => \" \".to_owned() + body_prefix + \"\\n\",\n-        } + &indent_str;\n+            _ if forbid_same_line => format!(\"{}{}\\n\", alt_block_sep, body_prefix),\n+            _ => format!(\" {}\\n\", body_prefix),\n+        } + &nested_indent_str;\n \n         Some(format!(\n             \"{} =>{}{}{}\",\n@@ -1753,19 +1757,20 @@ fn rewrite_match_body(\n \n     // Let's try and get the arm body on the same line as the condition.\n     // 4 = ` => `.len()\n-    let orig_arm_shape = shape\n+    let orig_body_shape = shape\n         .offset_left(extra_offset(&pats_str, shape) + 4)\n         .and_then(|shape| shape.sub_width(comma.len()));\n-    let orig_body = if let Some(arm_shape) = orig_arm_shape {\n+    let orig_body = if let Some(body_shape) = orig_body_shape {\n         let rewrite = nop_block_collapse(\n-            format_expr(body, ExprType::Statement, context, arm_shape),\n-            arm_shape.width,\n+            format_expr(body, ExprType::Statement, context, body_shape),\n+            body_shape.width,\n         );\n \n         match rewrite {\n             Some(ref body_str)\n-                if ((!body_str.contains('\\n')) && first_line_width(body_str) <= arm_shape.width) ||\n-                    is_block =>\n+                if !forbid_same_line &&\n+                    (is_block ||\n+                        (!body_str.contains('\\n') && body_str.len() <= body_shape.width)) =>\n             {\n                 return combine_orig_body(body_str);\n             }\n@@ -1774,18 +1779,20 @@ fn rewrite_match_body(\n     } else {\n         None\n     };\n-    let orig_budget = orig_arm_shape.map_or(0, |shape| shape.width);\n+    let orig_budget = orig_body_shape.map_or(0, |shape| shape.width);\n \n     // Try putting body on the next line and see if it looks better.\n-    let next_line_body_shape =\n-        Shape::indented(shape.indent.block_indent(context.config), context.config);\n+    let next_line_body_shape = Shape::indented(next_line_indent, context.config);\n     let next_line_body = nop_block_collapse(\n         format_expr(body, ExprType::Statement, context, next_line_body_shape),\n         next_line_body_shape.width,\n     );\n     match (orig_body, next_line_body) {\n         (Some(ref orig_str), Some(ref next_line_str))\n-            if prefer_next_line(orig_str, next_line_str) => combine_next_line_body(next_line_str),\n+            if forbid_same_line || prefer_next_line(orig_str, next_line_str) =>\n+        {\n+            combine_next_line_body(next_line_str)\n+        }\n         (Some(ref orig_str), _) if extend && first_line_width(orig_str) <= orig_budget => {\n             combine_orig_body(orig_str)\n         }\n@@ -2061,23 +2068,7 @@ where\n         one_line_width,\n         args_max_width,\n         force_trailing_comma,\n-    ).or_else(|| if context.use_block_indent() {\n-        rewrite_call_args(\n-            context,\n-            args,\n-            args_span,\n-            Shape::indented(\n-                shape.block().indent.block_indent(context.config),\n-                context.config,\n-            ),\n-            0,\n-            0,\n-            force_trailing_comma,\n-        )\n-    } else {\n-        None\n-    })\n-        .ok_or(Ordering::Less)?;\n+    ).ok_or(Ordering::Less)?;\n \n     if !context.use_block_indent() && need_block_indent(&list_str, nested_shape) && !extendable {\n         let mut new_context = context.clone();\n@@ -2384,7 +2375,7 @@ pub fn wrap_args_with_parens(\n ) -> String {\n     if !context.use_block_indent() ||\n         (context.inside_macro && !args_str.contains('\\n') &&\n-             args_str.len() + paren_overhead(context) <= shape.width) || is_extendable\n+            args_str.len() + paren_overhead(context) <= shape.width) || is_extendable\n     {\n         if context.config.spaces_within_parens() && args_str.len() > 0 {\n             format!(\"( {} )\", args_str)\n@@ -2410,8 +2401,13 @@ fn span_ends_with_comma(context: &RewriteContext, span: Span) -> bool {\n \n fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, shape: Shape) -> Option<String> {\n     debug!(\"rewrite_paren, shape: {:?}\", shape);\n-    let paren_overhead = paren_overhead(context);\n-    let sub_shape = try_opt!(shape.sub_width(paren_overhead / 2)).visual_indent(paren_overhead / 2);\n+    let total_paren_overhead = paren_overhead(context);\n+    let paren_overhead = total_paren_overhead / 2;\n+    let sub_shape = try_opt!(\n+        shape\n+            .offset_left(paren_overhead)\n+            .and_then(|s| s.sub_width(paren_overhead))\n+    );\n \n     let paren_wrapper = |s: &str| if context.config.spaces_within_parens() && s.len() > 0 {\n         format!(\"( {} )\", s)\n@@ -2422,16 +2418,12 @@ fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, shape: Shape) ->\n     let subexpr_str = try_opt!(subexpr.rewrite(context, sub_shape));\n     debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);\n \n-    if subexpr_str.contains('\\n') {\n+    if subexpr_str.contains('\\n') ||\n+        first_line_width(&subexpr_str) + total_paren_overhead <= shape.width\n+    {\n         Some(paren_wrapper(&subexpr_str))\n     } else {\n-        if subexpr_str.len() + paren_overhead <= shape.width {\n-            Some(paren_wrapper(&subexpr_str))\n-        } else {\n-            let sub_shape = try_opt!(shape.offset_left(2));\n-            let subexpr_str = try_opt!(subexpr.rewrite(context, sub_shape));\n-            Some(paren_wrapper(&subexpr_str))\n-        }\n+        None\n     }\n }\n \n@@ -2573,7 +2565,7 @@ fn rewrite_struct_lit<'a>(\n             }\n             StructLitField::Base(expr) => {\n                 // 2 = ..\n-                expr.rewrite(context, try_opt!(v_shape.shrink_left(2)))\n+                expr.rewrite(context, try_opt!(v_shape.offset_left(2)))\n                     .map(|s| format!(\"..{}\", s))\n             }\n         };\n@@ -2613,8 +2605,8 @@ pub fn wrap_struct_field(\n ) -> String {\n     if context.config.struct_lit_style() == IndentStyle::Block &&\n         (fields_str.contains('\\n') ||\n-             context.config.struct_lit_multiline_style() == MultilineStyle::ForceMulti ||\n-             fields_str.len() > one_line_width)\n+            context.config.struct_lit_multiline_style() == MultilineStyle::ForceMulti ||\n+            fields_str.len() > one_line_width)\n     {\n         format!(\n             \"\\n{}{}\\n{}\","}, {"sha": "d506fb583b4bb1500b4316e3e104a6706abdff21", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -501,7 +501,8 @@ fn rewrite_use_list(\n fn move_self_to_front(items: &mut Vec<ListItem>) -> bool {\n     match items\n         .iter()\n-        .position(|item| item.item.as_ref().map(|x| &x[..]) == Some(\"self\")) {\n+        .position(|item| item.item.as_ref().map(|x| &x[..]) == Some(\"self\"))\n+    {\n         Some(pos) => {\n             items[0] = items.remove(pos);\n             true"}, {"sha": "1b9c44957610809b797cffce19dfac2f9f07f910", "filename": "src/items.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -280,7 +280,7 @@ impl<'a> FmtVisitor<'a> {\n         if force_newline_brace {\n             newline_brace = true;\n         } else if self.config.fn_brace_style() != BraceStyle::AlwaysNextLine &&\n-                   !result.contains('\\n')\n+            !result.contains('\\n')\n         {\n             newline_brace = false;\n         }\n@@ -942,11 +942,10 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         let has_body = !trait_items.is_empty();\n \n         let where_density = if (context.config.where_density() == Density::Compressed &&\n-                                    (!result.contains('\\n') ||\n-                                         context.config.fn_args_layout() == IndentStyle::Block)) ||\n+            (!result.contains('\\n') || context.config.fn_args_layout() == IndentStyle::Block)) ||\n             (context.config.fn_args_layout() == IndentStyle::Block && result.is_empty()) ||\n             (context.config.where_density() == Density::CompressedIfEmpty && !has_body &&\n-                 !result.contains('\\n'))\n+                !result.contains('\\n'))\n         {\n             Density::Compressed\n         } else {\n@@ -1079,7 +1078,7 @@ pub fn format_struct_struct(\n             // 3 = ` {}`, 2 = ` {`.\n             let overhead = if fields.is_empty() { 3 } else { 2 };\n             if (context.config.item_brace_style() == BraceStyle::AlwaysNextLine &&\n-                    !fields.is_empty()) ||\n+                !fields.is_empty()) ||\n                 context\n                     .config\n                     .max_width()\n@@ -1247,8 +1246,8 @@ fn format_tuple_struct(\n \n     if !where_clause_str.is_empty() && !where_clause_str.contains('\\n') &&\n         (result.contains('\\n') ||\n-             offset.block_indent + result.len() + where_clause_str.len() + 1 >\n-                 context.config.max_width())\n+            offset.block_indent + result.len() + where_clause_str.len() + 1 >\n+                context.config.max_width())\n     {\n         // We need to put the where clause on a new line, but we didn't\n         // know that earlier, so the where clause will not be indented properly."}, {"sha": "6dfab314d970a612bc26125a98e95a69bdcfdb52", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -368,7 +368,7 @@ where\n         let inner_item_width = item.inner_as_ref().len();\n         if !first &&\n             (item.is_multiline() || !item.post_comment.is_some() ||\n-                 inner_item_width + overhead > max_budget)\n+                inner_item_width + overhead > max_budget)\n         {\n             return max_width;\n         }"}, {"sha": "6cb2fcddaef2309eda628884de59ca4ad337b9a7", "filename": "src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -83,7 +83,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n                     if cur_end < cur_start + MIN_STRING {\n                         cur_end = cur_start + max_chars;\n                         while !(punctuation.contains(graphemes[cur_end - 1]) ||\n-                                    graphemes[cur_end - 1].trim().is_empty())\n+                            graphemes[cur_end - 1].trim().is_empty())\n                         {\n                             if cur_end >= graphemes.len() {\n                                 let line = &graphemes[cur_start..].join(\"\");"}, {"sha": "065e357ea956fdc848b660a3b2f6fbc3f7ff2516", "filename": "src/summary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsummary.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -54,7 +54,7 @@ impl Summary {\n \n     pub fn has_no_errors(&self) -> bool {\n         !(self.has_operational_errors || self.has_parsing_errors || self.has_formatting_errors ||\n-              self.has_diff)\n+            self.has_diff)\n     }\n \n     pub fn add(&mut self, other: Summary) {"}, {"sha": "6461fa89d6cc691a9597d81b9e646cf3be31ed2c", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -56,7 +56,6 @@ pub struct FmtVisitor<'a> {\n     // FIXME: use an RAII util or closure for indenting\n     pub block_indent: Indent,\n     pub config: &'a Config,\n-    pub failed: bool,\n     pub is_if_else_block: bool,\n }\n \n@@ -558,15 +557,6 @@ impl<'a> FmtVisitor<'a> {\n \n     fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n         self.format_missing_with_indent(source!(self, span).lo);\n-        self.failed = match rewrite {\n-            Some(ref s)\n-                if s.rewrite(\n-                    &self.get_context(),\n-                    Shape::indented(self.block_indent, self.config),\n-                ).is_none() => true,\n-            None => true,\n-            _ => self.failed,\n-        };\n         let result = rewrite.unwrap_or_else(|| self.snippet(span));\n         self.buffer.push_str(&result);\n         self.last_pos = source!(self, span).hi;\n@@ -580,7 +570,6 @@ impl<'a> FmtVisitor<'a> {\n             last_pos: BytePos(0),\n             block_indent: Indent::empty(),\n             config: config,\n-            failed: false,\n             is_if_else_block: false,\n         }\n     }\n@@ -643,12 +632,12 @@ impl<'a> FmtVisitor<'a> {\n                     .take_while(|ppi| {\n                         is_use_item(&***ppi) &&\n                             (!reorder_imports_in_group ||\n-                                 {\n-                                     let current = self.codemap.lookup_line_range(item_bound(&ppi));\n-                                     let in_same_group = current.lo < last.hi + 2;\n-                                     last = current;\n-                                     in_same_group\n-                                 })\n+                                {\n+                                    let current = self.codemap.lookup_line_range(item_bound(&ppi));\n+                                    let in_same_group = current.lo < last.hi + 2;\n+                                    last = current;\n+                                    in_same_group\n+                                })\n                     })\n                     .count();\n                 let (use_items, rest) = items_left.split_at(use_item_length);"}, {"sha": "d915e11d534db590822f1452da96b7c2bde33ee5", "filename": "tests/system.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -240,15 +240,9 @@ fn read_config(filename: &str) -> Config {\n \n fn format_file<P: Into<PathBuf>>(filepath: P, config: &Config) -> (FileMap, FormatReport) {\n     let filepath = filepath.into();\n-    let display_path = filepath.display().to_string();\n     let input = Input::File(filepath);\n-    let (error_summary, file_map, report) =\n+    let (_error_summary, file_map, report) =\n         format_input::<io::Stdout>(input, &config, None).unwrap();\n-    assert!(\n-        error_summary.has_no_errors(),\n-        \"Encountered errors formatting {}\",\n-        display_path\n-    );\n     return (file_map, report);\n }\n "}, {"sha": "8033aff208f67e274efe4a32cadd2a217f5fb294", "filename": "tests/target/configs-control_style-rfc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Fconfigs-control_style-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Fconfigs-control_style-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-control_style-rfc.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -5,9 +5,9 @@ fn main() {\n     loop {\n         if foo {\n             if ((right_paddle_speed < 0.) &&\n-                    (right_paddle.position().y - paddle_size.y / 2. > 5.)) ||\n+                (right_paddle.position().y - paddle_size.y / 2. > 5.)) ||\n                 ((right_paddle_speed > 0.) &&\n-                     (right_paddle.position().y + paddle_size.y / 2. < game_height as f32 - 5.))\n+                    (right_paddle.position().y + paddle_size.y / 2. < game_height as f32 - 5.))\n             {\n                 foo\n             }"}, {"sha": "dde596394a8fadc5bd9007b80011a3bfc740cb0b", "filename": "tests/target/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -21,9 +21,9 @@ fn foo() -> bool {\n         trivial_value,\n     );\n     (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-                 a +\n-                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-                 aaaaa)))))))));\n+        a +\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n+        aaaaa)))))))));\n \n     {\n         for _ in 0..10 {}\n@@ -263,9 +263,9 @@ fn returns() {\n \n fn addrof() {\n     &mut (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-              bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n     &(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-          bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n }\n \n fn casts() {\n@@ -351,7 +351,7 @@ fn complex_if_else() {\n     {\n         ha();\n     } else if xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx +\n-               xxxxxxxxx\n+        xxxxxxxxx\n     {\n         yo();\n     }"}, {"sha": "6b5163cf7963c26b3e7e3ab7bcc72e60c0211087", "filename": "tests/target/issue-1239.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Fissue-1239.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Fissue-1239.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1239.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -4,8 +4,8 @@ fn foo() {\n         condition__uses_alignment_for_first_if__2\n     {\n     } else if condition__no_alignment_for_later_else__0 ||\n-               condition__no_alignment_for_later_else__1 ||\n-               condition__no_alignment_for_later_else__2\n+        condition__no_alignment_for_later_else__1 ||\n+        condition__no_alignment_for_later_else__2\n     {\n     };\n }"}, {"sha": "da82d971593cdd3d0337cef9a04d2fb6aac846c6", "filename": "tests/target/long-match-arms-brace-newline.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Flong-match-arms-brace-newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Flong-match-arms-brace-newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong-match-arms-brace-newline.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -7,7 +7,10 @@ fn main() {\n     match x\n     {\n         aaaaaaaa::Bbbbb::Ccccccccccccc(_, Some(ref x))\n-            if x == \"aaaaaaaaaaa aaaaaaa aaaaaa\" => Ok(()),\n+            if x == \"aaaaaaaaaaa aaaaaaa aaaaaa\" =>\n+        {\n+            Ok(())\n+        }\n         _ => Err(x),\n     }\n }"}, {"sha": "392a190ff0c4383fe05f1fc9c7d41ecfb3da2c51", "filename": "tests/target/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -72,10 +72,10 @@ fn main() {\n     vec![\n         a;\n         (|x| {\n-             let y = x + 1;\n-             let z = y + 1;\n-             z\n-         })(2)\n+            let y = x + 1;\n+            let z = y + 1;\n+            z\n+        })(2)\n     ];\n     vec![\n         a;"}, {"sha": "d0b7e6654596d8bb45a0426a0f0e277fb426faf8", "filename": "tests/target/match.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "patch": "@@ -29,7 +29,10 @@ fn foo() {\n         }\n \n         Patternnnnnnnnnnnnnnnnnnnnnnnnn | Patternnnnnnnnnnnnnnnnnnnnnnnnn\n-            if looooooooooooooooooooooooooooooooooooooooong_guard => meh,\n+            if looooooooooooooooooooooooooooooooooooooooong_guard =>\n+        {\n+            meh\n+        }\n \n         // Test that earlier patterns can take the guard space\n         (aaaa, bbbbb, ccccccc, aaaaa, bbbbbbbb, cccccc, aaaa, bbbbbbbb, cccccc, dddddd) |\n@@ -387,7 +390,8 @@ fn issue1395() {\n fn issue1456() {\n     Ok(Recording {\n         artists: match reader\n-            .evaluate(\".//mb:recording/mb:artist-credit/mb:name-credit\")? {\n+            .evaluate(\".//mb:recording/mb:artist-credit/mb:name-credit\")?\n+        {\n             Nodeset(nodeset) => {\n                 let res: Result<Vec<ArtistRef>, ReadError> = nodeset\n                     .iter()"}]}