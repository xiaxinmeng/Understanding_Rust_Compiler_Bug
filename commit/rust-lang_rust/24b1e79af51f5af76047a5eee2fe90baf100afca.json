{"sha": "24b1e79af51f5af76047a5eee2fe90baf100afca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YjFlNzlhZjUxZjVhZjc2MDQ3YTVlZWUyZmU5MGJhZjEwMGFmY2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-26T14:42:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-26T14:45:06Z"}, "message": "Remove another helper", "tree": {"sha": "4d6767c90e5ac4ec5d6f6149e434ebf09dfa82be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d6767c90e5ac4ec5d6f6149e434ebf09dfa82be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24b1e79af51f5af76047a5eee2fe90baf100afca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24b1e79af51f5af76047a5eee2fe90baf100afca", "html_url": "https://github.com/rust-lang/rust/commit/24b1e79af51f5af76047a5eee2fe90baf100afca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24b1e79af51f5af76047a5eee2fe90baf100afca/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25b32f9d68e9f01f2b92801f4b35daf2b8b250f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/25b32f9d68e9f01f2b92801f4b35daf2b8b250f7", "html_url": "https://github.com/rust-lang/rust/commit/25b32f9d68e9f01f2b92801f4b35daf2b8b250f7"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "9578c20b0817898d9d9c19261838e485d641cf71", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/24b1e79af51f5af76047a5eee2fe90baf100afca/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b1e79af51f5af76047a5eee2fe90baf100afca/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=24b1e79af51f5af76047a5eee2fe90baf100afca", "patch": "@@ -28,8 +28,8 @@ use crate::{\n     expr::{BindingAnnotation, Body, BodySourceMap, ExprValidator, Pat, PatId},\n     ty::display::HirFormatter,\n     ty::{\n-        self, utils::all_super_traits, InEnvironment, InferenceResult, Namespace, TraitEnvironment,\n-        TraitRef, Ty, TypeCtor, TypeWalk,\n+        self, InEnvironment, InferenceResult, Namespace, TraitEnvironment, TraitRef, Ty, TypeCtor,\n+        TypeWalk,\n     },\n     CallableDef, Either, HirDisplay, Name, Source,\n };\n@@ -740,17 +740,6 @@ impl Trait {\n         db.trait_data(self.id).items.iter().map(|(_name, it)| (*it).into()).collect()\n     }\n \n-    pub fn associated_type_by_name_including_super_traits(\n-        self,\n-        db: &impl HirDatabase,\n-        name: &Name,\n-    ) -> Option<TypeAlias> {\n-        all_super_traits(db, self.id)\n-            .into_iter()\n-            .find_map(|t| db.trait_data(t).associated_type_by_name(name))\n-            .map(TypeAlias::from)\n-    }\n-\n     pub fn trait_ref(self, db: &impl HirDatabase) -> TraitRef {\n         TraitRef::for_trait(db, self)\n     }"}, {"sha": "805a73ff5ea3354b9e865c40f0d71cd67bae94be", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24b1e79af51f5af76047a5eee2fe90baf100afca/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b1e79af51f5af76047a5eee2fe90baf100afca/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=24b1e79af51f5af76047a5eee2fe90baf100afca", "patch": "@@ -28,7 +28,7 @@ use crate::{\n     db::HirDatabase,\n     ty::{\n         primitive::{FloatTy, IntTy},\n-        utils::all_super_traits,\n+        utils::{all_super_traits, associated_type_by_name_including_super_traits},\n         Adt,\n     },\n     util::make_mut_slice,\n@@ -170,14 +170,16 @@ impl Ty {\n                 );\n                 return if remaining_segments.len() == 1 {\n                     let segment = &remaining_segments[0];\n-                    match trait_ref\n-                        .trait_\n-                        .associated_type_by_name_including_super_traits(db, &segment.name)\n-                    {\n+                    let associated_ty = associated_type_by_name_including_super_traits(\n+                        db,\n+                        trait_ref.trait_.id,\n+                        &segment.name,\n+                    );\n+                    match associated_ty {\n                         Some(associated_ty) => {\n                             // FIXME handle type parameters on the segment\n                             Ty::Projection(ProjectionTy {\n-                                associated_ty: associated_ty.id,\n+                                associated_ty,\n                                 parameters: trait_ref.substs,\n                             })\n                         }\n@@ -508,10 +510,11 @@ fn assoc_type_bindings_from_type_bound<'a>(\n         .flat_map(|args_and_bindings| args_and_bindings.bindings.iter())\n         .map(move |(name, type_ref)| {\n             let associated_ty =\n-                match trait_ref.trait_.associated_type_by_name_including_super_traits(db, &name) {\n-                    None => return GenericPredicate::Error,\n-                    Some(t) => t.id,\n-                };\n+                associated_type_by_name_including_super_traits(db, trait_ref.trait_.id, &name);\n+            let associated_ty = match associated_ty {\n+                None => return GenericPredicate::Error,\n+                Some(t) => t,\n+            };\n             let projection_ty =\n                 ProjectionTy { associated_ty, parameters: trait_ref.substs.clone() };\n             let ty = Ty::from_hir(db, resolver, type_ref);"}, {"sha": "52994b9e3498624875fd69f5af682bad72a3fff0", "filename": "crates/ra_hir/src/ty/utils.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24b1e79af51f5af76047a5eee2fe90baf100afca/crates%2Fra_hir%2Fsrc%2Fty%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b1e79af51f5af76047a5eee2fe90baf100afca/crates%2Fra_hir%2Fsrc%2Fty%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Futils.rs?ref=24b1e79af51f5af76047a5eee2fe90baf100afca", "patch": "@@ -5,9 +5,9 @@ use hir_def::{\n     db::DefDatabase,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    TraitId,\n+    TraitId, TypeAliasId,\n };\n-use hir_expand::name;\n+use hir_expand::name::{self, Name};\n \n // FIXME: this is wrong, b/c it can't express `trait T: PartialEq<()>`.\n // We should return a `TraitREf` here.\n@@ -51,3 +51,13 @@ pub(crate) fn all_super_traits(db: &impl DefDatabase, trait_: TraitId) -> Vec<Tr\n     }\n     result\n }\n+\n+pub(crate) fn associated_type_by_name_including_super_traits(\n+    db: &impl DefDatabase,\n+    trait_: TraitId,\n+    name: &Name,\n+) -> Option<TypeAliasId> {\n+    all_super_traits(db, trait_)\n+        .into_iter()\n+        .find_map(|t| db.trait_data(t).associated_type_by_name(name))\n+}"}]}