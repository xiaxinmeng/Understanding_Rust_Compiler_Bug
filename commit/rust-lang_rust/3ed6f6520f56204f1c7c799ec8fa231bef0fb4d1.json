{"sha": "3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZDZmNjUyMGY1NjIwNGYxYzdjNzk5ZWM4ZmEyMzFiZWYwZmI0ZDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-01T07:44:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-02T23:49:49Z"}, "message": "core: Remove _mut functions from vec\n\nInstead, use vec::to_mut/from_mut to transform vectors in place as\nneeded.", "tree": {"sha": "4b8cb49db4cbf3fa3bb7a88ba72f821d4c00dba9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b8cb49db4cbf3fa3bb7a88ba72f821d4c00dba9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "html_url": "https://github.com/rust-lang/rust/commit/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47e7a05a28c9662159af2d2e0f2b7efc13fa09cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e7a05a28c9662159af2d2e0f2b7efc13fa09cb", "html_url": "https://github.com/rust-lang/rust/commit/47e7a05a28c9662159af2d2e0f2b7efc13fa09cb"}], "stats": {"total": 175, "additions": 58, "deletions": 117}, "files": [{"sha": "6d55aed095e9fc49633e391ccf0778d41281d3a4", "filename": "src/comp/middle/check_alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -88,7 +88,7 @@ fn check_exhaustive(tcx: ty::ctxt, sp: span, pats: [@pat]) {\n         }));\n       }\n       ty::ty_tup(ts) {\n-        let cols = vec::init_elt_mut(ts.len(), []);\n+        let cols = vec::to_mut(vec::init_elt(ts.len(), []));\n         for p in pats {\n             alt raw_pat(p).node {\n               pat_tup(sub) {\n@@ -156,7 +156,7 @@ fn check_exhaustive_enum(tcx: ty::ctxt, enum_id: def_id, sp: span,\n     let variants = enum_variants(tcx, enum_id);\n     let columns_by_variant = vec::map(*variants, {|v|\n         {mutable seen: false,\n-         cols: vec::init_elt_mut(v.args.len(), [])}\n+         cols: vec::to_mut(vec::init_elt(v.args.len(), []))}\n     });\n \n     for pat in pats {"}, {"sha": "29200a47287f48b6acd388c98bf75b3e0c998796", "filename": "src/comp/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcomp%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcomp%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Falt.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -337,7 +337,7 @@ fn pick_col(m: match) -> uint {\n           _ { 0u }\n         }\n     }\n-    let scores = vec::init_elt_mut(m[0].pats.len(), 0u);\n+    let scores = vec::to_mut(vec::init_elt(m[0].pats.len(), 0u));\n     for br: match_branch in m {\n         let i = 0u;\n         for p: @ast::pat in br.pats { scores[i] += score(p); i += 1u; }"}, {"sha": "6947a6875c4913f4fff5dee9bfb2d742a9b791ca", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -741,7 +741,9 @@ fn make_generic_glue_inner(ccx: crate_ctxt, t: ty::t,\n         p += 1u;\n     }\n \n-    fcx.lltyparams = vec::map_mut(lltydescs, {|d| {desc: d, dicts: none}});\n+    fcx.lltyparams = vec::map(vec::from_mut(lltydescs), {|d|\n+        {desc: d, dicts: none}\n+    });\n \n     let bcx = top_scope_block(fcx, none);\n     let lltop = bcx.llbb;"}, {"sha": "df358a86004d070e800a88008c5ef6ea1598a04e", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -294,7 +294,7 @@ fn get_fn_info(ccx: crate_ctxt, id: node_id) -> fn_info {\n fn add_node(ccx: crate_ctxt, i: node_id, a: ts_ann) {\n     let sz = vec::len(*ccx.node_anns);\n     if sz <= i as uint {\n-        vec::grow_mut(*ccx.node_anns, (i as uint) - sz + 1u, empty_ann(0u));\n+        vec::grow(*ccx.node_anns, (i as uint) - sz + 1u, empty_ann(0u));\n     }\n     ccx.node_anns[i] = a;\n }"}, {"sha": "0b55bb8c356b5ddee981451e7b9fe9d0a7db7828", "filename": "src/comp/syntax/print/pp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -101,9 +101,9 @@ fn mk_printer(out: io::writer, linewidth: uint) -> printer {\n     // fall behind.\n     let n: uint = 3u * linewidth;\n     #debug(\"mk_printer %u\", linewidth);\n-    let token: [mutable token] = vec::init_elt_mut(n, EOF);\n-    let size: [mutable int] = vec::init_elt_mut(n, 0);\n-    let scan_stack: [mutable uint] = vec::init_elt_mut(n, 0u);\n+    let token: [mutable token] = vec::to_mut(vec::init_elt(n, EOF));\n+    let size: [mutable int] = vec::to_mut(vec::init_elt(n, 0));\n+    let scan_stack: [mutable uint] = vec::to_mut(vec::init_elt(n, 0u));\n     let print_stack: [print_stack_elt] = [];\n     @{out: out,\n       buf_len: n,"}, {"sha": "75855b63c8d29904ceb4c7062eedd3b428c0118b", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -229,7 +229,8 @@ fn check_expected_errors(expected_errors: [errors::expected_error],\n                          procres: procres) {\n \n     // true if we found the error in question\n-    let found_flags = vec::init_elt_mut(vec::len(expected_errors), false);\n+    let found_flags = vec::to_mut(vec::init_elt(\n+        vec::len(expected_errors), false));\n \n     if procres.status == 0 {\n         fatal(\"process did not return an error status\");"}, {"sha": "a101f5f3ba2c442d3069a915c1668b4873aa7379", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 20, "deletions": 86, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -96,23 +96,6 @@ fn init_fn<T>(n_elts: uint, op: init_op<T>) -> [T] {\n     ret v;\n }\n \n-// TODO: Remove me once we have slots.\n-/*\n-Function: init_fn_mut\n-\n-Creates and initializes a mutable vector.\n-\n-Creates a mutable vector of size `n_elts` and initializes the elements to\n-the value returned by the function `op`.\n-*/\n-fn init_fn_mut<T>(n_elts: uint, op: init_op<T>) -> [mutable T] {\n-    let v = [mutable];\n-    reserve(v, n_elts);\n-    let i: uint = 0u;\n-    while i < n_elts { v += [mutable op(i)]; i += 1u; }\n-    ret v;\n-}\n-\n /*\n Function: init_elt\n \n@@ -129,27 +112,10 @@ fn init_elt<T: copy>(n_elts: uint, t: T) -> [T] {\n     ret v;\n }\n \n-// TODO: Remove me once we have slots.\n-/*\n-Function: init_elt_mut\n-\n-Creates and initializes a mutable vector.\n-\n-Creates a mutable vector of size `n_elts` and initializes the elements\n-to the value `t`.\n-*/\n-fn init_elt_mut<T: copy>(n_elts: uint, t: T) -> [mutable T] {\n-    let v = [mutable];\n-    reserve(v, n_elts);\n-    let i: uint = 0u;\n-    while i < n_elts { v += [mutable t]; i += 1u; }\n-    ret v;\n-}\n-\n // FIXME: Possible typestate postcondition:\n // len(result) == len(v) (needs issue #586)\n /*\n-Function: to_mut\n+\n \n Produces a mutable vector from an immutable vector.\n */\n@@ -257,22 +223,6 @@ fn slice<T: copy>(v: [const T], start: uint, end: uint) -> [T] {\n     ret result;\n }\n \n-// TODO: Remove me once we have slots.\n-/*\n-Function: slice_mut\n-\n-Returns a copy of the elements from [`start`..`end`) from `v`.\n-*/\n-fn slice_mut<T: copy>(v: [const T], start: uint, end: uint) -> [mutable T] {\n-    assert (start <= end);\n-    assert (end <= len(v));\n-    let result = [mutable];\n-    reserve(result, end - start);\n-    let i = start;\n-    while i < end { result += [mutable v[i]]; i += 1u; }\n-    ret result;\n-}\n-\n /*\n Function: split\n \n@@ -438,25 +388,6 @@ fn grow<T: copy>(&v: [const T], n: uint, initval: T) {\n     while i < n { v += [initval]; i += 1u; }\n }\n \n-// TODO: Remove me once we have slots.\n-// FIXME: Can't grow take a [const T]\n-/*\n-Function: grow_mut\n-\n-Expands a vector in place, initializing the new elements to a given value\n-\n-Parameters:\n-\n-v - The vector to grow\n-n - The number of elements to add\n-initval - The value for the new elements\n-*/\n-fn grow_mut<T: copy>(&v: [mutable T], n: uint, initval: T) {\n-    reserve(v, next_power_of_two(len(v) + n));\n-    let i: uint = 0u;\n-    while i < n { v += [mutable initval]; i += 1u; }\n-}\n-\n /*\n Function: grow_fn\n \n@@ -488,7 +419,7 @@ of the vector, expands the vector by replicating `initval` to fill the\n intervening space.\n */\n fn grow_set<T: copy>(&v: [mutable T], index: uint, initval: T, val: T) {\n-    if index >= len(v) { grow_mut(v, index - len(v) + 1u, initval); }\n+    if index >= len(v) { grow(v, index - len(v) + 1u, initval); }\n     v[index] = val;\n }\n \n@@ -507,21 +438,6 @@ fn map<T, U>(v: [T], f: fn(T) -> U) -> [U] {\n     ret result;\n }\n \n-/*\n-Function: map_mut\n-\n-Apply a function to each element of a mutable vector and return the results\n-*/\n-fn map_mut<T: copy, U>(v: [const T], f: fn(T) -> U) -> [U] {\n-    let result = [];\n-    reserve(result, len(v));\n-    for elem: T in v {\n-        // copy satisfies alias checker\n-        result += [f(copy elem)];\n-    }\n-    ret result;\n-}\n-\n /*\n Function: map2\n \n@@ -1949,6 +1865,24 @@ mod tests {\n     fn test_windowed_() {\n         let _x = windowed (0u, [1u,2u,3u,4u,5u,6u]);\n     }\n+\n+    #[test]\n+    fn to_mut_no_copy() unsafe {\n+        let x = [1, 2, 3];\n+        let addr = unsafe::to_ptr(x);\n+        let x_mut = to_mut(x);\n+        let addr_mut = unsafe::to_ptr(x_mut);\n+        assert addr == addr_mut;\n+    }\n+\n+    #[test]\n+    fn from_mut_no_copy() unsafe {\n+        let x = [mut 1, 2, 3];\n+        let addr = unsafe::to_ptr(x);\n+        let x_imm = from_mut(x);\n+        let addr_imm = unsafe::to_ptr(x_imm);\n+        assert addr == addr_imm;\n+    }\n }\n \n // Local Variables:"}, {"sha": "eb9d21ac31eaf676c6fdff1c0e061a761b04b759", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -49,7 +49,7 @@ init - If true then the bits are initialized to 1, otherwise 0\n */\n fn create(nbits: uint, init: bool) -> t {\n     let elt = if init { !0u } else { 0u };\n-    let storage = vec::init_elt_mut::<uint>(nbits / uint_bits + 1u, elt);\n+    let storage = vec::to_mut(vec::init_elt(nbits / uint_bits + 1u, elt));\n     ret @{storage: storage, nbits: nbits};\n }\n \n@@ -117,7 +117,7 @@ Function: clone\n Makes a copy of a bitvector\n */\n fn clone(v: t) -> t {\n-    let storage = vec::init_elt_mut::<uint>(v.nbits / uint_bits + 1u, 0u);\n+    let storage = vec::to_mut(vec::init_elt(v.nbits / uint_bits + 1u, 0u));\n     let len = vec::len(v.storage);\n     uint::range(0u, len) {|i| storage[i] = v.storage[i]; };\n     ret @{storage: storage, nbits: v.nbits};"}, {"sha": "f12c72f80e14fe9ce2d742bcf4f495dae6f521f9", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -127,7 +127,7 @@ fn create<T: copy>() -> t<T> {\n         mutable nelts: 0u,\n         mutable lo: 0u,\n         mutable hi: 0u,\n-        mutable elts: vec::init_elt_mut(initial_capacity, none)\n+        mutable elts: vec::to_mut(vec::init_elt(initial_capacity, none))\n     };\n     repr as t::<T>\n }"}, {"sha": "62ef4839d6495372144fa42ae4aa632de9decf0a", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -212,7 +212,7 @@ err(fail_) - On failure. Use <fail_str> to get an error message.\n fn getopts(args: [str], opts: [opt]) -> result unsafe {\n     let n_opts = vec::len::<opt>(opts);\n     fn f(_x: uint) -> [optval] { ret []; }\n-    let vals = vec::init_fn_mut::<[optval]>(n_opts, f);\n+    let vals = vec::to_mut(vec::init_fn(n_opts, f));\n     let free: [str] = [];\n     let l = vec::len(args);\n     let i = 0u;"}, {"sha": "c2320e93f29b9baf6bbacda8b3ddaae8be74c392", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -243,7 +243,7 @@ mod chained {\n     }\n \n     fn chains<K: copy, V: copy>(nchains: uint) -> [mutable chain<K,V>] {\n-        ret vec::init_elt_mut(nchains, absent);\n+        ret vec::to_mut(vec::init_elt(nchains, absent));\n     }\n \n     fn foreach_entry<K: copy, V: copy>(chain0: chain<K,V>,"}, {"sha": "2f1f455dcc49378acb5f67d99dc3c6addaa74cc5", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -30,7 +30,7 @@ fn md4(msg: [u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n     }\n \n     let i = 0u, e = vec::len(msg);\n-    let x = vec::init_elt_mut(16u, 0u32);\n+    let x = vec::to_mut(vec::init_elt(16u, 0u32));\n     while i < e {\n         let aa = a, bb = b, cc = c, dd = d;\n "}, {"sha": "225d59b39e1b9057cedd33a63f874882490628f0", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -181,7 +181,7 @@ fn concat(v: [rope]) -> rope {\n     //Copy `v` into a mutable vector\n     let len   = vec::len(v);\n     if len == 0u { ret node::empty; }\n-    let ropes = vec::init_elt_mut(len, v[0]);\n+    let ropes = vec::to_mut(vec::init_elt(len, v[0]));\n     uint::range(1u, len) {|i|\n        ropes[i] = v[i];\n     }\n@@ -780,7 +780,7 @@ mod node {\n             //Firstly, split `str` in slices of hint_max_leaf_char_len\n             let leaves = uint::div_ceil(char_len, hint_max_leaf_char_len);\n             //Number of leaves\n-            let nodes  = vec::init_elt_mut(leaves, candidate);\n+            let nodes  = vec::to_mut(vec::init_elt(leaves, candidate));\n \n             let i = 0u;\n             let offset = byte_start;\n@@ -893,7 +893,7 @@ mod node {\n     }\n \n     fn serialize_node(node: @node) -> str unsafe {\n-        let buf = vec::init_elt_mut(byte_len(node), 0u8);\n+        let buf = vec::to_mut(vec::init_elt(byte_len(node), 0u8));\n         let offset = 0u;//Current position in the buffer\n         let it = leaf_iterator::start(node);\n         while true {\n@@ -1224,7 +1224,7 @@ mod node {\n         }\n \n         fn start(node: @node) -> t {\n-            let stack = vec::init_elt_mut(height(node)+1u, node);\n+            let stack = vec::to_mut(vec::init_elt(height(node)+1u, node));\n             ret {\n                 stack:             stack,\n                 mutable stackpos:  0"}, {"sha": "06702fc140af0f983c3db48591047a7d5944ceb7", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -274,13 +274,13 @@ fn mk_sha1() -> sha1 {\n         }\n     }\n     let st = {\n-        h: vec::init_elt_mut(digest_buf_len, 0u32),\n+        h: vec::to_mut(vec::init_elt(digest_buf_len, 0u32)),\n         mutable len_low: 0u32,\n         mutable len_high: 0u32,\n-        msg_block: vec::init_elt_mut(msg_block_len, 0u8),\n+        msg_block: vec::to_mut(vec::init_elt(msg_block_len, 0u8)),\n         mutable msg_block_idx: 0u,\n         mutable computed: false,\n-        work_buf: vec::init_elt_mut(work_buf_len, 0u32)\n+        work_buf: vec::to_mut(vec::init_elt(work_buf_len, 0u32))\n     };\n     let sh = st as sha1;\n     sh.reset();"}, {"sha": "b608ddf4a64ca1732f86fa632e08b74a7b222f59", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -73,7 +73,7 @@ fn contains_key<T: copy>(m: smallintmap<T>, key: uint) -> bool {\n // FIXME: Are these really useful?\n \n fn truncate<T: copy>(m: smallintmap<T>, len: uint) {\n-    m.v = vec::slice_mut::<option<T>>(m.v, 0u, len);\n+    m.v = vec::to_mut(vec::slice::<option<T>>(m.v, 0u, len));\n }\n \n fn max_key<T>(m: smallintmap<T>) -> uint {"}, {"sha": "d1b58d2fd8b19f1d9f543f64a3f137be83482920", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -6,9 +6,9 @@ import vec;\n fn fannkuch(n: int) -> int {\n     fn perm1init(i: uint) -> int { ret i as int; }\n \n-    let perm = vec::init_elt_mut(n as uint, 0);\n-    let perm1 = vec::init_fn_mut(n as uint, perm1init);\n-    let count = vec::init_elt_mut(n as uint, 0);\n+    let perm = vec::to_mut(vec::init_elt(n as uint, 0));\n+    let perm1 = vec::to_mut(vec::init_fn(n as uint, perm1init));\n+    let count = vec::to_mut(vec::init_elt(n as uint, 0));\n     let f = 0;\n     let i = 0;\n     let k = 0;"}, {"sha": "311960e526b8fae49eb193b599e82ea194ddffc8", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -35,7 +35,7 @@ fn eval_At_times_u(u: [const float], Au: [mutable float]) {\n }\n \n fn eval_AtA_times_u(u: [const float], AtAu: [mutable float]) {\n-    let v = vec::init_elt_mut(vec::len(u), 0.0);\n+    let v = vec::to_mut(vec::init_elt(vec::len(u), 0.0));\n     eval_A_times_u(u, v);\n     eval_At_times_u(v, AtAu);\n }\n@@ -48,8 +48,8 @@ fn main(args: [str]) {\n         1000u\n     };\n \n-    let u = vec::init_elt_mut(N, 1.0);\n-    let v = vec::init_elt_mut(N, 0.0);\n+    let u = vec::to_mut(vec::init_elt(N, 1.0));\n+    let v = vec::to_mut(vec::init_elt(N, 0.0));\n     let i = 0u;\n     while i < 10u {\n         eval_AtA_times_u(u, v);"}, {"sha": "c7c5c54c8d4334136ded469c140232134f348977", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "patch": "@@ -31,7 +31,9 @@ enum grid_t { grid_ctor(grid), }\n fn read_grid(f: io::reader) -> grid_t {\n     assert f.read_line() == \"9,9\"; /* assert first line is exactly \"9,9\" */\n \n-    let g = vec::init_fn(10u, {|_i| vec::init_elt_mut(10u, 0 as u8) });\n+    let g = vec::init_fn(10u, {|_i|\n+        vec::to_mut(vec::init_elt(10u, 0 as u8))\n+    });\n     while !f.eof() {\n         let comps = str::split_char(str::trim(f.read_line()), ',');\n         if vec::len(comps) >= 3u {\n@@ -129,7 +131,9 @@ fn write_grid(f: io::writer, g: grid_t) {\n fn main(args: [str]) {\n     let grid = if vec::len(args) == 1u {\n         // FIXME create sudoku inline since nested vec consts dont work yet\n-        let g = vec::init_fn(10u, {|_i| vec::init_elt_mut(10u, 0 as u8) });\n+        let g = vec::init_fn(10u, {|_i|\n+            vec::to_mut(vec::init_elt(10u, 0 as u8))\n+        });\n         g[0][1] = 4u8;\n         g[0][3] = 6u8;\n         g[0][7] = 3u8;"}]}