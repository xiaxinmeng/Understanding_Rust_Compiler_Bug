{"sha": "315730fb273c4d55c4c25d4fba2b68dcd6a54093", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNTczMGZiMjczYzRkNTVjNGMyNWQ0ZmJhMmI2OGRjZDZhNTQwOTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-11T22:40:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-11T23:05:39Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "7d7a342c44200e32783db6e73b2bd4a90857ac9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d7a342c44200e32783db6e73b2bd4a90857ac9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/315730fb273c4d55c4c25d4fba2b68dcd6a54093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/315730fb273c4d55c4c25d4fba2b68dcd6a54093", "html_url": "https://github.com/rust-lang/rust/commit/315730fb273c4d55c4c25d4fba2b68dcd6a54093", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/315730fb273c4d55c4c25d4fba2b68dcd6a54093/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa0db172de42a981a64730df146ccf3d737c5762", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0db172de42a981a64730df146ccf3d737c5762", "html_url": "https://github.com/rust-lang/rust/commit/aa0db172de42a981a64730df146ccf3d737c5762"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "107f6031c1156055ff6df9dbea95975e8e6659a3", "filename": "src/libcollections/bench.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibcollections%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibcollections%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbench.rs?ref=315730fb273c4d55c4c25d4fba2b68dcd6a54093", "patch": "@@ -67,8 +67,10 @@ macro_rules! map_find_rand_bench {\n         #[bench]\n         pub fn $name(b: &mut ::test::Bencher) {\n             use std::rand;\n+            use std::iter::IteratorExt;\n             use std::rand::Rng;\n             use test::black_box;\n+            use vec::Vec;\n \n             let mut map = $map::new();\n             let n: usize = $n;"}, {"sha": "460c897b6ad36eb209b088369435a941dff84d67", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=315730fb273c4d55c4c25d4fba2b68dcd6a54093", "patch": "@@ -67,6 +67,8 @@ pub use alloc::boxed;\n #[macro_use]\n mod macros;\n \n+#[cfg(test)] #[macro_use] mod bench;\n+\n pub mod binary_heap;\n mod bit;\n mod btree;\n@@ -104,8 +106,6 @@ pub mod btree_set {\n }\n \n \n-#[cfg(test)] #[macro_use] mod bench;\n-\n // FIXME(#14344) this shouldn't be necessary\n #[doc(hidden)]\n pub fn fixme_14344_be_sure_to_link_to_collections() {}"}, {"sha": "ef682902dfcf1c671ab1c08111f0dbde8a49850f", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=315730fb273c4d55c4c25d4fba2b68dcd6a54093", "patch": "@@ -84,14 +84,17 @@ use sys::thread_local as imp;\n ///     KEY.set(1 as *mut u8);\n /// }\n /// ```\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StaticKey {\n     /// Inner static TLS key (internals), created with by `INIT_INNER` in this\n     /// module.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub inner: StaticKeyInner,\n     /// Destructor for the TLS value.\n     ///\n     /// See `Key::new` for information about when the destructor runs and how\n     /// it runs.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub dtor: Option<unsafe extern fn(*mut u8)>,\n }\n \n@@ -128,6 +131,7 @@ pub struct Key {\n /// Constant initialization value for static TLS keys.\n ///\n /// This value specifies no destructor by default.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INIT: StaticKey = StaticKey {\n     inner: INIT_INNER,\n     dtor: None,"}, {"sha": "77d5503b683674b8e89d6ed2e31abe51b18f7779", "filename": "src/libstd/sys/unix/fs2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs?ref=315730fb273c4d55c4c25d4fba2b68dcd6a54093", "patch": "@@ -159,9 +159,7 @@ impl OpenOptions {\n             flags: 0,\n             read: false,\n             write: false,\n-            mode: libc::S_IRUSR | libc::S_IWUSR\n-                | libc::S_IRGRP | libc::S_IWGRP\n-                | libc::S_IROTH | libc::S_IWOTH,\n+            mode: 0o666,\n         }\n     }\n "}, {"sha": "eab9cd84539edabde17d286b322ae743f4f2c5fe", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=315730fb273c4d55c4c25d4fba2b68dcd6a54093", "patch": "@@ -452,6 +452,7 @@ mod imp {\n     }\n \n     #[doc(hidden)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe extern fn destroy_value<T>(ptr: *mut u8) {\n         let ptr = ptr as *mut Key<T>;\n         // Right before we run the user destructor be sure to flag the\n@@ -523,6 +524,7 @@ mod imp {\n     }\n \n     #[doc(hidden)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe extern fn destroy_value<T: 'static>(ptr: *mut u8) {\n         // The OS TLS ensures that this key contains a NULL value when this\n         // destructor starts to run. We set it back to a sentinel value of 1 to"}, {"sha": "cc468df87f3834fdd70a9432b4f38397db151fd3", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315730fb273c4d55c4c25d4fba2b68dcd6a54093/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=315730fb273c4d55c4c25d4fba2b68dcd6a54093", "patch": "@@ -40,7 +40,6 @@\n #![feature(hash)]\n #![feature(int_uint)]\n #![feature(io)]\n-#![feature(os)]\n #![feature(path)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n@@ -267,7 +266,7 @@ pub fn test_main(args: &[String], tests: Vec<TestDescAndFn> ) {\n // semantics into parallel test runners, which in turn requires a ~[]\n // rather than a &[].\n pub fn test_main_static(args: env::Args, tests: &[TestDescAndFn]) {\n-    let args = args.map(|s| s.into_string().unwrap()).collect::<Vec<_>>();\n+    let args = args.collect::<Vec<_>>();\n     let owned_tests = tests.iter().map(|t| {\n         match t.testfn {\n             StaticTestFn(f) => TestDescAndFn { testfn: StaticTestFn(f), desc: t.desc.clone() },"}]}