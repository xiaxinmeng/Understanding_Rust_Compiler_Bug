{"sha": "d4037fc47682ba3aa02656b3bfca962c28965936", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MDM3ZmM0NzY4MmJhM2FhMDI2NTZiM2JmY2E5NjJjMjg5NjU5MzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-16T21:15:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-16T21:15:13Z"}, "message": "Auto merge of #36444 - jseyfried:macro_rules_ext, r=nrc\n\nRemove variant `MacroRulesTT` of `SyntaxExtension`\n\nr? @nrc", "tree": {"sha": "d59a37df98d1dcc6859efc71a8af94a2373efe2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d59a37df98d1dcc6859efc71a8af94a2373efe2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4037fc47682ba3aa02656b3bfca962c28965936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4037fc47682ba3aa02656b3bfca962c28965936", "html_url": "https://github.com/rust-lang/rust/commit/d4037fc47682ba3aa02656b3bfca962c28965936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4037fc47682ba3aa02656b3bfca962c28965936/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55a61a1175b2a403d2b34ec2b2f904cc51a8952d", "url": "https://api.github.com/repos/rust-lang/rust/commits/55a61a1175b2a403d2b34ec2b2f904cc51a8952d", "html_url": "https://github.com/rust-lang/rust/commit/55a61a1175b2a403d2b34ec2b2f904cc51a8952d"}, {"sha": "f9a08cc9821a442380d15096e3d245c32617eea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a08cc9821a442380d15096e3d245c32617eea7", "html_url": "https://github.com/rust-lang/rust/commit/f9a08cc9821a442380d15096e3d245c32617eea7"}], "stats": {"total": 177, "additions": 63, "deletions": 114}, "files": [{"sha": "f07025910f07ef6cd2bfad901b51af4376a71255", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d4037fc47682ba3aa02656b3bfca962c28965936", "patch": "@@ -674,11 +674,11 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n         }\n         let features = sess.features.borrow();\n         let cfg = syntax::ext::expand::ExpansionConfig {\n-            crate_name: crate_name.to_string(),\n             features: Some(&features),\n             recursion_limit: sess.recursion_limit.get(),\n             trace_mac: sess.opts.debugging_opts.trace_macros,\n             should_test: sess.opts.test,\n+            ..syntax::ext::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n         let mut ecx = ExtCtxt::new(&sess.parse_sess, krate.config.clone(), cfg, &mut resolver);\n         let ret = syntax::ext::expand::expand_crate(&mut ecx, syntax_exts, krate);"}, {"sha": "8f0cc2c3d750f96e35e87943371531c6e9b60d3c", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=d4037fc47682ba3aa02656b3bfca962c28965936", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::transform::MirMapPass;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::{IdentTT, MultiModifier, MultiDecorator};\n-use syntax::ext::base::{MacroExpanderFn, MacroRulesTT};\n+use syntax::ext::base::MacroExpanderFn;\n use syntax::parse::token;\n use syntax::ast;\n use syntax::feature_gate::AttributeType;\n@@ -111,10 +111,6 @@ impl<'a> Registry<'a> {\n             }\n             MultiDecorator(ext) => MultiDecorator(ext),\n             MultiModifier(ext) => MultiModifier(ext),\n-            MacroRulesTT => {\n-                self.sess.err(\"plugin tried to register a new MacroRulesTT\");\n-                return;\n-            }\n         }));\n     }\n "}, {"sha": "9d0d74138cd4425403893e115db96f4e3baecdf7", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d4037fc47682ba3aa02656b3bfca962c28965936", "patch": "@@ -177,7 +177,8 @@ pub trait IdentMacroExpander {\n                    cx: &'cx mut ExtCtxt,\n                    sp: Span,\n                    ident: ast::Ident,\n-                   token_tree: Vec<tokenstream::TokenTree> )\n+                   token_tree: Vec<tokenstream::TokenTree>,\n+                   attrs: Vec<ast::Attribute>)\n                    -> Box<MacResult+'cx>;\n }\n \n@@ -193,7 +194,8 @@ impl<F> IdentMacroExpander for F\n                    cx: &'cx mut ExtCtxt,\n                    sp: Span,\n                    ident: ast::Ident,\n-                   token_tree: Vec<tokenstream::TokenTree> )\n+                   token_tree: Vec<tokenstream::TokenTree>,\n+                   _attrs: Vec<ast::Attribute>)\n                    -> Box<MacResult+'cx>\n     {\n         (*self)(cx, sp, ident, token_tree)\n@@ -455,9 +457,6 @@ pub enum SyntaxExtension {\n     /// the block.\n     ///\n     IdentTT(Box<IdentMacroExpander + 'static>, Option<Span>, bool),\n-\n-    /// Represents `macro_rules!` itself.\n-    MacroRulesTT,\n }\n \n pub type NamedSyntaxExtension = (Name, SyntaxExtension);"}, {"sha": "4e87d8ee9dda21a2312b7a8fc66573a4e9756c94", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 8, "deletions": 51, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d4037fc47682ba3aa02656b3bfca962c28965936", "patch": "@@ -12,7 +12,7 @@ use ast::{Block, Crate, Ident, Mac_, PatKind};\n use ast::{MacStmtStyle, StmtKind, ItemKind};\n use ast;\n use ext::hygiene::Mark;\n-use ext::placeholders::{self, placeholder, PlaceholderExpander};\n+use ext::placeholders::{placeholder, PlaceholderExpander};\n use attr::{self, HasAttrs};\n use codemap::{ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use syntax_pos::{self, Span, ExpnId};\n@@ -173,19 +173,12 @@ impl Invocation {\n \n pub struct MacroExpander<'a, 'b:'a> {\n     pub cx: &'a mut ExtCtxt<'b>,\n-    pub single_step: bool,\n-    pub keep_macs: bool,\n     monotonic: bool, // c.f. `cx.monotonic_expander()`\n }\n \n impl<'a, 'b> MacroExpander<'a, 'b> {\n     pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n-        MacroExpander {\n-            cx: cx,\n-            monotonic: monotonic,\n-            single_step: false,\n-            keep_macs: false,\n-        }\n+        MacroExpander { cx: cx, monotonic: monotonic }\n     }\n \n     fn expand_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n@@ -238,7 +231,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 expansions.push(Vec::new());\n             }\n             expansions[depth].push((mark.as_u32(), expansion));\n-            if !self.single_step {\n+            if !self.cx.ecfg.single_step {\n                 invocations.extend(new_invocations.into_iter().rev());\n             }\n         }\n@@ -381,47 +374,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     }\n                 });\n \n-                kind.make_from(expander.expand(self.cx, span, ident, marked_tts))\n-            }\n-\n-            MacroRulesTT => {\n-                if ident.name == keywords::Invalid.name() {\n-                    self.cx.span_err(path.span,\n-                                    &format!(\"macro {}! expects an ident argument\", extname));\n-                    return kind.dummy(span);\n-                };\n-\n-                self.cx.bt_push(ExpnInfo {\n-                    call_site: span,\n-                    callee: NameAndSpan {\n-                        format: MacroBang(extname),\n-                        span: None,\n-                        // `macro_rules!` doesn't directly allow unstable\n-                        // (this is orthogonal to whether the macro it creates allows it)\n-                        allow_internal_unstable: false,\n-                    }\n-                });\n-\n-                let def = ast::MacroDef {\n-                    ident: ident,\n-                    id: ast::DUMMY_NODE_ID,\n-                    span: span,\n-                    imported_from: None,\n-                    use_locally: true,\n-                    body: marked_tts,\n-                    export: attr::contains_name(&attrs, \"macro_export\"),\n-                    allow_internal_unstable: attr::contains_name(&attrs, \"allow_internal_unstable\"),\n-                    attrs: attrs,\n-                };\n-\n-                self.cx.insert_macro(def.clone());\n-\n-                // If keep_macs is true, expands to a MacEager::items instead.\n-                if self.keep_macs {\n-                    Some(placeholders::reconstructed_macro_rules(&def, &path))\n-                } else {\n-                    Some(placeholders::macro_scope_placeholder())\n-                }\n+                kind.make_from(expander.expand(self.cx, span, ident, marked_tts, attrs))\n             }\n \n             MultiDecorator(..) | MultiModifier(..) => {\n@@ -726,6 +679,8 @@ pub struct ExpansionConfig<'feat> {\n     pub recursion_limit: usize,\n     pub trace_mac: bool,\n     pub should_test: bool, // If false, strip `#[test]` nodes\n+    pub single_step: bool,\n+    pub keep_macs: bool,\n }\n \n macro_rules! feature_tests {\n@@ -749,6 +704,8 @@ impl<'feat> ExpansionConfig<'feat> {\n             recursion_limit: 64,\n             trace_mac: false,\n             should_test: false,\n+            single_step: false,\n+            keep_macs: false,\n         }\n     }\n "}, {"sha": "0ede6dd98e5b866e53c6d0b1eef1300faf0204e7", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=d4037fc47682ba3aa02656b3bfca962c28965936", "patch": "@@ -13,7 +13,7 @@ use codemap::{DUMMY_SP, dummy_spanned};\n use ext::base::ExtCtxt;\n use ext::expand::{Expansion, ExpansionKind};\n use fold::*;\n-use parse::token::keywords;\n+use parse::token::{intern, keywords};\n use ptr::P;\n use util::move_map::MoveMap;\n use util::small_vector::SmallVector;\n@@ -214,15 +214,22 @@ impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n     }\n }\n \n-pub fn reconstructed_macro_rules(def: &ast::MacroDef, path: &ast::Path) -> Expansion {\n+pub fn reconstructed_macro_rules(def: &ast::MacroDef) -> Expansion {\n     Expansion::Items(SmallVector::one(P(ast::Item {\n         ident: def.ident,\n         attrs: def.attrs.clone(),\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ItemKind::Mac(ast::Mac {\n             span: def.span,\n             node: ast::Mac_ {\n-                path: path.clone(),\n+                path: ast::Path {\n+                    span: DUMMY_SP,\n+                    global: false,\n+                    segments: vec![ast::PathSegment {\n+                        identifier: ast::Ident::with_empty_ctxt(intern(\"macro_rules\")),\n+                        parameters: ast::PathParameters::none(),\n+                    }],\n+                },\n                 tts: def.body.clone(),\n             }\n         }),"}, {"sha": "da82c9ffab1cb7a59065dea11518348df4aa1b1d", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d4037fc47682ba3aa02656b3bfca962c28965936", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast;\n+use {ast, attr};\n use syntax_pos::{Span, DUMMY_SP};\n-use ext::base::{DummyResult, ExtCtxt, MacResult, SyntaxExtension};\n-use ext::base::{NormalTT, TTMacroExpander};\n+use ext::base::{DummyResult, ExtCtxt, MacEager, MacResult, SyntaxExtension};\n+use ext::base::{IdentMacroExpander, NormalTT, TTMacroExpander};\n+use ext::placeholders;\n use ext::tt::macro_parser::{Success, Error, Failure};\n use ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use ext::tt::macro_parser::parse;\n@@ -242,6 +243,38 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n      cx.span_fatal(best_fail_spot.substitute_dummy(sp), &best_fail_msg[..]);\n }\n \n+pub struct MacroRulesExpander;\n+impl IdentMacroExpander for MacroRulesExpander {\n+    fn expand(&self,\n+              cx: &mut ExtCtxt,\n+              span: Span,\n+              ident: ast::Ident,\n+              tts: Vec<tokenstream::TokenTree>,\n+              attrs: Vec<ast::Attribute>)\n+              -> Box<MacResult> {\n+        let def = ast::MacroDef {\n+            ident: ident,\n+            id: ast::DUMMY_NODE_ID,\n+            span: span,\n+            imported_from: None,\n+            use_locally: true,\n+            body: tts,\n+            export: attr::contains_name(&attrs, \"macro_export\"),\n+            allow_internal_unstable: attr::contains_name(&attrs, \"allow_internal_unstable\"),\n+            attrs: attrs,\n+        };\n+\n+        cx.insert_macro(def.clone());\n+\n+        // If keep_macs is true, expands to a MacEager::items instead.\n+        if cx.ecfg.keep_macs {\n+            MacEager::items(placeholders::reconstructed_macro_rules(&def).make_items())\n+        } else {\n+            MacEager::items(placeholders::macro_scope_placeholder().make_items())\n+        }\n+    }\n+}\n+\n // Note that macro-by-example's input is also matched against a token tree:\n //                   $( $lhs:tt => $rhs:tt );+\n //"}, {"sha": "e0c028195bab08d35dd94f1c885d3dcc50a3653e", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4037fc47682ba3aa02656b3bfca962c28965936/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=d4037fc47682ba3aa02656b3bfca962c28965936", "patch": "@@ -50,16 +50,17 @@ pub mod deriving;\n \n use std::rc::Rc;\n use syntax::ast;\n-use syntax::ext::base::{MacroExpanderFn, MacroRulesTT, NormalTT, MultiModifier};\n+use syntax::ext::base::{MacroExpanderFn, NormalTT, IdentTT, MultiModifier};\n use syntax::ext::hygiene::Mark;\n+use syntax::ext::tt::macro_rules::MacroRulesExpander;\n use syntax::parse::token::intern;\n \n pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver, enable_quotes: bool) {\n     let mut register = |name, ext| {\n         resolver.add_macro(Mark::root(), ast::Ident::with_empty_ctxt(intern(name)), Rc::new(ext));\n     };\n \n-    register(\"macro_rules\", MacroRulesTT);\n+    register(\"macro_rules\", IdentTT(Box::new(MacroRulesExpander), None, false));\n \n     macro_rules! register {\n         ($( $name:ident: $f:expr, )*) => { $("}, {"sha": "9e693fcc56440fdee349c02e96b290ca71ead35d", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_MacroRulesTT.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/55a61a1175b2a403d2b34ec2b2f904cc51a8952d/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a61a1175b2a403d2b34ec2b2f904cc51a8952d/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs?ref=55a61a1175b2a403d2b34ec2b2f904cc51a8952d", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// force-host\n-\n-#![feature(plugin_registrar, rustc_private)]\n-\n-extern crate syntax;\n-extern crate rustc;\n-extern crate rustc_plugin;\n-\n-use syntax::parse::token;\n-use syntax::ext::base::MacroRulesTT;\n-use rustc_plugin::Registry;\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_syntax_extension(token::intern(\"bogus\"), MacroRulesTT);\n-}"}, {"sha": "e13ddd13f5d993f29eaee1015b82c1509a59d013", "filename": "src/test/compile-fail-fulldeps/plugin-MacroRulesTT.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55a61a1175b2a403d2b34ec2b2f904cc51a8952d/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-MacroRulesTT.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a61a1175b2a403d2b34ec2b2f904cc51a8952d/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-MacroRulesTT.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-MacroRulesTT.rs?ref=55a61a1175b2a403d2b34ec2b2f904cc51a8952d", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:macro_crate_MacroRulesTT.rs\n-// ignore-stage1\n-// error-pattern: plugin tried to register a new MacroRulesTT\n-\n-#![feature(plugin)]\n-#![plugin(macro_crate_MacroRulesTT)]\n-\n-fn main() { }"}]}