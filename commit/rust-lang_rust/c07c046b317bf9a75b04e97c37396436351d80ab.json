{"sha": "c07c046b317bf9a75b04e97c37396436351d80ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwN2MwNDZiMzE3YmY5YTc1YjA0ZTk3YzM3Mzk2NDM2MzUxZDgwYWI=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-13T08:36:04Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-17T15:49:50Z"}, "message": "refactor string_extend_chars: return when obj type is not string", "tree": {"sha": "858839164c0b3e0d84c80d4605bffcacc45dcf20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/858839164c0b3e0d84c80d4605bffcacc45dcf20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c07c046b317bf9a75b04e97c37396436351d80ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c07c046b317bf9a75b04e97c37396436351d80ab", "html_url": "https://github.com/rust-lang/rust/commit/c07c046b317bf9a75b04e97c37396436351d80ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c07c046b317bf9a75b04e97c37396436351d80ab/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "058d8c878ab51ccd65e636456207b3d63ee532b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/058d8c878ab51ccd65e636456207b3d63ee532b5", "html_url": "https://github.com/rust-lang/rust/commit/058d8c878ab51ccd65e636456207b3d63ee532b5"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "5c688ac56211ea45d380206e8f62d7d3adf62272", "filename": "clippy_lints/src/methods/string_extend_chars.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c07c046b317bf9a75b04e97c37396436351d80ab/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07c046b317bf9a75b04e97c37396436351d80ab/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs?ref=c07c046b317bf9a75b04e97c37396436351d80ab", "patch": "@@ -12,34 +12,35 @@ use super::STRING_EXTEND_CHARS;\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     let obj_ty = cx.typeck_results().expr_ty(&args[0]).peel_refs();\n-    if is_type_diagnostic_item(cx, obj_ty, sym::string_type) {\n-        let arg = &args[1];\n-        if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n-            let target = &arglists[0][0];\n-            let self_ty = cx.typeck_results().expr_ty(target).peel_refs();\n-            let ref_str = if *self_ty.kind() == ty::Str {\n-                \"\"\n-            } else if is_type_diagnostic_item(cx, self_ty, sym::string_type) {\n-                \"&\"\n-            } else {\n-                return;\n-            };\n+    if !is_type_diagnostic_item(cx, obj_ty, sym::string_type) {\n+        return;\n+    }\n+    let arg = &args[1];\n+    if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n+        let target = &arglists[0][0];\n+        let self_ty = cx.typeck_results().expr_ty(target).peel_refs();\n+        let ref_str = if *self_ty.kind() == ty::Str {\n+            \"\"\n+        } else if is_type_diagnostic_item(cx, self_ty, sym::string_type) {\n+            \"&\"\n+        } else {\n+            return;\n+        };\n \n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                STRING_EXTEND_CHARS,\n-                expr.span,\n-                \"calling `.extend(_.chars())`\",\n-                \"try this\",\n-                format!(\n-                    \"{}.push_str({}{})\",\n-                    snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability),\n-                    ref_str,\n-                    snippet_with_applicability(cx, target.span, \"..\", &mut applicability)\n-                ),\n-                applicability,\n-            );\n-        }\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_and_sugg(\n+            cx,\n+            STRING_EXTEND_CHARS,\n+            expr.span,\n+            \"calling `.extend(_.chars())`\",\n+            \"try this\",\n+            format!(\n+                \"{}.push_str({}{})\",\n+                snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability),\n+                ref_str,\n+                snippet_with_applicability(cx, target.span, \"..\", &mut applicability)\n+            ),\n+            applicability,\n+        );\n     }\n }"}]}