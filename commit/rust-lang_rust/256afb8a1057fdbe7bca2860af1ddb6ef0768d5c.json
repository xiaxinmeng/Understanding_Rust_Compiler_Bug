{"sha": "256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NmFmYjhhMTA1N2ZkYmU3YmNhMjg2MGFmMWRkYjZlZjA3NjhkNWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-01T21:30:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-03T00:49:31Z"}, "message": "libsyntax: Remove `fn@`, `fn~`, and `fn&` from libsyntax. rs=defun", "tree": {"sha": "4d766550ef686ca96c90c71fa3679af517093827", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d766550ef686ca96c90c71fa3679af517093827"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "html_url": "https://github.com/rust-lang/rust/commit/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97fd421319fda45d0d4c6a0906f29a228ec57b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/97fd421319fda45d0d4c6a0906f29a228ec57b42", "html_url": "https://github.com/rust-lang/rust/commit/97fd421319fda45d0d4c6a0906f29a228ec57b42"}], "stats": {"total": 375, "additions": 181, "deletions": 194}, "files": [{"sha": "96f4dadb3dbe9fce56260ebb84dbde0314848219", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 22, "deletions": 53, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "patch": "@@ -396,8 +396,8 @@ pub fn empty(range: id_range) -> bool {\n     range.min >= range.max\n }\n \n-pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n-    let visit_generics = fn@(generics: &Generics) {\n+pub fn id_visitor(vfn: @fn(node_id)) -> visit::vt<()> {\n+    let visit_generics: @fn(&Generics) = |generics| {\n         for generics.ty_params.each |p| {\n             vfn(p.id);\n         }\n@@ -408,7 +408,7 @@ pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n     visit::mk_simple_visitor(@visit::SimpleVisitor {\n         visit_mod: |_m, _sp, id| vfn(id),\n \n-        visit_view_item: fn@(vi: @view_item) {\n+        visit_view_item: |vi| {\n             match vi.node {\n               view_item_extern_mod(_, _, id) => vfn(id),\n               view_item_use(ref vps) => {\n@@ -423,11 +423,9 @@ pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n             }\n         },\n \n-        visit_foreign_item: fn@(ni: @foreign_item) {\n-            vfn(ni.id)\n-        },\n+        visit_foreign_item: |ni| vfn(ni.id),\n \n-        visit_item: fn@(i: @item) {\n+        visit_item: |i| {\n             vfn(i.id);\n             match i.node {\n               item_enum(ref enum_definition, _) =>\n@@ -436,36 +434,21 @@ pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n             }\n         },\n \n-        visit_local: fn@(l: @local) {\n-            vfn(l.node.id);\n-        },\n-\n-        visit_block: fn@(b: &blk) {\n-            vfn(b.node.id);\n-        },\n-\n-        visit_stmt: fn@(s: @stmt) {\n-            vfn(ast_util::stmt_id(*s));\n-        },\n-\n-        visit_arm: fn@(_a: &arm) { },\n-\n-        visit_pat: fn@(p: @pat) {\n-            vfn(p.id)\n-        },\n-\n-        visit_decl: fn@(_d: @decl) {\n-        },\n+        visit_local: |l| vfn(l.node.id),\n+        visit_block: |b| vfn(b.node.id),\n+        visit_stmt: |s| vfn(ast_util::stmt_id(*s)),\n+        visit_arm: |_| {},\n+        visit_pat: |p| vfn(p.id),\n+        visit_decl: |_| {},\n \n-        visit_expr: fn@(e: @expr) {\n+        visit_expr: |e| {\n             vfn(e.callee_id);\n             vfn(e.id);\n         },\n \n-        visit_expr_post: fn@(_e: @expr) {\n-        },\n+        visit_expr_post: |_| {},\n \n-        visit_ty: fn@(t: @Ty) {\n+        visit_ty: |t| {\n             match t.node {\n               ty_path(_, id) => vfn(id),\n               _ => { /* fall through */ }\n@@ -474,8 +457,7 @@ pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n \n         visit_generics: visit_generics,\n \n-        visit_fn: fn@(fk: &visit::fn_kind, d: &ast::fn_decl,\n-                      _b: &ast::blk, _sp: span, id: ast::node_id) {\n+        visit_fn: |fk, d, _, _, id| {\n             vfn(id);\n \n             match *fk {\n@@ -502,32 +484,19 @@ pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n             }\n         },\n \n-        visit_ty_method: fn@(_ty_m: &ty_method) {\n-        },\n-\n-        visit_trait_method: fn@(_ty_m: &trait_method) {\n-        },\n-\n-        visit_struct_def: fn@(_sd: @struct_def,\n-                              _id: ident,\n-                              _generics: &Generics,\n-                              _id: node_id) {\n-        },\n-\n-        visit_struct_field: fn@(f: @struct_field) {\n-            vfn(f.node.id);\n-        },\n-\n-        visit_struct_method: fn@(_m: @method) {\n-        }\n+        visit_ty_method: |_| {},\n+        visit_trait_method: |_| {},\n+        visit_struct_def: |_, _, _, _| {},\n+        visit_struct_field: |f| vfn(f.node.id),\n+        visit_struct_method: |_| {}\n     })\n }\n \n-pub fn visit_ids_for_inlined_item(item: inlined_item, vfn: fn@(node_id)) {\n+pub fn visit_ids_for_inlined_item(item: inlined_item, vfn: @fn(node_id)) {\n     item.accept((), id_visitor(vfn));\n }\n \n-pub fn compute_id_range(visit_ids_fn: fn(fn@(node_id))) -> id_range {\n+pub fn compute_id_range(visit_ids_fn: &fn(@fn(node_id))) -> id_range {\n     let min = @mut int::max_value;\n     let max = @mut int::min_value;\n     do visit_ids_fn |id| {"}, {"sha": "ba4ec7fb6db2795fcda2eb5a304db6b0eb48a01d", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "patch": "@@ -23,8 +23,9 @@ use core::dvec::DVec;\n \n use std::term;\n \n-pub type Emitter = fn@(cmsp: Option<(@codemap::CodeMap, span)>,\n-                   msg: &str, lvl: level);\n+pub type Emitter = @fn(cmsp: Option<(@codemap::CodeMap, span)>,\n+                       msg: &str,\n+                       lvl: level);\n \n // a handler deals with errors; certain errors\n // (fatal, bug, unimpl) may cause immediate exit,\n@@ -204,8 +205,7 @@ fn print_diagnostic(topic: ~str, lvl: level, msg: &str) {\n }\n \n pub fn collect(messages: @DVec<~str>)\n-    -> fn@(Option<(@codemap::CodeMap, span)>, &str, level)\n-{\n+            -> @fn(Option<(@codemap::CodeMap, span)>, &str, level) {\n     let f: @fn(Option<(@codemap::CodeMap, span)>, &str, level) =\n         |_o, msg: &str, _l| { messages.push(msg.to_str()); };\n     f"}, {"sha": "b3d3358e5861ee25cb9d7d4e049d95f80b56507e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "patch": "@@ -37,29 +37,39 @@ pub struct MacroDef {\n     ext: SyntaxExtension\n }\n \n-pub type ItemDecorator =\n-    fn@(ext_ctxt, span, @ast::meta_item, ~[@ast::item]) -> ~[@ast::item];\n+pub type ItemDecorator = @fn(ext_ctxt,\n+                             span,\n+                             @ast::meta_item,\n+                             ~[@ast::item])\n+                          -> ~[@ast::item];\n \n pub struct SyntaxExpanderTT {\n     expander: SyntaxExpanderTTFun,\n     span: Option<span>\n }\n \n-pub type SyntaxExpanderTTFun\n-    = fn@(ext_ctxt, span, &[ast::token_tree]) -> MacResult;\n+pub type SyntaxExpanderTTFun = @fn(ext_ctxt,\n+                                   span,\n+                                   &[ast::token_tree])\n+                                -> MacResult;\n \n pub struct SyntaxExpanderTTItem {\n     expander: SyntaxExpanderTTItemFun,\n     span: Option<span>\n }\n \n-pub type SyntaxExpanderTTItemFun\n-    = fn@(ext_ctxt, span, ast::ident, ~[ast::token_tree]) -> MacResult;\n+pub type SyntaxExpanderTTItemFun = @fn(ext_ctxt,\n+                                       span,\n+                                       ast::ident,\n+                                       ~[ast::token_tree])\n+                                    -> MacResult;\n \n pub enum MacResult {\n     MRExpr(@ast::expr),\n     MRItem(@ast::item),\n-    MRAny(fn@()-> @ast::expr, fn@()-> Option<@ast::item>, fn@()->@ast::stmt),\n+    MRAny(@fn() -> @ast::expr,\n+          @fn() -> Option<@ast::item>,\n+          @fn() -> @ast::stmt),\n     MRDef(MacroDef)\n }\n "}, {"sha": "858ce4b17a3ef7dbcad154c8f2cf3199913c4067", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "patch": "@@ -26,9 +26,12 @@ use core::option;\n use core::vec;\n use core::hashmap::LinearMap;\n \n-pub fn expand_expr(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n-                   e: &expr_, s: span, fld: ast_fold,\n-                   orig: fn@(&expr_, span, ast_fold) -> (expr_, span))\n+pub fn expand_expr(extsbox: @mut SyntaxEnv,\n+                   cx: ext_ctxt,\n+                   e: &expr_,\n+                   s: span,\n+                   fld: ast_fold,\n+                   orig: @fn(&expr_, span, ast_fold) -> (expr_, span))\n                 -> (expr_, span) {\n     match *e {\n         // expr_mac should really be expr_ext or something; it's the\n@@ -105,9 +108,11 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n //\n // NB: there is some redundancy between this and expand_item, below, and\n // they might benefit from some amount of semantic and language-UI merger.\n-pub fn expand_mod_items(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n-                        module_: &ast::_mod, fld: ast_fold,\n-                        orig: fn@(&ast::_mod, ast_fold) -> ast::_mod)\n+pub fn expand_mod_items(extsbox: @mut SyntaxEnv,\n+                        cx: ext_ctxt,\n+                        module_: &ast::_mod,\n+                        fld: ast_fold,\n+                        orig: @fn(&ast::_mod, ast_fold) -> ast::_mod)\n                      -> ast::_mod {\n     // Fold the contents first:\n     let module_ = orig(module_, fld);\n@@ -155,8 +160,10 @@ macro_rules! with_exts_frame (\n \n // When we enter a module, record it, for the sake of `module!`\n pub fn expand_item(extsbox: @mut SyntaxEnv,\n-                   cx: ext_ctxt, it: @ast::item, fld: ast_fold,\n-                   orig: fn@(@ast::item, ast_fold) -> Option<@ast::item>)\n+                   cx: ext_ctxt,\n+                   it: @ast::item,\n+                   fld: ast_fold,\n+                   orig: @fn(@ast::item, ast_fold) -> Option<@ast::item>)\n                 -> Option<@ast::item> {\n     // need to do expansion first... it might turn out to be a module.\n     let maybe_it = match it.node {\n@@ -296,11 +303,13 @@ pub fn expand_item_mac(+extsbox: @mut SyntaxEnv,\n }\n \n // expand a stmt\n-pub fn expand_stmt(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n-                   s: &stmt_, sp: span, fld: ast_fold,\n-                   orig: fn@(s: &stmt_, span, ast_fold) -> (stmt_, span))\n+pub fn expand_stmt(extsbox: @mut SyntaxEnv,\n+                   cx: ext_ctxt,\n+                   s: &stmt_,\n+                   sp: span,\n+                   fld: ast_fold,\n+                   orig: @fn(&stmt_, span, ast_fold) -> (stmt_, span))\n                 -> (stmt_, span) {\n-\n     let (mac, pth, tts, semi) = match *s {\n         stmt_mac(ref mac, semi) => {\n             match mac.node {\n@@ -356,10 +365,13 @@ pub fn expand_stmt(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n \n \n \n-pub fn expand_block(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n-                    blk: &blk_, sp: span, fld: ast_fold,\n-                    orig: fn@(&blk_, span, ast_fold) -> (blk_, span))\n-    -> (blk_, span) {\n+pub fn expand_block(extsbox: @mut SyntaxEnv,\n+                    cx: ext_ctxt,\n+                    blk: &blk_,\n+                    sp: span,\n+                    fld: ast_fold,\n+                    orig: @fn(&blk_, span, ast_fold) -> (blk_, span))\n+                 -> (blk_, span) {\n     match (*extsbox).find(&@~\" block\") {\n         // no scope limit on macros in this block, no need\n         // to push an exts frame:"}, {"sha": "af558e6b330d9b09c9f924913f098307d1716a34", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "patch": "@@ -42,9 +42,7 @@ pub fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n     fn parse_fmt_err_(cx: ext_ctxt, sp: span, msg: &str) -> ! {\n         cx.span_fatal(sp, msg);\n     }\n-    let parse_fmt_err = fn@(s: &str) -> ! {\n-        parse_fmt_err_(cx, fmtspan, s)\n-    };\n+    let parse_fmt_err: @fn(&str) -> ! = |s| parse_fmt_err_(cx, fmtspan, s);\n     let pieces = parse_fmt_string(fmt, parse_fmt_err);\n     MRExpr(pieces_to_expr(cx, sp, pieces, args))\n }"}, {"sha": "cd962d62e9cc10a3c808e9808ca031f953a6438d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 34, "deletions": 35, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "patch": "@@ -39,7 +39,7 @@ pub trait ast_fold {\n     fn fold_ident(@self, ident) -> ident;\n     fn fold_path(@self, @path) -> @path;\n     fn fold_local(@self, @local) -> @local;\n-    fn map_exprs(@self, fn@(@expr) -> @expr, &[@expr]) -> ~[@expr];\n+    fn map_exprs(@self, @fn(@expr) -> @expr, &[@expr]) -> ~[@expr];\n     fn new_id(@self, node_id) -> node_id;\n     fn new_span(@self, span) -> span;\n }\n@@ -48,29 +48,29 @@ pub trait ast_fold {\n \n pub struct AstFoldFns {\n     //unlike the others, item_ is non-trivial\n-    fold_crate: fn@(&crate_, span, ast_fold) -> (crate_, span),\n-    fold_view_item: fn@(view_item_, ast_fold) -> view_item_,\n-    fold_foreign_item: fn@(@foreign_item, ast_fold) -> @foreign_item,\n-    fold_item: fn@(@item, ast_fold) -> Option<@item>,\n-    fold_struct_field: fn@(@struct_field, ast_fold) -> @struct_field,\n-    fold_item_underscore: fn@(&item_, ast_fold) -> item_,\n-    fold_method: fn@(@method, ast_fold) -> @method,\n-    fold_block: fn@(&blk_, span, ast_fold) -> (blk_, span),\n-    fold_stmt: fn@(&stmt_, span, ast_fold) -> (stmt_, span),\n-    fold_arm: fn@(&arm, ast_fold) -> arm,\n-    fold_pat: fn@(&pat_, span, ast_fold) -> (pat_, span),\n-    fold_decl: fn@(&decl_, span, ast_fold) -> (decl_, span),\n-    fold_expr: fn@(&expr_, span, ast_fold) -> (expr_, span),\n-    fold_ty: fn@(&ty_, span, ast_fold) -> (ty_, span),\n-    fold_mod: fn@(&_mod, ast_fold) -> _mod,\n-    fold_foreign_mod: fn@(&foreign_mod, ast_fold) -> foreign_mod,\n-    fold_variant: fn@(&variant_, span, ast_fold) -> (variant_, span),\n-    fold_ident: fn@(ident, ast_fold) -> ident,\n-    fold_path: fn@(@path, ast_fold) -> path,\n-    fold_local: fn@(&local_, span, ast_fold) -> (local_, span),\n-    map_exprs: fn@(fn@(@expr) -> @expr, &[@expr]) -> ~[@expr],\n-    new_id: fn@(node_id) -> node_id,\n-    new_span: fn@(span) -> span\n+    fold_crate: @fn(&crate_, span, ast_fold) -> (crate_, span),\n+    fold_view_item: @fn(view_item_, ast_fold) -> view_item_,\n+    fold_foreign_item: @fn(@foreign_item, ast_fold) -> @foreign_item,\n+    fold_item: @fn(@item, ast_fold) -> Option<@item>,\n+    fold_struct_field: @fn(@struct_field, ast_fold) -> @struct_field,\n+    fold_item_underscore: @fn(&item_, ast_fold) -> item_,\n+    fold_method: @fn(@method, ast_fold) -> @method,\n+    fold_block: @fn(&blk_, span, ast_fold) -> (blk_, span),\n+    fold_stmt: @fn(&stmt_, span, ast_fold) -> (stmt_, span),\n+    fold_arm: @fn(&arm, ast_fold) -> arm,\n+    fold_pat: @fn(&pat_, span, ast_fold) -> (pat_, span),\n+    fold_decl: @fn(&decl_, span, ast_fold) -> (decl_, span),\n+    fold_expr: @fn(&expr_, span, ast_fold) -> (expr_, span),\n+    fold_ty: @fn(&ty_, span, ast_fold) -> (ty_, span),\n+    fold_mod: @fn(&_mod, ast_fold) -> _mod,\n+    fold_foreign_mod: @fn(&foreign_mod, ast_fold) -> foreign_mod,\n+    fold_variant: @fn(&variant_, span, ast_fold) -> (variant_, span),\n+    fold_ident: @fn(ident, ast_fold) -> ident,\n+    fold_path: @fn(@path, ast_fold) -> path,\n+    fold_local: @fn(&local_, span, ast_fold) -> (local_, span),\n+    map_exprs: @fn(@fn(@expr) -> @expr, &[@expr]) -> ~[@expr],\n+    new_id: @fn(node_id) -> node_id,\n+    new_span: @fn(span) -> span\n }\n \n pub type ast_fold_fns = @AstFoldFns;\n@@ -446,12 +446,12 @@ fn noop_fold_decl(d: &decl_, fld: @ast_fold) -> decl_ {\n     }\n }\n \n-pub fn wrap<T>(f: fn@(&T, ast_fold) -> T)\n-    -> fn@(&T, span, ast_fold) -> (T, span)\n-{\n-    fn@(x: &T, s: span, fld: @ast_fold) -> (T, span) {\n+pub fn wrap<T>(f: @fn(&T, ast_fold) -> T)\n+            -> @fn(&T, span, ast_fold) -> (T, span) {\n+    let result: @fn(&T, span, @ast_fold) -> (T, span) = |x, s, fld| {\n         (f(x, fld), s)\n-    }\n+    };\n+    result\n }\n \n pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n@@ -759,7 +759,7 @@ fn noop_fold_local(l: &local_, fld: @ast_fold) -> local_ {\n \n /* temporarily eta-expand because of a compiler bug with using `fn<T>` as a\n    value */\n-fn noop_map_exprs(f: fn@(@expr) -> @expr, es: &[@expr]) -> ~[@expr] {\n+fn noop_map_exprs(f: @fn(@expr) -> @expr, es: &[@expr]) -> ~[@expr] {\n     es.map(|x| f(*x))\n }\n \n@@ -893,11 +893,10 @@ impl ast_fold for AstFoldFns {\n         let (n, s) = (self.fold_local)(&x.node, x.span, self as @ast_fold);\n         @spanned { node: n, span: (self.new_span)(s) }\n     }\n-    fn map_exprs(\n-        @self,\n-        f: fn@(@expr) -> @expr,\n-        e: &[@expr]\n-    ) -> ~[@expr] {\n+    fn map_exprs(@self,\n+                 f: @fn(@expr) -> @expr,\n+                 e: &[@expr])\n+              -> ~[@expr] {\n         (self.map_exprs)(f, e)\n     }\n     fn new_id(@self, node_id: ast::node_id) -> node_id {"}, {"sha": "446c4b5f82868929f5b5c2b61845d4b7ccd49219", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "patch": "@@ -1822,8 +1822,8 @@ pub impl Parser {\n                                 || self.parse_expr())\n     }\n \n-    fn parse_lambda_expr_(parse_decl: fn&() -> fn_decl,\n-                          parse_body: fn&() -> @expr) -> @expr {\n+    fn parse_lambda_expr_(parse_decl: &fn() -> fn_decl,\n+                          parse_body: &fn() -> @expr) -> @expr {\n         let lo = self.last_span.lo;\n         let decl = parse_decl();\n         let body = parse_body();"}, {"sha": "62907506d46d1d992035781cc26f51de5693e1f5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "patch": "@@ -47,8 +47,8 @@ pub enum ann_node/& {\n     node_pat(@ps, @ast::pat),\n }\n pub struct pp_ann {\n-    pre: fn@(ann_node),\n-    post: fn@(ann_node)\n+    pre: @fn(ann_node),\n+    post: @fn(ann_node)\n }\n \n pub fn no_ann() -> pp_ann {\n@@ -2190,7 +2190,7 @@ pub fn print_string(s: @ps, st: ~str) {\n     word(s.s, ~\"\\\"\");\n }\n \n-pub fn to_str<T>(t: T, f: fn@(@ps, T), intr: @ident_interner) -> ~str {\n+pub fn to_str<T>(t: T, f: @fn(@ps, T), intr: @ident_interner) -> ~str {\n     do io::with_str_writer |wr| {\n         let s = rust_printer(wr, intr);\n         f(s, t);"}, {"sha": "5c4bd083f6a989a414aa833bd9aabc9677ca2cbc", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 70, "deletions": 71, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "patch": "@@ -71,27 +71,26 @@ pub fn generics_of_fn(fk: &fn_kind) -> Generics {\n }\n \n pub struct Visitor<E> {\n-    visit_mod: fn@(&_mod, span, node_id, E, vt<E>),\n-    visit_view_item: fn@(@view_item, E, vt<E>),\n-    visit_foreign_item: fn@(@foreign_item, E, vt<E>),\n-    visit_item: fn@(@item, E, vt<E>),\n-    visit_local: fn@(@local, E, vt<E>),\n-    visit_block: fn@(&blk, E, vt<E>),\n-    visit_stmt: fn@(@stmt, E, vt<E>),\n-    visit_arm: fn@(&arm, E, vt<E>),\n-    visit_pat: fn@(@pat, E, vt<E>),\n-    visit_decl: fn@(@decl, E, vt<E>),\n-    visit_expr: fn@(@expr, E, vt<E>),\n-    visit_expr_post: fn@(@expr, E, vt<E>),\n-    visit_ty: fn@(@Ty, E, vt<E>),\n-    visit_generics: fn@(&Generics, E, vt<E>),\n-    visit_fn: fn@(&fn_kind, &fn_decl, &blk, span, node_id, E, vt<E>),\n-    visit_ty_method: fn@(&ty_method, E, vt<E>),\n-    visit_trait_method: fn@(&trait_method, E, vt<E>),\n-    visit_struct_def: fn@(@struct_def, ident, &Generics, node_id, E,\n-                          vt<E>),\n-    visit_struct_field: fn@(@struct_field, E, vt<E>),\n-    visit_struct_method: fn@(@method, E, vt<E>)\n+    visit_mod: @fn(&_mod, span, node_id, E, vt<E>),\n+    visit_view_item: @fn(@view_item, E, vt<E>),\n+    visit_foreign_item: @fn(@foreign_item, E, vt<E>),\n+    visit_item: @fn(@item, E, vt<E>),\n+    visit_local: @fn(@local, E, vt<E>),\n+    visit_block: @fn(&blk, E, vt<E>),\n+    visit_stmt: @fn(@stmt, E, vt<E>),\n+    visit_arm: @fn(&arm, E, vt<E>),\n+    visit_pat: @fn(@pat, E, vt<E>),\n+    visit_decl: @fn(@decl, E, vt<E>),\n+    visit_expr: @fn(@expr, E, vt<E>),\n+    visit_expr_post: @fn(@expr, E, vt<E>),\n+    visit_ty: @fn(@Ty, E, vt<E>),\n+    visit_generics: @fn(&Generics, E, vt<E>),\n+    visit_fn: @fn(&fn_kind, &fn_decl, &blk, span, node_id, E, vt<E>),\n+    visit_ty_method: @fn(&ty_method, E, vt<E>),\n+    visit_trait_method: @fn(&trait_method, E, vt<E>),\n+    visit_struct_def: @fn(@struct_def, ident, &Generics, node_id, E, vt<E>),\n+    visit_struct_field: @fn(@struct_field, E, vt<E>),\n+    visit_struct_method: @fn(@method, E, vt<E>)\n }\n \n pub type visitor<E> = @Visitor<E>;\n@@ -603,26 +602,26 @@ pub fn visit_arm<E>(a: &arm, e: E, v: vt<E>) {\n // calls the given functions on the nodes.\n \n pub struct SimpleVisitor {\n-    visit_mod: fn@(&_mod, span, node_id),\n-    visit_view_item: fn@(@view_item),\n-    visit_foreign_item: fn@(@foreign_item),\n-    visit_item: fn@(@item),\n-    visit_local: fn@(@local),\n-    visit_block: fn@(&blk),\n-    visit_stmt: fn@(@stmt),\n-    visit_arm: fn@(&arm),\n-    visit_pat: fn@(@pat),\n-    visit_decl: fn@(@decl),\n-    visit_expr: fn@(@expr),\n-    visit_expr_post: fn@(@expr),\n-    visit_ty: fn@(@Ty),\n-    visit_generics: fn@(&Generics),\n-    visit_fn: fn@(&fn_kind, &fn_decl, &blk, span, node_id),\n-    visit_ty_method: fn@(&ty_method),\n-    visit_trait_method: fn@(&trait_method),\n-    visit_struct_def: fn@(@struct_def, ident, &Generics, node_id),\n-    visit_struct_field: fn@(@struct_field),\n-    visit_struct_method: fn@(@method)\n+    visit_mod: @fn(&_mod, span, node_id),\n+    visit_view_item: @fn(@view_item),\n+    visit_foreign_item: @fn(@foreign_item),\n+    visit_item: @fn(@item),\n+    visit_local: @fn(@local),\n+    visit_block: @fn(&blk),\n+    visit_stmt: @fn(@stmt),\n+    visit_arm: @fn(&arm),\n+    visit_pat: @fn(@pat),\n+    visit_decl: @fn(@decl),\n+    visit_expr: @fn(@expr),\n+    visit_expr_post: @fn(@expr),\n+    visit_ty: @fn(@Ty),\n+    visit_generics: @fn(&Generics),\n+    visit_fn: @fn(&fn_kind, &fn_decl, &blk, span, node_id),\n+    visit_ty_method: @fn(&ty_method),\n+    visit_trait_method: @fn(&trait_method),\n+    visit_struct_def: @fn(@struct_def, ident, &Generics, node_id),\n+    visit_struct_field: @fn(@struct_field),\n+    visit_struct_method: @fn(@method)\n }\n \n pub type simple_visitor = @SimpleVisitor;\n@@ -644,21 +643,19 @@ pub fn default_simple_visitor() -> @SimpleVisitor {\n         visit_expr: |_e| { },\n         visit_expr_post: |_e| { },\n         visit_ty: simple_ignore_ty,\n-        visit_generics: fn@(_ps: &Generics) { },\n-        visit_fn: fn@(_fk: &fn_kind, _d: &fn_decl, _b: &blk, _sp: span,\n-                      _id: node_id) { },\n-        visit_ty_method: fn@(_m: &ty_method) { },\n-        visit_trait_method: fn@(_m: &trait_method) { },\n-        visit_struct_def: fn@(_sd: @struct_def, _nm: ident,\n-                              _generics: &Generics, _id: node_id) { },\n-        visit_struct_field: fn@(_f: @struct_field) { },\n-        visit_struct_method: fn@(_m: @method) { }\n+        visit_generics: |_| {},\n+        visit_fn: |_, _, _, _, _| {},\n+        visit_ty_method: |_| {},\n+        visit_trait_method: |_| {},\n+        visit_struct_def: |_, _, _, _| {},\n+        visit_struct_field: |_| {},\n+        visit_struct_method: |_| {},\n     }\n }\n \n pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n     fn v_mod(\n-        f: fn@(&_mod, span, node_id),\n+        f: @fn(&_mod, span, node_id),\n         m: &_mod,\n         sp: span,\n         id: node_id,\n@@ -668,65 +665,67 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(m, sp, id);\n         visit_mod(m, sp, id, e, v);\n     }\n-    fn v_view_item(f: fn@(@view_item), vi: @view_item, &&e: (), v: vt<()>) {\n+    fn v_view_item(f: @fn(@view_item), vi: @view_item, &&e: (), v: vt<()>) {\n         f(vi);\n         visit_view_item(vi, e, v);\n     }\n-    fn v_foreign_item(f: fn@(@foreign_item), ni: @foreign_item, &&e: (),\n-                     v: vt<()>) {\n+    fn v_foreign_item(f: @fn(@foreign_item), ni: @foreign_item, &&e: (),\n+                      v: vt<()>) {\n         f(ni);\n         visit_foreign_item(ni, e, v);\n     }\n-    fn v_item(f: fn@(@item), i: @item, &&e: (), v: vt<()>) {\n+    fn v_item(f: @fn(@item), i: @item, &&e: (), v: vt<()>) {\n         f(i);\n         visit_item(i, e, v);\n     }\n-    fn v_local(f: fn@(@local), l: @local, &&e: (), v: vt<()>) {\n+    fn v_local(f: @fn(@local), l: @local, &&e: (), v: vt<()>) {\n         f(l);\n         visit_local(l, e, v);\n     }\n-    fn v_block(f: fn@(&blk), bl: &blk, &&e: (), v: vt<()>) {\n+    fn v_block(f: @fn(&ast::blk), bl: &ast::blk, &&e: (), v: vt<()>) {\n         f(bl);\n         visit_block(bl, e, v);\n     }\n-    fn v_stmt(f: fn@(@stmt), st: @stmt, &&e: (), v: vt<()>) {\n+    fn v_stmt(f: @fn(@stmt), st: @stmt, &&e: (), v: vt<()>) {\n         f(st);\n         visit_stmt(st, e, v);\n     }\n-    fn v_arm(f: fn@(&arm), a: &arm, &&e: (), v: vt<()>) {\n+    fn v_arm(f: @fn(&arm), a: &arm, &&e: (), v: vt<()>) {\n         f(a);\n         visit_arm(a, e, v);\n     }\n-    fn v_pat(f: fn@(@pat), p: @pat, &&e: (), v: vt<()>) {\n+    fn v_pat(f: @fn(@pat), p: @pat, &&e: (), v: vt<()>) {\n         f(p);\n         visit_pat(p, e, v);\n     }\n-    fn v_decl(f: fn@(@decl), d: @decl, &&e: (), v: vt<()>) {\n+    fn v_decl(f: @fn(@decl), d: @decl, &&e: (), v: vt<()>) {\n         f(d);\n         visit_decl(d, e, v);\n     }\n-    fn v_expr(f: fn@(@expr), ex: @expr, &&e: (), v: vt<()>) {\n+    fn v_expr(f: @fn(@expr), ex: @expr, &&e: (), v: vt<()>) {\n         f(ex);\n         visit_expr(ex, e, v);\n     }\n-    fn v_expr_post(f: fn@(@expr), ex: @expr, &&_e: (), _v: vt<()>) {\n+    fn v_expr_post(f: @fn(@expr), ex: @expr, &&_e: (), _v: vt<()>) {\n         f(ex);\n     }\n-    fn v_ty(f: fn@(@Ty), ty: @Ty, &&e: (), v: vt<()>) {\n+    fn v_ty(f: @fn(@Ty), ty: @Ty, &&e: (), v: vt<()>) {\n         f(ty);\n         visit_ty(ty, e, v);\n     }\n-    fn v_ty_method(f: fn@(&ty_method), ty: &ty_method, &&e: (), v: vt<()>) {\n+    fn v_ty_method(f: @fn(&ty_method), ty: &ty_method, &&e: (), v: vt<()>) {\n         f(ty);\n         visit_ty_method(ty, e, v);\n     }\n-    fn v_trait_method(f: fn@(&trait_method), m: &trait_method, &&e: (),\n+    fn v_trait_method(f: @fn(&trait_method),\n+                      m: &trait_method,\n+                      &&e: (),\n                       v: vt<()>) {\n         f(m);\n         visit_trait_method(m, e, v);\n     }\n     fn v_struct_def(\n-        f: fn@(@struct_def, ident, &Generics, node_id),\n+        f: @fn(@struct_def, ident, &Generics, node_id),\n         sd: @struct_def,\n         nm: ident,\n         generics: &Generics,\n@@ -738,7 +737,7 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         visit_struct_def(sd, nm, generics, id, e, v);\n     }\n     fn v_generics(\n-        f: fn@(&Generics),\n+        f: @fn(&Generics),\n         ps: &Generics,\n         &&e: (),\n         v: vt<()>\n@@ -747,7 +746,7 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         visit_generics(ps, e, v);\n     }\n     fn v_fn(\n-        f: fn@(&fn_kind, &fn_decl, &blk, span, node_id),\n+        f: @fn(&fn_kind, &fn_decl, &blk, span, node_id),\n         fk: &fn_kind,\n         decl: &fn_decl,\n         body: &blk,\n@@ -761,12 +760,12 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n     }\n     let visit_ty: @fn(@Ty, &&x: (), vt<()>) =\n         |a,b,c| v_ty(v.visit_ty, a, b, c);\n-    fn v_struct_field(f: fn@(@struct_field), sf: @struct_field, &&e: (),\n+    fn v_struct_field(f: @fn(@struct_field), sf: @struct_field, &&e: (),\n                       v: vt<()>) {\n         f(sf);\n         visit_struct_field(sf, e, v);\n     }\n-    fn v_struct_method(f: fn@(@method), m: @method, &&e: (), v: vt<()>) {\n+    fn v_struct_method(f: @fn(@method), m: @method, &&e: (), v: vt<()>) {\n         f(m);\n         visit_struct_method(m, e, v);\n     }"}]}