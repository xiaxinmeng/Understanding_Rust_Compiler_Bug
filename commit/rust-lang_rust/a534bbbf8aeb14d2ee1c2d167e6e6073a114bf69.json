{"sha": "a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "node_id": "C_kwDOAAsO6NoAKGE1MzRiYmJmOGFlYjE0ZDJlZTFjMmQxNjdlNmU2MDczYTExNGJmNjk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-11-25T22:13:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-11-25T22:13:33Z"}, "message": "portable SIMD: add rem intrinsic; test div and rem intrinsic UB", "tree": {"sha": "863b81eb02007a356e212807365450285044b89d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863b81eb02007a356e212807365450285044b89d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "html_url": "https://github.com/rust-lang/rust/commit/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f0faed6d24f14620eecaf0941ca321868c30f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0faed6d24f14620eecaf0941ca321868c30f34", "html_url": "https://github.com/rust-lang/rust/commit/4f0faed6d24f14620eecaf0941ca321868c30f34"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "547f23f620d2b1fd4c966d92870a46fcb7f4b840", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "patch": "@@ -306,7 +306,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // SIMD operations\n-            \"simd_add\" | \"simd_sub\" | \"simd_mul\" | \"simd_div\" => {\n+            \"simd_add\" | \"simd_sub\" | \"simd_mul\" | \"simd_div\" | \"simd_rem\" => {\n                 let &[ref left, ref right] = check_arg_count(args)?;\n                 let (left, left_len) = this.operand_to_simd(left)?;\n                 let (right, right_len) = this.operand_to_simd(right)?;\n@@ -320,6 +320,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"simd_sub\" => mir::BinOp::Sub,\n                     \"simd_mul\" => mir::BinOp::Mul,\n                     \"simd_div\" => mir::BinOp::Div,\n+                    \"simd_rem\" => mir::BinOp::Rem,\n                     _ => unreachable!(),\n                 };\n "}, {"sha": "d67d06dc1e6742fdbf7f3b3787a5ef223585268d", "filename": "tests/compile-fail/intrinsics/div-by-zero.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/tests%2Fcompile-fail%2Fintrinsics%2Fdiv-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/tests%2Fcompile-fail%2Fintrinsics%2Fdiv-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fdiv-by-zero.rs?ref=a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "previous_filename": "tests/compile-fail/intrinsics/div-by-zero-1.rs"}, {"sha": "e904049e3b466e7bef51486a3ea3f91008902056", "filename": "tests/compile-fail/intrinsics/rem-by-zero.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/tests%2Fcompile-fail%2Fintrinsics%2Frem-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/tests%2Fcompile-fail%2Fintrinsics%2Frem-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Frem-by-zero.rs?ref=a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "previous_filename": "tests/compile-fail/intrinsics/div-by-zero-2.rs"}, {"sha": "4244e63d23e5d891b88605c6728886fb7dbf4eba", "filename": "tests/compile-fail/intrinsics/simd-div-by-zero.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-by-zero.rs?ref=a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "patch": "@@ -0,0 +1,15 @@\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_div<T>(x: T, y: T) -> T;\n+}\n+\n+#[repr(simd)]\n+#[allow(non_camel_case_types)]\n+struct i32x2(i32, i32);\n+\n+fn main() { unsafe {\n+    let x = i32x2(1, 1);\n+    let y = i32x2(1, 0);\n+    simd_div(x, y); //~ERROR Undefined Behavior: dividing by zero\n+} }"}, {"sha": "bc3128b5fb5f1125519450a20a17ba40e5a27311", "filename": "tests/compile-fail/intrinsics/simd-rem-by-zero.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-rem-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-rem-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-rem-by-zero.rs?ref=a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "patch": "@@ -0,0 +1,15 @@\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_rem<T>(x: T, y: T) -> T;\n+}\n+\n+#[repr(simd)]\n+#[allow(non_camel_case_types)]\n+struct i32x2(i32, i32);\n+\n+fn main() { unsafe {\n+    let x = i32x2(1, 1);\n+    let y = i32x2(1, 0);\n+    simd_rem(x, y); //~ERROR Undefined Behavior: calculating the remainder with a divisor of zero\n+} }"}, {"sha": "2d94c87ff04285a1574baae90cde0ab82d658c22", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "patch": "@@ -9,6 +9,7 @@ fn simd_ops_f32() {\n     assert_eq!(a * b, f32x4::from_array([10.0, 20.0, 30.0, 40.0]));\n     assert_eq!(b / a, f32x4::from_array([0.1, 0.2, 0.3, 0.4]));\n     assert_eq!(a / 2.0, f32x4::splat(5.0));\n+    assert_eq!(a % b, f32x4::from_array([0.0, 0.0, 1.0, 2.0]));\n }\n \n fn simd_ops_i32() {\n@@ -19,6 +20,7 @@ fn simd_ops_i32() {\n     assert_eq!(a * b, i32x4::from_array([10, 20, 30, 40]));\n     assert_eq!(a / b, i32x4::from_array([10, 5, 3, 2]));\n     assert_eq!(a / 2, i32x4::splat(5));\n+    assert_eq!(a % b, i32x4::from_array([0, 0, 1, 2]));\n }\n \n fn main() {"}]}