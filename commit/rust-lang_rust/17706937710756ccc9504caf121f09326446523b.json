{"sha": "17706937710756ccc9504caf121f09326446523b", "node_id": "C_kwDOAAsO6NoAKDE3NzA2OTM3NzEwNzU2Y2NjOTUwNGNhZjEyMWYwOTMyNjQ0NjUyM2I", "commit": {"author": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2022-08-18T08:36:49Z"}, "committer": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2022-08-31T10:25:00Z"}, "message": "Correct typo", "tree": {"sha": "97aec5c93b47ac9d2f51005106a88acfe10d487e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97aec5c93b47ac9d2f51005106a88acfe10d487e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17706937710756ccc9504caf121f09326446523b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17706937710756ccc9504caf121f09326446523b", "html_url": "https://github.com/rust-lang/rust/commit/17706937710756ccc9504caf121f09326446523b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17706937710756ccc9504caf121f09326446523b/comments", "author": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fc39c1e324f7c511fdcf07c956eaca2e92b494", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fc39c1e324f7c511fdcf07c956eaca2e92b494", "html_url": "https://github.com/rust-lang/rust/commit/85fc39c1e324f7c511fdcf07c956eaca2e92b494"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "72b2c16a01f83b63ce9d1f448ab652c21aeb5450", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17706937710756ccc9504caf121f09326446523b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/17706937710756ccc9504caf121f09326446523b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=17706937710756ccc9504caf121f09326446523b", "patch": "@@ -1442,7 +1442,7 @@ Compatibility Notes\n - [Mixing Option and Result via `?` is no longer permitted in closures for inferred types.][86831]\n - [Previously unsound code is no longer permitted where different constructors in branches\n   could require different lifetimes.][85574]\n-- As previously mentioned the [`std::arch` intrinsic now uses stricter const checking][83278]\n+- As previously mentioned the [`std::arch` intrinsics now uses stricter const checking][83278]\n   than before and may reject some previously accepted code.\n - [`i128` multiplication on Cortex M0+ platforms currently unconditionally causes overflow\n    when compiled with `codegen-units = 1`.][86063]"}, {"sha": "39e9e784a478b12a68268e2fa6c0b6209f864365", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17706937710756ccc9504caf121f09326446523b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17706937710756ccc9504caf121f09326446523b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=17706937710756ccc9504caf121f09326446523b", "patch": "@@ -203,7 +203,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             sym::transmute => {\n                 crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n             }\n-            _ => unimplemented!(\"unsupported intrinsics {}\", intrinsic),\n+            _ => unimplemented!(\"unsupported intrinsic {}\", intrinsic),\n         }\n         return;\n     };"}, {"sha": "1958745b5868c79f240b45087db2c272608503ce", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17706937710756ccc9504caf121f09326446523b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17706937710756ccc9504caf121f09326446523b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=17706937710756ccc9504caf121f09326446523b", "patch": "@@ -2321,7 +2321,7 @@ impl<T> [T] {\n     }\n \n     /// Binary searches this slice for a given element.\n-    /// This behaves similar to [`contains`] if this slice is sorted.\n+    /// This behaves similarly to [`contains`] if this slice is sorted.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any"}, {"sha": "43ab8c7ee659f5e08d6d7815c27c2d3ff21897c8", "filename": "library/std/src/sys/windows/cmath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17706937710756ccc9504caf121f09326446523b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17706937710756ccc9504caf121f09326446523b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcmath.rs?ref=17706937710756ccc9504caf121f09326446523b", "patch": "@@ -44,7 +44,7 @@ mod shims {\n }\n \n // On 32-bit x86 MSVC these functions aren't defined, so we just define shims\n-// which promote everything for f64, perform the calculation, and then demote\n+// which promote everything to f64, perform the calculation, and then demote\n // back to f32. While not precisely correct should be \"correct enough\" for now.\n #[cfg(all(target_env = \"msvc\", target_arch = \"x86\"))]\n mod shims {"}]}