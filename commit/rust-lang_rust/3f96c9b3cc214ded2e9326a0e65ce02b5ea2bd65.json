{"sha": "3f96c9b3cc214ded2e9326a0e65ce02b5ea2bd65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOTZjOWIzY2MyMTRkZWQyZTkzMjZhMGU2NWNlMDJiNWVhMmJkNjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-12T15:45:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-12T15:45:21Z"}, "message": "Merge #6137\n\n6137: add a new TextMate grammar r=matklad a=dustypomerleau\n\nThanks to everyone working hard on Rust Analyzer - my impression is that it's quickly becoming the community default.\r\n\r\nI think it would be helpful to have a more robust TextMate grammar to fall back on, for those who wish to disable semantic highlighting for any reason. It should allow theming of punctuation, and provide scopes for all tokens on the page. This can be done at zero cost to those who enable semantic highlighting, as the TextMate scopes will be invisible to those users.\r\n\r\nI can see a couple ways of accomplishing this:\r\n\r\n1. Ship a new grammar by merging this PR.\r\n1. Ship no TextMate grammar at all (like the [Rust](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust) extension), and allow users to install a separate extension that provides the grammar of their choice (I have released this one as [Rust Syntax](https://marketplace.visualstudio.com/items?itemName=dustypomerleau.rust-syntax)). If no grammar were installed, they would simply fall back to the default grammar provided by their editor. In the case of VS Code, the default grammar already matches what is currently being shipped, so users who choose not to override it would see no difference.\r\n\r\nI have tried to choose sensible default scopes, in the hopes that a wider variety of themes would work out of the box with Rust, even if those themes do not yet supply scopes for semantic highlighting. There is definitely some interest in using this grammar with Rust Analyzer, as this was the very first issue after the syntax extension was shipped: https://github.com/dustypomerleau/rust-syntax/issues/1.\r\n\r\nI considered simply using an alternative grammar alongside Rust Analyzer, but this doesn't seem possible. When RA starts, any existing grammar/extension is overridden, and I haven't been able to find a workaround.\r\n\n\nCo-authored-by: Dusty Pomerleau <dustypomerleau@users.noreply.github.com>", "tree": {"sha": "6f63f40cfa5c337cf922883ddcbc73a80c407ad7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f63f40cfa5c337cf922883ddcbc73a80c407ad7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f96c9b3cc214ded2e9326a0e65ce02b5ea2bd65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhHoRCRBK7hj4Ov3rIwAAdHIIAAPQJRct6oqlKMMAEIuRRJv3\n4suRNVeEg2L0LsmQAdzEDa1LdR1ikziUgKA3iVlHWfeqaoNdYjR4Qi5nnZ7Fpxna\nX3T+jAzXbwhg0dWy7AMTo8mDDUot84SVE694I5UZiG9YGrtySEV4hsXZ+eKyK1Pn\ng3LMTGrGS0pA2xCrbv1nIu9OoeuZDWGCw92CTOoYn1XKEi9IxoCtnWWySLrAB28K\nQ8uUPaCJxOjZNhEyvJiVBBtJ/Z+VASdu2j6WCvrceAA5YPNCepOAzLxTmPPnxA5L\nRerLzr5urrIGyDMiQV/8IucdjSQw2qQLRu3+yYp0qnXA4yInuq1FfrU8QMd4QJA=\n=H9x9\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f63f40cfa5c337cf922883ddcbc73a80c407ad7\nparent 05faeb50f3d78aac24b9581e846d010d815d7747\nparent 49d824a99d3bc344eb03a9139f1fb99a0e5d30c0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602517521 +0000\ncommitter GitHub <noreply@github.com> 1602517521 +0000\n\nMerge #6137\n\n6137: add a new TextMate grammar r=matklad a=dustypomerleau\n\nThanks to everyone working hard on Rust Analyzer - my impression is that it's quickly becoming the community default.\r\n\r\nI think it would be helpful to have a more robust TextMate grammar to fall back on, for those who wish to disable semantic highlighting for any reason. It should allow theming of punctuation, and provide scopes for all tokens on the page. This can be done at zero cost to those who enable semantic highlighting, as the TextMate scopes will be invisible to those users.\r\n\r\nI can see a couple ways of accomplishing this:\r\n\r\n1. Ship a new grammar by merging this PR.\r\n1. Ship no TextMate grammar at all (like the [Rust](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust) extension), and allow users to install a separate extension that provides the grammar of their choice (I have released this one as [Rust Syntax](https://marketplace.visualstudio.com/items?itemName=dustypomerleau.rust-syntax)). If no grammar were installed, they would simply fall back to the default grammar provided by their editor. In the case of VS Code, the default grammar already matches what is currently being shipped, so users who choose not to override it would see no difference.\r\n\r\nI have tried to choose sensible default scopes, in the hopes that a wider variety of themes would work out of the box with Rust, even if those themes do not yet supply scopes for semantic highlighting. There is definitely some interest in using this grammar with Rust Analyzer, as this was the very first issue after the syntax extension was shipped: https://github.com/dustypomerleau/rust-syntax/issues/1.\r\n\r\nI considered simply using an alternative grammar alongside Rust Analyzer, but this doesn't seem possible. When RA starts, any existing grammar/extension is overridden, and I haven't been able to find a workaround.\r\n\n\nCo-authored-by: Dusty Pomerleau <dustypomerleau@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f96c9b3cc214ded2e9326a0e65ce02b5ea2bd65", "html_url": "https://github.com/rust-lang/rust/commit/3f96c9b3cc214ded2e9326a0e65ce02b5ea2bd65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f96c9b3cc214ded2e9326a0e65ce02b5ea2bd65/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05faeb50f3d78aac24b9581e846d010d815d7747", "url": "https://api.github.com/repos/rust-lang/rust/commits/05faeb50f3d78aac24b9581e846d010d815d7747", "html_url": "https://github.com/rust-lang/rust/commit/05faeb50f3d78aac24b9581e846d010d815d7747"}, {"sha": "49d824a99d3bc344eb03a9139f1fb99a0e5d30c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/49d824a99d3bc344eb03a9139f1fb99a0e5d30c0", "html_url": "https://github.com/rust-lang/rust/commit/49d824a99d3bc344eb03a9139f1fb99a0e5d30c0"}], "stats": {"total": 1725, "additions": 1041, "deletions": 684}, "files": [{"sha": "3ddd14f9cde43afcc024cb0562c3e33e0eca53de", "filename": "editors/code/rust.tmGrammar.json", "status": "modified", "additions": 1041, "deletions": 684, "changes": 1725, "blob_url": "https://github.com/rust-lang/rust/blob/3f96c9b3cc214ded2e9326a0e65ce02b5ea2bd65/editors%2Fcode%2Frust.tmGrammar.json", "raw_url": "https://github.com/rust-lang/rust/raw/3f96c9b3cc214ded2e9326a0e65ce02b5ea2bd65/editors%2Fcode%2Frust.tmGrammar.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Frust.tmGrammar.json?ref=3f96c9b3cc214ded2e9326a0e65ce02b5ea2bd65", "patch": "@@ -1,686 +1,1043 @@\n {\n-\t\"name\": \"Rust\",\n-\t\"scopeName\": \"source.rust\",\n-\t\"patterns\": [\n-\t\t{\n-\t\t\t\"comment\": \"Implementation\",\n-\t\t\t\"begin\": \"\\\\b(impl)\\\\b\",\n-\t\t\t\"end\": \"\\\\{\",\n-\t\t\t\"beginCaptures\": {\n-\t\t\t\t\"1\": {\n-\t\t\t\t\t\"name\": \"storage.type.rust\"\n-\t\t\t\t}\n-\t\t\t},\n-\t\t\t\"patterns\": [\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#block_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#line_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#sigils\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#mut\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#dyn\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#ref_lifetime\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_types\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_marker\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_traits\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#std_types\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#std_traits\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#type_params\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#where\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"name\": \"storage.type.rust\",\n-\t\t\t\t\t\"match\": \"\\\\bfor\\\\b\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#type\"\n-\t\t\t\t}\n-\t\t\t]\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#block_doc_comment\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#block_comment\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#line_doc_comment\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#line_comment\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Attribute\",\n-\t\t\t\"name\": \"meta.attribute.rust\",\n-\t\t\t\"begin\": \"#\\\\!?\\\\[(\\\\w*)\",\n-\t\t\t\"end\": \"\\\\]\",\n-\t\t\t\"captures\": {\n-\t\t\t\t\"1\": {\n-\t\t\t\t\t\"name\": \"entity.name.function.attribute.rust\"\n-\t\t\t\t}\n-\t\t\t},\n-\t\t\t\"patterns\": [\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#string_literal\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#block_doc_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#block_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#line_doc_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#line_comment\"\n-\t\t\t\t}\n-\t\t\t]\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Single-quote string literal (character)\",\n-\t\t\t\"name\": \"string.quoted.single.rust\",\n-\t\t\t\"match\": \"b?'([^'\\\\\\\\]|\\\\\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#string_literal\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#raw_string_literal\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Floating point literal (fraction)\",\n-\t\t\t\"name\": \"constant.numeric.float.rust\",\n-\t\t\t\"match\": \"\\\\b[0-9][0-9_]*\\\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Floating point literal (exponent)\",\n-\t\t\t\"name\": \"constant.numeric.float.rust\",\n-\t\t\t\"match\": \"\\\\b[0-9][0-9_]*(\\\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Floating point literal (typed)\",\n-\t\t\t\"name\": \"constant.numeric.float.rust\",\n-\t\t\t\"match\": \"\\\\b[0-9][0-9_]*(\\\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?(f32|f64)\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Integer literal (decimal)\",\n-\t\t\t\"name\": \"constant.numeric.integer.decimal.rust\",\n-\t\t\t\"match\": \"\\\\b[0-9][0-9_]*([ui](8|16|32|64|128|s|size))?\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Integer literal (hexadecimal)\",\n-\t\t\t\"name\": \"constant.numeric.integer.hexadecimal.rust\",\n-\t\t\t\"match\": \"\\\\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128|s|size))?\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Integer literal (octal)\",\n-\t\t\t\"name\": \"constant.numeric.integer.octal.rust\",\n-\t\t\t\"match\": \"\\\\b0o[0-7_]+([ui](8|16|32|64|128|s|size))?\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Integer literal (binary)\",\n-\t\t\t\"name\": \"constant.numeric.integer.binary.rust\",\n-\t\t\t\"match\": \"\\\\b0b[01_]+([ui](8|16|32|64|128|s|size))?\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Static storage modifier\",\n-\t\t\t\"name\": \"storage.modifier.static.rust\",\n-\t\t\t\"match\": \"\\\\bstatic\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Boolean constant\",\n-\t\t\t\"name\": \"constant.language.boolean.rust\",\n-\t\t\t\"match\": \"\\\\b(true|false)\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Control keyword\",\n-\t\t\t\"name\": \"keyword.control.rust\",\n-\t\t\t\"match\": \"\\\\b(async|await|break|continue|else|if|in|for|loop|match|return|try|while)\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Keyword\",\n-\t\t\t\"name\": \"keyword.other.rust\",\n-\t\t\t\"match\": \"\\\\b(crate|extern|mod|let|ref|use|super|move|as)\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Reserved keyword\",\n-\t\t\t\"name\": \"invalid.deprecated.rust\",\n-\t\t\t\"match\": \"\\\\b(abstract|alignof|become|do|final|macro|offsetof|override|priv|proc|pure|sizeof|typeof|virtual|yield)\\\\b\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#unsafe\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#sigils\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#self\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#mut\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#dyn\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#impl\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#box\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#lifetime\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#ref_lifetime\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#const\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#pub\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Miscellaneous operator\",\n-\t\t\t\"name\": \"keyword.operator.misc.rust\",\n-\t\t\t\"match\": \"(=>|::|\\\\?)\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Comparison operator\",\n-\t\t\t\"name\": \"keyword.operator.comparison.rust\",\n-\t\t\t\"match\": \"(&&|\\\\|\\\\||==|!=)\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Assignment operator\",\n-\t\t\t\"name\": \"keyword.operator.assignment.rust\",\n-\t\t\t\"match\": \"(\\\\+=|-=|/=|\\\\*=|%=|\\\\^=|&=|\\\\|=|<<=|>>=|=)\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Arithmetic operator\",\n-\t\t\t\"name\": \"keyword.operator.arithmetic.rust\",\n-\t\t\t\"match\": \"(!|\\\\+|-|/|\\\\*|%|\\\\^|&|\\\\||<<|>>)\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Comparison operator (second group because of regex precedence)\",\n-\t\t\t\"name\": \"keyword.operator.comparison.rust\",\n-\t\t\t\"match\": \"(<=|>=|<|>)\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#core_types\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#core_vars\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#core_marker\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#core_traits\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#std_types\"\n-\t\t},\n-\t\t{\n-\t\t\t\"include\": \"#std_traits\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Built-in macro\",\n-\t\t\t\"name\": \"support.function.builtin.rust\",\n-\t\t\t\"match\": \"\\\\b(macro_rules|compile_error|format_args|env|option_env|concat_idents|concat|line|column|file|stringify|include|include_str|include_bytes|module_path|cfg)!\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Core macro\",\n-\t\t\t\"name\": \"support.function.core.rust\",\n-\t\t\t\"match\": \"\\\\b(panic|assert|assert_eq|assert_ne|debug_assert|debug_assert_eq|debug_assert_ne|try|write|writeln|unreachable|unimplemented)!\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Standard library macro\",\n-\t\t\t\"name\": \"support.function.std.rust\",\n-\t\t\t\"match\": \"\\\\b(format|print|println|eprint|eprintln|select|vec)!\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Logging macro\",\n-\t\t\t\"name\": \"support.function.log.rust\",\n-\t\t\t\"match\": \"\\\\b(log|error|warn|info|debug|trace|log_enabled)!\"\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Invocation of a macro\",\n-\t\t\t\"match\": \"\\\\b([a-zA-Z_][a-zA-Z0-9_]*\\\\!)\\\\s*[({\\\\[]\",\n-\t\t\t\"captures\": {\n-\t\t\t\t\"1\": {\n-\t\t\t\t\t\"name\": \"entity.name.function.macro.rust\"\n-\t\t\t\t}\n-\t\t\t}\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Function call\",\n-\t\t\t\"match\": \"\\\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\\\s*\\\\(\",\n-\t\t\t\"captures\": {\n-\t\t\t\t\"1\": {\n-\t\t\t\t\t\"name\": \"entity.name.function.rust\"\n-\t\t\t\t}\n-\t\t\t}\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Function call with type parameters\",\n-\t\t\t\"begin\": \"\\\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\\\s*(::)(?=\\\\s*<.*>\\\\s*\\\\()\",\n-\t\t\t\"end\": \"\\\\(\",\n-\t\t\t\"captures\": {\n-\t\t\t\t\"1\": {\n-\t\t\t\t\t\"name\": \"entity.name.function.rust\"\n-\t\t\t\t},\n-\t\t\t\t\"2\": {\n-\t\t\t\t\t\"name\": \"keyword.operator.misc.rust\"\n-\t\t\t\t}\n-\t\t\t},\n-\t\t\t\"patterns\": [\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#type_params\"\n-\t\t\t\t}\n-\t\t\t]\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Function definition\",\n-\t\t\t\"begin\": \"\\\\b(fn)\\\\s+([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\",\n-\t\t\t\"end\": \"[\\\\{;]\",\n-\t\t\t\"beginCaptures\": {\n-\t\t\t\t\"1\": {\n-\t\t\t\t\t\"name\": \"keyword.other.fn.rust\"\n-\t\t\t\t},\n-\t\t\t\t\"2\": {\n-\t\t\t\t\t\"name\": \"entity.name.function.rust\"\n-\t\t\t\t}\n-\t\t\t},\n-\t\t\t\"patterns\": [\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#block_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#line_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#sigils\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#self\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#mut\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#dyn\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#impl\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#ref_lifetime\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_types\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_marker\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_traits\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#std_types\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#std_traits\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#type_params\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#const\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#where\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#unsafe\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"comment\": \"Function arguments\",\n-\t\t\t\t\t\"match\": \"\\bfn\\b\",\n-\t\t\t\t\t\"name\": \"keyword.other.fn.rust\"\n-\t\t\t\t}\n-\t\t\t]\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Type declaration\",\n-\t\t\t\"begin\": \"\\\\b(enum|struct|trait|union)\\\\s+([a-zA-Z_][a-zA-Z0-9_]*)\",\n-\t\t\t\"end\": \"[\\\\{\\\\(;]\",\n-\t\t\t\"beginCaptures\": {\n-\t\t\t\t\"1\": {\n-\t\t\t\t\t\"name\": \"storage.type.rust\"\n-\t\t\t\t},\n-\t\t\t\t\"2\": {\n-\t\t\t\t\t\"name\": \"entity.name.type.rust\"\n-\t\t\t\t}\n-\t\t\t},\n-\t\t\t\"patterns\": [\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#block_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#line_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_traits\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#std_traits\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#type_params\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_types\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#pub\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#where\"\n-\t\t\t\t}\n-\t\t\t]\n-\t\t},\n-\t\t{\n-\t\t\t\"comment\": \"Type alias\",\n-\t\t\t\"begin\": \"\\\\b(type)\\\\s+([a-zA-Z_][a-zA-Z0-9_]*)\",\n-\t\t\t\"end\": \";\",\n-\t\t\t\"beginCaptures\": {\n-\t\t\t\t\"1\": {\n-\t\t\t\t\t\"name\": \"storage.type.rust\"\n-\t\t\t\t},\n-\t\t\t\t\"2\": {\n-\t\t\t\t\t\"name\": \"entity.name.type.rust\"\n-\t\t\t\t}\n-\t\t\t},\n-\t\t\t\"patterns\": [\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#block_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#line_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#sigils\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#mut\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#dyn\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#impl\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#lifetime\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#ref_lifetime\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_types\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_marker\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_traits\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#std_types\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#std_traits\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#type_params\"\n-\t\t\t\t}\n-\t\t\t]\n-\t\t}\n-\t],\n-\t\"repository\": {\n-\t\t\"block_doc_comment\": {\n-\t\t\t\"comment\": \"Block documentation comment\",\n-\t\t\t\"name\": \"comment.block.documentation.rust\",\n-\t\t\t\"begin\": \"/\\\\*[\\\\*!](?![\\\\*/])\",\n-\t\t\t\"end\": \"\\\\*/\",\n-\t\t\t\"patterns\": [\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#block_doc_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#block_comment\"\n-\t\t\t\t}\n-\t\t\t]\n-\t\t},\n-\t\t\"block_comment\": {\n-\t\t\t\"comment\": \"Block comment\",\n-\t\t\t\"name\": \"comment.block.rust\",\n-\t\t\t\"begin\": \"/\\\\*\",\n-\t\t\t\"end\": \"\\\\*/\",\n-\t\t\t\"patterns\": [\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#block_doc_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#block_comment\"\n-\t\t\t\t}\n-\t\t\t]\n-\t\t},\n-\t\t\"line_doc_comment\": {\n-\t\t\t\"comment\": \"Single-line documentation comment\",\n-\t\t\t\"name\": \"comment.line.documentation.rust\",\n-\t\t\t\"begin\": \"//[!/](?=[^/])\",\n-\t\t\t\"end\": \"$\"\n-\t\t},\n-\t\t\"line_comment\": {\n-\t\t\t\"comment\": \"Single-line comment\",\n-\t\t\t\"name\": \"comment.line.double-slash.rust\",\n-\t\t\t\"begin\": \"//\",\n-\t\t\t\"end\": \"$\"\n-\t\t},\n-\t\t\"escaped_character\": {\n-\t\t\t\"name\": \"constant.character.escape.rust\",\n-\t\t\t\"match\": \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)\"\n-\t\t},\n-\t\t\"string_literal\": {\n-\t\t\t\"comment\": \"Double-quote string literal\",\n-\t\t\t\"name\": \"string.quoted.double.rust\",\n-\t\t\t\"begin\": \"b?\\\"\",\n-\t\t\t\"end\": \"\\\"\",\n-\t\t\t\"patterns\": [\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#escaped_character\"\n-\t\t\t\t}\n-\t\t\t]\n-\t\t},\n-\t\t\"raw_string_literal\": {\n-\t\t\t\"comment\": \"Raw double-quote string literal\",\n-\t\t\t\"name\": \"string.quoted.double.raw.rust\",\n-\t\t\t\"begin\": \"b?r(#*)\\\"\",\n-\t\t\t\"end\": \"\\\"\\\\1\"\n-\t\t},\n-\t\t\"sigils\": {\n-\t\t\t\"comment\": \"Sigil\",\n-\t\t\t\"name\": \"keyword.operator.sigil.rust\",\n-\t\t\t\"match\": \"[&*](?=[a-zA-Z0-9_\\\\(\\\\[\\\\|\\\\\\\"]+)\"\n-\t\t},\n-\t\t\"self\": {\n-\t\t\t\"comment\": \"Self variable\",\n-\t\t\t\"name\": \"variable.language.rust\",\n-\t\t\t\"match\": \"\\\\bself\\\\b\"\n-\t\t},\n-\t\t\"mut\": {\n-\t\t\t\"comment\": \"Mutable storage modifier\",\n-\t\t\t\"name\": \"storage.modifier.mut.rust\",\n-\t\t\t\"match\": \"\\\\bmut\\\\b\"\n-\t\t},\n-\t\t\"dyn\": {\n-\t\t\t\"comment\": \"Dynamic modifier\",\n-\t\t\t\"name\": \"storage.modifier.dyn.rust\",\n-\t\t\t\"match\": \"\\\\bdyn\\\\b\"\n-\t\t},\n-\t\t\"impl\": {\n-\t\t\t\"comment\": \"Existential type modifier\",\n-\t\t\t\"name\": \"storage.modifier.impl.rust\",\n-\t\t\t\"match\": \"\\\\bimpl\\\\b\"\n-\t\t},\n-\t\t\"box\": {\n-\t\t\t\"comment\": \"Box storage modifier\",\n-\t\t\t\"name\": \"storage.modifier.box.rust\",\n-\t\t\t\"match\": \"\\\\bbox\\\\b\"\n-\t\t},\n-\t\t\"const\": {\n-\t\t\t\"comment\": \"Const storage modifier\",\n-\t\t\t\"name\": \"storage.modifier.const.rust\",\n-\t\t\t\"match\": \"\\\\bconst\\\\b\"\n-\t\t},\n-\t\t\"pub\": {\n-\t\t\t\"comment\": \"Visibility modifier\",\n-\t\t\t\"name\": \"storage.modifier.visibility.rust\",\n-\t\t\t\"match\": \"\\\\bpub\\\\b\"\n-\t\t},\n-\t\t\"unsafe\": {\n-\t\t\t\"comment\": \"Unsafe code keyword\",\n-\t\t\t\"name\": \"keyword.other.unsafe.rust\",\n-\t\t\t\"match\": \"\\\\bunsafe\\\\b\"\n-\t\t},\n-\t\t\"where\": {\n-\t\t\t\"comment\": \"Generic where clause\",\n-\t\t\t\"name\": \"keyword.other.where.rust\",\n-\t\t\t\"match\": \"\\\\bwhere\\\\b\"\n-\t\t},\n-\t\t\"lifetime\": {\n-\t\t\t\"comment\": \"Named lifetime\",\n-\t\t\t\"name\": \"storage.modifier.lifetime.rust\",\n-\t\t\t\"match\": \"'([a-zA-Z_][a-zA-Z0-9_]*)\\\\b\"\n-\t\t},\n-\t\t\"ref_lifetime\": {\n-\t\t\t\"comment\": \"Reference with named lifetime\",\n-\t\t\t\"match\": \"(&)('[a-zA-Z_][a-zA-Z0-9_]*)\\\\b\",\n-\t\t\t\"captures\": {\n-\t\t\t\t\"1\": {\n-\t\t\t\t\t\"name\": \"keyword.operator.sigil.rust\"\n-\t\t\t\t},\n-\t\t\t\t\"2\": {\n-\t\t\t\t\t\"name\": \"storage.modifier.lifetime.rust\"\n-\t\t\t\t}\n-\t\t\t}\n-\t\t},\n-\t\t\"core_types\": {\n-\t\t\t\"comment\": \"Built-in/core type\",\n-\t\t\t\"name\": \"support.type.primitive.rust\",\n-\t\t\t\"match\": \"\\\\b(bool|char|usize|isize|u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|f32|f64|str|Self)\\\\b\"\n-\t\t},\n-\t\t\"core_vars\": {\n-\t\t\t\"comment\": \"Core type variant\",\n-\t\t\t\"name\": \"support.constant.core.rust\",\n-\t\t\t\"match\": \"\\\\b(Some|None|Ok|Err)\\\\b\"\n-\t\t},\n-\t\t\"core_marker\": {\n-\t\t\t\"comment\": \"Core trait (marker)\",\n-\t\t\t\"name\": \"entity.name.type.marker.rust\",\n-\t\t\t\"match\": \"\\\\b(Copy|Send|Sized|Sync)\\\\b\"\n-\t\t},\n-\t\t\"core_traits\": {\n-\t\t\t\"comment\": \"Core trait\",\n-\t\t\t\"name\": \"entity.name.type.core.rust\",\n-\t\t\t\"match\": \"\\\\b(Drop|Fn|FnMut|FnOnce|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator)\\\\b\"\n-\t\t},\n-\t\t\"std_types\": {\n-\t\t\t\"comment\": \"Standard library type\",\n-\t\t\t\"name\": \"entity.name.type.class.std.rust\",\n-\t\t\t\"match\": \"\\\\b(Box|String|Vec|Path|PathBuf|Option|Result)\\\\b\"\n-\t\t},\n-\t\t\"std_traits\": {\n-\t\t\t\"comment\": \"Standard library trait\",\n-\t\t\t\"name\": \"entity.name.type.std.rust\",\n-\t\t\t\"match\": \"\\\\b(ToOwned|ToString)\\\\b\"\n-\t\t},\n-\t\t\"type\": {\n-\t\t\t\"comment\": \"A type\",\n-\t\t\t\"name\": \"entity.name.type.rust\",\n-\t\t\t\"match\": \"\\\\b([A-Za-z][_A-Za-z0-9]*|_[_A-Za-z0-9]+)\\\\b\"\n-\t\t},\n-\t\t\"type_params\": {\n-\t\t\t\"comment\": \"Type parameters\",\n-\t\t\t\"name\": \"meta.type_params.rust\",\n-\t\t\t\"begin\": \"<(?![=<])\",\n-\t\t\t\"end\": \"(?<![-])>\",\n-\t\t\t\"patterns\": [\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#block_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#line_comment\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#sigils\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#mut\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#dyn\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#impl\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#lifetime\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_types\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_marker\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#core_traits\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#std_types\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#std_traits\"\n-\t\t\t\t},\n-\t\t\t\t{\n-\t\t\t\t\t\"include\": \"#type_params\"\n-\t\t\t\t}\n-\t\t\t]\n-\t\t}\n-\t}\n+    \"$schema\": \"https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json\",\n+    \"name\": \"Rust\",\n+    \"fileTypes\": [\n+        \"rs\"\n+    ],\n+    \"scopeName\": \"source.rust\",\n+    \"patterns\": [\n+        {\n+            \"comment\": \"boxed slice literal\",\n+            \"begin\": \"(<)(\\\\[)\",\n+            \"beginCaptures\": {\n+                \"1\": {\n+                    \"name\": \"punctuation.brackets.angle.rust\"\n+                },\n+                \"2\": {\n+                    \"name\": \"punctuation.brackets.square.rust\"\n+                }\n+            },\n+            \"end\": \">\",\n+            \"endCaptures\": {\n+                \"0\": {\n+                    \"name\": \"punctuation.brackets.angle.rust\"\n+                }\n+            },\n+            \"patterns\": [\n+                {\n+                    \"include\": \"#comments\"\n+                },\n+                {\n+                    \"include\": \"#gtypes\"\n+                },\n+                {\n+                    \"include\": \"#lvariables\"\n+                },\n+                {\n+                    \"include\": \"#lifetimes\"\n+                },\n+                {\n+                    \"include\": \"#punctuation\"\n+                },\n+                {\n+                    \"include\": \"#types\"\n+                }\n+            ]\n+        },\n+        {\n+            \"comment\": \"macro type metavariables\",\n+            \"name\": \"meta.macro.metavariable.type.rust\",\n+            \"match\": \"(\\\\$)((crate)|([A-Z][A-Za-z0-9_]*))((:)(block|expr|ident|item|lifetime|literal|meta|pat|path|stmt|tt|ty|vis))?\",\n+            \"captures\": {\n+                \"1\": {\n+                    \"name\": \"keyword.operator.macro.dollar.rust\"\n+                },\n+                \"3\": {\n+                    \"name\": \"keyword.other.crate.rust\"\n+                },\n+                \"4\": {\n+                    \"name\": \"entity.name.type.metavariable.rust\"\n+                },\n+                \"6\": {\n+                    \"name\": \"keyword.operator.key-value.rust\"\n+                },\n+                \"7\": {\n+                    \"name\": \"variable.other.metavariable.specifier.rust\"\n+                }\n+            },\n+            \"patterns\": [\n+                {\n+                    \"include\": \"#keywords\"\n+                }\n+            ]\n+        },\n+        {\n+            \"comment\": \"macro metavariables\",\n+            \"name\": \"meta.macro.metavariable.rust\",\n+            \"match\": \"(\\\\$)([a-z][A-Za-z0-9_]*)((:)(block|expr|ident|item|lifetime|literal|meta|pat|path|stmt|tt|ty|vis))?\",\n+            \"captures\": {\n+                \"1\": {\n+                    \"name\": \"keyword.operator.macro.dollar.rust\"\n+                },\n+                \"2\": {\n+                    \"name\": \"variable.other.metavariable.name.rust\"\n+                },\n+                \"4\": {\n+                    \"name\": \"keyword.operator.key-value.rust\"\n+                },\n+                \"5\": {\n+                    \"name\": \"variable.other.metavariable.specifier.rust\"\n+                }\n+            },\n+            \"patterns\": [\n+                {\n+                    \"include\": \"#keywords\"\n+                }\n+            ]\n+        },\n+        {\n+            \"comment\": \"macro rules\",\n+            \"name\": \"meta.macro.rules.rust\",\n+            \"match\": \"\\\\b(macro_rules!)\\\\s+(([a-z0-9_]+)|([A-Z][a-z0-9_]*))\\\\s+(\\\\{)\",\n+            \"captures\": {\n+                \"1\": {\n+                    \"name\": \"entity.name.function.macro.rules.rust\"\n+                },\n+                \"3\": {\n+                    \"name\": \"entity.name.function.macro.rust\"\n+                },\n+                \"4\": {\n+                    \"name\": \"entity.name.type.macro.rust\"\n+                },\n+                \"5\": {\n+                    \"name\": \"punctuation.brackets.curly.rust\"\n+                }\n+            }\n+        },\n+        {\n+            \"comment\": \"attributes\",\n+            \"name\": \"meta.attribute.rust\",\n+            \"begin\": \"(#)(\\\\!?)(\\\\[)\",\n+            \"beginCaptures\": {\n+                \"1\": {\n+                    \"name\": \"punctuation.definition.attribute.rust\"\n+                },\n+                \"2\": {\n+                    \"name\": \"keyword.operator.attribute.inner.rust\"\n+                },\n+                \"3\": {\n+                    \"name\": \"punctuation.brackets.attribute.rust\"\n+                }\n+            },\n+            \"end\": \"\\\\]\",\n+            \"endCaptures\": {\n+                \"0\": {\n+                    \"name\": \"punctuation.brackets.attribute.rust\"\n+                }\n+            },\n+            \"patterns\": [\n+                {\n+                    \"include\": \"#keywords\"\n+                },\n+                {\n+                    \"include\": \"#punctuation\"\n+                },\n+                {\n+                    \"include\": \"#strings\"\n+                },\n+                {\n+                    \"include\": \"#gtypes\"\n+                },\n+                {\n+                    \"include\": \"#types\"\n+                }\n+            ]\n+        },\n+        {\n+            \"comment\": \"modules\",\n+            \"match\": \"(mod)\\\\s+([a-z][A-Za-z0-9_]*)\",\n+            \"captures\": {\n+                \"1\": {\n+                    \"name\": \"keyword.control.rust\"\n+                },\n+                \"2\": {\n+                    \"name\": \"entity.name.module.rust\"\n+                }\n+            }\n+        },\n+        {\n+            \"comment\": \"external crate imports\",\n+            \"name\": \"meta.import.rust\",\n+            \"begin\": \"\\\\b(extern)\\\\s+(crate)\",\n+            \"beginCaptures\": {\n+                \"1\": {\n+                    \"name\": \"keyword.control.rust\"\n+                },\n+                \"2\": {\n+                    \"name\": \"keyword.other.crate.rust\"\n+                }\n+            },\n+            \"end\": \";\",\n+            \"endCaptures\": {\n+                \"0\": {\n+                    \"name\": \"punctuation.semi.rust\"\n+                }\n+            },\n+            \"patterns\": [\n+                {\n+                    \"include\": \"#comments\"\n+                },\n+                {\n+                    \"include\": \"#keywords\"\n+                },\n+                {\n+                    \"include\": \"#punctuation\"\n+                }\n+            ]\n+        },\n+        {\n+            \"comment\": \"use statements\",\n+            \"name\": \"meta.use.rust\",\n+            \"begin\": \"\\\\b(use)\\\\s\",\n+            \"beginCaptures\": {\n+                \"1\": {\n+                    \"name\": \"keyword.control.rust\"\n+                }\n+            },\n+            \"end\": \";\",\n+            \"endCaptures\": {\n+                \"0\": {\n+                    \"name\": \"punctuation.semi.rust\"\n+                }\n+            },\n+            \"patterns\": [\n+                {\n+                    \"include\": \"#comments\"\n+                },\n+                {\n+                    \"include\": \"#keywords\"\n+                },\n+                {\n+                    \"include\": \"#namespaces\"\n+                },\n+                {\n+                    \"include\": \"#punctuation\"\n+                },\n+                {\n+                    \"include\": \"#types\"\n+                },\n+                {\n+                    \"include\": \"#lvariables\"\n+                }\n+            ]\n+        },\n+        {\n+            \"include\": \"#comments\"\n+        },\n+        {\n+            \"include\": \"#lvariables\"\n+        },\n+        {\n+            \"include\": \"#constants\"\n+        },\n+        {\n+            \"include\": \"#gtypes\"\n+        },\n+        {\n+            \"include\": \"#functions\"\n+        },\n+        {\n+            \"include\": \"#types\"\n+        },\n+        {\n+            \"include\": \"#keywords\"\n+        },\n+        {\n+            \"include\": \"#lifetimes\"\n+        },\n+        {\n+            \"include\": \"#macros\"\n+        },\n+        {\n+            \"include\": \"#namespaces\"\n+        },\n+        {\n+            \"include\": \"#punctuation\"\n+        },\n+        {\n+            \"include\": \"#strings\"\n+        },\n+        {\n+            \"include\": \"#variables\"\n+        }\n+    ],\n+    \"repository\": {\n+        \"comments\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"documentation comments\",\n+                    \"name\": \"comment.line.documentation.rust\",\n+                    \"match\": \"^\\\\s*///.*\",\n+                    \"patterns\": [\n+                        {\n+                            \"include\": \"#comments\"\n+                        }\n+                    ]\n+                },\n+                {\n+                    \"comment\": \"line comments\",\n+                    \"name\": \"comment.line.double-slash.rust\",\n+                    \"match\": \"\\\\s*//.*\",\n+                    \"patterns\": [\n+                        {\n+                            \"include\": \"#comments\"\n+                        }\n+                    ]\n+                },\n+                {\n+                    \"comment\": \"block comments\",\n+                    \"name\": \"comment.block.rust\",\n+                    \"begin\": \"/\\\\*(?!\\\\*)\",\n+                    \"end\": \"\\\\*/\",\n+                    \"patterns\": [\n+                        {\n+                            \"include\": \"#comments\"\n+                        }\n+                    ]\n+                },\n+                {\n+                    \"comment\": \"block documentation comments\",\n+                    \"name\": \"comment.block.documentation.rust\",\n+                    \"begin\": \"/\\\\*\\\\*\",\n+                    \"end\": \"\\\\*/\",\n+                    \"patterns\": [\n+                        {\n+                            \"include\": \"#comments\"\n+                        }\n+                    ]\n+                },\n+                {\n+                    \"comment\": \"inferred types, wildcard patterns, ignored params\",\n+                    \"name\": \"comment.char.underscore.rust\",\n+                    \"match\": \"\\\\b_\\\\w*\\\\b\"\n+                }\n+            ]\n+        },\n+        \"constants\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"ALL CAPS constants\",\n+                    \"name\": \"constant.other.caps.rust\",\n+                    \"match\": \"\\\\b[A-Z]{2}[A-Z0-9_]*\\\\b\"\n+                },\n+                {\n+                    \"comment\": \"constant declarations\",\n+                    \"match\": \"\\\\b(const)\\\\s+([A-Z][A-Za-z0-9_]*)\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"keyword.control.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"constant.other.caps.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"decimal integers and floats\",\n+                    \"name\": \"constant.numeric.decimal.rust\",\n+                    \"match\": \"\\\\b\\\\d[\\\\d_]*(\\\\.?)[\\\\d_]*(?:(E)([+-])([\\\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"punctuation.separator.dot.decimal.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"keyword.operator.exponent.rust\"\n+                        },\n+                        \"3\": {\n+                            \"name\": \"keyword.operator.exponent.sign.rust\"\n+                        },\n+                        \"4\": {\n+                            \"name\": \"constant.numeric.decimal.exponent.mantissa.rust\"\n+                        },\n+                        \"5\": {\n+                            \"name\": \"entity.name.type.numeric.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"hexadecimal integers\",\n+                    \"name\": \"constant.numeric.hex.rust\",\n+                    \"match\": \"\\\\b0x[\\\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"entity.name.type.numeric.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"octal integers\",\n+                    \"name\": \"constant.numeric.oct.rust\",\n+                    \"match\": \"\\\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"entity.name.type.numeric.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"binary integers\",\n+                    \"name\": \"constant.numeric.bin.rust\",\n+                    \"match\": \"\\\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"entity.name.type.numeric.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"booleans\",\n+                    \"name\": \"constant.language.bool.rust\",\n+                    \"match\": \"\\\\btrue|false\\\\b\"\n+                }\n+            ]\n+        },\n+        \"escapes\": {\n+            \"comment\": \"escapes: ASCII, byte, Unicode, quote, regex\",\n+            \"name\": \"constant.character.escape.rust\",\n+            \"match\": \"(\\\\\\\\)(?:(?:(x[0-7][0-7a-fA-F])|(u(\\\\{)[\\\\da-fA-F]{4,6}(\\\\}))|.))\",\n+            \"captures\": {\n+                \"1\": {\n+                    \"name\": \"constant.character.escape.backslash.rust\"\n+                },\n+                \"2\": {\n+                    \"name\": \"constant.character.escape.bit.rust\"\n+                },\n+                \"3\": {\n+                    \"name\": \"constant.character.escape.unicode.rust\"\n+                },\n+                \"4\": {\n+                    \"name\": \"constant.character.escape.unicode.punctuation.rust\"\n+                },\n+                \"5\": {\n+                    \"name\": \"constant.character.escape.unicode.punctuation.rust\"\n+                }\n+            }\n+        },\n+        \"functions\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"function definition\",\n+                    \"name\": \"meta.function.definition.rust\",\n+                    \"begin\": \"\\\\b(fn)\\\\s+([A-Za-z0-9_]+)((\\\\()|(<))\",\n+                    \"beginCaptures\": {\n+                        \"1\": {\n+                            \"name\": \"keyword.control.fn.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"entity.name.function.rust\"\n+                        },\n+                        \"4\": {\n+                            \"name\": \"punctuation.brackets.round.rust\"\n+                        },\n+                        \"5\": {\n+                            \"name\": \"punctuation.brackets.angle.rust\"\n+                        }\n+                    },\n+                    \"end\": \"\\\\{\",\n+                    \"endCaptures\": {\n+                        \"0\": {\n+                            \"name\": \"punctuation.brackets.curly.rust\"\n+                        }\n+                    },\n+                    \"patterns\": [\n+                        {\n+                            \"include\": \"#comments\"\n+                        },\n+                        {\n+                            \"include\": \"#keywords\"\n+                        },\n+                        {\n+                            \"include\": \"#lvariables\"\n+                        },\n+                        {\n+                            \"include\": \"#constants\"\n+                        },\n+                        {\n+                            \"include\": \"#gtypes\"\n+                        },\n+                        {\n+                            \"include\": \"#functions\"\n+                        },\n+                        {\n+                            \"include\": \"#lifetimes\"\n+                        },\n+                        {\n+                            \"include\": \"#macros\"\n+                        },\n+                        {\n+                            \"include\": \"#namespaces\"\n+                        },\n+                        {\n+                            \"include\": \"#punctuation\"\n+                        },\n+                        {\n+                            \"include\": \"#strings\"\n+                        },\n+                        {\n+                            \"include\": \"#types\"\n+                        },\n+                        {\n+                            \"include\": \"#variables\"\n+                        }\n+                    ]\n+                },\n+                {\n+                    \"comment\": \"function/method calls, chaining\",\n+                    \"name\": \"meta.function.call.rust\",\n+                    \"begin\": \"(?:(pub)|(?:(\\\\.)?([A-Za-z0-9_]+)))(\\\\()\",\n+                    \"beginCaptures\": {\n+                        \"1\": {\n+                            \"name\": \"keyword.other.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"keyword.operator.access.dot.rust\"\n+                        },\n+                        \"3\": {\n+                            \"name\": \"entity.name.function.rust\"\n+                        },\n+                        \"4\": {\n+                            \"name\": \"punctuation.brackets.round.rust\"\n+                        }\n+                    },\n+                    \"end\": \"\\\\)\",\n+                    \"endCaptures\": {\n+                        \"0\": {\n+                            \"name\": \"punctuation.brackets.round.rust\"\n+                        }\n+                    },\n+                    \"patterns\": [\n+                        {\n+                            \"include\": \"#comments\"\n+                        },\n+                        {\n+                            \"include\": \"#keywords\"\n+                        },\n+                        {\n+                            \"include\": \"#lvariables\"\n+                        },\n+                        {\n+                            \"include\": \"#namespaces\"\n+                        },\n+                        {\n+                            \"include\": \"#constants\"\n+                        },\n+                        {\n+                            \"include\": \"#gtypes\"\n+                        },\n+                        {\n+                            \"include\": \"#functions\"\n+                        },\n+                        {\n+                            \"include\": \"#lifetimes\"\n+                        },\n+                        {\n+                            \"include\": \"#macros\"\n+                        },\n+                        {\n+                            \"include\": \"#punctuation\"\n+                        },\n+                        {\n+                            \"include\": \"#strings\"\n+                        },\n+                        {\n+                            \"include\": \"#types\"\n+                        },\n+                        {\n+                            \"include\": \"#variables\"\n+                        }\n+                    ]\n+                }\n+            ]\n+        },\n+        \"keywords\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"control flow keywords\",\n+                    \"name\": \"keyword.control.rust\",\n+                    \"match\": \"\\\\b(async|await|break|continue|do|else|for|if|loop|match|move|return|try|where|while|yield)\\\\b\"\n+                },\n+                {\n+                    \"comment\": \"storage keywords\",\n+                    \"name\": \"storage.type.rust\",\n+                    \"match\": \"\\\\b(const|enum|extern|let|macro|mod|struct|trait|type)\\\\b\"\n+                },\n+                {\n+                    \"comment\": \"storage modifiers\",\n+                    \"name\": \"storage.modifier.rust\",\n+                    \"match\": \"\\\\b(abstract|static)\\\\b\"\n+                },\n+                {\n+                    \"comment\": \"other keywords\",\n+                    \"name\": \"keyword.other.rust\",\n+                    \"match\": \"\\\\b(as|become|box|dyn|final|impl|in|override|priv|pub|ref|typeof|union|unsafe|unsized|use|virtual)\\\\b\"\n+                },\n+                {\n+                    \"comment\": \"fn\",\n+                    \"name\": \"keyword.other.fn.rust\",\n+                    \"match\": \"\\\\bfn\\\\b\"\n+                },\n+                {\n+                    \"comment\": \"crate\",\n+                    \"name\": \"keyword.other.crate.rust\",\n+                    \"match\": \"\\\\bcrate\\\\b\"\n+                },\n+                {\n+                    \"comment\": \"mut\",\n+                    \"name\": \"storage.modifier.mut.rust\",\n+                    \"match\": \"\\\\bmut\\\\b\"\n+                },\n+                {\n+                    \"comment\": \"math operators\",\n+                    \"name\": \"keyword.operator.math.rust\",\n+                    \"match\": \"(([+%]|(\\\\*(?!\\\\w)))(?!=))|(-(?!>))|(/(?!/))\"\n+                },\n+                {\n+                    \"comment\": \"logical operators\",\n+                    \"name\": \"keyword.operator.logical.rust\",\n+                    \"match\": \"(\\\\^|\\\\||\\\\|\\\\||&&|<<|>>|!)(?!=)\"\n+                },\n+                {\n+                    \"comment\": \"logical AND, borrow references\",\n+                    \"name\": \"keyword.operator.borrow.and.rust\",\n+                    \"match\": \"&(?![&=])\"\n+                },\n+                {\n+                    \"comment\": \"assignment operators\",\n+                    \"name\": \"keyword.operator.assignment.rust\",\n+                    \"match\": \"(-=|\\\\*=|/=|%=|\\\\^=|&=|\\\\|=|<<=|>>=)\"\n+                },\n+                {\n+                    \"comment\": \"single equal\",\n+                    \"name\": \"keyword.operator.assignment.equal.rust\",\n+                    \"match\": \"(?<![<>])=(?!=|>)\"\n+                },\n+                {\n+                    \"comment\": \"comparison operators\",\n+                    \"name\": \"keyword.operator.comparison.rust\",\n+                    \"match\": \"(=(=)?(?!>)|!=|<=|(?<!=)>=)\"\n+                },\n+                {\n+                    \"comment\": \"less than, greater than (special case)\",\n+                    \"match\": \"(^|\\\\s)(?<!=)([<>])\\\\s\",\n+                    \"captures\": {\n+                        \"2\": {\n+                            \"name\": \"keyword.operator.comparison.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"namespace operator\",\n+                    \"name\": \"keyword.operator.namespace.rust\",\n+                    \"match\": \"::\"\n+                },\n+                {\n+                    \"comment\": \"dereference asterisk\",\n+                    \"match\": \"(\\\\*)(?=\\\\w+)\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"keyword.operator.dereference.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"subpattern binding\",\n+                    \"name\": \"keyword.operator.subpattern.rust\",\n+                    \"match\": \"@\"\n+                },\n+                {\n+                    \"comment\": \"dot access\",\n+                    \"name\": \"keyword.operator.access.dot.rust\",\n+                    \"match\": \"\\\\.(?!\\\\.)\"\n+                },\n+                {\n+                    \"comment\": \"ranges, range patterns\",\n+                    \"name\": \"keyword.operator.range.rust\",\n+                    \"match\": \"\\\\.{2}(=|\\\\.)?\"\n+                },\n+                {\n+                    \"comment\": \"colon\",\n+                    \"name\": \"keyword.operator.key-value.rust\",\n+                    \"match\": \":(?!:)\"\n+                },\n+                {\n+                    \"comment\": \"dashrocket, skinny arrow\",\n+                    \"name\": \"keyword.operator.arrow.skinny.rust\",\n+                    \"match\": \"->\"\n+                },\n+                {\n+                    \"comment\": \"hashrocket, fat arrow\",\n+                    \"name\": \"keyword.operator.arrow.fat.rust\",\n+                    \"match\": \"=>\"\n+                },\n+                {\n+                    \"comment\": \"dollar macros\",\n+                    \"name\": \"keyword.operator.macro.dollar.rust\",\n+                    \"match\": \"\\\\$\"\n+                },\n+                {\n+                    \"comment\": \"question mark operator, questionably sized, macro kleene matcher\",\n+                    \"name\": \"keyword.operator.question.rust\",\n+                    \"match\": \"\\\\?\"\n+                }\n+            ]\n+        },\n+        \"interpolations\": {\n+            \"comment\": \"curly brace interpolations\",\n+            \"name\": \"meta.interpolation.rust\",\n+            \"begin\": \"{\",\n+            \"beginCaptures\": {\n+                \"0\": {\n+                    \"name\": \"punctuation.definition.interpolation.rust\"\n+                }\n+            },\n+            \"end\": \"}\",\n+            \"endCaptures\": {\n+                \"0\": {\n+                    \"name\": \"punctuation.definition.interpolation.rust\"\n+                }\n+            },\n+            \"patterns\": [\n+                {\n+                    \"include\": \"#interpolations\"\n+                }\n+            ]\n+        },\n+        \"lifetimes\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"named lifetime parameters\",\n+                    \"match\": \"(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"punctuation.definition.lifetime.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"entity.name.type.lifetime.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"borrowing references to named lifetimes\",\n+                    \"match\": \"(\\\\&)(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"keyword.operator.borrow.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"punctuation.definition.lifetime.rust\"\n+                        },\n+                        \"3\": {\n+                            \"name\": \"entity.name.type.lifetime.rust\"\n+                        }\n+                    }\n+                }\n+            ]\n+        },\n+        \"macros\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"macros\",\n+                    \"name\": \"meta.macro.rust\",\n+                    \"match\": \"(([a-z_][A-Za-z0-9_]*!)|([A-Z_][A-Za-z0-9_]*!))\",\n+                    \"captures\": {\n+                        \"2\": {\n+                            \"name\": \"entity.name.function.macro.rust\"\n+                        },\n+                        \"3\": {\n+                            \"name\": \"entity.name.type.macro.rust\"\n+                        }\n+                    }\n+                }\n+            ]\n+        },\n+        \"namespaces\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"namespace (non-type, non-function path segment)\",\n+                    \"match\": \"(?<![A-Za-z0-9_])([a-z0-9_]+)((?<!super|self)::)\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"entity.name.namespace.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"keyword.operator.namespace.rust\"\n+                        }\n+                    }\n+                }\n+            ]\n+        },\n+        \"types\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"numeric types\",\n+                    \"match\": \"(?<![A-Za-z])(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"entity.name.type.numeric.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"parameterized types\",\n+                    \"begin\": \"\\\\b([A-Z][A-Za-z0-9]*)(<)\",\n+                    \"beginCaptures\": {\n+                        \"1\": {\n+                            \"name\": \"entity.name.type.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"punctuation.brackets.angle.rust\"\n+                        }\n+                    },\n+                    \"end\": \">\",\n+                    \"endCaptures\": {\n+                        \"0\": {\n+                            \"name\": \"punctuation.brackets.angle.rust\"\n+                        }\n+                    },\n+                    \"patterns\": [\n+                        {\n+                            \"include\": \"#comments\"\n+                        },\n+                        {\n+                            \"include\": \"#keywords\"\n+                        },\n+                        {\n+                            \"include\": \"#lvariables\"\n+                        },\n+                        {\n+                            \"include\": \"#lifetimes\"\n+                        },\n+                        {\n+                            \"include\": \"#punctuation\"\n+                        },\n+                        {\n+                            \"include\": \"#types\"\n+                        },\n+                        {\n+                            \"include\": \"#variables\"\n+                        }\n+                    ]\n+                },\n+                {\n+                    \"comment\": \"primitive types\",\n+                    \"name\": \"entity.name.type.primitive.rust\",\n+                    \"match\": \"\\\\b(bool|char|str)\\\\b\"\n+                },\n+                {\n+                    \"comment\": \"trait declarations\",\n+                    \"match\": \"\\\\b(trait)\\\\s+([A-Z][A-Za-z0-9]*)\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"storage.type.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"entity.name.type.trait.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"struct declarations\",\n+                    \"match\": \"\\\\b(struct)\\\\s+([A-Z][A-Za-z0-9]*)\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"storage.type.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"entity.name.type.struct.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"enum declarations\",\n+                    \"match\": \"\\\\b(enum)\\\\s+([A-Z][A-Za-z0-9_]*)\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"storage.type.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"entity.name.type.enum.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"type declarations\",\n+                    \"match\": \"\\\\b(type)\\\\s+([A-Z][A-Za-z0-9_]*)\\\\b\",\n+                    \"captures\": {\n+                        \"1\": {\n+                            \"name\": \"storage.type.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"entity.name.type.declaration.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"types\",\n+                    \"name\": \"entity.name.type.rust\",\n+                    \"match\": \"\\\\b[A-Z][A-Za-z0-9]*\\\\b(?!!)\"\n+                }\n+            ]\n+        },\n+        \"gtypes\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"option types\",\n+                    \"name\": \"entity.name.type.option.rust\",\n+                    \"match\": \"\\\\b(Some|None)\\\\b\"\n+                },\n+                {\n+                    \"comment\": \"result types\",\n+                    \"name\": \"entity.name.type.result.rust\",\n+                    \"match\": \"\\\\b(Ok|Err)\\\\b\"\n+                }\n+            ]\n+        },\n+        \"punctuation\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"comma\",\n+                    \"name\": \"punctuation.comma.rust\",\n+                    \"match\": \",\"\n+                },\n+                {\n+                    \"comment\": \"curly braces\",\n+                    \"name\": \"punctuation.brackets.curly.rust\",\n+                    \"match\": \"[{}]\"\n+                },\n+                {\n+                    \"comment\": \"parentheses, round brackets\",\n+                    \"name\": \"punctuation.brackets.round.rust\",\n+                    \"match\": \"[()]\"\n+                },\n+                {\n+                    \"comment\": \"semicolon\",\n+                    \"name\": \"punctuation.semi.rust\",\n+                    \"match\": \";\"\n+                },\n+                {\n+                    \"comment\": \"square brackets\",\n+                    \"name\": \"punctuation.brackets.square.rust\",\n+                    \"match\": \"[\\\\[\\\\]]\"\n+                },\n+                {\n+                    \"comment\": \"angle brackets\",\n+                    \"name\": \"punctuation.brackets.angle.rust\",\n+                    \"match\": \"(?<!=)[<>]\"\n+                }\n+            ]\n+        },\n+        \"strings\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"double-quoted strings and byte strings\",\n+                    \"name\": \"string.quoted.double.rust\",\n+                    \"begin\": \"(b?)(\\\")\",\n+                    \"beginCaptures\": {\n+                        \"1\": {\n+                            \"name\": \"string.quoted.byte.raw.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"punctuation.definition.string.rust\"\n+                        }\n+                    },\n+                    \"end\": \"\\\"\",\n+                    \"endCaptures\": {\n+                        \"0\": {\n+                            \"name\": \"punctuation.definition.string.rust\"\n+                        }\n+                    },\n+                    \"patterns\": [\n+                        {\n+                            \"include\": \"#escapes\"\n+                        },\n+                        {\n+                            \"include\": \"#interpolations\"\n+                        }\n+                    ]\n+                },\n+                {\n+                    \"comment\": \"double-quoted raw strings and raw byte strings\",\n+                    \"name\": \"string.quoted.double.rust\",\n+                    \"begin\": \"(b?r)(#*)(\\\")\",\n+                    \"beginCaptures\": {\n+                        \"1\": {\n+                            \"name\": \"string.quoted.byte.raw.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"punctuation.definition.string.raw.rust\"\n+                        },\n+                        \"3\": {\n+                            \"name\": \"punctuation.definition.string.rust\"\n+                        }\n+                    },\n+                    \"end\": \"(\\\")(#*)\",\n+                    \"endCaptures\": {\n+                        \"1\": {\n+                            \"name\": \"punctuation.definition.string.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"punctuation.definition.string.raw.rust\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"comment\": \"characters and bytes\",\n+                    \"name\": \"string.quoted.single.char.rust\",\n+                    \"begin\": \"(b)?(')\",\n+                    \"beginCaptures\": {\n+                        \"1\": {\n+                            \"name\": \"string.quoted.byte.raw.rust\"\n+                        },\n+                        \"2\": {\n+                            \"name\": \"punctuation.definition.char.rust\"\n+                        }\n+                    },\n+                    \"end\": \"'\",\n+                    \"endCaptures\": {\n+                        \"0\": {\n+                            \"name\": \"punctuation.definition.char.rust\"\n+                        }\n+                    },\n+                    \"patterns\": [\n+                        {\n+                            \"include\": \"#escapes\"\n+                        }\n+                    ]\n+                }\n+            ]\n+        },\n+        \"lvariables\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"self\",\n+                    \"name\": \"variable.language.self.rust\",\n+                    \"match\": \"\\\\b[Ss]elf\\\\b\"\n+                },\n+                {\n+                    \"comment\": \"super\",\n+                    \"name\": \"variable.language.super.rust\",\n+                    \"match\": \"\\\\bsuper\\\\b\"\n+                }\n+            ]\n+        },\n+        \"variables\": {\n+            \"patterns\": [\n+                {\n+                    \"comment\": \"variables\",\n+                    \"name\": \"variable.other.rust\",\n+                    \"match\": \"\\\\b(?<!\\\\.)[a-z0-9_]+\\\\b\"\n+                }\n+            ]\n+        }\n+    }\n }"}]}