{"sha": "9f84f88276a04c42340e99e6d9503d49780eb5e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmODRmODgyNzZhMDRjNDIzNDBlOTllNmQ5NTAzZDQ5NzgwZWI1ZTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-05T05:14:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-07T06:40:31Z"}, "message": "port over the tests to use the new API", "tree": {"sha": "2494f0ecfa68e5bad047e64ce96e816bc7332e2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2494f0ecfa68e5bad047e64ce96e816bc7332e2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f84f88276a04c42340e99e6d9503d49780eb5e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f84f88276a04c42340e99e6d9503d49780eb5e7", "html_url": "https://github.com/rust-lang/rust/commit/9f84f88276a04c42340e99e6d9503d49780eb5e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f84f88276a04c42340e99e6d9503d49780eb5e7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25e81e34eaaa1953ca301e95314c1ed01e773a9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/25e81e34eaaa1953ca301e95314c1ed01e773a9d", "html_url": "https://github.com/rust-lang/rust/commit/25e81e34eaaa1953ca301e95314c1ed01e773a9d"}], "stats": {"total": 388, "additions": 202, "deletions": 186}, "files": [{"sha": "1193fa81131b59967075ec5bbde3df799b2ad33f", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -193,21 +193,21 @@ fn closure_to_task(cx: cx, configport: port<[u8]>, testfn: fn@()) ->\n    test::joinable {\n     testfn();\n     let testfile = recv(configport);\n-\n-    ret task::spawn_joinable(\n-        (cx.config, cx.procsrv.chan, testfile), run_test_task);\n+    let (config, chan) = (cx.config, cx.procsrv.chan);\n+    ret task::spawn_joinable {||\n+        run_test_task(config, chan, testfile);\n+    };\n }\n \n-fn run_test_task(args: (common::config, procsrv::reqchan, [u8])) {\n-\n-    let (config, procsrv_chan, testfile) = args;\n-\n+fn run_test_task(config: common::config,\n+                 procsrv_chan: procsrv::reqchan,\n+                 testfile: [u8]) {\n     test::configure_test_task();\n \n     let procsrv = procsrv::from_chan(procsrv_chan);\n     let cx = {config: config, procsrv: procsrv};\n \n-    runtest::run(cx, testfile);\n+    runtest::run(cx, copy testfile);\n }\n \n // Local Variables:"}, {"sha": "9029ee1bcea17406f7d7988dc31660708a25c5f1", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -40,14 +40,13 @@ type response = {pid: pid_t, infd: fd_t,\n \n fn mk() -> handle {\n     let setupport = port();\n-    let task = task::spawn_joinable(\n-        chan(setupport),\n-        fn (setupchan: chan<chan<request>>) {\n-            let reqport = port();\n-            let reqchan = chan(reqport);\n-            send(setupchan, reqchan);\n-            worker(reqport);\n-        });\n+    let setupchan = chan(setupport);\n+    let task = task::spawn_joinable {||\n+        let reqport = port();\n+        let reqchan = chan(reqport);\n+        send(setupchan, reqchan);\n+        worker(reqport);\n+    };\n     ret {task: option::some(task), chan: recv(setupport)};\n }\n "}, {"sha": "fb610279c77b7c60fda65d918d29723d9e35e507", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -11,8 +11,9 @@ fn a(c: chan<int>) { send(c, 10); }\n \n fn main() {\n     let p = port();\n-    task::spawn(chan(p), a);\n-    task::spawn(chan(p), a);\n+    let ch = chan(p);\n+    task::spawn {|| a(ch); };\n+    task::spawn {|| a(ch); };\n     let n: int = 0;\n     n = recv(p);\n     n = recv(p);"}, {"sha": "6a238b4c4bcac4e537875ac44ebee93a25f46ff3", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -2,6 +2,7 @@\n \n use std;\n import comm;\n+import comm::port;\n import comm::send;\n import comm::chan;\n import comm::recv;\n@@ -10,9 +11,10 @@ import task;\n fn a(c: chan<int>) { #debug(\"task a0\"); #debug(\"task a1\"); send(c, 10); }\n \n fn main() {\n-    let p = comm::port();\n-    task::spawn(chan(p), a);\n-    task::spawn(chan(p), b);\n+    let p = port();\n+    let ch = chan(p);\n+    task::spawn {|| a(ch); };\n+    task::spawn {|| b(ch); };\n     let n: int = 0;\n     n = recv(p);\n     n = recv(p);"}, {"sha": "323451c98abf0d2da1e4a414239c04f2fe5085ab", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -31,8 +31,9 @@ fn main() {\n     let n: int = 2 + 3 * 7;\n     let s: str = \"hello there\";\n     let p = comm::port();\n-    task::spawn(chan(p), a);\n-    task::spawn(chan(p), b);\n+    let ch = comm::chan(p);\n+    task::spawn {|| a(ch); };\n+    task::spawn {|| b(ch); };\n     let x: int = 10;\n     x = g(n, s);\n     log(debug, x);"}, {"sha": "e5345f8a79eb265436e0529f6517e559743b53cf", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -87,10 +87,10 @@ fn test_ptr() {\n }\n \n fn test_task() {\n-    fn f(&&_i: ()) { }\n+    fn f() { }\n     let f1 = f, f2 = f;\n-    let t1 = task::spawn((), f1);\n-    let t2 = task::spawn((), f2);\n+    let t1 = task::spawn {|| f1(); };\n+    let t2 = task::spawn {|| f2(); };\n \n     assert (t1 == t1);\n     assert (t1 != t2);"}, {"sha": "f7adb1a0961dd531ba741c0a42a6f45827c60418", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -23,7 +23,8 @@ fn request_task(c: chan<ctx>) {\n \n fn new() -> ctx {\n     let p = port();\n-    let t = task::spawn(chan(p), request_task);\n+    let ch = chan(p);\n+    let t = task::spawn {|| request_task(ch); };\n     let cx: ctx;\n     cx = recv(p);\n     ret cx;"}, {"sha": "4eabfa478a727d5ce1a0ba988506e2eb52bced32", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -5,4 +5,4 @@ import task;\n \n fn child2(&&s: str) { }\n \n-fn main() { let x = task::spawn(\"hi\", child2); }\n+fn main() { let x = task::spawn {|| child2(\"hi\"); }; }"}, {"sha": "d3b648e44757db6c8b311b628d6edaca76cdd7aa", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -9,7 +9,8 @@ import task;\n \n fn main() {\n     let p = comm::port();\n-    let t = task::spawn(chan(p), child);\n+    let ch = comm::chan(p);\n+    let t = task::spawn {|| child(ch); };\n     let y = recv(p);\n     #error(\"received\");\n     log(error, y);"}, {"sha": "5c6e14e93a852c02d901c5ca6efa8e5a088676d2", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -33,12 +33,12 @@ mod map_reduce {\n     tag ctrl_proto { find_reducer([u8], chan<int>); mapper_done; }\n \n     fn start_mappers(ctrl: chan<ctrl_proto>, inputs: [str]) {\n-        for i: str in inputs { task::spawn((ctrl, i), map_task); }\n+        for i: str in inputs {\n+            task::spawn {|| map_task(ctrl, i); };\n+        }\n     }\n \n-    fn map_task(&&args: (chan<ctrl_proto>, str)) {\n-        let (ctrl, input) = args;\n-\n+    fn map_task(ctrl: chan<ctrl_proto>, input: str) {\n         let intermediates = map::new_str_hash();\n \n         fn emit(im: map::hashmap<str, int>, ctrl: chan<ctrl_proto>, key: str,"}, {"sha": "3cb790063a97868d1d47018684677b1331f64bac", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -18,14 +18,15 @@ import comm::recv;\n fn grandchild(c: chan<int>) { send(c, 42); }\n \n fn child(c: chan<int>) {\n-    let _grandchild = task::spawn_joinable(copy c, grandchild);\n+    let _grandchild = task::spawn_joinable {|| grandchild(c); };\n     join(_grandchild);\n }\n \n fn main() {\n     let p = comm::port();\n+    let ch = chan(p);\n \n-    let _child = task::spawn_joinable(chan(p), child);\n+    let _child = task::spawn_joinable {|| child(ch); };\n \n     let x: int = recv(p);\n "}, {"sha": "8ff6b4bab27f778d5b44637a9544084693dcf842", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -15,8 +15,7 @@ fn producer(c: chan<[u8]>) {\n     send(c, empty);\n }\n \n-fn packager(&&args: (chan<chan<[u8]>>, chan<msg>)) {\n-    let (cb, msg) = args;\n+fn packager(cb: chan<chan<[u8]>>, msg: chan<msg>) {\n     let p: port<[u8]> = port();\n     send(cb, chan(p));\n     while true {\n@@ -39,11 +38,13 @@ fn packager(&&args: (chan<chan<[u8]>>, chan<msg>)) {\n \n fn main() {\n     let p: port<msg> = port();\n+    let ch = chan(p);\n     let recv_reader: port<chan<[u8]>> = port();\n-    let pack = task::spawn((chan(recv_reader), chan(p)), packager);\n+    let recv_reader_chan = chan(recv_reader);\n+    let pack = task::spawn {|| packager(recv_reader_chan, ch); };\n \n     let source_chan: chan<[u8]> = recv(recv_reader);\n-    let prod = task::spawn(source_chan, producer);\n+    let prod = task::spawn {|| producer(source_chan); };\n \n     while true {\n         let msg = recv(p);"}, {"sha": "27384b102ebd2dc48afb5f314000d6c4a5a2e660", "filename": "src/test/run-pass/issue-783.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fissue-783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fissue-783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-783.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -2,14 +2,15 @@ use std;\n import comm::*;\n import task::*;\n \n-fn a(&&_args: ()) {\n+fn a() {\n     fn doit() {\n         fn b(c: chan<chan<int>>) {\n             let p = port();\n             send(c, chan(p));\n         }\n         let p = port();\n-        spawn(chan(p), b);\n+        let ch = chan(p);\n+        spawn {|| b(ch); };\n         recv(p);\n     }\n     let i = 0;\n@@ -20,6 +21,6 @@ fn a(&&_args: ()) {\n }\n \n fn main() {\n-    let t = spawn_joinable((), a);\n+    let t = spawn_joinable {|| a(); };\n     join(t);\n }"}, {"sha": "dce947bb6227cbc1a3aa458b41368e0666aa7e7a", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -15,7 +15,8 @@ fn producer(c: chan<[u8]>) {\n \n fn main() {\n     let p: port<[u8]> = port();\n-    let prod = task::spawn(chan(p), producer);\n+    let ch = chan(p);\n+    let prod = task::spawn {|| producer(ch); };\n \n     let data: [u8] = recv(p);\n }"}, {"sha": "ef4073406b4babaffb8128c2ee107649cf071f2f", "filename": "src/test/run-pass/join.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fjoin.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -5,11 +5,11 @@ use std;\n import task::*;\n \n fn main() {\n-    let other = spawn_joinable((), child);\n+    let other = spawn_joinable {|| child(); };\n     #error(\"1\");\n     yield();\n     join(other);\n     #error(\"3\");\n }\n \n-fn child(&&_i: ()) { #error(\"2\"); }\n+fn child() { #error(\"2\"); }"}, {"sha": "2e6042096187fa174f7a248503c08d25cc734bc3", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -6,15 +6,16 @@ import comm::*;\n \n fn main() {\n     let p = port();\n+    let ch = chan(p);\n     let y: int;\n \n-    task::spawn(chan(p), child);\n+    task::spawn {|| child(ch); };\n     y = recv(p);\n     #debug(\"received 1\");\n     log(debug, y);\n     assert (y == 10);\n \n-    task::spawn(chan(p), child);\n+    task::spawn {|| child(ch); };\n     y = recv(p);\n     #debug(\"received 2\");\n     log(debug, y);"}, {"sha": "b82aa7c2cb0a78c3b9242a3cb72e1c63bf1bb28e", "filename": "src/test/run-pass/linked-failure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinked-failure.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -5,17 +5,17 @@ import task;\n import comm::port;\n import comm::recv;\n \n-fn child(&&_i: ()) { assert (1 == 2); }\n+fn child() { assert (1 == 2); }\n \n-fn parent(&&_i: ()) {\n+fn parent() {\n     // Since this task isn't supervised it won't bring down the whole\n     // process\n     task::unsupervise();\n     let p = port::<int>();\n-    task::spawn((), child);\n+    task::spawn {|| child(); };\n     let x = recv(p);\n }\n \n fn main() {\n-    task::spawn((), parent);\n+    task::spawn {|| parent(); };\n }\n\\ No newline at end of file"}, {"sha": "9f51b688b11f6d26856118d854da53353512a0d7", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -4,17 +4,17 @@ import task;\n import comm;\n import uint;\n \n-fn die(&&_i: ()) {\n+fn die() {\n     fail;\n }\n \n-fn iloop(&&_i: ()) {\n+fn iloop() {\n     task::unsupervise();\n-    task::spawn((), die);\n+    task::spawn {|| die(); };\n }\n \n fn main() {\n     uint::range(0u, 100u) {|_i|\n-        task::spawn((), iloop);\n+        task::spawn {|| iloop(); };\n     }\n }\n\\ No newline at end of file"}, {"sha": "0914e059b95920914606215794a8565befeeb48d", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -4,21 +4,22 @@ use std;\n import task;\n import comm;\n \n-fn sub(&&args: (comm::chan<int>, int)) {\n-    let (parent, id) = args;\n+fn sub(parent: comm::chan<int>, id: int) {\n     if id == 0 {\n         comm::send(parent, 0);\n     } else {\n         let p = comm::port();\n-        let child = task::spawn((comm::chan(p), id - 1), sub);\n+        let ch = comm::chan(p);\n+        let child = task::spawn {|| sub(ch, id - 1); };\n         let y = comm::recv(p);\n         comm::send(parent, y + 1);\n     }\n }\n \n fn main() {\n     let p = comm::port();\n-    let child = task::spawn((comm::chan(p), 200), sub);\n+    let ch = comm::chan(p);\n+    let child = task::spawn {|| sub(ch, 200); };\n     let y = comm::recv(p);\n     #debug(\"transmission complete\");\n     log(debug, y);"}, {"sha": "6c1d906e1e6cfcbfcbf87fdaef04f445801aea96", "filename": "src/test/run-pass/morestack5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack5.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     let sz = 400u;\n     while sz < 500u {\n         rustrt::set_min_stack(sz);\n-        task::join(task::spawn_joinable(200, getbig));\n+        task::join(task::spawn_joinable {|| getbig(200) });\n         sz += 1u;\n     }\n }\n\\ No newline at end of file"}, {"sha": "05c3e3831269d7b499d3cc212bddeed734883586", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -32,12 +32,11 @@ fn calllink08() { rustrt::get_task_id(); }\n fn calllink09() { rustrt::sched_threads(); }\n fn calllink10() { rustrt::rust_get_task(); }\n \n-fn runtest(&&args:(fn(), u32)) {\n-    let (f, frame_backoff) = args;\n+fn runtest(f: sendfn(), frame_backoff: u32) {\n     runtest2(f, frame_backoff, 0 as *u8);\n }\n \n-fn runtest2(f: fn(), frame_backoff: u32, last_stk: *u8) -> u32 {\n+fn runtest2(f: sendfn(), frame_backoff: u32, last_stk: *u8) -> u32 {\n     let curr_stk = rustrt::debug_get_stk_seg();\n     if (last_stk != curr_stk && last_stk != 0 as *u8) {\n         // We switched stacks, go back and try to hit the dynamic linker\n@@ -73,6 +72,6 @@ fn main() {\n         let sz = rng.next() % 256u32 + 256u32;\n         let frame_backoff = rng.next() % 10u32 + 1u32;\n         rustrt::set_min_stack(sz as uint);\n-        task::join(task::spawn_joinable((f, frame_backoff), runtest));\n+        task::join(task::spawn_joinable {|| runtest(f, frame_backoff);});\n     }\n }\n\\ No newline at end of file"}, {"sha": "5fb4e4e9bd9e43293bdfd186935e6b11f469b7e3", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -4,13 +4,13 @@ import task;\n import comm;\n import uint;\n \n-fn die(&&_i: ()) {\n+fn die() {\n     fail;\n }\n \n-fn iloop(&&_i: ()) {\n+fn iloop() {\n     task::unsupervise();\n-    task::spawn((), die);\n+    task::spawn {|| die(); };\n     let p = comm::port::<()>();\n     let c = comm::chan(p);\n     while true {\n@@ -23,6 +23,6 @@ fn iloop(&&_i: ()) {\n \n fn main() {\n     uint::range(0u, 16u) {|_i|\n-        task::spawn((), iloop);\n+        task::spawn {|| iloop(); };\n     }\n }\n\\ No newline at end of file"}, {"sha": "0a53d529d38dc1246a6b8463c1ad4351c50c8394", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -28,7 +28,7 @@ fn spawn<A: copy, B: copy>(f: fn(sendfn(A,B)->pair<A,B>)) {\n     let arg = sendfn(a: A, b: B) -> pair<A,B> {\n         ret make_generic_record(a, b);\n     };\n-    task::spawn(arg, f);\n+    task::spawn {|| f(arg); };\n }\n \n fn test05() {"}, {"sha": "281a438b7ba31652c6d22e4e489275280b4f17c5", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -16,5 +16,7 @@ fn test05() {\n         log(error, *three + n); // will copy x into the closure\n         assert(*three == 3);\n     };\n-    task::spawn(fn_to_send, test05_start);\n+    task::spawn(sendfn[move fn_to_send]() {\n+        test05_start(fn_to_send);\n+    });\n }"}, {"sha": "92c6613c0fd2abb020551ebc3818f42161abd9bc", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -4,15 +4,15 @@ use std;\n import task::yield;\n import task;\n \n-fn x(&&args: (str, int)) {\n-    let (s, n) = args;\n-    log(debug, s); log(debug, n);\n+fn x(s: str, n: int) {\n+    log(debug, s);\n+    log(debug, n);\n }\n \n fn main() {\n-    task::spawn((\"hello from first spawned fn\", 65), x);\n-    task::spawn((\"hello from second spawned fn\", 66), x);\n-    task::spawn((\"hello from third spawned fn\", 67), x);\n+    task::spawn {|| x(\"hello from first spawned fn\", 65); };\n+    task::spawn {|| x(\"hello from second spawned fn\", 66); };\n+    task::spawn {|| x(\"hello from third spawned fn\", 67); };\n     let i: int = 30;\n     while i > 0 { i = i - 1; #debug(\"parent sleeping\"); yield(); }\n }"}, {"sha": "cbc3b8b2ea64b5c700a34f121c43fdbf8beff6ac", "filename": "src/test/run-pass/spawn-module-qualified.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -2,7 +2,7 @@ use std;\n import task::join;\n import task::spawn_joinable;\n \n-fn main() { let x = spawn_joinable(10, m::child); join(x); }\n+fn main() { let x = spawn_joinable {|| m::child(10); }; join(x); }\n \n mod m {\n     fn child(&&i: int) { log(debug, i); }"}, {"sha": "727d8326b4ea28f8fe53164ead9629c1a2f9e6c6", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -12,12 +12,12 @@ import task;\n \n type ctx = comm::chan<int>;\n \n-fn iotask(&&args: (ctx, str)) {\n-    let (cx, ip) = args;\n+fn iotask(cx: ctx, ip: str) {\n     assert (str::eq(ip, \"localhost\"));\n }\n \n fn main() {\n     let p = comm::port::<int>();\n-    task::spawn((comm::chan(p), \"localhost\"), iotask);\n+    let ch = comm::chan(p);\n+    task::spawn {|| iotask(ch, \"localhost\"); };\n }"}, {"sha": "7a395f677aa68e395f3d6bd66cd2e1c32a012919", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -4,7 +4,10 @@ use std;\n \n import task;\n \n-fn main() { let t = task::spawn_joinable(10, child); task::join(t); }\n+fn main() {\n+    let t = task::spawn_joinable {|| child(10); };\n+    task::join(t);\n+}\n \n fn child(&&i: int) { log(error, i); assert (i == 10); }\n "}, {"sha": "86e2c9965176a242bc999e920f0d4ea5e9315012", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -3,7 +3,7 @@\n use std;\n import task::spawn;\n \n-fn main() { spawn((10, 20, 30, 40, 50, 60, 70, 80, 90), child); }\n+fn main() { spawn {|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)); }; }\n \n fn child(&&args: (int, int, int, int, int, int, int, int, int)) {\n     let (i1, i2, i3, i4, i5, i6, i7, i8, i9) = args;"}, {"sha": "0d0a70ae816c8d2fa1f31fac560199582997308d", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -20,7 +20,7 @@ fn test05_start(ch : chan<int>) {\n fn test05() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    task::spawn(ch, test05_start);\n+    task::spawn {|| test05_start(ch); };\n     let value = comm::recv(po);\n     log(error, value);\n     value = comm::recv(po);"}, {"sha": "96901b9ae56808b8c6d013468ecea254b4e2a766", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -5,10 +5,10 @@ import task::join;\n \n fn main() { test00(); }\n \n-fn start(&&_i: ()) { #debug(\"Started / Finished task.\"); }\n+fn start() { #debug(\"Started / Finished task.\"); }\n \n fn test00() {\n-    let t = spawn_joinable((), start);\n+    let t = spawn_joinable {|| start(); };\n     join(t);\n     #debug(\"Completing.\");\n }"}, {"sha": "d3c1d19f3eb0b319fa199382a440bc74fe59dbdb", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -18,7 +18,8 @@ fn start(c: comm::chan<comm::chan<str>>) {\n \n fn main() {\n     let p = comm::port();\n-    let child = task::spawn(comm::chan(p), start);\n+    let ch = comm::chan(p);\n+    let child = task::spawn {|| start(ch); };\n \n     let c = comm::recv(p);\n     comm::send(c, \"A\");"}, {"sha": "b1e23b2443a95c74af5d62c4b7ce18150d190858", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -9,6 +9,7 @@ fn start(c: comm::chan<comm::chan<int>>) {\n \n fn main() {\n     let p = comm::port();\n-    let child = task::spawn(comm::chan(p), start);\n+    let ch = comm::chan(p);\n+    let child = task::spawn {|| start(ch); };\n     let c = comm::recv(p);\n }"}, {"sha": "f92585cd2542793af106b8ff48d84c52bcd1928b", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -7,7 +7,7 @@ fn start(&&task_number: int) { #debug(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: int = 0;\n-    let t = task::spawn_joinable(i, start);\n+    let t = task::spawn_joinable {|| start(i); };\n \n     // Sleep long enough for the task to finish.\n     task::sleep(10000u);"}, {"sha": "dc2393d13f481b055fdaefcaed73916ef09c3d06", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -3,16 +3,16 @@ import task;\n import comm;\n import comm::send;\n \n-fn start(&&args: (comm::chan<int>, int, int)) {\n-    let (c, start, number_of_messages) = args;\n+fn start(c: comm::chan<int>, start: int, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { send(c, start + i); i += 1; }\n }\n \n fn main() {\n     #debug(\"Check that we don't deadlock.\");\n     let p = comm::port::<int>();\n-    let a = task::spawn_joinable((comm::chan(p), 0, 10), start);\n+    let ch = comm::chan(p);\n+    let a = task::spawn_joinable {|| start(ch, 0, 10); };\n     task::join(a);\n     #debug(\"Joined task\");\n }"}, {"sha": "48f4ca7a8b24b1d0c6b2ddb3c9af69af240103d1", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -4,12 +4,13 @@ import task;\n \n fn main() {\n     let po = comm::port::<int>();\n+    let ch = comm::chan(po);\n \n     // Spawn 10 tasks each sending us back one int.\n     let i = 10;\n     while (i > 0) {\n         log(debug, i);\n-        task::spawn((i, comm::chan(po)), child);\n+        task::spawn {|| child(i, ch); };\n         i = i - 1;\n     }\n \n@@ -27,8 +28,7 @@ fn main() {\n     #debug(\"main thread exiting\");\n }\n \n-fn child(&&args: (int, comm::chan<int>)) {\n-    let (x, ch) = args;\n+fn child(x: int, ch: comm::chan<int>) {\n     log(debug, x);\n-    comm::send(ch, x);\n+    comm::send(ch, copy x);\n }"}, {"sha": "d762b7fca903b4907aa0bedd52988852c2676cd5", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -3,10 +3,12 @@ use std;\n import comm;\n import task;\n \n-fn start(&&args: (comm::chan<int>, int)) {\n-    let (c, i) = args;\n-\n-    while i > 0 { comm::send(c, 0); i = i - 1; }\n+fn start(c: comm::chan<int>, i0: int) {\n+    let i = i0;\n+    while i > 0 {\n+        comm::send(c, 0);\n+        i = i - 1;\n+    }\n }\n \n fn main() {\n@@ -15,6 +17,7 @@ fn main() {\n     // is likely to terminate before the child completes, so from\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n-    let child = task::spawn((comm::chan(p), 10), start);\n+    let ch = comm::chan(p);\n+    let child = task::spawn {|| start(ch, 10); };\n     let c = comm::recv(p);\n }"}, {"sha": "c17b1c8a11e61691bacfaaa7ecb202d2ac807caa", "filename": "src/test/run-pass/task-comm-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -22,7 +22,7 @@ fn test00() {\n     let tasks = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        tasks += [task::spawn_joinable(copy i, start)];\n+        tasks += [task::spawn_joinable {|| start(i); }];\n     }\n \n     for t in tasks { task::join(t); }"}, {"sha": "d582630935679d6e99e8d60c2f01fc81872ca676", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -7,8 +7,7 @@ import comm::recv;\n \n fn main() { #debug(\"===== WITHOUT THREADS =====\"); test00(); }\n \n-fn test00_start(&&args: (chan<int>, int, int)) {\n-    let (ch, message, count) = args;\n+fn test00_start(ch: chan<int>, message: int, count: int) {\n     #debug(\"Starting test00_start\");\n     let i: int = 0;\n     while i < count {\n@@ -33,8 +32,9 @@ fn test00() {\n     // Create and spawn tasks...\n     let tasks = [];\n     while i < number_of_tasks {\n-        tasks += [task::spawn_joinable(\n-            (ch, i, number_of_messages), test00_start)];\n+        tasks += [task::spawn_joinable {||\n+            test00_start(ch, i, number_of_messages)\n+        }];\n         i = i + 1;\n     }\n "}, {"sha": "c7c15830955268017aa4bef39408da95dc0c8e18", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -7,8 +7,7 @@ import comm::port;\n \n fn main() { test00(); }\n \n-fn test00_start(&&args: (comm::chan<int>, int, int)) {\n-    let (c, start, number_of_messages) = args;\n+fn test00_start(c: comm::chan<int>, start: int, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, start + i); i += 1; }\n }\n@@ -18,23 +17,20 @@ fn test00() {\n     let sum: int = 0;\n     let p = port();\n     let number_of_messages: int = 10;\n+    let c = chan(p);\n \n-    let t0 =\n-        task::spawn_joinable((chan(p),\n-                               number_of_messages * 0,\n-                               number_of_messages), test00_start);\n-    let t1 =\n-        task::spawn_joinable((chan(p),\n-                               number_of_messages * 1,\n-                               number_of_messages), test00_start);\n-    let t2 =\n-        task::spawn_joinable((chan(p),\n-                               number_of_messages * 2,\n-                               number_of_messages), test00_start);\n-    let t3 =\n-        task::spawn_joinable((chan(p),\n-                               number_of_messages * 3,\n-                               number_of_messages), test00_start);\n+    let t0 = task::spawn_joinable {||\n+        test00_start(c, number_of_messages * 0, number_of_messages);\n+    };\n+    let t1 = task::spawn_joinable {||\n+        test00_start(c, number_of_messages * 1, number_of_messages);\n+    };\n+    let t2 = task::spawn_joinable {||\n+        test00_start(c, number_of_messages * 2, number_of_messages);\n+    };\n+    let t3 = task::spawn_joinable {||\n+        test00_start(c, number_of_messages * 3, number_of_messages);\n+    };\n \n     let i: int = 0;\n     while i < number_of_messages {"}, {"sha": "8259fde9fad13d984d0130c794cc1154bb2faa88", "filename": "src/test/run-pass/task-comm-8.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -4,8 +4,7 @@ import comm;\n \n fn main() { test00(); }\n \n-fn test00_start(&&args: (comm::chan<int>, int, int)) {\n-    let (c, start, number_of_messages) = args;\n+fn test00_start(c: comm::chan<int>, start: int, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, start + i); i += 1; }\n }\n@@ -14,24 +13,21 @@ fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n     let p = comm::port();\n+    let c = comm::chan(p);\n     let number_of_messages: int = 10;\n \n-    let t0 =\n-        task::spawn_joinable((comm::chan(p),\n-                               number_of_messages * 0,\n-                               number_of_messages), test00_start);\n-    let t1 =\n-        task::spawn_joinable((comm::chan(p),\n-                               number_of_messages * 1,\n-                               number_of_messages), test00_start);\n-    let t2 =\n-        task::spawn_joinable((comm::chan(p),\n-                               number_of_messages * 2,\n-                               number_of_messages), test00_start);\n-    let t3 =\n-        task::spawn_joinable((comm::chan(p),\n-                               number_of_messages * 3,\n-                               number_of_messages), test00_start);\n+    let t0 = task::spawn_joinable {||\n+        test00_start(c, number_of_messages * 0, number_of_messages);\n+    };\n+    let t1 = task::spawn_joinable {||\n+        test00_start(c, number_of_messages * 1, number_of_messages);\n+    };\n+    let t2 = task::spawn_joinable {||\n+        test00_start(c, number_of_messages * 2, number_of_messages);\n+    };\n+    let t3 = task::spawn_joinable {||\n+        test00_start(c, number_of_messages * 3, number_of_messages);\n+    };\n \n     let i: int = 0;\n     while i < number_of_messages {"}, {"sha": "f6cc1dae6f017f08896cf30b118c352c637d0bef", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -4,8 +4,7 @@ import comm;\n \n fn main() { test00(); }\n \n-fn test00_start(&&args: (comm::chan<int>, int)) {\n-    let (c, number_of_messages) = args;\n+fn test00_start(c: comm::chan<int>, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, i + 0); i += 1; }\n }\n@@ -15,9 +14,11 @@ fn test00() {\n     let sum: int = 0;\n     let p = comm::port();\n     let number_of_messages: int = 10;\n+    let ch = comm::chan(p);\n \n-    let t0 = task::spawn_joinable((comm::chan(p), number_of_messages),\n-                                  test00_start);\n+    let t0 = task::spawn_joinable {||\n+        test00_start(ch, number_of_messages);\n+    };\n \n     let i: int = 0;\n     while i < number_of_messages {"}, {"sha": "4593c90293a21e7839bb2e10ef720e4ab64fe8f5", "filename": "src/test/run-pass/task-comm-chan-cleanup4.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -12,16 +12,17 @@ fn starship(&&ch: comm::chan<str>) {\n     }\n }\n \n-fn starbase(&&_args: ()) {\n+fn starbase() {\n     int::range(0, 10) { |_i|\n         let p = comm::port();\n-        task::spawn(comm::chan(p), starship);\n+        let c = comm::chan(p);\n+        task::spawn {|| starship(c);};\n         task::yield();\n     }\n }\n \n fn main() {\n     int::range(0, 10) { |_i|\n-        task::spawn((), starbase);\n+        task::spawn {|| starbase();};\n     }\n }\n\\ No newline at end of file"}, {"sha": "bd9d359383c2d8f64ccddfa915bbcdc111369b5d", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -18,8 +18,7 @@ fn main() {\n     test06();\n }\n \n-fn test00_start(&&args: (chan<int>, int, int)) {\n-    let (ch, message, count) = args;\n+fn test00_start(ch: chan<int>, message: int, count: int) {\n     #debug(\"Starting test00_start\");\n     let i: int = 0;\n     while i < count {\n@@ -43,8 +42,9 @@ fn test00() {\n     let tasks = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        tasks += [task::spawn_joinable(\n-            (ch, i, number_of_messages), test00_start)];\n+        tasks += [\n+            task::spawn_joinable {|| test00_start(ch, i, number_of_messages);}\n+        ];\n     }\n     let sum: int = 0;\n     for t in tasks {\n@@ -90,7 +90,7 @@ fn test03() {\n     log(debug, v.length());\n }\n \n-fn test04_start(&&_args: ()) {\n+fn test04_start() {\n     #debug(\"Started task\");\n     let i: int = 1024 * 1024;\n     while i > 0 { i = i - 1; }\n@@ -100,7 +100,7 @@ fn test04_start(&&_args: ()) {\n fn test04() {\n     #debug(\"Spawning lots of tasks.\");\n     let i: int = 4;\n-    while i > 0 { i = i - 1; task::spawn((), test04_start); }\n+    while i > 0 { i = i - 1; task::spawn {|| test04_start(); }; }\n     #debug(\"Finishing up.\");\n }\n \n@@ -115,7 +115,7 @@ fn test05_start(ch: chan<int>) {\n fn test05() {\n     let po = comm::port();\n     let ch = chan(po);\n-    task::spawn(ch, test05_start);\n+    task::spawn {|| test05_start(ch); };\n     let value: int;\n     value = recv(po);\n     value = recv(po);\n@@ -139,7 +139,7 @@ fn test06() {\n     let tasks = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        tasks += [task::spawn_joinable(copy i, test06_start)];\n+        tasks += [task::spawn_joinable {|| test06_start(i);}];\n     }\n \n "}, {"sha": "313d9bd37029cf0d3eb49553d04295606b4472a4", "filename": "src/test/run-pass/task-killjoin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -9,25 +9,25 @@\n use std;\n import task;\n \n-fn supervised(&&_args: ()) {\n+fn supervised() {\n     // Yield to make sure the supervisor joins before we\n     // fail. This is currently not needed because the supervisor\n     // runs first, but I can imagine that changing.\n     task::yield();\n     fail;\n }\n \n-fn supervisor(&&_args: ()) {\n+fn supervisor() {\n     // Unsupervise this task so the process doesn't return a failure status as\n     // a result of the main task being killed.\n     task::unsupervise();\n     let f = supervised;\n-    let t = task::spawn_joinable((), supervised);\n+    let t = task::spawn_joinable {|| supervised(); };\n     task::join(t);\n }\n \n fn main() {\n-    let dom2 = task::spawn_joinable((), supervisor);\n+    let dom2 = task::spawn_joinable {|| supervisor(); };\n     task::join(dom2);\n }\n "}, {"sha": "1aead2837581c3c79775e6427ad056a2b1ec65d0", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -1,6 +1,8 @@\n use std;\n import task;\n-fn main() { task::spawn(\"Hello\", child); }\n+fn main() {\n+    task::spawn {|| child(\"Hello\"); };\n+}\n \n fn child(&&s: str) {\n "}, {"sha": "23597b3ed626b960a13d9bf6752960d183d5f3dd", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -11,14 +11,14 @@ fn test_cont() { let i = 0; while i < 1 { i += 1; let x: @int = cont; } }\n fn test_ret() { let x: @int = ret; }\n \n fn test_fail() {\n-    fn f(&&_i: ()) { task::unsupervise(); let x: @int = fail; }\n-    task::spawn((), f);\n+    fn f() { task::unsupervise(); let x: @int = fail; }\n+    task::spawn {|| f(); };\n }\n \n fn test_fail_indirect() {\n     fn f() -> ! { fail; }\n-    fn g(&&_i: ()) { task::unsupervise(); let x: @int = f(); }\n-    task::spawn((), g);\n+    fn g() { task::unsupervise(); let x: @int = f(); }\n+    task::spawn {|| g(); };\n }\n \n fn main() {"}, {"sha": "9f4e6e1fdd84fea4e2c5adb2e7c779f706dd9b8f", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -5,7 +5,7 @@ import task;\n \n fn main() {\n     let i = 10;\n-    while i > 0 { task::spawn(copy i, child); i = i - 1; }\n+    while i > 0 { task::spawn {|| child(i); }; i = i - 1; }\n     #debug(\"main thread exiting\");\n }\n "}, {"sha": "976ca32104e95d3aa60d4233da8f3268b9bd9b91", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -3,17 +3,17 @@ import comm;\n import task;\n import uint;\n \n-fn child(args: (comm::chan<~uint>, uint)) {\n-    let (c, i) = args;\n+fn child(c: comm::chan<~uint>, i: uint) {\n     comm::send(c, ~i);\n }\n \n fn main() {\n     let p = comm::port();\n+    let ch = comm::chan(p);\n     let n = 100u;\n     let expected = 0u;\n     uint::range(0u, n) {|i|\n-        task::spawn((comm::chan(p), i), child);\n+        task::spawn {|| child(ch, i); };\n         expected += i;\n     }\n "}, {"sha": "ca4221e07632b1ad425d448e2b82051daef4db67", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -2,12 +2,12 @@\n use std;\n import task;\n \n-fn f(&&_i: ()) {\n+fn f() {\n     task::unsupervise();\n     let a = @0;\n     fail;\n }\n \n fn main() {\n-    task::spawn((), f);\n+    task::spawn {|| f(); };\n }\n\\ No newline at end of file"}, {"sha": "5bb70236b7c63d71311ff6d61c224c7f792ae236", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -16,6 +16,6 @@ fn f(c: comm::chan<bool>) {\n fn main() {\n     let p = comm::port();\n     let c = comm::chan(p);\n-    task::spawn(c, f);\n+    task::spawn {|| f(c); };\n     assert comm::recv(p);\n }\n\\ No newline at end of file"}, {"sha": "dbf91f31a3f2d34b441c1db6c9722e6b991e0a2e", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -6,12 +6,12 @@ import comm;\n resource complainer(c: @int) {\n }\n \n-fn f(&&_i: ()) {\n+fn f() {\n     task::unsupervise();\n     let c <- complainer(@0);\n     fail;\n }\n \n fn main() {\n-    task::spawn((), f);\n+    task::spawn {|| f(); };\n }\n\\ No newline at end of file"}, {"sha": "9fab3c5460921f5f70cf77a75ac75c032db0fae7", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -2,12 +2,12 @@\n use std;\n import task;\n \n-fn f(&&_i: ()) {\n+fn f() {\n     task::unsupervise();\n     let a = ~0;\n     fail;\n }\n \n fn main() {\n-    task::spawn((), f);\n+    task::spawn {|| f(); };\n }\n\\ No newline at end of file"}, {"sha": "eb4a74c141abd9f020b6f9eb10d7c33a5d0506bb", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -4,7 +4,7 @@ import task;\n import task::*;\n \n fn main() {\n-    let other = task::spawn_joinable((), child);\n+    let other = task::spawn_joinable {|| child(); };\n     #error(\"1\");\n     yield();\n     #error(\"2\");\n@@ -13,6 +13,6 @@ fn main() {\n     join(other);\n }\n \n-fn child(&&_i: ()) {\n+fn child() {\n     #error(\"4\"); yield(); #error(\"5\"); yield(); #error(\"6\");\n }"}, {"sha": "a5234cf8d129fbfb2f94aeb815f7739e06ea3e05", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -4,10 +4,10 @@ import task;\n import task::*;\n \n fn main() {\n-    let other = task::spawn_joinable((), child);\n+    let other = task::spawn_joinable {|| child(); };\n     #error(\"1\");\n     yield();\n     join(other);\n }\n \n-fn child(&&_i: ()) { #error(\"2\"); }\n+fn child() { #error(\"2\"); }"}, {"sha": "7945aaed7447829b59487a465dd2c36b616e6117", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -12,13 +12,13 @@ fn test_sleep() { task::sleep(1000000u); }\n #[ignore(cfg(target_os = \"win32\"))]\n fn test_unsupervise() {\n     fn f() { task::unsupervise(); fail; }\n-    task::spawn {|| f};\n+    task::spawn {|| f();};\n }\n \n #[test]\n fn test_lib_spawn() {\n     fn foo() { #error(\"Hello, World!\"); }\n-    task::spawn {|| foo};\n+    task::spawn {|| foo();};\n }\n \n #[test]\n@@ -54,6 +54,6 @@ fn test_join_chan_fail() {\n #[test]\n fn spawn_polymorphic() {\n     fn foo<send T>(x: T) { log(error, x); }\n-    task::spawn {|| foo(true);}\n-    task::spawn {|| foo(42);}\n+    task::spawn {|| foo(true);};\n+    task::spawn {|| foo(42);};\n }"}, {"sha": "3bbea1db6be233bc4588a9f6c826efda8f692f03", "filename": "src/test/stdtest/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Fstdtest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f84f88276a04c42340e99e6d9503d49780eb5e7/src%2Ftest%2Fstdtest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec.rs?ref=9f84f88276a04c42340e99e6d9503d49780eb5e7", "patch": "@@ -509,10 +509,10 @@ fn init() {\n fn init_empty() {\n \n     let r = task::join(\n-        task::spawn_joinable((), fn (&&_i: ()) {\n+        task::spawn_joinable {||\n             task::unsupervise();\n             vec::init::<int>([]);\n-        }));\n+        });\n     assert r == task::tr_failure\n }\n "}]}