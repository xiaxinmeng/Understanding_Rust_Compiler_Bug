{"sha": "68de7b30e04ed56c7acd61f5aecc5f447691be12", "node_id": "C_kwDOAAsO6NoAKDY4ZGU3YjMwZTA0ZWQ1NmM3YWNkNjFmNWFlY2M1ZjQ0NzY5MWJlMTI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-20T18:07:44Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-20T18:07:44Z"}, "message": "feat: Tag macro calls as unsafe if they expand to unsafe expressions", "tree": {"sha": "17dc643d643117d1bbbb081d8204ff8688fd5c64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17dc643d643117d1bbbb081d8204ff8688fd5c64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68de7b30e04ed56c7acd61f5aecc5f447691be12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68de7b30e04ed56c7acd61f5aecc5f447691be12", "html_url": "https://github.com/rust-lang/rust/commit/68de7b30e04ed56c7acd61f5aecc5f447691be12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68de7b30e04ed56c7acd61f5aecc5f447691be12/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a87f09a714b8299897a72ecfe206460903d703e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a87f09a714b8299897a72ecfe206460903d703e", "html_url": "https://github.com/rust-lang/rust/commit/5a87f09a714b8299897a72ecfe206460903d703e"}], "stats": {"total": 276, "additions": 208, "deletions": 68}, "files": [{"sha": "4afdde6494f3f2fd4586db48efe5c8847b041cbf", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -358,6 +358,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_macro_call(macro_call)\n     }\n \n+    pub fn is_unsafe_macro_call(&self, macro_call: &ast::MacroCall) -> bool {\n+        self.imp.is_unsafe_macro_call(macro_call)\n+    }\n+\n     pub fn resolve_attr_macro_call(&self, item: &ast::Item) -> Option<Macro> {\n         self.imp.resolve_attr_macro_call(item)\n     }\n@@ -961,6 +965,12 @@ impl<'db> SemanticsImpl<'db> {\n         sa.resolve_macro_call(self.db, macro_call)\n     }\n \n+    fn is_unsafe_macro_call(&self, macro_call: &ast::MacroCall) -> bool {\n+        let sa = self.analyze(macro_call.syntax());\n+        let macro_call = self.find_file(macro_call.syntax()).with_value(macro_call);\n+        sa.is_unsafe_macro_call(self.db, macro_call)\n+    }\n+\n     fn resolve_attr_macro_call(&self, item: &ast::Item) -> Option<Macro> {\n         let item_in_file = self.wrap_node_infile(item.clone());\n         let id = self.with_ctx(|ctx| {"}, {"sha": "6b2120b25328f7d0f55ebd7b0f8985da50db8595", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 51, "deletions": 27, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -25,7 +25,10 @@ use hir_def::{\n };\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use hir_ty::{\n-    diagnostics::{record_literal_missing_fields, record_pattern_missing_fields},\n+    diagnostics::{\n+        record_literal_missing_fields, record_pattern_missing_fields, unsafe_expressions,\n+        UnsafeExpr,\n+    },\n     Adjust, Adjustment, AutoBorrow, InferenceResult, Interner, Substitution, TyExt,\n     TyLoweringContext,\n };\n@@ -46,8 +49,7 @@ use base_db::CrateId;\n pub(crate) struct SourceAnalyzer {\n     pub(crate) file_id: HirFileId,\n     pub(crate) resolver: Resolver,\n-    body: Option<Arc<Body>>,\n-    body_source_map: Option<Arc<BodySourceMap>>,\n+    def: Option<(DefWithBodyId, Arc<Body>, Arc<BodySourceMap>)>,\n     infer: Option<Arc<InferenceResult>>,\n }\n \n@@ -67,8 +69,7 @@ impl SourceAnalyzer {\n         let resolver = resolver_for_scope(db.upcast(), def, scope);\n         SourceAnalyzer {\n             resolver,\n-            body: Some(body),\n-            body_source_map: Some(source_map),\n+            def: Some((def, body, source_map)),\n             infer: Some(db.infer(def)),\n             file_id,\n         }\n@@ -87,26 +88,21 @@ impl SourceAnalyzer {\n             Some(offset) => scope_for_offset(db, &scopes, &source_map, node.with_value(offset)),\n         };\n         let resolver = resolver_for_scope(db.upcast(), def, scope);\n-        SourceAnalyzer {\n-            resolver,\n-            body: Some(body),\n-            body_source_map: Some(source_map),\n-            infer: None,\n-            file_id,\n-        }\n+        SourceAnalyzer { resolver, def: Some((def, body, source_map)), infer: None, file_id }\n     }\n \n     pub(crate) fn new_for_resolver(\n         resolver: Resolver,\n         node: InFile<&SyntaxNode>,\n     ) -> SourceAnalyzer {\n-        SourceAnalyzer {\n-            resolver,\n-            body: None,\n-            body_source_map: None,\n-            infer: None,\n-            file_id: node.file_id,\n-        }\n+        SourceAnalyzer { resolver, def: None, infer: None, file_id: node.file_id }\n+    }\n+\n+    fn body_source_map(&self) -> Option<&BodySourceMap> {\n+        self.def.as_ref().map(|(.., source_map)| &**source_map)\n+    }\n+    fn body(&self) -> Option<&Body> {\n+        self.def.as_ref().map(|(_, body, _)| &**body)\n     }\n \n     fn expr_id(&self, db: &dyn HirDatabase, expr: &ast::Expr) -> Option<ExprId> {\n@@ -116,22 +112,22 @@ impl SourceAnalyzer {\n             }\n             _ => InFile::new(self.file_id, expr.clone()),\n         };\n-        let sm = self.body_source_map.as_ref()?;\n+        let sm = self.body_source_map()?;\n         sm.node_expr(src.as_ref())\n     }\n \n     fn pat_id(&self, pat: &ast::Pat) -> Option<PatId> {\n         // FIXME: macros, see `expr_id`\n         let src = InFile { file_id: self.file_id, value: pat };\n-        self.body_source_map.as_ref()?.node_pat(src)\n+        self.body_source_map()?.node_pat(src)\n     }\n \n     fn expand_expr(\n         &self,\n         db: &dyn HirDatabase,\n         expr: InFile<ast::MacroCall>,\n     ) -> Option<InFile<ast::Expr>> {\n-        let macro_file = self.body_source_map.as_ref()?.node_macro_file(expr.as_ref())?;\n+        let macro_file = self.body_source_map()?.node_macro_file(expr.as_ref())?;\n         let expanded = db.parse_or_expand(macro_file)?;\n \n         let res = match ast::MacroCall::cast(expanded.clone()) {\n@@ -196,7 +192,7 @@ impl SourceAnalyzer {\n         param: &ast::SelfParam,\n     ) -> Option<Type> {\n         let src = InFile { file_id: self.file_id, value: param };\n-        let pat_id = self.body_source_map.as_ref()?.node_self_param(src)?;\n+        let pat_id = self.body_source_map()?.node_self_param(src)?;\n         let ty = self.infer.as_ref()?[pat_id].clone();\n         Type::new_with_resolver(db, &self.resolver, ty)\n     }\n@@ -226,7 +222,7 @@ impl SourceAnalyzer {\n     ) -> Option<(Field, Option<Local>, Type)> {\n         let record_expr = ast::RecordExpr::cast(field.syntax().parent().and_then(|p| p.parent())?)?;\n         let expr = ast::Expr::from(record_expr);\n-        let expr_id = self.body_source_map.as_ref()?.node_expr(InFile::new(self.file_id, &expr))?;\n+        let expr_id = self.body_source_map()?.node_expr(InFile::new(self.file_id, &expr))?;\n \n         let local_name = field.field_name()?.as_name();\n         let local = if field.name_ref().is_some() {\n@@ -279,7 +275,7 @@ impl SourceAnalyzer {\n         pat: &ast::IdentPat,\n     ) -> Option<ModuleDef> {\n         let pat_id = self.pat_id(&pat.clone().into())?;\n-        let body = self.body.as_ref()?;\n+        let body = self.body()?;\n         let path = match &body[pat_id] {\n             Pat::Path(path) => path,\n             _ => return None,\n@@ -415,7 +411,7 @@ impl SourceAnalyzer {\n         literal: &ast::RecordExpr,\n     ) -> Option<Vec<(Field, Type)>> {\n         let krate = self.resolver.krate()?;\n-        let body = self.body.as_ref()?;\n+        let body = self.body()?;\n         let infer = self.infer.as_ref()?;\n \n         let expr_id = self.expr_id(db, &literal.clone().into())?;\n@@ -433,7 +429,7 @@ impl SourceAnalyzer {\n         pattern: &ast::RecordPat,\n     ) -> Option<Vec<(Field, Type)>> {\n         let krate = self.resolver.krate()?;\n-        let body = self.body.as_ref()?;\n+        let body = self.body()?;\n         let infer = self.infer.as_ref()?;\n \n         let pat_id = self.pat_id(&pattern.clone().into())?;\n@@ -488,6 +484,34 @@ impl SourceAnalyzer {\n         let expr_id = self.expr_id(db, &record_lit.into())?;\n         infer.variant_resolution_for_expr(expr_id)\n     }\n+\n+    pub(crate) fn is_unsafe_macro_call(\n+        &self,\n+        db: &dyn HirDatabase,\n+        macro_call: InFile<&ast::MacroCall>,\n+    ) -> bool {\n+        if let (Some((def, body, sm)), Some(infer)) = (&self.def, &self.infer) {\n+            if let Some(expr_ids) = sm.macro_expansion_expr(macro_call) {\n+                let mut is_unsafe = false;\n+                for &expr_id in expr_ids {\n+                    unsafe_expressions(\n+                        db,\n+                        infer,\n+                        *def,\n+                        body,\n+                        expr_id,\n+                        &mut |UnsafeExpr { inside_unsafe_block, .. }| {\n+                            is_unsafe |= !inside_unsafe_block\n+                        },\n+                    );\n+                    if is_unsafe {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        false\n+    }\n }\n \n fn scope_for("}, {"sha": "57dd3a3502f9afd289072faad59f343d8fc3179e", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@ use la_arena::{Arena, ArenaMap};\n use limit::Limit;\n use profile::Count;\n use rustc_hash::FxHashMap;\n+use smallvec::SmallVec;\n use syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n \n use crate::{\n@@ -293,6 +294,10 @@ pub struct BodySourceMap {\n     field_map: FxHashMap<InFile<AstPtr<ast::RecordExprField>>, ExprId>,\n     field_map_back: FxHashMap<ExprId, InFile<AstPtr<ast::RecordExprField>>>,\n \n+    /// Maps a macro call to its lowered expressions, a single one if it expands to an expression,\n+    /// or multiple if it expands to MacroStmts.\n+    macro_call_to_exprs: FxHashMap<InFile<AstPtr<ast::MacroCall>>, SmallVec<[ExprId; 1]>>,\n+\n     expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n \n     /// Diagnostics accumulated during body lowering. These contain `AstPtr`s and so are stored in\n@@ -461,6 +466,11 @@ impl BodySourceMap {\n         self.field_map.get(&src).cloned()\n     }\n \n+    pub fn macro_expansion_expr(&self, node: InFile<&ast::MacroCall>) -> Option<&[ExprId]> {\n+        let src = node.map(AstPtr::new);\n+        self.macro_call_to_exprs.get(&src).map(|it| &**it)\n+    }\n+\n     /// Get a reference to the body source map's diagnostics.\n     pub fn diagnostics(&self) -> &[BodyDiagnostic] {\n         &self.diagnostics"}, {"sha": "661486d6e01ccfc64660b68146af45d0c42242b2", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -13,6 +13,7 @@ use hir_expand::{\n use la_arena::Arena;\n use profile::Count;\n use rustc_hash::FxHashMap;\n+use smallvec::smallvec;\n use syntax::{\n     ast::{\n         self, ArrayExprKind, AstChildren, HasArgList, HasLoopBody, HasName, LiteralKind,\n@@ -507,14 +508,21 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::MacroCall(e) => {\n                 let macro_ptr = AstPtr::new(&e);\n-                let mut ids = None;\n-                self.collect_macro_call(e, macro_ptr, true, |this, expansion| {\n-                    ids.get_or_insert(match expansion {\n-                        Some(it) => this.collect_expr(it),\n-                        None => this.alloc_expr(Expr::Missing, syntax_ptr.clone()),\n-                    });\n+                let mut id = None;\n+                self.collect_macro_call(e, macro_ptr.clone(), true, |this, expansion| {\n+                    if let Some(it) = expansion {\n+                        id.get_or_insert(this.collect_expr(it));\n+                    }\n                 });\n-                ids.unwrap_or_else(|| self.alloc_expr(Expr::Missing, syntax_ptr.clone()))\n+                match id {\n+                    Some(id) => {\n+                        self.source_map\n+                            .macro_call_to_exprs\n+                            .insert(self.expander.to_source(macro_ptr), smallvec![id]);\n+                        id\n+                    }\n+                    None => self.alloc_expr(Expr::Missing, syntax_ptr.clone()),\n+                }\n             }\n             ast::Expr::MacroStmts(e) => {\n                 e.statements().for_each(|s| self.collect_stmt(s));\n@@ -529,12 +537,12 @@ impl ExprCollector<'_> {\n         })\n     }\n \n-    fn collect_macro_call<F: FnMut(&mut Self, Option<T>), T: ast::AstNode>(\n+    fn collect_macro_call<F: FnOnce(&mut Self, Option<T>), T: ast::AstNode>(\n         &mut self,\n         mcall: ast::MacroCall,\n         syntax_ptr: AstPtr<ast::MacroCall>,\n         record_diagnostics: bool,\n-        mut collector: F,\n+        collector: F,\n     ) {\n         // File containing the macro call. Expansion errors will be attached here.\n         let outer_file = self.expander.current_file_id;\n@@ -625,17 +633,17 @@ impl ExprCollector<'_> {\n                     let macro_ptr = AstPtr::new(&m);\n                     let syntax_ptr = AstPtr::new(&stmt.expr().unwrap());\n \n-                    self.collect_macro_call(\n-                        m,\n-                        macro_ptr,\n-                        false,\n-                        |this, expansion| match expansion {\n+                    let prev_stmt = self.statements_in_scope.len();\n+                    let mut tail = None;\n+                    self.collect_macro_call(m, macro_ptr.clone(), false, |this, expansion| {\n+                        match expansion {\n                             Some(expansion) => {\n                                 let statements: ast::MacroStmts = expansion;\n \n                                 statements.statements().for_each(|stmt| this.collect_stmt(stmt));\n                                 if let Some(expr) = statements.expr() {\n                                     let expr = this.collect_expr(expr);\n+                                    tail = Some(expr);\n                                     this.statements_in_scope\n                                         .push(Statement::Expr { expr, has_semi });\n                                 }\n@@ -644,8 +652,24 @@ impl ExprCollector<'_> {\n                                 let expr = this.alloc_expr(Expr::Missing, syntax_ptr.clone());\n                                 this.statements_in_scope.push(Statement::Expr { expr, has_semi });\n                             }\n-                        },\n-                    );\n+                        }\n+                    });\n+                    let mut macro_exprs = smallvec![];\n+                    for stmt in &self.statements_in_scope[prev_stmt..] {\n+                        match *stmt {\n+                            Statement::Let { initializer, else_branch, .. } => {\n+                                macro_exprs.extend(initializer);\n+                                macro_exprs.extend(else_branch);\n+                            }\n+                            Statement::Expr { expr, .. } => macro_exprs.push(expr),\n+                        }\n+                    }\n+                    macro_exprs.extend(tail);\n+                    if !macro_exprs.is_empty() {\n+                        self.source_map\n+                            .macro_call_to_exprs\n+                            .insert(self.expander.to_source(macro_ptr), macro_exprs);\n+                    }\n                 } else {\n                     let expr = self.collect_expr_opt(stmt.expr());\n                     self.statements_in_scope.push(Statement::Expr { expr, has_semi });"}, {"sha": "37eb06be1d3d1de7e9cb400350d70c3c259c71a1", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -9,5 +9,5 @@ pub use crate::diagnostics::{\n     expr::{\n         record_literal_missing_fields, record_pattern_missing_fields, BodyValidationDiagnostic,\n     },\n-    unsafe_check::missing_unsafe,\n+    unsafe_check::{missing_unsafe, unsafe_expressions, UnsafeExpr},\n };"}, {"sha": "4e0dcf7b61826541369c71fa5d23acd4b16eb3cb", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -12,54 +12,57 @@ use crate::{db::HirDatabase, InferenceResult, Interner, TyExt, TyKind};\n \n pub fn missing_unsafe(db: &dyn HirDatabase, def: DefWithBodyId) -> Vec<ExprId> {\n     let infer = db.infer(def);\n+    let mut res = Vec::new();\n \n     let is_unsafe = match def {\n         DefWithBodyId::FunctionId(it) => db.function_data(it).is_unsafe(),\n         DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) => false,\n     };\n     if is_unsafe {\n-        return Vec::new();\n+        return res;\n     }\n \n-    unsafe_expressions(db, &infer, def)\n-        .into_iter()\n-        .filter(|it| !it.inside_unsafe_block)\n-        .map(|it| it.expr)\n-        .collect()\n+    let body = db.body(def);\n+    unsafe_expressions(db, &infer, def, &body, body.body_expr, &mut |expr| {\n+        if !expr.inside_unsafe_block {\n+            res.push(expr.expr);\n+        }\n+    });\n+\n+    res\n }\n \n-struct UnsafeExpr {\n-    pub(crate) expr: ExprId,\n-    pub(crate) inside_unsafe_block: bool,\n+pub struct UnsafeExpr {\n+    pub expr: ExprId,\n+    pub inside_unsafe_block: bool,\n }\n \n-fn unsafe_expressions(\n+pub fn unsafe_expressions(\n     db: &dyn HirDatabase,\n     infer: &InferenceResult,\n     def: DefWithBodyId,\n-) -> Vec<UnsafeExpr> {\n-    let mut unsafe_exprs = vec![];\n-    let body = db.body(def);\n-    walk_unsafe(&mut unsafe_exprs, db, infer, def, &body, body.body_expr, false);\n-\n-    unsafe_exprs\n+    body: &Body,\n+    current: ExprId,\n+    unsafe_expr_cb: &mut dyn FnMut(UnsafeExpr),\n+) {\n+    walk_unsafe(db, infer, def, body, current, false, unsafe_expr_cb)\n }\n \n fn walk_unsafe(\n-    unsafe_exprs: &mut Vec<UnsafeExpr>,\n     db: &dyn HirDatabase,\n     infer: &InferenceResult,\n     def: DefWithBodyId,\n     body: &Body,\n     current: ExprId,\n     inside_unsafe_block: bool,\n+    unsafe_expr_cb: &mut dyn FnMut(UnsafeExpr),\n ) {\n     let expr = &body.exprs[current];\n     match expr {\n         &Expr::Call { callee, .. } => {\n             if let Some(func) = infer[callee].as_fn_def(db) {\n                 if db.function_data(func).is_unsafe() {\n-                    unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n+                    unsafe_expr_cb(UnsafeExpr { expr: current, inside_unsafe_block });\n                 }\n             }\n         }\n@@ -68,7 +71,7 @@ fn walk_unsafe(\n             let value_or_partial = resolver.resolve_path_in_value_ns(db.upcast(), path.mod_path());\n             if let Some(ResolveValueResult::ValueNs(ValueNs::StaticId(id))) = value_or_partial {\n                 if db.static_data(id).mutable {\n-                    unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n+                    unsafe_expr_cb(UnsafeExpr { expr: current, inside_unsafe_block });\n                 }\n             }\n         }\n@@ -78,21 +81,21 @@ fn walk_unsafe(\n                 .map(|(func, _)| db.function_data(func).is_unsafe())\n                 .unwrap_or(false)\n             {\n-                unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n+                unsafe_expr_cb(UnsafeExpr { expr: current, inside_unsafe_block });\n             }\n         }\n         Expr::UnaryOp { expr, op: UnaryOp::Deref } => {\n             if let TyKind::Raw(..) = &infer[*expr].kind(Interner) {\n-                unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n+                unsafe_expr_cb(UnsafeExpr { expr: current, inside_unsafe_block });\n             }\n         }\n         Expr::Unsafe { body: child } => {\n-            return walk_unsafe(unsafe_exprs, db, infer, def, body, *child, true);\n+            return walk_unsafe(db, infer, def, body, *child, true, unsafe_expr_cb);\n         }\n         _ => {}\n     }\n \n     expr.walk_child_exprs(|child| {\n-        walk_unsafe(unsafe_exprs, db, infer, def, body, child, inside_unsafe_block);\n+        walk_unsafe(db, infer, def, body, child, inside_unsafe_block, unsafe_expr_cb);\n     });\n }"}, {"sha": "7ac6775685319907089f46bd9dc924e11fdc0e34", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -248,6 +248,16 @@ fn highlight_name_ref(\n                         }\n                     }\n                 }\n+                Definition::Macro(_) => {\n+                    if let Some(macro_call) =\n+                        ide_db::syntax_helpers::node_ext::full_path_of_name_ref(&name_ref)\n+                            .and_then(|it| it.syntax().parent().and_then(ast::MacroCall::cast))\n+                    {\n+                        if sema.is_unsafe_macro_call(&macro_call) {\n+                            h |= HlMod::Unsafe;\n+                        }\n+                    }\n+                }\n                 _ => (),\n             }\n "}, {"sha": "9777c014c7a1648f933f88ead4341f2b14e1a903", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -71,6 +71,7 @@ pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padd\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "e07fd3925c7845080473ea670227e0b1c8ce54f3", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "1a4398814760b2b81656dbda04709bf101cdf44d", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_attributes.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_attributes.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_attributes.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_attributes.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "6704e5e8d531152566bc93cdaaa28970ffcc04b1", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "5d66f832daf94d86d7591b49ccc545fa15dbb290", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_default_library.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "d9126421cdab348b2654c2e6b928be3e99c3b70f", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "87b9da46e2cc843097f440360b244f97d592bc8e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "d5c930e04948800c83a46bc2e1d3f6dc78b54c04", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_general.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "ced7d22f03e4728b9338d039aa5d79fa1921084e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "278e0d84eeaab6b9171331f07971ec597211d565", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_keywords.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "2d85fc8c925b71e58b47a2d050e6f0748fd6a807", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_lifetimes.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_lifetimes.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_lifetimes.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_lifetimes.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "71add7e49552d47d0d1cc5816810654d48aa951c", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_macros.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "2369071ae2aae2044cc414505455b591b5b59874", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_operators.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_operators.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_operators.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_operators.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "bff35c897e1dae20f70704094f75b3232bb2ed80", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_rainbow.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_rainbow.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_rainbow.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_rainbow.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "e26c017f95214028f2052ff9f629f7e98a56c1e9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }"}, {"sha": "113463aa7a58cbac98f82610781d49054bcbc5d0", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -19,6 +19,7 @@\n .operator.unsafe    { color: #BC8383; }\n .mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.macro.unsafe       { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n@@ -41,7 +42,17 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">MUT_GLOBAL</span><span class=\"colon\">:</span> <span class=\"struct\">Struct</span> <span class=\"operator\">=</span> <span class=\"struct\">Struct</span> <span class=\"brace\">{</span> <span class=\"field\">field</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+<pre><code><span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">id</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+        <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span>\n+    <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">unsafe_deref</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+        <span class=\"punctuation\">*</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">as</span> <span class=\"punctuation\">*</span><span class=\"keyword\">const</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span>\n+    <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n+<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">MUT_GLOBAL</span><span class=\"colon\">:</span> <span class=\"struct\">Struct</span> <span class=\"operator\">=</span> <span class=\"struct\">Struct</span> <span class=\"brace\">{</span> <span class=\"field\">field</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"keyword\">static</span> <span class=\"static declaration\">GLOBAL</span><span class=\"colon\">:</span> <span class=\"struct\">Struct</span> <span class=\"operator\">=</span> <span class=\"struct\">Struct</span> <span class=\"brace\">{</span> <span class=\"field\">field</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n@@ -77,7 +88,15 @@\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"punctuation\">_</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">u</span> <span class=\"operator\">=</span> <span class=\"union\">Union</span> <span class=\"brace\">{</span> <span class=\"field\">b</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+\n+    <span class=\"macro\">id</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n+        <span class=\"keyword unsafe\">unsafe</span> <span class=\"brace\">{</span> <span class=\"macro unsafe\">unsafe_deref</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">}</span>\n+    <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"brace\">{</span>\n+        <span class=\"macro unsafe\">unsafe_deref</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+        <span class=\"macro unsafe\">id</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span> <span class=\"macro unsafe\">unsafe_deref</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+\n         <span class=\"comment\">// unsafe fn and method calls</span>\n         <span class=\"function unsafe\">unsafe_fn</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">b</span> <span class=\"operator\">=</span> <span class=\"variable\">u</span><span class=\"operator\">.</span><span class=\"field unsafe\">b</span><span class=\"semicolon\">;</span>"}, {"sha": "c74bced637edb3375161d64c67f69989dee1790e", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -483,6 +483,16 @@ fn main() {\n fn test_unsafe_highlighting() {\n     check_highlighting(\n         r#\"\n+macro_rules! id {\n+    ($($tt:tt)*) => {\n+        $($tt)*\n+    };\n+}\n+macro_rules! unsafe_deref {\n+    () => {\n+        *(&() as *const ())\n+    };\n+}\n static mut MUT_GLOBAL: Struct = Struct { field: 0 };\n static GLOBAL: Struct = Struct { field: 0 };\n unsafe fn unsafe_fn() {}\n@@ -519,7 +529,15 @@ impl DoTheAutoref for u16 {\n fn main() {\n     let x = &5 as *const _ as *const usize;\n     let u = Union { b: 0 };\n+\n+    id! {\n+        unsafe { unsafe_deref!() }\n+    };\n+\n     unsafe {\n+        unsafe_deref!();\n+        id! { unsafe_deref!() };\n+\n         // unsafe fn and method calls\n         unsafe_fn();\n         let b = u.b;"}, {"sha": "3d7204583824b45f81c37f08679fe3fc6ca9eb5d", "filename": "crates/ide_db/src/syntax_helpers/node_ext.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68de7b30e04ed56c7acd61f5aecc5f447691be12/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs?ref=68de7b30e04ed56c7acd61f5aecc5f447691be12", "patch": "@@ -15,6 +15,13 @@ pub fn expr_as_name_ref(expr: &ast::Expr) -> Option<ast::NameRef> {\n     }\n }\n \n+pub fn full_path_of_name_ref(name_ref: &ast::NameRef) -> Option<ast::Path> {\n+    let mut ancestors = name_ref.syntax().ancestors();\n+    let _ = ancestors.next()?; // skip self\n+    let _ = ancestors.next().filter(|it| ast::PathSegment::can_cast(it.kind()))?; // skip self\n+    ancestors.take_while(|it| ast::Path::can_cast(it.kind())).last().and_then(ast::Path::cast)\n+}\n+\n pub fn block_as_lone_tail(block: &ast::BlockExpr) -> Option<ast::Expr> {\n     block.statements().next().is_none().then(|| block.tail_expr()).flatten()\n }"}]}