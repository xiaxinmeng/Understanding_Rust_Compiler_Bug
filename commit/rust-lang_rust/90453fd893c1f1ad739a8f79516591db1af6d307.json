{"sha": "90453fd893c1f1ad739a8f79516591db1af6d307", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNDUzZmQ4OTNjMWYxYWQ3MzlhOGY3OTUxNjU5MWRiMWFmNmQzMDc=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-05T23:42:39Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-09T22:08:14Z"}, "message": "Run rustfmt\n\nOnly partially apply suggestions.", "tree": {"sha": "a5d60ec66c8cfe912ea3618e60b5eee1658f4d92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5d60ec66c8cfe912ea3618e60b5eee1658f4d92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90453fd893c1f1ad739a8f79516591db1af6d307", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXWejUAAoJEF5CfHlMukXozEYP/3qgwR1dNFPCfGLs09GICLWU\nCg0rU5SEwDjOHuv5XVs+0KiiYnxpH78A2cDLz8Xx0BM7+uCd0TICkqtU93xrgcoD\nmKUmT6C3dYVSSNYAe8RhRSook4RJjNqzkXrGjbvNSOcetkBx6P6WdGInnpWJS7A/\nSSLNJDpkTd5CtpXZyOcF6H2J8JTMPhB0BewEu82wSp6zH/fbZ+mrLaxJVdeqBTGD\nMGX5IkV9wR+t7QziCqJVLXVLQLSA2thrY5fEqK2/YNfBW6f2pczbJW6lWOEGtCw4\nV4ypnJPoqn0t9TFvJNxKhnw8y6UmL0e6SfzkDRVmYxVKXt718JgFDheC3pWnVRMH\nJBzso0u7VPe3mczUMKFFXmvwnkQzpGUQxRfe+xygMl1WDfRYCd1GN7U/8bl4j01H\nfGbjU8EUz6zCQXSUnLtSUWMk9Y54sDIF8yGPodZDND3EtEakjKZslQskLlAAsCR3\nosXwTDg462SZGb0aSfeWCbxRkd3dW1xkF5VjWhbZP3qny9C5S/pj0vlDe7+D6jtc\nDJ0AXwz9/CHvfiN7bqEVfrUDLs0H4Hlgh5qtWu/WyzCwqRSjP46PxjWrNG3jKbn2\nmL+izYOQzGX7XpaCbqoEylyCcEV8x+v/tmsc40mlgoibCW1k1l/4p6hmt2j/2Z7+\nU7eVTmA1KFfmkmMdNrF8\n=LVQK\n-----END PGP SIGNATURE-----", "payload": "tree a5d60ec66c8cfe912ea3618e60b5eee1658f4d92\nparent cca6eb2e2bb5756c1c359c56b5664786a36b173a\nauthor mcarton <cartonmartin+git@gmail.com> 1465170159 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1465510094 +0200\n\nRun rustfmt\n\nOnly partially apply suggestions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90453fd893c1f1ad739a8f79516591db1af6d307", "html_url": "https://github.com/rust-lang/rust/commit/90453fd893c1f1ad739a8f79516591db1af6d307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90453fd893c1f1ad739a8f79516591db1af6d307/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cca6eb2e2bb5756c1c359c56b5664786a36b173a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cca6eb2e2bb5756c1c359c56b5664786a36b173a", "html_url": "https://github.com/rust-lang/rust/commit/cca6eb2e2bb5756c1c359c56b5664786a36b173a"}], "stats": {"total": 440, "additions": 231, "deletions": 209}, "files": [{"sha": "4481ab403f84122c2ebf5c4be48a35f4e0d2065d", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -38,7 +38,7 @@ declare_restriction_lint! {\n \n #[derive(Copy, Clone, Default)]\n pub struct Arithmetic {\n-    span: Option<Span>\n+    span: Option<Span>,\n }\n \n impl LintPass for Arithmetic {\n@@ -49,48 +49,36 @@ impl LintPass for Arithmetic {\n \n impl LateLintPass for Arithmetic {\n     fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n-        if let Some(_) = self.span { return; }\n+        if let Some(_) = self.span {\n+            return;\n+        }\n         match expr.node {\n             hir::ExprBinary(ref op, ref l, ref r) => {\n                 match op.node {\n-                    hir::BiAnd | hir::BiOr | hir::BiBitAnd |\n-                    hir::BiBitOr | hir::BiBitXor | hir::BiShl | hir::BiShr |\n-                    hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe |\n-                    hir::BiGt => return,\n-                    _ => ()\n+                    hir::BiAnd | hir::BiOr | hir::BiBitAnd | hir::BiBitOr | hir::BiBitXor | hir::BiShl |\n+                    hir::BiShr | hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe | hir::BiGt => return,\n+                    _ => (),\n                 }\n                 let (l_ty, r_ty) = (cx.tcx.expr_ty(l), cx.tcx.expr_ty(r));\n                 if l_ty.is_integral() && r_ty.is_integral() {\n-                    span_lint(cx,\n-                              INTEGER_ARITHMETIC,\n-                              expr.span,\n-                              \"integer arithmetic detected\");\n+                    span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n                     self.span = Some(expr.span);\n                 } else if l_ty.is_floating_point() && r_ty.is_floating_point() {\n-                    span_lint(cx,\n-                              FLOAT_ARITHMETIC,\n-                              expr.span,\n-                              \"floating-point arithmetic detected\");\n+                    span_lint(cx, FLOAT_ARITHMETIC, expr.span, \"floating-point arithmetic detected\");\n                     self.span = Some(expr.span);\n                 }\n-            },\n+            }\n             hir::ExprUnary(hir::UnOp::UnNeg, ref arg) => {\n                 let ty = cx.tcx.expr_ty(arg);\n                 if ty.is_integral() {\n-                    span_lint(cx,\n-                              INTEGER_ARITHMETIC,\n-                              expr.span,\n-                              \"integer arithmetic detected\");\n+                    span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n                     self.span = Some(expr.span);\n                 } else if ty.is_floating_point() {\n-                    span_lint(cx,\n-                              FLOAT_ARITHMETIC,\n-                              expr.span,\n-                              \"floating-point arithmetic detected\");\n+                    span_lint(cx, FLOAT_ARITHMETIC, expr.span, \"floating-point arithmetic detected\");\n                     self.span = Some(expr.span);\n                 }\n-            },\n-            _ => ()\n+            }\n+            _ => (),\n         }\n     }\n "}, {"sha": "f3b7297b2969326938e7ecf64e00b20f26fec603", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -79,11 +79,11 @@ impl LateLintPass for ArrayIndexing {\n                 // Index is a constant range\n                 if let Some(range) = utils::unsugar_range(index) {\n                     let start = range.start\n-                                     .map(|start| eval_const_expr_partial(cx.tcx, start, ExprTypeChecked, None))\n-                                     .map(|v| v.ok());\n+                        .map(|start| eval_const_expr_partial(cx.tcx, start, ExprTypeChecked, None))\n+                        .map(|v| v.ok());\n                     let end = range.end\n-                                   .map(|end| eval_const_expr_partial(cx.tcx, end, ExprTypeChecked, None))\n-                                   .map(|v| v.ok());\n+                        .map(|end| eval_const_expr_partial(cx.tcx, end, ExprTypeChecked, None))\n+                        .map(|v| v.ok());\n \n                     if let Some((start, end)) = to_const_range(start, end, range.limits, size) {\n                         if start > size || end > size {"}, {"sha": "1a5ca16b9c574561bdfd7ca8413c94267eab44c6", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 42, "deletions": 46, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -51,31 +51,24 @@ impl LateLintPass for AssignOps {\n         match expr.node {\n             hir::ExprAssignOp(op, ref lhs, ref rhs) => {\n                 if let (Some(l), Some(r)) = (snippet_opt(cx, lhs.span), snippet_opt(cx, rhs.span)) {\n-                    span_lint_and_then(cx,\n-                                       ASSIGN_OPS,\n-                                       expr.span,\n-                                       \"assign operation detected\",\n-                                       |db| {\n-                                           match rhs.node {\n-                                               hir::ExprBinary(op2, _, _) if op2 != op => {\n-                                                   db.span_suggestion(expr.span,\n-                                                                       \"replace it with\",\n-                                                                       format!(\"{} = {} {} ({})\", l, l, op.node.as_str(), r));\n-                                               },\n-                                               _ => {\n-                                                   db.span_suggestion(expr.span,\n-                                                                       \"replace it with\",\n-                                                                       format!(\"{} = {} {} {}\", l, l, op.node.as_str(), r));\n-                                               }\n-                                           }\n-                                       });\n+                    span_lint_and_then(cx, ASSIGN_OPS, expr.span, \"assign operation detected\", |db| {\n+                        match rhs.node {\n+                            hir::ExprBinary(op2, _, _) if op2 != op => {\n+                                db.span_suggestion(expr.span,\n+                                                   \"replace it with\",\n+                                                   format!(\"{} = {} {} ({})\", l, l, op.node.as_str(), r));\n+                            }\n+                            _ => {\n+                                db.span_suggestion(expr.span,\n+                                                   \"replace it with\",\n+                                                   format!(\"{} = {} {} {}\", l, l, op.node.as_str(), r));\n+                            }\n+                        }\n+                    });\n                 } else {\n-                    span_lint(cx,\n-                              ASSIGN_OPS,\n-                              expr.span,\n-                              \"assign operation detected\");\n+                    span_lint(cx, ASSIGN_OPS, expr.span, \"assign operation detected\");\n                 }\n-            },\n+            }\n             hir::ExprAssign(ref assignee, ref e) => {\n                 if let hir::ExprBinary(op, ref l, ref r) = e.node {\n                     let lint = |assignee: &hir::Expr, rhs: &hir::Expr| {\n@@ -104,28 +97,32 @@ impl LateLintPass for AssignOps {\n                                 }\n                             }\n                         }\n-                        if ops!(op.node, cx, ty, rty, Add:BiAdd,\n-                                                      Sub:BiSub,\n-                                                      Mul:BiMul,\n-                                                      Div:BiDiv,\n-                                                      Rem:BiRem,\n-                                                      And:BiAnd,\n-                                                      Or:BiOr,\n-                                                      BitAnd:BiBitAnd,\n-                                                      BitOr:BiBitOr,\n-                                                      BitXor:BiBitXor,\n-                                                      Shr:BiShr,\n-                                                      Shl:BiShl\n-                        ) {\n-                            if let (Some(snip_a), Some(snip_r)) = (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span)) {\n+                        if ops!(op.node,\n+                                cx,\n+                                ty,\n+                                rty,\n+                                Add: BiAdd,\n+                                Sub: BiSub,\n+                                Mul: BiMul,\n+                                Div: BiDiv,\n+                                Rem: BiRem,\n+                                And: BiAnd,\n+                                Or: BiOr,\n+                                BitAnd: BiBitAnd,\n+                                BitOr: BiBitOr,\n+                                BitXor: BiBitXor,\n+                                Shr: BiShr,\n+                                Shl: BiShl) {\n+                            if let (Some(snip_a), Some(snip_r)) = (snippet_opt(cx, assignee.span),\n+                                                                   snippet_opt(cx, rhs.span)) {\n                                 span_lint_and_then(cx,\n                                                    ASSIGN_OP_PATTERN,\n                                                    expr.span,\n                                                    \"manual implementation of an assign operation\",\n                                                    |db| {\n                                                        db.span_suggestion(expr.span,\n-                                                                           \"replace it with\",\n-                                                                           format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r));\n+                                                                          \"replace it with\",\n+                                                                          format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r));\n                                                    });\n                             } else {\n                                 span_lint(cx,\n@@ -142,17 +139,16 @@ impl LateLintPass for AssignOps {\n                     // a = b commutative_op a\n                     if SpanlessEq::new(cx).ignore_fn().eq_expr(assignee, r) {\n                         match op.node {\n-                            hir::BiAdd | hir::BiMul |\n-                            hir::BiAnd | hir::BiOr |\n-                            hir::BiBitXor | hir::BiBitAnd | hir::BiBitOr => {\n+                            hir::BiAdd | hir::BiMul | hir::BiAnd | hir::BiOr | hir::BiBitXor | hir::BiBitAnd |\n+                            hir::BiBitOr => {\n                                 lint(assignee, l);\n-                            },\n-                            _ => {},\n+                            }\n+                            _ => {}\n                         }\n                     }\n                 }\n-            },\n-            _ => {},\n+            }\n+            _ => {}\n         }\n     }\n }"}, {"sha": "8b7952b3746d188e3a1c59af4d0d32f8aa1d54f1", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -322,7 +322,8 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                 let simplified_stats = terminal_stats(suggestion);\n                 let mut improvement = false;\n                 for i in 0..32 {\n-                    // ignore any \"simplifications\" that end up requiring a terminal more often than in the original expression\n+                    // ignore any \"simplifications\" that end up requiring a terminal more often\n+                    // than in the original expression\n                     if stats.terminals[i] < simplified_stats.terminals[i] {\n                         continue 'simplified;\n                     }\n@@ -332,17 +333,18 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                                            e.span,\n                                            \"this boolean expression contains a logic bug\",\n                                            |db| {\n-                                               db.span_help(h2q.terminals[i].span,\n-                                                            \"this expression can be optimized out by applying \\\n-                                                             boolean operations to the outer expression\");\n-                                               db.span_suggestion(e.span,\n-                                                                  \"it would look like the following\",\n-                                                                  suggest(self.0, suggestion, &h2q.terminals));\n-                                           });\n+                            db.span_help(h2q.terminals[i].span,\n+                                         \"this expression can be optimized out by applying boolean operations to the \\\n+                                          outer expression\");\n+                            db.span_suggestion(e.span,\n+                                               \"it would look like the following\",\n+                                               suggest(self.0, suggestion, &h2q.terminals));\n+                        });\n                         // don't also lint `NONMINIMAL_BOOL`\n                         return;\n                     }\n-                    // if the number of occurrences of a terminal decreases or any of the stats decreases while none increases\n+                    // if the number of occurrences of a terminal decreases or any of the stats\n+                    // decreases while none increases\n                     improvement |= (stats.terminals[i] > simplified_stats.terminals[i]) ||\n                                    (stats.negations > simplified_stats.negations &&\n                                     stats.ops == simplified_stats.ops) ||\n@@ -358,12 +360,10 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                                    e.span,\n                                    \"this boolean expression can be simplified\",\n                                    |db| {\n-                                       for suggestion in &improvements {\n-                                           db.span_suggestion(e.span,\n-                                                              \"try\",\n-                                                              suggest(self.0, suggestion, &h2q.terminals));\n-                                       }\n-                                   });\n+                    for suggestion in &improvements {\n+                        db.span_suggestion(e.span, \"try\", suggest(self.0, suggestion, &h2q.terminals));\n+                    }\n+                });\n             }\n         }\n     }"}, {"sha": "038d888b0ae4a5cdbc218661f28c90bcafab0d69", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -13,7 +13,8 @@ use utils::{in_macro, LimitStack, span_help_and_lint, paths, match_type};\n \n /// **What it does:** This lint checks for methods with high cyclomatic complexity\n ///\n-/// **Why is this bad?** Methods of high cyclomatic complexity tend to be badly readable. Also LLVM will usually optimize small methods better.\n+/// **Why is this bad?** Methods of high cyclomatic complexity tend to be badly readable. Also LLVM\n+/// will usually optimize small methods better.\n ///\n /// **Known problems:** Sometimes it's hard to find a way to reduce the complexity\n ///\n@@ -69,7 +70,7 @@ impl CyclomaticComplexity {\n             returns / 2\n         };\n \n-        if cc + divergence < match_arms + short_circuits  {\n+        if cc + divergence < match_arms + short_circuits {\n             report_cc_bug(cx, cc, match_arms, divergence, short_circuits, ret_adjust, span);\n         } else {\n             let mut rust_cc = cc + divergence - match_arms - short_circuits;\n@@ -117,7 +118,7 @@ impl LateLintPass for CyclomaticComplexity {\n     }\n }\n \n-struct CCHelper<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n+struct CCHelper<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     match_arms: u64,\n     divergence: u64,\n     returns: u64,\n@@ -176,8 +177,9 @@ fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, r\n     if cx.current_level(CYCLOMATIC_COMPLEXITY) != Level::Allow {\n         cx.sess().span_note_without_error(span,\n                                           &format!(\"Clippy encountered a bug calculating cyclomatic complexity \\\n-                                                    (hide this message with `#[allow(cyclomatic_complexity)]`): cc \\\n-                                                    = {}, arms = {}, div = {}, shorts = {}, returns = {}. Please file a bug report.\",\n+                                                    (hide this message with `#[allow(cyclomatic_complexity)]`): \\\n+                                                    cc = {}, arms = {}, div = {}, shorts = {}, returns = {}. \\\n+                                                    Please file a bug report.\",\n                                                    cc,\n                                                    narms,\n                                                    div,"}, {"sha": "5d1eb26734384db954d98ae2a0207b4b9f0f5100", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -84,7 +84,8 @@ impl LateLintPass for Derive {\n }\n \n /// Implementation of the `DERIVE_HASH_XOR_EQ` lint.\n-fn check_hash_peq<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, span: Span, trait_ref: &TraitRef, ty: ty::Ty<'tcx>, hash_is_automatically_derived: bool) {\n+fn check_hash_peq<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, span: Span, trait_ref: &TraitRef, ty: ty::Ty<'tcx>,\n+                                hash_is_automatically_derived: bool) {\n     if_let_chain! {[\n         match_path(&trait_ref.path, &paths::HASH),\n         let Some(peq_trait_def_id) = cx.tcx.lang_items.eq_trait()\n@@ -137,7 +138,8 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n \n         // Some types are not Clone by default but could be cloned `by hand` if necessary\n         match ty.sty {\n-            TypeVariants::TyEnum(def, substs) | TypeVariants::TyStruct(def, substs) => {\n+            TypeVariants::TyEnum(def, substs) |\n+            TypeVariants::TyStruct(def, substs) => {\n                 for variant in &def.variants {\n                     for field in &variant.fields {\n                         match field.ty(cx.tcx, substs).sty {"}, {"sha": "fc9e95f94955dae118d9c46fa758d9009da1bec1", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -108,7 +108,7 @@ pub fn check_doc(cx: &EarlyContext, valid_idents: &[String], docs: &[(&str, Span\n         /// First byte of the current potential match\n         current_word_begin: usize,\n         /// List of lines and their associated span\n-        docs: &'a[(&'a str, Span)],\n+        docs: &'a [(&'a str, Span)],\n         /// Index of the current line we are parsing\n         line: usize,\n         /// Whether we are in a link"}, {"sha": "3d3423a47435f989776c2bb096e511f8384241f1", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -42,7 +42,8 @@ impl LintPass for Functions {\n }\n \n impl LateLintPass for Functions {\n-    fn check_fn(&mut self, cx: &LateContext, _: intravisit::FnKind, decl: &hir::FnDecl, _: &hir::Block, span: Span, nodeid: ast::NodeId) {\n+    fn check_fn(&mut self, cx: &LateContext, _: intravisit::FnKind, decl: &hir::FnDecl, _: &hir::Block, span: Span,\n+                nodeid: ast::NodeId) {\n         use rustc::hir::map::Node::*;\n \n         if let Some(NodeItem(ref item)) = cx.tcx.map.find(cx.tcx.map.get_parent_node(nodeid)) {"}, {"sha": "ac6bee00ff5451ef2a4d9ab7da8a190563cc1dd4", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -182,7 +182,7 @@ fn used_in_expr(cx: &LateContext, id: hir::def_id::DefId, expr: &hir::Expr) -> b\n     let mut v = UsedVisitor {\n         cx: cx,\n         id: id,\n-        used: false\n+        used: false,\n     };\n     hir::intravisit::walk_expr(&mut v, expr);\n     v.used"}, {"sha": "08978e2c5a0be2c76a665265e35ca140c0a4c610", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -608,13 +608,13 @@ fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Ex\n                                    expr.span,\n                                    &format!(\"you seem to want to iterate on a map's {}\", kind),\n                                    |db| {\n-                                       db.span_suggestion(expr.span,\n-                                                          \"use the corresponding method\",\n-                                                          format!(\"for {} in {}.{}() {{ .. }}\",\n-                                                                  snippet(cx, *pat_span, \"..\"),\n-                                                                  snippet(cx, arg_span, \"..\"),\n-                                                                  kind));\n-                                   });\n+                    db.span_suggestion(expr.span,\n+                                       \"use the corresponding method\",\n+                                       format!(\"for {} in {}.{}() {{ .. }}\",\n+                                               snippet(cx, *pat_span, \"..\"),\n+                                               snippet(cx, arg_span, \"..\"),\n+                                               kind));\n+                });\n             }\n         }\n     }"}, {"sha": "d80f9f3d587e89cbacac10ef0dffc7f1a69f43be", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -171,14 +171,14 @@ fn check_single_match_single_pattern(cx: &LateContext, ex: &Expr, arms: &[Arm],\n                            \"you seem to be trying to use match for destructuring a single pattern. \\\n                            Consider using `if let`\",\n                            |db| {\n-                               db.span_suggestion(expr.span,\n-                                                  \"try this\",\n-                                                  format!(\"if let {} = {} {}{}\",\n-                                                          snippet(cx, arms[0].pats[0].span, \"..\"),\n-                                                          snippet(cx, ex.span, \"..\"),\n-                                                          expr_block(cx, &arms[0].body, None, \"..\"),\n-                                                          els_str));\n-                           });\n+            db.span_suggestion(expr.span,\n+                               \"try this\",\n+                               format!(\"if let {} = {} {}{}\",\n+                                       snippet(cx, arms[0].pats[0].span, \"..\"),\n+                                       snippet(cx, ex.span, \"..\"),\n+                                       expr_block(cx, &arms[0].body, None, \"..\"),\n+                                       els_str));\n+        });\n     }\n }\n \n@@ -219,14 +219,14 @@ fn check_single_match_opt_like(cx: &LateContext, ex: &Expr, arms: &[Arm], expr:\n                                \"you seem to be trying to use match for destructuring a single pattern. Consider \\\n                                 using `if let`\",\n                                |db| {\n-                                   db.span_suggestion(expr.span,\n-                                                      \"try this\",\n-                                                      format!(\"if let {} = {} {}{}\",\n-                                                              snippet(cx, arms[0].pats[0].span, \"..\"),\n-                                                              snippet(cx, ex.span, \"..\"),\n-                                                              expr_block(cx, &arms[0].body, None, \"..\"),\n-                                                              els_str));\n-                               });\n+                db.span_suggestion(expr.span,\n+                                   \"try this\",\n+                                   format!(\"if let {} = {} {}{}\",\n+                                           snippet(cx, arms[0].pats[0].span, \"..\"),\n+                                           snippet(cx, ex.span, \"..\"),\n+                                           expr_block(cx, &arms[0].body, None, \"..\"),\n+                                           els_str));\n+            });\n         }\n     }\n }"}, {"sha": "4dfb0fe88e0b7fdeed58b72eadfffae2f13a4a63", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -33,7 +33,7 @@ impl LateLintPass for MemForget {\n \n                     if match forgot_ty.ty_adt_def() {\n                         Some(def) => def.has_dtor(),\n-                        _ => false\n+                        _ => false,\n                     } {\n                         span_lint(cx, MEM_FORGET, e.span, \"usage of mem::forget on Drop type\");\n                     }"}, {"sha": "9dcc8f9d016ee9067e3ac43d61105c70289824ba", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -452,8 +452,8 @@ impl LateLintPass for MethodsPass {\n                                   explicit_self.span,\n                                   \"methods called `new` usually return `Self`\");\n                     }\n-                }\n-            }}\n+                }}\n+            }\n         }\n     }\n }\n@@ -1022,9 +1022,7 @@ impl OutType {\n             (&OutType::Unit, &hir::Return(ref ty)) if ty.node == hir::TyTup(vec![].into()) => true,\n             (&OutType::Bool, &hir::Return(ref ty)) if is_bool(ty) => true,\n             (&OutType::Any, &hir::Return(ref ty)) if ty.node != hir::TyTup(vec![].into()) => true,\n-            (&OutType::Ref, &hir::Return(ref ty)) => {\n-                matches!(ty.node, hir::TyRptr(_, _))\n-            }\n+            (&OutType::Ref, &hir::Return(ref ty)) => matches!(ty.node, hir::TyRptr(_, _)),\n             _ => false,\n         }\n     }"}, {"sha": "0bed45b0b5bbe387671ac07ecf7666449a577763", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -34,10 +34,7 @@ impl LateLintPass for MutMut {\n \n         if let ExprAddrOf(MutMutable, ref e) = expr.node {\n             if let ExprAddrOf(MutMutable, _) = e.node {\n-                span_lint(cx,\n-                          MUT_MUT,\n-                          expr.span,\n-                          \"generally you want to avoid `&mut &mut _` if possible\");\n+                span_lint(cx, MUT_MUT, expr.span, \"generally you want to avoid `&mut &mut _` if possible\");\n             } else {\n                 if let TyRef(_, TypeAndMut { mutbl: MutMutable, .. }) = cx.tcx.expr_ty(e).sty {\n                     span_lint(cx,"}, {"sha": "356a46c28c32d8c18702037c22fabb63f2f9a645", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -42,7 +42,8 @@ impl LateLintPass for NeedlessBorrow {\n                         span_lint(cx,\n                                   NEEDLESS_BORROW,\n                                   e.span,\n-                                  \"this expression borrows a reference that is immediately dereferenced by the compiler\");\n+                                  \"this expression borrows a reference that is immediately dereferenced by the \\\n+                                   compiler\");\n                     }\n                 }\n             }"}, {"sha": "c661fad2c02dc95d472f8984ca126b551aa4f868", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -35,7 +35,7 @@ impl LateLintPass for NegMultiply {\n                 (&ExprUnary(..), &ExprUnary(..)) => (),\n                 (&ExprUnary(UnNeg, ref lit), _) => check_mul(cx, e.span, lit, r),\n                 (_, &ExprUnary(UnNeg, ref lit)) => check_mul(cx, e.span, lit, l),\n-                _ => ()\n+                _ => (),\n             }\n         }\n     }"}, {"sha": "f400f1b66434337ae7b52bdff8c5c1bc77c55a4d", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -100,10 +100,10 @@ impl LateLintPass for NewWithoutDefault {\n                 // can't be implemented by default\n                 return;\n             }\n-            if decl.inputs.is_empty() && name.as_str() == \"new\" &&\n-                    cx.access_levels.is_reachable(id) {\n-                let self_ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(\n-                    cx.tcx.map.get_parent(id))).ty;\n+            if decl.inputs.is_empty() && name.as_str() == \"new\" && cx.access_levels.is_reachable(id) {\n+                let self_ty = cx.tcx\n+                    .lookup_item_type(cx.tcx.map.local_def_id(cx.tcx.map.get_parent(id)))\n+                    .ty;\n                 if_let_chain!{[\n                     self_ty.walk_shallow().next().is_none(), // implements_trait does not work with generics\n                     let Some(ret_ty) = return_ty(cx, id),\n@@ -143,11 +143,11 @@ fn can_derive_default<'t, 'c>(ty: ty::Ty<'t>, cx: &LateContext<'c, 't>, default_\n             for field in adt_def.all_fields() {\n                 let f_ty = field.ty(cx.tcx, substs);\n                 if !implements_trait(cx, f_ty, default_trait_id, Vec::new()) {\n-                    return false\n+                    return false;\n                 }\n             }\n             true\n-        },\n-        _ => false\n+        }\n+        _ => false,\n     }\n }"}, {"sha": "a9ac0a248561e266110a9129e125e705f981a366", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -130,7 +130,9 @@ fn reduce_expression<'a>(cx: &LateContext, expr: &'a Expr) -> Option<Vec<&'a Exp\n         Expr_::ExprTupField(ref inner, _) |\n         Expr_::ExprAddrOf(_, ref inner) |\n         Expr_::ExprBox(ref inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n-        Expr_::ExprStruct(_, ref fields, ref base) => Some(fields.iter().map(|f| &f.expr).chain(base).map(Deref::deref).collect()),\n+        Expr_::ExprStruct(_, ref fields, ref base) => {\n+            Some(fields.iter().map(|f| &f.expr).chain(base).map(Deref::deref).collect())\n+        }\n         Expr_::ExprCall(ref callee, ref args) => {\n             match cx.tcx.def_map.borrow().get(&callee.id).map(PathResolution::full_def) {\n                 Some(Def::Struct(..)) |\n@@ -140,11 +142,13 @@ fn reduce_expression<'a>(cx: &LateContext, expr: &'a Expr) -> Option<Vec<&'a Exp\n         }\n         Expr_::ExprBlock(ref block) => {\n             if block.stmts.is_empty() {\n-                block.expr.as_ref().and_then(|e| match block.rules {\n-                    BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) => None,\n-                    BlockCheckMode::DefaultBlock => Some(vec![&**e]),\n-                    // in case of compiler-inserted signaling blocks\n-                    _ => reduce_expression(cx, e),\n+                block.expr.as_ref().and_then(|e| {\n+                    match block.rules {\n+                        BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) => None,\n+                        BlockCheckMode::DefaultBlock => Some(vec![&**e]),\n+                        // in case of compiler-inserted signaling blocks\n+                        _ => reduce_expression(cx, e),\n+                    }\n                 })\n             } else {\n                 None"}, {"sha": "aa8608fb7bd0eb942d20e53884c2980efa84bd95", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -72,11 +72,13 @@ impl<'v, 'a, 'b, 'c> Visitor<'v> for SimilarNamesNameVisitor<'a, 'b, 'c> {\n     fn visit_pat(&mut self, pat: &'v Pat) {\n         match pat.node {\n             PatKind::Ident(_, id, _) => self.check_name(id.span, id.node.name),\n-            PatKind::Struct(_, ref fields, _) => for field in fields {\n-                if !field.node.is_shorthand {\n-                    self.visit_pat(&field.node.pat);\n+            PatKind::Struct(_, ref fields, _) => {\n+                for field in fields {\n+                    if !field.node.is_shorthand {\n+                        self.visit_pat(&field.node.pat);\n+                    }\n                 }\n-            },\n+            }\n             _ => walk_pat(self, pat),\n         }\n     }\n@@ -193,15 +195,15 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n                                span,\n                                \"binding's name is too similar to existing binding\",\n                                |diag| {\n-                                   diag.span_note(existing_name.span, \"existing binding defined here\");\n-                                   if let Some(split) = split_at {\n-                                       diag.span_help(span,\n-                                                      &format!(\"separate the discriminating character by an \\\n+                diag.span_note(existing_name.span, \"existing binding defined here\");\n+                if let Some(split) = split_at {\n+                    diag.span_help(span,\n+                                   &format!(\"separate the discriminating character by an \\\n                                                                 underscore like: `{}_{}`\",\n                                                                &interned_name[..split],\n                                                                &interned_name[split..]));\n-                                   }\n-                               });\n+                }\n+            });\n             return;\n         }\n         self.0.names.push(ExistingName {"}, {"sha": "fb59c8c61d331b204d35900233d428b2f62f909f", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -125,7 +125,7 @@ impl LateLintPass for RegexPass {\n fn str_span(base: Span, s: &str, c: usize) -> Span {\n     let mut si = s.char_indices().skip(c);\n \n-    match (si.next(), si.next())  {\n+    match (si.next(), si.next()) {\n         (Some((l, _)), Some((h, _))) => {\n             Span {\n                 lo: base.lo + BytePos(l as u32),\n@@ -193,7 +193,9 @@ fn check_regex(cx: &LateContext, expr: &Expr, utf8: bool) {\n             match builder.parse(r) {\n                 Ok(r) => {\n                     if let Some(repl) = is_trivial_regex(&r) {\n-                        span_help_and_lint(cx, TRIVIAL_REGEX, expr.span,\n+                        span_help_and_lint(cx,\n+                                           TRIVIAL_REGEX,\n+                                           expr.span,\n                                            \"trivial regex\",\n                                            &format!(\"consider using {}\", repl));\n                     }\n@@ -211,7 +213,9 @@ fn check_regex(cx: &LateContext, expr: &Expr, utf8: bool) {\n         match builder.parse(&r) {\n             Ok(r) => {\n                 if let Some(repl) = is_trivial_regex(&r) {\n-                    span_help_and_lint(cx, TRIVIAL_REGEX, expr.span,\n+                    span_help_and_lint(cx,\n+                                       TRIVIAL_REGEX,\n+                                       expr.span,\n                                        \"trivial regex\",\n                                        &format!(\"consider using {}\", repl));\n                 }"}, {"sha": "116e1eb1bdc8349e098a3121c8fa1363f0dc5431", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -45,15 +45,15 @@ impl LateLintPass for UnsafeNameRemoval {\n                         *name,\n                         cx, &item.span\n                         );\n-                },\n+                }\n                 ViewPath_::ViewPathList(_, ref path_list_items) => {\n                     for path_list_item in path_list_items.iter() {\n                         let plid = path_list_item.node;\n                         if let (Some(name), Some(rename)) = (plid.name(), plid.rename()) {\n                             unsafe_to_safe_check(name, rename, cx, &item.span);\n                         };\n                     }\n-                },\n+                }\n                 ViewPath_::ViewPathGlob(_) => {}\n             }\n         }\n@@ -64,11 +64,10 @@ fn unsafe_to_safe_check(old_name: Name, new_name: Name, cx: &LateContext, span:\n     let old_str = old_name.as_str();\n     let new_str = new_name.as_str();\n     if contains_unsafe(&old_str) && !contains_unsafe(&new_str) {\n-        span_lint(\n-            cx,\n-            UNSAFE_REMOVED_FROM_NAME,\n-            *span,\n-            &format!(\n+        span_lint(cx,\n+                  UNSAFE_REMOVED_FROM_NAME,\n+                  *span,\n+                  &format!(\n                 \"removed \\\"unsafe\\\" from the name of `{}` in use as `{}`\",\n                 old_str,\n                 new_str"}, {"sha": "a97b593095f293b6c2868239531f9eedd0d377ce", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -64,10 +64,12 @@ impl LateLintPass for UnusedLabel {\n impl<'v> Visitor<'v> for UnusedLabelVisitor {\n     fn visit_expr(&mut self, expr: &hir::Expr) {\n         match expr.node {\n-            hir::ExprBreak(Some(label)) | hir::ExprAgain(Some(label)) => {\n+            hir::ExprBreak(Some(label)) |\n+            hir::ExprAgain(Some(label)) => {\n                 self.labels.remove(&label.node.as_str());\n             }\n-            hir::ExprLoop(_, Some(label)) | hir::ExprWhile(_, _, Some(label)) => {\n+            hir::ExprLoop(_, Some(label)) |\n+            hir::ExprWhile(_, _, Some(label)) => {\n                 self.labels.insert(label.node.as_str(), expr.span);\n             }\n             _ => (),"}, {"sha": "f81fcbc38ab15fb107af3ce52cb182f9abc5d3bf", "filename": "clippy_lints/src/utils/cargo.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Futils%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Futils%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcargo.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -50,13 +50,19 @@ pub enum Error {\n }\n \n impl From<io::Error> for Error {\n-    fn from(err: io::Error) -> Self { Error::Io(err) }\n+    fn from(err: io::Error) -> Self {\n+        Error::Io(err)\n+    }\n }\n impl From<Utf8Error> for Error {\n-    fn from(err: Utf8Error) -> Self { Error::Utf8(err) }\n+    fn from(err: Utf8Error) -> Self {\n+        Error::Utf8(err)\n+    }\n }\n impl From<json::DecoderError> for Error {\n-    fn from(err: json::DecoderError) -> Self { Error::Json(err) }\n+    fn from(err: json::DecoderError) -> Self {\n+        Error::Json(err)\n+    }\n }\n \n pub fn metadata() -> Result<Metadata, Error> {"}, {"sha": "88a9e03182ca2ef3cb45de22ec37e5c3b27590c3", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -153,7 +153,9 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&PatKind::QPath(ref ls, ref lp), &PatKind::QPath(ref rs, ref rp)) => {\n                 self.eq_qself(ls, rs) && self.eq_path(lp, rp)\n             }\n-            (&PatKind::Tuple(ref l, ls), &PatKind::Tuple(ref r, rs)) => ls == rs && over(l, r, |l, r| self.eq_pat(l, r)),\n+            (&PatKind::Tuple(ref l, ls), &PatKind::Tuple(ref r, rs)) => {\n+                ls == rs && over(l, r, |l, r| self.eq_pat(l, r))\n+            }\n             (&PatKind::Range(ref ls, ref le), &PatKind::Range(ref rs, ref re)) => {\n                 self.eq_expr(ls, rs) && self.eq_expr(le, re)\n             }"}, {"sha": "5c61a33cec072334dfa34271e9075eff3588c364", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -143,9 +143,7 @@ pub fn match_def_path(cx: &LateContext, def_id: DefId, path: &[&str]) -> bool {\n         }\n     }\n \n-    let mut apb = AbsolutePathBuffer {\n-        names: vec![],\n-    };\n+    let mut apb = AbsolutePathBuffer { names: vec![] };\n \n     cx.tcx.push_item_path(&mut apb, def_id);\n \n@@ -763,7 +761,8 @@ pub fn unsugar_range(expr: &Expr) -> Option<UnsugaredRange> {\n                     end: None,\n                     limits: RangeLimits::HalfOpen,\n                 })\n-            } else if match_path(path, &paths::RANGE_INCLUSIVE_NON_EMPTY_STD) || match_path(path, &paths::RANGE_INCLUSIVE_NON_EMPTY) {\n+            } else if match_path(path, &paths::RANGE_INCLUSIVE_NON_EMPTY_STD) ||\n+               match_path(path, &paths::RANGE_INCLUSIVE_NON_EMPTY) {\n                 Some(UnsugaredRange {\n                     start: get_field(\"start\", fields),\n                     end: get_field(\"end\", fields),"}, {"sha": "041b828e0160e57f94347515efb7612f715e125e", "filename": "src/main.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -71,7 +71,13 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n                 registry.args_hidden = Some(Vec::new());\n                 clippy_lints::register_plugins(&mut registry);\n \n-                let rustc_plugin::registry::Registry { early_lint_passes, late_lint_passes, lint_groups, llvm_passes, attributes, mir_passes, .. } = registry;\n+                let rustc_plugin::registry::Registry { early_lint_passes,\n+                                                       late_lint_passes,\n+                                                       lint_groups,\n+                                                       llvm_passes,\n+                                                       attributes,\n+                                                       mir_passes,\n+                                                       .. } = registry;\n                 let sess = &state.session;\n                 let mut ls = sess.lint_store.borrow_mut();\n                 for pass in early_lint_passes {\n@@ -111,14 +117,18 @@ pub fn main() {\n     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n     let sys_root = match (home, toolchain) {\n         (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n-        _ => option_env!(\"SYSROOT\").map(|s| s.to_owned())\n-                                   .or(Command::new(\"rustc\").arg(\"--print\")\n-                                                            .arg(\"sysroot\")\n-                                                            .output().ok()\n-                                                            .and_then(|out| String::from_utf8(out.stdout).ok())\n-                                                            .map(|s| s.trim().to_owned())\n-                                                            )\n-                .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\"),\n+        _ => {\n+            option_env!(\"SYSROOT\")\n+                .map(|s| s.to_owned())\n+                .or(Command::new(\"rustc\")\n+                    .arg(\"--print\")\n+                    .arg(\"sysroot\")\n+                    .output()\n+                    .ok()\n+                    .and_then(|out| String::from_utf8(out.stdout).ok())\n+                    .map(|s| s.trim().to_owned()))\n+                .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\")\n+        }\n     };\n \n     if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n@@ -160,7 +170,9 @@ pub fn main() {\n }\n \n fn process<P, I>(old_args: I, dep_path: P, sysroot: &str) -> Result<(), i32>\n-    where P: AsRef<Path>, I: Iterator<Item=String> {\n+    where P: AsRef<Path>,\n+          I: Iterator<Item = String>\n+{\n \n     let mut args = vec![\"rustc\".to_owned()];\n "}, {"sha": "df2579cab57579409f6595f61f5a9836fd1a6c29", "filename": "tests/cc_seme.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fcc_seme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fcc_seme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcc_seme.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -14,7 +14,10 @@ struct Test {\n \n fn main() {\n     use Baz::*;\n-    let x = Test { t: Some(0), b: One };\n+    let x = Test {\n+        t: Some(0),\n+        b: One,\n+    };\n \n     match x {\n         Test { t: Some(_), b: One } => unreachable!(),"}, {"sha": "2e50f7d92415a2aded7c4897f3ad3e27a5eefb5c", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -9,7 +9,7 @@ fn run_mode(dir: &'static str, mode: &'static str) {\n     let cfg_mode = mode.parse().ok().expect(\"Invalid mode\");\n     config.target_rustcflags = Some(\"-L target/debug/ -L target/debug/deps\".to_owned());\n     if let Ok(name) = var::<&str>(\"TESTNAME\") {\n-        let s : String = name.to_owned();\n+        let s: String = name.to_owned();\n         config.filter = Some(s)\n     }\n "}, {"sha": "81500f9d39344012eb22cfc1d3057916658ebe43", "filename": "tests/consts.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -16,15 +16,18 @@ use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n \n fn spanned<T>(t: T) -> Spanned<T> {\n-    Spanned{ node: t, span: COMMAND_LINE_SP }\n+    Spanned {\n+        node: t,\n+        span: COMMAND_LINE_SP,\n+    }\n }\n \n fn expr(n: Expr_) -> Expr {\n-    Expr{\n+    Expr {\n         id: 1,\n         node: n,\n         span: COMMAND_LINE_SP,\n-        attrs: None\n+        attrs: None,\n     }\n }\n \n@@ -40,19 +43,19 @@ fn check(expect: Constant, expr: &Expr) {\n     assert_eq!(Some(expect), constant_simple(expr))\n }\n \n-const TRUE : Constant = Constant::Bool(true);\n-const FALSE : Constant = Constant::Bool(false);\n-const ZERO : Constant = Constant::Int(ConstInt::Infer(0));\n-const ONE : Constant = Constant::Int(ConstInt::Infer(1));\n-const TWO : Constant = Constant::Int(ConstInt::Infer(2));\n+const TRUE: Constant = Constant::Bool(true);\n+const FALSE: Constant = Constant::Bool(false);\n+const ZERO: Constant = Constant::Int(ConstInt::Infer(0));\n+const ONE: Constant = Constant::Int(ConstInt::Infer(1));\n+const TWO: Constant = Constant::Int(ConstInt::Infer(2));\n \n #[test]\n fn test_lit() {\n     check(TRUE, &lit(LitKind::Bool(true)));\n     check(FALSE, &lit(LitKind::Bool(false)));\n     check(ZERO, &lit(LitKind::Int(0, LitIntType::Unsuffixed)));\n-    check(Constant::Str(\"cool!\".into(), StrStyle::Cooked), &lit(LitKind::Str(\n-        InternedString::new(\"cool!\"), StrStyle::Cooked)));\n+    check(Constant::Str(\"cool!\".into(), StrStyle::Cooked),\n+          &lit(LitKind::Str(InternedString::new(\"cool!\"), StrStyle::Cooked)));\n }\n \n #[test]"}, {"sha": "821279d909cfecdad7cbf88f3cfd52437b9e290e", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -30,11 +30,7 @@ fn dogfood() {\n \n     config.mode = cfg_mode;\n \n-    let files = [\n-        \"src/main.rs\",\n-        \"src/lib.rs\",\n-        \"clippy_lints/src/lib.rs\",\n-    ];\n+    let files = [\"src/main.rs\", \"src/lib.rs\", \"clippy_lints/src/lib.rs\"];\n \n     for file in &files {\n         let paths = TestPaths {"}, {"sha": "76b0250ca0e160d34c1e7419f102546b4d0689a9", "filename": "tests/issue-825.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fissue-825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fissue-825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fissue-825.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -22,4 +22,4 @@ fn rust_type_id(name: String) {\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "74433fc1f565c685f32e2b198768071c3dcd2b51", "filename": "tests/matches.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmatches.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -9,7 +9,12 @@ fn test_overlapping() {\n     use clippy::matches::overlapping;\n     use syntax::codemap::DUMMY_SP;\n \n-    let sp = |s, e| clippy::matches::SpannedRange { span: DUMMY_SP, node: (s, e) };\n+    let sp = |s, e| {\n+        clippy::matches::SpannedRange {\n+            span: DUMMY_SP,\n+            node: (s, e),\n+        }\n+    };\n \n     assert_eq!(None, overlapping::<u8>(&[]));\n     assert_eq!(None, overlapping(&[sp(1, 4)]));"}, {"sha": "9cd44d44001260ea39ec2b1e29eb364f975da09d", "filename": "tests/used_underscore_binding_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fused_underscore_binding_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90453fd893c1f1ad739a8f79516591db1af6d307/tests%2Fused_underscore_binding_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fused_underscore_binding_macro.rs?ref=90453fd893c1f1ad739a8f79516591db1af6d307", "patch": "@@ -12,5 +12,5 @@ struct MacroAttributesTest {\n \n #[test]\n fn macro_attributes_test() {\n-    let _ = MacroAttributesTest{_foo: 0};\n+    let _ = MacroAttributesTest { _foo: 0 };\n }"}]}