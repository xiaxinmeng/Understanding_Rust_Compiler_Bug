{"sha": "6f25fef36a9deb5a22a7bb4a380df664245dcfa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMjVmZWYzNmE5ZGViNWEyMmE3YmI0YTM4MGRmNjY0MjQ1ZGNmYTk=", "commit": {"author": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-14T17:28:22Z"}, "committer": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-27T10:06:00Z"}, "message": "cargo fmt", "tree": {"sha": "c9474871c45008985aca818d593553765347a7fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9474871c45008985aca818d593553765347a7fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f25fef36a9deb5a22a7bb4a380df664245dcfa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f25fef36a9deb5a22a7bb4a380df664245dcfa9", "html_url": "https://github.com/rust-lang/rust/commit/6f25fef36a9deb5a22a7bb4a380df664245dcfa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f25fef36a9deb5a22a7bb4a380df664245dcfa9/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0f08fcc20ba18a8225b5c591b8b5429090d1943", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f08fcc20ba18a8225b5c591b8b5429090d1943", "html_url": "https://github.com/rust-lang/rust/commit/e0f08fcc20ba18a8225b5c591b8b5429090d1943"}], "stats": {"total": 55, "additions": 20, "deletions": 35}, "files": [{"sha": "670c82200253b9c37d30bcb9e3a618899c2769b0", "filename": "crates/ide_assists/src/handlers/generate_enum_match_method.rs", "status": "modified", "additions": 20, "deletions": 35, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6f25fef36a9deb5a22a7bb4a380df664245dcfa9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f25fef36a9deb5a22a7bb4a380df664245dcfa9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs?ref=6f25fef36a9deb5a22a7bb4a380df664245dcfa9", "patch": "@@ -3,7 +3,11 @@ use stdx::to_lower_snake_case;\n use syntax::ast::VisibilityOwner;\n use syntax::ast::{self, AstNode, NameOwner};\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists, assist_context::AssistBuilder, utils::{find_impl_block_end, find_struct_impl, generate_impl_text}};\n+use crate::{\n+    assist_context::AssistBuilder,\n+    utils::{find_impl_block_end, find_struct_impl, generate_impl_text},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: generate_enum_is_method\n //\n@@ -41,11 +45,7 @@ pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext) ->\n     let fn_name = format!(\"is_{}\", &to_lower_snake_case(variant_name.text()));\n \n     // Return early if we've found an existing new fn\n-    let impl_def = find_struct_impl(\n-        &ctx,\n-        &parent_enum,\n-        &fn_name,\n-    )?;\n+    let impl_def = find_struct_impl(&ctx, &parent_enum, &fn_name)?;\n \n     let target = variant.syntax().text_range();\n     acc.add(\n@@ -108,11 +108,7 @@ pub(crate) fn generate_enum_into_method(acc: &mut Assists, ctx: &AssistContext)\n     let fn_name = format!(\"into_{}\", &to_lower_snake_case(variant_name.text()));\n \n     // Return early if we've found an existing new fn\n-    let impl_def = find_struct_impl(\n-        &ctx,\n-        &parent_enum,\n-        &fn_name,\n-    )?;\n+    let impl_def = find_struct_impl(&ctx, &parent_enum, &fn_name)?;\n \n     let field_type = variant_kind.single_field_type()?;\n     let (pattern_suffix, bound_name) = variant_kind.binding_pattern()?;\n@@ -181,11 +177,7 @@ pub(crate) fn generate_enum_as_method(acc: &mut Assists, ctx: &AssistContext) ->\n     let fn_name = format!(\"as_{}\", &to_lower_snake_case(variant_name.text()));\n \n     // Return early if we've found an existing new fn\n-    let impl_def = find_struct_impl(\n-        &ctx,\n-        &parent_enum,\n-        &fn_name,\n-    )?;\n+    let impl_def = find_struct_impl(&ctx, &parent_enum, &fn_name)?;\n \n     let field_type = variant_kind.single_field_type()?;\n     let (pattern_suffix, bound_name) = variant_kind.binding_pattern()?;\n@@ -243,7 +235,9 @@ fn add_method_to_adt(\n enum VariantKind {\n     Unit,\n     /// Tuple with a single field\n-    NewtypeTuple { ty: Option<ast::Type> },\n+    NewtypeTuple {\n+        ty: Option<ast::Type>,\n+    },\n     /// Tuple with 0 or more than 2 fields\n     Tuple,\n     /// Record with a single field\n@@ -259,36 +253,27 @@ impl VariantKind {\n     fn pattern_suffix(&self) -> &'static str {\n         match self {\n             VariantKind::Unit => \"\",\n-            VariantKind::NewtypeTuple { .. } |\n-            VariantKind::Tuple => \"(..)\",\n-            VariantKind::NewtypeRecord { .. } |\n-            VariantKind::Record => \" { .. }\",\n+            VariantKind::NewtypeTuple { .. } | VariantKind::Tuple => \"(..)\",\n+            VariantKind::NewtypeRecord { .. } | VariantKind::Record => \" { .. }\",\n         }\n     }\n \n     fn binding_pattern(&self) -> Option<(String, String)> {\n         match self {\n-            VariantKind::Unit |\n-            VariantKind::Tuple |\n-            VariantKind::Record |\n-            VariantKind::NewtypeRecord { field_name: None, .. } => None,\n-            VariantKind::NewtypeTuple { .. } => {\n-                Some((\"(v)\".to_owned(), \"v\".to_owned()))\n-            }\n+            VariantKind::Unit\n+            | VariantKind::Tuple\n+            | VariantKind::Record\n+            | VariantKind::NewtypeRecord { field_name: None, .. } => None,\n+            VariantKind::NewtypeTuple { .. } => Some((\"(v)\".to_owned(), \"v\".to_owned())),\n             VariantKind::NewtypeRecord { field_name: Some(name), .. } => {\n-                Some((\n-                    format!(\" {{ {} }}\", name.syntax()),\n-                    name.syntax().to_string(),\n-                ))\n+                Some((format!(\" {{ {} }}\", name.syntax()), name.syntax().to_string()))\n             }\n         }\n     }\n \n     fn single_field_type(&self) -> Option<&ast::Type> {\n         match self {\n-            VariantKind::Unit |\n-            VariantKind::Tuple |\n-            VariantKind::Record => None,\n+            VariantKind::Unit | VariantKind::Tuple | VariantKind::Record => None,\n             VariantKind::NewtypeTuple { ty } => ty.as_ref(),\n             VariantKind::NewtypeRecord { field_type, .. } => field_type.as_ref(),\n         }"}]}