{"sha": "f0eae8f1c19a051ab750383e479f979c32d4598a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZWFlOGYxYzE5YTA1MWFiNzUwMzgzZTQ3OWY5NzljMzJkNDU5OGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-07T21:50:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-07T23:12:15Z"}, "message": "Convert field terminators to commas. Stop parsing semis.", "tree": {"sha": "f4ac6cb0637579d32aeb3dc7d9174dc5a6b3efce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4ac6cb0637579d32aeb3dc7d9174dc5a6b3efce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0eae8f1c19a051ab750383e479f979c32d4598a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0eae8f1c19a051ab750383e479f979c32d4598a", "html_url": "https://github.com/rust-lang/rust/commit/f0eae8f1c19a051ab750383e479f979c32d4598a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0eae8f1c19a051ab750383e479f979c32d4598a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3078830934ba5596e7eac86825636b49451e40e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3078830934ba5596e7eac86825636b49451e40e3", "html_url": "https://github.com/rust-lang/rust/commit/3078830934ba5596e7eac86825636b49451e40e3"}], "stats": {"total": 568, "additions": 284, "deletions": 284}, "files": [{"sha": "cd0d2b25e95d9359ca136d08028d50ae8ed54543", "filename": "src/libcore/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -33,7 +33,7 @@ export future_pipe;\n \n #[doc = \"The future type\"]\n struct Future<A> {\n-    /*priv*/ mut state: FutureState<A>;\n+    /*priv*/ mut state: FutureState<A>,\n }\n \n priv enum FutureState<A> {"}, {"sha": "48fc9f205b9d5e6f7ca5e6402041f9277618d4d6", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -176,15 +176,15 @@ fn default_state() -> State {\n }\n \n struct SipState {\n-    k0: u64;\n-    k1: u64;\n-    mut length: uint; // how many bytes we've processed\n-    mut v0: u64;      // hash state\n-    mut v1: u64;\n-    mut v2: u64;\n-    mut v3: u64;\n-    tail: [mut u8]/8; // unprocessed bytes\n-    mut ntail: uint;  // how many bytes in tail are valid\n+    k0: u64,\n+    k1: u64,\n+    mut length: uint, // how many bytes we've processed\n+    mut v0: u64,      // hash state\n+    mut v1: u64,\n+    mut v2: u64,\n+    mut v3: u64,\n+    tail: [mut u8]/8, // unprocessed bytes\n+    mut ntail: uint,  // how many bytes in tail are valid\n }\n \n #[inline(always)]"}, {"sha": "b3119b9d24d655a94357f6f1edbeb4b47d1196de", "filename": "src/libcore/managed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -20,8 +20,8 @@ export Managed;\n enum Mode { ReadOnly, Mutable, Immutable }\n \n struct Data<T> {\n-    priv mut value: T;\n-    priv mut mode: Mode;\n+    priv mut value: T,\n+    priv mut mode: Mode\n }\n \n type Managed<T> = @Data<T>;"}, {"sha": "a8827c08a7cacf335ff7df71efd76b38508d8b26", "filename": "src/libcore/path.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -5,15 +5,15 @@\n use cmp::Eq;\n \n struct WindowsPath {\n-    host: Option<~str>;\n-    device: Option<~str>;\n-    is_absolute: bool;\n-    components: ~[~str];\n+    host: Option<~str>,\n+    device: Option<~str>,\n+    is_absolute: bool,\n+    components: ~[~str],\n }\n \n struct PosixPath {\n-    is_absolute: bool;\n-    components: ~[~str];\n+    is_absolute: bool,\n+    components: ~[~str],\n }\n \n trait GenericPath {"}, {"sha": "da4b1b046739dae3c364c37d6078780ba14e9f80", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -465,7 +465,7 @@ fn try_recv<T: send, Tbuffer: send>(+p: RecvPacketBuffered<T, Tbuffer>)\n     let p = unsafe { &*p_ };\n \n     struct DropState {\n-        p: &PacketHeader;\n+        p: &PacketHeader,\n \n         drop {\n             if task::failing() {"}, {"sha": "3eb8e581cbc422a31496a1c2e4a090d3bf461c90", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -30,16 +30,16 @@ mod linear {\n \n     const initial_capacity: uint = 32u; // 2^5\n     struct Bucket<K:Eq Hash,V> {\n-        hash: uint;\n-        key: K;\n-        value: V;\n+        hash: uint,\n+        key: K,\n+        value: V,\n     }\n     struct LinearMap<K:Eq Hash,V> {\n-        k0: u64;\n-        k1: u64;\n-        resize_at: uint;\n-        size: uint;\n-        buckets: ~[Option<Bucket<K,V>>];\n+        k0: u64,\n+        k1: u64,\n+        resize_at: uint,\n+        size: uint,\n+        buckets: ~[Option<Bucket<K,V>>],\n     }\n \n     // FIXME(#3148) -- we could rewrite found_entry"}, {"sha": "8eee6088630994bbe357c756a2faa7122ed78eb4", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -28,8 +28,8 @@ enum TypeDesc = {\n \n /// The representation of a Rust closure\n struct Closure {\n-    code: *();\n-    env: *();\n+    code: *(),\n+    env: *(),\n }\n \n #[abi = \"cdecl\"]"}, {"sha": "2b57d694cbf305405e2ddd0c095246cd9f34de5a", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -86,15 +86,15 @@ unsafe fn copy_lifetime<S,T>(_ptr: &a/S, ptr: &T) -> &a/T {\n type UnwrapProto = ~mut Option<(pipes::ChanOne<()>, pipes::PortOne<bool>)>;\n \n struct ArcData<T> {\n-    mut count:     libc::intptr_t;\n-    mut unwrapper: libc::uintptr_t; // either a UnwrapProto or 0\n+    mut count:     libc::intptr_t,\n+    mut unwrapper: libc::uintptr_t, // either a UnwrapProto or 0\n     // FIXME(#3224) should be able to make this non-option to save memory, and\n     // in unwrap() use \"let ~ArcData { data: result, _ } = thing\" to unwrap it\n-    mut data:      Option<T>;\n+    mut data:      Option<T>,\n }\n \n struct ArcDestruct<T> {\n-    mut data: *libc::c_void;\n+    mut data: *libc::c_void,\n     drop unsafe {\n         if self.data.is_null() {\n             return; // Happens when destructing an unwrapper's handle.\n@@ -140,8 +140,8 @@ fn ArcDestruct<T>(data: *libc::c_void) -> ArcDestruct<T> {\n unsafe fn unwrap_shared_mutable_state<T: send>(+rc: SharedMutableState<T>)\n         -> T {\n     struct DeathThroes<T> {\n-        mut ptr:      Option<~ArcData<T>>;\n-        mut response: Option<pipes::ChanOne<bool>>;\n+        mut ptr:      Option<~ArcData<T>>,\n+        mut response: Option<pipes::ChanOne<bool>>,\n         drop unsafe {\n             let response = option::swap_unwrap(&mut self.response);\n             // In case we get killed early, we need to tell the person who\n@@ -312,11 +312,11 @@ impl LittleLock {\n     }\n }\n \n-struct ExData<T: send> { lock: LittleLock; mut failed: bool; mut data: T; }\n+struct ExData<T: send> { lock: LittleLock, mut failed: bool, mut data: T, }\n /**\n  * An arc over mutable data that is protected by a lock. For library use only.\n  */\n-struct Exclusive<T: send> { x: SharedMutableState<ExData<T>>; }\n+struct Exclusive<T: send> { x: SharedMutableState<ExData<T>> }\n \n fn exclusive<T:send >(+user_data: T) -> Exclusive<T> {\n     let data = ExData {"}, {"sha": "bb33bad1f85e3edb16cd7c137ecf782880e3c017", "filename": "src/libcore/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -54,7 +54,7 @@ fn replace<T>(dest: &mut T, +src: T) -> T {\n \n /// A non-copyable dummy type.\n struct NonCopyable {\n-    i: ();\n+    i: (),\n     drop { }\n }\n "}, {"sha": "b5af4af06c34d91d962989d84115dc1302a0bb83", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -19,7 +19,7 @@ export RWARC, rw_arc_with_condvars, RWWriteMode, RWReadMode;\n export unwrap_rw_arc;\n \n /// As sync::condvar, a mechanism for unlock-and-descheduling and signalling.\n-struct Condvar { is_mutex: bool; failed: &mut bool; cond: &sync::Condvar; }\n+struct Condvar { is_mutex: bool, failed: &mut bool, cond: &sync::Condvar }\n \n impl &Condvar {\n     /// Atomically exit the associated ARC and block until a signal is sent.\n@@ -69,7 +69,7 @@ impl &Condvar {\n  ****************************************************************************/\n \n /// An atomically reference counted wrapper for shared immutable state.\n-struct ARC<T: const send> { x: SharedMutableState<T>; }\n+struct ARC<T: const send> { x: SharedMutableState<T> }\n \n /// Create an atomically reference counted wrapper.\n fn ARC<T: const send>(+data: T) -> ARC<T> {\n@@ -114,9 +114,9 @@ fn unwrap<T: const send>(+rc: ARC<T>) -> T {\n  ****************************************************************************/\n \n #[doc(hidden)]\n-struct MutexARCInner<T: send> { lock: Mutex; failed: bool; data: T; }\n+struct MutexARCInner<T: send> { lock: Mutex, failed: bool, data: T }\n /// An ARC with mutable data protected by a blocking mutex.\n-struct MutexARC<T: send> { x: SharedMutableState<MutexARCInner<T>>; }\n+struct MutexARC<T: send> { x: SharedMutableState<MutexARCInner<T>> }\n \n /// Create a mutex-protected ARC with the supplied data.\n fn MutexARC<T: send>(+user_data: T) -> MutexARC<T> {\n@@ -222,7 +222,7 @@ fn check_poison(is_mutex: bool, failed: bool) {\n \n #[doc(hidden)]\n struct PoisonOnFail {\n-    failed: &mut bool;\n+    failed: &mut bool,\n     drop {\n         /* assert !*self.failed; -- might be false in case of cond.wait() */\n         if task::failing() { *self.failed = true; }\n@@ -240,16 +240,16 @@ fn PoisonOnFail(failed: &r/mut bool) -> PoisonOnFail/&r {\n  ****************************************************************************/\n \n #[doc(hidden)]\n-struct RWARCInner<T: const send> { lock: RWlock; failed: bool; data: T; }\n+struct RWARCInner<T: const send> { lock: RWlock, failed: bool, data: T }\n /**\n  * A dual-mode ARC protected by a reader-writer lock. The data can be accessed\n  * mutably or immutably, and immutably-accessing tasks may run concurrently.\n  *\n  * Unlike mutex_arcs, rw_arcs are safe, because they cannot be nested.\n  */\n struct RWARC<T: const send> {\n-    x: SharedMutableState<RWARCInner<T>>;\n-    mut cant_nest: ();\n+    x: SharedMutableState<RWARCInner<T>>,\n+    mut cant_nest: ()\n }\n \n /// Create a reader/writer ARC with the supplied data."}, {"sha": "a9010759ef9584e726044a5371e43a0a73bb225c", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -51,9 +51,9 @@ struct Arena {\n     // The head is seperated out from the list as a unbenchmarked\n     // microoptimization, to avoid needing to case on the list to\n     // access the head.\n-    priv mut head: Chunk;\n-    priv mut pod_head: Chunk;\n-    priv mut chunks: @List<Chunk>;\n+    priv mut head: Chunk,\n+    priv mut pod_head: Chunk,\n+    priv mut chunks: @List<Chunk>,\n     drop {\n         unsafe {\n             destroy_chunk(self.head);"}, {"sha": "e67be74c642ebbccb7163aaede33bc50664d3843", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -5,7 +5,7 @@\n /// Similar to a mutable option type, but friendlier.\n \n struct Cell<T> {\n-    mut value: Option<T>;\n+    mut value: Option<T>\n }\n \n /// Creates a new full cell with the given value."}, {"sha": "d286b496923c3cc4fbe86d064d72d1a145c05bcc", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -14,8 +14,8 @@ export DuplexStream;\n \n /// An extension of `pipes::stream` that allows both sending and receiving.\n struct DuplexStream<T: send, U: send> : Channel<T>, Recv<U>, Selectable {\n-    priv chan: Chan<T>;\n-    priv port: Port <U>;\n+    priv chan: Chan<T>,\n+    priv port: Port <U>,\n \n     fn send(+x: T) {\n         self.chan.send(x)"}, {"sha": "3db1c3407df96432dff1c9582e98c9cfac944769", "filename": "src/libstd/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -113,17 +113,17 @@ mod chained {\n     const initial_capacity: uint = 32u; // 2^5\n \n     struct entry<K, V> {\n-        hash: uint;\n-        key: K;\n-        value: V;\n-        mut next: Option<@entry<K, V>>;\n+        hash: uint,\n+        key: K,\n+        value: V,\n+        mut next: Option<@entry<K, V>>\n     }\n \n     struct hashmap_<K, V> {\n-        mut count: uint;\n-        mut chains: ~[mut Option<@entry<K,V>>];\n-        hasher: hashfn<K>;\n-        eqer: eqfn<K>;\n+        mut count: uint,\n+        mut chains: ~[mut Option<@entry<K,V>>],\n+        hasher: hashfn<K>,\n+        eqer: eqfn<K>\n     }\n \n     type t<K, V> = @hashmap_<K, V>;"}, {"sha": "45ab8d4c4274a7ebe13ae06893d3dc875d85af73", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -24,8 +24,8 @@ type WaitEnd = pipes::PortOne<()>;\n type SignalEnd = pipes::ChanOne<()>;\n // A doubly-ended queue of waiting tasks.\n #[doc(hidden)]\n-struct Waitqueue { head: pipes::Port<SignalEnd>;\n-                   tail: pipes::Chan<SignalEnd>; }\n+struct Waitqueue { head: pipes::Port<SignalEnd>,\n+                   tail: pipes::Chan<SignalEnd> }\n \n fn new_waitqueue() -> Waitqueue {\n     let (block_tail, block_head) = pipes::stream();\n@@ -63,11 +63,11 @@ fn broadcast_waitqueue(q: &Waitqueue) -> uint {\n // The building-block used to make semaphores, mutexes, and rwlocks.\n #[doc(hidden)]\n struct SemInner<Q> {\n-    mut count: int;\n-    waiters:   Waitqueue;\n+    mut count: int,\n+    waiters:   Waitqueue,\n     // Can be either unit or another waitqueue. Some sems shouldn't come with\n     // a condition variable attached, others should.\n-    blocked:   Q;\n+    blocked:   Q\n }\n #[doc(hidden)]\n enum Sem<Q: send> = Exclusive<SemInner<Q>>;\n@@ -153,7 +153,7 @@ impl &Sem<~[mut Waitqueue]> {\n // FIXME(#3136) should go inside of access()\n #[doc(hidden)]\n struct SemRelease {\n-    sem: &Sem<()>;\n+    sem: &Sem<()>,\n     drop { self.sem.release(); }\n }\n \n@@ -165,7 +165,7 @@ fn SemRelease(sem: &r/Sem<()>) -> SemRelease/&r {\n \n #[doc(hidden)]\n struct SemAndSignalRelease {\n-    sem: &Sem<~[mut Waitqueue]>;\n+    sem: &Sem<~[mut Waitqueue]>,\n     drop { self.sem.release(); }\n }\n \n@@ -177,7 +177,7 @@ fn SemAndSignalRelease(sem: &r/Sem<~[mut Waitqueue]>)\n }\n \n /// A mechanism for atomic-unlock-and-deschedule blocking and signalling.\n-struct Condvar { priv sem: &Sem<~[mut Waitqueue]>; drop { } }\n+struct Condvar { priv sem: &Sem<~[mut Waitqueue]>, drop { } }\n \n impl &Condvar {\n     /**\n@@ -245,7 +245,7 @@ impl &Condvar {\n         // mutex during unwinding. As long as the wrapper (mutex, etc) is\n         // bounded in when it gets released, this shouldn't hang forever.\n         struct SemAndSignalReacquire {\n-            sem: &Sem<~[mut Waitqueue]>;\n+            sem: &Sem<~[mut Waitqueue]>,\n             drop unsafe {\n                 // Needs to succeed, instead of itself dying.\n                 do task::unkillable {\n@@ -338,7 +338,7 @@ impl &Sem<~[mut Waitqueue]> {\n  ****************************************************************************/\n \n /// A counting, blocking, bounded-waiting semaphore.\n-struct Semaphore { priv sem: Sem<()>; }\n+struct Semaphore { priv sem: Sem<()> }\n \n /// Create a new semaphore with the specified count.\n fn semaphore(count: int) -> Semaphore {\n@@ -377,7 +377,7 @@ impl &Semaphore {\n  * A task which fails while holding a mutex will unlock the mutex as it\n  * unwinds.\n  */\n-struct Mutex { priv sem: Sem<~[mut Waitqueue]>; }\n+struct Mutex { priv sem: Sem<~[mut Waitqueue]> }\n \n /// Create a new mutex, with one associated condvar.\n fn Mutex() -> Mutex { mutex_with_condvars(1) }\n@@ -412,8 +412,8 @@ impl &Mutex {\n \n #[doc(hidden)]\n struct RWlockInner {\n-    read_mode:  bool;\n-    read_count: uint;\n+    read_mode:  bool,\n+    read_count: uint\n }\n \n /**\n@@ -424,9 +424,9 @@ struct RWlockInner {\n  * unwinds.\n  */\n struct RWlock {\n-    /* priv */ order_lock:  Semaphore;\n-    /* priv */ access_lock: Sem<~[mut Waitqueue]>;\n-    /* priv */ state:       Exclusive<RWlockInner>;\n+    /* priv */ order_lock:  Semaphore,\n+    /* priv */ access_lock: Sem<~[mut Waitqueue]>,\n+    /* priv */ state:       Exclusive<RWlockInner>\n }\n \n /// Create a new rwlock, with one associated condvar.\n@@ -584,7 +584,7 @@ impl &RWlock {\n // FIXME(#3136) should go inside of read()\n #[doc(hidden)]\n struct RWlockReleaseRead {\n-    lock: &RWlock;\n+    lock: &RWlock,\n     drop unsafe {\n         do task::unkillable {\n             let mut last_reader = false;\n@@ -613,7 +613,7 @@ fn RWlockReleaseRead(lock: &r/RWlock) -> RWlockReleaseRead/&r {\n // FIXME(#3136) should go inside of downgrade()\n #[doc(hidden)]\n struct RWlockReleaseDowngrade {\n-    lock: &RWlock;\n+    lock: &RWlock,\n     drop unsafe {\n         do task::unkillable {\n             let mut writer_or_last_reader = false;\n@@ -647,9 +647,9 @@ fn RWlockReleaseDowngrade(lock: &r/RWlock) -> RWlockReleaseDowngrade/&r {\n }\n \n /// The \"write permission\" token used for rwlock.write_downgrade().\n-struct RWlockWriteMode { /* priv */ lock: &RWlock; drop { } }\n+struct RWlockWriteMode { /* priv */ lock: &RWlock, drop { } }\n /// The \"read permission\" token used for rwlock.write_downgrade().\n-struct RWlockReadMode  { priv lock: &RWlock; drop { } }\n+struct RWlockReadMode  { priv lock: &RWlock, drop { } }\n \n impl &RWlockWriteMode {\n     /// Access the pre-downgrade rwlock in write mode.\n@@ -956,7 +956,7 @@ mod tests {\n             assert woken == 0;\n         }\n         struct SendOnFailure {\n-            c: pipes::Chan<()>;\n+            c: pipes::Chan<()>,\n             drop { self.c.send(()); }\n         }\n "}, {"sha": "638e46a9cdb28756bfb38f481b9967823822d4c2", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -15,10 +15,10 @@ use io::*;\n use codemap::span;\n \n struct gather_item {\n-    lo: uint;\n-    hi: uint;\n-    e: @ast::expr;\n-    constr: ~str;\n+    lo: uint,\n+    hi: uint,\n+    e: @ast::expr,\n+    constr: ~str\n }\n \n type aq_ctxt = @{lo: uint, gather: DVec<gather_item>};"}, {"sha": "015399e62b10f6909dfe0c75cc067d17f0e09c31", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -2731,7 +2731,7 @@ struct parser {\n                 !self.token_is_pound_or_doc_comment(self.token) {\n             let a_var = self.parse_instance_var(vis);\n             match self.token {\n-                token::SEMI | token::COMMA => {\n+                token::COMMA => {\n                     self.bump();\n                 }\n                 token::RBRACE => {}"}, {"sha": "2a9c792da14f4c15c954e5d8c5d7345af13c3b32", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -77,8 +77,8 @@ mod jit {\n     }\n \n     struct Closure {\n-        code: *();\n-        env: *();\n+        code: *(),\n+        env: *(),\n     }\n \n     fn exec(sess: session,"}, {"sha": "9aca98f61e56f735c61936943842b69e3a7bf6b2", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -241,10 +241,10 @@ enum LocalKind {\n }\n \n struct LocalInfo {\n-    id: node_id;\n-    ident: ident;\n-    is_mutbl: bool;\n-    kind: LocalKind;\n+    id: node_id,\n+    ident: ident,\n+    is_mutbl: bool,\n+    kind: LocalKind,\n }\n \n enum VarKind {\n@@ -268,18 +268,18 @@ fn relevant_def(def: def) -> Option<RelevantDef> {\n }\n \n struct IrMaps {\n-    tcx: ty::ctxt;\n-    method_map: typeck::method_map;\n-    last_use_map: last_use_map;\n-\n-    mut num_live_nodes: uint;\n-    mut num_vars: uint;\n-    live_node_map: hashmap<node_id, LiveNode>;\n-    variable_map: hashmap<node_id, Variable>;\n-    field_map: hashmap<ident, Variable>;\n-    capture_map: hashmap<node_id, @~[CaptureInfo]>;\n-    mut var_kinds: ~[VarKind];\n-    mut lnks: ~[LiveNodeKind];\n+    tcx: ty::ctxt,\n+    method_map: typeck::method_map,\n+    last_use_map: last_use_map,\n+\n+    mut num_live_nodes: uint,\n+    mut num_vars: uint,\n+    live_node_map: hashmap<node_id, LiveNode>,\n+    variable_map: hashmap<node_id, Variable>,\n+    field_map: hashmap<ident, Variable>,\n+    capture_map: hashmap<node_id, @~[CaptureInfo]>,\n+    mut var_kinds: ~[VarKind],\n+    mut lnks: ~[LiveNodeKind],\n }\n \n fn IrMaps(tcx: ty::ctxt, method_map: typeck::method_map,"}, {"sha": "7440d37ae5dbd3e141831cf351271bf970d139de", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -415,8 +415,8 @@ impl ty::ctxt: get_type_for_node {\n }\n \n struct mem_categorization_ctxt {\n-    tcx: ty::ctxt;\n-    method_map: typeck::method_map;\n+    tcx: ty::ctxt,\n+    method_map: typeck::method_map,\n }\n \n impl &mem_categorization_ctxt {"}, {"sha": "9b1065cf86356b0d3133469eaacf6b5e1a1493c0", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -42,11 +42,11 @@ Encodes the bounding lifetime for a given AST node:\n type region_map = hashmap<ast::node_id, ast::node_id>;\n \n struct ctxt {\n-    sess: session;\n-    def_map: resolve::DefMap;\n+    sess: session,\n+    def_map: resolve::DefMap,\n \n     // Generated maps:\n-    region_map: region_map;\n+    region_map: region_map,\n \n     // Generally speaking, expressions are parented to their innermost\n     // enclosing block. But some kinds of expressions serve as\n@@ -55,7 +55,7 @@ struct ctxt {\n     // the condition in a while loop is always a parent.  In those\n     // cases, we add the node id of such an expression to this set so\n     // that when we visit it we can view it as a parent.\n-    root_exprs: hashmap<ast::node_id, ()>;\n+    root_exprs: hashmap<ast::node_id, ()>,\n \n     // The parent scope is the innermost block, statement, call, or alt\n     // expression during the execution of which the current expression\n@@ -88,7 +88,7 @@ struct ctxt {\n     // Here, the first argument `&**x` will be a borrow of the `~int`,\n     // but the second argument overwrites that very value! Bad.\n     // (This test is borrowck-pure-scope-in-call.rs, btw)\n-    parent: parent;\n+    parent: parent,\n }\n \n /// Returns true if `subscope` is equal to or is lexically nested inside"}, {"sha": "1b7f2d60bd7c709fd45569256e0eee1d1f4280f3", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -67,8 +67,8 @@ use str_eq = str::eq;\n type DefMap = hashmap<node_id,def>;\n \n struct binding_info {\n-    span: span;\n-    binding_mode: binding_mode;\n+    span: span,\n+    binding_mode: binding_mode,\n }\n \n // Map from the name in a pattern to its binding mode.\n@@ -100,9 +100,9 @@ type ExportMap = hashmap<node_id, ~[Export]>;\n type ExportMap2 = hashmap<node_id, ~[Export2]>;\n \n struct Export2 {\n-    name: ~str;         // The name of the target.\n-    def_id: def_id;     // The definition of the target.\n-    reexport: bool;     // Whether this is a reexport.\n+    name: ~str,         // The name of the target.\n+    def_id: def_id,     // The definition of the target.\n+    reexport: bool,     // Whether this is a reexport.\n }\n \n enum PatternBindingMode {\n@@ -493,8 +493,8 @@ impl Privacy : cmp::Eq {\n \n // Records a possibly-private definition.\n struct Definition {\n-    privacy: Privacy;\n-    def: def;\n+    privacy: Privacy,\n+    def: def,\n }\n \n // Records the definitions (at most one for each namespace) that a name is"}, {"sha": "fb7c8fae3371883c623c19b35b27cdad3b1214c7", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -72,9 +72,9 @@ fn variant_opt(tcx: ty::ctxt, pat_id: ast::node_id) -> opt {\n }\n \n struct binding {\n-    val: ValueRef;\n-    mode: ast::binding_mode;\n-    ty: ty::t;\n+    val: ValueRef,\n+    mode: ast::binding_mode,\n+    ty: ty::t\n }\n \n type bind_map = ~[{\n@@ -683,10 +683,10 @@ fn compile_submatch(bcx: block, m: match_, vals: ~[ValueRef],\n }\n \n struct phi_binding {\n-    pat_id: ast::node_id;\n-    phi_val: ValueRef;\n-    mode: ast::binding_mode;\n-    ty: ty::t;\n+    pat_id: ast::node_id,\n+    phi_val: ValueRef,\n+    mode: ast::binding_mode,\n+    ty: ty::t\n }\n \n type phi_bindings_list = ~[phi_binding];"}, {"sha": "a92f8c9adf616241afc26cfc644c2b38e8f18421", "filename": "src/rustc/middle/trans/callee.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -21,14 +21,14 @@ use util::common::indenter;\n // item.  Note that this is just the fn-ptr and is not a Rust closure\n // value (which is a pair).\n struct FnData {\n-    llfn: ValueRef;\n+    llfn: ValueRef,\n }\n \n struct MethodData {\n-    llfn: ValueRef;\n-    llself: ValueRef;\n-    self_ty: ty::t;\n-    self_mode: ast::rmode;\n+    llfn: ValueRef,\n+    llself: ValueRef,\n+    self_ty: ty::t,\n+    self_mode: ast::rmode\n }\n \n enum CalleeData {\n@@ -38,8 +38,8 @@ enum CalleeData {\n }\n \n struct Callee {\n-    bcx: block;\n-    data: CalleeData;\n+    bcx: block,\n+    data: CalleeData\n }\n \n fn trans(bcx: block, expr: @ast::expr) -> Callee {"}, {"sha": "056f432fcd53f49c25fa042c62d511e8efbaebcc", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -100,8 +100,8 @@ enum EnvAction {\n }\n \n struct EnvValue {\n-    action: EnvAction;\n-    datum: Datum;\n+    action: EnvAction,\n+    datum: Datum\n }\n \n impl EnvAction {"}, {"sha": "f4a3af0873403d7ecddc3e65acd2ecd86d52c1ac", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -176,9 +176,9 @@ type crate_ctxt = {\n \n // Types used for llself.\n struct ValSelfData {\n-    v: ValueRef;\n-    t: ty::t;\n-    is_owned: bool;\n+    v: ValueRef,\n+    t: ty::t,\n+    is_owned: bool\n }\n \n enum local_val { local_mem(ValueRef), local_imm(ValueRef), }\n@@ -527,8 +527,8 @@ fn mk_block(llbb: BasicBlockRef, parent: Option<block>, -kind: block_kind,\n const first_real_arg: uint = 2u;\n \n struct Result {\n-    bcx: block;\n-    val: ValueRef;\n+    bcx: block,\n+    val: ValueRef\n }\n \n fn rslt(bcx: block, val: ValueRef) -> Result {"}, {"sha": "b45b4e6bdbad0797a635e953bcc23e9c29433450", "filename": "src/rustc/middle/trans/datum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -100,24 +100,24 @@ enum CopyAction {\n struct Datum {\n     /// The llvm value.  This is either a pointer to the Rust value or\n     /// the value itself, depending on `mode` below.\n-    val: ValueRef;\n+    val: ValueRef,\n \n     /// The rust type of the value.\n-    ty: ty::t;\n+    ty: ty::t,\n \n     /// Indicates whether this is by-ref or by-value.\n-    mode: DatumMode;\n+    mode: DatumMode,\n \n     /// How did this value originate?  This is particularly important\n     /// if the value is MOVED or prematurely DROPPED, because it\n     /// describes how to cancel the cleanup that was scheduled before.\n     /// See the def'n of the `DatumSource` type.\n-    source: DatumSource;\n+    source: DatumSource\n }\n \n struct DatumBlock {\n-    bcx: block;\n-    datum: Datum;\n+    bcx: block,\n+    datum: Datum,\n }\n \n enum DatumMode {"}, {"sha": "7be4f8e645a5e59e2b3547ebd24c61bfd2f59bda", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -118,10 +118,10 @@ fn make_drop_glue_unboxed(bcx: block, vptr: ValueRef, vec_ty: ty::t) ->\n }\n \n struct VecTypes {\n-    vec_ty: ty::t;\n-    unit_ty: ty::t;\n-    llunit_ty: TypeRef;\n-    llunit_size: ValueRef;\n+    vec_ty: ty::t,\n+    unit_ty: ty::t,\n+    llunit_ty: TypeRef,\n+    llunit_size: ValueRef\n }\n \n impl VecTypes {"}, {"sha": "4c81ccd21420878e9ef66f75fb19e4bc1de33619", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -406,10 +406,10 @@ impl fn_proto : cmp::Eq {\n  * - `bounds` is the parameter bounds on the function's upvars.\n  * - `ret_style` indicates whether the function returns a value or fails. */\n struct FnMeta {\n-    purity: ast::purity;\n-    proto: fn_proto;\n-    bounds: @~[param_bound];\n-    ret_style: ret_style;\n+    purity: ast::purity,\n+    proto: fn_proto,\n+    bounds: @~[param_bound],\n+    ret_style: ret_style\n }\n \n /**\n@@ -419,8 +419,8 @@ struct FnMeta {\n  * - `inputs` is the list of arguments and their modes.\n  * - `output` is the return type. */\n struct FnSig {\n-    inputs: ~[arg];\n-    output: t;\n+    inputs: ~[arg],\n+    output: t\n }\n \n /**\n@@ -429,8 +429,8 @@ struct FnSig {\n  * by the meta information because, in some cases, the\n  * meta information is inferred. */\n struct FnTyBase<M: cmp::Eq> {\n-    meta: M;\n-    sig: FnSig;\n+    meta: M,\n+    sig: FnSig\n }\n \n type FnTy = FnTyBase<FnMeta>;\n@@ -556,8 +556,8 @@ enum terr_vstore_kind {\n }\n \n struct expected_found<T> {\n-    expected: T;\n-    found: T;\n+    expected: T,\n+    found: T\n }\n \n // Data structures used in type unification"}, {"sha": "96d9bf1e2e5cd1710424b1fcede49f891e76062f", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -97,22 +97,22 @@ type self_info = {\n /// `bar()` will each have their own `fn_ctxt`, but they will\n /// share the inherited fields.\n struct inherited {\n-    infcx: infer::infer_ctxt;\n-    locals: hashmap<ast::node_id, TyVid>;\n-    node_types: hashmap<ast::node_id, ty::t>;\n-    node_type_substs: hashmap<ast::node_id, ty::substs>;\n-    borrowings: hashmap<ast::node_id, ty::borrow>;\n+    infcx: infer::infer_ctxt,\n+    locals: hashmap<ast::node_id, TyVid>,\n+    node_types: hashmap<ast::node_id, ty::t>,\n+    node_type_substs: hashmap<ast::node_id, ty::substs>,\n+    borrowings: hashmap<ast::node_id, ty::borrow>,\n }\n \n struct fn_ctxt {\n     // var_bindings, locals and next_var_id are shared\n     // with any nested functions that capture the environment\n     // (and with any functions whose environment is being captured).\n-    self_impl_def_id: Option<ast::def_id>;\n-    ret_ty: ty::t;\n+    self_impl_def_id: Option<ast::def_id>,\n+    ret_ty: ty::t,\n     // Used by loop bodies that return from the outer function\n-    indirect_ret_ty: Option<ty::t>;\n-    purity: ast::purity;\n+    indirect_ret_ty: Option<ty::t>,\n+    purity: ast::purity,\n \n     // Sometimes we generate region pointers where the precise region\n     // to use is not known. For example, an expression like `&x.f`\n@@ -127,13 +127,13 @@ struct fn_ctxt {\n     // inference selects the ultimate value.  Finally, borrowck is\n     // charged with guaranteeing that the value whose address was taken\n     // can actually be made to live as long as it needs to live.\n-    mut region_lb: ast::node_id;\n+    mut region_lb: ast::node_id,\n \n-    in_scope_regions: isr_alist;\n+    in_scope_regions: isr_alist,\n \n-    inh: @inherited;\n+    inh: @inherited,\n \n-    ccx: @crate_ctxt;\n+    ccx: @crate_ctxt,\n }\n \n fn blank_inherited(ccx: @crate_ctxt) -> @inherited {"}, {"sha": "cbda05a4012064dc3e46da883dcf44c36a42963f", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -507,9 +507,9 @@ fn rollback_to<V:copy vid, T:copy>(\n }\n \n struct Snapshot {\n-    ty_var_bindings_len: uint;\n-    int_var_bindings_len: uint;\n-    region_vars_snapshot: uint;\n+    ty_var_bindings_len: uint,\n+    int_var_bindings_len: uint,\n+    region_vars_snapshot: uint,\n }\n \n impl infer_ctxt {"}, {"sha": "2bfabd807a259ea29ce596b3a45ddd9d9631bc9c", "filename": "src/rustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -79,9 +79,9 @@ trait combine {\n }\n \n struct combine_fields {\n-    infcx: infer_ctxt;\n-    a_is_expected: bool;\n-    span: span;\n+    infcx: infer_ctxt,\n+    a_is_expected: bool,\n+    span: span,\n }\n \n fn expected_found<C: combine,T>("}, {"sha": "be87558ee5b63f529e04f6dd842186e81b64e792", "filename": "src/rustc/middle/typeck/infer/region_var_bindings.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -350,8 +350,8 @@ impl Constraint: cmp::Eq {\n }\n \n struct TwoRegions {\n-    a: region;\n-    b: region;\n+    a: region,\n+    b: region,\n }\n \n impl TwoRegions: cmp::Eq {\n@@ -371,12 +371,12 @@ enum UndoLogEntry {\n type CombineMap = hashmap<TwoRegions, RegionVid>;\n \n struct RegionVarBindings {\n-    tcx: ty::ctxt;\n-    var_spans: DVec<span>;\n-    values: Cell<~[ty::region]>;\n-    constraints: hashmap<Constraint, span>;\n-    lubs: CombineMap;\n-    glbs: CombineMap;\n+    tcx: ty::ctxt,\n+    var_spans: DVec<span>,\n+    values: Cell<~[ty::region]>,\n+    constraints: hashmap<Constraint, span>,\n+    lubs: CombineMap,\n+    glbs: CombineMap,\n \n     // The undo log records actions that might later be undone.\n     //\n@@ -386,7 +386,7 @@ struct RegionVarBindings {\n     // actively snapshotting.  The reason for this is that otherwise\n     // we end up adding entries for things like the lower bound on\n     // a variable and so forth, which can never be rolled back.\n-    undo_log: DVec<UndoLogEntry>;\n+    undo_log: DVec<UndoLogEntry>\n }\n \n fn RegionVarBindings(tcx: ty::ctxt) -> RegionVarBindings {\n@@ -770,26 +770,26 @@ impl Classification : cmp::Eq {\n enum GraphNodeValue { NoValue, Value(region), ErrorValue }\n \n struct GraphNode {\n-    span: span;\n-    mut classification: Classification;\n-    mut value: GraphNodeValue;\n-    head_edge: [mut uint * 2]; // FIXME(#3226)--should not need mut\n+    span: span,\n+    mut classification: Classification,\n+    mut value: GraphNodeValue,\n+    head_edge: [mut uint * 2], // FIXME(#3226)--should not need mut\n }\n \n struct GraphEdge {\n-    next_edge: [mut uint * 2]; // FIXME(#3226)--should not need mut\n-    constraint: Constraint;\n-    span: span;\n+    next_edge: [mut uint * 2], // FIXME(#3226)--should not need mut\n+    constraint: Constraint,\n+    span: span,\n }\n \n struct Graph {\n-    nodes: ~[GraphNode];\n-    edges: ~[GraphEdge];\n+    nodes: ~[GraphNode],\n+    edges: ~[GraphEdge],\n }\n \n struct SpannedRegion {\n-    region: region;\n-    span: span;\n+    region: region,\n+    span: span,\n }\n \n type TwoRegionsMap = hashmap<TwoRegions, ()>;"}, {"sha": "36c3093874a1c5d74c3de8979d4532e90f882c6a", "filename": "src/rustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -9,14 +9,14 @@ enum var_value<V:copy, T:copy> {\n }\n \n struct vals_and_bindings<V:copy, T:copy> {\n-    vals: SmallIntMap<var_value<V, T>>;\n-    mut bindings: ~[(V, var_value<V, T>)];\n+    vals: SmallIntMap<var_value<V, T>>,\n+    mut bindings: ~[(V, var_value<V, T>)],\n }\n \n struct node<V:copy, T:copy> {\n-    root: V;\n-    possible_types: T;\n-    rank: uint;\n+    root: V,\n+    possible_types: T,\n+    rank: uint,\n }\n \n impl infer_ctxt {"}, {"sha": "3826d3e527c38ee8bc6128051a31b72d68859dad", "filename": "src/rustc/middle/typeck/rscope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -60,8 +60,8 @@ impl @anon_rscope: region_scope {\n }\n \n struct binding_rscope {\n-    base: region_scope;\n-    mut anon_bindings: uint;\n+    base: region_scope,\n+    mut anon_bindings: uint,\n }\n fn in_binding_rscope<RS: region_scope copy owned>(self: RS)\n     -> @binding_rscope {"}, {"sha": "4901a85369a364dca247b49b999580d2471dc97e", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -11,13 +11,13 @@ use send_map::linear::*;\n use io::WriterUtil;\n \n struct Results {\n-    sequential_ints: float;\n-    random_ints: float;\n-    delete_ints: float;\n+    sequential_ints: float,\n+    random_ints: float,\n+    delete_ints: float,\n \n-    sequential_strings: float;\n-    random_strings: float;\n-    delete_strings: float;\n+    sequential_strings: float,\n+    random_strings: float,\n+    delete_strings: float\n }\n \n fn timed(result: &mut float,"}, {"sha": "879825fa0ae8de475731207f45460cf7c83b9fe9", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -17,8 +17,8 @@ use io::WriterUtil;\n use std::map::hashmap;\n \n struct cmplx {\n-    re: f64;\n-    im: f64;\n+    re: f64,\n+    im: f64\n }\n \n impl cmplx : ops::Mul<cmplx,cmplx> {"}, {"sha": "72c7a2f25854c23757fd71986825f41a1bb2bf60", "filename": "src/test/compile-fail/auto-ref-borrowck-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,7 +1,7 @@\n // Tests that auto-ref can't create mutable aliases to immutable memory.\n \n struct Foo {\n-    x: int;\n+    x: int\n }\n \n trait Stuff {"}, {"sha": "8a518edf736018b174cd6aba5a2eb44f55c8b748", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,4 +1,4 @@\n-struct X { x: (); drop { error!(\"destructor runs\"); } }\n+struct X { x: (), drop { error!(\"destructor runs\"); } }\n \n fn main() {\n     let x = Some(X { x: () });"}, {"sha": "b99d4197848f84286058311013a1487b8f3cb266", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,4 +1,4 @@\n-struct X { x: (); drop { error!(\"destructor runs\"); } }\n+struct X { x: (), drop { error!(\"destructor runs\"); } }\n \n fn main() {\n     let x = Some((X { x: () }, X { x: () }));"}, {"sha": "496ec09513b112ff59b44853dba7b129774a2957", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,4 +1,4 @@\n-struct X { x: (); drop { error!(\"destructor runs\"); } }\n+struct X { x: (), drop { error!(\"destructor runs\"); } }\n \n enum double_option<T,U> { some2(T,U), none2 }\n "}, {"sha": "93096751d5cf9bcc1f62525127d4eaaaae5a6c6a", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,4 +1,4 @@\n-struct X { x: (); drop { error!(\"destructor runs\"); } }\n+struct X { x: (), drop { error!(\"destructor runs\"); } }\n \n fn main() {\n     let x = Some((X { x: () }, X { x: () }));"}, {"sha": "8e881d1d4295844dc0b659aa5be1a7976887a71f", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,4 +1,4 @@\n-struct X { x: (); drop { error!(\"destructor runs\"); } }\n+struct X { x: (), drop { error!(\"destructor runs\"); } }\n \n fn main() {\n     let x = Some(X { x: () });"}, {"sha": "f65f5f0de6154ccd72791daf3fd4d9c4ab4b4a42", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n-struct X { x: (); drop { error!(\"destructor runs\"); } }\n-struct Y { y: Option<X>; }\n+struct X { x: (), drop { error!(\"destructor runs\"); } }\n+struct Y { y: Option<X> }\n \n fn main() {\n     let x = Y { y: Some(X { x: () }) };"}, {"sha": "1a511ccef53cb76a88625a41240a7595919747ea", "filename": "src/test/compile-fail/bind-by-move-no-sub-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,4 +1,4 @@\n-struct X { x: (); drop { error!(\"destructor runs\"); } }\n+struct X { x: (), drop { error!(\"destructor runs\"); } }\n \n fn main() {\n     let x = Some(X { x: () });"}, {"sha": "f539045108ee472b08775c866c0a1408067c102c", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct defer {\n-    x: &[&str];\n+    x: &[&str],\n     drop { #error[\"%?\", self.x]; }\n }\n "}, {"sha": "849eefa124e02ba747ad57e8b1abcf53abb4c5c2", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,6 +1,6 @@\n struct Point { \n-    x: int;\n-    y: int;\n+    x: int,\n+    y: int,\n }\n \n impl Point : ops::Add<int,int> {"}, {"sha": "303415e4663593295efa01cf49ce3f192fd571a9", "filename": "src/test/compile-fail/borrowck-unary-move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct noncopyable {\n-    i: (); drop { #error[\"dropped\"]; }\n+    i: (), drop { #error[\"dropped\"]; }\n }\n \n fn noncopyable() -> noncopyable {"}, {"sha": "0ee8bf0c7c7dc90e7e5693cffa357e73a2385daa", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct X {\n-    x: ~str;\n+    x: ~str,\n     drop {\n         error!(\"value: %s\", self.x);\n     }"}, {"sha": "d0c265eb4ee3b8b7e88ccd02532cdc9b80cd8ad6", "filename": "src/test/compile-fail/issue-2356.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,4 +1,4 @@\n struct cat {\n-  tail: int;\n+  tail: int,\n   fn meow() { tail += 1; } //~ ERROR: Did you mean: `self.tail`\n }"}, {"sha": "61cfabc40d2da4fe9b3f1c5b977129caa1e2bdcb", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,7 +1,7 @@\n // A test case for #2548.\n \n struct foo {\n-    x: @mut int;\n+    x: @mut int,\n \n \n     drop {"}, {"sha": "db8d8f9fb7bd1344e21328fbbf544c918a6763ee", "filename": "src/test/compile-fail/issue-2587-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2587-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2587-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2587-2.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -3,7 +3,7 @@ fn foo<T: copy>(+_t: T) { fail; }\n fn bar<T>(+_t: T) { fail; }\n \n struct S {\n-    x: int;\n+    x: int,\n     drop {}\n }\n "}, {"sha": "9a042fd1d0be8cb5faf21ba09cefc8005180741c", "filename": "src/test/compile-fail/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -11,7 +11,7 @@ trait A {\n }\n \n struct E {\n- f: int;\n+ f: int\n }\n \n impl E: A {"}, {"sha": "977cce73808cc67a7bd0c77a7e12579f65871952", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -8,7 +8,7 @@ trait A {\n }\n \n struct E {\n- f: int;\n+ f: int\n }\n \n impl E: A {"}, {"sha": "99afe776f866f01f41a72c4872611ec195c08921", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -8,7 +8,7 @@ trait A {\n }\n \n struct E {\n- f: int;\n+ f: int\n }\n \n impl E: A {"}, {"sha": "c8895f2b43c10a4a23b6af759b1719025785ed75", "filename": "src/test/compile-fail/lint-non-camel-case-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-struct.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,6 +1,6 @@\n #[forbid(non_camel_case_types)]\n struct foo { //~ ERROR type, variant, or trait must be camel case\n-    bar: int;\n+    bar: int\n }\n \n fn main() {"}, {"sha": "5dffdfa4fd1075accf751952c3f55b0a32093316", "filename": "src/test/compile-fail/private-struct-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,6 +1,6 @@\n mod cat {\n     struct Cat {\n-        priv meows: uint;\n+        priv meows: uint\n     }\n \n     fn new_cat() -> Cat {"}, {"sha": "4e35380623d36b98df15da760507e410f708b4f5", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -5,10 +5,10 @@ mod argparse {\n     import either::{Either, Left, Right};\n \n     struct Flag {\n-        name: &str;\n-        desc: &str;\n-        max_count: uint;\n-        mut value: uint;\n+        name: &str,\n+        desc: &str,\n+        max_count: uint,\n+        mut value: uint\n     }\n \n     fn flag(name: &r/str, desc: &r/str) -> Flag/&r {"}, {"sha": "2c8603341651d443fa4ee72835a8603f9757cc85", "filename": "src/test/compile-fail/regions-infer-at-fn-not-param.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,17 +1,17 @@\n struct param1 {\n-    g: &fn();\n+    g: &fn()\n }\n \n struct param2 {\n-    g: fn();\n+    g: fn()\n }\n \n struct not_param1 {\n-    g: @fn();\n+    g: @fn()\n }\n \n struct not_param2 {\n-    g: @fn();\n+    g: @fn()\n }\n \n fn take1(p: param1) -> param1 { p } //~ ERROR mismatched types"}, {"sha": "75fa75520fca1f9d24146b21b6a00a3574db3828", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-immutability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct contravariant {\n-    f: &int;\n+    f: &int\n }\n \n fn to_same_lifetime(bi: contravariant/&r) {"}, {"sha": "d71f333425432d0668bfc887764875236550458f", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -4,7 +4,7 @@\n // the normal case.\n \n struct contravariant {\n-    f: fn@() -> &self/int;\n+    f: fn@() -> &self/int\n }\n \n fn to_same_lifetime(bi: contravariant/&r) {"}, {"sha": "45a57fc222dbafd2f3cd93f4e006d05400c49b2b", "filename": "src/test/compile-fail/regions-infer-covariance-due-to-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -3,7 +3,7 @@\n // You can upcast to a *larger region* but not a smaller one.\n \n struct covariant {\n-    f: fn@(x: &self/int) -> int;\n+    f: fn@(x: &self/int) -> int\n }\n \n fn to_same_lifetime(bi: covariant/&r) {"}, {"sha": "43e08a1d966c5c7fca44235f0f59f257bf95bed6", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-arg-and-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-arg-and-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-arg-and-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-arg-and-ret.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -3,7 +3,7 @@\n // You cannot convert between regions.\n \n struct invariant {\n-    f: fn(x: &self/int) -> &self/int;\n+    f: fn(x: &self/int) -> &self/int\n }\n \n fn to_same_lifetime(bi: invariant/&r) {"}, {"sha": "85ade7bebb8772082a340209dc84f6ba9233f876", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-1.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct invariant {\n-    f: @mut &int;\n+    f: @mut &int\n }\n \n fn to_same_lifetime(bi: invariant/&r) {"}, {"sha": "0d9365ceae9e140e9ea246eb97b4536b2675a7e2", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct invariant {\n-    f: @[mut &int];\n+    f: @[mut &int]\n }\n \n fn to_same_lifetime(bi: invariant/&r) {"}, {"sha": "61f45e5d475af7e81bd33eb3347b9324210e61a7", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct invariant {\n-    f: fn@(x: @mut &self/int);\n+    f: fn@(x: @mut &self/int)\n }\n \n fn to_same_lifetime(bi: invariant/&r) {"}, {"sha": "773e999b4b0076bda4d6fda3f70c0e036579ba6b", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct invariant {\n-    f: fn@() -> @mut &self/int;\n+    f: fn@() -> @mut &self/int\n }\n \n fn to_same_lifetime(bi: invariant/&r) {"}, {"sha": "9779bdf156c2b5ccdf9c64ebc3966557ec619db7", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct invariant {\n-    mut f: &int;\n+    mut f: &int\n }\n \n fn to_same_lifetime(bi: invariant/&r) {"}, {"sha": "2a9c45f249205904f14f29fca4410016b7bf4c13", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,17 +1,17 @@\n struct direct {\n-    f: &int;\n+    f: &int\n }\n \n struct indirect1 {\n-    g: fn@(direct);\n+    g: fn@(direct)\n }\n \n struct indirect2 {\n-    g: fn@(direct/&);\n+    g: fn@(direct/&)\n }\n \n struct indirect3 {\n-    g: fn@(direct/&self);\n+    g: fn@(direct/&self)\n }\n \n fn take_direct(p: direct) -> direct { p } //~ ERROR mismatched types"}, {"sha": "668d11f03b151c4219b44bcb976aa974b0fd34a4", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct closure_box {\n-    cl: &fn();\n+    cl: &fn()\n }\n \n fn box_it(x: &r/fn()) -> closure_box/&r {"}, {"sha": "a028e7c1e37646ec3545f9406cfd6a10787b1683", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -2,7 +2,7 @@\n // literal syntax.\n \n struct Foo {\n-    x: int;\n+    x: int,\n \n     drop {\n         io::println(\"Goodbye!\");"}, {"sha": "bad85d9b9c9ef9b87e23e48ae17a9be3b9b2c0f1", "filename": "src/test/run-pass/auto-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct Foo {\n-    x: int;\n+    x: int,\n }\n \n trait Stuff {"}, {"sha": "3a47a47aad6905319e853c59863722f76c8020fc", "filename": "src/test/run-pass/autoderef-and-borrow-method-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct Foo {\n-    x: int;\n+    x: int,\n }\n \n impl Foo {"}, {"sha": "96791a20f0dc778a155c119c9b2f82c4a92b8c45", "filename": "src/test/run-pass/common-fields-trivial.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fcommon-fields-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fcommon-fields-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommon-fields-trivial.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,7 +1,7 @@\n enum Foo {\n     struct {\n-        x: int;\n-        y: int;\n+        x: int,\n+        y: int,\n     }\n \n     Bar(int),"}, {"sha": "457c80e38a21c2067ebcdae4171aba7685c5d360", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n \n-struct foo { a: int; b: int; c: int; }\n+struct foo { a: int, b: int, c: int }\n \n impl foo : cmp::Eq {\n     pure fn eq(&&other: foo) -> bool {"}, {"sha": "3fd9826a392d7559d8b6339df56606691989dfbe", "filename": "src/test/run-pass/explicit-self-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,7 +1,7 @@\n // Test to make sure that explicit self params work inside closures\n \n struct Box {\n-    x: uint;\n+    x: uint\n }\n \n impl Box {"}, {"sha": "f72005a54f046ad2968b9839acef2e8b65e7737c", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -33,7 +33,7 @@ fn select_based_on_unit_circle<T>(\n \n \n struct thing {\n-    x: {mut a: @int};\n+    x: {mut a: @int}\n }\n \n fn thing(x: {mut a: @int}) -> thing {"}, {"sha": "ce6198c8d2440b47282a50a00f22e5de29c8ca9d", "filename": "src/test/run-pass/functional-struct-update.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,6 +1,6 @@\n struct Foo {\n-    x: int;\n-    y: int;\n+    x: int,\n+    y: int\n }\n \n fn main() {"}, {"sha": "e76a3088f81f754ba2b1aa1f018896ea0379b067", "filename": "src/test/run-pass/issue-2936.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fissue-2936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fissue-2936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2936.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -7,7 +7,7 @@ fn foo<T, U: bar<T>>(b: U) -> T {\n }\n \n struct cbar : bar<int> {\n-    x: int;\n+    x: int,\n     fn get_bar() -> int {\n         self.x\n     }"}, {"sha": "eb3eddd2681d02b186ff3c1ac0981020a6278d72", "filename": "src/test/run-pass/issue-3220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3220.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,4 +1,4 @@\n-struct thing { x: int; drop { } }\n+struct thing { x: int, drop { } }\n fn thing() -> thing {\n     thing {\n         x: 0"}, {"sha": "20096d7f6b72e602d26166cb48aa988f840b60ca", "filename": "src/test/run-pass/max-min-classes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -3,8 +3,8 @@ trait Product {\n }\n \n struct Foo {\n-    x: int;\n-    y: int;\n+    x: int,\n+    y: int,\n }\n \n impl Foo {"}, {"sha": "79eef40bfebe1cdc4511c2c9fd26295d81844885", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,6 +1,6 @@\n struct Point {\n-    x: int;\n-    y: int;\n+    x: int,\n+    y: int\n }\n \n impl Point : ops::Add<Point,Point> {"}, {"sha": "06b87794e5956599fe697bca05d977b72b21420e", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct dtor {\n-    x: @mut int;\n+    x: @mut int,\n \n     drop {\n         // abuse access to shared mutable state to write this code"}, {"sha": "f485148d79e9ad4d2dbda411e18fc629344b883e", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -65,7 +65,7 @@ macro_rules! select (\n \n // Types and protocols\n struct Buffer {\n-    foo: ();\n+    foo: (),\n \n     drop { }\n }"}, {"sha": "2e03c5f82c454db78713703381602b6e54a0115e", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct closure_box {\n-    cl: &fn();\n+    cl: &fn(),\n }\n \n fn box_it(x: &r/fn()) -> closure_box/&r {"}, {"sha": "17366224e29b8f02cc27627f11d42321ad288fe2", "filename": "src/test/run-pass/regions-infer-contravariance-due-to-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance-due-to-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance-due-to-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance-due-to-ret.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct boxed_int {\n-    f: &int;\n+    f: &int,\n }\n \n fn max(bi: &r/boxed_int, f: &r/int) -> int {"}, {"sha": "22e3781662414591ed89dca91de91923f2d52179", "filename": "src/test/run-pass/regions-infer-contravariance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct boxed_int {\n-    f: &int;\n+    f: &int,\n }\n \n fn get(bi: &r/boxed_int) -> &r/int {"}, {"sha": "61e04c4e77698e1ec3f2a010343b1c1293830491", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct closure_box {\n-    cl: &fn();\n+    cl: &fn(),\n }\n \n fn box_it(x: &r/fn()) -> closure_box/&r {"}, {"sha": "e182fa67cf001c467fa09f3275596a364042e290", "filename": "src/test/run-pass/struct-literal-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,5 +1,5 @@\n struct foo {\n-    x: ~str;\n+    x: ~str,\n     drop { #error[\"%s\", self.x]; }\n }\n "}, {"sha": "e5e26d0b442472149681995d429c44c7fe7e085e", "filename": "src/test/run-pass/struct-pattern-matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,6 +1,6 @@\n struct Foo {\n-    x: int;\n-    y: int;\n+    x: int,\n+    y: int,\n }\n \n fn main() {"}, {"sha": "3b6091056f768dd4bbed9d9e979fbe6a74e059a6", "filename": "src/test/run-pass/variant-structs-trivial.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eae8f1c19a051ab750383e479f979c32d4598a/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs?ref=f0eae8f1c19a051ab750383e479f979c32d4598a", "patch": "@@ -1,6 +1,6 @@\n enum Foo {\n-    Bar { x: int; },\n-    Baz { y: int; }\n+    Bar { x: int },\n+    Baz { y: int }\n }\n \n fn main() { }"}]}