{"sha": "b9eedea4b0368fd1f00f204db75109ff444fab5b", "node_id": "C_kwDOAAsO6NoAKGI5ZWVkZWE0YjAzNjhmZDFmMDBmMjA0ZGI3NTEwOWZmNDQ0ZmFiNWI", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2022-05-26T15:27:44Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-06-19T20:54:31Z"}, "message": "Panic if `dist` generates a symbolic link in a generated tarball\n\nThis avoids regressions in rustup-toolchain-install-master", "tree": {"sha": "8b7396be9a5c2c4a4198a16673027d63ee85ca09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b7396be9a5c2c4a4198a16673027d63ee85ca09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9eedea4b0368fd1f00f204db75109ff444fab5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9eedea4b0368fd1f00f204db75109ff444fab5b", "html_url": "https://github.com/rust-lang/rust/commit/b9eedea4b0368fd1f00f204db75109ff444fab5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9eedea4b0368fd1f00f204db75109ff444fab5b/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532be942ddf8f40d086e54d157453434b16e9647", "url": "https://api.github.com/repos/rust-lang/rust/commits/532be942ddf8f40d086e54d157453434b16e9647", "html_url": "https://github.com/rust-lang/rust/commit/532be942ddf8f40d086e54d157453434b16e9647"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "c5e4464ef55d0e12eecf01435c8521e66e52b82e", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9eedea4b0368fd1f00f204db75109ff444fab5b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b9eedea4b0368fd1f00f204db75109ff444fab5b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b9eedea4b0368fd1f00f204db75109ff444fab5b", "patch": "@@ -225,6 +225,7 @@ dependencies = [\n  \"serde_json\",\n  \"tar\",\n  \"toml\",\n+ \"walkdir\",\n  \"winapi\",\n  \"xz2\",\n ]"}, {"sha": "8c23491a6c474773c6692e1dc139745c4217948d", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9eedea4b0368fd1f00f204db75109ff444fab5b/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b9eedea4b0368fd1f00f204db75109ff444fab5b/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=b9eedea4b0368fd1f00f204db75109ff444fab5b", "patch": "@@ -48,6 +48,7 @@ ignore = \"0.4.10\"\n opener = \"0.5\"\n once_cell = \"1.7.2\"\n xz2 = \"0.1\"\n+walkdir = \"2\"\n \n [target.'cfg(windows)'.dependencies.winapi]\n version = \"0.3\""}, {"sha": "a528912fb81d9c15d168af815b41c3ce3c032df5", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9eedea4b0368fd1f00f204db75109ff444fab5b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9eedea4b0368fd1f00f204db75109ff444fab5b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=b9eedea4b0368fd1f00f204db75109ff444fab5b", "patch": "@@ -848,7 +848,12 @@ impl Step for PlainSourceTarball {\n \n     /// Creates the plain source tarball\n     fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n-        let tarball = Tarball::new(builder, \"rustc\", \"src\");\n+        // NOTE: This is a strange component in a lot of ways. It uses `src` as the target, which\n+        // means neither rustup nor rustup-toolchain-install-master know how to download it.\n+        // It also contains symbolic links, unlike other any other dist tarball.\n+        // It's used for distros building rustc from source in a pre-vendored environment.\n+        let mut tarball = Tarball::new(builder, \"rustc\", \"src\");\n+        tarball.permit_symlinks(true);\n         let plain_dst_src = tarball.image_dir();\n \n         // This is the set of root paths which will become part of the source package"}, {"sha": "7b0c029c1912106526871f29f17d034a99bdb354", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b9eedea4b0368fd1f00f204db75109ff444fab5b/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9eedea4b0368fd1f00f204db75109ff444fab5b/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=b9eedea4b0368fd1f00f204db75109ff444fab5b", "patch": "@@ -102,6 +102,7 @@ pub(crate) struct Tarball<'a> {\n \n     include_target_in_component_name: bool,\n     is_preview: bool,\n+    permit_symlinks: bool,\n }\n \n impl<'a> Tarball<'a> {\n@@ -141,6 +142,7 @@ impl<'a> Tarball<'a> {\n \n             include_target_in_component_name: false,\n             is_preview: false,\n+            permit_symlinks: false,\n         }\n     }\n \n@@ -160,6 +162,10 @@ impl<'a> Tarball<'a> {\n         self.is_preview = is;\n     }\n \n+    pub(crate) fn permit_symlinks(&mut self, flag: bool) {\n+        self.permit_symlinks = flag;\n+    }\n+\n     pub(crate) fn image_dir(&self) -> &Path {\n         t!(std::fs::create_dir_all(&self.image_dir));\n         &self.image_dir\n@@ -316,6 +322,18 @@ impl<'a> Tarball<'a> {\n         }\n         self.builder.run(&mut cmd);\n \n+        // Ensure there are no symbolic links in the tarball. In particular,\n+        // rustup-toolchain-install-master and most versions of Windows can't handle symbolic links.\n+        let decompressed_output = self.temp_dir.join(&package_name);\n+        if !self.builder.config.dry_run && !self.permit_symlinks {\n+            for entry in walkdir::WalkDir::new(&decompressed_output) {\n+                let entry = t!(entry);\n+                if entry.path_is_symlink() {\n+                    panic!(\"generated a symlink in a tarball: {}\", entry.path().display());\n+                }\n+            }\n+        }\n+\n         // Use either the first compression format defined, or \"gz\" as the default.\n         let ext = self\n             .builder\n@@ -328,7 +346,7 @@ impl<'a> Tarball<'a> {\n \n         GeneratedTarball {\n             path: crate::dist::distdir(self.builder).join(format!(\"{}.tar.{}\", package_name, ext)),\n-            decompressed_output: self.temp_dir.join(package_name),\n+            decompressed_output,\n             work: self.temp_dir,\n         }\n     }"}]}