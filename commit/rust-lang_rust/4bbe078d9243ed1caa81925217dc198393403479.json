{"sha": "4bbe078d9243ed1caa81925217dc198393403479", "node_id": "C_kwDOAAsO6NoAKDRiYmUwNzhkOTI0M2VkMWNhYTgxOTI1MjE3ZGMxOTgzOTM0MDM0Nzk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-13T10:30:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-23T07:59:24Z"}, "message": "Drop vis in Item.", "tree": {"sha": "bc75605bd25f7262dcbc6c6cc9c14378c2ce3368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc75605bd25f7262dcbc6c6cc9c14378c2ce3368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bbe078d9243ed1caa81925217dc198393403479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbe078d9243ed1caa81925217dc198393403479", "html_url": "https://github.com/rust-lang/rust/commit/4bbe078d9243ed1caa81925217dc198393403479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bbe078d9243ed1caa81925217dc198393403479/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6e3124d2c68908450dca5214cb2f513d02c222c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e3124d2c68908450dca5214cb2f513d02c222c", "html_url": "https://github.com/rust-lang/rust/commit/a6e3124d2c68908450dca5214cb2f513d02c222c"}], "stats": {"total": 220, "additions": 54, "deletions": 166}, "files": [{"sha": "29353d47b87e89ad36a2fed4666141b447332117", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 10, "deletions": 90, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::utils::NtToTokenstream;\n use rustc_session::Session;\n-use rustc_span::source_map::{respan, DesugaringKind};\n+use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n@@ -230,15 +230,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_item(&mut self, i: &Item) -> &'hir hir::Item<'hir> {\n         let mut ident = i.ident;\n-        let mut vis = self.lower_visibility(&i.vis);\n+        let vis_span = self.lower_span(i.vis.span);\n         let hir_id = self.lower_node_id(i.id);\n         let attrs = self.lower_attrs(hir_id, &i.attrs);\n-        let kind = self.lower_item_kind(i.span, i.id, hir_id, &mut ident, attrs, &mut vis, &i.kind);\n+        let kind = self.lower_item_kind(i.span, i.id, hir_id, &mut ident, attrs, vis_span, &i.kind);\n         let item = hir::Item {\n             def_id: hir_id.expect_owner(),\n             ident: self.lower_ident(ident),\n             kind,\n-            vis,\n+            vis_span,\n             span: self.lower_span(i.span),\n         };\n         self.arena.alloc(item)\n@@ -251,7 +251,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir_id: hir::HirId,\n         ident: &mut Ident,\n         attrs: Option<&'hir [Attribute]>,\n-        vis: &mut hir::Visibility<'hir>,\n+        vis_span: Span,\n         i: &ItemKind,\n     ) -> hir::ItemKind<'hir> {\n         match *i {\n@@ -260,7 +260,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // Start with an empty prefix.\n                 let prefix = Path { segments: vec![], span: use_tree.span, tokens: None };\n \n-                self.lower_use_tree(use_tree, &prefix, id, vis, ident, attrs)\n+                self.lower_use_tree(use_tree, &prefix, id, vis_span, ident, attrs)\n             }\n             ItemKind::Static(ref t, m, ref e) => {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n@@ -527,12 +527,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         tree: &UseTree,\n         prefix: &Path,\n         id: NodeId,\n-        vis: &mut hir::Visibility<'hir>,\n+        vis_span: Span,\n         ident: &mut Ident,\n         attrs: Option<&'hir [Attribute]>,\n     ) -> hir::ItemKind<'hir> {\n         debug!(\"lower_use_tree(tree={:?})\", tree);\n-        debug!(\"lower_use_tree: vis = {:?}\", vis);\n \n         let path = &tree.prefix;\n         let segments = prefix.segments.iter().chain(path.segments.iter()).cloned().collect();\n@@ -586,7 +585,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         let res = this.lower_res(res);\n                         let path = this.lower_path_extra(res, &path, ParamMode::Explicit);\n                         let kind = hir::ItemKind::Use(path, hir::UseKind::Single);\n-                        let vis = this.rebuild_vis(&vis);\n                         if let Some(attrs) = attrs {\n                             this.attrs.insert(hir::ItemLocalId::new(0), attrs);\n                         }\n@@ -595,7 +593,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             def_id: new_id,\n                             ident: this.lower_ident(ident),\n                             kind,\n-                            vis,\n+                            vis_span,\n                             span: this.lower_span(span),\n                         };\n                         hir::OwnerNode::Item(this.arena.alloc(item))\n@@ -657,11 +655,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     // own its own names, we have to adjust the owner before\n                     // lowering the rest of the import.\n                     self.with_hir_id_owner(id, |this| {\n-                        let mut vis = this.rebuild_vis(&vis);\n                         let mut ident = *ident;\n \n                         let kind =\n-                            this.lower_use_tree(use_tree, &prefix, id, &mut vis, &mut ident, attrs);\n+                            this.lower_use_tree(use_tree, &prefix, id, vis_span, &mut ident, attrs);\n                         if let Some(attrs) = attrs {\n                             this.attrs.insert(hir::ItemLocalId::new(0), attrs);\n                         }\n@@ -670,37 +667,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             def_id: new_hir_id,\n                             ident: this.lower_ident(ident),\n                             kind,\n-                            vis,\n+                            vis_span,\n                             span: this.lower_span(use_tree.span),\n                         };\n                         hir::OwnerNode::Item(this.arena.alloc(item))\n                     });\n                 }\n \n-                // Subtle and a bit hacky: we lower the privacy level\n-                // of the list stem to \"private\" most of the time, but\n-                // not for \"restricted\" paths. The key thing is that\n-                // we don't want it to stay as `pub` (with no caveats)\n-                // because that affects rustdoc and also the lints\n-                // about `pub` items. But we can't *always* make it\n-                // private -- particularly not for restricted paths --\n-                // because it contains node-ids that would then be\n-                // unused, failing the check that HirIds are \"densely\n-                // assigned\".\n-                match vis.node {\n-                    hir::VisibilityKind::Public\n-                    | hir::VisibilityKind::Crate(_)\n-                    | hir::VisibilityKind::Inherited => {\n-                        *vis = respan(\n-                            self.lower_span(prefix.span.shrink_to_lo()),\n-                            hir::VisibilityKind::Inherited,\n-                        );\n-                    }\n-                    hir::VisibilityKind::Restricted { .. } => {\n-                        // Do nothing here, as described in the comment on the match.\n-                    }\n-                }\n-\n                 let res = self.expect_full_res_from_use(id).next().unwrap_or(Res::Err);\n                 let res = self.lower_res(res);\n                 let path = self.lower_path_extra(res, &prefix, ParamMode::Explicit);\n@@ -709,37 +682,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    /// Paths like the visibility path in `pub(super) use foo::{bar, baz}` are repeated\n-    /// many times in the HIR tree; for each occurrence, we need to assign distinct\n-    /// `NodeId`s. (See, e.g., #56128.)\n-    fn rebuild_use_path(&mut self, path: &hir::Path<'hir>) -> &'hir hir::Path<'hir> {\n-        debug!(\"rebuild_use_path(path = {:?})\", path);\n-        let segments =\n-            self.arena.alloc_from_iter(path.segments.iter().map(|seg| hir::PathSegment {\n-                ident: seg.ident,\n-                hir_id: seg.hir_id.map(|_| self.next_id()),\n-                res: seg.res,\n-                args: None,\n-                infer_args: seg.infer_args,\n-            }));\n-        self.arena.alloc(hir::Path { span: path.span, res: path.res, segments })\n-    }\n-\n-    fn rebuild_vis(&mut self, vis: &hir::Visibility<'hir>) -> hir::Visibility<'hir> {\n-        let vis_kind = match vis.node {\n-            hir::VisibilityKind::Public => hir::VisibilityKind::Public,\n-            hir::VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n-            hir::VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n-            hir::VisibilityKind::Restricted { ref path, hir_id: _ } => {\n-                hir::VisibilityKind::Restricted {\n-                    path: self.rebuild_use_path(path),\n-                    hir_id: self.next_id(),\n-                }\n-            }\n-        };\n-        respan(self.lower_span(vis.span), vis_kind)\n-    }\n-\n     fn lower_foreign_item(&mut self, i: &ForeignItem) -> &'hir hir::ForeignItem<'hir> {\n         let hir_id = self.lower_node_id(i.id);\n         let def_id = hir_id.expect_owner();\n@@ -1044,28 +986,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    /// If an `explicit_owner` is given, this method allocates the `HirId` in\n-    /// the address space of that item instead of the item currently being\n-    /// lowered. This can happen during `lower_impl_item_ref()` where we need to\n-    /// lower a `Visibility` value although we haven't lowered the owning\n-    /// `ImplItem` in question yet.\n-    fn lower_visibility(&mut self, v: &Visibility) -> hir::Visibility<'hir> {\n-        let node = match v.kind {\n-            VisibilityKind::Public => hir::VisibilityKind::Public,\n-            VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n-            VisibilityKind::Restricted { ref path, id } => {\n-                debug!(\"lower_visibility: restricted path id = {:?}\", id);\n-                let lowered_id = self.lower_node_id(id);\n-                hir::VisibilityKind::Restricted {\n-                    path: self.lower_path(id, path, ParamMode::Explicit),\n-                    hir_id: lowered_id,\n-                }\n-            }\n-            VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n-        };\n-        respan(self.lower_span(v.span), node)\n-    }\n-\n     fn lower_defaultness(\n         &self,\n         d: Defaultness,"}, {"sha": "b15f299b5f2cb9e5da02d6131f0a44d80d18a9c0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -61,7 +61,7 @@ use rustc_session::parse::feature_err;\n use rustc_session::utils::{FlattenNonterminals, NtToTokenstream};\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, MacroKind};\n-use rustc_span::source_map::{respan, DesugaringKind};\n+use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -1530,7 +1530,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             def_id: opaque_ty_id,\n             ident: Ident::empty(),\n             kind: opaque_ty_item_kind,\n-            vis: respan(self.lower_span(span.shrink_to_lo()), hir::VisibilityKind::Inherited),\n+            vis_span: self.lower_span(span.shrink_to_lo()),\n             span: self.lower_span(opaque_ty_span),\n         };\n         hir::OwnerNode::Item(self.arena.alloc(opaque_ty_item))"}, {"sha": "ef56093bed8d9f6dbe0979d47013fe03ae65290c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -4,8 +4,8 @@ crate use crate::hir_id::{HirId, ItemLocalId};\n use crate::intravisit::FnKind;\n use crate::LangItem;\n \n+use rustc_ast as ast;\n use rustc_ast::util::parser::ExprPrecedence;\n-use rustc_ast::{self as ast, CrateSugar};\n use rustc_ast::{Attribute, FloatTy, IntTy, Label, LitKind, TraitObjectSyntax, UintTy};\n pub use rustc_ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::{CaptureBy, Movability, Mutability};\n@@ -2645,29 +2645,6 @@ pub struct PolyTraitRef<'hir> {\n     pub span: Span,\n }\n \n-pub type Visibility<'hir> = Spanned<VisibilityKind<'hir>>;\n-\n-#[derive(Copy, Clone, Debug, HashStable_Generic)]\n-pub enum VisibilityKind<'hir> {\n-    Public,\n-    Crate(CrateSugar),\n-    Restricted { path: &'hir Path<'hir>, hir_id: HirId },\n-    Inherited,\n-}\n-\n-impl VisibilityKind<'_> {\n-    pub fn is_pub(&self) -> bool {\n-        matches!(*self, VisibilityKind::Public)\n-    }\n-\n-    pub fn is_pub_restricted(&self) -> bool {\n-        match *self {\n-            VisibilityKind::Public | VisibilityKind::Inherited => false,\n-            VisibilityKind::Crate(..) | VisibilityKind::Restricted { .. } => true,\n-        }\n-    }\n-}\n-\n #[derive(Debug, HashStable_Generic)]\n pub struct FieldDef<'hir> {\n     pub span: Span,\n@@ -2744,8 +2721,8 @@ pub struct Item<'hir> {\n     pub ident: Ident,\n     pub def_id: LocalDefId,\n     pub kind: ItemKind<'hir>,\n-    pub vis: Visibility<'hir>,\n     pub span: Span,\n+    pub vis_span: Span,\n }\n \n impl Item<'_> {\n@@ -3348,7 +3325,7 @@ mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::QPath<'static>, 24);\n     rustc_data_structures::static_assert_size!(super::Ty<'static>, 72);\n \n-    rustc_data_structures::static_assert_size!(super::Item<'static>, 184);\n+    rustc_data_structures::static_assert_size!(super::Item<'static>, 160);\n     rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 128);\n     rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 120);\n     rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 112);"}, {"sha": "7facb8e1b584d5f640540d4b9eb7f427a576c2ed", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -36,8 +36,7 @@ use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, Gate\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LocalDefIdSet, CRATE_DEF_ID};\n-use rustc_hir::{ForeignItemKind, GenericParamKind, PatKind};\n-use rustc_hir::{HirId, Node};\n+use rustc_hir::{ForeignItemKind, GenericParamKind, HirId, PatKind};\n use rustc_index::vec::Idx;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf};\n@@ -600,7 +599,11 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         match it.kind {\n             hir::ItemKind::Trait(.., trait_item_refs) => {\n                 // Issue #11592: traits are always considered exported, even when private.\n-                if let hir::VisibilityKind::Inherited = it.vis.node {\n+                if cx.tcx.visibility(it.def_id)\n+                    == ty::Visibility::Restricted(\n+                        cx.tcx.parent_module_from_def_id(it.def_id).to_def_id(),\n+                    )\n+                {\n                     self.private_traits.insert(it.hir_id());\n                     for trait_item_ref in trait_item_refs {\n                         self.private_traits.insert(trait_item_ref.id.hir_id());\n@@ -613,15 +616,17 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n                 // reported for missing docs.\n                 let real_trait = trait_ref.path.res.def_id();\n                 let Some(def_id) = real_trait.as_local() else { return };\n-                let Some(Node::Item(item)) = cx.tcx.hir().find_by_def_id(def_id) else { return };\n-                if let hir::VisibilityKind::Inherited = item.vis.node {\n+                if cx.tcx.visibility(def_id)\n+                    == ty::Visibility::Restricted(\n+                        cx.tcx.parent_module_from_def_id(it.def_id).to_def_id(),\n+                    )\n+                {\n                     for impl_item_ref in items {\n                         self.private_traits.insert(impl_item_ref.id.hir_id());\n                     }\n                 }\n                 return;\n             }\n-\n             hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::Fn(..)\n             | hir::ItemKind::Macro(..)\n@@ -1420,7 +1425,7 @@ impl UnreachablePub {\n impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {\n         if cx.tcx.visibility(item.def_id).is_public() {\n-            self.perform_lint(cx, \"item\", item.def_id, item.vis.span, true);\n+            self.perform_lint(cx, \"item\", item.def_id, item.vis_span, true);\n         }\n     }\n "}, {"sha": "94e1e6e598767d1c128c3f91699df151199e6128", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -36,7 +36,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, CRATE_DEF_ID};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap};\n use rustc_hir::Node;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n@@ -317,22 +317,6 @@ impl<'tcx> DefIdTree for TyCtxt<'tcx> {\n }\n \n impl Visibility {\n-    pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {\n-        match visibility.node {\n-            hir::VisibilityKind::Public => Visibility::Public,\n-            hir::VisibilityKind::Crate(_) => Visibility::Restricted(CRATE_DEF_ID.to_def_id()),\n-            hir::VisibilityKind::Restricted { ref path, .. } => match path.res {\n-                // If there is no resolution, `resolve` will have already reported an error, so\n-                // assume that the visibility is public to avoid reporting more privacy errors.\n-                Res::Err => Visibility::Public,\n-                def => Visibility::Restricted(def.def_id()),\n-            },\n-            hir::VisibilityKind::Inherited => {\n-                Visibility::Restricted(tcx.parent_module(id).to_def_id())\n-            }\n-        }\n-    }\n-\n     /// Returns `true` if an item with this visibility is accessible from the given block.\n     pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {\n         let restriction = match self {"}, {"sha": "1da802961fe6dad9972deadb484f5fbefc581b68", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -291,7 +291,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         self.pub_visibility = false;\n         match node {\n             Node::Item(item) => {\n-                self.pub_visibility = item.vis.node.is_pub();\n+                self.pub_visibility = self.tcx.visibility(item.def_id).is_public();\n \n                 match item.kind {\n                     hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {"}, {"sha": "2501d182a208de635441416141d44869a112c681", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -1341,7 +1341,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n             // .. and it corresponds to a private type in the AST (this returns\n             // `None` for type parameters).\n             match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {\n-                Some(Node::Item(item)) => !item.vis.node.is_pub(),\n+                Some(Node::Item(_)) => !self.tcx.visibility(did).is_public(),\n                 Some(_) | None => false,\n             }\n         } else {\n@@ -1975,19 +1975,16 @@ fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {\n             match tcx.hir().get(hir_id) {\n                 // Unique types created for closures participate in type privacy checking.\n                 // They have visibilities inherited from the module they are defined in.\n-                Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {\n-                    ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())\n-                }\n-                // - AST lowering may clone `use` items and the clones don't\n+                Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. })\n+                // - AST lowering creates dummy `use` items which don't\n                 //   get their entries in the resolver's visibility table.\n                 // - AST lowering also creates opaque type items with inherited visibilities.\n                 //   Visibility on them should have no effect, but to avoid the visibility\n                 //   query failing on some items, we provide it for opaque types as well.\n-                Node::Item(hir::Item {\n-                    vis,\n+                | Node::Item(hir::Item {\n                     kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),\n                     ..\n-                }) => ty::Visibility::from_hir(vis, hir_id, tcx),\n+                }) => ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id()),\n                 // Visibilities of trait impl items are inherited from their traits\n                 // and are not filled in resolve.\n                 Node::ImplItem(impl_item) => {"}, {"sha": "8dade5f87ee18710b83575d966e0293c3f86b3f5", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -564,6 +564,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     additional_ids: (id1, id2),\n                 };\n \n+                self.r.visibilities.insert(self.r.local_def_id(id), vis);\n                 self.add_import(\n                     module_path,\n                     kind,\n@@ -580,6 +581,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     is_prelude: self.r.session.contains_name(&item.attrs, sym::prelude_import),\n                     max_vis: Cell::new(ty::Visibility::Invisible),\n                 };\n+                self.r.visibilities.insert(self.r.local_def_id(id), vis);\n                 self.add_import(prefix, kind, use_tree.span, id, item, root_span, item.id, vis);\n             }\n             ast::UseTreeKind::Nested(ref items) => {"}, {"sha": "d52886a09bd958d5485dd8764ca75b0e9cd17f84", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -18,8 +18,11 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n \n     for id in tcx.hir().items() {\n         if matches!(tcx.hir().def_kind(id.def_id), DefKind::Use) {\n+            if tcx.visibility(id.def_id).is_public() {\n+                continue;\n+            }\n             let item = tcx.hir().item(id);\n-            if item.vis.node.is_pub() || item.span.is_dummy() {\n+            if item.span.is_dummy() {\n                 continue;\n             }\n             if let hir::ItemKind::Use(path, _) = item.kind {\n@@ -176,7 +179,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n                 Some(orig_name) => format!(\"use {} as {};\", orig_name, item.ident.name),\n                 None => format!(\"use {};\", item.ident.name),\n             };\n-            let vis = tcx.sess.source_map().span_to_snippet(item.vis.span).unwrap_or_default();\n+            let vis = tcx.sess.source_map().span_to_snippet(item.vis_span).unwrap_or_default();\n             let add_vis = |to| if vis.is_empty() { to } else { format!(\"{} {}\", vis, to) };\n             lint.build(\"`extern crate` is not idiomatic in the new edition\")\n                 .span_suggestion_short("}, {"sha": "346d03ca5568f0aaf7c3593a45f721999a758ea3", "filename": "src/tools/clippy/clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -260,7 +260,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n                     }\n                     // The `module_name_repetitions` lint should only trigger if the item has the module in its\n                     // name. Having the same name is accepted.\n-                    if item.vis.node.is_pub() && item_camel.len() > mod_camel.len() {\n+                    if cx.tcx.visibility(item.def_id).is_public() && item_camel.len() > mod_camel.len() {\n                         let matching = count_match_start(mod_camel, &item_camel);\n                         let rmatching = count_match_end(mod_camel, &item_camel);\n                         let nchars = mod_camel.chars().count();"}, {"sha": "e2e2400f8e267ae8e398778ed0de72ba17b1bdbb", "filename": "src/tools/clippy/clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -1,8 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use rustc_errors::Applicability;\n-use rustc_hir::{Item, ItemKind, VisibilityKind};\n+use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::CRATE_DEF_ID;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -41,7 +43,7 @@ impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n \n impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if let VisibilityKind::Crate { .. } = item.vis.node {\n+        if cx.tcx.visibility(item.def_id) == ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id()) {\n             if !cx.access_levels.is_exported(item.def_id) && self.is_exported.last() == Some(&false) {\n                 let span = item.span.with_hi(item.ident.span.hi());\n                 let descr = cx.tcx.def_kind(item.def_id).descr(item.def_id.to_def_id());\n@@ -52,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n                     &format!(\"pub(crate) {} inside private module\", descr),\n                     |diag| {\n                         diag.span_suggestion(\n-                            item.vis.span,\n+                            item.vis_span,\n                             \"consider using\",\n                             \"pub\".to_string(),\n                             Applicability::MachineApplicable,"}, {"sha": "e4abfd07866a2db615b8c2a012d3999328c66e2d", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -357,14 +357,10 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n     let did = item.def_id;\n     println!(\"item `{}`\", item.ident.name);\n-    match item.vis.node {\n-        hir::VisibilityKind::Public => println!(\"public\"),\n-        hir::VisibilityKind::Crate(_) => println!(\"visible crate wide\"),\n-        hir::VisibilityKind::Restricted { path, .. } => println!(\n-            \"visible in module `{}`\",\n-            rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(path, false))\n-        ),\n-        hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n+    match cx.tcx.visibility(item.def_id) {\n+        ty::Visibility::Public => println!(\"public\"),\n+        ty::Visibility::Restricted(def_id) => println!(\"visible in module `{}`\", cx.tcx.def_path_str(def_id)),\n+        ty::Visibility::Invisible => println!(\"invisible\"),\n     }\n     match item.kind {\n         hir::ItemKind::ExternCrate(ref _renamed_from) => {"}, {"sha": "2f74eaf3cf5c319a9fff3f2bc0e06d06e24da1e3", "filename": "src/tools/clippy/clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe078d9243ed1caa81925217dc198393403479/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe078d9243ed1caa81925217dc198393403479/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=4bbe078d9243ed1caa81925217dc198393403479", "patch": "@@ -8,6 +8,7 @@ use rustc_hir::{\n     Item, ItemKind, PathSegment, UseKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::kw;\n use rustc_span::{sym, BytePos};\n@@ -115,7 +116,8 @@ impl LateLintPass<'_> for WildcardImports {\n         if is_test_module_or_function(cx.tcx, item) {\n             self.test_modules_deep = self.test_modules_deep.saturating_add(1);\n         }\n-        if item.vis.node.is_pub() || item.vis.node.is_pub_restricted() {\n+        let module = cx.tcx.parent_module_from_def_id(item.def_id);\n+        if cx.tcx.visibility(item.def_id) != ty::Visibility::Restricted(module.to_def_id()) {\n             return;\n         }\n         if_chain! {"}]}