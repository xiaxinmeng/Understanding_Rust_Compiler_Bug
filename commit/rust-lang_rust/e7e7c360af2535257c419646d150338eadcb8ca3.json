{"sha": "e7e7c360af2535257c419646d150338eadcb8ca3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZTdjMzYwYWYyNTM1MjU3YzQxOTY0NmQxNTAzMzhlYWRjYjhjYTM=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-20T16:08:37Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-20T16:08:37Z"}, "message": "Add unreachable attribute to Err branch", "tree": {"sha": "ad3cbe50a6e9629b454fee9f1d4de403c247200f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad3cbe50a6e9629b454fee9f1d4de403c247200f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e7c360af2535257c419646d150338eadcb8ca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e7c360af2535257c419646d150338eadcb8ca3", "html_url": "https://github.com/rust-lang/rust/commit/e7e7c360af2535257c419646d150338eadcb8ca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e7c360af2535257c419646d150338eadcb8ca3/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c07aa3383494fa8e6dce17e08ce827b07359f8b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c07aa3383494fa8e6dce17e08ce827b07359f8b9", "html_url": "https://github.com/rust-lang/rust/commit/c07aa3383494fa8e6dce17e08ce827b07359f8b9"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "edfd5fbfa621c3b649123bcf21b76ce2c3ac0bf3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e7e7c360af2535257c419646d150338eadcb8ca3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e7c360af2535257c419646d150338eadcb8ca3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e7e7c360af2535257c419646d150338eadcb8ca3", "patch": "@@ -1854,28 +1854,29 @@ impl<'a> LoweringContext<'a> {\n                         P(self.expr_call(e.span, path, hir_vec![sub_expr]))\n                     };\n \n+                    // #[allow(unreachable_code)]\n+                    let attr = {\n+                        // allow(unreachable_code)\n+                        let allow = {\n+                            let allow_ident = self.str_to_ident(\"allow\");\n+                            let uc_ident = self.str_to_ident(\"unreachable_code\");\n+                            let uc_meta_item = attr::mk_spanned_word_item(e.span, uc_ident);\n+                            let uc_nested = NestedMetaItemKind::MetaItem(uc_meta_item);\n+                            let uc_spanned = respan(e.span, uc_nested);\n+                            attr::mk_spanned_list_item(e.span, allow_ident, vec![uc_spanned])\n+                        };\n+                        attr::mk_spanned_attr_outer(e.span, attr::mk_attr_id(), allow)\n+                    };\n+                    let attrs = vec![attr];\n+\n                     // Ok(val) => { #[allow(unreachable_code)] val }\n                     let ok_arm = {\n                         let val_ident = self.str_to_ident(\"val\");\n                         let val_pat = self.pat_ident(e.span, val_ident);\n-                        // #[allow(unreachable_code)]\n-                        let val_attr = {\n-                            // allow(unreachable_code)\n-                            let allow = {\n-                                let allow_ident = self.str_to_ident(\"allow\");\n-                                let uc_ident = self.str_to_ident(\"unreachable_code\");\n-                                let uc_meta_item = attr::mk_spanned_word_item(e.span, uc_ident);\n-                                let uc_nested = NestedMetaItemKind::MetaItem(uc_meta_item);\n-                                let uc_spanned = respan(e.span, uc_nested);\n-                                attr::mk_spanned_list_item(e.span, allow_ident, vec![uc_spanned])\n-                            };\n-                            attr::mk_spanned_attr_outer(e.span, attr::mk_attr_id(), allow)\n-                        };\n-                        let attrs = From::from(vec![val_attr]);\n                         let val_expr = P(self.expr_ident_with_attrs(e.span,\n                                                                     val_ident,\n                                                                     val_pat.id,\n-                                                                    attrs));\n+                                                                    From::from(attrs.clone())));\n                         let ok_pat = self.pat_ok(e.span, val_pat);\n \n                         self.arm(hir_vec![ok_pat], val_expr)\n@@ -1901,7 +1902,7 @@ impl<'a> LoweringContext<'a> {\n \n                         let ret_expr = P(self.expr(e.span,\n                                                    hir::Expr_::ExprRet(Some(from_err_expr)),\n-                                                                       ThinVec::new()));\n+                                                                       From::from(attrs)));\n \n                         let err_pat = self.pat_err(e.span, err_local);\n                         self.arm(hir_vec![err_pat], ret_expr)"}, {"sha": "f4817ba33b518f45dd44d62b5065819f78742f1f", "filename": "src/test/compile-fail/unreachable-try-pattern.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e7e7c360af2535257c419646d150338eadcb8ca3/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e7c360af2535257c419646d150338eadcb8ca3/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs?ref=e7e7c360af2535257c419646d150338eadcb8ca3", "patch": "@@ -12,6 +12,14 @@\n #![deny(unreachable_code)]\n #![deny(unreachable_patterns)]\n \n+enum Void {}\n+\n+impl From<Void> for i32 {\n+    fn from(v: Void) -> i32 {\n+        match v {}\n+    }\n+}\n+\n fn bar(x: Result<!, i32>) -> Result<u32, i32> {\n     x?\n }\n@@ -23,8 +31,20 @@ fn foo(x: Result<!, i32>) -> Result<u32, i32> {\n     Ok(y)\n }\n \n+fn qux(x: Result<u32, Void>) -> Result<u32, i32> {\n+    Ok(x?)\n+}\n+\n+fn vom(x: Result<u32, Void>) -> Result<u32, i32> {\n+    let y = (match x { Ok(n) => Ok(n), Err(e) => Err(e) })?;\n+    //~^ ERROR unreachable pattern\n+    Ok(y)\n+}\n+\n fn main() {\n     let _ = bar(Err(123));\n     let _ = foo(Err(123));\n+    let _ = qux(Ok(123));\n+    let _ = vom(Ok(123));\n }\n "}]}