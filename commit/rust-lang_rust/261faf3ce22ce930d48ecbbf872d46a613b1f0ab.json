{"sha": "261faf3ce22ce930d48ecbbf872d46a613b1f0ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MWZhZjNjZTIyY2U5MzBkNDhlY2JiZjg3MmQ0NmE2MTNiMWYwYWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-15T16:14:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-25T09:49:43Z"}, "message": "machine hooks for stack push and pop, frame machine data", "tree": {"sha": "3a17816fb4027a5e6a0cfe51bf7e8c047e7bb0ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a17816fb4027a5e6a0cfe51bf7e8c047e7bb0ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/261faf3ce22ce930d48ecbbf872d46a613b1f0ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/261faf3ce22ce930d48ecbbf872d46a613b1f0ab", "html_url": "https://github.com/rust-lang/rust/commit/261faf3ce22ce930d48ecbbf872d46a613b1f0ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/261faf3ce22ce930d48ecbbf872d46a613b1f0ab/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ed3b79562fdbcbb1ca073cb48a6fea1e23d51a", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ed3b79562fdbcbb1ca073cb48a6fea1e23d51a", "html_url": "https://github.com/rust-lang/rust/commit/53ed3b79562fdbcbb1ca073cb48a6fea1e23d51a"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "291b5c170ef365c328f82240f0e8cada7696a45e", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/261faf3ce22ce930d48ecbbf872d46a613b1f0ab/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261faf3ce22ce930d48ecbbf872d46a613b1f0ab/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=261faf3ce22ce930d48ecbbf872d46a613b1f0ab", "patch": "@@ -65,6 +65,7 @@ pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n         return_place: None,\n         return_to_block: StackPopCleanup::Goto(None), // never pop\n         stmt: 0,\n+        extra: (),\n     });\n     Ok(ecx)\n }\n@@ -353,9 +354,11 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n     for CompileTimeInterpreter<'a, 'mir, 'tcx>\n {\n     type MemoryKinds = !;\n+    type PointerTag = ();\n+\n+    type FrameExtra = ();\n     type MemoryExtra = ();\n     type AllocExtra = ();\n-    type PointerTag = ();\n \n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n \n@@ -490,6 +493,22 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n     ) -> EvalResult<'tcx, Pointer> {\n         Ok(ptr)\n     }\n+\n+    #[inline(always)]\n+    fn stack_push(\n+        _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+    ) -> EvalResult<'tcx> {\n+        Ok(())\n+    }\n+\n+    /// Called immediately before a stack frame gets popped\n+    #[inline(always)]\n+    fn stack_pop(\n+        _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        _extra: (),\n+    ) -> EvalResult<'tcx> {\n+        Ok(())\n+    }\n }\n \n /// Project to a field of a (variant of a) const"}, {"sha": "d36d530fe78b24ecdaeeddfe23c626373545e3ec", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/261faf3ce22ce930d48ecbbf872d46a613b1f0ab/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261faf3ce22ce930d48ecbbf872d46a613b1f0ab/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=261faf3ce22ce930d48ecbbf872d46a613b1f0ab", "patch": "@@ -49,15 +49,15 @@ pub struct EvalContext<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'a, 'mir, 'tcx>> {\n     pub(crate) memory: Memory<'a, 'mir, 'tcx, M>,\n \n     /// The virtual call stack.\n-    pub(crate) stack: Vec<Frame<'mir, 'tcx, M::PointerTag>>,\n+    pub(crate) stack: Vec<Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>>,\n \n     /// A cache for deduplicating vtables\n     pub(super) vtables: FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), AllocId>,\n }\n \n /// A stack frame.\n #[derive(Clone)]\n-pub struct Frame<'mir, 'tcx: 'mir, Tag=()> {\n+pub struct Frame<'mir, 'tcx: 'mir, Tag=(), Extra=()> {\n     ////////////////////////////////////////////////////////////////////////////////\n     // Function and callsite information\n     ////////////////////////////////////////////////////////////////////////////////\n@@ -96,6 +96,9 @@ pub struct Frame<'mir, 'tcx: 'mir, Tag=()> {\n \n     /// The index of the currently evaluated statement.\n     pub stmt: usize,\n+\n+    /// Extra data for the machine\n+    pub extra: Extra,\n }\n \n #[derive(Clone, Debug, Eq, PartialEq, Hash)]\n@@ -196,7 +199,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n     }\n \n     #[inline(always)]\n-    pub fn stack(&self) -> &[Frame<'mir, 'tcx, M::PointerTag>] {\n+    pub fn stack(&self) -> &[Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>] {\n         &self.stack\n     }\n \n@@ -207,12 +210,12 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n     }\n \n     #[inline(always)]\n-    pub fn frame(&self) -> &Frame<'mir, 'tcx, M::PointerTag> {\n+    pub fn frame(&self) -> &Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra> {\n         self.stack.last().expect(\"no call frames exist\")\n     }\n \n     #[inline(always)]\n-    pub fn frame_mut(&mut self) -> &mut Frame<'mir, 'tcx, M::PointerTag> {\n+    pub fn frame_mut(&mut self) -> &mut Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra> {\n         self.stack.last_mut().expect(\"no call frames exist\")\n     }\n \n@@ -294,7 +297,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n \n     pub fn layout_of_local(\n         &self,\n-        frame: &Frame<'mir, 'tcx, M::PointerTag>,\n+        frame: &Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,\n         local: mir::Local\n     ) -> EvalResult<'tcx, TyLayout<'tcx>> {\n         let local_ty = frame.mir.local_decls[local].ty;\n@@ -424,6 +427,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         ::log_settings::settings().indentation += 1;\n \n         // first push a stack frame so we have access to the local substs\n+        let extra = M::stack_push(self)?;\n         self.stack.push(Frame {\n             mir,\n             block: mir::START_BLOCK,\n@@ -435,6 +439,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             span,\n             instance,\n             stmt: 0,\n+            extra,\n         });\n \n         // don't allocate at all for trivial constants\n@@ -504,6 +509,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         let frame = self.stack.pop().expect(\n             \"tried to pop a stack frame, but there were none\",\n         );\n+        M::stack_pop(self, frame.extra)?;\n         // Abort early if we do not want to clean up: We also avoid validation in that case,\n         // because this is CTFE and the final value will be thoroughly validated anyway.\n         match frame.return_to_block {"}, {"sha": "2c78807df452fd972d94b048b2b739e9fb137507", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/261faf3ce22ce930d48ecbbf872d46a613b1f0ab/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261faf3ce22ce930d48ecbbf872d46a613b1f0ab/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=261faf3ce22ce930d48ecbbf872d46a613b1f0ab", "patch": "@@ -77,6 +77,9 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     /// The `default()` is used for pointers to consts, statics, vtables and functions.\n     type PointerTag: ::std::fmt::Debug + Default + Copy + Eq + Hash + 'static;\n \n+    /// Extra data stored in every call frame.\n+    type FrameExtra;\n+\n     /// Extra data stored in memory.  A reference to this is available when `AllocExtra`\n     /// gets initialized, so you can e.g. have an `Rc` here if there is global state you\n     /// need access to in the `AllocExtra` hooks.\n@@ -213,4 +216,15 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     ) -> EvalResult<'tcx> {\n         Ok(())\n     }\n+\n+    /// Called immediately before a new stack frame got pushed\n+    fn stack_push(\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+    ) -> EvalResult<'tcx, Self::FrameExtra>;\n+\n+    /// Called immediately after a stack frame gets popped\n+    fn stack_pop(\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        extra: Self::FrameExtra,\n+    ) -> EvalResult<'tcx>;\n }"}, {"sha": "83ceadada65ce68f0e1a62c47a064e6f65a47aee", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/261faf3ce22ce930d48ecbbf872d46a613b1f0ab/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261faf3ce22ce930d48ecbbf872d46a613b1f0ab/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=261faf3ce22ce930d48ecbbf872d46a613b1f0ab", "patch": "@@ -471,7 +471,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     /// When you know the layout of the local in advance, you can pass it as last argument\n     pub fn access_local(\n         &self,\n-        frame: &super::Frame<'mir, 'tcx, M::PointerTag>,\n+        frame: &super::Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,\n         local: mir::Local,\n         layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {"}, {"sha": "f9ce7b4319fac9d30231f07f0a93e41ddf6d0930", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/261faf3ce22ce930d48ecbbf872d46a613b1f0ab/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261faf3ce22ce930d48ecbbf872d46a613b1f0ab/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=261faf3ce22ce930d48ecbbf872d46a613b1f0ab", "patch": "@@ -323,6 +323,7 @@ impl_stable_hash_for!(impl<'tcx, 'mir: 'tcx> for struct Frame<'mir, 'tcx> {\n     locals,\n     block,\n     stmt,\n+    extra,\n });\n \n impl<'a, 'mir, 'tcx, Ctx> Snapshot<'a, Ctx> for &'a Frame<'mir, 'tcx>\n@@ -340,6 +341,7 @@ impl<'a, 'mir, 'tcx, Ctx> Snapshot<'a, Ctx> for &'a Frame<'mir, 'tcx>\n             locals,\n             block,\n             stmt,\n+            extra: _,\n         } = self;\n \n         FrameSnapshot {"}]}