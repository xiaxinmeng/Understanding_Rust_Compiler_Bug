{"sha": "f943667af391f7003a46aa5c3fc1a5ac0360574a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NDM2NjdhZjM5MWY3MDAzYTQ2YWE1YzNmYzFhNWFjMDM2MDU3NGE=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-10T21:06:19Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-10T22:27:42Z"}, "message": "Remove `do ... while` loops from the tests and docs.", "tree": {"sha": "93a864156865a7eff132dc392c14e29f0d0b9ebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93a864156865a7eff132dc392c14e29f0d0b9ebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f943667af391f7003a46aa5c3fc1a5ac0360574a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f943667af391f7003a46aa5c3fc1a5ac0360574a", "html_url": "https://github.com/rust-lang/rust/commit/f943667af391f7003a46aa5c3fc1a5ac0360574a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f943667af391f7003a46aa5c3fc1a5ac0360574a/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c924c049465f91dda8b7cee416d1fceaf4a596", "url": "https://api.github.com/repos/rust-lang/rust/commits/13c924c049465f91dda8b7cee416d1fceaf4a596", "html_url": "https://github.com/rust-lang/rust/commit/13c924c049465f91dda8b7cee416d1fceaf4a596"}], "stats": {"total": 124, "additions": 45, "deletions": 79}, "files": [{"sha": "d7e35d8339ff274bc9affebd41dac4ba82caa720", "filename": "doc/rust.md", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -1991,28 +1991,19 @@ way.\n \n *TODO*.\n \n-### While expressions\n+### While loops\n \n ~~~~~~~~{.ebnf .gram}\n while_expr : \"while\" expr '{' block '}'\n            | \"do\" '{' block '}' \"while\" expr ;\n ~~~~~~~~\n \n-A `while` expression is a loop construct. A `while` loop may be either a\n-simple `while` or a `do`-`while` loop.\n+A `while` loop begins by evaluating the boolean loop conditional expression.\n+If the loop conditional expression evaluates to `true`, the loop body block\n+executes and control returns to the loop conditional expression. If the loop\n+conditional expression evaluates to `false`, the `while` expression completes.\n \n-In the case of a simple `while`, the loop begins by evaluating the boolean\n-loop conditional expression. If the loop conditional expression evaluates to\n-`true`, the loop body block executes and control returns to the loop\n-conditional expression. If the loop conditional expression evaluates to\n-`false`, the `while` expression completes.\n-\n-In the case of a `do`-`while`, the loop begins with an execution of the loop\n-body. After the loop body executes, it evaluates the loop conditional\n-expression. If it evaluates to `true`, control returns to the beginning of the\n-loop body. If it evaluates to `false`, control exits the loop.\n-\n-An example of a simple `while` expression:\n+An example:\n \n ~~~~\n # let mut i = 0;\n@@ -2024,18 +2015,6 @@ while i < 10 {\n }\n ~~~~\n \n-An example of a `do`-`while` expression:\n-\n-~~~~\n-# let mut i = 0;\n-# let println = io::println;\n-\n-do {\n-    println(\"hello\\n\");\n-    i = i + 1;\n-} while i < 10;\n-~~~~\n-\n ### Infinite loops\n \n A `loop` expression denotes an infinite loop:"}, {"sha": "8f1affc1284ef5e8236a370da20451ce9878c8e1", "filename": "doc/tutorial.md", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -667,6 +667,15 @@ a specific value, are not allowed.\n keyword `break` can be used to abort the loop, and `cont` can be used\n to abort the current iteration and continue with the next.\n \n+~~~~\n+let mut cake_amount = 8;\n+while cake_amount > 0 {\n+    cake_amount -= 1;\n+}\n+~~~~\n+\n+`loop` is the preferred way of writing `while true`:\n+\n ~~~~\n let mut x = 5;\n while true {\n@@ -679,17 +688,6 @@ while true {\n This code prints out a weird sequence of numbers and stops as soon as\n it finds one that can be divided by five.\n \n-There's also `while`'s ugly cousin, `do`/`while`, which does not check\n-its condition on the first iteration, using traditional syntax:\n-\n-~~~~\n-# fn eat_cake() {}\n-# fn any_cake_left() -> bool { false }\n-do {\n-    eat_cake();\n-} while any_cake_left();\n-~~~~\n-\n For more involved iteration, such as going over the elements of a\n collection, Rust uses higher-order functions. We'll come back to those\n in a moment.\n@@ -2496,12 +2494,12 @@ Here is the function which implements the child task:\n fn stringifier(from_parent: comm::port<uint>,\n                to_parent: comm::chan<str>) {\n     let mut value: uint;\n-    do {\n+    loop {\n         value = comm::recv(from_parent);\n         comm::send(to_parent, uint::to_str(value, 10u));\n-    } while value != 0u;\n+        if value == 0u { break; }\n+    }\n }\n-\n ~~~~\n \n You can see that the function takes two parameters.  The first is a"}, {"sha": "0aec0cc86bf449bd31379f11f7f3ff8586ae01c3", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -61,24 +61,6 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     }\n }\n \n-fn do_while_aliased_mut(cond: bool) {\n-    let mut v = ~3, w = ~4;\n-    let mut _x = &mut w;\n-    do {\n-        borrow(v); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n-        _x = &mut v; //! NOTE prior loan as mutable granted here\n-    } while cond;\n-}\n-\n-fn loop_in_block() {\n-    let mut v = ~3, w = ~4;\n-    let mut _x = &mut w;\n-    uint::range(0u, 10u) {|_i|\n-        borrow(v); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n-        _x = &mut v; //! NOTE prior loan as mutable granted here\n-    }\n-}\n-\n fn at_most_once_block() {\n     fn at_most_once(f: fn()) { f() }\n "}, {"sha": "8babc95f0dcc4d1360fda44d9e97638afae1e389", "filename": "src/test/compile-fail/break-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -4,7 +4,7 @@ fn foo() -> int {\n     let x: int;\n     let i: int;\n \n-    do  { i = 0; break; x = 0; } while x != 0\n+    loop { i = 0; break; x = 0; }\n \n     log(debug, x);\n "}, {"sha": "1229e0dc0ee8f1cf36fb4add0f589e71755a8ada", "filename": "src/test/compile-fail/break-uninit2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -4,7 +4,7 @@ fn foo() -> int {\n     let x: int;\n     let i: int;\n \n-    do  { i = 0; break; x = 0; } while 1 != 2\n+    while 1 != 2  { i = 0; break; x = 0; }\n \n     log(debug, x);\n "}, {"sha": "b085de80a23ce00cb9bbe807ad8d99ffb113a919", "filename": "src/test/compile-fail/loop-pred-constraints.rs", "status": "renamed", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Fcompile-fail%2Floop-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Fcompile-fail%2Floop-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-pred-constraints.rs?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -1,14 +1,17 @@\n+// xfail-test\n+// https://github.com/mozilla/rust/issues/2374\n // error-pattern:unsatisfied precondition constraint (for example, even(y\n \n+\n fn print_even(y: int) : even(y) { log(debug, y); }\n \n pure fn even(y: int) -> bool { true }\n \n fn main() {\n-    let y: int = 42;\n+    let mut y = 42;\n     check (even(y));\n     loop {\n         print_even(y);\n-        do  { do  { do  { y += 1; } while false } while false } while false\n+        loop { y += 1; break; }\n     }\n }", "previous_filename": "src/test/compile-fail/do-while-pred-constraints.rs"}, {"sha": "ca8d014010811b7316af497732c7d9f0608676c0", "filename": "src/test/compile-fail/while-constraints.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Fcompile-fail%2Fwhile-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Fcompile-fail%2Fwhile-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-constraints.rs?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -5,6 +5,6 @@ fn main() {\n     let x: int;\n     loop {\n         log(debug, y);\n-        do  { do  { do  { x <- y; } while true } while true } while true\n+        while true { while true { while true { x <- y; } } }\n     }\n }", "previous_filename": "src/test/compile-fail/do-while-constraints.rs"}, {"sha": "08835ab9204031530e29f3929f10ed113664046c", "filename": "src/test/run-fail/do-while-body-fails.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Ftest%2Frun-fail%2Fdo-while-body-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Ftest%2Frun-fail%2Fdo-while-body-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdo-while-body-fails.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -1,2 +0,0 @@\n-// error-pattern:quux\n-fn main() { let x: int = do  { fail \"quux\"; } while true; }"}, {"sha": "38c6d38f309cbb1a3eebab84e33fef4ede375f66", "filename": "src/test/run-fail/do-while-fail.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Ftest%2Frun-fail%2Fdo-while-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Ftest%2Frun-fail%2Fdo-while-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdo-while-fail.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -1,4 +0,0 @@\n-// error-pattern:giraffe\n-fn main() {\n-  fail do { fail \"giraffe\" } while true;\n-}"}, {"sha": "da241afe8a3dc7fe6a4d5dfb541252e2c51cb638", "filename": "src/test/run-fail/while-body-fails.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -0,0 +1,2 @@\n+// error-pattern:quux\n+fn main() { let x: int = { while true { fail \"quux\"; } ; 8 } ; }"}, {"sha": "3f1f9f3e65517c567b7a7325b3c0d9fd94d637b4", "filename": "src/test/run-fail/while-fail.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-fail.rs?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -0,0 +1,4 @@\n+// error-pattern:giraffe\n+fn main() {\n+    fail { while true { fail \"giraffe\"}; \"clandestine\" };\n+}"}, {"sha": "4770b9ce8863f586adc7e3bca2674cabeaf83dcc", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -4,15 +4,18 @@ fn main() {\n     let mut i = 0;\n     while i < 20 { i += 1; if i == 10 { break; } }\n     assert (i == 10);\n-    do  { i += 1; if i == 20 { break; } } while i < 30\n+    loop { i += 1; if i == 20 { break; } }\n     assert (i == 20);\n     for vec::each([1, 2, 3, 4, 5, 6]) {|x|\n         if x == 3 { break; } assert (x <= 3);\n     }\n     i = 0;\n     while i < 10 { i += 1; if i % 2 == 0 { cont; } assert (i % 2 != 0); }\n     i = 0;\n-    do  { i += 1; if i % 2 == 0 { cont; } assert (i % 2 != 0); } while i < 10\n+    loop { \n+        i += 1; if i % 2 == 0 { cont; } assert (i % 2 != 0); \n+        if i >= 10 { break; }\n+    }\n     for vec::each([1, 2, 3, 4, 5, 6]) {|x|\n         if x % 2 == 0 { cont; }\n         assert (x % 2 != 0);"}, {"sha": "870d4aec4031d4531dbed9cc32bf304f83d97592", "filename": "src/test/run-pass/issue-1257.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1257.rs?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -1,8 +1,8 @@\n fn main () {\n   let mut line = \"\";\n   let mut i = 0;\n-  do {\n+  while line != \"exit\" {\n     line = if i == 9 { \"exit\" } else { \"notexit\" };\n     i += 1;\n-  } while line != \"exit\";\n+  }\n }"}, {"sha": "0b4e90ae1dfe9e37f9ad3cb72582f3692060633a", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -16,7 +16,7 @@ fn what() {\n }\n \n fn zombiejesus() {\n-    do  {\n+    loop {\n         while (ret) {\n             if (ret) {\n                 alt (ret) {\n@@ -33,7 +33,8 @@ fn zombiejesus() {\n                 ret;\n             }\n         }\n-    } while ret\n+        if (ret) { break; }\n+    }\n }\n \n fn notsure() {\n@@ -58,7 +59,7 @@ fn canttouchthis() -> uint {\n fn angrydome() {\n     loop { if break { } }\n     let mut i = 0;\n-    do  { i += 1; if i == 1 { alt check cont { 1 { } } } } while false\n+    loop { i += 1; if i == 1 { alt check cont { 1 { } } } break; }\n }\n \n fn evil_lincoln() { let evil <- #debug(\"lincoln\"); }"}, {"sha": "4fce93acd35a810ed13a093c9e1721f395a1aa7e", "filename": "src/test/run-pass/while.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-pass%2Fwhile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943667af391f7003a46aa5c3fc1a5ac0360574a/src%2Ftest%2Frun-pass%2Fwhile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile.rs?ref=f943667af391f7003a46aa5c3fc1a5ac0360574a", "patch": "@@ -4,9 +4,9 @@ fn main() {\n     let mut x: int = 10;\n     let mut y: int = 0;\n     while y < x { log(debug, y); #debug(\"hello\"); y = y + 1; }\n-    do {\n+    while x > 0 {\n         #debug(\"goodbye\");\n         x = x - 1;\n         log(debug, x);\n-    } while x > 0\n+    }\n }", "previous_filename": "src/test/run-pass/while-and-do-while.rs"}]}