{"sha": "c7013ba1fcad7fcc84d7e6e93d7a0306c13bce47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MDEzYmExZmNhZDdmY2M4NGQ3ZTZlOTNkN2EwMzA2YzEzYmNlNDc=", "commit": {"author": {"name": "Philipp Brueschweiler", "email": "bruphili@student.ethz.ch", "date": "2013-06-15T08:10:49Z"}, "committer": {"name": "Philipp Brueschweiler", "email": "bruphili@student.ethz.ch", "date": "2013-06-15T08:10:49Z"}, "message": "std::dynamic_lib: start fixing windows implementation\n\nThe code compiles and runs under windows now, but I couldn't look up any\nsymbol from the current executable (dlopen(NULL)), and calling looked\nup external function handles doesn't seem to work correctly under windows.", "tree": {"sha": "56b43d23411524d1f7ef273b0487bbe2fe6faf18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b43d23411524d1f7ef273b0487bbe2fe6faf18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7013ba1fcad7fcc84d7e6e93d7a0306c13bce47", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7013ba1fcad7fcc84d7e6e93d7a0306c13bce47", "html_url": "https://github.com/rust-lang/rust/commit/c7013ba1fcad7fcc84d7e6e93d7a0306c13bce47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7013ba1fcad7fcc84d7e6e93d7a0306c13bce47/comments", "author": null, "committer": null, "parents": [{"sha": "eadd83da8b9abc821b141195503836b2094a9ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eadd83da8b9abc821b141195503836b2094a9ea3", "html_url": "https://github.com/rust-lang/rust/commit/eadd83da8b9abc821b141195503836b2094a9ea3"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "f5f88f2bb8808716f2a683d1e2b3cd3c95a78ec6", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c7013ba1fcad7fcc84d7e6e93d7a0306c13bce47/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7013ba1fcad7fcc84d7e6e93d7a0306c13bce47/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=c7013ba1fcad7fcc84d7e6e93d7a0306c13bce47", "patch": "@@ -42,19 +42,15 @@ impl DynamicLibrary {\n     /// Lazily open a dynamic library. When passed None it gives a\n     /// handle to the calling process\n     pub fn open(filename: Option<&path::Path>) -> Result<DynamicLibrary, ~str> {\n-        let open_wrapper = |raw_ptr| {\n-            do dl::check_for_errors_in {\n-                unsafe {\n-                    DynamicLibrary { handle: dl::open(raw_ptr) }\n+        do dl::check_for_errors_in {\n+            unsafe {\n+                DynamicLibrary { handle:\n+                    match filename {\n+                        Some(name) => dl::open_external(name),\n+                        None => dl::open_internal()\n+                    }\n                 }\n             }\n-        };\n-\n-        match filename {\n-            Some(name) => do name.to_str().as_c_str |raw_name| {\n-                open_wrapper(raw_name)\n-            },\n-            None => open_wrapper(ptr::null())\n         }\n     }\n \n@@ -74,6 +70,7 @@ impl DynamicLibrary {\n }\n \n #[test]\n+#[ignore(cfg(windows))]\n priv fn test_loading_cosine () {\n     // The math library does not need to be loaded since it is already\n     // statically linked in\n@@ -106,13 +103,20 @@ priv fn test_loading_cosine () {\n #[cfg(target_os = \"freebsd\")]\n mod dl {\n     use libc;\n+    use path;\n     use ptr;\n     use str;\n     use task;\n     use result::*;\n \n-    pub unsafe fn open(filename: *libc::c_char) -> *libc::c_void {\n-        dlopen(filename, Lazy as libc::c_int)\n+    pub unsafe fn open_external(filename: &path::Path) -> *libc::c_void {\n+        do filename.to_str().as_c_str |raw_name| {\n+            dlopen(raw_name, Lazy as libc::c_int)\n+        }\n+    }\n+\n+    pub unsafe fn open_internal() -> *libc::c_void {\n+        dlopen(ptr::null(), Lazy as libc::c_int)\n     }\n \n     pub fn check_for_errors_in<T>(f: &fn()->T) -> Result<T, ~str> {\n@@ -159,11 +163,22 @@ mod dl {\n mod dl {\n     use os;\n     use libc;\n+    use path;\n+    use ptr;\n+    use str;\n     use task;\n     use result::*;\n \n-    pub unsafe fn open(filename: *libc::c_char) -> *libc::c_void {\n-        LoadLibrary(filename)\n+    pub unsafe fn open_external(filename: &path::Path) -> *libc::c_void {\n+        do os::win32::as_utf16_p(filename.to_str()) |raw_name| {\n+            LoadLibraryW(raw_name)\n+        }\n+    }\n+\n+    pub unsafe fn open_internal() -> *libc::c_void {\n+        let mut handle = ptr::null();\n+        GetModuleHandleExW(0 as libc::DWORD, ptr::null(), &handle as **libc::c_void);\n+        handle\n     }\n \n     pub fn check_for_errors_in<T>(f: &fn()->T) -> Result<T, ~str> {\n@@ -192,7 +207,9 @@ mod dl {\n     #[link_name = \"kernel32\"]\n     extern \"stdcall\" {\n         fn SetLastError(error: u32);\n-        fn LoadLibrary(name: *libc::c_char) -> *libc::c_void;\n+        fn LoadLibraryW(name: *u16) -> *libc::c_void;\n+        fn GetModuleHandleExW(dwFlags: libc::DWORD, name: *u16,\n+                              handle: **libc::c_void) -> *libc::c_void;\n         fn GetProcAddress(handle: *libc::c_void, name: *libc::c_char) -> *libc::c_void;\n         fn FreeLibrary(handle: *libc::c_void);\n     }"}, {"sha": "0a46ef619afd9d9381a9d11d5b3fda994cfa0f95", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7013ba1fcad7fcc84d7e6e93d7a0306c13bce47/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7013ba1fcad7fcc84d7e6e93d7a0306c13bce47/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=c7013ba1fcad7fcc84d7e6e93d7a0306c13bce47", "patch": "@@ -18,11 +18,6 @@ use task;\n \n pub mod at_exit;\n \n-// Currently only works for *NIXes\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n pub mod dynamic_lib;\n \n pub mod global;"}]}