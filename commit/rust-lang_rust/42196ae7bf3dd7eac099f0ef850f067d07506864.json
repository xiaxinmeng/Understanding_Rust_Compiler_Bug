{"sha": "42196ae7bf3dd7eac099f0ef850f067d07506864", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMTk2YWU3YmYzZGQ3ZWFjMDk5ZjBlZjg1MGYwNjdkMDc1MDY4NjQ=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-04-29T20:57:17Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-04-29T20:59:28Z"}, "message": "Improve libstd/net/udp.rs documentation.\n\nThis adds some missing punctuation, adds a missing word, and\ncorrects a bug in the description of `send_to`, which actually\nreturns the number of bytes written on success.\n\nFixes #24925.", "tree": {"sha": "6e800185ffa65acee04f9179331a3e97fbd99086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e800185ffa65acee04f9179331a3e97fbd99086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42196ae7bf3dd7eac099f0ef850f067d07506864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42196ae7bf3dd7eac099f0ef850f067d07506864", "html_url": "https://github.com/rust-lang/rust/commit/42196ae7bf3dd7eac099f0ef850f067d07506864", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42196ae7bf3dd7eac099f0ef850f067d07506864/comments", "author": null, "committer": null, "parents": [{"sha": "551a74dddd84cf01440ee84148ebd18bc68bd7c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/551a74dddd84cf01440ee84148ebd18bc68bd7c8", "html_url": "https://github.com/rust-lang/rust/commit/551a74dddd84cf01440ee84148ebd18bc68bd7c8"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "0b04ecb1b7228565577b5a958348922a5e596db6", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42196ae7bf3dd7eac099f0ef850f067d07506864/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42196ae7bf3dd7eac099f0ef850f067d07506864/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=42196ae7bf3dd7eac099f0ef850f067d07506864", "patch": "@@ -50,8 +50,8 @@ pub struct UdpSocket(net_imp::UdpSocket);\n impl UdpSocket {\n     /// Creates a UDP socket from the given address.\n     ///\n-    /// Address type can be any implementor of `ToSocketAddr` trait. See its\n-    /// documentation for concrete examples.\n+    /// The address type can be any implementor of `ToSocketAddr` trait. See\n+    /// its documentation for concrete examples.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<UdpSocket> {\n         super::each_addr(addr, net_imp::UdpSocket::bind).map(UdpSocket)\n@@ -64,8 +64,8 @@ impl UdpSocket {\n         self.0.recv_from(buf)\n     }\n \n-    /// Sends data on the socket to the given address. Returns nothing on\n-    /// success.\n+    /// Sends data on the socket to the given address. On success, returns the\n+    /// number of bytes written.\n     ///\n     /// Address type can be any implementor of `ToSocketAddrs` trait. See its\n     /// documentation for concrete examples.\n@@ -95,34 +95,34 @@ impl UdpSocket {\n         self.0.duplicate().map(UdpSocket)\n     }\n \n-    /// Sets the broadcast flag on or off\n+    /// Sets the broadcast flag on or off.\n     pub fn set_broadcast(&self, on: bool) -> io::Result<()> {\n         self.0.set_broadcast(on)\n     }\n \n-    /// Sets the multicast loop flag to the specified value\n+    /// Sets the multicast loop flag to the specified value.\n     ///\n     /// This lets multicast packets loop back to local sockets (if enabled)\n     pub fn set_multicast_loop(&self, on: bool) -> io::Result<()> {\n         self.0.set_multicast_loop(on)\n     }\n \n-    /// Joins a multicast IP address (becomes a member of it)\n+    /// Joins a multicast IP address (becomes a member of it).\n     pub fn join_multicast(&self, multi: &IpAddr) -> io::Result<()> {\n         self.0.join_multicast(multi)\n     }\n \n-    /// Leaves a multicast IP address (drops membership from it)\n+    /// Leaves a multicast IP address (drops membership from it).\n     pub fn leave_multicast(&self, multi: &IpAddr) -> io::Result<()> {\n         self.0.leave_multicast(multi)\n     }\n \n-    /// Sets the multicast TTL\n+    /// Sets the multicast TTL.\n     pub fn set_multicast_time_to_live(&self, ttl: i32) -> io::Result<()> {\n         self.0.multicast_time_to_live(ttl)\n     }\n \n-    /// Sets this socket's TTL\n+    /// Sets this socket's TTL.\n     pub fn set_time_to_live(&self, ttl: i32) -> io::Result<()> {\n         self.0.time_to_live(ttl)\n     }"}]}