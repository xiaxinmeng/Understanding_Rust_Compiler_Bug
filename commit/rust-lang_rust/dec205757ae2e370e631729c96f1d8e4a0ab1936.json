{"sha": "dec205757ae2e370e631729c96f1d8e4a0ab1936", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYzIwNTc1N2FlMmUzNzBlNjMxNzI5Yzk2ZjFkOGU0YTBhYjE5MzY=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2020-05-24T22:28:01Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2020-05-24T22:28:01Z"}, "message": "Fix compilation errors after rebase.", "tree": {"sha": "3a8e1c45c2889030a4f6944a20a1591175359377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a8e1c45c2889030a4f6944a20a1591175359377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec205757ae2e370e631729c96f1d8e4a0ab1936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec205757ae2e370e631729c96f1d8e4a0ab1936", "html_url": "https://github.com/rust-lang/rust/commit/dec205757ae2e370e631729c96f1d8e4a0ab1936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec205757ae2e370e631729c96f1d8e4a0ab1936/comments", "author": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90590a399d326641a9132bb4a33f4645c08b73d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/90590a399d326641a9132bb4a33f4645c08b73d8", "html_url": "https://github.com/rust-lang/rust/commit/90590a399d326641a9132bb4a33f4645c08b73d8"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "db2fab526c1f7fe4e6f3ee15404889b8a944038d", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dec205757ae2e370e631729c96f1d8e4a0ab1936/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec205757ae2e370e631729c96f1d8e4a0ab1936/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=dec205757ae2e370e631729c96f1d8e4a0ab1936", "patch": "@@ -331,42 +331,52 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_init\" => {\n-                let result = this.pthread_condattr_init(args[0])?;\n+                let &[attr] = check_arg_count(args)?;\n+                let result = this.pthread_condattr_init(attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_setclock\" => {\n-                let result = this.pthread_condattr_setclock(args[0], args[1])?;\n+                let &[attr, clock_id] = check_arg_count(args)?;\n+                let result = this.pthread_condattr_setclock(attr, clock_id)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_getclock\" => {\n-                let result = this.pthread_condattr_getclock(args[0], args[1])?;\n+                let &[attr, clock_id] = check_arg_count(args)?;\n+                let result = this.pthread_condattr_getclock(attr, clock_id)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_destroy\" => {\n-                let result = this.pthread_condattr_destroy(args[0])?;\n+                let &[attr] = check_arg_count(args)?;\n+                let result = this.pthread_condattr_destroy(attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_init\" => {\n-                let result = this.pthread_cond_init(args[0], args[1])?;\n+                let &[cond, attr] = check_arg_count(args)?;\n+                let result = this.pthread_cond_init(cond, attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_signal\" => {\n-                let result = this.pthread_cond_signal(args[0])?;\n+                let &[cond] = check_arg_count(args)?;\n+                let result = this.pthread_cond_signal(cond)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_broadcast\" => {\n-                let result = this.pthread_cond_broadcast(args[0])?;\n+                let &[cond] = check_arg_count(args)?;\n+                let result = this.pthread_cond_broadcast(cond)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_wait\" => {\n-                let result = this.pthread_cond_wait(args[0], args[1])?;\n+                let &[cond, mutex] = check_arg_count(args)?;\n+                let result = this.pthread_cond_wait(cond, mutex)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_timedwait\" => {\n-                this.pthread_cond_timedwait(args[0], args[1], args[2], dest)?;\n+                let &[cond, mutex, abstime] = check_arg_count(args)?;\n+                this.pthread_cond_timedwait(cond, mutex, abstime, dest)?;\n             }\n             \"pthread_cond_destroy\" => {\n-                let result = this.pthread_cond_destroy(args[0])?;\n+                let &[cond] = check_arg_count(args)?;\n+                let result = this.pthread_cond_destroy(cond)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n@@ -430,6 +440,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             | \"pthread_attr_init\"\n             | \"pthread_attr_destroy\"\n+            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                let &[_] = check_arg_count(args)?;\n+                this.write_null(dest)?;\n+            }\n             | \"pthread_attr_setstacksize\"\n             if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n                 let &[_, _] = check_arg_count(args)?;"}, {"sha": "5b0de43e5466996c5974a3a2c4c6dc13fcb73710", "filename": "src/shims/sync.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dec205757ae2e370e631729c96f1d8e4a0ab1936/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec205757ae2e370e631729c96f1d8e4a0ab1936/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=dec205757ae2e370e631729c96f1d8e4a0ab1936", "patch": "@@ -129,14 +129,14 @@ fn mutex_set_kind<'mir, 'tcx: 'mir>(\n fn mutex_get_id<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     mutex_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, mutex_op, 4, ecx.machine.layouts.u32, PTHREAD_MUTEX_T_MIN_SIZE)\n }\n \n fn mutex_set_id<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     mutex_op: OpTy<'tcx, Tag>,\n-    id: impl Into<ScalarMaybeUndef<Tag>>,\n+    id: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, mutex_op, 4, id, ecx.machine.layouts.u32, PTHREAD_MUTEX_T_MIN_SIZE)\n }\n@@ -176,7 +176,7 @@ fn rwlock_get_id<'mir, 'tcx: 'mir>(\n fn rwlock_set_id<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     rwlock_op: OpTy<'tcx, Tag>,\n-    id: impl Into<ScalarMaybeUndef<Tag>>,\n+    id: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, rwlock_op, 4, id, ecx.machine.layouts.u32, PTHREAD_RWLOCK_T_MIN_SIZE)\n }\n@@ -208,14 +208,14 @@ const PTHREAD_CONDATTR_T_MIN_SIZE: u64 = 4;\n fn condattr_get_clock_id<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     attr_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, attr_op, 0, ecx.machine.layouts.i32, PTHREAD_CONDATTR_T_MIN_SIZE)\n }\n \n fn condattr_set_clock_id<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     attr_op: OpTy<'tcx, Tag>,\n-    clock_id: impl Into<ScalarMaybeUndef<Tag>>,\n+    clock_id: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, attr_op, 0, clock_id, ecx.machine.layouts.i32, PTHREAD_CONDATTR_T_MIN_SIZE)\n }\n@@ -234,14 +234,14 @@ const PTHREAD_COND_T_MIN_SIZE: u64 = 12;\n fn cond_get_id<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     cond_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, cond_op, 4, ecx.machine.layouts.u32, PTHREAD_COND_T_MIN_SIZE)\n }\n \n fn cond_set_id<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     cond_op: OpTy<'tcx, Tag>,\n-    id: impl Into<ScalarMaybeUndef<Tag>>,\n+    id: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, cond_op, 4, id, ecx.machine.layouts.u32, PTHREAD_COND_T_MIN_SIZE)\n }\n@@ -265,14 +265,14 @@ fn cond_get_or_create_id<'mir, 'tcx: 'mir>(\n fn cond_get_clock_id<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     cond_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     get_at_offset(ecx, cond_op, 8, ecx.machine.layouts.i32, PTHREAD_COND_T_MIN_SIZE)\n }\n \n fn cond_set_clock_id<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     cond_op: OpTy<'tcx, Tag>,\n-    clock_id: impl Into<ScalarMaybeUndef<Tag>>,\n+    clock_id: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     set_at_offset(ecx, cond_op, 8, clock_id, ecx.machine.layouts.i32, PTHREAD_COND_T_MIN_SIZE)\n }\n@@ -518,8 +518,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_ub_format!(\"destroyed a locked mutex\");\n         }\n \n-        mutex_set_kind(this, mutex_op, ScalarMaybeUndef::Undef)?;\n-        mutex_set_id(this, mutex_op, ScalarMaybeUndef::Undef)?;\n+        mutex_set_kind(this, mutex_op, ScalarMaybeUninit::Uninit)?;\n+        mutex_set_id(this, mutex_op, ScalarMaybeUninit::Uninit)?;\n \n         Ok(0)\n     }\n@@ -643,7 +643,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_ub_format!(\"destroyed a locked rwlock\");\n         }\n \n-        rwlock_set_id(this, rwlock_op, ScalarMaybeUndef::Undef)?;\n+        rwlock_set_id(this, rwlock_op, ScalarMaybeUninit::Uninit)?;\n \n         Ok(0)\n     }\n@@ -696,7 +696,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_condattr_destroy(&mut self, attr_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        condattr_set_clock_id(this, attr_op, ScalarMaybeUndef::Undef)?;\n+        condattr_set_clock_id(this, attr_op, ScalarMaybeUninit::Uninit)?;\n \n         Ok(0)\n     }\n@@ -835,8 +835,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if this.condvar_is_awaited(id) {\n             throw_ub_format!(\"destroyed an awaited conditional variable\");\n         }\n-        cond_set_id(this, cond_op, ScalarMaybeUndef::Undef)?;\n-        cond_set_clock_id(this, cond_op, ScalarMaybeUndef::Undef)?;\n+        cond_set_id(this, cond_op, ScalarMaybeUninit::Uninit)?;\n+        cond_set_clock_id(this, cond_op, ScalarMaybeUninit::Uninit)?;\n \n         Ok(0)\n     }"}]}