{"sha": "fdef4f185ea6a1b560c1370c10ee561135af483d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZWY0ZjE4NWVhNmExYjU2MGMxMzcwYzEwZWU1NjExMzVhZjQ4M2Q=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-01-01T18:14:33Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-01-20T16:57:27Z"}, "message": "Delete unused \"next\" variants from formatting infrastructure\n\nThe formatting infrastructure stopped emitting these a while back, and in\nremoving them we can simplify related code.", "tree": {"sha": "8e995c098035642f25f622ceb60223bb6e11a715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e995c098035642f25f622ceb60223bb6e11a715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdef4f185ea6a1b560c1370c10ee561135af483d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdef4f185ea6a1b560c1370c10ee561135af483d", "html_url": "https://github.com/rust-lang/rust/commit/fdef4f185ea6a1b560c1370c10ee561135af483d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdef4f185ea6a1b560c1370c10ee561135af483d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "900811e43047fc5593f39b0363373530b02c87e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/900811e43047fc5593f39b0363373530b02c87e0", "html_url": "https://github.com/rust-lang/rust/commit/900811e43047fc5593f39b0363373530b02c87e0"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "64c270522d39d3688ad107740c59441c9365c5f9", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fdef4f185ea6a1b560c1370c10ee561135af483d/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdef4f185ea6a1b560c1370c10ee561135af483d/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=fdef4f185ea6a1b560c1370c10ee561135af483d", "patch": "@@ -10,7 +10,6 @@ use crate::mem;\n use crate::num::flt2dec;\n use crate::ops::Deref;\n use crate::result;\n-use crate::slice;\n use crate::str;\n \n mod builders;\n@@ -234,7 +233,6 @@ pub struct Formatter<'a> {\n     precision: Option<usize>,\n \n     buf: &'a mut (dyn Write + 'a),\n-    curarg: slice::Iter<'a, ArgumentV1<'a>>,\n     args: &'a [ArgumentV1<'a>],\n }\n \n@@ -1044,7 +1042,6 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n         align: rt::v1::Alignment::Unknown,\n         fill: ' ',\n         args: args.args,\n-        curarg: args.args.iter(),\n     };\n \n     let mut idx = 0;\n@@ -1117,7 +1114,6 @@ impl<'a> Formatter<'a> {\n \n             // These only exist in the struct for the `run` method,\n             // which won\u2019t be used together with this method.\n-            curarg: self.curarg.clone(),\n             args: self.args,\n         }\n     }\n@@ -1134,9 +1130,17 @@ impl<'a> Formatter<'a> {\n         self.precision = self.getcount(&arg.format.precision);\n \n         // Extract the correct argument\n-        let value = match arg.position {\n-            rt::v1::Position::Next => *self.curarg.next().unwrap(),\n-            rt::v1::Position::At(i) => self.args[i],\n+        let value = {\n+            #[cfg(bootstrap)]\n+            {\n+                match arg.position {\n+                    rt::v1::Position::At(i) => self.args[i],\n+                }\n+            }\n+            #[cfg(not(bootstrap))]\n+            {\n+                self.args[arg.position]\n+            }\n         };\n \n         // Then actually do some printing\n@@ -1148,7 +1152,6 @@ impl<'a> Formatter<'a> {\n             rt::v1::Count::Is(n) => Some(n),\n             rt::v1::Count::Implied => None,\n             rt::v1::Count::Param(i) => self.args[i].as_usize(),\n-            rt::v1::Count::NextParam => self.curarg.next()?.as_usize(),\n         }\n     }\n "}, {"sha": "fd81f93242b89e5cc8a31c8d547012424ce48697", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdef4f185ea6a1b560c1370c10ee561135af483d/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdef4f185ea6a1b560c1370c10ee561135af483d/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=fdef4f185ea6a1b560c1370c10ee561135af483d", "patch": "@@ -7,7 +7,10 @@\n \n #[derive(Copy, Clone)]\n pub struct Argument {\n+    #[cfg(bootstrap)]\n     pub position: Position,\n+    #[cfg(not(bootstrap))]\n+    pub position: usize,\n     pub format: FormatSpec,\n }\n \n@@ -37,12 +40,11 @@ pub enum Alignment {\n pub enum Count {\n     Is(usize),\n     Param(usize),\n-    NextParam,\n     Implied,\n }\n \n+#[cfg(bootstrap)]\n #[derive(Copy, Clone)]\n pub enum Position {\n-    Next,\n     At(usize),\n }"}, {"sha": "3f4e24ca993db4a14c5c619ba9b215c655400875", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fdef4f185ea6a1b560c1370c10ee561135af483d/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdef4f185ea6a1b560c1370c10ee561135af483d/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=fdef4f185ea6a1b560c1370c10ee561135af483d", "patch": "@@ -590,17 +590,6 @@ impl<'a, 'b> Context<'a, 'b> {\n             parse::NextArgument(ref arg) => {\n                 // Build the position\n                 let pos = {\n-                    let pos = |c, arg| {\n-                        let mut path = Context::rtpath(self.ecx, \"Position\");\n-                        path.push(self.ecx.ident_of(c, sp));\n-                        match arg {\n-                            Some(i) => {\n-                                let arg = self.ecx.expr_usize(sp, i);\n-                                self.ecx.expr_call_global(sp, path, vec![arg])\n-                            }\n-                            None => self.ecx.expr_path(self.ecx.path_global(sp, path)),\n-                        }\n-                    };\n                     match arg.position {\n                         parse::ArgumentIs(i) | parse::ArgumentImplicitlyIs(i) => {\n                             // Map to index in final generated argument array\n@@ -615,7 +604,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                                     arg_idx\n                                 }\n                             };\n-                            pos(\"At\", Some(arg_idx))\n+                            self.ecx.expr_usize(sp, arg_idx)\n                         }\n \n                         // should never be the case, because names are already"}]}