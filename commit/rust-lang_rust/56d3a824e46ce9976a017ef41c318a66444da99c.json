{"sha": "56d3a824e46ce9976a017ef41c318a66444da99c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDNhODI0ZTQ2Y2U5OTc2YTAxN2VmNDFjMzE4YTY2NDQ0ZGE5OWM=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2018-11-12T17:36:49Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2018-11-12T17:36:49Z"}, "message": "Update docs", "tree": {"sha": "aeac1c9e0cc6abf6fa093ce5fa181ae67a57101d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeac1c9e0cc6abf6fa093ce5fa181ae67a57101d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d3a824e46ce9976a017ef41c318a66444da99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d3a824e46ce9976a017ef41c318a66444da99c", "html_url": "https://github.com/rust-lang/rust/commit/56d3a824e46ce9976a017ef41c318a66444da99c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d3a824e46ce9976a017ef41c318a66444da99c/comments", "author": null, "committer": null, "parents": [{"sha": "4d2934e803d1c948c5e4681a84f33b91c0a0fc64", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2934e803d1c948c5e4681a84f33b91c0a0fc64", "html_url": "https://github.com/rust-lang/rust/commit/4d2934e803d1c948c5e4681a84f33b91c0a0fc64"}], "stats": {"total": 19, "additions": 3, "deletions": 16}, "files": [{"sha": "7fe195d63be7a717b7e86f90b6f38cb0ce0ca1f8", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56d3a824e46ce9976a017ef41c318a66444da99c/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d3a824e46ce9976a017ef41c318a66444da99c/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=56d3a824e46ce9976a017ef41c318a66444da99c", "patch": "@@ -143,25 +143,12 @@ pub fn forget<T>(t: T) {\n     ManuallyDrop::new(t);\n }\n \n-/// Takes ownership and \"forgets\" about the value **without running its destructor**.\n+/// Like [`forget`], but also accepts unsized values.\n ///\n-/// This function works exactly the same as [`forget`], except it also accepts unsized values. It\n-/// will never be stabilized and is only available because we haven't decided to relax the bounds\n-/// on [`forget`] just yet.\n+/// This function is just a shim intended to be removed when the `unsized_locals` feature gets\n+/// stabilized.\n ///\n /// [`forget`]: fn.forget.html\n-///\n-/// # Examples\n-///\n-/// ```\n-/// #![feature(forget_unsized)]\n-///\n-/// use std::mem;\n-///\n-/// let f: Box<FnOnce()> = Box::new(|| ());\n-/// let f = *f;\n-/// mem::forget_unsized(f);\n-/// ```\n #[inline]\n #[cfg(not(stage0))]\n #[unstable(feature = \"forget_unsized\", issue = \"0\")]"}]}