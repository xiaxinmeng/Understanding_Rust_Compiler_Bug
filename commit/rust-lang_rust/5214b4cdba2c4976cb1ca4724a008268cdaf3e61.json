{"sha": "5214b4cdba2c4976cb1ca4724a008268cdaf3e61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMTRiNGNkYmEyYzQ5NzZjYjFjYTQ3MjRhMDA4MjY4Y2RhZjNlNjE=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-08-05T08:29:00Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-08-05T08:29:00Z"}, "message": "Look for trait methods in expand glob import assist", "tree": {"sha": "be3b93fe0c05cdc029cb7424fc1801689e8f9726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3b93fe0c05cdc029cb7424fc1801689e8f9726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5214b4cdba2c4976cb1ca4724a008268cdaf3e61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5214b4cdba2c4976cb1ca4724a008268cdaf3e61", "html_url": "https://github.com/rust-lang/rust/commit/5214b4cdba2c4976cb1ca4724a008268cdaf3e61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5214b4cdba2c4976cb1ca4724a008268cdaf3e61/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdb97756ca4c2710061fc49a5e2c2c10f5cc1eb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb97756ca4c2710061fc49a5e2c2c10f5cc1eb6", "html_url": "https://github.com/rust-lang/rust/commit/bdb97756ca4c2710061fc49a5e2c2c10f5cc1eb6"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "978c6772e74700cca53d642c242a3f98c7cf1b12", "filename": "crates/ra_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 65, "deletions": 13, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5214b4cdba2c4976cb1ca4724a008268cdaf3e61/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5214b4cdba2c4976cb1ca4724a008268cdaf3e61/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=5214b4cdba2c4976cb1ca4724a008268cdaf3e61", "patch": "@@ -1,15 +1,17 @@\n-use hir::{MacroDef, ModuleDef, Name, PathResolution, ScopeDef, SemanticsScope};\n+use hir::{AssocItem, MacroDef, ModuleDef, Name, PathResolution, ScopeDef, SemanticsScope};\n use ra_ide_db::{\n     defs::{classify_name_ref, Definition, NameRefClass},\n     RootDatabase,\n };\n-use ra_syntax::{ast, match_ast, AstNode, SyntaxNode, SyntaxToken, T};\n+use ra_syntax::{algo, ast, match_ast, AstNode, SyntaxNode, SyntaxToken, T};\n \n use crate::{\n     assist_context::{AssistBuilder, AssistContext, Assists},\n     AssistId, AssistKind,\n };\n \n+use either::Either;\n+\n // Assist: expand_glob_import\n //\n // Expands glob imports.\n@@ -122,7 +124,19 @@ fn find_used_names(\n \n     defs_in_mod\n         .iter()\n-        .filter(|d| defs_in_source_file.contains(d))\n+        .filter(|def| {\n+            if let Def::ModuleDef(ModuleDef::Trait(tr)) = def {\n+                for item in tr.items(ctx.db()) {\n+                    if let AssocItem::Function(f) = item {\n+                        if defs_in_source_file.contains(&Def::ModuleDef(ModuleDef::Function(f))) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+\n+            defs_in_source_file.contains(def)\n+        })\n         .filter_map(|d| d.name(ctx.db()))\n         .collect()\n }\n@@ -133,28 +147,38 @@ fn replace_ast(\n     path: ast::Path,\n     used_names: Vec<Name>,\n ) {\n-    let new_use_tree_list = ast::make::use_tree_list(used_names.iter().map(|n| {\n-        ast::make::use_tree(ast::make::path_from_text(&n.to_string()), None, None, false)\n-    }));\n+    let replacement: Either<ast::UseTree, ast::UseTreeList> = if used_names.len() == 1 {\n+        Either::Left(ast::make::use_tree(\n+            ast::make::path_from_text(&format!(\"{}::{}\", path, used_names.first().unwrap())),\n+            None,\n+            None,\n+            false,\n+        ))\n+    } else {\n+        Either::Right(ast::make::use_tree_list(used_names.iter().map(|n| {\n+            ast::make::use_tree(ast::make::path_from_text(&n.to_string()), None, None, false)\n+        })))\n+    };\n+\n+    let mut replace_node = |replacement: Either<ast::UseTree, ast::UseTreeList>| {\n+        algo::diff(node, &replacement.either(|u| u.syntax().clone(), |ut| ut.syntax().clone()))\n+            .into_text_edit(builder.text_edit_builder());\n+    };\n \n     match_ast! {\n         match node {\n             ast::UseTree(use_tree) => {\n-                builder.replace_ast(use_tree, make_use_tree(path, new_use_tree_list));\n+                replace_node(replacement);\n             },\n             ast::UseTreeList(use_tree_list) => {\n-                builder.replace_ast(use_tree_list, new_use_tree_list);\n+                replace_node(replacement);\n             },\n             ast::Use(use_item) => {\n-                builder.replace_ast(use_item, ast::make::use_item(make_use_tree(path, new_use_tree_list)));\n+                builder.replace_ast(use_item, ast::make::use_item(replacement.left_or_else(|ut| ast::make::use_tree(path, Some(ut), None, false))));\n             },\n             _ => {},\n         }\n     }\n-\n-    fn make_use_tree(path: ast::Path, use_tree_list: ast::UseTreeList) -> ast::UseTree {\n-        ast::make::use_tree(path, Some(use_tree_list), None, false)\n-    }\n }\n \n #[cfg(test)]\n@@ -320,6 +344,34 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn expanding_glob_import_with_trait_method_uses() {\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+//- /lib.rs crate:foo\n+pub trait Tr {\n+    fn method(&self) {}\n+}\n+impl Tr for () {}\n+\n+//- /main.rs crate:main deps:foo\n+use foo::*<|>;\n+\n+fn main() {\n+    ().method();\n+}\n+\",\n+            r\"\n+use foo::Tr;\n+\n+fn main() {\n+    ().method();\n+}\n+\",\n+        )\n+    }\n+\n     #[test]\n     fn expanding_is_not_applicable_if_cursor_is_not_in_star_token() {\n         check_assist_not_applicable("}]}