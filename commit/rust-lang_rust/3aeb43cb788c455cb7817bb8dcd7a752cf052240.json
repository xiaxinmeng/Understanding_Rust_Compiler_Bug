{"sha": "3aeb43cb788c455cb7817bb8dcd7a752cf052240", "node_id": "C_kwDOAAsO6NoAKDNhZWI0M2NiNzg4YzQ1NWNiNzgxN2JiOGRjZDdhNzUyY2YwNTIyNDA", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-01-13T13:27:40Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-01-31T17:26:06Z"}, "message": "add and bless tests", "tree": {"sha": "06453def3e36baa26a6db66710f0068ecc405ff1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06453def3e36baa26a6db66710f0068ecc405ff1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aeb43cb788c455cb7817bb8dcd7a752cf052240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aeb43cb788c455cb7817bb8dcd7a752cf052240", "html_url": "https://github.com/rust-lang/rust/commit/3aeb43cb788c455cb7817bb8dcd7a752cf052240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aeb43cb788c455cb7817bb8dcd7a752cf052240/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf2c4d73986d003941e6b63d64cab213729b44f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf2c4d73986d003941e6b63d64cab213729b44f", "html_url": "https://github.com/rust-lang/rust/commit/6bf2c4d73986d003941e6b63d64cab213729b44f"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "be7e70dfabba76b69765e435f699d2ebbaabc459", "filename": "tests/ui/consts/gate-do-not-const-check.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb43cb788c455cb7817bb8dcd7a752cf052240/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb43cb788c455cb7817bb8dcd7a752cf052240/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.rs?ref=3aeb43cb788c455cb7817bb8dcd7a752cf052240", "patch": "@@ -0,0 +1,5 @@\n+#[rustc_do_not_const_check]\n+//~^ ERROR this is an internal attribute that will never be stable\n+const fn foo() {}\n+\n+fn main() {}"}, {"sha": "3bb1360166a19fba12bb2ba25b66418ebc699a6d", "filename": "tests/ui/consts/gate-do-not-const-check.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb43cb788c455cb7817bb8dcd7a752cf052240/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb43cb788c455cb7817bb8dcd7a752cf052240/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.stderr?ref=3aeb43cb788c455cb7817bb8dcd7a752cf052240", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: this is an internal attribute that will never be stable\n+  --> $DIR/gate-do-not-const-check.rs:1:1\n+   |\n+LL | #[rustc_do_not_const_check]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "730e268c09124802794e5f5d656edab3d1823f3c", "filename": "tests/ui/rfc-2632-const-trait-impl/do-not-const-check-override.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb43cb788c455cb7817bb8dcd7a752cf052240/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb43cb788c455cb7817bb8dcd7a752cf052240/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check-override.rs?ref=3aeb43cb788c455cb7817bb8dcd7a752cf052240", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+#![feature(const_trait_impl, rustc_attrs)]\n+\n+#[const_trait]\n+trait Foo {\n+    #[rustc_do_not_const_check]\n+    fn into_iter(&self) { println!(\"FEAR ME!\") }\n+}\n+\n+\n+impl const Foo for () {\n+    fn into_iter(&self) {\n+        // ^_^\n+    }\n+}\n+\n+const _: () = Foo::into_iter(&());\n+\n+fn main() {}"}, {"sha": "a450dbb82d1bdf4fabf4b5229100a810104badd8", "filename": "tests/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb43cb788c455cb7817bb8dcd7a752cf052240/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb43cb788c455cb7817bb8dcd7a752cf052240/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=3aeb43cb788c455cb7817bb8dcd7a752cf052240", "patch": "@@ -227,4 +227,6 @@ fn evens_squared(n: usize) -> _ {\n }\n \n const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-//~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+//~^ ERROR the trait bound\n+//~| ERROR the trait bound\n+//~| ERROR the placeholder"}, {"sha": "bc6c9fd077993a172ee6525d570693a0eb4e0826", "filename": "tests/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb43cb788c455cb7817bb8dcd7a752cf052240/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb43cb788c455cb7817bb8dcd7a752cf052240/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=3aeb43cb788c455cb7817bb8dcd7a752cf052240", "patch": "@@ -437,17 +437,37 @@ LL | fn evens_squared(n: usize) -> _ {\n    |                               not allowed in type signatures\n    |                               help: replace with an appropriate return type: `impl Iterator<Item = usize>`\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:229:10\n+error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n+  --> $DIR/typeck_type_placeholder_item.rs:229:22\n    |\n LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-   |          ^ not allowed in type signatures\n+   |                      ^^^^^^ `std::ops::Range<{integer}>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n+  --> $DIR/typeck_type_placeholder_item.rs:229:14\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |              ^^^^^^^\n+\n+error[E0277]: the trait bound `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>: Iterator` is not satisfied\n+  --> $DIR/typeck_type_placeholder_item.rs:229:45\n    |\n-note: however, the inferred type `Map<Filter<Range<i32>, [closure@typeck_type_placeholder_item.rs:229:29]>, [closure@typeck_type_placeholder_item.rs:229:49]>` cannot be named\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |                                             ^^^ `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>`\n+note: the trait `Iterator` is implemented for `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>`, but that implementation is not `const`\n   --> $DIR/typeck_type_placeholder_item.rs:229:14\n    |\n LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:229:10\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |          ^ not allowed in type signatures\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:140:31\n@@ -657,7 +677,7 @@ LL |     const D: _ = 42;\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `i32`\n \n-error: aborting due to 71 previous errors\n+error: aborting due to 73 previous errors\n \n-Some errors have detailed explanations: E0121, E0282, E0403.\n+Some errors have detailed explanations: E0121, E0277, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}