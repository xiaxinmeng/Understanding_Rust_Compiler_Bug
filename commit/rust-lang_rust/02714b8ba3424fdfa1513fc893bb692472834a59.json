{"sha": "02714b8ba3424fdfa1513fc893bb692472834a59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzE0YjhiYTM0MjRmZGZhMTUxM2ZjODkzYmI2OTI0NzI4MzRhNTk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-07-03T14:54:08Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-07-08T10:12:03Z"}, "message": "Regression tests and updates to existing tests.\n\nThe regression tests explore:\n  (direct | indirect | doubly-indirect | unsafe) x (embedded | param):\n\nwhere:\n  embedded: `struct Wrapper(... NoDerive ...);`\n  param:    `struct Wrapper<X>(... X ...);`\n\n  direct:          `const A:     Wrapper<...> = Wrapper(NoDerive);`\n  indirect:        `const A: & & Wrapper<...> = Wrapper(NoDerive)`\n  doubly-indirect: `const A: & & Wrapper<...> = & & Wrapper(& & NoDerive)`\n  unsafe:          `const A: UnsafeWrap<...>  = UnsafeWrap(std::ptr::null())`", "tree": {"sha": "38bbbe71c24278452847c069568750eae2877ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38bbbe71c24278452847c069568750eae2877ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02714b8ba3424fdfa1513fc893bb692472834a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02714b8ba3424fdfa1513fc893bb692472834a59", "html_url": "https://github.com/rust-lang/rust/commit/02714b8ba3424fdfa1513fc893bb692472834a59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02714b8ba3424fdfa1513fc893bb692472834a59/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b56080162bc45e1cfd561b0a21e50b827c9df679", "url": "https://api.github.com/repos/rust-lang/rust/commits/b56080162bc45e1cfd561b0a21e50b827c9df679", "html_url": "https://github.com/rust-lang/rust/commit/b56080162bc45e1cfd561b0a21e50b827c9df679"}], "stats": {"total": 448, "additions": 448, "deletions": 0}, "files": [{"sha": "42c6f24b36a0cfc9f090bda87b7f82256d9a7208", "filename": "src/test/ui/issues/issue-55511.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Fissues%2Fissue-55511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Fissues%2Fissue-55511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55511.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -14,6 +14,8 @@ fn main() {\n     //~^ ERROR `a` does not live long enough [E0597]\n     match b {\n         <() as Foo<'static>>::C => { }\n+        //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| WARN will become a hard error in a future release\n         _ => { }\n     }\n }"}, {"sha": "c0f702e4fab2332dea4da5df735ec0d79a0c83d1", "filename": "src/test/ui/issues/issue-55511.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Fissues%2Fissue-55511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Fissues%2Fissue-55511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55511.stderr?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -1,3 +1,13 @@\n+warning: to use a constant of type `std::cell::Cell` in a pattern, `std::cell::Cell` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/issue-55511.rs:16:9\n+   |\n+LL |         <() as Foo<'static>>::C => { }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(indirect_structural_match)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+\n error[E0597]: `a` does not live long enough\n   --> $DIR/issue-55511.rs:13:28\n    |"}, {"sha": "b90a750cc16c4f66ff4042d94b0dac81108bf2e1", "filename": "src/test/ui/rfc1445/allow-hide-behind-direct-unsafe-ptr-embedded.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,24 @@\n+// Test explores how `#[structral_match]` behaves in tandem with\n+// `*const` and `*mut` pointers.\n+\n+// run-pass\n+\n+struct NoDerive(i32);\n+\n+// This impl makes NoDerive irreflexive\n+// (which doesn't matter here because `<*const T>::eq` won't recur on `T`).\n+impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\n+\n+impl Eq for NoDerive { }\n+\n+#[derive(PartialEq, Eq)]\n+struct WrapEmbedded(*const NoDerive);\n+\n+const WRAP_UNSAFE_EMBEDDED: WrapEmbedded = WrapEmbedded(std::ptr::null());\n+\n+fn main() {\n+    match WRAP_UNSAFE_EMBEDDED {\n+        WRAP_UNSAFE_EMBEDDED => { println!(\"WRAP_UNSAFE_EMBEDDED correctly matched itself\"); }\n+        _ => { panic!(\"WRAP_UNSAFE_EMBEDDED did not match itself\"); }\n+    }\n+}"}, {"sha": "1076b9f25d89aa95eb86b3ee73190ff3bc9c7932", "filename": "src/test/ui/rfc1445/allow-hide-behind-direct-unsafe-ptr-param.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-param.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,24 @@\n+// Test explores how `#[structral_match]` behaves in tandem with\n+// `*const` and `*mut` pointers.\n+\n+// run-pass\n+\n+struct NoDerive(i32);\n+\n+// This impl makes NoDerive irreflexive\n+// (which doesn't matter here because `<*const T>::eq` won't recur on `T`).\n+impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\n+\n+impl Eq for NoDerive { }\n+\n+#[derive(PartialEq, Eq)]\n+struct WrapParam<X>(*const X);\n+\n+const WRAP_UNSAFE_PARAM: WrapParam<NoDerive> = WrapParam(std::ptr::null());\n+\n+fn main() {\n+    match WRAP_UNSAFE_PARAM {\n+        WRAP_UNSAFE_PARAM => { println!(\"WRAP_UNSAFE_PARAM correctly matched itself\"); }\n+        _ => { panic!(\"WRAP_UNSAFE_PARAM did not match itself\"); }\n+    }\n+}"}, {"sha": "a4b832d377d6f3249ae097a13dd1a1758de065f4", "filename": "src/test/ui/rfc1445/allow-hide-behind-indirect-unsafe-ptr-embedded.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,24 @@\n+// Test explores how `#[structral_match]` behaves in tandem with\n+// `*const` and `*mut` pointers.\n+\n+// run-pass\n+\n+struct NoDerive(i32);\n+\n+// This impl makes NoDerive irreflexive\n+// (which doesn't matter here because `<*const T>::eq` won't recur on `T`).\n+impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\n+\n+impl Eq for NoDerive { }\n+\n+#[derive(PartialEq, Eq)]\n+struct WrapEmbedded(*const NoDerive);\n+\n+const WRAP_UNSAFE_EMBEDDED: & &WrapEmbedded = & &WrapEmbedded(std::ptr::null());\n+\n+fn main() {\n+    match WRAP_UNSAFE_EMBEDDED {\n+        WRAP_UNSAFE_EMBEDDED => { println!(\"WRAP_UNSAFE_EMBEDDED correctly matched itself\"); }\n+        _ => { panic!(\"WRAP_UNSAFE_EMBEDDED did not match itself\"); }\n+    }\n+}"}, {"sha": "47b70e2e9cc56b6e7f5049241a0da93d7d867869", "filename": "src/test/ui/rfc1445/allow-hide-behind-indirect-unsafe-ptr-param.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,24 @@\n+// Test explores how `#[structral_match]` behaves in tandem with\n+// `*const` and `*mut` pointers.\n+\n+// run-pass\n+\n+struct NoDerive(i32);\n+\n+// This impl makes NoDerive irreflexive\n+// (which doesn't matter here because `<*const T>::eq` won't recur on `T`).\n+impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\n+\n+impl Eq for NoDerive { }\n+\n+#[derive(PartialEq, Eq)]\n+struct WrapParam<X>(*const X);\n+\n+const WRAP_UNSAFE_PARAM: & &WrapParam<NoDerive> = & &WrapParam(std::ptr::null());\n+\n+fn main() {\n+    match WRAP_UNSAFE_PARAM {\n+        WRAP_UNSAFE_PARAM => { println!(\"WRAP_UNSAFE_PARAM correctly matched itself\"); }\n+        _ => { panic!(\"WRAP_UNSAFE_PARAM did not match itself\"); }\n+    }\n+}"}, {"sha": "b8949ae8b500f3c25e42fada39b78ad2ee50a542", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-embedded.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,26 @@\n+// This is part of a set of tests exploring the different ways a\n+// `#[structural_match]` ADT might try to hold a\n+// non-`#[structural_match]` in hidden manner that lets matches\n+// through that we had intended to reject.\n+//\n+// See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n+\n+struct NoDerive(i32);\n+\n+// This impl makes NoDerive irreflexive.\n+impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\n+\n+impl Eq for NoDerive { }\n+\n+#[derive(PartialEq, Eq)]\n+struct WrapInline(NoDerive);\n+\n+const WRAP_DIRECT_INLINE: WrapInline = WrapInline(NoDerive(0));\n+\n+fn main() {\n+    match WRAP_DIRECT_INLINE {\n+        WRAP_DIRECT_INLINE => { panic!(\"WRAP_DIRECT_INLINE matched itself\"); }\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        _ => { println!(\"WRAP_DIRECT_INLINE did not match itself\"); }\n+    }\n+}"}, {"sha": "c73a6cf1326b3e3a7401deec42407cebeeb144f8", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-embedded.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.stderr?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,8 @@\n+error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/cant-hide-behind-direct-struct-embedded.rs:22:9\n+   |\n+LL |         WRAP_DIRECT_INLINE => { panic!(\"WRAP_DIRECT_INLINE matched itself\"); }\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a3a615ea748cb6790c87507a702ed505d9a38c1a", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-param.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,26 @@\n+// This is part of a set of tests exploring the different ways a\n+// `#[structural_match]` ADT might try to hold a\n+// non-`#[structural_match]` in hidden manner that lets matches\n+// through that we had intended to reject.\n+//\n+// See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n+\n+struct NoDerive(i32);\n+\n+// This impl makes NoDerive irreflexive.\n+impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\n+\n+impl Eq for NoDerive { }\n+\n+#[derive(PartialEq, Eq)]\n+struct WrapParam<T>(T);\n+\n+const WRAP_DIRECT_PARAM: WrapParam<NoDerive> = WrapParam(NoDerive(0));\n+\n+fn main() {\n+    match WRAP_DIRECT_PARAM {\n+        WRAP_DIRECT_PARAM => { panic!(\"WRAP_DIRECT_PARAM matched itself\"); }\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        _ => { println!(\"WRAP_DIRECT_PARAM did not match itself\"); }\n+    }\n+}"}, {"sha": "6fdf9db89b8dc4a74c007e6089bbe434394a39eb", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-param.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.stderr?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,8 @@\n+error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/cant-hide-behind-direct-struct-param.rs:22:9\n+   |\n+LL |         WRAP_DIRECT_PARAM => { panic!(\"WRAP_DIRECT_PARAM matched itself\"); }\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b6d9c52b298b638427e417e6b7743268b259a4e0", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-embedded.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,29 @@\n+// This is part of a set of tests exploring the different ways a\n+// `#[structural_match]` ADT might try to hold a\n+// non-`#[structural_match]` in hidden manner that lets matches\n+// through that we had intended to reject.\n+//\n+// See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n+\n+// run-pass\n+\n+struct NoDerive(i32);\n+\n+// This impl makes NoDerive irreflexive.\n+impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\n+\n+impl Eq for NoDerive { }\n+\n+#[derive(PartialEq, Eq)]\n+struct WrapInline<'a>(&'a &'a NoDerive);\n+\n+const WRAP_DOUBLY_INDIRECT_INLINE: & &WrapInline = & &WrapInline(& & NoDerive(0));\n+\n+fn main() {\n+    match WRAP_DOUBLY_INDIRECT_INLINE {\n+        WRAP_DOUBLY_INDIRECT_INLINE => { panic!(\"WRAP_DOUBLY_INDIRECT_INLINE matched itself\"); }\n+        //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| WARN will become a hard error in a future release\n+        _ => { println!(\"WRAP_DOUBLY_INDIRECT_INLINE correctly did not match itself\"); }\n+    }\n+}"}, {"sha": "3de63f43ecbb623945fd27c30712924eb83d79c3", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-embedded.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,10 @@\n+warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/cant-hide-behind-doubly-indirect-embedded.rs:24:9\n+   |\n+LL |         WRAP_DOUBLY_INDIRECT_INLINE => { panic!(\"WRAP_DOUBLY_INDIRECT_INLINE matched itself\"); }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(indirect_structural_match)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+"}, {"sha": "804d336b3ea610b7198cfba7db2fbafcb83dbaae", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-param.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,29 @@\n+// This is part of a set of tests exploring the different ways a\n+// `#[structural_match]` ADT might try to hold a\n+// non-`#[structural_match]` in hidden manner that lets matches\n+// through that we had intended to reject.\n+//\n+// See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n+\n+// run-pass\n+\n+struct NoDerive(i32);\n+\n+// This impl makes NoDerive irreflexive.\n+impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\n+\n+impl Eq for NoDerive { }\n+\n+#[derive(PartialEq, Eq)]\n+struct WrapParam<'a, T>(&'a &'a T);\n+\n+const WRAP_DOUBLY_INDIRECT_PARAM: & &WrapParam<NoDerive> = & &WrapParam(& & NoDerive(0));\n+\n+fn main() {\n+    match WRAP_DOUBLY_INDIRECT_PARAM {\n+        WRAP_DOUBLY_INDIRECT_PARAM => { panic!(\"WRAP_DOUBLY_INDIRECT_PARAM matched itself\"); }\n+        //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| WARN will become a hard error in a future release\n+        _ => { println!(\"WRAP_DOUBLY_INDIRECT_PARAM correctly did not match itself\"); }\n+    }\n+}"}, {"sha": "ee4652d15328310c20be473dffb6b9dfa5bf5975", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-param.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,10 @@\n+warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/cant-hide-behind-doubly-indirect-param.rs:24:9\n+   |\n+LL |         WRAP_DOUBLY_INDIRECT_PARAM => { panic!(\"WRAP_DOUBLY_INDIRECT_PARAM matched itself\"); }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(indirect_structural_match)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+"}, {"sha": "85d2e65a9a08068daca183296ba26bafaf675d14", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-embedded.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,29 @@\n+// This is part of a set of tests exploring the different ways a\n+// `#[structural_match]` ADT might try to hold a\n+// non-`#[structural_match]` in hidden manner that lets matches\n+// through that we had intended to reject.\n+//\n+// See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n+\n+// run-pass\n+\n+struct NoDerive(i32);\n+\n+// This impl makes NoDerive irreflexive.\n+impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\n+\n+impl Eq for NoDerive { }\n+\n+#[derive(PartialEq, Eq)]\n+struct WrapInline(NoDerive);\n+\n+const WRAP_INDIRECT_INLINE: & &WrapInline = & &WrapInline(NoDerive(0));\n+\n+fn main() {\n+    match WRAP_INDIRECT_INLINE {\n+        WRAP_INDIRECT_INLINE => { panic!(\"WRAP_INDIRECT_INLINE matched itself\"); }\n+        //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| WARN will become a hard error in a future release\n+        _ => { println!(\"WRAP_INDIRECT_INLINE did not match itself\"); }\n+    }\n+}"}, {"sha": "eb7468499316f9690cd439761cc110b4ae92c43e", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-embedded.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.stderr?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,10 @@\n+warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/cant-hide-behind-indirect-struct-embedded.rs:24:9\n+   |\n+LL |         WRAP_INDIRECT_INLINE => { panic!(\"WRAP_INDIRECT_INLINE matched itself\"); }\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(indirect_structural_match)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+"}, {"sha": "849aa1477669773e0191f946819e91f457afe23f", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-param.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,29 @@\n+// This is part of a set of tests exploring the different ways a\n+// `#[structural_match]` ADT might try to hold a\n+// non-`#[structural_match]` in hidden manner that lets matches\n+// through that we had intended to reject.\n+//\n+// See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n+\n+// run-pass\n+\n+struct NoDerive(i32);\n+\n+// This impl makes NoDerive irreflexive.\n+impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\n+\n+impl Eq for NoDerive { }\n+\n+#[derive(PartialEq, Eq)]\n+struct WrapParam<T>(T);\n+\n+const WRAP_INDIRECT_PARAM: & &WrapParam<NoDerive> = & &WrapParam(NoDerive(0));\n+\n+fn main() {\n+    match WRAP_INDIRECT_PARAM {\n+        WRAP_INDIRECT_PARAM => { panic!(\"WRAP_INDIRECT_PARAM matched itself\"); }\n+        //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| WARN will become a hard error in a future release\n+        _ => { println!(\"WRAP_INDIRECT_PARAM correctly did not match itself\"); }\n+    }\n+}"}, {"sha": "8a16556844454906bb3de9391b2fdc9b1f7de037", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-param.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.stderr?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,10 @@\n+warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/cant-hide-behind-indirect-struct-param.rs:24:9\n+   |\n+LL |         WRAP_INDIRECT_PARAM => { panic!(\"WRAP_INDIRECT_PARAM matched itself\"); }\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(indirect_structural_match)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+"}, {"sha": "9a96628cac69077ec71a754999b74f2bb224bfbf", "filename": "src/test/ui/rfc1445/issue-61118-match-slice-forbidden-without-eq.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fissue-61118-match-slice-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fissue-61118-match-slice-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-61118-match-slice-forbidden-without-eq.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,19 @@\n+// Issue 61118 pointed out a case where we hit an ICE during code gen:\n+// the compiler assumed that `PartialEq` was always implemented on any\n+// use of a `const` item in a pattern context, but the pre-existing\n+// checking for the presence of `#[structural_match]` was too shallow\n+// (see rust-lang/rust#62307), and so we hit cases where we were\n+// trying to dispatch to `PartialEq` on types that did not implement\n+// that trait.\n+\n+struct B(i32);\n+\n+const A: &[B] = &[];\n+\n+pub fn main() {\n+    match &[][..] {\n+        A => (),\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        _ => (),\n+    }\n+}"}, {"sha": "e8141f6108c5e1904b7a5e7a14add808d35bac4d", "filename": "src/test/ui/rfc1445/issue-61118-match-slice-forbidden-without-eq.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fissue-61118-match-slice-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fissue-61118-match-slice-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-61118-match-slice-forbidden-without-eq.stderr?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,8 @@\n+error: to use a constant of type `B` in a pattern, `B` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/issue-61118-match-slice-forbidden-without-eq.rs:15:9\n+   |\n+LL |         A => (),\n+   |         ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7646f7558a396f222973c52f7491930024472ca2", "filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,43 @@\n+// RFC 1445 introduced `#[structural_match]`; this attribute must\n+// appear on the `struct`/`enum` definition for any `const` used in a\n+// pattern.\n+//\n+// This is our (forever-unstable) way to mark a datatype as having a\n+// `PartialEq` implementation that is equivalent to recursion over its\n+// substructure. This avoids (at least in the short term) any need to\n+// resolve the question of what semantics is used for such matching.\n+// (See RFC 1445 for more details and discussion.)\n+\n+// Issue 62307 pointed out a case where the checking for\n+// `#[structural_match]` was too shallow.\n+\n+// run-pass\n+\n+#[derive(Debug)]\n+struct B(i32);\n+\n+// Overriding `PartialEq` to use this strange notion of \"equality\" exposes\n+// whether `match` is using structural-equality or method-dispatch\n+// under the hood, which is the antithesis of rust-lang/rfcs#1445\n+impl PartialEq for B {\n+    fn eq(&self, other: &B) -> bool { std::cmp::min(self.0, other.0) == 0 }\n+}\n+\n+fn main() {\n+    const RR_B0: & & B = & & B(0);\n+    const RR_B1: & & B = & & B(1);\n+\n+    match RR_B0 {\n+        RR_B1 => { println!(\"CLAIM RR0: {:?} matches {:?}\", RR_B1, RR_B0); }\n+        //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| WARN will become a hard error in a future release\n+        _ => { }\n+    }\n+\n+    match RR_B1 {\n+        RR_B1 => { println!(\"CLAIM RR1: {:?} matches {:?}\", RR_B1, RR_B1); }\n+        //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| WARN will become a hard error in a future release\n+        _ => { }\n+    }\n+}"}, {"sha": "ba0275f5f9f936e67ed86e31ad95b255ffd69fa2", "filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,19 @@\n+warning: to use a constant of type `B` in a pattern, `B` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:31:9\n+   |\n+LL |         RR_B1 => { println!(\"CLAIM RR0: {:?} matches {:?}\", RR_B1, RR_B0); }\n+   |         ^^^^^\n+   |\n+   = note: #[warn(indirect_structural_match)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+\n+warning: to use a constant of type `B` in a pattern, `B` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:38:9\n+   |\n+LL |         RR_B1 => { println!(\"CLAIM RR1: {:?} matches {:?}\", RR_B1, RR_B1); }\n+   |         ^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+"}, {"sha": "3d56fb05dc460ab3214b82424617ffc20fe4c94d", "filename": "src/test/ui/rfc1445/match-nonempty-array-forbidden-without-eq.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.rs?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,19 @@\n+// Issue 62307 pointed out a case where the checking for\n+// `#[structural_match]` was too shallow.\n+//\n+// Here we check similar behavior for non-empty arrays of types that\n+// do not derive `Eq`.\n+//\n+// (Current behavior for empty arrays differs and thus is not tested\n+// here; see rust-lang/rust#62336.)\n+\n+#[derive(PartialEq, Debug)]\n+struct B(i32);\n+\n+fn main() {\n+    const FOO: [B; 1] = [B(0)];\n+    match [B(1)] {\n+        FOO => { }\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    }\n+}"}, {"sha": "371f8a0aa1d7745e6e47ed08873335bbe4a1d9ed", "filename": "src/test/ui/rfc1445/match-nonempty-array-forbidden-without-eq.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02714b8ba3424fdfa1513fc893bb692472834a59/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.stderr?ref=02714b8ba3424fdfa1513fc893bb692472834a59", "patch": "@@ -0,0 +1,8 @@\n+error: to use a constant of type `B` in a pattern, `B` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/match-nonempty-array-forbidden-without-eq.rs:16:9\n+   |\n+LL |         FOO => { }\n+   |         ^^^\n+\n+error: aborting due to previous error\n+"}]}