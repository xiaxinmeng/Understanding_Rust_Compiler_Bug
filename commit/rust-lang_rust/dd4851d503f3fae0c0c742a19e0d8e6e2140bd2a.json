{"sha": "dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNDg1MWQ1MDNmM2ZhZTBjMGM3NDJhMTllMGQ4ZTZlMjE0MGJkMmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-13T07:58:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-13T07:58:44Z"}, "message": "Auto merge of #82053 - JohnTitor:rollup-ymi9q0g, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #81811 (Fix doc test for Vec::retain(), now passes clippy::eval_order_dependence)\n - #81900 (Organize trait test files)\n - #81995 (Fix suggestion to introduce explicit lifetime)\n - #82031 (Drop an unnecessary intermediate variable)\n - #82033 (Refactor `get_word_attr` to return only `Option`)\n - #82040 (Add test to prevent src link regression)\n - #82041 (Add docs for shared_from_slice From impls)\n - #82050 (Added tests to drain an empty vec)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "be763236b7a1c2aa252500531250ed1a329a0939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be763236b7a1c2aa252500531250ed1a329a0939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "html_url": "https://github.com/rust-lang/rust/commit/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21cbbdc44de84e3ea99bca239091e5d1c49af654", "url": "https://api.github.com/repos/rust-lang/rust/commits/21cbbdc44de84e3ea99bca239091e5d1c49af654", "html_url": "https://github.com/rust-lang/rust/commit/21cbbdc44de84e3ea99bca239091e5d1c49af654"}, {"sha": "0ca5fd7ebcbe57a6f9dcd84a3aef50278bc33628", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca5fd7ebcbe57a6f9dcd84a3aef50278bc33628", "html_url": "https://github.com/rust-lang/rust/commit/0ca5fd7ebcbe57a6f9dcd84a3aef50278bc33628"}], "stats": {"total": 800, "additions": 491, "deletions": 309}, "files": [{"sha": "63f8a7293d899d020687dc5ee69ae00af930f4d1", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -2248,13 +2248,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"...\",\n                 );\n                 if let Some(infer::RelateParamBound(_, t)) = origin {\n+                    let return_impl_trait = self\n+                        .in_progress_typeck_results\n+                        .map(|typeck_results| typeck_results.borrow().hir_owner)\n+                        .and_then(|owner| self.tcx.return_type_impl_trait(owner))\n+                        .is_some();\n                     let t = self.resolve_vars_if_possible(t);\n                     match t.kind() {\n                         // We've got:\n                         // fn get_later<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n                         // suggest:\n                         // fn get_later<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-                        ty::Closure(_, _substs) | ty::Opaque(_, _substs) => {\n+                        ty::Closure(_, _substs) | ty::Opaque(_, _substs) if return_impl_trait => {\n                             new_binding_suggestion(&mut err, type_param_span, bound_kind);\n                         }\n                         _ => {"}, {"sha": "c666cd774c478f4829286059033b3d559dfa7438", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -260,8 +260,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // local crate or were inlined into it along with some function.\n         // This may change if abstract return types of some sort are\n         // implemented.\n-        let tcx = self.tcx;\n-\n         self.typeck_results\n             .borrow()\n             .closure_min_captures_flattened(closure_id)\n@@ -276,7 +274,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 match capture {\n                     ty::UpvarCapture::ByValue(_) => upvar_ty,\n-                    ty::UpvarCapture::ByRef(borrow) => tcx.mk_ref(\n+                    ty::UpvarCapture::ByRef(borrow) => self.tcx.mk_ref(\n                         borrow.region,\n                         ty::TypeAndMut { ty: upvar_ty, mutbl: borrow.kind.to_mutbl_lossy() },\n                     ),"}, {"sha": "dac4acc4692a2de3070ba4545de1f657e53f93ba", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1652,6 +1652,16 @@ impl<T> From<T> for Rc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: Clone> From<&[T]> for Rc<[T]> {\n+    /// Allocate a reference-counted slice and fill it by cloning `v`'s items.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: &[i32] = &[1, 2, 3];\n+    /// let shared: Rc<[i32]> = Rc::from(original);\n+    /// assert_eq!(&[1, 2, 3], &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &[T]) -> Rc<[T]> {\n         <Self as RcFromSlice<T>>::from_slice(v)\n@@ -1660,6 +1670,15 @@ impl<T: Clone> From<&[T]> for Rc<[T]> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<&str> for Rc<str> {\n+    /// Allocate a reference-counted string slice and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let shared: Rc<str> = Rc::from(\"statue\");\n+    /// assert_eq!(\"statue\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &str) -> Rc<str> {\n         let rc = Rc::<[u8]>::from(v.as_bytes());\n@@ -1669,6 +1688,16 @@ impl From<&str> for Rc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<String> for Rc<str> {\n+    /// Allocate a reference-counted string slice and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: String = \"statue\".to_owned();\n+    /// let shared: Rc<str> = Rc::from(original);\n+    /// assert_eq!(\"statue\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: String) -> Rc<str> {\n         Rc::from(&v[..])\n@@ -1677,6 +1706,16 @@ impl From<String> for Rc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: ?Sized> From<Box<T>> for Rc<T> {\n+    /// Move a boxed object to a new, reference counted, allocation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: Box<i32> = Box::new(1);\n+    /// let shared: Rc<i32> = Rc::from(original);\n+    /// assert_eq!(1, *shared);\n+    /// ```\n     #[inline]\n     fn from(v: Box<T>) -> Rc<T> {\n         Rc::from_box(v)\n@@ -1685,6 +1724,16 @@ impl<T: ?Sized> From<Box<T>> for Rc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T> From<Vec<T>> for Rc<[T]> {\n+    /// Allocate a reference-counted slice and move `v`'s items into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);\n+    /// let shared: Rc<Vec<i32>> = Rc::from(original);\n+    /// assert_eq!(vec![1, 2, 3], *shared);\n+    /// ```\n     #[inline]\n     fn from(mut v: Vec<T>) -> Rc<[T]> {\n         unsafe {"}, {"sha": "aeae888dddc036faa4b4eeb232f8f2c85832297a", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -2285,6 +2285,16 @@ impl<T> From<T> for Arc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: Clone> From<&[T]> for Arc<[T]> {\n+    /// Allocate a reference-counted slice and fill it by cloning `v`'s items.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let original: &[i32] = &[1, 2, 3];\n+    /// let shared: Arc<[i32]> = Arc::from(original);\n+    /// assert_eq!(&[1, 2, 3], &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &[T]) -> Arc<[T]> {\n         <Self as ArcFromSlice<T>>::from_slice(v)\n@@ -2293,6 +2303,15 @@ impl<T: Clone> From<&[T]> for Arc<[T]> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<&str> for Arc<str> {\n+    /// Allocate a reference-counted `str` and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let shared: Arc<str> = Arc::from(\"eggplant\");\n+    /// assert_eq!(\"eggplant\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &str) -> Arc<str> {\n         let arc = Arc::<[u8]>::from(v.as_bytes());\n@@ -2302,6 +2321,16 @@ impl From<&str> for Arc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<String> for Arc<str> {\n+    /// Allocate a reference-counted `str` and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let unique: String = \"eggplant\".to_owned();\n+    /// let shared: Arc<str> = Arc::from(unique);\n+    /// assert_eq!(\"eggplant\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: String) -> Arc<str> {\n         Arc::from(&v[..])\n@@ -2310,6 +2339,16 @@ impl From<String> for Arc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: ?Sized> From<Box<T>> for Arc<T> {\n+    /// Move a boxed object to a new, reference-counted allocation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let unique: Box<str> = Box::from(\"eggplant\");\n+    /// let shared: Arc<str> = Arc::from(unique);\n+    /// assert_eq!(\"eggplant\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: Box<T>) -> Arc<T> {\n         Arc::from_box(v)\n@@ -2318,6 +2357,16 @@ impl<T: ?Sized> From<Box<T>> for Arc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T> From<Vec<T>> for Arc<[T]> {\n+    /// Allocate a reference-counted slice and move `v`'s items into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let unique: Vec<i32> = vec![1, 2, 3];\n+    /// let shared: Arc<[i32]> = Arc::from(unique);\n+    /// assert_eq!(&[1, 2, 3], &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(mut v: Vec<T>) -> Arc<[T]> {\n         unsafe {"}, {"sha": "b6166617789a02bcbf4ae7323cce820f51311cbc", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1385,13 +1385,14 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert_eq!(vec, [2, 4]);\n     /// ```\n     ///\n-    /// The exact order may be useful for tracking external state, like an index.\n+    /// Because the elements are visited exactly once in the original order,\n+    /// external state may be used to decide which elements to keep.\n     ///\n     /// ```\n     /// let mut vec = vec![1, 2, 3, 4, 5];\n     /// let keep = [false, true, true, false, true];\n-    /// let mut i = 0;\n-    /// vec.retain(|_| (keep[i], i += 1).0);\n+    /// let mut iter = keep.iter();\n+    /// vec.retain(|_| *iter.next().unwrap());\n     /// assert_eq!(vec, [2, 3, 5]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2969da58d4268ed2cc5924a516e11a45841075b5", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -609,6 +609,17 @@ fn test_move_items_zero_sized() {\n     assert_eq!(vec2, [(), (), ()]);\n }\n \n+#[test]\n+fn test_drain_empty_vec() {\n+    let mut vec: Vec<i32> = vec![];\n+    let mut vec2: Vec<i32> = vec![];\n+    for i in vec.drain(..) {\n+        vec2.push(i);\n+    }\n+    assert!(vec.is_empty());\n+    assert!(vec2.is_empty());\n+}\n+\n #[test]\n fn test_drain_items() {\n     let mut vec = vec![1, 2, 3];"}, {"sha": "7e7e417bb654455ba60f19448309b26f96ecb865", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -2161,18 +2161,20 @@ fn clean_use_statement(\n         return Vec::new();\n     }\n \n-    let (doc_meta_item, please_inline) = import.attrs.lists(sym::doc).get_word_attr(sym::inline);\n+    let inline_attr = import.attrs.lists(sym::doc).get_word_attr(sym::inline);\n     let pub_underscore = import.vis.node.is_pub() && name == kw::Underscore;\n \n-    if pub_underscore && please_inline {\n-        rustc_errors::struct_span_err!(\n-            cx.tcx.sess,\n-            doc_meta_item.unwrap().span(),\n-            E0780,\n-            \"anonymous imports cannot be inlined\"\n-        )\n-        .span_label(import.span, \"anonymous import\")\n-        .emit();\n+    if pub_underscore {\n+        if let Some(ref inline) = inline_attr {\n+            rustc_errors::struct_span_err!(\n+                cx.tcx.sess,\n+                inline.span(),\n+                E0780,\n+                \"anonymous imports cannot be inlined\"\n+            )\n+            .span_label(import.span, \"anonymous import\")\n+            .emit();\n+        }\n     }\n \n     // We consider inlining the documentation of `pub use` statements, but we\n@@ -2205,7 +2207,7 @@ fn clean_use_statement(\n         }\n         Import::new_glob(resolve_use_source(cx, path), true)\n     } else {\n-        if !please_inline {\n+        if inline_attr.is_none() {\n             if let Res::Def(DefKind::Mod, did) = path.res {\n                 if !did.is_local() && did.index == CRATE_DEF_INDEX {\n                     // if we're `pub use`ing an extern crate root, don't inline it unless we"}, {"sha": "e1ccbfd9da9deb7c4941cabbf4c587660fbc9dd9", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -438,7 +438,7 @@ impl AttributesExt for [ast::Attribute] {\n crate trait NestedAttributesExt {\n     /// Returns `true` if the attribute list contains a specific `Word`\n     fn has_word(self, word: Symbol) -> bool;\n-    fn get_word_attr(self, word: Symbol) -> (Option<ast::NestedMetaItem>, bool);\n+    fn get_word_attr(self, word: Symbol) -> Option<ast::NestedMetaItem>;\n }\n \n impl<I: Iterator<Item = ast::NestedMetaItem> + IntoIterator<Item = ast::NestedMetaItem>>\n@@ -448,11 +448,8 @@ impl<I: Iterator<Item = ast::NestedMetaItem> + IntoIterator<Item = ast::NestedMe\n         self.into_iter().any(|attr| attr.is_word() && attr.has_name(word))\n     }\n \n-    fn get_word_attr(mut self, word: Symbol) -> (Option<ast::NestedMetaItem>, bool) {\n-        match self.find(|attr| attr.is_word() && attr.has_name(word)) {\n-            Some(a) => (Some(a), true),\n-            None => (None, false),\n-        }\n+    fn get_word_attr(mut self, word: Symbol) -> Option<ast::NestedMetaItem> {\n+        self.find(|attr| attr.is_word() && attr.has_name(word))\n     }\n }\n "}, {"sha": "b7e7b11d27a831fd0469209b212dc41b2ad56320", "filename": "src/test/rustdoc/ensure-src-link.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fensure-src-link.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -0,0 +1,6 @@\n+#![crate_name = \"foo\"]\n+\n+// This test ensures that the [src] link is present on traits items.\n+\n+// @has foo/trait.Iterator.html '//h3[@id=\"method.zip\"]/a[@class=\"srclink\"]' \"[src]\"\n+pub use std::iter::Iterator;"}, {"sha": "b359826cb4ae460cb5e0824f1b198b3e2cf690a8", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -0,0 +1,17 @@\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n+   |\n+LL | /     foo.bar(move |_| {\n+LL | |\n+LL | |         t.test();\n+LL | |     });\n+   | |______^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 19:1...\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:19:1\n+   |\n+LL | fn func<T: Test>(foo: &Foo, t: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c6802ac6cc704e0a2839947f628d97e7d0c20dfa", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -0,0 +1,26 @@\n+// Regression test for #81650\n+\n+struct Foo<'a> {\n+    x: &'a mut &'a i32,\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn bar<F, T>(&self, f: F)\n+    where\n+        F: FnOnce(&Foo<'a>) -> T,\n+        F: 'a,\n+    {}\n+}\n+\n+trait Test {\n+    fn test(&self);\n+}\n+\n+fn func<T: Test>(foo: &Foo, t: T) {\n+    foo.bar(move |_| {\n+    //~^ ERROR the parameter type `T` may not live long enough\n+        t.test();\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "c7def9b668d9c4ae5a471ed96da243714a2608f5", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -0,0 +1,21 @@\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n+   |\n+LL | fn func<T: Test>(foo: &Foo, t: T) {\n+   |         -- help: consider adding an explicit lifetime bound...: `T: 'a +`\n+LL |     foo.bar(move |_| {\n+   |         ^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 19:1...\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:19:1\n+   |\n+LL | fn func<T: Test>(foo: &Foo, t: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature-2.rs:20:13: 23:6]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n+   |\n+LL |     foo.bar(move |_| {\n+   |         ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "28409e0c662775a88d86f42b31ff0d573f98b08d", "filename": "src/test/ui/traits/alias/ambiguous.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fambiguous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fambiguous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fambiguous.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias-ambiguous.rs"}, {"sha": "649ce72604e2de7977700b5b8dfd72c381d1ea1a", "filename": "src/test/ui/traits/alias/ambiguous.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fambiguous.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,16 +1,16 @@\n error[E0034]: multiple applicable items in scope\n-  --> $DIR/trait-alias-ambiguous.rs:21:7\n+  --> $DIR/ambiguous.rs:21:7\n    |\n LL |     t.foo();\n    |       ^^^ multiple `foo` found\n    |\n note: candidate #1 is defined in an impl of the trait `A` for the type `u8`\n-  --> $DIR/trait-alias-ambiguous.rs:8:9\n+  --> $DIR/ambiguous.rs:8:9\n    |\n LL |         fn foo(&self) {}\n    |         ^^^^^^^^^^^^^\n note: candidate #2 is defined in an impl of the trait `B` for the type `u8`\n-  --> $DIR/trait-alias-ambiguous.rs:11:9\n+  --> $DIR/ambiguous.rs:11:9\n    |\n LL |         fn foo(&self) {}\n    |         ^^^^^^^^^^^^^", "previous_filename": "src/test/ui/traits/trait-alias-ambiguous.stderr"}, {"sha": "9e412215512c90bc4e978bea8116d88a8637a9ee", "filename": "src/test/ui/traits/alias/auxiliary/greeter.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fauxiliary%2Fgreeter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fauxiliary%2Fgreeter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fauxiliary%2Fgreeter.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/auxiliary/trait_alias.rs"}, {"sha": "9e56b87e088133d6e632ec47f25b066698297922", "filename": "src/test/ui/traits/alias/auxiliary/send_sync.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fauxiliary%2Fsend_sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fauxiliary%2Fsend_sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fauxiliary%2Fsend_sync.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/auxiliary/trait_alias.rs"}, {"sha": "d8168f2990c4675b68cb6af0716eee43e0b4355c", "filename": "src/test/ui/traits/alias/basic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fbasic.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias.rs"}, {"sha": "b97eb38c5af8d915f9f7d39723945adb0d015dbc", "filename": "src/test/ui/traits/alias/bounds.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fbounds.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-bounds.rs"}, {"sha": "8919c643400a53f3dd93eeab07edf3563a9b0168", "filename": "src/test/ui/traits/alias/cross-crate.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,11 +1,11 @@\n-// aux-build:trait_alias.rs\n+// aux-build:send_sync.rs\n \n #![feature(trait_alias)]\n \n-extern crate trait_alias;\n+extern crate send_sync;\n \n use std::rc::Rc;\n-use trait_alias::SendSync;\n+use send_sync::SendSync;\n \n fn use_alias<T: SendSync>() {}\n ", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-cross-crate.rs"}, {"sha": "3b8fee8e8dfabb2cff567f059fcb0311bd6a0d51", "filename": "src/test/ui/traits/alias/cross-crate.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Rc<u32>` cannot be sent between threads safely\n-  --> $DIR/trait-alias-cross-crate.rs:14:17\n+  --> $DIR/cross-crate.rs:14:17\n    |\n LL | fn use_alias<T: SendSync>() {}\n    |                 -------- required by this bound in `use_alias`\n@@ -10,7 +10,7 @@ LL |     use_alias::<Rc<u32>>();\n    = help: the trait `Send` is not implemented for `Rc<u32>`\n \n error[E0277]: `Rc<u32>` cannot be shared between threads safely\n-  --> $DIR/trait-alias-cross-crate.rs:14:17\n+  --> $DIR/cross-crate.rs:14:17\n    |\n LL | fn use_alias<T: SendSync>() {}\n    |                 -------- required by this bound in `use_alias`", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-cross-crate.stderr"}, {"sha": "6e35793a0669a9f593bfb8ceabc2e16b9f373e97", "filename": "src/test/ui/traits/alias/impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimpl.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-impl.rs"}, {"sha": "cedcd10213da7bb778f446a3023fcee7b3f7e704", "filename": "src/test/ui/traits/alias/impl.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimpl.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0404]: expected trait, found trait alias `DefaultAlias`\n-  --> $DIR/trait-alias-impl.rs:5:6\n+  --> $DIR/impl.rs:5:6\n    |\n LL | impl DefaultAlias for () {}\n    |      ^^^^^^^^^^^^ not a trait", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-impl.stderr"}, {"sha": "868585cd09789f5dc097a760c2edbc422d584b0f", "filename": "src/test/ui/traits/alias/import-cross-crate.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimport-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimport-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimport-cross-crate.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,12 +1,12 @@\n // run-pass\n-// aux-build:trait_alias.rs\n+// aux-build:greeter.rs\n \n #![feature(trait_alias)]\n \n-extern crate trait_alias;\n+extern crate greeter;\n \n // Import only the alias, not the real trait.\n-use trait_alias::{Greet, Hi};\n+use greeter::{Greet, Hi};\n \n fn main() {\n     let hi = Hi;", "previous_filename": "src/test/ui/traits/trait-alias-import-cross-crate.rs"}, {"sha": "802a8f15698f2a8af4b3c8136151fe6b3710020a", "filename": "src/test/ui/traits/alias/import.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fimport.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias-import.rs"}, {"sha": "5e27ed3c6460eba62cc2ca8844ca0d1f7a2e5567", "filename": "src/test/ui/traits/alias/issue-60021-assoc-method-resolve.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-60021-assoc-method-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-60021-assoc-method-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-60021-assoc-method-resolve.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/issue-60021-assoc-method-resolve.rs"}, {"sha": "e49125d10249d635391f7b231862a285e24eb175", "filename": "src/test/ui/traits/alias/issue-72415-assoc-const-resolve.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-72415-assoc-const-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-72415-assoc-const-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-72415-assoc-const-resolve.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/issue-72415-assoc-const-resolve.rs"}, {"sha": "f9a7f36de43f1fd09ba38e1a9c3b7bc928fbb56d", "filename": "src/test/ui/traits/alias/issue-75983.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-75983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-75983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-75983.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/issue-75983.rs"}, {"sha": "284baa481497c9aece261db687df3d9c1c712036", "filename": "src/test/ui/traits/alias/maybe-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fmaybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fmaybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fmaybe-bound.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-maybe-bound.rs"}, {"sha": "88feb89170dd333e8f031787fe72d72bdb089a8a", "filename": "src/test/ui/traits/alias/no-duplicates.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-no-duplicates.rs"}, {"sha": "9f38dd40c3acb672d242ac3f804b51a92eac67cf", "filename": "src/test/ui/traits/alias/no-duplicates.stderr", "status": "renamed", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:16:22\n+  --> $DIR/no-duplicates.rs:16:22\n    |\n LL | trait _0 = Obj;\n    |            ---\n@@ -16,7 +16,7 @@ LL | type _T00 = dyn _0 + _0;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:19:22\n+  --> $DIR/no-duplicates.rs:19:22\n    |\n LL | trait _0 = Obj;\n    |            ---\n@@ -35,7 +35,7 @@ LL | type _T01 = dyn _1 + _0;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:22:22\n+  --> $DIR/no-duplicates.rs:22:22\n    |\n LL | trait _0 = Obj;\n    |            ---\n@@ -57,7 +57,7 @@ LL | type _T02 = dyn _1 + _1;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:25:23\n+  --> $DIR/no-duplicates.rs:25:23\n    |\n LL | trait _0 = Obj;\n    |            --- additional non-auto trait\n@@ -73,7 +73,7 @@ LL | type _T03 = dyn Obj + _1;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:28:22\n+  --> $DIR/no-duplicates.rs:28:22\n    |\n LL | trait _0 = Obj;\n    |            --- first non-auto trait\n@@ -89,7 +89,7 @@ LL | type _T04 = dyn _1 + Obj;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:37:17\n+  --> $DIR/no-duplicates.rs:37:17\n    |\n LL | trait _0 = Obj;\n    |            ---\n@@ -114,7 +114,7 @@ LL | type _T10 = dyn _2 + _3;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:40:22\n+  --> $DIR/no-duplicates.rs:40:22\n    |\n LL | trait _0 = Obj;\n    |            --- additional non-auto trait\n@@ -133,7 +133,7 @@ LL | type _T11 = dyn _3 + _2;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:43:23\n+  --> $DIR/no-duplicates.rs:43:23\n    |\n LL | trait _0 = Obj;\n    |            --- additional non-auto trait\n@@ -150,7 +150,7 @@ LL | type _T12 = dyn Obj + _2;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:46:17\n+  --> $DIR/no-duplicates.rs:46:17\n    |\n LL | trait _0 = Obj;\n    |            ---\n@@ -175,7 +175,7 @@ LL | type _T13 = dyn _2 + Obj;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:49:22\n+  --> $DIR/no-duplicates.rs:49:22\n    |\n LL | trait _0 = Obj;\n    |            --- first non-auto trait\n@@ -194,7 +194,7 @@ LL | type _T14 = dyn _1 + _3;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:52:22\n+  --> $DIR/no-duplicates.rs:52:22\n    |\n LL | trait _0 = Obj;\n    |            --- additional non-auto trait\n@@ -213,7 +213,7 @@ LL | type _T15 = dyn _3 + _1;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:55:22\n+  --> $DIR/no-duplicates.rs:55:22\n    |\n LL | trait _0 = Obj;\n    |            --- first non-auto trait\n@@ -234,7 +234,7 @@ LL | type _T16 = dyn _1 + _4;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:58:22\n+  --> $DIR/no-duplicates.rs:58:22\n    |\n LL | trait _0 = Obj;\n    |            --- additional non-auto trait\n@@ -255,7 +255,7 @@ LL | type _T17 = dyn _4 + _1;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:65:22\n+  --> $DIR/no-duplicates.rs:65:22\n    |\n LL | trait _5 = Obj + Send;\n    |            ---\n@@ -272,7 +272,7 @@ LL | type _T20 = dyn _5 + _5;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:68:23\n+  --> $DIR/no-duplicates.rs:68:23\n    |\n LL | trait _5 = Obj + Send;\n    |            --- additional non-auto trait\n@@ -286,7 +286,7 @@ LL | type _T21 = dyn Obj + _5;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:71:22\n+  --> $DIR/no-duplicates.rs:71:22\n    |\n LL | trait _5 = Obj + Send;\n    |            --- first non-auto trait\n@@ -300,7 +300,7 @@ LL | type _T22 = dyn _5 + Obj;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:74:36\n+  --> $DIR/no-duplicates.rs:74:36\n    |\n LL | trait _5 = Obj + Send;\n    |            --- first non-auto trait\n@@ -314,7 +314,7 @@ LL | type _T23 = dyn _5 + Send + Sync + Obj;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:81:17\n+  --> $DIR/no-duplicates.rs:81:17\n    |\n LL | trait _5 = Obj + Send;\n    |            ---\n@@ -337,7 +337,7 @@ LL | type _T30 = dyn _6;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:84:17\n+  --> $DIR/no-duplicates.rs:84:17\n    |\n LL | trait _5 = Obj + Send;\n    |            ---\n@@ -360,7 +360,7 @@ LL | type _T31 = dyn _6 + Send;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:87:24\n+  --> $DIR/no-duplicates.rs:87:24\n    |\n LL | trait _5 = Obj + Send;\n    |            ---\n@@ -383,7 +383,7 @@ LL | type _T32 = dyn Send + _6;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:95:22\n+  --> $DIR/no-duplicates.rs:95:22\n    |\n LL | trait _5 = Obj + Send;\n    |            --- first non-auto trait\n@@ -402,7 +402,7 @@ LL | type _T40 = dyn _8 + Obj;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:98:23\n+  --> $DIR/no-duplicates.rs:98:23\n    |\n LL | trait _5 = Obj + Send;\n    |            --- additional non-auto trait\n@@ -421,7 +421,7 @@ LL | type _T41 = dyn Obj + _8;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:101:22\n+  --> $DIR/no-duplicates.rs:101:22\n    |\n LL | trait _3 = Obj;\n    |            --- additional non-auto trait\n@@ -445,7 +445,7 @@ LL | type _T42 = dyn _8 + _4;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:104:22\n+  --> $DIR/no-duplicates.rs:104:22\n    |\n LL | trait _3 = Obj;\n    |            --- first non-auto trait\n@@ -469,7 +469,7 @@ LL | type _T43 = dyn _4 + _8;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:107:36\n+  --> $DIR/no-duplicates.rs:107:36\n    |\n LL | trait _3 = Obj;\n    |            --- first non-auto trait\n@@ -493,7 +493,7 @@ LL | type _T44 = dyn _4 + Send + Sync + _8;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:117:22\n+  --> $DIR/no-duplicates.rs:117:22\n    |\n LL | trait _9 = for<'a> ObjL<'a>;\n    |            ---------------- first non-auto trait\n@@ -508,7 +508,7 @@ LL | type _T50 = dyn _9 + _10;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-duplicates.rs:123:23\n+  --> $DIR/no-duplicates.rs:123:23\n    |\n LL | trait _11 = ObjT<for<'a> fn(&'a u8)>;\n    |             ------------------------ first non-auto trait", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-no-duplicates.stderr"}, {"sha": "4dad8c0f87349346da21abf49acd5e489031e52c", "filename": "src/test/ui/traits/alias/no-extra-traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-no-extra-traits.rs"}, {"sha": "cdb5cd90b85c62757ee7165b85acda72d785f02e", "filename": "src/test/ui/traits/alias/no-extra-traits.stderr", "status": "renamed", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:16:22\n+  --> $DIR/no-extra-traits.rs:16:22\n    |\n LL | trait _0 = ObjA;\n    |            ---- first non-auto trait\n@@ -13,7 +13,7 @@ LL | type _T00 = dyn _0 + ObjB;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:19:24\n+  --> $DIR/no-extra-traits.rs:19:24\n    |\n LL | trait _0 = ObjA;\n    |            ---- additional non-auto trait\n@@ -27,7 +27,7 @@ LL | type _T01 = dyn ObjB + _0;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:22:24\n+  --> $DIR/no-extra-traits.rs:22:24\n    |\n LL | trait _0 = ObjA;\n    |            ---- additional non-auto trait\n@@ -43,7 +43,7 @@ LL | type _T02 = dyn ObjB + _1;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:25:22\n+  --> $DIR/no-extra-traits.rs:25:22\n    |\n LL | trait _0 = ObjA;\n    |            ---- first non-auto trait\n@@ -59,7 +59,7 @@ LL | type _T03 = dyn _1 + ObjB;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:34:22\n+  --> $DIR/no-extra-traits.rs:34:22\n    |\n LL | trait _2 = ObjB;\n    |            ----\n@@ -78,7 +78,7 @@ LL | type _T10 = dyn _2 + _3;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:37:22\n+  --> $DIR/no-extra-traits.rs:37:22\n    |\n LL | trait _2 = ObjB;\n    |            ----\n@@ -97,7 +97,7 @@ LL | type _T11 = dyn _3 + _2;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:40:22\n+  --> $DIR/no-extra-traits.rs:40:22\n    |\n LL | trait _2 = ObjB;\n    |            ----\n@@ -118,7 +118,7 @@ LL | type _T12 = dyn _2 + _4;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:43:22\n+  --> $DIR/no-extra-traits.rs:43:22\n    |\n LL | trait _2 = ObjB;\n    |            ----\n@@ -139,7 +139,7 @@ LL | type _T13 = dyn _4 + _2;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:50:22\n+  --> $DIR/no-extra-traits.rs:50:22\n    |\n LL | trait _0 = ObjA;\n    |            ---- additional non-auto trait\n@@ -158,7 +158,7 @@ LL | type _T20 = dyn _5 + _1;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:53:22\n+  --> $DIR/no-extra-traits.rs:53:22\n    |\n LL | trait _0 = ObjA;\n    |            ---- first non-auto trait\n@@ -177,7 +177,7 @@ LL | type _T21 = dyn _1 + _5;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:56:22\n+  --> $DIR/no-extra-traits.rs:56:22\n    |\n LL | trait _5 = Sync + ObjB + Send;\n    |                   ---- first non-auto trait\n@@ -191,7 +191,7 @@ LL | type _T22 = dyn _5 + ObjA;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:59:24\n+  --> $DIR/no-extra-traits.rs:59:24\n    |\n LL | trait _5 = Sync + ObjB + Send;\n    |                   ---- additional non-auto trait\n@@ -205,7 +205,7 @@ LL | type _T23 = dyn ObjA + _5;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:62:29\n+  --> $DIR/no-extra-traits.rs:62:29\n    |\n LL | trait _0 = ObjA;\n    |            ---- additional non-auto trait\n@@ -224,7 +224,7 @@ LL | type _T24 = dyn Send + _5 + _1 + Sync;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:65:29\n+  --> $DIR/no-extra-traits.rs:65:29\n    |\n LL | trait _0 = ObjA;\n    |            ---- first non-auto trait\n@@ -243,7 +243,7 @@ LL | type _T25 = dyn _1 + Sync + _5 + Send;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:68:36\n+  --> $DIR/no-extra-traits.rs:68:36\n    |\n LL | trait _5 = Sync + ObjB + Send;\n    |                   ---- first non-auto trait\n@@ -257,7 +257,7 @@ LL | type _T26 = dyn Sync + Send + _5 + ObjA;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:71:38\n+  --> $DIR/no-extra-traits.rs:71:38\n    |\n LL | trait _5 = Sync + ObjB + Send;\n    |                   ---- additional non-auto trait\n@@ -271,7 +271,7 @@ LL | type _T27 = dyn Send + Sync + ObjA + _5;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:80:17\n+  --> $DIR/no-extra-traits.rs:80:17\n    |\n LL | trait _0 = ObjA;\n    |            ---- first non-auto trait\n@@ -296,7 +296,7 @@ LL | type _T30 = dyn _6;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:83:17\n+  --> $DIR/no-extra-traits.rs:83:17\n    |\n LL | trait _0 = ObjA;\n    |            ---- first non-auto trait\n@@ -321,7 +321,7 @@ LL | type _T31 = dyn _6 + Send;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:86:24\n+  --> $DIR/no-extra-traits.rs:86:24\n    |\n LL | trait _0 = ObjA;\n    |            ---- first non-auto trait\n@@ -346,7 +346,7 @@ LL | type _T32 = dyn Send + _6;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:89:17\n+  --> $DIR/no-extra-traits.rs:89:17\n    |\n LL | trait _0 = ObjA;\n    |            ---- first non-auto trait\n@@ -381,7 +381,7 @@ LL | type _T33 = dyn _8;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:92:17\n+  --> $DIR/no-extra-traits.rs:92:17\n    |\n LL | trait _0 = ObjA;\n    |            ---- first non-auto trait\n@@ -416,7 +416,7 @@ LL | type _T34 = dyn _8 + Send;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:95:24\n+  --> $DIR/no-extra-traits.rs:95:24\n    |\n LL | trait _0 = ObjA;\n    |            ---- first non-auto trait\n@@ -451,7 +451,7 @@ LL | type _T35 = dyn Send + _8;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:103:23\n+  --> $DIR/no-extra-traits.rs:103:23\n    |\n LL | trait _5 = Sync + ObjB + Send;\n    |                   ---- first non-auto trait\n@@ -470,7 +470,7 @@ LL | type _T40 = dyn _10 + ObjA;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:106:24\n+  --> $DIR/no-extra-traits.rs:106:24\n    |\n LL | trait _5 = Sync + ObjB + Send;\n    |                   ---- additional non-auto trait\n@@ -489,7 +489,7 @@ LL | type _T41 = dyn ObjA + _10;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:109:23\n+  --> $DIR/no-extra-traits.rs:109:23\n    |\n LL | trait _0 = ObjA;\n    |            ---- additional non-auto trait\n@@ -513,7 +513,7 @@ LL | type _T42 = dyn _10 + _1;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:112:37\n+  --> $DIR/no-extra-traits.rs:112:37\n    |\n LL | trait _5 = Sync + ObjB + Send;\n    |                   ---- first non-auto trait\n@@ -532,7 +532,7 @@ LL | type _T43 = dyn Send + _10 + Sync + ObjA;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:115:24\n+  --> $DIR/no-extra-traits.rs:115:24\n    |\n LL | trait _5 = Sync + ObjB + Send;\n    |                   ---- additional non-auto trait\n@@ -551,7 +551,7 @@ LL | type _T44 = dyn ObjA + _10 + Send + Sync;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-alias-no-extra-traits.rs:118:37\n+  --> $DIR/no-extra-traits.rs:118:37\n    |\n LL | trait _0 = ObjA;\n    |            ---- additional non-auto trait", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-no-extra-traits.stderr"}, {"sha": "5c753ff207c1a6664281d815b41aae643ef11f8d", "filename": "src/test/ui/traits/alias/object-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-fail.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.rs"}, {"sha": "325bc6d2808595c9eaf2b34ee8a633fe2fccfe27", "filename": "src/test/ui/traits/alias/object-fail.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-fail.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Eq` cannot be made into an object\n-  --> $DIR/trait-alias-object-fail.rs:7:13\n+  --> $DIR/object-fail.rs:7:13\n    |\n LL |     let _: &dyn EqAlias = &123;\n    |             ^^^^^^^^^^^ `Eq` cannot be made into an object\n@@ -11,7 +11,7 @@ LL | pub trait Eq: PartialEq<Self> {\n    |               ^^^^^^^^^^^^^^^ the trait cannot be made into an object because it uses `Self` as a type parameter\n \n error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n-  --> $DIR/trait-alias-object-fail.rs:9:17\n+  --> $DIR/object-fail.rs:9:17\n    |\n LL |     let _: &dyn IteratorAlias = &vec![123].into_iter();\n    |                 ^^^^^^^^^^^^^ help: specify the associated type: `IteratorAlias<Item = Type>`", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.stderr"}, {"sha": "1440f02df1df884d135709cbc13669d44d24189b", "filename": "src/test/ui/traits/alias/object-wf.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject-wf.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-object-wf.rs"}, {"sha": "12177cd827fdfd2aa5ccfeeebbcb2b1b7aa07748", "filename": "src/test/ui/traits/alias/object.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fobject.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-object.rs"}, {"sha": "e4abf314e0a967b99283b3e0ff23235491d36508", "filename": "src/test/ui/traits/alias/only-maybe-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-only-maybe-bound.rs"}, {"sha": "99589edb535ff93acaab556546c14c37ff833c46", "filename": "src/test/ui/traits/alias/only-maybe-bound.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,11 +1,11 @@\n error[E0224]: at least one trait is required for an object type\n-  --> $DIR/trait-alias-only-maybe-bound.rs:13:12\n+  --> $DIR/only-maybe-bound.rs:13:12\n    |\n LL | type _T0 = dyn _1;\n    |            ^^^^^^\n \n error[E0224]: at least one trait is required for an object type\n-  --> $DIR/trait-alias-only-maybe-bound.rs:19:12\n+  --> $DIR/only-maybe-bound.rs:19:12\n    |\n LL | type _T1 = dyn _2;\n    |            ^^^^^^", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-only-maybe-bound.stderr"}, {"sha": "039bbce8c1ed0f279237e20da56fe8ea0b72cf91", "filename": "src/test/ui/traits/alias/syntax-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fsyntax-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fsyntax-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fsyntax-fail.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-syntax-fail.rs"}, {"sha": "748b92056d105a40a239c34b45185569ba3f1fa0", "filename": "src/test/ui/traits/alias/syntax-fail.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fsyntax-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fsyntax-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fsyntax-fail.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,23 +1,23 @@\n error: trait aliases cannot be `auto`\n-  --> $DIR/trait-alias-syntax-fail.rs:4:1\n+  --> $DIR/syntax-fail.rs:4:1\n    |\n LL | auto trait A = Foo;\n    | ^^^^^^^^^^^^^^^^^^^ trait aliases cannot be `auto`\n \n error: trait aliases cannot be `unsafe`\n-  --> $DIR/trait-alias-syntax-fail.rs:5:1\n+  --> $DIR/syntax-fail.rs:5:1\n    |\n LL | unsafe trait B = Foo;\n    | ^^^^^^^^^^^^^^^^^^^^^ trait aliases cannot be `unsafe`\n \n error: bounds are not allowed on trait aliases\n-  --> $DIR/trait-alias-syntax-fail.rs:7:8\n+  --> $DIR/syntax-fail.rs:7:8\n    |\n LL | trait C: Ord = Eq;\n    |        ^^^^^\n \n error: bounds are not allowed on trait aliases\n-  --> $DIR/trait-alias-syntax-fail.rs:8:8\n+  --> $DIR/syntax-fail.rs:8:8\n    |\n LL | trait D: = Eq;\n    |        ^", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-syntax-fail.stderr"}, {"sha": "17557a51aa7234aeca9340e25ed845993207c15e", "filename": "src/test/ui/traits/alias/syntax.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fsyntax.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-syntax.rs"}, {"sha": "d10e2abb0e1a39b40a6d3364572c7221a84ea5db", "filename": "src/test/ui/traits/alias/wf.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fwf.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-wf.rs"}, {"sha": "b07145f4d38f007887cd9ceb94603bf477f4426d", "filename": "src/test/ui/traits/alias/wf.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fwf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fwf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fwf.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `T: Foo` is not satisfied\n-  --> $DIR/trait-alias-wf.rs:5:14\n+  --> $DIR/wf.rs:5:14\n    |\n LL | trait A<T: Foo> {}\n    |            --- required by this bound in `A`", "previous_filename": "src/test/ui/traits/trait-alias/trait-alias-wf.stderr"}, {"sha": "ede01afae0294c71160ef132c7ed0d0c1c4f0a43", "filename": "src/test/ui/traits/anon-static-method.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fanon-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fanon-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fanon-static-method.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/anon-trait-static-method.rs"}, {"sha": "13ebf9d8d6680696af42a528247e67e321153870", "filename": "src/test/ui/traits/as-struct-constructor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fas-struct-constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fas-struct-constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fas-struct-constructor.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-as-struct-constructor.rs"}, {"sha": "d06e85f3a20381b34e814deecfa744c2ac5b1138", "filename": "src/test/ui/traits/as-struct-constructor.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fas-struct-constructor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fas-struct-constructor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fas-struct-constructor.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0574]: expected struct, variant or union type, found trait `TraitNotAStruct`\n-  --> $DIR/trait-as-struct-constructor.rs:4:5\n+  --> $DIR/as-struct-constructor.rs:4:5\n    |\n LL |     TraitNotAStruct{ value: 0 };\n    |     ^^^^^^^^^^^^^^^ not a struct, variant or union type", "previous_filename": "src/test/ui/traits/trait-as-struct-constructor.stderr"}, {"sha": "579ce7cf70669c9f55c96078d84460a2c45d551d", "filename": "src/test/ui/traits/assoc-type-in-superbad.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-assoc-type-in-supertrait-bad.rs"}, {"sha": "cbdb6b96f468f48ea83ab127f9fdd683e8d660e9", "filename": "src/test/ui/traits/assoc-type-in-superbad.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<std::vec::IntoIter<i32> as Iterator>::Item == u32`\n-  --> $DIR/traits-assoc-type-in-supertrait-bad.rs:12:16\n+  --> $DIR/assoc-type-in-superbad.rs:12:16\n    |\n LL |     type Key = u32;\n    |                ^^^ expected `i32`, found `u32`", "previous_filename": "src/test/ui/traits/traits-assoc-type-in-supertrait-bad.stderr"}, {"sha": "7d6a754cc5abb1dafcea662e81b90a7a1382243a", "filename": "src/test/ui/traits/assoc-type-in-supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-supertrait.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-assoc-type-in-supertrait.rs"}, {"sha": "c66009fe24c06ce0cd9cbd2dacffe285c8f4f720", "filename": "src/test/ui/traits/associated_type_bound/assoc_type_bound_with_struct.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/assoc_type_bound_with_struct.rs"}, {"sha": "7cf872eb6ac6907553e32a62343fcd55354eb4fc", "filename": "src/test/ui/traits/associated_type_bound/assoc_type_bound_with_struct.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/assoc_type_bound_with_struct.stderr"}, {"sha": "b1f124c7ea26aedbb3774e02d6d8f99ba2f4d6e1", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-1.rs"}, {"sha": "170ed6eacfd4174c43b4bbd86a909afe88662c1c", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-1.stderr"}, {"sha": "1422dda276b9b0a78eba0956d6ac92543f909b3f", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2-ok.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-2-ok.rs"}, {"sha": "eb2fb6e841bce2e2b1454df1ad0cbd2489919f15", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-2.rs"}, {"sha": "04e2348634ed805b54c55f6147d2df86a53159d4", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-2.stderr"}, {"sha": "ba04fd93accec2e8b417517f7b6ff36787c7207b", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-3.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-3.rs"}, {"sha": "ade552c4bab41a0dc45c5c500247cce82888300d", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-3.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-3.stderr"}, {"sha": "e9ca1563f3b67cfa182ddac0e708d01adde405b9", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-4.rs"}, {"sha": "fc9f31c5ebc7e91a7fe600d27af57ef99dc3ffe1", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-4.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-4.stderr"}, {"sha": "7d733ad26b7528a45d1d98e8d7fc45eb5bcb0f91", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-5.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-5.rs"}, {"sha": "bd2b789cd990896d29c3776659d051bd48f5bf89", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-5.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-5.stderr"}, {"sha": "cb196d67f673d5467f5d3c3dccb76d9fbfd6d0f3", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-6.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-6.rs"}, {"sha": "ea1fdaf46f6ae602dc9be10ea72853b78595d68f", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-6.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/check-trait-object-bounds-6.stderr"}, {"sha": "cc8f9dc5190843fee6134ca0784e61b32e9d8f2c", "filename": "src/test/ui/traits/astconv-cycle-between-and-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fastconv-cycle-between-and-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fastconv-cycle-between-and-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fastconv-cycle-between-and-type.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/astconv-cycle-between-trait-and-type.rs"}, {"sha": "6aa010258ebd5c6b15a24f30f1caa7ad6aed5dcf", "filename": "src/test/ui/traits/bound/auxiliary/crate_a1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fauxiliary%2Fcrate_a1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fauxiliary%2Fcrate_a1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fauxiliary%2Fcrate_a1.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/auxiliary/crate_a1.rs"}, {"sha": "d6057db5e63f1644a544d4f8a023ea1270effb90", "filename": "src/test/ui/traits/bound/auxiliary/crate_a2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fauxiliary%2Fcrate_a2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fauxiliary%2Fcrate_a2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fauxiliary%2Fcrate_a2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/auxiliary/crate_a2.rs"}, {"sha": "7e9592eee2c0d0c164cf91411129c743c8ec2665", "filename": "src/test/ui/traits/bound/auxiliary/on_structs_and_enums_xc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fauxiliary%2Fon_structs_and_enums_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fauxiliary%2Fon_structs_and_enums_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fauxiliary%2Fon_structs_and_enums_xc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/auxiliary/trait_bounds_on_structs_and_enums_xc.rs"}, {"sha": "8c8a7eb7d9da1c679ccd107b9e3f27f739896592", "filename": "src/test/ui/traits/bound/basic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fbasic.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-basic.rs"}, {"sha": "18382bb59a4e5b45ead308e9311d85e501f04d72", "filename": "src/test/ui/traits/bound/generic_trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fgeneric_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fgeneric_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fgeneric_trait.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds.rs"}, {"sha": "de6c2afa2bbe1ced719b17382e75908f23f8421a", "filename": "src/test/ui/traits/bound/impl-comparison-duplicates.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fimpl-comparison-duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fimpl-comparison-duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fimpl-comparison-duplicates.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-impl-comparison-duplicates.rs"}, {"sha": "941f66c056104081da515f7994f1553eb62abd85", "filename": "src/test/ui/traits/bound/in-arc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fin-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fin-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fin-arc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-in-arc.rs"}, {"sha": "868b334070bddcbd18512bdc0b50c12d7022baa2", "filename": "src/test/ui/traits/bound/multiple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fmultiple.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/multiple-trait-bounds.rs"}, {"sha": "33c9f2f00cfeeb4654c421c2f20430a8bbe16279", "filename": "src/test/ui/traits/bound/not-on-bare-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-not-on-bare-trait.rs"}, {"sha": "e7fc0fa5ec0ecb0b6cc50531bfc2e2ce2b61c9c4", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,13 +1,13 @@\n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-bounds-not-on-bare-trait.rs:7:12\n+  --> $DIR/not-on-bare-trait.rs:7:12\n    |\n LL | fn foo(_x: Foo + Send) {\n    |            ^^^^^^^^^^ help: use `dyn`: `dyn Foo + Send`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n \n error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time\n-  --> $DIR/trait-bounds-not-on-bare-trait.rs:7:8\n+  --> $DIR/not-on-bare-trait.rs:7:8\n    |\n LL | fn foo(_x: Foo + Send) {\n    |        ^^ doesn't have a size known at compile-time", "previous_filename": "src/test/ui/traits/trait-bounds-not-on-bare-trait.stderr"}, {"sha": "8633e9d7a4cefb9b1e6a2628259052e3de3749af", "filename": "src/test/ui/traits/bound/not-on-struct.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-struct.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-not-on-struct.rs"}, {"sha": "951e974ad2677d84230de6b0198d3d30d9ecd21c", "filename": "src/test/ui/traits/bound/not-on-struct.stderr", "status": "renamed", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-struct.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,43 +1,43 @@\n error[E0226]: only a single explicit lifetime bound is permitted\n-  --> $DIR/trait-bounds-not-on-struct.rs:25:25\n+  --> $DIR/not-on-struct.rs:25:25\n    |\n LL | fn e() -> 'static + A + 'static {\n    |                         ^^^^^^^\n \n error[E0226]: only a single explicit lifetime bound is permitted\n-  --> $DIR/trait-bounds-not-on-struct.rs:29:53\n+  --> $DIR/not-on-struct.rs:29:53\n    |\n LL | fn f<'a,T,E>(iter: Iterator<Item='a + Result<T,E> + 'a>) {\n    |                                                     ^^\n \n error[E0404]: expected trait, found struct `Foo`\n-  --> $DIR/trait-bounds-not-on-struct.rs:8:16\n+  --> $DIR/not-on-struct.rs:8:16\n    |\n LL | fn foo(_x: Box<Foo + Send>) { }\n    |                ^^^ not a trait\n    |\n help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n-  --> $DIR/trait-bounds-not-on-struct.rs:8:22\n+  --> $DIR/not-on-struct.rs:8:22\n    |\n LL | fn foo(_x: Box<Foo + Send>) { }\n    |                ---   ^^^^ ...because of this bound\n    |                |\n    |                expected this type to be a trait...\n \n error[E0404]: expected trait, found struct `Vec`\n-  --> $DIR/trait-bounds-not-on-struct.rs:10:29\n+  --> $DIR/not-on-struct.rs:10:29\n    |\n LL | type TypeAlias<T> = Box<dyn Vec<T>>;\n    |                             ^^^^^^ not a trait\n \n error[E0404]: expected trait, found struct `A`\n-  --> $DIR/trait-bounds-not-on-struct.rs:13:11\n+  --> $DIR/not-on-struct.rs:13:11\n    |\n LL | fn a() -> A + 'static {\n    |           ^ not a trait\n    |\n help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n-  --> $DIR/trait-bounds-not-on-struct.rs:13:15\n+  --> $DIR/not-on-struct.rs:13:15\n    |\n LL | fn a() -> A + 'static {\n    |           -   ^^^^^^^ ...because of this bound\n@@ -49,13 +49,13 @@ LL | fn a() -> A {\n    |           --\n \n error[E0404]: expected trait, found enum `Result`\n-  --> $DIR/trait-bounds-not-on-struct.rs:16:34\n+  --> $DIR/not-on-struct.rs:16:34\n    |\n LL | fn b<'a,T,E>(iter: Iterator<Item=Result<T,E> + 'a>) {\n    |                                  ^^^^^^^^^^^ not a trait\n    |\n help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n-  --> $DIR/trait-bounds-not-on-struct.rs:16:48\n+  --> $DIR/not-on-struct.rs:16:48\n    |\n LL | fn b<'a,T,E>(iter: Iterator<Item=Result<T,E> + 'a>) {\n    |                                  -----------   ^^ ...because of this bound\n@@ -67,13 +67,13 @@ LL | fn b<'a,T,E>(iter: Iterator<Item=Result<T,E>>) {\n    |                                            --\n \n error[E0404]: expected trait, found struct `A`\n-  --> $DIR/trait-bounds-not-on-struct.rs:19:21\n+  --> $DIR/not-on-struct.rs:19:21\n    |\n LL | fn c() -> 'static + A {\n    |                     ^ not a trait\n    |\n help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n-  --> $DIR/trait-bounds-not-on-struct.rs:19:11\n+  --> $DIR/not-on-struct.rs:19:11\n    |\n LL | fn c() -> 'static + A {\n    |           ^^^^^^^   - expected this type to be a trait...\n@@ -85,13 +85,13 @@ LL | fn c() -> A {\n    |          --\n \n error[E0404]: expected trait, found enum `Result`\n-  --> $DIR/trait-bounds-not-on-struct.rs:22:39\n+  --> $DIR/not-on-struct.rs:22:39\n    |\n LL | fn d<'a,T,E>(iter: Iterator<Item='a + Result<T,E>>) {\n    |                                       ^^^^^^^^^^^ not a trait\n    |\n help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n-  --> $DIR/trait-bounds-not-on-struct.rs:22:34\n+  --> $DIR/not-on-struct.rs:22:34\n    |\n LL | fn d<'a,T,E>(iter: Iterator<Item='a + Result<T,E>>) {\n    |                                  ^^   ----------- expected this type to be a trait...\n@@ -103,13 +103,13 @@ LL | fn d<'a,T,E>(iter: Iterator<Item=Result<T,E>>) {\n    |                                 --\n \n error[E0404]: expected trait, found struct `A`\n-  --> $DIR/trait-bounds-not-on-struct.rs:25:21\n+  --> $DIR/not-on-struct.rs:25:21\n    |\n LL | fn e() -> 'static + A + 'static {\n    |                     ^ not a trait\n    |\n help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n-  --> $DIR/trait-bounds-not-on-struct.rs:25:11\n+  --> $DIR/not-on-struct.rs:25:11\n    |\n LL | fn e() -> 'static + A + 'static {\n    |           ^^^^^^^   -   ^^^^^^^ ...because of these bounds\n@@ -121,13 +121,13 @@ LL | fn e() -> A {\n    |          ---\n \n error[E0404]: expected trait, found enum `Result`\n-  --> $DIR/trait-bounds-not-on-struct.rs:29:39\n+  --> $DIR/not-on-struct.rs:29:39\n    |\n LL | fn f<'a,T,E>(iter: Iterator<Item='a + Result<T,E> + 'a>) {\n    |                                       ^^^^^^^^^^^ not a trait\n    |\n help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n-  --> $DIR/trait-bounds-not-on-struct.rs:29:34\n+  --> $DIR/not-on-struct.rs:29:34\n    |\n LL | fn f<'a,T,E>(iter: Iterator<Item='a + Result<T,E> + 'a>) {\n    |                                  ^^   -----------   ^^ ...because of these bounds\n@@ -139,15 +139,15 @@ LL | fn f<'a,T,E>(iter: Iterator<Item=Result<T,E>>) {\n    |                                 --         --\n \n error[E0404]: expected trait, found struct `Traitor`\n-  --> $DIR/trait-bounds-not-on-struct.rs:35:11\n+  --> $DIR/not-on-struct.rs:35:11\n    |\n LL | trait Trait {}\n    | ----------- similarly named trait `Trait` defined here\n LL | fn g() -> Traitor + 'static {\n    |           ^^^^^^^ not a trait\n    |\n help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n-  --> $DIR/trait-bounds-not-on-struct.rs:35:21\n+  --> $DIR/not-on-struct.rs:35:21\n    |\n LL | fn g() -> Traitor + 'static {\n    |           -------   ^^^^^^^ ...because of this bound", "previous_filename": "src/test/ui/traits/trait-bounds-not-on-struct.stderr"}, {"sha": "6a6fcf5301d2066cc4b7e05e8c7abed90acdaebf", "filename": "src/test/ui/traits/bound/on-structs-and-enums-in-fns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-fns.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-fns.rs"}, {"sha": "346b690d441da9b09ded0ad9de3cdd771905a652", "filename": "src/test/ui/traits/bound/on-structs-and-enums-in-fns.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-fns.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `u32: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:13:15\n+  --> $DIR/on-structs-and-enums-in-fns.rs:13:15\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`\n@@ -8,7 +8,7 @@ LL | fn explode(x: Foo<u32>) {}\n    |               ^^^^^^^^ the trait `Trait` is not implemented for `u32`\n \n error[E0277]: the trait bound `f32: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:16:14\n+  --> $DIR/on-structs-and-enums-in-fns.rs:16:14\n    |\n LL | enum Bar<T:Trait> {\n    |            ----- required by this bound in `Bar`", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-fns.stderr"}, {"sha": "d379499521c7cbc06374984f93550700a657429e", "filename": "src/test/ui/traits/bound/on-structs-and-enums-in-impls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-impls.rs"}, {"sha": "47bab6c375f7a48116e68fe50ae43d545846aff9", "filename": "src/test/ui/traits/bound/on-structs-and-enums-in-impls.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `u16: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-in-impls.rs:20:6\n+  --> $DIR/on-structs-and-enums-in-impls.rs:20:6\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-impls.stderr"}, {"sha": "21c0ce80f8a8d5fca47da519a3e9ea30be7cec16", "filename": "src/test/ui/traits/bound/on-structs-and-enums-locals.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-locals.rs"}, {"sha": "967b7320ab6cd9d4cc64009f465615d2a05efc38", "filename": "src/test/ui/traits/bound/on-structs-and-enums-locals.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `usize: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-locals.rs:15:14\n+  --> $DIR/on-structs-and-enums-locals.rs:15:14\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`\n@@ -8,7 +8,7 @@ LL |     let baz: Foo<usize> = loop { };\n    |              ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n \n error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-locals.rs:10:15\n+  --> $DIR/on-structs-and-enums-locals.rs:10:15\n    |\n LL | struct Foo<T:Trait> {\n    | ------------------- required by `Foo`", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-locals.stderr"}, {"sha": "4dc4fecc91fcfc36da7c098a8e737296bfc54959", "filename": "src/test/ui/traits/bound/on-structs-and-enums-rpass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-rpass.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-rpass.rs"}, {"sha": "df3f8b8a59961df3bae49b941a044b376fdde60a", "filename": "src/test/ui/traits/bound/on-structs-and-enums-static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-static.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-static.rs"}, {"sha": "2cf8a623b3fb36f6d14d1195cc72db86954269ad", "filename": "src/test/ui/traits/bound/on-structs-and-enums-static.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-static.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `usize: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-static.rs:9:11\n+  --> $DIR/on-structs-and-enums-static.rs:9:11\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-static.stderr"}, {"sha": "94316d240405718de8d74b18771533c8cebfe662", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:on_structs_and_enums_xc.rs\n+\n+extern crate on_structs_and_enums_xc;\n+\n+use on_structs_and_enums_xc::{Bar, Foo, Trait};\n+\n+fn explode(x: Foo<usize>) {}\n+//~^ ERROR E0277\n+\n+fn kaboom(y: Bar<f32>) {}\n+//~^ ERROR E0277\n+\n+fn main() {\n+}"}, {"sha": "0adb20d4828777f1269e37f960b880de3d4bbae5", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,21 +1,21 @@\n error[E0277]: the trait bound `usize: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-xc.rs:7:15\n+  --> $DIR/on-structs-and-enums-xc.rs:7:15\n    |\n LL | fn explode(x: Foo<usize>) {}\n    |               ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n    | \n-  ::: $DIR/auxiliary/trait_bounds_on_structs_and_enums_xc.rs:5:18\n+  ::: $DIR/auxiliary/on_structs_and_enums_xc.rs:5:18\n    |\n LL | pub struct Foo<T:Trait> {\n    |                  ----- required by this bound in `Foo`\n \n error[E0277]: the trait bound `f32: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-xc.rs:10:14\n+  --> $DIR/on-structs-and-enums-xc.rs:10:14\n    |\n LL | fn kaboom(y: Bar<f32>) {}\n    |              ^^^^^^^^ the trait `Trait` is not implemented for `f32`\n    | \n-  ::: $DIR/auxiliary/trait_bounds_on_structs_and_enums_xc.rs:9:16\n+  ::: $DIR/auxiliary/on_structs_and_enums_xc.rs:9:16\n    |\n LL | pub enum Bar<T:Trait> {\n    |                ----- required by this bound in `Bar`", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-xc.stderr"}, {"sha": "8156868e048d94285523bcf81e65df25e04db978", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -0,0 +1,15 @@\n+// aux-build:on_structs_and_enums_xc.rs\n+\n+extern crate on_structs_and_enums_xc;\n+\n+use on_structs_and_enums_xc::{Bar, Foo, Trait};\n+\n+fn main() {\n+    let foo = Foo {\n+    //~^ ERROR E0277\n+        x: 3\n+    };\n+    let bar: Bar<f64> = return;\n+    //~^ ERROR E0277\n+    let _ = bar;\n+}"}, {"sha": "08f0f20e7480a688acf89032a9125723a976416b", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc1.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,16 +1,16 @@\n error[E0277]: the trait bound `f64: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-xc1.rs:12:14\n+  --> $DIR/on-structs-and-enums-xc1.rs:12:14\n    |\n LL |     let bar: Bar<f64> = return;\n    |              ^^^^^^^^ the trait `Trait` is not implemented for `f64`\n    | \n-  ::: $DIR/auxiliary/trait_bounds_on_structs_and_enums_xc.rs:9:16\n+  ::: $DIR/auxiliary/on_structs_and_enums_xc.rs:9:16\n    |\n LL | pub enum Bar<T:Trait> {\n    |                ----- required by this bound in `Bar`\n \n error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-xc1.rs:8:15\n+  --> $DIR/on-structs-and-enums-xc1.rs:8:15\n    |\n LL |     let foo = Foo {\n    |               ^^^ the trait `Trait` is not implemented for `{integer}`", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-xc1.stderr"}, {"sha": "024084fa724f1efe7f52e2b071361d63e5126d63", "filename": "src/test/ui/traits/bound/on-structs-and-enums.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums.rs"}, {"sha": "0c69e7b6feef6e265c6683f8b6f840ac50585237", "filename": "src/test/ui/traits/bound/on-structs-and-enums.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:13:9\n+  --> $DIR/on-structs-and-enums.rs:13:9\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`\n@@ -13,7 +13,7 @@ LL | impl<T: Trait> Foo<T> {\n    |       ^^^^^^^\n \n error[E0277]: the trait bound `isize: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:19:8\n+  --> $DIR/on-structs-and-enums.rs:19:8\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`\n@@ -22,7 +22,7 @@ LL |     a: Foo<isize>,\n    |        ^^^^^^^^^^ the trait `Trait` is not implemented for `isize`\n \n error[E0277]: the trait bound `usize: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:23:10\n+  --> $DIR/on-structs-and-enums.rs:23:10\n    |\n LL | enum Bar<T:Trait> {\n    |            ----- required by this bound in `Bar`\n@@ -31,7 +31,7 @@ LL |     Quux(Bar<usize>),\n    |          ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n \n error[E0277]: the trait bound `U: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:27:8\n+  --> $DIR/on-structs-and-enums.rs:27:8\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`\n@@ -45,7 +45,7 @@ LL | struct Badness<U: Trait> {\n    |                 ^^^^^^^\n \n error[E0277]: the trait bound `V: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:31:21\n+  --> $DIR/on-structs-and-enums.rs:31:21\n    |\n LL | enum Bar<T:Trait> {\n    |            ----- required by this bound in `Bar`\n@@ -59,7 +59,7 @@ LL | enum MoreBadness<V: Trait> {\n    |                   ^^^^^^^\n \n error[E0277]: the trait bound `i32: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:35:5\n+  --> $DIR/on-structs-and-enums.rs:35:5\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`\n@@ -68,7 +68,7 @@ LL |     Foo<i32>,\n    |     ^^^^^^^^ the trait `Trait` is not implemented for `i32`\n \n error[E0277]: the trait bound `u8: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:39:29\n+  --> $DIR/on-structs-and-enums.rs:39:29\n    |\n LL | enum Bar<T:Trait> {\n    |            ----- required by this bound in `Bar`", "previous_filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums.stderr"}, {"sha": "0023ff654e84cfe321cd73b8681ee493bcd7d0dd", "filename": "src/test/ui/traits/bound/recursion.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Frecursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Frecursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Frecursion.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-recursion.rs"}, {"sha": "1012edb109336db1e8c2a910d683541659308804", "filename": "src/test/ui/traits/bound/same-crate-name.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-same-crate-name.rs"}, {"sha": "c48f2f0efcfb23d44314b5dc206448429393400e", "filename": "src/test/ui/traits/bound/same-crate-name.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Foo: main::a::Bar` is not satisfied\n-  --> $DIR/trait-bounds-same-crate-name.rs:31:20\n+  --> $DIR/same-crate-name.rs:31:20\n    |\n LL |         a::try_foo(foo);\n    |                    ^^^ the trait `main::a::Bar` is not implemented for `Foo`\n@@ -17,7 +17,7 @@ LL | impl Bar for Foo {}\n    = note: perhaps two different versions of crate `crate_a2` are being used?\n \n error[E0277]: the trait bound `DoesNotImplementTrait: main::a::Bar` is not satisfied\n-  --> $DIR/trait-bounds-same-crate-name.rs:38:20\n+  --> $DIR/same-crate-name.rs:38:20\n    |\n LL |         a::try_foo(implements_no_traits);\n    |                    ^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `DoesNotImplementTrait`\n@@ -28,7 +28,7 @@ LL | pub fn try_foo(x: impl Bar) {}\n    |                        --- required by this bound in `try_foo`\n \n error[E0277]: the trait bound `ImplementsWrongTraitConditionally<isize>: main::a::Bar` is not satisfied\n-  --> $DIR/trait-bounds-same-crate-name.rs:45:20\n+  --> $DIR/same-crate-name.rs:45:20\n    |\n LL |         a::try_foo(other_variant_implements_mismatched_trait);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `ImplementsWrongTraitConditionally<isize>`\n@@ -46,7 +46,7 @@ LL | impl Bar for ImplementsWrongTraitConditionally<isize> {}\n    = note: perhaps two different versions of crate `crate_a2` are being used?\n \n error[E0277]: the trait bound `ImplementsTraitForUsize<isize>: main::a::Bar` is not satisfied\n-  --> $DIR/trait-bounds-same-crate-name.rs:51:20\n+  --> $DIR/same-crate-name.rs:51:20\n    |\n LL |         a::try_foo(other_variant_implements_correct_trait);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `ImplementsTraitForUsize<isize>`", "previous_filename": "src/test/ui/traits/trait-bounds-same-crate-name.stderr"}, {"sha": "65b6f6faa425099a58edbdf14fe132e6246b92f7", "filename": "src/test/ui/traits/bound/sugar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsugar.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-bounds-sugar.rs"}, {"sha": "feb0c73a09d3d6335abf01036e14fc4dd108e81c", "filename": "src/test/ui/traits/bound/sugar.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsugar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsugar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsugar.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/trait-bounds-sugar.rs:12:7\n+  --> $DIR/sugar.rs:12:7\n    |\n LL |     a(x);\n    |       ^ expected trait `Foo + Send`, found trait `Foo + Sync`", "previous_filename": "src/test/ui/traits/trait-bounds-sugar.stderr"}, {"sha": "15676e4554aeb3b271f3fe3a256c5689f589a08f", "filename": "src/test/ui/traits/cache-issue-18209.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcache-issue-18209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcache-issue-18209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcache-issue-18209.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-cache-issue-18209.rs"}, {"sha": "2e115c732b9d76d282e30dc0357532f7a39ec609", "filename": "src/test/ui/traits/coercion-generic-bad.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-coercion-generic-bad.rs"}, {"sha": "f367d396da0c2ecdd5999e3583bf2e1cf5e11caa", "filename": "src/test/ui/traits/coercion-generic-bad.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Struct: Trait<isize>` is not satisfied\n-  --> $DIR/trait-coercion-generic-bad.rs:16:36\n+  --> $DIR/coercion-generic-bad.rs:16:36\n    |\n LL |     let s: Box<dyn Trait<isize>> = Box::new(Struct { person: \"Fred\" });\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<isize>` is not implemented for `Struct`", "previous_filename": "src/test/ui/traits/trait-coercion-generic-bad.stderr"}, {"sha": "af478df6dfa995f671dc2c003d30366f662fa86a", "filename": "src/test/ui/traits/coercion-generic-regions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-regions.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-coercion-generic-regions.rs"}, {"sha": "5cfb64901233ea79e780e6613e3da060cdeb0581", "filename": "src/test/ui/traits/coercion-generic-regions.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic-regions.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `person` does not live long enough\n-  --> $DIR/trait-coercion-generic-regions.rs:17:24\n+  --> $DIR/coercion-generic-regions.rs:17:24\n    |\n LL |     let person: &str = &person;\n    |                        ^^^^^^^", "previous_filename": "src/test/ui/traits/trait-coercion-generic-regions.stderr"}, {"sha": "bf4dda49519107cef0b14585479d001d6b9d3f64", "filename": "src/test/ui/traits/coercion-generic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcoercion-generic.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-coercion-generic.rs"}, {"sha": "cba33af1f1aca1f9b8221b5bdd8c912c630c8ce6", "filename": "src/test/ui/traits/coercion.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcoercion.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-coercion.rs"}, {"sha": "90e5dcd68e8c4ad1a2fa88f1cc4af1a74f7fe7e3", "filename": "src/test/ui/traits/composition-trivial.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcomposition-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcomposition-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcomposition-trivial.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-composition-trivial.rs"}, {"sha": "a9c194486fecb93e2ebdb0cdc8d590951998f231", "filename": "src/test/ui/traits/conditional-dispatch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fconditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fconditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fconditional-dispatch.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-conditional-dispatch.rs"}, {"sha": "ba88670032c95049ecbb32ca1346608d0e699197", "filename": "src/test/ui/traits/conditional-model-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fconditional-model-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fconditional-model-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fconditional-model-fn.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-conditional-model-fn.rs"}, {"sha": "f031dd9ca48f6c34905b5d8f0c767e537992b94e", "filename": "src/test/ui/traits/copy-guessing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcopy-guessing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcopy-guessing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcopy-guessing.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-copy-guessing.rs"}, {"sha": "c62d01403c7f86a88a1f79deb37939ae7072369a", "filename": "src/test/ui/traits/cycle-type-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcycle-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fcycle-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-type-trait.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/cycle-trait-type-trait.rs"}, {"sha": "0fb26af80c78d3c15f28182953c6117bed3b10c0", "filename": "src/test/ui/traits/default-method/auxiliary/xc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fauxiliary%2Fxc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fauxiliary%2Fxc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fauxiliary%2Fxc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/auxiliary/trait_default_method_xc_aux.rs"}, {"sha": "9792338204c70bc176e8d93e69fc972fb777cb12", "filename": "src/test/ui/traits/default-method/auxiliary/xc_2.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fauxiliary%2Fxc_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fauxiliary%2Fxc_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fauxiliary%2Fxc_2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,6 +1,6 @@\n-// aux-build:trait_default_method_xc_aux.rs\n+// aux-build:xc.rs\n \n-extern crate trait_default_method_xc_aux as aux;\n+extern crate xc as aux;\n use aux::A;\n \n pub struct a_struct { pub x: isize }", "previous_filename": "src/test/ui/traits/auxiliary/trait_default_method_xc_aux_2.rs"}, {"sha": "6a5d5c8ba2d744aecdd5152b470abc8dc7a12d0a", "filename": "src/test/ui/traits/default-method/bound-subst.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-default-method-bound-subst.rs"}, {"sha": "78eabba2d2320ffcd6afcfc4a398127472083515", "filename": "src/test/ui/traits/default-method/bound-subst2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-default-method-bound-subst2.rs"}, {"sha": "dd39dec4b634d8c4571ff9f38bd78edc12fab91e", "filename": "src/test/ui/traits/default-method/bound-subst3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst3.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-default-method-bound-subst3.rs"}, {"sha": "ef133064582556ab68cccd5b9b3586c39e170e80", "filename": "src/test/ui/traits/default-method/bound-subst4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound-subst4.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-default-method-bound-subst4.rs"}, {"sha": "0855a9db85110bd3abff2a32a92b085986ce497e", "filename": "src/test/ui/traits/default-method/bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fbound.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-default-method-bound.rs"}, {"sha": "2b50ee9b42210951e8ac08f3008b88fc1dd42091", "filename": "src/test/ui/traits/default-method/macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fmacro.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-default-method-macro.rs"}, {"sha": "5f8e983b09cfb8e6b00d95aa62c63b421716ee74", "filename": "src/test/ui/traits/default-method/mut.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fmut.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-default-method-mut.rs"}, {"sha": "cdf4d1e148c8402d401e17760f42c4d4300b0d8f", "filename": "src/test/ui/traits/default-method/self.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fself.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-default-method-self.rs"}, {"sha": "939ad51355e72c76fb44a720f9cd52de9ec51160", "filename": "src/test/ui/traits/default-method/supervtable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fsupervtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fsupervtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fsupervtable.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/default-method-supertrait-vtable.rs"}, {"sha": "dc41938ec8993572ac925366e4db95a4ae39efbc", "filename": "src/test/ui/traits/default-method/trivial.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Ftrivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Ftrivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Ftrivial.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-default-method-trivial.rs"}, {"sha": "1de61dcf896898a300f60398ad0d325c287f9fb3", "filename": "src/test/ui/traits/default-method/xc-2.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fxc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fxc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fxc-2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,11 +1,11 @@\n // run-pass\n-// aux-build:trait_default_method_xc_aux.rs\n-// aux-build:trait_default_method_xc_aux_2.rs\n+// aux-build:xc.rs\n+// aux-build:xc_2.rs\n \n \n \n-extern crate trait_default_method_xc_aux as aux;\n-extern crate trait_default_method_xc_aux_2 as aux2;\n+extern crate xc as aux;\n+extern crate xc_2 as aux2;\n use aux::A;\n use aux2::{a_struct, welp};\n ", "previous_filename": "src/test/ui/traits/trait-default-method-xc-2.rs"}, {"sha": "76a1573d6c767caf93000194f6a0dd666decdda1", "filename": "src/test/ui/traits/default-method/xc.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fxc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fxc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Fxc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -2,10 +2,10 @@\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n-// aux-build:trait_default_method_xc_aux.rs\n+// aux-build:xc.rs\n \n \n-extern crate trait_default_method_xc_aux as aux;\n+extern crate xc as aux;\n use aux::{A, TestEquality, Something};\n use aux::B;\n ", "previous_filename": "src/test/ui/traits/trait-default-method-xc.rs"}, {"sha": "1f9bdf56f100706478e97d226d8499c68b24bf21", "filename": "src/test/ui/traits/duplicate-methods.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fduplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fduplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fduplicate-methods.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-duplicate-methods.rs"}, {"sha": "6aa88d0dff4fab28dd3618814b6a1002d5779f9e", "filename": "src/test/ui/traits/duplicate-methods.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fduplicate-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fduplicate-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fduplicate-methods.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0428]: the name `orange` is defined multiple times\n-  --> $DIR/trait-duplicate-methods.rs:3:5\n+  --> $DIR/duplicate-methods.rs:3:5\n    |\n LL |     fn orange(&self);\n    |     ----------------- previous definition of the value `orange` here", "previous_filename": "src/test/ui/traits/trait-duplicate-methods.stderr"}, {"sha": "03aef0184badd65f6da51b162b5928c6a313b07f", "filename": "src/test/ui/traits/elaborate-type-region.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Felaborate-type-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Felaborate-type-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Felaborate-type-region.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-elaborate-type-region.rs"}, {"sha": "3413db6a6845be90d5460cf6ad33fa390cba3151", "filename": "src/test/ui/traits/false-ambiguity-where-clause-builtin-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Ffalse-ambiguity-where-clause-builtin-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Ffalse-ambiguity-where-clause-builtin-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ffalse-ambiguity-where-clause-builtin-bound.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-false-ambiguity-where-clause-builtin-bound.rs"}, {"sha": "80efe1c9375dd91af70c2955095aeccad938af26", "filename": "src/test/ui/traits/generic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fgeneric.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-generic.rs"}, {"sha": "d22ac72d1cc4d48ad6f165cb045394b58f4e7323", "filename": "src/test/ui/traits/impl-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-1.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-impl-1.rs"}, {"sha": "7694e3f5cfae6b40acda872933956ce46dea99c8", "filename": "src/test/ui/traits/impl-1.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-1.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `foo` found for reference `&i32` in the current scope\n-  --> $DIR/trait-impl-1.rs:15:7\n+  --> $DIR/impl-1.rs:15:7\n    |\n LL |     x.foo();\n    |       ^^^ method not found in `&i32`", "previous_filename": "src/test/ui/traits/trait-impl-1.stderr"}, {"sha": "804ffec12c2bfd61d909f9ca4968abf83f518620", "filename": "src/test/ui/traits/impl-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-impl-2.rs"}, {"sha": "0c885447bb0ee0e92cbd2b43f63ba0fb1d203914", "filename": "src/test/ui/traits/impl-can-not-have-untraitful-items.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-can-not-have-untraitful-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-can-not-have-untraitful-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-can-not-have-untraitful-items.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-impl-can-not-have-untraitful-items.rs"}, {"sha": "7f56f34ea157452f4f2f3eb5488ee74194231bb1", "filename": "src/test/ui/traits/impl-can-not-have-untraitful-items.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-can-not-have-untraitful-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-can-not-have-untraitful-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-can-not-have-untraitful-items.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,17 +1,17 @@\n error[E0438]: const `BAR` is not a member of trait `A`\n-  --> $DIR/trait-impl-can-not-have-untraitful-items.rs:4:5\n+  --> $DIR/impl-can-not-have-untraitful-items.rs:4:5\n    |\n LL |     const BAR: () = ();\n    |     ^^^^^^^^^^^^^^^^^^^ not a member of trait `A`\n \n error[E0437]: type `Baz` is not a member of trait `A`\n-  --> $DIR/trait-impl-can-not-have-untraitful-items.rs:5:5\n+  --> $DIR/impl-can-not-have-untraitful-items.rs:5:5\n    |\n LL |     type Baz = ();\n    |     ^^^^^^^^^^^^^^ not a member of trait `A`\n \n error[E0407]: method `foo` is not a member of trait `A`\n-  --> $DIR/trait-impl-can-not-have-untraitful-items.rs:6:5\n+  --> $DIR/impl-can-not-have-untraitful-items.rs:6:5\n    |\n LL |     fn foo(&self) { }\n    |     ^^^^^^^^^^^^^^^^^ not a member of trait `A`", "previous_filename": "src/test/ui/traits/trait-impl-can-not-have-untraitful-items.stderr"}, {"sha": "53400622d7c308f921f91d81d434dfea9ff22d14", "filename": "src/test/ui/traits/impl-different-num-params.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-different-num-params.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-impl-different-num-params.rs"}, {"sha": "910ba351064100211158302fe34c11673c77c8d5", "filename": "src/test/ui/traits/impl-different-num-params.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-different-num-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-different-num-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-different-num-params.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0050]: method `bar` has 1 parameter but the declaration in trait `Foo::bar` has 2\n-  --> $DIR/trait-impl-different-num-params.rs:5:12\n+  --> $DIR/impl-different-num-params.rs:5:12\n    |\n LL |     fn bar(&self, x: usize) -> Self;\n    |            --------------- trait requires 2 parameters", "previous_filename": "src/test/ui/traits/trait-impl-different-num-params.stderr"}, {"sha": "9004627c52374122415d3959efb1bf1c03d0249d", "filename": "src/test/ui/traits/impl-for-module.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-for-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-for-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-for-module.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-impl-for-module.rs"}, {"sha": "6ec4083b513dbf1a5abf84c5e8bc7ef725437a9a", "filename": "src/test/ui/traits/impl-for-module.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-for-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-for-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-for-module.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0573]: expected type, found module `a`\n-  --> $DIR/trait-impl-for-module.rs:7:12\n+  --> $DIR/impl-for-module.rs:7:12\n    |\n LL | trait A {\n    | ------- similarly named trait `A` defined here", "previous_filename": "src/test/ui/traits/trait-impl-for-module.stderr"}, {"sha": "683b1c1aa43e64abe59f8ea257bb7303b780a277", "filename": "src/test/ui/traits/impl-method-mismatch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-impl-method-mismatch.rs"}, {"sha": "c909446d9dcb4ca627a292b4d971ad3b857d20a9", "filename": "src/test/ui/traits/impl-method-mismatch.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0053]: method `jumbo` has an incompatible type for trait\n-  --> $DIR/trait-impl-method-mismatch.rs:7:5\n+  --> $DIR/impl-method-mismatch.rs:7:5\n    |\n LL |     fn jumbo(&self, x: &usize) -> usize;\n    |     ------------------------------------ type in trait", "previous_filename": "src/test/ui/traits/trait-impl-method-mismatch.stderr"}, {"sha": "e490967b690475107a6fed637edd0e574061eab2", "filename": "src/test/ui/traits/impl-object-overlap-issue-23853.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-object-overlap-issue-23853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-object-overlap-issue-23853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-object-overlap-issue-23853.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-impl-object-overlap-issue-23853.rs"}, {"sha": "05b9db9724bdf177f17e685374c6121244b01e52", "filename": "src/test/ui/traits/impl-of-supertrait-has-wrong-lifetime-parameters.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-impl-of-supertrait-has-wrong-lifetime-parameters.rs"}, {"sha": "539a56f010a84863b70a37c66b256d3fa5a1e28f", "filename": "src/test/ui/traits/impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,21 +1,21 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/trait-impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n+  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |             ^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 24:6...\n-  --> $DIR/trait-impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:6\n+  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:6\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |      ^^\n note: ...but the lifetime must also be valid for the lifetime `'b` as defined on the impl at 24:9...\n-  --> $DIR/trait-impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:9\n+  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:9\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |         ^^\n note: ...so that the types are compatible\n-  --> $DIR/trait-impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n+  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |             ^^^^^^^^^^", "previous_filename": "src/test/ui/traits/trait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr"}, {"sha": "14796ce19c88ed08b62d726b53e1f674e13405d3", "filename": "src/test/ui/traits/impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-impl.rs"}, {"sha": "205d50a2ed9ce5bc88a7b0c508536d108da8378d", "filename": "src/test/ui/traits/inductive-overflow/lifetime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-lifetime.rs"}, {"sha": "659f9e26e3e621862353e1ad331f43d3275f1ccb", "filename": "src/test/ui/traits/inductive-overflow/lifetime.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `Box<X<C<'_>>>: NotAuto`\n-  --> $DIR/traits-inductive-overflow-lifetime.rs:27:5\n+  --> $DIR/lifetime.rs:27:5\n    |\n LL | fn is_send<S: NotAuto>() {}\n    |               ------- required by this bound in `is_send`", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-lifetime.stderr"}, {"sha": "40ac9214674e29d4edd10ece60733999c8b30e39", "filename": "src/test/ui/traits/inductive-overflow/simultaneous.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-simultaneous.rs"}, {"sha": "484ac8511790f13b2ed21000b8979f96156df7dc", "filename": "src/test/ui/traits/inductive-overflow/simultaneous.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `{integer}: Tweedledum`\n-  --> $DIR/traits-inductive-overflow-simultaneous.rs:18:5\n+  --> $DIR/simultaneous.rs:18:5\n    |\n LL | fn is_ee<T: Combo>(t: T) {\n    |             ----- required by this bound in `is_ee`", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-simultaneous.stderr"}, {"sha": "5fea47a1be87daf50ce2ac7119d2a6c3284bd767", "filename": "src/test/ui/traits/inductive-overflow/supertrait-auto-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-auto-trait.rs"}, {"sha": "6a0f7398cf1390e496450092952a9ac66e61392e", "filename": "src/test/ui/traits/inductive-overflow/supertrait-auto-trait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,13 +1,13 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/traits-inductive-overflow-supertrait-auto-trait.rs:8:19\n+  --> $DIR/supertrait-auto-trait.rs:8:19\n    |\n LL | auto trait Magic: Copy {}\n    |            -----  ^^^^ help: remove the super traits\n    |            |\n    |            auto trait cannot have super traits\n \n error[E0277]: the trait bound `NoClone: Copy` is not satisfied\n-  --> $DIR/traits-inductive-overflow-supertrait-auto-trait.rs:16:23\n+  --> $DIR/supertrait-auto-trait.rs:16:23\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n    |            ----- required by this bound in `copy`", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-auto-trait.stderr"}, {"sha": "c7aa4d90f58355af989050b1a83151465cdefb4d", "filename": "src/test/ui/traits/inductive-overflow/supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-supertrait.rs"}, {"sha": "dfb967601e9871fe9d3dbc9e367da8c82dc1f222", "filename": "src/test/ui/traits/inductive-overflow/supertrait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `NoClone: Magic`\n-  --> $DIR/traits-inductive-overflow-supertrait.rs:13:18\n+  --> $DIR/supertrait.rs:13:18\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n    |            ----- required by this bound in `copy`", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-supertrait.stderr"}, {"sha": "463b55d8581f8512d66b06ff0294f290fd6ac321", "filename": "src/test/ui/traits/inductive-overflow/two-traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-two-traits.rs"}, {"sha": "d3f2931f25d47ac892d1d453eb5e151fcac58d98", "filename": "src/test/ui/traits/inductive-overflow/two-traits.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `T` cannot be shared between threads safely\n-  --> $DIR/traits-inductive-overflow-two-traits.rs:11:5\n+  --> $DIR/two-traits.rs:11:5\n    |\n LL |     type X: Trait;\n    |             ----- required by this bound in `Magic::X`\n@@ -13,7 +13,7 @@ LL | impl<T: Magic + Sync> Magic for T {\n    |               ^^^^^^\n \n error[E0275]: overflow evaluating the requirement `*mut (): Magic`\n-  --> $DIR/traits-inductive-overflow-two-traits.rs:20:5\n+  --> $DIR/two-traits.rs:20:5\n    |\n LL | fn wizard<T: Magic>() { check::<<T as Magic>::X>(); }\n    |              ----- required by this bound in `wizard`", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-two-traits.stderr"}, {"sha": "ed258dbb24c3f7fcdeb798069ee0e6c9f3475eac", "filename": "src/test/ui/traits/infer-from-object-issue-26952.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finfer-from-object-issue-26952.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finfer-from-object-issue-26952.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finfer-from-object-issue-26952.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/infer-from-object-trait-issue-26952.rs"}, {"sha": "f632ae8a9aca9a262f9cc01b6acb7007a29b2566", "filename": "src/test/ui/traits/inherent-method-order.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finherent-method-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finherent-method-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finherent-method-order.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/inherent-trait-method-order.rs"}, {"sha": "f2130228d51dbe7cc971caa37047e9958b91e37a", "filename": "src/test/ui/traits/inheritance/auto-xc-2.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauto-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauto-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauto-xc-2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,8 +1,8 @@\n // run-pass\n-// aux-build:trait_inheritance_auto_xc_2_aux.rs\n+// aux-build:auto_xc_2.rs\n \n \n-extern crate trait_inheritance_auto_xc_2_aux as aux;\n+extern crate auto_xc_2 as aux;\n \n // aux defines impls of Foo, Bar and Baz for A\n use aux::{Foo, Bar, Baz, A};", "previous_filename": "src/test/ui/traits/trait-inheritance-auto-xc-2.rs"}, {"sha": "3d5ae182af118a401cfe41429a188511094ff75a", "filename": "src/test/ui/traits/inheritance/auto-xc.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauto-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauto-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauto-xc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,9 +1,9 @@\n // run-pass\n #![allow(dead_code)]\n-// aux-build:trait_inheritance_auto_xc_aux.rs\n+// aux-build:auto_xc.rs\n \n \n-extern crate trait_inheritance_auto_xc_aux as aux;\n+extern crate auto_xc as aux;\n \n use aux::{Foo, Bar, Baz, Quux};\n ", "previous_filename": "src/test/ui/traits/trait-inheritance-auto-xc.rs"}, {"sha": "0be67a55eba97816ca5032044b9848eedbdd187d", "filename": "src/test/ui/traits/inheritance/auto.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauto.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-auto.rs"}, {"sha": "9af26cb2e2bf926ed7eac435d7865c153691f606", "filename": "src/test/ui/traits/inheritance/auxiliary/auto_xc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Fauto_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Fauto_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Fauto_xc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/auxiliary/trait_inheritance_auto_xc_aux.rs"}, {"sha": "e9327676dc6d066df9f21150dfb977a6502f28ae", "filename": "src/test/ui/traits/inheritance/auxiliary/auto_xc_2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Fauto_xc_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Fauto_xc_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Fauto_xc_2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/auxiliary/trait_inheritance_auto_xc_2_aux.rs"}, {"sha": "a25704412262ddd8175cb56eb64db0368e46b46c", "filename": "src/test/ui/traits/inheritance/auxiliary/overloading_xc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Foverloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Foverloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Foverloading_xc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/auxiliary/trait_inheritance_overloading_xc.rs"}, {"sha": "b76c52e62a941a12cbefeb29815bccbbfbccde81", "filename": "src/test/ui/traits/inheritance/auxiliary/xc_call.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Fxc_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Fxc_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fauxiliary%2Fxc_call.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/auxiliary/trait_xc_call_aux.rs"}, {"sha": "5bfa60b1aece0dab68dac6aad268e7567f5db413", "filename": "src/test/ui/traits/inheritance/basic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fbasic.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance2.rs"}, {"sha": "37c2ff63c6ab1dc2dc313d079dcff7b00d958520", "filename": "src/test/ui/traits/inheritance/call-bound-inherited.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcall-bound-inherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcall-bound-inherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcall-bound-inherited.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-call-bound-inherited.rs"}, {"sha": "8576d29f251b286139acc6db273f3f5f5d134972", "filename": "src/test/ui/traits/inheritance/call-bound-inherited2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcall-bound-inherited2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcall-bound-inherited2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcall-bound-inherited2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-call-bound-inherited2.rs"}, {"sha": "25159c1adb6f6febdb0316660140be18e04e9e8a", "filename": "src/test/ui/traits/inheritance/cast-without-call-to-supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcast-without-call-to-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcast-without-call-to-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcast-without-call-to-supertrait.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-cast-without-call-to-supertrait.rs"}, {"sha": "9070b9d1f5606991efceaece5ef1d96ea9870aee", "filename": "src/test/ui/traits/inheritance/cast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcast.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-cast.rs"}, {"sha": "99fbb5c6148dcba1920ede95f10d5d1f224dfb43", "filename": "src/test/ui/traits/inheritance/cross-trait-call-xc.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcross-trait-call-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcross-trait-call-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcross-trait-call-xc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,8 +1,8 @@\n // run-pass\n-// aux-build:trait_xc_call_aux.rs\n+// aux-build:xc_call.rs\n \n \n-extern crate trait_xc_call_aux as aux;\n+extern crate xc_call as aux;\n \n use aux::Foo;\n ", "previous_filename": "src/test/ui/traits/trait-inheritance-cross-trait-call-xc.rs"}, {"sha": "512c928ca8fa5c7b5101318aa1553c4b03e86c4f", "filename": "src/test/ui/traits/inheritance/cross-trait-call.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcross-trait-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcross-trait-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fcross-trait-call.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-cross-trait-call.rs"}, {"sha": "32ad0fb4d4107826d4f4221e1bac4ad9ee4664a0", "filename": "src/test/ui/traits/inheritance/diamond.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fdiamond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fdiamond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fdiamond.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-diamond.rs"}, {"sha": "77ecbd8eb17ba21d3a56e5c7070162c065a7242d", "filename": "src/test/ui/traits/inheritance/multiple-inheritors.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fmultiple-inheritors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fmultiple-inheritors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fmultiple-inheritors.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-multiple-inheritors.rs"}, {"sha": "8ff5ba541853a99f92b4cae8775e488edef62f36", "filename": "src/test/ui/traits/inheritance/multiple-params.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fmultiple-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fmultiple-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fmultiple-params.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-multiple-params.rs"}, {"sha": "3d63d78cabb455421609ce639eb877eef28894e1", "filename": "src/test/ui/traits/inheritance/num.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-num.rs"}, {"sha": "cee52542d38d272db7745c4a01c9b54a947b8c47", "filename": "src/test/ui/traits/inheritance/num0.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum0.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-num0.rs"}, {"sha": "663dd3a5eafdb79e5066a0c6df695f63d2275d72", "filename": "src/test/ui/traits/inheritance/num1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum1.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-num1.rs"}, {"sha": "b713c66a37cd613f32864e707fae0bf5ed81f118", "filename": "src/test/ui/traits/inheritance/num2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-num2.rs"}, {"sha": "c40be6f83545f9bc318b7568a067e4f9db8c5cd8", "filename": "src/test/ui/traits/inheritance/num3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum3.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-num3.rs"}, {"sha": "f478618f7b5937fd49733f71b4035dcc3645172a", "filename": "src/test/ui/traits/inheritance/num5.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fnum5.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-num5.rs"}, {"sha": "c306aa2cda0a1673e97df86e58b4d952d9985249", "filename": "src/test/ui/traits/inheritance/overloading-simple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Foverloading-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Foverloading-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Foverloading-simple.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-overloading-simple.rs"}, {"sha": "08778061ba1c25b5f1948edaa21ec671320d5d55", "filename": "src/test/ui/traits/inheritance/overloading-xc-exe.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Foverloading-xc-exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Foverloading-xc-exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Foverloading-xc-exe.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,9 +1,9 @@\n // run-pass\n-// aux-build:trait_inheritance_overloading_xc.rs\n+// aux-build:overloading_xc.rs\n \n \n-extern crate trait_inheritance_overloading_xc;\n-use trait_inheritance_overloading_xc::{MyNum, MyInt};\n+extern crate overloading_xc;\n+use overloading_xc::{MyNum, MyInt};\n \n fn f<T:MyNum>(x: T, y: T) -> (T, T, T) {\n     return (x.clone() + y.clone(), x.clone() - y.clone(), x * y);", "previous_filename": "src/test/ui/traits/trait-inheritance-overloading-xc-exe.rs"}, {"sha": "083643e821f4bb721248b7db802453fc14d8d543", "filename": "src/test/ui/traits/inheritance/overloading.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Foverloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Foverloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Foverloading.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-overloading.rs"}, {"sha": "6aaef8a305bce1cd916e745f613015eb643c12a1", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-repeated-supertrait-ambig.rs"}, {"sha": "5353b5e2260d42f2e651755f69918bb76a749881", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n-  --> $DIR/traits-repeated-supertrait-ambig.rs:26:7\n+  --> $DIR/repeated-supertrait-ambig.rs:26:7\n    |\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n-  --> $DIR/traits-repeated-supertrait-ambig.rs:30:7\n+  --> $DIR/repeated-supertrait-ambig.rs:30:7\n    |\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n@@ -16,7 +16,7 @@ LL | fn with_trait<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n    |                               ^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n-  --> $DIR/traits-repeated-supertrait-ambig.rs:34:5\n+  --> $DIR/repeated-supertrait-ambig.rs:34:5\n    |\n LL |     fn same_as(&self, t: T) -> bool;\n    |     -------------------------------- required by `CompareTo::same_as`\n@@ -25,7 +25,7 @@ LL |     CompareToInts::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n-  --> $DIR/traits-repeated-supertrait-ambig.rs:38:5\n+  --> $DIR/repeated-supertrait-ambig.rs:38:5\n    |\n LL |     fn same_as(&self, t: T) -> bool;\n    |     -------------------------------- required by `CompareTo::same_as`\n@@ -39,7 +39,7 @@ LL | fn with_ufcs2<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n    |                               ^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `i64: CompareTo<i32>` is not satisfied\n-  --> $DIR/traits-repeated-supertrait-ambig.rs:42:23\n+  --> $DIR/repeated-supertrait-ambig.rs:42:23\n    |\n LL |     assert_eq!(22_i64.same_as(22), true);\n    |                       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `i64`", "previous_filename": "src/test/ui/traits/traits-repeated-supertrait-ambig.stderr"}, {"sha": "339f9c37eeae8ada2c476a2046f1c3a366e9b717", "filename": "src/test/ui/traits/inheritance/repeated-supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-repeated-supertrait.rs"}, {"sha": "e8a2bd791a5e62922378bbb3a26fe86c5b4b1dbc", "filename": "src/test/ui/traits/inheritance/self-in-supertype.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fself-in-supertype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fself-in-supertype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fself-in-supertype.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-self-in-supertype.rs"}, {"sha": "5f2559f48eb341837e061b3d134920196e1a6ece", "filename": "src/test/ui/traits/inheritance/self.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fself.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-self.rs"}, {"sha": "ca3a284e5974c26109e9e36ff399de965c9a6178", "filename": "src/test/ui/traits/inheritance/simple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fsimple.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-simple.rs"}, {"sha": "16218fbd2361921fa42896d5133f6548434e105d", "filename": "src/test/ui/traits/inheritance/static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fstatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fstatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fstatic.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-static.rs"}, {"sha": "bc78e1e2328a58009b6370e106e003177f3fb203", "filename": "src/test/ui/traits/inheritance/static2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fstatic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fstatic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fstatic2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-static2.rs"}, {"sha": "b2b6503666e4751081f774aced2e2eb698684481", "filename": "src/test/ui/traits/inheritance/subst.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fsubst.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-subst.rs"}, {"sha": "ccc9628c77781ff98185bcdecf37ce622a6bb9e6", "filename": "src/test/ui/traits/inheritance/subst2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fsubst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fsubst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fsubst2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-subst2.rs"}, {"sha": "6ad8649267481d06d98334f2f14234cff80dca2f", "filename": "src/test/ui/traits/inheritance/visibility.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Fvisibility.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-inheritance-visibility.rs"}, {"sha": "1a887f0f39f6b628424a37f0fd596fd4c1a519ef", "filename": "src/test/ui/traits/issue-22019.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-22019.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-22019.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-22019.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-issue-22019.rs"}, {"sha": "bdbfee799f1763049903d9478da909cbf2378f45", "filename": "src/test/ui/traits/issue-22110.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-22110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-22110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-22110.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-issue-22110.rs"}, {"sha": "bc08ca0a2ba6462d9a668eefb7538c7ff544aae9", "filename": "src/test/ui/traits/issue-22655.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-22655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-22655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-22655.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-issue-22655.rs"}, {"sha": "c5f471f23c2e39bf70efc4fa0c74c8574ad778d7", "filename": "src/test/ui/traits/issue-23003-overflow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-23003-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-23003-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-23003-overflow.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-issue-23003-overflow.rs"}, {"sha": "24c2b2ad66074bb591ee399585f3649554b05682", "filename": "src/test/ui/traits/issue-23003.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-23003.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-23003.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-23003.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-issue-23003.rs"}, {"sha": "bedd87cc4cc7977eb031e75d75dff1d806c2ee35", "filename": "src/test/ui/traits/issue-26339.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-26339.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-26339.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-26339.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-issue-26339.rs"}, {"sha": "b21756e2b637fa2a6e279a131d4b989b6ed3cceb", "filename": "src/test/ui/traits/issue-71136.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-issue-71136.rs"}, {"sha": "ba47fdb152239fcb2a6656c3affa9f52436ccf1d", "filename": "src/test/ui/traits/issue-71136.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Foo: Clone` is not satisfied\n-  --> $DIR/traits-issue-71136.rs:5:5\n+  --> $DIR/issue-71136.rs:5:5\n    |\n LL |     the_foos: Vec<Foo>,\n    |     ^^^^^^^^^^^^^^^^^^ expected an implementor of trait `Clone`", "previous_filename": "src/test/ui/traits/traits-issue-71136.stderr"}, {"sha": "cc0dd4fc14a0dc73ca7ff2425e8d250cc3f309ac", "filename": "src/test/ui/traits/issue-9394-inherited-calls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-9394-inherited-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fissue-9394-inherited-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-9394-inherited-calls.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/issue-9394-inherited-trait-calls.rs"}, {"sha": "54bf872d0287d8402105024aca2722375c6f7d54", "filename": "src/test/ui/traits/item-inside-macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fitem-inside-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fitem-inside-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-inside-macro.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-item-inside-macro.rs"}, {"sha": "1ea1d65df627ce676c86db77ec75578b27d7bb4f", "filename": "src/test/ui/traits/item-privacy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-item-privacy.rs"}, {"sha": "6fd82142d61f73a1fcf88f667e6b485045a7d893", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "renamed", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `a` found for struct `S` in the current scope\n-  --> $DIR/trait-item-privacy.rs:67:7\n+  --> $DIR/item-privacy.rs:67:7\n    |\n LL | struct S;\n    | --------- method `a` not found for this\n@@ -9,13 +9,13 @@ LL |     S.a();\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `method::A` defines an item `a`, perhaps you need to implement it\n-  --> $DIR/trait-item-privacy.rs:6:5\n+  --> $DIR/item-privacy.rs:6:5\n    |\n LL |     trait A {\n    |     ^^^^^^^\n \n error[E0599]: no method named `b` found for struct `S` in the current scope\n-  --> $DIR/trait-item-privacy.rs:68:7\n+  --> $DIR/item-privacy.rs:68:7\n    |\n LL | struct S;\n    | --------- method `b` not found for this\n@@ -30,13 +30,13 @@ LL | use method::B;\n    |\n \n error[E0624]: associated function `a` is private\n-  --> $DIR/trait-item-privacy.rs:72:7\n+  --> $DIR/item-privacy.rs:72:7\n    |\n LL |     c.a();\n    |       ^ private associated function\n \n error[E0599]: no function or associated item named `a` found for struct `S` in the current scope\n-  --> $DIR/trait-item-privacy.rs:78:8\n+  --> $DIR/item-privacy.rs:78:8\n    |\n LL | struct S;\n    | --------- function or associated item `a` not found for this\n@@ -46,13 +46,13 @@ LL |     S::a(&S);\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `method::A` defines an item `a`, perhaps you need to implement it\n-  --> $DIR/trait-item-privacy.rs:6:5\n+  --> $DIR/item-privacy.rs:6:5\n    |\n LL |     trait A {\n    |     ^^^^^^^\n \n error[E0599]: no function or associated item named `b` found for struct `S` in the current scope\n-  --> $DIR/trait-item-privacy.rs:80:8\n+  --> $DIR/item-privacy.rs:80:8\n    |\n LL | struct S;\n    | --------- function or associated item `b` not found for this\n@@ -67,13 +67,13 @@ LL | use method::B;\n    |\n \n error[E0624]: associated function `a` is private\n-  --> $DIR/trait-item-privacy.rs:84:8\n+  --> $DIR/item-privacy.rs:84:8\n    |\n LL |     C::a(&S);\n    |        ^ private associated function\n \n error[E0599]: no associated item named `A` found for struct `S` in the current scope\n-  --> $DIR/trait-item-privacy.rs:97:8\n+  --> $DIR/item-privacy.rs:97:8\n    |\n LL | struct S;\n    | --------- associated item `A` not found for this\n@@ -83,13 +83,13 @@ LL |     S::A;\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `assoc_const::A` defines an item `A`, perhaps you need to implement it\n-  --> $DIR/trait-item-privacy.rs:24:5\n+  --> $DIR/item-privacy.rs:24:5\n    |\n LL |     trait A {\n    |     ^^^^^^^\n \n error[E0599]: no associated item named `B` found for struct `S` in the current scope\n-  --> $DIR/trait-item-privacy.rs:98:8\n+  --> $DIR/item-privacy.rs:98:8\n    |\n LL | struct S;\n    | --------- associated item `B` not found for this\n@@ -104,13 +104,13 @@ LL | use assoc_const::B;\n    |\n \n error[E0624]: associated constant `A` is private\n-  --> $DIR/trait-item-privacy.rs:101:8\n+  --> $DIR/item-privacy.rs:101:8\n    |\n LL |     C::A;\n    |        ^ private associated constant\n \n error[E0038]: the trait `assoc_const::C` cannot be made into an object\n-  --> $DIR/trait-item-privacy.rs:101:5\n+  --> $DIR/item-privacy.rs:101:5\n    |\n LL |     C::A;\n    |     ^^^^ `assoc_const::C` cannot be made into an object\n@@ -119,7 +119,7 @@ LL |     C::A;\n    = help: consider moving `B` to another trait\n    = help: consider moving `A` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/trait-item-privacy.rs:25:15\n+  --> $DIR/item-privacy.rs:25:15\n    |\n LL |         const A: u8 = 0;\n    |               ^ ...because it contains this associated `const`\n@@ -133,31 +133,31 @@ LL |         const C: u8 = 0;\n    |               ^ ...because it contains this associated `const`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/trait-item-privacy.rs:115:12\n+  --> $DIR/item-privacy.rs:115:12\n    |\n LL |     let _: S::A;\n    |            ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/trait-item-privacy.rs:116:12\n+  --> $DIR/item-privacy.rs:116:12\n    |\n LL |     let _: S::B;\n    |            ^^^^ help: use fully-qualified syntax: `<S as Trait>::B`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/trait-item-privacy.rs:117:12\n+  --> $DIR/item-privacy.rs:117:12\n    |\n LL |     let _: S::C;\n    |            ^^^^ help: use fully-qualified syntax: `<S as Trait>::C`\n \n error: associated type `A` is private\n-  --> $DIR/trait-item-privacy.rs:119:12\n+  --> $DIR/item-privacy.rs:119:12\n    |\n LL |     let _: T::A;\n    |            ^^^^ private associated type\n \n error: associated type `A` is private\n-  --> $DIR/trait-item-privacy.rs:128:9\n+  --> $DIR/item-privacy.rs:128:9\n    |\n LL |         A = u8,\n    |         ^^^^^^ private associated type", "previous_filename": "src/test/ui/traits/trait-item-privacy.stderr"}, {"sha": "23b91f924b553055f6562153a2904bdd66224b63", "filename": "src/test/ui/traits/kindck-owned-contains-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fkindck-owned-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fkindck-owned-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fkindck-owned-contains-1.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/kindck-owned-trait-contains-1.rs"}, {"sha": "1430dc65591437848afc7b5e4e6a3dd95b1dcc11", "filename": "src/test/ui/traits/matching-lifetimes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-matching-lifetimes.rs"}, {"sha": "5c28d40160d0c52f9b1da1c9be6cc85388aaa121", "filename": "src/test/ui/traits/matching-lifetimes.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: method not compatible with trait\n-  --> $DIR/trait-matching-lifetimes.rs:14:5\n+  --> $DIR/matching-lifetimes.rs:14:5\n    |\n LL |     fn foo(x: Foo<'b,'a>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(Foo<'a, 'b>)`\n               found fn pointer `fn(Foo<'b, 'a>)`\n note: the lifetime `'b` as defined on the impl at 13:9...\n-  --> $DIR/trait-matching-lifetimes.rs:13:9\n+  --> $DIR/matching-lifetimes.rs:13:9\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {\n    |         ^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 13:6\n-  --> $DIR/trait-matching-lifetimes.rs:13:6\n+  --> $DIR/matching-lifetimes.rs:13:6\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {\n    |      ^^\n \n error[E0308]: method not compatible with trait\n-  --> $DIR/trait-matching-lifetimes.rs:14:5\n+  --> $DIR/matching-lifetimes.rs:14:5\n    |\n LL |     fn foo(x: Foo<'b,'a>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(Foo<'a, 'b>)`\n               found fn pointer `fn(Foo<'b, 'a>)`\n note: the lifetime `'a` as defined on the impl at 13:6...\n-  --> $DIR/trait-matching-lifetimes.rs:13:6\n+  --> $DIR/matching-lifetimes.rs:13:6\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {\n    |      ^^\n note: ...does not necessarily outlive the lifetime `'b` as defined on the impl at 13:9\n-  --> $DIR/trait-matching-lifetimes.rs:13:9\n+  --> $DIR/matching-lifetimes.rs:13:9\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {\n    |         ^^", "previous_filename": "src/test/ui/traits/trait-matching-lifetimes.stderr"}, {"sha": "4cd184854ecccf6377fcdb21d9f0e87e6e845029", "filename": "src/test/ui/traits/method-private.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmethod-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmethod-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmethod-private.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-method-private.rs"}, {"sha": "99f330b38ae3de6e37660b84bd525e0fcc731973", "filename": "src/test/ui/traits/method-private.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmethod-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmethod-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmethod-private.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0624]: associated function `method` is private\n-  --> $DIR/trait-method-private.rs:19:9\n+  --> $DIR/method-private.rs:19:9\n    |\n LL |     foo.method();\n    |         ^^^^^^ private associated function", "previous_filename": "src/test/ui/traits/trait-method-private.stderr"}, {"sha": "b625b961590259f10a73c74fd0642ced8eab76a7", "filename": "src/test/ui/traits/multidispatch-bad.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-multidispatch-bad.rs"}, {"sha": "8d4813c453e17030cb349a56e33c90cf2a7b42a8", "filename": "src/test/ui/traits/multidispatch-bad.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/traits-multidispatch-bad.rs:19:17\n+  --> $DIR/multidispatch-bad.rs:19:17\n    |\n LL |     test(22i32, 44i32);\n    |                 ^^^^^ expected `u32`, found `i32`", "previous_filename": "src/test/ui/traits/traits-multidispatch-bad.stderr"}, {"sha": "58cb69a05b7048295d2832c849ac5658b8f07f22", "filename": "src/test/ui/traits/multidispatch-convert-ambig-dest.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-multidispatch-convert-ambig-dest.rs"}, {"sha": "62f5f5aaa88e06b137405eac9056e8380eb44802", "filename": "src/test/ui/traits/multidispatch-convert-ambig-dest.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/traits-multidispatch-convert-ambig-dest.rs:26:5\n+  --> $DIR/multidispatch-convert-ambig-dest.rs:26:5\n    |\n LL |     test(22, std::default::Default::default());\n    |     ^^^^ cannot infer type for type parameter `U` declared on the function `test`", "previous_filename": "src/test/ui/traits/traits-multidispatch-convert-ambig-dest.stderr"}, {"sha": "626e1ae71bc2fc7a7322ac392ead07e0d3c565a1", "filename": "src/test/ui/traits/multidispatch-infer-convert-target.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-infer-convert-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-infer-convert-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-infer-convert-target.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-multidispatch-infer-convert-target.rs"}, {"sha": "85698f1948904120d05a1125982307b2ebd7e428", "filename": "src/test/ui/traits/object/auto-dedup-in-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fauto-dedup-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fauto-dedup-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fauto-dedup-in-impl.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-auto-dedup-in-impl.rs"}, {"sha": "5f13c781341c4d871adb5a522dc813797df05854", "filename": "src/test/ui/traits/object/auto-dedup-in-impl.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fauto-dedup-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fauto-dedup-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fauto-dedup-in-impl.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0592]: duplicate definitions with name `test`\n-  --> $DIR/trait-object-auto-dedup-in-impl.rs:14:5\n+  --> $DIR/auto-dedup-in-impl.rs:14:5\n    |\n LL |     fn test(&self) { println!(\"one\"); }\n    |     ^^^^^^^^^^^^^^ duplicate definitions for `test`", "previous_filename": "src/test/ui/traits/trait-object-auto-dedup-in-impl.stderr"}, {"sha": "39d25eb7fe05bace42367cca5e72504f30e5f680", "filename": "src/test/ui/traits/object/auto-dedup.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fauto-dedup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fauto-dedup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fauto-dedup.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-auto-dedup.rs"}, {"sha": "3146764927cd815393eee1cb41dc4ceb96782fce", "filename": "src/test/ui/traits/object/bounds-cycle-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-1.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-bounds-cycle-1.rs"}, {"sha": "4c1df38058dad702019acfcd1f4f34cdce0782e2", "filename": "src/test/ui/traits/object/bounds-cycle-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-bounds-cycle-2.rs"}, {"sha": "55726a5ae4557d21e6cd5cef7c1e5c0055d2f708", "filename": "src/test/ui/traits/object/bounds-cycle-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-3.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-bounds-cycle-3.rs"}, {"sha": "f83cb75c7f29b8d46b244c177c9ab97f4447859f", "filename": "src/test/ui/traits/object/bounds-cycle-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fbounds-cycle-4.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-bounds-cycle-4.rs"}, {"sha": "0b8b0e2f5ef4d48e24c52495b6269f629f62b908", "filename": "src/test/ui/traits/object/exclusion.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fexclusion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fexclusion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fexclusion.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-exclusion.rs"}, {"sha": "c18754302b75b279af7165e3398a87cfdb5ac3ea", "filename": "src/test/ui/traits/object/generics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fgenerics.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-generics.rs"}, {"sha": "33757cb7c0ab1da7efa9d1e5458efb1ce606a8c9", "filename": "src/test/ui/traits/object/lifetime-first.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Flifetime-first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Flifetime-first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Flifetime-first.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-lifetime-first.rs"}, {"sha": "91097874997b4c10cb0f181a67c9f46c067f5375", "filename": "src/test/ui/traits/object/macro-matcher.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fmacro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fmacro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fmacro-matcher.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-macro-matcher.rs"}, {"sha": "6d1e236c0483c8dd114ab3d5ef95bd76dfd40675", "filename": "src/test/ui/traits/object/macro-matcher.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fmacro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fmacro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fmacro-matcher.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,11 +1,11 @@\n error[E0224]: at least one trait is required for an object type\n-  --> $DIR/trait-object-macro-matcher.rs:11:8\n+  --> $DIR/macro-matcher.rs:11:8\n    |\n LL |     m!(dyn 'static +);\n    |        ^^^^^^^^^^^^^\n \n error[E0038]: the trait `Copy` cannot be made into an object\n-  --> $DIR/trait-object-macro-matcher.rs:8:8\n+  --> $DIR/macro-matcher.rs:8:8\n    |\n LL |     m!(dyn Copy + Send + 'static);\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ `Copy` cannot be made into an object", "previous_filename": "src/test/ui/traits/trait-object-macro-matcher.stderr"}, {"sha": "f43d332d6963707ec570af8cc57f804b663dbf0f", "filename": "src/test/ui/traits/object/safety.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsafety.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-safety.rs"}, {"sha": "6784689072e70220d76b8b3ce1f3843ceac65725", "filename": "src/test/ui/traits/object/safety.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsafety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsafety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsafety.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `Tr` cannot be made into an object\n-  --> $DIR/trait-object-safety.rs:15:22\n+  --> $DIR/safety.rs:15:22\n    |\n LL |     let _: &dyn Tr = &St;\n    |                      ^^^ `Tr` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/trait-object-safety.rs:4:8\n+  --> $DIR/safety.rs:4:8\n    |\n LL | trait Tr {\n    |       -- this trait cannot be made into an object...\n@@ -23,13 +23,13 @@ LL |     fn foo() where Self: Sized;\n    |              ^^^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `Tr` cannot be made into an object\n-  --> $DIR/trait-object-safety.rs:15:12\n+  --> $DIR/safety.rs:15:12\n    |\n LL |     let _: &dyn Tr = &St;\n    |            ^^^^^^^ `Tr` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/trait-object-safety.rs:4:8\n+  --> $DIR/safety.rs:4:8\n    |\n LL | trait Tr {\n    |       -- this trait cannot be made into an object...", "previous_filename": "src/test/ui/traits/trait-object-safety.stderr"}, {"sha": "9d834727a4a1bcf45754ec6db1ccef66ba9f78fc", "filename": "src/test/ui/traits/object/supertrait-lifetime-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-supertrait-lifetime-bound.rs"}, {"sha": "0b33dc7f69a3ace1ea5894e4308788543d9ea5c6", "filename": "src/test/ui/traits/object/vs-lifetime-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime-2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-vs-lifetime-2.rs"}, {"sha": "9b8e793dfd2ffd5e04aaaec8922c726ec9d40b42", "filename": "src/test/ui/traits/object/vs-lifetime-2.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime-2.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0224]: at least one trait is required for an object type\n-  --> $DIR/trait-object-vs-lifetime-2.rs:7:5\n+  --> $DIR/vs-lifetime-2.rs:7:5\n    |\n LL |     dyn 'static +: 'static + Copy,\n    |     ^^^^^^^^^^^^^", "previous_filename": "src/test/ui/traits/trait-object-vs-lifetime-2.stderr"}, {"sha": "e49d276a55a92b5bd3e092994be6201f11776016", "filename": "src/test/ui/traits/object/vs-lifetime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-vs-lifetime.rs"}, {"sha": "6673472e4a9674d1e58c7c0100b7a466af03594f", "filename": "src/test/ui/traits/object/vs-lifetime.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,31 +1,31 @@\n error[E0224]: at least one trait is required for an object type\n-  --> $DIR/trait-object-vs-lifetime.rs:9:23\n+  --> $DIR/vs-lifetime.rs:9:23\n    |\n LL |     let _: S<'static, dyn 'static +>;\n    |                       ^^^^^^^^^^^^^\n \n error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n-  --> $DIR/trait-object-vs-lifetime.rs:11:12\n+  --> $DIR/vs-lifetime.rs:11:12\n    |\n LL |     let _: S<'static, 'static>;\n    |            ^        --------- help: remove this lifetime argument\n    |            |\n    |            expected 1 lifetime argument\n    |\n note: struct defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/trait-object-vs-lifetime.rs:4:8\n+  --> $DIR/vs-lifetime.rs:4:8\n    |\n LL | struct S<'a, T>(&'a u8, T);\n    |        ^ --\n \n error[E0107]: this struct takes 1 type argument but 0 type arguments were supplied\n-  --> $DIR/trait-object-vs-lifetime.rs:11:12\n+  --> $DIR/vs-lifetime.rs:11:12\n    |\n LL |     let _: S<'static, 'static>;\n    |            ^ expected 1 type argument\n    |\n note: struct defined here, with 1 type parameter: `T`\n-  --> $DIR/trait-object-vs-lifetime.rs:4:8\n+  --> $DIR/vs-lifetime.rs:4:8\n    |\n LL | struct S<'a, T>(&'a u8, T);\n    |        ^     -\n@@ -35,13 +35,13 @@ LL |     let _: S<'static, 'static, T>;\n    |                              ^^^\n \n error[E0224]: at least one trait is required for an object type\n-  --> $DIR/trait-object-vs-lifetime.rs:14:14\n+  --> $DIR/vs-lifetime.rs:14:14\n    |\n LL |     let _: S<dyn 'static +, 'static>;\n    |              ^^^^^^^^^^^^^\n \n error[E0747]: type provided when a lifetime was expected\n-  --> $DIR/trait-object-vs-lifetime.rs:14:14\n+  --> $DIR/vs-lifetime.rs:14:14\n    |\n LL |     let _: S<dyn 'static +, 'static>;\n    |              ^^^^^^^^^^^^^", "previous_filename": "src/test/ui/traits/trait-object-vs-lifetime.stderr"}, {"sha": "05aab5e3b085c0965907a9791d38557056c9c09f", "filename": "src/test/ui/traits/object/with-lifetime-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-lifetime-bound.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-with-lifetime-bound.rs"}, {"sha": "f34fa80a0ceec83871051dea9b2e2a604b6dd4ce", "filename": "src/test/ui/traits/object/with-self-in-projection-output-bad.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-bad.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-bad.rs"}, {"sha": "45978a84068de75c7bfa137937f64eb95ed052d2", "filename": "src/test/ui/traits/object/with-self-in-projection-output-bad.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-bad.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0191]: the value of the associated type `Output` (from trait `Base`) must be specified\n-  --> $DIR/trait-object-with-self-in-projection-output-bad.rs:45:21\n+  --> $DIR/with-self-in-projection-output-bad.rs:45:21\n    |\n LL |     type Output;\n    |     ------------ `Output` defined here\n@@ -8,7 +8,7 @@ LL |     let _x: Box<dyn Helper<Target=i32>> = Box::new(2u32);\n    |                     ^^^^^^^^^^^^^^^^^^ help: specify the associated type: `Helper<Target=i32, Output = Type>`\n \n error[E0191]: the value of the associated type `Output` (from trait `Base`) must be specified\n-  --> $DIR/trait-object-with-self-in-projection-output-bad.rs:48:21\n+  --> $DIR/with-self-in-projection-output-bad.rs:48:21\n    |\n LL |     type Output;\n    |     ------------ `Output` defined here", "previous_filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-bad.stderr"}, {"sha": "d1b7bf6c2d766cd886cb9999f7c13b53547425e9", "filename": "src/test/ui/traits/object/with-self-in-projection-output-good.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-good.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-good.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-good.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-good.rs"}, {"sha": "39e817168f610cc7c2291ac30333c5a7c3c8681d", "filename": "src/test/ui/traits/object/with-self-in-projection-output-repeated-supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-repeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-repeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fwith-self-in-projection-output-repeated-supertrait.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-repeated-supertrait.rs"}, {"sha": "a79b74dcddead0cba82cf036ebddc215c55b3632", "filename": "src/test/ui/traits/param-without-lifetime-constraint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-param-without-lifetime-constraint.rs"}, {"sha": "763fb5186cc9a480f0dcda2b03e7ec037f87361a", "filename": "src/test/ui/traits/param-without-lifetime-constraint.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error: `impl` item signature doesn't match `trait` item signature\n-  --> $DIR/trait-param-without-lifetime-constraint.rs:14:5\n+  --> $DIR/param-without-lifetime-constraint.rs:14:5\n    |\n LL |     fn get_relation(&self) -> To;\n    |     ----------------------------- expected `fn(&Article) -> &ProofReader`\n@@ -10,7 +10,7 @@ LL |     fn get_relation(&self) -> &ProofReader {\n    = note: expected `fn(&Article) -> &ProofReader`\n               found `fn(&Article) -> &ProofReader`\n help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n-  --> $DIR/trait-param-without-lifetime-constraint.rs:10:31\n+  --> $DIR/param-without-lifetime-constraint.rs:10:31\n    |\n LL |     fn get_relation(&self) -> To;\n    |                               ^^ consider borrowing this type parameter in the trait", "previous_filename": "src/test/ui/traits/trait-param-without-lifetime-constraint.stderr"}, {"sha": "832d4f6c89f09c321199554abbef7c5ceb3a738c", "filename": "src/test/ui/traits/parameterized-with-bounds.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fparameterized-with-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fparameterized-with-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fparameterized-with-bounds.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/parameterized-trait-with-bounds.rs"}, {"sha": "82c76eb693a0d65efb5d29e00eff0357db9b0f73", "filename": "src/test/ui/traits/principal-less-objects.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fprincipal-less-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fprincipal-less-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fprincipal-less-objects.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/principal-less-trait-objects.rs"}, {"sha": "17a2e05e99f2c7624e095a497a5186b0c28905d1", "filename": "src/test/ui/traits/privacy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fprivacy.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-privacy.rs"}, {"sha": "0456ca931156ec5b833c02a69a06c0d63c92504f", "filename": "src/test/ui/traits/region-pointer-simple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fregion-pointer-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fregion-pointer-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fregion-pointer-simple.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-region-pointer-simple.rs"}, {"sha": "fa4a309315b4776cb2a47f13fb73dd50a3aa7bd0", "filename": "src/test/ui/traits/reservation-impl/coherence-conflict.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fcoherence-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fcoherence-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fcoherence-conflict.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/reservation-impls/reservation-impl-coherence-conflict.rs"}, {"sha": "1a227a85c06f6e9c33265f0ae1d1d91e79d8df35", "filename": "src/test/ui/traits/reservation-impl/coherence-conflict.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fcoherence-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fcoherence-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fcoherence-conflict.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `OtherTrait` for type `()`:\n-  --> $DIR/reservation-impl-coherence-conflict.rs:11:1\n+  --> $DIR/coherence-conflict.rs:11:1\n    |\n LL | impl OtherTrait for () {}\n    | ---------------------- first implementation here", "previous_filename": "src/test/ui/traits/reservation-impls/reservation-impl-coherence-conflict.stderr"}, {"sha": "65a55d9e20936ac97ab59303a2eeef45cf11f43d", "filename": "src/test/ui/traits/reservation-impl/no-use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/reservation-impls/reservation-impl-no-use.rs"}, {"sha": "fb4a443435fa5d5aca98fbac1d4cfd32e5dc4cb8", "filename": "src/test/ui/traits/reservation-impl/no-use.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `(): MyTrait` is not satisfied\n-  --> $DIR/reservation-impl-no-use.rs:10:26\n+  --> $DIR/no-use.rs:10:26\n    |\n LL | trait MyTrait { fn foo(&self); }\n    |                 -------------- required by `MyTrait::foo`", "previous_filename": "src/test/ui/traits/reservation-impls/reservation-impl-no-use.stderr"}, {"sha": "f14589ccf846d07e06fb6f6f2262c36602bc1e5e", "filename": "src/test/ui/traits/reservation-impl/non-lattice-ok.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fnon-lattice-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fnon-lattice-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fnon-lattice-ok.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/reservation-impls/reservation-impl-non-lattice-ok.rs"}, {"sha": "611c8d8841323b117f0e06a88589817d042bda1a", "filename": "src/test/ui/traits/reservation-impl/ok.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fok.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/reservation-impls/reservation-impl-ok.rs"}, {"sha": "a9bacc357bc03413be2c57a1bb364e542c833f20", "filename": "src/test/ui/traits/resolution-in-overloaded-op.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-resolution-in-overloaded-op.rs"}, {"sha": "6a641ed214dfa32769bedf17bdfb5cc630f344e8", "filename": "src/test/ui/traits/resolution-in-overloaded-op.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0369]: cannot multiply `&T` by `f64`\n-  --> $DIR/trait-resolution-in-overloaded-op.rs:8:7\n+  --> $DIR/resolution-in-overloaded-op.rs:8:7\n    |\n LL |     a * b\n    |     - ^ - f64", "previous_filename": "src/test/ui/traits/trait-resolution-in-overloaded-op.stderr"}, {"sha": "df5277473056b25f57ccade3a80ef6da9a953487", "filename": "src/test/ui/traits/safety-fn-body.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-safety-fn-body.rs"}, {"sha": "4f784a020d91543c7ea9213ac925d58d51f5acdd", "filename": "src/test/ui/traits/safety-fn-body.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/trait-safety-fn-body.rs:11:9\n+  --> $DIR/safety-fn-body.rs:11:9\n    |\n LL |         *self += 1;\n    |         ^^^^^^^^^^ dereference of raw pointer", "previous_filename": "src/test/ui/traits/trait-safety-fn-body.stderr"}, {"sha": "50e15f0d25f3bce7198801bec3397a30ea1ce6e4", "filename": "src/test/ui/traits/safety-inherent-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-inherent-impl.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-safety-inherent-impl.rs"}, {"sha": "1c8f43feca43101ee1723b68d9b478548f873096", "filename": "src/test/ui/traits/safety-inherent-impl.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-inherent-impl.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0197]: inherent impls cannot be unsafe\n-  --> $DIR/trait-safety-inherent-impl.rs:5:13\n+  --> $DIR/safety-inherent-impl.rs:5:13\n    |\n LL | unsafe impl SomeStruct {\n    | ------      ^^^^^^^^^^ inherent impl for this type", "previous_filename": "src/test/ui/traits/trait-safety-inherent-impl.stderr"}, {"sha": "099ba80e5b51f7617a708ab8d11d3a38ac7336dc", "filename": "src/test/ui/traits/safety-ok-cc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-ok-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-ok-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-ok-cc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-safety-ok-cc.rs"}, {"sha": "d456a78b64dcbe69c4124857513900bee52d0188", "filename": "src/test/ui/traits/safety-ok.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-ok.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-safety-ok.rs"}, {"sha": "6f125e5f9502137a3505544ef028e7d48a737035", "filename": "src/test/ui/traits/safety-trait-impl-cc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-safety-trait-impl-cc.rs"}, {"sha": "5a0f8d3b8caca9a94a71d27d0f14bfb99e3ca506", "filename": "src/test/ui/traits/safety-trait-impl-cc.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0200]: the trait `Foo` requires an `unsafe impl` declaration\n-  --> $DIR/trait-safety-trait-impl-cc.rs:9:1\n+  --> $DIR/safety-trait-impl-cc.rs:9:1\n    |\n LL | / impl lib::Foo for Bar {\n LL | |     fn foo(&self) -> isize {", "previous_filename": "src/test/ui/traits/trait-safety-trait-impl-cc.stderr"}, {"sha": "45258b78d01d5dfb3b8eaedb1046935e6d0c0dc4", "filename": "src/test/ui/traits/safety-trait-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-safety-trait-impl.rs"}, {"sha": "fc0f6c69308919ba6d9f8e18278c2255c426b5e3", "filename": "src/test/ui/traits/safety-trait-impl.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,11 +1,11 @@\n error[E0200]: the trait `UnsafeTrait` requires an `unsafe impl` declaration\n-  --> $DIR/trait-safety-trait-impl.rs:14:1\n+  --> $DIR/safety-trait-impl.rs:14:1\n    |\n LL | impl UnsafeTrait for u16 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0199]: implementing the trait `SafeTrait` is not unsafe\n-  --> $DIR/trait-safety-trait-impl.rs:16:1\n+  --> $DIR/safety-trait-impl.rs:16:1\n    |\n LL | unsafe impl SafeTrait for u32 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/traits/trait-safety-trait-impl.stderr"}, {"sha": "759416d1901db95207023c70b06f1c871ef2da64", "filename": "src/test/ui/traits/static-method-generic-inference.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-static-method-generic-inference.rs"}, {"sha": "2b9ce7321eeae19100bb97b253f379d98fd97c5c", "filename": "src/test/ui/traits/static-method-generic-inference.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0283]: type annotations needed\n-  --> $DIR/trait-static-method-generic-inference.rs:24:25\n+  --> $DIR/static-method-generic-inference.rs:24:25\n    |\n LL |         fn new() -> T;\n    |         -------------- required by `HasNew::new`", "previous_filename": "src/test/ui/traits/trait-static-method-generic-inference.stderr"}, {"sha": "f669ffae6bb5d358f08e911417e1136d75901b5a", "filename": "src/test/ui/traits/static-method-overwriting.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-overwriting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-overwriting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-overwriting.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-static-method-overwriting.rs"}, {"sha": "f0c2c1082b09f8b3952175cb4bb2239a9b0184d7", "filename": "src/test/ui/traits/static-outlives-a-where-clause.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fstatic-outlives-a-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fstatic-outlives-a-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-outlives-a-where-clause.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/traits-static-outlives-a-where-clause.rs"}, {"sha": "a1abf668b8b6ec8c0e0f08c99dd29f3d09ae88fd", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.fixed?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-suggest-deferences-issue-39029.fixed"}, {"sha": "90d097105edc68a32d0e8283778035f00eb7a998", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-suggest-deferences-issue-39029.rs"}, {"sha": "1005231d396e703b357fff71b2b4ccfd0b005543", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `NoToSocketAddrs: ToSocketAddrs` is not satisfied\n-  --> $DIR/trait-suggest-deferences-issue-39029.rs:16:37\n+  --> $DIR/issue-39029.rs:16:37\n    |\n LL |     let _errors = TcpListener::bind(&bad);\n    |                                     ^^^^", "previous_filename": "src/test/ui/traits/trait-suggest-deferences-issue-39029.stderr"}, {"sha": "406caaa007fdc9c8effbf07e5a652323a0e41fb6", "filename": "src/test/ui/traits/suggest-deferences/issue-62530.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.fixed?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-suggest-deferences-issue-62530.fixed"}, {"sha": "53846be73063d4b38316ee301bd4a57c5c683033", "filename": "src/test/ui/traits/suggest-deferences/issue-62530.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-suggest-deferences-issue-62530.rs"}, {"sha": "4f1165b17c53ce192c422ba857dc8ec7ae814d80", "filename": "src/test/ui/traits/suggest-deferences/issue-62530.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `&String: SomeTrait` is not satisfied\n-  --> $DIR/trait-suggest-deferences-issue-62530.rs:13:26\n+  --> $DIR/issue-62530.rs:13:26\n    |\n LL | fn takes_type_parameter<T>(_x: T) where T: SomeTrait {}\n    |                                            --------- required by this bound in `takes_type_parameter`", "previous_filename": "src/test/ui/traits/trait-suggest-deferences-issue-62530.stderr"}, {"sha": "b7160b75c605ed966f4b05dbe97b9bebd15101d7", "filename": "src/test/ui/traits/suggest-deferences/multiple-0.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.fixed?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-suggest-deferences-multiple-0.fixed"}, {"sha": "9ac55177ffadd1d337db6c75cbfc6126b340f92f", "filename": "src/test/ui/traits/suggest-deferences/multiple-0.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-suggest-deferences-multiple-0.rs"}, {"sha": "f76c73cbb6354c2ac86527c214ecd0a894c62bc6", "filename": "src/test/ui/traits/suggest-deferences/multiple-0.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `&Baz: Happy` is not satisfied\n-  --> $DIR/trait-suggest-deferences-multiple-0.rs:34:9\n+  --> $DIR/multiple-0.rs:34:9\n    |\n LL | fn foo<T>(_: T) where T: Happy {}\n    |                          ----- required by this bound in `foo`", "previous_filename": "src/test/ui/traits/trait-suggest-deferences-multiple-0.stderr"}, {"sha": "91c6c7924a4082d911025bcc264ec1a77124a777", "filename": "src/test/ui/traits/suggest-deferences/multiple-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-suggest-deferences-multiple-1.rs"}, {"sha": "f98cc54227f681a959e09de93f3984088498aec7", "filename": "src/test/ui/traits/suggest-deferences/multiple-1.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `&mut Baz: Happy` is not satisfied\n-  --> $DIR/trait-suggest-deferences-multiple-1.rs:52:9\n+  --> $DIR/multiple-1.rs:52:9\n    |\n LL | fn foo<T>(_: T) where T: Happy {}\n    |                          ----- required by this bound in `foo`", "previous_filename": "src/test/ui/traits/trait-suggest-deferences-multiple-1.stderr"}, {"sha": "46d047a2de3d5daea1c6cf90192a89a65d5dcbfe", "filename": "src/test/ui/traits/suggest-where-clause.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-suggest-where-clause.rs"}, {"sha": "b50017afa4d63dd20465386cb4e5b5dee0ee9f53", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:7:20\n+  --> $DIR/suggest-where-clause.rs:7:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n    |                       - this type parameter needs to be `Sized`\n@@ -13,7 +13,7 @@ LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:10:5\n+  --> $DIR/suggest-where-clause.rs:10:5\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n    |                       - this type parameter needs to be `Sized`\n@@ -29,31 +29,31 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: required because it appears within the type `Misc<U>`\n \n error[E0277]: the trait bound `u64: From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:15:5\n+  --> $DIR/suggest-where-clause.rs:15:5\n    |\n LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `From<T>` is not implemented for `u64`\n    |\n    = note: required by `from`\n \n error[E0277]: the trait bound `u64: From<<T as Iterator>::Item>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:18:5\n+  --> $DIR/suggest-where-clause.rs:18:5\n    |\n LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<<T as Iterator>::Item>` is not implemented for `u64`\n    |\n    = note: required by `from`\n \n error[E0277]: the trait bound `Misc<_>: From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:23:5\n+  --> $DIR/suggest-where-clause.rs:23:5\n    |\n LL |     <Misc<_> as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<T>` is not implemented for `Misc<_>`\n    |\n    = note: required by `from`\n \n error[E0277]: the size for values of type `[T]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:28:20\n+  --> $DIR/suggest-where-clause.rs:28:20\n    |\n LL |     mem::size_of::<[T]>();\n    |                    ^^^ doesn't have a size known at compile-time\n@@ -66,7 +66,7 @@ LL | pub const fn size_of<T>() -> usize {\n    = help: the trait `Sized` is not implemented for `[T]`\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:31:5\n+  --> $DIR/suggest-where-clause.rs:31:5\n    |\n LL |     mem::size_of::<[&U]>();\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time", "previous_filename": "src/test/ui/traits/trait-suggest-where-clause.stderr"}, {"sha": "e862c0e976b311c67c953a8cf279b4ea3da3b544", "filename": "src/test/ui/traits/superdefault-generics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuperdefault-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsuperdefault-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuperdefault-generics.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/supertrait-default-generics.rs"}, {"sha": "c809f9e89f934688b1f38ae5791eaf5280437859", "filename": "src/test/ui/traits/syntax-polarity.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsyntax-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fsyntax-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsyntax-polarity.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/syntax-trait-polarity.rs"}, {"sha": "a33773144c21b8d2088fd2dba45153750f0cb742", "filename": "src/test/ui/traits/test-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-test-2.rs"}, {"sha": "12b55c3a4fdf9e87159657eb1657d73b81aa6977", "filename": "src/test/ui/traits/test-2.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,41 +1,41 @@\n error[E0107]: this associated function takes 0 type arguments but 1 type argument was supplied\n-  --> $DIR/trait-test-2.rs:9:8\n+  --> $DIR/test-2.rs:9:8\n    |\n LL |     10.dup::<i32>();\n    |        ^^^------- help: remove these generics\n    |        |\n    |        expected 0 type arguments\n    |\n note: associated function defined here, with 0 type parameters\n-  --> $DIR/trait-test-2.rs:4:16\n+  --> $DIR/test-2.rs:4:16\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |                ^^^\n \n error[E0107]: this associated function takes 1 type argument but 2 type arguments were supplied\n-  --> $DIR/trait-test-2.rs:11:8\n+  --> $DIR/test-2.rs:11:8\n    |\n LL |     10.blah::<i32, i32>();\n    |        ^^^^      ----- help: remove this type argument\n    |        |\n    |        expected 1 type argument\n    |\n note: associated function defined here, with 1 type parameter: `X`\n-  --> $DIR/trait-test-2.rs:4:39\n+  --> $DIR/test-2.rs:4:39\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |                                       ^^^^ -\n \n error[E0038]: the trait `bar` cannot be made into an object\n-  --> $DIR/trait-test-2.rs:13:16\n+  --> $DIR/test-2.rs:13:16\n    |\n LL |     (box 10 as Box<dyn bar>).dup();\n    |                ^^^^^^^^^^^^ `bar` cannot be made into an object\n    |\n    = help: consider moving `dup` to another trait\n    = help: consider moving `blah` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/trait-test-2.rs:4:30\n+  --> $DIR/test-2.rs:4:30\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       ---                    ^^^^     ^^^^ ...because method `blah` has generic type parameters\n@@ -44,15 +44,15 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       this trait cannot be made into an object...\n \n error[E0038]: the trait `bar` cannot be made into an object\n-  --> $DIR/trait-test-2.rs:13:6\n+  --> $DIR/test-2.rs:13:6\n    |\n LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ `bar` cannot be made into an object\n    |\n    = help: consider moving `dup` to another trait\n    = help: consider moving `blah` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/trait-test-2.rs:4:30\n+  --> $DIR/test-2.rs:4:30\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       ---                    ^^^^     ^^^^ ...because method `blah` has generic type parameters", "previous_filename": "src/test/ui/traits/trait-test-2.stderr"}, {"sha": "72fc66f740b93a8dc67488bdf0c5ca50cd2df658", "filename": "src/test/ui/traits/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-test.rs"}, {"sha": "668228abe09366c6d591118408a03ae160ef6ab1", "filename": "src/test/ui/traits/test.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0404]: expected trait, found builtin type `isize`\n-  --> $DIR/trait-test.rs:4:6\n+  --> $DIR/test.rs:4:6\n    |\n LL | impl isize for usize { fn foo(&self) {} }\n    |      ^^^^^ not a trait", "previous_filename": "src/test/ui/traits/trait-test.stderr"}, {"sha": "9670edbfa2bd9d35b790ea90850f835a3c82ae45", "filename": "src/test/ui/traits/to-str.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fto-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fto-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fto-str.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-to-str.rs"}, {"sha": "901a2c4391f6dc88029307af4faa2fbf6c981773", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-xc.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -1,14 +0,0 @@\n-// aux-build:trait_bounds_on_structs_and_enums_xc.rs\n-\n-extern crate trait_bounds_on_structs_and_enums_xc;\n-\n-use trait_bounds_on_structs_and_enums_xc::{Bar, Foo, Trait};\n-\n-fn explode(x: Foo<usize>) {}\n-//~^ ERROR E0277\n-\n-fn kaboom(y: Bar<f32>) {}\n-//~^ ERROR E0277\n-\n-fn main() {\n-}"}, {"sha": "2a4ba9677efb0913a9de9ea53ca56fbad7b091b0", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-xc1.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cbbdc44de84e3ea99bca239091e5d1c49af654/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc1.rs?ref=21cbbdc44de84e3ea99bca239091e5d1c49af654", "patch": "@@ -1,15 +0,0 @@\n-// aux-build:trait_bounds_on_structs_and_enums_xc.rs\n-\n-extern crate trait_bounds_on_structs_and_enums_xc;\n-\n-use trait_bounds_on_structs_and_enums_xc::{Bar, Foo, Trait};\n-\n-fn main() {\n-    let foo = Foo {\n-    //~^ ERROR E0277\n-        x: 3\n-    };\n-    let bar: Bar<f64> = return;\n-    //~^ ERROR E0277\n-    let _ = bar;\n-}"}, {"sha": "700488c22d6780606207df0103fcb415ce676d30", "filename": "src/test/ui/traits/ufcs-object.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fufcs-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fufcs-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fufcs-object.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/ufcs-trait-object.rs"}, {"sha": "1ee2b941909f4a6e211df2b168f51563791f4f1d", "filename": "src/test/ui/traits/use-before-def.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fuse-before-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fuse-before-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fuse-before-def.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/use-trait-before-def.rs"}, {"sha": "17771e976ef3b3d6ce36faf8c804966334324831", "filename": "src/test/ui/traits/wf-object/maybe-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fmaybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fmaybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fmaybe-bound.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/wf-trait-object-maybe-bound.rs"}, {"sha": "2fe3f0fc39f40765363827071df61abaa2d658c3", "filename": "src/test/ui/traits/wf-object/maybe-bound.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fmaybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fmaybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fmaybe-bound.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,29 +1,29 @@\n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:5:15\n+  --> $DIR/maybe-bound.rs:5:15\n    |\n LL | type _0 = dyn ?Sized + Foo;\n    |               ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:8:21\n+  --> $DIR/maybe-bound.rs:8:21\n    |\n LL | type _1 = dyn Foo + ?Sized;\n    |                     ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:11:21\n+  --> $DIR/maybe-bound.rs:11:21\n    |\n LL | type _2 = dyn Foo + ?Sized + ?Sized;\n    |                     ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:11:30\n+  --> $DIR/maybe-bound.rs:11:30\n    |\n LL | type _2 = dyn Foo + ?Sized + ?Sized;\n    |                              ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:15:15\n+  --> $DIR/maybe-bound.rs:15:15\n    |\n LL | type _3 = dyn ?Sized + Foo;\n    |               ^^^^^^", "previous_filename": "src/test/ui/traits/wf-trait-object-maybe-bound.stderr"}, {"sha": "678ede58296a49c28bd8b753be0a4dfb0da917dc", "filename": "src/test/ui/traits/wf-object/no-duplicates.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/wf-trait-object-no-duplicates.rs"}, {"sha": "b9506894f82c9b39acc371dce4406d33785a419c", "filename": "src/test/ui/traits/wf-object/no-duplicates.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,5 +1,5 @@\n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/wf-trait-object-no-duplicates.rs:8:21\n+  --> $DIR/no-duplicates.rs:8:21\n    |\n LL | type _0 = dyn Obj + Obj;\n    |               ---   ^^^ additional non-auto trait\n@@ -10,7 +10,7 @@ LL | type _0 = dyn Obj + Obj;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/wf-trait-object-no-duplicates.rs:13:28\n+  --> $DIR/no-duplicates.rs:13:28\n    |\n LL | type _1 = dyn Send + Obj + Obj;\n    |                      ---   ^^^ additional non-auto trait\n@@ -21,7 +21,7 @@ LL | type _1 = dyn Send + Obj + Obj;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/wf-trait-object-no-duplicates.rs:16:28\n+  --> $DIR/no-duplicates.rs:16:28\n    |\n LL | type _2 = dyn Obj + Send + Obj;\n    |               ---          ^^^ additional non-auto trait\n@@ -32,7 +32,7 @@ LL | type _2 = dyn Obj + Send + Obj;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/wf-trait-object-no-duplicates.rs:26:34\n+  --> $DIR/no-duplicates.rs:26:34\n    |\n LL | type _4 = dyn for<'a> ObjL<'a> + for<'b> ObjL<'b>;\n    |               ----------------   ^^^^^^^^^^^^^^^^ additional non-auto trait\n@@ -43,7 +43,7 @@ LL | type _4 = dyn for<'a> ObjL<'a> + for<'b> ObjL<'b>;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/wf-trait-object-no-duplicates.rs:30:42\n+  --> $DIR/no-duplicates.rs:30:42\n    |\n LL | type _5 = dyn ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)>;\n    |               ------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^ additional non-auto trait", "previous_filename": "src/test/ui/traits/wf-trait-object-no-duplicates.stderr"}, {"sha": "3e6db3e997c9b7da2007b5b0878fa051f1402c0c", "filename": "src/test/ui/traits/wf-object/only-maybe-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fonly-maybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fonly-maybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fonly-maybe-bound.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/wf-trait-object-only-maybe-bound.rs"}, {"sha": "cbc41feec1e8c1d323f6182445e1a9b473d3a8b0", "filename": "src/test/ui/traits/wf-object/only-maybe-bound.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fonly-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fonly-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fonly-maybe-bound.stderr?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "patch": "@@ -1,11 +1,11 @@\n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-only-maybe-bound.rs:3:15\n+  --> $DIR/only-maybe-bound.rs:3:15\n    |\n LL | type _0 = dyn ?Sized;\n    |               ^^^^^^\n \n error[E0224]: at least one trait is required for an object type\n-  --> $DIR/wf-trait-object-only-maybe-bound.rs:3:11\n+  --> $DIR/only-maybe-bound.rs:3:11\n    |\n LL | type _0 = dyn ?Sized;\n    |           ^^^^^^^^^^", "previous_filename": "src/test/ui/traits/wf-trait-object-only-maybe-bound.stderr"}, {"sha": "4f676cbe33846adadd2933241347bdbacacaf612", "filename": "src/test/ui/traits/wf-object/reverse-order.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Freverse-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Freverse-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Freverse-order.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/wf-trait-object-reverse-order.rs"}, {"sha": "7cfee27efb32a4b95545baee5970d0d7c0ba30c0", "filename": "src/test/ui/traits/where-clause-vs-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwhere-clause-vs-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwhere-clause-vs-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwhere-clause-vs-impl.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-where-clause-vs-impl.rs"}, {"sha": "31f73d79cc7f43276ad783444507a512c5615e26", "filename": "src/test/ui/traits/with-bounds-default.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwith-bounds-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwith-bounds-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwith-bounds-default.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-with-bounds-default.rs"}, {"sha": "a3e3b31df922e48689efe468bb7a7ade4ab144e4", "filename": "src/test/ui/traits/with-dst.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwith-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a/src%2Ftest%2Fui%2Ftraits%2Fwith-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwith-dst.rs?ref=dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "previous_filename": "src/test/ui/traits/trait-with-dst.rs"}]}