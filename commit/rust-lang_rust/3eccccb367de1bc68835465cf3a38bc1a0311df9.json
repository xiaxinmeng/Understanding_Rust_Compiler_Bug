{"sha": "3eccccb367de1bc68835465cf3a38bc1a0311df9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlY2NjY2IzNjdkZTFiYzY4ODM1NDY1Y2YzYTM4YmMxYTAzMTFkZjk=", "commit": {"author": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-18T15:07:54Z"}, "committer": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-09-20T12:38:48Z"}, "message": "Fix indents", "tree": {"sha": "fe83434450b958ab31fca70773bf68e9123c1527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe83434450b958ab31fca70773bf68e9123c1527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eccccb367de1bc68835465cf3a38bc1a0311df9", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE8rLaPclMjvVJWRZHnxhOEWSDEYEFAlujlNgACgkQnxhOEWSD\nEYH6sw//XT26uowDvZOOXdXEq/TFn7a5TJ40nEC2SMxSWYyVW3P9sDscdTxQSBlp\ndnOrCwZDMoUx73d7sXnzfNjWa9oQe4bE02jmH25ibf8l8W/oIpi5PHk3UBDDe3y8\nhpNNh5gdwbteAvfuHXB0oHHMATuAABjoncQRU1kRV/C8S0P+W1LSmLAIp4KLDfv6\npXxHhZ0zkjnHl/egqdcWmXeu9kznsnkWRg9vXpZz21ZblnXPpLA1mVHoakhDo3Rw\nOfIdxBEpLoBJ504fO5yCRb+/MDeZ7WxtvxnOxZAyJF0bdyfJpuNKXrIeOCo878Ly\nxxFc37SgHwTGSM7ckAQPa/1vV2THzS0wgasefD7Vh6bZbErNffuvJK4ykyCpH/4N\n5FZPDgHbmfJNaCUHhjJW+XjVVoG39RMFfY5V4IoDLQXyub0AoAUFPQkT5sPwEf83\nBkXtlaCW5JhM6GTNXfXi1P3CnV2ei8tnLl3LYxB8P/hEDetOGYXEnCOVKBFn5MyY\nQ7aBXOZwF5qD0c/yX87rKtYcyXrT/hzxrtQ/TVv8JoYKlxinb6UayI0559yIA9SR\nTH4MXvDMs4LSiWQ8UzjyoBpXlV5VBEnetwDvqmR2oCDQKIs5EmE+Wjo2xlThbFno\n7ZeQ+gz52X9ufn9ddjV1e2QyQVjaiXmFuLMpzyj/NeflQbx/O9c=\n=5cWk\n-----END PGP SIGNATURE-----", "payload": "tree fe83434450b958ab31fca70773bf68e9123c1527\nparent 2781cac8397b5d814e9d2b703863c32d66ba31c3\nauthor Vitaly _Vi Shukela <vi0oss@gmail.com> 1537283274 +0300\ncommitter flip1995 <9744647+flip1995@users.noreply.github.com> 1537447128 +0200\n\nFix indents\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eccccb367de1bc68835465cf3a38bc1a0311df9", "html_url": "https://github.com/rust-lang/rust/commit/3eccccb367de1bc68835465cf3a38bc1a0311df9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eccccb367de1bc68835465cf3a38bc1a0311df9/comments", "author": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2781cac8397b5d814e9d2b703863c32d66ba31c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2781cac8397b5d814e9d2b703863c32d66ba31c3", "html_url": "https://github.com/rust-lang/rust/commit/2781cac8397b5d814e9d2b703863c32d66ba31c3"}], "stats": {"total": 488, "additions": 253, "deletions": 235}, "files": [{"sha": "d33bf670f6f5082b27e0209acea1eb811ae5c452", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n                         \"try\",\n                         format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),\n                         Applicability::Unspecified,\n-                        );\n+                    );\n                 });\n             }\n         }"}, {"sha": "604e27f56ee4113dde930557eba03513d50125ca", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -418,12 +418,14 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                     NONMINIMAL_BOOL,\n                     e.span,\n                     \"this boolean expression can be simplified\",\n-                    |db| { db.span_suggestions_with_applicability(\n+                    |db| {\n+                        db.span_suggestions_with_applicability(\n                             e.span,\n                             \"try\",\n                             suggestions,\n                             Applicability::Unspecified,\n-                            ); },\n+                        );\n+                    },\n                 );\n             };\n             if improvements.is_empty() {"}, {"sha": "dcc0f65e3fc6393bd578ea4dd8c16cd41f976c2e", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -134,13 +134,16 @@ fn check_collapsible_no_if_let(cx: &EarlyContext<'_>, expr: &ast::Expr, check: &\n             span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this if statement can be collapsed\", |db| {\n                 let lhs = Sugg::ast(cx, check, \"..\");\n                 let rhs = Sugg::ast(cx, check_inner, \"..\");\n-                db.span_suggestion_with_applicability(expr.span,\n-                                   \"try\",\n-                                   format!(\"if {} {}\",\n-                                           lhs.and(&rhs),\n-                                           snippet_block(cx, content.span, \"..\")),\n-                                    Applicability::Unspecified,\n-                                    );\n+                db.span_suggestion_with_applicability(\n+                    expr.span,\n+                    \"try\",\n+                    format!(\n+                        \"if {} {}\",\n+                        lhs.and(&rhs),\n+                        snippet_block(cx, content.span, \"..\"),\n+                    ),\n+                    Applicability::Unspecified,\n+                );\n             });\n         }\n     }"}, {"sha": "4edc84c9d09203cba7bd5bff30dae9cf43a0ae9d", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -66,7 +66,7 @@ impl StaticConst {\n                                             \"consider removing `'static`\",\n                                             sugg,\n                                             Applicability::Unspecified,\n-                                            );\n+                                        );\n                                     },\n                                 );\n                             }"}, {"sha": "71203a247bfe8ccc3af21e84feb9761335f89f29", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -141,23 +141,23 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                                            snippet(self.cx, params[2].span, \"..\"));\n \n                         db.span_suggestion_with_applicability(\n-                                self.span,\n-                                \"consider using\",\n-                                help,\n-                                Applicability::Unspecified,\n-                                );\n+                            self.span,\n+                            \"consider using\",\n+                            help,\n+                            Applicability::Unspecified,\n+                        );\n                     }\n                     else {\n                         let help = format!(\"{}.entry({})\",\n                                            snippet(self.cx, self.map.span, \"map\"),\n                                            snippet(self.cx, params[1].span, \"..\"));\n \n                         db.span_suggestion_with_applicability(\n-                                self.span,\n-                                \"consider using\",\n-                                help,\n-                                Applicability::Unspecified,\n-                                );\n+                            self.span,\n+                            \"consider using\",\n+                            help,\n+                            Applicability::Unspecified,\n+                        );\n                     }\n                 });\n             }"}, {"sha": "f71472653bfaaa85fb3f4520d09cb0b7bd26c9ef", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -115,11 +115,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n                                 db.span_suggestion_with_applicability(\n-                                        left.span,\n-                                        \"use the left value directly\",\n-                                        lsnip,\n-                                        Applicability::Unspecified,\n-                                        );\n+                                    left.span,\n+                                    \"use the left value directly\",\n+                                    lsnip,\n+                                    Applicability::Unspecified,\n+                                );\n                             })\n                         } else if !lcpy && rcpy && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty.into()]) {\n                             span_lint_and_then(\n@@ -133,7 +133,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                         right.span,\n                                         \"use the right value directly\",\n                                         rsnip,\n-                                        Applicability::Unspecified,);\n+                                        Applicability::Unspecified,\n+                                    );\n                                 },\n                             )\n                         }\n@@ -146,11 +147,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n                                 db.span_suggestion_with_applicability(\n-                                        left.span,\n-                                        \"use the left value directly\",\n-                                        lsnip,\n-                                        Applicability::Unspecified,\n-                                        );\n+                                    left.span,\n+                                    \"use the left value directly\",\n+                                    lsnip,\n+                                    Applicability::Unspecified,\n+                                );\n                             })\n                         }\n                     },\n@@ -162,11 +163,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                             span_lint_and_then(cx, OP_REF, e.span, \"taken reference of right operand\", |db| {\n                                 let rsnip = snippet(cx, r.span, \"...\").to_string();\n                                 db.span_suggestion_with_applicability(\n-                                        right.span,\n-                                        \"use the right value directly\",\n-                                        rsnip,\n-                                        Applicability::Unspecified,\n-                                        );\n+                                    right.span,\n+                                    \"use the right value directly\",\n+                                    rsnip,\n+                                    Applicability::Unspecified,\n+                                );\n                             })\n                         }\n                     },"}, {"sha": "f18358121d651f91499f0802a02ef0c27c55e5ec", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -98,11 +98,11 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n             span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure found\", |db| {\n                 if let Some(snippet) = snippet_opt(cx, caller.span) {\n                     db.span_suggestion_with_applicability(\n-                            expr.span,\n-                            \"remove closure as shown\",\n-                            snippet,\n-                            Applicability::Unspecified,\n-                            );\n+                        expr.span,\n+                        \"remove closure as shown\",\n+                        snippet,\n+                        Applicability::Unspecified,\n+                    );\n                 }\n             });\n         }"}, {"sha": "29dca4556a5dd97ba84e66d4efa0659f18afe49d", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -62,11 +62,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                             let sugg = format!(\"{}.to_string()\", snippet(cx, format_arg, \"<arg>\").into_owned());\n                             span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n                                 db.span_suggestion_with_applicability(\n-                                        expr.span,\n-                                        \"consider using .to_string()\",\n-                                        sugg,\n-                                        Applicability::Unspecified,\n-                                        );\n+                                    expr.span,\n+                                    \"consider using .to_string()\",\n+                                    sugg,\n+                                    Applicability::Unspecified,\n+                                );\n                             });\n                         }\n                     }\n@@ -77,11 +77,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let sugg = format!(\"{}.to_string()\", snippet(cx, expr.span, \"<expr>\").into_owned());\n                         span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n                             db.span_suggestion_with_applicability(\n-                                    span,\n-                                    \"consider using .to_string()\",\n-                                    sugg,\n-                                    Applicability::Unspecified,\n-                                    );\n+                                span,\n+                                \"consider using .to_string()\",\n+                                sugg,\n+                                Applicability::Unspecified,\n+                            );\n                         });\n                     }\n                 },"}, {"sha": "411d7511d88238e57e0b5a6bcec38b2f03451058", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -65,11 +65,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n                         span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n                             db.span_suggestion_with_applicability(\n-                                    e.span,\n-                                    \"consider removing `.into()`\",\n-                                    sugg,\n-                                    Applicability::Unspecified,\n-                                    );\n+                                e.span,\n+                                \"consider removing `.into()`\",\n+                                sugg,\n+                                Applicability::Unspecified,\n+                            );\n                         });\n                     }\n                 }\n@@ -80,11 +80,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n                         span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n                             db.span_suggestion_with_applicability(\n-                                    e.span,\n-                                    \"consider removing `.into_iter()`\",\n-                                    sugg,\n-                                    Applicability::Unspecified,\n-                                    );\n+                                e.span,\n+                                \"consider removing `.into_iter()`\",\n+                                sugg,\n+                                Applicability::Unspecified,\n+                            );\n                         });\n                     }\n                 }\n@@ -100,11 +100,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                             let sugg_msg = format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n                             span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n                                 db.span_suggestion_with_applicability(\n-                                        e.span,\n-                                        &sugg_msg,\n-                                        sugg,\n-                                        Applicability::Unspecified,\n-                                        );\n+                                    e.span,\n+                                    &sugg_msg,\n+                                    sugg,\n+                                    Applicability::Unspecified,\n+                                );\n                             });\n                         }\n                     }"}, {"sha": "14566c4f02db695e92bc48efce30dfff0913a2e3", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -154,11 +154,11 @@ impl IntPlusOne {\n     fn emit_warning(&self, cx: &EarlyContext<'_>, block: &Expr, recommendation: String) {\n         span_lint_and_then(cx, INT_PLUS_ONE, block.span, \"Unnecessary `>= y + 1` or `x - 1 >=`\", |db| {\n             db.span_suggestion_with_applicability(\n-                    block.span,\n-                    \"change `>= y + 1` to `> y` as shown\",\n-                    recommendation,\n-                    Applicability::Unspecified,\n-                    );\n+                block.span,\n+                \"change `>= y + 1` to `> y` as shown\",\n+                recommendation,\n+                Applicability::Unspecified,\n+            );\n         });\n     }\n }"}, {"sha": "bdeaeda7bc5dc03198bc9019894f4df195711cf2", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -122,11 +122,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                                        \"`if _ { .. } else { .. }` is an expression\",\n                                        |db| {\n                                            db.span_suggestion_with_applicability(\n-                                                    span,\n-                                                    \"it is more idiomatic to write\",\n-                                                    sug,\n-                                                    Applicability::Unspecified,\n-                                                    );\n+                                                span,\n+                                                \"it is more idiomatic to write\",\n+                                                sug,\n+                                                Applicability::Unspecified,\n+                                            );\n                                            if !mutability.is_empty() {\n                                                db.note(\"you might not need `mut` at all\");\n                                            }"}, {"sha": "f4d48e3ad9ad4492653b5357f4a0a7c000cd148e", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -229,20 +229,22 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n                                          snippet(cx, var_arg.span, \"_\"),\n                                          snippet(cx, reduced_expr_span, \"_\"));\n                 db.span_suggestion_with_applicability(\n-                        stmt.span,\n-                        \"try this\",\n-                        suggestion,\n-                        Applicability::Unspecified,\n-                        );\n+                    stmt.span,\n+                    \"try this\",\n+                    suggestion,\n+                    Applicability::Unspecified,\n+                );\n             } else {\n                 let suggestion = format!(\"if let {0}({1}) = {2} {{ ... }}\",\n                                          variant,\n                                          snippet(cx, binding.pat.span, \"_\"),\n                                          snippet(cx, var_arg.span, \"_\"));\n-                db.span_suggestion_with_applicability(stmt.span,\n-                                                      \"try this\",\n-                                                      suggestion,\n-                                                      Applicability::Unspecified);\n+                db.span_suggestion_with_applicability(\n+                    stmt.span,\n+                    \"try this\",\n+                    suggestion,\n+                    Applicability::Unspecified,\n+                );\n             }\n         });\n     }"}, {"sha": "d8e11d68479557becf7a0e37ee8eea3d8a26deac", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -341,11 +341,11 @@ fn check_match_bool(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr: &Ex\n \n                         if let Some(sugg) = sugg {\n                             db.span_suggestion_with_applicability(\n-                                    expr.span,\n-                                    \"consider using an if/else expression\",\n-                                    sugg,\n-                                    Applicability::Unspecified,\n-                                    );\n+                                expr.span,\n+                                \"consider using an if/else expression\",\n+                                sugg,\n+                                Applicability::Unspecified,\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "5f8dc63ea5734e099983c063451ddb43082644cb", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -1129,17 +1129,17 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n                     let derefs: String = iter::repeat('*').take(n).collect();\n                     let explicit = format!(\"{}{}::clone({})\", refs, ty, snip);\n                     db.span_suggestion_with_applicability(\n-                            expr.span,\n-                            \"try dereferencing it\",\n-                            format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()),\n-                            Applicability::Unspecified,\n-                            );\n+                        expr.span,\n+                        \"try dereferencing it\",\n+                        format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()),\n+                        Applicability::Unspecified,\n+                    );\n                     db.span_suggestion_with_applicability(\n-                            expr.span, \n-                            \"or try being explicit about what type to clone\", \n-                            explicit,\n-                            Applicability::Unspecified,\n-                            );\n+                        expr.span, \n+                        \"or try being explicit about what type to clone\", \n+                        explicit,\n+                        Applicability::Unspecified,\n+                    );\n                 },\n             );\n             return; // don't report clone_on_copy\n@@ -1185,7 +1185,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n                     text,\n                     snip,\n                     Applicability::Unspecified,\n-                    );\n+                );\n             }\n         });\n     }\n@@ -1656,11 +1656,11 @@ fn lint_map_or_none<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr,\n             let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n             span_lint_and_then(cx, OPTION_MAP_OR_NONE, expr.span, msg, |db| {\n                 db.span_suggestion_with_applicability(\n-                        expr.span,\n-                        \"try using and_then instead\",\n-                        hint,\n-                        Applicability::Unspecified,\n-                        );\n+                    expr.span,\n+                    \"try using and_then instead\",\n+                    hint,\n+                    Applicability::Unspecified,\n+                );\n             });\n         }\n     }"}, {"sha": "0f0c86bfeb26c20182607ed1d93dd57da089573f", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -295,14 +295,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         l.pat.span,\n                         \"`ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\",\n                         |db| {\n-                            db.span_suggestion_with_applicability(s.span,\n-                                               \"try\",\n-                                               format!(\"let {name}{tyopt} = {initref};\",\n-                                                       name=snippet(cx, i.span, \"_\"),\n-                                                       tyopt=tyopt,\n-                                                       initref=initref),\n-                                               Applicability::Unspecified,\n-                                               );\n+                            db.span_suggestion_with_applicability(\n+                                s.span,\n+                                \"try\",\n+                                format!(\n+                                    \"let {name}{tyopt} = {initref};\",\n+                                    name=snippet(cx, i.span, \"_\"),\n+                                    tyopt=tyopt,\n+                                    initref=initref,\n+                                ),\n+                                Applicability::Unspecified,\n+                            );\n                         }\n                     );\n                 }\n@@ -321,13 +324,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     |db| {\n                         let sugg = if binop.node == BinOpKind::Or { !sugg } else { sugg };\n                         db.span_suggestion_with_applicability(\n-                                           s.span, \n-                                           \"replace it with\",\n-                                           format!(\"if {} {{ {}; }}\",\n-                                                sugg, \n-                                                &snippet(cx, b.span, \"..\")),\n-                                           Applicability::Unspecified,\n-                                           );\n+                            s.span, \n+                            \"replace it with\",\n+                            format!(\n+                                \"if {} {{ {}; }}\",\n+                                sugg, \n+                                &snippet(cx, b.span, \"..\"),\n+                            ),\n+                            Applicability::Unspecified,\n+                        );\n                     });\n             }\n         };\n@@ -545,11 +550,11 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n                 }\n             }\n             db.span_suggestion_with_applicability(\n-                        expr.span, \n-                        \"try\",\n-                        snip.to_string(),\n-                        Applicability::Unspecified,\n-                        );\n+                expr.span, \n+                \"try\",\n+                snip.to_string(),\n+                Applicability::Unspecified,\n+            );\n         },\n     );\n }"}, {"sha": "07c363d6f24671cddd61bf173c3315761fd2cc74", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -309,11 +309,11 @@ impl EarlyLintPass for MiscEarly {\n                         |db| if decl.inputs.is_empty() {\n                             let hint = snippet(cx, block.span, \"..\").into_owned();\n                             db.span_suggestion_with_applicability(\n-                                    expr.span,\n-                                    \"Try doing something like: \",\n-                                    hint,\n-                                    Applicability::Unspecified,\n-                                    );\n+                                expr.span,\n+                                \"Try doing something like: \",\n+                                hint,\n+                                Applicability::Unspecified,\n+                            );\n                         },\n                     );\n                 }"}, {"sha": "1e0db1a0f9ae3ccbef452b59ede006ed10bfa3fd", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -77,11 +77,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                             |db| {\n                                 if let Some(snippet) = snippet_opt(cx, inner.span) {\n                                     db.span_suggestion_with_applicability(\n-                                                e.span, \n-                                                \"change this to\",\n-                                                snippet,\n-                                                Applicability::Unspecified,\n-                                                );\n+                                        e.span, \n+                                        \"change this to\",\n+                                        snippet,\n+                                        Applicability::Unspecified,\n+                                    );\n                                 }\n                             },\n                         );\n@@ -110,11 +110,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                     |db| {\n                         if let Some(snippet) = snippet_opt(cx, name.span) {\n                             db.span_suggestion_with_applicability(\n-                                    pat.span,\n-                                    \"change this to\",\n-                                    snippet,\n-                                    Applicability::Unspecified,\n-                                    );\n+                                pat.span,\n+                                \"change this to\",\n+                                snippet,\n+                                Applicability::Unspecified,\n+                            );\n                         }\n                     }\n                 )"}, {"sha": "fd275752506c270cc3e5fd38a50011e32d64410e", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -79,11 +79,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n                                    |db| {\n                                        let hint = snippet(cx, spanned_name.span, \"..\").into_owned();\n                                        db.span_suggestion_with_applicability(\n-                                            pat.span, \n-                                            \"try removing the `&ref` part and just keep\",\n-                                            hint,\n-                                            Applicability::Unspecified,\n-                                            );\n+                                           pat.span, \n+                                           \"try removing the `&ref` part and just keep\",\n+                                           hint,\n+                                           Applicability::Unspecified,\n+                                       );\n                                    });\n             }\n         }"}, {"sha": "980e2c28a348217c7a08192c8e0975429138552d", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -229,11 +229,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                             then {\n                                 let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n                                 db.span_suggestion_with_applicability(\n-                                                input.span,\n-                                                \"consider changing the type to\",\n-                                                slice_ty,\n-                                                Applicability::Unspecified,\n-                                                );\n+                                    input.span,\n+                                    \"consider changing the type to\",\n+                                    slice_ty,\n+                                    Applicability::Unspecified,\n+                                );\n \n                                 for (span, suggestion) in clone_spans {\n                                     db.span_suggestion_with_applicability(\n@@ -258,11 +258,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n                                 db.span_suggestion_with_applicability(\n-                                            input.span,\n-                                            \"consider changing the type to\",\n-                                            \"&str\".to_string(),\n-                                            Applicability::Unspecified,\n-                                            );\n+                                    input.span,\n+                                    \"consider changing the type to\",\n+                                    \"&str\".to_string(),\n+                                    Applicability::Unspecified,\n+                                );\n \n                                 for (span, suggestion) in clone_spans {\n                                     db.span_suggestion_with_applicability("}, {"sha": "bf5fbb8a7f5b7021651f420247ab0dce35e48688", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -131,12 +131,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                             &format!(\"you should consider deriving a `Default` implementation for `{}`\", self_ty),\n                                             |db| {\n                                                 db.suggest_item_with_attr(\n-                                                        cx,\n-                                                        sp,\n-                                                        \"try this\",\n-                                                        \"#[derive(Default)]\",\n-                                                        Applicability::Unspecified,\n-                                                        );\n+                                                    cx,\n+                                                    sp,\n+                                                    \"try this\",\n+                                                    \"#[derive(Default)]\",\n+                                                    Applicability::Unspecified,\n+                                                );\n                                             });\n                                     } else {\n                                         span_lint_and_then("}, {"sha": "86cb89f2de124744821d52333bedfcddd4269196", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -212,11 +212,11 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                         \"writing `&String` instead of `&str` involves a new object where a slice will do.\",\n                         |db| {\n                             db.span_suggestion_with_applicability(\n-                                    arg.span,\n-                                    \"change this to\",\n-                                    \"&str\".into(),\n-                                    Applicability::Unspecified,\n-                                    );\n+                                arg.span,\n+                                \"change this to\",\n+                                \"&str\".into(),\n+                                Applicability::Unspecified,\n+                            );\n                             for (clonespan, suggestion) in spans {\n                                 db.span_suggestion_short_with_applicability(\n                                     clonespan,\n@@ -253,11 +253,11 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                                 \"using a reference to `Cow` is not recommended.\",\n                                 |db| {\n                                     db.span_suggestion_with_applicability(\n-                                            arg.span,\n-                                            \"change this to\",\n-                                            \"&\".to_owned() + &r,\n-                                            Applicability::Unspecified,\n-                                            );\n+                                        arg.span,\n+                                        \"change this to\",\n+                                        \"&\".to_owned() + &r,\n+                                        Applicability::Unspecified,\n+                                    );\n                                 },\n                             );\n                         }"}, {"sha": "71b68d97e4017a8f44caa7d222d2407248b4f749", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -151,17 +151,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let end = Sugg::hir(cx, y, \"y\");\n                         if let Some(is_wrapped) = &snippet_opt(cx, expr.span) {\n                             if is_wrapped.starts_with('(') && is_wrapped.ends_with(')') {\n-                                db.span_suggestion_with_applicability(expr.span,\n-                                           \"use\",\n-                                           format!(\"({}..={})\", start, end),\n-                                           Applicability::Unspecified,\n-                                           );\n+                                db.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    \"use\",\n+                                    format!(\"({}..={})\", start, end),\n+                                    Applicability::Unspecified,\n+                                );\n                             } else {\n-                                db.span_suggestion_with_applicability(expr.span,\n-                                           \"use\",\n-                                           format!(\"{}..={}\", start, end),\n-                                           Applicability::Unspecified,\n-                                           );\n+                                db.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    \"use\",\n+                                    format!(\"{}..={}\", start, end),\n+                                    Applicability::Unspecified,\n+                                );\n                             }\n                         }\n                     },\n@@ -182,11 +184,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     |db| {\n                         let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n                         let end = Sugg::hir(cx, y, \"y\");\n-                        db.span_suggestion_with_applicability(expr.span,\n-                                           \"use\",\n-                                           format!(\"{}..{}\", start, end),\n-                                           Applicability::Unspecified,\n-                                           );\n+                        db.span_suggestion_with_applicability(\n+                            expr.span,\n+                            \"use\",\n+                            format!(\"{}..{}\", start, end),\n+                            Applicability::Unspecified,\n+                        );\n                     },\n                 );\n             }"}, {"sha": "f90d8659dbe81246ce5f3dc0802695df15b779a7", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -110,11 +110,11 @@ impl ReturnPass {\n         span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n             if let Some(snippet) = snippet_opt(cx, inner_span) {\n                 db.span_suggestion_with_applicability(\n-                            ret_span,\n-                            \"remove `return` as shown\",\n-                            snippet,\n-                            Applicability::Unspecified,\n-                            );\n+                    ret_span,\n+                    \"remove `return` as shown\",\n+                    snippet,\n+                    Applicability::Unspecified,\n+                );\n             }\n         });\n     }"}, {"sha": "5ca78957f08e7fef30c64b4be49b68575fe3f041", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -138,11 +138,11 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                                    |db| {\n                                        if !sugg.is_empty() {\n                                            db.span_suggestion_with_applicability(\n-                                                        span,\n-                                                        \"try\",\n-                                                        sugg,\n-                                                        Applicability::Unspecified,\n-                                                        );\n+                                               span,\n+                                               \"try\",\n+                                               sugg,\n+                                               Applicability::Unspecified,\n+                                           );\n \n                                            if replace {\n                                                db.note(\"or maybe you should use `std::mem::replace`?\");\n@@ -187,13 +187,15 @@ fn check_suspicious_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                                    |db| {\n                                        if !what.is_empty() {\n                                            db.span_suggestion_with_applicability(\n-                                                              span,\n-                                                              \"try\",\n-                                                              format!(\"std::mem::swap({}, {})\",\n-                                                                    lhs,\n-                                                                    rhs),\n-                                                              Applicability::Unspecified,\n-                                                              );\n+                                               span,\n+                                               \"try\",\n+                                               format!(\n+                                                   \"std::mem::swap({}, {})\",\n+                                                   lhs,\n+                                                   rhs,\n+                                               ),\n+                                               Applicability::Unspecified,\n+                                           );\n                                            db.note(\"or maybe you should use `std::mem::replace`?\");\n                                        }\n                                    });"}, {"sha": "69422056df5e5418c97985b8f2099ec286df80c1", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -247,11 +247,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     };\n \n                                     db.span_suggestion_with_applicability(\n-                                                e.span,\n-                                                \"try\",\n-                                                sugg.to_string(),\n-                                                Applicability::Unspecified,\n-                                                );\n+                                        e.span,\n+                                        \"try\",\n+                                        sugg.to_string(),\n+                                        Applicability::Unspecified,\n+                                    );\n                                 },\n                             ),\n                             (&ty::Int(_), &ty::RawPtr(_)) | (&ty::Uint(_), &ty::RawPtr(_)) => {\n@@ -262,11 +262,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     \"transmute from an integer to a pointer\",\n                                     |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n                                         db.span_suggestion_with_applicability(\n-                                                e.span,\n-                                                \"try\",\n-                                                arg.as_ty(&to_ty.to_string()).to_string(),\n-                                                Applicability::Unspecified,\n-                                                );\n+                                            e.span,\n+                                            \"try\",\n+                                            arg.as_ty(&to_ty.to_string()).to_string(),\n+                                            Applicability::Unspecified,\n+                                        );\n                                     },\n                                 )\n                             },\n@@ -324,11 +324,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     };\n \n                                     db.span_suggestion_with_applicability(\n-                                                e.span,\n-                                                \"try\",\n-                                                sugg::make_unop(deref, arg).to_string(),\n-                                                Applicability::Unspecified,\n-                                                );\n+                                        e.span,\n+                                        \"try\",\n+                                        sugg::make_unop(deref, arg).to_string(),\n+                                        Applicability::Unspecified,\n+                                    );\n                                 },\n                             ),\n                             (&ty::Int(ast::IntTy::I32), &ty::Char) |\n@@ -399,11 +399,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                                         sugg_paren.addr_deref()\n                                                     };\n                                                     db.span_suggestion_with_applicability(\n-                                                            e.span,\n-                                                            \"try\",\n-                                                            sugg.to_string(),\n-                                                            Applicability::Unspecified,\n-                                                            );\n+                                                        e.span,\n+                                                        \"try\",\n+                                                        sugg.to_string(),\n+                                                        Applicability::Unspecified,\n+                                                    );\n                                                 },\n                                             )\n                                         }\n@@ -418,11 +418,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n                                     let sugg = arg.as_ty(cx.tcx.mk_ptr(to_ty));\n                                     db.span_suggestion_with_applicability(\n-                                            e.span,\n-                                            \"try\",\n-                                            sugg.to_string(),\n-                                            Applicability::Unspecified,\n-                                            );\n+                                        e.span,\n+                                        \"try\",\n+                                        sugg.to_string(),\n+                                        Applicability::Unspecified,\n+                                    );\n                                 },\n                             ),\n                             (&ty::Int(ast::IntTy::I8), &ty::Bool) | (&ty::Uint(ast::UintTy::U8), &ty::Bool) => {"}, {"sha": "076907e4945232ed2596bf8399a9c988e54c3a02", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eccccb367de1bc68835465cf3a38bc1a0311df9/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=3eccccb367de1bc68835465cf3a38bc1a0311df9", "patch": "@@ -546,10 +546,10 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n         }\n \n         self.span_suggestion_with_applicability(\n-                    remove_span,\n-                    msg,\n-                    String::new(),\n-                    applicability,\n-                    );\n+            remove_span,\n+            msg,\n+            String::new(),\n+            applicability,\n+        );\n     }\n }"}]}