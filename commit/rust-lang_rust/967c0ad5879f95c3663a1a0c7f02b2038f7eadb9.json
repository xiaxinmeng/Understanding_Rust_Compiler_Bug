{"sha": "967c0ad5879f95c3663a1a0c7f02b2038f7eadb9", "node_id": "C_kwDOAAsO6NoAKDk2N2MwYWQ1ODc5Zjk1YzM2NjNhMWEwYzdmMDJiMjAzOGY3ZWFkYjk", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-01-19T15:44:13Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-01-19T15:44:17Z"}, "message": "Implement `IterMut::as_mut_slice`", "tree": {"sha": "61e75b0cbd7bebacb32cbec1dd78dc24bd3c0984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61e75b0cbd7bebacb32cbec1dd78dc24bd3c0984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/967c0ad5879f95c3663a1a0c7f02b2038f7eadb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/967c0ad5879f95c3663a1a0c7f02b2038f7eadb9", "html_url": "https://github.com/rust-lang/rust/commit/967c0ad5879f95c3663a1a0c7f02b2038f7eadb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/967c0ad5879f95c3663a1a0c7f02b2038f7eadb9/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "html_url": "https://github.com/rust-lang/rust/commit/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "2821109cd89f9bca4de04072ca8109456736907c", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/967c0ad5879f95c3663a1a0c7f02b2038f7eadb9/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967c0ad5879f95c3663a1a0c7f02b2038f7eadb9/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=967c0ad5879f95c3663a1a0c7f02b2038f7eadb9", "patch": "@@ -304,6 +304,47 @@ impl<'a, T> IterMut<'a, T> {\n     pub fn as_slice(&self) -> &[T] {\n         self.make_slice()\n     }\n+\n+    /// Views the underlying data as a mutable subslice of the original data.\n+    ///\n+    /// To avoid creating `&mut [T]` references that alias, the returned slice\n+    /// borrows its lifetime from the iterator the method is applied on.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(slice_iter_mut_as_mut_slice)]\n+    ///\n+    /// let mut slice: &mut [usize] = &mut [1, 2, 3];\n+    ///\n+    /// // First, we get the iterator:\n+    /// let mut iter = slice.iter_mut();\n+    /// // Then, we get a mutable slice from it:\n+    /// let mut_slice = iter.as_mut_slice();\n+    /// // So if we check what the `as_mut_slice` method returned, we have \"[1, 2, 3]\":\n+    /// assert_eq!(mut_slice, &mut [1, 2, 3]);\n+    ///\n+    /// // We can use it to mutate the slice:\n+    /// mut_slice[0] = 4;\n+    /// mut_slice[2] = 5;\n+    ///\n+    /// // Next, we can move to the second element of the slice, checking that\n+    /// // it yields the value we just wrote:\n+    /// assert_eq!(iter.next(), Some(&mut 4));\n+    /// // Now `as_mut_slice` returns \"[2, 5]\":\n+    /// assert_eq!(iter.as_mut_slice(), &mut [2, 5]);\n+    /// ```\n+    #[must_use]\n+    // FIXME: Uncomment the `AsMut<[T]>` impl when this gets stabilized.\n+    #[unstable(feature = \"slice_iter_mut_as_mut_slice\", issue = \"93079\")]\n+    pub fn as_mut_slice(&mut self) -> &mut [T] {\n+        // SAFETY: the iterator was created from a mutable slice with pointer\n+        // `self.ptr` and length `len!(self)`. This guarantees that all the prerequisites\n+        // for `from_raw_parts_mut` are fulfilled.\n+        unsafe { from_raw_parts_mut(self.ptr.as_ptr(), len!(self)) }\n+    }\n }\n \n #[stable(feature = \"slice_iter_mut_as_slice\", since = \"1.53.0\")]\n@@ -313,6 +354,13 @@ impl<T> AsRef<[T]> for IterMut<'_, T> {\n     }\n }\n \n+// #[stable(feature = \"slice_iter_mut_as_mut_slice\", since = \"FIXME\")]\n+// impl<T> AsMut<[T]> for IterMut<'_, T> {\n+//     fn as_mut(&mut self) -> &mut [T] {\n+//         self.as_mut_slice()\n+//     }\n+// }\n+\n iterator! {struct IterMut -> *mut T, &'a mut T, mut, {mut}, {}}\n \n /// An internal abstraction over the splitting iterators, so that"}]}