{"sha": "23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYmZhNjAwYTBmOTFmMWVhNjJlYTNmMzc4M2MzNThhN2NiN2RhNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-23T00:21:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-23T00:21:29Z"}, "message": "auto merge of #8659 : msullivan/rust/default-methods, r=alexcrichton", "tree": {"sha": "5cbc5e327157d1fc25e40c5445b59dbe83850636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cbc5e327157d1fc25e40c5445b59dbe83850636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "html_url": "https://github.com/rust-lang/rust/commit/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f858452391c63bfbf46678c4ea9fd584adf1c28e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f858452391c63bfbf46678c4ea9fd584adf1c28e", "html_url": "https://github.com/rust-lang/rust/commit/f858452391c63bfbf46678c4ea9fd584adf1c28e"}, {"sha": "7b08b2c838c440d03e3e01f090e648e14ebfa083", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b08b2c838c440d03e3e01f090e648e14ebfa083", "html_url": "https://github.com/rust-lang/rust/commit/7b08b2c838c440d03e3e01f090e648e14ebfa083"}], "stats": {"total": 113, "additions": 92, "deletions": 21}, "files": [{"sha": "a18fffda32e4b581f57a41e3e1c27f2895feaa4a", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "patch": "@@ -1617,7 +1617,7 @@ impl Liveness {\n \n     pub fn should_warn(&self, var: Variable) -> Option<@str> {\n         let name = self.ir.variable_name(var);\n-        if name[0] == ('_' as u8) { None } else { Some(name) }\n+        if name.len() == 0 || name[0] == ('_' as u8) { None } else { Some(name) }\n     }\n \n     pub fn warn_about_unused_args(&self, decl: &fn_decl, entry_ln: LiveNode) {"}, {"sha": "c0534b89f79adfeb8db5ae4c97a3a856002b70f4", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "patch": "@@ -577,20 +577,23 @@ fn emit_vtable_methods(bcx: @mut Block,\n \n     let trait_method_def_ids = ty::trait_method_def_ids(tcx, trt_id);\n     do trait_method_def_ids.map |method_def_id| {\n-        let im = ty::method(tcx, *method_def_id);\n+        let ident = ty::method(tcx, *method_def_id).ident;\n+        // The substitutions we have are on the impl, so we grab\n+        // the method type from the impl to substitute into.\n+        let m_id = method_with_name(ccx, impl_id, ident);\n+        let m = ty::method(tcx, m_id);\n+        debug!(\"(making impl vtable) emitting method %s at subst %s\",\n+               m.repr(tcx),\n+               substs.repr(tcx));\n         let fty = ty::subst_tps(tcx,\n                                 substs,\n                                 None,\n-                                ty::mk_bare_fn(tcx, im.fty.clone()));\n-        if im.generics.has_type_params() || ty::type_has_self(fty) {\n+                                ty::mk_bare_fn(tcx, m.fty.clone()));\n+        if m.generics.has_type_params() || ty::type_has_self(fty) {\n             debug!(\"(making impl vtable) method has self or type params: %s\",\n-                   tcx.sess.str_of(im.ident));\n+                   tcx.sess.str_of(ident));\n             C_null(Type::nil().ptr_to())\n         } else {\n-            debug!(\"(making impl vtable) adding method to vtable: %s\",\n-                   tcx.sess.str_of(im.ident));\n-            let m_id = method_with_name(ccx, impl_id, im.ident);\n-\n             trans_fn_ref_with_vtables(bcx, m_id, 0,\n                                       substs, Some(vtables)).llfn\n         }"}, {"sha": "c15f6a254457e66d8dcc91e8efece7af90514bf9", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "patch": "@@ -938,9 +938,18 @@ impl<'self> LookupContext<'self> {\n \n         // static methods should never have gotten this far:\n         assert!(candidate.method_ty.explicit_self != sty_static);\n-        let transformed_self_ty =\n-            ty::subst(tcx, &candidate.rcvr_substs,\n-                      candidate.method_ty.transformed_self_ty.unwrap());\n+\n+        let transformed_self_ty = match candidate.origin {\n+            method_object(*) => {\n+                // For annoying reasons, we've already handled the\n+                // substitution for object calls.\n+                candidate.method_ty.transformed_self_ty.unwrap()\n+            }\n+            _ => {\n+                ty::subst(tcx, &candidate.rcvr_substs,\n+                          candidate.method_ty.transformed_self_ty.unwrap())\n+            }\n+        };\n \n         // Determine the values for the type parameters of the method.\n         // If they were not explicitly supplied, just construct fresh"}, {"sha": "5ce82ad6e2ca466dbd778a6ba67659d9380c804e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "patch": "@@ -3092,7 +3092,6 @@ pub fn ty_param_bounds_and_ty_for_def(fcx: @mut FnCtxt,\n                                       sp: span,\n                                       defn: ast::def)\n                                    -> ty_param_bounds_and_ty {\n-\n     match defn {\n       ast::def_arg(nid, _) | ast::def_local(nid, _) | ast::def_self(nid, _) |\n       ast::def_binding(nid, _) => {\n@@ -3149,7 +3148,8 @@ pub fn instantiate_path(fcx: @mut FnCtxt,\n     let ty_param_count = tpt.generics.type_param_defs.len();\n     let ty_substs_len = pth.types.len();\n \n-    debug!(\"ty_param_count=%? ty_substs_len=%?\",\n+    debug!(\"tpt=%s ty_param_count=%? ty_substs_len=%?\",\n+           tpt.repr(fcx.tcx()),\n            ty_param_count,\n            ty_substs_len);\n "}, {"sha": "cb0244bb610b2c6a6f87f4ae0950a70676eac23a", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "patch": "@@ -346,9 +346,10 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n         let substd_type_param_defs = m.generics.type_param_defs.subst(tcx, &substs);\n         new_type_param_defs.push_all(*substd_type_param_defs);\n \n-        debug!(\"static method %s type_param_defs=%s substs=%s\",\n+        debug!(\"static method %s type_param_defs=%s ty=%s, substs=%s\",\n                m.def_id.repr(tcx),\n                new_type_param_defs.repr(tcx),\n+               ty.repr(tcx),\n                substs.repr(tcx));\n \n         tcx.tcache.insert(m.def_id,\n@@ -893,8 +894,8 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::item) {\n       }\n       ast::item_trait(ref generics, _, ref trait_methods) => {\n           let _trait_def = trait_def_of_item(ccx, it);\n-          ensure_trait_methods(ccx, it.id);\n \n+          // Run convert_methods on the provided methods.\n           let (_, provided_methods) =\n               split_trait_methods(*trait_methods);\n           let untransformed_rcvr_ty = ty::mk_self(tcx, local_def(it.id));\n@@ -904,6 +905,11 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::item) {\n                                   untransformed_rcvr_ty,\n                                   &ty_generics, generics,\n                                   it.vis);\n+\n+          // We need to do this *after* converting methods, since\n+          // convert_methods produces a tcache entry that is wrong for\n+          // static trait methods. This is somewhat unfortunate.\n+          ensure_trait_methods(ccx, it.id);\n       }\n       ast::item_struct(struct_def, ref generics) => {\n         ensure_no_ty_param_bounds(ccx, it.span, generics, \"structure\");"}, {"sha": "0efa0782da902629c87ac4173fc7a8b75a1ce57f", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "patch": "@@ -678,6 +678,7 @@ fn rustpkg_local_pkg() {\n }\n \n #[test]\n+#[ignore (reason = \"test makes bogus assumptions about build directory layout: issue #8690\")]\n fn package_script_with_default_build() {\n     let dir = create_local_package(&PkgId::new(\"fancy-lib\"));\n     debug!(\"dir = %s\", dir.to_str());"}, {"sha": "9c9d19ba46b077d4b2d81e21a238963631a2afae", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "patch": "@@ -238,12 +238,18 @@ impl Visitor<()> for Ctx {\n                     self.map.insert(p.ref_id, node_item(i, item_path));\n                 }\n                 for tm in methods.iter() {\n-                    let id = ast_util::trait_method_to_ty_method(tm).id;\n+                    let ext = { self.extend(i.ident) };\n                     let d_id = ast_util::local_def(i.id);\n-                    self.map.insert(id,\n-                                    node_trait_method(@(*tm).clone(),\n-                                                      d_id,\n-                                                      item_path));\n+                    match *tm {\n+                        required(ref m) => {\n+                            let entry =\n+                                node_trait_method(@(*tm).clone(), d_id, ext);\n+                            self.map.insert(m.id, entry);\n+                        }\n+                        provided(m) => {\n+                            self.map_method(d_id, ext, m, true);\n+                        }\n+                    }\n                 }\n             }\n             _ => {}"}, {"sha": "12b6af295202d2feb2a075959ecdc5787828efe7", "filename": "src/test/run-pass/trait-object-generics.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bfa600a0f91f1ea62ea3f3783c358a7cb7da45/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs?ref=23bfa600a0f91f1ea62ea3f3783c358a7cb7da45", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// test for #8664\n+\n+pub trait Trait2<A> {\n+    fn doit(&self);\n+}\n+\n+pub struct Impl<A1, A2, A3> {\n+    /*\n+     * With A2 we get the ICE:\n+     * task <unnamed> failed at 'index out of bounds: the len is 1 but the index is 1', /home/tortue/rust_compiler_newest/src/librustc/middle/subst.rs:58\n+     */\n+    t: ~Trait2<A2>\n+}\n+\n+impl<A1, A2, A3> Impl<A1, A2, A3> {\n+    pub fn step(&self) {\n+        self.t.doit()\n+    }\n+}\n+\n+// test for #8601\n+\n+enum Type<T> { Constant }\n+\n+trait Trait<K,V> {\n+    fn method(&self,Type<(K,V)>) -> int;\n+}\n+\n+impl<V> Trait<u8,V> for () {\n+    fn method(&self, _x: Type<(u8,V)>) -> int { 0 }\n+}\n+\n+fn main () {\n+    let a = @() as @Trait<u8, u8>;\n+    assert_eq!(a.method(Constant), 0);\n+}"}]}