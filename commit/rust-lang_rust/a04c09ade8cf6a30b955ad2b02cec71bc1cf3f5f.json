{"sha": "a04c09ade8cf6a30b955ad2b02cec71bc1cf3f5f", "node_id": "C_kwDOAAsO6NoAKGEwNGMwOWFkZThjZjZhMzBiOTU1YWQyYjAyY2VjNzFiYzFjZjNmNWY", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-04-15T18:58:50Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-04-18T14:52:47Z"}, "message": "Document how the HashN types are different from Fingerprint", "tree": {"sha": "1f0a70b58d23020e61d6e560450b5323738877c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f0a70b58d23020e61d6e560450b5323738877c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a04c09ade8cf6a30b955ad2b02cec71bc1cf3f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a04c09ade8cf6a30b955ad2b02cec71bc1cf3f5f", "html_url": "https://github.com/rust-lang/rust/commit/a04c09ade8cf6a30b955ad2b02cec71bc1cf3f5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a04c09ade8cf6a30b955ad2b02cec71bc1cf3f5f/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0445fbdd835c92156e4d06e42ce99a39e9315343", "url": "https://api.github.com/repos/rust-lang/rust/commits/0445fbdd835c92156e4d06e42ce99a39e9315343", "html_url": "https://github.com/rust-lang/rust/commit/0445fbdd835c92156e4d06e42ce99a39e9315343"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "f32f691226760022329548c17416b95b1b4d4ba3", "filename": "compiler/rustc_data_structures/src/hashes.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a04c09ade8cf6a30b955ad2b02cec71bc1cf3f5f/compiler%2Frustc_data_structures%2Fsrc%2Fhashes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04c09ade8cf6a30b955ad2b02cec71bc1cf3f5f/compiler%2Frustc_data_structures%2Fsrc%2Fhashes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fhashes.rs?ref=a04c09ade8cf6a30b955ad2b02cec71bc1cf3f5f", "patch": "@@ -1,7 +1,20 @@\n+//! rustc encodes a lot of hashes. If hashes are stored as `u64` or `u128`, a `derive(Encodable)`\n+//! will apply varint encoding to the hashes, which is less efficient than directly encoding the 8\n+//! or 16 bytes of the hash.\n+//!\n+//! The types in this module represent 64-bit or 128-bit hashes produced by a `StableHasher`.\n+//! `Hash64` and `Hash128` expose some utilty functions to encourage users to not extract the inner\n+//! hash value as an integer type and accidentally apply varint encoding to it.\n+//!\n+//! In contrast with `Fingerprint`, users of these types cannot and should not attempt to construct\n+//! and decompose these types into constitutent pieces. The point of these types is only to\n+//! connect the fact that they can only be produced by a `StableHasher` to their\n+//! `Encode`/`Decode` impls.\n+\n+use crate::stable_hasher::{StableHasher, StableHasherResult};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n use std::ops::BitXorAssign;\n-use crate::stable_hasher::{StableHasher, StableHasherResult};\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]\n pub struct Hash64 {\n@@ -74,9 +87,7 @@ impl Hash128 {\n \n     #[inline]\n     pub fn wrapping_add(self, other: Self) -> Self {\n-        Self {\n-            inner: self.inner.wrapping_add(other.inner),\n-        }\n+        Self { inner: self.inner.wrapping_add(other.inner) }\n     }\n \n     #[inline]"}]}