{"sha": "ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219", "node_id": "C_kwDOAAsO6NoAKGFkN2ExZWQ4Y2M5YmE0NGM2YTI5NDMxN2EyMjg5YTBiNmZkNzUyMTk", "commit": {"author": {"name": "Dominik Gschwind", "email": "dominik.gschwind99@gmail.com", "date": "2022-08-16T15:30:17Z"}, "committer": {"name": "Dominik Gschwind", "email": "dominik.gschwind99@gmail.com", "date": "2022-08-16T15:30:17Z"}, "message": "fix: Fix panics on GATs involving const generics\n\nThis workaround avoids constant crashing of rust analyzer when using GATs with const generics,\neven when the const generics are only on the `impl` block.\n\nThe workaround treats GATs as non-existing if either itself or the parent has const generics and\nremoves relevant panicking code-paths.", "tree": {"sha": "cbf658c58e469840cf77ff19301c9c7eba64d731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbf658c58e469840cf77ff19301c9c7eba64d731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEesH/4Yj4Z0iPhYR5/TyCqcUcQCUFAmL7uAkACgkQ/TyCqcUc\nQCU/9Q//ZUcfA5yAc7oYawJgkFinWcRUd5zIARJSPejGTZvHyYSE/k+oh4WldSIx\ni7hDPRw4Tj8SQTfb/5CMxlE9UjNGEEKFUP+OHLdk9mbQU9n47SjdwxrYiUcZgv0O\n3QAjinvODrW9xOALnBOf15bOa4nLWaSkX9TKdUueVCsad3wgbLfsjgyEdIrXer6n\nW7hyn6dNrq9VgUUXRxGiLM/FEoeZqaLDa4CZPtK6lewLpWV3XNQuvBu0avvR4Mix\ngArMZj7QyCNQSsjwIMdRksRP3cnAFw6ysm+BXA4PVie1fsg2aZxxOr2JvLDTHLsW\nsFSY68Jng+rdspGR+4xs+e2Zb2hyHAdNWbdU+k5JS5cTMYecRcTEkJNoSwUzrQXn\neG/H9Js0tw64K0tnn9Ax/nnjvtJeJsLdGGxUE7nd/q+zrh8M7vfPPE81r7hLsxQP\n9u8RxDbdsGFyTV7uky62CiweqiJ6WI8csl5g8nk8mMSHYRYIX9up+J/1BjY8ZEO4\nFv6hVmSiQ4gUvvAo3lBzQm3JwjajZDaXT2fqW6HR5kgSF9J3QDVQzO/fHYGolUw6\ny4RDO5Ad1MzjX2uXyBOryWOsBVgcTnniR44/06S5cbB/wWqxICOd2r0ByOTtSpkM\nLBA/TJ1NRc4I/ijTTW1RIAr5VyOBOKT2CRU33e4eAx2SNIKyof0=\n=tWba\n-----END PGP SIGNATURE-----", "payload": "tree cbf658c58e469840cf77ff19301c9c7eba64d731\nparent b6d59f2bb4fae0ba4f74e2c967b5e2f777f8c860\nauthor Dominik Gschwind <dominik.gschwind99@gmail.com> 1660663817 +0200\ncommitter Dominik Gschwind <dominik.gschwind99@gmail.com> 1660663817 +0200\n\nfix: Fix panics on GATs involving const generics\n\nThis workaround avoids constant crashing of rust analyzer when using GATs with const generics,\neven when the const generics are only on the `impl` block.\n\nThe workaround treats GATs as non-existing if either itself or the parent has const generics and\nremoves relevant panicking code-paths.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219", "html_url": "https://github.com/rust-lang/rust/commit/ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219/comments", "author": {"login": "N3xed", "id": 11508388, "node_id": "MDQ6VXNlcjExNTA4Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/11508388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/N3xed", "html_url": "https://github.com/N3xed", "followers_url": "https://api.github.com/users/N3xed/followers", "following_url": "https://api.github.com/users/N3xed/following{/other_user}", "gists_url": "https://api.github.com/users/N3xed/gists{/gist_id}", "starred_url": "https://api.github.com/users/N3xed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/N3xed/subscriptions", "organizations_url": "https://api.github.com/users/N3xed/orgs", "repos_url": "https://api.github.com/users/N3xed/repos", "events_url": "https://api.github.com/users/N3xed/events{/privacy}", "received_events_url": "https://api.github.com/users/N3xed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "N3xed", "id": 11508388, "node_id": "MDQ6VXNlcjExNTA4Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/11508388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/N3xed", "html_url": "https://github.com/N3xed", "followers_url": "https://api.github.com/users/N3xed/followers", "following_url": "https://api.github.com/users/N3xed/following{/other_user}", "gists_url": "https://api.github.com/users/N3xed/gists{/gist_id}", "starred_url": "https://api.github.com/users/N3xed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/N3xed/subscriptions", "organizations_url": "https://api.github.com/users/N3xed/orgs", "repos_url": "https://api.github.com/users/N3xed/repos", "events_url": "https://api.github.com/users/N3xed/events{/privacy}", "received_events_url": "https://api.github.com/users/N3xed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6d59f2bb4fae0ba4f74e2c967b5e2f777f8c860", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d59f2bb4fae0ba4f74e2c967b5e2f777f8c860", "html_url": "https://github.com/rust-lang/rust/commit/b6d59f2bb4fae0ba4f74e2c967b5e2f777f8c860"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "3ec321ad3714f72778772301addf9974036b091c", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219", "patch": "@@ -509,7 +509,14 @@ impl<'a> TyLoweringContext<'a> {\n                         TyKind::Placeholder(to_placeholder_idx(self.db, param_id.into()))\n                     }\n                     ParamLoweringMode::Variable => {\n-                        let idx = generics.param_idx(param_id.into()).expect(\"matching generics\");\n+                        let idx = match generics.param_idx(param_id.into()) {\n+                            None => {\n+                                never!(\"no matching generics\");\n+                                return (TyKind::Error.intern(Interner), None);\n+                            }\n+                            Some(idx) => idx,\n+                        };\n+\n                         TyKind::BoundVar(BoundVar::new(self.in_binders, idx))\n                     }\n                 }"}, {"sha": "9b64fccccd249f791a19e70f54aa7c94fc4748da", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219", "patch": "@@ -1526,6 +1526,27 @@ unsafe impl Storage for InlineStorage {\n     );\n }\n \n+#[test]\n+fn gat_crash_3() {\n+    cov_mark::check!(ignore_gats);\n+    check_no_mismatches(\n+        r#\"\n+trait Collection {\n+    type Item;\n+    type Member<T>: Collection<Item = T>;\n+    fn add(&mut self, value: Self::Item) -> Result<(), Self::Error>;\n+}\n+struct ConstGen<T, const N: usize> {\n+    data: [T; N],\n+}\n+impl<T, const N: usize> Collection for ConstGen<T, N> {\n+    type Item = T;\n+    type Member<U> = ConstGen<U, N>;\n+}\n+        \"#,\n+    );\n+}\n+\n #[test]\n fn cfgd_out_self_param() {\n     cov_mark::check!(cfgd_out_self_param);"}, {"sha": "bdb9ade9c856983f37674fbea8ac59a5055b8bdc", "filename": "crates/hir-ty/src/utils.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219/crates%2Fhir-ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219/crates%2Fhir-ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Futils.rs?ref=ad7a1ed8cc9ba44c6a294317a2289a0b6fd75219", "patch": "@@ -176,10 +176,16 @@ pub(crate) fn generics(db: &dyn DefDatabase, def: GenericDefId) -> Generics {\n     let parent_generics = parent_generic_def(db, def).map(|def| Box::new(generics(db, def)));\n     if parent_generics.is_some() && matches!(def, GenericDefId::TypeAliasId(_)) {\n         let params = db.generic_params(def);\n+        let parent_params = &parent_generics.as_ref().unwrap().params;\n         let has_consts =\n             params.iter().any(|(_, x)| matches!(x, TypeOrConstParamData::ConstParamData(_)));\n-        return if has_consts {\n-            // XXX: treat const generic associated types as not existing to avoid crashes (#11769)\n+        let parent_has_consts =\n+            parent_params.iter().any(|(_, x)| matches!(x, TypeOrConstParamData::ConstParamData(_)));\n+        return if has_consts || parent_has_consts {\n+            // XXX: treat const generic associated types as not existing to avoid crashes\n+            // (#11769, #12193)\n+            // Note: also crashes when the parent has const generics (also even if the GAT\n+            // doesn't use them), see `tests::regression::gat_crash_3` for an example.\n             //\n             // Chalk expects the inner associated type's parameters to come\n             // *before*, not after the trait's generics as we've always done it.\n@@ -264,12 +270,8 @@ impl Generics {\n \n     fn find_param(&self, param: TypeOrConstParamId) -> Option<(usize, &TypeOrConstParamData)> {\n         if param.parent == self.def {\n-            let (idx, (_local_id, data)) = self\n-                .params\n-                .iter()\n-                .enumerate()\n-                .find(|(_, (idx, _))| *idx == param.local_id)\n-                .unwrap();\n+            let (idx, (_local_id, data)) =\n+                self.params.iter().enumerate().find(|(_, (idx, _))| *idx == param.local_id)?;\n             let parent_len = self.parent_generics().map_or(0, Generics::len);\n             Some((parent_len + idx, data))\n         } else {"}]}