{"sha": "1e546c5d79499a8b14d3e48fdd9111b7473ec6e5", "node_id": "C_kwDOAAsO6NoAKDFlNTQ2YzVkNzk0OTlhOGIxNGQzZTQ4ZmRkOTExMWI3NDczZWM2ZTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-22T13:00:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-22T13:00:39Z"}, "message": "Auto merge of #8278 - Alexendoo:needless-lifetime-explicit-self-ty, r=xFrednet\n\n`needless_lifetimes`: ignore lifetimes in explicit self types\n\nchangelog: false positive fix: [`needless_lifetimes`] no longer lints lifetimes in explicit self types\n\nThey're not currently elidable (https://github.com/rust-lang/rust/issues/69064)\n\nFixes #7296", "tree": {"sha": "e07502d8b3af94c7b71f5b2747c77e3bd941ebeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e07502d8b3af94c7b71f5b2747c77e3bd941ebeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e546c5d79499a8b14d3e48fdd9111b7473ec6e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e546c5d79499a8b14d3e48fdd9111b7473ec6e5", "html_url": "https://github.com/rust-lang/rust/commit/1e546c5d79499a8b14d3e48fdd9111b7473ec6e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e546c5d79499a8b14d3e48fdd9111b7473ec6e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acfc161fa660e518b95e95f96de2f7964c0f5d3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/acfc161fa660e518b95e95f96de2f7964c0f5d3e", "html_url": "https://github.com/rust-lang/rust/commit/acfc161fa660e518b95e95f96de2f7964c0f5d3e"}, {"sha": "9ef6e2199c885ffd671b321dfbf16ff0934f4d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef6e2199c885ffd671b321dfbf16ff0934f4d80", "html_url": "https://github.com/rust-lang/rust/commit/9ef6e2199c885ffd671b321dfbf16ff0934f4d80"}], "stats": {"total": 197, "additions": 162, "deletions": 35}, "files": [{"sha": "618cf4b8b2288398c61c75a1a323da10bef69095", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1e546c5d79499a8b14d3e48fdd9111b7473ec6e5/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e546c5d79499a8b14d3e48fdd9111b7473ec6e5/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=1e546c5d79499a8b14d3e48fdd9111b7473ec6e5", "patch": "@@ -15,7 +15,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::symbol::{kw, Ident, Symbol};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -85,7 +85,7 @@ declare_lint_pass!(Lifetimes => [NEEDLESS_LIFETIMES, EXTRA_UNUSED_LIFETIMES]);\n impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Fn(ref sig, ref generics, id) = item.kind {\n-            check_fn_inner(cx, sig.decl, Some(id), generics, item.span, true);\n+            check_fn_inner(cx, sig.decl, Some(id), None, generics, item.span, true);\n         }\n     }\n \n@@ -96,6 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n                 cx,\n                 sig.decl,\n                 Some(id),\n+                None,\n                 &item.generics,\n                 item.span,\n                 report_extra_lifetimes,\n@@ -105,11 +106,11 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n         if let TraitItemKind::Fn(ref sig, ref body) = item.kind {\n-            let body = match *body {\n-                TraitFn::Required(_) => None,\n-                TraitFn::Provided(id) => Some(id),\n+            let (body, trait_sig) = match *body {\n+                TraitFn::Required(sig) => (None, Some(sig)),\n+                TraitFn::Provided(id) => (Some(id), None),\n             };\n-            check_fn_inner(cx, sig.decl, body, &item.generics, item.span, true);\n+            check_fn_inner(cx, sig.decl, body, trait_sig, &item.generics, item.span, true);\n         }\n     }\n }\n@@ -126,6 +127,7 @@ fn check_fn_inner<'tcx>(\n     cx: &LateContext<'tcx>,\n     decl: &'tcx FnDecl<'_>,\n     body: Option<BodyId>,\n+    trait_sig: Option<&[Ident]>,\n     generics: &'tcx Generics<'_>,\n     span: Span,\n     report_extra_lifetimes: bool,\n@@ -167,7 +169,7 @@ fn check_fn_inner<'tcx>(\n             }\n         }\n     }\n-    if could_use_elision(cx, decl, body, generics.params) {\n+    if could_use_elision(cx, decl, body, trait_sig, generics.params) {\n         span_lint(\n             cx,\n             NEEDLESS_LIFETIMES,\n@@ -181,10 +183,31 @@ fn check_fn_inner<'tcx>(\n     }\n }\n \n+// elision doesn't work for explicit self types, see rust-lang/rust#69064\n+fn explicit_self_type<'tcx>(cx: &LateContext<'tcx>, func: &FnDecl<'tcx>, ident: Option<Ident>) -> bool {\n+    if_chain! {\n+        if let Some(ident) = ident;\n+        if ident.name == kw::SelfLower;\n+        if !func.implicit_self.has_implicit_self();\n+\n+        if let Some(self_ty) = func.inputs.first();\n+        then {\n+            let mut visitor = RefVisitor::new(cx);\n+            visitor.visit_ty(self_ty);\n+\n+            !visitor.all_lts().is_empty()\n+        }\n+        else {\n+            false\n+        }\n+    }\n+}\n+\n fn could_use_elision<'tcx>(\n     cx: &LateContext<'tcx>,\n     func: &'tcx FnDecl<'_>,\n     body: Option<BodyId>,\n+    trait_sig: Option<&[Ident]>,\n     named_generics: &'tcx [GenericParam<'_>],\n ) -> bool {\n     // There are two scenarios where elision works:\n@@ -235,11 +258,24 @@ fn could_use_elision<'tcx>(\n     let input_lts = input_visitor.lts;\n     let output_lts = output_visitor.lts;\n \n+    if let Some(trait_sig) = trait_sig {\n+        if explicit_self_type(cx, func, trait_sig.first().copied()) {\n+            return false;\n+        }\n+    }\n+\n     if let Some(body_id) = body {\n+        let body = cx.tcx.hir().body(body_id);\n+\n+        let first_ident = body.params.first().and_then(|param| param.pat.simple_ident());\n+        if explicit_self_type(cx, func, first_ident) {\n+            return false;\n+        }\n+\n         let mut checker = BodyLifetimeChecker {\n             lifetimes_used_in_body: false,\n         };\n-        checker.visit_expr(&cx.tcx.hir().body(body_id).value);\n+        checker.visit_expr(&body.value);\n         if checker.lifetimes_used_in_body {\n             return false;\n         }"}, {"sha": "f3eafe8e9279e2167bb2d7dfe7f94dd5deb3b15a", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1e546c5d79499a8b14d3e48fdd9111b7473ec6e5/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e546c5d79499a8b14d3e48fdd9111b7473ec6e5/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=1e546c5d79499a8b14d3e48fdd9111b7473ec6e5", "patch": "@@ -1,5 +1,11 @@\n #![warn(clippy::needless_lifetimes)]\n-#![allow(dead_code, clippy::needless_pass_by_value, clippy::unnecessary_wraps, dyn_drop)]\n+#![allow(\n+    dead_code,\n+    clippy::boxed_local,\n+    clippy::needless_pass_by_value,\n+    clippy::unnecessary_wraps,\n+    dyn_drop\n+)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n \n@@ -369,4 +375,47 @@ mod issue6159 {\n     }\n }\n \n+mod issue7296 {\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n+\n+    struct Foo;\n+    impl Foo {\n+        fn implicit<'a>(&'a self) -> &'a () {\n+            &()\n+        }\n+        fn implicit_mut<'a>(&'a mut self) -> &'a () {\n+            &()\n+        }\n+\n+        fn explicit<'a>(self: &'a Arc<Self>) -> &'a () {\n+            &()\n+        }\n+        fn explicit_mut<'a>(self: &'a mut Rc<Self>) -> &'a () {\n+            &()\n+        }\n+\n+        fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n+            &()\n+        }\n+    }\n+\n+    trait Bar {\n+        fn implicit<'a>(&'a self) -> &'a ();\n+        fn implicit_provided<'a>(&'a self) -> &'a () {\n+            &()\n+        }\n+\n+        fn explicit<'a>(self: &'a Arc<Self>) -> &'a ();\n+        fn explicit_provided<'a>(self: &'a Arc<Self>) -> &'a () {\n+            &()\n+        }\n+\n+        fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a ();\n+        fn lifetime_elsewhere_provided<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n+            &()\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "ffa152427a97740c108221fccfbfad53096500aa", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 68, "deletions": 26, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1e546c5d79499a8b14d3e48fdd9111b7473ec6e5/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e546c5d79499a8b14d3e48fdd9111b7473ec6e5/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=1e546c5d79499a8b14d3e48fdd9111b7473ec6e5", "patch": "@@ -1,154 +1,196 @@\n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:4:1\n+  --> $DIR/needless_lifetimes.rs:10:1\n    |\n LL | fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:6:1\n+  --> $DIR/needless_lifetimes.rs:12:1\n    |\n LL | fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:16:1\n+  --> $DIR/needless_lifetimes.rs:22:1\n    |\n LL | fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:50:1\n+  --> $DIR/needless_lifetimes.rs:56:1\n    |\n LL | fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:55:1\n+  --> $DIR/needless_lifetimes.rs:61:1\n    |\n LL | fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:67:1\n+  --> $DIR/needless_lifetimes.rs:73:1\n    |\n LL | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:91:1\n+  --> $DIR/needless_lifetimes.rs:97:1\n    |\n LL | fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:121:5\n+  --> $DIR/needless_lifetimes.rs:127:5\n    |\n LL |     fn self_and_out<'s>(&'s self) -> &'s u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:130:5\n+  --> $DIR/needless_lifetimes.rs:136:5\n    |\n LL |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:149:1\n+  --> $DIR/needless_lifetimes.rs:155:1\n    |\n LL | fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:179:1\n+  --> $DIR/needless_lifetimes.rs:185:1\n    |\n LL | fn trait_obj_elided2<'a>(_arg: &'a dyn Drop) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:185:1\n+  --> $DIR/needless_lifetimes.rs:191:1\n    |\n LL | fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:204:1\n+  --> $DIR/needless_lifetimes.rs:210:1\n    |\n LL | fn named_input_elided_output<'a>(_arg: &'a str) -> &str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:212:1\n+  --> $DIR/needless_lifetimes.rs:218:1\n    |\n LL | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:248:1\n+  --> $DIR/needless_lifetimes.rs:254:1\n    |\n LL | fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:255:9\n+  --> $DIR/needless_lifetimes.rs:261:9\n    |\n LL |         fn needless_lt<'a>(x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:259:9\n+  --> $DIR/needless_lifetimes.rs:265:9\n    |\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:272:9\n+  --> $DIR/needless_lifetimes.rs:278:9\n    |\n LL |         fn baz<'a>(&'a self) -> impl Foo + 'a {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:301:5\n+  --> $DIR/needless_lifetimes.rs:307:5\n    |\n LL |     fn impl_trait_elidable_nested_named_lifetimes<'a>(i: &'a i32, f: impl for<'b> Fn(&'b i32) -> &'b i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:304:5\n+  --> $DIR/needless_lifetimes.rs:310:5\n    |\n LL |     fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:313:5\n+  --> $DIR/needless_lifetimes.rs:319:5\n    |\n LL |     fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:325:5\n+  --> $DIR/needless_lifetimes.rs:331:5\n    |\n LL |     fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:340:5\n+  --> $DIR/needless_lifetimes.rs:346:5\n    |\n LL |     fn pointer_fn_elidable<'a>(i: &'a i32, f: fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:353:5\n+  --> $DIR/needless_lifetimes.rs:359:5\n    |\n LL |     fn nested_fn_pointer_3<'a>(_: &'a i32) -> fn(fn(&i32) -> &i32) -> i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:356:5\n+  --> $DIR/needless_lifetimes.rs:362:5\n    |\n LL |     fn nested_fn_pointer_4<'a>(_: &'a i32) -> impl Fn(fn(&i32)) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 25 previous errors\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:384:9\n+   |\n+LL |         fn implicit<'a>(&'a self) -> &'a () {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:387:9\n+   |\n+LL |         fn implicit_mut<'a>(&'a mut self) -> &'a () {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:398:9\n+   |\n+LL |         fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:404:9\n+   |\n+LL |         fn implicit<'a>(&'a self) -> &'a ();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:405:9\n+   |\n+LL |         fn implicit_provided<'a>(&'a self) -> &'a () {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:414:9\n+   |\n+LL |         fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a ();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:415:9\n+   |\n+LL |         fn lifetime_elsewhere_provided<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 32 previous errors\n "}]}