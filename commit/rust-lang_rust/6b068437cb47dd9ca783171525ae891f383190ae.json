{"sha": "6b068437cb47dd9ca783171525ae891f383190ae", "node_id": "C_kwDOAAsO6NoAKDZiMDY4NDM3Y2I0N2RkOWNhNzgzMTcxNTI1YWU4OTFmMzgzMTkwYWU", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-08-09T09:19:28Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-02-05T02:47:30Z"}, "message": "Address address comments, improve comments slightly", "tree": {"sha": "28163e89b962b5b566f850e11f54996004a1648c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28163e89b962b5b566f850e11f54996004a1648c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b068437cb47dd9ca783171525ae891f383190ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmH95UIACgkQ4u/UMJ4R\nyKiZZQ/6A3bgzacPbJoGoEZgpDA6Jm8aUJMCx+d6zNvC5MG/qR97/dtHeRo00isP\nTSQTiJ5G7oVrSJOsIHPNrQl0uY5aLaAOWrvh6MXLOxmz5w+vMd+JzkTLuz/Enl0c\n/RpGnZThal4KUbkq+D8kTMnBIDbvZBXPMCNuiu9+mvOixf6d+hr0qkARAlo/ZlDW\nrLrY8O3opdxVmSnL5OmOZsUtYUlutcPBPMurQb4Aeonk9ZXxZsyleHKfP/KeRNme\ny6LJmw3aQYuMQEeuuVq9f/pC7ljL8njXyYBY78bnttK3m9Rftho9T3896DQdpdAp\nert1h1+fqwVGJsIaQc40Wq5JVBqf+MBExD5mw3AJJ1VzD9nP/IPJIFiwn+Lz0CXP\nG6i68c77IItFzlvHunjoxkSYdZ/e43zkp4zlqiXFmgpix+uEy3oeqGx8KZE9U+Hc\nxGnk1bDYs6SgI8WJtH/HwYdCpkC/jinvC2LWKQ5nhBubBhxpsQmL0WB1TsoffsKG\n8rEVAggXkJrs7cI7uAV5eazQY4Dfxku26apZ44cj15ieqW464w+cA3sQVZeYzrC8\nTyc88FNA8+yFYmMX/cGt638U0bFkzikdnQf9eyV414IO2AGbRB41R7gzukjAiXnn\njHqGpPFcHGUeNPBdNk3oj7Vzlkli46QroKy9xzwo2cSFUNenW5Q=\n=xbIy\n-----END PGP SIGNATURE-----", "payload": "tree 28163e89b962b5b566f850e11f54996004a1648c\nparent ea211695bf924015f38d4a2de4f43a822f6c6a70\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1628500768 -0700\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1644029250 -0800\n\nAddress address comments, improve comments slightly\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b068437cb47dd9ca783171525ae891f383190ae", "html_url": "https://github.com/rust-lang/rust/commit/6b068437cb47dd9ca783171525ae891f383190ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b068437cb47dd9ca783171525ae891f383190ae/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea211695bf924015f38d4a2de4f43a822f6c6a70", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea211695bf924015f38d4a2de4f43a822f6c6a70", "html_url": "https://github.com/rust-lang/rust/commit/ea211695bf924015f38d4a2de4f43a822f6c6a70"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "8f82778e90b5b2f5b8a987d9ba565a735f5dc05c", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b068437cb47dd9ca783171525ae891f383190ae/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b068437cb47dd9ca783171525ae891f383190ae/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=6b068437cb47dd9ca783171525ae891f383190ae", "patch": "@@ -83,6 +83,10 @@ enum ErrorData<C> {\n     Custom(C),\n }\n \n+// `#[repr(align(4))]` is probably redundant, it should have that value or\n+// higher already. We include it just because repr_bitpacked.rs's encoding\n+// requires an alignment >= 4 (note that `#[repr(align)]` will not reduce the\n+// alignment required by the struct, only increase it).\n #[repr(align(4))]\n #[doc(hidden)]\n pub(crate) struct SimpleMessage {\n@@ -106,6 +110,9 @@ pub(crate) macro const_io_error($kind:expr, $message:expr $(,)?) {\n     })\n }\n \n+// As with `SimpleMessage`: `#[repr(align(4))]` here is just because\n+// repr_bitpacked's encoding requires it. In practice it almost certainly be\n+// already be this high or higher.\n #[derive(Debug)]\n #[repr(align(4))]\n struct Custom {"}, {"sha": "281cbdc23e4fa189e858803fedf97a8b779a12c7", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b068437cb47dd9ca783171525ae891f383190ae/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b068437cb47dd9ca783171525ae891f383190ae/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=6b068437cb47dd9ca783171525ae891f383190ae", "patch": "@@ -56,7 +56,7 @@\n //!\n //! Conceptually you might think of this more like:\n //!\n-//! ```ignore\n+//! ```ignore (exposition-only)\n //! union Repr {\n //!     // holds integer (Simple/Os) variants, and\n //!     // provides access to the tag bits.\n@@ -159,7 +159,7 @@ impl Repr {\n \n     #[inline]\n     pub(super) const fn new_simple_message(m: &'static SimpleMessage) -> Self {\n-        // Safety: We're a Repr, decode_repr is fine.\n+        // Safety: References are never null.\n         Self(unsafe { NonNull::new_unchecked(m as *const _ as *mut ()) })\n     }\n \n@@ -213,7 +213,7 @@ where\n         TAG_SIMPLE => {\n             let kind_bits = (bits >> 32) as u32;\n             let kind = kind_from_prim(kind_bits).unwrap_or_else(|| {\n-                debug_assert!(false, \"Invalid io::error::Repr bits: `Repr({:#016x})`\", bits);\n+                debug_assert!(false, \"Invalid io::error::Repr bits: `Repr({:#018x})`\", bits);\n                 // This means the `ptr` passed in was not valid, which voilates\n                 // the unsafe contract of `decode_repr`.\n                 //\n@@ -299,8 +299,11 @@ fn kind_from_prim(ek: u32) -> Option<ErrorKind> {\n }\n \n // Some static checking to alert us if a change breaks any of the assumptions\n-// that our encoding relies on. If any of these are hit on a platform that\n-// libstd supports, we should just make sure `repr_unpacked.rs` is used.\n+// that our encoding relies on for correctness and soundness. (Some of these are\n+// a bit overly thorough/cautious, admittedly)\n+//\n+// If any of these are hit on a platform that libstd supports, we should just\n+// make sure `repr_unpacked.rs` is used instead.\n macro_rules! static_assert {\n     ($condition:expr) => {\n         const _: [(); 0] = [(); (!$condition) as usize];\n@@ -332,6 +335,11 @@ static_assert!(TAG_SIMPLE != 0);\n static_assert!(TAG_SIMPLE_MESSAGE == 0);\n \n // Check that the point of all of this still holds.\n+//\n+// We'd check against `io::Error`, but *technically* it's allowed to vary,\n+// as it's not `#[repr(transparent)]`/`#[repr(C)]`. We could add that, but\n+// the `#[repr()]` would show up in rustdoc, which might be seen as a stable\n+// commitment.\n static_assert!(size_of::<Repr>() == 8);\n static_assert!(size_of::<Option<Repr>>() == 8);\n static_assert!(size_of::<Result<(), Repr>>() == 8);"}]}