{"sha": "abc0660118cc95f47445fd33502a11dd448f5968", "node_id": "C_kwDOAAsO6NoAKGFiYzA2NjAxMThjYzk1ZjQ3NDQ1ZmQzMzUwMmExMWRkNDQ4ZjU5Njg", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2023-03-22T23:43:20Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2023-04-16T15:35:50Z"}, "message": "Remove #[alloc_error_handler] from the compiler and library", "tree": {"sha": "e512943318f4d7b9cd82070fa66209b4fe10e7cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e512943318f4d7b9cd82070fa66209b4fe10e7cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc0660118cc95f47445fd33502a11dd448f5968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc0660118cc95f47445fd33502a11dd448f5968", "html_url": "https://github.com/rust-lang/rust/commit/abc0660118cc95f47445fd33502a11dd448f5968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc0660118cc95f47445fd33502a11dd448f5968/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9a6e41026d7aa27d897fb83e995447719753076", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a6e41026d7aa27d897fb83e995447719753076", "html_url": "https://github.com/rust-lang/rust/commit/c9a6e41026d7aa27d897fb83e995447719753076"}], "stats": {"total": 864, "additions": 22, "deletions": 842}, "files": [{"sha": "43187c327092ab2b6f2ac5e7e1dd3ca9f320b3f2", "filename": "compiler/rustc_builtin_macros/messages.ftl", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_builtin_macros%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_builtin_macros%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fmessages.ftl?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -4,8 +4,6 @@ builtin_macros_requires_cfg_pattern =\n \n builtin_macros_expected_one_cfg_pattern = expected 1 cfg-pattern\n \n-builtin_macros_alloc_error_must_be_fn = alloc_error_handler must be a function\n-\n builtin_macros_assert_requires_boolean = macro requires a boolean expression as an argument\n     .label = boolean expression required\n "}, {"sha": "82bae9157e79d173e760a685968bafa4fa090a72", "filename": "compiler/rustc_builtin_macros/src/alloc_error_handler.rs", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,97 +0,0 @@\n-use crate::errors;\n-use crate::util::check_builtin_macro_attribute;\n-\n-use rustc_ast::ptr::P;\n-use rustc_ast::{self as ast, FnHeader, FnSig, Generics, StmtKind};\n-use rustc_ast::{Fn, ItemKind, Stmt, TyKind, Unsafe};\n-use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::Span;\n-use thin_vec::{thin_vec, ThinVec};\n-\n-pub fn expand(\n-    ecx: &mut ExtCtxt<'_>,\n-    _span: Span,\n-    meta_item: &ast::MetaItem,\n-    item: Annotatable,\n-) -> Vec<Annotatable> {\n-    check_builtin_macro_attribute(ecx, meta_item, sym::alloc_error_handler);\n-\n-    let orig_item = item.clone();\n-\n-    // Allow using `#[alloc_error_handler]` on an item statement\n-    // FIXME - if we get deref patterns, use them to reduce duplication here\n-    let (item, is_stmt, sig_span) =\n-        if let Annotatable::Item(item) = &item\n-            && let ItemKind::Fn(fn_kind) = &item.kind\n-        {\n-            (item, false, ecx.with_def_site_ctxt(fn_kind.sig.span))\n-        } else if let Annotatable::Stmt(stmt) = &item\n-            && let StmtKind::Item(item) = &stmt.kind\n-            && let ItemKind::Fn(fn_kind) = &item.kind\n-        {\n-            (item, true, ecx.with_def_site_ctxt(fn_kind.sig.span))\n-        } else {\n-            ecx.sess.parse_sess.span_diagnostic.emit_err(errors::AllocErrorMustBeFn {span: item.span() });\n-            return vec![orig_item];\n-        };\n-\n-    // Generate a bunch of new items using the AllocFnFactory\n-    let span = ecx.with_def_site_ctxt(item.span);\n-\n-    // Generate item statements for the allocator methods.\n-    let stmts = thin_vec![generate_handler(ecx, item.ident, span, sig_span)];\n-\n-    // Generate anonymous constant serving as container for the allocator methods.\n-    let const_ty = ecx.ty(sig_span, TyKind::Tup(ThinVec::new()));\n-    let const_body = ecx.expr_block(ecx.block(span, stmts));\n-    let const_item = ecx.item_const(span, Ident::new(kw::Underscore, span), const_ty, const_body);\n-    let const_item = if is_stmt {\n-        Annotatable::Stmt(P(ecx.stmt_item(span, const_item)))\n-    } else {\n-        Annotatable::Item(const_item)\n-    };\n-\n-    // Return the original item and the new methods.\n-    vec![orig_item, const_item]\n-}\n-\n-// #[rustc_std_internal_symbol]\n-// unsafe fn __rg_oom(size: usize, align: usize) -> ! {\n-//     handler(core::alloc::Layout::from_size_align_unchecked(size, align))\n-// }\n-fn generate_handler(cx: &ExtCtxt<'_>, handler: Ident, span: Span, sig_span: Span) -> Stmt {\n-    let usize = cx.path_ident(span, Ident::new(sym::usize, span));\n-    let ty_usize = cx.ty_path(usize);\n-    let size = Ident::from_str_and_span(\"size\", span);\n-    let align = Ident::from_str_and_span(\"align\", span);\n-\n-    let layout_new = cx.std_path(&[sym::alloc, sym::Layout, sym::from_size_align_unchecked]);\n-    let layout_new = cx.expr_path(cx.path(span, layout_new));\n-    let layout = cx.expr_call(\n-        span,\n-        layout_new,\n-        thin_vec![cx.expr_ident(span, size), cx.expr_ident(span, align)],\n-    );\n-\n-    let call = cx.expr_call_ident(sig_span, handler, thin_vec![layout]);\n-\n-    let never = ast::FnRetTy::Ty(cx.ty(span, TyKind::Never));\n-    let params = thin_vec![cx.param(span, size, ty_usize.clone()), cx.param(span, align, ty_usize)];\n-    let decl = cx.fn_decl(params, never);\n-    let header = FnHeader { unsafety: Unsafe::Yes(span), ..FnHeader::default() };\n-    let sig = FnSig { decl, header, span: span };\n-\n-    let body = Some(cx.block_expr(call));\n-    let kind = ItemKind::Fn(Box::new(Fn {\n-        defaultness: ast::Defaultness::Final,\n-        sig,\n-        generics: Generics::default(),\n-        body,\n-    }));\n-\n-    let attrs = thin_vec![cx.attr_word(sym::rustc_std_internal_symbol, span)];\n-\n-    let item = cx.item(span, Ident::from_str_and_span(\"__rg_oom\", span), attrs, kind);\n-    cx.stmt_item(sig_span, item)\n-}"}, {"sha": "bf0ac3f0ee3f7ac4e9db34df5263247aeecb2a31", "filename": "compiler/rustc_builtin_macros/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -19,13 +19,6 @@ pub(crate) struct OneCfgPattern {\n     pub(crate) span: Span,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(builtin_macros_alloc_error_must_be_fn)]\n-pub(crate) struct AllocErrorMustBeFn {\n-    #[primary_span]\n-    pub(crate) span: Span,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(builtin_macros_assert_requires_boolean)]\n pub(crate) struct AssertRequiresBoolean {"}, {"sha": "e326c37635a944d2c38cd89e1ec2090d427e90a4", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -27,7 +27,6 @@ use rustc_expand::proc_macro::BangProcMacro;\n use rustc_macros::fluent_messages;\n use rustc_span::symbol::sym;\n \n-mod alloc_error_handler;\n mod assert;\n mod cfg;\n mod cfg_accessible;\n@@ -102,7 +101,6 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n     }\n \n     register_attr! {\n-        alloc_error_handler: alloc_error_handler::expand,\n         bench: test::expand_bench,\n         cfg_accessible: cfg_accessible::Expander,\n         cfg_eval: cfg_eval::expand,"}, {"sha": "e39c3272958be449815977e48da43524f652f79d", "filename": "compiler/rustc_codegen_cranelift/example/alloc_example.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, core_intrinsics, alloc_error_handler)]\n+#![feature(start, core_intrinsics)]\n #![no_std]\n \n extern crate alloc;\n@@ -22,11 +22,6 @@ fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n     core::intrinsics::abort();\n }\n \n-#[alloc_error_handler]\n-fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {\n-    core::intrinsics::abort();\n-}\n-\n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n     let world: Box<&str> = Box::new(\"Hello World!\\0\");"}, {"sha": "9fb8079a21fc2a3929f16bba7bdc185889b3831e", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -6,7 +6,6 @@ use crate::prelude::*;\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n-use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -15,21 +14,14 @@ pub(crate) fn codegen(\n     unwind_context: &mut UnwindContext,\n ) -> bool {\n     let Some(kind) = allocator_kind_for_codegen(tcx) else { return false };\n-    codegen_inner(\n-        module,\n-        unwind_context,\n-        kind,\n-        tcx.alloc_error_handler_kind(()).unwrap(),\n-        tcx.sess.opts.unstable_opts.oom,\n-    );\n+    codegen_inner(module, unwind_context, kind, tcx.sess.opts.unstable_opts.oom);\n     true\n }\n \n fn codegen_inner(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n-    alloc_error_handler_kind: AllocatorKind,\n     oom_strategy: OomStrategy,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n@@ -71,19 +63,6 @@ fn codegen_inner(\n         );\n     }\n \n-    let sig = Signature {\n-        call_conv: module.target_config().default_call_conv,\n-        params: vec![AbiParam::new(usize_ty), AbiParam::new(usize_ty)],\n-        returns: vec![],\n-    };\n-    crate::common::create_wrapper_function(\n-        module,\n-        unwind_context,\n-        sig,\n-        \"__rust_alloc_error_handler\",\n-        &alloc_error_handler_kind.fn_name(sym::oom),\n-    );\n-\n     let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n     let mut data_ctx = DataContext::new();\n     data_ctx.set_align(1);"}, {"sha": "faff1dca23f3f41f2e8b756ead8e5d647f7011a7", "filename": "compiler/rustc_codegen_gcc/example/alloc_example.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, core_intrinsics, alloc_error_handler, lang_items)]\n+#![feature(start, core_intrinsics, lang_items)]\n #![no_std]\n \n extern crate alloc;\n@@ -21,11 +21,6 @@ fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n     core::intrinsics::abort();\n }\n \n-#[alloc_error_handler]\n-fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {\n-    core::intrinsics::abort();\n-}\n-\n #[lang = \"eh_personality\"]\n fn eh_personality() -> ! {\n     loop {}"}, {"sha": "e90db44ece1fcc22014ada1a21247e3774fc23ae", "filename": "compiler/rustc_codegen_gcc/src/allocator.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -5,11 +5,10 @@ use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::OomStrategy;\n-use rustc_span::symbol::sym;\n \n use crate::GccContext;\n \n-pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_name: &str, kind: AllocatorKind, alloc_error_handler_kind: AllocatorKind) {\n+pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_name: &str, kind: AllocatorKind) {\n     let context = &mods.context;\n     let usize =\n         match tcx.sess.target.pointer_width {\n@@ -87,37 +86,6 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n         // as described in https://github.com/rust-lang/rust/commit/77a96ed5646f7c3ee8897693decc4626fe380643\n     }\n \n-    let types = [usize, usize];\n-    let name = \"__rust_alloc_error_handler\".to_string();\n-    let args: Vec<_> = types.iter().enumerate()\n-        .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n-        .collect();\n-    let func = context.new_function(None, FunctionType::Exported, void, &args, name, false);\n-\n-    if tcx.sess.target.default_hidden_visibility {\n-        #[cfg(feature=\"master\")]\n-        func.add_attribute(FnAttribute::Visibility(gccjit::Visibility::Hidden));\n-    }\n-\n-    let callee = alloc_error_handler_kind.fn_name(sym::oom);\n-    let args: Vec<_> = types.iter().enumerate()\n-        .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n-        .collect();\n-    let callee = context.new_function(None, FunctionType::Extern, void, &args, callee, false);\n-    #[cfg(feature=\"master\")]\n-    callee.add_attribute(FnAttribute::Visibility(gccjit::Visibility::Hidden));\n-\n-    let block = func.new_block(\"entry\");\n-\n-    let args = args\n-        .iter()\n-        .enumerate()\n-        .map(|(i, _)| func.get_param(i as i32).to_rvalue())\n-        .collect::<Vec<_>>();\n-    let _ret = context.new_call(None, callee, &args);\n-    //llvm::LLVMSetTailCall(ret, True);\n-    block.end_with_void_return(None);\n-\n     let name = OomStrategy::SYMBOL.to_string();\n     let global = context.new_global(None, GlobalKind::Exported, i8, name);\n     let value = tcx.sess.opts.unstable_opts.oom.should_panic();"}, {"sha": "be710fefe49cc04e9eafc5fa50596782ff549762", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -162,11 +162,11 @@ impl CodegenBackend for GccCodegenBackend {\n }\n \n impl ExtraBackendMethods for GccCodegenBackend {\n-    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, module_name: &str, kind: AllocatorKind, alloc_error_handler_kind: AllocatorKind) -> Self::Module {\n+    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, module_name: &str, kind: AllocatorKind) -> Self::Module {\n         let mut mods = GccContext {\n             context: Context::default(),\n         };\n-        unsafe { allocator::codegen(tcx, &mut mods, module_name, kind, alloc_error_handler_kind); }\n+        unsafe { allocator::codegen(tcx, &mut mods, module_name, kind); }\n         mods\n     }\n "}, {"sha": "fc9251dda82008e26aec02f98ed876791b7bedc0", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -4,7 +4,6 @@ use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{DebugInfo, OomStrategy};\n-use rustc_span::symbol::sym;\n \n use crate::debuginfo;\n use crate::llvm::{self, False, True};\n@@ -15,7 +14,6 @@ pub(crate) unsafe fn codegen(\n     module_llvm: &mut ModuleLlvm,\n     module_name: &str,\n     kind: AllocatorKind,\n-    alloc_error_handler_kind: AllocatorKind,\n ) {\n     let llcx = &*module_llvm.llcx;\n     let llmod = module_llvm.llmod();\n@@ -100,52 +98,6 @@ pub(crate) unsafe fn codegen(\n         llvm::LLVMDisposeBuilder(llbuilder);\n     }\n \n-    // rust alloc error handler\n-    let args = [usize, usize]; // size, align\n-\n-    let ty = llvm::LLVMFunctionType(void, args.as_ptr(), args.len() as c_uint, False);\n-    let name = \"__rust_alloc_error_handler\";\n-    let llfn = llvm::LLVMRustGetOrInsertFunction(llmod, name.as_ptr().cast(), name.len(), ty);\n-    // -> ! DIFlagNoReturn\n-    let no_return = llvm::AttributeKind::NoReturn.create_attr(llcx);\n-    attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[no_return]);\n-\n-    if tcx.sess.target.default_hidden_visibility {\n-        llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n-    }\n-    if tcx.sess.must_emit_unwind_tables() {\n-        let uwtable = attributes::uwtable_attr(llcx);\n-        attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[uwtable]);\n-    }\n-\n-    let callee = alloc_error_handler_kind.fn_name(sym::oom);\n-    let callee = llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr().cast(), callee.len(), ty);\n-    // -> ! DIFlagNoReturn\n-    attributes::apply_to_llfn(callee, llvm::AttributePlace::Function, &[no_return]);\n-    llvm::LLVMRustSetVisibility(callee, llvm::Visibility::Hidden);\n-\n-    let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, \"entry\\0\".as_ptr().cast());\n-\n-    let llbuilder = llvm::LLVMCreateBuilderInContext(llcx);\n-    llvm::LLVMPositionBuilderAtEnd(llbuilder, llbb);\n-    let args = args\n-        .iter()\n-        .enumerate()\n-        .map(|(i, _)| llvm::LLVMGetParam(llfn, i as c_uint))\n-        .collect::<Vec<_>>();\n-    let ret = llvm::LLVMRustBuildCall(\n-        llbuilder,\n-        ty,\n-        callee,\n-        args.as_ptr(),\n-        args.len() as c_uint,\n-        [].as_ptr(),\n-        0 as c_uint,\n-    );\n-    llvm::LLVMSetTailCall(ret, True);\n-    llvm::LLVMBuildRetVoid(llbuilder);\n-    llvm::LLVMDisposeBuilder(llbuilder);\n-\n     // __rust_alloc_error_handler_should_panic\n     let name = OomStrategy::SYMBOL;\n     let ll_g = llvm::LLVMRustGetOrInsertGlobal(llmod, name.as_ptr().cast(), name.len(), i8);"}, {"sha": "33d66bcd2378465abf831f7292ac405fff733081", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -115,11 +115,10 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n         tcx: TyCtxt<'tcx>,\n         module_name: &str,\n         kind: AllocatorKind,\n-        alloc_error_handler_kind: AllocatorKind,\n     ) -> ModuleLlvm {\n         let mut module_llvm = ModuleLlvm::new_metadata(tcx, module_name);\n         unsafe {\n-            allocator::codegen(tcx, &mut module_llvm, module_name, kind, alloc_error_handler_kind);\n+            allocator::codegen(tcx, &mut module_llvm, module_name, kind);\n         }\n         module_llvm\n     }"}, {"sha": "dbf30e42ae44b66f809e2ea56a6b047e9a91b853", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -219,7 +219,7 @@ fn exported_symbols_provider_local(\n         for symbol_name in ALLOCATOR_METHODS\n             .iter()\n             .map(|method| format!(\"__rust_{}\", method.name))\n-            .chain([\"__rust_alloc_error_handler\".to_string(), OomStrategy::SYMBOL.to_string()])\n+            .chain([OomStrategy::SYMBOL.to_string()])\n         {\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));\n "}, {"sha": "3e9d29df02cdfcdf749344b912786993e1b9c393", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -635,16 +635,9 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     if let Some(kind) = allocator_kind_for_codegen(tcx) {\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n-        let module_llvm = tcx.sess.time(\"write_allocator_module\", || {\n-            backend.codegen_allocator(\n-                tcx,\n-                &llmod_id,\n-                kind,\n-                // If allocator_kind is Some then alloc_error_handler_kind must\n-                // also be Some.\n-                tcx.alloc_error_handler_kind(()).unwrap(),\n-            )\n-        });\n+        let module_llvm = tcx\n+            .sess\n+            .time(\"write_allocator_module\", || backend.codegen_allocator(tcx, &llmod_id, kind));\n \n         ongoing_codegen.submit_pre_codegened_module_to_llvm(\n             tcx,"}, {"sha": "2e88b7ce21901f2a4eadefe55b83db64ab27a11d", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -123,7 +123,6 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         tcx: TyCtxt<'tcx>,\n         module_name: &str,\n         kind: AllocatorKind,\n-        alloc_error_handler_kind: AllocatorKind,\n     ) -> Self::Module;\n     /// This generates the codegen unit and returns it along with\n     /// a `u64` giving an estimate of the unit's processing cost."}, {"sha": "594e6cca912e78495ec7a82e65d6365024468e8d", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -291,8 +291,6 @@ declare_features! (\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n     /// Allows additional const parameter types, such as `&'static str` or user defined types\n     (incomplete, adt_const_params, \"1.56.0\", Some(95174), None),\n-    /// Allows defining an `#[alloc_error_handler]`.\n-    (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n     /// Allows trait methods with arbitrary self types.\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n     /// Allows using `const` operands in inline assembly."}, {"sha": "568c289e2f71467578a3034be787aab3bc455cb9", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -47,6 +47,8 @@ declare_features! (\n \n     (removed, advanced_slice_patterns, \"1.0.0\", Some(62254), None,\n      Some(\"merged into `#![feature(slice_patterns)]`\")),\n+    /// Allows defining an `#[alloc_error_handler]`.\n+    (removed, alloc_error_handler, \"CURRENT_RUSTC_VERSION\", Some(51540), None, Some(\"now handled by panic handler\")),\n     (removed, allocator, \"1.0.0\", None, None, None),\n     /// Allows a test to fail without failing the whole suite.\n     (removed, allow_fail, \"1.19.0\", Some(46488), None, Some(\"removed due to no clear use cases\")),"}, {"sha": "f0158aeae851d91648ff6591701df305f08e8f73", "filename": "compiler/rustc_metadata/messages.ftl", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fmessages.ftl?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -155,19 +155,9 @@ metadata_no_multiple_global_alloc =\n metadata_prev_global_alloc =\n     previous global allocator defined here\n \n-metadata_no_multiple_alloc_error_handler =\n-    cannot define multiple allocation error handlers\n-    .label = cannot define a new allocation error handler\n-\n-metadata_prev_alloc_error_handler =\n-    previous allocation error handler defined here\n-\n metadata_conflicting_global_alloc =\n     the `#[global_allocator]` in {$other_crate_name} conflicts with global allocator in: {$crate_name}\n \n-metadata_conflicting_alloc_error_handler =\n-    the `#[alloc_error_handler]` in {$other_crate_name} conflicts with allocation error handler in: {$crate_name}\n-\n metadata_global_alloc_required =\n     no global memory allocator found but one is required; link to std or add `#[global_allocator]` to a static item that implements the GlobalAlloc trait\n "}, {"sha": "89751b0b721110df80c2b737d2edafaa376acd3a", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -38,13 +38,8 @@ pub struct CStore {\n     /// This crate needs an allocator and either provides it itself, or finds it in a dependency.\n     /// If the above is true, then this field denotes the kind of the found allocator.\n     allocator_kind: Option<AllocatorKind>,\n-    /// This crate needs an allocation error handler and either provides it itself, or finds it in a dependency.\n-    /// If the above is true, then this field denotes the kind of the found allocator.\n-    alloc_error_handler_kind: Option<AllocatorKind>,\n     /// This crate has a `#[global_allocator]` item.\n     has_global_allocator: bool,\n-    /// This crate has a `#[alloc_error_handler]` item.\n-    has_alloc_error_handler: bool,\n \n     /// The interned [StableCrateId]s.\n     pub(crate) stable_crate_ids: StableCrateIdMap,\n@@ -221,18 +216,10 @@ impl CStore {\n         self.allocator_kind\n     }\n \n-    pub(crate) fn alloc_error_handler_kind(&self) -> Option<AllocatorKind> {\n-        self.alloc_error_handler_kind\n-    }\n-\n     pub(crate) fn has_global_allocator(&self) -> bool {\n         self.has_global_allocator\n     }\n \n-    pub(crate) fn has_alloc_error_handler(&self) -> bool {\n-        self.has_alloc_error_handler\n-    }\n-\n     pub fn report_unused_deps(&self, tcx: TyCtxt<'_>) {\n         let json_unused_externs = tcx.sess.opts.json_unused_externs;\n \n@@ -268,9 +255,7 @@ impl CStore {\n             metas: IndexVec::from_iter(iter::once(None)),\n             injected_panic_runtime: None,\n             allocator_kind: None,\n-            alloc_error_handler_kind: None,\n             has_global_allocator: false,\n-            has_alloc_error_handler: false,\n             stable_crate_ids,\n             unused_externs: Vec::new(),\n         }\n@@ -776,14 +761,6 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n             }\n             spans => !spans.is_empty(),\n         };\n-        self.cstore.has_alloc_error_handler = match &*alloc_error_handler_spans(krate) {\n-            [span1, span2, ..] => {\n-                self.sess\n-                    .emit_err(errors::NoMultipleAllocErrorHandler { span2: *span2, span1: *span1 });\n-                true\n-            }\n-            spans => !spans.is_empty(),\n-        };\n \n         // Check to see if we actually need an allocator. This desire comes\n         // about through the `#![needs_allocator]` attribute and is typically\n@@ -824,21 +801,6 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n                 }\n             }\n         }\n-        let mut alloc_error_handler =\n-            self.cstore.has_alloc_error_handler.then(|| Symbol::intern(\"this crate\"));\n-        for (_, data) in self.cstore.iter_crate_data() {\n-            if data.has_alloc_error_handler() {\n-                match alloc_error_handler {\n-                    Some(other_crate) => {\n-                        self.sess.emit_err(errors::ConflictingAllocErrorHandler {\n-                            crate_name: data.name(),\n-                            other_crate_name: other_crate,\n-                        });\n-                    }\n-                    None => alloc_error_handler = Some(data.name()),\n-                }\n-            }\n-        }\n \n         if global_allocator.is_some() {\n             self.cstore.allocator_kind = Some(AllocatorKind::Global);\n@@ -854,14 +816,6 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n             }\n             self.cstore.allocator_kind = Some(AllocatorKind::Default);\n         }\n-\n-        if alloc_error_handler.is_some() {\n-            self.cstore.alloc_error_handler_kind = Some(AllocatorKind::Global);\n-        } else {\n-            // The alloc crate provides a default allocation error handler if\n-            // one isn't specified.\n-            self.cstore.alloc_error_handler_kind = Some(AllocatorKind::Default);\n-        }\n     }\n \n     fn inject_dependency_if(\n@@ -1037,28 +991,6 @@ fn global_allocator_spans(krate: &ast::Crate) -> Vec<Span> {\n     f.spans\n }\n \n-fn alloc_error_handler_spans(krate: &ast::Crate) -> Vec<Span> {\n-    struct Finder {\n-        name: Symbol,\n-        spans: Vec<Span>,\n-    }\n-    impl<'ast> visit::Visitor<'ast> for Finder {\n-        fn visit_item(&mut self, item: &'ast ast::Item) {\n-            if item.ident.name == self.name\n-                && attr::contains_name(&item.attrs, sym::rustc_std_internal_symbol)\n-            {\n-                self.spans.push(item.span);\n-            }\n-            visit::walk_item(self, item)\n-        }\n-    }\n-\n-    let name = Symbol::intern(&AllocatorKind::Global.fn_name(sym::oom));\n-    let mut f = Finder { name, spans: Vec::new() };\n-    visit::walk_crate(&mut f, krate);\n-    f.spans\n-}\n-\n // On Windows the compiler would sometimes intermittently fail to open the\n // proc-macro DLL with `Error::LoadLibraryExW`. It is suspected that something in the\n // system still holds a lock on the file, so we retry a few times before calling it"}, {"sha": "7ecb551a3e59668d202413e39178a5e005f7077c", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -352,30 +352,13 @@ pub struct NoMultipleGlobalAlloc {\n     pub span1: Span,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(metadata_no_multiple_alloc_error_handler)]\n-pub struct NoMultipleAllocErrorHandler {\n-    #[primary_span]\n-    #[label]\n-    pub span2: Span,\n-    #[label(metadata_prev_alloc_error_handler)]\n-    pub span1: Span,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(metadata_conflicting_global_alloc)]\n pub struct ConflictingGlobalAlloc {\n     pub crate_name: Symbol,\n     pub other_crate_name: Symbol,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(metadata_conflicting_alloc_error_handler)]\n-pub struct ConflictingAllocErrorHandler {\n-    pub crate_name: Symbol,\n-    pub other_crate_name: Symbol,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(metadata_global_alloc_required)]\n pub struct GlobalAllocRequired;"}, {"sha": "f7c9379e109897076edea44d0a2ea37ebb894f5b", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -1692,10 +1692,6 @@ impl CrateMetadata {\n         self.root.has_global_allocator\n     }\n \n-    pub(crate) fn has_alloc_error_handler(&self) -> bool {\n-        self.root.has_alloc_error_handler\n-    }\n-\n     pub(crate) fn has_default_lib_allocator(&self) -> bool {\n         self.root.has_default_lib_allocator\n     }"}, {"sha": "6212597e1ac8d0dc5a2d8359b46605cc31569f8c", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -290,7 +290,6 @@ provide! { tcx, def_id, other, cdata,\n     is_panic_runtime => { cdata.root.panic_runtime }\n     is_compiler_builtins => { cdata.root.compiler_builtins }\n     has_global_allocator => { cdata.root.has_global_allocator }\n-    has_alloc_error_handler => { cdata.root.has_alloc_error_handler }\n     has_panic_handler => { cdata.root.has_panic_handler }\n     is_profiler_runtime => { cdata.root.profiler_runtime }\n     required_panic_strategy => { cdata.root.required_panic_strategy }\n@@ -379,7 +378,6 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n         allocator_kind: |tcx, ()| CStore::from_tcx(tcx).allocator_kind(),\n-        alloc_error_handler_kind: |tcx, ()| CStore::from_tcx(tcx).alloc_error_handler_kind(),\n         is_private_dep: |_tcx, LocalCrate| false,\n         native_library: |tcx, id| {\n             tcx.native_libraries(id.krate)\n@@ -496,7 +494,6 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n \n         dependency_formats: |tcx, ()| Lrc::new(crate::dependency_format::calculate(tcx)),\n         has_global_allocator: |tcx, LocalCrate| CStore::from_tcx(tcx).has_global_allocator(),\n-        has_alloc_error_handler: |tcx, LocalCrate| CStore::from_tcx(tcx).has_alloc_error_handler(),\n         postorder_cnums: |tcx, ()| {\n             tcx.arena\n                 .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))"}, {"sha": "f9e42fdecdc40fd71ac62e43e2e8ea1ebdb32eb8", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -676,7 +676,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 panic_in_drop_strategy: tcx.sess.opts.unstable_opts.panic_in_drop,\n                 edition: tcx.sess.edition(),\n                 has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),\n-                has_alloc_error_handler: tcx.has_alloc_error_handler(LOCAL_CRATE),\n                 has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n                 has_default_lib_allocator: attr::contains_name(&attrs, sym::default_lib_allocator),\n                 proc_macro_data,"}, {"sha": "68dc22e31e9608b5c1c240f9745f60ff99aa3f0a", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -225,7 +225,6 @@ pub(crate) struct CrateRoot {\n     panic_in_drop_strategy: PanicStrategy,\n     edition: Edition,\n     has_global_allocator: bool,\n-    has_alloc_error_handler: bool,\n     has_panic_handler: bool,\n     has_default_lib_allocator: bool,\n "}, {"sha": "0cecf8db1af67a82614114f24923b37815fdff26", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -1460,13 +1460,6 @@ rustc_queries! {\n         desc { \"checking if the crate has_global_allocator\" }\n         separate_provide_extern\n     }\n-    query has_alloc_error_handler(_: CrateNum) -> bool {\n-        // This query depends on untracked global state in CStore\n-        eval_always\n-        fatal_cycle\n-        desc { \"checking if the crate has_alloc_error_handler\" }\n-        separate_provide_extern\n-    }\n     query has_panic_handler(_: CrateNum) -> bool {\n         fatal_cycle\n         desc { \"checking if the crate has_panic_handler\" }\n@@ -1839,10 +1832,6 @@ rustc_queries! {\n         eval_always\n         desc { \"getting the allocator kind for the current crate\" }\n     }\n-    query alloc_error_handler_kind(_: ()) -> Option<AllocatorKind> {\n-        eval_always\n-        desc { \"alloc error handler kind for the current crate\" }\n-    }\n \n     query upvars_mentioned(def_id: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n         desc { |tcx| \"collecting upvars mentioned in `{}`\", tcx.def_path_str(def_id) }"}, {"sha": "97bedc604da82f9c745d40497a816d32faf18bc0", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -397,7 +397,7 @@ fn rust_oom(layout: Layout) -> ! {\n         #[lang = \"panic_impl\"]\n         fn panic_impl(pi: &core::panic::PanicInfo<'_>) -> !;\n \n-        // This symbol is emitted by rustc next to __rust_alloc_error_handler.\n+        // This symbol is emitted by rustc .\n         // Its value depends on the -Zoom={panic,abort} compiler option.\n         static __rust_alloc_error_handler_should_panic: u8;\n     }\n@@ -426,13 +426,6 @@ fn rust_oom(layout: Layout) -> ! {\n /// Callers of memory allocation APIs wishing to abort computation\n /// in response to an allocation error are encouraged to call this function,\n /// rather than directly invoking `panic!` or similar.\n-///\n-/// The default behavior of this function is to print a message to standard error\n-/// and abort the process.\n-/// It can be replaced with [`set_alloc_error_hook`] and [`take_alloc_error_hook`].\n-///\n-/// [`set_alloc_error_hook`]: ../../std/alloc/fn.set_alloc_error_hook.html\n-/// [`take_alloc_error_hook`]: ../../std/alloc/fn.take_alloc_error_hook.html\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[rustc_const_unstable(feature = \"const_alloc_error\", issue = \"92523\")]\n #[cfg(all(not(no_global_oom_handling), not(test)))]\n@@ -453,6 +446,7 @@ pub const fn handle_alloc_error(layout: Layout) -> ! {\n #[cfg(all(not(no_global_oom_handling), test))]\n pub use std::alloc::handle_alloc_error;\n \n+#[cfg(bootstrap)]\n #[cfg(all(not(no_global_oom_handling), not(test)))]\n #[doc(hidden)]\n #[allow(unused_attributes)]"}, {"sha": "cc3179ee7801b2888db0286b79090f33dc665d89", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -1531,16 +1531,6 @@ pub(crate) mod builtin {\n         /* compiler built-in */\n     }\n \n-    /// Attribute macro applied to a function to register it as a handler for allocation failure.\n-    ///\n-    /// See also [`std::alloc::handle_alloc_error`](../../../std/alloc/fn.handle_alloc_error.html).\n-    #[unstable(feature = \"alloc_error_handler\", issue = \"51540\")]\n-    #[allow_internal_unstable(rustc_attrs)]\n-    #[rustc_builtin_macro]\n-    pub macro alloc_error_handler($item:item) {\n-        /* compiler built-in */\n-    }\n-\n     /// Keeps the item it's applied to if the passed path is accessible, and removes it otherwise.\n     #[unstable(\n         feature = \"cfg_accessible\","}, {"sha": "9c4c0f6ab7aa553b457511450d4f88e01535ebd3", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -76,9 +76,7 @@ pub use crate::macros::builtin::{RustcDecodable, RustcEncodable};\n // Do not `doc(no_inline)` so that they become doc items on their own\n // (no public module for them to be re-exported from).\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-pub use crate::macros::builtin::{\n-    alloc_error_handler, bench, derive, global_allocator, test, test_case,\n-};\n+pub use crate::macros::builtin::{bench, derive, global_allocator, test, test_case};\n \n #[unstable(feature = \"derive_const\", issue = \"none\")]\n pub use crate::macros::builtin::derive_const;"}, {"sha": "448a8edc29177e75c2f9271c8eba1909272c866b", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 72, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -57,9 +57,8 @@\n #![stable(feature = \"alloc_module\", since = \"1.28.0\")]\n \n use core::intrinsics;\n+use core::ptr;\n use core::ptr::NonNull;\n-use core::sync::atomic::{AtomicPtr, Ordering};\n-use core::{mem, ptr};\n \n #[stable(feature = \"alloc_module\", since = \"1.28.0\")]\n #[doc(inline)]\n@@ -286,76 +285,6 @@ unsafe impl Allocator for System {\n     }\n }\n \n-static HOOK: AtomicPtr<()> = AtomicPtr::new(ptr::null_mut());\n-\n-/// Registers a custom allocation error hook, replacing any that was previously registered.\n-///\n-/// The allocation error hook is invoked when an infallible memory allocation fails, before\n-/// the runtime aborts. The default hook prints a message to standard error,\n-/// but this behavior can be customized with the [`set_alloc_error_hook`] and\n-/// [`take_alloc_error_hook`] functions.\n-///\n-/// The hook is provided with a `Layout` struct which contains information\n-/// about the allocation that failed.\n-///\n-/// The allocation error hook is a global resource.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// #![feature(alloc_error_hook)]\n-///\n-/// use std::alloc::{Layout, set_alloc_error_hook};\n-///\n-/// fn custom_alloc_error_hook(layout: Layout) {\n-///    panic!(\"memory allocation of {} bytes failed\", layout.size());\n-/// }\n-///\n-/// set_alloc_error_hook(custom_alloc_error_hook);\n-/// ```\n-#[unstable(feature = \"alloc_error_hook\", issue = \"51245\")]\n-pub fn set_alloc_error_hook(hook: fn(Layout)) {\n-    HOOK.store(hook as *mut (), Ordering::SeqCst);\n-}\n-\n-/// Unregisters the current allocation error hook, returning it.\n-///\n-/// *See also the function [`set_alloc_error_hook`].*\n-///\n-/// If no custom hook is registered, the default hook will be returned.\n-#[unstable(feature = \"alloc_error_hook\", issue = \"51245\")]\n-pub fn take_alloc_error_hook() -> fn(Layout) {\n-    let hook = HOOK.swap(ptr::null_mut(), Ordering::SeqCst);\n-    if hook.is_null() { default_alloc_error_hook } else { unsafe { mem::transmute(hook) } }\n-}\n-\n-fn default_alloc_error_hook(layout: Layout) {\n-    extern \"Rust\" {\n-        // This symbol is emitted by rustc next to __rust_alloc_error_handler.\n-        // Its value depends on the -Zoom={panic,abort} compiler option.\n-        static __rust_alloc_error_handler_should_panic: u8;\n-    }\n-\n-    #[allow(unused_unsafe)]\n-    if unsafe { __rust_alloc_error_handler_should_panic != 0 } {\n-        panic!(\"memory allocation of {} bytes failed\", layout.size());\n-    } else {\n-        rtprintpanic!(\"memory allocation of {} bytes failed\\n\", layout.size());\n-    }\n-}\n-\n-#[cfg(not(test))]\n-#[doc(hidden)]\n-#[alloc_error_handler]\n-#[unstable(feature = \"alloc_internals\", issue = \"none\")]\n-pub fn rust_oom(layout: Layout) -> ! {\n-    let hook = HOOK.load(Ordering::SeqCst);\n-    let hook: fn(Layout) =\n-        if hook.is_null() { default_alloc_error_hook } else { unsafe { mem::transmute(hook) } };\n-    hook(layout);\n-    crate::process::abort()\n-}\n-\n #[cfg(not(test))]\n #[doc(hidden)]\n #[allow(unused_attributes)]"}, {"sha": "900df71919b953b550f741d9cd3d6e46db900cde", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -236,7 +236,6 @@\n //\n // Language features:\n // tidy-alphabetical-start\n-#![feature(alloc_error_handler)]\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]"}, {"sha": "4f325a70b18911620e2c01bcc3623ab286c818da", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -60,9 +60,7 @@ pub use core::prelude::v1::{RustcDecodable, RustcEncodable};\n // Do not `doc(no_inline)` so that they become doc items on their own\n // (no public module for them to be re-exported from).\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-pub use core::prelude::v1::{\n-    alloc_error_handler, bench, derive, global_allocator, test, test_case,\n-};\n+pub use core::prelude::v1::{bench, derive, global_allocator, test, test_case};\n \n #[unstable(feature = \"derive_const\", issue = \"none\")]\n pub use core::prelude::v1::derive_const;"}, {"sha": "e3e5fac98c0e5dc38fd8cba65c6714fb015e3736", "filename": "src/tools/rust-analyzer/crates/hir-def/src/builtin_attr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -381,10 +381,6 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     rustc_attr!(rustc_allocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     rustc_attr!(rustc_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n-    gated!(\n-        alloc_error_handler, Normal, template!(Word), WarnFollowing,\n-        experimental!(alloc_error_handler)\n-    ),\n     gated!(\n         default_lib_allocator, Normal, template!(Word), WarnFollowing, allocator_internals,\n         experimental!(default_lib_allocator),"}, {"sha": "00cf9134662389ab6fb7e4ab51177a3d118c390d", "filename": "tests/run-make/issue-51671/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/tests%2Frun-make%2Fissue-51671%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/tests%2Frun-make%2Fissue-51671%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-51671%2FMakefile?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -6,4 +6,3 @@ all:\n \t$(RUSTC) --emit=obj app.rs\n \tnm $(TMPDIR)/app.o | $(CGREP) rust_begin_unwind\n \tnm $(TMPDIR)/app.o | $(CGREP) rust_eh_personality\n-\tnm $(TMPDIR)/app.o | $(CGREP) __rg_oom"}, {"sha": "a9d3457bf90e642a299342cede655b8f960296b3", "filename": "tests/run-make/issue-51671/app.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/tests%2Frun-make%2Fissue-51671%2Fapp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/tests%2Frun-make%2Fissue-51671%2Fapp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-51671%2Fapp.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -1,5 +1,5 @@\n #![crate_type = \"bin\"]\n-#![feature(lang_items, alloc_error_handler)]\n+#![feature(lang_items)]\n #![no_main]\n #![no_std]\n \n@@ -13,8 +13,3 @@ fn panic(_: &PanicInfo) -> ! {\n \n #[lang = \"eh_personality\"]\n fn eh() {}\n-\n-#[alloc_error_handler]\n-fn oom(_: Layout) -> ! {\n-    loop {}\n-}"}, {"sha": "b1229d1b07fc725f4a9bcc5cf8e6166b9d8932c9", "filename": "tests/run-make/issue-69368/Makefile", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Frun-make%2Fissue-69368%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Frun-make%2Fissue-69368%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-69368%2FMakefile?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,19 +0,0 @@\n-# ignore-cross-compile\n-include ../tools.mk\n-\n-# Test that previously triggered a linker failure with root cause\n-# similar to one found in the issue #69368.\n-#\n-# The crate that provides oom lang item is missing some other lang\n-# items. Necessary to prevent the use of start-group / end-group.\n-#\n-# The weak lang items are defined in a separate compilation units,\n-# so that linker could omit them if not used.\n-#\n-# The crates that need those weak lang items are dependencies of\n-# crates that provide them.\n-\n-all:\n-\t$(RUSTC) a.rs\n-\t$(RUSTC) b.rs\n-\t$(RUSTC) c.rs"}, {"sha": "a54f429550e7435ed53fd6bc9f6361efceb9ee07", "filename": "tests/run-make/issue-69368/a.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Frun-make%2Fissue-69368%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Frun-make%2Fissue-69368%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-69368%2Fa.rs?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,26 +0,0 @@\n-#![crate_type = \"rlib\"]\n-#![feature(lang_items)]\n-#![feature(panic_unwind)]\n-#![no_std]\n-\n-extern crate panic_unwind;\n-\n-#[panic_handler]\n-pub fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n-    loop {}\n-}\n-\n-#[no_mangle]\n-extern \"C\" fn __rust_drop_panic() -> ! {\n-    loop {}\n-}\n-\n-#[no_mangle]\n-extern \"C\" fn __rust_foreign_exception() -> ! {\n-    loop {}\n-}\n-\n-#[lang = \"eh_personality\"]\n-fn eh_personality() {\n-    loop {}\n-}"}, {"sha": "4d6af0266563bddc124cb1e5710bd744ce027e4d", "filename": "tests/run-make/issue-69368/b.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Frun-make%2Fissue-69368%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Frun-make%2Fissue-69368%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-69368%2Fb.rs?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,8 +0,0 @@\n-#![crate_type = \"rlib\"]\n-#![feature(alloc_error_handler)]\n-#![no_std]\n-\n-#[alloc_error_handler]\n-pub fn error_handler(_: core::alloc::Layout) -> ! {\n-    panic!();\n-}"}, {"sha": "729c4249a053a8324b3688223b882284af798e16", "filename": "tests/run-make/issue-69368/c.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Frun-make%2Fissue-69368%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Frun-make%2Fissue-69368%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-69368%2Fc.rs?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,34 +0,0 @@\n-#![crate_type = \"bin\"]\n-#![feature(start)]\n-#![no_std]\n-\n-extern crate alloc;\n-extern crate a;\n-extern crate b;\n-\n-use alloc::vec::Vec;\n-use core::alloc::*;\n-\n-struct Allocator;\n-\n-unsafe impl GlobalAlloc for Allocator {\n-    unsafe fn alloc(&self, _: Layout) -> *mut u8 {\n-        loop {}\n-    }\n-\n-    unsafe fn dealloc(&self, _: *mut u8, _: Layout) {\n-        loop {}\n-    }\n-}\n-\n-#[global_allocator]\n-static ALLOCATOR: Allocator = Allocator;\n-\n-#[start]\n-fn main(argc: isize, _argv: *const *const u8) -> isize {\n-    let mut v = Vec::new();\n-    for i in 0..argc {\n-        v.push(i);\n-    }\n-    v.iter().sum()\n-}"}, {"sha": "eb768446b4b92ec2a1cf97f3e96b9e51ef5f29bd", "filename": "tests/run-make/wasm-symbols-not-exported/bar.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/tests%2Frun-make%2Fwasm-symbols-not-exported%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/tests%2Frun-make%2Fwasm-symbols-not-exported%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fwasm-symbols-not-exported%2Fbar.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -1,4 +1,4 @@\n-#![feature(panic_handler, alloc_error_handler)]\n+#![feature(panic_handler)]\n #![crate_type = \"cdylib\"]\n #![no_std]\n \n@@ -24,11 +24,6 @@ pub extern fn foo(a: u32) -> u32 {\n     a * 2\n }\n \n-#[alloc_error_handler]\n-fn a(_: core::alloc::Layout) -> ! {\n-    loop {}\n-}\n-\n #[panic_handler]\n fn b(_: &core::panic::PanicInfo) -> ! {\n     loop {}"}, {"sha": "cd06423e3a557279ebb5fe61522922fdf3a0f126", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-1.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,18 +0,0 @@\n-// compile-flags:-C panic=abort\n-\n-#![feature(alloc_error_handler)]\n-#![no_std]\n-#![no_main]\n-\n-use core::alloc::Layout;\n-\n-#[alloc_error_handler]\n-fn oom(\n-    info: &Layout, //~^ ERROR mismatched types\n-) -> () //~^^ ERROR mismatched types\n-{\n-    loop {}\n-}\n-\n-#[panic_handler]\n-fn panic(_: &core::panic::PanicInfo) -> ! { loop {} }"}, {"sha": "de92841d7f18e835699495ea9f5e8744ea74cebb", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-1.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,44 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/alloc-error-handler-bad-signature-1.rs:10:1\n-   |\n-LL |    #[alloc_error_handler]\n-   |    ---------------------- in this procedural macro expansion\n-LL | // fn oom(\n-LL | ||     info: &Layout,\n-LL | || ) -> ()\n-   | ||_______- arguments to this function are incorrect\n-LL | |  {\n-LL | |      loop {}\n-LL | |  }\n-   | |__^ expected `&Layout`, found `Layout`\n-   |\n-note: function defined here\n-  --> $DIR/alloc-error-handler-bad-signature-1.rs:10:4\n-   |\n-LL | fn oom(\n-   |    ^^^\n-LL |     info: &Layout,\n-   |     -------------\n-   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0308]: mismatched types\n-  --> $DIR/alloc-error-handler-bad-signature-1.rs:10:1\n-   |\n-LL |    #[alloc_error_handler]\n-   |    ---------------------- in this procedural macro expansion\n-LL | // fn oom(\n-LL | ||     info: &Layout,\n-LL | || ) -> ()\n-   | ||_______^ expected `!`, found `()`\n-LL | |  {\n-LL | |      loop {}\n-LL | |  }\n-   | |__- expected `!` because of return type\n-   |\n-   = note:   expected type `!`\n-           found unit type `()`\n-   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "4f76257fc726769df8d21c61816611337c032be8", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-2.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,17 +0,0 @@\n-// compile-flags:-C panic=abort\n-\n-#![feature(alloc_error_handler)]\n-#![no_std]\n-#![no_main]\n-\n-struct Layout;\n-\n-#[alloc_error_handler]\n-fn oom(\n-    info: Layout, //~^ ERROR mismatched types\n-) { //~^^ ERROR mismatched types\n-    loop {}\n-}\n-\n-#[panic_handler]\n-fn panic(_: &core::panic::PanicInfo) -> ! { loop {} }"}, {"sha": "7a495380f2ba17376e5bf75bdf2e1f387b8035cf", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-2.stderr", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,50 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/alloc-error-handler-bad-signature-2.rs:10:1\n-   |\n-LL |    #[alloc_error_handler]\n-   |    ---------------------- in this procedural macro expansion\n-LL | // fn oom(\n-LL | ||     info: Layout,\n-LL | || ) {\n-   | ||_- arguments to this function are incorrect\n-LL | |      loop {}\n-LL | |  }\n-   | |__^ expected `Layout`, found `core::alloc::Layout`\n-   |\n-   = note: `core::alloc::Layout` and `Layout` have similar names, but are actually distinct types\n-note: `core::alloc::Layout` is defined in crate `core`\n-  --> $SRC_DIR/core/src/alloc/layout.rs:LL:COL\n-note: `Layout` is defined in the current crate\n-  --> $DIR/alloc-error-handler-bad-signature-2.rs:7:1\n-   |\n-LL | struct Layout;\n-   | ^^^^^^^^^^^^^\n-note: function defined here\n-  --> $DIR/alloc-error-handler-bad-signature-2.rs:10:4\n-   |\n-LL | fn oom(\n-   |    ^^^\n-LL |     info: Layout,\n-   |     ------------\n-   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0308]: mismatched types\n-  --> $DIR/alloc-error-handler-bad-signature-2.rs:10:1\n-   |\n-LL |    #[alloc_error_handler]\n-   |    ---------------------- in this procedural macro expansion\n-LL | // fn oom(\n-LL | ||     info: Layout,\n-LL | || ) {\n-   | ||_^ expected `!`, found `()`\n-LL | |      loop {}\n-LL | |  }\n-   | |__- expected `!` because of return type\n-   |\n-   = note:   expected type `!`\n-           found unit type `()`\n-   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "ea9ad39a70d81d2b6db694dcc56d406a2dcca461", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-3.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,15 +0,0 @@\n-// compile-flags:-C panic=abort\n-\n-#![feature(alloc_error_handler)]\n-#![no_std]\n-#![no_main]\n-\n-struct Layout;\n-\n-#[alloc_error_handler]\n-fn oom() -> ! { //~ ERROR function takes 0 arguments but 1 argument was supplied\n-    loop {}\n-}\n-\n-#[panic_handler]\n-fn panic(_: &core::panic::PanicInfo) -> ! { loop {} }"}, {"sha": "eb739b149a1030083d4727c837f0126cf473fa09", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-3.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,21 +0,0 @@\n-error[E0061]: this function takes 0 arguments but 1 argument was supplied\n-  --> $DIR/alloc-error-handler-bad-signature-3.rs:10:1\n-   |\n-LL |   #[alloc_error_handler]\n-   |   ---------------------- in this procedural macro expansion\n-LL |   fn oom() -> ! {\n-   |  _-^^^^^^^^^^^^\n-LL | |     loop {}\n-LL | | }\n-   | |_- unexpected argument of type `core::alloc::Layout`\n-   |\n-note: function defined here\n-  --> $DIR/alloc-error-handler-bad-signature-3.rs:10:4\n-   |\n-LL | fn oom() -> ! {\n-   |    ^^^\n-   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0061`."}, {"sha": "919d4b714a1ae39ea9e38d04c987d26d63387cad", "filename": "tests/ui/alloc-error/default-alloc-error-hook.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/tests%2Fui%2Falloc-error%2Fdefault-alloc-error-hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/tests%2Fui%2Falloc-error%2Fdefault-alloc-error-hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Fdefault-alloc-error-hook.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -2,7 +2,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n \n-use std::alloc::{Layout, handle_alloc_error};\n+use std::alloc::{handle_alloc_error, Layout};\n use std::env;\n use std::process::Command;\n use std::str;\n@@ -24,5 +24,5 @@ fn main() {\n         .strip_suffix(\"qemu: uncaught target signal 6 (Aborted) - core dumped\\n\")\n         .unwrap_or(stderr);\n \n-    assert_eq!(stderr, \"memory allocation of 42 bytes failed\\n\");\n+    assert!(stderr.contains(\"memory allocation of 42 bytes failed\"));\n }"}, {"sha": "28926243390932390a6873f0c85fea9b707e6493", "filename": "tests/ui/allocator/no_std-alloc-error-handler-custom.rs", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,84 +0,0 @@\n-// run-pass\n-// ignore-android no libc\n-// ignore-emscripten no libc\n-// ignore-sgx no libc\n-// ignore-wasm32 no libc\n-// only-linux\n-// compile-flags:-C panic=abort\n-// aux-build:helper.rs\n-\n-#![feature(rustc_private, lang_items)]\n-#![feature(alloc_error_handler)]\n-#![no_std]\n-#![no_main]\n-\n-extern crate alloc;\n-extern crate libc;\n-\n-// ARM targets need these symbols\n-#[no_mangle]\n-pub fn __aeabi_unwind_cpp_pr0() {}\n-\n-#[no_mangle]\n-pub fn __aeabi_unwind_cpp_pr1() {}\n-\n-use alloc::boxed::Box;\n-use alloc::string::ToString;\n-use core::alloc::{GlobalAlloc, Layout};\n-use core::ptr::null_mut;\n-\n-extern crate helper;\n-\n-struct MyAllocator;\n-\n-#[alloc_error_handler]\n-fn my_oom(layout: Layout) -> ! {\n-    use alloc::fmt::write;\n-    unsafe {\n-        let size = layout.size();\n-        let mut s = alloc::string::String::new();\n-        write(&mut s, format_args!(\"My OOM: failed to allocate {} bytes!\\n\", size)).unwrap();\n-        libc::write(libc::STDERR_FILENO, s.as_ptr() as *const _, s.len());\n-        libc::exit(0)\n-    }\n-}\n-\n-unsafe impl GlobalAlloc for MyAllocator {\n-    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        if layout.size() < 4096 { libc::malloc(layout.size()) as _ } else { null_mut() }\n-    }\n-    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n-}\n-\n-#[global_allocator]\n-static A: MyAllocator = MyAllocator;\n-\n-#[panic_handler]\n-fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n-    unsafe {\n-        let s = panic_info.to_string();\n-        const PSTR: &str = \"panic occurred: \";\n-        const CR: &str = \"\\n\";\n-        libc::write(libc::STDERR_FILENO, PSTR.as_ptr() as *const _, PSTR.len());\n-        libc::write(libc::STDERR_FILENO, s.as_ptr() as *const _, s.len());\n-        libc::write(libc::STDERR_FILENO, CR.as_ptr() as *const _, CR.len());\n-        libc::exit(1)\n-    }\n-}\n-\n-// Because we are compiling this code with `-C panic=abort`, this wouldn't normally be needed.\n-// However, `core` and `alloc` are both compiled with `-C panic=unwind`, which means that functions\n-// in these libraries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n-// unwind. So, for this test case we will define the symbol.\n-#[lang = \"eh_personality\"]\n-extern \"C\" fn rust_eh_personality() {}\n-\n-#[derive(Default, Debug)]\n-struct Page(#[allow(unused_tuple_struct_fields)] [[u64; 32]; 16]);\n-\n-#[no_mangle]\n-fn main(_argc: i32, _argv: *const *const u8) -> isize {\n-    let zero = Box::<Page>::new(Default::default());\n-    helper::work_with(&zero);\n-    1\n-}"}, {"sha": "78d189d20b64d4d9393595cf46190a976404fa9d", "filename": "tests/ui/feature-gates/feature-gate-alloc-error-handler.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,16 +0,0 @@\n-// compile-flags:-C panic=abort\n-\n-#![no_std]\n-#![no_main]\n-\n-use core::alloc::Layout;\n-\n-#[alloc_error_handler] //~ ERROR use of unstable library feature 'alloc_error_handler'\n-fn oom(info: Layout) -> ! {\n-    loop {}\n-}\n-\n-#[panic_handler]\n-fn panic(_: &core::panic::PanicInfo) -> ! {\n-    loop {}\n-}"}, {"sha": "f414eb463dfbcc1f5747aaa70f060a3453dc92c4", "filename": "tests/ui/feature-gates/feature-gate-alloc-error-handler.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9a6e41026d7aa27d897fb83e995447719753076/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr?ref=c9a6e41026d7aa27d897fb83e995447719753076", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: use of unstable library feature 'alloc_error_handler'\n-  --> $DIR/feature-gate-alloc-error-handler.rs:8:3\n-   |\n-LL | #[alloc_error_handler]\n-   |   ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51540 <https://github.com/rust-lang/rust/issues/51540> for more information\n-   = help: add `#![feature(alloc_error_handler)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "e06e603e3bf9478e3f30f83fa4211ba8d35ee9cd", "filename": "tests/ui/missing/missing-allocator.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abc0660118cc95f47445fd33502a11dd448f5968/tests%2Fui%2Fmissing%2Fmissing-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc0660118cc95f47445fd33502a11dd448f5968/tests%2Fui%2Fmissing%2Fmissing-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing%2Fmissing-allocator.rs?ref=abc0660118cc95f47445fd33502a11dd448f5968", "patch": "@@ -3,16 +3,10 @@\n \n #![no_std]\n #![crate_type = \"staticlib\"]\n-#![feature(alloc_error_handler)]\n \n #[panic_handler]\n fn panic(_: &core::panic::PanicInfo) -> ! {\n     loop {}\n }\n \n-#[alloc_error_handler]\n-fn oom(_: core::alloc::Layout) -> ! {\n-    loop {}\n-}\n-\n extern crate alloc;"}]}