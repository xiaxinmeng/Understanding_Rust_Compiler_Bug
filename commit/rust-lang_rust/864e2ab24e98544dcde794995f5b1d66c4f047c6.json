{"sha": "864e2ab24e98544dcde794995f5b1d66c4f047c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NGUyYWIyNGU5ODU0NGRjZGU3OTQ5OTVmNWIxZDY2YzRmMDQ3YzY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-25T22:00:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-25T22:01:21Z"}, "message": "stdlib: Implement a memory buffer reader, untested at the moment", "tree": {"sha": "3150e116473b0bca97529f140b8b5eaa20eab96f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3150e116473b0bca97529f140b8b5eaa20eab96f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/864e2ab24e98544dcde794995f5b1d66c4f047c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/864e2ab24e98544dcde794995f5b1d66c4f047c6", "html_url": "https://github.com/rust-lang/rust/commit/864e2ab24e98544dcde794995f5b1d66c4f047c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/864e2ab24e98544dcde794995f5b1d66c4f047c6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3712ee68add470947c4d42bd42ca04c9320e629c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3712ee68add470947c4d42bd42ca04c9320e629c", "html_url": "https://github.com/rust-lang/rust/commit/3712ee68add470947c4d42bd42ca04c9320e629c"}], "stats": {"total": 83, "additions": 61, "deletions": 22}, "files": [{"sha": "5088d1979ca971270a6f592a68bc406548c64117", "filename": "src/lib/io.rs", "status": "modified", "additions": 61, "deletions": 22, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/864e2ab24e98544dcde794995f5b1d66c4f047c6/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864e2ab24e98544dcde794995f5b1d66c4f047c6/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=864e2ab24e98544dcde794995f5b1d66c4f047c6", "patch": "@@ -191,9 +191,38 @@ fn file_reader(str path) -> reader {\n \n // Byte buffer readers\n \n-//state obj byte_buf_reader(vec[mutable? u8] buf) {\n-//    fn read(\n-//}\n+// TODO: mutable? u8, but this fails with rustboot.\n+type byte_buf = @rec(vec[u8] buf, mutable uint pos);\n+\n+state obj byte_buf_reader(byte_buf bbuf) {\n+    impure fn read(uint len) -> vec[u8] {\n+        auto rest = _vec.len[u8](bbuf.buf) - bbuf.pos;\n+        auto to_read = len;\n+        if (rest < to_read) {\n+            to_read = rest;\n+        }\n+        auto range = _vec.slice[u8](bbuf.buf, bbuf.pos, bbuf.pos + to_read);\n+        bbuf.pos += to_read;\n+        ret range;\n+    }\n+\n+    impure fn unread_byte(int byte) {\n+        log \"TODO: unread_byte\";\n+        fail;\n+    }\n+\n+    impure fn eof() -> bool {\n+        ret bbuf.pos == _vec.len[u8](bbuf.buf);\n+    }\n+\n+    impure fn seek(int offset, seek_style whence) {\n+        auto pos = bbuf.pos;\n+        auto len = _vec.len[u8](bbuf.buf);\n+        bbuf.pos = seek_in_buf(offset, pos, len, whence);\n+    }\n+\n+    impure fn tell() -> uint { ret bbuf.pos; }\n+}\n \n \n // Writing\n@@ -377,9 +406,9 @@ type str_writer =\n           fn get_str() -> str;\n     };\n \n-type byte_buf = @rec(mutable vec[mutable u8] buf, mutable uint pos);\n+type mutable_byte_buf = @rec(mutable vec[mutable u8] buf, mutable uint pos);\n \n-state obj byte_buf_writer(byte_buf buf) {\n+state obj byte_buf_writer(mutable_byte_buf buf) {\n     fn write(vec[u8] v) {\n         // FIXME: optimize\n         auto vlen = _vec.len[u8](v);\n@@ -397,21 +426,9 @@ state obj byte_buf_writer(byte_buf buf) {\n     }\n \n     fn seek(int offset, seek_style whence) {\n-        auto pos = buf.pos as int;\n-        auto len = _vec.len[mutable u8](buf.buf) as int;\n-        alt (whence) {\n-            case (seek_set) { pos = offset;         }\n-            case (seek_cur) { pos += offset;        }\n-            case (seek_end) { pos = len + offset;   }\n-        }\n-\n-        if (pos < 0) {\n-            pos = 0;\n-        } else if (pos > len) {\n-            pos = len;\n-        }\n-\n-        buf.pos = pos as uint;\n+        auto pos = buf.pos;\n+        auto len = _vec.len[mutable u8](buf.buf);\n+        buf.pos = seek_in_buf(offset, pos, len, whence);\n     }\n \n     fn tell() -> uint { ret buf.pos; }\n@@ -422,14 +439,36 @@ fn string_writer() -> str_writer {\n     let vec[mutable u8] b = vec(mutable 0u8);\n     _vec.pop[mutable u8](b);\n \n-    let byte_buf buf = @rec(mutable buf = b, mutable pos = 0u);\n-    state obj str_writer_wrap(writer wr, byte_buf buf) {\n+    let mutable_byte_buf buf = @rec(mutable buf = b, mutable pos = 0u);\n+    state obj str_writer_wrap(writer wr, mutable_byte_buf buf) {\n         fn get_writer() -> writer {ret wr;}\n         fn get_str() -> str {ret _str.unsafe_from_mutable_bytes(buf.buf);}\n     }\n     ret str_writer_wrap(new_writer(byte_buf_writer(buf)), buf);\n }\n \n+\n+// Utility functions\n+\n+fn seek_in_buf(int offset, uint pos, uint len, seek_style whence) -> uint {\n+    auto bpos = pos as int;\n+    auto blen = len as int;\n+    alt (whence) {\n+        case (seek_set) { bpos = offset;        }\n+        case (seek_cur) { bpos += offset;       }\n+        case (seek_end) { bpos = blen + offset; }\n+    }\n+\n+    if (bpos < 0) {\n+        bpos = 0;\n+    } else if (bpos > blen) {\n+        bpos = blen;\n+    }\n+\n+    ret bpos as uint;\n+}\n+\n+\n //\n // Local Variables:\n // mode: rust"}]}