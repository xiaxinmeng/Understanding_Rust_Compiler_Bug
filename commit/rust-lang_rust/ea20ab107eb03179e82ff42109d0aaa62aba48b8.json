{"sha": "ea20ab107eb03179e82ff42109d0aaa62aba48b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMjBhYjEwN2ViMDMxNzllODJmZjQyMTA5ZDBhYWE2MmFiYTQ4Yjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-30T20:36:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-30T20:36:58Z"}, "message": "Auto merge of #37459 - Mark-Simulacrum:closure-ice, r=eddyb\n\nFix ICE when attempting to print closure generics\n\nFixes #36622.\n\nr? @eddyb or @arielb1", "tree": {"sha": "60621158b51ecbe28f7e3f5bd93debdd76ed847f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60621158b51ecbe28f7e3f5bd93debdd76ed847f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea20ab107eb03179e82ff42109d0aaa62aba48b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea20ab107eb03179e82ff42109d0aaa62aba48b8", "html_url": "https://github.com/rust-lang/rust/commit/ea20ab107eb03179e82ff42109d0aaa62aba48b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea20ab107eb03179e82ff42109d0aaa62aba48b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5a702dc785760c74960007af389caa47546fa58", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a702dc785760c74960007af389caa47546fa58", "html_url": "https://github.com/rust-lang/rust/commit/f5a702dc785760c74960007af389caa47546fa58"}, {"sha": "bdb399db010c05a18f5c6622c9ba1cbed37a214e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb399db010c05a18f5c6622c9ba1cbed37a214e", "html_url": "https://github.com/rust-lang/rust/commit/bdb399db010c05a18f5c6622c9ba1cbed37a214e"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "6129d1b3d4c7659b9086cdde1ef2ea57b0319926", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea20ab107eb03179e82ff42109d0aaa62aba48b8/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea20ab107eb03179e82ff42109d0aaa62aba48b8/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ea20ab107eb03179e82ff42109d0aaa62aba48b8", "patch": "@@ -1142,8 +1142,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     AggregateKind::Adt(adt_def, variant, substs, _) => {\n                         let variant_def = &adt_def.variants[variant];\n \n-                        ppaux::parameterized(fmt, substs, variant_def.did,\n-                                             ppaux::Ns::Value, &[])?;\n+                        ppaux::parameterized(fmt, substs, variant_def.did, &[])?;\n \n                         match variant_def.ctor_kind {\n                             CtorKind::Const => Ok(()),\n@@ -1238,7 +1237,7 @@ impl<'tcx> Debug for Literal<'tcx> {\n         use self::Literal::*;\n         match *self {\n             Item { def_id, substs } => {\n-                ppaux::parameterized(fmt, substs, def_id, ppaux::Ns::Value, &[])\n+                ppaux::parameterized(fmt, substs, def_id, &[])\n             }\n             Value { ref value } => {\n                 write!(fmt, \"const \")?;"}, {"sha": "5ca567410291ad3edacf7647aa810913a965b42b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ea20ab107eb03179e82ff42109d0aaa62aba48b8/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea20ab107eb03179e82ff42109d0aaa62aba48b8/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ea20ab107eb03179e82ff42109d0aaa62aba48b8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n+use hir::map::definitions::DefPathData;\n use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use ty::{TyBool, TyChar, TyAdt};\n@@ -56,17 +57,9 @@ fn fn_sig(f: &mut fmt::Formatter,\n     Ok(())\n }\n \n-/// Namespace of the path given to parameterized to print.\n-#[derive(Copy, Clone, PartialEq, Debug)]\n-pub enum Ns {\n-    Type,\n-    Value\n-}\n-\n pub fn parameterized(f: &mut fmt::Formatter,\n                      substs: &subst::Substs,\n                      did: DefId,\n-                     ns: Ns,\n                      projections: &[ty::ProjectionPredicate])\n                      -> fmt::Result {\n     let mut verbose = false;\n@@ -75,16 +68,42 @@ pub fn parameterized(f: &mut fmt::Formatter,\n     let mut num_regions = 0;\n     let mut num_types = 0;\n     let mut item_name = None;\n+    let mut is_value_path = false;\n     let fn_trait_kind = ty::tls::with(|tcx| {\n-        let mut generics = tcx.lookup_generics(did);\n+        // Unfortunately, some kinds of items (e.g., closures) don't have\n+        // generics. So walk back up the find the closest parent that DOES\n+        // have them.\n+        let mut item_def_id = did;\n+        loop {\n+            let key = tcx.def_key(item_def_id);\n+            match key.disambiguated_data.data {\n+                DefPathData::TypeNs(_) => {\n+                    break;\n+                }\n+                DefPathData::ValueNs(_) | DefPathData::EnumVariant(_) => {\n+                    is_value_path = true;\n+                    break;\n+                }\n+                _ => {\n+                    // if we're making a symbol for something, there ought\n+                    // to be a value or type-def or something in there\n+                    // *somewhere*\n+                    item_def_id.index = key.parent.unwrap_or_else(|| {\n+                        bug!(\"finding type for {:?}, encountered def-id {:?} with no \\\n+                             parent\", did, item_def_id);\n+                    });\n+                }\n+            }\n+        }\n+        let mut generics = tcx.lookup_generics(item_def_id);\n         let mut path_def_id = did;\n         verbose = tcx.sess.verbose();\n         has_self = generics.has_self;\n \n         let mut child_types = 0;\n         if let Some(def_id) = generics.parent {\n             // Methods.\n-            assert_eq!(ns, Ns::Value);\n+            assert!(is_value_path);\n             child_types = generics.types.len();\n             generics = tcx.lookup_generics(def_id);\n             num_regions = generics.regions.len();\n@@ -97,7 +116,7 @@ pub fn parameterized(f: &mut fmt::Formatter,\n             item_name = Some(tcx.item_name(did));\n             path_def_id = def_id;\n         } else {\n-            if ns == Ns::Value {\n+            if is_value_path {\n                 // Functions.\n                 assert_eq!(has_self, false);\n             } else {\n@@ -192,7 +211,7 @@ pub fn parameterized(f: &mut fmt::Formatter,\n     start_or_continue(f, \"\", \">\")?;\n \n     // For values, also print their name and type parameters.\n-    if ns == Ns::Value {\n+    if is_value_path {\n         empty.set(true);\n \n         if has_self {\n@@ -298,7 +317,6 @@ impl<'tcx> fmt::Display for TraitAndProjections<'tcx> {\n         let TraitAndProjections(ref trait_ref, ref projection_bounds) = *self;\n         parameterized(f, trait_ref.substs,\n                       trait_ref.def_id,\n-                      Ns::Type,\n                       projection_bounds)\n     }\n }\n@@ -398,7 +416,7 @@ impl<'tcx> fmt::Debug for ty::ExistentialTraitRef<'tcx> {\n             let trait_ref = tcx.lift(&ty::Binder(*self))\n                                .expect(\"could not lift TraitRef for printing\")\n                                .with_self_ty(tcx, dummy_self).0;\n-            parameterized(f, trait_ref.substs, trait_ref.def_id, Ns::Type, &[])\n+            parameterized(f, trait_ref.substs, trait_ref.def_id, &[])\n         })\n     }\n }\n@@ -798,7 +816,7 @@ impl<'tcx> fmt::Display for ty::Binder<ty::OutlivesPredicate<&'tcx ty::Region,\n \n impl<'tcx> fmt::Display for ty::TraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        parameterized(f, self.substs, self.def_id, Ns::Type, &[])\n+        parameterized(f, self.substs, self.def_id, &[])\n     }\n }\n \n@@ -851,7 +869,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                 }\n \n                 write!(f, \"{} {{\", bare_fn.sig.0)?;\n-                parameterized(f, substs, def_id, Ns::Value, &[])?;\n+                parameterized(f, substs, def_id, &[])?;\n                 write!(f, \"}}\")\n             }\n             TyFnPtr(ref bare_fn) => {\n@@ -874,7 +892,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                           !tcx.tcache.borrow().contains_key(&def.did) {\n                         write!(f, \"{}<..>\", tcx.item_path_str(def.did))\n                     } else {\n-                        parameterized(f, substs, def.did, Ns::Type, &[])\n+                        parameterized(f, substs, def.did, &[])\n                     }\n                 })\n             }"}, {"sha": "270ce79620f8bcd5b15da523a7b13b09d84a7d76", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea20ab107eb03179e82ff42109d0aaa62aba48b8/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea20ab107eb03179e82ff42109d0aaa62aba48b8/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=ea20ab107eb03179e82ff42109d0aaa62aba48b8", "patch": "@@ -26,7 +26,7 @@ pub struct Instance<'tcx> {\n \n impl<'tcx> fmt::Display for Instance<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        ppaux::parameterized(f, &self.substs, self.def, ppaux::Ns::Value, &[])\n+        ppaux::parameterized(f, &self.substs, self.def, &[])\n     }\n }\n "}]}