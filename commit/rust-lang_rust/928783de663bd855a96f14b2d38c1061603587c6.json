{"sha": "928783de663bd855a96f14b2d38c1061603587c6", "node_id": "C_kwDOAAsO6NoAKDkyODc4M2RlNjYzYmQ4NTVhOTZmMTRiMmQzOGMxMDYxNjAzNTg3YzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-11T18:56:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-11T18:56:59Z"}, "message": "Auto merge of #91799 - matthiaskrgr:rollup-b38xx6i, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #83174 (Suggest using a temporary variable to fix borrowck errors)\n - #89734 (Point at capture points for non-`'static` reference crossing a `yield` point)\n - #90270 (Make `Borrow` and `BorrowMut` impls `const`)\n - #90741 (Const `Option::cloned`)\n - #91548 (Add spin_loop hint for RISC-V architecture)\n - #91721 (Minor improvements to `future::join!`'s implementation)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7d15b13b3dc510538db60633b953627bfd0e6df6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d15b13b3dc510538db60633b953627bfd0e6df6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/928783de663bd855a96f14b2d38c1061603587c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/928783de663bd855a96f14b2d38c1061603587c6", "html_url": "https://github.com/rust-lang/rust/commit/928783de663bd855a96f14b2d38c1061603587c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/928783de663bd855a96f14b2d38c1061603587c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8dc6aa673317cf72a8abb9c421f573f2b34b47a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8dc6aa673317cf72a8abb9c421f573f2b34b47a", "html_url": "https://github.com/rust-lang/rust/commit/b8dc6aa673317cf72a8abb9c421f573f2b34b47a"}, {"sha": "ed81098fcca409261db3408115725d07729ac39a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed81098fcca409261db3408115725d07729ac39a", "html_url": "https://github.com/rust-lang/rust/commit/ed81098fcca409261db3408115725d07729ac39a"}], "stats": {"total": 1150, "additions": 949, "deletions": 201}, "files": [{"sha": "881ebed602946183340e4f233db6960bb1d1f7c3", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -368,6 +368,7 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n                 error_region,\n                 cause.clone(),\n                 placeholder_region,\n+                vec![],\n             ),\n         ),\n         (Some(error_region), _) => NiceRegionError::new("}, {"sha": "98c619cdd291ccd488c81f5fe41f6bcb75a1cce6", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -15,16 +15,18 @@ use rustc_span::symbol::sym;\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n+use crate::borrow_set::TwoPhaseActivation;\n use crate::borrowck_errors;\n \n+use crate::diagnostics::find_all_local_uses;\n use crate::{\n     borrow_set::BorrowData, diagnostics::Instance, prefixes::IsPrefixOf,\n     InitializationRequiringAction, MirBorrowckCtxt, PrefixSet, WriteKind,\n };\n \n use super::{\n-    explain_borrow::BorrowExplanation, FnSelfUseKind, IncludingDowncast, RegionName,\n-    RegionNameSource, UseSpans,\n+    explain_borrow::{BorrowExplanation, LaterUseKind},\n+    FnSelfUseKind, IncludingDowncast, RegionName, RegionNameSource, UseSpans,\n };\n \n #[derive(Debug)]\n@@ -768,9 +770,92 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some((issued_span, span)),\n         );\n \n+        self.suggest_using_local_if_applicable(\n+            &mut err,\n+            location,\n+            (place, span),\n+            gen_borrow_kind,\n+            issued_borrow,\n+            explanation,\n+        );\n+\n         err\n     }\n \n+    #[instrument(level = \"debug\", skip(self, err))]\n+    fn suggest_using_local_if_applicable(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        location: Location,\n+        (place, span): (Place<'tcx>, Span),\n+        gen_borrow_kind: BorrowKind,\n+        issued_borrow: &BorrowData<'tcx>,\n+        explanation: BorrowExplanation,\n+    ) {\n+        let used_in_call =\n+            matches!(explanation, BorrowExplanation::UsedLater(LaterUseKind::Call, _call_span, _));\n+        if !used_in_call {\n+            debug!(\"not later used in call\");\n+            return;\n+        }\n+\n+        let outer_call_loc =\n+            if let TwoPhaseActivation::ActivatedAt(loc) = issued_borrow.activation_location {\n+                loc\n+            } else {\n+                issued_borrow.reserve_location\n+            };\n+        let outer_call_stmt = self.body.stmt_at(outer_call_loc);\n+\n+        let inner_param_location = location;\n+        let Some(inner_param_stmt) = self.body.stmt_at(inner_param_location).left() else {\n+            debug!(\"`inner_param_location` {:?} is not for a statement\", inner_param_location);\n+            return;\n+        };\n+        let Some(&inner_param) = inner_param_stmt.kind.as_assign().map(|(p, _)| p) else {\n+            debug!(\n+                \"`inner_param_location` {:?} is not for an assignment: {:?}\",\n+                inner_param_location, inner_param_stmt\n+            );\n+            return;\n+        };\n+        let inner_param_uses = find_all_local_uses::find(self.body, inner_param.local);\n+        let Some((inner_call_loc,inner_call_term)) = inner_param_uses.into_iter().find_map(|loc| {\n+            let Either::Right(term) = self.body.stmt_at(loc) else {\n+                debug!(\"{:?} is a statement, so it can't be a call\", loc);\n+                return None;\n+            };\n+            let TerminatorKind::Call { args, .. } = &term.kind else {\n+                debug!(\"not a call: {:?}\", term);\n+                return None;\n+            };\n+            debug!(\"checking call args for uses of inner_param: {:?}\", args);\n+            if args.contains(&Operand::Move(inner_param)) {\n+                Some((loc,term))\n+            } else {\n+                None\n+            }\n+        }) else {\n+            debug!(\"no uses of inner_param found as a by-move call arg\");\n+            return;\n+        };\n+        debug!(\"===> outer_call_loc = {:?}, inner_call_loc = {:?}\", outer_call_loc, inner_call_loc);\n+\n+        let inner_call_span = inner_call_term.source_info.span;\n+        let outer_call_span = outer_call_stmt.either(|s| s.source_info, |t| t.source_info).span;\n+        if outer_call_span == inner_call_span || !outer_call_span.contains(inner_call_span) {\n+            // FIXME: This stops the suggestion in some cases where it should be emitted.\n+            //        Fix the spans for those cases so it's emitted correctly.\n+            debug!(\n+                \"outer span {:?} does not strictly contain inner span {:?}\",\n+                outer_call_span, inner_call_span\n+            );\n+            return;\n+        }\n+        err.span_help(inner_call_span, \"try adding a local storing this argument...\");\n+        err.span_help(outer_call_span, \"...and then using that local as the argument to this call\");\n+    }\n+\n     fn suggest_split_at_mut_if_applicable(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "49d9caae71144f8cec6353e791fa91671fd8d9a5", "filename": "compiler/rustc_borrowck/src/diagnostics/find_all_local_uses.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -0,0 +1,26 @@\n+use std::collections::BTreeSet;\n+\n+use rustc_middle::mir::visit::{PlaceContext, Visitor};\n+use rustc_middle::mir::{Body, Local, Location};\n+\n+/// Find all uses of (including assignments to) a [`Local`].\n+///\n+/// Uses `BTreeSet` so output is deterministic.\n+pub(super) fn find<'tcx>(body: &Body<'tcx>, local: Local) -> BTreeSet<Location> {\n+    let mut visitor = AllLocalUsesVisitor { for_local: local, uses: BTreeSet::default() };\n+    visitor.visit_body(body);\n+    visitor.uses\n+}\n+\n+struct AllLocalUsesVisitor {\n+    for_local: Local,\n+    uses: BTreeSet<Location>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for AllLocalUsesVisitor {\n+    fn visit_local(&mut self, local: &Local, _context: PlaceContext, location: Location) {\n+        if *local == self.for_local {\n+            self.uses.insert(location);\n+        }\n+    }\n+}"}, {"sha": "dec1940ace88188139a08344f335e19f928f794a", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -19,6 +19,7 @@ use rustc_target::abi::VariantIdx;\n use super::borrow_set::BorrowData;\n use super::MirBorrowckCtxt;\n \n+mod find_all_local_uses;\n mod find_use;\n mod outlives_suggestion;\n mod region_name;"}, {"sha": "c3f2213229a010bfcda0c02782e3657e3de24313", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -384,6 +384,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         sub_r,\n                         sup_origin,\n                         sup_r,\n+                        _,\n                     ) => {\n                         if sub_r.is_placeholder() {\n                             self.report_placeholder_failure(sub_origin, sub_r, sup_r).emit();\n@@ -464,7 +465,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         errors.sort_by_key(|u| match *u {\n             RegionResolutionError::ConcreteFailure(ref sro, _, _) => sro.span(),\n             RegionResolutionError::GenericBoundFailure(ref sro, _, _) => sro.span(),\n-            RegionResolutionError::SubSupConflict(_, ref rvo, _, _, _, _) => rvo.span(),\n+            RegionResolutionError::SubSupConflict(_, ref rvo, _, _, _, _, _) => rvo.span(),\n             RegionResolutionError::UpperBoundUniverseConflict(_, ref rvo, _, _, _) => rvo.span(),\n         });\n         errors"}, {"sha": "fd295b743420ca799acf2e12dc03e5ffb57ea79b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -67,7 +67,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n     pub fn regions(&self) -> Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)> {\n         match (&self.error, self.regions) {\n             (Some(ConcreteFailure(origin, sub, sup)), None) => Some((origin.span(), sub, sup)),\n-            (Some(SubSupConflict(_, _, origin, sub, _, sup)), None) => {\n+            (Some(SubSupConflict(_, _, origin, sub, _, sup, _)), None) => {\n                 Some((origin.span(), sub, sup))\n             }\n             (None, Some((span, sub, sup))) => Some((span, sub, sup)),"}, {"sha": "1a4a28038218941a4cf85351e5d62c95ff161dd6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -34,6 +34,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n@@ -49,6 +50,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 _,\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n@@ -64,6 +66,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 _,\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n@@ -79,6 +82,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 _,\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sup_placeholder @ ty::RePlaceholder(_),\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,"}, {"sha": "80d4a2e57da4a7e6a8e249c289d3d770c7207d97", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 93, "deletions": 46, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -10,7 +10,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, ErasedMap, NestedVisitorMap, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n use rustc_middle::ty::{\n-    self, AssocItemContainer, RegionKind, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n+    self, AssocItemContainer, RegionKind, StaticLifetimeVisitor, Ty, TyCtxt, TypeFoldable,\n+    TypeVisitor,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{MultiSpan, Span};\n@@ -23,16 +24,17 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     pub(super) fn try_report_static_impl_trait(&self) -> Option<ErrorReported> {\n         debug!(\"try_report_static_impl_trait(error={:?})\", self.error);\n         let tcx = self.tcx();\n-        let (var_origin, sub_origin, sub_r, sup_origin, sup_r) = match self.error.as_ref()? {\n+        let (var_origin, sub_origin, sub_r, sup_origin, sup_r, spans) = match self.error.as_ref()? {\n             RegionResolutionError::SubSupConflict(\n                 _,\n                 var_origin,\n                 sub_origin,\n                 sub_r,\n                 sup_origin,\n                 sup_r,\n+                spans,\n             ) if **sub_r == RegionKind::ReStatic => {\n-                (var_origin, sub_origin, sub_r, sup_origin, sup_r)\n+                (var_origin, sub_origin, sub_r, sup_origin, sup_r, spans)\n             }\n             RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(box TypeTrace { cause, .. }),\n@@ -74,7 +76,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     err.span_label(\n                         cause.span,\n                         &format!(\n-                            \"...is captured and required to live as long as `'static` here \\\n+                            \"...is used and required to live as long as `'static` here \\\n                              because of an implicit lifetime bound on the {}\",\n                             match ctxt.assoc_item.container {\n                                 AssocItemContainer::TraitContainer(id) =>\n@@ -123,56 +125,101 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             param_name,\n             lifetime,\n         );\n-        err.span_label(param.param_ty_span, &format!(\"this data with {}...\", lifetime));\n-        debug!(\"try_report_static_impl_trait: param_info={:?}\", param);\n \n-        // We try to make the output have fewer overlapping spans if possible.\n-        if (sp == sup_origin.span() || !return_sp.overlaps(sup_origin.span()))\n-            && sup_origin.span() != return_sp\n-        {\n-            // FIXME: account for `async fn` like in `async-await/issues/issue-62097.rs`\n-\n-            // Customize the spans and labels depending on their relative order so\n-            // that split sentences flow correctly.\n-            if sup_origin.span().overlaps(return_sp) && sp == sup_origin.span() {\n-                // Avoid the following:\n-                //\n-                // error: cannot infer an appropriate lifetime\n-                //   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n-                //    |\n-                // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-                //    |           ----                      ---------^-\n+        let (mention_influencer, influencer_point) =\n+            if sup_origin.span().overlaps(param.param_ty_span) {\n+                // Account for `async fn` like in `async-await/issues/issue-62097.rs`.\n+                // The desugaring of `async `fn`s causes `sup_origin` and `param` to point at the same\n+                // place (but with different `ctxt`, hence `overlaps` instead of `==` above).\n                 //\n-                // and instead show:\n+                // This avoids the following:\n                 //\n-                // error: cannot infer an appropriate lifetime\n-                //   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n-                //    |\n-                // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-                //    |           ----                               ^\n-                err.span_label(\n-                    sup_origin.span(),\n-                    \"...is captured here, requiring it to live as long as `'static`\",\n-                );\n+                // LL |     pub async fn run_dummy_fn(&self) {\n+                //    |                               ^^^^^\n+                //    |                               |\n+                //    |                               this data with an anonymous lifetime `'_`...\n+                //    |                               ...is captured here...\n+                (false, sup_origin.span())\n             } else {\n-                err.span_label(sup_origin.span(), \"...is captured here...\");\n-                if return_sp < sup_origin.span() {\n-                    err.span_note(\n-                        return_sp,\n-                        \"...and is required to live as long as `'static` here\",\n+                (!sup_origin.span().overlaps(return_sp), param.param_ty_span)\n+            };\n+        err.span_label(influencer_point, &format!(\"this data with {}...\", lifetime));\n+\n+        debug!(\"try_report_static_impl_trait: param_info={:?}\", param);\n+\n+        let mut spans = spans.clone();\n+\n+        if mention_influencer {\n+            spans.push(sup_origin.span());\n+        }\n+        // We dedup the spans *ignoring* expansion context.\n+        spans.sort();\n+        spans.dedup_by_key(|span| (span.lo(), span.hi()));\n+\n+        // We try to make the output have fewer overlapping spans if possible.\n+        let require_msg = if spans.is_empty() {\n+            \"...is used and required to live as long as `'static` here\"\n+        } else {\n+            \"...and is required to live as long as `'static` here\"\n+        };\n+        let require_span =\n+            if sup_origin.span().overlaps(return_sp) { sup_origin.span() } else { return_sp };\n+\n+        for span in &spans {\n+            err.span_label(*span, \"...is used here...\");\n+        }\n+\n+        if spans.iter().any(|sp| sp.overlaps(return_sp) || *sp > return_sp) {\n+            // If any of the \"captured here\" labels appears on the same line or after\n+            // `require_span`, we put it on a note to ensure the text flows by appearing\n+            // always at the end.\n+            err.span_note(require_span, require_msg);\n+        } else {\n+            // We don't need a note, it's already at the end, it can be shown as a `span_label`.\n+            err.span_label(require_span, require_msg);\n+        }\n+\n+        if let SubregionOrigin::RelateParamBound(_, _, Some(bound)) = sub_origin {\n+            err.span_note(*bound, \"`'static` lifetime requirement introduced by this bound\");\n+        }\n+        if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = sub_origin {\n+            if let ObligationCauseCode::ReturnValue(hir_id)\n+            | ObligationCauseCode::BlockTailExpression(hir_id) = &cause.code\n+            {\n+                let parent_id = tcx.hir().get_parent_item(*hir_id);\n+                if let Some(fn_decl) = tcx.hir().fn_decl_by_hir_id(parent_id) {\n+                    let mut span: MultiSpan = fn_decl.output.span().into();\n+                    let mut add_label = true;\n+                    if let hir::FnRetTy::Return(ty) = fn_decl.output {\n+                        let mut v = StaticLifetimeVisitor(vec![], tcx.hir());\n+                        v.visit_ty(ty);\n+                        if !v.0.is_empty() {\n+                            span = v.0.clone().into();\n+                            for sp in v.0 {\n+                                span.push_span_label(\n+                                    sp,\n+                                    \"`'static` requirement introduced here\".to_string(),\n+                                );\n+                            }\n+                            add_label = false;\n+                        }\n+                    }\n+                    if add_label {\n+                        span.push_span_label(\n+                            fn_decl.output.span(),\n+                            \"requirement introduced by this return type\".to_string(),\n+                        );\n+                    }\n+                    span.push_span_label(\n+                        cause.span,\n+                        \"because of this returned expression\".to_string(),\n                     );\n-                } else {\n-                    err.span_label(\n-                        return_sp,\n-                        \"...and is required to live as long as `'static` here\",\n+                    err.span_note(\n+                        span,\n+                        \"`'static` lifetime requirement introduced by the return type\",\n                     );\n                 }\n             }\n-        } else {\n-            err.span_label(\n-                return_sp,\n-                \"...is captured and required to live as long as `'static` here\",\n-            );\n         }\n \n         let fn_returns = tcx.return_type_impl_or_dyn_traits(anon_reg_sup.def_id);"}, {"sha": "452ca5eeabd493e35894bcedb6926e98701ef71f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -28,6 +28,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             _sub,\n             sup_origin,\n             _sup,\n+            _,\n         ) = error.clone()\n         {\n             if let (&Subtype(ref sup_trace), &Subtype(ref sub_trace)) = (&sup_origin, &sub_origin) {"}, {"sha": "85ee6d2cdc282e85e8dca19811e54d3f0eb9b587", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};\n use rustc_middle::ty::{ReLateBound, RePlaceholder, ReVar};\n use rustc_middle::ty::{Region, RegionVid};\n+use rustc_span::Span;\n use std::fmt;\n \n /// This function performs lexical region resolution given a complete\n@@ -96,6 +97,7 @@ pub enum RegionResolutionError<'tcx> {\n         Region<'tcx>,\n         SubregionOrigin<'tcx>,\n         Region<'tcx>,\n+        Vec<Span>, // All the influences on a given value that didn't meet its constraints.\n     ),\n \n     /// Indicates a `'b: 'a` constraint where `'a` is in a universe that\n@@ -567,7 +569,30 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     // if this rule starts to create problems we'll\n                     // have to revisit this portion of the code and\n                     // think hard about it. =) -- nikomatsakis\n-                    self.collect_error_for_expanding_node(graph, &mut dup_vec, node_vid, errors);\n+\n+                    // Obtain the spans for all the places that can\n+                    // influence the constraints on this value for\n+                    // richer diagnostics in `static_impl_trait`.\n+                    let influences: Vec<Span> = self\n+                        .data\n+                        .constraints\n+                        .iter()\n+                        .filter_map(|(constraint, origin)| match (constraint, origin) {\n+                            (\n+                                Constraint::VarSubVar(_, sup),\n+                                SubregionOrigin::DataBorrowed(_, sp),\n+                            ) if sup == &node_vid => Some(*sp),\n+                            _ => None,\n+                        })\n+                        .collect();\n+\n+                    self.collect_error_for_expanding_node(\n+                        graph,\n+                        &mut dup_vec,\n+                        node_vid,\n+                        errors,\n+                        influences,\n+                    );\n                 }\n             }\n         }\n@@ -621,6 +646,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         dup_vec: &mut IndexVec<RegionVid, Option<RegionVid>>,\n         node_idx: RegionVid,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n+        influences: Vec<Span>,\n     ) {\n         // Errors in expanding nodes result from a lower-bound that is\n         // not contained by an upper-bound.\n@@ -667,13 +693,15 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                          sup: {:?}\",\n                         origin, node_idx, lower_bound.region, upper_bound.region\n                     );\n+\n                     errors.push(RegionResolutionError::SubSupConflict(\n                         node_idx,\n                         origin,\n                         lower_bound.origin.clone(),\n                         lower_bound.region,\n                         upper_bound.origin.clone(),\n                         upper_bound.region,\n+                        influences,\n                     ));\n                     return;\n                 }"}, {"sha": "afd8083dfe46a3e23e42cab2add914c8c23a12d9", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -12,6 +12,7 @@ use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex};\n+\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, GeneratorKind};\n@@ -30,6 +31,9 @@ use rustc_serialize::{Decodable, Encodable};\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::asm::InlineAsmRegOrRegClass;\n+\n+use either::Either;\n+\n use std::borrow::Cow;\n use std::convert::TryInto;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n@@ -503,6 +507,16 @@ impl<'tcx> Body<'tcx> {\n         Location { block: bb, statement_index: self[bb].statements.len() }\n     }\n \n+    pub fn stmt_at(&self, location: Location) -> Either<&Statement<'tcx>, &Terminator<'tcx>> {\n+        let Location { block, statement_index } = location;\n+        let block_data = &self.basic_blocks[block];\n+        block_data\n+            .statements\n+            .get(statement_index)\n+            .map(Either::Left)\n+            .unwrap_or_else(|| Either::Right(block_data.terminator()))\n+    }\n+\n     #[inline]\n     pub fn predecessors(&self) -> &Predecessors {\n         self.predecessor_cache.compute(&self.basic_blocks)"}, {"sha": "0bf457ca8a8247d27416e636d883c9e9684b6a2e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -1481,40 +1481,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         scope_def_id: LocalDefId,\n     ) -> Vec<&'tcx hir::Ty<'tcx>> {\n         let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n-        let hir_output = match self.hir().get(hir_id) {\n-            Node::Item(hir::Item {\n-                kind:\n-                    ItemKind::Fn(\n-                        hir::FnSig {\n-                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n-                            ..\n-                        },\n-                        ..,\n-                    ),\n-                ..\n-            })\n-            | Node::ImplItem(hir::ImplItem {\n-                kind:\n-                    hir::ImplItemKind::Fn(\n-                        hir::FnSig {\n-                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n-                            ..\n-                        },\n-                        _,\n-                    ),\n-                ..\n-            })\n-            | Node::TraitItem(hir::TraitItem {\n-                kind:\n-                    hir::TraitItemKind::Fn(\n-                        hir::FnSig {\n-                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n-                            ..\n-                        },\n-                        _,\n-                    ),\n-                ..\n-            }) => ty,\n+        let hir_output = match self.hir().fn_decl_by_hir_id(hir_id) {\n+            Some(hir::FnDecl { output: hir::FnRetTy::Return(ty), .. }) => ty,\n             _ => return vec![],\n         };\n "}, {"sha": "1acb3ec57dea6e943533eb0d401f7ea5b4633f8c", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -6,6 +6,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{QPath, TyKind, WhereBoundPredicate, WherePredicate};\n+use rustc_span::Span;\n \n impl<'tcx> TyS<'tcx> {\n     /// Similar to `TyS::is_primitive`, but also considers inferred numeric values to be primitive.\n@@ -432,3 +433,22 @@ impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n         hir::intravisit::walk_ty(self, ty);\n     }\n }\n+\n+/// Collect al types that have an implicit `'static` obligation that we could suggest `'_` for.\n+pub struct StaticLifetimeVisitor<'tcx>(pub Vec<Span>, pub crate::hir::map::Map<'tcx>);\n+\n+impl<'v> hir::intravisit::Visitor<'v> for StaticLifetimeVisitor<'v> {\n+    type Map = rustc_hir::intravisit::ErasedMap<'v>;\n+\n+    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n+        hir::intravisit::NestedVisitorMap::None\n+    }\n+\n+    fn visit_lifetime(&mut self, lt: &'v hir::Lifetime) {\n+        if let hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Static =\n+            lt.name\n+        {\n+            self.0.push(lt.span);\n+        }\n+    }\n+}"}, {"sha": "0e33e95271e50576cce70bdb7cfd8892c5b13164", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -162,14 +162,16 @@ impl<T, const N: usize> AsMut<[T]> for [T; N] {\n }\n \n #[stable(feature = \"array_borrow\", since = \"1.4.0\")]\n-impl<T, const N: usize> Borrow<[T]> for [T; N] {\n+#[rustc_const_unstable(feature = \"const_borrow\", issue = \"91522\")]\n+impl<T, const N: usize> const Borrow<[T]> for [T; N] {\n     fn borrow(&self) -> &[T] {\n         self\n     }\n }\n \n #[stable(feature = \"array_borrow\", since = \"1.4.0\")]\n-impl<T, const N: usize> BorrowMut<[T]> for [T; N] {\n+#[rustc_const_unstable(feature = \"const_borrow\", issue = \"91522\")]\n+impl<T, const N: usize> const BorrowMut<[T]> for [T; N] {\n     fn borrow_mut(&mut self) -> &mut [T] {\n         self\n     }"}, {"sha": "58eabecf3f091c4e3c3ddff9ae444e32dbcb734b", "filename": "library/core/src/borrow.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fborrow.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -205,36 +205,41 @@ pub trait BorrowMut<Borrowed: ?Sized>: Borrow<Borrowed> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> Borrow<T> for T {\n+#[rustc_const_unstable(feature = \"const_borrow\", issue = \"91522\")]\n+impl<T: ?Sized> const Borrow<T> for T {\n     #[rustc_diagnostic_item = \"noop_method_borrow\"]\n     fn borrow(&self) -> &T {\n         self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> BorrowMut<T> for T {\n+#[rustc_const_unstable(feature = \"const_borrow\", issue = \"91522\")]\n+impl<T: ?Sized> const BorrowMut<T> for T {\n     fn borrow_mut(&mut self) -> &mut T {\n         self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> Borrow<T> for &T {\n+#[rustc_const_unstable(feature = \"const_borrow\", issue = \"91522\")]\n+impl<T: ?Sized> const Borrow<T> for &T {\n     fn borrow(&self) -> &T {\n         &**self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> Borrow<T> for &mut T {\n+#[rustc_const_unstable(feature = \"const_borrow\", issue = \"91522\")]\n+impl<T: ?Sized> const Borrow<T> for &mut T {\n     fn borrow(&self) -> &T {\n         &**self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> BorrowMut<T> for &mut T {\n+#[rustc_const_unstable(feature = \"const_borrow\", issue = \"91522\")]\n+impl<T: ?Sized> const BorrowMut<T> for &mut T {\n     fn borrow_mut(&mut self) -> &mut T {\n         &mut **self\n     }"}, {"sha": "a6ffbe07d91b0e6642b62fafce24a03f29efcc51", "filename": "library/core/src/future/join.rs", "status": "modified", "additions": 100, "deletions": 54, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_imports)] // items are used by the macro\n+#![allow(unused_imports, unused_macros)] // items are used by the macro\n \n use crate::cell::UnsafeCell;\n use crate::future::{poll_fn, Future};\n@@ -45,59 +45,104 @@ use crate::task::{Context, Poll};\n /// # };\n /// ```\n #[unstable(feature = \"future_join\", issue = \"91642\")]\n-pub macro join {\n-    ( $($fut:expr),* $(,)?) => {\n-        join! { @count: (), @futures: {}, @rest: ($($fut,)*) }\n-    },\n-    // Recurse until we have the position of each future in the tuple\n+pub macro join( $($fut:expr),+ $(,)? ) {\n+    // Funnel through an internal macro not to leak implementation details.\n+    join_internal! {\n+        current_position: []\n+        futures_and_positions: []\n+        munching: [ $($fut)+ ]\n+    }\n+}\n+\n+// FIXME(danielhenrymantilla): a private macro should need no stability guarantee.\n+#[unstable(feature = \"future_join\", issue = \"91642\")]\n+/// To be able to *name* the i-th future in the tuple (say we want the .4-th),\n+/// the following trick will be used: `let (_, _, _, _, it, ..) = tuple;`\n+/// In order to do that, we need to generate a `i`-long repetition of `_`,\n+/// for each i-th fut. Hence the recursive muncher approach.\n+macro join_internal {\n+    // Recursion step: map each future with its \"position\" (underscore count).\n     (\n-        // A token for each future that has been expanded: \"_ _ _\"\n-        @count: ($($count:tt)*),\n-        // Futures and their positions in the tuple: \"{ a => (_), b => (_ _)) }\"\n-        @futures: { $($fut:tt)* },\n-        // Take a future from @rest to expand\n-        @rest: ($current:expr, $($rest:tt)*)\n-    ) => {\n-        join! {\n-            @count: ($($count)* _),\n-            @futures: { $($fut)* $current => ($($count)*), },\n-            @rest: ($($rest)*)\n+        // Accumulate a token for each future that has been expanded: \"_ _ _\".\n+        current_position: [\n+            $($underscores:tt)*\n+        ]\n+        // Accumulate Futures and their positions in the tuple: `_0th ()   _1st ( _ ) \u2026`.\n+        futures_and_positions: [\n+            $($acc:tt)*\n+        ]\n+        // Munch one future.\n+        munching: [\n+            $current:tt\n+            $($rest:tt)*\n+        ]\n+    ) => (\n+        join_internal! {\n+            current_position: [\n+                $($underscores)*\n+                _\n+            ]\n+            futures_and_positions: [\n+                $($acc)*\n+                $current ( $($underscores)* )\n+            ]\n+            munching: [\n+                $($rest)*\n+            ]\n         }\n-    },\n-    // Now generate the output future\n-    (\n-        @count: ($($count:tt)*),\n-        @futures: {\n-            $( $(@$f:tt)? $fut:expr => ( $($pos:tt)* ), )*\n-        },\n-        @rest: ()\n-    ) => {\n-        async move {\n-            let mut futures = ( $( MaybeDone::Future($fut), )* );\n+    ),\n \n+    // End of recursion: generate the output future.\n+    (\n+        current_position: $_:tt\n+        futures_and_positions: [\n+            $(\n+                $fut_expr:tt ( $($pos:tt)* )\n+            )*\n+        ]\n+        // Nothing left to munch.\n+        munching: []\n+    ) => (\n+        match ( $( MaybeDone::Future($fut_expr), )* ) { futures => async {\n+            let mut futures = futures;\n+            // SAFETY: this is `pin_mut!`.\n+            let mut futures = unsafe { Pin::new_unchecked(&mut futures) };\n             poll_fn(move |cx| {\n                 let mut done = true;\n-\n+                // For each `fut`, pin-project to it, and poll it.\n                 $(\n-                    let ( $($pos,)* fut, .. ) = &mut futures;\n-\n-                    // SAFETY: The futures are never moved\n-                    done &= unsafe { Pin::new_unchecked(fut).poll(cx).is_ready() };\n+                    // SAFETY: pinning projection\n+                    let fut = unsafe {\n+                        futures.as_mut().map_unchecked_mut(|it| {\n+                            let ( $($pos,)* fut, .. ) = it;\n+                            fut\n+                        })\n+                    };\n+                    // Despite how tempting it may be to `let () = fut.poll(cx).ready()?;`\n+                    // doing so would defeat the point of `join!`: to start polling eagerly all\n+                    // of the futures, to allow parallelizing the waits.\n+                    done &= fut.poll(cx).is_ready();\n                 )*\n-\n-                if done {\n-                    // Extract all the outputs\n-                    Poll::Ready(($({\n-                        let ( $($pos,)* fut, .. ) = &mut futures;\n-\n-                        fut.take_output().unwrap()\n-                    }),*))\n-                } else {\n-                    Poll::Pending\n+                if !done {\n+                    return Poll::Pending;\n                 }\n+                // All ready; time to extract all the outputs.\n+\n+                // SAFETY: `.take_output()` does not break the `Pin` invariants for that `fut`.\n+                let futures = unsafe {\n+                    futures.as_mut().get_unchecked_mut()\n+                };\n+                Poll::Ready(\n+                    ($(\n+                        {\n+                            let ( $($pos,)* fut, .. ) = &mut *futures;\n+                            fut.take_output().unwrap()\n+                        }\n+                    ),*) // <- no trailing comma since we don't want 1-tuples.\n+                )\n             }).await\n-        }\n-    }\n+        }}\n+    ),\n }\n \n /// Future used by `join!` that stores it's output to\n@@ -109,14 +154,14 @@ pub macro join {\n pub enum MaybeDone<F: Future> {\n     Future(F),\n     Done(F::Output),\n-    Took,\n+    Taken,\n }\n \n #[unstable(feature = \"future_join\", issue = \"91642\")]\n impl<F: Future> MaybeDone<F> {\n     pub fn take_output(&mut self) -> Option<F::Output> {\n-        match &*self {\n-            MaybeDone::Done(_) => match mem::replace(self, Self::Took) {\n+        match *self {\n+            MaybeDone::Done(_) => match mem::replace(self, Self::Taken) {\n                 MaybeDone::Done(val) => Some(val),\n                 _ => unreachable!(),\n             },\n@@ -132,13 +177,14 @@ impl<F: Future> Future for MaybeDone<F> {\n     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n         // SAFETY: pinning in structural for `f`\n         unsafe {\n-            match self.as_mut().get_unchecked_mut() {\n-                MaybeDone::Future(f) => match Pin::new_unchecked(f).poll(cx) {\n-                    Poll::Ready(val) => self.set(Self::Done(val)),\n-                    Poll::Pending => return Poll::Pending,\n-                },\n+            // Do not mix match ergonomics with unsafe.\n+            match *self.as_mut().get_unchecked_mut() {\n+                MaybeDone::Future(ref mut f) => {\n+                    let val = Pin::new_unchecked(f).poll(cx).ready()?;\n+                    self.set(Self::Done(val));\n+                }\n                 MaybeDone::Done(_) => {}\n-                MaybeDone::Took => unreachable!(),\n+                MaybeDone::Taken => unreachable!(),\n             }\n         }\n "}, {"sha": "f49aefea81bacb3302d806830cb5888743e2c53d", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -137,6 +137,11 @@ pub fn spin_loop() {\n             unsafe { crate::arch::arm::__yield() };\n         }\n     }\n+\n+    #[cfg(any(target_arch = \"riscv32\", target_arch = \"riscv64\"))]\n+    {\n+        crate::arch::riscv::pause();\n+    }\n }\n \n /// An identity function that *__hints__* to the compiler to be maximally pessimistic about what"}, {"sha": "145c7ff5c323766d315e2ba5591a1eb26684888c", "filename": "library/core/src/option.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -1523,8 +1523,15 @@ impl<T: Clone> Option<&T> {\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn cloned(self) -> Option<T> {\n-        self.map(|t| t.clone())\n+    #[rustc_const_unstable(feature = \"const_option_cloned\", issue = \"91582\")]\n+    pub const fn cloned(self) -> Option<T>\n+    where\n+        T: ~const Clone,\n+    {\n+        match self {\n+            Some(t) => Some(t.clone()),\n+            None => None,\n+        }\n     }\n }\n \n@@ -1541,9 +1548,17 @@ impl<T: Clone> Option<&mut T> {\n     /// let cloned = opt_x.cloned();\n     /// assert_eq!(cloned, Some(12));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(since = \"1.26.0\", feature = \"option_ref_mut_cloned\")]\n-    pub fn cloned(self) -> Option<T> {\n-        self.map(|t| t.clone())\n+    #[rustc_const_unstable(feature = \"const_option_cloned\", issue = \"91582\")]\n+    pub const fn cloned(self) -> Option<T>\n+    where\n+        T: ~const Clone,\n+    {\n+        match self {\n+            Some(t) => Some(t.clone()),\n+            None => None,\n+        }\n     }\n }\n "}, {"sha": "e8b83b5cbc21ebc146a826ca137784aeb60dd6c1", "filename": "library/core/tests/future.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Ftests%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Ftests%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffuture.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -64,6 +64,40 @@ fn test_join() {\n     });\n }\n \n+/// Tests that `join!(\u2026)` behaves \"like a function\": evaluating its arguments\n+/// before applying any of its own logic.\n+///\n+/// _e.g._, `join!(async_fn(&borrowed), \u2026)` does not consume `borrowed`;\n+/// and `join!(opt_fut?, \u2026)` does let that `?` refer to the callsite scope.\n+mod test_join_function_like_value_arg_semantics {\n+    use super::*;\n+\n+    async fn async_fn(_: impl Sized) {}\n+\n+    // no need to _run_ this test, just to compile it.\n+    fn _join_does_not_unnecessarily_move_mentioned_bindings() {\n+        let not_copy = vec![()];\n+        let _ = join!(async_fn(&not_copy)); // should not move `not_copy`\n+        let _ = &not_copy; // OK\n+    }\n+\n+    #[test]\n+    fn join_lets_control_flow_effects_such_as_try_flow_through() {\n+        let maybe_fut = None;\n+        if false {\n+            *&mut { maybe_fut } = Some(async {});\n+            loop {}\n+        }\n+        assert!(Option::is_none(&try { join!(maybe_fut?, async { unreachable!() }) }));\n+    }\n+\n+    #[test]\n+    fn join_is_able_to_handle_temporaries() {\n+        let _ = join!(async_fn(&String::from(\"temporary\")));\n+        let () = block_on(join!(async_fn(&String::from(\"temporary\"))));\n+    }\n+}\n+\n fn block_on(fut: impl Future) {\n     struct Waker;\n     impl Wake for Waker {"}, {"sha": "012e6e5b57ad050986c1f8ee807d014eb8ca7da5", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -49,6 +49,7 @@\n #![feature(str_internals)]\n #![feature(test)]\n #![feature(trusted_len)]\n+#![feature(try_blocks)]\n #![feature(try_trait_v2)]\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]"}, {"sha": "b70ae88ef2a6c83acad0a1e83d5bd78f9655fd05", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -1 +1 @@\n-Subproject commit cfba59fccd90b3b52a614120834320f764ab08d1\n+Subproject commit b70ae88ef2a6c83acad0a1e83d5bd78f9655fd05"}, {"sha": "33f1e0f05b252810821306c839e3383e3ce9f54a", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n    |                  ------- this data with lifetime `'a`...\n LL |    bar(foo, x)\n-   |    ----^^^---- ...is captured and required to live as long as `'static` here\n+   |        ^^^  - ...is used and required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "609627aaa9ef0a9f47d9fee6b18f19f70f55cdad", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -5,7 +5,16 @@ LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |                   -------- this data with lifetime `'a`...\n ...\n LL |     bar(foo, x)\n-   |     ----^^^---- ...is captured and required to live as long as `'static` here\n+   |         ^^^  - ...is used and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/project-fn-ret-invariant.rs:45:37\n+   |\n+LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n+   |                                     ^^^^^^^ `'static` requirement introduced here\n+...\n+LL |     bar(foo, x)\n+   |     ----------- because of this returned expression\n \n error: aborting due to previous error\n "}, {"sha": "e23277543c66f3b14e5ba4cc5a40b7dd1826d28a", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -2,12 +2,15 @@ error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'\n   --> $DIR/issue-62097.rs:12:31\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n-   |                               ^^^^^\n-   |                               |\n-   |                               this data with an anonymous lifetime `'_`...\n-   |                               ...is captured here...\n+   |                               ^^^^^ this data with an anonymous lifetime `'_`...\n LL |         foo(|| self.bar()).await;\n-   |         --- ...and is required to live as long as `'static` here\n+   |         --- ...is used and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by this bound\n+  --> $DIR/issue-62097.rs:4:19\n+   |\n+LL |     F: FnOnce() + 'static\n+   |                   ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "068d8c64d6898009011d585628a2f88747575c88", "filename": "src/test/ui/async-await/issues/issue-72312.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -0,0 +1,21 @@\n+error[E0521]: borrowed data escapes outside of associated function\n+  --> $DIR/issue-72312.rs:13:24\n+   |\n+LL |       pub async fn start(&self) {\n+   |                          -----\n+   |                          |\n+   |                          `self` is a reference that is only valid in the associated function body\n+   |                          let's call the lifetime of this reference `'1`\n+...\n+LL |           require_static(async move {\n+   |  ________________________^\n+LL | |             &self;\n+LL | |         });\n+   | |         ^\n+   | |         |\n+   | |_________`self` escapes the associated function body here\n+   |           argument requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "eb7d12e290cb670c16425044529a86b0db939d62", "filename": "src/test/ui/async-await/issues/issue-72312.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -0,0 +1,19 @@\n+// edition:2018\n+fn require_static<T: 'static>(val: T) -> T {\n+    //~^ NOTE 'static` lifetime requirement introduced by this bound\n+    val\n+}\n+\n+struct Problem;\n+\n+impl Problem {\n+    pub async fn start(&self) { //~ ERROR E0759\n+        //~^ NOTE this data with an anonymous lifetime `'_`\n+        //~| NOTE in this expansion of desugaring of `async` block or function\n+        require_static(async move { //~ NOTE ...and is required to live as long as `'static` here\n+            &self; //~ NOTE ...is used here...\n+        });\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "798f755765cc144bac14a62a570d8ed63fa26869", "filename": "src/test/ui/async-await/issues/issue-72312.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -0,0 +1,23 @@\n+error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/issue-72312.rs:10:24\n+   |\n+LL |     pub async fn start(&self) {\n+   |                        ^^^^^ this data with an anonymous lifetime `'_`...\n+...\n+LL |             &self;\n+   |             ----- ...is used here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/issue-72312.rs:13:9\n+   |\n+LL |         require_static(async move {\n+   |         ^^^^^^^^^^^^^^\n+note: `'static` lifetime requirement introduced by this bound\n+  --> $DIR/issue-72312.rs:2:22\n+   |\n+LL | fn require_static<T: 'static>(val: T) -> T {\n+   |                      ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "d5996ba68be5353da48f60844b84ed0b1bbcef93", "filename": "src/test/ui/borrowck/suggest-local-var-double-mut.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-double-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-double-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-double-mut.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -0,0 +1,27 @@\n+// See issue #77834.\n+\n+#![crate_type = \"lib\"]\n+\n+mod method_syntax {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn foo(&mut self, _: f32) -> i32 { todo!() }\n+        fn bar(&mut self) -> f32 { todo!() }\n+        fn baz(&mut self) {\n+            self.foo(self.bar()); //~ ERROR\n+        }\n+    }\n+}\n+\n+mod fully_qualified_syntax {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn foo(&mut self, _: f32) -> i32 { todo!() }\n+        fn bar(&mut self) -> f32 { todo!() }\n+        fn baz(&mut self) {\n+            Self::foo(self, Self::bar(self)); //~ ERROR\n+        }\n+    }\n+}"}, {"sha": "3a43c18a7ed52669d748cc7c701e9993f65ad782", "filename": "src/test/ui/borrowck/suggest-local-var-double-mut.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-double-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-double-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-double-mut.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -0,0 +1,44 @@\n+error[E0499]: cannot borrow `*self` as mutable more than once at a time\n+  --> $DIR/suggest-local-var-double-mut.rs:12:22\n+   |\n+LL |             self.foo(self.bar());\n+   |             ---------^^^^^^^^^^-\n+   |             |    |   |\n+   |             |    |   second mutable borrow occurs here\n+   |             |    first borrow later used by call\n+   |             first mutable borrow occurs here\n+   |\n+help: try adding a local storing this argument...\n+  --> $DIR/suggest-local-var-double-mut.rs:12:22\n+   |\n+LL |             self.foo(self.bar());\n+   |                      ^^^^^^^^^^\n+help: ...and then using that local as the argument to this call\n+  --> $DIR/suggest-local-var-double-mut.rs:12:13\n+   |\n+LL |             self.foo(self.bar());\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0499]: cannot borrow `*self` as mutable more than once at a time\n+  --> $DIR/suggest-local-var-double-mut.rs:24:39\n+   |\n+LL |             Self::foo(self, Self::bar(self));\n+   |             --------- ----            ^^^^ second mutable borrow occurs here\n+   |             |         |\n+   |             |         first mutable borrow occurs here\n+   |             first borrow later used by call\n+   |\n+help: try adding a local storing this argument...\n+  --> $DIR/suggest-local-var-double-mut.rs:24:29\n+   |\n+LL |             Self::foo(self, Self::bar(self));\n+   |                             ^^^^^^^^^^^^^^^\n+help: ...and then using that local as the argument to this call\n+  --> $DIR/suggest-local-var-double-mut.rs:24:13\n+   |\n+LL |             Self::foo(self, Self::bar(self));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "2ba0b6b28aaaa55eb01b1e9b9e511a1451a4c0b4", "filename": "src/test/ui/borrowck/suggest-local-var-imm-and-mut.nll.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.nll.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -0,0 +1,33 @@\n+error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n+  --> $DIR/suggest-local-var-imm-and-mut.rs:12:22\n+   |\n+LL |             self.foo(self.bar());\n+   |             ---------^^^^^^^^^^-\n+   |             |    |   |\n+   |             |    |   mutable borrow occurs here\n+   |             |    immutable borrow later used by call\n+   |             immutable borrow occurs here\n+   |\n+help: try adding a local storing this argument...\n+  --> $DIR/suggest-local-var-imm-and-mut.rs:12:22\n+   |\n+LL |             self.foo(self.bar());\n+   |                      ^^^^^^^^^^\n+help: ...and then using that local as the argument to this call\n+  --> $DIR/suggest-local-var-imm-and-mut.rs:12:13\n+   |\n+LL |             self.foo(self.bar());\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n+  --> $DIR/suggest-local-var-imm-and-mut.rs:24:39\n+   |\n+LL |             Self::foo(self, Self::bar(self));\n+   |             --------- ----            ^^^^ mutable borrow occurs here\n+   |             |         |\n+   |             |         immutable borrow occurs here\n+   |             immutable borrow later used by call\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "bf167ba79f311e3c93f030ce06be1092a7f8e880", "filename": "src/test/ui/borrowck/suggest-local-var-imm-and-mut.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -0,0 +1,27 @@\n+// See issue #77834.\n+\n+#![crate_type = \"lib\"]\n+\n+mod method_syntax {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn foo(&self, _: f32) -> i32 { todo!() }\n+        fn bar(&mut self) -> f32 { todo!() }\n+        fn baz(&mut self) {\n+            self.foo(self.bar()); //~ ERROR\n+        }\n+    }\n+}\n+\n+mod fully_qualified_syntax {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn foo(&self, _: f32) -> i32 { todo!() }\n+        fn bar(&mut self) -> f32 { todo!() }\n+        fn baz(&mut self) {\n+            Self::foo(self, Self::bar(self)); //~ ERROR\n+        }\n+    }\n+}"}, {"sha": "eb934e7b72b084a6266998d1617113b2a1d586a8", "filename": "src/test/ui/borrowck/suggest-local-var-imm-and-mut.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -0,0 +1,22 @@\n+error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n+  --> $DIR/suggest-local-var-imm-and-mut.rs:12:22\n+   |\n+LL |             self.foo(self.bar());\n+   |             ---------^^^^^^^^^^-\n+   |             |    |   |\n+   |             |    |   mutable borrow occurs here\n+   |             |    immutable borrow later used by call\n+   |             immutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n+  --> $DIR/suggest-local-var-imm-and-mut.rs:24:29\n+   |\n+LL |             Self::foo(self, Self::bar(self));\n+   |             --------- ----  ^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |             |         |\n+   |             |         immutable borrow occurs here\n+   |             immutable borrow later used by call\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "85c7159952ffa59ea353345627765e3b0d1e497d", "filename": "src/test/ui/borrowck/two-phase-cannot-nest-mut-self-calls.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -13,6 +13,23 @@ LL | |\n LL | |         0\n LL | |     });\n    | |______- immutable borrow occurs here\n+   |\n+help: try adding a local storing this argument...\n+  --> $DIR/two-phase-cannot-nest-mut-self-calls.rs:16:9\n+   |\n+LL |         vec.push(2);\n+   |         ^^^^^^^^^^^\n+help: ...and then using that local as the argument to this call\n+  --> $DIR/two-phase-cannot-nest-mut-self-calls.rs:14:5\n+   |\n+LL | /     vec.get({\n+LL | |\n+LL | |         vec.push(2);\n+LL | |\n+LL | |\n+LL | |         0\n+LL | |     });\n+   | |______^\n \n error: aborting due to previous error\n "}, {"sha": "af1f908a80852062432b16bd8d1d019771caa410", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -8,13 +8,18 @@ LL |       bar(|| {\n LL | |\n LL | |         let _ = x;\n LL | |     })\n-   | |_____^ ...is captured here...\n+   | |_____^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n    |\n LL |     bar(|| {\n    |     ^^^\n+note: `'static` lifetime requirement introduced by this bound\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:1:39\n+   |\n+LL | fn bar<F>(blk: F) where F: FnOnce() + 'static {\n+   |                                       ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6fe6e26135b9202e9d17891b90143d89eca80892", "filename": "src/test/ui/codemap_tests/one_line.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -7,6 +7,17 @@ LL |     v.push(v.pop().unwrap());\n    |     | |    second mutable borrow occurs here\n    |     | first borrow later used by call\n    |     first mutable borrow occurs here\n+   |\n+help: try adding a local storing this argument...\n+  --> $DIR/one_line.rs:3:12\n+   |\n+LL |     v.push(v.pop().unwrap());\n+   |            ^^^^^^^\n+help: ...and then using that local as the argument to this call\n+  --> $DIR/one_line.rs:3:5\n+   |\n+LL |     v.push(v.pop().unwrap());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "30d67050b904cfd61ed49727b16fbcb530549dd3", "filename": "src/test/ui/generator/generator-region-requirements.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -5,7 +5,7 @@ LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              -------- this data with an anonymous lifetime `'_`...\n ...\n LL |         x\n-   |         ^ ...is captured here...\n+   |         ^ ...is used here...\n ...\n LL |             GeneratorState::Complete(c) => return c,\n    |                                                   - ...and is required to live as long as `'static` here"}, {"sha": "32c5ccf164874cb80e4004446318c6e7aa4932eb", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,23 +4,29 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n    |         ------------------------------- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     --^-- ...is captured and required to live as long as `'static` here\n+   |     - ^\n+   |     |\n+   |     ...is used and required to live as long as `'static` here\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/projection-type-lifetime-mismatch.rs:22:7\n    |\n LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n    |                                       -- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     --^-- ...is captured and required to live as long as `'static` here\n+   |     - ^\n+   |     |\n+   |     ...is used and required to live as long as `'static` here\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/projection-type-lifetime-mismatch.rs:27:7\n    |\n LL | fn h(x: &()) -> &'static () {\n    |         --- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     --^-- ...is captured and required to live as long as `'static` here\n+   |     - ^\n+   |     |\n+   |     ...is used and required to live as long as `'static` here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2307572cc3f24ca05e608c92f7e8581bc5e60851", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                                 ------------------- this data with lifetime `'a`...\n LL |     static_val(x);\n-   |                ^ ...is captured here...\n+   |                ^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/dyn-trait.rs:20:5"}, {"sha": "de5d3b612c9c2648fd48b71aab6ce7656a46e837", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -28,7 +28,7 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n-   |               ----                           ^ ...is captured here...\n+   |               ----                           ^ ...is used here...\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n@@ -50,7 +50,7 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:11:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n-   |                     -------                           ^ ...is captured here...\n+   |                     -------                           ^ ...is used here...\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n@@ -80,7 +80,7 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:24:65\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-   |               ---- this data with an anonymous lifetime `'_`... ^ ...is captured here, requiring it to live as long as `'static`\n+   |               ---- this data with an anonymous lifetime `'_`... ^ ...is used and required to live as long as `'static` here\n    |\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n@@ -95,7 +95,7 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:29:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |                      ------- this data with lifetime `'a`...        ^ ...is captured here...\n+   |                      ------- this data with lifetime `'a`...        ^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/must_outlive_least_region_or_bound.rs:29:34\n@@ -136,10 +136,17 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:16:50\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-   |               ----                               ^ ...is captured here, requiring it to live as long as `'static`\n+   |               ----                               ^ ...is used and required to live as long as `'static` here\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:16:28\n+   |\n+LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+   |                            ^^^^^^^^^    ----------- because of this returned expression\n+   |                            |\n+   |                            `'static` requirement introduced here\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n@@ -149,10 +156,17 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:18:59\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n-   |                     -------                               ^ ...is captured here, requiring it to live as long as `'static`\n+   |                     -------                               ^ ...is used and required to live as long as `'static` here\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:18:37\n+   |\n+LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n+   |                                     ^^^^^^^^^    ----------- because of this returned expression\n+   |                                     |\n+   |                                     `'static` requirement introduced here\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n@@ -162,10 +176,17 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:20:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |               ----                                         ^ ...is captured here, requiring it to live as long as `'static`\n+   |               ----                                         ^ ...is used and required to live as long as `'static` here\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:20:40\n+   |\n+LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |                                        ^^^^^^^    ----------- because of this returned expression\n+   |                                        |\n+   |                                        `'static` requirement introduced here\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n@@ -179,8 +200,15 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                     ------- this data with lifetime `'a`...         ^ ...is captured here, requiring it to live as long as `'static`\n+   |                     ------- this data with lifetime `'a`...         ^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:22:49\n+   |\n+LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |                                                 ^^^^^^^    ----------- because of this returned expression\n+   |                                                 |\n+   |                                                 `'static` requirement introduced here\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }"}, {"sha": "53405a660f861c47b824a886a1f2f01a6413fe4e", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `value` has an anonymous lifetime `'_` but it needs to satisfy a `\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n    |                       -- this data with an anonymous lifetime `'_`...\n LL |     Box::new(value) as Box<dyn Any>\n-   |              ^^^^^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^^^^^ ...is used and required to live as long as `'static` here\n    |\n help: to declare that the trait object captures data from argument `value`, you can add an explicit `'_` lifetime bound\n    |"}, {"sha": "ed9f1884c42fb5c3156eea8112ead35d921854a4", "filename": "src/test/ui/issues/issue-46983.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn foo(x: &u32) -> &'static u32 {\n    |           ---- this data with an anonymous lifetime `'_`...\n LL |     &*x\n-   |     ^^^ ...is captured and required to live as long as `'static` here\n+   |     ^^^ ...is used and required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "e06255e4ea3ff54bb5f97b0721d426eead8e6447", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'s\n LL | fn inner(mut foo: &[u8]) {\n    |                   ----- this data with an anonymous lifetime `'_`...\n LL |     let refcell = RefCell::new(&mut foo);\n-   |                                ^^^^^^^^ ...is captured here...\n+   |                                ^^^^^^^^ ...is used here...\n ...\n LL |     read_thing(read);\n    |                ---- ...and is required to live as long as `'static` here"}, {"sha": "4a6378b84f1e6f9b3dbb3c65412957eaab82eea9", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `fn` parameter has lifetime `'a` but it needs to satisfy a `'stati\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |               ------- this data with lifetime `'a`...\n LL |     <Foo<'a>>::C\n-   |     ^^^^^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |     ^^^^^^^^^^^^ ...is used and required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "1708700f77aaa21e005c4c19003156efb0eb655e", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -5,8 +5,16 @@ LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n    |             --------------- this data with an anonymous lifetime `'_`...\n ...\n LL |     ss.r\n-   |     ^^^^ ...is captured and required to live as long as `'static` here\n+   |     ^^^^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/object-lifetime-default-from-box-error.rs:14:37\n+   |\n+LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n+   |                                     ^^^^^^^^^^^^^ `'static` requirement introduced here\n+...\n+LL |     ss.r\n+   |     ---- because of this returned expression\n help: to declare that the trait object captures data from argument `ss`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait + '_> {"}, {"sha": "d8932c067acd863f39e49aedcba529c6ee444684", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with an anonymous lifetime `'_`...\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n-   |                                              ^ ...is captured here, requiring it to live as long as `'static`\n+   |                                              ^ ...is used and required to live as long as `'static` here\n    |\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n@@ -21,8 +21,15 @@ error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with an anonymous lifetime `'_`...\n LL |     Box::new(v)\n-   |              ^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/region-object-lifetime-in-coercion.rs:12:33\n+   |\n+LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n+   |                                 ^^^^^^^ `'static` requirement introduced here\n+LL |     Box::new(v)\n+   |     ----------- because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + '_> {\n@@ -39,8 +46,16 @@ LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n    |         ----- this data with an anonymous lifetime `'_`...\n ...\n LL |     Box::new(v)\n-   |              ^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^ ...is used and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/region-object-lifetime-in-coercion.rs:16:23\n    |\n+LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n+   |                       ^^^^^^^ `'static` requirement introduced here\n+...\n+LL |     Box::new(v)\n+   |     ----------- because of this returned expression\n help: to declare that the trait object captures data from argument `v`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {"}, {"sha": "3453c6458f1da4d4d3f85a188623da0b9e98e98a", "filename": "src/test/ui/regions/regions-addr-of-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'\n LL |     pub fn chase_cat(&mut self) {\n    |                      --------- this data with an anonymous lifetime `'_`...\n LL |         let p: &'static mut usize = &mut self.cats_chased;\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^ ...is used and required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "4153f4f29bc2836fcfbc817fb58d5770498d9128", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,8 +4,15 @@ error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |                         ------------------ this data with lifetime `'a`...\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |                ^^^ ...is captured here, requiring it to live as long as `'static`\n+   |                ^^^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/regions-close-object-into-object-2.rs:8:60\n+   |\n+LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n+   |                                                            ^^^^^^^ `'static` requirement introduced here\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ------------------------------ because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'a> {"}, {"sha": "2ea4b431b38dab0a6424d3bef5695cd30eadf2e6", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,8 +4,15 @@ error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |                   ---------------- this data with lifetime `'a`...\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |                ^^^ ...is captured here, requiring it to live as long as `'static`\n+   |                ^^^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/regions-close-object-into-object-4.rs:8:52\n+   |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |                                                    ^^^^^^^ `'static` requirement introduced here\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ------------------------------ because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'a> {"}, {"sha": "2ebe874da9350298c0d1cb942cda478afd3ad43d", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -5,8 +5,16 @@ LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n    |                   ------ this data with an anonymous lifetime `'_`...\n LL |     // This is illegal, because the region bound on `proc` is 'static.\n LL |     Box::new(move || { *x })\n-   |              ^^^^^^^^^^^^^^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^^^^^^^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/regions-proc-bound-capture.rs:7:59\n+   |\n+LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n+   |                                                           ^^^^^^^ `'static` requirement introduced here\n+LL |     // This is illegal, because the region bound on `proc` is 'static.\n+LL |     Box::new(move || { *x })\n+   |     ------------------------ because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + '_> {"}, {"sha": "b8e69e02609d69c502a17b5cf7a64b00b112bc23", "filename": "src/test/ui/regions/regions-static-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -17,7 +17,7 @@ error[E0759]: `u` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn error(u: &(), v: &()) {\n    |             --- this data with an anonymous lifetime `'_`...\n LL |     static_id(&u);\n-   |     ^^^^^^^^^ -- ...is captured here...\n+   |     ^^^^^^^^^ -- ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/regions-static-bound.rs:10:5\n@@ -32,7 +32,7 @@ LL | fn error(u: &(), v: &()) {\n    |                     --- this data with an anonymous lifetime `'_`...\n LL |     static_id(&u);\n LL |     static_id_indirect(&v);\n-   |     ^^^^^^^^^^^^^^^^^^ -- ...is captured here...\n+   |     ^^^^^^^^^^^^^^^^^^ -- ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/regions-static-bound.rs:11:5"}, {"sha": "63d291ed7cdb95e24fa76fbaa85475d746b29122", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -22,7 +22,7 @@ error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an impli\n LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32> + 'a>) -> &'a () {\n    |                        -------------------------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:60:30"}, {"sha": "55a1bbf18ab9fbfee2ad49631fbcf3dd7d0e07f7", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifeti\n LL |     fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> + 'a {\n    |                           ---------------------- this data with lifetime `'a`...\n LL |         val.use_self::<T>()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:14:32\n@@ -24,7 +24,7 @@ error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an impli\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here because of an implicit lifetime bound on the inherent `impl`\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here because of an implicit lifetime bound on the inherent `impl`\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:64:14\n@@ -44,7 +44,7 @@ error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifeti\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:85:26\n@@ -69,7 +69,7 @@ error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifeti\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         MyTrait::use_self(val)\n-   |                           ^^^ ...is captured here...\n+   |                           ^^^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:108:9\n@@ -95,7 +95,7 @@ error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an impli\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:31:26\n@@ -115,7 +115,7 @@ error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an impli\n LL |     fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n    |                        ----------------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:48:30"}, {"sha": "a5b50634c71ea28103dbce76f4adef2b038b4a7f", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -7,7 +7,7 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is captured here...\n+   |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:27:23\n@@ -32,7 +32,7 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is captured here...\n+   |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:38:23\n@@ -53,7 +53,7 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is captured here...\n+   |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:49:30\n@@ -74,7 +74,7 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is captured here...\n+   |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:60:30"}, {"sha": "95698fd1e1a801c63c8abf56fd732be0cacf4002", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -29,4 +29,22 @@ fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n     y.get_b() // ERROR\n }\n \n+fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+    <_ as Bar>::get_b(x) // ERROR\n+    //~^ ERROR `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+}\n+\n+fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+    <_ as Bar<'_, '_>>::get_b(x) // ERROR\n+    //~^ ERROR `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+}\n+\n+fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+    let y = x as &dyn Bar<'_, '_>;\n+    //~^ ERROR `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+    y.get_b(); // ERROR\n+    let z = y;\n+    z.get_b() // ERROR\n+}\n+\n fn main() {}"}, {"sha": "d4bb9350b0b4e6e064dc9acf222cbf7c36fadddb", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.stderr", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -36,12 +36,88 @@ LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n LL |     let y = x as &dyn Bar<'_, '_>;\n    |             -             ^^\n    |             |\n-   |             ...is captured here...\n+   |             ...is used here...\n LL |\n LL |     y.get_b() // ERROR\n-   |     --------- ...and is required to live as long as `'static` here\n+   |     - ...is used here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/type-checking-test-4.rs:29:5\n+   |\n+LL |     y.get_b() // ERROR\n+   |     ^^^^^^^^^\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:26:48\n+   |\n+LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n+...\n+LL |     y.get_b() // ERROR\n+   |     --------- because of this returned expression\n+\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/type-checking-test-4.rs:33:5\n+   |\n+LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                       ------------ this data with lifetime `'a`...\n+LL |     <_ as Bar>::get_b(x) // ERROR\n+   |     ^^^^^^^^^^^^^^^^^ ...is used and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:32:48\n+   |\n+LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n+LL |     <_ as Bar>::get_b(x) // ERROR\n+   |     -------------------- because of this returned expression\n+\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/type-checking-test-4.rs:38:15\n+   |\n+LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                       ------------ this data with lifetime `'a`...\n+LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n+   |     ----------^^------------- ...is used and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:37:48\n+   |\n+LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n+LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n+   |     ---------------------------- because of this returned expression\n+\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/type-checking-test-4.rs:43:27\n+   |\n+LL | fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                       ------------ this data with lifetime `'a`...\n+LL |     let y = x as &dyn Bar<'_, '_>;\n+   |             -             ^^\n+   |             |\n+   |             ...is used here...\n+LL |\n+LL |     y.get_b(); // ERROR\n+   |     - ...is used here...\n+LL |     let z = y;\n+LL |     z.get_b() // ERROR\n+   |     - ...is used here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/type-checking-test-4.rs:47:5\n+   |\n+LL |     z.get_b() // ERROR\n+   |     ^^^^^^^^^\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:42:48\n+   |\n+LL | fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n+...\n+LL |     z.get_b() // ERROR\n+   |     --------- because of this returned expression\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0308, E0759.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "f4285a0f98e7cae08b457a6c34e5f1cde009b3c9", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928783de663bd855a96f14b2d38c1061603587c6/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=928783de663bd855a96f14b2d38c1061603587c6", "patch": "@@ -5,8 +5,18 @@ LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                ---- this data with an anonymous lifetime `'_`...\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n-   |     ---------------^^^^--- ...is captured and required to live as long as `'static` here\n+   |              ----- ^^^^\n+   |              |\n+   |              ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/dyn-trait-underscore.rs:6:29\n+   |\n+LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^ `'static` requirement introduced here\n+LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n+LL |     Box::new(items.iter())\n+   |     ---------------------- because of this returned expression\n help: to declare that the trait object captures data from argument `items`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {"}]}