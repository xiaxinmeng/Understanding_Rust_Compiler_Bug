{"sha": "297546e62db0ec681482baf31d0bd6dd733fdd39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NzU0NmU2MmRiMGVjNjgxNDgyYmFmMzFkMGJkNmRkNzMzZmRkMzk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-04T17:13:55Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T07:26:13Z"}, "message": "rustc: add a 'tcx parameter to Print.", "tree": {"sha": "78c9b49bf6bcaee56bce26eb9322a7c0bbf4ec9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78c9b49bf6bcaee56bce26eb9322a7c0bbf4ec9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/297546e62db0ec681482baf31d0bd6dd733fdd39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/297546e62db0ec681482baf31d0bd6dd733fdd39", "html_url": "https://github.com/rust-lang/rust/commit/297546e62db0ec681482baf31d0bd6dd733fdd39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/297546e62db0ec681482baf31d0bd6dd733fdd39/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "382d24e7d73e36fa150866051e700a2307916f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/382d24e7d73e36fa150866051e700a2307916f77", "html_url": "https://github.com/rust-lang/rust/commit/382d24e7d73e36fa150866051e700a2307916f77"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "569d9d7a3ac841c371d138e579b4b5e2c1292438", "filename": "src/librustc/ty/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297546e62db0ec681482baf31d0bd6dd733fdd39/src%2Flibrustc%2Fty%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297546e62db0ec681482baf31d0bd6dd733fdd39/src%2Flibrustc%2Fty%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint.rs?ref=297546e62db0ec681482baf31d0bd6dd733fdd39", "patch": "@@ -57,7 +57,7 @@ impl PrintContext {\n     }\n }\n \n-pub trait Print {\n+pub trait Print<'tcx> {\n     fn print<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result;\n     fn print_to_string(&self, cx: &mut PrintContext) -> String {\n         let mut result = String::new();"}, {"sha": "9fc4b17995417f841002f7118cf7f24268619a8d", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/297546e62db0ec681482baf31d0bd6dd733fdd39/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297546e62db0ec681482baf31d0bd6dd733fdd39/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=297546e62db0ec681482baf31d0bd6dd733fdd39", "patch": "@@ -212,15 +212,15 @@ macro_rules! gen_display_debug {\n }\n macro_rules! gen_print_impl {\n     ( ($($x:tt)+) $target:ty, ($self:ident, $f:ident, $cx:ident) $disp:block $dbg:block ) => {\n-        impl<$($x)+> Print for $target {\n+        impl<$($x)+> Print<'tcx> for $target {\n             fn print<F: fmt::Write>(&$self, $f: &mut F, $cx: &mut PrintContext) -> fmt::Result {\n                 if $cx.is_debug $dbg\n                 else $disp\n             }\n         }\n     };\n     ( () $target:ty, ($self:ident, $f:ident, $cx:ident) $disp:block $dbg:block ) => {\n-        impl Print for $target {\n+        impl Print<'tcx> for $target {\n             fn print<F: fmt::Write>(&$self, $f: &mut F, $cx: &mut PrintContext) -> fmt::Result {\n                 if $cx.is_debug $dbg\n                 else $disp\n@@ -527,12 +527,15 @@ impl PrintContext {\n         Ok(())\n     }\n \n-    fn in_binder<'a, 'gcx, 'tcx, T, U, F>(&mut self,\n-                                          f: &mut F,\n-                                          tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                          original: &ty::Binder<T>,\n-                                          lifted: Option<ty::Binder<U>>) -> fmt::Result\n-        where T: Print, U: Print + TypeFoldable<'tcx>, F: fmt::Write\n+    // FIXME(eddyb) replace `'almost_tcx` with `'tcx` when possible/needed.\n+    fn in_binder<'a, 'gcx, 'tcx, 'almost_tcx, T, U, F>(\n+        &mut self,\n+        f: &mut F,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        original: &ty::Binder<T>,\n+        lifted: Option<ty::Binder<U>>,\n+    ) -> fmt::Result\n+        where T: Print<'almost_tcx>, U: Print<'tcx> + TypeFoldable<'tcx>, F: fmt::Write\n     {\n         fn name_by_region_index(index: usize) -> InternedString {\n             match index {\n@@ -627,7 +630,7 @@ pub fn parameterized<F: fmt::Write>(f: &mut F,\n     PrintContext::new().parameterized(f, substs, did, projections)\n }\n \n-impl<'a, T: Print> Print for &'a T {\n+impl<'a, 'tcx, T: Print<'tcx>> Print<'tcx> for &'a T {\n     fn print<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result {\n         (*self).print(f, cx)\n     }\n@@ -1466,7 +1469,7 @@ define_print! {\n }\n \n define_print! {\n-    ('tcx, T: Print + fmt::Debug, U: Print + fmt::Debug) ty::OutlivesPredicate<T, U>,\n+    ('tcx, T: Print<'tcx> + fmt::Debug, U: Print<'tcx> + fmt::Debug) ty::OutlivesPredicate<T, U>,\n     (self, f, cx) {\n         display {\n             print!(f, cx, print(self.0), write(\" : \"), print(self.1))"}]}