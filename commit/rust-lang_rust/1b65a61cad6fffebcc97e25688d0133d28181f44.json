{"sha": "1b65a61cad6fffebcc97e25688d0133d28181f44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNjVhNjFjYWQ2ZmZmZWJjYzk3ZTI1Njg4ZDAxMzNkMjgxODFmNDQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-31T22:57:36Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-31T22:57:36Z"}, "message": "Couple minor bug fixes in creader, lib-bitv, int, rand, sort, sha1, uint and vec all work.", "tree": {"sha": "c0de9d266d98ffd60455a0d5b6ff3313e54b5361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0de9d266d98ffd60455a0d5b6ff3313e54b5361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b65a61cad6fffebcc97e25688d0133d28181f44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b65a61cad6fffebcc97e25688d0133d28181f44", "html_url": "https://github.com/rust-lang/rust/commit/1b65a61cad6fffebcc97e25688d0133d28181f44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b65a61cad6fffebcc97e25688d0133d28181f44/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d857c0c843e9aec5fe3d0404aca643aa5b60ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d857c0c843e9aec5fe3d0404aca643aa5b60ef3", "html_url": "https://github.com/rust-lang/rust/commit/6d857c0c843e9aec5fe3d0404aca643aa5b60ef3"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "5e790ed03b373ade8e7c1413502b2a8db60d2730", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b65a61cad6fffebcc97e25688d0133d28181f44/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b65a61cad6fffebcc97e25688d0133d28181f44/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=1b65a61cad6fffebcc97e25688d0133d28181f44", "patch": "@@ -65,6 +65,11 @@ impure fn parse_ty_str(str rep, str_def sd) -> @ty.t {\n     auto len = _str.byte_len(rep);\n     auto st = @rec(rep=rep, mutable pos=0u, len=len);\n     auto result = parse_ty(st, sd);\n+    if (st.pos != len) {\n+        log \"parse_ty_str: incomplete parse, stopped at byte \"\n+            + _uint.to_str(st.pos, 10u) + \" of \"\n+            + _uint.to_str(len, 10u) + \" in str '\" + rep + \"'\";\n+    }\n     check(st.pos == len);\n     ret result;\n }\n@@ -191,6 +196,7 @@ impure fn parse_sty(@pstate st, str_def sd) -> ty.sty {\n                                    inputs=func._0,\n                                    output=func._1));\n             }\n+            st.pos += 1u;\n             ret ty.ty_obj(methods);\n         }\n         case ('X') {ret ty.ty_var(parse_int(st));}\n@@ -544,6 +550,7 @@ fn kind_has_type_params(u8 kind_ch) -> bool {\n     // FIXME: It'd be great if we had u8 char literals.\n     if (kind_ch == ('c' as u8))      { ret false; }\n     else if (kind_ch == ('f' as u8)) { ret true;  }\n+    else if (kind_ch == ('F' as u8)) { ret true;  }\n     else if (kind_ch == ('y' as u8)) { ret true;  }\n     else if (kind_ch == ('o' as u8)) { ret true;  }\n     else if (kind_ch == ('t' as u8)) { ret true;  }\n@@ -581,6 +588,7 @@ fn lookup_def(session.session sess, int cnum, vec[ast.ident] path)\n     auto def;\n     if (kind_ch == ('c' as u8))         { def = ast.def_const(did);      }\n     else if (kind_ch == ('f' as u8))    { def = ast.def_fn(did);         }\n+    else if (kind_ch == ('F' as u8))    { def = ast.def_native_fn(did);  }\n     else if (kind_ch == ('y' as u8))    { def = ast.def_ty(did);         }\n     else if (kind_ch == ('o' as u8))    { def = ast.def_obj(did);        }\n     else if (kind_ch == ('t' as u8)) {"}]}