{"sha": "d8160799b5c464ccdb99e4bab7196440106c1972", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MTYwNzk5YjVjNDY0Y2NkYjk5ZTRiYWI3MTk2NDQwMTA2YzE5NzI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-12-30T05:18:24Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:37Z"}, "message": "Adjust overlap-related tests to account for cosmetic changes to error reporting behavior", "tree": {"sha": "6e191897c0abac043b18ece9c1b773d9d7878862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e191897c0abac043b18ece9c1b773d9d7878862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8160799b5c464ccdb99e4bab7196440106c1972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8160799b5c464ccdb99e4bab7196440106c1972", "html_url": "https://github.com/rust-lang/rust/commit/d8160799b5c464ccdb99e4bab7196440106c1972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8160799b5c464ccdb99e4bab7196440106c1972/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3825827b7a91a3768959def9ce80a442ed6c76a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3825827b7a91a3768959def9ce80a442ed6c76a", "html_url": "https://github.com/rust-lang/rust/commit/a3825827b7a91a3768959def9ce80a442ed6c76a"}], "stats": {"total": 78, "additions": 38, "deletions": 40}, "files": [{"sha": "786a25500a886284c4b1bcd9fa4a9ca7f9fcb361", "filename": "src/test/compile-fail/associated-types-coherence-failure.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -22,21 +22,21 @@ pub trait IntoCow<'a, B: ?Sized> {\n     fn into_cow(self) -> Cow<'a, B>;\n }\n \n-impl<'a, B: ?Sized> IntoCow<'a, B> for Cow<'a, B> where B: ToOwned {\n-//~^ ERROR E0119\n+impl<'a, B: ?Sized> IntoCow<'a, B> for <B as ToOwned>::Owned where B: ToOwned {\n     fn into_cow(self) -> Cow<'a, B> {\n-        self\n+        Cow(PhantomData)\n     }\n }\n \n-impl<'a, B: ?Sized> IntoCow<'a, B> for <B as ToOwned>::Owned where B: ToOwned {\n+impl<'a, B: ?Sized> IntoCow<'a, B> for Cow<'a, B> where B: ToOwned {\n //~^ ERROR E0119\n     fn into_cow(self) -> Cow<'a, B> {\n-        Cow(PhantomData)\n+        self\n     }\n }\n \n impl<'a, B: ?Sized> IntoCow<'a, B> for &'a B where B: ToOwned {\n+//~^ ERROR E0119\n     fn into_cow(self) -> Cow<'a, B> {\n         Cow(PhantomData)\n     }"}, {"sha": "434d77828b44ae203c3632f44b7a384c8d22b9a1", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -27,11 +27,11 @@ impl Even for isize { }\n \n impl Odd for usize { }\n \n-impl<T:Even> MyTrait for T { //~ ERROR E0119\n+impl<T:Even> MyTrait for T {\n     fn get(&self) -> usize { 0 }\n }\n \n-impl<T:Odd> MyTrait for T {\n+impl<T:Odd> MyTrait for T { //~ ERROR E0119\n     fn get(&self) -> usize { 0 }\n }\n "}, {"sha": "7ad5cd71ca8c2a0e343db9a8bed5998ee7ba60d1", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -23,11 +23,11 @@ trait Even {}\n \n trait Odd {}\n \n-impl<T:Even> MyTrait for T { //~ ERROR E0119\n+impl<T:Even> MyTrait for T {\n     fn get(&self) -> usize { 0 }\n }\n \n-impl<T:Odd> MyTrait for T {\n+impl<T:Odd> MyTrait for T { //~ ERROR E0119\n     fn get(&self) -> usize { 0 }\n }\n "}, {"sha": "1defe6c8b20e3e16a53ca178db9e42e59a39729c", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific-multidispatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -18,7 +18,7 @@ trait MyTrait<T> {\n     fn get(&self) -> T;\n }\n \n-impl<T> MyTrait<T> for T { //~ ERROR E0119\n+impl<T> MyTrait<T> for T {\n     fn get(&self) -> T {\n         panic!()\n     }\n@@ -29,7 +29,7 @@ struct MyType {\n     dummy: usize\n }\n \n-impl MyTrait<MyType> for MyType {\n+impl MyTrait<MyType> for MyType { //~ ERROR E0119\n     fn get(&self) -> usize { (*self).clone() }\n }\n "}, {"sha": "5c5c4d32d675cd7ac1a4c37a180198ffa0771676", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-trait.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -19,15 +19,15 @@ trait MyTrait {\n     fn get(&self) -> usize;\n }\n \n-impl<T:OtherTrait> MyTrait for T { //~ ERROR E0119\n+impl<T:OtherTrait> MyTrait for T {\n     fn get(&self) -> usize { 0 }\n }\n \n struct MyType {\n     dummy: usize\n }\n \n-impl MyTrait for MyType {\n+impl MyTrait for MyType { //~ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "57d71b44b0f6b29aa5452a08183ed5bddecad80d", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -18,15 +18,15 @@ trait MyTrait {\n     fn get(&self) -> usize;\n }\n \n-impl<T> MyTrait for T { //~ ERROR E0119\n+impl<T> MyTrait for T {\n     fn get(&self) -> usize { 0 }\n }\n \n struct MyType {\n     dummy: usize\n }\n \n-impl MyTrait for MyType {\n+impl MyTrait for MyType { //~ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "c123e381ab7d733fd02efc7a9d5d3feff217e6c3", "filename": "src/test/compile-fail/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -15,8 +15,6 @@ trait MyTrait {}\n struct TestType<T>(::std::marker::PhantomData<T>);\n \n unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n-//~^ ERROR conflicting implementations of trait `core::marker::Send`\n-//~^^ ERROR conflicting implementations of trait `core::marker::Send`\n \n impl<T: MyTrait> !Send for TestType<T> {}\n //~^ ERROR conflicting implementations of trait `core::marker::Send`"}, {"sha": "928ba7a36db266ddb3534eba302fbff8125d4013", "filename": "src/test/compile-fail/coherence-overlap-all-t-and-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-all-t-and-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-all-t-and-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-all-t-and-tuple.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -19,10 +19,10 @@\n trait From<U> {\n }\n \n-impl <T> From<T> for T { //~ ERROR E0119\n+impl <T> From<T> for T {\n }\n \n-impl <T11, U11> From<(U11,)> for (T11,) {\n+impl <T11, U11> From<(U11,)> for (T11,) { //~ ERROR E0119\n }\n \n fn main() { }"}, {"sha": "51d7c3e8b4cb17962f0809276d5abf49b84a85af", "filename": "src/test/compile-fail/coherence-overlap-issue-23516.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-issue-23516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-issue-23516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-issue-23516.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -14,6 +14,6 @@\n \n pub trait Sugar { fn dummy(&self) { } }\n pub trait Sweet { fn dummy(&self) { } }\n-impl<T:Sugar> Sweet for T { } //~ ERROR E0119\n-impl<U:Sugar> Sweet for Box<U> { }\n+impl<T:Sugar> Sweet for T { }\n+impl<U:Sugar> Sweet for Box<U> { } //~ ERROR E0119\n fn main() { }"}, {"sha": "0ae8135221c21fc9a54f3094a711234c17ce9bff", "filename": "src/test/compile-fail/coherence-overlap-messages.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -10,23 +10,23 @@\n \n trait Foo {}\n \n-impl<T> Foo for T {} //~ ERROR conflicting implementations of trait `Foo`:\n-impl<U> Foo for U {}\n+impl<T> Foo for T {}\n+impl<U> Foo for U {} //~ ERROR conflicting implementations of trait `Foo`:\n \n trait Bar {}\n \n-impl<T> Bar for (T, u8) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n-impl<T> Bar for (u8, T) {}\n+impl<T> Bar for (T, u8) {}\n+impl<T> Bar for (u8, T) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n \n trait Baz<T> {}\n \n-impl<T> Baz<u8> for T {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n-impl<T> Baz<T> for u8 {}\n+impl<T> Baz<u8> for T {}\n+impl<T> Baz<T> for u8 {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n \n trait Quux<U, V> {}\n \n-impl<T, U, V> Quux<U, V> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n-impl<T, U> Quux<U, U> for T {}\n-impl<T, V> Quux<T, V> for T {}\n+impl<T, U, V> Quux<U, V> for T {}\n+impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+impl<T, V> Quux<T, V> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n \n fn main() {}"}, {"sha": "7807f93df1a673d8810010f82c027e0d014dd49a", "filename": "src/test/compile-fail/coherence-tuple-conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -18,11 +18,11 @@ trait MyTrait {\n     fn get(&self) -> usize;\n }\n \n-impl<T> MyTrait for (T,T) { //~ ERROR E0119\n+impl<T> MyTrait for (T,T) {\n     fn get(&self) -> usize { 0 }\n }\n \n-impl<A,B> MyTrait for (A,B) {\n+impl<A,B> MyTrait for (A,B) { //~ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "8e3e3f31cb5f1434356b5b9aa5bfd199a475cf8f", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -21,10 +21,10 @@ struct MyType { x: i32 }\n \n trait MyTrait { }\n \n-impl<T: lib::MyCopy> MyTrait for T { } //~ ERROR E0119\n+impl<T: lib::MyCopy> MyTrait for T { }\n \n // Tuples are not fundamental.\n-impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n+impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { } //~ ERROR E0119\n \n #[rustc_error]\n fn main() { }"}, {"sha": "35bc17b8e887036a93bb4e1675aca4786795e1d8", "filename": "src/test/compile-fail/coherence_copy_like_err_struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -18,14 +18,14 @@ extern crate coherence_copy_like_lib as lib;\n struct MyType { x: i32 }\n \n trait MyTrait { }\n-impl<T: lib::MyCopy> MyTrait for T { } //~ ERROR E0119\n+impl<T: lib::MyCopy> MyTrait for T { }\n \n // `MyStruct` is not declared fundamental, therefore this would\n // require that\n //\n //     MyStruct<MyType>: !MyTrait\n //\n // which we cannot approve.\n-impl MyTrait for lib::MyStruct<MyType> { }\n+impl MyTrait for lib::MyStruct<MyType> { } //~ ERROR E0119\n \n fn main() { }"}, {"sha": "a70cc92955fb0d6a76e0a5672e0d4764a976d470", "filename": "src/test/compile-fail/coherence_copy_like_err_tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -18,13 +18,13 @@ extern crate coherence_copy_like_lib as lib;\n struct MyType { x: i32 }\n \n trait MyTrait { }\n-impl<T: lib::MyCopy> MyTrait for T { } //~ ERROR E0119\n+impl<T: lib::MyCopy> MyTrait for T { }\n \n // Tuples are not fundamental, therefore this would require that\n //\n //     (MyType,): !MyTrait\n //\n // which we cannot approve.\n-impl MyTrait for (MyType,) { }\n+impl MyTrait for (MyType,) { } //~ ERROR E0119\n \n fn main() { }"}, {"sha": "7c051784f61a7dbbf253550c40cb03dffad0dcee", "filename": "src/test/compile-fail/issue-28568.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fissue-28568.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8160799b5c464ccdb99e4bab7196440106c1972/src%2Ftest%2Fcompile-fail%2Fissue-28568.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28568.rs?ref=d8160799b5c464ccdb99e4bab7196440106c1972", "patch": "@@ -11,12 +11,12 @@\n struct MyStruct;\n \n impl Drop for MyStruct {\n-//~^ ERROR conflicting implementations of trait\n+//~^ NOTE conflicting implementation is here\n     fn drop(&mut self) { }\n }\n \n impl Drop for MyStruct {\n-//~^ NOTE conflicting implementation is here\n+//~^ ERROR conflicting implementations of trait\n     fn drop(&mut self) { }\n }\n "}]}