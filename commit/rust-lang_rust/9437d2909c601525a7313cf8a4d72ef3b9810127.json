{"sha": "9437d2909c601525a7313cf8a4d72ef3b9810127", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MzdkMjkwOWM2MDE1MjVhNzMxM2NmOGE0ZDcyZWYzYjk4MTAxMjc=", "commit": {"author": {"name": "Michael Recachinas", "email": "mgr3yp@virginia.edu", "date": "2017-09-24T09:30:29Z"}, "committer": {"name": "Michael Recachinas", "email": "mgr3yp@virginia.edu", "date": "2017-09-24T09:30:29Z"}, "message": "Change to returning Option<(bool, Option<String>)>", "tree": {"sha": "77a3ecb5d54f38755a542fab264385a5c2fb8396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77a3ecb5d54f38755a542fab264385a5c2fb8396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9437d2909c601525a7313cf8a4d72ef3b9810127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9437d2909c601525a7313cf8a4d72ef3b9810127", "html_url": "https://github.com/rust-lang/rust/commit/9437d2909c601525a7313cf8a4d72ef3b9810127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9437d2909c601525a7313cf8a4d72ef3b9810127/comments", "author": null, "committer": null, "parents": [{"sha": "fff35736e4d91f62e0ee3a6d4350c76ab578c38f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff35736e4d91f62e0ee3a6d4350c76ab578c38f", "html_url": "https://github.com/rust-lang/rust/commit/fff35736e4d91f62e0ee3a6d4350c76ab578c38f"}], "stats": {"total": 75, "additions": 26, "deletions": 49}, "files": [{"sha": "54142b924ae0a658331aba111d5c7d31bc5e5d96", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 26, "deletions": 49, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9437d2909c601525a7313cf8a4d72ef3b9810127/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9437d2909c601525a7313cf8a4d72ef3b9810127/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=9437d2909c601525a7313cf8a4d72ef3b9810127", "patch": "@@ -59,87 +59,63 @@ impl IntPlusOne {\n         false\n     }\n \n-    fn check_binop(&self, cx: &EarlyContext, block: &Expr, binop: BinOpKind, lhs: &Expr, rhs: &Expr) {\n+    fn check_binop(&self, cx: &EarlyContext, binop: BinOpKind, lhs: &Expr, rhs: &Expr) -> Option<(bool, Option<String>)> {\n         match (binop, &lhs.node, &rhs.node) {\n             // case where `x - 1 >= ...` or `-1 + x >= ...`\n             (BinOpKind::Ge, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _) => {\n                 match (lhskind.node, &lhslhs.node, &lhsrhs.node) {\n                     // `-1 + x`\n                     (BinOpKind::Add, &ExprKind::Lit(ref lit), _) => {\n-                        let recommendation = self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS);\n-                        if self.check_lit(lit, -1) {\n-                            self.emit_warning(cx, block, recommendation)\n-                        }\n+                        Some((self.check_lit(lit, -1), self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS)))\n                     },\n                     // `x - 1`\n                     (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) => {\n-                        let recommendation = self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS);\n-                        if self.check_lit(lit, 1) {\n-                            self.emit_warning(cx, block, recommendation)\n-                        }\n+                        Some((self.check_lit(lit, 1), self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS)))\n                     }\n-                    _ => ()\n+                    _ => None\n                 }\n             },\n             // case where `... >= y + 1` or `... >= 1 + y`\n             (BinOpKind::Ge, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) if rhskind.node == BinOpKind::Add => {\n                 match (&rhslhs.node, &rhsrhs.node) {\n                     // `y + 1` and `1 + y`\n                     (&ExprKind::Lit(ref lit), _) => {\n-                        let recommendation = self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS);\n-                        if self.check_lit(lit, 1) {\n-                            self.emit_warning(cx, block, recommendation)\n-                        }\n+                        Some((self.check_lit(lit, 1), self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS)))\n                     },\n                     (_, &ExprKind::Lit(ref lit)) => {\n-                        let recommendation = self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS);\n-                        if self.check_lit(lit, 1) {\n-                            self.emit_warning(cx, block, recommendation)\n-                        }\n+                        Some((self.check_lit(lit, 1), self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS)))\n                     },\n-                    _ => ()\n+                    _ => None\n                 }\n             },\n             // case where `x + 1 <= ...` or `1 + x <= ...`\n             (BinOpKind::Le, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _) if lhskind.node == BinOpKind::Add => {\n                 match (&lhslhs.node, &lhsrhs.node) {\n                     // `1 + x` and `x + 1`\n                     (&ExprKind::Lit(ref lit), _) => {\n-                        let recommendation = self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS);\n-                        if self.check_lit(lit, 1) {\n-                            self.emit_warning(cx, block, recommendation)\n-                        }\n+                        Some((self.check_lit(lit, 1), self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS)))\n                     },\n                     (_, &ExprKind::Lit(ref lit)) => {\n-                        let recommendation = self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS);\n-                        if self.check_lit(lit, 1) {\n-                            self.emit_warning(cx, block, recommendation)\n-                        }\n+                        Some((self.check_lit(lit, 1), self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS)))\n                     },\n-                    _ => ()\n+                    _ => None\n                 }\n             },\n             // case where `... >= y - 1` or `... >= -1 + y`\n             (BinOpKind::Le, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) => {\n                 match (rhskind.node, &rhslhs.node, &rhsrhs.node) {\n                     // `-1 + y`\n                     (BinOpKind::Add, &ExprKind::Lit(ref lit), _) => {\n-                        let recommendation = self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS);\n-                        if self.check_lit(lit, -1) {\n-                            self.emit_warning(cx, block, recommendation)\n-                        }\n+                        Some((self.check_lit(lit, -1), self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS)))\n                     },\n                     // `y - 1`\n                     (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) => {\n-                        let recommendation = self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS);\n-                        if self.check_lit(lit, 1) {\n-                            self.emit_warning(cx, block, recommendation)\n-                        }\n+                        Some((self.check_lit(lit, 1), self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS)))\n                     },\n-                    _ => ()\n+                    _ => None\n                 }\n             },\n-            _ => ()\n+            _ => None\n         }\n     }\n \n@@ -161,23 +137,24 @@ impl IntPlusOne {\n         None\n     }\n \n-    fn emit_warning(&self, cx: &EarlyContext, block: &Expr, recommendation: Option<String>) {\n-        if let Some(rec) = recommendation {\n-            span_lint_and_then(cx,\n-                               INT_PLUS_ONE,\n-                               block.span,\n-                               \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n-                               |db| {\n-                db.span_suggestion(block.span, \"change `>= y + 1` to `> y` as shown\", rec);\n-            });\n-        }\n+    fn emit_warning(&self, cx: &EarlyContext, block: &Expr, recommendation: String) {\n+        span_lint_and_then(cx,\n+                           INT_PLUS_ONE,\n+                           block.span,\n+                           \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n+                           |db| {\n+            db.span_suggestion(block.span, \"change `>= y + 1` to `> y` as shown\", recommendation);\n+        });\n     }\n }\n \n impl EarlyLintPass for IntPlusOne {\n     fn check_expr(&mut self, cx: &EarlyContext, item: &Expr) {\n         if let ExprKind::Binary(ref kind, ref lhs, ref rhs) = item.node {\n-            self.check_binop(cx, item, kind.node, lhs, rhs);\n+            match self.check_binop(cx, kind.node, lhs, rhs) {\n+                Some((should_emit, Some(ref rec))) if should_emit => self.emit_warning(cx, item, rec.clone()),\n+                _ => ()\n+            }\n         }\n     }\n }"}]}