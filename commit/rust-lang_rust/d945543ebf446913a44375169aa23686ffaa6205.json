{"sha": "d945543ebf446913a44375169aa23686ffaa6205", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NDU1NDNlYmY0NDY5MTNhNDQzNzUxNjlhYTIzNjg2ZmZhYTYyMDU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-07T18:43:02Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-07T18:43:02Z"}, "message": "Merge branch 'each-fn-kill' of https://github.com/huonw/rust into each-fn-kill", "tree": {"sha": "5ffb15c6376e9a94ffa98fa81ffb8382b79b57e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ffb15c6376e9a94ffa98fa81ffb8382b79b57e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d945543ebf446913a44375169aa23686ffaa6205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d945543ebf446913a44375169aa23686ffaa6205", "html_url": "https://github.com/rust-lang/rust/commit/d945543ebf446913a44375169aa23686ffaa6205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d945543ebf446913a44375169aa23686ffaa6205/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18019a1304c5cf6ec6f04e43b030602c8fec0e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/18019a1304c5cf6ec6f04e43b030602c8fec0e01", "html_url": "https://github.com/rust-lang/rust/commit/18019a1304c5cf6ec6f04e43b030602c8fec0e01"}, {"sha": "54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "html_url": "https://github.com/rust-lang/rust/commit/54d914a9a932a0e9e65195f0f5be91e5e8b7f342"}], "stats": {"total": 261, "additions": 77, "deletions": 184}, "files": [{"sha": "a845d326142867b8f5974bdad0009a73a447215d", "filename": "src/libextra/sha1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibextra%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibextra%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsha1.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -24,6 +24,7 @@\n \n use core::prelude::*;\n \n+use core::iterator::IteratorUtil;\n use core::str;\n use core::uint;\n use core::vec;\n@@ -173,7 +174,7 @@ pub fn sha1() -> @Sha1 {\n     fn mk_result(st: &mut Sha1State) -> ~[u8] {\n         if !(*st).computed { pad_msg(st); (*st).computed = true; }\n         let mut rs: ~[u8] = ~[];\n-        for vec::each_mut((*st).h) |ptr_hpart| {\n+        for st.h.mut_iter().advance |ptr_hpart| {\n             let hpart = *ptr_hpart;\n             let a = (hpart >> 24u32 & 0xFFu32) as u8;\n             let b = (hpart >> 16u32 & 0xFFu32) as u8;"}, {"sha": "1f9fff14ba209cd8fc0125c6f7b0499e191cc051", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -18,6 +18,7 @@\n \n use core::prelude::*;\n \n+use core::iterator::IteratorUtil;\n use core::cast;\n use core::io;\n use core::str;\n@@ -895,7 +896,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n \n     fn reset(&mut self, bits: &mut [uint]) {\n         let e = if self.dfcx.oper.initial_value() {uint::max_value} else {0};\n-        for vec::each_mut(bits) |b| { *b = e; }\n+        for bits.mut_iter().advance |b| { *b = e; }\n     }\n \n     fn add_to_entry_set(&mut self, id: ast::node_id, pred_bits: &[uint]) {"}, {"sha": "543264ba11ed05c699e537738c0a40d562985681", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -17,6 +17,7 @@ use middle::typeck;\n use util::ppaux::{Repr, ty_to_str};\n use util::ppaux::UserString;\n \n+use core::iterator::IteratorUtil;\n use core::vec;\n use syntax::ast::*;\n use syntax::attr::attrs_contains_name;\n@@ -268,7 +269,7 @@ pub fn check_expr(e: @expr, cx: Context, v: visit::vt<Context>) {\n                   ts.repr(cx.tcx),\n                   type_param_defs.repr(cx.tcx));\n         }\n-        for vec::each2(**ts, *type_param_defs) |&ty, type_param_def| {\n+        for ts.iter().zip(type_param_defs.iter()).advance |(&ty, type_param_def)| {\n             check_bounds(cx, type_parameter_id, e.span, ty, type_param_def)\n         }\n     }\n@@ -309,7 +310,7 @@ fn check_ty(aty: @Ty, cx: Context, v: visit::vt<Context>) {\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get_copy(&id));\n             let type_param_defs =\n                 ty::lookup_item_type(cx.tcx, did).generics.type_param_defs;\n-            for vec::each2(**ts, *type_param_defs) |&ty, type_param_def| {\n+            for ts.iter().zip(type_param_defs.iter()).advance |(&ty, type_param_def)| {\n                 check_bounds(cx, aty.id, aty.span, ty, type_param_def)\n             }\n         }"}, {"sha": "88f97cfa0b8f5660aa1f137187a1406c18e9b1cc", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -19,6 +19,7 @@ use middle::trans::common::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n+use core::iterator::IteratorUtil;\n use core::vec;\n use syntax::ast;\n use syntax::ast_map::path_name;\n@@ -75,7 +76,7 @@ pub fn maybe_instantiate_inline(ccx: @CrateContext, fn_id: ast::def_id,\n             ast::item_enum(_, _) => {\n               let vs_here = ty::enum_variants(ccx.tcx, local_def(item.id));\n               let vs_there = ty::enum_variants(ccx.tcx, parent_id);\n-              for vec::each2(*vs_here, *vs_there) |here, there| {\n+              for vs_here.iter().zip(vs_there.iter()).advance |(here, there)| {\n                   if there.id == fn_id { my_id = here.id.node; }\n                   ccx.external.insert(there.id, Some(here.id.node));\n               }"}, {"sha": "b1b1b5212af6701f5d1ae14946b7ae33111af2e7", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -33,6 +33,7 @@ use middle::trans::inline;\n use middle::ty;\n use middle::typeck;\n \n+use core::iterator::IteratorUtil;\n use core::option::{Some, None};\n use core::uint;\n use core::vec;\n@@ -264,7 +265,7 @@ pub fn mark_for_method_call(cx: Context, e_id: node_id, callee_id: node_id) {\n     for opt_static_did.each |&did| {\n         for cx.ccx.tcx.node_type_substs.find_copy(&callee_id).each |ts| {\n             let type_uses = type_uses_for(cx.ccx, did, ts.len());\n-            for vec::each2(*type_uses, *ts) |uses, subst| {\n+            for type_uses.iter().zip(ts.iter()).advance |(uses, subst)| {\n                 type_needs(cx, *uses, *subst)\n             }\n         }\n@@ -302,7 +303,7 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n         for opt_ts.each |ts| {\n             let id = ast_util::def_id_of_def(cx.ccx.tcx.def_map.get_copy(&e.id));\n             let uses_for_ts = type_uses_for(cx.ccx, id, ts.len());\n-            for vec::each2(*uses_for_ts, *ts) |uses, subst| {\n+            for uses_for_ts.iter().zip(ts.iter()).advance |(uses, subst)| {\n                 type_needs(cx, *uses, *subst)\n             }\n         }"}, {"sha": "13f41c06e183921d089ff48d959663dd6d1ab243", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -18,8 +18,8 @@ use middle::typeck::check::{instantiate_path, lookup_def};\n use middle::typeck::check::{structure_of, valid_range_bounds};\n use middle::typeck::require_same_types;\n \n+use core::iterator::IteratorUtil;\n use core::hashmap::{HashMap, HashSet};\n-use core::vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;\n@@ -232,7 +232,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: @ast::pat, path: @ast::Path,\n \n         if !error_happened {\n             for subpats.each |pats| {\n-                for vec::each2(*pats, arg_types) |subpat, arg_ty| {\n+                for pats.iter().zip(arg_types.iter()).advance |(subpat, arg_ty)| {\n                     check_pat(pcx, *subpat, *arg_ty);\n                 }\n             }"}, {"sha": "1e5f8970448ab66324219efec2775bc4ade4b568", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -110,6 +110,8 @@ use util::common::{block_query, indenter, loop_query};\n use util::ppaux::{bound_region_to_str};\n use util::ppaux;\n \n+\n+use core::iterator::IteratorUtil;\n use core::cast::transmute;\n use core::hashmap::HashMap;\n use core::result;\n@@ -412,7 +414,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n     for opt_self_info.each |self_info| {\n         fcx.write_ty(self_info.self_id, self_info.self_ty);\n     }\n-    for vec::each2(decl.inputs, arg_tys) |input, arg| {\n+    for decl.inputs.iter().zip(arg_tys.iter()).advance |(input, arg)| {\n         fcx.write_ty(input.id, *arg);\n     }\n \n@@ -449,7 +451,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n         }\n \n         // Add formal parameters.\n-        for vec::each2(arg_tys, decl.inputs) |arg_ty, input| {\n+        for arg_tys.iter().zip(decl.inputs.iter()).advance |(arg_ty, input)| {\n             // Create type variables for each argument.\n             do pat_util::pat_bindings(tcx.def_map, input.pat)\n                     |_bm, pat_id, _sp, _path| {"}, {"sha": "dcf165b0496cfdb24cde67f28c35d5102c5ce789", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -54,6 +54,7 @@ use syntax::visit::{Visitor, SimpleVisitor};\n use syntax::visit::{visit_mod};\n use util::ppaux::ty_to_str;\n \n+use core::iterator::IteratorUtil;\n use core::hashmap::{HashMap, HashSet};\n use core::old_iter;\n use core::result::Ok;\n@@ -617,9 +618,9 @@ impl CoherenceChecker {\n                 // Check to ensure that each parameter binding respected its\n                 // kind bounds.\n                 for [ a, b ].each |result| {\n-                    for vec::each2(result.type_variables,\n-                                   *result.type_param_defs)\n-                        |ty_var, type_param_def|\n+                    for result.type_variables.iter()\n+                        .zip(result.type_param_defs.iter())\n+                        .advance |(ty_var, type_param_def)|\n                     {\n                         if type_param_def.bounds.builtin_bounds.contains_elem(\n                             ty::BoundCopy)"}, {"sha": "4bc545f607dd1cd068412ddf698dde454f51e9b3", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -55,7 +55,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &1);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn chain<U: Iterator<A>>(self, other: U) -> ChainIterator<Self, U>;\n+    fn chain<U: Iterator<A>>(self, other: U) -> ChainIterator<A, Self, U>;\n \n     /// Creates an iterator which iterates over both this and the specified\n     /// iterators simultaneously, yielding the two elements as pairs. When\n@@ -73,7 +73,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), (&0, &1));\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<Self, U>;\n+    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<A, Self, B, U>;\n \n     // FIXME: #5898: should be called map\n     /// Creates a new iterator which will apply the specified function to each\n@@ -139,7 +139,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), (1, &200));\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn enumerate(self) -> EnumerateIterator<Self>;\n+    fn enumerate(self) -> EnumerateIterator<A, Self>;\n \n     /// Creates an iterator which invokes the predicate on elements until it\n     /// returns true. Once the predicate returns true, all further elements are\n@@ -349,12 +349,12 @@ pub trait IteratorUtil<A> {\n /// In the future these will be default methods instead of a utility trait.\n impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     #[inline(always)]\n-    fn chain<U: Iterator<A>>(self, other: U) -> ChainIterator<T, U> {\n+    fn chain<U: Iterator<A>>(self, other: U) -> ChainIterator<A, T, U> {\n         ChainIterator{a: self, b: other, flag: false}\n     }\n \n     #[inline(always)]\n-    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n+    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<A, T, B, U> {\n         ZipIterator{a: self, b: other}\n     }\n \n@@ -375,7 +375,7 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     }\n \n     #[inline(always)]\n-    fn enumerate(self) -> EnumerateIterator<T> {\n+    fn enumerate(self) -> EnumerateIterator<A, T> {\n         EnumerateIterator{iter: self, count: 0}\n     }\n \n@@ -570,13 +570,14 @@ impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n }\n \n /// An iterator which strings two iterators together\n-pub struct ChainIterator<T, U> {\n+// FIXME #6967: Dummy A parameter to get around type inference bug\n+pub struct ChainIterator<A, T, U> {\n     priv a: T,\n     priv b: U,\n     priv flag: bool\n }\n \n-impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<T, U> {\n+impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<A, T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         if self.flag {\n@@ -593,12 +594,13 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<T, U> {\n }\n \n /// An iterator which iterates two other iterators simultaneously\n-pub struct ZipIterator<T, U> {\n+// FIXME #6967: Dummy A & B parameters to get around type inference bug\n+pub struct ZipIterator<A, T, B, U> {\n     priv a: T,\n     priv b: U\n }\n \n-impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for ZipIterator<T, U> {\n+impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for ZipIterator<A, T, B, U> {\n     #[inline]\n     fn next(&mut self) -> Option<(A, B)> {\n         match (self.a.next(), self.b.next()) {\n@@ -664,12 +666,13 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B,\n }\n \n /// An iterator which yields the current count and the element during iteration\n-pub struct EnumerateIterator<T> {\n+// FIXME #6967: Dummy A parameter to get around type inference bug\n+pub struct EnumerateIterator<A, T> {\n     priv iter: T,\n     priv count: uint\n }\n \n-impl<A, T: Iterator<A>> Iterator<(uint, A)> for EnumerateIterator<T> {\n+impl<A, T: Iterator<A>> Iterator<(uint, A)> for EnumerateIterator<A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<(uint, A)> {\n         match self.iter.next() {\n@@ -887,7 +890,7 @@ mod tests {\n         let expected = [0, 1, 2, 3, 4, 5, 30, 40, 50, 60];\n         let mut it = xs.iter().chain(ys.iter());\n         let mut i = 0;\n-        for it.advance |&x: &uint| {\n+        for it.advance |&x| {\n             assert_eq!(x, expected[i]);\n             i += 1;\n         }\n@@ -896,7 +899,7 @@ mod tests {\n         let ys = Counter::new(30u, 10).take(4);\n         let mut it = xs.iter().transform(|&x| x).chain(ys);\n         let mut i = 0;\n-        for it.advance |x: uint| {\n+        for it.advance |x| {\n             assert_eq!(x, expected[i]);\n             i += 1;\n         }\n@@ -906,15 +909,15 @@ mod tests {\n     #[test]\n     fn test_filter_map() {\n         let mut it = Counter::new(0u, 1u).take(10)\n-            .filter_map(|x: uint| if x.is_even() { Some(x*x) } else { None });\n+            .filter_map(|x| if x.is_even() { Some(x*x) } else { None });\n         assert_eq!(it.collect::<~[uint]>(), ~[0*0, 2*2, 4*4, 6*6, 8*8]);\n     }\n \n     #[test]\n     fn test_iterator_enumerate() {\n         let xs = [0u, 1, 2, 3, 4, 5];\n         let mut it = xs.iter().enumerate();\n-        for it.advance |(i, &x): (uint, &uint)| {\n+        for it.advance |(i, &x)| {\n             assert_eq!(i, x);\n         }\n     }\n@@ -925,7 +928,7 @@ mod tests {\n         let ys = [0u, 1, 2, 3, 5, 13];\n         let mut it = xs.iter().take_while(|&x| *x < 15u);\n         let mut i = 0;\n-        for it.advance |&x: &uint| {\n+        for it.advance |&x| {\n             assert_eq!(x, ys[i]);\n             i += 1;\n         }\n@@ -938,7 +941,7 @@ mod tests {\n         let ys = [15, 16, 17, 19];\n         let mut it = xs.iter().skip_while(|&x| *x < 15u);\n         let mut i = 0;\n-        for it.advance |&x: &uint| {\n+        for it.advance |&x| {\n             assert_eq!(x, ys[i]);\n             i += 1;\n         }"}, {"sha": "1137540ae706145899ed36cd480f1a47c2c46f87", "filename": "src/libstd/pipes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibstd%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibstd%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpipes.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -87,6 +87,7 @@ bounded and unbounded protocols allows for less code duplication.\n use container::Container;\n use cast::{forget, transmute, transmute_copy};\n use either::{Either, Left, Right};\n+use iterator::IteratorUtil;\n use kinds::Owned;\n use libc;\n use ops::Drop;\n@@ -96,8 +97,7 @@ use unstable::intrinsics;\n use ptr;\n use ptr::RawPtr;\n use task;\n-use vec;\n-use vec::OwnedVector;\n+use vec::{OwnedVector, MutableVector};\n use util::replace;\n \n static SPIN_COUNT: uint = 0;\n@@ -600,7 +600,7 @@ pub fn wait_many<T: Selectable>(pkts: &mut [T]) -> uint {\n \n     let mut data_avail = false;\n     let mut ready_packet = pkts.len();\n-    for vec::eachi_mut(pkts) |i, p| {\n+    for pkts.mut_iter().enumerate().advance |(i, p)| {\n         unsafe {\n             let p = &mut *p.header();\n             let old = p.mark_blocked(this);\n@@ -622,7 +622,7 @@ pub fn wait_many<T: Selectable>(pkts: &mut [T]) -> uint {\n         let event = wait_event(this) as *PacketHeader;\n \n         let mut pos = None;\n-        for vec::eachi_mut(pkts) |i, p| {\n+        for pkts.mut_iter().enumerate().advance |(i, p)| {\n             if p.header() == event {\n                 pos = Some(i);\n                 break;\n@@ -640,7 +640,7 @@ pub fn wait_many<T: Selectable>(pkts: &mut [T]) -> uint {\n \n     debug!(\"%?\", &mut pkts[ready_packet]);\n \n-    for vec::each_mut(pkts) |p| {\n+    for pkts.mut_iter().advance |p| {\n         unsafe {\n             (*p.header()).unblock()\n         }\n@@ -853,7 +853,7 @@ pub fn select<T:Owned,Tb:Owned>(mut endpoints: ~[RecvPacketBuffered<T, Tb>])\n                                     Option<T>,\n                                     ~[RecvPacketBuffered<T, Tb>]) {\n     let mut endpoint_headers = ~[];\n-    for vec::each_mut(endpoints) |endpoint| {\n+    for endpoints.mut_iter().advance |endpoint| {\n         endpoint_headers.push(endpoint.header());\n     }\n "}, {"sha": "899920030264d11b776bf69c73e67e5e0de7ac11", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -82,4 +82,3 @@ pub use io::{Reader, ReaderUtil, Writer, WriterUtil};\n // Reexported runtime types\n pub use comm::{stream, Port, Chan, GenericChan, GenericSmartChan, GenericPort, Peekable};\n pub use task::spawn;\n-"}, {"sha": "7899edbfcb956c2da3471847ae1cd99941e264a7", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -11,6 +11,7 @@\n //! An ordered map and set for integer keys implemented as a radix trie\n \n use prelude::*;\n+use iterator::IteratorUtil;\n use uint;\n use util::{swap, replace};\n use vec;\n@@ -277,7 +278,7 @@ impl<T> TrieNode<T> {\n     }\n \n     fn mutate_values<'a>(&'a mut self, f: &fn(&uint, &mut T) -> bool) -> bool {\n-        for vec::each_mut(self.children) |child| {\n+        for self.children.mut_iter().advance |child| {\n             match *child {\n                 Internal(ref mut x) => if !x.mutate_values(f) {\n                     return false"}, {"sha": "d8424f4a29edd992f3ba597bc377f14965f8e017", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 86, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -19,7 +19,7 @@ use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use clone::Clone;\n use old_iter::BaseIter;\n use old_iter;\n-use iterator::Iterator;\n+use iterator::{Iterator, IteratorUtil};\n use iter::FromIter;\n use kinds::Copy;\n use libc;\n@@ -1568,28 +1568,6 @@ pub fn each<'r,T>(v: &'r [T], f: &fn(&'r T) -> bool) -> bool {\n     return !broke;\n }\n \n-/// Like `each()`, but for the case where you have\n-/// a vector with mutable contents and you would like\n-/// to mutate the contents as you iterate.\n-#[inline(always)]\n-pub fn each_mut<'r,T>(v: &'r mut [T], f: &fn(elem: &'r mut T) -> bool) -> bool {\n-    let mut broke = false;\n-    do as_mut_buf(v) |p, n| {\n-        let mut n = n;\n-        let mut p = p;\n-        while n > 0 {\n-            unsafe {\n-                let q: &'r mut T = cast::transmute_mut_region(&mut *p);\n-                if !f(q) { break; }\n-                p = p.offset(1);\n-            }\n-            n -= 1;\n-        }\n-        broke = n > 0;\n-    }\n-    return !broke;\n-}\n-\n /// Like `each()`, but for the case where you have a vector that *may or may\n /// not* have mutable contents.\n #[inline(always)]\n@@ -1620,24 +1598,6 @@ pub fn eachi<'r,T>(v: &'r [T], f: &fn(uint, v: &'r T) -> bool) -> bool {\n     return true;\n }\n \n-/**\n- * Iterates over a mutable vector's elements and indices\n- *\n- * Return true to continue, false to break.\n- */\n-#[inline(always)]\n-pub fn eachi_mut<'r,T>(v: &'r mut [T],\n-                       f: &fn(uint, v: &'r mut T) -> bool) -> bool {\n-    let mut i = 0;\n-    for each_mut(v) |p| {\n-        if !f(i, p) {\n-            return false;\n-        }\n-        i += 1;\n-    }\n-    return true;\n-}\n-\n /**\n  * Iterates over a vector's elements in reverse\n  *\n@@ -1666,44 +1626,6 @@ pub fn eachi_reverse<'r,T>(v: &'r [T],\n     return true;\n }\n \n-/**\n- * Iterates over two vectors simultaneously\n- *\n- * # Failure\n- *\n- * Both vectors must have the same length\n- */\n-#[inline]\n-pub fn each2<U, T>(v1: &[U], v2: &[T], f: &fn(u: &U, t: &T) -> bool) -> bool {\n-    assert_eq!(v1.len(), v2.len());\n-    for uint::range(0u, v1.len()) |i| {\n-        if !f(&v1[i], &v2[i]) {\n-            return false;\n-        }\n-    }\n-    return true;\n-}\n-\n-/**\n- *\n- * Iterates over two vector with mutable.\n- *\n- * # Failure\n- *\n- * Both vectors must have the same length\n- */\n-#[inline]\n-pub fn each2_mut<U, T>(v1: &mut [U], v2: &mut [T],\n-                       f: &fn(u: &mut U, t: &mut T) -> bool) -> bool {\n-    assert_eq!(v1.len(), v2.len());\n-    for uint::range(0u, v1.len()) |i| {\n-        if !f(&mut v1[i], &mut v2[i]) {\n-            return false;\n-        }\n-    }\n-    return true;\n-}\n-\n /**\n  * Iterate over all permutations of vector `v`.\n  *\n@@ -2738,23 +2660,23 @@ impl<A> old_iter::BaseIter<A> for @[A] {\n impl<'self,A> old_iter::MutableIter<A> for &'self mut [A] {\n     #[inline(always)]\n     fn each_mut<'a>(&'a mut self, blk: &fn(v: &'a mut A) -> bool) -> bool {\n-        each_mut(*self, blk)\n+        self.mut_iter().advance(blk)\n     }\n }\n \n // FIXME(#4148): This should be redundant\n impl<A> old_iter::MutableIter<A> for ~[A] {\n     #[inline(always)]\n     fn each_mut<'a>(&'a mut self, blk: &fn(v: &'a mut A) -> bool) -> bool {\n-        each_mut(*self, blk)\n+        self.mut_iter().advance(blk)\n     }\n }\n \n // FIXME(#4148): This should be redundant\n impl<A> old_iter::MutableIter<A> for @mut [A] {\n     #[inline(always)]\n     fn each_mut(&mut self, blk: &fn(v: &mut A) -> bool) -> bool {\n-        each_mut(*self, blk)\n+        self.mut_iter().advance(blk)\n     }\n }\n \n@@ -2786,7 +2708,7 @@ impl<'self,A> old_iter::ExtendedIter<A> for &'self [A] {\n impl<'self,A> old_iter::ExtendedMutableIter<A> for &'self mut [A] {\n     #[inline(always)]\n     pub fn eachi_mut(&mut self, blk: &fn(uint, v: &mut A) -> bool) -> bool {\n-        eachi_mut(*self, blk)\n+        self.mut_iter().enumerate().advance(|(i, v)| blk(i, v))\n     }\n }\n \n@@ -3646,16 +3568,13 @@ mod tests {\n     fn test_each_ret_len0() {\n         let mut a0 : [int, .. 0] = [];\n         assert_eq!(each(a0, |_p| fail!()), true);\n-        assert_eq!(each_mut(a0, |_p| fail!()), true);\n     }\n \n     #[test]\n     fn test_each_ret_len1() {\n         let mut a1 = [17];\n         assert_eq!(each(a1, |_p| true), true);\n-        assert_eq!(each_mut(a1, |_p| true), true);\n         assert_eq!(each(a1, |_p| false), false);\n-        assert_eq!(each_mut(a1, |_p| false), false);\n     }\n \n "}, {"sha": "b36d44964928f28e3a1af102d0c17aef50b54db3", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -174,6 +174,7 @@ use opt_vec;\n \n use core::uint;\n use core::vec;\n+use core::iterator::IteratorUtil;\n \n pub use self::ty::*;\n mod ty;\n@@ -616,7 +617,7 @@ impl<'self> MethodDef<'self> {\n         // make a series of nested matches, to destructure the\n         // structs. This is actually right-to-left, but it shoudn't\n         // matter.\n-        for vec::each2(self_args, patterns) |&arg_expr, &pat| {\n+        for self_args.iter().zip(patterns.iter()).advance |(&arg_expr, &pat)| {\n             body = cx.expr_match(span, arg_expr,\n                                  ~[ cx.arm(span, ~[pat], body) ])\n         }\n@@ -951,7 +952,7 @@ fn create_struct_pattern(cx: @ExtCtxt,\n     // must be nonempty to reach here\n     let pattern = if struct_type == Record {\n         let field_pats = do vec::build |push| {\n-            for vec::each2(subpats, ident_expr) |&pat, &(id, _)| {\n+            for subpats.iter().zip(ident_expr.iter()).advance |(&pat, &(id, _))| {\n                 // id is guaranteed to be Some\n                 push(ast::field_pat { ident: id.get(), pat: pat })\n             }"}, {"sha": "a5725613d589888c7e3200df0d1061bff3f54aff", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -23,6 +23,7 @@ use ext::quote::rt::*;\n use opt_vec;\n use opt_vec::OptVec;\n \n+use core::iterator::IteratorUtil;\n use core::str;\n use core::vec;\n \n@@ -258,8 +259,7 @@ impl to_type_decls for state {\n         let mut items = ~[];\n \n         {\n-            let messages = &mut *self.messages;\n-            for vec::each_mut(*messages) |m| {\n+            for self.messages.mut_iter().advance |m| {\n                 if dir == send {\n                     items.push(m.gen_send(cx, true));\n                     items.push(m.gen_send(cx, false));"}, {"sha": "5f43452cc83ecacd1420ae61cf1b9791422c2f52", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -22,6 +22,7 @@ use parse::parser::Parser;\n use parse::token::{Token, EOF, to_str, nonterminal, get_ident_interner, ident_to_str};\n use parse::token;\n \n+use core::iterator::IteratorUtil;\n use core::hashmap::HashMap;\n use core::str;\n use core::uint;\n@@ -358,7 +359,7 @@ pub fn parse(\n         if tok == EOF {\n             if eof_eis.len() == 1u {\n                 let mut v = ~[];\n-                for vec::each_mut(eof_eis[0u].matches) |dv| {\n+                for eof_eis[0u].matches.mut_iter().advance |dv| {\n                     v.push(dv.pop());\n                 }\n                 return success(nameize(sess, ms, v));"}, {"sha": "4dd4d2b5847223b13405bcf3478bbff980139e32", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -1,3 +1,4 @@\n+use std::iterator::*;\n use std::from_str::FromStr;\n use std::i32::range;\n use std::os;\n@@ -29,9 +30,8 @@ fn fannkuch_redux(n: i32) -> i32 {\n                 r -= 1;\n             }\n \n-            // XXX: Need each2_mut.\n-            for vec::eachi_mut(perm) |i, perm_i| {\n-                *perm_i = perm1.unsafe_get(i);\n+            for perm.mut_iter().zip(perm1.iter()).advance |(perm_i, perm1_i)| {\n+                *perm_i = *perm1_i;\n             }\n \n             let mut flips_count: i32 = 0;"}, {"sha": "bc1685a109220a0c625db07ff9f7669f557e1f24", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -1,3 +1,4 @@\n+use std::iterator::IteratorUtil;\n use std::cast::transmute;\n use std::from_str::FromStr;\n use std::libc::{FILE, STDOUT_FILENO, c_int, fdopen, fputc, fputs, fwrite, size_t};\n@@ -134,7 +135,7 @@ impl RandomFasta {\n     fn make_lookup(a: &[AminoAcid]) -> [AminoAcid, ..LOOKUP_SIZE] {\n         let mut lookup = [ NULL_AMINO_ACID, ..LOOKUP_SIZE ];\n         let mut j = 0;\n-        for vec::eachi_mut(lookup) |i, slot| {\n+        for lookup.mut_iter().enumerate().advance |(i, slot)| {\n             while a[j].p < (i as f32) {\n                 j += 1;\n             }"}, {"sha": "f1fff7ea0ac071e408719538a01e397938300fe0", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -1,3 +1,4 @@\n+use std::iterator::IteratorUtil;\n use std::f64;\n use std::from_str::FromStr;\n use std::os;\n@@ -104,7 +105,7 @@ fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: i32) {\n             }\n         }\n \n-        for vec::each_mut(*bodies) |a| {\n+        for bodies.mut_iter().advance |a| {\n             a.x[0] += dt * a.v[0];\n             a.x[1] += dt * a.v[1];\n             a.x[2] += dt * a.v[2];"}, {"sha": "7356e848ba3b2be17252ada8de14f514cb33d7be", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -1,3 +1,4 @@\n+use std::iterator::IteratorUtil;\n use std::f64;\n use std::from_str::FromStr;\n use std::iter::ExtendedMutableIter;\n@@ -18,19 +19,19 @@ fn dot(v: &[f64], u: &[f64]) -> f64 {\n }\n \n fn mult_Av(v: &mut [f64], out: &mut [f64]) {\n-    for vec::eachi_mut(out) |i, out_i| {\n+    for out.mut_iter().enumerate().advance |(i, out_i)| {\n         let mut sum = 0.0;\n-        for vec::eachi_mut(v) |j, &v_j| {\n+        for v.mut_iter().enumerate().advance |(j, &v_j)| {\n             sum += v_j / (A(i as i32, j as i32) as f64);\n         }\n         *out_i = sum;\n     }\n }\n \n fn mult_Atv(v: &mut [f64], out: &mut [f64]) {\n-    for vec::eachi_mut(out) |i, out_i| {\n+    for out.mut_iter().enumerate().advance |(i, out_i)| {\n         let mut sum = 0.0;\n-        for vec::eachi_mut(v) |j, &v_j| {\n+        for v.mut_iter().enumerate().advance |(j, &v_j)| {\n             sum += v_j / (A(j as i32, i as i32) as f64);\n         }\n         *out_i = sum;"}, {"sha": "d2c8e465c1160a3ffb25654db319a62740a6975c", "filename": "src/test/run-pass/mutability-inherits-through-fixed-length-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d945543ebf446913a44375169aa23686ffaa6205/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945543ebf446913a44375169aa23686ffaa6205/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs?ref=d945543ebf446913a44375169aa23686ffaa6205", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec;\n+use std::iterator::IteratorUtil;\n \n fn test1() {\n     let mut ints = [0, ..32];\n@@ -18,7 +18,7 @@ fn test1() {\n \n fn test2() {\n     let mut ints = [0, ..32];\n-    for vec::each_mut(ints) |i| { *i += 22; }\n+    for ints.mut_iter().advance |i| { *i += 22; }\n     for ints.each |i| { assert!(*i == 22); }\n }\n "}, {"sha": "73e0418993c41cf6bedae39c9e99d6d745c739d0", "filename": "src/test/run-pass/vec-each2_mut.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/18019a1304c5cf6ec6f04e43b030602c8fec0e01/src%2Ftest%2Frun-pass%2Fvec-each2_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18019a1304c5cf6ec6f04e43b030602c8fec0e01/src%2Ftest%2Frun-pass%2Fvec-each2_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-each2_mut.rs?ref=18019a1304c5cf6ec6f04e43b030602c8fec0e01", "patch": "@@ -1,42 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// -*- rust -*-\n-\n-use std::io;\n-use std::vec;\n-\n-fn main(){\n-    let mut t1 = ~[];\n-    t1.push('a');\n-\n-    let mut t2 = ~[];\n-    t2.push('b');\n-\n-    for vec::each2_mut(t1, t2) | i1, i2 | {\n-        assert_eq!(*i1, 'a');\n-        assert_eq!(*i2, 'b');\n-    }\n-\n-    for vec::each2(t1, t2) | i1, i2 | {\n-        io::println(fmt!(\"after t1: %?, t2: %?\", i1, i2));\n-    }\n-\n-    for vec::each2_mut(t1, t2) | i1, i2 | {\n-        *i1 = 'b';\n-        *i2 = 'a';\n-        assert_eq!(*i1, 'b');\n-        assert_eq!(*i2, 'a');\n-    }\n-\n-    for vec::each2(t1, t2) | i1, i2 | {\n-        io::println(fmt!(\"before t1: %?, t2: %?\", i1, i2));\n-    }\n-}"}]}