{"sha": "fbb7df0f8256fcffb0143dd6424e2bd494fbb6da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYjdkZjBmODI1NmZjZmZiMDE0M2RkNjQyNGUyYmQ0OTRmYmI2ZGE=", "commit": {"author": {"name": "Ramana Venkata", "email": "vramana@users.noreply.github.com", "date": "2017-11-10T21:22:39Z"}, "committer": {"name": "Ramana Venkata", "email": "vramana@users.noreply.github.com", "date": "2017-11-10T23:10:23Z"}, "message": "Fix MIR borrowck EndRegion not found\n\nUpdated tests\n\nFixes #45702", "tree": {"sha": "1951d394fb9092b8bcfd32cdcf9cce7d4ae9faeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1951d394fb9092b8bcfd32cdcf9cce7d4ae9faeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb7df0f8256fcffb0143dd6424e2bd494fbb6da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb7df0f8256fcffb0143dd6424e2bd494fbb6da", "html_url": "https://github.com/rust-lang/rust/commit/fbb7df0f8256fcffb0143dd6424e2bd494fbb6da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb7df0f8256fcffb0143dd6424e2bd494fbb6da/comments", "author": {"login": "vramana", "id": 3112509, "node_id": "MDQ6VXNlcjMxMTI1MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3112509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vramana", "html_url": "https://github.com/vramana", "followers_url": "https://api.github.com/users/vramana/followers", "following_url": "https://api.github.com/users/vramana/following{/other_user}", "gists_url": "https://api.github.com/users/vramana/gists{/gist_id}", "starred_url": "https://api.github.com/users/vramana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vramana/subscriptions", "organizations_url": "https://api.github.com/users/vramana/orgs", "repos_url": "https://api.github.com/users/vramana/repos", "events_url": "https://api.github.com/users/vramana/events{/privacy}", "received_events_url": "https://api.github.com/users/vramana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vramana", "id": 3112509, "node_id": "MDQ6VXNlcjMxMTI1MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3112509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vramana", "html_url": "https://github.com/vramana", "followers_url": "https://api.github.com/users/vramana/followers", "following_url": "https://api.github.com/users/vramana/following{/other_user}", "gists_url": "https://api.github.com/users/vramana/gists{/gist_id}", "starred_url": "https://api.github.com/users/vramana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vramana/subscriptions", "organizations_url": "https://api.github.com/users/vramana/orgs", "repos_url": "https://api.github.com/users/vramana/repos", "events_url": "https://api.github.com/users/vramana/events{/privacy}", "received_events_url": "https://api.github.com/users/vramana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "563dc5171fd5d96f9714b4e722ad1d80a25f1dba", "url": "https://api.github.com/repos/rust-lang/rust/commits/563dc5171fd5d96f9714b4e722ad1d80a25f1dba", "html_url": "https://github.com/rust-lang/rust/commit/563dc5171fd5d96f9714b4e722ad1d80a25f1dba"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "928c07b7fbc05c2c37b712a2e632fe61b345f259", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fbb7df0f8256fcffb0143dd6424e2bd494fbb6da/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb7df0f8256fcffb0143dd6424e2bd494fbb6da/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=fbb7df0f8256fcffb0143dd6424e2bd494fbb6da", "patch": "@@ -125,12 +125,18 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n \n     /// Returns the span for the \"end point\" given region. This will\n     /// return `None` if NLL is enabled, since that concept has no\n-    /// meaning there.  Otherwise, it should return some.\n+    /// meaning there.  Otherwise, return region span if it exists and\n+    /// span for end of the function if it doesn't exist.\n     pub fn opt_region_end_span(&self, region: &Region) -> Option<Span> {\n-        let opt_span = self.region_span_map.get(region);\n-        assert!(self.nonlexical_regioncx.is_some() ||\n-                opt_span.is_some(), \"end region not found for {:?}\", region);\n-        opt_span.map(|s| s.end_point())\n+        match self.nonlexical_regioncx {\n+            Some(_) => None,\n+            None => {\n+                match self.region_span_map.get(region) {\n+                    Some(span) => Some(span.end_point()),\n+                    None => Some(self.mir.span.end_point())\n+                }\n+            }\n+        }\n     }\n \n     /// Add all borrows to the kill set, if those borrows are out of scope at `location`."}, {"sha": "d4e9ab99edefe5e24d5112e69bac8d9adb47ca86", "filename": "src/test/compile-fail/borrowck/borrowck-mut-borrow-linear-errors.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fbb7df0f8256fcffb0143dd6424e2bd494fbb6da/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb7df0f8256fcffb0143dd6424e2bd494fbb6da/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs?ref=fbb7df0f8256fcffb0143dd6424e2bd494fbb6da", "patch": "@@ -12,17 +12,29 @@\n // conflicts with a new loan, as opposed to every issued loan.  This keeps us\n // down to O(n) errors (for n problem lines), instead of O(n^2) errors.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n fn main() {\n     let mut x = 1;\n     let mut addr;\n     loop {\n         match 1 {\n-            1 => { addr = &mut x; }\n-            //~^ ERROR cannot borrow `x` as mutable more than once at a time\n-            2 => { addr = &mut x; }\n-            //~^ ERROR cannot borrow `x` as mutable more than once at a time\n-            _ => { addr = &mut x; }\n-            //~^ ERROR cannot borrow `x` as mutable more than once at a time\n+            1 => { addr = &mut x; } //[ast]~ ERROR [E0499]\n+            //[mir]~^ ERROR (Ast) [E0499]\n+            //[mir]~| ERROR (Mir) [E0499]\n+            2 => { addr = &mut x; } //[ast]~ ERROR [E0499]\n+            //[mir]~^ ERROR (Ast) [E0499]\n+            //[mir]~| ERROR (Mir) [E0506]\n+            //[mir]~| ERROR (Mir) [E0499]\n+            //[mir]~| ERROR (Mir) [E0499]\n+            _ => { addr = &mut x; } //[ast]~ ERROR [E0499]\n+            //[mir]~^ ERROR (Ast) [E0499]\n+            //[mir]~| ERROR (Mir) [E0506]\n+            //[mir]~| ERROR (Mir) [E0499]\n+            //[mir]~| ERROR (Mir) [E0499]\n         }\n     }\n }\n+\n+"}, {"sha": "7da80d2852e737f9c7a57fc9a180a93d9b542582", "filename": "src/test/compile-fail/issue-25579.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fbb7df0f8256fcffb0143dd6424e2bd494fbb6da/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb7df0f8256fcffb0143dd6424e2bd494fbb6da/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs?ref=fbb7df0f8256fcffb0143dd6424e2bd494fbb6da", "patch": "@@ -8,16 +8,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n enum Sexpression {\n     Num(()),\n     Cons(&'static mut Sexpression)\n }\n \n fn causes_ice(mut l: &mut Sexpression) {\n     loop { match l {\n-        &mut Sexpression::Num(ref mut n) => {},\n-        &mut Sexpression::Cons(ref mut expr) => { //~ ERROR cannot borrow `l.0`\n-            l = &mut **expr; //~ ERROR cannot assign to `l`\n+        &mut Sexpression::Num(ref mut n) => {}, //[mir]~ ERROR (Mir) [E0384]\n+        &mut Sexpression::Cons(ref mut expr) => { //[ast]~ ERROR [E0499]\n+                                                  //[mir]~^ ERROR (Ast) [E0499]\n+                                                  //[mir]~| ERROR (Mir) [E0506]\n+                                                  //[mir]~| ERROR (Mir) [E0384]\n+                                                  //[mir]~| ERROR (Mir) [E0499]\n+            l = &mut **expr; //[ast]~ ERROR [E0506]\n+                             //[mir]~^ ERROR (Ast) [E0506]\n+                             //[mir]~| ERROR (Mir) [E0506]\n+                             //[mir]~| ERROR (Mir) [E0506]\n+                             //[mir]~| ERROR (Mir) [E0499]\n+                             //[mir]~| ERROR (Mir) [E0499]\n         }\n     }}\n }"}]}