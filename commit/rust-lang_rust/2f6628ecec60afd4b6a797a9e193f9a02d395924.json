{"sha": "2f6628ecec60afd4b6a797a9e193f9a02d395924", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNjYyOGVjZWM2MGFmZDRiNmE3OTdhOWUxOTNmOWEwMmQzOTU5MjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-05T20:23:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T12:28:56Z"}, "message": "optimize `let x: T = ..` to avoid a temporary\n\nFor some weird reason this fixes `intrinsic-move-val`. It also affects\nvarious test heuristics. I removed one test (`reborrow_basic`) that\ndidn't seem to really be testing anything in particular anymore,\ncompared to all the other tests we've got.", "tree": {"sha": "323a4dd19eca44d8f8807c28b9e72b9c36704e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/323a4dd19eca44d8f8807c28b9e72b9c36704e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6628ecec60afd4b6a797a9e193f9a02d395924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6628ecec60afd4b6a797a9e193f9a02d395924", "html_url": "https://github.com/rust-lang/rust/commit/2f6628ecec60afd4b6a797a9e193f9a02d395924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6628ecec60afd4b6a797a9e193f9a02d395924/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "html_url": "https://github.com/rust-lang/rust/commit/16f4e8ac1d625c74e9711857afae4dac7fcf36e1"}], "stats": {"total": 227, "additions": 105, "deletions": 122}, "files": [{"sha": "09153ca24799a9dada0afd8fa4ced467ce6e6937", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=2f6628ecec60afd4b6a797a9e193f9a02d395924", "patch": "@@ -253,8 +253,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         irrefutable_pat: Pattern<'tcx>,\n         initializer: ExprRef<'tcx>,\n     ) -> BlockAnd<()> {\n-        // optimize the case of `let x = ...`\n         match *irrefutable_pat.kind {\n+            // Optimize the case of `let x = ...` to write directly into `x`\n             PatternKind::Binding {\n                 mode: BindingMode::ByValue,\n                 var,\n@@ -267,6 +267,47 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 self.schedule_drop_for_binding(var, irrefutable_pat.span, OutsideGuard);\n                 block.unit()\n             }\n+\n+            // Optimize the case of `let x: T = ...` to write directly\n+            // into `x` and then require that `T == typeof(x)`.\n+            //\n+            // Weirdly, this is needed to prevent the\n+            // `intrinsic-move-val.rs` test case from crashing. That\n+            // test works with uninitialized values in a rather\n+            // dubious way, so it may be that the test is kind of\n+            // broken.\n+            PatternKind::AscribeUserType {\n+                subpattern: Pattern {\n+                    kind: box PatternKind::Binding {\n+                        mode: BindingMode::ByValue,\n+                        var,\n+                        subpattern: None,\n+                        ..\n+                    },\n+                    ..\n+                },\n+                user_ty: ascription_user_ty,\n+            } => {\n+                let place =\n+                    self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard);\n+                unpack!(block = self.into(&place, block, initializer));\n+\n+                let source_info = self.source_info(irrefutable_pat.span);\n+                self.cfg.push(\n+                    block,\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::AscribeUserType(\n+                            place.clone(),\n+                            ty::Variance::Invariant,\n+                            ascription_user_ty,\n+                        ),\n+                    },\n+                );\n+\n+                self.schedule_drop_for_binding(var, irrefutable_pat.span, OutsideGuard);\n+                block.unit()\n+            }\n             _ => {\n                 let place = unpack!(block = self.as_place(block, initializer));\n                 self.place_into_pattern(block, irrefutable_pat, &place, true)"}, {"sha": "f04d4328929686a856ce14b605a80963c885d782", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 32, "deletions": 49, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=2f6628ecec60afd4b6a797a9e193f9a02d395924", "patch": "@@ -19,70 +19,53 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// check that codegen of assignment expressions is sane. Assignments\n-// tend to be absent in simple code, so subtle breakage in them can\n-// leave a quite hard-to-find trail of destruction.\n+// Check codegen for assignments (`a = b`) where the left-hand-side is\n+// not yet initialized. Assignments tend to be absent in simple code,\n+// so subtle breakage in them can leave a quite hard-to-find trail of\n+// destruction.\n \n // ignore-tidy-linelength\n \n fn main() {\n     let nodrop_x = false;\n     let nodrop_y;\n \n+    // Since boolean does not require drop, this can be a simple\n+    // assignment:\n     nodrop_y = nodrop_x;\n \n     let drop_x : Option<Box<u32>> = None;\n     let drop_y;\n \n+    // Since the type of `drop_y` has drop, we generate a `replace`\n+    // terminator:\n     drop_y = drop_x;\n }\n \n // END RUST SOURCE\n // START rustc.main.SimplifyCfg-initial.after.mir\n-//     bb0: {\n-//         StorageLive(_1);\n-//         _1 = const false;\n-//         StorageLive(_2);\n-//         StorageLive(_3);\n-//         _3 = _1;\n-//         _2 = move _3;\n-//         StorageDead(_3);\n-//         StorageLive(_4);\n-//         AscribeUserType(_4, Canonical { variables: [], value: std::option::Option<std::boxed::Box<u32>> });\n-//         _4 = std::option::Option<std::boxed::Box<u32>>::None;\n-//         StorageLive(_5);\n-//         StorageLive(_6);\n-//         _6 = move _4;\n-//         replace(_5 <-move _6) -> [return: bb2, unwind: bb5];\n-//     }\n-//     bb1: {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         drop(_6) -> [return: bb6, unwind: bb4];\n-//     }\n-//     bb3: {\n-//         drop(_4) -> bb1;\n-//     }\n-//     bb4: {\n-//         drop(_5) -> bb3;\n-//     }\n-//     bb5: {\n-//         drop(_6) -> bb4;\n-//     }\n-//     bb6: {\n-//         StorageDead(_6);\n-//         _0 = ();\n-//         drop(_5) -> [return: bb7, unwind: bb3];\n-//     }\n-//     bb7: {\n-//         StorageDead(_5);\n-//         drop(_4) -> [return: bb8, unwind: bb1];\n-//     }\n-//     bb8: {\n-//         StorageDead(_4);\n-//         StorageDead(_2);\n-//         StorageDead(_1);\n-//         return;\n-//     }\n+//    bb0: {\n+//        StorageLive(_1);\n+//        _1 = const false;\n+//        StorageLive(_2);\n+//        StorageLive(_3);\n+//        _3 = _1;\n+//        _2 = move _3;\n+//        StorageDead(_3);\n+//        StorageLive(_4);\n+//        _4 = std::option::Option<std::boxed::Box<u32>>::None;\n+//        AscribeUserType(_4, o, Canonical { variables: [], value: std::option::Option<std::boxed::Box<u32>> });\n+//        StorageLive(_5);\n+//        StorageLive(_6);\n+//        _6 = move _4;\n+//        replace(_5 <- move _6) -> [return: bb2, unwind: bb5];\n+//    }\n+//    ...\n+//    bb2: {\n+//        drop(_6) -> [return: bb6, unwind: bb4];\n+//    }\n+//    ...\n+//    bb5: {\n+//        drop(_6) -> bb4;\n+//    }\n // END rustc.main.SimplifyCfg-initial.after.mir"}, {"sha": "8a7ea8962fc5d6ba21f626d5fd7d08d058ec2cf9", "filename": "src/test/mir-opt/nll/reborrow-basic.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs?ref=16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Basic test for reborrow constraints: the region (`R5`) that appears\n-// in the type of `r_a` must outlive the region (`R7`) that appears in\n-// the type of `r_b`\n-\n-// compile-flags:-Zborrowck=mir -Zverbose\n-//                              ^^^^^^^^^ force compiler to dump more region information\n-\n-#![allow(warnings)]\n-\n-fn use_x(_: &mut i32) -> bool { true }\n-\n-fn main() {\n-    let mut foo: i32     = 22;\n-    let r_a: &mut i32 = &mut foo;\n-    let r_b: &mut i32 = &mut *r_a;\n-    use_x(r_b);\n-}\n-\n-// END RUST SOURCE\n-// START rustc.main.nll.0.mir\n-// | '_#7r    | U0 | {bb0[4], bb0[8..=17]}\n-// ...\n-// | '_#9r    | U0 | {bb0[10], bb0[14..=17]}\n-// ...\n-// let _4: &'_#9r mut i32;\n-// ...\n-// let _2: &'_#7r mut i32;\n-// END rustc.main.nll.0.mir"}, {"sha": "674d85d95911260ccb9e87fe9a821424733c1bb5", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr?ref=2f6628ecec60afd4b6a797a9e193f9a02d395924", "patch": "@@ -1,24 +1,24 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:19\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:29\n    |\n LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n    |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n ...\n LL |     let z: I::A = if cond { x } else { y };\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'b`\n+   |                             ^ assignment requires that `'a` must outlive `'b`\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:19\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:40\n    |\n LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n    |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n ...\n LL |     let z: I::A = if cond { x } else { y };\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |                                        ^ assignment requires that `'b` must outlive `'a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0df5e0c6e66925f32341bcdf3e0f8ad0cb4a3d24", "filename": "src/test/ui/borrowck/borrowck-access-permissions.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.nll.stderr?ref=2f6628ecec60afd4b6a797a9e193f9a02d395924", "patch": "@@ -35,7 +35,7 @@ error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` poin\n   --> $DIR/borrowck-access-permissions.rs:56:23\n    |\n LL |         let ptr_x : *const _ = &x;\n-   |             ----- help: consider changing this to be a mutable pointer: `*mut i32`\n+   |                                -- help: consider changing this to be a mutable pointer: `&mut x`\n ...\n LL |             let _y1 = &mut *ptr_x; //[ast]~ ERROR [E0596]\n    |                       ^^^^^^^^^^^ `ptr_x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable"}, {"sha": "0df5e0c6e66925f32341bcdf3e0f8ad0cb4a3d24", "filename": "src/test/ui/borrowck/borrowck-access-permissions.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr?ref=2f6628ecec60afd4b6a797a9e193f9a02d395924", "patch": "@@ -35,7 +35,7 @@ error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` poin\n   --> $DIR/borrowck-access-permissions.rs:56:23\n    |\n LL |         let ptr_x : *const _ = &x;\n-   |             ----- help: consider changing this to be a mutable pointer: `*mut i32`\n+   |                                -- help: consider changing this to be a mutable pointer: `&mut x`\n ...\n LL |             let _y1 = &mut *ptr_x; //[ast]~ ERROR [E0596]\n    |                       ^^^^^^^^^^^ `ptr_x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable"}, {"sha": "dd1c2a447300b5d16e879913d69f57b41c365593", "filename": "src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.rs?ref=2f6628ecec60afd4b6a797a9e193f9a02d395924", "patch": "@@ -20,9 +20,17 @@ fn make_it() -> for<'a> fn(&'a u32, &'a u32) -> &'a u32 {\n     panic!()\n }\n \n-fn main() {\n+fn foo() {\n     let a: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n     //~^ ERROR higher-ranked subtype error\n-    //~| ERROR higher-ranked subtype error\n     drop(a);\n }\n+\n+fn bar() {\n+    // The code path for patterns is mildly different, so go ahead and\n+    // test that too:\n+    let _: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n+    //~^ ERROR higher-ranked subtype error\n+}\n+\n+fn main() { }"}, {"sha": "c9195395b878c47ffefd1df4fb1dfe26b6a1c2f0", "filename": "src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr?ref=2f6628ecec60afd4b6a797a9e193f9a02d395924", "patch": "@@ -5,10 +5,10 @@ LL |     let a: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n    |                                                          ^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/hr-fn-aaa-as-aba.rs:24:9\n+  --> $DIR/hr-fn-aaa-as-aba.rs:32:58\n    |\n-LL |     let a: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n-   |         ^\n+LL |     let _: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n+   |                                                          ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6dc78789564c71f496898c02885c9c190b96b268", "filename": "src/test/ui/nll/relate_tys/universe-violation.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.stderr?ref=2f6628ecec60afd4b6a797a9e193f9a02d395924", "patch": "@@ -1,14 +1,8 @@\n error: higher-ranked subtype error\n-  --> $DIR/universe-violation.rs:14:9\n-   |\n-LL |     let a: fn(_) -> _ = make_it();\n-   |         ^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/universe-violation.rs:15:9\n+  --> $DIR/universe-violation.rs:15:31\n    |\n LL |     let b: fn(&u32) -> &u32 = a;\n-   |         ^\n+   |                               ^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "e8c1d7e74a038a9477acfcac8bc8d962397cdfae", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=2f6628ecec60afd4b6a797a9e193f9a02d395924", "patch": "@@ -1,11 +1,10 @@\n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:20:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:18:33\n    |\n LL | fn a(v: &[u8]) -> Box<Foo + 'static> {\n    |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n-...\n-LL |     x\n-   |     ^ lifetime `'static` required\n+LL |     let x: Box<Foo + 'static> = Box::new(v);\n+   |                                 ^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n   --> $DIR/region-object-lifetime-in-coercion.rs:24:5"}, {"sha": "98d9297e112a4e47a68dc76f900e34d57d2b31fa", "filename": "src/test/ui/slice-mut-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fslice-mut-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Fslice-mut-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fslice-mut-2.nll.stderr?ref=2f6628ecec60afd4b6a797a9e193f9a02d395924", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/slice-mut-2.rs:17:18\n    |\n LL |     let x: &[isize] = &[1, 2, 3, 4, 5];\n-   |         - help: consider changing this to be a mutable reference: `&mut [isize]`\n+   |                       ---------------- help: consider changing this to be a mutable reference: `&mut [1, 2, 3, 4, 5]`\n ...\n LL |     let _ = &mut x[2..4]; //~ERROR cannot borrow immutable borrowed content `*x` as mutable\n    |                  ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable"}, {"sha": "8cda1e60ba988284ddee1bdca2558c03d0e82da5", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.nll.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6628ecec60afd4b6a797a9e193f9a02d395924/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr?ref=2f6628ecec60afd4b6a797a9e193f9a02d395924", "patch": "@@ -38,12 +38,9 @@ LL |         let g = factorial.as_ref().unwrap();\n    |                 ^^^^^^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | -\n-   | |\n-   | `factorial` dropped here while still borrowed\n-   | borrow later used here, when `factorial` is dropped\n+   | - `factorial` dropped here while still borrowed\n    |\n-   = note: values in a scope are dropped in the opposite order they are defined\n+   = note: borrowed value must be valid for the static lifetime...\n \n error[E0506]: cannot assign to `factorial` because it is borrowed\n   --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:42:5\n@@ -55,10 +52,9 @@ LL |         let g = factorial.as_ref().unwrap();\n    |                 --------- borrow occurs due to use in closure\n ...\n LL |     factorial = Some(Box::new(f));\n-   |     ^^^^^^^^^\n-   |     |\n-   |     assignment to borrowed `factorial` occurs here\n-   |     borrow later used here\n+   |     ^^^^^^^^^ assignment to borrowed `factorial` occurs here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 4 previous errors\n "}]}