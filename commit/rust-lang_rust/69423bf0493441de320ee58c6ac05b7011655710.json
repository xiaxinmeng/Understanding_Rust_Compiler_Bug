{"sha": "69423bf0493441de320ee58c6ac05b7011655710", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NDIzYmYwNDkzNDQxZGUzMjBlZTU4YzZhYzA1YjcwMTE2NTU3MTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-16T11:21:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-16T11:21:23Z"}, "message": "test fast path offset reporting", "tree": {"sha": "bf5c231240b3f903ac500d0b44d0ae890180ae75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf5c231240b3f903ac500d0b44d0ae890180ae75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69423bf0493441de320ee58c6ac05b7011655710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69423bf0493441de320ee58c6ac05b7011655710", "html_url": "https://github.com/rust-lang/rust/commit/69423bf0493441de320ee58c6ac05b7011655710", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69423bf0493441de320ee58c6ac05b7011655710/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d01ce6a1bf1d4b097fd1ef09daac974f38933f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d01ce6a1bf1d4b097fd1ef09daac974f38933f2", "html_url": "https://github.com/rust-lang/rust/commit/0d01ce6a1bf1d4b097fd1ef09daac974f38933f2"}], "stats": {"total": 114, "additions": 112, "deletions": 2}, "files": [{"sha": "8907b0c160f88ef91ac90654e2ec694083a94290", "filename": "src/test/ui/consts/const-eval/ub-int-array.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/69423bf0493441de320ee58c6ac05b7011655710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69423bf0493441de320ee58c6ac05b7011655710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs?ref=69423bf0493441de320ee58c6ac05b7011655710", "patch": "@@ -0,0 +1,65 @@\n+#![feature(const_transmute)]\n+#![allow(const_err)] // make sure we cannot allow away the errors tested here\n+\n+//! Test the \"array of int\" fast path in validity checking, and in particular whether it\n+//! points at the right array element.\n+\n+use std::mem;\n+\n+#[repr(C)]\n+union MaybeUninit<T: Copy> {\n+    uninit: (),\n+    init: T,\n+}\n+\n+const UNINIT_INT_0: [u32; 3] = unsafe {\n+//~^ ERROR it is undefined behavior to use this value\n+//~| type validation failed: encountered uninitialized bytes at [0]\n+    [\n+        MaybeUninit { uninit: () }.init,\n+        1,\n+        2,\n+    ]\n+};\n+const UNINIT_INT_1: [u32; 3] = unsafe {\n+//~^ ERROR it is undefined behavior to use this value\n+//~| type validation failed: encountered uninitialized bytes at [1]\n+    mem::transmute(\n+        [\n+            0u8,\n+            0u8,\n+            0u8,\n+            0u8,\n+            1u8,\n+            MaybeUninit { uninit: () }.init,\n+            1u8,\n+            1u8,\n+            2u8,\n+            2u8,\n+            MaybeUninit { uninit: () }.init,\n+            2u8,\n+        ]\n+    )\n+};\n+const UNINIT_INT_2: [u32; 3] = unsafe {\n+//~^ ERROR it is undefined behavior to use this value\n+//~| type validation failed: encountered uninitialized bytes at [2]\n+    mem::transmute(\n+        [\n+            0u8,\n+            0u8,\n+            0u8,\n+            0u8,\n+            1u8,\n+            1u8,\n+            1u8,\n+            1u8,\n+            2u8,\n+            2u8,\n+            2u8,\n+            MaybeUninit { uninit: () }.init,\n+        ]\n+    )\n+};\n+\n+fn main() {}"}, {"sha": "b4a3c63b5a103f71f74a04249a2da36b0f548a06", "filename": "src/test/ui/consts/const-eval/ub-int-array.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/69423bf0493441de320ee58c6ac05b7011655710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69423bf0493441de320ee58c6ac05b7011655710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr?ref=69423bf0493441de320ee58c6ac05b7011655710", "patch": "@@ -0,0 +1,45 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-int-array.rs:15:1\n+   |\n+LL | / const UNINIT_INT_0: [u32; 3] = unsafe {\n+LL | |\n+LL | |\n+LL | |     [\n+...  |\n+LL | |     ]\n+LL | | };\n+   | |__^ type validation failed: encountered uninitialized bytes at [0]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-int-array.rs:24:1\n+   |\n+LL | / const UNINIT_INT_1: [u32; 3] = unsafe {\n+LL | |\n+LL | |\n+LL | |     mem::transmute(\n+...  |\n+LL | |     )\n+LL | | };\n+   | |__^ type validation failed: encountered uninitialized bytes at [1]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-int-array.rs:44:1\n+   |\n+LL | / const UNINIT_INT_2: [u32; 3] = unsafe {\n+LL | |\n+LL | |\n+LL | |     mem::transmute(\n+...  |\n+LL | |     )\n+LL | | };\n+   | |__^ type validation failed: encountered uninitialized bytes at [2]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "10f4c8c03330ebdaa9498752c70161c9499b5c83", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69423bf0493441de320ee58c6ac05b7011655710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69423bf0493441de320ee58c6ac05b7011655710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=69423bf0493441de320ee58c6ac05b7011655710", "patch": "@@ -6,11 +6,11 @@ use std::mem;\n \n const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n //~^ ERROR it is undefined behavior to use this value\n-//~^^ type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n+//~| type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n \n const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n //~^ ERROR it is undefined behavior to use this value\n-//~^^ type validation failed: encountered an unaligned box (required 2 byte alignment but found 1)\n+//~| type validation failed: encountered an unaligned box (required 2 byte alignment but found 1)\n \n const NULL: &u16 = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value"}]}