{"sha": "82727b926fdf556f1ef6a7ec745a16600e5928a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNzI3YjkyNmZkZjU1NmYxZWY2YTdlYzc0NWExNjYwMGU1OTI4YTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-16T23:17:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-16T23:17:51Z"}, "message": "Get explicit unique estrs working.", "tree": {"sha": "f085dde1a61cddbc73b623bca64811cd2d87975b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f085dde1a61cddbc73b623bca64811cd2d87975b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82727b926fdf556f1ef6a7ec745a16600e5928a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82727b926fdf556f1ef6a7ec745a16600e5928a8", "html_url": "https://github.com/rust-lang/rust/commit/82727b926fdf556f1ef6a7ec745a16600e5928a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82727b926fdf556f1ef6a7ec745a16600e5928a8/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dea8ae4e6f7d529df85ed9bd56058dbaeb88f83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dea8ae4e6f7d529df85ed9bd56058dbaeb88f83f", "html_url": "https://github.com/rust-lang/rust/commit/dea8ae4e6f7d529df85ed9bd56058dbaeb88f83f"}], "stats": {"total": 115, "additions": 86, "deletions": 29}, "files": [{"sha": "f43d819891aa0187a2677e2df80a68d682930df5", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=82727b926fdf556f1ef6a7ec745a16600e5928a8", "patch": "@@ -290,23 +290,66 @@ upcall_shared_realloc(void *ptr, size_t size) {\n \n /**********************************************************************/\n \n-struct s_str_new_args {\n+struct s_str_new_uniq_args {\n     const char *cstr;\n     size_t len;\n     rust_str *retval;\n };\n \n extern \"C\" CDECL void\n-upcall_s_str_new(s_str_new_args *args) {\n+upcall_s_str_new_uniq(s_str_new_uniq_args *args) {\n     rust_task *task = rust_get_current_task();\n     LOG_UPCALL_ENTRY(task);\n-    args->retval = make_str(task->kernel, args->cstr, args->len, \"str_new\");\n+    args->retval = make_str(task->kernel, args->cstr, args->len,\n+                            \"str_new_uniq\");\n }\n \n+extern \"C\" CDECL rust_str*\n+upcall_str_new_uniq(const char *cstr, size_t len) {\n+    s_str_new_uniq_args args = { cstr, len, 0 };\n+    UPCALL_SWITCH_STACK(&args, upcall_s_str_new_uniq);\n+    return args.retval;\n+}\n+\n+// FIXME: this is an old compatibility-name for upcall_str_new_uniq\n+// can remove after next snapshot.\n extern \"C\" CDECL rust_str*\n upcall_str_new(const char *cstr, size_t len) {\n-    s_str_new_args args = { cstr, len, 0 };\n-    UPCALL_SWITCH_STACK(&args, upcall_s_str_new);\n+    s_str_new_uniq_args args = { cstr, len, 0 };\n+    UPCALL_SWITCH_STACK(&args, upcall_s_str_new_uniq);\n+    return args.retval;\n+}\n+\n+\n+\n+struct s_str_new_shared_args {\n+    const char *cstr;\n+    size_t len;\n+    rust_opaque_box *retval;\n+};\n+\n+extern \"C\" CDECL void\n+upcall_s_str_new_shared(s_str_new_shared_args *args) {\n+    rust_task *task = rust_get_current_task();\n+    LOG_UPCALL_ENTRY(task);\n+\n+    size_t str_fill = args->len + 1;\n+    size_t str_alloc = str_fill;\n+    args->retval = (rust_opaque_box *)\n+        task->kernel->malloc(sizeof(rust_opaque_box) +\n+                             vec_size<char>(str_fill),\n+                             \"str_new_shared\");\n+    rust_str *str = (rust_str *)box_body(args->retval);\n+    str->fill = str_fill;\n+    str->alloc = str_alloc;\n+    memcpy(&str->data, args->cstr, args->len);\n+    str->data[args->len] = '\\0';\n+}\n+\n+extern \"C\" CDECL rust_opaque_box*\n+upcall_str_new_shared(const char *cstr, size_t len) {\n+    s_str_new_shared_args args = { cstr, len, 0 };\n+    UPCALL_SWITCH_STACK(&args, upcall_s_str_new_shared);\n     return args.retval;\n }\n "}, {"sha": "aa0082a82be090496afb521d2efe22fbcffe26d9", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=82727b926fdf556f1ef6a7ec745a16600e5928a8", "patch": "@@ -76,6 +76,8 @@ upcall_shared_free\n upcall_shared_realloc\n upcall_vec_grow\n upcall_str_new\n+upcall_str_new_uniq\n+upcall_str_new_shared\n upcall_str_concat\n upcall_call_shim_on_c_stack\n upcall_call_shim_on_rust_stack"}, {"sha": "4379a35f5f6aa244e1f2b564c55fad9c502bfc9e", "filename": "src/rustc/back/abi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fabi.rs?ref=82727b926fdf556f1ef6a7ec745a16600e5928a8", "patch": "@@ -71,6 +71,9 @@ const vec_elt_alloc: int = 1;\n \n const vec_elt_elems: int = 2;\n \n+const slice_elt_base: int = 0;\n+const slice_elt_len: int = 1;\n+\n const worst_case_glue_call_args: int = 7;\n \n const abi_version: uint = 1u;"}, {"sha": "f43ef4a5c125ac06a3909586f6f5b3f3e90295a0", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=82727b926fdf556f1ef6a7ec745a16600e5928a8", "patch": "@@ -17,7 +17,8 @@ type upcalls =\n      shared_realloc: ValueRef,\n      mark: ValueRef,\n      vec_grow: ValueRef,\n-     str_new: ValueRef,\n+     str_new_uniq: ValueRef,\n+     str_new_shared: ValueRef,\n      str_concat: ValueRef,\n      cmp_type: ValueRef,\n      log_type: ValueRef,\n@@ -65,8 +66,10 @@ fn declare_upcalls(targ_cfg: @session::config,\n               d(\"mark\", [T_ptr(T_i8())], int_t),\n           vec_grow:\n               dv(\"vec_grow\", [T_ptr(T_ptr(opaque_vec_t)), int_t]),\n-          str_new:\n-              d(\"str_new\", [T_ptr(T_i8()), int_t], T_ptr(opaque_vec_t)),\n+          str_new_uniq:\n+              d(\"str_new_uniq\", [T_ptr(T_i8()), int_t], T_ptr(opaque_vec_t)),\n+          str_new_shared:\n+              d(\"str_new_shared\", [T_ptr(T_i8()), int_t], T_ptr(T_i8())),\n           str_concat:\n               d(\"str_concat\", [T_ptr(opaque_vec_t), T_ptr(opaque_vec_t)],\n                 T_ptr(opaque_vec_t)),"}, {"sha": "3ce6d9ed62a9c16580036b2913383f489830062a", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=82727b926fdf556f1ef6a7ec745a16600e5928a8", "patch": "@@ -49,7 +49,7 @@ fn trans_opt(bcx: block, o: opt) -> opt_result {\n           ast::expr_lit(@{node: ast::lit_str(s), _}) {\n             let strty = ty::mk_str(bcx.tcx());\n             let cell = empty_dest_cell();\n-            bcx = tvec::trans_str(bcx, s, by_val(cell));\n+            bcx = tvec::trans_estr(bcx, s, ast::vstore_uniq, by_val(cell));\n             add_clean_temp(bcx, *cell, strty);\n             ret single_result(rslt(bcx, *cell));\n           }"}, {"sha": "2a57766d66f600518f06589e51feb40f02e364f3", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=82727b926fdf556f1ef6a7ec745a16600e5928a8", "patch": "@@ -673,10 +673,11 @@ fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n     let ccx = bcx.ccx();\n     let bcx = alt ty::get(t).struct {\n       ty::ty_box(_) | ty::ty_opaque_box |\n-      ty::ty_estr(ty::vstore_box) {\n+      ty::ty_estr(ty::vstore_box) | ty::ty_evec(_, ty::vstore_box) {\n         decr_refcnt_maybe_free(bcx, Load(bcx, v0), t)\n       }\n-      ty::ty_uniq(_) | ty::ty_vec(_) | ty::ty_str {\n+      ty::ty_uniq(_) | ty::ty_vec(_) | ty::ty_str |\n+      ty::ty_evec(_, ty::vstore_uniq) | ty::ty_estr(ty::vstore_uniq) {\n         free_ty(bcx, Load(bcx, v0), t)\n       }\n       ty::ty_res(did, inner, tps) {\n@@ -1328,7 +1329,7 @@ fn trans_lit(cx: block, lit: ast::lit, dest: dest) -> block {\n     let _icx = cx.insn_ctxt(\"trans_lit\");\n     if dest == ignore { ret cx; }\n     alt lit.node {\n-      ast::lit_str(s) { tvec::trans_str(cx, s, dest) }\n+      ast::lit_str(s) { tvec::trans_estr(cx, s, ast::vstore_uniq, dest) }\n       _ {\n         store_in_dest(cx, trans_crate_lit(cx.ccx(), lit), dest)\n       }\n@@ -2294,16 +2295,18 @@ fn trans_index(cx: block, ex: @ast::expr, base: @ast::expr,\n         let body = GEPi(bcx, v, [0, 0]);\n         (lim, body)\n       }\n+\n       ty::ty_estr(ty::vstore_slice(_)) |\n       ty::ty_evec(_, ty::vstore_slice(_)) {\n-        let body = Load(bcx, GEPi(bcx, v, [0, 0]));\n-        let lim = Load(bcx, GEPi(bcx, v, [0, 1]));\n+        let body = Load(bcx, GEPi(bcx, v, [0, abi::slice_elt_base]));\n+        let lim = Load(bcx, GEPi(bcx, v, [0, abi::slice_elt_len]));\n         (lim, body)\n       }\n \n-      ty::ty_estr(_) | ty::ty_evec(_, _) {\n+      ty::ty_estr(ty::vstore_box) | ty::ty_evec(_, ty::vstore_box) {\n         bcx.sess().unimpl(#fmt(\"unsupported evec/estr type trans_index\"));\n       }\n+\n       _ {\n         let lim = tvec::get_fill(bcx, v);\n         let body = tvec::get_dataptr(bcx, v, type_of(ccx, unit_ty));"}, {"sha": "50224c0d413e2a5403fb84e3a8ed0ba3f84556f5", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=82727b926fdf556f1ef6a7ec745a16600e5928a8", "patch": "@@ -134,7 +134,7 @@ fn trans_vstore(bcx: block, e: @ast::expr,\n                 v: ast::vstore, dest: dest) -> block {\n     alt e.node {\n       ast::expr_lit(@{node: ast::lit_str(s), span: _}) {\n-        ret trans_estr(bcx, s, v, e.span, dest);\n+        ret trans_estr(bcx, s, v, dest);\n       }\n       ast::expr_vec(es, mutbl) {\n         bcx.ccx().sess.span_unimpl(e.span, \"unhandled tvec::trans_vstore\");\n@@ -146,7 +146,7 @@ fn trans_vstore(bcx: block, e: @ast::expr,\n }\n \n fn trans_estr(bcx: block, s: str, vstore: ast::vstore,\n-              sp: span, dest: dest) -> block {\n+              dest: dest) -> block {\n     let _icx = bcx.insn_ctxt(\"tvec::trans_estr\");\n     let ccx = bcx.ccx();\n \n@@ -165,24 +165,23 @@ fn trans_estr(bcx: block, s: str, vstore: ast::vstore,\n         C_struct([cs, C_uint(ccx, str::len(s))])\n       }\n \n-      _ {\n-        bcx.ccx().sess.span_unimpl(sp, \"unhandled tvec::trans_estr\");\n+      ast::vstore_uniq {\n+        let cs = PointerCast(bcx, C_cstr(ccx, s), T_ptr(T_i8()));\n+        let len = C_uint(ccx, str::len(s));\n+        Call(bcx, ccx.upcalls.str_new_uniq, [cs, len])\n+      }\n+\n+      ast::vstore_box {\n+        let cs = PointerCast(bcx, C_cstr(ccx, s), T_ptr(T_i8()));\n+        let len = C_uint(ccx, str::len(s));\n+        Call(bcx, ccx.upcalls.str_new_shared, [cs, len])\n       }\n     };\n \n     #debug(\"trans_estr: type: %s\", val_str(ccx.tn, c));\n     base::store_in_dest(bcx, c, dest)\n }\n \n-fn trans_str(bcx: block, s: str, dest: dest) -> block {\n-    let _icx = bcx.insn_ctxt(\"tvec::trans_str\");\n-    let ccx = bcx.ccx();\n-    let cs = PointerCast(bcx, C_cstr(ccx, s), T_ptr(T_i8()));\n-    let len = C_uint(ccx, str::len(s));\n-    let n = Call(bcx, ccx.upcalls.str_new, [cs, len]);\n-    ret base::store_in_dest(bcx, n, dest);\n-}\n-\n fn trans_append(bcx: block, vec_ty: ty::t, lhsptr: ValueRef,\n                 rhs: ValueRef) -> block {\n     let _icx = bcx.insn_ctxt(\"tvec::trans_append\");"}, {"sha": "07b7fcf58d6ea1d4cc8cee3aae0300aa0a1ad68e", "filename": "src/test/run-pass/estr-uniq.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82727b926fdf556f1ef6a7ec745a16600e5928a8/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-uniq.rs?ref=82727b926fdf556f1ef6a7ec745a16600e5928a8", "patch": "@@ -1,4 +1,8 @@\n-// xfail-test\n fn main() {\n     let x : str/~ = \"hello\"/~;\n+    let _y : str/~ = \"there\"/~;\n+    let mut z = \"thing\"/~;\n+    z = x;\n+    assert z[0] == ('h' as u8);\n+    assert z[4] == ('o' as u8);\n }"}]}