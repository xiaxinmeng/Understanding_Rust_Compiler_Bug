{"sha": "d64ff983110fed10a7a3351ad156091cfaf3203b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NGZmOTgzMTEwZmVkMTBhN2EzMzUxYWQxNTYwOTFjZmFmMzIwM2I=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-06T18:40:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-06T18:40:04Z"}, "message": "Revert \"core: Remove swappable. Unused\" due to test failures\n\nThis reverts commit ec5cbb4f5e951fcc51362c557b1968a57be36afc.", "tree": {"sha": "9ca1c0cdeaba80a8b60ded5da796b880daea99ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca1c0cdeaba80a8b60ded5da796b880daea99ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d64ff983110fed10a7a3351ad156091cfaf3203b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d64ff983110fed10a7a3351ad156091cfaf3203b", "html_url": "https://github.com/rust-lang/rust/commit/d64ff983110fed10a7a3351ad156091cfaf3203b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d64ff983110fed10a7a3351ad156091cfaf3203b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53e633bd5f9f733fb49ce556d16058baa1453f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53e633bd5f9f733fb49ce556d16058baa1453f5", "html_url": "https://github.com/rust-lang/rust/commit/d53e633bd5f9f733fb49ce556d16058baa1453f5"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "84cebcceccd827ee292c09e4aa4e507238a94cc4", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64ff983110fed10a7a3351ad156091cfaf3203b/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d64ff983110fed10a7a3351ad156091cfaf3203b/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=d64ff983110fed10a7a3351ad156091cfaf3203b", "patch": "@@ -43,6 +43,7 @@ export comm, task, future;\n export extfmt;\n export tuple;\n export to_str;\n+export swappable;\n export dvec, dvec_iter;\n \n // NDM seems to be necessary for resolve to work\n@@ -163,6 +164,7 @@ mod option_iter {\n }\n mod result;\n mod to_str;\n+mod swappable;\n mod dvec;\n #[path=\"iter-trait\"]\n mod dvec_iter {"}, {"sha": "5df9b2c4846313d866b7b9a016eb98ac6f201632", "filename": "src/libcore/swappable.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d64ff983110fed10a7a3351ad156091cfaf3203b/src%2Flibcore%2Fswappable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64ff983110fed10a7a3351ad156091cfaf3203b/src%2Flibcore%2Fswappable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fswappable.rs?ref=d64ff983110fed10a7a3351ad156091cfaf3203b", "patch": "@@ -0,0 +1,98 @@\n+export swappable;\n+export unwrap;\n+export methods;\n+\n+#[doc = \"\n+A value that may be swapped out temporarily while it is being processed\n+and then replaced.  Swappables are most useful when working with unique\n+values, which often cannot be mutated unless they are stored in the local\n+stack frame to ensure memory safety.\n+\n+The type guarantees the invariant that the value is always \\\"swapped in\\\"\n+except during the execution of the `swap()` and `with()` methods.\n+\"]\n+type swappable<A> = {\n+    mut o_t: option<A>\n+};\n+\n+#[doc = \"Create a swappable swapped in with a given initial value\"]\n+fn swappable<A>(+t: A) -> swappable<A> {\n+    {mut o_t: some(t)}\n+}\n+\n+#[doc = \"Consumes a swappable and returns its contents without copying\"]\n+fn unwrap<A>(-s: swappable<A>) -> A {\n+    let {o_t: o_t} <- s;\n+    option::unwrap(o_t)\n+}\n+\n+impl methods<A> for swappable<A> {\n+    #[doc = \"\n+         Overwrites the contents of the swappable\n+    \"]\n+    fn set(+a: A) {\n+        self.o_t <- some(a);\n+    }\n+\n+    #[doc = \"\n+         Invokes `f()` with the current value but replaces the\n+         current value when complete.  Returns the result of `f()`.\n+\n+         Attempts to read or access the receiver while `f()` is executing\n+         will fail dynamically.\n+    \"]\n+    fn with<B>(f: fn(A) -> B) -> B {\n+        let mut o_u = none;\n+        self.swap { |t| o_u <- some(f(t)); t }\n+        option::unwrap(o_u)\n+    }\n+\n+    #[doc = \"\n+         Invokes `f()` with the current value and then replaces the\n+         current value with the result of `f()`.\n+\n+         Attempts to read or access the receiver while `f()` is executing\n+         will fail dynamically.\n+    \"]\n+    fn swap(f: fn(-A) -> A) {\n+        alt self.o_t {\n+          none { fail \"no value present---already swapped?\"; }\n+          some(_) {}\n+        }\n+\n+        let mut o_t = none;\n+        o_t <-> self.o_t;\n+        self.o_t <- some(f(option::unwrap(o_t)));\n+    }\n+\n+    #[doc = \"True if there is a value present in this swappable\"]\n+    fn is_present() -> bool {\n+        alt self.o_t {\n+          none {false}\n+          some(_) {true}\n+        }\n+    }\n+\n+    #[doc = \"\n+        Removes the value from the swappable.  Any further attempts\n+        to use the swapabble without first invoking `set()` will fail.\n+    \"]\n+    fn take() -> A {\n+        alt self.o_t {\n+          none { fail \"swapped out\"; }\n+          some(_) {}\n+        }\n+\n+        let mut o_t = none;\n+        option::unwrap(o_t)\n+    }\n+}\n+\n+impl methods<A:copy> for swappable<A> {\n+    #[doc = \"\n+        Copies out the contents of the swappable\n+    \"]\n+    fn get() -> A {\n+        self.o_t.get()\n+    }\n+}\n\\ No newline at end of file"}]}