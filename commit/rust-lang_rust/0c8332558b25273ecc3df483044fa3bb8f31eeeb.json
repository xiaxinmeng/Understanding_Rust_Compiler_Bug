{"sha": "0c8332558b25273ecc3df483044fa3bb8f31eeeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjODMzMjU1OGIyNTI3M2VjYzNkZjQ4MzA0NGZhM2JiOGYzMWVlZWI=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-08-29T06:17:36Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-08-29T06:17:36Z"}, "message": "Merge branch 'master' into fix-4437", "tree": {"sha": "28b906bbd6b03182ba380c22030cc01555820d39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28b906bbd6b03182ba380c22030cc01555820d39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c8332558b25273ecc3df483044fa3bb8f31eeeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8332558b25273ecc3df483044fa3bb8f31eeeb", "html_url": "https://github.com/rust-lang/rust/commit/0c8332558b25273ecc3df483044fa3bb8f31eeeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c8332558b25273ecc3df483044fa3bb8f31eeeb/comments", "author": null, "committer": null, "parents": [{"sha": "23336adf849bc975e157f4034ee968d7fc40dc37", "url": "https://api.github.com/repos/rust-lang/rust/commits/23336adf849bc975e157f4034ee968d7fc40dc37", "html_url": "https://github.com/rust-lang/rust/commit/23336adf849bc975e157f4034ee968d7fc40dc37"}, {"sha": "4c8a941dafff56a2485258b85b33ba33e66f6258", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8a941dafff56a2485258b85b33ba33e66f6258", "html_url": "https://github.com/rust-lang/rust/commit/4c8a941dafff56a2485258b85b33ba33e66f6258"}], "stats": {"total": 861, "additions": 680, "deletions": 181}, "files": [{"sha": "bf681a49b98d434490586eba83febddfac8d2e21", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -145,13 +145,28 @@ using that version of Rust.\n \n You can use [rustup-toolchain-install-master][rtim] to do that:\n \n-```\n+```bash\n cargo install rustup-toolchain-install-master\n rustup-toolchain-install-master -n master --force\n rustup override set master\n cargo test\n ```\n \n+After fixing the build failure on this repository, we can submit a pull request\n+to [`rust-lang/rust`] to fix the toolstate.\n+\n+To submit a pull request, you should follow these steps:\n+\n+```bash\n+# Assuming you already cloned the rust-lang/rust repo and you're in the correct directory\n+git submodule update --remote src/tools/clippy\n+cargo update -p clippy\n+git add -u\n+git commit -m \"Update Clippy\"\n+./x.py test -i --stage 1 src/tools/clippy # This is optional and should succeed anyway\n+# Open a PR in rust-lang/rust\n+```\n+\n ## Issue and PR triage\n \n Clippy is following the [Rust triage procedure][triage] for issues and pull\n@@ -211,3 +226,4 @@ or the [MIT](http://opensource.org/licenses/MIT) license.\n [homu]: https://github.com/servo/homu\n [homu_instructions]: https://buildbot2.rust-lang.org/homu/\n [homu_queue]: https://buildbot2.rust-lang.org/homu/queue/clippy\n+[`rust-lang/rust`]: https://github.com/rust-lang/rust"}, {"sha": "1e1e4317e34ec48687c4c4da5762cfb453013088", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -47,8 +47,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ByteCount {\n             then {\n                 let body = cx.tcx.hir().body(body_id);\n                 if_chain! {\n-                    if body.arguments.len() == 1;\n-                    if let Some(argname) = get_pat_name(&body.arguments[0].pat);\n+                    if body.params.len() == 1;\n+                    if let Some(argname) = get_pat_name(&body.params[0].pat);\n                     if let ExprKind::Binary(ref op, ref l, ref r) = body.value.node;\n                     if op.node == BinOpKind::Eq;\n                     if match_type(cx,"}, {"sha": "e174cdfb86033f92095752bcc83bb53de3dabc7d", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -108,7 +108,7 @@ fn is_argument(map: &hir::map::Map<'_>, id: HirId) -> bool {\n     }\n \n     match map.find(map.get_parent_node(id)) {\n-        Some(Node::Arg(_)) => true,\n+        Some(Node::Param(_)) => true,\n         _ => false,\n     }\n }"}, {"sha": "485a29ed3d89c80e77874965065a7278ee493a0b", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -202,7 +202,10 @@ fn get_type_name(cx: &LateContext<'_, '_>, ty: Ty<'_>) -> String {\n     }\n }\n \n-fn compare_inputs(closure_inputs: &mut dyn Iterator<Item = &Arg>, call_args: &mut dyn Iterator<Item = &Expr>) -> bool {\n+fn compare_inputs(\n+    closure_inputs: &mut dyn Iterator<Item = &Param>,\n+    call_args: &mut dyn Iterator<Item = &Expr>,\n+) -> bool {\n     for (closure_input, function_arg) in closure_inputs.zip(call_args) {\n         if let PatKind::Binding(_, _, ident, _) = closure_input.pat.node {\n             // XXXManishearth Should I be checking the binding mode here?"}, {"sha": "e009d28db68509cbcfb6317e8968c72dd5487eb5", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -280,7 +280,7 @@ impl<'a, 'tcx> Functions {\n     }\n }\n \n-fn raw_ptr_arg(arg: &hir::Arg, ty: &hir::Ty) -> Option<hir::HirId> {\n+fn raw_ptr_arg(arg: &hir::Param, ty: &hir::Ty) -> Option<hir::HirId> {\n     if let (&hir::PatKind::Binding(_, id, _, _), &hir::TyKind::Ptr(_)) = (&arg.pat.node, &ty.node) {\n         Some(id)\n     } else {"}, {"sha": "26b9657589f38eee3870d25162190ee7fda6e6ea", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -104,6 +104,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InherentToString {\n             if impl_item.ident.name.as_str() == \"to_string\";\n             let decl = &signature.decl;\n             if decl.implicit_self.has_implicit_self();\n+            if decl.inputs.len() == 1;\n \n             // Check if return type is String\n             if match_type(cx, return_ty(cx, impl_item.hir_id), &paths::STRING);"}, {"sha": "0ad7c26f84926eac2e392735e1313ed455c62dd2", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -312,6 +312,14 @@ declare_clippy_lint! {\n     /// for i in 0..v.len() { foo(v[i]); }\n     /// for i in 0..v.len() { bar(i, v[i]); }\n     /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// # let v = vec![1];\n+    /// # fn foo(bar: usize) {}\n+    /// # fn bar(bar: usize, baz: usize) {}\n+    /// for item in &v { foo(*item); }\n+    /// for (i, item) in v.iter().enumerate() { bar(i, *item); }\n+    /// ```\n     pub EXPLICIT_COUNTER_LOOP,\n     complexity,\n     \"for-looping with an explicit counter when `_.enumerate()` would do\""}, {"sha": "5c44346aa6df549ef180e19b447ca2d82fc4f7db", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapClone {\n             let closure_body = cx.tcx.hir().body(body_id);\n             let closure_expr = remove_blocks(&closure_body.value);\n             then {\n-                match closure_body.arguments[0].pat.node {\n+                match closure_body.params[0].pat.node {\n                     hir::PatKind::Ref(ref inner, _) => if let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated, .., name, None\n                     ) = inner.node {"}, {"sha": "0df14c2664aefadd814112099896ab245d55f406", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -161,7 +161,10 @@ fn reduce_unit_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a hir::Expr) ->\n     }\n }\n \n-fn unit_closure<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'a hir::Expr) -> Option<(&'tcx hir::Arg, &'a hir::Expr)> {\n+fn unit_closure<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'a hir::Expr,\n+) -> Option<(&'tcx hir::Param, &'a hir::Expr)> {\n     if let hir::ExprKind::Closure(_, ref decl, inner_expr_id, _, _) = expr.node {\n         let body = cx.tcx.hir().body(inner_expr_id);\n         let body_expr = &body.value;"}, {"sha": "81a8e69220c168f2ed2dcad66f88cdd073913ce3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -302,6 +302,11 @@ declare_clippy_lint! {\n     /// # let vec = vec![1];\n     /// vec.iter().filter(|x| **x == 0).next();\n     /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// # let vec = vec![1];\n+    /// vec.iter().find(|x| **x == 0);\n+    /// ```\n     pub FILTER_NEXT,\n     complexity,\n     \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\"\n@@ -425,6 +430,11 @@ declare_clippy_lint! {\n     /// # let vec = vec![1];\n     /// vec.iter().find(|x| **x == 0).is_some();\n     /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// # let vec = vec![1];\n+    /// vec.iter().any(|x| *x == 0);\n+    /// ```\n     pub SEARCH_IS_SOME,\n     complexity,\n     \"using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\"\n@@ -442,7 +452,12 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// let name = \"foo\";\n-    /// name.chars().next() == Some('_');\n+    /// if name.chars().next() == Some('_') {};\n+    /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// let name = \"foo\";\n+    /// if name.starts_with('_') {};\n     /// ```\n     pub CHARS_NEXT_CMP,\n     complexity,\n@@ -889,6 +904,10 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let _ = [1, 2, 3].into_iter().map(|x| *x).collect::<Vec<u32>>();\n     /// ```\n+    /// Could be written as:\n+    /// ```rust\n+    /// let _ = [1, 2, 3].iter().map(|x| *x).collect::<Vec<u32>>();\n+    /// ```\n     pub INTO_ITER_ON_ARRAY,\n     correctness,\n     \"using `.into_iter()` on an array\"\n@@ -1713,8 +1732,8 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n             if bin_op.node == op;\n \n             // Extract the names of the two arguments to the closure\n-            if let Some(first_arg_ident) = get_arg_name(&closure_body.arguments[0].pat);\n-            if let Some(second_arg_ident) = get_arg_name(&closure_body.arguments[1].pat);\n+            if let Some(first_arg_ident) = get_arg_name(&closure_body.params[0].pat);\n+            if let Some(second_arg_ident) = get_arg_name(&closure_body.params[1].pat);\n \n             if match_var(&*left_expr, first_arg_ident);\n             if replacement_has_args || match_var(&*right_expr, second_arg_ident);\n@@ -2326,7 +2345,7 @@ fn lint_flat_map_identity<'a, 'tcx>(\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = arg_node;\n             let body = cx.tcx.hir().body(*body_id);\n \n-            if let hir::PatKind::Binding(_, _, binding_ident, _) = body.arguments[0].pat.node;\n+            if let hir::PatKind::Binding(_, _, binding_ident, _) = body.params[0].pat.node;\n             if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = body.value.node;\n \n             if path.segments.len() == 1;\n@@ -2371,7 +2390,7 @@ fn lint_search_is_some<'a, 'tcx>(\n                 if search_method == \"find\";\n                 if let hir::ExprKind::Closure(_, _, body_id, ..) = search_args[1].node;\n                 let closure_body = cx.tcx.hir().body(body_id);\n-                if let Some(closure_arg) = closure_body.arguments.get(0);\n+                if let Some(closure_arg) = closure_body.params.get(0);\n                 if let hir::PatKind::Ref(..) = closure_arg.pat.node;\n                 then {\n                     Some(search_snippet.replacen('&', \"\", 1))\n@@ -2781,7 +2800,10 @@ impl SelfKind {\n                 hir::Mutability::MutMutable => &paths::ASMUT_TRAIT,\n             };\n \n-            let trait_def_id = get_trait_def_id(cx, trait_path).expect(\"trait def id not found\");\n+            let trait_def_id = match get_trait_def_id(cx, trait_path) {\n+                Some(did) => did,\n+                None => return false,\n+            };\n             implements_trait(cx, ty, trait_def_id, &[parent_ty.into()])\n         }\n "}, {"sha": "1d562566fdf881e7d43f41f997188b09133a4f0d", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -17,7 +17,7 @@ pub(super) fn lint(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::Expr\n \n     if let hir::ExprKind::Closure(_, _, body_id, ..) = args[1].node {\n         let body = cx.tcx.hir().body(body_id);\n-        let arg_id = body.arguments[0].pat.hir_id;\n+        let arg_id = body.params[0].pat.hir_id;\n         let mutates_arg = match mutated_variables(&body.value, cx) {\n             Some(used_mutably) => used_mutably.contains(&arg_id),\n             None => true,"}, {"sha": "b9c05bb2bd3342391537dc335f3ab2b7cd047684", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -105,6 +105,12 @@ declare_clippy_lint! {\n     /// # let y = String::from(\"foo\");\n     /// if x.to_owned() == y {}\n     /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// # let x = \"foo\";\n+    /// # let y = String::from(\"foo\");\n+    /// if x == y {}\n+    /// ```\n     pub CMP_OWNED,\n     perf,\n     \"creating owned instances for comparing with others, e.g., `x == \\\"foo\\\".to_string()`\""}, {"sha": "6ff2a404579767025bac63c71c4cdedbfa9b9d4b", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 73, "deletions": 73, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -6,7 +6,6 @@ use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, Lin\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n-use std::char;\n use syntax::ast::*;\n use syntax::source_map::Span;\n use syntax::visit::{walk_expr, FnKind, Visitor};\n@@ -391,92 +390,93 @@ impl EarlyLintPass for MiscEarlyLints {\n \n impl MiscEarlyLints {\n     fn check_lit(self, cx: &EarlyContext<'_>, lit: &Lit) {\n-        if_chain! {\n-            if let LitKind::Int(value, ..) = lit.node;\n-            if let Some(src) = snippet_opt(cx, lit.span);\n-            if let Some(firstch) = src.chars().next();\n-            if char::to_digit(firstch, 10).is_some();\n-            then {\n-                let mut prev = '\\0';\n-                for (idx, ch) in src.chars().enumerate() {\n-                    if ch == 'i' || ch == 'u' {\n-                        if prev != '_' {\n-                            span_lint_and_sugg(\n-                                cx,\n-                                UNSEPARATED_LITERAL_SUFFIX,\n-                                lit.span,\n-                                \"integer type suffix should be separated by an underscore\",\n-                                \"add an underscore\",\n-                                format!(\"{}_{}\", &src[0..idx], &src[idx..]),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                        break;\n-                    }\n-                    prev = ch;\n+        // The `line!()` macro is compiler built-in and a special case for these lints.\n+        let lit_snip = match snippet_opt(cx, lit.span) {\n+            Some(snip) => {\n+                if snip.contains('!') {\n+                    return;\n                 }\n-                if src.starts_with(\"0x\") {\n-                    let mut seen = (false, false);\n-                    for ch in src.chars() {\n-                        match ch {\n-                            'a' ..= 'f' => seen.0 = true,\n-                            'A' ..= 'F' => seen.1 = true,\n-                            'i' | 'u'   => break,   // start of suffix already\n-                            _ => ()\n-                        }\n+                snip\n+            },\n+            _ => return,\n+        };\n+\n+        if let LitKind::Int(value, lit_int_type) = lit.node {\n+            let suffix = match lit_int_type {\n+                LitIntType::Signed(ty) => ty.ty_to_string(),\n+                LitIntType::Unsigned(ty) => ty.ty_to_string(),\n+                LitIntType::Unsuffixed => \"\",\n+            };\n+\n+            let maybe_last_sep_idx = lit_snip.len() - suffix.len() - 1;\n+            // Do not lint when literal is unsuffixed.\n+            if !suffix.is_empty() && lit_snip.as_bytes()[maybe_last_sep_idx] != b'_' {\n+                span_lint_and_sugg(\n+                    cx,\n+                    UNSEPARATED_LITERAL_SUFFIX,\n+                    lit.span,\n+                    \"integer type suffix should be separated by an underscore\",\n+                    \"add an underscore\",\n+                    format!(\"{}_{}\", &lit_snip[..=maybe_last_sep_idx], suffix),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+\n+            if lit_snip.starts_with(\"0x\") {\n+                let mut seen = (false, false);\n+                for ch in lit_snip.as_bytes()[2..=maybe_last_sep_idx].iter() {\n+                    match ch {\n+                        b'a'..=b'f' => seen.0 = true,\n+                        b'A'..=b'F' => seen.1 = true,\n+                        _ => {},\n                     }\n                     if seen.0 && seen.1 {\n-                        span_lint(cx, MIXED_CASE_HEX_LITERALS, lit.span,\n-                                    \"inconsistent casing in hexadecimal literal\");\n+                        span_lint(\n+                            cx,\n+                            MIXED_CASE_HEX_LITERALS,\n+                            lit.span,\n+                            \"inconsistent casing in hexadecimal literal\",\n+                        );\n+                        break;\n                     }\n-                } else if src.starts_with(\"0b\") || src.starts_with(\"0o\") {\n-                    /* nothing to do */\n-                } else if value != 0 && src.starts_with('0') {\n-                    span_lint_and_then(cx,\n-                                        ZERO_PREFIXED_LITERAL,\n-                                        lit.span,\n-                                        \"this is a decimal constant\",\n-                                        |db| {\n+                }\n+            } else if lit_snip.starts_with(\"0b\") || lit_snip.starts_with(\"0o\") {\n+                /* nothing to do */\n+            } else if value != 0 && lit_snip.starts_with('0') {\n+                span_lint_and_then(\n+                    cx,\n+                    ZERO_PREFIXED_LITERAL,\n+                    lit.span,\n+                    \"this is a decimal constant\",\n+                    |db| {\n                         db.span_suggestion(\n                             lit.span,\n-                            \"if you mean to use a decimal constant, remove the `0` to remove confusion\",\n-                            src.trim_start_matches(|c| c == '_' || c == '0').to_string(),\n+                            \"if you mean to use a decimal constant, remove the `0` to avoid confusion\",\n+                            lit_snip.trim_start_matches(|c| c == '_' || c == '0').to_string(),\n                             Applicability::MaybeIncorrect,\n                         );\n                         db.span_suggestion(\n                             lit.span,\n                             \"if you mean to use an octal constant, use `0o`\",\n-                            format!(\"0o{}\", src.trim_start_matches(|c| c == '_' || c == '0')),\n+                            format!(\"0o{}\", lit_snip.trim_start_matches(|c| c == '_' || c == '0')),\n                             Applicability::MaybeIncorrect,\n                         );\n-                    });\n-                }\n+                    },\n+                );\n             }\n-        }\n-        if_chain! {\n-            if let LitKind::Float(..) = lit.node;\n-            if let Some(src) = snippet_opt(cx, lit.span);\n-            if let Some(firstch) = src.chars().next();\n-            if char::to_digit(firstch, 10).is_some();\n-            then {\n-                let mut prev = '\\0';\n-                for (idx, ch) in src.chars().enumerate() {\n-                    if ch == 'f' {\n-                        if prev != '_' {\n-                            span_lint_and_sugg(\n-                                cx,\n-                                UNSEPARATED_LITERAL_SUFFIX,\n-                                lit.span,\n-                                \"float type suffix should be separated by an underscore\",\n-                                \"add an underscore\",\n-                                format!(\"{}_{}\", &src[0..idx], &src[idx..]),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                        break;\n-                    }\n-                    prev = ch;\n-                }\n+        } else if let LitKind::Float(_, float_ty) = lit.node {\n+            let suffix = float_ty.ty_to_string();\n+            let maybe_last_sep_idx = lit_snip.len() - suffix.len() - 1;\n+            if lit_snip.as_bytes()[maybe_last_sep_idx] != b'_' {\n+                span_lint_and_sugg(\n+                    cx,\n+                    UNSEPARATED_LITERAL_SUFFIX,\n+                    lit.span,\n+                    \"float type suffix should be separated by an underscore\",\n+                    \"add an underscore\",\n+                    format!(\"{}_{}\", &lit_snip[..=maybe_last_sep_idx], suffix),\n+                    Applicability::MachineApplicable,\n+                );\n             }\n         }\n     }"}, {"sha": "33d1fce4e2a61b2eae773945f20ef2b2c4caaa37", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         }\n     }\n \n-    fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, v: &'tcx hir::Variant, _: &hir::Generics) {\n+    fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, v: &'tcx hir::Variant) {\n         self.check_missing_docs_attrs(cx, &v.attrs, v.span, \"a variant\");\n     }\n }"}, {"sha": "b761457f64ce23e035ea042c9dab34085e11e5bb", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -31,6 +31,10 @@ declare_clippy_lint! {\n     ///     true\n     /// }\n     /// ```\n+    /// Could be written as\n+    /// ```rust,ignore\n+    /// !x\n+    /// ```\n     pub NEEDLESS_BOOL,\n     complexity,\n     \"if-statements with plain booleans in the then- and else-clause, e.g., `if p { true } else { false }`\""}, {"sha": "d3ca5cb539a1be08c58168b37af489bdbfdeca50", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n         let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n \n-        for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments).enumerate() {\n+        for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.params).enumerate() {\n             // All spans generated from a proc-macro invocation are the same...\n             if span == input.span {\n                 return;"}, {"sha": "804f86a9a9649830907db947582683290ad6dd1e", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -43,6 +43,11 @@ declare_clippy_lint! {\n     /// # let x = vec![1];\n     /// x.iter().zip(0..x.len());\n     /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// # let x = vec![1];\n+    /// x.iter().enumerate();\n+    /// ```\n     pub RANGE_ZIP_WITH_LEN,\n     complexity,\n     \"zipping iterator with a range when `enumerate()` would do\"\n@@ -64,6 +69,10 @@ declare_clippy_lint! {\n     /// ```rust,ignore\n     /// for x..(y+1) { .. }\n     /// ```\n+    /// Could be written as\n+    /// ```rust,ignore\n+    /// for x..=y { .. }\n+    /// ```\n     pub RANGE_PLUS_ONE,\n     complexity,\n     \"`x..(y+1)` reads better as `x..=y`\"\n@@ -82,6 +91,10 @@ declare_clippy_lint! {\n     /// ```rust,ignore\n     /// for x..=(y-1) { .. }\n     /// ```\n+    /// Could be written as\n+    /// ```rust,ignore\n+    /// for x..y { .. }\n+    /// ```\n     pub RANGE_MINUS_ONE,\n     complexity,\n     \"`x..=(y-1)` reads better as `x..y`\""}, {"sha": "e864518ee598c1e5e5a8f62c389aacbec3e4abd6", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -277,7 +277,7 @@ impl EarlyLintPass for Return {\n         if_chain! {\n             if let Some(ref stmt) = block.stmts.last();\n             if let ast::StmtKind::Expr(ref expr) = stmt.node;\n-            if is_unit_expr(expr) && !expr.span.from_expansion();\n+            if is_unit_expr(expr) && !stmt.span.from_expansion();\n             then {\n                 let sp = expr.span;\n                 span_lint_and_then(cx, UNUSED_UNIT, sp, \"unneeded unit expression\", |db| {"}, {"sha": "80c9a33c06a807bdac2915c31a8a94350b9918db", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -52,6 +52,12 @@ declare_clippy_lint! {\n     /// a = b;\n     /// b = a;\n     /// ```\n+    /// Could be written as:\n+    /// ```rust\n+    /// # let mut a = 1;\n+    /// # let mut b = 2;\n+    /// std::mem::swap(&mut a, &mut b);\n+    /// ```\n     pub ALMOST_SWAPPED,\n     correctness,\n     \"`foo = bar; bar = foo` sequence\""}, {"sha": "28d337d3cd67c1d46e36fb535dc9b8a2441d86a1", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -2056,7 +2056,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                             continue;\n                         }\n                         let generics_suggestion_span = generics.span.substitute_dummy({\n-                            let pos = snippet_opt(cx, item.span.until(body.arguments[0].pat.span))\n+                            let pos = snippet_opt(cx, item.span.until(body.params[0].pat.span))\n                                 .and_then(|snip| {\n                                     let i = snip.find(\"fn\")?;\n                                     Some(item.span.lo() + BytePos((i + (&snip[i..]).find('(')?) as u32))"}, {"sha": "87208dd4beb7bf388d2c99e012e2a1b80739a150", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -90,12 +90,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Author {\n         done();\n     }\n \n-    fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, var: &'tcx hir::Variant, generics: &hir::Generics) {\n+    fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, var: &'tcx hir::Variant) {\n         if !has_attr(cx.sess(), &var.attrs) {\n             return;\n         }\n         prelude();\n-        PrintVisitor::new(\"var\").visit_variant(var, generics, hir::DUMMY_HIR_ID);\n+        PrintVisitor::new(\"var\").visit_variant(var, &hir::Generics::empty(), hir::DUMMY_HIR_ID);\n         done();\n     }\n "}, {"sha": "8fb45899653c0d3d1a740d5f5ff871be42af7a1d", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -261,14 +261,16 @@ pub fn path_to_res(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<(def::Res)\n }\n \n /// Convenience function to get the `DefId` of a trait by path.\n+/// It could be a trait or trait alias.\n pub fn get_trait_def_id(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<DefId> {\n     let res = match path_to_res(cx, path) {\n         Some(res) => res,\n         None => return None,\n     };\n \n     match res {\n-        def::Res::Def(DefKind::Trait, trait_id) => Some(trait_id),\n+        Res::Def(DefKind::Trait, trait_id) | Res::Def(DefKind::TraitAlias, trait_id) => Some(trait_id),\n+        Res::Err => unreachable!(\"this trait resolution is impossible: {:?}\", &path),\n         _ => None,\n     }\n }\n@@ -833,7 +835,7 @@ pub fn remove_blocks(expr: &Expr) -> &Expr {\n     }\n }\n \n-pub fn is_self(slf: &Arg) -> bool {\n+pub fn is_self(slf: &Param) -> bool {\n     if let PatKind::Binding(.., name, _) = slf.pat.node {\n         name.name == kw::SelfLower\n     } else {\n@@ -853,8 +855,8 @@ pub fn is_self_ty(slf: &hir::Ty) -> bool {\n     false\n }\n \n-pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body) -> impl Iterator<Item = &'tcx Arg> {\n-    (0..decl.inputs.len()).map(move |i| &body.arguments[i])\n+pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body) -> impl Iterator<Item = &'tcx Param> {\n+    (0..decl.inputs.len()).map(move |i| &body.params[i])\n }\n \n /// Checks if a given expression is a match expression expanded from the `?`"}, {"sha": "be7bd0d21f69cb4b8ab12ad90b4a4a6497e42016", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -13,7 +13,7 @@ pub fn get_spans(\n     replacements: &[(&'static str, &'static str)],\n ) -> Option<Vec<(Span, Cow<'static, str>)>> {\n     if let Some(body) = opt_body_id.map(|id| cx.tcx.hir().body(id)) {\n-        get_binding_name(&body.arguments[idx]).map_or_else(\n+        get_binding_name(&body.params[idx]).map_or_else(\n             || Some(vec![]),\n             |name| extract_clone_suggestions(cx, name, replacements, body),\n         )\n@@ -80,6 +80,6 @@ impl<'a, 'tcx> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n     }\n }\n \n-fn get_binding_name(arg: &Arg) -> Option<Name> {\n+fn get_binding_name(arg: &Param) -> Option<Name> {\n     get_pat_name(&arg.pat)\n }"}, {"sha": "1fb26c66d9fbb8ef78b40c17c277b7e483b232ba", "filename": "doc/adding_lints.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -86,6 +86,8 @@ test. That allows us to check if the output is turning into what we want.\n \n Once we are satisfied with the output, we need to run\n `tests/ui/update-all-references.sh` to update the `.stderr` file for our lint.\n+Please note that, we should run `TESTNAME=ui/foo_functions cargo uitest`\n+every time before running `tests/ui/update-all-references.sh`.\n Running `TESTNAME=ui/foo_functions cargo uitest` should pass then. When we\n commit our lint, we need to commit the generated `.stderr` files, too.\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/author/for_loop.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fauthor%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fauthor%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stderr?ref=23336adf849bc975e157f4034ee968d7fc40dc37"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/author/if.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fauthor%2Fif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fauthor%2Fif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stderr?ref=23336adf849bc975e157f4034ee968d7fc40dc37"}, {"sha": "05fb96339e33e9ff561c1e4e5c067170e1e48c58", "filename": "tests/ui/cmp_owned/with_suggestion.fixed", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.fixed?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -0,0 +1,72 @@\n+// run-rustfix\n+\n+#[warn(clippy::cmp_owned)]\n+#[allow(clippy::unnecessary_operation, clippy::no_effect, unused_must_use, clippy::eq_op)]\n+fn main() {\n+    fn with_to_string(x: &str) {\n+        x != \"foo\";\n+\n+        \"foo\" != x;\n+    }\n+\n+    let x = \"oh\";\n+\n+    with_to_string(x);\n+\n+    x != \"foo\";\n+\n+    x != \"foo\";\n+\n+    42.to_string() == \"42\";\n+\n+    Foo == Foo;\n+\n+    \"abc\".chars().filter(|c| *c != 'X');\n+\n+    \"abc\".chars().filter(|c| *c != 'X');\n+}\n+\n+struct Foo;\n+\n+impl PartialEq for Foo {\n+    // Allow this here, because it emits the lint\n+    // without a suggestion. This is tested in\n+    // `tests/ui/cmp_owned/without_suggestion.rs`\n+    #[allow(clippy::cmp_owned)]\n+    fn eq(&self, other: &Self) -> bool {\n+        self.to_owned() == *other\n+    }\n+}\n+\n+impl ToOwned for Foo {\n+    type Owned = Bar;\n+    fn to_owned(&self) -> Bar {\n+        Bar\n+    }\n+}\n+\n+#[derive(PartialEq)]\n+struct Bar;\n+\n+impl PartialEq<Foo> for Bar {\n+    fn eq(&self, _: &Foo) -> bool {\n+        true\n+    }\n+}\n+\n+impl std::borrow::Borrow<Foo> for Bar {\n+    fn borrow(&self) -> &Foo {\n+        static FOO: Foo = Foo;\n+        &FOO\n+    }\n+}\n+\n+#[derive(PartialEq)]\n+struct Baz;\n+\n+impl ToOwned for Baz {\n+    type Owned = Baz;\n+    fn to_owned(&self) -> Baz {\n+        Baz\n+    }\n+}"}, {"sha": "0a02825ed82f1b858eb1c52a6ceb3981c4effcee", "filename": "tests/ui/cmp_owned/with_suggestion.rs", "status": "renamed", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n+\n #[warn(clippy::cmp_owned)]\n-#[allow(clippy::unnecessary_operation)]\n+#[allow(clippy::unnecessary_operation, clippy::no_effect, unused_must_use, clippy::eq_op)]\n fn main() {\n     fn with_to_string(x: &str) {\n         x != \"foo\".to_string();\n@@ -22,21 +24,15 @@ fn main() {\n     \"abc\".chars().filter(|c| c.to_owned() != 'X');\n \n     \"abc\".chars().filter(|c| *c != 'X');\n-\n-    let x = &Baz;\n-    let y = &Baz;\n-\n-    y.to_owned() == *x;\n-\n-    let x = &&Baz;\n-    let y = &Baz;\n-\n-    y.to_owned() == **x;\n }\n \n struct Foo;\n \n impl PartialEq for Foo {\n+    // Allow this here, because it emits the lint\n+    // without a suggestion. This is tested in\n+    // `tests/ui/cmp_owned/without_suggestion.rs`\n+    #[allow(clippy::cmp_owned)]\n     fn eq(&self, other: &Self) -> bool {\n         self.to_owned() == *other\n     }", "previous_filename": "tests/ui/cmp_owned.rs"}, {"sha": "2f333e6ea8ecbda9d0338ff7cbfa131b518a690c", "filename": "tests/ui/cmp_owned/with_suggestion.stderr", "status": "renamed", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.stderr?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,58 +1,40 @@\n error: this creates an owned instance just for comparison\n-  --> $DIR/cmp_owned.rs:5:14\n+  --> $DIR/with_suggestion.rs:7:14\n    |\n LL |         x != \"foo\".to_string();\n    |              ^^^^^^^^^^^^^^^^^ help: try: `\"foo\"`\n    |\n    = note: `-D clippy::cmp-owned` implied by `-D warnings`\n \n error: this creates an owned instance just for comparison\n-  --> $DIR/cmp_owned.rs:7:9\n+  --> $DIR/with_suggestion.rs:9:9\n    |\n LL |         \"foo\".to_string() != x;\n    |         ^^^^^^^^^^^^^^^^^ help: try: `\"foo\"`\n \n error: this creates an owned instance just for comparison\n-  --> $DIR/cmp_owned.rs:14:10\n+  --> $DIR/with_suggestion.rs:16:10\n    |\n LL |     x != \"foo\".to_owned();\n    |          ^^^^^^^^^^^^^^^^ help: try: `\"foo\"`\n \n error: this creates an owned instance just for comparison\n-  --> $DIR/cmp_owned.rs:16:10\n+  --> $DIR/with_suggestion.rs:18:10\n    |\n LL |     x != String::from(\"foo\");\n    |          ^^^^^^^^^^^^^^^^^^^ help: try: `\"foo\"`\n \n error: this creates an owned instance just for comparison\n-  --> $DIR/cmp_owned.rs:20:5\n+  --> $DIR/with_suggestion.rs:22:5\n    |\n LL |     Foo.to_owned() == Foo;\n    |     ^^^^^^^^^^^^^^ help: try: `Foo`\n \n error: this creates an owned instance just for comparison\n-  --> $DIR/cmp_owned.rs:22:30\n+  --> $DIR/with_suggestion.rs:24:30\n    |\n LL |     \"abc\".chars().filter(|c| c.to_owned() != 'X');\n    |                              ^^^^^^^^^^^^ help: try: `*c`\n \n-error: this creates an owned instance just for comparison\n-  --> $DIR/cmp_owned.rs:29:5\n-   |\n-LL |     y.to_owned() == *x;\n-   |     ^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n-\n-error: this creates an owned instance just for comparison\n-  --> $DIR/cmp_owned.rs:34:5\n-   |\n-LL |     y.to_owned() == **x;\n-   |     ^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n-\n-error: this creates an owned instance just for comparison\n-  --> $DIR/cmp_owned.rs:41:9\n-   |\n-LL |         self.to_owned() == *other\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 6 previous errors\n ", "previous_filename": "tests/ui/cmp_owned.stderr"}, {"sha": "9ab8795474c674912f3f42c4fe1f5a266b814e9e", "filename": "tests/ui/cmp_owned/without_suggestion.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -0,0 +1,52 @@\n+#[allow(clippy::unnecessary_operation)]\n+\n+fn main() {\n+    let x = &Baz;\n+    let y = &Baz;\n+    y.to_owned() == *x;\n+\n+    let x = &&Baz;\n+    let y = &Baz;\n+    y.to_owned() == **x;\n+}\n+\n+struct Foo;\n+\n+impl PartialEq for Foo {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.to_owned() == *other\n+    }\n+}\n+\n+impl ToOwned for Foo {\n+    type Owned = Bar;\n+    fn to_owned(&self) -> Bar {\n+        Bar\n+    }\n+}\n+\n+#[derive(PartialEq)]\n+struct Baz;\n+\n+impl ToOwned for Baz {\n+    type Owned = Baz;\n+    fn to_owned(&self) -> Baz {\n+        Baz\n+    }\n+}\n+\n+#[derive(PartialEq)]\n+struct Bar;\n+\n+impl PartialEq<Foo> for Bar {\n+    fn eq(&self, _: &Foo) -> bool {\n+        true\n+    }\n+}\n+\n+impl std::borrow::Borrow<Foo> for Bar {\n+    fn borrow(&self) -> &Foo {\n+        static FOO: Foo = Foo;\n+        &FOO\n+    }\n+}"}, {"sha": "6e8a5ad2a17b5a6c02ae1dce0815da9c22b4dfa6", "filename": "tests/ui/cmp_owned/without_suggestion.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -0,0 +1,22 @@\n+error: this creates an owned instance just for comparison\n+  --> $DIR/without_suggestion.rs:6:5\n+   |\n+LL |     y.to_owned() == *x;\n+   |     ^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n+   |\n+   = note: `-D clippy::cmp-owned` implied by `-D warnings`\n+\n+error: this creates an owned instance just for comparison\n+  --> $DIR/without_suggestion.rs:10:5\n+   |\n+LL |     y.to_owned() == **x;\n+   |     ^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n+\n+error: this creates an owned instance just for comparison\n+  --> $DIR/without_suggestion.rs:17:9\n+   |\n+LL |         self.to_owned() == *other\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "2a948d60b108954b6a6e31980f960449ac91c835", "filename": "tests/ui/def_id_nocore.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -0,0 +1,29 @@\n+// ignore-windows\n+// ignore-macos\n+\n+#![feature(no_core, lang_items, start)]\n+#![no_core]\n+\n+#[link(name = \"c\")]\n+extern \"C\" {}\n+\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+#[lang = \"copy\"]\n+pub trait Copy {}\n+#[lang = \"freeze\"]\n+pub unsafe trait Freeze {}\n+\n+#[lang = \"start\"]\n+#[start]\n+fn start(_argc: isize, _argv: *const *const u8) -> isize {\n+    0\n+}\n+\n+pub struct A;\n+\n+impl A {\n+    pub fn as_ref(self) -> &'static str {\n+        \"A\"\n+    }\n+}"}, {"sha": "ed87a50547d17398a13790c1ab9ad7e4114aabe0", "filename": "tests/ui/def_id_nocore.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fdef_id_nocore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fdef_id_nocore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.stderr?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -0,0 +1,10 @@\n+error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n+  --> $DIR/def_id_nocore.rs:26:19\n+   |\n+LL |     pub fn as_ref(self) -> &'static str {\n+   |                   ^^^^\n+   |\n+   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/default_trait_access.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fdefault_trait_access.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fdefault_trait_access.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stdout?ref=23336adf849bc975e157f4034ee968d7fc40dc37"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/duration_subsec.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fduration_subsec.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fduration_subsec.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.stdout?ref=23336adf849bc975e157f4034ee968d7fc40dc37"}, {"sha": "e6cf337d1bb1baa932b13f3665cdc8d7764395ee", "filename": "tests/ui/inherent_to_string.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,5 +1,6 @@\n #![warn(clippy::inherent_to_string)]\n #![deny(clippy::inherent_to_string_shadow_display)]\n+#![allow(clippy::many_single_char_names)]\n \n use std::fmt;\n \n@@ -12,6 +13,7 @@ struct B;\n struct C;\n struct D;\n struct E;\n+struct F;\n \n impl A {\n     // Should be detected; emit warning\n@@ -64,6 +66,13 @@ impl E {\n     }\n }\n \n+impl F {\n+    // Should not be detected, as it does not match the function signature\n+    fn to_string(&self, _i: i32) -> String {\n+        \"F.to_string()\".to_string()\n+    }\n+}\n+\n fn main() {\n     let a = A;\n     a.to_string();\n@@ -81,4 +90,7 @@ fn main() {\n     d.to_string();\n \n     E::to_string();\n+\n+    let f = F;\n+    f.to_string(1);\n }"}, {"sha": "76d1bb873ebebd18fdd909324a71e1d49ccdf65d", "filename": "tests/ui/inherent_to_string.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Finherent_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Finherent_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.stderr?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,5 +1,5 @@\n error: implementation of inherent method `to_string(&self) -> String` for type `A`\n-  --> $DIR/inherent_to_string.rs:18:5\n+  --> $DIR/inherent_to_string.rs:20:5\n    |\n LL | /     fn to_string(&self) -> String {\n LL | |         \"A.to_string()\".to_string()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: implement trait `Display` for type `A` instead\n \n error: type `C` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\n-  --> $DIR/inherent_to_string.rs:42:5\n+  --> $DIR/inherent_to_string.rs:44:5\n    |\n LL | /     fn to_string(&self) -> String {\n LL | |         \"C.to_string()\".to_string()"}, {"sha": "33321440d831a9fef5e974bdbac7c46142129a65", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -25,7 +25,7 @@ LL |     let fail_multi_zero = 000_123usize;\n    |                           ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::zero-prefixed-literal` implied by `-D warnings`\n-help: if you mean to use a decimal constant, remove the `0` to remove confusion\n+help: if you mean to use a decimal constant, remove the `0` to avoid confusion\n    |\n LL |     let fail_multi_zero = 123usize;\n    |                           ^^^^^^^^\n@@ -39,7 +39,7 @@ error: this is a decimal constant\n    |\n LL |     let fail8 = 0123;\n    |                 ^^^^\n-help: if you mean to use a decimal constant, remove the `0` to remove confusion\n+help: if you mean to use a decimal constant, remove the `0` to avoid confusion\n    |\n LL |     let fail8 = 123;\n    |                 ^^^"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/missing_const_for_fn/cant_be_const.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr?ref=23336adf849bc975e157f4034ee968d7fc40dc37"}, {"sha": "c572e0f2f4514977da0cf7eb69b733f7ffcc5b92", "filename": "tests/ui/or_fun_call.fixed", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -0,0 +1,102 @@\n+// run-rustfix\n+\n+#![warn(clippy::or_fun_call)]\n+#![allow(dead_code)]\n+\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::time::Duration;\n+\n+/// Checks implementation of the `OR_FUN_CALL` lint.\n+fn or_fun_call() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Foo {\n+            Foo\n+        }\n+    }\n+\n+    enum Enum {\n+        A(i32),\n+    }\n+\n+    fn make<T>() -> T {\n+        unimplemented!();\n+    }\n+\n+    let with_enum = Some(Enum::A(1));\n+    with_enum.unwrap_or(Enum::A(5));\n+\n+    let with_const_fn = Some(Duration::from_secs(1));\n+    with_const_fn.unwrap_or(Duration::from_secs(5));\n+\n+    let with_constructor = Some(vec![1]);\n+    with_constructor.unwrap_or_else(make);\n+\n+    let with_new = Some(vec![1]);\n+    with_new.unwrap_or_default();\n+\n+    let with_const_args = Some(vec![1]);\n+    with_const_args.unwrap_or_else(|| Vec::with_capacity(12));\n+\n+    let with_err: Result<_, ()> = Ok(vec![1]);\n+    with_err.unwrap_or_else(|_| make());\n+\n+    let with_err_args: Result<_, ()> = Ok(vec![1]);\n+    with_err_args.unwrap_or_else(|_| Vec::with_capacity(12));\n+\n+    let with_default_trait = Some(1);\n+    with_default_trait.unwrap_or_default();\n+\n+    let with_default_type = Some(1);\n+    with_default_type.unwrap_or_default();\n+\n+    let with_vec = Some(vec![1]);\n+    with_vec.unwrap_or_else(|| vec![]);\n+\n+    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n+\n+    let without_default = Some(Foo);\n+    without_default.unwrap_or_else(Foo::new);\n+\n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert_with(String::new);\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert_with(String::new);\n+\n+    let stringy = Some(String::from(\"\"));\n+    let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n+\n+    let opt = Some(1);\n+    let hello = \"Hello\";\n+    let _ = opt.ok_or_else(|| format!(\"{} world.\", hello));\n+}\n+\n+struct Foo(u8);\n+struct Bar(String, Duration);\n+#[rustfmt::skip]\n+fn test_or_with_ctors() {\n+    let opt = Some(1);\n+    let opt_opt = Some(Some(1));\n+    // we also test for const promotion, this makes sure we don't hit that\n+    let two = 2;\n+\n+    let _ = opt_opt.unwrap_or(Some(2));\n+    let _ = opt_opt.unwrap_or(Some(two));\n+    let _ = opt.ok_or(Some(2));\n+    let _ = opt.ok_or(Some(two));\n+    let _ = opt.ok_or(Foo(2));\n+    let _ = opt.ok_or(Foo(two));\n+    let _ = opt.or(Some(2));\n+    let _ = opt.or(Some(two));\n+\n+    let _ = Some(\"a\".to_string()).or_else(|| Some(\"b\".to_string()));\n+\n+    let b = \"b\".to_string();\n+    let _ = Some(Bar(\"a\".to_string(), Duration::from_secs(1)))\n+        .or(Some(Bar(b, Duration::from_secs(2))));\n+}\n+\n+fn main() {}"}, {"sha": "3c94542774b12e9adb9383271a4c3f1f3179a3ed", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+\n #![warn(clippy::or_fun_call)]\n+#![allow(dead_code)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "7d60cba383136f9fb8a6dee678da446956e745d9", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,85 +1,85 @@\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:32:22\n+  --> $DIR/or_fun_call.rs:35:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:35:5\n+  --> $DIR/or_fun_call.rs:38:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:38:21\n+  --> $DIR/or_fun_call.rs:41:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:41:14\n+  --> $DIR/or_fun_call.rs:44:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:44:19\n+  --> $DIR/or_fun_call.rs:47:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:47:5\n+  --> $DIR/or_fun_call.rs:50:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:50:5\n+  --> $DIR/or_fun_call.rs:53:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:53:14\n+  --> $DIR/or_fun_call.rs:56:14\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:58:21\n+  --> $DIR/or_fun_call.rs:61:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:61:19\n+  --> $DIR/or_fun_call.rs:64:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:64:21\n+  --> $DIR/or_fun_call.rs:67:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:67:21\n+  --> $DIR/or_fun_call.rs:70:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `ok_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:71:17\n+  --> $DIR/or_fun_call.rs:74:17\n    |\n LL |     let _ = opt.ok_or(format!(\"{} world.\", hello));\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `ok_or_else(|| format!(\"{} world.\", hello))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:92:35\n+  --> $DIR/or_fun_call.rs:95:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`"}, {"sha": null, "filename": "tests/ui/proc_macro.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc_macro.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb"}, {"sha": "badfb5baf3c1160f63df55ccf302d9b873eade35", "filename": "tests/ui/range_plus_minus_one.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Frange_plus_minus_one.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Frange_plus_minus_one.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.fixed?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+\n+#![allow(unused_parens)]\n+\n+fn f() -> usize {\n+    42\n+}\n+\n+#[warn(clippy::range_plus_one)]\n+fn main() {\n+    for _ in 0..2 {}\n+    for _ in 0..=2 {}\n+\n+    for _ in 0..=3 {}\n+    for _ in 0..=3 + 1 {}\n+\n+    for _ in 0..=5 {}\n+    for _ in 0..=1 + 5 {}\n+\n+    for _ in 1..=1 {}\n+    for _ in 1..=1 + 1 {}\n+\n+    for _ in 0..13 + 13 {}\n+    for _ in 0..=13 - 7 {}\n+\n+    for _ in 0..=f() {}\n+    for _ in 0..=(1 + f()) {}\n+\n+    let _ = ..11 - 1;\n+    let _ = ..11;\n+    let _ = ..11;\n+    let _ = (1..=11);\n+    let _ = ((f() + 1)..=f());\n+\n+    let mut vec: Vec<()> = std::vec::Vec::new();\n+    vec.drain(..);\n+}"}, {"sha": "c4facd2c23d94b8e1e64bce5b51821926d7a63e5", "filename": "tests/ui/range_plus_minus_one.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Frange_plus_minus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Frange_plus_minus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(unused_parens)]\n+\n fn f() -> usize {\n     42\n }"}, {"sha": "8318f6b259636bc2d8c42d8f3cb0655cf03d1974", "filename": "tests/ui/range_plus_minus_one.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Frange_plus_minus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Frange_plus_minus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.stderr?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,51 +1,51 @@\n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:10:14\n+  --> $DIR/range_plus_minus_one.rs:14:14\n    |\n LL |     for _ in 0..3 + 1 {}\n    |              ^^^^^^^^ help: use: `0..=3`\n    |\n    = note: `-D clippy::range-plus-one` implied by `-D warnings`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:13:14\n+  --> $DIR/range_plus_minus_one.rs:17:14\n    |\n LL |     for _ in 0..1 + 5 {}\n    |              ^^^^^^^^ help: use: `0..=5`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:16:14\n+  --> $DIR/range_plus_minus_one.rs:20:14\n    |\n LL |     for _ in 1..1 + 1 {}\n    |              ^^^^^^^^ help: use: `1..=1`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:22:14\n+  --> $DIR/range_plus_minus_one.rs:26:14\n    |\n LL |     for _ in 0..(1 + f()) {}\n    |              ^^^^^^^^^^^^ help: use: `0..=f()`\n \n error: an exclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:26:13\n+  --> $DIR/range_plus_minus_one.rs:30:13\n    |\n LL |     let _ = ..=11 - 1;\n    |             ^^^^^^^^^ help: use: `..11`\n    |\n    = note: `-D clippy::range-minus-one` implied by `-D warnings`\n \n error: an exclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:27:13\n+  --> $DIR/range_plus_minus_one.rs:31:13\n    |\n LL |     let _ = ..=(11 - 1);\n    |             ^^^^^^^^^^^ help: use: `..11`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:28:13\n+  --> $DIR/range_plus_minus_one.rs:32:13\n    |\n LL |     let _ = (1..11 + 1);\n    |             ^^^^^^^^^^^ help: use: `(1..=11)`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:29:13\n+  --> $DIR/range_plus_minus_one.rs:33:13\n    |\n LL |     let _ = (f() + 1)..(f() + 1);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: use: `((f() + 1)..=f())`"}, {"sha": "af0a397bd1aff0339695868b93d5d9aa38dd01b8", "filename": "tests/ui/short_circuit_statement.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fshort_circuit_statement.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fshort_circuit_statement.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.fixed?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+\n+#![warn(clippy::short_circuit_statement)]\n+#![allow(clippy::nonminimal_bool)]\n+\n+fn main() {\n+    if f() { g(); }\n+    if !f() { g(); }\n+    if !(1 == 2) { g(); }\n+}\n+\n+fn f() -> bool {\n+    true\n+}\n+\n+fn g() -> bool {\n+    false\n+}"}, {"sha": "73a55bf1f5e27c077c081206069879a47d0cf4b9", "filename": "tests/ui/short_circuit_statement.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fshort_circuit_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fshort_circuit_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+\n #![warn(clippy::short_circuit_statement)]\n+#![allow(clippy::nonminimal_bool)]\n \n fn main() {\n     f() && g();"}, {"sha": "0a3f60c3d132db57852c9cc2190db75f2eb357de", "filename": "tests/ui/short_circuit_statement.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fshort_circuit_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Fshort_circuit_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.stderr?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,19 +1,19 @@\n error: boolean short circuit operator in statement may be clearer using an explicit test\n-  --> $DIR/short_circuit_statement.rs:4:5\n+  --> $DIR/short_circuit_statement.rs:7:5\n    |\n LL |     f() && g();\n    |     ^^^^^^^^^^^ help: replace it with: `if f() { g(); }`\n    |\n    = note: `-D clippy::short-circuit-statement` implied by `-D warnings`\n \n error: boolean short circuit operator in statement may be clearer using an explicit test\n-  --> $DIR/short_circuit_statement.rs:5:5\n+  --> $DIR/short_circuit_statement.rs:8:5\n    |\n LL |     f() || g();\n    |     ^^^^^^^^^^^ help: replace it with: `if !f() { g(); }`\n \n error: boolean short circuit operator in statement may be clearer using an explicit test\n-  --> $DIR/short_circuit_statement.rs:6:5\n+  --> $DIR/short_circuit_statement.rs:9:5\n    |\n LL |     1 == 2 || g();\n    |     ^^^^^^^^^^^^^^ help: replace it with: `if !(1 == 2) { g(); }`"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/slow_vector_initialization.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fslow_vector_initialization.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fslow_vector_initialization.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslow_vector_initialization.stdout?ref=23336adf849bc975e157f4034ee968d7fc40dc37"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/ty_fn_sig.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fty_fn_sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Fty_fn_sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fty_fn_sig.stderr?ref=23336adf849bc975e157f4034ee968d7fc40dc37"}, {"sha": "26bc47257b7954da284b8c58d1c08eb044dba9c3", "filename": "tests/ui/unseparated_prefix_literals.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funseparated_prefix_literals.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funseparated_prefix_literals.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funseparated_prefix_literals.fixed?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -3,6 +3,12 @@\n #![warn(clippy::unseparated_literal_suffix)]\n #![allow(dead_code)]\n \n+macro_rules! lit_from_macro {\n+    () => {\n+        42_usize\n+    };\n+}\n+\n fn main() {\n     let _ok1 = 1234_i32;\n     let _ok2 = 1234_isize;\n@@ -17,4 +23,12 @@ fn main() {\n     let _okf2 = 1_f32;\n     let _failf1 = 1.5_f32;\n     let _failf2 = 1_f32;\n+\n+    // Test for macro\n+    let _ = lit_from_macro!();\n+\n+    // Counter example\n+    let _ = line!();\n+    // Because `assert!` contains `line!()` macro.\n+    assert_eq!(4897_u32, 32223);\n }"}, {"sha": "d710ccd1be2cd36ee546049ff2ef20f1e94b0984", "filename": "tests/ui/unseparated_prefix_literals.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funseparated_prefix_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funseparated_prefix_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funseparated_prefix_literals.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -3,6 +3,12 @@\n #![warn(clippy::unseparated_literal_suffix)]\n #![allow(dead_code)]\n \n+macro_rules! lit_from_macro {\n+    () => {\n+        42usize\n+    };\n+}\n+\n fn main() {\n     let _ok1 = 1234_i32;\n     let _ok2 = 1234_isize;\n@@ -17,4 +23,12 @@ fn main() {\n     let _okf2 = 1_f32;\n     let _failf1 = 1.5f32;\n     let _failf2 = 1f32;\n+\n+    // Test for macro\n+    let _ = lit_from_macro!();\n+\n+    // Counter example\n+    let _ = line!();\n+    // Because `assert!` contains `line!()` macro.\n+    assert_eq!(4897u32, 32223);\n }"}, {"sha": "85f1881949eb72a1dc631f4709a45693ac9a7e46", "filename": "tests/ui/unseparated_prefix_literals.stderr", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funseparated_prefix_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funseparated_prefix_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funseparated_prefix_literals.stderr?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,46 +1,61 @@\n error: integer type suffix should be separated by an underscore\n-  --> $DIR/unseparated_prefix_literals.rs:10:18\n+  --> $DIR/unseparated_prefix_literals.rs:16:18\n    |\n LL |     let _fail1 = 1234i32;\n    |                  ^^^^^^^ help: add an underscore: `1234_i32`\n    |\n    = note: `-D clippy::unseparated-literal-suffix` implied by `-D warnings`\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/unseparated_prefix_literals.rs:11:18\n+  --> $DIR/unseparated_prefix_literals.rs:17:18\n    |\n LL |     let _fail2 = 1234u32;\n    |                  ^^^^^^^ help: add an underscore: `1234_u32`\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/unseparated_prefix_literals.rs:12:18\n+  --> $DIR/unseparated_prefix_literals.rs:18:18\n    |\n LL |     let _fail3 = 1234isize;\n    |                  ^^^^^^^^^ help: add an underscore: `1234_isize`\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/unseparated_prefix_literals.rs:13:18\n+  --> $DIR/unseparated_prefix_literals.rs:19:18\n    |\n LL |     let _fail4 = 1234usize;\n    |                  ^^^^^^^^^ help: add an underscore: `1234_usize`\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/unseparated_prefix_literals.rs:14:18\n+  --> $DIR/unseparated_prefix_literals.rs:20:18\n    |\n LL |     let _fail5 = 0x123isize;\n    |                  ^^^^^^^^^^ help: add an underscore: `0x123_isize`\n \n error: float type suffix should be separated by an underscore\n-  --> $DIR/unseparated_prefix_literals.rs:18:19\n+  --> $DIR/unseparated_prefix_literals.rs:24:19\n    |\n LL |     let _failf1 = 1.5f32;\n    |                   ^^^^^^ help: add an underscore: `1.5_f32`\n \n error: float type suffix should be separated by an underscore\n-  --> $DIR/unseparated_prefix_literals.rs:19:19\n+  --> $DIR/unseparated_prefix_literals.rs:25:19\n    |\n LL |     let _failf2 = 1f32;\n    |                   ^^^^ help: add an underscore: `1_f32`\n \n-error: aborting due to 7 previous errors\n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/unseparated_prefix_literals.rs:8:9\n+   |\n+LL |         42usize\n+   |         ^^^^^^^ help: add an underscore: `42_usize`\n+...\n+LL |     let _ = lit_from_macro!();\n+   |             ----------------- in this macro invocation\n+\n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/unseparated_prefix_literals.rs:33:16\n+   |\n+LL |     assert_eq!(4897u32, 32223);\n+   |                ^^^^^^^ help: add an underscore: `4897_u32`\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "17c1a5de597343d2796cd834b946ab8359f0e9e6", "filename": "tests/ui/unused_unit.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funused_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funused_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.fixed?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -10,6 +10,7 @@\n #![rustfmt::skip]\n \n #![deny(clippy::unused_unit)]\n+#![allow(dead_code)]\n \n struct Unitter;\n impl Unitter {\n@@ -42,3 +43,16 @@ fn main() {\n     }\n     return;\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/4076\n+fn foo() {\n+    macro_rules! foo {\n+        (recv($r:expr) -> $res:pat => $body:expr) => {\n+            $body\n+        }\n+    }\n+\n+    foo! {\n+        recv(rx) -> _x => ()\n+    }\n+}"}, {"sha": "e04c525733752a2fe7a172b7c3705ef78ec620b2", "filename": "tests/ui/unused_unit.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.rs?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -10,6 +10,7 @@\n #![rustfmt::skip]\n \n #![deny(clippy::unused_unit)]\n+#![allow(dead_code)]\n \n struct Unitter;\n impl Unitter {\n@@ -43,3 +44,16 @@ fn main() {\n     }\n     return();\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/4076\n+fn foo() {\n+    macro_rules! foo {\n+        (recv($r:expr) -> $res:pat => $body:expr) => {\n+            $body\n+        }\n+    }\n+\n+    foo! {\n+        recv(rx) -> _x => ()\n+    }\n+}"}, {"sha": "6ef6dc4f5d6c5cc20e58a8644bb1865106f1bef9", "filename": "tests/ui/unused_unit.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funused_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/tests%2Fui%2Funused_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.stderr?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -1,5 +1,5 @@\n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:18:59\n+  --> $DIR/unused_unit.rs:19:59\n    |\n LL |       pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) ->\n    |  ___________________________________________________________^\n@@ -13,37 +13,37 @@ LL | #![deny(clippy::unused_unit)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:28:19\n+  --> $DIR/unused_unit.rs:29:19\n    |\n LL |     fn into(self) -> () {\n    |                   ^^^^^ help: remove the `-> ()`\n \n error: unneeded unit expression\n-  --> $DIR/unused_unit.rs:29:9\n+  --> $DIR/unused_unit.rs:30:9\n    |\n LL |         ()\n    |         ^^ help: remove the final `()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:33:18\n+  --> $DIR/unused_unit.rs:34:18\n    |\n LL | fn return_unit() -> () { () }\n    |                  ^^^^^ help: remove the `-> ()`\n \n error: unneeded unit expression\n-  --> $DIR/unused_unit.rs:33:26\n+  --> $DIR/unused_unit.rs:34:26\n    |\n LL | fn return_unit() -> () { () }\n    |                          ^^ help: remove the final `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:42:14\n+  --> $DIR/unused_unit.rs:43:14\n    |\n LL |         break();\n    |              ^^ help: remove the `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:44:11\n+  --> $DIR/unused_unit.rs:45:11\n    |\n LL |     return();\n    |           ^^ help: remove the `()`"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/unwrap_or.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Funwrap_or.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/23336adf849bc975e157f4034ee968d7fc40dc37/tests%2Fui%2Funwrap_or.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or.stdout?ref=23336adf849bc975e157f4034ee968d7fc40dc37"}, {"sha": "bea5a021aefd3a151b965f2b1c0c229f5bce2b0c", "filename": "util/fetch_prs_between.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8332558b25273ecc3df483044fa3bb8f31eeeb/util%2Ffetch_prs_between.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c8332558b25273ecc3df483044fa3bb8f31eeeb/util%2Ffetch_prs_between.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Ffetch_prs_between.sh?ref=0c8332558b25273ecc3df483044fa3bb8f31eeeb", "patch": "@@ -11,7 +11,7 @@ last=$2\n \n IFS='\n '\n-for pr in $(git log --oneline --grep \"Merge #\" --grep \"Merge pull request\" --grep \"Auto merge of\" \"$first...$last\" | sort -rn | uniq); do\n+for pr in $(git log --oneline --grep \"Merge #\" --grep \"Merge pull request\" --grep \"Auto merge of\" --grep \"Rollup merge of\" \"$first...$last\" | sort -rn | uniq); do\n   id=$(echo $pr | rg -o '#[0-9]{3,5}' | cut -c 2-)\n   commit=$(echo $pr | cut -d' ' -f 1)\n   message=$(git --no-pager show --pretty=medium $commit)"}]}