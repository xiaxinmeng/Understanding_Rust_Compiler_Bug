{"sha": "65b5c15384e7fad8868f375d7f1e6f765db0be21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YjVjMTUzODRlN2ZhZDg4NjhmMzc1ZDdmMWU2Zjc2NWRiMGJlMjE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-06-30T19:37:45Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-06-30T19:37:45Z"}, "message": "Rollup merge of #26651 - GuillaumeGomez:patch-2, r=Manishearth\n\nPart of #24407.\r\ncc @michaelsproul\r\nr? @Manishearth", "tree": {"sha": "05d12fe68de4e875a303ae34522395ea6ef4100a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05d12fe68de4e875a303ae34522395ea6ef4100a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65b5c15384e7fad8868f375d7f1e6f765db0be21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65b5c15384e7fad8868f375d7f1e6f765db0be21", "html_url": "https://github.com/rust-lang/rust/commit/65b5c15384e7fad8868f375d7f1e6f765db0be21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65b5c15384e7fad8868f375d7f1e6f765db0be21/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "825e48fadf4dfe4a5523b3263a276bf066ad299d", "url": "https://api.github.com/repos/rust-lang/rust/commits/825e48fadf4dfe4a5523b3263a276bf066ad299d", "html_url": "https://github.com/rust-lang/rust/commit/825e48fadf4dfe4a5523b3263a276bf066ad299d"}, {"sha": "be38926b6941f13b1f03c2e3523b98dd256b3c7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/be38926b6941f13b1f03c2e3523b98dd256b3c7b", "html_url": "https://github.com/rust-lang/rust/commit/be38926b6941f13b1f03c2e3523b98dd256b3c7b"}], "stats": {"total": 309, "additions": 300, "deletions": 9}, "files": [{"sha": "05ddfe89bcf5c7786e44e9537ccdf856ba88afec", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 300, "deletions": 9, "changes": 309, "blob_url": "https://github.com/rust-lang/rust/blob/65b5c15384e7fad8868f375d7f1e6f765db0be21/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b5c15384e7fad8868f375d7f1e6f765db0be21/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=65b5c15384e7fad8868f375d7f1e6f765db0be21", "patch": "@@ -1022,6 +1022,120 @@ type Foo<A> = Box<A>; // ok!\n ```\n \"##,\n \n+E0092: r##\"\n+You tried to declare an undefined atomic operation function.\n+Erroneous code example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn atomic_foo(); // error: unrecognized atomic operation\n+                     //        function\n+}\n+```\n+\n+Please check you didn't make a mistake in the function's name. All intrinsic\n+functions are defined in librustc_trans/trans/intrinsic.rs and in\n+libcore/intrinsics.rs in the Rust source code. Example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn atomic_fence(); // ok!\n+}\n+```\n+\"##,\n+\n+E0093: r##\"\n+You declared an unknown intrinsic function. Erroneous code example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn foo(); // error: unrecognized intrinsic function: `foo`\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo();\n+    }\n+}\n+```\n+\n+Please check you didn't make a mistake in the function's name. All intrinsic\n+functions are defined in librustc_trans/trans/intrinsic.rs and in\n+libcore/intrinsics.rs in the Rust source code. Example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn atomic_fence(); // ok!\n+}\n+\n+fn main() {\n+    unsafe {\n+        atomic_fence();\n+    }\n+}\n+```\n+\"##,\n+\n+E0094: r##\"\n+You gave an invalid number of type parameters to an intrinsic function.\n+Erroneous code example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn size_of<T, U>() -> usize; // error: intrinsic has wrong number\n+                                 //        of type parameters\n+}\n+```\n+\n+Please check that you provided the right number of lifetime parameters\n+and verify with the function declaration in the Rust source code.\n+Example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn size_of<T>() -> usize; // ok!\n+}\n+```\n+\"##,\n+\n+E0101: r##\"\n+You hit this error because the compiler the compiler lacks information\n+to determine a type for this expression. Erroneous code example:\n+\n+```\n+fn main() {\n+    let x = |_| {}; // error: cannot determine a type for this expression\n+}\n+```\n+\n+You have two possibilities to solve this situation:\n+ * Give an explicit definition of the expression\n+ * Infer the expression\n+\n+Examples:\n+\n+```\n+fn main() {\n+    let x = |_ : u32| {}; // ok!\n+    // or:\n+    let x = |_| {};\n+    x(0u32);\n+}\n+```\n+\"##,\n+\n E0106: r##\"\n This error indicates that a lifetime is missing from a type. If it is an error\n inside a function signature, the problem may be with failing to adhere to the\n@@ -1130,6 +1244,96 @@ impl Bytes { ... } // error, same as above\n ```\n \"##,\n \n+E0117: r##\"\n+You got this error because because you tried to implement a foreign\n+trait for a foreign type (with maybe a foreign type parameter). Erroneous\n+code example:\n+\n+```\n+impl Drop for u32 {}\n+```\n+\n+The type, trait or the type parameter (or all of them) has to be defined\n+in your crate. Example:\n+\n+```\n+pub struct Foo; // you define your type in your crate\n+\n+impl Drop for Foo { // and you can implement the trait on it!\n+    // code of trait implementation here\n+}\n+\n+trait Bar { // or define your trait in your crate\n+    fn get(&self) -> usize;\n+}\n+\n+impl Bar for u32 { // and then you implement it on a foreign type\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+impl From<Foo> for i32 { // or you use a type from your crate as\n+                         // a type parameter\n+    fn from(i: Foo) -> i32 {\n+        0\n+    }\n+}\n+```\n+\"##,\n+\n+E0119: r##\"\n+There are conflicting trait implementations for the same type.\n+Erroneous code example:\n+\n+```\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+struct Foo {\n+    value: usize\n+}\n+\n+impl MyTrait for Foo { // error: conflicting implementations for trait\n+                       //        `MyTrait`\n+    fn get(&self) -> usize { self.value }\n+}\n+```\n+\n+When you write:\n+\n+```\n+impl<T> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+```\n+\n+This makes the trait implemented on all types in the scope. So if you\n+try to implement it on another one after that, the implementations will\n+conflict. Example:\n+\n+```\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+struct Foo;\n+\n+fn main() {\n+    let f = Foo;\n+\n+    f.get(); // the trait is implemented so we can use it\n+}\n+```\n+\"##,\n+\n E0121: r##\"\n In order to be consistent with Rust's lack of global type inference, type\n placeholders are disallowed by design in item signatures.\n@@ -1250,6 +1454,43 @@ information see the [opt-in builtin traits RFC](https://github.com/rust-lang/\n rfcs/blob/master/text/0019-opt-in-builtin-traits.md).\n \"##,\n \n+E0195: r##\"\n+Your method's lifetime parameters do not match the trait declaration.\n+Erroneous code example:\n+\n+```\n+trait Trait {\n+    fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n+}\n+\n+struct Foo;\n+\n+impl Trait for Foo {\n+    fn bar<'a,'b>(x: &'a str, y: &'b str) {\n+    // error: lifetime parameters or bounds on method `bar`\n+    // do not match the trait declaration\n+    }\n+}\n+```\n+\n+The lifetime constraint `'b` for bar() implementation does not match the\n+trait declaration. Ensure lifetime declarations match exactly in both trait\n+declaration and implementation. Example:\n+\n+```\n+trait Trait {\n+    fn t<'a,'b:'a>(x: &'a str, y: &'b str);\n+}\n+\n+struct Foo;\n+\n+impl Trait for Foo {\n+    fn t<'a,'b:'a>(x: &'a str, y: &'b str) { // ok!\n+    }\n+}\n+```\n+\"##,\n+\n E0197: r##\"\n Inherent implementations (one that do not implement a trait but provide\n methods associated with a type) are always safe because they are not\n@@ -1429,6 +1670,65 @@ impl Copy for &'static Bar { } // error\n ```\n \"##,\n \n+E0207: r##\"\n+You declared an unused type parameter when implementing a trait on an object.\n+Erroneous code example:\n+\n+```\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+struct Foo;\n+\n+impl<T> MyTrait for Foo {\n+    fn get(&self) -> usize {\n+        0\n+    }\n+}\n+```\n+\n+Please check your object definition and remove unused type\n+parameter(s). Example:\n+\n+```\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+struct Foo;\n+\n+impl MyTrait for Foo {\n+    fn get(&self) -> usize {\n+        0\n+    }\n+}\n+```\n+\"##,\n+\n+E0211: r##\"\n+You used an intrinsic function which doesn't correspond to its\n+definition. Erroneous code example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn size_of<T>(); // error: intrinsic has wrong type\n+}\n+```\n+\n+Please check the function definition. Example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn size_of<T>() -> usize;\n+}\n+```\n+\"##,\n+\n E0243: r##\"\n This error indicates that not enough type parameters were found in a type or\n trait.\n@@ -1649,16 +1949,10 @@ register_diagnostics! {\n     E0085,\n     E0086,\n     E0090,\n-    E0092,\n-    E0093,\n-    E0094,\n-    E0101,\n     E0102,\n     E0103,\n     E0104,\n-    E0117,\n     E0118,\n-    E0119,\n     E0120,\n     E0122,\n     E0123,\n@@ -1686,15 +1980,12 @@ register_diagnostics! {\n     E0193, // cannot bound type where clause bounds may only be attached to types\n            // involving type parameters\n     E0194,\n-    E0195, // lifetime parameters or bounds on method do not match the trait declaration\n     E0196, // cannot determine a type for this closure\n     E0203, // type parameter has more than one relaxed default bound,\n            // and only one is supported\n-    E0207, // type parameter is not constrained by the impl trait, self type, or predicate\n     E0208,\n     E0209, // builtin traits can only be implemented on structs or enums\n     E0210, // type parameter is not constrained by any local type\n-    E0211,\n     E0212, // cannot extract an associated type from a higher-ranked trait bound\n     E0213, // associated types are not accepted in this context\n     E0214, // parenthesized parameters may only be used with a trait"}]}