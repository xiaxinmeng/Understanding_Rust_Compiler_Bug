{"sha": "5da14c08a97f0828e4d1cd6a9c5450738eb606de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTE0YzA4YTk3ZjA4MjhlNGQxY2Q2YTljNTQ1MDczOGViNjA2ZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-26T16:11:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-26T16:11:57Z"}, "message": "auto merge of #13135 : alexcrichton/rust/dox, r=alexcrichton\n\nI touched up the documentation from @pcwalton found in #12952.", "tree": {"sha": "a14766b214469f4570752a7117b1cf109729ce7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a14766b214469f4570752a7117b1cf109729ce7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da14c08a97f0828e4d1cd6a9c5450738eb606de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da14c08a97f0828e4d1cd6a9c5450738eb606de", "html_url": "https://github.com/rust-lang/rust/commit/5da14c08a97f0828e4d1cd6a9c5450738eb606de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da14c08a97f0828e4d1cd6a9c5450738eb606de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0908ffa660667f90186f79e70fd13d68e99836bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0908ffa660667f90186f79e70fd13d68e99836bf", "html_url": "https://github.com/rust-lang/rust/commit/0908ffa660667f90186f79e70fd13d68e99836bf"}, {"sha": "fad77175e1811bdd0991ed00dc1a10ade8721a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fad77175e1811bdd0991ed00dc1a10ade8721a0b", "html_url": "https://github.com/rust-lang/rust/commit/fad77175e1811bdd0991ed00dc1a10ade8721a0b"}], "stats": {"total": 832, "additions": 716, "deletions": 116}, "files": [{"sha": "e802c8f0301267219237a4ac401a6cf5da66a86c", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -97,8 +97,9 @@ fn translate_error(errno: i32, detail: bool) -> IoError {\n             libc::WSAECONNREFUSED => (io::ConnectionRefused, \"connection refused\"),\n             libc::WSAECONNRESET => (io::ConnectionReset, \"connection reset\"),\n             libc::WSAEACCES => (io::PermissionDenied, \"permission denied\"),\n-            libc::WSAEWOULDBLOCK =>\n-                (io::ResourceUnavailable, \"resource temporarily unavailable\"),\n+            libc::WSAEWOULDBLOCK => {\n+                (io::ResourceUnavailable, \"resource temporarily unavailable\")\n+            }\n             libc::WSAENOTCONN => (io::NotConnected, \"not connected\"),\n             libc::WSAECONNABORTED => (io::ConnectionAborted, \"connection aborted\"),\n             libc::WSAEADDRNOTAVAIL => (io::ConnectionRefused, \"address not available\"),"}, {"sha": "46447e4a41638eb424e68f23e6870cfa46a7e2b7", "filename": "src/libstd/char.rs", "status": "modified", "additions": 137, "deletions": 3, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -404,29 +404,163 @@ pub fn len_utf8_bytes(c: char) -> uint {\n     }\n }\n \n-#[allow(missing_doc)]\n+/// Useful functions for Unicode characters.\n pub trait Char {\n+    /// Returns whether the specified character is considered a Unicode\n+    /// alphabetic code point.\n     fn is_alphabetic(&self) -> bool;\n+\n+    /// Returns whether the specified character satisfies the 'XID_Start'\n+    /// Unicode property.\n+    ///\n+    /// 'XID_Start' is a Unicode Derived Property specified in\n+    /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n+    /// mostly similar to ID_Start but modified for closure under NFKx.\n     fn is_XID_start(&self) -> bool;\n+\n+    /// Returns whether the specified `char` satisfies the 'XID_Continue'\n+    /// Unicode property.\n+    ///\n+    /// 'XID_Continue' is a Unicode Derived Property specified in\n+    /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n+    /// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n     fn is_XID_continue(&self) -> bool;\n+\n+\n+    /// Indicates whether a character is in lowercase.\n+    ///\n+    /// This is defined according to the terms of the Unicode Derived Core\n+    /// Property `Lowercase`.\n     fn is_lowercase(&self) -> bool;\n+\n+    /// Indicates whether a character is in uppercase.\n+    ///\n+    /// This is defined according to the terms of the Unicode Derived Core\n+    /// Property `Uppercase`.\n     fn is_uppercase(&self) -> bool;\n+\n+    /// Indicates whether a character is whitespace.\n+    ///\n+    /// Whitespace is defined in terms of the Unicode Property `White_Space`.\n     fn is_whitespace(&self) -> bool;\n+\n+    /// Indicates whether a character is alphanumeric.\n+    ///\n+    /// Alphanumericness is defined in terms of the Unicode General Categories\n+    /// 'Nd', 'Nl', 'No' and the Derived Core Property 'Alphabetic'.\n     fn is_alphanumeric(&self) -> bool;\n+\n+    /// Indicates whether a character is a control code point.\n+    ///\n+    /// Control code points are defined in terms of the Unicode General\n+    /// Category `Cc`.\n     fn is_control(&self) -> bool;\n+\n+    /// Indicates whether the character is numeric (Nd, Nl, or No).\n     fn is_digit(&self) -> bool;\n+\n+    /// Checks if a `char` parses as a numeric digit in the given radix.\n+    ///\n+    /// Compared to `is_digit()`, this function only recognizes the characters\n+    /// `0-9`, `a-z` and `A-Z`.\n+    ///\n+    /// # Return value\n+    ///\n+    /// Returns `true` if `c` is a valid digit under `radix`, and `false`\n+    /// otherwise.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if given a radix > 36.\n     fn is_digit_radix(&self, radix: uint) -> bool;\n+\n+    /// Converts a character to the corresponding digit.\n+    ///\n+    /// # Return value\n+    ///\n+    /// If `c` is between '0' and '9', the corresponding value between 0 and\n+    /// 9. If `c` is 'a' or 'A', 10. If `c` is 'b' or 'B', 11, etc. Returns\n+    /// none if the character does not refer to a digit in the given radix.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if given a radix outside the range [0..36].\n     fn to_digit(&self, radix: uint) -> Option<uint>;\n+\n+    /// Converts a character to its lowercase equivalent.\n+    ///\n+    /// The case-folding performed is the common or simple mapping. See\n+    /// `to_uppercase()` for references and more information.\n+    ///\n+    /// # Return value\n+    ///\n+    /// Returns the lowercase equivalent of the character, or the character\n+    /// itself if no conversion is possible.\n     fn to_lowercase(&self) -> char;\n+\n+    /// Converts a character to its uppercase equivalent.\n+    ///\n+    /// The case-folding performed is the common or simple mapping: it maps\n+    /// one unicode codepoint (one character in Rust) to its uppercase\n+    /// equivalent according to the Unicode database [1]. The additional\n+    /// `SpecialCasing.txt` is not considered here, as it expands to multiple\n+    /// codepoints in some cases.\n+    ///\n+    /// A full reference can be found here [2].\n+    ///\n+    /// # Return value\n+    ///\n+    /// Returns the uppercase equivalent of the character, or the character\n+    /// itself if no conversion was made.\n+    ///\n+    /// [1]: ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt\n+    ///\n+    /// [2]: http://www.unicode.org/versions/Unicode4.0.0/ch03.pdf#G33992\n     fn to_uppercase(&self) -> char;\n+\n+    /// Converts a number to the character representing it.\n+    ///\n+    /// # Return value\n+    ///\n+    /// Returns `Some(char)` if `num` represents one digit under `radix`,\n+    /// using one character of `0-9` or `a-z`, or `None` if it doesn't.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if given a radix > 36.\n     fn from_digit(num: uint, radix: uint) -> Option<char>;\n+\n+    /// Returns the hexadecimal Unicode escape of a character.\n+    ///\n+    /// The rules are as follows:\n+    ///\n+    /// * Characters in [0,0xff] get 2-digit escapes: `\\\\xNN`\n+    /// * Characters in [0x100,0xffff] get 4-digit escapes: `\\\\uNNNN`.\n+    /// * Characters above 0x10000 get 8-digit escapes: `\\\\UNNNNNNNN`.\n     fn escape_unicode(&self, f: |char|);\n+\n+    /// Returns a 'default' ASCII and C++11-like literal escape of a\n+    /// character.\n+    ///\n+    /// The default is chosen with a bias toward producing literals that are\n+    /// legal in a variety of languages, including C++11 and similar C-family\n+    /// languages. The exact rules are:\n+    ///\n+    /// * Tab, CR and LF are escaped as '\\t', '\\r' and '\\n' respectively.\n+    /// * Single-quote, double-quote and backslash chars are backslash-\n+    ///   escaped.\n+    /// * Any other chars in the range [0x20,0x7e] are not escaped.\n+    /// * Any other chars are given hex unicode escapes; see `escape_unicode`.\n     fn escape_default(&self, f: |char|);\n+\n+    /// Returns the amount of bytes this character would need if encoded in\n+    /// UTF-8.\n     fn len_utf8_bytes(&self) -> uint;\n \n-    /// Encodes this `char` as utf-8 into the provided byte-buffer\n+    /// Encodes this character as UTF-8 into the provided byte buffer.\n     ///\n-    /// The buffer must be at least 4 bytes long or a runtime failure will occur.\n+    /// The buffer must be at least 4 bytes long or a runtime failure will\n+    /// occur.\n     ///\n     /// This will then return the number of characters written to the slice.\n     fn encode_utf8(&self, dst: &mut [u8]) -> uint;"}, {"sha": "c2a6510d6563ad4632844dd7513fece3fc846e15", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 73, "deletions": 30, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -562,51 +562,94 @@ pub struct Arguments<'a> {\n /// When a format is not otherwise specified, types are formatted by ascribing\n /// to this trait. There is not an explicit way of selecting this trait to be\n /// used for formatting, it is only if no other format is specified.\n-#[allow(missing_doc)]\n-pub trait Show { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait Show {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n \n /// Format trait for the `b` character\n-#[allow(missing_doc)]\n-pub trait Bool { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait Bool {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `c` character\n-#[allow(missing_doc)]\n-pub trait Char { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait Char {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `i` and `d` characters\n-#[allow(missing_doc)]\n-pub trait Signed { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait Signed {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `u` character\n-#[allow(missing_doc)]\n-pub trait Unsigned { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait Unsigned {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `o` character\n-#[allow(missing_doc)]\n-pub trait Octal { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait Octal {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `t` character\n-#[allow(missing_doc)]\n-pub trait Binary { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait Binary {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `x` character\n-#[allow(missing_doc)]\n-pub trait LowerHex { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait LowerHex {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `X` character\n-#[allow(missing_doc)]\n-pub trait UpperHex { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait UpperHex {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `s` character\n-#[allow(missing_doc)]\n-pub trait String { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait String {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `?` character\n-#[allow(missing_doc)]\n-pub trait Poly { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait Poly {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `p` character\n-#[allow(missing_doc)]\n-pub trait Pointer { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait Pointer {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `f` character\n-#[allow(missing_doc)]\n-pub trait Float { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait Float {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `e` character\n-#[allow(missing_doc)]\n-pub trait LowerExp { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait LowerExp {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// Format trait for the `E` character\n-#[allow(missing_doc)]\n-pub trait UpperExp { fn fmt(&self, &mut Formatter) -> Result; }\n+pub trait UpperExp {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n \n // FIXME #11938 - UFCS would make us able call the above methods\n // directly Show::show(x, fmt)."}, {"sha": "384e2ff2380ef6124933d2bd8894c578da4dafec", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -11,16 +11,16 @@\n //! Parsing of format strings\n //!\n //! These structures are used when parsing format strings for the compiler.\n-//! Parsing does not currently happen at runtime (structures of std::fmt::rt are\n-//! generated instead).\n+//! Parsing does not happen at runtime: structures of `std::fmt::rt` are\n+//! generated instead.\n \n use prelude::*;\n \n use char;\n use str;\n \n-/// A piece is a portion of the format string which represents the next part to\n-/// emit. These are emitted as a stream by the `Parser` class.\n+/// A piece is a portion of the format string which represents the next part\n+/// to emit. These are emitted as a stream by the `Parser` class.\n #[deriving(Eq)]\n pub enum Piece<'a> {\n     /// A literal string which should directly be emitted\n@@ -65,36 +65,55 @@ pub struct FormatSpec<'a> {\n \n /// Enum describing where an argument for a format can be located.\n #[deriving(Eq)]\n-#[allow(missing_doc)]\n pub enum Position<'a> {\n-    ArgumentNext, ArgumentIs(uint), ArgumentNamed(&'a str)\n+    /// The argument will be in the next position. This is the default.\n+    ArgumentNext,\n+    /// The argument is located at a specific index.\n+    ArgumentIs(uint),\n+    /// The argument has a name.\n+    ArgumentNamed(&'a str),\n }\n \n /// Enum of alignments which are supported.\n #[deriving(Eq)]\n-#[allow(missing_doc)]\n-pub enum Alignment { AlignLeft, AlignRight, AlignUnknown }\n+pub enum Alignment {\n+    /// The value will be aligned to the left.\n+    AlignLeft,\n+    /// The value will be aligned to the right.\n+    AlignRight,\n+    /// The value will take on a default alignment.\n+    AlignUnknown,\n+}\n \n-/// Various flags which can be applied to format strings, the meaning of these\n+/// Various flags which can be applied to format strings. The meaning of these\n /// flags is defined by the formatters themselves.\n #[deriving(Eq)]\n-#[allow(missing_doc)]\n pub enum Flag {\n+    /// A `+` will be used to denote positive numbers.\n     FlagSignPlus,\n+    /// A `-` will be used to denote negative numbers. This is the default.\n     FlagSignMinus,\n+    /// An alternate form will be used for the value. In the case of numbers,\n+    /// this means that the number will be prefixed with the supplied string.\n     FlagAlternate,\n+    /// For numbers, this means that the number will be padded with zeroes,\n+    /// and the sign (`+` or `-`) will precede them.\n     FlagSignAwareZeroPad,\n }\n \n /// A count is used for the precision and width parameters of an integer, and\n /// can reference either an argument or a literal integer.\n #[deriving(Eq)]\n-#[allow(missing_doc)]\n pub enum Count<'a> {\n+    /// The count is specified explicitly.\n     CountIs(uint),\n+    /// The count is specified by the argument with the given name.\n     CountIsName(&'a str),\n+    /// The count is specified by the argument at the given index.\n     CountIsParam(uint),\n+    /// The count is specified by the next parameter.\n     CountIsNextParam,\n+    /// The count is implied and cannot be explicitly specified.\n     CountImplied,\n }\n \n@@ -106,8 +125,9 @@ pub enum Method<'a> {\n     /// keyword-defined clauses. The meaning of the keywords is defined by the\n     /// current locale.\n     ///\n-    /// An offset is optionally present at the beginning which is used to match\n-    /// against keywords, but it is not matched against the literal integers.\n+    /// An offset is optionally present at the beginning which is used to\n+    /// match against keywords, but it is not matched against the literal\n+    /// integers.\n     ///\n     /// The final element of this enum is the default \"other\" case which is\n     /// always required to be specified.\n@@ -139,14 +159,23 @@ pub struct PluralArm<'a> {\n     result: ~[Piece<'a>],\n }\n \n-/// Enum of the 5 CLDR plural keywords. There is one more, \"other\", but that is\n-/// specially placed in the `Plural` variant of `Method`\n+/// Enum of the 5 CLDR plural keywords. There is one more, \"other\", but that\n+/// is specially placed in the `Plural` variant of `Method`.\n ///\n /// http://www.icu-project.org/apiref/icu4c/classicu_1_1PluralRules.html\n #[deriving(Eq, TotalEq, Hash)]\n #[allow(missing_doc)]\n pub enum PluralKeyword {\n-    Zero, One, Two, Few, Many\n+    /// The plural form for zero objects.\n+    Zero,\n+    /// The plural form for one object.\n+    One,\n+    /// The plural form for two objects.\n+    Two,\n+    /// The plural form for few objects.\n+    Few,\n+    /// The plural form for many objects.\n+    Many,\n }\n \n /// Structure representing one \"arm\" of the `select` function."}, {"sha": "b9e933d0b14dd796248f40bebdcd0684bdf25db8", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -42,8 +42,11 @@ pub struct Bytes<'r, T> {\n }\n \n impl<'r, R: Reader> Bytes<'r, R> {\n+    /// Constructs a new byte iterator from the given Reader instance.\n     pub fn new(r: &'r mut R) -> Bytes<'r, R> {\n-        Bytes { reader: r }\n+        Bytes {\n+            reader: r,\n+        }\n     }\n }\n \n@@ -58,6 +61,20 @@ impl<'r, R: Reader> Iterator<IoResult<u8>> for Bytes<'r, R> {\n     }\n }\n \n+/// Converts an 8-bit to 64-bit unsigned value to a little-endian byte\n+/// representation of the given size. If the size is not big enough to\n+/// represent the value, then the high-order bytes are truncated.\n+///\n+/// Arguments:\n+///\n+/// * `n`: The value to convert.\n+/// * `size`: The size of the value, in bytes. This must be 8 or less, or task\n+///           failure occurs. If this is less than 8, then a value of that\n+///           many bytes is produced. For example, if `size` is 4, then a\n+///           32-bit byte representation is produced.\n+/// * `f`: A callback that receives the value.\n+///\n+/// This function returns the value returned by the callback, for convenience.\n pub fn u64_to_le_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n     use mem::{to_le16, to_le32, to_le64};\n     use cast::transmute;\n@@ -84,6 +101,20 @@ pub fn u64_to_le_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n     }\n }\n \n+/// Converts an 8-bit to 64-bit unsigned value to a big-endian byte\n+/// representation of the given size. If the size is not big enough to\n+/// represent the value, then the high-order bytes are truncated.\n+///\n+/// Arguments:\n+///\n+/// * `n`: The value to convert.\n+/// * `size`: The size of the value, in bytes. This must be 8 or less, or task\n+///           failure occurs. If this is less than 8, then a value of that\n+///           many bytes is produced. For example, if `size` is 4, then a\n+///           32-bit byte representation is produced.\n+/// * `f`: A callback that receives the value.\n+///\n+/// This function returns the value returned by the callback, for convenience.\n pub fn u64_to_be_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n     use mem::{to_be16, to_be32, to_be64};\n     use cast::transmute;\n@@ -108,10 +139,18 @@ pub fn u64_to_be_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n     }\n }\n \n-pub fn u64_from_be_bytes(data: &[u8],\n-                         start: uint,\n-                         size: uint)\n-                      -> u64 {\n+/// Extracts an 8-bit to 64-bit unsigned big-endian value from the given byte\n+/// buffer and returns it as a 64-bit value.\n+///\n+/// Arguments:\n+///\n+/// * `data`: The buffer in which to extract the value.\n+/// * `start`: The offset at which to extract the value.\n+/// * `size`: The size of the value in bytes to extract. This must be 8 or\n+///           less, or task failure occurs. If this is less than 8, then only\n+///           that many bytes are parsed. For example, if `size` is 4, then a\n+///           32-bit value is parsed.\n+pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n     use ptr::{copy_nonoverlapping_memory};\n     use mem::from_be64;\n     use slice::MutableVector;"}, {"sha": "3e193f246a82fdd24e7d85e01b44b730a4a44529", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -300,25 +300,44 @@ impl fmt::Show for IoError {\n     }\n }\n \n+/// A list specifying general categories of I/O error.\n #[deriving(Eq, Clone, Show)]\n-#[allow(missing_doc)]\n pub enum IoErrorKind {\n+    /// Any I/O error not part of this list.\n     OtherIoError,\n+    /// The operation could not complete because end of file was reached.\n     EndOfFile,\n+    /// The file was not found.\n     FileNotFound,\n+    /// The file permissions disallowed access to this file.\n     PermissionDenied,\n+    /// A network connection failed for some reason not specified in this list.\n     ConnectionFailed,\n+    /// The network operation failed because the network connection was cloesd.\n     Closed,\n+    /// The connection was refused by the remote server.\n     ConnectionRefused,\n+    /// The connection was reset by the remote server.\n     ConnectionReset,\n+    /// The connection was aborted (terminated) by the remote server.\n     ConnectionAborted,\n+    /// The network operation failed because it was not connected yet.\n     NotConnected,\n+    /// The operation failed because a pipe was closed.\n     BrokenPipe,\n+    /// A file already existed with that name.\n     PathAlreadyExists,\n+    /// No file exists at that location.\n     PathDoesntExist,\n+    /// The path did not specify the type of file that this operation required. For example,\n+    /// attempting to copy a directory with the `fs::copy()` operation will fail with this error.\n     MismatchedFileTypeForOperation,\n+    /// The operation temporarily failed (for example, because a signal was received), and retrying\n+    /// may succeed.\n     ResourceUnavailable,\n+    /// No I/O functionality is available for this task.\n     IoUnavailable,\n+    /// A parameter was incorrect in a way that caused an I/O error not part of this list.\n     InvalidInput,\n }\n \n@@ -1408,18 +1427,27 @@ pub struct FileStat {\n /// structure. This information is not necessarily platform independent, and may\n /// have different meanings or no meaning at all on some platforms.\n #[unstable]\n-#[allow(missing_doc)]\n #[deriving(Hash)]\n pub struct UnstableFileStat {\n+    /// The ID of the device containing the file.\n     device: u64,\n+    /// The file serial number.\n     inode: u64,\n+    /// The device ID.\n     rdev: u64,\n+    /// The number of hard links to this file.\n     nlink: u64,\n+    /// The user ID of the file.\n     uid: u64,\n+    /// The group ID of the file.\n     gid: u64,\n+    /// The optimal block size for I/O.\n     blksize: u64,\n+    /// The blocks allocated for this file.\n     blocks: u64,\n+    /// User-defined flags for the file.\n     flags: u64,\n+    /// The file generation number.\n     gen: u64,\n }\n "}, {"sha": "fef4dd380e8c1e65a1efb0f4d25ea915a3772a38", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Internet Protocol (IP) addresses.\n+//!\n+//! This module contains functions useful for parsing, formatting, and\n+//! manipulating IP addresses.\n+\n #[allow(missing_doc)];\n \n use container::Container;"}, {"sha": "95241813257d26996e1ba70dcb3187b4a6280c5f", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 71, "deletions": 9, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -8,66 +8,128 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(missing_doc)];\n+//! UDP (User Datagram Protocol) network connections.\n+//!\n+//! This module contains the ability to open a UDP stream to a socket address.\n+//! The destination and binding addresses can either be an IPv4 or IPv6\n+//! address. There is no corresponding notion of a server because UDP is a\n+//! datagram protocol.\n \n use clone::Clone;\n use result::{Ok, Err};\n use io::net::ip::SocketAddr;\n use io::{Reader, Writer, IoResult};\n use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory, LocalIo};\n \n+/// A User Datagram Protocol socket.\n+///\n+/// This is an implementation of a bound UDP socket. This supports both IPv4 and\n+/// IPv6 addresses, and there is no corresponding notion of a server because UDP\n+/// is a datagram protocol.\n+///\n+/// # Example\n+///\n+/// ```rust,no_run\n+/// # #[allow(unused_must_use)];\n+/// use std::io::net::udp::UdpSocket;\n+/// use std::io::net::ip::{Ipv4Addr, SocketAddr};\n+///\n+/// let addr = SocketAddr { ip: Ipv4Addr(127, 0, 0, 1), port: 34254 };\n+/// let mut socket = match UdpSocket::bind(addr) {\n+///     Ok(s) => s,\n+///     Err(e) => fail!(\"couldn't bind socket: {}\", e),\n+/// };\n+///\n+/// let mut buf = [0, ..10];\n+/// match socket.recvfrom(buf) {\n+///     Ok((amt, src)) => {\n+///         // Send a reply to the socket we received data from\n+///         let buf = buf.mut_slice_to(amt);\n+///         buf.reverse();\n+///         socket.sendto(buf, src);\n+///     }\n+///     Err(e) => println!(\"couldn't receive a datagram: {}\", e)\n+/// }\n+/// drop(socket); // close the socket\n+/// ```\n pub struct UdpSocket {\n     priv obj: ~RtioUdpSocket\n }\n \n impl UdpSocket {\n+    /// Creates a UDP socket from the given socket address.\n     pub fn bind(addr: SocketAddr) -> IoResult<UdpSocket> {\n         LocalIo::maybe_raise(|io| {\n             io.udp_bind(addr).map(|s| UdpSocket { obj: s })\n         })\n     }\n \n-    pub fn recvfrom(&mut self, buf: &mut [u8]) -> IoResult<(uint, SocketAddr)> {\n+    /// Receives data from the socket. On success, returns the number of bytes\n+    /// read and the address from whence the data came.\n+    pub fn recvfrom(&mut self, buf: &mut [u8])\n+                    -> IoResult<(uint, SocketAddr)> {\n         self.obj.recvfrom(buf)\n     }\n \n+    /// Sends data on the socket to the given address. Returns nothing on\n+    /// success.\n     pub fn sendto(&mut self, buf: &[u8], dst: SocketAddr) -> IoResult<()> {\n         self.obj.sendto(buf, dst)\n     }\n \n+    /// Creates a `UdpStream`, which allows use of the `Reader` and `Writer`\n+    /// traits to receive and send data from the same address. This transfers\n+    /// ownership of the socket to the stream.\n+    ///\n+    /// Note that this call does not perform any actual network communication,\n+    /// because UDP is a datagram protocol.\n     pub fn connect(self, other: SocketAddr) -> UdpStream {\n-        UdpStream { socket: self, connected_to: other }\n+        UdpStream {\n+            socket: self,\n+            connected_to: other,\n+        }\n     }\n \n+    /// Returns the socket address that this socket was created from.\n     pub fn socket_name(&mut self) -> IoResult<SocketAddr> {\n         self.obj.socket_name()\n     }\n }\n \n impl Clone for UdpSocket {\n-    /// Creates a new handle to this UDP socket, allowing for simultaneous reads\n-    /// and writes of the socket.\n+    /// Creates a new handle to this UDP socket, allowing for simultaneous\n+    /// reads and writes of the socket.\n     ///\n     /// The underlying UDP socket will not be closed until all handles to the\n-    /// socket have been deallocated. Two concurrent reads will not receive the\n-    /// same data.  Instead, the first read will receive the first packet\n+    /// socket have been deallocated. Two concurrent reads will not receive\n+    /// the same data. Instead, the first read will receive the first packet\n     /// received, and the second read will receive the second packet.\n     fn clone(&self) -> UdpSocket {\n-        UdpSocket { obj: self.obj.clone() }\n+        UdpSocket {\n+            obj: self.obj.clone(),\n+        }\n     }\n }\n \n+/// A type that allows convenient usage of a UDP stream connected to one\n+/// address via the `Reader` and `Writer` traits.\n pub struct UdpStream {\n     priv socket: UdpSocket,\n     priv connected_to: SocketAddr\n }\n \n impl UdpStream {\n+    /// Allows access to the underlying UDP socket owned by this stream. This\n+    /// is useful to, for example, use the socket to send data to hosts other\n+    /// than the one that this stream is connected to.\n     pub fn as_socket<T>(&mut self, f: |&mut UdpSocket| -> T) -> T {\n         f(&mut self.socket)\n     }\n \n-    pub fn disconnect(self) -> UdpSocket { self.socket }\n+    /// Consumes this UDP stream and returns out the underlying socket.\n+    pub fn disconnect(self) -> UdpSocket {\n+        self.socket\n+    }\n }\n \n impl Reader for UdpStream {"}, {"sha": "9f04317a5c8677210a36a7c1a1c713bf07cbda46", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -79,7 +79,9 @@ impl Writer for UnixStream {\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> { self.obj.write(buf) }\n }\n \n+/// A value that can listen for incoming named pipe connection requests.\n pub struct UnixListener {\n+    /// The internal, opaque runtime Unix listener.\n     priv obj: ~RtioUnixListener,\n }\n \n@@ -119,7 +121,9 @@ impl Listener<UnixStream, UnixAcceptor> for UnixListener {\n     }\n }\n \n+/// A value that can accept named pipe connections, returned from `listen()`.\n pub struct UnixAcceptor {\n+    /// The internal, opaque runtime Unix acceptor.\n     priv obj: ~RtioUnixAcceptor,\n }\n "}, {"sha": "9984a3e5cdf3f310c32e3fb4b8ae4f60db8ea434", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -20,7 +20,9 @@ use io::IoResult;\n use libc;\n use rt::rtio::{RtioPipe, LocalIo};\n \n+/// A synchronous, in-memory pipe.\n pub struct PipeStream {\n+    /// The internal, opaque runtime pipe object.\n     priv obj: ~RtioPipe,\n }\n "}, {"sha": "323f24a52c31e29a791a912c9f8db1d292177731", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -116,7 +116,7 @@ pub static NAN: f32 = 0.0_f32/0.0_f32;\n pub static INFINITY: f32 = 1.0_f32/0.0_f32;\n pub static NEG_INFINITY: f32 = -1.0_f32/0.0_f32;\n \n-/* Module: consts */\n+/// Various useful constants.\n pub mod consts {\n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n     // staticants from cmath."}, {"sha": "fc8c5f47073af14918ce9602eb45137760c23ddd", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -120,7 +120,7 @@ pub static NEG_INFINITY: f64 = -1.0_f64/0.0_f64;\n \n // FIXME (#1999): add is_normal, is_subnormal, and fpclassify\n \n-/* Module: consts */\n+/// Various useful constants.\n pub mod consts {\n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n     // constants from cmath."}, {"sha": "202e26e2c93c11c71569b01e14ee8d69b051be67", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 140, "deletions": 24, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -96,25 +96,56 @@ pub trait One: Mul<Self, Self> {\n /// Returns the multiplicative identity, `1`.\n #[inline(always)] pub fn one<T: One>() -> T { One::one() }\n \n-pub trait Signed: Num\n-                + Neg<Self> {\n+/// Useful functions for signed numbers (i.e. numbers that can be negative).\n+pub trait Signed: Num + Neg<Self> {\n+    /// Computes the absolute value.\n+    ///\n+    /// For float, f32, and f64, `NaN` will be returned if the number is `NaN`.\n     fn abs(&self) -> Self;\n+\n+    /// The positive difference of two numbers.\n+    ///\n+    /// Returns `zero` if the number is less than or equal to `other`, otherwise the difference\n+    /// between `self` and `other` is returned.\n     fn abs_sub(&self, other: &Self) -> Self;\n+\n+    /// Returns the sign of the number.\n+    ///\n+    /// For `float`, `f32`, `f64`:\n+    ///   * `1.0` if the number is positive, `+0.0` or `INFINITY`\n+    ///   * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n+    ///   * `NaN` if the number is `NaN`\n+    ///\n+    /// For `int`:\n+    ///   * `0` if the number is zero\n+    ///   * `1` if the number is positive\n+    ///   * `-1` if the number is negative\n     fn signum(&self) -> Self;\n \n+    /// Returns true if the number is positive and false if the number is zero or negative.\n     fn is_positive(&self) -> bool;\n+\n+    /// Returns true if the number is negative and false if the number is zero or positive.\n     fn is_negative(&self) -> bool;\n }\n \n /// Computes the absolute value.\n ///\n /// For float, f32, and f64, `NaN` will be returned if the number is `NaN`\n-#[inline(always)] pub fn abs<T: Signed>(value: T) -> T { value.abs() }\n+#[inline(always)]\n+pub fn abs<T: Signed>(value: T) -> T {\n+    value.abs()\n+}\n+\n /// The positive difference of two numbers.\n ///\n /// Returns `zero` if the number is less than or equal to `other`,\n /// otherwise the difference between `self` and `other` is returned.\n-#[inline(always)] pub fn abs_sub<T: Signed>(x: T, y: T) -> T { x.abs_sub(&y) }\n+#[inline(always)]\n+pub fn abs_sub<T: Signed>(x: T, y: T) -> T {\n+    x.abs_sub(&y)\n+}\n+\n /// Returns the sign of the number.\n ///\n /// For float, f32, f64:\n@@ -308,70 +339,150 @@ pub enum FPCategory {\n     FPNormal,\n }\n \n-/// Primitive floating point numbers\n-pub trait Float: Signed\n-               + Round\n-               + Primitive {\n+/// Operations on primitive floating point numbers.\n+// FIXME(#5527): In a future version of Rust, many of these functions will\n+//               become constants.\n+//\n+// FIXME(#8888): Several of these functions have a parameter named\n+//               `unused_self`. Removing it requires #8888 to be fixed.\n+pub trait Float: Signed + Round + Primitive {\n+    /// Returns the maximum of the two numbers.\n     fn max(self, other: Self) -> Self;\n+    /// Returns the minimum of the two numbers.\n     fn min(self, other: Self) -> Self;\n \n-    // FIXME (#5527): These should be associated constants\n+    /// Returns the NaN value.\n     fn nan() -> Self;\n+\n+    /// Returns the infinite value.\n     fn infinity() -> Self;\n+\n+    /// Returns the negative infinite value.\n     fn neg_infinity() -> Self;\n+\n+    /// Returns -0.0.\n     fn neg_zero() -> Self;\n \n+    /// Returns true if this value is NaN and false otherwise.\n     fn is_nan(&self) -> bool;\n+\n+    /// Returns true if this value is positive infinity or negative infinity and false otherwise.\n     fn is_infinite(&self) -> bool;\n+\n+    /// Returns true if this number is neither infinite nor NaN.\n     fn is_finite(&self) -> bool;\n+\n+    /// Returns true if this number is neither zero, infinite, denormal, or NaN.\n     fn is_normal(&self) -> bool;\n+\n+    /// Returns the category that this number falls into.\n     fn classify(&self) -> FPCategory;\n \n-    // FIXME (#8888): Removing `unused_self` requires #8888 to be fixed.\n+    /// Returns the number of binary digits of mantissa that this type supports.\n     fn mantissa_digits(unused_self: Option<Self>) -> uint;\n+\n+    /// Returns the number of binary digits of exponent that this type supports.\n     fn digits(unused_self: Option<Self>) -> uint;\n+\n+    /// Returns the smallest positive number that this type can represent.\n     fn epsilon() -> Self;\n+\n+    /// Returns the minimum binary exponent that this type can represent.\n     fn min_exp(unused_self: Option<Self>) -> int;\n+\n+    /// Returns the maximum binary exponent that this type can represent.\n     fn max_exp(unused_self: Option<Self>) -> int;\n+\n+    /// Returns the minimum base-10 exponent that this type can represent.\n     fn min_10_exp(unused_self: Option<Self>) -> int;\n+\n+    /// Returns the maximum base-10 exponent that this type can represent.\n     fn max_10_exp(unused_self: Option<Self>) -> int;\n \n+    /// Constructs a floating point number created by multiplying `x` by 2 raised to the power of\n+    /// `exp`.\n     fn ldexp(x: Self, exp: int) -> Self;\n+\n+    /// Breaks the number into a normalized fraction and a base-2 exponent, satisfying:\n+    ///\n+    ///  * `self = x * pow(2, exp)`\n+    ///\n+    ///  * `0.5 <= abs(x) < 1.0`\n     fn frexp(&self) -> (Self, int);\n \n+    /// Returns the exponential of the number, minus 1, in a way that is accurate even if the\n+    /// number is close to zero.\n     fn exp_m1(&self) -> Self;\n+\n+    /// Returns the natural logarithm of the number plus 1 (`ln(1+n)`) more accurately than if the\n+    /// operations were performed separately.\n     fn ln_1p(&self) -> Self;\n+\n+    /// Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a\n+    /// more accurate result with better performance than a separate multiplication operation\n+    /// followed by an add.\n     fn mul_add(&self, a: Self, b: Self) -> Self;\n+\n+    /// Returns the next representable floating-point value in the direction of `other`.\n     fn next_after(&self, other: Self) -> Self;\n \n+    /// Returns the mantissa, exponent and sign as integers, respectively.\n     fn integer_decode(&self) -> (u64, i16, i8);\n \n-    // Common Mathematical Constants\n-    // FIXME (#5527): These should be associated constants\n+    /// Archimedes' constant.\n     fn pi() -> Self;\n+\n+    /// 2.0 * pi.\n     fn two_pi() -> Self;\n+\n+    /// pi / 2.0.\n     fn frac_pi_2() -> Self;\n+\n+    /// pi / 3.0.\n     fn frac_pi_3() -> Self;\n+\n+    /// pi / 4.0.\n     fn frac_pi_4() -> Self;\n+\n+    /// pi / 6.0.\n     fn frac_pi_6() -> Self;\n+\n+    /// pi / 8.0.\n     fn frac_pi_8() -> Self;\n+\n+    /// 1.0 / pi.\n     fn frac_1_pi() -> Self;\n+\n+    /// 2.0 / pi.\n     fn frac_2_pi() -> Self;\n+\n+    /// 2.0 / sqrt(pi).\n     fn frac_2_sqrtpi() -> Self;\n+\n+    /// sqrt(2.0).\n     fn sqrt2() -> Self;\n+\n+    /// 1.0 / sqrt(2.0).\n     fn frac_1_sqrt2() -> Self;\n+\n+    /// Euler's number.\n     fn e() -> Self;\n+\n+    /// log2(e).\n     fn log2_e() -> Self;\n+\n+    /// log10(e).\n     fn log10_e() -> Self;\n+\n+    /// ln(2.0).\n     fn ln_2() -> Self;\n-    fn ln_10() -> Self;\n \n-    // Fractional functions\n+    /// ln(10.0).\n+    fn ln_10() -> Self;\n \n     /// Take the reciprocal (inverse) of a number, `1/x`.\n     fn recip(&self) -> Self;\n \n-    // Algebraic functions\n     /// Raise a number to a power.\n     fn powf(&self, n: &Self) -> Self;\n \n@@ -385,8 +496,6 @@ pub trait Float: Signed\n     /// legs of length `x` and `y`.\n     fn hypot(&self, other: &Self) -> Self;\n \n-    // Trigonometric functions\n-\n     /// Computes the sine of a number (in radians).\n     fn sin(&self) -> Self;\n     /// Computes the cosine of a number (in radians).\n@@ -412,8 +521,6 @@ pub trait Float: Signed\n     /// `(sin(x), cos(x))`.\n     fn sin_cos(&self) -> (Self, Self);\n \n-    // Exponential functions\n-\n     /// Returns `e^(self)`, (the exponential function).\n     fn exp(&self) -> Self;\n     /// Returns 2 raised to the power of the number, `2^(self)`.\n@@ -427,8 +534,6 @@ pub trait Float: Signed\n     /// Returns the base 10 logarithm of the number.\n     fn log10(&self) -> Self;\n \n-    // Hyperbolic functions\n-\n     /// Hyperbolic sine function.\n     fn sinh(&self) -> Self;\n     /// Hyperbolic cosine function.\n@@ -442,8 +547,6 @@ pub trait Float: Signed\n     /// Inverse hyperbolic tangent function.\n     fn atanh(&self) -> Self;\n \n-    // Angular conversions\n-\n     /// Convert radians to degrees.\n     fn to_degrees(&self) -> Self;\n     /// Convert degrees to radians.\n@@ -978,8 +1081,10 @@ pub fn cast<T: NumCast,U: NumCast>(n: T) -> Option<U> {\n     NumCast::from(n)\n }\n \n-/// An interface for casting between machine scalars\n+/// An interface for casting between machine scalars.\n pub trait NumCast: ToPrimitive {\n+    /// Creates a number from another value that can be converted into a primitive via the\n+    /// `ToPrimitive` trait.\n     fn from<T: ToPrimitive>(n: T) -> Option<Self>;\n }\n \n@@ -1059,19 +1164,30 @@ impl<T: CheckedAdd + CheckedSub + Zero + Ord + Bounded> Saturating for T {\n     }\n }\n \n+/// Performs addition that returns `None` instead of wrapping around on overflow.\n pub trait CheckedAdd: Add<Self, Self> {\n+    /// Adds two numbers, checking for overflow. If overflow happens, `None` is returned.\n     fn checked_add(&self, v: &Self) -> Option<Self>;\n }\n \n+/// Performs subtraction that returns `None` instead of wrapping around on underflow.\n pub trait CheckedSub: Sub<Self, Self> {\n+    /// Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.\n     fn checked_sub(&self, v: &Self) -> Option<Self>;\n }\n \n+/// Performs multiplication that returns `None` instead of wrapping around on underflow or\n+/// overflow.\n pub trait CheckedMul: Mul<Self, Self> {\n+    /// Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\n+    /// happens, `None` is returned.\n     fn checked_mul(&self, v: &Self) -> Option<Self>;\n }\n \n+/// Performs division that returns `None` instead of wrapping around on underflow or overflow.\n pub trait CheckedDiv: Div<Self, Self> {\n+    /// Divides two numbers, checking for underflow or overflow. If underflow or overflow happens,\n+    /// `None` is returned.\n     fn checked_div(&self, v: &Self) -> Option<Self>;\n }\n "}, {"sha": "9f9a9ec8e2e3b851d02a858edfb267b0e43b2295", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 41, "deletions": 20, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -24,31 +24,66 @@ use num;\n use num::{NumCast, Zero, One, cast, Int};\n use num::{Round, Float, FPNaN, FPInfinite, ToPrimitive};\n \n+/// A flag that specifies whether to use exponential (scientific) notation.\n pub enum ExponentFormat {\n+    /// Do not use exponential notation.\n     ExpNone,\n+    /// Use exponential notation with the exponent having a base of 10 and the\n+    /// exponent sign being `e` or `E`. For example, 1000 would be printed\n+    /// 1e3.\n     ExpDec,\n-    ExpBin\n+    /// Use exponential notation with the exponent having a base of 2 and the\n+    /// exponent sign being `p` or `P`. For example, 8 would be printed 1p3.\n+    ExpBin,\n }\n \n+/// The number of digits used for emitting the fractional part of a number, if\n+/// any.\n pub enum SignificantDigits {\n+    /// All calculable digits will be printed.\n+    ///\n+    /// Note that bignums or fractions may cause a surprisingly large number\n+    /// of digits to be printed.\n     DigAll,\n+\n+    /// At most the given number of digits will be printed, truncating any\n+    /// trailing zeroes.\n     DigMax(uint),\n+\n+    /// Precisely the given number of digits will be printed.\n     DigExact(uint)\n }\n \n+/// How to emit the sign of a number.\n pub enum SignFormat {\n+    /// No sign will be printed. The exponent sign will also be emitted.\n     SignNone,\n+    /// `-` will be printed for negative values, but no sign will be emitted\n+    /// for positive numbers.\n     SignNeg,\n-    SignAll\n+    /// `+` will be printed for positive values, and `-` will be printed for\n+    /// negative values.\n+    SignAll,\n }\n \n+/// Encompasses functions used by the string converter.\n pub trait NumStrConv {\n+    /// Returns the NaN value.\n     fn nan()      -> Option<Self>;\n+\n+    /// Returns the infinite value.\n     fn inf()      -> Option<Self>;\n+\n+    /// Returns the negative infinite value.\n     fn neg_inf()  -> Option<Self>;\n+\n+    /// Returns -0.0.\n     fn neg_zero() -> Option<Self>;\n \n+    /// Rounds the number toward zero.\n     fn round_to_zero(&self)   -> Self;\n+\n+    /// Returns the fractional part of the number.\n     fn fractional_part(&self) -> Self;\n }\n \n@@ -200,25 +235,11 @@ pub fn int_to_str_bytes_common<T: Int>(num: T, radix: uint, sign: SignFormat, f:\n  *                     itself always printed using a base of 10.\n  * - `negative_zero` - Whether to treat the special value `-0` as\n  *                     `-0` or as `+0`.\n- * - `sign`          - How to emit the sign. Options are:\n- *     - `SignNone`: No sign at all. The exponent sign is also omitted.\n- *     - `SignNeg`:  Only `-` on negative values.\n- *     - `SignAll`:  Both `+` on positive, and `-` on negative numbers.\n- * - `digits`        - The amount of digits to use for emitting the\n- *                     fractional part, if any. Options are:\n- *     - `DigAll`:         All calculatable digits. Beware of bignums or\n- *                         fractions!\n- *     - `DigMax(uint)`:   Maximum N digits, truncating any trailing zeros.\n- *     - `DigExact(uint)`: Exactly N digits.\n+ * - `sign`          - How to emit the sign. See `SignFormat`.\n+ * - `digits`        - The amount of digits to use for emitting the fractional\n+ *                     part, if any. See `SignificantDigits`.\n  * - `exp_format`   - Whether or not to use the exponential (scientific) notation.\n- *                    Options are:\n- *     - `ExpNone`: Do not use the exponential notation.\n- *     - `ExpDec`:  Use the exponential notation with the exponent having a base of 10,\n- *                  and exponent sign being `'e'` or `'E'` depending on the value of\n- *                  the `exp_upper` argument. E.g. the number 1000 would be printed as 1e3.\n- *     - `ExpBin`:  Use the exponential notation with the exponent having a base of 2,\n- *                  and exponent sign being `'p'` or `'P'` depending on the value of\n- *                  the `exp_upper` argument. E.g. the number 8 would be printed as 1p3.\n+ *                    See `ExponentFormat`.\n  * - `exp_capital`   - Whether or not to use a capital letter for the exponent sign, if\n  *                     exponential notation is desired.\n  *"}, {"sha": "eeebede6c5833c28be0e870c865a980ecd2c6fff", "filename": "src/libstd/os.rs", "status": "modified", "additions": 119, "deletions": 3, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da14c08a97f0828e4d1cd6a9c5450738eb606de/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=5da14c08a97f0828e4d1cd6a9c5450738eb606de", "patch": "@@ -65,6 +65,7 @@ pub fn close(fd: int) -> int {\n pub static TMPBUF_SZ : uint = 1000u;\n static BUF_BYTES : uint = 2048u;\n \n+/// Returns the current working directory.\n #[cfg(unix)]\n pub fn getcwd() -> Path {\n     use c_str::CString;\n@@ -78,6 +79,7 @@ pub fn getcwd() -> Path {\n     }\n }\n \n+/// Returns the current working directory.\n #[cfg(windows)]\n pub fn getcwd() -> Path {\n     use libc::DWORD;\n@@ -364,11 +366,17 @@ pub fn unsetenv(n: &str) {\n     _unsetenv(n);\n }\n \n+/// A low-level OS in-memory pipe.\n pub struct Pipe {\n+    /// A file descriptor representing the reading end of the pipe. Data written\n+    /// on the `out` file descriptor can be read from this file descriptor.\n     input: c_int,\n-    out: c_int\n+    /// A file descriptor representing the write end of the pipe. Data written\n+    /// to this file descriptor can be read from the `input` file descriptor.\n+    out: c_int,\n }\n \n+/// Creates a new low-level OS in-memory pipe.\n #[cfg(unix)]\n pub fn pipe() -> Pipe {\n     unsafe {\n@@ -379,6 +387,7 @@ pub fn pipe() -> Pipe {\n     }\n }\n \n+/// Creates a new low-level OS in-memory pipe.\n #[cfg(windows)]\n pub fn pipe() -> Pipe {\n     unsafe {\n@@ -908,13 +917,15 @@ fn round_up(from: uint, to: uint) -> uint {\n     }\n }\n \n+/// Returns the page size of the current architecture in bytes.\n #[cfg(unix)]\n pub fn page_size() -> uint {\n     unsafe {\n         libc::sysconf(libc::_SC_PAGESIZE) as uint\n     }\n }\n \n+/// Returns the page size of the current architecture in bytes.\n #[cfg(windows)]\n pub fn page_size() -> uint {\n     unsafe {\n@@ -1274,8 +1285,8 @@ impl Drop for MemoryMap {\n     }\n }\n \n+/// Various useful system-specific constants.\n pub mod consts {\n-\n     #[cfg(unix)]\n     pub use os::consts::unix::*;\n \n@@ -1309,70 +1320,175 @@ pub mod consts {\n     #[cfg(target_arch = \"mips\")]\n     pub use os::consts::mips::*;\n \n+    /// Constants for Unix systems.\n     pub mod unix {\n+        /// A string describing the family that this operating system belongs\n+        /// to: in this case, `unix`.\n         pub static FAMILY: &'static str = \"unix\";\n     }\n \n+    /// Constants for Windows systems.\n     pub mod windows {\n+        /// A string describing the family that this operating system belongs\n+        /// to: in this case, `windows`.\n         pub static FAMILY: &'static str = \"windows\";\n     }\n \n+    /// Constants for Mac OS systems.\n     pub mod macos {\n+        /// A string describing the specific operating system in use: in this\n+        /// case, `macos`.\n         pub static SYSNAME: &'static str = \"macos\";\n+\n+        /// Specifies the filename prefix used for shared libraries on this\n+        /// platform: in this case, `lib`.\n         pub static DLL_PREFIX: &'static str = \"lib\";\n+\n+        /// Specifies the filename suffix used for shared libraries on this\n+        /// platform: in this case, `.dylib`.\n         pub static DLL_SUFFIX: &'static str = \".dylib\";\n+\n+        /// Specifies the file extension used for shared libraries on this\n+        /// platform that goes after the dot: in this case, `dylib`.\n         pub static DLL_EXTENSION: &'static str = \"dylib\";\n+\n+        /// Specifies the filename suffix used for executable binaries on this\n+        /// platform: in this case, the empty string.\n         pub static EXE_SUFFIX: &'static str = \"\";\n+\n+        /// Specifies the file extension, if any, used for executable binaries\n+        /// on this platform: in this case, the empty string.\n         pub static EXE_EXTENSION: &'static str = \"\";\n     }\n \n+    /// Constants for FreeBSD systems.\n     pub mod freebsd {\n+        /// A string describing the specific operating system in use: in this\n+        /// case, `freebsd`.\n         pub static SYSNAME: &'static str = \"freebsd\";\n+\n+        /// Specifies the filename prefix used for shared libraries on this\n+        /// platform: in this case, `lib`.\n         pub static DLL_PREFIX: &'static str = \"lib\";\n+\n+        /// Specifies the filename suffix used for shared libraries on this\n+        /// platform: in this case, `.so`.\n         pub static DLL_SUFFIX: &'static str = \".so\";\n+\n+        /// Specifies the file extension used for shared libraries on this\n+        /// platform that goes after the dot: in this case, `so`.\n         pub static DLL_EXTENSION: &'static str = \"so\";\n+\n+        /// Specifies the filename suffix used for executable binaries on this\n+        /// platform: in this case, the empty string.\n         pub static EXE_SUFFIX: &'static str = \"\";\n+\n+        /// Specifies the file extension, if any, used for executable binaries\n+        /// on this platform: in this case, the empty string.\n         pub static EXE_EXTENSION: &'static str = \"\";\n     }\n \n+    /// Constants for GNU/Linux systems.\n     pub mod linux {\n+        /// A string describing the specific operating system in use: in this\n+        /// case, `linux`.\n         pub static SYSNAME: &'static str = \"linux\";\n+\n+        /// Specifies the filename prefix used for shared libraries on this\n+        /// platform: in this case, `lib`.\n         pub static DLL_PREFIX: &'static str = \"lib\";\n+\n+        /// Specifies the filename suffix used for shared libraries on this\n+        /// platform: in this case, `.so`.\n         pub static DLL_SUFFIX: &'static str = \".so\";\n+\n+        /// Specifies the file extension used for shared libraries on this\n+        /// platform that goes after the dot: in this case, `so`.\n         pub static DLL_EXTENSION: &'static str = \"so\";\n+\n+        /// Specifies the filename suffix used for executable binaries on this\n+        /// platform: in this case, the empty string.\n         pub static EXE_SUFFIX: &'static str = \"\";\n+\n+        /// Specifies the file extension, if any, used for executable binaries\n+        /// on this platform: in this case, the empty string.\n         pub static EXE_EXTENSION: &'static str = \"\";\n     }\n \n+    /// Constants for Android systems.\n     pub mod android {\n+        /// A string describing the specific operating system in use: in this\n+        /// case, `android`.\n         pub static SYSNAME: &'static str = \"android\";\n+\n+        /// Specifies the filename prefix used for shared libraries on this\n+        /// platform: in this case, `lib`.\n         pub static DLL_PREFIX: &'static str = \"lib\";\n+\n+        /// Specifies the filename suffix used for shared libraries on this\n+        /// platform: in this case, `.so`.\n         pub static DLL_SUFFIX: &'static str = \".so\";\n+\n+        /// Specifies the file extension used for shared libraries on this\n+        /// platform that goes after the dot: in this case, `so`.\n         pub static DLL_EXTENSION: &'static str = \"so\";\n+\n+        /// Specifies the filename suffix used for executable binaries on this\n+        /// platform: in this case, the empty string.\n         pub static EXE_SUFFIX: &'static str = \"\";\n+\n+        /// Specifies the file extension, if any, used for executable binaries\n+        /// on this platform: in this case, the empty string.\n         pub static EXE_EXTENSION: &'static str = \"\";\n     }\n \n+    /// Constants for 32-bit or 64-bit Windows systems.\n     pub mod win32 {\n+        /// A string describing the specific operating system in use: in this\n+        /// case, `win32`.\n         pub static SYSNAME: &'static str = \"win32\";\n+\n+        /// Specifies the filename prefix used for shared libraries on this\n+        /// platform: in this case, the empty string.\n         pub static DLL_PREFIX: &'static str = \"\";\n+\n+        /// Specifies the filename suffix used for shared libraries on this\n+        /// platform: in this case, `.dll`.\n         pub static DLL_SUFFIX: &'static str = \".dll\";\n+\n+        /// Specifies the file extension used for shared libraries on this\n+        /// platform that goes after the dot: in this case, `dll`.\n         pub static DLL_EXTENSION: &'static str = \"dll\";\n+\n+        /// Specifies the filename suffix used for executable binaries on this\n+        /// platform: in this case, `.exe`.\n         pub static EXE_SUFFIX: &'static str = \".exe\";\n+\n+        /// Specifies the file extension, if any, used for executable binaries\n+        /// on this platform: in this case, `exe`.\n         pub static EXE_EXTENSION: &'static str = \"exe\";\n     }\n \n-\n+    /// Constants for Intel Architecture-32 (x86) architectures.\n     pub mod x86 {\n+        /// A string describing the architecture in use: in this case, `x86`.\n         pub static ARCH: &'static str = \"x86\";\n     }\n+    /// Constants for Intel 64/AMD64 (x86-64) architectures.\n     pub mod x86_64 {\n+        /// A string describing the architecture in use: in this case,\n+        /// `x86_64`.\n         pub static ARCH: &'static str = \"x86_64\";\n     }\n+    /// Constants for Advanced RISC Machine (ARM) architectures.\n     pub mod arm {\n+        /// A string describing the architecture in use: in this case, `ARM`.\n         pub static ARCH: &'static str = \"arm\";\n     }\n+    /// Constants for Microprocessor without Interlocked Pipeline Stages\n+    /// (MIPS) architectures.\n     pub mod mips {\n+        /// A string describing the architecture in use: in this case, `MIPS`.\n         pub static ARCH: &'static str = \"mips\";\n     }\n }"}]}