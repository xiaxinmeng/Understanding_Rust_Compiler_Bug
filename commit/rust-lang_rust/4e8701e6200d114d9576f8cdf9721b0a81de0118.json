{"sha": "4e8701e6200d114d9576f8cdf9721b0a81de0118", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlODcwMWU2MjAwZDExNGQ5NTc2ZjhjZGY5NzIxYjBhODFkZTAxMTg=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-09-01T19:56:32Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-09-13T14:51:47Z"}, "message": "Fix debuginfo for ScalarPair abi parameters\n\nMark all of these as locals so the debugger does not try to interpret\nthem as being a pointer to the value. This extends the approach used in\nPR #81898.", "tree": {"sha": "2043efa07d5a039623a718ff29d612f7d3abeed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2043efa07d5a039623a718ff29d612f7d3abeed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e8701e6200d114d9576f8cdf9721b0a81de0118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8701e6200d114d9576f8cdf9721b0a81de0118", "html_url": "https://github.com/rust-lang/rust/commit/4e8701e6200d114d9576f8cdf9721b0a81de0118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e8701e6200d114d9576f8cdf9721b0a81de0118/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7790af4d889f6238935b1da590cd113b658c53a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7790af4d889f6238935b1da590cd113b658c53a8", "html_url": "https://github.com/rust-lang/rust/commit/7790af4d889f6238935b1da590cd113b658c53a8"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "c710fcc2c1dcb665e131a2bd147c2fbced879c61", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4e8701e6200d114d9576f8cdf9721b0a81de0118/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8701e6200d114d9576f8cdf9721b0a81de0118/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=4e8701e6200d114d9576f8cdf9721b0a81de0118", "patch": "@@ -3,9 +3,11 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir;\n use rustc_middle::ty;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_session::config::DebugInfo;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n+use rustc_target::abi::Abi;\n use rustc_target::abi::Size;\n \n use super::operand::{OperandRef, OperandValue};\n@@ -368,21 +370,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         {\n                             let arg_index = place.local.index() - 1;\n                             if target_is_msvc {\n-                                // Rust compiler decomposes every &str or slice argument into two components:\n-                                // a pointer to the memory address where the data is stored and a usize representing\n-                                // the length of the str (or slice). These components will later be used to reconstruct\n-                                // the original argument inside the body of the function that owns it (see the\n-                                // definition of debug_introduce_local for more details).\n-                                //\n-                                // Since the original argument is declared inside a function rather than being passed\n-                                // in as an argument, it must be marked as a LocalVariable for MSVC debuggers to visualize\n-                                // its data correctly. (See issue #81894 for an in-depth description of the problem).\n-                                match *var_ty.kind() {\n-                                    ty::Ref(_, inner_type, _) => match *inner_type.kind() {\n-                                        ty::Slice(_) | ty::Str => VariableKind::LocalVariable,\n-                                        _ => VariableKind::ArgumentVariable(arg_index + 1),\n-                                    },\n-                                    _ => VariableKind::ArgumentVariable(arg_index + 1),\n+                                // ScalarPair parameters are spilled to the stack so they need to\n+                                // be marked as a `LocalVariable` for MSVC debuggers to visualize\n+                                // their data correctly. (See #81894 & #88625)\n+                                let var_ty_layout = self.cx.layout_of(var_ty);\n+                                if let Abi::ScalarPair(_, _) = var_ty_layout.abi {\n+                                    VariableKind::LocalVariable\n+                                } else {\n+                                    VariableKind::ArgumentVariable(arg_index + 1)\n                                 }\n                             } else {\n                                 // FIXME(eddyb) shouldn't `ArgumentVariable` indices be"}, {"sha": "3846fb42f81a5ecc1b2c1fb10281cba837efeef6", "filename": "src/test/debuginfo/msvc-scalarpair-params.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4e8701e6200d114d9576f8cdf9721b0a81de0118/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8701e6200d114d9576f8cdf9721b0a81de0118/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs?ref=4e8701e6200d114d9576f8cdf9721b0a81de0118", "patch": "@@ -6,14 +6,14 @@\n // cdb-command: dx r1\n // cdb-check:r1               : (0xa..0xc) [Type: core::ops::range::Range<u32>]\n // cdb-command: dx r2\n-// cdb-check:r2               : 0x14 [Type: core::ops::range::Range<u64> *]\n+// cdb-check:r2               : (0x14..0x1e) [Type: core::ops::range::Range<u64>]\n \n // cdb-command: g\n \n // cdb-command: dx r1\n // cdb-check:r1               : (0x9..0x64) [Type: core::ops::range::Range<u32>]\n // cdb-command: dx r2\n-// cdb-check:r2               : 0xc [Type: core::ops::range::Range<u64> *]\n+// cdb-check:r2               : (0xc..0x5a) [Type: core::ops::range::Range<u64>]\n \n // cdb-command: g\n \n@@ -22,8 +22,9 @@\n // cdb-check:    [variant]        : Some\n // cdb-check:    [+0x004] __0              : 0x4d2 [Type: [...]]\n // cdb-command: dx o2\n-// cdb-check:o2               : 0x1 [Type: enum$<core::option::Option<u64> > *]\n-// cdb-check:    [variant]\n+// cdb-check:o2               : Some [Type: enum$<core::option::Option<u64> >]\n+// cdb-check:    [variant]        : Some\n+// cdb-check:    [+0x008] __0              : 0x162e [Type: unsigned __int64]\n \n // cdb-command: g\n \n@@ -32,22 +33,22 @@\n // cdb-check:    [0]              : 0xa [Type: unsigned int]\n // cdb-check:    [1]              : 0x14 [Type: unsigned int]\n // cdb-command: dx t2\n-// cdb-check:t2               : 0x1e [Type: tuple$<u64,u64> *]\n-// cdb-check:    [0]              : Unable to read memory at Address 0x1e\n-// cdb-check:    [1]              : Unable to read memory at Address 0x26\n+// cdb-check:t2               : (0x1e, 0x28) [Type: tuple$<u64,u64>]\n+// cdb-check:    [0]              : 0x1e [Type: unsigned __int64]\n+// cdb-check:    [1]              : 0x28 [Type: unsigned __int64]\n \n // cdb-command: g\n \n // cdb-command: dx s\n // cdb-check:s                : \"this is a static str\" [Type: str]\n-// cdb-check:    [len]            : 0x14 [Type: unsigned __int64]\n+// cdb-check:    [len]            : 0x14 [Type: unsigned [...]]\n // cdb-check:    [chars]\n \n // cdb-command: g\n \n // cdb-command: dx s\n // cdb-check:s                : { len=0x5 } [Type: slice$<u8>]\n-// cdb-check:    [len]            : 0x5 [Type: unsigned __int64]\n+// cdb-check:    [len]            : 0x5 [Type: unsigned [...]]\n // cdb-check:    [0]              : 0x1 [Type: unsigned char]\n // cdb-check:    [1]              : 0x2 [Type: unsigned char]\n // cdb-check:    [2]              : 0x3 [Type: unsigned char]"}]}