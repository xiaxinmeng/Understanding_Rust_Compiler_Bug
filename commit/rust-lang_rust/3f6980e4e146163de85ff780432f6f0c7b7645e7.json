{"sha": "3f6980e4e146163de85ff780432f6f0c7b7645e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNjk4MGU0ZTE0NjE2M2RlODVmZjc4MDQzMmY2ZjBjN2I3NjQ1ZTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-04T19:20:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-04T19:41:46Z"}, "message": "simplify macro expansion code\n\nUsing `Option` arguments such that you always pass `None` or `Some` at\nthe call site is a code smell.", "tree": {"sha": "71c60fd6b6d1cb07f56602024466cb8b41b97ea9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c60fd6b6d1cb07f56602024466cb8b41b97ea9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f6980e4e146163de85ff780432f6f0c7b7645e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6980e4e146163de85ff780432f6f0c7b7645e7", "html_url": "https://github.com/rust-lang/rust/commit/3f6980e4e146163de85ff780432f6f0c7b7645e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f6980e4e146163de85ff780432f6f0c7b7645e7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95dc8ef265183a624593a5ef49df31e53daf160e", "url": "https://api.github.com/repos/rust-lang/rust/commits/95dc8ef265183a624593a5ef49df31e53daf160e", "html_url": "https://github.com/rust-lang/rust/commit/95dc8ef265183a624593a5ef49df31e53daf160e"}], "stats": {"total": 77, "additions": 50, "deletions": 27}, "files": [{"sha": "8f27a7fc9d6f8cd5fe5c6ae83394be6824b9b228", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3f6980e4e146163de85ff780432f6f0c7b7645e7/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6980e4e146163de85ff780432f6f0c7b7645e7/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=3f6980e4e146163de85ff780432f6f0c7b7645e7", "patch": "@@ -122,16 +122,27 @@ pub fn expand_hypothetical(\n     hypothetical_args: &ast::TokenTree,\n     token_to_map: SyntaxToken,\n ) -> Option<(SyntaxNode, SyntaxToken)> {\n-    let macro_file = MacroFile { macro_call_id: actual_macro_call };\n     let (tt, tmap_1) = mbe::syntax_node_to_token_tree(hypothetical_args.syntax());\n     let range =\n         token_to_map.text_range().checked_sub(hypothetical_args.syntax().text_range().start())?;\n     let token_id = tmap_1.token_by_range(range)?;\n-    let macro_def = expander(db, actual_macro_call)?;\n \n-    let hypothetical_expansion =\n-        macro_expand_with_arg(db, macro_file.macro_call_id, Some(Arc::new((tt, tmap_1))));\n-    let (node, tmap_2) = expansion_to_syntax(db, macro_file, hypothetical_expansion).value?;\n+    let lazy_id = match actual_macro_call {\n+        MacroCallId::LazyMacro(id) => id,\n+        MacroCallId::EagerMacro(_) => return None,\n+    };\n+\n+    let macro_def = {\n+        let loc = db.lookup_intern_macro(lazy_id);\n+        db.macro_def(loc.def)?\n+    };\n+\n+    let hypothetical_expansion = macro_def.expand(db, lazy_id, &tt);\n+\n+    let fragment_kind = to_fragment_kind(db, actual_macro_call);\n+\n+    let (node, tmap_2) =\n+        mbe::token_tree_to_syntax_node(&hypothetical_expansion.value, fragment_kind).ok()?;\n \n     let token_id = macro_def.map_id_down(token_id);\n     let range = tmap_2.range_by_token(token_id)?.by_kind(token_to_map.kind())?;\n@@ -156,17 +167,9 @@ fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNod\n fn parse_macro_expansion(\n     db: &dyn AstDatabase,\n     macro_file: MacroFile,\n-) -> ExpandResult<Option<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)>> {\n-    let result = db.macro_expand(macro_file.macro_call_id);\n-    expansion_to_syntax(db, macro_file, result)\n-}\n-\n-fn expansion_to_syntax(\n-    db: &dyn AstDatabase,\n-    macro_file: MacroFile,\n-    result: ExpandResult<Option<Arc<tt::Subtree>>>,\n ) -> ExpandResult<Option<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)>> {\n     let _p = profile::span(\"parse_macro_expansion\");\n+    let result = db.macro_expand(macro_file.macro_call_id);\n \n     if let Some(err) = &result.err {\n         // Note:\n@@ -309,19 +312,6 @@ fn macro_expand_error(db: &dyn AstDatabase, macro_call: MacroCallId) -> Option<E\n     db.macro_expand(macro_call).err\n }\n \n-fn expander(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<TokenExpander>> {\n-    let lazy_id = match id {\n-        MacroCallId::LazyMacro(id) => id,\n-        MacroCallId::EagerMacro(_id) => {\n-            return None;\n-        }\n-    };\n-\n-    let loc = db.lookup_intern_macro(lazy_id);\n-    let macro_rules = db.macro_def(loc.def)?;\n-    Some(macro_rules)\n-}\n-\n fn macro_expand_with_arg(\n     db: &dyn AstDatabase,\n     id: MacroCallId,"}, {"sha": "00de7a711755cab84d36aaf806fda0a2ad3b8424", "filename": "docs/dev/style.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3f6980e4e146163de85ff780432f6f0c7b7645e7/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/3f6980e4e146163de85ff780432f6f0c7b7645e7/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=3f6980e4e146163de85ff780432f6f0c7b7645e7", "patch": "@@ -449,6 +449,39 @@ fn query_all(name: String, case_sensitive: bool) -> Vec<Item> { ... }\n fn query_first(name: String, case_sensitive: bool) -> Option<Item> { ... }\n ```\n \n+## Prefer Separate Functions Over Parameters\n+\n+If a function has a `bool` or an `Option` parameter, and it is always called with `true`, `false`, `Some` and `None` literals, split the function in two.\n+\n+```rust\n+// GOOD\n+fn caller_a() {\n+    foo()\n+}\n+\n+fn caller_b() {\n+    foo_with_bar(Bar::new())\n+}\n+\n+fn foo() { ... }\n+fn foo_with_bar(bar: Bar) { ... }\n+\n+// BAD\n+fn caller_a() {\n+    foo(None)\n+}\n+\n+fn caller_b() {\n+    foo(Some(Bar::new()))\n+}\n+\n+fn foo(bar: Option<Bar>) { ... }\n+```\n+\n+**Rationale:** more often than not, such functions display \"`false sharing`\" -- they have additional `if` branching inside for two different cases.\n+Splitting the two different control flows into two functions simplifies each path, and remove cross-dependencies between the two paths.\n+If there's common code between `foo` and `foo_with_bar`, extract *that* into a common helper.\n+\n ## Avoid Monomorphization\n \n Avoid making a lot of code type parametric, *especially* on the boundaries between crates."}]}