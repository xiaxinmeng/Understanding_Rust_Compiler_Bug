{"sha": "6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZTc0NDYwZTZhNWM4MDQ1YTdiNDNiODZhNjU2ZjI4MzU0ZjRiMGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-28T18:46:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-29T18:42:58Z"}, "message": "librustc: Disallow trait bounds in types, enumerations, and structure definitions. r=tjc", "tree": {"sha": "a09e6a6b8ba8566e6dc9f223d6cbbfbbdcde19e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a09e6a6b8ba8566e6dc9f223d6cbbfbbdcde19e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "html_url": "https://github.com/rust-lang/rust/commit/6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb4d39e1fef918242a5dba2a09d7b9faa437b911", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4d39e1fef918242a5dba2a09d7b9faa437b911", "html_url": "https://github.com/rust-lang/rust/commit/eb4d39e1fef918242a5dba2a09d7b9faa437b911"}], "stats": {"total": 531, "additions": 424, "deletions": 107}, "files": [{"sha": "3a51a2a212ced5a64aea7cf282d5fbf66a7cfeeb", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -35,13 +35,13 @@ pub mod linear {\n \n     const INITIAL_CAPACITY: uint = 32u; // 2^5\n \n-    struct Bucket<K: Eq Hash, V> {\n+    struct Bucket<K,V> {\n         hash: uint,\n         key: K,\n         value: V,\n     }\n \n-    pub struct LinearMap<K: Eq Hash, V> {\n+    pub struct LinearMap<K,V> {\n         k0: u64,\n         k1: u64,\n         resize_at: uint,\n@@ -408,7 +408,7 @@ pub mod linear {\n         pure fn ne(&self, other: &LinearMap<K, V>) -> bool { !self.eq(other) }\n     }\n \n-    pub struct LinearSet<T: Hash IterBytes Eq> {\n+    pub struct LinearSet<T> {\n         priv map: LinearMap<T, ()>\n     }\n "}, {"sha": "6d618627ece416ed1e5b1056869d8d9929835319", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -1111,7 +1111,7 @@ pub mod fsync {\n \n \n     // Artifacts that need to fsync on destruction\n-    pub struct Res<t: Copy> {\n+    pub struct Res<t> {\n         arg: Arg<t>,\n     }\n "}, {"sha": "dc245f5bffd5691c50d30ac540fa3eecbff21d37", "filename": "src/libcore/oldcomm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Foldcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Foldcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foldcomm.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -68,7 +68,7 @@ use vec;\n  * transmitted. If a port value is copied, both copies refer to the same\n  * port.  Ports may be associated with multiple `chan`s.\n  */\n-pub enum Port<T: Owned> {\n+pub enum Port<T> {\n     Port_(@PortPtr<T>)\n }\n \n@@ -84,7 +84,7 @@ pub enum Port<T: Owned> {\n  * data will be silently dropped.  Channels may be duplicated and\n  * themselves transmitted over other channels.\n  */\n-pub enum Chan<T: Owned> {\n+pub enum Chan<T> {\n     Chan_(port_id)\n }\n \n@@ -120,7 +120,7 @@ pub fn listen<T: Owned, U>(f: fn(Chan<T>) -> U) -> U {\n     f(po.chan())\n }\n \n-struct PortPtr<T:Owned> {\n+struct PortPtr<T> {\n   po: *rust_port,\n   drop {\n     unsafe {\n@@ -238,7 +238,7 @@ fn peek_chan<T: Owned>(ch: Chan<T>) -> bool {\n }\n \n /// Receive on a raw port pointer\n-fn recv_<T: Owned>(p: *rust_port) -> T {\n+fn recv_<T>(p: *rust_port) -> T {\n     unsafe {\n         let yield = 0;\n         let yieldp = ptr::addr_of(&yield);"}, {"sha": "5af9950ff0879f25d13d41e05993c7b34fff9146", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 289, "deletions": 5, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -151,7 +151,7 @@ type Buffer<T: Owned> = {\n #[cfg(stage1)]\n #[cfg(stage2)]\n #[cfg(stage3)]\n-pub struct Buffer<T: Owned> {\n+pub struct Buffer<T> {\n     header: BufferHeader,\n     data: T,\n }\n@@ -212,10 +212,18 @@ impl PacketHeader {\n }\n \n #[doc(hidden)]\n+#[cfg(stage0)]\n pub struct Packet<T: Owned> {\n     header: PacketHeader,\n     mut payload: Option<T>,\n }\n+#[doc(hidden)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub struct Packet<T> {\n+    header: PacketHeader,\n+    mut payload: Option<T>,\n+}\n \n #[doc(hidden)]\n pub trait HasBuffer {\n@@ -256,12 +264,11 @@ fn unibuffer<T: Owned>() -> ~Buffer<Packet<T>> {\n     }\n     move b\n }\n-\n #[doc(hidden)]\n #[cfg(stage1)]\n #[cfg(stage2)]\n #[cfg(stage3)]\n-fn unibuffer<T: Owned>() -> ~Buffer<Packet<T>> {\n+fn unibuffer<T>() -> ~Buffer<Packet<T>> {\n     let b = ~Buffer {\n         header: BufferHeader(),\n         data: Packet {\n@@ -277,13 +284,24 @@ fn unibuffer<T: Owned>() -> ~Buffer<Packet<T>> {\n }\n \n #[doc(hidden)]\n+#[cfg(stage0)]\n pub fn packet<T: Owned>() -> *Packet<T> {\n     let b = unibuffer();\n     let p = ptr::addr_of(&(b.data));\n     // We'll take over memory management from here.\n     unsafe { forget(move b) }\n     p\n }\n+#[doc(hidden)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub fn packet<T>() -> *Packet<T> {\n+    let b = unibuffer();\n+    let p = ptr::addr_of(&(b.data));\n+    // We'll take over memory management from here.\n+    unsafe { forget(move b) }\n+    p\n+}\n \n #[doc(hidden)]\n pub fn entangle_buffer<T: Owned, Tstart: Owned>(\n@@ -387,11 +405,19 @@ fn swap_state_rel(dst: &mut State, src: State) -> State {\n }\n \n #[doc(hidden)]\n+#[cfg(stage0)]\n pub unsafe fn get_buffer<T: Owned>(p: *PacketHeader) -> ~Buffer<T> {\n     transmute((*p).buf_header())\n }\n+#[doc(hidden)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub unsafe fn get_buffer<T>(p: *PacketHeader) -> ~Buffer<T> {\n+    transmute((*p).buf_header())\n+}\n \n // This could probably be done with SharedMutableState to avoid move_it!().\n+#[cfg(stage0)]\n struct BufferResource<T: Owned> {\n     buffer: ~Buffer<T>,\n \n@@ -413,7 +439,31 @@ struct BufferResource<T: Owned> {\n         }\n     }\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+struct BufferResource<T> {\n+    buffer: ~Buffer<T>,\n \n+    drop {\n+        unsafe {\n+            let b = move_it!(self.buffer);\n+            //let p = ptr::addr_of(*b);\n+            //error!(\"drop %?\", p);\n+            let old_count = atomic_sub_rel(&mut b.header.ref_count, 1);\n+            //let old_count = atomic_xchng_rel(b.header.ref_count, 0);\n+            if old_count == 1 {\n+                // The new count is 0.\n+\n+                // go go gadget drop glue\n+            }\n+            else {\n+                forget(move b)\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(stage0)]\n fn BufferResource<T: Owned>(b: ~Buffer<T>) -> BufferResource<T> {\n     //let p = ptr::addr_of(*b);\n     //error!(\"take %?\", p);\n@@ -424,8 +474,21 @@ fn BufferResource<T: Owned>(b: ~Buffer<T>) -> BufferResource<T> {\n         buffer: move b\n     }\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+fn BufferResource<T>(b: ~Buffer<T>) -> BufferResource<T> {\n+    //let p = ptr::addr_of(*b);\n+    //error!(\"take %?\", p);\n+    atomic_add_acq(&mut b.header.ref_count, 1);\n+\n+    BufferResource {\n+        // tjc: ????\n+        buffer: move b\n+    }\n+}\n \n #[doc(hidden)]\n+#[cfg(stage0)]\n pub fn send<T: Owned, Tbuffer: Owned>(p: SendPacketBuffered<T, Tbuffer>,\n                                     payload: T) -> bool {\n     let header = p.header();\n@@ -467,6 +530,49 @@ pub fn send<T: Owned, Tbuffer: Owned>(p: SendPacketBuffered<T, Tbuffer>,\n         }\n     }\n }\n+#[doc(hidden)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub fn send<T,Tbuffer>(p: SendPacketBuffered<T,Tbuffer>, payload: T) -> bool {\n+    let header = p.header();\n+    let p_ = p.unwrap();\n+    let p = unsafe { &*p_ };\n+    assert ptr::addr_of(&(p.header)) == header;\n+    assert p.payload.is_none();\n+    p.payload = move Some(move payload);\n+    let old_state = swap_state_rel(&mut p.header.state, Full);\n+    match old_state {\n+        Empty => {\n+            // Yay, fastpath.\n+\n+            // The receiver will eventually clean this up.\n+            //unsafe { forget(p); }\n+            return true;\n+        }\n+        Full => fail ~\"duplicate send\",\n+        Blocked => {\n+            debug!(\"waking up task for %?\", p_);\n+            let old_task = swap_task(&mut p.header.blocked_task, ptr::null());\n+            if !old_task.is_null() {\n+                unsafe {\n+                    rustrt::task_signal_event(\n+                        old_task,\n+                        ptr::addr_of(&(p.header)) as *libc::c_void);\n+                    rustrt::rust_task_deref(old_task);\n+                }\n+            }\n+\n+            // The receiver will eventually clean this up.\n+            //unsafe { forget(p); }\n+            return true;\n+        }\n+        Terminated => {\n+            // The receiver will never receive this. Rely on drop_glue\n+            // to clean everything up.\n+            return false;\n+        }\n+    }\n+}\n \n /** Receives a message from a pipe.\n \n@@ -812,13 +918,24 @@ pub fn select<T: Owned, Tb: Owned>(endpoints: ~[RecvPacketBuffered<T, Tb>])\n message.\n \n */\n+#[cfg(stage0)]\n pub type SendPacket<T: Owned> = SendPacketBuffered<T, Packet<T>>;\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub type SendPacket<T> = SendPacketBuffered<T, Packet<T>>;\n \n #[doc(hidden)]\n+#[cfg(stage0)]\n pub fn SendPacket<T: Owned>(p: *Packet<T>) -> SendPacket<T> {\n     SendPacketBuffered(p)\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub fn SendPacket<T>(p: *Packet<T>) -> SendPacket<T> {\n+    SendPacketBuffered(p)\n+}\n \n+#[cfg(stage0)]\n pub struct SendPacketBuffered<T: Owned, Tbuffer: Owned> {\n     mut p: Option<*Packet<T>>,\n     mut buffer: Option<BufferResource<Tbuffer>>,\n@@ -837,7 +954,31 @@ pub struct SendPacketBuffered<T: Owned, Tbuffer: Owned> {\n         //                } else { \"some\" }); }\n     }\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub struct SendPacketBuffered<T, Tbuffer> {\n+    mut p: Option<*Packet<T>>,\n+    mut buffer: Option<BufferResource<Tbuffer>>,\n+}\n \n+impl<T:Owned,Tbuffer:Owned> SendPacketBuffered<T,Tbuffer> : ::ops::Drop {\n+    fn finalize(&self) {\n+        //if self.p != none {\n+        //    debug!(\"drop send %?\", option::get(self.p));\n+        //}\n+        if self.p != None {\n+            let mut p = None;\n+            p <-> self.p;\n+            sender_terminate(option::unwrap(move p))\n+        }\n+        //unsafe { error!(\"send_drop: %?\",\n+        //                if self.buffer == none {\n+        //                    \"none\"\n+        //                } else { \"some\" }); }\n+    }\n+}\n+\n+#[cfg(stage0)]\n pub fn SendPacketBuffered<T: Owned, Tbuffer: Owned>(p: *Packet<T>)\n     -> SendPacketBuffered<T, Tbuffer> {\n         //debug!(\"take send %?\", p);\n@@ -849,8 +990,50 @@ pub fn SendPacketBuffered<T: Owned, Tbuffer: Owned>(p: *Packet<T>)\n         }\n     }\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub fn SendPacketBuffered<T,Tbuffer>(p: *Packet<T>)\n+    -> SendPacketBuffered<T, Tbuffer> {\n+        //debug!(\"take send %?\", p);\n+    SendPacketBuffered {\n+        p: Some(p),\n+        buffer: unsafe {\n+            Some(BufferResource(\n+                get_buffer(ptr::addr_of(&((*p).header)))))\n+        }\n+    }\n+}\n+\n+#[cfg(stage0)]\n+impl<T:Owned,Tbuffer:Owned> SendPacketBuffered<T,Tbuffer> {\n+    fn unwrap() -> *Packet<T> {\n+        let mut p = None;\n+        p <-> self.p;\n+        option::unwrap(move p)\n+    }\n+\n+    pure fn header() -> *PacketHeader {\n+        match self.p {\n+          Some(packet) => unsafe {\n+            let packet = &*packet;\n+            let header = ptr::addr_of(&(packet.header));\n+            //forget(packet);\n+            header\n+          },\n+          None => fail ~\"packet already consumed\"\n+        }\n+    }\n \n-impl<T: Owned, Tbuffer: Owned> SendPacketBuffered<T, Tbuffer> {\n+    fn reuse_buffer() -> BufferResource<Tbuffer> {\n+        //error!(\"send reuse_buffer\");\n+        let mut tmp = None;\n+        tmp <-> self.buffer;\n+        option::unwrap(move tmp)\n+    }\n+}\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+impl<T,Tbuffer> SendPacketBuffered<T,Tbuffer> {\n     fn unwrap() -> *Packet<T> {\n         let mut p = None;\n         p <-> self.p;\n@@ -879,13 +1062,25 @@ impl<T: Owned, Tbuffer: Owned> SendPacketBuffered<T, Tbuffer> {\n \n /// Represents the receive end of a pipe. It can receive exactly one\n /// message.\n+#[cfg(stage0)]\n pub type RecvPacket<T: Owned> = RecvPacketBuffered<T, Packet<T>>;\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub type RecvPacket<T> = RecvPacketBuffered<T, Packet<T>>;\n \n #[doc(hidden)]\n+#[cfg(stage0)]\n pub fn RecvPacket<T: Owned>(p: *Packet<T>) -> RecvPacket<T> {\n     RecvPacketBuffered(p)\n }\n+#[doc(hidden)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub fn RecvPacket<T>(p: *Packet<T>) -> RecvPacket<T> {\n+    RecvPacketBuffered(p)\n+}\n \n+#[cfg(stage0)]\n pub struct RecvPacketBuffered<T: Owned, Tbuffer: Owned> {\n     mut p: Option<*Packet<T>>,\n     mut buffer: Option<BufferResource<Tbuffer>>,\n@@ -904,6 +1099,29 @@ pub struct RecvPacketBuffered<T: Owned, Tbuffer: Owned> {\n         //                } else { \"some\" }); }\n     }\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub struct RecvPacketBuffered<T, Tbuffer> {\n+    mut p: Option<*Packet<T>>,\n+    mut buffer: Option<BufferResource<Tbuffer>>,\n+}\n+\n+impl<T:Owned, Tbuffer:Owned> RecvPacketBuffered<T,Tbuffer> : ::ops::Drop {\n+    fn finalize(&self) {\n+        //if self.p != none {\n+        //    debug!(\"drop recv %?\", option::get(self.p));\n+        //}\n+        if self.p != None {\n+            let mut p = None;\n+            p <-> self.p;\n+            receiver_terminate(option::unwrap(move p))\n+        }\n+        //unsafe { error!(\"recv_drop: %?\",\n+        //                if self.buffer == none {\n+        //                    \"none\"\n+        //                } else { \"some\" }); }\n+    }\n+}\n \n impl<T: Owned, Tbuffer: Owned> RecvPacketBuffered<T, Tbuffer> {\n     fn unwrap() -> *Packet<T> {\n@@ -934,6 +1152,7 @@ impl<T: Owned, Tbuffer: Owned> RecvPacketBuffered<T, Tbuffer> : Selectable {\n     }\n }\n \n+#[cfg(stage0)]\n pub fn RecvPacketBuffered<T: Owned, Tbuffer: Owned>(p: *Packet<T>)\n     -> RecvPacketBuffered<T, Tbuffer> {\n     //debug!(\"take recv %?\", p);\n@@ -945,12 +1164,33 @@ pub fn RecvPacketBuffered<T: Owned, Tbuffer: Owned>(p: *Packet<T>)\n         }\n     }\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub fn RecvPacketBuffered<T,Tbuffer>(p: *Packet<T>)\n+    -> RecvPacketBuffered<T,Tbuffer> {\n+    //debug!(\"take recv %?\", p);\n+    RecvPacketBuffered {\n+        p: Some(p),\n+        buffer: unsafe {\n+            Some(BufferResource(\n+                get_buffer(ptr::addr_of(&((*p).header)))))\n+        }\n+    }\n+}\n \n #[doc(hidden)]\n+#[cfg(stage0)]\n pub fn entangle<T: Owned>() -> (SendPacket<T>, RecvPacket<T>) {\n     let p = packet();\n     (SendPacket(p), RecvPacket(p))\n }\n+#[doc(hidden)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub fn entangle<T>() -> (SendPacket<T>, RecvPacket<T>) {\n+    let p = packet();\n+    (SendPacket(p), RecvPacket(p))\n+}\n \n /** Spawn a task to provide a service.\n \n@@ -1042,24 +1282,50 @@ pub trait Peekable<T> {\n }\n \n #[doc(hidden)]\n+#[cfg(stage0)]\n struct Chan_<T:Owned> {\n-    mut endp: Option<streamp::client::Open<T>>,\n+    mut endp: Option<streamp::client::Open<T>>\n+}\n+#[doc(hidden)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+struct Chan_<T> {\n+    mut endp: Option<streamp::client::Open<T>>\n }\n \n /// An endpoint that can send many messages.\n+#[cfg(stage0)]\n pub enum Chan<T:Owned> {\n     Chan_(Chan_<T>)\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub enum Chan<T> {\n+    Chan_(Chan_<T>)\n+}\n \n #[doc(hidden)]\n+#[cfg(stage0)]\n struct Port_<T:Owned> {\n     mut endp: Option<streamp::server::Open<T>>,\n }\n+#[doc(hidden)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+struct Port_<T> {\n+    mut endp: Option<streamp::server::Open<T>>,\n+}\n \n /// An endpoint that can receive many messages.\n+#[cfg(stage0)]\n pub enum Port<T:Owned> {\n     Port_(Port_<T>)\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub enum Port<T> {\n+    Port_(Port_<T>)\n+}\n \n /** Creates a `(chan, port)` pair.\n \n@@ -1145,9 +1411,15 @@ impl<T: Owned> Port<T>: Selectable {\n }\n \n /// Treat many ports as one.\n+#[cfg(stage0)]\n pub struct PortSet<T: Owned> {\n     mut ports: ~[pipes::Port<T>],\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub struct PortSet<T> {\n+    mut ports: ~[pipes::Port<T>],\n+}\n \n pub fn PortSet<T: Owned>() -> PortSet<T>{\n     PortSet {\n@@ -1210,7 +1482,11 @@ impl<T: Owned> PortSet<T> : Peekable<T> {\n }\n \n /// A channel that can be shared between many senders.\n+#[cfg(stage0)]\n pub type SharedChan<T: Owned> = private::Exclusive<Chan<T>>;\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub type SharedChan<T> = private::Exclusive<Chan<T>>;\n \n impl<T: Owned> SharedChan<T>: GenericChan<T> {\n     fn send(x: T) {\n@@ -1278,9 +1554,17 @@ proto! oneshot (\n )\n \n /// The send end of a oneshot pipe.\n+#[cfg(stage0)]\n pub type ChanOne<T: Owned> = oneshot::client::Oneshot<T>;\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub type ChanOne<T> = oneshot::client::Oneshot<T>;\n /// The receive end of a oneshot pipe.\n+#[cfg(stage0)]\n pub type PortOne<T: Owned> = oneshot::server::Oneshot<T>;\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub type PortOne<T> = oneshot::server::Oneshot<T>;\n \n /// Initialiase a (send-endpoint, recv-endpoint) oneshot pipe pair.\n pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {"}, {"sha": "b6ac711d7649c0924828224c9aef53c245142ed5", "filename": "src/libcore/private.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -238,7 +238,7 @@ pub unsafe fn unwrap_shared_mutable_state<T: Owned>(rc: SharedMutableState<T>)\n  * Data races between tasks can result in crashes and, with sufficient\n  * cleverness, arbitrary type coercion.\n  */\n-pub type SharedMutableState<T: Owned> = ArcDestruct<T>;\n+pub type SharedMutableState<T> = ArcDestruct<T>;\n \n pub unsafe fn shared_mutable_state<T: Owned>(data: T) ->\n         SharedMutableState<T> {\n@@ -341,11 +341,11 @@ impl LittleLock {\n     }\n }\n \n-struct ExData<T: Owned> { lock: LittleLock, mut failed: bool, mut data: T, }\n+struct ExData<T> { lock: LittleLock, mut failed: bool, mut data: T, }\n /**\n  * An arc over mutable data that is protected by a lock. For library use only.\n  */\n-pub struct Exclusive<T: Owned> { x: SharedMutableState<ExData<T>> }\n+pub struct Exclusive<T> { x: SharedMutableState<ExData<T>> }\n \n pub fn exclusive<T:Owned >(user_data: T) -> Exclusive<T> {\n     let data = ExData {"}, {"sha": "ee20fb665bea69af2681601a77dddf78b5e9e03f", "filename": "src/libcore/private/global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Fprivate%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Fprivate%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fglobal.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -41,7 +41,7 @@ use sys::Closure;\n use task::spawn;\n use uint;\n \n-pub type GlobalDataKey<T: Owned> = &fn(v: T);\n+pub type GlobalDataKey<T> = &fn(v: T);\n \n pub unsafe fn global_data_clone_create<T: Owned Clone>(\n     key: GlobalDataKey<T>, create: &fn() -> ~T) -> T {"}, {"sha": "81a36e1ae13eeae027a4f2ef0eb924dd0a1d1974", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -41,7 +41,7 @@ pub fn align(size: uint, align: uint) -> uint {\n }\n \n /// Adaptor to wrap around visitors implementing MovePtr.\n-pub struct MovePtrAdaptor<V: TyVisitor MovePtr> {\n+pub struct MovePtrAdaptor<V> {\n     inner: V\n }\n pub fn MovePtrAdaptor<V: TyVisitor MovePtr>(v: V) -> MovePtrAdaptor<V> {"}, {"sha": "42765ef139ff54d01af710ac388de05c699a0808", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -45,7 +45,7 @@ use task;\n  *\n  * These two cases aside, the interface is safe.\n  */\n-pub type LocalDataKey<T: Durable> = &fn(v: @T);\n+pub type LocalDataKey<T> = &fn(v: @T);\n \n /**\n  * Remove a task-local data value from the table, returning the"}, {"sha": "3db6fa00f16ddcf0a219897ac78fc5c80acf1367", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -77,7 +77,7 @@ use cast;\n use container::Map;\n use oldcomm;\n use option;\n-use pipes::{Chan, GenericChan, GenericPort, Port};\n+use pipes::{Chan, GenericChan, GenericPort, Port, stream};\n use pipes;\n use prelude::*;\n use private;"}, {"sha": "26f4310bf1cfa7f766712d09affd9552dab780df", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -569,7 +569,7 @@ struct FnSig {\n  * by the meta information because, in some cases, the\n  * meta information is inferred. */\n #[deriving_eq]\n-struct FnTyBase<M: cmp::Eq> {\n+struct FnTyBase<M> {\n     meta: M,        // Either FnMeta or FnVid\n     sig: FnSig      // Types of arguments/return type\n }"}, {"sha": "8374a65f63c30f7df5b4686c405bfa2f63091ab9", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -598,6 +598,20 @@ fn convert_methods(ccx: @crate_ctxt,\n     }\n }\n \n+fn ensure_no_ty_param_bounds(ccx: @crate_ctxt,\n+                             span: span,\n+                             ty_params: &[ast::ty_param],\n+                             thing: &static/str) {\n+    for ty_params.each |ty_param| {\n+        if ty_param.bounds.len() > 0 {\n+            ccx.tcx.sess.span_err(\n+                span,\n+                fmt!(\"trait bounds are not allowed in %s definitions\",\n+                     thing));\n+        }\n+    }\n+}\n+\n fn convert(ccx: @crate_ctxt, it: @ast::item) {\n     let tcx = ccx.tcx;\n     let rp = tcx.region_paramd_items.find(it.id);\n@@ -607,6 +621,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n       // These don't define types.\n       ast::item_foreign_mod(_) | ast::item_mod(_) => {}\n       ast::item_enum(ref enum_definition, ref ty_params) => {\n+        ensure_no_ty_param_bounds(ccx, it.span, *ty_params, \"enumeration\");\n         let tpt = ty_of_item(ccx, it);\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n         get_enum_variant_types(ccx,\n@@ -644,13 +659,20 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n         let _ = convert_methods(ccx, provided_methods, rp, bounds);\n       }\n       ast::item_struct(struct_def, tps) => {\n+        ensure_no_ty_param_bounds(ccx, it.span, tps, \"structure\");\n+\n         // Write the class type\n         let tpt = ty_of_item(ccx, it);\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n         tcx.tcache.insert(local_def(it.id), tpt);\n \n         convert_struct(ccx, rp, struct_def, tps, tpt, it.id);\n       }\n+      ast::item_ty(_, ref ty_params) => {\n+        ensure_no_ty_param_bounds(ccx, it.span, *ty_params, \"type\");\n+        let tpt = ty_of_item(ccx, it);\n+        write_ty_to_tcx(tcx, it.id, tpt.ty);\n+      }\n       _ => {\n         // This call populates the type cache with the converted type\n         // of the item in passing. All we have to do here is to write"}, {"sha": "b2b1188388f455801621fc0019a17f8f7572a637", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -31,7 +31,7 @@ struct ValsAndBindings<V, T> {\n     mut bindings: ~[(V, VarValue<V, T>)],\n }\n \n-struct Node<V:Copy, T:Copy> {\n+struct Node<V, T> {\n     root: V,\n     possible_types: T,\n     rank: uint,"}, {"sha": "edffa32e501ee6ad3d003fef8f354a4942d6e894", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -79,7 +79,7 @@ impl &Condvar {\n  ****************************************************************************/\n \n /// An atomically reference counted wrapper for shared immutable state.\n-struct ARC<T: Const Owned> { x: SharedMutableState<T> }\n+struct ARC<T> { x: SharedMutableState<T> }\n \n /// Create an atomically reference counted wrapper.\n pub fn ARC<T: Const Owned>(data: T) -> ARC<T> {\n@@ -130,9 +130,9 @@ impl<T: Const Owned> ARC<T>: Clone {\n  ****************************************************************************/\n \n #[doc(hidden)]\n-struct MutexARCInner<T: Owned> { lock: Mutex, failed: bool, data: T }\n+struct MutexARCInner<T> { lock: Mutex, failed: bool, data: T }\n /// An ARC with mutable data protected by a blocking mutex.\n-struct MutexARC<T: Owned> { x: SharedMutableState<MutexARCInner<T>> }\n+struct MutexARC<T> { x: SharedMutableState<MutexARCInner<T>> }\n \n /// Create a mutex-protected ARC with the supplied data.\n pub fn MutexARC<T: Owned>(user_data: T) -> MutexARC<T> {\n@@ -267,14 +267,14 @@ fn PoisonOnFail(failed: &r/mut bool) -> PoisonOnFail {\n  ****************************************************************************/\n \n #[doc(hidden)]\n-struct RWARCInner<T: Const Owned> { lock: RWlock, failed: bool, data: T }\n+struct RWARCInner<T> { lock: RWlock, failed: bool, data: T }\n /**\n  * A dual-mode ARC protected by a reader-writer lock. The data can be accessed\n  * mutably or immutably, and immutably-accessing tasks may run concurrently.\n  *\n  * Unlike mutex_arcs, rw_arcs are safe, because they cannot be nested.\n  */\n-struct RWARC<T: Const Owned> {\n+struct RWARC<T> {\n     x: SharedMutableState<RWARCInner<T>>,\n     mut cant_nest: ()\n }\n@@ -426,10 +426,10 @@ fn borrow_rwlock<T: Const Owned>(state: &r/mut RWARCInner<T>) -> &r/RWlock {\n // FIXME (#3154) ice with struct/&<T> prevents these from being structs.\n \n /// The \"write permission\" token used for RWARC.write_downgrade().\n-pub enum RWWriteMode<T: Const Owned> =\n+pub enum RWWriteMode<T> =\n     (&mut T, sync::RWlockWriteMode, PoisonOnFail);\n /// The \"read permission\" token used for RWARC.write_downgrade().\n-pub enum RWReadMode<T:Const Owned> = (&T, sync::RWlockReadMode);\n+pub enum RWReadMode<T> = (&T, sync::RWlockReadMode);\n \n impl<T: Const Owned> &RWWriteMode<T> {\n     /// Access the pre-downgrade RWARC in write mode."}, {"sha": "16e8b63da81743b3aa9a820048d1cbe0395c1e1b", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -23,7 +23,14 @@ use core::pipes;\n use core::prelude::*;\n \n /// An extension of `pipes::stream` that allows both sending and receiving.\n-pub struct DuplexStream<T: Owned, U: Owned> {\n+#[cfg(stage0)]\n+pub struct DuplexStream<T:Owned, U:Owned> {\n+    priv chan: Chan<T>,\n+    priv port: Port<U>,\n+}\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub struct DuplexStream<T, U> {\n     priv chan: Chan<T>,\n     priv port: Port<U>,\n }"}, {"sha": "bd684baf6b300d19906fa16b91e9745216e8d0ba", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -63,7 +63,7 @@ and an `Unflattener` that converts the bytes to a value.\n \n Create using the constructors in the `serial` and `pod` modules.\n */\n-pub struct FlatPort<T, U: Unflattener<T>, P: BytePort> {\n+pub struct FlatPort<T, U, P> {\n     unflattener: U,\n     byte_port: P\n }\n@@ -74,7 +74,7 @@ byte vectors, and a `ByteChan` that transmits the bytes.\n \n Create using the constructors in the `serial` and `pod` modules.\n */\n-pub struct FlatChan<T, F: Flattener<T>, C: ByteChan> {\n+pub struct FlatChan<T, F, C> {\n     flattener: F,\n     byte_chan: C\n }\n@@ -181,14 +181,12 @@ pub mod pod {\n     use core::pipes;\n     use core::prelude::*;\n \n-    pub type ReaderPort<T: Copy Owned, R> =\n+    pub type ReaderPort<T, R> =\n         FlatPort<T, PodUnflattener<T>, ReaderBytePort<R>>;\n-    pub type WriterChan<T: Copy Owned, W> =\n+    pub type WriterChan<T, W> =\n         FlatChan<T, PodFlattener<T>, WriterByteChan<W>>;\n-    pub type PipePort<T: Copy Owned> =\n-        FlatPort<T, PodUnflattener<T>, PipeBytePort>;\n-    pub type PipeChan<T: Copy Owned> =\n-        FlatChan<T, PodFlattener<T>, PipeByteChan>;\n+    pub type PipePort<T> = FlatPort<T, PodUnflattener<T>, PipeBytePort>;\n+    pub type PipeChan<T> = FlatChan<T, PodFlattener<T>, PipeByteChan>;\n \n     /// Create a `FlatPort` from a `Reader`\n     pub fn reader_port<T: Copy Owned, R: Reader>(\n@@ -352,11 +350,11 @@ pub mod flatteners {\n \n \n     // FIXME #4074: Copy + Owned != POD\n-    pub struct PodUnflattener<T: Copy Owned> {\n+    pub struct PodUnflattener<T> {\n         bogus: ()\n     }\n \n-    pub struct PodFlattener<T: Copy Owned> {\n+    pub struct PodFlattener<T> {\n         bogus: ()\n     }\n \n@@ -398,14 +396,13 @@ pub mod flatteners {\n \n     pub type DeserializeBuffer<T> = ~fn(buf: &[u8]) -> T;\n \n-    pub struct DeserializingUnflattener<D: Decoder,\n-                                        T: Decodable<D>> {\n+    pub struct DeserializingUnflattener<D, T> {\n         deserialize_buffer: DeserializeBuffer<T>\n     }\n \n     pub type SerializeValue<T> = ~fn(val: &T) -> ~[u8];\n \n-    pub struct SerializingFlattener<S: Encoder, T: Encodable<S>> {\n+    pub struct SerializingFlattener<S, T> {\n         serialize_value: SerializeValue<T>\n     }\n \n@@ -518,11 +515,11 @@ pub mod bytepipes {\n     use core::pipes;\n     use core::prelude::*;\n \n-    pub struct ReaderBytePort<R: Reader> {\n+    pub struct ReaderBytePort<R> {\n         reader: R\n     }\n \n-    pub struct WriterByteChan<W: Writer> {\n+    pub struct WriterByteChan<W> {\n         writer: W\n     }\n \n@@ -767,9 +764,9 @@ mod test {\n         test_some_tcp_stream(reader_port, writer_chan, 9667);\n     }\n \n-    type ReaderPortFactory<U: Unflattener<int>> =\n+    type ReaderPortFactory<U> =\n         ~fn(TcpSocketBuf) -> FlatPort<int, U, ReaderBytePort<TcpSocketBuf>>;\n-    type WriterChanFactory<F: Flattener<int>> =\n+    type WriterChanFactory<F> =\n         ~fn(TcpSocketBuf) -> FlatChan<int, F, WriterByteChan<TcpSocketBuf>>;\n \n     fn test_some_tcp_stream<U: Unflattener<int>, F: Flattener<int>>(\n@@ -893,7 +890,7 @@ mod test {\n         use core::sys;\n         use core::task;\n \n-        type PortLoader<P: BytePort> =\n+        type PortLoader<P> =\n             ~fn(~[u8]) -> FlatPort<int, PodUnflattener<int>, P>;\n \n         fn reader_port_loader(bytes: ~[u8]"}, {"sha": "2fa2825eb4cd7489cfda1125fd6062c57df6ee0c", "filename": "src/libstd/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -24,9 +24,9 @@ use core::uint;\n use core::vec;\n \n /// A convenience type to treat a hashmap as a set\n-pub type Set<K:Eq IterBytes Hash> = HashMap<K, ()>;\n+pub type Set<K> = HashMap<K, ()>;\n \n-pub type HashMap<K:Eq IterBytes Hash, V> = chained::T<K, V>;\n+pub type HashMap<K, V> = chained::T<K, V>;\n \n pub trait StdMap<K:Eq IterBytes Hash Copy, V: Copy> {\n     /// Return the number of elements in the map\n@@ -142,12 +142,12 @@ pub mod chained {\n         mut next: Option<@Entry<K, V>>\n     }\n \n-    struct HashMap_<K:Eq IterBytes Hash, V> {\n+    struct HashMap_<K, V> {\n         mut count: uint,\n         mut chains: ~[mut Option<@Entry<K,V>>]\n     }\n \n-    pub type T<K:Eq IterBytes Hash, V> = @HashMap_<K, V>;\n+    pub type T<K, V> = @HashMap_<K, V>;\n \n     enum SearchResult<K, V> {\n         NotFound,"}, {"sha": "fcd9f8379b2f4688f55fe172e7e838f83897ca7c", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -22,7 +22,7 @@ extern \"C\" mod rusti {\n     fn init<T>() -> T;\n }\n \n-pub struct PriorityQueue <T: Ord>{\n+pub struct PriorityQueue<T> {\n     priv data: ~[T],\n }\n "}, {"sha": "6ded82d5ae4c4da9179ee22945453a326146f5c2", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -83,7 +83,7 @@ struct SemInner<Q> {\n     blocked:   Q\n }\n #[doc(hidden)]\n-enum Sem<Q: Owned> = Exclusive<SemInner<Q>>;\n+enum Sem<Q> = Exclusive<SemInner<Q>>;\n \n #[doc(hidden)]\n fn new_sem<Q: Owned>(count: int, q: Q) -> Sem<Q> {\n@@ -167,7 +167,7 @@ impl &Sem<~[mut Waitqueue]> {\n #[doc(hidden)]\n type SemRelease = SemReleaseGeneric<()>;\n type SemAndSignalRelease = SemReleaseGeneric<~[mut Waitqueue]>;\n-struct SemReleaseGeneric<Q: Owned> { sem: &Sem<Q> }\n+struct SemReleaseGeneric<Q> { sem: &Sem<Q> }\n \n impl<Q: Owned> SemReleaseGeneric<Q> : Drop {\n     fn finalize(&self) {"}, {"sha": "82090f8dd62c77b5113756308b208fba29b7b0d7", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -35,7 +35,7 @@ use core::prelude::*;\n //   * symmetric difference: ^\n // These would be convenient since the methods work like `each`\n \n-pub struct TreeMap<K: Ord, V> {\n+pub struct TreeMap<K, V> {\n     priv root: Option<~TreeNode<K, V>>,\n     priv length: uint\n }\n@@ -202,7 +202,7 @@ impl <K: Ord, V> TreeMap<K, V> {\n }\n \n /// Lazy forward iterator over a map\n-pub struct TreeMapIterator<K: Ord, V> {\n+pub struct TreeMapIterator<K, V> {\n     priv stack: ~[&~TreeNode<K, V>],\n     priv node: &Option<~TreeNode<K, V>>,\n     priv current: Option<&~TreeNode<K, V>>\n@@ -240,7 +240,7 @@ impl <K: Ord, V> TreeMapIterator<K, V> {\n     }\n }\n \n-pub struct TreeSet<T: Ord> {\n+pub struct TreeSet<T> {\n     priv map: TreeMap<T, ()>\n }\n \n@@ -518,7 +518,7 @@ impl <T: Ord> TreeSet<T> {\n }\n \n /// Lazy forward iterator over a set\n-pub struct TreeSetIterator<T: Ord> {\n+pub struct TreeSetIterator<T> {\n     priv iter: TreeMapIterator<T, ()>\n }\n \n@@ -540,7 +540,7 @@ impl <T: Ord> TreeSetIterator<T> {\n \n // Nodes keep track of their level in the tree, starting at 1 in the\n // leaves and with a red child sharing the level of the parent.\n-struct TreeNode<K: Ord, V> {\n+struct TreeNode<K, V> {\n     key: K,\n     value: V,\n     left: Option<~TreeNode<K, V>>,"}, {"sha": "81285e5e5635a398df01b66f887bb96181ad0934", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -235,10 +235,17 @@ struct Exec {\n     discovered_outputs: WorkMap\n }\n \n+#[cfg(stage0)]\n struct Work<T:Owned> {\n     prep: @Mut<Prep>,\n     res: Option<Either<T,PortOne<(Exec,T)>>>\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+struct Work<T> {\n+    prep: @Mut<Prep>,\n+    res: Option<Either<T,PortOne<(Exec,T)>>>\n+}\n \n fn json_encode<T:Encodable<json::Encoder>>(t: &T) -> ~str {\n     do io::with_str_writer |wr| {"}, {"sha": "0433aab51fc3efc6df8eed906147e22d9e56ee81", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -110,6 +110,7 @@ pub trait ext_ctxt_ast_builder {\n     fn ty_option(ty: @ast::Ty) -> @ast::Ty;\n     fn ty_infer() -> @ast::Ty;\n     fn ty_nil_ast_builder() -> @ast::Ty;\n+    fn strip_bounds(bounds: &[ast::ty_param]) -> ~[ast::ty_param];\n }\n \n impl ext_ctxt: ext_ctxt_ast_builder {\n@@ -370,6 +371,12 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n         }\n     }\n \n+    fn strip_bounds(bounds: &[ast::ty_param]) -> ~[ast::ty_param] {\n+        do bounds.map |ty_param| {\n+            ast::ty_param { bounds: @~[], ..copy *ty_param }\n+        }\n+    }\n+\n     fn item_ty_poly(name: ident,\n                     span: span,\n                     ty: @ast::Ty,"}, {"sha": "e7a8cbb9891f8a9e97a4ca1936eaa6a32b0ec652", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -248,7 +248,7 @@ impl state: to_type_decls {\n                 ast::enum_def(enum_def_ {\n                     variants: items_msg,\n                     common: None }),\n-                self.ty_params\n+                cx.strip_bounds(self.ty_params)\n             )\n         ]\n     }\n@@ -281,7 +281,7 @@ impl state: to_type_decls {\n                                    self.data_name()],\n                                  dummy_sp())\n                             .add_tys(cx.ty_vars_global(self.ty_params))))),\n-                    self.ty_params));\n+                    cx.strip_bounds(self.ty_params)));\n         }\n         else {\n             items.push(\n@@ -299,7 +299,7 @@ impl state: to_type_decls {\n                                         dummy_sp())\n                             .add_tys(cx.ty_vars_global(self.ty_params))),\n                                    self.proto.buffer_ty_path(cx)])),\n-                    self.ty_params));\n+                    cx.strip_bounds(self.ty_params)));\n         };\n         items\n     }\n@@ -417,7 +417,7 @@ impl protocol: gen_init {\n             cx.ident_of(~\"__Buffer\"),\n             dummy_sp(),\n             cx.ty_rec(fields),\n-            params)\n+            cx.strip_bounds(params))\n     }\n \n     fn compile(cx: ext_ctxt) -> @ast::item {"}, {"sha": "86dea693f8af627a9013a036e4994bde96dd3b0a", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -33,6 +33,7 @@ use core::str;\n use core::to_bytes;\n \n /// The specific types of unsupported syntax\n+#[deriving_eq]\n pub enum ObsoleteSyntax {\n     ObsoleteLowerCaseKindBounds,\n     ObsoleteLet,\n@@ -45,16 +46,8 @@ pub enum ObsoleteSyntax {\n     ObsoleteModeInFnType,\n     ObsoleteMoveInit,\n     ObsoleteBinaryMove,\n-    ObsoleteUnsafeBlock\n-}\n-\n-impl ObsoleteSyntax : cmp::Eq {\n-    pure fn eq(&self, other: &ObsoleteSyntax) -> bool {\n-        (*self) as uint == (*other) as uint\n-    }\n-    pure fn ne(&self, other: &ObsoleteSyntax) -> bool {\n-        !(*self).eq(other)\n-    }\n+    ObsoleteUnsafeBlock,\n+    ObsoleteUnenforcedBound\n }\n \n impl ObsoleteSyntax: to_bytes::IterBytes {\n@@ -123,6 +116,11 @@ impl Parser {\n             ObsoleteUnsafeBlock => (\n                 \"non-standalone unsafe block\",\n                 \"use an inner `unsafe { ... }` block instead\"\n+            ),\n+            ObsoleteUnenforcedBound => (\n+                \"unenforced type parameter bound\",\n+                \"use trait bounds on the functions that take the type as \\\n+                 arguments, not on the types themselves\"\n             )\n         };\n "}, {"sha": "9de875485db533028294707d1baa997deffcc33c", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -18,7 +18,7 @@ use core::dvec::DVec;\n use std::map::HashMap;\n use std::map;\n \n-type hash_interner<T: Const> =\n+type hash_interner<T> =\n     {map: HashMap<T, uint>,\n      vect: DVec<T>};\n "}, {"sha": "fc5cf1275183bba621a38105e3b918f6028a1710", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -17,7 +17,7 @@ extern mod std;\n \n export context;\n \n-struct arc_destruct<T:Const> {\n+struct arc_destruct<T> {\n   _data: int,\n }\n "}, {"sha": "6fd39368baecd6fd3c9d897f83b5ddf1478dd5ec", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -24,7 +24,7 @@ use core::libc::size_t;\n  * transmitted. If a port value is copied, both copies refer to the same\n  * port.  Ports may be associated with multiple `chan`s.\n  */\n-pub enum port<T: Owned> {\n+pub enum port<T> {\n     port_t(@port_ptr<T>)\n }\n \n@@ -35,7 +35,7 @@ pub fn port<T: Owned>() -> port<T> {\n     }\n }\n \n-struct port_ptr<T:Owned> {\n+struct port_ptr<T> {\n    po: *rust_port,\n }\n "}, {"sha": "17444018356eeb675b76002296a20e8a52b513da", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -122,15 +122,15 @@ mod map_reduce {\n     use std::map::HashMap;\n     use std::map;\n \n-    pub type putter<K: Owned, V: Owned> = fn(&K, V);\n+    pub type putter<K, V> = fn(&K, V);\n \n-    pub type mapper<K1: Owned, K2: Owned, V: Owned> = fn~(K1, putter<K2, V>);\n+    pub type mapper<K1, K2, V> = fn~(K1, putter<K2, V>);\n \n-    pub type getter<V: Owned> = fn() -> Option<V>;\n+    pub type getter<V> = fn() -> Option<V>;\n \n-    pub type reducer<K: Copy Owned, V: Copy Owned> = fn~(&K, getter<V>);\n+    pub type reducer<K, V> = fn~(&K, getter<V>);\n \n-    enum ctrl_proto<K: Copy Owned, V: Copy Owned> {\n+    enum ctrl_proto<K, V> {\n         find_reducer(K, Chan<Chan<::map_reduce::reduce_proto<V>>>),\n         mapper_done\n     }\n@@ -148,7 +148,7 @@ mod map_reduce {\n         }\n     )\n \n-    pub enum reduce_proto<V: Copy Owned> {\n+    pub enum reduce_proto<V> {\n         emit_val(V),\n         done,\n         addref,"}, {"sha": "925350d9b8804fb6c5ef85f3ccd77ae1bc9c624f", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub struct send_packet<T: Copy> {\n+pub struct send_packet<T> {\n   p: T\n }\n "}, {"sha": "31158df4185f7435fee26661f31c0fc14f42faf9", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -14,7 +14,7 @@ fn test00_start(ch: chan_t<int>, message: int) { send(ch, message); }\n type task_id = int;\n type port_id = int;\n \n-enum chan_t<T: Owned> = {task: task_id, port: port_id};\n+enum chan_t<T> = {task: task_id, port: port_id};\n \n fn send<T: Owned>(ch: chan_t<T>, data: T) { fail; }\n "}, {"sha": "9172364a2f916ff3cd49142fb0eb7ba75754f364", "filename": "src/test/run-fail/issue-2444.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2444.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -13,7 +13,7 @@\n extern mod std;\n use std::arc;\n \n-enum e<T: Const Owned> { e(arc::ARC<T>) }\n+enum e<T> { e(arc::ARC<T>) }\n \n fn foo() -> e<int> {fail;}\n "}, {"sha": "ee8cf89d528a50f45037f3e6f0fe8dd5f095f885", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -135,11 +135,6 @@ struct Spanned<T> {\n     node: T,\n }\n \n-enum AnEnum {\n-    AVariant,\n-    AnotherVariant\n-}\n-\n #[auto_encode]\n #[auto_decode]\n struct SomeStruct { v: ~[uint] }"}, {"sha": "ad32ffc75c9c1916ca1e65414f50daedc58a148a", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-struct Box<T: Copy> {c: @T}\n+struct Box<T> {c: @T}\n \n fn unbox<T: Copy>(b: Box<T>) -> T { return *b.c; }\n "}, {"sha": "bccb42c4938928e1ee640b0e8c67aaa1e1055ca4", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -27,7 +27,7 @@ impl cat_type : cmp::Eq {\n // for any int value that's less than the meows field\n \n // ok: T should be in scope when resolving the trait ref for map\n-struct cat<T: Copy> {\n+struct cat<T> {\n   // Yes, you can have negative meows\n   priv mut meows : int,\n "}, {"sha": "c2abcc7528300f4ddd548eef31348e8b75889d3d", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-struct Recbox<T: Copy> {x: @T}\n+struct Recbox<T> {x: @T}\n \n fn reclift<T: Copy>(t: T) -> Recbox<T> { return Recbox {x: @t}; }\n "}, {"sha": "a4a576abc758c3eb8a1d43f1da43f53385e97cc1", "filename": "src/test/run-pass/generic-exterior-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Recbox<T: Copy> {x: ~T}\n+struct Recbox<T> {x: ~T}\n \n fn reclift<T: Copy>(t: T) -> Recbox<T> { return Recbox {x: ~t}; }\n "}, {"sha": "0fa06e2f2129be204ceb2ceacc2be1dfb52b5a36", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -11,7 +11,7 @@\n trait clam<A: Copy> {\n   fn chowder(y: A);\n }\n-struct foo<A: Copy> {\n+struct foo<A> {\n   x: A,\n }\n "}, {"sha": "21201d0a957056e9320146141da0a8bf70b585c4", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait clam<A: Copy> { }\n-struct foo<A: Copy> {\n+struct foo<A> {\n     x: A,\n }\n "}, {"sha": "f1b7d45e440ec1c13443da5acc8717021442e5b8", "filename": "src/test/run-pass/issue-2445-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct c1<T: Copy> {\n+struct c1<T> {\n     x: T,\n }\n "}, {"sha": "fada6a7b02e1166de003c57c82451dbc6a1c4730", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct c1<T: Copy> {\n+struct c1<T> {\n     x: T,\n }\n "}, {"sha": "68a318eab4e3e07aec5d4e4d71f59f5e84e20741", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -34,7 +34,7 @@ pub mod pipes {\n         pure fn ne(&self, other: &state) -> bool { !(*self).eq(other) }\n     }\n \n-    pub type packet<T: Owned> = {\n+    pub type packet<T> = {\n         mut state: state,\n         mut blocked_task: Option<task::Task>,\n         mut payload: Option<T>\n@@ -157,7 +157,7 @@ pub mod pipes {\n         }\n     }\n \n-    pub struct send_packet<T: Owned> {\n+    pub struct send_packet<T> {\n         mut p: Option<*packet<T>>,\n     }\n \n@@ -185,7 +185,7 @@ pub mod pipes {\n         }\n     }\n \n-    pub struct recv_packet<T: Owned> {\n+    pub struct recv_packet<T> {\n         mut p: Option<*packet<T>>,\n     }\n "}, {"sha": "c578f1144a785239e6c1d1b31b0845176d5fcab0", "filename": "src/test/run-pass/issue-3149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-3149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fissue-3149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3149.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -22,7 +22,7 @@ pure fn Matrix4<T:Copy Num>(m11: T, m12: T, m13: T, m14: T,\n     }\n }\n \n-struct Matrix4<T:Copy Num> {\n+struct Matrix4<T> {\n     m11: T, m12: T, m13: T, m14: T,\n     m21: T, m22: T, m23: T, m24: T,\n     m31: T, m32: T, m33: T, m34: T,"}, {"sha": "cf0a0a07397c0d8c706de254c7cc7f84077f6ef6", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -29,7 +29,7 @@ fn align(size: uint, align: uint) -> uint {\n     ((size + align) - 1u) & !(align - 1u)\n }\n \n-enum ptr_visit_adaptor<V: TyVisitor movable_ptr> = Inner<V>;\n+enum ptr_visit_adaptor<V> = Inner<V>;\n \n impl<V: TyVisitor movable_ptr> ptr_visit_adaptor<V> {\n "}, {"sha": "7165d6089e85f36284d0618d8e02c3f7dd8ee7bc", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -13,7 +13,7 @@\n \n struct Arg<T> {val: T, fin: extern fn(T)}\n \n-struct finish<T: Copy> {\n+struct finish<T> {\n   arg: Arg<T>\n }\n "}, {"sha": "8cb597a0d792cf9514dbcc2ca236bce918771a5b", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce74460e6a5c8045a7b43b86a656f28354f4b0c/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=6ce74460e6a5c8045a7b43b86a656f28354f4b0c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // tests that ctrl's type gets inferred properly\n-type command<K: Owned, V: Owned> = {key: K, val: V};\n+type command<K, V> = {key: K, val: V};\n \n fn cache_server<K: Owned, V: Owned>(c: oldcomm::Chan<oldcomm::Chan<command<K, V>>>) {\n     let ctrl = oldcomm::Port();"}]}