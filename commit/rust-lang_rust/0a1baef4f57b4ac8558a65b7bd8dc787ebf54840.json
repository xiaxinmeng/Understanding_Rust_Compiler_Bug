{"sha": "0a1baef4f57b4ac8558a65b7bd8dc787ebf54840", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMWJhZWY0ZjU3YjRhYzg1NThhNjViN2JkOGRjNzg3ZWJmNTQ4NDA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-23T05:29:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-24T01:38:56Z"}, "message": "rt: Remove timer", "tree": {"sha": "8c2542499373feefeda54e0afc72c126dbd677a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c2542499373feefeda54e0afc72c126dbd677a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840", "html_url": "https://github.com/rust-lang/rust/commit/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9d28b2d9d9939b1134d48feb1d83864bae782d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d28b2d9d9939b1134d48feb1d83864bae782d5", "html_url": "https://github.com/rust-lang/rust/commit/a9d28b2d9d9939b1134d48feb1d83864bae782d5"}], "stats": {"total": 153, "additions": 26, "deletions": 127}, "files": [{"sha": "e249c8cc657af3af776cd290e863c86c8fe11ff8", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=0a1baef4f57b4ac8558a65b7bd8dc787ebf54840", "patch": "@@ -63,7 +63,6 @@ endif\n endif\n \n RUNTIME_CXXS_$(1)_$(2) := \\\n-              rt/sync/timer.cpp \\\n               rt/sync/lock_and_signal.cpp \\\n               rt/sync/rust_thread.cpp \\\n               rt/rust_builtin.cpp \\"}, {"sha": "cb81c14977032077df036fdd347f3eb590403fdc", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=0a1baef4f57b4ac8558a65b7bd8dc787ebf54840", "patch": "@@ -11,7 +11,6 @@\n /* Foreign builtins. */\n \n #include \"rust_util.h\"\n-#include \"sync/timer.h\"\n #include \"sync/rust_thread.h\"\n #include \"sync/lock_and_signal.h\"\n #include \"memory_region.h\"\n@@ -25,6 +24,7 @@\n \n #ifdef __APPLE__\n #include <crt_externs.h>\n+#include <mach/mach_time.h>\n #endif\n \n #if !defined(__WIN32__)\n@@ -242,10 +242,33 @@ get_time(int64_t *sec, int32_t *nsec) {\n }\n #endif\n \n+const uint64_t ns_per_s = 1000000000LL;\n+\n extern \"C\" CDECL void\n precise_time_ns(uint64_t *ns) {\n-    timer t;\n-    *ns = t.time_ns();\n+\n+#ifdef __APPLE__\n+    uint64_t time = mach_absolute_time();\n+    mach_timebase_info_data_t info = {0, 0};\n+    if (info.denom == 0) {\n+        mach_timebase_info(&info);\n+    }\n+    uint64_t time_nano = time * (info.numer / info.denom);\n+    *ns = time_nano;\n+#elif __WIN32__\n+    uint64_t ticks_per_s;\n+    QueryPerformanceFrequency((LARGE_INTEGER *)&ticks_per_s);\n+    if (ticks_per_s == 0LL) {\n+        ticks_per_s = 1LL;\n+    }\n+    uint64_t ticks;\n+    QueryPerformanceCounter((LARGE_INTEGER *)&ticks);\n+    *ns = ((ticks * ns_per_s) / ticks_per_s);\n+#else\n+    timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    *ns = (ts.tv_sec * ns_per_s + ts.tv_nsec);\n+#endif\n }\n \n struct rust_tm {"}, {"sha": "b9be4f1e25105475773ed4f53f7f8668ac5a16f6", "filename": "src/rt/rust_test_helpers.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840/src%2Frt%2Frust_test_helpers.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840/src%2Frt%2Frust_test_helpers.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_test_helpers.cpp?ref=0a1baef4f57b4ac8558a65b7bd8dc787ebf54840", "patch": "@@ -11,7 +11,6 @@\n // Helper functions used only in tests\n \n #include \"rust_util.h\"\n-#include \"sync/timer.h\"\n #include \"sync/rust_thread.h\"\n #include \"sync/lock_and_signal.h\"\n #include \"rust_abi.h\""}, {"sha": "99e5b107dc91705ca2fe1856db592f623611501a", "filename": "src/rt/sync/timer.cpp", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/a9d28b2d9d9939b1134d48feb1d83864bae782d5/src%2Frt%2Fsync%2Ftimer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a9d28b2d9d9939b1134d48feb1d83864bae782d5/src%2Frt%2Fsync%2Ftimer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Ftimer.cpp?ref=a9d28b2d9d9939b1134d48feb1d83864bae782d5", "patch": "@@ -1,85 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include \"../rust_globals.h\"\n-#include \"timer.h\"\n-\n-#if defined(__APPLE__)\n-#include <mach/mach_time.h>\n-#endif\n-\n-uint64_t ns_per_s = 1000000000LL;\n-\n-timer::timer() {\n-#if __WIN32__\n-    _ticks_per_s = 0LL;\n-    // FIXME (#2675): assert this works or have a workaround.\n-    QueryPerformanceFrequency((LARGE_INTEGER *)&_ticks_per_s);\n-    if (_ticks_per_s == 0LL) {\n-      _ticks_per_s = 1LL;\n-    }\n-#endif\n-    reset_us(0);\n-}\n-\n-void\n-timer::reset_us(uint64_t timeout_us) {\n-    _start_us = time_us();\n-    _timeout_us = timeout_us;\n-}\n-\n-uint64_t\n-timer::elapsed_us() {\n-    return time_us() - _start_us;\n-}\n-\n-double\n-timer::elapsed_ms() {\n-    return (double) elapsed_us() / 1000.0;\n-}\n-\n-int64_t\n-timer::remaining_us() {\n-    return _timeout_us - elapsed_us();\n-}\n-\n-bool\n-timer::has_timed_out() {\n-    return remaining_us() <= 0;\n-}\n-\n-uint64_t\n-timer::time_ns() {\n-#ifdef __APPLE__\n-    uint64_t time = mach_absolute_time();\n-    mach_timebase_info_data_t info = {0, 0};\n-    if (info.denom == 0) {\n-        mach_timebase_info(&info);\n-    }\n-    uint64_t time_nano = time * (info.numer / info.denom);\n-    return time_nano;\n-#elif __WIN32__\n-    uint64_t ticks;\n-    QueryPerformanceCounter((LARGE_INTEGER *)&ticks);\n-    return ((ticks * ns_per_s) / _ticks_per_s);\n-#else\n-    timespec ts;\n-    clock_gettime(CLOCK_MONOTONIC, &ts);\n-    return (ts.tv_sec * ns_per_s + ts.tv_nsec);\n-#endif\n-}\n-\n-uint64_t\n-timer::time_us() {\n-    return time_ns() / 1000;\n-}\n-\n-timer::~timer() {\n-}"}, {"sha": "59d05878b50716bc3327585973ac7f03bbd49b82", "filename": "src/rt/sync/timer.h", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a9d28b2d9d9939b1134d48feb1d83864bae782d5/src%2Frt%2Fsync%2Ftimer.h", "raw_url": "https://github.com/rust-lang/rust/raw/a9d28b2d9d9939b1134d48feb1d83864bae782d5/src%2Frt%2Fsync%2Ftimer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Ftimer.h?ref=a9d28b2d9d9939b1134d48feb1d83864bae782d5", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*\n- *  Utility class to measure time in a platform independent way.\n- */\n-\n-#ifndef TIMER_H\n-#define TIMER_H\n-\n-class timer {\n-private:\n-    uint64_t _start_us;\n-    uint64_t _timeout_us;\n-    uint64_t time_us();\n-#if __WIN32__\n-    uint64_t _ticks_per_s;\n-#endif\n-public:\n-    timer();\n-    void reset_us(uint64_t timeout);\n-    uint64_t elapsed_us();\n-    double elapsed_ms();\n-    int64_t remaining_us();\n-    bool has_timed_out();\n-    uint64_t time_ns();\n-    virtual ~timer();\n-};\n-\n-#endif /* TIMER_H */"}]}