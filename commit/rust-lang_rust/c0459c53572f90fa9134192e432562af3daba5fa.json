{"sha": "c0459c53572f90fa9134192e432562af3daba5fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNDU5YzUzNTcyZjkwZmE5MTM0MTkyZTQzMjU2MmFmM2RhYmE1ZmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-12T14:45:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-12T14:45:04Z"}, "message": "Merge #7956\n\n7956: Add assist to convert for_each into for loops r=Veykril a=SaiintBrisson\n\nThis PR resolves #7821.\r\nAdds an assist to that converts an `Iterator::for_each` into a for loop: \r\n\r\n```rust\r\nfn main() {\r\n    let vec = vec![(1, 2), (2, 3), (3, 4)];\r\n    x.iter().for_each(|(x, y)| {\r\n        println!(\"x: {}, y: {}\", x, y);\r\n    })\r\n}\r\n```\r\nbecomes\r\n```rust\r\nfn main() {\r\n    let vec = vec![(1, 2), (2, 3), (3, 4)];\r\n    for (x, y) in x.iter() {\r\n        println!(\"x: {}, y: {}\", x, y);\r\n    });\r\n}\r\n```\n\nCo-authored-by: Luiz Carlos Mour\u00e3o Paes de Carvalho <luizcarlosmpc@gmail.com>\nCo-authored-by: Luiz Carlos <luizcarlosmpc@gmail.com>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "4eaaf5618fbd742ae8212ff207bc42dc728bfd06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eaaf5618fbd742ae8212ff207bc42dc728bfd06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0459c53572f90fa9134192e432562af3daba5fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgS35wCRBK7hj4Ov3rIwAAdHIIADc/QZkMhUmEHYBqo3RlE/2P\nDO+jkeGCcbNveY5odf53k2KAN8J+03DI9nFEXlXo/T3FPJ96h8KWLLiTMSYQsZ8+\nOcKaC+PIAdZbtHpbWXV1TXU5GQpjNPy3WxF69HOsdAyP8JwgpyNGr5wfiAFOo9mD\n3qa+hj1lETpSK7ZfHThej3W863t8CV9LwV852v5DF2CFWjXFwQlstjv4/H2zGkS7\nXNUSy6wP5pic4q7NiUI/pmu6E3/WtxcdL3de+j53bU9LvwD/mlui2N4EuOr97Y/e\nwGeMkXHcU/jRTaQf6ReWcCZddUhMKe6koMvBGuc4St7NOo6deJNFfxc1yb5KnkQ=\n=m4Gr\n-----END PGP SIGNATURE-----\n", "payload": "tree 4eaaf5618fbd742ae8212ff207bc42dc728bfd06\nparent 19dd1fd4d41538de7ea386a2d0d18e27bf95f63c\nparent 6d35c67b6e39fae1efc48405b49d408b86666534\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615560304 +0000\ncommitter GitHub <noreply@github.com> 1615560304 +0000\n\nMerge #7956\n\n7956: Add assist to convert for_each into for loops r=Veykril a=SaiintBrisson\n\nThis PR resolves #7821.\r\nAdds an assist to that converts an `Iterator::for_each` into a for loop: \r\n\r\n```rust\r\nfn main() {\r\n    let vec = vec![(1, 2), (2, 3), (3, 4)];\r\n    x.iter().for_each(|(x, y)| {\r\n        println!(\"x: {}, y: {}\", x, y);\r\n    })\r\n}\r\n```\r\nbecomes\r\n```rust\r\nfn main() {\r\n    let vec = vec![(1, 2), (2, 3), (3, 4)];\r\n    for (x, y) in x.iter() {\r\n        println!(\"x: {}, y: {}\", x, y);\r\n    });\r\n}\r\n```\n\nCo-authored-by: Luiz Carlos Mour\u00e3o Paes de Carvalho <luizcarlosmpc@gmail.com>\nCo-authored-by: Luiz Carlos <luizcarlosmpc@gmail.com>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0459c53572f90fa9134192e432562af3daba5fa", "html_url": "https://github.com/rust-lang/rust/commit/c0459c53572f90fa9134192e432562af3daba5fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0459c53572f90fa9134192e432562af3daba5fa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19dd1fd4d41538de7ea386a2d0d18e27bf95f63c", "url": "https://api.github.com/repos/rust-lang/rust/commits/19dd1fd4d41538de7ea386a2d0d18e27bf95f63c", "html_url": "https://github.com/rust-lang/rust/commit/19dd1fd4d41538de7ea386a2d0d18e27bf95f63c"}, {"sha": "6d35c67b6e39fae1efc48405b49d408b86666534", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d35c67b6e39fae1efc48405b49d408b86666534", "html_url": "https://github.com/rust-lang/rust/commit/6d35c67b6e39fae1efc48405b49d408b86666534"}], "stats": {"total": 283, "additions": 283, "deletions": 0}, "files": [{"sha": "4e75a7b1407ef12f0f43e1a4bfb5d3accec8cca5", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/c0459c53572f90fa9134192e432562af3daba5fa/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0459c53572f90fa9134192e432562af3daba5fa/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=c0459c53572f90fa9134192e432562af3daba5fa", "patch": "@@ -0,0 +1,248 @@\n+use ide_db::helpers::FamousDefs;\n+use syntax::{\n+    ast::{self, edit::AstNodeEdit, make, ArgListOwner},\n+    AstNode,\n+};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: convert_iter_for_each_to_for\n+//\n+// Converts an Iterator::for_each function into a for loop.\n+//\n+// ```\n+// # //- /lib.rs crate:core\n+// # pub mod iter { pub mod traits { pub mod iterator { pub trait Iterator {} } } }\n+// # pub struct SomeIter;\n+// # impl self::iter::traits::iterator::Iterator for SomeIter {}\n+// # //- /lib.rs crate:main deps:core\n+// # use core::SomeIter;\n+// fn main() {\n+//     let iter = SomeIter;\n+//     iter.for_each$0(|(x, y)| {\n+//         println!(\"x: {}, y: {}\", x, y);\n+//     });\n+// }\n+// ```\n+// ->\n+// ```\n+// # use core::SomeIter;\n+// fn main() {\n+//     let iter = SomeIter;\n+//     for (x, y) in iter {\n+//         println!(\"x: {}, y: {}\", x, y);\n+//     }\n+// }\n+// ```\n+\n+pub(crate) fn convert_iter_for_each_to_for(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let method = ctx.find_node_at_offset::<ast::MethodCallExpr>()?;\n+\n+    let closure = match method.arg_list()?.args().next()? {\n+        ast::Expr::ClosureExpr(expr) => expr,\n+        _ => return None,\n+    };\n+\n+    let (method, receiver) = validate_method_call_expr(ctx, method)?;\n+\n+    let param_list = closure.param_list()?;\n+    let param = param_list.params().next()?.pat()?;\n+    let body = closure.body()?;\n+\n+    let stmt = method.syntax().parent().and_then(ast::ExprStmt::cast);\n+    let syntax = stmt.as_ref().map_or(method.syntax(), |stmt| stmt.syntax());\n+\n+    acc.add(\n+        AssistId(\"convert_iter_for_each_to_for\", AssistKind::RefactorRewrite),\n+        \"Replace this `Iterator::for_each` with a for loop\",\n+        syntax.text_range(),\n+        |builder| {\n+            let indent = stmt.as_ref().map_or(method.indent_level(), |stmt| stmt.indent_level());\n+\n+            let block = match body {\n+                ast::Expr::BlockExpr(block) => block,\n+                _ => make::block_expr(Vec::new(), Some(body)),\n+            }\n+            .reset_indent()\n+            .indent(indent);\n+\n+            let expr_for_loop = make::expr_for_loop(param, receiver, block);\n+            builder.replace(syntax.text_range(), expr_for_loop.syntax().text())\n+        },\n+    )\n+}\n+\n+fn validate_method_call_expr(\n+    ctx: &AssistContext,\n+    expr: ast::MethodCallExpr,\n+) -> Option<(ast::Expr, ast::Expr)> {\n+    let name_ref = expr.name_ref()?;\n+    if name_ref.syntax().text_range().intersect(ctx.frange.range).is_none()\n+        || name_ref.text() != \"for_each\"\n+    {\n+        return None;\n+    }\n+\n+    let sema = &ctx.sema;\n+\n+    let receiver = expr.receiver()?;\n+    let expr = ast::Expr::MethodCallExpr(expr);\n+\n+    let it_type = sema.type_of_expr(&receiver)?;\n+    let module = sema.scope(receiver.syntax()).module()?;\n+    let krate = module.krate();\n+\n+    let iter_trait = FamousDefs(sema, Some(krate)).core_iter_Iterator()?;\n+    it_type.impls_trait(sema.db, iter_trait, &[]).then(|| (expr, receiver))\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{self, check_assist};\n+\n+    use super::*;\n+\n+    const EMPTY_ITER_FIXTURE: &'static str = r\"\n+//- /lib.rs deps:core crate:empty_iter\n+pub struct EmptyIter;\n+impl Iterator for EmptyIter {\n+    type Item = usize;\n+    fn next(&mut self) -> Option<Self::Item> { None }\n+}\n+pub struct Empty;\n+impl Empty {\n+    pub fn iter(&self) -> EmptyIter { EmptyIter }\n+}\n+\";\n+\n+    fn check_assist_with_fixtures(before: &str, after: &str) {\n+        let before = &format!(\n+            \"//- /main.rs crate:main deps:core,empty_iter{}{}{}\",\n+            before,\n+            EMPTY_ITER_FIXTURE,\n+            FamousDefs::FIXTURE,\n+        );\n+        check_assist(convert_iter_for_each_to_for, before, after);\n+    }\n+\n+    fn check_assist_not_applicable(before: &str) {\n+        let before = &format!(\n+            \"//- /main.rs crate:main deps:core,empty_iter{}{}{}\",\n+            before,\n+            EMPTY_ITER_FIXTURE,\n+            FamousDefs::FIXTURE,\n+        );\n+        tests::check_assist_not_applicable(convert_iter_for_each_to_for, before);\n+    }\n+\n+    #[test]\n+    fn test_for_each_in_method_stmt() {\n+        check_assist_with_fixtures(\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty;\n+    x.iter().$0for_each(|(x, y)| {\n+        println!(\"x: {}, y: {}\", x, y);\n+    });\n+}\"#,\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty;\n+    for (x, y) in x.iter() {\n+        println!(\"x: {}, y: {}\", x, y);\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_for_each_in_method() {\n+        check_assist_with_fixtures(\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty;\n+    x.iter().$0for_each(|(x, y)| {\n+        println!(\"x: {}, y: {}\", x, y);\n+    })\n+}\"#,\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty;\n+    for (x, y) in x.iter() {\n+        println!(\"x: {}, y: {}\", x, y);\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_for_each_in_iter_stmt() {\n+        check_assist_with_fixtures(\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty.iter();\n+    x.$0for_each(|(x, y)| {\n+        println!(\"x: {}, y: {}\", x, y);\n+    });\n+}\"#,\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty.iter();\n+    for (x, y) in x {\n+        println!(\"x: {}, y: {}\", x, y);\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_for_each_without_braces_stmt() {\n+        check_assist_with_fixtures(\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty;\n+    x.iter().$0for_each(|(x, y)| println!(\"x: {}, y: {}\", x, y));\n+}\"#,\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty;\n+    for (x, y) in x.iter() {\n+        println!(\"x: {}, y: {}\", x, y)\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_for_each_not_applicable() {\n+        check_assist_not_applicable(\n+            r#\"\n+fn main() {\n+    ().$0for_each(|x| println!(\"{}\", x));\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_for_each_not_applicable_invalid_cursor_pos() {\n+        check_assist_not_applicable(\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    Empty.iter().for_each(|(x, y)| $0println!(\"x: {}, y: {}\", x, y));\n+}\"#,\n+        )\n+    }\n+}"}, {"sha": "f1aab74d47b4e045e0bceda0ecd9bed6dd547608", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0459c53572f90fa9134192e432562af3daba5fa/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0459c53572f90fa9134192e432562af3daba5fa/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=c0459c53572f90fa9134192e432562af3daba5fa", "patch": "@@ -116,6 +116,7 @@ mod handlers {\n     mod change_visibility;\n     mod convert_integer_literal;\n     mod convert_comment_block;\n+    mod convert_iter_for_each_to_for;\n     mod early_return;\n     mod expand_glob_import;\n     mod extract_function;\n@@ -181,6 +182,7 @@ mod handlers {\n             change_visibility::change_visibility,\n             convert_integer_literal::convert_integer_literal,\n             convert_comment_block::convert_comment_block,\n+            convert_iter_for_each_to_for::convert_iter_for_each_to_for,\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,"}, {"sha": "3f77edd8d6e5c693a08e5357b247a21418c27c12", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c0459c53572f90fa9134192e432562af3daba5fa/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0459c53572f90fa9134192e432562af3daba5fa/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=c0459c53572f90fa9134192e432562af3daba5fa", "patch": "@@ -205,6 +205,36 @@ const _: i32 = 0b1010;\n     )\n }\n \n+#[test]\n+fn doctest_convert_iter_for_each_to_for() {\n+    check_doc_test(\n+        \"convert_iter_for_each_to_for\",\n+        r#####\"\n+//- /lib.rs crate:core\n+pub mod iter { pub mod traits { pub mod iterator { pub trait Iterator {} } } }\n+pub struct SomeIter;\n+impl self::iter::traits::iterator::Iterator for SomeIter {}\n+//- /lib.rs crate:main deps:core\n+use core::SomeIter;\n+fn main() {\n+    let iter = SomeIter;\n+    iter.for_each$0(|(x, y)| {\n+        println!(\"x: {}, y: {}\", x, y);\n+    });\n+}\n+\"#####,\n+        r#####\"\n+use core::SomeIter;\n+fn main() {\n+    let iter = SomeIter;\n+    for (x, y) in iter {\n+        println!(\"x: {}, y: {}\", x, y);\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_convert_to_guarded_return() {\n     check_doc_test("}, {"sha": "05a6b0b2508aeb3c5ff67181355320cf57e002e4", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0459c53572f90fa9134192e432562af3daba5fa/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0459c53572f90fa9134192e432562af3daba5fa/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=c0459c53572f90fa9134192e432562af3daba5fa", "patch": "@@ -222,6 +222,9 @@ pub fn expr_if(\n     };\n     expr_from_text(&format!(\"if {} {} {}\", condition, then_branch, else_branch))\n }\n+pub fn expr_for_loop(pat: ast::Pat, expr: ast::Expr, block: ast::BlockExpr) -> ast::Expr {\n+    expr_from_text(&format!(\"for {} in {} {}\", pat, expr, block))\n+}\n pub fn expr_prefix(op: SyntaxKind, expr: ast::Expr) -> ast::Expr {\n     let token = token(op);\n     expr_from_text(&format!(\"{}{}\", token, expr))"}]}