{"sha": "a06b90322cb4b61a3a20e12ab3406cff809c586c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNmI5MDMyMmNiNGI2MWEzYTIwZTEyYWIzNDA2Y2ZmODA5YzU4NmM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-04T20:47:24Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-04T20:47:24Z"}, "message": "Finish de-exporting std. Part of #3583.", "tree": {"sha": "374593e6b847a1627b36af10a5734763d6f50545", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/374593e6b847a1627b36af10a5734763d6f50545"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a06b90322cb4b61a3a20e12ab3406cff809c586c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a06b90322cb4b61a3a20e12ab3406cff809c586c", "html_url": "https://github.com/rust-lang/rust/commit/a06b90322cb4b61a3a20e12ab3406cff809c586c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a06b90322cb4b61a3a20e12ab3406cff809c586c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56c9c815227a107e527ef1c978bc23d9f351efb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/56c9c815227a107e527ef1c978bc23d9f351efb2", "html_url": "https://github.com/rust-lang/rust/commit/56c9c815227a107e527ef1c978bc23d9f351efb2"}], "stats": {"total": 178, "additions": 80, "deletions": 98}, "files": [{"sha": "502dba0be05cce54da133beefc7c398b64f0601a", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a06b90322cb4b61a3a20e12ab3406cff809c586c/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06b90322cb4b61a3a20e12ab3406cff809c586c/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=a06b90322cb4b61a3a20e12ab3406cff809c586c", "patch": "@@ -4,7 +4,7 @@\n Core serialization interfaces.\n */\n \n-trait Serializer {\n+pub trait Serializer {\n     // Primitive types:\n     fn emit_nil();\n     fn emit_uint(v: uint);\n@@ -37,7 +37,7 @@ trait Serializer {\n     fn emit_tup_elt(idx: uint, f: fn());\n }\n \n-trait Deserializer {\n+pub trait Deserializer {\n     // Primitive types:\n     fn read_nil() -> ();\n \n@@ -81,7 +81,7 @@ trait Deserializer {\n //\n // In some cases, these should eventually be coded as traits.\n \n-fn emit_from_vec<S: Serializer, T>(&&s: S, &&v: ~[T], f: fn(&&x: T)) {\n+pub fn emit_from_vec<S: Serializer, T>(&&s: S, &&v: ~[T], f: fn(&&x: T)) {\n     do s.emit_vec(vec::len(v)) {\n         for vec::eachi(v) |i,e| {\n             do s.emit_vec_elt(i) {\n@@ -91,15 +91,15 @@ fn emit_from_vec<S: Serializer, T>(&&s: S, &&v: ~[T], f: fn(&&x: T)) {\n     }\n }\n \n-fn read_to_vec<D: Deserializer, T: Copy>(&&d: D, f: fn() -> T) -> ~[T] {\n+pub fn read_to_vec<D: Deserializer, T: Copy>(&&d: D, f: fn() -> T) -> ~[T] {\n     do d.read_vec |len| {\n         do vec::from_fn(len) |i| {\n             d.read_vec_elt(i, || f())\n         }\n     }\n }\n \n-trait SerializerHelpers {\n+pub trait SerializerHelpers {\n     fn emit_from_vec<T>(&&v: ~[T], f: fn(&&x: T));\n }\n \n@@ -109,7 +109,7 @@ impl<S: Serializer> S: SerializerHelpers {\n     }\n }\n \n-trait DeserializerHelpers {\n+pub trait DeserializerHelpers {\n     fn read_to_vec<T: Copy>(f: fn() -> T) -> ~[T];\n }\n \n@@ -119,127 +119,127 @@ impl<D: Deserializer> D: DeserializerHelpers {\n     }\n }\n \n-fn serialize_uint<S: Serializer>(&&s: S, v: uint) {\n+pub fn serialize_uint<S: Serializer>(&&s: S, v: uint) {\n     s.emit_uint(v);\n }\n \n-fn deserialize_uint<D: Deserializer>(&&d: D) -> uint {\n+pub fn deserialize_uint<D: Deserializer>(&&d: D) -> uint {\n     d.read_uint()\n }\n \n-fn serialize_u8<S: Serializer>(&&s: S, v: u8) {\n+pub fn serialize_u8<S: Serializer>(&&s: S, v: u8) {\n     s.emit_u8(v);\n }\n \n-fn deserialize_u8<D: Deserializer>(&&d: D) -> u8 {\n+pub fn deserialize_u8<D: Deserializer>(&&d: D) -> u8 {\n     d.read_u8()\n }\n \n-fn serialize_u16<S: Serializer>(&&s: S, v: u16) {\n+pub fn serialize_u16<S: Serializer>(&&s: S, v: u16) {\n     s.emit_u16(v);\n }\n \n-fn deserialize_u16<D: Deserializer>(&&d: D) -> u16 {\n+pub fn deserialize_u16<D: Deserializer>(&&d: D) -> u16 {\n     d.read_u16()\n }\n \n-fn serialize_u32<S: Serializer>(&&s: S, v: u32) {\n+pub fn serialize_u32<S: Serializer>(&&s: S, v: u32) {\n     s.emit_u32(v);\n }\n \n-fn deserialize_u32<D: Deserializer>(&&d: D) -> u32 {\n+pub fn deserialize_u32<D: Deserializer>(&&d: D) -> u32 {\n     d.read_u32()\n }\n \n-fn serialize_u64<S: Serializer>(&&s: S, v: u64) {\n+pub fn serialize_u64<S: Serializer>(&&s: S, v: u64) {\n     s.emit_u64(v);\n }\n \n-fn deserialize_u64<D: Deserializer>(&&d: D) -> u64 {\n+pub fn deserialize_u64<D: Deserializer>(&&d: D) -> u64 {\n     d.read_u64()\n }\n \n-fn serialize_int<S: Serializer>(&&s: S, v: int) {\n+pub fn serialize_int<S: Serializer>(&&s: S, v: int) {\n     s.emit_int(v);\n }\n \n-fn deserialize_int<D: Deserializer>(&&d: D) -> int {\n+pub fn deserialize_int<D: Deserializer>(&&d: D) -> int {\n     d.read_int()\n }\n \n-fn serialize_i8<S: Serializer>(&&s: S, v: i8) {\n+pub fn serialize_i8<S: Serializer>(&&s: S, v: i8) {\n     s.emit_i8(v);\n }\n \n-fn deserialize_i8<D: Deserializer>(&&d: D) -> i8 {\n+pub fn deserialize_i8<D: Deserializer>(&&d: D) -> i8 {\n     d.read_i8()\n }\n \n-fn serialize_i16<S: Serializer>(&&s: S, v: i16) {\n+pub fn serialize_i16<S: Serializer>(&&s: S, v: i16) {\n     s.emit_i16(v);\n }\n \n-fn deserialize_i16<D: Deserializer>(&&d: D) -> i16 {\n+pub fn deserialize_i16<D: Deserializer>(&&d: D) -> i16 {\n     d.read_i16()\n }\n \n-fn serialize_i32<S: Serializer>(&&s: S, v: i32) {\n+pub fn serialize_i32<S: Serializer>(&&s: S, v: i32) {\n     s.emit_i32(v);\n }\n \n-fn deserialize_i32<D: Deserializer>(&&d: D) -> i32 {\n+pub fn deserialize_i32<D: Deserializer>(&&d: D) -> i32 {\n     d.read_i32()\n }\n \n-fn serialize_i64<S: Serializer>(&&s: S, v: i64) {\n+pub fn serialize_i64<S: Serializer>(&&s: S, v: i64) {\n     s.emit_i64(v);\n }\n \n-fn deserialize_i64<D: Deserializer>(&&d: D) -> i64 {\n+pub fn deserialize_i64<D: Deserializer>(&&d: D) -> i64 {\n     d.read_i64()\n }\n \n-fn serialize_str<S: Serializer>(&&s: S, v: &str) {\n+pub fn serialize_str<S: Serializer>(&&s: S, v: &str) {\n     s.emit_str(v);\n }\n \n-fn deserialize_str<D: Deserializer>(&&d: D) -> ~str {\n+pub fn deserialize_str<D: Deserializer>(&&d: D) -> ~str {\n     d.read_str()\n }\n \n-fn serialize_float<S: Serializer>(&&s: S, v: float) {\n+pub fn serialize_float<S: Serializer>(&&s: S, v: float) {\n     s.emit_float(v);\n }\n \n-fn deserialize_float<D: Deserializer>(&&d: D) -> float {\n+pub fn deserialize_float<D: Deserializer>(&&d: D) -> float {\n     d.read_float()\n }\n \n-fn serialize_f32<S: Serializer>(&&s: S, v: f32) {\n+pub fn serialize_f32<S: Serializer>(&&s: S, v: f32) {\n     s.emit_f32(v);\n }\n \n-fn deserialize_f32<D: Deserializer>(&&d: D) -> f32 {\n+pub fn deserialize_f32<D: Deserializer>(&&d: D) -> f32 {\n     d.read_f32()\n }\n \n-fn serialize_f64<S: Serializer>(&&s: S, v: f64) {\n+pub fn serialize_f64<S: Serializer>(&&s: S, v: f64) {\n     s.emit_f64(v);\n }\n \n-fn deserialize_f64<D: Deserializer>(&&d: D) -> f64 {\n+pub fn deserialize_f64<D: Deserializer>(&&d: D) -> f64 {\n     d.read_f64()\n }\n \n-fn serialize_bool<S: Serializer>(&&s: S, v: bool) {\n+pub fn serialize_bool<S: Serializer>(&&s: S, v: bool) {\n     s.emit_bool(v);\n }\n \n-fn deserialize_bool<D: Deserializer>(&&d: D) -> bool {\n+pub fn deserialize_bool<D: Deserializer>(&&d: D) -> bool {\n     d.read_bool()\n }\n \n-fn serialize_Option<S: Serializer,T>(&&s: S, &&v: Option<T>, st: fn(&&x: T)) {\n+pub fn serialize_Option<S: Serializer,T>(&&s: S, &&v: Option<T>, st: fn(&&x: T)) {\n     do s.emit_enum(~\"option\") {\n         match v {\n           None => do s.emit_enum_variant(~\"none\", 0u, 0u) {\n@@ -254,7 +254,7 @@ fn serialize_Option<S: Serializer,T>(&&s: S, &&v: Option<T>, st: fn(&&x: T)) {\n     }\n }\n \n-fn deserialize_Option<D: Deserializer,T: Copy>(&&d: D, st: fn() -> T)\n+pub fn deserialize_Option<D: Deserializer,T: Copy>(&&d: D, st: fn() -> T)\n     -> Option<T> {\n     do d.read_enum(~\"option\") {\n         do d.read_enum_variant |i| {"}, {"sha": "7622f1b8de6bf125e54353c44640e9814a609c40", "filename": "src/libstd/std.rc", "status": "modified", "additions": 42, "deletions": 60, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a06b90322cb4b61a3a20e12ab3406cff809c586c/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a06b90322cb4b61a3a20e12ab3406cff809c586c/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=a06b90322cb4b61a3a20e12ab3406cff809c586c", "patch": "@@ -18,97 +18,79 @@ not required in or otherwise suitable for the core library.\n \n #[no_core];\n \n-#[legacy_exports];\n-\n #[allow(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n #[forbid(deprecated_pattern)];\n \n extern mod core(vers = \"0.4\");\n use core::*;\n \n-export net, net_tcp, net_ip, net_url;\n-export uv, uv_ll, uv_iotask, uv_global_loop;\n-export c_vec, timer;\n-export sync, arc, comm;\n-export bitv, deque, fun_treemap, list, map;\n-export smallintmap, sort, treemap;\n-export rope, arena, par;\n-export ebml, ebml2;\n-export dbg, getopts, json, rand, sha1, term, time;\n-export prettyprint, prettyprint2;\n-export test, tempfile, serialization, serialization2;\n-export cmp;\n-export base64;\n-export cell;\n-\n // General io and system-services modules\n \n-mod net;\n-mod net_ip;\n-mod net_tcp;\n-mod net_url;\n+pub mod net;\n+pub mod net_ip;\n+pub mod net_tcp;\n+pub mod net_url;\n \n // libuv modules\n-mod uv;\n-mod uv_ll;\n-mod uv_iotask;\n-mod uv_global_loop;\n+pub mod uv;\n+pub mod uv_ll;\n+pub mod uv_iotask;\n+pub mod uv_global_loop;\n \n \n // Utility modules\n \n-mod c_vec;\n-mod timer;\n-mod cell;\n+pub mod c_vec;\n+pub mod timer;\n+pub mod cell;\n \n // Concurrency\n \n-mod sync;\n-mod arc;\n-mod comm;\n+pub mod sync;\n+pub mod arc;\n+pub mod comm;\n \n // Collections\n \n-mod bitv;\n-mod deque;\n-mod fun_treemap;\n-mod list;\n-mod map;\n-mod rope;\n-mod smallintmap;\n-mod sort;\n-mod treemap;\n+pub mod bitv;\n+pub mod deque;\n+pub mod fun_treemap;\n+pub mod list;\n+pub mod map;\n+pub mod rope;\n+pub mod smallintmap;\n+pub mod sort;\n+pub mod treemap;\n \n // And ... other stuff\n \n-mod ebml;\n-mod ebml2;\n-mod dbg;\n-mod getopts;\n-mod json;\n-mod sha1;\n-mod md4;\n-mod tempfile;\n-mod term;\n-mod time;\n-mod prettyprint;\n-mod prettyprint2;\n-mod arena;\n-mod par;\n-mod cmp;\n-mod base64;\n+pub mod ebml;\n+pub mod ebml2;\n+pub mod dbg;\n+pub mod getopts;\n+pub mod json;\n+pub mod sha1;\n+pub mod md4;\n+pub mod tempfile;\n+pub mod term;\n+pub mod time;\n+pub mod prettyprint;\n+pub mod prettyprint2;\n+pub mod arena;\n+pub mod par;\n+pub mod cmp;\n+pub mod base64;\n \n #[cfg(unicode)]\n mod unicode;\n \n \n // Compiler support modules\n \n-mod test;\n-#[legacy_exports]\n-mod serialization;\n-mod serialization2;\n+pub mod test;\n+pub mod serialization;\n+pub mod serialization2;\n \n // Local Variables:\n // mode: rust;"}]}