{"sha": "2ade55d908758a2c66a437d5667c1714bfa890c2", "node_id": "C_kwDOAAsO6NoAKDJhZGU1NWQ5MDg3NThhMmM2NmE0MzdkNTY2N2MxNzE0YmZhODkwYzI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T19:57:16Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T19:57:16Z"}, "message": "Inline lower_generics_mut and remove GenericsCtor", "tree": {"sha": "9d5f07d90b209f87afbd72b6f5bcbcbd3111f6f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d5f07d90b209f87afbd72b6f5bcbcbd3111f6f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ade55d908758a2c66a437d5667c1714bfa890c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmKWcxwACgkQgTGiTgx5\n76/FMw/9EjgTTjpDKKRf+1I5QCtI45WzV/y7s9zr2UVL0BBMe8JSX/gdvXDdHeeg\nIKmB7buOSLoCqC/vS9vxcv1mvlvT0EBpKy6Me4bPAPhW0XndzK+84ANgIQwExTPF\n9Q9/N1UFXU++k3Am8AbtUqIVSWA4c/9/xpYZt3JwWFx5COc1N2DUaOMPU4iUl1sZ\nJVyOKeAZAqQBq+qmTfW//t7sB8TWTZZVvZd5ZyIxt8B9sbT8gSA5PigCl+HkvooT\ncwE9E56ZM7GZiEQYHKFtjkYYd+2RCmjJKnznFJw+TgRjFce0ICBGpye0l5qJK9+T\nj3weiJF2dSG0RQSuDbcj0IXRZDUio6Bm5GCkXEVvd5s4UpNAXb8ufj38tHtHcRHM\nHFXWF6nHKQyVOIq6+7xdW3z92o//11oL7zDsmU84UW25FuiTDQRE1AXtNQWp55BM\nUJIygxDLkuxdGj2oA68foZdO6udTTRpFuOYAatmpMAm9aGMbxkAtUgn0eLN6gg9V\nQqDsGMYhu1nGBtavVmZqz/gobcND9WBsvqKdMr7HOCKYv0gwp/9mcX5weu0DWy/6\nwlMpO5O1Y11B44VjugAZAMokKi+ca6TsM7p6dWYaI61RuiLnlZOM5jjj9l2TugQ1\nx8l/H2ZBqUpiowZjY5NUZhwyhhIzJtkLZM/ogWLBrVBO9+gBnnc=\n=VmmA\n-----END PGP SIGNATURE-----", "payload": "tree 9d5f07d90b209f87afbd72b6f5bcbcbd3111f6f0\nparent d327db9319e7b8ec7dff56f1fc2cfb199d3151b9\nauthor Santiago Pastorino <spastorino@gmail.com> 1654027036 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1654027036 -0300\n\nInline lower_generics_mut and remove GenericsCtor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ade55d908758a2c66a437d5667c1714bfa890c2", "html_url": "https://github.com/rust-lang/rust/commit/2ade55d908758a2c66a437d5667c1714bfa890c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ade55d908758a2c66a437d5667c1714bfa890c2/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d327db9319e7b8ec7dff56f1fc2cfb199d3151b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9", "html_url": "https://github.com/rust-lang/rust/commit/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9"}], "stats": {"total": 83, "additions": 29, "deletions": 54}, "files": [{"sha": "c5f9f4a9c0bf40340d9e742e3d381feba6499fb7", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 29, "deletions": 54, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2ade55d908758a2c66a437d5667c1714bfa890c2/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ade55d908758a2c66a437d5667c1714bfa890c2/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=2ade55d908758a2c66a437d5667c1714bfa890c2", "patch": "@@ -1314,31 +1314,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n         }\n \n-        let mut lowered_generics = self.lower_generics_mut(generics, itctx);\n-        let res = f(self);\n-\n-        let extra_lifetimes = self.resolver.take_extra_lifetime_params(parent_node_id);\n-        let impl_trait_defs = std::mem::take(&mut self.impl_trait_defs);\n-        lowered_generics.params.extend(\n-            extra_lifetimes\n-                .into_iter()\n-                .filter_map(|(ident, node_id, res)| {\n-                    self.lifetime_res_to_generic_param(ident, node_id, res)\n-                })\n-                .chain(impl_trait_defs.into_iter()),\n-        );\n-        let impl_trait_bounds = std::mem::take(&mut self.impl_trait_bounds);\n-        lowered_generics.predicates.extend(impl_trait_bounds.into_iter());\n-\n-        let lowered_generics = lowered_generics.into_generics(self.arena);\n-        (lowered_generics, res)\n-    }\n-\n-    pub(super) fn lower_generics_mut(\n-        &mut self,\n-        generics: &Generics,\n-        itctx: ImplTraitContext,\n-    ) -> GenericsCtor<'hir> {\n         // Error if `?Trait` bounds in where clauses don't refer directly to type parameters.\n         // Note: we used to clone these bounds directly onto the type parameter (and avoid lowering\n         // these into hir when we lower thee where clauses), but this makes it quite difficult to\n@@ -1386,7 +1361,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n         }\n \n-        let mut predicates = SmallVec::new();\n+        let mut predicates: SmallVec<[hir::WherePredicate<'hir>; 4]> = SmallVec::new();\n         predicates.extend(generics.params.iter().filter_map(|param| {\n             let bounds = self.lower_param_bounds(&param.bounds, itctx);\n             self.lower_generic_bound_predicate(\n@@ -1405,13 +1380,34 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 .map(|predicate| self.lower_where_predicate(predicate)),\n         );\n \n-        GenericsCtor {\n-            params: self.lower_generic_params_mut(&generics.params).collect(),\n-            predicates,\n-            has_where_clause: !generics.where_clause.predicates.is_empty(),\n-            where_clause_span: self.lower_span(generics.where_clause.span),\n-            span: self.lower_span(generics.span),\n-        }\n+        let mut params: Vec<_> = self.lower_generic_params_mut(&generics.params).collect();\n+        let has_where_clause = !generics.where_clause.predicates.is_empty();\n+        let where_clause_span = self.lower_span(generics.where_clause.span);\n+        let span = self.lower_span(generics.span);\n+        let res = f(self);\n+\n+        let extra_lifetimes = self.resolver.take_extra_lifetime_params(parent_node_id);\n+        let impl_trait_defs = std::mem::take(&mut self.impl_trait_defs);\n+        params.extend(\n+            extra_lifetimes\n+                .into_iter()\n+                .filter_map(|(ident, node_id, res)| {\n+                    self.lifetime_res_to_generic_param(ident, node_id, res)\n+                })\n+                .chain(impl_trait_defs.into_iter()),\n+        );\n+        let impl_trait_bounds = std::mem::take(&mut self.impl_trait_bounds);\n+        predicates.extend(impl_trait_bounds.into_iter());\n+\n+        let lowered_generics = self.arena.alloc(hir::Generics {\n+            params: self.arena.alloc_from_iter(params),\n+            predicates: self.arena.alloc_from_iter(predicates),\n+            has_where_clause,\n+            where_clause_span,\n+            span,\n+        });\n+\n+        (lowered_generics, res)\n     }\n \n     pub(super) fn lower_generic_bound_predicate(\n@@ -1527,24 +1523,3 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n }\n-\n-/// Helper struct for delayed construction of Generics.\n-pub(super) struct GenericsCtor<'hir> {\n-    pub(super) params: SmallVec<[hir::GenericParam<'hir>; 4]>,\n-    pub(super) predicates: SmallVec<[hir::WherePredicate<'hir>; 4]>,\n-    has_where_clause: bool,\n-    where_clause_span: Span,\n-    span: Span,\n-}\n-\n-impl<'hir> GenericsCtor<'hir> {\n-    pub(super) fn into_generics(self, arena: &'hir Arena<'hir>) -> &'hir hir::Generics<'hir> {\n-        arena.alloc(hir::Generics {\n-            params: arena.alloc_from_iter(self.params),\n-            predicates: arena.alloc_from_iter(self.predicates),\n-            has_where_clause: self.has_where_clause,\n-            where_clause_span: self.where_clause_span,\n-            span: self.span,\n-        })\n-    }\n-}"}]}