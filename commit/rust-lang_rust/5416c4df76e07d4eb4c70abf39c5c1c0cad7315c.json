{"sha": "5416c4df76e07d4eb4c70abf39c5c1c0cad7315c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MTZjNGRmNzZlMDdkNGViNGM3MGFiZjM5YzVjMWMwY2FkNzMxNWM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-06T10:47:28Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-06T10:47:28Z"}, "message": "Modify code around ast::Visibility\n\n`ast::Visibility` is changed to `codemap::Spanned` whose node is\n`ast::VisibilityKind`. This commit fixes it.\n\nCloses #2398.", "tree": {"sha": "e078c22476428fb2ff05d86abc530a1a727e917a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e078c22476428fb2ff05d86abc530a1a727e917a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5416c4df76e07d4eb4c70abf39c5c1c0cad7315c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5416c4df76e07d4eb4c70abf39c5c1c0cad7315c", "html_url": "https://github.com/rust-lang/rust/commit/5416c4df76e07d4eb4c70abf39c5c1c0cad7315c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5416c4df76e07d4eb4c70abf39c5c1c0cad7315c/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d316eba54d6778593ec87cdeffc32a89d0064ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d316eba54d6778593ec87cdeffc32a89d0064ae9", "html_url": "https://github.com/rust-lang/rust/commit/d316eba54d6778593ec87cdeffc32a89d0064ae9"}], "stats": {"total": 52, "additions": 22, "deletions": 30}, "files": [{"sha": "ce1bc1ae3182eaf72264aae8c55fe66b0d756590", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5416c4df76e07d4eb4c70abf39c5c1c0cad7315c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5416c4df76e07d4eb4c70abf39c5c1c0cad7315c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5416c4df76e07d4eb4c70abf39c5c1c0cad7315c", "patch": "@@ -16,8 +16,7 @@ use std::cmp::min;\n use config::lists::*;\n use regex::Regex;\n use syntax::{abi, ast, ptr, symbol};\n-use syntax::ast::{CrateSugar, ImplItem};\n-use syntax::codemap::{BytePos, Span};\n+use syntax::codemap::{self, BytePos, Span};\n use syntax::visit;\n \n use codemap::{LineRangeUtils, SpanUtils};\n@@ -39,6 +38,11 @@ use utils::{colon_spaces, contains_skip, first_line_width, format_abi, format_co\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n+const DEFAULT_VISIBILITY: ast::Visibility = codemap::Spanned {\n+    node: ast::VisibilityKind::Inherited,\n+    span: codemap::DUMMY_SP,\n+};\n+\n fn type_annotation_separator(config: &Config) -> &str {\n     colon_spaces(config.space_before_colon(), config.space_after_colon())\n }\n@@ -191,7 +195,7 @@ impl<'a> FnSig<'a> {\n             abi: method_sig.abi,\n             decl: &*method_sig.decl,\n             generics,\n-            visibility: ast::Visibility::Inherited,\n+            visibility: DEFAULT_VISIBILITY,\n         }\n     }\n \n@@ -680,7 +684,7 @@ pub fn format_impl(\n \n fn is_impl_single_line(\n     context: &RewriteContext,\n-    items: &[ImplItem],\n+    items: &[ast::ImplItem],\n     result: &str,\n     where_clause_str: &str,\n     item: &ast::Item,\n@@ -869,7 +873,7 @@ impl<'a> StructParts<'a> {\n         StructParts {\n             prefix: \"\",\n             ident: variant.node.name,\n-            vis: &ast::Visibility::Inherited,\n+            vis: &DEFAULT_VISIBILITY,\n             def: &variant.node.data,\n             generics: None,\n             span: variant.span,\n@@ -1208,21 +1212,9 @@ pub fn format_struct_struct(\n     }\n }\n \n-/// Returns a bytepos that is after that of `(` in `pub(..)`. If the given visibility does not\n-/// contain `pub(..)`, then return the `lo` of the `defualt_span`. Yeah, but for what? Well, we need\n-/// to bypass the `(` in the visibility when creating a span of tuple's body or fn's args.\n-fn get_bytepos_after_visibility(\n-    context: &RewriteContext,\n-    vis: &ast::Visibility,\n-    default_span: Span,\n-    terminator: &str,\n-) -> BytePos {\n-    match *vis {\n-        ast::Visibility::Crate(s, CrateSugar::PubCrate) => context\n-            .snippet_provider\n-            .span_after(mk_sp(s.hi(), default_span.hi()), terminator),\n-        ast::Visibility::Crate(s, CrateSugar::JustCrate) => s.hi(),\n-        ast::Visibility::Restricted { ref path, .. } => path.span.hi(),\n+fn get_bytepos_after_visibility(vis: &ast::Visibility, default_span: Span) -> BytePos {\n+    match vis.node {\n+        ast::VisibilityKind::Crate(..) | ast::VisibilityKind::Restricted { .. } => vis.span.hi(),\n         _ => default_span.lo(),\n     }\n }\n@@ -1240,7 +1232,7 @@ fn format_tuple_struct(\n     result.push_str(&header_str);\n \n     let body_lo = if fields.is_empty() {\n-        let lo = get_bytepos_after_visibility(context, struct_parts.vis, span, \")\");\n+        let lo = get_bytepos_after_visibility(struct_parts.vis, span);\n         context\n             .snippet_provider\n             .span_after(mk_sp(lo, span.hi()), \"(\")\n@@ -1522,7 +1514,7 @@ impl<'a> StaticParts<'a> {\n         };\n         StaticParts {\n             prefix: \"const\",\n-            vis: &ast::Visibility::Inherited,\n+            vis: &DEFAULT_VISIBILITY,\n             ident: ti.ident,\n             ty,\n             mutability: ast::Mutability::Immutable,\n@@ -1874,7 +1866,7 @@ fn rewrite_fn_base(\n     }\n \n     // Skip `pub(crate)`.\n-    let lo_after_visibility = get_bytepos_after_visibility(context, &fn_sig.visibility, span, \")\");\n+    let lo_after_visibility = get_bytepos_after_visibility(&fn_sig.visibility, span);\n     // A conservative estimation, to goal is to be over all parens in generics\n     let args_start = fn_sig\n         .generics"}, {"sha": "f6d2ff23c349f8a2123fef79300420adf242a24d", "filename": "src/utils.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5416c4df76e07d4eb4c70abf39c5c1c0cad7315c/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5416c4df76e07d4eb4c70abf39c5c1c0cad7315c/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=5416c4df76e07d4eb4c70abf39c5c1c0cad7315c", "patch": "@@ -12,7 +12,7 @@ use std::borrow::Cow;\n \n use syntax::{abi, ptr};\n use syntax::ast::{self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem,\n-                  NestedMetaItemKind, Path, Visibility};\n+                  NestedMetaItemKind, Path, Visibility, VisibilityKind};\n use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n \n use config::Color;\n@@ -35,12 +35,12 @@ pub fn extra_offset(text: &str, shape: Shape) -> usize {\n \n // Uses Cow to avoid allocating in the common cases.\n pub fn format_visibility(vis: &Visibility) -> Cow<'static, str> {\n-    match *vis {\n-        Visibility::Public => Cow::from(\"pub \"),\n-        Visibility::Inherited => Cow::from(\"\"),\n-        Visibility::Crate(_, CrateSugar::PubCrate) => Cow::from(\"pub(crate) \"),\n-        Visibility::Crate(_, CrateSugar::JustCrate) => Cow::from(\"crate \"),\n-        Visibility::Restricted { ref path, .. } => {\n+    match vis.node {\n+        VisibilityKind::Public => Cow::from(\"pub \"),\n+        VisibilityKind::Inherited => Cow::from(\"\"),\n+        VisibilityKind::Crate(CrateSugar::PubCrate) => Cow::from(\"pub(crate) \"),\n+        VisibilityKind::Crate(CrateSugar::JustCrate) => Cow::from(\"crate \"),\n+        VisibilityKind::Restricted { ref path, .. } => {\n             let Path { ref segments, .. } = **path;\n             let mut segments_iter = segments.iter().map(|seg| seg.identifier.name.to_string());\n             if path.is_global() {"}]}