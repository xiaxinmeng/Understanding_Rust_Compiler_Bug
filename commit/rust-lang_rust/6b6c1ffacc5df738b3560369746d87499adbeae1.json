{"sha": "6b6c1ffacc5df738b3560369746d87499adbeae1", "node_id": "C_kwDOAAsO6NoAKDZiNmMxZmZhY2M1ZGY3MzhiMzU2MDM2OTc0NmQ4NzQ5OWFkYmVhZTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-02T09:05:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-02T09:05:22Z"}, "message": "Auto merge of #96596 - scottmcm:limited-calloc, r=Mark-Simulacrum\n\nTweak the vec-calloc runtime check to only apply to shortish-arrays\n\nr? `@Mark-Simulacrum`\n\n`@nbdd0121` pointed out in https://github.com/rust-lang/rust/pull/95362#issuecomment-1114085395 that LLVM currently doesn't constant-fold the `IsZero` check for long arrays, so that seems like a reasonable justification for limiting it.\n\nIt appears that it's based on length, not byte size, (https://godbolt.org/z/4s48Y81dP), so that's what I used in the PR.  Maybe it's a [\"the number of inlining shall be three\"](https://youtu.be/s4wnuiCwTGU?t=320) sort of situation.\n\nCertainly there's more that could be done here -- that generated code that checks long arrays byte-by-byte is highly suboptimal, for example -- but this is an easy, low-risk tweak.", "tree": {"sha": "5e27b6bf9e8c16318305cd0b2fc05e44ca89e8ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e27b6bf9e8c16318305cd0b2fc05e44ca89e8ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b6c1ffacc5df738b3560369746d87499adbeae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b6c1ffacc5df738b3560369746d87499adbeae1", "html_url": "https://github.com/rust-lang/rust/commit/6b6c1ffacc5df738b3560369746d87499adbeae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b6c1ffacc5df738b3560369746d87499adbeae1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "905fd731543ee837bd9f4cf960b048610d037155", "url": "https://api.github.com/repos/rust-lang/rust/commits/905fd731543ee837bd9f4cf960b048610d037155", "html_url": "https://github.com/rust-lang/rust/commit/905fd731543ee837bd9f4cf960b048610d037155"}, {"sha": "2830dbd64f50b4a8025025f01578e45cbf9d3719", "url": "https://api.github.com/repos/rust-lang/rust/commits/2830dbd64f50b4a8025025f01578e45cbf9d3719", "html_url": "https://github.com/rust-lang/rust/commit/2830dbd64f50b4a8025025f01578e45cbf9d3719"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "edf270db81d4d8fb52339f8ac23162e15cb855b7", "filename": "library/alloc/src/vec/is_zero.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b6c1ffacc5df738b3560369746d87499adbeae1/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6c1ffacc5df738b3560369746d87499adbeae1/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs?ref=6b6c1ffacc5df738b3560369746d87499adbeae1", "patch": "@@ -52,7 +52,14 @@ unsafe impl<T> IsZero for *mut T {\n unsafe impl<T: IsZero, const N: usize> IsZero for [T; N] {\n     #[inline]\n     fn is_zero(&self) -> bool {\n-        self.iter().all(IsZero::is_zero)\n+        // Because this is generated as a runtime check, it's not obvious that\n+        // it's worth doing if the array is really long.  The threshold here\n+        // is largely arbitrary, but was picked because as of 2022-05-01 LLVM\n+        // can const-fold the check in `vec![[0; 32]; n]` but not in\n+        // `vec![[0; 64]; n]`: https://godbolt.org/z/WTzjzfs5b\n+        // Feel free to tweak if you have better evidence.\n+\n+        N <= 32 && self.iter().all(IsZero::is_zero)\n     }\n }\n "}, {"sha": "c616e9f1145cf387df7ef19f73dd86fd29e467a4", "filename": "src/test/codegen/vec-calloc.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6b6c1ffacc5df738b3560369746d87499adbeae1/src%2Ftest%2Fcodegen%2Fvec-calloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6c1ffacc5df738b3560369746d87499adbeae1/src%2Ftest%2Fcodegen%2Fvec-calloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-calloc.rs?ref=6b6c1ffacc5df738b3560369746d87499adbeae1", "patch": "@@ -0,0 +1,32 @@\n+// compile-flags: -O\n+// only-x86_64\n+// ignore-debug\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @vec_zero_scalar\n+#[no_mangle]\n+pub fn vec_zero_scalar(n: usize) -> Vec<i32> {\n+    // CHECK-NOT: __rust_alloc(\n+    // CHECK: __rust_alloc_zeroed(\n+    // CHECK-NOT: __rust_alloc(\n+    vec![0; n]\n+}\n+\n+// CHECK-LABEL: @vec_zero_rgb48\n+#[no_mangle]\n+pub fn vec_zero_rgb48(n: usize) -> Vec<[u16; 3]> {\n+    // CHECK-NOT: __rust_alloc(\n+    // CHECK: __rust_alloc_zeroed(\n+    // CHECK-NOT: __rust_alloc(\n+    vec![[0, 0, 0]; n]\n+}\n+\n+// CHECK-LABEL: @vec_zero_array_32\n+#[no_mangle]\n+pub fn vec_zero_array_32(n: usize) -> Vec<[i64; 32]> {\n+    // CHECK-NOT: __rust_alloc(\n+    // CHECK: __rust_alloc_zeroed(\n+    // CHECK-NOT: __rust_alloc(\n+    vec![[0_i64; 32]; n]\n+}"}]}