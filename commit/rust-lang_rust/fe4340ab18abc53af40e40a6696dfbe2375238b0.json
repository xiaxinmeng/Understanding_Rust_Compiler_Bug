{"sha": "fe4340ab18abc53af40e40a6696dfbe2375238b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNDM0MGFiMThhYmM1M2FmNDBlNDBhNjY5NmRmYmUyMzc1MjM4YjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-01T07:21:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-01T07:21:14Z"}, "message": "Auto merge of #21788 - carllerche:master, r=alexcrichton\n\nThe implementation is similar to `Thread::park`", "tree": {"sha": "fc49e57700daffbd0dc22bfc2439abb851dc0376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc49e57700daffbd0dc22bfc2439abb851dc0376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe4340ab18abc53af40e40a6696dfbe2375238b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe4340ab18abc53af40e40a6696dfbe2375238b0", "html_url": "https://github.com/rust-lang/rust/commit/fe4340ab18abc53af40e40a6696dfbe2375238b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe4340ab18abc53af40e40a6696dfbe2375238b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2aee6290a5ab90db7de881cf945840547d565a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2aee6290a5ab90db7de881cf945840547d565a8", "html_url": "https://github.com/rust-lang/rust/commit/a2aee6290a5ab90db7de881cf945840547d565a8"}, {"sha": "60ba03d81224d415249345fea535ccb7ca746612", "url": "https://api.github.com/repos/rust-lang/rust/commits/60ba03d81224d415249345fea535ccb7ca746612", "html_url": "https://github.com/rust-lang/rust/commit/60ba03d81224d415249345fea535ccb7ca746612"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "c791ee2717b0bf00cb264969443f9419429465ce", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/fe4340ab18abc53af40e40a6696dfbe2375238b0/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4340ab18abc53af40e40a6696dfbe2375238b0/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=fe4340ab18abc53af40e40a6696dfbe2375238b0", "patch": "@@ -123,7 +123,8 @@\n //! * The `Thread::park()` function blocks the current thread unless or until\n //!   the token is available for its thread handle, at which point It atomically\n //!   consumes the token. It may also return *spuriously*, without consuming the\n-//!   token.\n+//!   token. `Thread::park_timeout()` does the same, but allows specifying a\n+//!   maximum time to block the thread for.\n //!\n //! * The `unpark()` method on a `Thread` atomically makes the token available\n //!   if it wasn't already.\n@@ -160,6 +161,7 @@ use string::String;\n use rt::{self, unwind};\n use old_io::{Writer, stdio};\n use thunk::Thunk;\n+use time::Duration;\n \n use sys::thread as imp;\n use sys_common::{stack, thread_info};\n@@ -414,6 +416,27 @@ impl Thread {\n         *guard = false;\n     }\n \n+    /// Block unless or until the current thread's token is made available or\n+    /// the specified duration has been reached (may wake spuriously).\n+    ///\n+    /// The semantics of this function are equivalent to `park()` except that the\n+    /// thread will be blocked for roughly no longer than dur. This method\n+    /// should not be used for precise timing due to anomalies such as\n+    /// preemption or platform differences that may not cause the maximum\n+    /// amount of time waited to be precisely dur\n+    ///\n+    /// See the module doc for more detail.\n+    #[unstable(feature = \"std_misc\", reason = \"recently introduced\")]\n+    pub fn park_timeout(dur: Duration) {\n+        let thread = Thread::current();\n+        let mut guard = thread.inner.lock.lock().unwrap();\n+        if !*guard {\n+            let (g, _) = thread.inner.cvar.wait_timeout(guard, dur).unwrap();\n+            guard = g;\n+        }\n+        *guard = false;\n+    }\n+\n     /// Atomically makes the handle's token available if it is not already.\n     ///\n     /// See the module doc for more detail.\n@@ -519,6 +542,7 @@ mod test {\n     use std::old_io::{ChanReader, ChanWriter};\n     use super::{Thread, Builder};\n     use thunk::Thunk;\n+    use time::Duration;\n \n     // !!! These tests are dangerous. If something is buggy, they will hang, !!!\n     // !!! instead of exiting cleanly. This might wedge the buildbots.       !!!\n@@ -733,6 +757,37 @@ mod test {\n         assert_eq!(output, \"Hello, world!\".to_string());\n     }\n \n+    #[test]\n+    fn test_park_timeout_unpark_before() {\n+        for _ in 0..10 {\n+            Thread::current().unpark();\n+            Thread::park_timeout(Duration::seconds(10_000_000));\n+        }\n+    }\n+\n+    #[test]\n+    fn test_park_timeout_unpark_not_called() {\n+        for _ in 0..10 {\n+            Thread::park_timeout(Duration::milliseconds(10));\n+        }\n+    }\n+\n+    #[test]\n+    fn test_park_timeout_unpark_called_other_thread() {\n+        use std::old_io;\n+\n+        for _ in 0..10 {\n+            let th = Thread::current();\n+\n+            let _guard = Thread::scoped(move || {\n+                old_io::timer::sleep(Duration::milliseconds(50));\n+                th.unpark();\n+            });\n+\n+            Thread::park_timeout(Duration::seconds(10_000_000));\n+        }\n+    }\n+\n     // NOTE: the corresponding test for stderr is in run-pass/task-stderr, due\n     // to the test harness apparently interfering with stderr configuration.\n }"}]}