{"sha": "1f106b5527bb868793a7c1ce22dbc884f4bd44c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMTA2YjU1MjdiYjg2ODc5M2E3YzFjZTIyZGJjODg0ZjRiZDQ0YzA=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-04-22T16:53:11Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-04-22T16:53:11Z"}, "message": "ci: set a default shell on GHA", "tree": {"sha": "b328ed5acf32344462454b110151fd9fdccedd66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b328ed5acf32344462454b110151fd9fdccedd66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f106b5527bb868793a7c1ce22dbc884f4bd44c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl6gdn8ACgkQPgar6Auq\n8ZyU3BAAuKVDewcliQsHu68ZGEKzhPxD6q3q8eYd+M4TTiZ9Fk9/2gKwPdUstsOw\nFslJS+JmIMM90ansVLROhrIWhdjDtwltpdkwnZxCDR6CGo50G+ttTajZL2Qvuerv\nUOcC23ZrLCrbP7FBlUtV/AEWS5oEKeTD1eNt8qgUk4IG+a1JoGX9KyWRhFUVpBaO\nqUX2US0Fw02JjfiZH0p4c+wYZNNORiJuGOlmdK5IHJJFe63wHgBXXTEikbZGrrMs\nq+exqwoGaxLCYpn8iScz7vO4A1DCYW8iwu1U82JdSRszoR6+bLZACQ7aV6Akp/BY\nZrnl/PggjaLfLuSdLD0pN+tq556RTi53oWXE9GZdSrNc3puLk5vSOJ56qB/UBpsw\na3uvMxSNJkeZSstbUkTLFfDTDMl4JyTYNdsgvTfI82OOmKbr7HW5ikpqT91WbhS+\nbrnB0gzPFfnu7MwbhZnZ2Zp/2j2e/OGFnsHnCu9QyGPJUDpnobVkjMX0lxAkwmcz\ny05oiyEjxLVx7g+ZdrDkMa+SZsrI1bizYPyUutiEVZ8wvz5QPOJPYNnOirynEduu\nNf+J8rQM8WGcTFwAEQog3+rLnAjqNMI+MvVxtnmdxJxr491tNjJ4KQJpXKXh4vJ/\nC2A0jJt79j20MdXvO5oOMww0xuJdu9OGUyFECT2w+7C+8HqGXkw=\n=pQCf\n-----END PGP SIGNATURE-----", "payload": "tree b328ed5acf32344462454b110151fd9fdccedd66\nparent 4bfd62acb12a5e628d28950f9f94c3499216f10c\nauthor Pietro Albini <pietro@pietroalbini.org> 1587574391 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1587574391 +0200\n\nci: set a default shell on GHA\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f106b5527bb868793a7c1ce22dbc884f4bd44c0", "html_url": "https://github.com/rust-lang/rust/commit/1f106b5527bb868793a7c1ce22dbc884f4bd44c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f106b5527bb868793a7c1ce22dbc884f4bd44c0/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bfd62acb12a5e628d28950f9f94c3499216f10c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfd62acb12a5e628d28950f9f94c3499216f10c", "html_url": "https://github.com/rust-lang/rust/commit/4bfd62acb12a5e628d28950f9f94c3499216f10c"}], "stats": {"total": 141, "additions": 40, "deletions": 101}, "files": [{"sha": "8971f18afc8288b5f8f4447f4954ca9f671a571f", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 3, "deletions": 64, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1f106b5527bb868793a7c1ce22dbc884f4bd44c0/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1f106b5527bb868793a7c1ce22dbc884f4bd44c0/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=1f106b5527bb868793a7c1ce22dbc884f4bd44c0", "patch": "@@ -24,6 +24,9 @@ name: CI\n   pull_request:\n     branches:\n       - \"**\"\n+defaults:\n+  run:\n+    shell: \"python src/ci/exec-with-shell.py {0}\"\n jobs:\n   pr:\n     name: PR\n@@ -68,95 +71,74 @@ jobs:\n         run: src/ci/scripts/setup-environment.sh\n         env:\n           EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install InnoSetup\n         run: src/ci/scripts/install-innosetup.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2 packages\n         run: src/ci/scripts/install-msys2-packages.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n         if: \"success() && !env.SKIP_JOB && (github.event_name == 'push' || env.DEPLOY == '1' || env.DEPLOY_ALT == '1')\"\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n   try:\n     name: try\n     env:\n@@ -201,95 +183,74 @@ jobs:\n         run: src/ci/scripts/setup-environment.sh\n         env:\n           EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install InnoSetup\n         run: src/ci/scripts/install-innosetup.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2 packages\n         run: src/ci/scripts/install-msys2-packages.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n         if: \"success() && !env.SKIP_JOB && (github.event_name == 'push' || env.DEPLOY == '1' || env.DEPLOY_ALT == '1')\"\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n   auto:\n     name: auto\n     env:\n@@ -631,95 +592,74 @@ jobs:\n         run: src/ci/scripts/setup-environment.sh\n         env:\n           EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install InnoSetup\n         run: src/ci/scripts/install-innosetup.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2 packages\n         run: src/ci/scripts/install-msys2-packages.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n         if: \"success() && !env.SKIP_JOB && (github.event_name == 'push' || env.DEPLOY == '1' || env.DEPLOY_ALT == '1')\"\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n   master:\n     name: master\n     runs-on: ubuntu-latest\n@@ -741,7 +681,6 @@ jobs:\n         run: src/ci/publish_toolstate.sh\n         env:\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n-        shell: \"python src/ci/exec-with-shell.py {0}\"\n         if: success() && !env.SKIP_JOB\n   try-success:\n     needs:"}, {"sha": "88ef6b42f106d211b9d654cdfb03ba82b11adc40", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1f106b5527bb868793a7c1ce22dbc884f4bd44c0/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1f106b5527bb868793a7c1ce22dbc884f4bd44c0/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=1f106b5527bb868793a7c1ce22dbc884f4bd44c0", "patch": "@@ -70,21 +70,6 @@ x--expand-yaml-anchors--remove:\n   - &step\n     if: success() && !env.SKIP_JOB\n \n-  - &step-run\n-    <<: *step\n-    # While on Linux and macOS builders it just forwards the arguments to the\n-    # system bash, this wrapper allows switching from the host's bash.exe to\n-    # the one we install along with MSYS2 mid-build on Windows.\n-    #\n-    # Once the step to install MSYS2 is executed, the CI_OVERRIDE_SHELL\n-    # environment variable is set pointing to our MSYS2's bash.exe. From that\n-    # moment the host's bash.exe will not be called anymore.\n-    #\n-    # This is needed because we can't launch our own bash.exe from the host\n-    # bash.exe, as that would load two different cygwin1.dll in memory, causing\n-    # \"cygwin heap mismatch\" errors.\n-    shell: python src/ci/exec-with-shell.py {0}\n-\n   - &base-ci-job\n     timeout-minutes: 600\n     runs-on: \"${{ matrix.os }}\"\n@@ -114,67 +99,67 @@ x--expand-yaml-anchors--remove:\n           # are passed to the `setup-environment.sh` script encoded in JSON,\n           # which then uses log commands to actually set them.\n           EXTRA_VARIABLES: ${{ toJson(matrix.env) }}\n-        <<: *step-run\n+        <<: *step\n \n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: install InnoSetup\n         run: src/ci/scripts/install-innosetup.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: install MSYS2 packages\n         run: src/ci/scripts/install-msys2-packages.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n-        <<: *step-run\n+        <<: *step\n \n       # Disable automatic line ending conversion (again). On Windows, when we're\n       # installing dependencies, something switches the git configuration directory or\n@@ -183,23 +168,23 @@ x--expand-yaml-anchors--remove:\n       # appropriate line endings.\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n-        <<: *step-run\n+        <<: *step\n \n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:\n           AWS_ACCESS_KEY_ID: ${{ env.CACHES_AWS_ACCESS_KEY_ID }}\n           AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\n           TOOLSTATE_REPO_ACCESS_TOKEN: ${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\n-        <<: *step-run\n+        <<: *step\n \n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n@@ -212,7 +197,7 @@ x--expand-yaml-anchors--remove:\n         # deploying artifacts from a dist builder if the variables are misconfigured,\n         # erroring about invalid credentials instead.\n         if: success() && !env.SKIP_JOB && (github.event_name == 'push' || env.DEPLOY == '1' || env.DEPLOY_ALT == '1')\n-        <<: *step-run\n+        <<: *step\n \n   # These snippets are used by the try-success, try-failure, auto-success and auto-failure jobs.\n   # Check out their documentation for more information on why they're needed.\n@@ -248,6 +233,21 @@ on:\n     branches:\n       - \"**\"\n \n+defaults:\n+  run:\n+    # While on Linux and macOS builders it just forwards the arguments to the\n+    # system bash, this wrapper allows switching from the host's bash.exe to\n+    # the one we install along with MSYS2 mid-build on Windows.\n+    #\n+    # Once the step to install MSYS2 is executed, the CI_OVERRIDE_SHELL\n+    # environment variable is set pointing to our MSYS2's bash.exe. From that\n+    # moment the host's bash.exe will not be called anymore.\n+    #\n+    # This is needed because we can't launch our own bash.exe from the host\n+    # bash.exe, as that would load two different cygwin1.dll in memory, causing\n+    # \"cygwin heap mismatch\" errors.\n+    shell: python src/ci/exec-with-shell.py {0}\n+\n jobs:\n   pr:\n     <<: *base-ci-job\n@@ -687,7 +687,7 @@ jobs:\n         run: src/ci/publish_toolstate.sh\n         env:\n           TOOLSTATE_REPO_ACCESS_TOKEN: ${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\n-        <<: *step-run\n+        <<: *step\n \n   # These jobs don't actually test anything, but they're used to tell bors the\n   # build completed, as there is no practical way to detect when a workflow is"}]}