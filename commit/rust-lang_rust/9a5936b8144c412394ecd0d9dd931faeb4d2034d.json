{"sha": "9a5936b8144c412394ecd0d9dd931faeb4d2034d", "node_id": "C_kwDOAAsO6NoAKDlhNTkzNmI4MTQ0YzQxMjM5NGVjZDBkOWRkOTMxZmFlYjRkMjAzNGQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-30T19:16:13Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-05T04:16:09Z"}, "message": "Validate opaques in default trait bodies, don't normalize unless a body is provided", "tree": {"sha": "f3bb7272557192dc491dbaedffa05ec388126a3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3bb7272557192dc491dbaedffa05ec388126a3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a5936b8144c412394ecd0d9dd931faeb4d2034d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5936b8144c412394ecd0d9dd931faeb4d2034d", "html_url": "https://github.com/rust-lang/rust/commit/9a5936b8144c412394ecd0d9dd931faeb4d2034d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a5936b8144c412394ecd0d9dd931faeb4d2034d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86734b04a7c36da0f84226f687f0da331b7f921f", "url": "https://api.github.com/repos/rust-lang/rust/commits/86734b04a7c36da0f84226f687f0da331b7f921f", "html_url": "https://github.com/rust-lang/rust/commit/86734b04a7c36da0f84226f687f0da331b7f921f"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "bf022286b8255c4947b19e4b3ac4be9dc852fc08", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9a5936b8144c412394ecd0d9dd931faeb4d2034d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5936b8144c412394ecd0d9dd931faeb4d2034d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=9a5936b8144c412394ecd0d9dd931faeb4d2034d", "patch": "@@ -525,23 +525,33 @@ fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n \n /// Checks that an opaque type does not contain cycles and does not use `Self` or `T::Foo`\n /// projections that would result in \"inheriting lifetimes\".\n-pub(super) fn check_opaque<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: LocalDefId,\n-    substs: SubstsRef<'tcx>,\n-    origin: &hir::OpaqueTyOrigin,\n-) {\n-    let span = tcx.def_span(def_id);\n-    check_opaque_for_inheriting_lifetimes(tcx, def_id, span);\n-    if tcx.type_of(def_id).references_error() {\n+fn check_opaque<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n+    let item = tcx.hir().item(id);\n+    let hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) = item.kind else {\n+        tcx.sess.delay_span_bug(tcx.hir().span(id.hir_id()), \"expected opaque item\");\n+        return;\n+    };\n+\n+    // HACK(jynelson): trying to infer the type of `impl trait` breaks documenting\n+    // `async-std` (and `pub async fn` in general).\n+    // Since rustdoc doesn't care about the concrete type behind `impl Trait`, just don't look at it!\n+    // See https://github.com/rust-lang/rust/issues/75100\n+    if tcx.sess.opts.actually_rustdoc {\n         return;\n     }\n-    if check_opaque_for_cycles(tcx, def_id, substs, span, origin).is_err() {\n+\n+    let substs = InternalSubsts::identity_for_item(tcx, item.def_id.to_def_id());\n+    let span = tcx.def_span(item.def_id.def_id);\n+\n+    check_opaque_for_inheriting_lifetimes(tcx, item.def_id.def_id, span);\n+    if tcx.type_of(item.def_id.def_id).references_error() {\n+        return;\n+    }\n+    if check_opaque_for_cycles(tcx, item.def_id.def_id, substs, span, &origin).is_err() {\n         return;\n     }\n-    check_opaque_meets_bounds(tcx, def_id, substs, span, origin);\n+    check_opaque_meets_bounds(tcx, item.def_id.def_id, substs, span, &origin);\n }\n-\n /// Checks that an opaque type does not use `Self` or `T::Foo` projections that would result\n /// in \"inheriting lifetimes\".\n #[instrument(level = \"debug\", skip(tcx, span))]\n@@ -858,17 +868,17 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n             check_union(tcx, id.def_id.def_id);\n         }\n         DefKind::OpaqueTy => {\n-            let item = tcx.hir().item(id);\n-            let hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) = item.kind else {\n-                return;\n-            };\n-            // HACK(jynelson): trying to infer the type of `impl trait` breaks documenting\n-            // `async-std` (and `pub async fn` in general).\n-            // Since rustdoc doesn't care about the concrete type behind `impl Trait`, just don't look at it!\n-            // See https://github.com/rust-lang/rust/issues/75100\n-            if !tcx.sess.opts.actually_rustdoc {\n-                let substs = InternalSubsts::identity_for_item(tcx, item.def_id.to_def_id());\n-                check_opaque(tcx, item.def_id.def_id, substs, &origin);\n+            check_opaque(tcx, id);\n+        }\n+        DefKind::ImplTraitPlaceholder => {\n+            let parent = tcx.impl_trait_in_trait_parent(id.def_id.to_def_id());\n+            // Only check the validity of this opaque type if the function has a default body\n+            if let hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)),\n+                ..\n+            }) = tcx.hir().get_by_def_id(parent.expect_local())\n+            {\n+                check_opaque(tcx, id);\n             }\n         }\n         DefKind::TyAlias => {"}, {"sha": "646369633133c77b04bd9eb663b057cb07ee5368", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5936b8144c412394ecd0d9dd931faeb4d2034d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5936b8144c412394ecd0d9dd931faeb4d2034d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=9a5936b8144c412394ecd0d9dd931faeb4d2034d", "patch": "@@ -1160,8 +1160,8 @@ impl<'tcx> ProjectionTy<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n     ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {\n-        assert_eq!(tcx.def_kind(def_id), DefKind::Trait);\n         let def_id = tcx.parent(self.item_def_id);\n+        assert_eq!(tcx.def_kind(def_id), DefKind::Trait);\n         let trait_generics = tcx.generics_of(def_id);\n         (\n             ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },"}, {"sha": "8e2f1d5def3da0628f17b7fa800d601f175e4d83", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a5936b8144c412394ecd0d9dd931faeb4d2034d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5936b8144c412394ecd0d9dd931faeb4d2034d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=9a5936b8144c412394ecd0d9dd931faeb4d2034d", "patch": "@@ -1325,19 +1325,20 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n ) {\n     let tcx = selcx.tcx();\n     if tcx.def_kind(obligation.predicate.item_def_id) == DefKind::ImplTraitPlaceholder {\n+        let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.item_def_id);\n         // If we are trying to project an RPITIT with trait's default `Self` parameter,\n         // then we must be within a default trait body.\n         if obligation.predicate.self_ty()\n             == ty::InternalSubsts::identity_for_item(tcx, obligation.predicate.item_def_id)\n                 .type_at(0)\n+            && tcx.associated_item(trait_fn_def_id).defaultness(tcx).has_value()\n         {\n             candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n                 ImplTraitInTraitCandidate::Trait,\n             ));\n             return;\n         }\n \n-        let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.item_def_id);\n         let trait_def_id = tcx.parent(trait_fn_def_id);\n         let trait_substs =\n             obligation.predicate.substs.truncate_to(tcx, tcx.generics_of(trait_def_id));"}]}