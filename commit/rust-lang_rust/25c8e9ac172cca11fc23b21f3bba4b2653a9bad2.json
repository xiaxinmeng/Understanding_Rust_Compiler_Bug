{"sha": "25c8e9ac172cca11fc23b21f3bba4b2653a9bad2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YzhlOWFjMTcyY2NhMTFmYzIzYjIxZjNiYmE0YjI2NTNhOWJhZDI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-08-07T06:04:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-07T06:04:05Z"}, "message": "Rollup merge of #75203 - canova:btreemap-into-iter, r=dtolnay\n\nMake `IntoIterator` lifetime bounds of `&BTreeMap` match with `&HashMap`\n\nThis is a pretty small change on the lifetime bounds of `IntoIterator` implementations of both `&BTreeMap` and `&mut BTreeMap`. This is loosening the lifetime bounds, so more code should be accepted with this PR. This is lifetime bounds will still be implicit since we have `type Item = (&'a K, &'a V);` in the implementation. This change will make the HashMap and BTreeMap share the same signature, so we can share the same function/trait with both HashMap and BTreeMap in the code.\n\nFixes #74034.\nr? @dtolnay hey, I was touching this file on my previous PR and wanted to fix this on the way. Would you mind taking a look at this, or redirecting it if you are busy?", "tree": {"sha": "0842080005562ab167a004d60063b241e44fe8d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0842080005562ab167a004d60063b241e44fe8d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c8e9ac172cca11fc23b21f3bba4b2653a9bad2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfLO7VCRBK7hj4Ov3rIwAAdHIIAFgWwlnSKxPM+Jv9Pj5vAa4I\nphjDmoWM9e5gMZKGNall6fbhJd/hFLZcczXgTKzUYfJUuXWW992Ua+/CAIW1PycD\nVcy5kP+IaHWXaw3Z71Y1aURcbav2kWGAFy8ZQKajarzOQcUcBnF8LkF5yNOn/iXZ\n1EtR8nXcNMJrRKmfGIhAArNzqyykbU4OOywmEJ612FKWluW4yZVGbMzQdspgNcDD\nDSlBCCTLrvXfrQ9d3UbZP24tTwOqu1tt7xhpsgVPGdmvzWWqfS2a9MmTeGvfEuzc\nlmNeRPadjGznr2B3uanCeyVotf3fPkbrwWehS1FjKJoaAwxcp16fJRu6VeO/woc=\n=FM0O\n-----END PGP SIGNATURE-----\n", "payload": "tree 0842080005562ab167a004d60063b241e44fe8d2\nparent 5b1ed09df0528ec47e9007bfbf53ab3e584b97eb\nparent cedf96c834372074b1c56869155744a3bfef6fe4\nauthor Manish Goregaokar <manishsmail@gmail.com> 1596780245 -0700\ncommitter GitHub <noreply@github.com> 1596780245 -0700\n\nRollup merge of #75203 - canova:btreemap-into-iter, r=dtolnay\n\nMake `IntoIterator` lifetime bounds of `&BTreeMap` match with `&HashMap`\n\nThis is a pretty small change on the lifetime bounds of `IntoIterator` implementations of both `&BTreeMap` and `&mut BTreeMap`. This is loosening the lifetime bounds, so more code should be accepted with this PR. This is lifetime bounds will still be implicit since we have `type Item = (&'a K, &'a V);` in the implementation. This change will make the HashMap and BTreeMap share the same signature, so we can share the same function/trait with both HashMap and BTreeMap in the code.\n\nFixes #74034.\nr? @dtolnay hey, I was touching this file on my previous PR and wanted to fix this on the way. Would you mind taking a look at this, or redirecting it if you are busy?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c8e9ac172cca11fc23b21f3bba4b2653a9bad2", "html_url": "https://github.com/rust-lang/rust/commit/25c8e9ac172cca11fc23b21f3bba4b2653a9bad2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c8e9ac172cca11fc23b21f3bba4b2653a9bad2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b1ed09df0528ec47e9007bfbf53ab3e584b97eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1ed09df0528ec47e9007bfbf53ab3e584b97eb", "html_url": "https://github.com/rust-lang/rust/commit/5b1ed09df0528ec47e9007bfbf53ab3e584b97eb"}, {"sha": "cedf96c834372074b1c56869155744a3bfef6fe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cedf96c834372074b1c56869155744a3bfef6fe4", "html_url": "https://github.com/rust-lang/rust/commit/cedf96c834372074b1c56869155744a3bfef6fe4"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "1d5fa73d228e2a2938bcd68e6156874ca0aab212", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25c8e9ac172cca11fc23b21f3bba4b2653a9bad2/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c8e9ac172cca11fc23b21f3bba4b2653a9bad2/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=25c8e9ac172cca11fc23b21f3bba4b2653a9bad2", "patch": "@@ -1294,7 +1294,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K: 'a, V: 'a> IntoIterator for &'a BTreeMap<K, V> {\n+impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> {\n     type Item = (&'a K, &'a V);\n     type IntoIter = Iter<'a, K, V>;\n \n@@ -1363,7 +1363,7 @@ impl<K, V> Clone for Iter<'_, K, V> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K: 'a, V: 'a> IntoIterator for &'a mut BTreeMap<K, V> {\n+impl<'a, K, V> IntoIterator for &'a mut BTreeMap<K, V> {\n     type Item = (&'a K, &'a mut V);\n     type IntoIter = IterMut<'a, K, V>;\n "}, {"sha": "fda825bc65e8080cda0417d2b80dc11415232335", "filename": "src/test/ui/btreemap/btreemap_into_iterator_lifetime.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/25c8e9ac172cca11fc23b21f3bba4b2653a9bad2/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap_into_iterator_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c8e9ac172cca11fc23b21f3bba4b2653a9bad2/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap_into_iterator_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap_into_iterator_lifetime.rs?ref=25c8e9ac172cca11fc23b21f3bba4b2653a9bad2", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+use std::collections::{BTreeMap, HashMap};\n+\n+trait Map\n+where\n+    for<'a> &'a Self: IntoIterator<Item = (&'a Self::Key, &'a Self::Value)>,\n+{\n+    type Key;\n+    type Value;\n+}\n+\n+impl<K, V> Map for HashMap<K, V> {\n+    type Key = K;\n+    type Value = V;\n+}\n+\n+impl<K, V> Map for BTreeMap<K, V> {\n+  type Key = K;\n+  type Value = V;\n+}\n+\n+fn main() {}"}]}