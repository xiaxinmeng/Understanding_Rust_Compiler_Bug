{"sha": "e362929fa1f691b299012ebe86e8e14541067944", "node_id": "C_kwDOAAsO6NoAKGUzNjI5MjlmYTFmNjkxYjI5OTAxMmViZTg2ZThlMTQ1NDEwNjc5NDQ", "commit": {"author": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-05-15T13:14:11Z"}, "committer": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-05-16T13:17:00Z"}, "message": "add box expection hint", "tree": {"sha": "6be336c7ad66d0e7dede8be0e4ead1e9035f2ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6be336c7ad66d0e7dede8be0e4ead1e9035f2ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e362929fa1f691b299012ebe86e8e14541067944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e362929fa1f691b299012ebe86e8e14541067944", "html_url": "https://github.com/rust-lang/rust/commit/e362929fa1f691b299012ebe86e8e14541067944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e362929fa1f691b299012ebe86e8e14541067944/comments", "author": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c881e882e11137a74e1b185609b9056df0282c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c881e882e11137a74e1b185609b9056df0282c1", "html_url": "https://github.com/rust-lang/rust/commit/0c881e882e11137a74e1b185609b9056df0282c1"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "2bb384ba22d5225d53c827cb3f4648bf79475e04", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e362929fa1f691b299012ebe86e8e14541067944/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e362929fa1f691b299012ebe86e8e14541067944/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=e362929fa1f691b299012ebe86e8e14541067944", "patch": "@@ -558,7 +558,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 .intern(Interner)\n             }\n-            &Expr::Box { expr } => self.infer_expr_box(expr),\n+            &Expr::Box { expr } => self.infer_expr_box(expr, expected),\n             Expr::UnaryOp { expr, op } => {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n                 let inner_ty = self.resolve_ty_shallow(&inner_ty);\n@@ -786,10 +786,23 @@ impl<'a> InferenceContext<'a> {\n         ty\n     }\n \n-    fn infer_expr_box(&mut self, inner_expr: ExprId) -> chalk_ir::Ty<Interner> {\n-        let inner_ty = self.infer_expr_inner(inner_expr, &Expectation::none());\n-        if let Some(box_) = self.resolve_boxed_box() {\n-            TyBuilder::adt(self.db, box_)\n+    fn infer_expr_box(&mut self, inner_expr: ExprId, expected: &Expectation) -> Ty {\n+        if let Some(box_id) = self.resolve_boxed_box() {\n+            let table = &mut self.table;\n+            let inner_exp = expected\n+                .to_option(table)\n+                .as_ref()\n+                .map(|e| e.as_adt())\n+                .flatten()\n+                .filter(|(e_adt, _)| e_adt == &box_id)\n+                .map(|(_, subts)| {\n+                    let g = subts.at(Interner, 0);\n+                    Expectation::rvalue_hint(table, Ty::clone(g.assert_ty_ref(Interner)))\n+                })\n+                .unwrap_or_else(Expectation::none);\n+\n+            let inner_ty = self.infer_expr_inner(inner_expr, &inner_exp);\n+            TyBuilder::adt(self.db, box_id)\n                 .push(inner_ty)\n                 .fill_with_defaults(self.db, || self.table.new_type_var())\n                 .build()"}, {"sha": "86988e484fb0d0a32b4f3aaad5e4a81fe8b08a34", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e362929fa1f691b299012ebe86e8e14541067944/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e362929fa1f691b299012ebe86e8e14541067944/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=e362929fa1f691b299012ebe86e8e14541067944", "patch": "@@ -2539,19 +2539,31 @@ impl<T> [T] {\n \n fn test() {\n     let vec = <[_]>::into_vec(box [1i32]);\n+    let v: Vec<Box<dyn B>> = <[_]> :: into_vec(box [box Astruct]);\n }\n+\n+trait B{}\n+struct Astruct;\n+impl B for Astruct {}\n \"#,\n         expect![[r#\"\n             569..573 'self': Box<[T], A>\n             602..634 '{     ...     }': Vec<T, A>\n             612..628 'unimpl...ted!()': Vec<T, A>\n-            648..694 '{     ...2]); }': ()\n+            648..761 '{     ...t]); }': ()\n             658..661 'vec': Vec<i32, Global>\n             664..679 '<[_]>::into_vec': fn into_vec<i32, Global>(Box<[i32], Global>) -> Vec<i32, Global>\n             664..691 '<[_]>:...1i32])': Vec<i32, Global>\n             680..690 'box [1i32]': Box<[i32; 1], Global>\n             684..690 '[1i32]': [i32; 1]\n             685..689 '1i32': i32\n+            701..702 'v': Vec<Box<dyn B, Global>, Global>\n+            722..739 '<[_]> ...to_vec': fn into_vec<Box<dyn B, Global>, Global>(Box<[Box<dyn B, Global>], Global>) -> Vec<Box<dyn B, Global>, Global>\n+            722..758 '<[_]> ...ruct])': Vec<Box<dyn B, Global>, Global>\n+            740..757 'box [b...truct]': Box<[Box<dyn B, Global>; 1], Global>\n+            744..757 '[box Astruct]': [Box<dyn B, Global>; 1]\n+            745..756 'box Astruct': Box<Astruct, Global>\n+            749..756 'Astruct': Astruct\n         \"#]],\n     )\n }"}, {"sha": "b1d295ca34a8c323ce85083bab8071b11e5fe8d8", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e362929fa1f691b299012ebe86e8e14541067944/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e362929fa1f691b299012ebe86e8e14541067944/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=e362929fa1f691b299012ebe86e8e14541067944", "patch": "@@ -2999,15 +2999,15 @@ fn foo() {\n             216..217 's': Option<i32>\n             220..224 'None': Option<i32>\n             234..235 'f': Box<dyn FnOnce(&Option<i32>)>\n-            269..282 'box (|ps| {})': Box<|{unknown}| -> ()>\n-            274..281 '|ps| {}': |{unknown}| -> ()\n-            275..277 'ps': {unknown}\n+            269..282 'box (|ps| {})': Box<|&Option<i32>| -> ()>\n+            274..281 '|ps| {}': |&Option<i32>| -> ()\n+            275..277 'ps': &Option<i32>\n             279..281 '{}': ()\n             288..289 'f': Box<dyn FnOnce(&Option<i32>)>\n             288..293 'f(&s)': ()\n             290..292 '&s': &Option<i32>\n             291..292 's': Option<i32>\n-            269..282: expected Box<dyn FnOnce(&Option<i32>)>, got Box<|{unknown}| -> ()>\n+            269..282: expected Box<dyn FnOnce(&Option<i32>)>, got Box<|&Option<i32>| -> ()>\n         \"#]],\n     );\n }"}]}