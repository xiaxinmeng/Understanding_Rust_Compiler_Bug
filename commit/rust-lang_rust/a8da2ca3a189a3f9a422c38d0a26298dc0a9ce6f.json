{"sha": "a8da2ca3a189a3f9a422c38d0a26298dc0a9ce6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZGEyY2EzYTE4OWEzZjlhNDIyYzM4ZDBhMjYyOThkYzBhOWNlNmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-06T22:28:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T22:28:35Z"}, "message": "Merge #8745\n\n8745: Support goto_type_definition for types r=matklad a=Veykril\n\nI'm unsure if the approach of lowering an `ast::Type` to a `hir::Type` is a good idea, it seems fine to me at least.\r\nFixes #2882\n\nCo-authored-by: Lukas Tobias Wirth <lukastw97@gmail.com>", "tree": {"sha": "9a5af005c063062dc7b5ff27c9729830626be73d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a5af005c063062dc7b5ff27c9729830626be73d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8da2ca3a189a3f9a422c38d0a26298dc0a9ce6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglG2TCRBK7hj4Ov3rIwAAQDYIABFIwLANFGjqcfJT8AImbV7L\nfENaGwo/82XYo3gsr7krl9smo0m98yNTUi/74FpAUE2kaH9xrjivqX2neeFzr6C6\n9QL77S4+g+gEAdGo190z6jUvSpQ2HZZb+3VwDjVkq1U+8ay6oZdIFrFJ5WlZO7EF\nmiUVA8GYqh73/30Dk2NEbnmzT/HKR56+Vn9LF9hZ8OzbrH21xFIB+3J8hjvTdDwt\njD9IhbC32yy9xA3mT2QQky9SqPEMYHAuVNlFKPuHIrTbfj1sTukOKhLFIfbDvMe0\n107lO8IONnAZnIyFfGJW/UvuVs7JaD0iwVV0vd6iPimOZdRacq8QxRRAx+HqCjU=\n=Z0lz\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a5af005c063062dc7b5ff27c9729830626be73d\nparent 0ee945e289c438e87d4701401059e8c407710e7b\nparent d97a4b8e49df118a13a122225474bcbd011c0ea1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620340115 +0000\ncommitter GitHub <noreply@github.com> 1620340115 +0000\n\nMerge #8745\n\n8745: Support goto_type_definition for types r=matklad a=Veykril\n\nI'm unsure if the approach of lowering an `ast::Type` to a `hir::Type` is a good idea, it seems fine to me at least.\r\nFixes #2882\n\nCo-authored-by: Lukas Tobias Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8da2ca3a189a3f9a422c38d0a26298dc0a9ce6f", "html_url": "https://github.com/rust-lang/rust/commit/a8da2ca3a189a3f9a422c38d0a26298dc0a9ce6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8da2ca3a189a3f9a422c38d0a26298dc0a9ce6f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee945e289c438e87d4701401059e8c407710e7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee945e289c438e87d4701401059e8c407710e7b", "html_url": "https://github.com/rust-lang/rust/commit/0ee945e289c438e87d4701401059e8c407710e7b"}, {"sha": "d97a4b8e49df118a13a122225474bcbd011c0ea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d97a4b8e49df118a13a122225474bcbd011c0ea1", "html_url": "https://github.com/rust-lang/rust/commit/d97a4b8e49df118a13a122225474bcbd011c0ea1"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "38bd376bc08d71aec5ba8c2d9b55ebe304b83097", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8da2ca3a189a3f9a422c38d0a26298dc0a9ce6f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8da2ca3a189a3f9a422c38d0a26298dc0a9ce6f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=a8da2ca3a189a3f9a422c38d0a26298dc0a9ce6f", "patch": "@@ -196,6 +196,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_label(lifetime)\n     }\n \n+    pub fn resolve_type(&self, ty: &ast::Type) -> Option<Type> {\n+        self.imp.resolve_type(ty)\n+    }\n+\n     pub fn type_of_expr(&self, expr: &ast::Expr) -> Option<Type> {\n         self.imp.type_of_expr(expr)\n     }\n@@ -476,6 +480,14 @@ impl<'db> SemanticsImpl<'db> {\n         ToDef::to_def(self, src)\n     }\n \n+    fn resolve_type(&self, ty: &ast::Type) -> Option<Type> {\n+        let scope = self.scope(ty.syntax());\n+        let ctx = body::LowerCtx::new(self.db.upcast(), scope.file_id);\n+        let ty = hir_ty::TyLoweringContext::new(self.db, &scope.resolver)\n+            .lower_ty(&crate::TypeRef::from_ast(&ctx, ty.clone()));\n+        Type::new_with_resolver(self.db, &scope.resolver, ty)\n+    }\n+\n     fn type_of_expr(&self, expr: &ast::Expr) -> Option<Type> {\n         self.analyze(expr.syntax()).type_of_expr(self.db, expr)\n     }"}, {"sha": "f3284bb96a7d43dcd09f4a5f83b71412b711a8a6", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8da2ca3a189a3f9a422c38d0a26298dc0a9ce6f/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8da2ca3a189a3f9a422c38d0a26298dc0a9ce6f/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=a8da2ca3a189a3f9a422c38d0a26298dc0a9ce6f", "patch": "@@ -30,6 +30,7 @@ pub(crate) fn goto_type_definition(\n                 ast::Expr(it) => sema.type_of_expr(&it)?,\n                 ast::Pat(it) => sema.type_of_pat(&it)?,\n                 ast::SelfParam(it) => sema.type_of_self(&it)?,\n+                ast::Type(it) => sema.resolve_type(&it)?,\n                 _ => return None,\n             }\n         };\n@@ -146,6 +147,17 @@ struct Foo;\n impl Foo {\n     fn f(&self$0) {}\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn goto_def_for_type_fallback() {\n+        check(\n+            r#\"\n+struct Foo;\n+     //^^^\n+impl Foo$0 {}\n \"#,\n         )\n     }"}]}