{"sha": "ede21e8932224f4a51d024c5d6b37189a701f2e4", "node_id": "C_kwDOAAsO6NoAKGVkZTIxZTg5MzIyMjRmNGE1MWQwMjRjNWQ2YjM3MTg5YTcwMWYyZTQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-28T18:12:45Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-28T18:12:45Z"}, "message": "effvis: Merge two similar code paths", "tree": {"sha": "b2fca00aae8ce4a6b658dd3305e772c6b87ccf94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2fca00aae8ce4a6b658dd3305e772c6b87ccf94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ede21e8932224f4a51d024c5d6b37189a701f2e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ede21e8932224f4a51d024c5d6b37189a701f2e4", "html_url": "https://github.com/rust-lang/rust/commit/ede21e8932224f4a51d024c5d6b37189a701f2e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ede21e8932224f4a51d024c5d6b37189a701f2e4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4695ddf510b8cc8727497be4702ed1859bee2cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/4695ddf510b8cc8727497be4702ed1859bee2cca", "html_url": "https://github.com/rust-lang/rust/commit/4695ddf510b8cc8727497be4702ed1859bee2cca"}], "stats": {"total": 57, "additions": 23, "deletions": 34}, "files": [{"sha": "15df577e8416539b357d3f5c06ba61e7183d4949", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 23, "deletions": 34, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ede21e8932224f4a51d024c5d6b37189a701f2e4/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede21e8932224f4a51d024c5d6b37189a701f2e4/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=ede21e8932224f4a51d024c5d6b37189a701f2e4", "patch": "@@ -125,43 +125,32 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n \n         for (_, name_resolution) in resolutions.borrow().iter() {\n             if let Some(mut binding) = name_resolution.borrow().binding() {\n-                if !binding.is_ambiguity() {\n-                    // Set the given effective visibility level to `Level::Direct` and\n-                    // sets the rest of the `use` chain to `Level::Reexported` until\n-                    // we hit the actual exported item.\n-                    let mut parent_id = ParentId::Def(module_id);\n-                    while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind\n-                    {\n-                        let binding_id = ImportId::new_unchecked(binding);\n-                        self.update_import(binding_id, parent_id);\n-\n-                        parent_id = ParentId::Import(binding_id);\n-                        binding = nested_binding;\n-                    }\n-\n-                    if let Some(def_id) = binding.res().opt_def_id().and_then(|id| id.as_local()) {\n-                        self.update_def(def_id, binding.vis.expect_local(), parent_id);\n+                // Set the given effective visibility level to `Level::Direct` and\n+                // sets the rest of the `use` chain to `Level::Reexported` until\n+                // we hit the actual exported item.\n+                //\n+                // If the binding is ambiguous, put the root ambiguity binding and all reexports\n+                // leading to it into the table. They are used by the `ambiguous_glob_reexports`\n+                // lint. For all bindings added to the table this way `is_ambiguity` returns true.\n+                let mut parent_id = ParentId::Def(module_id);\n+                while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind {\n+                    let binding_id = ImportId::new_unchecked(binding);\n+                    self.update_import(binding_id, parent_id);\n+\n+                    if binding.ambiguity.is_some() {\n+                        // Stop at the root ambiguity, further bindings in the chain should not\n+                        // be reexported because the root ambiguity blocks any access to them.\n+                        // (Those further bindings are most likely not ambiguities themselves.)\n+                        break;\n                     }\n-                } else {\n-                    // Put the root ambiguity binding and all reexports leading to it into the\n-                    // table. They are used by the `ambiguous_glob_reexports` lint. For all\n-                    // bindings added to the table here `is_ambiguity` returns true.\n-                    let mut parent_id = ParentId::Def(module_id);\n-                    while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind\n-                    {\n-                        let binding_id = ImportId::new_unchecked(binding);\n-                        self.update_import(binding_id, parent_id);\n \n-                        if binding.ambiguity.is_some() {\n-                            // Stop at the root ambiguity, further bindings in the chain should not\n-                            // be reexported because the root ambiguity blocks any access to them.\n-                            // (Those further bindings are most likely not ambiguities themselves.)\n-                            break;\n-                        }\n+                    parent_id = ParentId::Import(binding_id);\n+                    binding = nested_binding;\n+                }\n \n-                        parent_id = ParentId::Import(binding_id);\n-                        binding = nested_binding;\n-                    }\n+                if binding.ambiguity.is_none()\n+                    && let Some(def_id) = binding.res().opt_def_id().and_then(|id| id.as_local()) {\n+                    self.update_def(def_id, binding.vis.expect_local(), parent_id);\n                 }\n             }\n         }"}]}