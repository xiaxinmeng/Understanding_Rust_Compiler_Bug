{"sha": "6d47d2abdee023f46b35b95e26e418ab9d67d39c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNDdkMmFiZGVlMDIzZjQ2YjM1Yjk1ZTI2ZTQxOGFiOWQ2N2QzOWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-22T22:37:42Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-22T22:37:42Z"}, "message": "Implement check-exprs, un-xfail 5 rustc tests.", "tree": {"sha": "1de9d41c4903b1fd1f8b6cf233d68c8fb7a4d7c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1de9d41c4903b1fd1f8b6cf233d68c8fb7a4d7c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d47d2abdee023f46b35b95e26e418ab9d67d39c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d47d2abdee023f46b35b95e26e418ab9d67d39c", "html_url": "https://github.com/rust-lang/rust/commit/6d47d2abdee023f46b35b95e26e418ab9d67d39c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d47d2abdee023f46b35b95e26e418ab9d67d39c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc8b5155a87b5a9ae2313f7282cab9893f4b9f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8b5155a87b5a9ae2313f7282cab9893f4b9f3e", "html_url": "https://github.com/rust-lang/rust/commit/fc8b5155a87b5a9ae2313f7282cab9893f4b9f3e"}], "stats": {"total": 67, "additions": 64, "deletions": 3}, "files": [{"sha": "3d5f5e868eb21cb3d4933eeebe80452833d8bf65", "filename": "src/Makefile", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=6d47d2abdee023f46b35b95e26e418ab9d67d39c", "patch": "@@ -498,8 +498,14 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n \n TEST_XFAILS_SELF := $(filter-out \\\n                       $(addprefix test/run-pass/, \\\n+                        bool-not.rs \\\n+                        char.rs \\\n+                        div-mod.rs \\\n                         hello.rs \\\n-                        int.rs), \\\n+                        int.rs \\\n+                        item-name-overload.rs \\\n+                        multiline-comment.rs \\\n+                        ), \\\n                       $(wildcard test/*/*.rs test/*/*.rc))\n \n "}, {"sha": "0d042d0db031a2e5954e72cb3e4517780c46f1c9", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=6d47d2abdee023f46b35b95e26e418ab9d67d39c", "patch": "@@ -67,6 +67,7 @@ tag stmt_ {\n     stmt_decl(@decl);\n     stmt_ret(option[@expr]);\n     stmt_log(@expr);\n+    stmt_check_expr(@expr);\n     stmt_expr(@expr);\n }\n "}, {"sha": "42ffc4c653805a0fd88da1bd3b9419933e44466c", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=6d47d2abdee023f46b35b95e26e418ab9d67d39c", "patch": "@@ -690,6 +690,22 @@ io fn parse_stmt(parser p) -> @ast.stmt {\n             ret @spanned(lo, hi, ast.stmt_log(e));\n         }\n \n+        case (token.CHECK) {\n+            p.bump();\n+            alt (p.peek()) {\n+                case (token.LPAREN) {\n+                    auto e = parse_expr(p);\n+                    auto hi = p.get_span();\n+                    expect(p, token.SEMI);\n+                    ret @spanned(lo, hi, ast.stmt_check_expr(e));\n+                }\n+                case (_) {\n+                    p.get_session().unimpl(\"constraint-check stmt\");\n+                }\n+            }\n+        }\n+\n+\n         case (token.LET) {\n             auto decl = parse_let(p);\n             auto hi = p.get_span();"}, {"sha": "eeea6bba3f4fab19a63433e7183b7ede024b32b2", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=6d47d2abdee023f46b35b95e26e418ab9d67d39c", "patch": "@@ -119,6 +119,9 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp,\n          @expr e) -> @stmt)                       fold_stmt_log,\n \n+     (fn(&ENV e, &span sp,\n+         @expr e) -> @stmt)                       fold_stmt_check_expr,\n+\n      (fn(&ENV e, &span sp,\n          @expr e) -> @stmt)                       fold_stmt_expr,\n \n@@ -393,6 +396,11 @@ fn fold_stmt[ENV](&ENV env, ast_fold[ENV] fld, &@stmt s) -> @stmt {\n             ret fld.fold_stmt_log(env_, s.span, ee);\n         }\n \n+        case (ast.stmt_check_expr(?e)) {\n+            auto ee = fold_expr(env_, fld, e);\n+            ret fld.fold_stmt_check_expr(env_, s.span, ee);\n+        }\n+\n         case (ast.stmt_expr(?e)) {\n             auto ee = fold_expr(env_, fld, e);\n             ret fld.fold_stmt_expr(env_, s.span, ee);\n@@ -645,6 +653,10 @@ fn identity_fold_stmt_log[ENV](&ENV e, &span sp, @expr x) -> @stmt {\n     ret @respan(sp, ast.stmt_log(x));\n }\n \n+fn identity_fold_stmt_check_expr[ENV](&ENV e, &span sp, @expr x) -> @stmt {\n+    ret @respan(sp, ast.stmt_check_expr(x));\n+}\n+\n fn identity_fold_stmt_expr[ENV](&ENV e, &span sp, @expr x) -> @stmt {\n     ret @respan(sp, ast.stmt_expr(x));\n }\n@@ -765,6 +777,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_stmt_decl   = bind identity_fold_stmt_decl[ENV](_,_,_),\n          fold_stmt_ret    = bind identity_fold_stmt_ret[ENV](_,_,_),\n          fold_stmt_log    = bind identity_fold_stmt_log[ENV](_,_,_),\n+         fold_stmt_check_expr\n+                          = bind identity_fold_stmt_check_expr[ENV](_,_,_),\n          fold_stmt_expr   = bind identity_fold_stmt_expr[ENV](_,_,_),\n \n          fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_),"}, {"sha": "31aca9cc1bdf38e2d60486eebfa95fd934d1ed4b", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=6d47d2abdee023f46b35b95e26e418ab9d67d39c", "patch": "@@ -23,7 +23,7 @@ type env = rec(list[scope] scopes,\n \n fn lookup_name(&env e, ast.ident i) -> option[def] {\n \n-    log \"resolving name \" + i;\n+    // log \"resolving name \" + i;\n \n     fn found_def_item(@ast.item i) -> option[def] {\n         alt (i.node) {\n@@ -108,7 +108,7 @@ fn fold_expr_name(&env e, &span sp, &ast.name n,\n \n     alt (d_) {\n         case (some[def](_)) {\n-            log \"resolved name \" + n.node.ident;\n+            // log \"resolved name \" + n.node.ident;\n         }\n         case (none[def]) {\n             e.sess.err(\"unresolved name: \" + n.node.ident);"}, {"sha": "cc1af53fbafb650bf0a746a7558dfc9900040c2d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d47d2abdee023f46b35b95e26e418ab9d67d39c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6d47d2abdee023f46b35b95e26e418ab9d67d39c", "patch": "@@ -791,13 +791,37 @@ fn trans_log(@block_ctxt cx, &ast.expr e) -> result {\n     }\n }\n \n+fn trans_check_expr(@block_ctxt cx, &ast.expr e) -> result {\n+    auto cond_res = trans_expr(cx, e);\n+\n+    // FIXME: need pretty-printer.\n+    auto V_expr_str = p2i(C_str(cx.fcx.tcx, \"<expr>\"));\n+    auto V_filename = p2i(C_str(cx.fcx.tcx, e.span.filename));\n+    auto V_line = e.span.lo.line as int;\n+    auto args = vec(V_expr_str, V_filename, C_int(V_line));\n+\n+    auto fail_cx = new_empty_block_ctxt(cx.fcx);\n+    auto fail_res = trans_upcall(fail_cx, \"upcall_fail\", args);\n+\n+    auto next_cx = new_extension_block_ctxt(cx);\n+    fail_res.bcx.build.Br(next_cx.llbb);\n+    cond_res.bcx.build.CondBr(cond_res.val,\n+                              next_cx.llbb,\n+                              fail_cx.llbb);\n+    ret res(next_cx, C_nil());\n+}\n+\n fn trans_stmt(@block_ctxt cx, &ast.stmt s) -> result {\n     auto sub = res(cx, C_nil());\n     alt (s.node) {\n         case (ast.stmt_log(?a)) {\n             sub.bcx = trans_log(cx, *a).bcx;\n         }\n \n+        case (ast.stmt_check_expr(?a)) {\n+            sub.bcx = trans_check_expr(cx, *a).bcx;\n+        }\n+\n         case (ast.stmt_expr(?e)) {\n             sub.bcx = trans_expr(cx, *e).bcx;\n         }"}]}