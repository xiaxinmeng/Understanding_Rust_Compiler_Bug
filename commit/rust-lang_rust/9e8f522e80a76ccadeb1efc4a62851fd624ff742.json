{"sha": "9e8f522e80a76ccadeb1efc4a62851fd624ff742", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOGY1MjJlODBhNzZjY2FkZWIxZWZjNGE2Mjg1MWZkNjI0ZmY3NDI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-05T20:33:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-05T20:33:12Z"}, "message": "Rollup merge of #54781 - phansch:master, r=varkor\n\nAdd examples to `TyKind::FnDef` and `TyKind::FnPtr` docs\n\nThis adds two examples to the docs of `TyKind::FnDef` and `TyKind::FnPtr`.\n\nI found these two types a bit confusing when I learned about them and I think adding these examples might help others.", "tree": {"sha": "af7e94f807318737071cbc57fb8ee48c2ba5692e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af7e94f807318737071cbc57fb8ee48c2ba5692e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e8f522e80a76ccadeb1efc4a62851fd624ff742", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbt8qICRBK7hj4Ov3rIwAAdHIIABK2uSxVA+AS+HYsgWKqsJuE\nOm5yWOIE0zMDg/zFC8MW8yMWD5XrTmNd88Fj0CqdIRQ0TyO6xgGto9Td/DBSCog4\n0YbuPaO1CFae7XPRrEKiLVMhAnmJVV/t21HWcmq3gwVqU+9/0rDzLiKlVZwEuBEM\n/x5xnkFY2M83LKJu3DvJP0oBx5e7+Q/kyTPluzZHM+PDktkL2CIj3mzfpdJRP8dD\nFUTC3YeSMf82KFoIDexPIZs4UQdCXUGq8F3L5XHT2WHfYv9MgPuZE+kqbvmE5uOi\nd7j07aS+dM8vd1CAExSwf+A0i6B9Sh5vM97Wze85XBn0Ya7tdZfoNkuHQaegK7A=\n=D9hW\n-----END PGP SIGNATURE-----\n", "payload": "tree af7e94f807318737071cbc57fb8ee48c2ba5692e\nparent 5efac03f340f37cad681fa0bf83c1df928a25352\nparent 769b3832fd984a865358de43dc594d9333193558\nauthor Pietro Albini <pietro@pietroalbini.org> 1538771592 +0200\ncommitter GitHub <noreply@github.com> 1538771592 +0200\n\nRollup merge of #54781 - phansch:master, r=varkor\n\nAdd examples to `TyKind::FnDef` and `TyKind::FnPtr` docs\n\nThis adds two examples to the docs of `TyKind::FnDef` and `TyKind::FnPtr`.\n\nI found these two types a bit confusing when I learned about them and I think adding these examples might help others.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8f522e80a76ccadeb1efc4a62851fd624ff742", "html_url": "https://github.com/rust-lang/rust/commit/9e8f522e80a76ccadeb1efc4a62851fd624ff742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e8f522e80a76ccadeb1efc4a62851fd624ff742/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5efac03f340f37cad681fa0bf83c1df928a25352", "url": "https://api.github.com/repos/rust-lang/rust/commits/5efac03f340f37cad681fa0bf83c1df928a25352", "html_url": "https://github.com/rust-lang/rust/commit/5efac03f340f37cad681fa0bf83c1df928a25352"}, {"sha": "769b3832fd984a865358de43dc594d9333193558", "url": "https://api.github.com/repos/rust-lang/rust/commits/769b3832fd984a865358de43dc594d9333193558", "html_url": "https://github.com/rust-lang/rust/commit/769b3832fd984a865358de43dc594d9333193558"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "71940196a64c630b76fffefb3d75f297a3a4820a", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f522e80a76ccadeb1efc4a62851fd624ff742/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f522e80a76ccadeb1efc4a62851fd624ff742/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9e8f522e80a76ccadeb1efc4a62851fd624ff742", "patch": "@@ -126,10 +126,25 @@ pub enum TyKind<'tcx> {\n     Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),\n \n     /// The anonymous type of a function declaration/definition. Each\n-    /// function has a unique type.\n+    /// function has a unique type, which is output (for a function\n+    /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.\n+    ///\n+    /// For example the type of `bar` here:\n+    ///\n+    /// ```rust\n+    /// fn foo() -> i32 { 1 }\n+    /// let bar = foo; // bar: fn() -> i32 {foo}\n+    /// ```\n     FnDef(DefId, &'tcx Substs<'tcx>),\n \n     /// A pointer to a function.  Written as `fn() -> i32`.\n+    ///\n+    /// For example the type of `bar` here:\n+    ///\n+    /// ```rust\n+    /// fn foo() -> i32 { 1 }\n+    /// let bar: fn() -> i32 = foo;\n+    /// ```\n     FnPtr(PolyFnSig<'tcx>),\n \n     /// A trait, defined with `trait`."}]}