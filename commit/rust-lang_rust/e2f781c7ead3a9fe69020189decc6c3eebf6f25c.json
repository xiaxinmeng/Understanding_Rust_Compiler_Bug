{"sha": "e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZjc4MWM3ZWFkM2E5ZmU2OTAyMDE4OWRlY2M2YzNlZWJmNmYyNWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-10T11:19:29Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-10T11:20:27Z"}, "message": "Example usage of multiple suggestions", "tree": {"sha": "8a94ecdac7c2981d39e111f756541bfc4d51787a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a94ecdac7c2981d39e111f756541bfc4d51787a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlkS93sACgkQpp+NIls6\n19lE4w//Sq3c5C2CxBrT2hbCDvxC+nMEy47OFGSK0dLfMaDe/GXH97dh19g5cPX0\ndXMSeaPMewwbhEFa3BerGrhTpr52kQvleH/MYdMPnHYAV/mw+HgQssTr2d7UmgTZ\n4fCjHHrrKwKiJ7uA6vb32XOGm53H0k6a7LVYJwRnw7S4HyWmnRJ89AiYgBRbwge2\n/IRgAD10SUoIr+zgzu44iwRuweOsGngRlHHJmfoVZIQrc4YLDSWma8fxP0ZtbbU3\nebf+pVSOnGctWz4L+GTB1PFWMn6NMHMgH/cOlTLufVSUsVautaE5HMuR6JYEP1PA\n7bs8og8AqektXu7Tp2VA0WYiJD/LHYDqX3r5v+XTE/u8cGaeAFdbroWglP544vhv\nAIrcP3Xa82UjE311y/VvUE3hTIdZXMKJBbRnUimzReTZK76FWCrC291yYpiVUa2M\nAzIrjjdR2VZgCuP4VZEZ8NM/CQF+yc9WIKaMyWA95Qp4GN17DDAMEc2vcK8mlNBQ\neFC6XfcsqWS8MkDEljurfWDHz0QsCZhJ7mDbK2P7YhVU6HhM7EMSPrfJJ5cnZYKo\nirex8HK0QcFhyd8/FYTk81/jyvad8Qiz5UAc0EUK35Ulzl6m41SLR/EZPvTIlLd/\nZGHxYH7ItrjQrmq8yIh5y2ro1UaYQZswrnivROcPijGlNUunLrI=\n=edPU\n-----END PGP SIGNATURE-----", "payload": "tree 8a94ecdac7c2981d39e111f756541bfc4d51787a\nparent 67d762d896c8748009d1843ebf9e2e0760ed33a0\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1494415169 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1494415227 +0200\n\nExample usage of multiple suggestions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "html_url": "https://github.com/rust-lang/rust/commit/e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d762d896c8748009d1843ebf9e2e0760ed33a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d762d896c8748009d1843ebf9e2e0760ed33a0", "html_url": "https://github.com/rust-lang/rust/commit/67d762d896c8748009d1843ebf9e2e0760ed33a0"}], "stats": {"total": 204, "additions": 113, "deletions": 91}, "files": [{"sha": "cd72941146c4dccee973fed2a926a799d906d636", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -81,6 +81,10 @@ impl Emitter for EmitterWriter {\n \n /// maximum number of lines we will print for each error; arbitrary.\n pub const MAX_HIGHLIGHT_LINES: usize = 6;\n+/// maximum number of suggestions to be shown\n+///\n+/// Arbitrary, but taken from trait import suggestion limit\n+pub const MAX_SUGGESTIONS: usize = 4;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum ColorConfig {\n@@ -1077,20 +1081,22 @@ impl EmitterWriter {\n \n             assert!(!lines.lines.is_empty());\n \n-            for complete in suggestion.splice_lines(cm.borrow()) {\n-                buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n-                buffer.append(0, \": \", Style::HeaderMsg);\n-                self.msg_to_buffer(&mut buffer,\n-                                &[(suggestion.msg.to_owned(), Style::NoStyle)],\n-                                max_line_num_len,\n-                                \"suggestion\",\n-                                Some(Style::HeaderMsg));\n+            buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n+            buffer.append(0, \": \", Style::HeaderMsg);\n+            self.msg_to_buffer(&mut buffer,\n+                            &[(suggestion.msg.to_owned(), Style::NoStyle)],\n+                            max_line_num_len,\n+                            \"suggestion\",\n+                            Some(Style::HeaderMsg));\n+\n+            let suggestions = suggestion.splice_lines(cm.borrow());\n+            let mut row_num = 1;\n+            for complete in suggestions.iter().take(MAX_SUGGESTIONS) {\n \n                 // print the suggestion without any line numbers, but leave\n                 // space for them. This helps with lining up with previous\n                 // snippets from the actual error being reported.\n                 let mut lines = complete.lines();\n-                let mut row_num = 1;\n                 for line in lines.by_ref().take(MAX_HIGHLIGHT_LINES) {\n                     draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n                     buffer.append(row_num, line, Style::NoStyle);\n@@ -1102,6 +1108,10 @@ impl EmitterWriter {\n                     buffer.append(row_num, \"...\", Style::NoStyle);\n                 }\n             }\n+            if suggestions.len() > MAX_SUGGESTIONS {\n+                let msg = format!(\"and {} other candidates\", suggestions.len() - MAX_SUGGESTIONS);\n+                buffer.append(row_num, &msg, Style::NoStyle);\n+            }\n             emit_to_destination(&buffer.render(), level, &mut self.dst)?;\n         }\n         Ok(())"}, {"sha": "82d688d6ba631724564c4e9912e5fd6283a3c1f6", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -183,7 +183,10 @@ impl CodeSuggestion {\n             prev_line = fm.get_line(prev_hi.line - 1);\n         }\n         for buf in &mut bufs {\n-            push_trailing(buf, prev_line, &prev_hi, None);\n+            // if the replacement already ends with a newline, don't print the next line\n+            if !buf.ends_with('\\n') {\n+                push_trailing(buf, prev_line, &prev_hi, None);\n+            }\n             // remove trailing newline\n             buf.pop();\n         }"}, {"sha": "d1f0cdedde8162b2ef56e764960f57f876987cfe", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -150,7 +150,7 @@ impl<'a> Resolver<'a> {\n                                           view_path.span,\n                                           ResolutionError::SelfImportsOnlyAllowedWithin);\n                         } else if source_name == \"$crate\" && full_path.segments.len() == 1 {\n-                            let crate_root = self.resolve_crate_var(source.ctxt);\n+                            let crate_root = self.resolve_crate_var(source.ctxt, item.span);\n                             let crate_name = match crate_root.kind {\n                                 ModuleKind::Def(_, name) => name,\n                                 ModuleKind::Block(..) => unreachable!(),\n@@ -247,7 +247,7 @@ impl<'a> Resolver<'a> {\n \n                 // n.b. we don't need to look at the path option here, because cstore already did\n                 let crate_id = self.session.cstore.extern_mod_stmt_cnum(item.id).unwrap();\n-                let module = self.get_extern_crate_root(crate_id);\n+                let module = self.get_extern_crate_root(crate_id, item.span);\n                 self.populate_module_if_necessary(module);\n                 let used = self.process_legacy_macro_imports(item, module, expansion);\n                 let binding =\n@@ -279,7 +279,7 @@ impl<'a> Resolver<'a> {\n                     no_implicit_prelude: parent.no_implicit_prelude || {\n                         attr::contains_name(&item.attrs, \"no_implicit_prelude\")\n                     },\n-                    ..ModuleData::new(Some(parent), module_kind, def_id)\n+                    ..ModuleData::new(Some(parent), module_kind, def_id, item.span)\n                 });\n                 self.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.module_map.insert(def_id, module);\n@@ -314,7 +314,10 @@ impl<'a> Resolver<'a> {\n             ItemKind::Enum(ref enum_definition, _) => {\n                 let def = Def::Enum(self.definitions.local_def_id(item.id));\n                 let module_kind = ModuleKind::Def(def, ident.name);\n-                let module = self.new_module(parent, module_kind, parent.normal_ancestor_id);\n+                let module = self.new_module(parent,\n+                                             module_kind,\n+                                             parent.normal_ancestor_id,\n+                                             item.span);\n                 self.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n \n                 for variant in &(*enum_definition).variants {\n@@ -370,7 +373,10 @@ impl<'a> Resolver<'a> {\n \n                 // Add all the items within to a new module.\n                 let module_kind = ModuleKind::Def(Def::Trait(def_id), ident.name);\n-                let module = self.new_module(parent, module_kind, parent.normal_ancestor_id);\n+                let module = self.new_module(parent,\n+                                             module_kind,\n+                                             parent.normal_ancestor_id,\n+                                             item.span);\n                 self.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.current_module = module;\n             }\n@@ -419,7 +425,7 @@ impl<'a> Resolver<'a> {\n         let parent = self.current_module;\n         if self.block_needs_anonymous_module(block) {\n             let module =\n-                self.new_module(parent, ModuleKind::Block(block.id), parent.normal_ancestor_id);\n+                self.new_module(parent, ModuleKind::Block(block.id), parent.normal_ancestor_id, block.span);\n             self.block_map.insert(block.id, module);\n             self.current_module = module; // Descend into the block.\n         }\n@@ -431,10 +437,14 @@ impl<'a> Resolver<'a> {\n         let def = child.def;\n         let def_id = def.def_id();\n         let vis = self.session.cstore.visibility(def_id);\n+        let span = child.span;\n \n         match def {\n             Def::Mod(..) | Def::Enum(..) => {\n-                let module = self.new_module(parent, ModuleKind::Def(def, ident.name), def_id);\n+                let module = self.new_module(parent,\n+                                             ModuleKind::Def(def, ident.name),\n+                                             def_id,\n+                                             span);\n                 self.define(parent, ident, TypeNS, (module, vis, DUMMY_SP, Mark::root()));\n             }\n             Def::Variant(..) | Def::TyAlias(..) => {\n@@ -454,7 +464,10 @@ impl<'a> Resolver<'a> {\n             }\n             Def::Trait(..) => {\n                 let module_kind = ModuleKind::Def(def, ident.name);\n-                let module = self.new_module(parent, module_kind, parent.normal_ancestor_id);\n+                let module = self.new_module(parent,\n+                                             module_kind,\n+                                             parent.normal_ancestor_id,\n+                                             span);\n                 self.define(parent, ident, TypeNS, (module, vis, DUMMY_SP, Mark::root()));\n \n                 for child in self.session.cstore.item_children(def_id) {\n@@ -483,18 +496,18 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn get_extern_crate_root(&mut self, cnum: CrateNum) -> Module<'a> {\n+    fn get_extern_crate_root(&mut self, cnum: CrateNum, span: Span) -> Module<'a> {\n         let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n         let name = self.session.cstore.crate_name(cnum);\n         let macros_only = self.session.cstore.dep_kind(cnum).macros_only();\n         let module_kind = ModuleKind::Def(Def::Mod(def_id), name);\n         let arenas = self.arenas;\n         *self.extern_crate_roots.entry((cnum, macros_only)).or_insert_with(|| {\n-            arenas.alloc_module(ModuleData::new(None, module_kind, def_id))\n+            arenas.alloc_module(ModuleData::new(None, module_kind, def_id, span))\n         })\n     }\n \n-    pub fn macro_def_scope(&mut self, expansion: Mark) -> Module<'a> {\n+    pub fn macro_def_scope(&mut self, expansion: Mark, span: Span) -> Module<'a> {\n         let def_id = self.macro_defs[&expansion];\n         if let Some(id) = self.definitions.as_local_node_id(def_id) {\n             self.local_macro_def_scopes[&id]\n@@ -503,7 +516,7 @@ impl<'a> Resolver<'a> {\n             self.graph_root\n         } else {\n             let module_def_id = ty::DefIdTree::parent(&*self, def_id).unwrap();\n-            self.get_extern_crate_root(module_def_id.krate)\n+            self.get_extern_crate_root(module_def_id.krate, span)\n         }\n     }\n "}, {"sha": "fd964c7d7d135ba4d529a7adb8d2d02cfa141347", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -865,12 +865,15 @@ pub struct ModuleData<'a> {\n     // access the children must be preceded with a\n     // `populate_module_if_necessary` call.\n     populated: Cell<bool>,\n+\n+    /// Span of the module itself. Used for error reporting.\n+    span: Span,\n }\n \n pub type Module<'a> = &'a ModuleData<'a>;\n \n impl<'a> ModuleData<'a> {\n-    fn new(parent: Option<Module<'a>>, kind: ModuleKind, normal_ancestor_id: DefId) -> Self {\n+    fn new(parent: Option<Module<'a>>, kind: ModuleKind, normal_ancestor_id: DefId, span: Span) -> Self {\n         ModuleData {\n             parent: parent,\n             kind: kind,\n@@ -884,6 +887,7 @@ impl<'a> ModuleData<'a> {\n             globs: RefCell::new((Vec::new())),\n             traits: RefCell::new(None),\n             populated: Cell::new(normal_ancestor_id.is_local()),\n+            span: span,\n         }\n     }\n \n@@ -1298,7 +1302,7 @@ impl<'a> Resolver<'a> {\n         let root_module_kind = ModuleKind::Def(Def::Mod(root_def_id), keywords::Invalid.name());\n         let graph_root = arenas.alloc_module(ModuleData {\n             no_implicit_prelude: attr::contains_name(&krate.attrs, \"no_implicit_prelude\"),\n-            ..ModuleData::new(None, root_module_kind, root_def_id)\n+            ..ModuleData::new(None, root_module_kind, root_def_id, krate.span)\n         });\n         let mut module_map = FxHashMap();\n         module_map.insert(DefId::local(CRATE_DEF_INDEX), graph_root);\n@@ -1430,9 +1434,9 @@ impl<'a> Resolver<'a> {\n         self.crate_loader.postprocess(krate);\n     }\n \n-    fn new_module(&self, parent: Module<'a>, kind: ModuleKind, normal_ancestor_id: DefId)\n+    fn new_module(&self, parent: Module<'a>, kind: ModuleKind, normal_ancestor_id: DefId, span: Span)\n                   -> Module<'a> {\n-        self.arenas.alloc_module(ModuleData::new(Some(parent), kind, normal_ancestor_id))\n+        self.arenas.alloc_module(ModuleData::new(Some(parent), kind, normal_ancestor_id, span))\n     }\n \n     fn record_use(&mut self, ident: Ident, ns: Namespace, binding: &'a NameBinding<'a>, span: Span)\n@@ -1535,12 +1539,12 @@ impl<'a> Resolver<'a> {\n         None\n     }\n \n-    fn resolve_crate_var(&mut self, crate_var_ctxt: SyntaxContext) -> Module<'a> {\n+    fn resolve_crate_var(&mut self, crate_var_ctxt: SyntaxContext, span: Span) -> Module<'a> {\n         let mut ctxt_data = crate_var_ctxt.data();\n         while ctxt_data.prev_ctxt != SyntaxContext::empty() {\n             ctxt_data = ctxt_data.prev_ctxt.data();\n         }\n-        let module = self.macro_def_scope(ctxt_data.outer_mark);\n+        let module = self.macro_def_scope(ctxt_data.outer_mark, span);\n         if module.is_local() { self.graph_root } else { module }\n     }\n \n@@ -2271,8 +2275,10 @@ impl<'a> Resolver<'a> {\n             let name = path.last().unwrap().name;\n             let candidates = this.lookup_import_candidates(name, ns, is_expected);\n             if !candidates.is_empty() {\n+                let mut module_span = this.current_module.span;\n+                module_span.hi = module_span.lo;\n                 // Report import candidates as help and proceed searching for labels.\n-                show_candidates(&mut err, &candidates, def.is_some());\n+                show_candidates(&mut err, module_span, &candidates, def.is_some());\n             } else if is_expected(Def::Enum(DefId::local(CRATE_DEF_INDEX))) {\n                 let enum_candidates = this.lookup_import_candidates(name, ns, is_enum_variant);\n                 let mut enum_candidates = enum_candidates.iter()\n@@ -2584,7 +2590,7 @@ impl<'a> Resolver<'a> {\n                 module = Some(self.graph_root);\n                 continue\n             } else if i == 0 && ns == TypeNS && ident.name == \"$crate\" {\n-                module = Some(self.resolve_crate_var(ident.ctxt));\n+                module = Some(self.resolve_crate_var(ident.ctxt, DUMMY_SP));\n                 continue\n             }\n \n@@ -3463,12 +3469,10 @@ fn import_candidate_to_paths(suggestion: &ImportSuggestion) -> (Span, String, St\n /// When an entity with a given name is not available in scope, we search for\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way\n-fn show_candidates(session: &mut DiagnosticBuilder,\n+fn show_candidates(err: &mut DiagnosticBuilder,\n+                   span: Span,\n                    candidates: &[ImportSuggestion],\n                    better: bool) {\n-    // don't show more than MAX_CANDIDATES results, so\n-    // we're consistent with the trait suggestions\n-    const MAX_CANDIDATES: usize = 4;\n \n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n@@ -3481,21 +3485,13 @@ fn show_candidates(session: &mut DiagnosticBuilder,\n         1 => \" is found in another module, you can import it\",\n         _ => \"s are found in other modules, you can import them\",\n     };\n+    let msg = format!(\"possible {}candidate{} into scope\", better, msg_diff);\n+\n+    for candidate in &mut path_strings {\n+        *candidate = format!(\"use {};\\n\", candidate);\n+    }\n \n-    let end = cmp::min(MAX_CANDIDATES, path_strings.len());\n-    session.help(&format!(\"possible {}candidate{} into scope:{}{}\",\n-                          better,\n-                          msg_diff,\n-                          &path_strings[0..end].iter().map(|candidate| {\n-                              format!(\"\\n  `use {};`\", candidate)\n-                          }).collect::<String>(),\n-                          if path_strings.len() > MAX_CANDIDATES {\n-                              format!(\"\\nand {} other candidates\",\n-                                      path_strings.len() - MAX_CANDIDATES)\n-                          } else {\n-                              \"\".to_owned()\n-                          }\n-                          ));\n+    err.span_suggestions(span, &msg, path_strings);\n }\n \n /// A somewhat inefficient routine to obtain the name of a module."}, {"sha": "fffccada7d68f1ee8e2a184669f4ac6f87a28762", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -123,14 +123,14 @@ impl<'a> base::Resolver for Resolver<'a> {\n     }\n \n     fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> {\n-        struct EliminateCrateVar<'b, 'a: 'b>(&'b mut Resolver<'a>);\n+        struct EliminateCrateVar<'b, 'a: 'b>(&'b mut Resolver<'a>, Span);\n \n         impl<'a, 'b> Folder for EliminateCrateVar<'a, 'b> {\n             fn fold_path(&mut self, mut path: ast::Path) -> ast::Path {\n                 let ident = path.segments[0].identifier;\n                 if ident.name == \"$crate\" {\n                     path.segments[0].identifier.name = keywords::CrateRoot.name();\n-                    let module = self.0.resolve_crate_var(ident.ctxt);\n+                    let module = self.0.resolve_crate_var(ident.ctxt, self.1);\n                     if !module.is_local() {\n                         let span = path.segments[0].span;\n                         path.segments.insert(1, match module.kind {\n@@ -149,7 +149,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             }\n         }\n \n-        EliminateCrateVar(self).fold_item(item).expect_one(\"\")\n+        EliminateCrateVar(self, item.span).fold_item(item).expect_one(\"\")\n     }\n \n     fn is_whitelisted_legacy_custom_derive(&self, name: Name) -> bool {"}, {"sha": "17c5d5d15d40479415e0c5503c248ace94e25045", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -4,26 +4,26 @@ error[E0425]: cannot find value `A` in module `namespaced_enums`\n 15 |     let _ = namespaced_enums::A;\n    |                               ^ not found in `namespaced_enums`\n    |\n-   = help: possible candidate is found in another module, you can import it into scope:\n-             `use namespaced_enums::Foo::A;`\n+help: possible candidate is found in another module, you can import it into scope\n+   | use namespaced_enums::Foo::A;\n \n error[E0425]: cannot find function `B` in module `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:18:31\n    |\n 18 |     let _ = namespaced_enums::B(10);\n    |                               ^ not found in `namespaced_enums`\n    |\n-   = help: possible candidate is found in another module, you can import it into scope:\n-             `use namespaced_enums::Foo::B;`\n+help: possible candidate is found in another module, you can import it into scope\n+   | use namespaced_enums::Foo::B;\n \n error[E0422]: cannot find struct, variant or union type `C` in module `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:21:31\n    |\n 21 |     let _ = namespaced_enums::C { a: 10 };\n    |                               ^ not found in `namespaced_enums`\n    |\n-   = help: possible candidate is found in another module, you can import it into scope:\n-             `use namespaced_enums::Foo::C;`\n+help: possible candidate is found in another module, you can import it into scope\n+   | use namespaced_enums::Foo::C;\n \n error: aborting due to 3 previous errors\n "}, {"sha": "63d2ce109142c70116181304aad38511fcb51325", "filename": "src/test/ui/resolve/issue-16058.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -4,10 +4,10 @@ error[E0574]: expected struct, variant or union type, found enum `Result`\n 19 |         Result {\n    |         ^^^^^^ not a struct, variant or union type\n    |\n-   = help: possible better candidates are found in other modules, you can import them into scope:\n-             `use std::fmt::Result;`\n-             `use std::io::Result;`\n-             `use std::thread::Result;`\n+help: possible better candidates are found in other modules, you can import them into scope\n+   | use std::fmt::Result;\n+   | use std::io::Result;\n+   | use std::thread::Result;\n \n error: aborting due to previous error\n "}, {"sha": "c0438abfe43b45cd5458eb302868063ff96c15df", "filename": "src/test/ui/resolve/issue-17518.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -4,8 +4,8 @@ error[E0422]: cannot find struct, variant or union type `E` in this scope\n 16 |     E { name: \"foobar\" }; //~ ERROR unresolved struct, variant or union type `E`\n    |     ^ not found in this scope\n    |\n-   = help: possible candidate is found in another module, you can import it into scope:\n-             `use SomeEnum::E;`\n+help: possible candidate is found in another module, you can import it into scope\n+   | use SomeEnum::E;\n \n error: aborting due to previous error\n "}, {"sha": "7315d295f7b8427a9c84cafe3cfa3a37539d3d89", "filename": "src/test/ui/resolve/issue-21221-1.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -4,23 +4,23 @@ error[E0405]: cannot find trait `Mul` in this scope\n 53 | impl Mul for Foo {\n    |      ^^^ not found in this scope\n    |\n-   = help: possible candidates are found in other modules, you can import them into scope:\n-             `use mul1::Mul;`\n-             `use mul2::Mul;`\n-             `use std::ops::Mul;`\n+help: possible candidates are found in other modules, you can import them into scope\n+   | use mul1::Mul;\n+   | use mul2::Mul;\n+   | use std::ops::Mul;\n \n error[E0412]: cannot find type `Mul` in this scope\n   --> $DIR/issue-21221-1.rs:72:16\n    |\n 72 | fn getMul() -> Mul {\n    |                ^^^ not found in this scope\n    |\n-   = help: possible candidates are found in other modules, you can import them into scope:\n-             `use mul1::Mul;`\n-             `use mul2::Mul;`\n-             `use mul3::Mul;`\n-             `use mul4::Mul;`\n-           and 2 other candidates\n+help: possible candidates are found in other modules, you can import them into scope\n+   | use mul1::Mul;\n+   | use mul2::Mul;\n+   | use mul3::Mul;\n+   | use mul4::Mul;\n+and 2 other candidates\n \n error[E0405]: cannot find trait `ThisTraitReallyDoesntExistInAnyModuleReally` in this scope\n   --> $DIR/issue-21221-1.rs:83:6\n@@ -34,8 +34,8 @@ error[E0405]: cannot find trait `Div` in this scope\n 88 | impl Div for Foo {\n    |      ^^^ not found in this scope\n    |\n-   = help: possible candidate is found in another module, you can import it into scope:\n-             `use std::ops::Div;`\n+help: possible candidate is found in another module, you can import it into scope\n+   | use std::ops::Div;\n \n error: cannot continue compilation due to previous error\n "}, {"sha": "f0b22754e6444607af28f16310bbe92a490c5f7e", "filename": "src/test/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -4,8 +4,8 @@ error[E0405]: cannot find trait `T` in this scope\n 28 | impl T for Foo { }\n    |      ^ not found in this scope\n    |\n-   = help: possible candidate is found in another module, you can import it into scope:\n-             `use foo::bar::T;`\n+help: possible candidate is found in another module, you can import it into scope\n+   | use foo::bar::T;\n \n error: main function not found\n "}, {"sha": "a4a2496b19ae4c0b85c070945fa4fff4d35e0f54", "filename": "src/test/ui/resolve/issue-21221-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -4,8 +4,8 @@ error[E0405]: cannot find trait `OuterTrait` in this scope\n 25 | impl OuterTrait for Foo {}\n    |      ^^^^^^^^^^ not found in this scope\n    |\n-   = help: possible candidate is found in another module, you can import it into scope:\n-             `use issue_21221_3::outer::OuterTrait;`\n+help: possible candidate is found in another module, you can import it into scope\n+   | use issue_21221_3::outer::OuterTrait;\n \n error: cannot continue compilation due to previous error\n "}, {"sha": "dc2f22717313320616be267464421c8f15841708", "filename": "src/test/ui/resolve/issue-21221-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -4,8 +4,8 @@ error[E0405]: cannot find trait `T` in this scope\n 20 | impl T for Foo {}\n    |      ^ not found in this scope\n    |\n-   = help: possible candidate is found in another module, you can import it into scope:\n-             `use issue_21221_4::T;`\n+help: possible candidate is found in another module, you can import it into scope\n+   | use issue_21221_4::T;\n \n error: cannot continue compilation due to previous error\n "}, {"sha": "0bf39dc55cee76a5b30d073f3c532380d2b7c5af", "filename": "src/test/ui/resolve/issue-3907.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -4,8 +4,8 @@ error[E0404]: expected trait, found type alias `Foo`\n 20 | impl Foo for S { //~ ERROR expected trait, found type alias `Foo`\n    |      ^^^ type aliases cannot be used for traits\n    |\n-   = help: possible better candidate is found in another module, you can import it into scope:\n-             `use issue_3907::Foo;`\n+help: possible better candidate is found in another module, you can import it into scope\n+   | use issue_3907::Foo;\n \n error: cannot continue compilation due to previous error\n "}, {"sha": "19940ff4586d2e3baf028f71ebecec7ba96804f9", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -8,8 +8,8 @@ error[E0423]: expected value, found struct `Z`\n    |         did you mean `S`?\n    |         constructor is not visible here due to private fields\n    |\n-   = help: possible better candidate is found in another module, you can import it into scope:\n-             `use m::n::Z;`\n+help: possible better candidate is found in another module, you can import it into scope\n+   | use m::n::Z;\n \n error[E0423]: expected value, found struct `S`\n   --> $DIR/privacy-struct-ctor.rs:36:5\n@@ -20,8 +20,8 @@ error[E0423]: expected value, found struct `S`\n    |     did you mean `S { /* fields */ }`?\n    |     constructor is not visible here due to private fields\n    |\n-   = help: possible better candidate is found in another module, you can import it into scope:\n-             `use m::S;`\n+help: possible better candidate is found in another module, you can import it into scope\n+   | use m::S;\n \n error[E0423]: expected value, found struct `xcrate::S`\n   --> $DIR/privacy-struct-ctor.rs:42:5\n@@ -32,8 +32,8 @@ error[E0423]: expected value, found struct `xcrate::S`\n    |     did you mean `xcrate::S { /* fields */ }`?\n    |     constructor is not visible here due to private fields\n    |\n-   = help: possible better candidate is found in another module, you can import it into scope:\n-             `use m::S;`\n+help: possible better candidate is found in another module, you can import it into scope\n+   | use m::S;\n \n error: tuple struct `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:25:9"}, {"sha": "e53ea6a55afb5dc3a9b1028bba5f5d89312fe0e9", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f781c7ead3a9fe69020189decc6c3eebf6f25c/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=e2f781c7ead3a9fe69020189decc6c3eebf6f25c", "patch": "@@ -4,8 +4,8 @@ error[E0404]: expected trait, found type parameter `Add`\n 15 | impl<T: Clone, Add> Add for Foo<T> {\n    |                     ^^^ not a trait\n    |\n-   = help: possible better candidate is found in another module, you can import it into scope:\n-             `use std::ops::Add;`\n+help: possible better candidate is found in another module, you can import it into scope\n+   | use std::ops::Add;\n \n error: main function not found\n "}]}