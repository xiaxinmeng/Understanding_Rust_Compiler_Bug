{"sha": "d38ae767f841a307911abd5713695eae8390bbf0", "node_id": "C_kwDOAAsO6NoAKGQzOGFlNzY3Zjg0MWEzMDc5MTFhYmQ1NzEzNjk1ZWFlODM5MGJiZjA", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-11T22:15:52Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-11T22:22:34Z"}, "message": "rustdoc: Pretty-print assoc const defaults on-demand\n\nThis should improve performance, clean up the code, and help pave the\nway for #83035.", "tree": {"sha": "1e0f863f4d6eeb490582c69aef9fa92e5d4c71b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e0f863f4d6eeb490582c69aef9fa92e5d4c71b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d38ae767f841a307911abd5713695eae8390bbf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d38ae767f841a307911abd5713695eae8390bbf0", "html_url": "https://github.com/rust-lang/rust/commit/d38ae767f841a307911abd5713695eae8390bbf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d38ae767f841a307911abd5713695eae8390bbf0/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8dc6aa673317cf72a8abb9c421f573f2b34b47a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8dc6aa673317cf72a8abb9c421f573f2b34b47a", "html_url": "https://github.com/rust-lang/rust/commit/b8dc6aa673317cf72a8abb9c421f573f2b34b47a"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "2b4466d4041705d98cb70d5f586466d9b9f11c2b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d38ae767f841a307911abd5713695eae8390bbf0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38ae767f841a307911abd5713695eae8390bbf0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d38ae767f841a307911abd5713695eae8390bbf0", "patch": "@@ -912,7 +912,9 @@ impl Clean<Item> for hir::TraitItem<'_> {\n         cx.with_param_env(local_did, |cx| {\n             let inner = match self.kind {\n                 hir::TraitItemKind::Const(ref ty, default) => {\n-                    AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx.tcx, e)))\n+                    let default =\n+                        default.map(|e| ConstantKind::Local { def_id: local_did, body: e });\n+                    AssocConstItem(ty.clean(cx), default)\n                 }\n                 hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n                     let mut m = clean_function(cx, sig, &self.generics, body);\n@@ -959,7 +961,8 @@ impl Clean<Item> for hir::ImplItem<'_> {\n         cx.with_param_env(local_did, |cx| {\n             let inner = match self.kind {\n                 hir::ImplItemKind::Const(ref ty, expr) => {\n-                    AssocConstItem(ty.clean(cx), Some(print_const_expr(cx.tcx, expr)))\n+                    let default = Some(ConstantKind::Local { def_id: local_did, body: expr });\n+                    AssocConstItem(ty.clean(cx), default)\n                 }\n                 hir::ImplItemKind::Fn(ref sig, body) => {\n                     let mut m = clean_function(cx, sig, &self.generics, body);\n@@ -1009,7 +1012,7 @@ impl Clean<Item> for ty::AssocItem {\n             ty::AssocKind::Const => {\n                 let ty = tcx.type_of(self.def_id);\n                 let default = if self.defaultness.has_value() {\n-                    Some(inline::print_inlined_const(tcx, self.def_id))\n+                    Some(ConstantKind::Extern { def_id: self.def_id })\n                 } else {\n                     None\n                 };"}, {"sha": "6ce6d889150108e5b543ff222238f9b855f2f4cd", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d38ae767f841a307911abd5713695eae8390bbf0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38ae767f841a307911abd5713695eae8390bbf0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d38ae767f841a307911abd5713695eae8390bbf0", "patch": "@@ -670,7 +670,7 @@ crate enum ItemKind {\n     MacroItem(Macro),\n     ProcMacroItem(ProcMacro),\n     PrimitiveItem(PrimitiveType),\n-    AssocConstItem(Type, Option<String>),\n+    AssocConstItem(Type, Option<ConstantKind>),\n     /// An associated item in a trait or trait impl.\n     ///\n     /// The bounds may be non-empty if there is a `where` clause.\n@@ -2153,7 +2153,21 @@ crate enum ConstantKind {\n \n impl Constant {\n     crate fn expr(&self, tcx: TyCtxt<'_>) -> String {\n-        match self.kind {\n+        self.kind.expr(tcx)\n+    }\n+\n+    crate fn value(&self, tcx: TyCtxt<'_>) -> Option<String> {\n+        self.kind.value(tcx)\n+    }\n+\n+    crate fn is_literal(&self, tcx: TyCtxt<'_>) -> bool {\n+        self.kind.is_literal(tcx)\n+    }\n+}\n+\n+impl ConstantKind {\n+    crate fn expr(&self, tcx: TyCtxt<'_>) -> String {\n+        match *self {\n             ConstantKind::TyConst { ref expr } => expr.clone(),\n             ConstantKind::Extern { def_id } => print_inlined_const(tcx, def_id),\n             ConstantKind::Local { body, .. } | ConstantKind::Anonymous { body } => {\n@@ -2163,7 +2177,7 @@ impl Constant {\n     }\n \n     crate fn value(&self, tcx: TyCtxt<'_>) -> Option<String> {\n-        match self.kind {\n+        match *self {\n             ConstantKind::TyConst { .. } | ConstantKind::Anonymous { .. } => None,\n             ConstantKind::Extern { def_id } | ConstantKind::Local { def_id, .. } => {\n                 print_evaluated_const(tcx, def_id)\n@@ -2172,7 +2186,7 @@ impl Constant {\n     }\n \n     crate fn is_literal(&self, tcx: TyCtxt<'_>) -> bool {\n-        match self.kind {\n+        match *self {\n             ConstantKind::TyConst { .. } => false,\n             ConstantKind::Extern { def_id } => def_id.as_local().map_or(false, |def_id| {\n                 is_literal_expr(tcx, tcx.hir().local_def_id_to_hir_id(def_id))"}, {"sha": "db31751176bdeb0e8f4a2166c570fe970f7a8dd1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38ae767f841a307911abd5713695eae8390bbf0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38ae767f841a307911abd5713695eae8390bbf0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d38ae767f841a307911abd5713695eae8390bbf0", "patch": "@@ -762,7 +762,7 @@ fn assoc_const(\n     w: &mut Buffer,\n     it: &clean::Item,\n     ty: &clean::Type,\n-    _default: Option<&String>,\n+    _default: Option<&clean::ConstantKind>,\n     link: AssocItemLink<'_>,\n     extra: &str,\n     cx: &Context<'_>,"}, {"sha": "ee29bfcc7a48d62080d3e54de4278f61286c402a", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38ae767f841a307911abd5713695eae8390bbf0/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38ae767f841a307911abd5713695eae8390bbf0/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=d38ae767f841a307911abd5713695eae8390bbf0", "patch": "@@ -219,7 +219,9 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         MacroItem(m) => ItemEnum::Macro(m.source),\n         ProcMacroItem(m) => ItemEnum::ProcMacro(m.into_tcx(tcx)),\n         PrimitiveItem(p) => ItemEnum::PrimitiveType(p.as_sym().to_string()),\n-        AssocConstItem(t, s) => ItemEnum::AssocConst { type_: t.into_tcx(tcx), default: s },\n+        AssocConstItem(ty, default) => {\n+            ItemEnum::AssocConst { type_: ty.into_tcx(tcx), default: default.map(|c| c.expr(tcx)) }\n+        }\n         AssocTypeItem(g, t) => ItemEnum::AssocType {\n             bounds: g.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             default: t.map(|x| x.into_tcx(tcx)),"}]}