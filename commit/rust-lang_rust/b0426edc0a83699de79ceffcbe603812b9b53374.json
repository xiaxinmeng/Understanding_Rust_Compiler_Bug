{"sha": "b0426edc0a83699de79ceffcbe603812b9b53374", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNDI2ZWRjMGE4MzY5OWRlNzljZWZmY2JlNjAzODEyYjliNTMzNzQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-01T13:33:04Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-04T11:35:53Z"}, "message": "std::str: s/from_utf8_slice/from_utf8/, to make the basic case shorter.", "tree": {"sha": "1aff5ef5a386dbe93febb8eab89033fa83f33a8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aff5ef5a386dbe93febb8eab89033fa83f33a8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0426edc0a83699de79ceffcbe603812b9b53374", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0426edc0a83699de79ceffcbe603812b9b53374", "html_url": "https://github.com/rust-lang/rust/commit/b0426edc0a83699de79ceffcbe603812b9b53374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0426edc0a83699de79ceffcbe603812b9b53374/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d64e46013096997627da62ecc65225bc22682e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d64e46013096997627da62ecc65225bc22682e8", "html_url": "https://github.com/rust-lang/rust/commit/9d64e46013096997627da62ecc65225bc22682e8"}], "stats": {"total": 140, "additions": 70, "deletions": 70}, "files": [{"sha": "726fbcb5d7a67eca2504cfa60a2c9ae37417cacd", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -298,7 +298,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n \n                 let adb_arg = format!(\"export LD_LIBRARY_PATH={}; gdbserver :5039 {}/{}\",\n                          config.adb_test_dir.clone(), config.adb_test_dir.clone(),\n-                         str::from_utf8_slice(exe_file.filename().unwrap()));\n+                         str::from_utf8(exe_file.filename().unwrap()));\n \n                 let mut process = procsrv::run_background(\"\", config.adb_path.clone(),\n                         [~\"shell\",adb_arg.clone()],~[(~\"\",~\"\")], Some(~\"\"));"}, {"sha": "aadb93f2e24e1db124d071bfe43a02ba464e0ed6", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -41,7 +41,7 @@ impl Doc {\n     }\n \n     pub fn as_str_slice<'a>(&'a self) -> &'a str {\n-        str::from_utf8_slice(self.data.slice(self.start, self.end))\n+        str::from_utf8(self.data.slice(self.start, self.end))\n     }\n \n     pub fn as_str(&self) -> ~str {"}, {"sha": "93ffb8f9fde5eeda21b76aa670c93ad73c442ca9", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -701,7 +701,7 @@ fn should_sort_failures_before_printing_them() {\n \n     st.write_failures();\n     let s = match st.out {\n-        Right(ref m) => str::from_utf8_slice(*m.inner_ref()),\n+        Right(ref m) => str::from_utf8(*m.inner_ref()),\n         Left(_) => unreachable!()\n     };\n "}, {"sha": "4711381a7b8518207ea2168f7fb04c3fd3d9b89e", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -41,8 +41,8 @@ fn run_ar(sess: Session, args: &str, cwd: Option<&Path>,\n     let o = Process::new(ar, args.as_slice(), opts).finish_with_output();\n     if !o.status.success() {\n         sess.err(format!(\"{} failed with: {}\", ar, o.status));\n-        sess.note(format!(\"stdout ---\\n{}\", str::from_utf8_slice(o.output)));\n-        sess.note(format!(\"stderr ---\\n{}\", str::from_utf8_slice(o.error)));\n+        sess.note(format!(\"stdout ---\\n{}\", str::from_utf8(o.output)));\n+        sess.note(format!(\"stderr ---\\n{}\", str::from_utf8(o.error)));\n         sess.abort_if_errors();\n     }\n     o"}, {"sha": "cbf3dcf278133595755c6a3b11a309ec5187bc7d", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -98,7 +98,7 @@ pub fn parse_ident(st: &mut PState, last: char) -> ast::Ident {\n \n fn parse_ident_(st: &mut PState, is_last: |char| -> bool) -> ast::Ident {\n     scan(st, is_last, |bytes| {\n-            st.tcx.sess.ident_of(str::from_utf8_slice(bytes))\n+            st.tcx.sess.ident_of(str::from_utf8(bytes))\n         })\n }\n \n@@ -494,7 +494,7 @@ fn parse_abi_set(st: &mut PState) -> AbiSet {\n     let mut abis = AbiSet::empty();\n     while peek(st) != ']' {\n          scan(st, |c| c == ',', |bytes| {\n-                 let abi_str = str::from_utf8_slice(bytes).to_owned();\n+                 let abi_str = str::from_utf8(bytes).to_owned();\n                  let abi = abi::lookup(abi_str).expect(abi_str);\n                  abis.add(abi);\n               });"}, {"sha": "19a9a7efc578ae609038a6f8be044e93d72b5140", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -72,7 +72,7 @@ pub fn enc_ty(w: @mut MemWriter, cx: @ctxt, t: ty::t) {\n             None => {\n                 let wr = @mut MemWriter::new();\n                 enc_sty(wr, cx, &ty::get(t).sty);\n-                let s = str::from_utf8_slice(*wr.inner_ref()).to_managed();\n+                let s = str::from_utf8(*wr.inner_ref()).to_managed();\n                 cx.tcx.short_names_cache.insert(t, s);\n                 s\n           }"}, {"sha": "22da8d6d8a8126290aa1d06d5488c819abca501d", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -184,7 +184,7 @@ impl<'self> PkgScript<'self> {\n                                              [sysroot.as_str().unwrap().to_owned(), ~\"configs\"]);\n             debug!(\"run_custom: second pkg command did {:?}\", output.status);\n             // Run the configs() function to get the configs\n-            let cfgs = str::from_utf8_slice(output.output).words()\n+            let cfgs = str::from_utf8(output.output).words()\n                 .map(|w| w.to_owned()).collect();\n             (cfgs, output.status)\n         }"}, {"sha": "17793f232866ec9b3c4c0a6c7ecedfa15f544bb8", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -154,7 +154,7 @@ fn run_git(args: &[~str], env: Option<~[(~str, ~str)]>, cwd: &Path, err_msg: &st\n     let rslt = prog.finish_with_output();\n     if !rslt.status.success() {\n         fail!(\"{} [git returned {:?}, output = {}, error = {}]\", err_msg,\n-           rslt.status, str::from_utf8_slice(rslt.output), str::from_utf8_slice(rslt.error));\n+           rslt.status, str::from_utf8(rslt.output), str::from_utf8(rslt.error));\n     }\n }\n \n@@ -290,13 +290,13 @@ fn command_line_test_with_env(args: &[~str], cwd: &Path, env: Option<~[(~str, ~s\n     });\n     let output = prog.finish_with_output();\n     debug!(\"Output from command {} with args {:?} was {} \\\\{{}\\\\}[{:?}]\",\n-           cmd, args, str::from_utf8_slice(output.output),\n-           str::from_utf8_slice(output.error),\n+           cmd, args, str::from_utf8(output.output),\n+           str::from_utf8(output.error),\n            output.status);\n     if !output.status.success() {\n-        debug!(\"Command {} {:?} failed with exit code {:?}; its output was --- {} ---\",\n+        debug!(\"Command {} {:?} failed with exit code {:?}; its output was --- {} {} ---\",\n               cmd, args, output.status,\n-              str::from_utf8_slice(output.output) + str::from_utf8_slice(output.error));\n+              str::from_utf8(output.output), str::from_utf8(output.error));\n         Fail(output)\n     }\n     else {\n@@ -455,7 +455,7 @@ fn built_library_exists(repo: &Path, short_name: &str) -> bool {\n fn command_line_test_output(args: &[~str]) -> ~[~str] {\n     let mut result = ~[];\n     let p_output = command_line_test(args, &os::getcwd());\n-    let test_output = str::from_utf8_slice(p_output.output);\n+    let test_output = str::from_utf8(p_output.output);\n     for s in test_output.split('\\n') {\n         result.push(s.to_owned());\n     }\n@@ -469,7 +469,7 @@ fn command_line_test_output_with_env(args: &[~str], env: ~[(~str, ~str)]) -> ~[~\n         Fail(_) => fail!(\"Command-line test failed\"),\n         Success(r) => r\n     };\n-    let test_output = str::from_utf8_slice(p_output.output);\n+    let test_output = str::from_utf8(p_output.output);\n     for s in test_output.split('\\n') {\n         result.push(s.to_owned());\n     }\n@@ -1212,7 +1212,7 @@ fn test_uninstall() {\n     let workspace = create_local_package(&PkgId::new(\"foo\"));\n     command_line_test([~\"uninstall\", ~\"foo\"], workspace.path());\n     let output = command_line_test([~\"list\"], workspace.path());\n-    assert!(!str::from_utf8_slice(output.output).contains(\"foo\"));\n+    assert!(!str::from_utf8(output.output).contains(\"foo\"));\n }\n \n #[test]\n@@ -1282,8 +1282,8 @@ fn test_extern_mod() {\n     let outp = prog.finish_with_output();\n     if !outp.status.success() {\n         fail!(\"output was {}, error was {}\",\n-              str::from_utf8_slice(outp.output),\n-              str::from_utf8_slice(outp.error));\n+              str::from_utf8(outp.output),\n+              str::from_utf8(outp.error));\n     }\n     assert!(exec_file.exists() && is_executable(&exec_file));\n }\n@@ -1337,8 +1337,8 @@ fn test_extern_mod_simpler() {\n     let outp = prog.finish_with_output();\n     if !outp.status.success() {\n         fail!(\"output was {}, error was {}\",\n-              str::from_utf8_slice(outp.output),\n-              str::from_utf8_slice(outp.error));\n+              str::from_utf8(outp.output),\n+              str::from_utf8(outp.error));\n     }\n     assert!(exec_file.exists() && is_executable(&exec_file));\n }\n@@ -2101,7 +2101,7 @@ fn test_rustpkg_test_creates_exec() {\n fn test_rustpkg_test_output() {\n     let workspace = create_local_package_with_test(&PkgId::new(\"foo\"));\n     let output = command_line_test([~\"test\", ~\"foo\"], workspace.path());\n-    let output_str = str::from_utf8_slice(output.output);\n+    let output_str = str::from_utf8(output.output);\n     // The first two assertions are separate because test output may\n     // contain color codes, which could appear between \"test f\" and \"ok\".\n     assert!(output_str.contains(\"test f\"));\n@@ -2132,7 +2132,7 @@ fn test_rustpkg_test_cfg() {\n               \"#[test] #[cfg(not(foobar))] fn f() { assert!('a' != 'a'); }\");\n     let output = command_line_test([~\"test\", ~\"--cfg\", ~\"foobar\", ~\"foo\"],\n                                    foo_workspace);\n-    let output_str = str::from_utf8_slice(output.output);\n+    let output_str = str::from_utf8(output.output);\n     assert!(output_str.contains(\"0 passed; 0 failed; 0 ignored; 0 measured\"));\n }\n \n@@ -2430,8 +2430,8 @@ fn correct_error_dependency() {\n         Fail(ProcessOutput{ error: error, output: output, .. }) => {\n             assert!(str::is_utf8(error));\n             assert!(str::is_utf8(output));\n-            let error_str = str::from_utf8_slice(error);\n-            let out_str   = str::from_utf8_slice(output);\n+            let error_str = str::from_utf8(error);\n+            let out_str   = str::from_utf8(output);\n             debug!(\"ss = {}\", error_str);\n             debug!(\"out_str = {}\", out_str);\n             if out_str.contains(\"Package badpkg depends on some_package_that_doesnt_exist\") &&"}, {"sha": "eced433868f22ae5281d2beb1bc474d23848d602", "filename": "src/librustpkg/version.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustpkg%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustpkg%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fversion.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -114,7 +114,7 @@ pub fn try_getting_local_version(local_path: &Path) -> Option<Version> {\n         }\n \n         let mut output = None;\n-        let output_text = str::from_utf8_slice(outp.output);\n+        let output_text = str::from_utf8(outp.output);\n         for l in output_text.lines() {\n             if !l.is_whitespace() {\n                 output = Some(l);\n@@ -145,8 +145,8 @@ pub fn try_getting_version(remote_path: &Path) -> Option<Version> {\n                                                 tmp_dir.as_str().unwrap().to_owned()]);\n         if outp.status.success() {\n             debug!(\"Cloned it... ( {}, {} )\",\n-                   str::from_utf8_slice(outp.output),\n-                   str::from_utf8_slice(outp.error));\n+                   str::from_utf8(outp.output),\n+                   str::from_utf8(outp.error));\n             let mut output = None;\n             let git_dir = tmp_dir.join(\".git\");\n             debug!(\"(getting version, now getting tags) executing \\\\{git --git-dir={} tag -l\\\\}\",\n@@ -155,7 +155,7 @@ pub fn try_getting_version(remote_path: &Path) -> Option<Version> {\n             let outp = run::process_output(\"git\",\n                                            [\"--git-dir=\" + git_dir.as_str().unwrap(),\n                                             ~\"tag\", ~\"-l\"]);\n-            let output_text = str::from_utf8_slice(outp.output);\n+            let output_text = str::from_utf8(outp.output);\n             debug!(\"Full output: ( {} ) [{:?}]\", output_text, outp.status);\n             for l in output_text.lines() {\n                 debug!(\"A line of output: {}\", l);"}, {"sha": "78454f3e0d0c5ed475f5ce676b7a11934cbb8804", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -487,7 +487,7 @@ mod test {\n \n             let nread = result.unwrap();\n             assert!(nread > 0);\n-            let read_str = str::from_utf8_slice(read_mem.slice_to(nread as uint));\n+            let read_str = str::from_utf8(read_mem.slice_to(nread as uint));\n             assert_eq!(read_str, \"hello\");\n         }\n         // unlink"}, {"sha": "0abd476d7b91fd283f2c9cbe33f35a596248c18e", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -81,7 +81,7 @@ pub fn sockaddr_to_socket_addr(addr: *sockaddr) -> SocketAddr {\n             };\n             port as u16\n         };\n-        let ip_str = str::from_utf8_slice(ip_name).trim_right_chars(&'\\x00');\n+        let ip_str = str::from_utf8(ip_name).trim_right_chars(&'\\x00');\n         let ip_addr = FromStr::from_str(ip_str).unwrap();\n \n         SocketAddr { ip: ip_addr, port: ip_port }"}, {"sha": "11845c766ed5c4b58872a5c758aaeb77aff9e83c", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -167,7 +167,7 @@ impl CString {\n         if self.buf.is_null() { return None; }\n         let buf = self.as_bytes();\n         let buf = buf.slice_to(buf.len()-1); // chop off the trailing NUL\n-        str::from_utf8_slice_opt(buf)\n+        str::from_utf8_opt(buf)\n     }\n \n     /// Return a CString iterator."}, {"sha": "463540b367752d8f26359a49574bdd23b1a59093", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -802,7 +802,7 @@ impl<'self> Formatter<'self> {\n \n     fn runplural(&mut self, value: uint, pieces: &[rt::Piece]) {\n         ::uint::to_str_bytes(value, 10, |buf| {\n-            let valuestr = str::from_utf8_slice(buf);\n+            let valuestr = str::from_utf8(buf);\n             for piece in pieces.iter() {\n                 self.run(piece, Some(valuestr));\n             }"}, {"sha": "4a31449e105b0691fd53f02ea552a42dfaf275f7", "filename": "src/libstd/io/flate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fio%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fio%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fflate.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -117,7 +117,7 @@ mod test {\n         let mut out_bytes = [0, .. 100];\n         let bytes_read = inflate_reader.read(out_bytes).unwrap();\n         assert_eq!(bytes_read, in_bytes.len());\n-        let out_msg = str::from_utf8_slice(out_bytes);\n+        let out_msg = str::from_utf8(out_bytes);\n         assert_eq!(in_msg, out_msg);\n     }\n }"}, {"sha": "f0b51a2c3e03fe57fc5d32beb7cdb76322342142", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -821,7 +821,7 @@ mod test {\n             }\n         }\n         unlink(filename);\n-        let read_str = str::from_utf8_slice(read_mem);\n+        let read_str = str::from_utf8(read_mem);\n         assert_eq!(read_str, message);\n     })\n \n@@ -845,7 +845,7 @@ mod test {\n             tell_pos_post_read = read_stream.tell();\n         }\n         unlink(filename);\n-        let read_str = str::from_utf8_slice(read_mem);\n+        let read_str = str::from_utf8(read_mem);\n         assert_eq!(read_str, message.slice(4, 8));\n         assert_eq!(tell_pos_pre_read, set_cursor);\n         assert_eq!(tell_pos_post_read, message.len() as u64);\n@@ -870,7 +870,7 @@ mod test {\n             read_stream.read(read_mem);\n         }\n         unlink(filename);\n-        let read_str = str::from_utf8_slice(read_mem);\n+        let read_str = str::from_utf8(read_mem);\n         assert!(read_str == final_msg.to_owned());\n     })\n \n@@ -892,15 +892,15 @@ mod test {\n \n             read_stream.seek(-4, SeekEnd);\n             read_stream.read(read_mem);\n-            assert_eq!(str::from_utf8_slice(read_mem), chunk_three);\n+            assert_eq!(str::from_utf8(read_mem), chunk_three);\n \n             read_stream.seek(-9, SeekCur);\n             read_stream.read(read_mem);\n-            assert_eq!(str::from_utf8_slice(read_mem), chunk_two);\n+            assert_eq!(str::from_utf8(read_mem), chunk_two);\n \n             read_stream.seek(0, SeekSet);\n             read_stream.read(read_mem);\n-            assert_eq!(str::from_utf8_slice(read_mem), chunk_one);\n+            assert_eq!(str::from_utf8(read_mem), chunk_one);\n         }\n         unlink(filename);\n     })\n@@ -974,7 +974,7 @@ mod test {\n             {\n                 let n = f.filestem_str();\n                 File::open(f).read(mem);\n-                let read_str = str::from_utf8_slice(mem);\n+                let read_str = str::from_utf8(mem);\n                 let expected = match n {\n                     None|Some(\"\") => fail!(\"really shouldn't happen..\"),\n                     Some(n) => prefix+n"}, {"sha": "208c64f5ef42f046e1cfe3d1314f4de623cae167", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -1049,7 +1049,7 @@ pub trait Buffer: Reader {\n             Some(n) if n == width => {}\n             Some(..) | None => return None // read error\n         }\n-        match str::from_utf8_slice_opt(buf.slice_to(width)) {\n+        match str::from_utf8_opt(buf.slice_to(width)) {\n             Some(s) => Some(s.char_at(0)),\n             None => None\n         }"}, {"sha": "79989b838f6026db482bfd4c8794b6f9326279a7", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -176,7 +176,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// If the path is not representable in utf-8, this returns None.\n     #[inline]\n     fn as_str<'a>(&'a self) -> Option<&'a str> {\n-        str::from_utf8_slice_opt(self.as_vec())\n+        str::from_utf8_opt(self.as_vec())\n     }\n \n     /// Returns the path as a byte vector\n@@ -207,7 +207,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `dirname` for details.\n     #[inline]\n     fn dirname_str<'a>(&'a self) -> Option<&'a str> {\n-        str::from_utf8_slice_opt(self.dirname())\n+        str::from_utf8_opt(self.dirname())\n     }\n     /// Returns the file component of `self`, as a byte vector.\n     /// If `self` represents the root of the file hierarchy, returns None.\n@@ -217,7 +217,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `filename` for details.\n     #[inline]\n     fn filename_str<'a>(&'a self) -> Option<&'a str> {\n-        self.filename().and_then(str::from_utf8_slice_opt)\n+        self.filename().and_then(str::from_utf8_opt)\n     }\n     /// Returns the stem of the filename of `self`, as a byte vector.\n     /// The stem is the portion of the filename just before the last '.'.\n@@ -239,7 +239,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `filestem` for details.\n     #[inline]\n     fn filestem_str<'a>(&'a self) -> Option<&'a str> {\n-        self.filestem().and_then(str::from_utf8_slice_opt)\n+        self.filestem().and_then(str::from_utf8_opt)\n     }\n     /// Returns the extension of the filename of `self`, as an optional byte vector.\n     /// The extension is the portion of the filename just after the last '.'.\n@@ -262,7 +262,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `extension` for details.\n     #[inline]\n     fn extension_str<'a>(&'a self) -> Option<&'a str> {\n-        self.extension().and_then(str::from_utf8_slice_opt)\n+        self.extension().and_then(str::from_utf8_opt)\n     }\n \n     /// Replaces the filename portion of the path with the given byte vector or string.\n@@ -493,12 +493,12 @@ pub trait BytesContainer {\n     /// Raises `str::null_byte` if not utf-8\n     #[inline]\n     fn container_as_str<'a>(&'a self) -> &'a str {\n-        str::from_utf8_slice(self.container_as_bytes())\n+        str::from_utf8(self.container_as_bytes())\n     }\n     /// Returns the receiver interpreted as a utf-8 string, if possible\n     #[inline]\n     fn container_as_str_opt<'a>(&'a self) -> Option<&'a str> {\n-        str::from_utf8_slice_opt(self.container_as_bytes())\n+        str::from_utf8_opt(self.container_as_bytes())\n     }\n     /// Returns whether .container_as_str() is guaranteed to not fail\n     // FIXME (#8888): Remove unused arg once ::<for T> works"}, {"sha": "ddf2cce21b0e653fd6c67fbeeec03d0f2c7b535f", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -396,13 +396,13 @@ impl Path {\n     /// Returns an iterator that yields each component of the path as Option<&str>.\n     /// See components() for details.\n     pub fn str_components<'a>(&'a self) -> StrComponentIter<'a> {\n-        self.components().map(str::from_utf8_slice_opt)\n+        self.components().map(str::from_utf8_opt)\n     }\n \n     /// Returns an iterator that yields each component of the path in reverse as Option<&str>.\n     /// See components() for details.\n     pub fn rev_str_components<'a>(&'a self) -> RevStrComponentIter<'a> {\n-        self.rev_components().map(str::from_utf8_slice_opt)\n+        self.rev_components().map(str::from_utf8_opt)\n     }\n }\n \n@@ -684,7 +684,7 @@ mod tests {\n             (s: $path:expr, $op:ident, $exp:expr, opt) => (\n                 {\n                     let path = Path::init($path);\n-                    let left = path.$op().map(|x| str::from_utf8_slice(x));\n+                    let left = path.$op().map(|x| str::from_utf8(x));\n                     assert_eq!(left, $exp);\n                 }\n             );"}, {"sha": "c1898a9b920a46f3de7842510a0a9278a9fc1e47", "filename": "src/libstd/str.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -159,16 +159,16 @@ pub fn from_utf8_owned_opt(vv: ~[u8]) -> Option<~str> {\n /// # Failure\n ///\n /// Fails if invalid UTF-8\n-pub fn from_utf8_slice<'a>(v: &'a [u8]) -> &'a str {\n-    from_utf8_slice_opt(v).expect(\"from_utf8_slice: not utf-8\")\n+pub fn from_utf8<'a>(v: &'a [u8]) -> &'a str {\n+    from_utf8_opt(v).expect(\"from_utf8: not utf-8\")\n }\n \n /// Converts a vector to a string slice without performing any allocations.\n ///\n /// Returns None if the slice is not utf-8.\n-pub fn from_utf8_slice_opt<'a>(v: &'a [u8]) -> Option<&'a str> {\n+pub fn from_utf8_opt<'a>(v: &'a [u8]) -> Option<&'a str> {\n     if is_utf8(v) {\n-        Some(unsafe { raw::from_utf8_slice(v) })\n+        Some(unsafe { raw::from_utf8(v) })\n     } else { None }\n }\n \n@@ -1029,7 +1029,7 @@ pub mod raw {\n \n     /// Converts a slice of bytes to a string slice without checking\n     /// that the string contains valid UTF-8.\n-    pub unsafe fn from_utf8_slice<'a>(v: &'a [u8]) -> &'a str {\n+    pub unsafe fn from_utf8<'a>(v: &'a [u8]) -> &'a str {\n         cast::transmute(v)\n     }\n \n@@ -3153,7 +3153,7 @@ mod tests {\n         let s1: ~str = ~\"All mimsy were the borogoves\";\n \n         let v: ~[u8] = s1.as_bytes().to_owned();\n-        let s2: ~str = from_utf8_slice(v).to_owned();\n+        let s2: ~str = from_utf8(v).to_owned();\n         let mut i: uint = 0u;\n         let n1: uint = s1.len();\n         let n2: uint = v.len();\n@@ -3676,31 +3676,31 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_str_from_utf8_slice() {\n+    fn test_str_from_utf8() {\n         let xs = bytes!(\"hello\");\n-        assert_eq!(from_utf8_slice(xs), \"hello\");\n+        assert_eq!(from_utf8(xs), \"hello\");\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        assert_eq!(from_utf8_slice(xs), \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        assert_eq!(from_utf8(xs), \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n     }\n \n     #[test]\n     #[should_fail]\n-    fn test_str_from_utf8_slice_invalid() {\n+    fn test_str_from_utf8_invalid() {\n         let xs = bytes!(\"hello\", 0xff);\n-        let _ = from_utf8_slice(xs);\n+        let _ = from_utf8(xs);\n     }\n \n     #[test]\n-    fn test_str_from_utf8_slice_opt() {\n+    fn test_str_from_utf8_opt() {\n         let xs = bytes!(\"hello\");\n-        assert_eq!(from_utf8_slice_opt(xs), Some(\"hello\"));\n+        assert_eq!(from_utf8_opt(xs), Some(\"hello\"));\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        assert_eq!(from_utf8_slice_opt(xs), Some(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n+        assert_eq!(from_utf8_opt(xs), Some(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n \n         let xs = bytes!(\"hello\", 0xff);\n-        assert_eq!(from_utf8_slice_opt(xs), None);\n+        assert_eq!(from_utf8_opt(xs), None);\n     }\n \n     #[test]"}, {"sha": "b0efa3bb33f942ff5294fb6e100fb3f628f0b940", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -17,13 +17,13 @@ static C: *u8 = B as *u8;\n pub fn main() {\n     unsafe {\n         let foo = &A as *u8;\n-        assert_eq!(str::raw::from_utf8_slice(A), \"hi\");\n+        assert_eq!(str::raw::from_utf8(A), \"hi\");\n         assert_eq!(str::raw::from_buf_len(foo, A.len()), ~\"hi\");\n         assert_eq!(str::raw::from_buf_len(C, B.len()), ~\"hi\");\n         assert!(*C == A[0]);\n         assert!(*(&B[0] as *u8) == A[0]);\n \n-        let bar = str::raw::from_utf8_slice(A).to_c_str();\n+        let bar = str::raw::from_utf8(A).to_c_str();\n         assert_eq!(bar.with_ref(|buf| str::raw::from_c_str(buf)), ~\"hi\");\n     }\n }"}, {"sha": "6463a1d5321716350c6f739599d7108e3850bee8", "filename": "src/test/run-pass/rtio-processes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0426edc0a83699de79ceffcbe603812b9b53374/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frtio-processes.rs?ref=b0426edc0a83699de79ceffcbe603812b9b53374", "patch": "@@ -108,7 +108,7 @@ fn read_all(input: &mut Reader) -> ~str {\n     loop {\n         match input.read(buf) {\n             None => { break }\n-            Some(n) => { ret.push_str(str::from_utf8_slice(buf.slice_to(n))); }\n+            Some(n) => { ret.push_str(str::from_utf8(buf.slice_to(n))); }\n         }\n     }\n     return ret;"}]}