{"sha": "6c0a591deef190ab9bf12836467079367a366c35", "node_id": "C_kwDOAAsO6NoAKDZjMGE1OTFkZWVmMTkwYWI5YmYxMjgzNjQ2NzA3OTM2N2EzNjZjMzU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-20T03:49:07Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-28T21:42:52Z"}, "message": "Fix trait object reborrow suggestion", "tree": {"sha": "aec1d5352d45ac7e65ccdfbbb654f0adc3d2aef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aec1d5352d45ac7e65ccdfbbb654f0adc3d2aef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c0a591deef190ab9bf12836467079367a366c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0a591deef190ab9bf12836467079367a366c35", "html_url": "https://github.com/rust-lang/rust/commit/6c0a591deef190ab9bf12836467079367a366c35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c0a591deef190ab9bf12836467079367a366c35/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "830880640304ba8699c5f9a0c4665c38a3271963", "url": "https://api.github.com/repos/rust-lang/rust/commits/830880640304ba8699c5f9a0c4665c38a3271963", "html_url": "https://github.com/rust-lang/rust/commit/830880640304ba8699c5f9a0c4665c38a3271963"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "7f913faf86058674556590620db0e944721d7798", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a591deef190ab9bf12836467079367a366c35/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a591deef190ab9bf12836467079367a366c35/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=6c0a591deef190ab9bf12836467079367a366c35", "patch": "@@ -253,7 +253,7 @@ pub enum ObligationCauseCode<'tcx> {\n     ObjectTypeBound(Ty<'tcx>, ty::Region<'tcx>),\n \n     /// Obligation incurred due to an object cast.\n-    ObjectCastObligation(/* Object type */ Ty<'tcx>),\n+    ObjectCastObligation(/* Concrete type */ Ty<'tcx>, /* Object type */ Ty<'tcx>),\n \n     /// Obligation incurred due to a coercion.\n     Coercion {"}, {"sha": "debb9e8295122ad06bc8d0c929f8b9429d824b12", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a591deef190ab9bf12836467079367a366c35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a591deef190ab9bf12836467079367a366c35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6c0a591deef190ab9bf12836467079367a366c35", "patch": "@@ -484,10 +484,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             err.span_label(span, explanation);\n                         }\n \n-                        if let ObligationCauseCode::ObjectCastObligation(obj_ty) = obligation.cause.code().peel_derives() &&\n-                           let Some(self_ty) = trait_predicate.self_ty().no_bound_vars() &&\n+                        if let ObligationCauseCode::ObjectCastObligation(concrete_ty, obj_ty) = obligation.cause.code().peel_derives() &&\n                            Some(trait_ref.def_id()) == self.tcx.lang_items().sized_trait() {\n-                            self.suggest_borrowing_for_object_cast(&mut err, &obligation, self_ty, *obj_ty);\n+                            self.suggest_borrowing_for_object_cast(&mut err, &root_obligation, *concrete_ty, *obj_ty);\n                         }\n \n                         if trait_predicate.is_const_if_const() && obligation.param_env.is_const() {\n@@ -1560,7 +1559,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     obligation.cause.code().peel_derives(),\n                     ObligationCauseCode::ItemObligation(_)\n                         | ObligationCauseCode::BindingObligation(_, _)\n-                        | ObligationCauseCode::ObjectCastObligation(_)\n+                        | ObligationCauseCode::ObjectCastObligation(..)\n                         | ObligationCauseCode::OpaqueType\n                 );\n                 if let Err(error) = self.at(&obligation.cause, obligation.param_env).eq_exp("}, {"sha": "166c7a4110b6cc109b3346bef23cb4e2adbf63d1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a591deef190ab9bf12836467079367a366c35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a591deef190ab9bf12836467079367a366c35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6c0a591deef190ab9bf12836467079367a366c35", "patch": "@@ -2217,7 +2217,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     err.span_note(tcx.def_span(item_def_id), &descr);\n                 }\n             }\n-            ObligationCauseCode::ObjectCastObligation(object_ty) => {\n+            ObligationCauseCode::ObjectCastObligation(_, object_ty) => {\n                 err.note(&format!(\n                     \"required for the cast to the object type `{}`\",\n                     self.ty_to_string(object_ty)"}, {"sha": "e1131140c39e881618139d2b1ecf491669ef19f5", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a591deef190ab9bf12836467079367a366c35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a591deef190ab9bf12836467079367a366c35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6c0a591deef190ab9bf12836467079367a366c35", "patch": "@@ -813,7 +813,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let cause = ObligationCause::new(\n                     obligation.cause.span,\n                     obligation.cause.body_id,\n-                    ObjectCastObligation(target),\n+                    ObjectCastObligation(source, target),\n                 );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n@@ -910,7 +910,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let cause = ObligationCause::new(\n                     obligation.cause.span,\n                     obligation.cause.body_id,\n-                    ObjectCastObligation(target),\n+                    ObjectCastObligation(source, target),\n                 );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n@@ -931,7 +931,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let cause = ObligationCause::new(\n                     obligation.cause.span,\n                     obligation.cause.body_id,\n-                    ObjectCastObligation(target),\n+                    ObjectCastObligation(source, target),\n                 );\n \n                 let predicate_to_obligation = |predicate| {"}, {"sha": "120fc538307a7ac85b7b0a27e5a03766db900610", "filename": "src/test/ui/suggestions/suggest-borrow-to-dyn-object.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a591deef190ab9bf12836467079367a366c35/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a591deef190ab9bf12836467079367a366c35/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs?ref=6c0a591deef190ab9bf12836467079367a366c35", "patch": "@@ -0,0 +1,16 @@\n+use std::ffi::{OsStr, OsString};\n+use std::path::Path;\n+\n+fn check(p: &dyn AsRef<Path>) {\n+    let m = std::fs::metadata(&p);\n+    println!(\"{:?}\", &m);\n+}\n+\n+fn main() {\n+    let s: OsString = \".\".into();\n+    let s: &OsStr = &s;\n+    check(s);\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+    //~| HELP within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n+    //~| HELP consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n+}"}, {"sha": "8961f4275a283b110e73344a8f9bc5f731b83072", "filename": "src/test/ui/suggestions/suggest-borrow-to-dyn-object.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a591deef190ab9bf12836467079367a366c35/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a591deef190ab9bf12836467079367a366c35/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr?ref=6c0a591deef190ab9bf12836467079367a366c35", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/suggest-borrow-to-dyn-object.rs:12:11\n+   |\n+LL |     check(s);\n+   |     ----- ^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n+   = note: required because it appears within the type `OsStr`\n+   = note: required for the cast to the object type `dyn AsRef<Path>`\n+help: consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n+   |\n+LL |     check(&s);\n+   |           +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}