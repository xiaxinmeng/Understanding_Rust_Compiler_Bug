{"sha": "b2bf37aec075099a8b58c1a52ebca944f318d530", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYmYzN2FlYzA3NTA5OWE4YjU4YzFhNTJlYmNhOTQ0ZjMxOGQ1MzA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-16T12:27:54Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-16T12:27:54Z"}, "message": "Burn some invariants we keep up into code", "tree": {"sha": "524853b509da3026de983cdb45178e32c0a28ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/524853b509da3026de983cdb45178e32c0a28ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2bf37aec075099a8b58c1a52ebca944f318d530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2bf37aec075099a8b58c1a52ebca944f318d530", "html_url": "https://github.com/rust-lang/rust/commit/b2bf37aec075099a8b58c1a52ebca944f318d530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2bf37aec075099a8b58c1a52ebca944f318d530/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd18cc5708328600a94a02444caf27a5fb6ca20c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd18cc5708328600a94a02444caf27a5fb6ca20c", "html_url": "https://github.com/rust-lang/rust/commit/bd18cc5708328600a94a02444caf27a5fb6ca20c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "9eac125d7a4346cace7c830eab796ee86e3e1932", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2bf37aec075099a8b58c1a52ebca944f318d530/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bf37aec075099a8b58c1a52ebca944f318d530/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=b2bf37aec075099a8b58c1a52ebca944f318d530", "patch": "@@ -76,7 +76,7 @@ pub fn op_to_const<'tcx>(\n             _ => false,\n         };\n     let normalized_op = if normalize {\n-        ecx.try_read_immediate(op)?\n+        Ok(*ecx.read_immediate(op).expect(\"normalization works on validated constants\"))\n     } else {\n         match *op {\n             Operand::Indirect(mplace) => Err(mplace),"}, {"sha": "0394ad2b0a65f6d5f1aaf3f6b16e0a87bd005604", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2bf37aec075099a8b58c1a52ebca944f318d530/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bf37aec075099a8b58c1a52ebca944f318d530/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=b2bf37aec075099a8b58c1a52ebca944f318d530", "patch": "@@ -269,7 +269,7 @@ pub(super) fn from_known_layout<'tcx>(\n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     /// Try reading an immediate in memory; this is interesting particularly for ScalarPair.\n     /// Returns `None` if the layout does not permit loading this as a value.\n-    pub(super) fn try_read_immediate_from_mplace(\n+    fn try_read_immediate_from_mplace(\n         &self,\n         mplace: MPlaceTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx, Option<Immediate<M::PointerTag>>> {\n@@ -323,7 +323,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     /// Note that for a given layout, this operation will either always fail or always\n     /// succeed!  Whether it succeeds depends on whether the layout can be represented\n     /// in a `Immediate`, not on which data is stored there currently.\n-    pub(crate) fn try_read_immediate(\n+    pub(super) fn try_read_immediate(\n         &self,\n         src: OpTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx, Result<Immediate<M::PointerTag>, MemPlace<M::PointerTag>>> {"}]}