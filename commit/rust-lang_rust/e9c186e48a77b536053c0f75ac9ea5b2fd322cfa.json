{"sha": "e9c186e48a77b536053c0f75ac9ea5b2fd322cfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YzE4NmU0OGE3N2I1MzYwNTNjMGY3NWFjOWVhNWIyZmQzMjJjZmE=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-25T19:49:18Z"}, "committer": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-25T19:49:18Z"}, "message": "change to `TextEdit` to avoid allocation and sort\nrename newline to step where applicable", "tree": {"sha": "250b7f1c4b29e1ca009f6ff913733401caefdb2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/250b7f1c4b29e1ca009f6ff913733401caefdb2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9c186e48a77b536053c0f75ac9ea5b2fd322cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c186e48a77b536053c0f75ac9ea5b2fd322cfa", "html_url": "https://github.com/rust-lang/rust/commit/e9c186e48a77b536053c0f75ac9ea5b2fd322cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9c186e48a77b536053c0f75ac9ea5b2fd322cfa/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "863ed19946d6f707ce09dd77bf26b26be73e097c", "url": "https://api.github.com/repos/rust-lang/rust/commits/863ed19946d6f707ce09dd77bf26b26be73e097c", "html_url": "https://github.com/rust-lang/rust/commit/863ed19946d6f707ce09dd77bf26b26be73e097c"}], "stats": {"total": 108, "additions": 51, "deletions": 57}, "files": [{"sha": "ec3269bbbab83dae7e3c2acbc8f30303c5d87a4b", "filename": "crates/ra_editor/src/line_index_utils.rs", "status": "modified", "additions": 39, "deletions": 47, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e9c186e48a77b536053c0f75ac9ea5b2fd322cfa/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c186e48a77b536053c0f75ac9ea5b2fd322cfa/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs?ref=e9c186e48a77b536053c0f75ac9ea5b2fd322cfa", "patch": "@@ -1,7 +1,6 @@\n-use ra_text_edit::AtomTextEdit;\n+use ra_text_edit::{AtomTextEdit, TextEdit};\n use ra_syntax::{TextUnit, TextRange};\n use crate::{LineIndex, LineCol, line_index::Utf16Char};\n-use superslice::Ext;\n \n #[derive(Debug, Clone)]\n enum Step {\n@@ -55,12 +54,12 @@ impl<'a> Iterator for LineIndexStepIter<'a> {\n }\n \n #[derive(Debug)]\n-struct OffsetNewlineIter<'a> {\n+struct OffsetStepIter<'a> {\n     text: &'a str,\n     offset: TextUnit,\n }\n \n-impl<'a> Iterator for OffsetNewlineIter<'a> {\n+impl<'a> Iterator for OffsetStepIter<'a> {\n     type Item = Step;\n     fn next(&mut self) -> Option<Step> {\n         let (next, next_offset) = self\n@@ -93,10 +92,10 @@ impl<'a> Iterator for OffsetNewlineIter<'a> {\n }\n \n #[derive(Debug)]\n-enum NextNewlines<'a> {\n+enum NextSteps<'a> {\n     Use,\n-    ReplaceMany(OffsetNewlineIter<'a>),\n-    AddMany(OffsetNewlineIter<'a>),\n+    ReplaceMany(OffsetStepIter<'a>),\n+    AddMany(OffsetStepIter<'a>),\n }\n \n #[derive(Debug)]\n@@ -106,16 +105,16 @@ struct TranslatedEdit<'a> {\n     diff: i64,\n }\n \n-struct Edits<'a, 'b> {\n-    edits: &'b [&'a AtomTextEdit],\n+struct Edits<'a> {\n+    edits: &'a [AtomTextEdit],\n     current: Option<TranslatedEdit<'a>>,\n     acc_diff: i64,\n }\n \n-impl<'a, 'b> Edits<'a, 'b> {\n-    fn new(sorted_edits: &'b [&'a AtomTextEdit]) -> Edits<'a, 'b> {\n+impl<'a> Edits<'a> {\n+    fn from_text_edit(text_edit: &'a TextEdit) -> Edits<'a> {\n         let mut x = Edits {\n-            edits: sorted_edits,\n+            edits: text_edit.as_atoms(),\n             current: None,\n             acc_diff: 0,\n         };\n@@ -141,45 +140,45 @@ impl<'a, 'b> Edits<'a, 'b> {\n         }\n     }\n \n-    fn next_inserted_newlines(&mut self) -> Option<OffsetNewlineIter<'a>> {\n+    fn next_inserted_steps(&mut self) -> Option<OffsetStepIter<'a>> {\n         let cur = self.current.as_ref()?;\n-        let res = Some(OffsetNewlineIter {\n+        let res = Some(OffsetStepIter {\n             offset: cur.delete.start(),\n             text: &cur.insert,\n         });\n         self.advance_edit();\n         res\n     }\n \n-    fn next_step(&mut self, step: &Step) -> NextNewlines {\n+    fn next_steps(&mut self, step: &Step) -> NextSteps {\n         let step_pos = match step {\n             &Step::Newline(n) => n,\n             &Step::Utf16Char(r) => r.end(),\n         };\n         let res = match &mut self.current {\n             Some(edit) => {\n                 if step_pos <= edit.delete.start() {\n-                    NextNewlines::Use\n+                    NextSteps::Use\n                 } else if step_pos <= edit.delete.end() {\n-                    let iter = OffsetNewlineIter {\n+                    let iter = OffsetStepIter {\n                         offset: edit.delete.start(),\n                         text: &edit.insert,\n                     };\n-                    // empty slice\n+                    // empty slice to avoid returning steps again\n                     edit.insert = &edit.insert[edit.insert.len()..];\n-                    NextNewlines::ReplaceMany(iter)\n+                    NextSteps::ReplaceMany(iter)\n                 } else {\n-                    let iter = OffsetNewlineIter {\n+                    let iter = OffsetStepIter {\n                         offset: edit.delete.start(),\n                         text: &edit.insert,\n                     };\n-                    // empty slice\n+                    // empty slice to avoid returning steps again\n                     edit.insert = &edit.insert[edit.insert.len()..];\n                     self.advance_edit();\n-                    NextNewlines::AddMany(iter)\n+                    NextSteps::AddMany(iter)\n                 }\n             }\n-            None => NextNewlines::Use,\n+            None => NextSteps::Use,\n         };\n         res\n     }\n@@ -251,16 +250,9 @@ impl RunningLineCol {\n pub fn translate_offset_with_edit(\n     line_index: &LineIndex,\n     offset: TextUnit,\n-    edits: &[AtomTextEdit],\n+    text_edit: &TextEdit,\n ) -> LineCol {\n-    let mut sorted_edits: Vec<&AtomTextEdit> = Vec::with_capacity(edits.len());\n-    for edit in edits {\n-        let insert_index =\n-            sorted_edits.upper_bound_by_key(&edit.delete.start(), |x| x.delete.start());\n-        sorted_edits.insert(insert_index, &edit);\n-    }\n-\n-    let mut state = Edits::new(&sorted_edits);\n+    let mut state = Edits::from_text_edit(&text_edit);\n \n     let mut res = RunningLineCol::new();\n \n@@ -291,18 +283,18 @@ pub fn translate_offset_with_edit(\n     for orig_step in LineIndexStepIter::from(line_index) {\n         loop {\n             let translated_step = state.translate_step(&orig_step);\n-            match state.next_step(&translated_step) {\n-                NextNewlines::Use => {\n+            match state.next_steps(&translated_step) {\n+                NextSteps::Use => {\n                     test_step!(translated_step);\n                     break;\n                 }\n-                NextNewlines::ReplaceMany(ns) => {\n+                NextSteps::ReplaceMany(ns) => {\n                     for n in ns {\n                         test_step!(n);\n                     }\n                     break;\n                 }\n-                NextNewlines::AddMany(ns) => {\n+                NextSteps::AddMany(ns) => {\n                     for n in ns {\n                         test_step!(n);\n                     }\n@@ -312,7 +304,7 @@ pub fn translate_offset_with_edit(\n     }\n \n     loop {\n-        match state.next_inserted_newlines() {\n+        match state.next_inserted_steps() {\n             None => break,\n             Some(ns) => {\n                 for n in ns {\n@@ -330,26 +322,26 @@ mod test {\n     use super::*;\n     use proptest::{prelude::*, proptest, proptest_helper};\n     use crate::line_index;\n-    use ra_text_edit::test_utils::{arb_offset, arb_text_with_edits};\n+    use ra_text_edit::test_utils::{arb_offset, arb_text_with_edit};\n     use ra_text_edit::TextEdit;\n \n     #[derive(Debug)]\n-    struct ArbTextWithOffsetAndEdits {\n+    struct ArbTextWithEditAndOffset {\n         text: String,\n-        edits: TextEdit,\n+        edit: TextEdit,\n         edited_text: String,\n         offset: TextUnit,\n     }\n \n-    fn arb_text_with_edits_and_offset() -> BoxedStrategy<ArbTextWithOffsetAndEdits> {\n-        arb_text_with_edits()\n+    fn arb_text_with_edit_and_offset() -> BoxedStrategy<ArbTextWithEditAndOffset> {\n+        arb_text_with_edit()\n             .prop_flat_map(|x| {\n-                let edited_text = x.edits.apply(&x.text);\n+                let edited_text = x.edit.apply(&x.text);\n                 let arb_offset = arb_offset(&edited_text);\n                 (Just(x), Just(edited_text), arb_offset).prop_map(|(x, edited_text, offset)| {\n-                    ArbTextWithOffsetAndEdits {\n+                    ArbTextWithEditAndOffset {\n                         text: x.text,\n-                        edits: x.edits,\n+                        edit: x.edit,\n                         edited_text,\n                         offset,\n                     }\n@@ -360,10 +352,10 @@ mod test {\n \n     proptest! {\n         #[test]\n-        fn test_translate_offset_with_edit(x in arb_text_with_edits_and_offset()) {\n+        fn test_translate_offset_with_edit(x in arb_text_with_edit_and_offset()) {\n             let expected = line_index::to_line_col(&x.edited_text, x.offset);\n             let line_index = LineIndex::new(&x.text);\n-            let actual = translate_offset_with_edit(&line_index, x.offset, x.edits.as_atoms());\n+            let actual = translate_offset_with_edit(&line_index, x.offset, &x.edit);\n \n             assert_eq!(actual, expected);\n         }"}, {"sha": "5a911d9d26685c9c477c1b4fb780c9299d0c4584", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9c186e48a77b536053c0f75ac9ea5b2fd322cfa/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c186e48a77b536053c0f75ac9ea5b2fd322cfa/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=e9c186e48a77b536053c0f75ac9ea5b2fd322cfa", "patch": "@@ -235,13 +235,15 @@ impl TryConvWith for SourceChange {\n             None => None,\n             Some(pos) => {\n                 let line_index = world.analysis().file_line_index(pos.file_id);\n-                let edits = self\n+                let edit = self\n                     .source_file_edits\n                     .iter()\n                     .find(|it| it.file_id == pos.file_id)\n-                    .map(|it| it.edit.as_atoms())\n-                    .unwrap_or(&[]);\n-                let line_col = translate_offset_with_edit(&*line_index, pos.offset, edits);\n+                    .map(|it| &it.edit);\n+                let line_col = match edit {\n+                    Some(edit) => translate_offset_with_edit(&*line_index, pos.offset, edit),\n+                    None => line_index.line_col(pos.offset),\n+                };\n                 let position =\n                     Position::new(u64::from(line_col.line), u64::from(line_col.col_utf16));\n                 Some(TextDocumentPositionParams {"}, {"sha": "745f21c931802eb1e87186b7fcfd5b30b3dc9e1a", "filename": "crates/ra_text_edit/src/test_utils.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9c186e48a77b536053c0f75ac9ea5b2fd322cfa/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c186e48a77b536053c0f75ac9ea5b2fd322cfa/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs?ref=e9c186e48a77b536053c0f75ac9ea5b2fd322cfa", "patch": "@@ -69,17 +69,17 @@ pub fn arb_text_edit(text: &str) -> BoxedStrategy<TextEdit> {\n }\n \n #[derive(Debug, Clone)]\n-pub struct ArbTextWithEdits {\n+pub struct ArbTextWithEdit {\n     pub text: String,\n-    pub edits: TextEdit,\n+    pub edit: TextEdit,\n }\n \n-pub fn arb_text_with_edits() -> BoxedStrategy<ArbTextWithEdits> {\n+pub fn arb_text_with_edit() -> BoxedStrategy<ArbTextWithEdit> {\n     let text = arb_text();\n     text.prop_flat_map(|s| {\n-        let edits = arb_text_edit(&s);\n-        (Just(s), edits)\n+        let edit = arb_text_edit(&s);\n+        (Just(s), edit)\n     })\n-    .prop_map(|(text, edits)| ArbTextWithEdits { text, edits })\n+    .prop_map(|(text, edit)| ArbTextWithEdit { text, edit })\n     .boxed()\n }"}]}