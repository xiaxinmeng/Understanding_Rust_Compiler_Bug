{"sha": "4d0a1e418c8ba90adc9703b1adf735d6d134c2b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMGExZTQxOGM4YmE5MGFkYzk3MDNiMWFkZjczNWQ2ZDEzNGMyYjQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-20T16:22:16Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-20T16:22:16Z"}, "message": "Add eval_always to query macro and move a query over", "tree": {"sha": "36c823bdfbb20758cadba8bca918de9cb5c666a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c823bdfbb20758cadba8bca918de9cb5c666a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4", "html_url": "https://github.com/rust-lang/rust/commit/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52374a6462e225cdc4a0487b6c843ce72ab8551f", "url": "https://api.github.com/repos/rust-lang/rust/commits/52374a6462e225cdc4a0487b6c843ce72ab8551f", "html_url": "https://github.com/rust-lang/rust/commit/52374a6462e225cdc4a0487b6c843ce72ab8551f"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "4babadb67bce6e428131310885be27f5e86f0e0a", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=4d0a1e418c8ba90adc9703b1adf735d6d134c2b4", "patch": "@@ -564,7 +564,6 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] HasGlobalAllocator(CrateNum),\n     [] HasPanicHandler(CrateNum),\n     [input] ExternCrate(DefId),\n-    [eval_always] LintLevels,\n     [] Specializes { impl1: DefId, impl2: DefId },\n     [input] InScopeTraits(DefIndex),\n     [input] ModuleExports(DefId),"}, {"sha": "8d64818f49b18a752086794ad1448a0f107d5f88", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=4d0a1e418c8ba90adc9703b1adf735d6d134c2b4", "patch": "@@ -55,6 +55,11 @@ rustc_queries! {\n         query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLibrary>> {\n             desc { \"looking up the native libraries of a linked crate\" }\n         }\n+\n+        query lint_levels(_: CrateNum) -> Lrc<lint::LintLevelMap> {\n+            eval_always\n+            desc { \"computing the lint levels for items in this crate\" }\n+        }\n     }\n \n     Codegen {"}, {"sha": "5cb5a0030f4eb916f63d3c3a10e73036540e41e6", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=4d0a1e418c8ba90adc9703b1adf735d6d134c2b4", "patch": "@@ -605,12 +605,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::analysis<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::lint_levels<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n-        \"computing the lint levels for items in this crate\".into()\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::specializes<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, _: (DefId, DefId)) -> Cow<'static, str> {\n         \"computing whether impls specialize one another\".into()"}, {"sha": "dbc81a4235d7131ebde629b4f4fc825d146b91dd", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=4d0a1e418c8ba90adc9703b1adf735d6d134c2b4", "patch": "@@ -415,7 +415,6 @@ rustc_query_append! { [define_queries!][ <'tcx>\n \n     Other {\n         [] fn module_exports: ModuleExports(DefId) -> Option<Lrc<Vec<Export>>>,\n-        [] fn lint_levels: lint_levels_node(CrateNum) -> Lrc<lint::LintLevelMap>,\n     },\n \n     TypeChecking {\n@@ -767,10 +766,6 @@ fn layout_dep_node<'tcx>(param_env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConst\n     DepConstructor::Layout { param_env }\n }\n \n-fn lint_levels_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n-    DepConstructor::LintLevels\n-}\n-\n fn specializes_node<'tcx>((a, b): (DefId, DefId)) -> DepConstructor<'tcx> {\n     DepConstructor::Specializes { impl1: a, impl2: b }\n }"}, {"sha": "adac19d3410b22e71e925d29aeadeb3df48269ad", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=4d0a1e418c8ba90adc9703b1adf735d6d134c2b4", "patch": "@@ -1332,7 +1332,6 @@ pub fn force_from_dep_node<'tcx>(\n         DepKind::HasGlobalAllocator => { force!(has_global_allocator, krate!()); }\n         DepKind::HasPanicHandler => { force!(has_panic_handler, krate!()); }\n         DepKind::ExternCrate => { force!(extern_crate, def_id!()); }\n-        DepKind::LintLevels => { force!(lint_levels, LOCAL_CRATE); }\n         DepKind::InScopeTraits => { force!(in_scope_traits_map, def_id!().index); }\n         DepKind::ModuleExports => { force!(module_exports, def_id!()); }\n         DepKind::IsSanitizerRuntime => { force!(is_sanitizer_runtime, krate!()); }"}, {"sha": "0800579231fdea05ffa59f010dbde9a1c60e2cf1", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0a1e418c8ba90adc9703b1adf735d6d134c2b4/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=4d0a1e418c8ba90adc9703b1adf735d6d134c2b4", "patch": "@@ -51,6 +51,9 @@ enum QueryModifier {\n \n     /// Generate a dep node based on the dependencies of the query\n     Anon,\n+\n+    // Always evaluate the query, ignoring its depdendencies\n+    EvalAlways,\n }\n \n impl Parse for QueryModifier {\n@@ -104,6 +107,8 @@ impl Parse for QueryModifier {\n             Ok(QueryModifier::NoForce)\n         } else if modifier == \"anon\" {\n             Ok(QueryModifier::Anon)\n+        } else if modifier == \"eval_always\" {\n+            Ok(QueryModifier::EvalAlways)\n         } else {\n             Err(Error::new(modifier.span(), \"unknown query modifier\"))\n         }\n@@ -210,6 +215,9 @@ struct QueryModifiers {\n \n     /// Generate a dep node based on the dependencies of the query\n     anon: bool,\n+    \n+    // Always evaluate the query, ignoring its depdendencies\n+    eval_always: bool,\n }\n \n /// Process query modifiers into a struct, erroring on duplicates\n@@ -221,6 +229,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n     let mut no_hash = false;\n     let mut no_force = false;\n     let mut anon = false;\n+    let mut eval_always = false;\n     for modifier in query.modifiers.0.drain(..) {\n         match modifier {\n             QueryModifier::LoadCached(tcx, id, block) => {\n@@ -265,6 +274,12 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n                 }\n                 anon = true;\n             }\n+            QueryModifier::EvalAlways => {\n+                if eval_always {\n+                    panic!(\"duplicate modifier `eval_always` for query `{}`\", query.name);\n+                }\n+                eval_always = true;\n+            }\n         }\n     }\n     QueryModifiers {\n@@ -275,6 +290,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n         no_hash,\n         no_force,\n         anon,\n+        eval_always,\n     }\n }\n \n@@ -403,6 +419,10 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             if modifiers.anon {\n                 attributes.push(quote! { anon });\n             };\n+            // Pass on the eval_always modifier\n+            if modifiers.eval_always {\n+                attributes.push(quote! { eval_always });\n+            };\n \n             let mut attribute_stream = quote! {};\n             for e in attributes.into_iter().intersperse(quote! {,}) {"}]}