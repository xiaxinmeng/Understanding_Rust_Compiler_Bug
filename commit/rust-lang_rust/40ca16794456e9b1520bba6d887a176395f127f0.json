{"sha": "40ca16794456e9b1520bba6d887a176395f127f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwY2ExNjc5NDQ1NmU5YjE1MjBiYmE2ZDg4N2ExNzYzOTVmMTI3ZjA=", "commit": {"author": {"name": "Amos Onn", "email": "amosonn@gmail.com", "date": "2020-01-31T14:22:51Z"}, "committer": {"name": "Amos Onn", "email": "amosonn@gmail.com", "date": "2020-02-15T13:00:21Z"}, "message": "Improve #Safety in various methods in core::ptr\n\nFor all methods which read a value of type T, `read`, `read_unaligned`,\n`read_volatile` and `replace`, added missing\nconstraint:\nThe value they point to must be properly initialized", "tree": {"sha": "a7e84d11720ce34199c21a92fea85be5d8d45119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7e84d11720ce34199c21a92fea85be5d8d45119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ca16794456e9b1520bba6d887a176395f127f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ca16794456e9b1520bba6d887a176395f127f0", "html_url": "https://github.com/rust-lang/rust/commit/40ca16794456e9b1520bba6d887a176395f127f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ca16794456e9b1520bba6d887a176395f127f0/comments", "author": {"login": "amosonn", "id": 3142573, "node_id": "MDQ6VXNlcjMxNDI1NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3142573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amosonn", "html_url": "https://github.com/amosonn", "followers_url": "https://api.github.com/users/amosonn/followers", "following_url": "https://api.github.com/users/amosonn/following{/other_user}", "gists_url": "https://api.github.com/users/amosonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/amosonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amosonn/subscriptions", "organizations_url": "https://api.github.com/users/amosonn/orgs", "repos_url": "https://api.github.com/users/amosonn/repos", "events_url": "https://api.github.com/users/amosonn/events{/privacy}", "received_events_url": "https://api.github.com/users/amosonn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amosonn", "id": 3142573, "node_id": "MDQ6VXNlcjMxNDI1NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3142573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amosonn", "html_url": "https://github.com/amosonn", "followers_url": "https://api.github.com/users/amosonn/followers", "following_url": "https://api.github.com/users/amosonn/following{/other_user}", "gists_url": "https://api.github.com/users/amosonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/amosonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amosonn/subscriptions", "organizations_url": "https://api.github.com/users/amosonn/orgs", "repos_url": "https://api.github.com/users/amosonn/repos", "events_url": "https://api.github.com/users/amosonn/events{/privacy}", "received_events_url": "https://api.github.com/users/amosonn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "351782d30aaa6e15204e17ecdd51ac1e712685cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/351782d30aaa6e15204e17ecdd51ac1e712685cf", "html_url": "https://github.com/rust-lang/rust/commit/351782d30aaa6e15204e17ecdd51ac1e712685cf"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "7fb2d4f0399293b62f15e01872ad7b6cbc99f2d6", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40ca16794456e9b1520bba6d887a176395f127f0/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ca16794456e9b1520bba6d887a176395f127f0/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=40ca16794456e9b1520bba6d887a176395f127f0", "patch": "@@ -475,6 +475,8 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n ///\n /// * `dst` must be properly aligned.\n ///\n+/// * `dst` must point to a properly initialized value of type `T`.\n+///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n /// [valid]: ../ptr/index.html#safety\n@@ -514,6 +516,8 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n /// * `src` must be properly aligned. Use [`read_unaligned`] if this is not the\n ///   case.\n ///\n+/// * `src` must point to a properly initialized value of type `T`.\n+///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n /// # Examples\n@@ -628,6 +632,8 @@ pub unsafe fn read<T>(src: *const T) -> T {\n ///\n /// * `src` must be [valid] for reads.\n ///\n+/// * `src` must point to a properly initialized value of type `T`.\n+///\n /// Like [`read`], `read_unaligned` creates a bitwise copy of `T`, regardless of\n /// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the returned\n /// value and the value at `*src` can [violate memory safety][read-ownership].\n@@ -922,6 +928,8 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n ///\n /// * `src` must be properly aligned.\n ///\n+/// * `src` must point to a properly initialized value of type `T`.\n+///\n /// Like [`read`], `read_volatile` creates a bitwise copy of `T`, regardless of\n /// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the returned\n /// value and the value at `*src` can [violate memory safety][read-ownership]."}]}