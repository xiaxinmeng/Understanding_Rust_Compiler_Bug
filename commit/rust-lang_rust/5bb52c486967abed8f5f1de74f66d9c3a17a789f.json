{"sha": "5bb52c486967abed8f5f1de74f66d9c3a17a789f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYjUyYzQ4Njk2N2FiZWQ4ZjVmMWRlNzRmNjZkOWMzYTE3YTc4OWY=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-07-17T06:20:49Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-07-17T06:20:49Z"}, "message": "Fix use_self regressions", "tree": {"sha": "9f68b210574d688d745f21cd79bbaeeb0919dd0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f68b210574d688d745f21cd79bbaeeb0919dd0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bb52c486967abed8f5f1de74f66d9c3a17a789f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb52c486967abed8f5f1de74f66d9c3a17a789f", "html_url": "https://github.com/rust-lang/rust/commit/5bb52c486967abed8f5f1de74f66d9c3a17a789f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bb52c486967abed8f5f1de74f66d9c3a17a789f/comments", "author": null, "committer": null, "parents": [{"sha": "847e4dcc0d21ccea018629e46dd0baf4939a8261", "url": "https://api.github.com/repos/rust-lang/rust/commits/847e4dcc0d21ccea018629e46dd0baf4939a8261", "html_url": "https://github.com/rust-lang/rust/commit/847e4dcc0d21ccea018629e46dd0baf4939a8261"}], "stats": {"total": 170, "additions": 105, "deletions": 65}, "files": [{"sha": "a4450acea0913863df78853560c55821f0e82cf0", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5bb52c486967abed8f5f1de74f66d9c3a17a789f/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb52c486967abed8f5f1de74f66d9c3a17a789f/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=5bb52c486967abed8f5f1de74f66d9c3a17a789f", "patch": "@@ -4,7 +4,6 @@ use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n use syntax::ast::NodeId;\n-use syntax::symbol::keywords;\n use syntax_pos::symbol::keywords::SelfType;\n \n /// **What it does:** Checks for unnecessary repetition of structure name when a\n@@ -58,26 +57,29 @@ fn span_use_self_lint(cx: &LateContext, path: &Path) {\n }\n \n struct TraitImplTyVisitor<'a, 'tcx: 'a> {\n+    item_path: &'a Path,\n     cx: &'a LateContext<'a, 'tcx>,\n-    type_walker: ty::walk::TypeWalker<'tcx>,\n+    trait_type_walker: ty::walk::TypeWalker<'tcx>,\n+    impl_type_walker: ty::walk::TypeWalker<'tcx>,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, t: &'tcx Ty) {\n-        let trait_ty = self.type_walker.next();\n+        let trait_ty = self.trait_type_walker.next();\n+        let impl_ty = self.impl_type_walker.next();\n+\n         if let TyKind::Path(QPath::Resolved(_, path)) = &t.node {\n-            let impl_is_self_ty = if let def::Def::SelfTy(..) = path.def {\n-                true\n-            } else {\n-                false\n-            };\n-            if !impl_is_self_ty {\n-                let trait_is_self_ty = if let Some(ty::TyParam(ty::ParamTy { name, .. })) = trait_ty.map(|ty| &ty.sty) {\n-                    *name == keywords::SelfType.name().as_str()\n+            if self.item_path.def == path.def {\n+                let is_self_ty = if let def::Def::SelfTy(..) = path.def {\n+                    true\n                 } else {\n                     false\n                 };\n-                if trait_is_self_ty {\n+\n+                if !is_self_ty && impl_ty != trait_ty {\n+                    // The implementation and trait types don't match which means that\n+                    // the concrete type was specified by the implementation but\n+                    // it didn't use `Self`\n                     span_use_self_lint(self.cx, path);\n                 }\n             }\n@@ -92,6 +94,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n \n fn check_trait_method_impl_decl<'a, 'tcx: 'a>(\n     cx: &'a LateContext<'a, 'tcx>,\n+    item_path: &'a Path,\n     impl_item: &ImplItem,\n     impl_decl: &'tcx FnDecl,\n     impl_trait_ref: &ty::TraitRef,\n@@ -110,24 +113,30 @@ fn check_trait_method_impl_decl<'a, 'tcx: 'a>(\n     let trait_method_sig = cx.tcx.fn_sig(trait_method.def_id);\n     let trait_method_sig = cx.tcx.erase_late_bound_regions(&trait_method_sig);\n \n+    let impl_method_def_id = cx.tcx.hir.local_def_id(impl_item.id);\n+    let impl_method_sig = cx.tcx.fn_sig(impl_method_def_id);\n+    let impl_method_sig = cx.tcx.erase_late_bound_regions(&impl_method_sig);\n+\n     let output_ty = if let FunctionRetTy::Return(ty) = &impl_decl.output {\n         Some(&**ty)\n     } else {\n         None\n     };\n \n-    for (impl_ty, trait_ty) in impl_decl\n-        .inputs\n-        .iter()\n-        .chain(output_ty)\n-        .zip(trait_method_sig.inputs_and_output)\n-    {\n+    for (impl_decl_ty, (impl_ty, trait_ty)) in impl_decl.inputs.iter().chain(output_ty).zip(\n+        impl_method_sig\n+            .inputs_and_output\n+            .iter()\n+            .zip(trait_method_sig.inputs_and_output),\n+    ) {\n         let mut visitor = TraitImplTyVisitor {\n             cx,\n-            type_walker: trait_ty.walk(),\n+            item_path,\n+            trait_type_walker: trait_ty.walk(),\n+            impl_type_walker: impl_ty.walk(),\n         };\n \n-        visitor.visit_ty(&impl_ty);\n+        visitor.visit_ty(&impl_decl_ty);\n     }\n }\n \n@@ -163,7 +172,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n                             let impl_item = cx.tcx.hir.impl_item(impl_item_ref.id);\n                             if let ImplItemKind::Method(MethodSig{ decl: impl_decl, .. }, impl_body_id)\n                                     = &impl_item.node {\n-                                check_trait_method_impl_decl(cx, impl_item, impl_decl, &impl_trait_ref);\n+                                check_trait_method_impl_decl(cx, item_path, impl_item, impl_decl, &impl_trait_ref);\n                                 let body = cx.tcx.hir.body(*impl_body_id);\n                                 visitor.visit_body(body);\n                             } else {"}, {"sha": "689c9d68d1208aa7504f6f985f32ad4a7f0bc074", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5bb52c486967abed8f5f1de74f66d9c3a17a789f/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb52c486967abed8f5f1de74f66d9c3a17a789f/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=5bb52c486967abed8f5f1de74f66d9c3a17a789f", "patch": "@@ -1,10 +1,6 @@\n-\n-\n #![warn(use_self)]\n #![allow(dead_code)]\n #![allow(should_implement_trait)]\n-#![allow(boxed_local)]\n-\n \n fn main() {}\n \n@@ -68,9 +64,10 @@ mod lifetimes {\n     }\n }\n \n+#[allow(boxed_local)]\n mod traits {\n \n-    #![cfg_attr(feature = \"cargo-clippy\", allow(boxed_local))]\n+    use std::ops::Mul;\n \n     trait SelfTrait {\n         fn refs(p1: &Self) -> &Self;\n@@ -104,6 +101,14 @@ mod traits {\n         }\n     }\n \n+    impl Mul for Bad {\n+        type Output = Bad;\n+\n+        fn mul(self, rhs: Bad) -> Bad {\n+            rhs\n+        }\n+    }\n+\n     #[derive(Default)]\n     struct Good;\n \n@@ -128,6 +133,14 @@ mod traits {\n         }\n     }\n \n+    impl Mul for Good {\n+        type Output = Self;\n+\n+        fn mul(self, rhs: Self) -> Self {\n+            rhs\n+        }\n+    }\n+\n     trait NameTrait {\n         fn refs(p1: &u8) -> &u8;\n         fn ref_refs<'a>(p1: &'a &'a u8) -> &'a &'a u8;\n@@ -162,7 +175,7 @@ mod traits {\n     impl Clone for Good {\n         fn clone(&self) -> Self {\n             // Note: Not linted and it wouldn't be valid\n-            // because \"can't use `Self` as a constructor`\n+            // because \"can't use `Self` as a constructor`\"\n             Good\n         }\n     }"}, {"sha": "899361012524f94e5550ad082c2ab033276b6c08", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 56, "deletions": 38, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5bb52c486967abed8f5f1de74f66d9c3a17a789f/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bb52c486967abed8f5f1de74f66d9c3a17a789f/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=5bb52c486967abed8f5f1de74f66d9c3a17a789f", "patch": "@@ -1,106 +1,124 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:15:21\n+  --> $DIR/use_self.rs:11:21\n    |\n-15 |         fn new() -> Foo {\n+11 |         fn new() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:16:13\n+  --> $DIR/use_self.rs:12:13\n    |\n-16 |             Foo {}\n+12 |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:18:22\n+  --> $DIR/use_self.rs:14:22\n    |\n-18 |         fn test() -> Foo {\n+14 |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:19:13\n+  --> $DIR/use_self.rs:15:13\n    |\n-19 |             Foo::new()\n+15 |             Foo::new()\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:24:25\n+  --> $DIR/use_self.rs:20:25\n    |\n-24 |         fn default() -> Foo {\n+20 |         fn default() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:25:13\n+  --> $DIR/use_self.rs:21:13\n    |\n-25 |             Foo::new()\n+21 |             Foo::new()\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:87:22\n+  --> $DIR/use_self.rs:84:22\n    |\n-87 |         fn refs(p1: &Bad) -> &Bad {\n+84 |         fn refs(p1: &Bad) -> &Bad {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:87:31\n+  --> $DIR/use_self.rs:84:31\n    |\n-87 |         fn refs(p1: &Bad) -> &Bad {\n+84 |         fn refs(p1: &Bad) -> &Bad {\n    |                               ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:91:37\n+  --> $DIR/use_self.rs:88:37\n    |\n-91 |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n+88 |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n    |                                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:91:53\n+  --> $DIR/use_self.rs:88:53\n    |\n-91 |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n+88 |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n    |                                                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:95:30\n+  --> $DIR/use_self.rs:92:30\n    |\n-95 |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n+92 |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n    |                              ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:95:43\n+  --> $DIR/use_self.rs:92:43\n    |\n-95 |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n+92 |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n    |                                           ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:99:28\n+  --> $DIR/use_self.rs:96:28\n    |\n-99 |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {\n+96 |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {\n    |                            ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:99:46\n+  --> $DIR/use_self.rs:96:46\n    |\n-99 |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {\n+96 |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {\n    |                                              ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/use_self.rs:102:20\n+  --> $DIR/use_self.rs:99:20\n+   |\n+99 |         fn vals(_: Bad) -> Bad {\n+   |                    ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:99:28\n+   |\n+99 |         fn vals(_: Bad) -> Bad {\n+   |                            ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/use_self.rs:100:13\n     |\n-102 |         fn vals(_: Bad) -> Bad {\n-    |                    ^^^ help: use the applicable keyword: `Self`\n+100 |             Bad::default()\n+    |             ^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/use_self.rs:102:28\n+   --> $DIR/use_self.rs:105:23\n     |\n-102 |         fn vals(_: Bad) -> Bad {\n-    |                            ^^^ help: use the applicable keyword: `Self`\n+105 |         type Output = Bad;\n+    |                       ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/use_self.rs:103:13\n+   --> $DIR/use_self.rs:107:27\n     |\n-103 |             Bad::default()\n-    |             ^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+107 |         fn mul(self, rhs: Bad) -> Bad {\n+    |                           ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/use_self.rs:107:35\n+    |\n+107 |         fn mul(self, rhs: Bad) -> Bad {\n+    |                                   ^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 20 previous errors\n "}]}