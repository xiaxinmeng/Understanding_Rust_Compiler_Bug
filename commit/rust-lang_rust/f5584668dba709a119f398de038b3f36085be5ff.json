{"sha": "f5584668dba709a119f398de038b3f36085be5ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NTg0NjY4ZGJhNzA5YTExOWYzOThkZTAzOGIzZjM2MDg1YmU1ZmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-26T23:21:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-26T23:21:43Z"}, "message": "introduce_variable -> extract_variable", "tree": {"sha": "cadace8e7e0074454a7d9b428cf6af31443c8951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cadace8e7e0074454a7d9b428cf6af31443c8951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5584668dba709a119f398de038b3f36085be5ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5584668dba709a119f398de038b3f36085be5ff", "html_url": "https://github.com/rust-lang/rust/commit/f5584668dba709a119f398de038b3f36085be5ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5584668dba709a119f398de038b3f36085be5ff/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7488cd6a1b3604d6b4f11a7f83b6006a34cda0c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7488cd6a1b3604d6b4f11a7f83b6006a34cda0c0", "html_url": "https://github.com/rust-lang/rust/commit/7488cd6a1b3604d6b4f11a7f83b6006a34cda0c0"}], "stats": {"total": 146, "additions": 73, "deletions": 73}, "files": [{"sha": "c4150d2bb00d36421dab96297c88a9ec654fa99f", "filename": "crates/ra_assists/src/handlers/extract_variable.rs", "status": "renamed", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f5584668dba709a119f398de038b3f36085be5ff/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5584668dba709a119f398de038b3f36085be5ff/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=f5584668dba709a119f398de038b3f36085be5ff", "patch": "@@ -11,7 +11,7 @@ use test_utils::mark;\n \n use crate::{AssistContext, AssistId, Assists};\n \n-// Assist: introduce_variable\n+// Assist: extract_variable\n //\n // Extracts subexpression into a variable.\n //\n@@ -27,13 +27,13 @@ use crate::{AssistContext, AssistId, Assists};\n //     var_name * 4;\n // }\n // ```\n-pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     if ctx.frange.range.is_empty() {\n         return None;\n     }\n     let node = ctx.covering_element();\n     if node.kind() == COMMENT {\n-        mark::hit!(introduce_var_in_comment_is_not_applicable);\n+        mark::hit!(extract_var_in_comment_is_not_applicable);\n         return None;\n     }\n     let expr = node.ancestors().find_map(valid_target_expr)?;\n@@ -43,7 +43,7 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n         return None;\n     }\n     let target = expr.syntax().text_range();\n-    acc.add(AssistId(\"introduce_variable\"), \"Extract into variable\", target, move |edit| {\n+    acc.add(AssistId(\"extract_variable\"), \"Extract into variable\", target, move |edit| {\n         let field_shorthand = match expr.syntax().parent().and_then(ast::RecordField::cast) {\n             Some(field) => field.name_ref(),\n             None => None,\n@@ -74,7 +74,7 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n             false\n         };\n         if is_full_stmt {\n-            mark::hit!(test_introduce_var_expr_stmt);\n+            mark::hit!(test_extract_var_expr_stmt);\n             if full_stmt.unwrap().semicolon_token().is_none() {\n                 buf.push_str(\";\");\n             }\n@@ -133,7 +133,7 @@ fn valid_target_expr(node: SyntaxNode) -> Option<ast::Expr> {\n     }\n }\n \n-/// Returns the syntax node which will follow the freshly introduced var\n+/// Returns the syntax node which will follow the freshly extractd var\n /// and a boolean indicating whether we have to wrap it within a { } block\n /// to produce correct code.\n /// It can be a statement, the last in a block expression or a wanna be block\n@@ -142,7 +142,7 @@ fn anchor_stmt(expr: ast::Expr) -> Option<(SyntaxNode, bool)> {\n     expr.syntax().ancestors().find_map(|node| {\n         if let Some(expr) = node.parent().and_then(ast::BlockExpr::cast).and_then(|it| it.expr()) {\n             if expr.syntax() == &node {\n-                mark::hit!(test_introduce_var_last_expr);\n+                mark::hit!(test_extract_var_last_expr);\n                 return Some((node, false));\n             }\n         }\n@@ -170,9 +170,9 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_introduce_var_simple() {\n+    fn test_extract_var_simple() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             r#\"\n fn foo() {\n     foo(<|>1 + 1<|>);\n@@ -186,16 +186,16 @@ fn foo() {\n     }\n \n     #[test]\n-    fn introduce_var_in_comment_is_not_applicable() {\n-        mark::check!(introduce_var_in_comment_is_not_applicable);\n-        check_assist_not_applicable(introduce_variable, \"fn main() { 1 + /* <|>comment<|> */ 1; }\");\n+    fn extract_var_in_comment_is_not_applicable() {\n+        mark::check!(extract_var_in_comment_is_not_applicable);\n+        check_assist_not_applicable(extract_variable, \"fn main() { 1 + /* <|>comment<|> */ 1; }\");\n     }\n \n     #[test]\n-    fn test_introduce_var_expr_stmt() {\n-        mark::check!(test_introduce_var_expr_stmt);\n+    fn test_extract_var_expr_stmt() {\n+        mark::check!(test_extract_var_expr_stmt);\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             r#\"\n fn foo() {\n     <|>1 + 1<|>;\n@@ -206,7 +206,7 @@ fn foo() {\n }\"#,\n         );\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn foo() {\n     <|>{ let x = 0; x }<|>\n@@ -221,9 +221,9 @@ fn foo() {\n     }\n \n     #[test]\n-    fn test_introduce_var_part_of_expr_stmt() {\n+    fn test_extract_var_part_of_expr_stmt() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn foo() {\n     <|>1<|> + 1;\n@@ -237,10 +237,10 @@ fn foo() {\n     }\n \n     #[test]\n-    fn test_introduce_var_last_expr() {\n-        mark::check!(test_introduce_var_last_expr);\n+    fn test_extract_var_last_expr() {\n+        mark::check!(test_extract_var_last_expr);\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             r#\"\n fn foo() {\n     bar(<|>1 + 1<|>)\n@@ -254,7 +254,7 @@ fn foo() {\n \"#,\n         );\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             r#\"\n fn foo() {\n     <|>bar(1 + 1)<|>\n@@ -270,9 +270,9 @@ fn foo() {\n     }\n \n     #[test]\n-    fn test_introduce_var_in_match_arm_no_block() {\n+    fn test_extract_var_in_match_arm_no_block() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn main() {\n     let x = true;\n@@ -295,9 +295,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_introduce_var_in_match_arm_with_block() {\n+    fn test_extract_var_in_match_arm_with_block() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn main() {\n     let x = true;\n@@ -327,9 +327,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_introduce_var_in_closure_no_block() {\n+    fn test_extract_var_in_closure_no_block() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn main() {\n     let lambda = |x: u32| <|>x * 2<|>;\n@@ -344,9 +344,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_introduce_var_in_closure_with_block() {\n+    fn test_extract_var_in_closure_with_block() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn main() {\n     let lambda = |x: u32| { <|>x * 2<|> };\n@@ -361,9 +361,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_introduce_var_path_simple() {\n+    fn test_extract_var_path_simple() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn main() {\n     let o = <|>Some(true)<|>;\n@@ -379,9 +379,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_introduce_var_path_method() {\n+    fn test_extract_var_path_method() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn main() {\n     let v = <|>bar.foo()<|>;\n@@ -397,9 +397,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_introduce_var_return() {\n+    fn test_extract_var_return() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn foo() -> u32 {\n     <|>return 2 + 2<|>;\n@@ -415,9 +415,9 @@ fn foo() -> u32 {\n     }\n \n     #[test]\n-    fn test_introduce_var_does_not_add_extra_whitespace() {\n+    fn test_extract_var_does_not_add_extra_whitespace() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn foo() -> u32 {\n \n@@ -436,7 +436,7 @@ fn foo() -> u32 {\n         );\n \n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn foo() -> u32 {\n \n@@ -453,7 +453,7 @@ fn foo() -> u32 {\n         );\n \n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn foo() -> u32 {\n     let foo = 1;\n@@ -479,9 +479,9 @@ fn foo() -> u32 {\n     }\n \n     #[test]\n-    fn test_introduce_var_break() {\n+    fn test_extract_var_break() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn main() {\n     let result = loop {\n@@ -501,9 +501,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_introduce_var_for_cast() {\n+    fn test_extract_var_for_cast() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn main() {\n     let v = <|>0f32 as u32<|>;\n@@ -519,9 +519,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn introduce_var_field_shorthand() {\n+    fn extract_var_field_shorthand() {\n         check_assist(\n-            introduce_variable,\n+            extract_variable,\n             r#\"\n struct S {\n     foo: i32\n@@ -545,22 +545,22 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_introduce_var_for_return_not_applicable() {\n-        check_assist_not_applicable(introduce_variable, \"fn foo() { <|>return<|>; } \");\n+    fn test_extract_var_for_return_not_applicable() {\n+        check_assist_not_applicable(extract_variable, \"fn foo() { <|>return<|>; } \");\n     }\n \n     #[test]\n-    fn test_introduce_var_for_break_not_applicable() {\n-        check_assist_not_applicable(introduce_variable, \"fn main() { loop { <|>break<|>; }; }\");\n+    fn test_extract_var_for_break_not_applicable() {\n+        check_assist_not_applicable(extract_variable, \"fn main() { loop { <|>break<|>; }; }\");\n     }\n \n     // FIXME: This is not quite correct, but good enough(tm) for the sorting heuristic\n     #[test]\n-    fn introduce_var_target() {\n-        check_assist_target(introduce_variable, \"fn foo() -> u32 { <|>return 2 + 2<|>; }\", \"2 + 2\");\n+    fn extract_var_target() {\n+        check_assist_target(extract_variable, \"fn foo() -> u32 { <|>return 2 + 2<|>; }\", \"2 + 2\");\n \n         check_assist_target(\n-            introduce_variable,\n+            extract_variable,\n             \"\n fn main() {\n     let x = true;", "previous_filename": "crates/ra_assists/src/handlers/introduce_variable.rs"}, {"sha": "1745f44a5aaac55638d0170dfa4b10ff68a8e52d", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5584668dba709a119f398de038b3f36085be5ff/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5584668dba709a119f398de038b3f36085be5ff/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=f5584668dba709a119f398de038b3f36085be5ff", "patch": "@@ -116,14 +116,14 @@ mod handlers {\n     mod change_visibility;\n     mod early_return;\n     mod extract_struct_from_enum_variant;\n+    mod extract_variable;\n     mod fill_match_arms;\n     mod fix_visibility;\n     mod flip_binexpr;\n     mod flip_comma;\n     mod flip_trait_bound;\n     mod inline_local_variable;\n     mod introduce_named_lifetime;\n-    mod introduce_variable;\n     mod invert_if;\n     mod merge_imports;\n     mod merge_match_arms;\n@@ -157,14 +157,14 @@ mod handlers {\n             change_visibility::change_visibility,\n             early_return::convert_to_guarded_return,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n+            extract_variable::extract_variable,\n             fill_match_arms::fill_match_arms,\n             fix_visibility::fix_visibility,\n             flip_binexpr::flip_binexpr,\n             flip_comma::flip_comma,\n             flip_trait_bound::flip_trait_bound,\n             inline_local_variable::inline_local_variable,\n             introduce_named_lifetime::introduce_named_lifetime,\n-            introduce_variable::introduce_variable,\n             invert_if::invert_if,\n             merge_imports::merge_imports,\n             merge_match_arms::merge_match_arms,"}, {"sha": "31ea888c5d6688c826dd529fc5d0ecc6fc8ef065", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f5584668dba709a119f398de038b3f36085be5ff/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5584668dba709a119f398de038b3f36085be5ff/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=f5584668dba709a119f398de038b3f36085be5ff", "patch": "@@ -352,6 +352,24 @@ enum A { One(One) }\n     )\n }\n \n+#[test]\n+fn doctest_extract_variable() {\n+    check_doc_test(\n+        \"extract_variable\",\n+        r#####\"\n+fn main() {\n+    <|>(1 + 2)<|> * 4;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let $0var_name = (1 + 2);\n+    var_name * 4;\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_fill_match_arms() {\n     check_doc_test(\n@@ -491,24 +509,6 @@ impl<'a> Cursor<'a> {\n     )\n }\n \n-#[test]\n-fn doctest_introduce_variable() {\n-    check_doc_test(\n-        \"introduce_variable\",\n-        r#####\"\n-fn main() {\n-    <|>(1 + 2)<|> * 4;\n-}\n-\"#####,\n-        r#####\"\n-fn main() {\n-    let $0var_name = (1 + 2);\n-    var_name * 4;\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_invert_if() {\n     check_doc_test("}]}