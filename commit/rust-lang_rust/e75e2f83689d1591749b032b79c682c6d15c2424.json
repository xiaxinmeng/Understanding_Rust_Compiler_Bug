{"sha": "e75e2f83689d1591749b032b79c682c6d15c2424", "node_id": "C_kwDOAAsO6NoAKGU3NWUyZjgzNjg5ZDE1OTE3NDliMDMyYjc5YzY4MmM2ZDE1YzI0MjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-02T22:17:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-02T22:17:11Z"}, "message": "Auto merge of #13882 - Veykril:bin-op-adjust, r=Veykril\n\nWrite down adjustments introduced by binary operators", "tree": {"sha": "472bb2418bc48b60fccd8ab6bd7dd34f363ebd86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/472bb2418bc48b60fccd8ab6bd7dd34f363ebd86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e75e2f83689d1591749b032b79c682c6d15c2424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e75e2f83689d1591749b032b79c682c6d15c2424", "html_url": "https://github.com/rust-lang/rust/commit/e75e2f83689d1591749b032b79c682c6d15c2424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e75e2f83689d1591749b032b79c682c6d15c2424/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17cc78f169538538a10e11251562e0fde8ed4958", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cc78f169538538a10e11251562e0fde8ed4958", "html_url": "https://github.com/rust-lang/rust/commit/17cc78f169538538a10e11251562e0fde8ed4958"}, {"sha": "506895fa2f881c68fa2619156db36225d4dd7036", "url": "https://api.github.com/repos/rust-lang/rust/commits/506895fa2f881c68fa2619156db36225d4dd7036", "html_url": "https://github.com/rust-lang/rust/commit/506895fa2f881c68fa2619156db36225d4dd7036"}], "stats": {"total": 107, "additions": 86, "deletions": 21}, "files": [{"sha": "2e5c4244109fd7c7fb52958f27300c88ae139cdc", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=e75e2f83689d1591749b032b79c682c6d15c2424", "patch": "@@ -6,7 +6,7 @@ use std::{\n };\n \n use chalk_ir::{\n-    cast::Cast, fold::Shift, DebruijnIndex, GenericArgData, Mutability, TyVariableKind,\n+    cast::Cast, fold::Shift, DebruijnIndex, GenericArgData, Mutability, TyKind, TyVariableKind,\n };\n use hir_def::{\n     expr::{\n@@ -34,8 +34,8 @@ use crate::{\n     primitive::{self, UintTy},\n     static_lifetime, to_chalk_trait_id,\n     utils::{generics, Generics},\n-    AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, Interner, Rawness, Scalar,\n-    Substitution, TraitRef, Ty, TyBuilder, TyExt, TyKind,\n+    Adjust, Adjustment, AdtId, AutoBorrow, Binders, CallableDefId, FnPointer, FnSig, FnSubst,\n+    Interner, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyExt,\n };\n \n use super::{\n@@ -1038,14 +1038,38 @@ impl<'a> InferenceContext<'a> {\n         self.infer_expr_coerce(rhs, &Expectation::has_type(rhs_ty.clone()));\n \n         let ret_ty = match method_ty.callable_sig(self.db) {\n-            Some(sig) => sig.ret().clone(),\n+            Some(sig) => {\n+                let p_left = &sig.params()[0];\n+                if matches!(op, BinaryOp::CmpOp(..) | BinaryOp::Assignment { .. }) {\n+                    if let &TyKind::Ref(mtbl, _, _) = p_left.kind(Interner) {\n+                        self.write_expr_adj(\n+                            lhs,\n+                            vec![Adjustment {\n+                                kind: Adjust::Borrow(AutoBorrow::Ref(mtbl)),\n+                                target: p_left.clone(),\n+                            }],\n+                        );\n+                    }\n+                }\n+                let p_right = &sig.params()[1];\n+                if matches!(op, BinaryOp::CmpOp(..)) {\n+                    if let &TyKind::Ref(mtbl, _, _) = p_right.kind(Interner) {\n+                        self.write_expr_adj(\n+                            rhs,\n+                            vec![Adjustment {\n+                                kind: Adjust::Borrow(AutoBorrow::Ref(mtbl)),\n+                                target: p_right.clone(),\n+                            }],\n+                        );\n+                    }\n+                }\n+                sig.ret().clone()\n+            }\n             None => self.err_ty(),\n         };\n \n         let ret_ty = self.normalize_associated_types_in(ret_ty);\n \n-        // FIXME: record autoref adjustments\n-\n         // use knowledge of built-in binary ops, which can sometimes help inference\n         if let Some(builtin_rhs) = self.builtin_binary_op_rhs_expectation(op, lhs_ty.clone()) {\n             self.unify(&builtin_rhs, &rhs_ty);"}, {"sha": "ba5d9c2412670851fc255c0bad858b70e88644b8", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=e75e2f83689d1591749b032b79c682c6d15c2424", "patch": "@@ -94,11 +94,12 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n                 types.insert(file_range, expected.trim_start_matches(\"type: \").to_string());\n             } else if expected.starts_with(\"expected\") {\n                 mismatches.insert(file_range, expected);\n-            } else if expected.starts_with(\"adjustments: \") {\n+            } else if expected.starts_with(\"adjustments:\") {\n                 adjustments.insert(\n                     file_range,\n                     expected\n-                        .trim_start_matches(\"adjustments: \")\n+                        .trim_start_matches(\"adjustments:\")\n+                        .trim()\n                         .split(',')\n                         .map(|it| it.trim().to_string())\n                         .filter(|it| !it.is_empty())\n@@ -176,17 +177,17 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n                 assert_eq!(actual, expected);\n             }\n             if let Some(expected) = adjustments.remove(&range) {\n-                if let Some(adjustments) = inference_result.expr_adjustments.get(&expr) {\n-                    assert_eq!(\n-                        expected,\n-                        adjustments\n-                            .iter()\n-                            .map(|Adjustment { kind, .. }| format!(\"{kind:?}\"))\n-                            .collect::<Vec<_>>()\n-                    );\n-                } else {\n-                    panic!(\"expected {expected:?} adjustments, found none\");\n-                }\n+                let adjustments = inference_result\n+                    .expr_adjustments\n+                    .get(&expr)\n+                    .map_or_else(Default::default, |it| &**it);\n+                assert_eq!(\n+                    expected,\n+                    adjustments\n+                        .iter()\n+                        .map(|Adjustment { kind, .. }| format!(\"{kind:?}\"))\n+                        .collect::<Vec<_>>()\n+                );\n             }\n         }\n "}, {"sha": "3e110abaf4b181875099b907be99dae93ab65ed9", "filename": "crates/hir-ty/src/tests/coercion.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=e75e2f83689d1591749b032b79c682c6d15c2424", "patch": "@@ -807,3 +807,37 @@ fn main() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn adjust_comparison_arguments() {\n+    check_no_mismatches(\n+        r\"\n+//- minicore: eq\n+struct Struct;\n+impl core::cmp::PartialEq for Struct {\n+    fn eq(&self, other: &Self) -> bool { true }\n+}\n+fn test() {\n+    Struct == Struct;\n+ // ^^^^^^ adjustments: Borrow(Ref(Not))\n+           // ^^^^^^ adjustments: Borrow(Ref(Not))\n+}\",\n+    );\n+}\n+\n+#[test]\n+fn adjust_assign_lhs() {\n+    check_no_mismatches(\n+        r\"\n+//- minicore: add\n+struct Struct;\n+impl core::ops::AddAssign for Struct {\n+    fn add_assign(&mut self, other: Self) {}\n+}\n+fn test() {\n+    Struct += Struct;\n+ // ^^^^^^ adjustments: Borrow(Ref(Mut))\n+           // ^^^^^^ adjustments:\n+}\",\n+    );\n+}"}, {"sha": "368c8aaa935b8fbd928f80e7bdcf97f111bbb00b", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=e75e2f83689d1591749b032b79c682c6d15c2424", "patch": "@@ -24,7 +24,7 @@ mod chaining;\n mod param_name;\n mod binding_mode;\n mod bind_pat;\n-mod discrimant;\n+mod discriminant;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayHintsConfig {\n@@ -376,7 +376,7 @@ fn hints(\n                 _ => None,\n             },\n             ast::Variant(v) => {\n-                discrimant::hints(hints, famous_defs, config, file_id, &v)\n+                discriminant::hints(hints, famous_defs, config, file_id, &v)\n             },\n             // FIXME: fn-ptr type, dyn fn type, and trait object type elisions\n             ast::Type(_) => None,"}, {"sha": "f32c4bdf2883c03cfdc47f11dbecbc9d84260d3b", "filename": "crates/ide/src/inlay_hints/discriminant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs?ref=e75e2f83689d1591749b032b79c682c6d15c2424", "previous_filename": "crates/ide/src/inlay_hints/discrimant.rs"}, {"sha": "3ca63fcab90d603e93ed7b04db69fa0fd6aaac7a", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75e2f83689d1591749b032b79c682c6d15c2424/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=e75e2f83689d1591749b032b79c682c6d15c2424", "patch": "@@ -382,6 +382,12 @@ pub mod ops {\n         type Output;\n         fn add(self, rhs: Rhs) -> Self::Output;\n     }\n+\n+    #[lang = \"add_assign\"]\n+    #[const_trait]\n+    pub trait AddAssign<Rhs = Self> {\n+        fn add_assign(&mut self, rhs: Rhs);\n+    }\n     // endregion:add\n \n     // region:generator"}]}