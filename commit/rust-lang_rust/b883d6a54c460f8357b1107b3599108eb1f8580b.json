{"sha": "b883d6a54c460f8357b1107b3599108eb1f8580b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ODNkNmE1NGM0NjBmODM1N2IxMTA3YjM1OTkxMDhlYjFmODU4MGI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-30T02:35:04Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-30T07:45:36Z"}, "message": "simplify the exchange allocator\n\n* stop using an atomic counter, this has a significant cost and\n  valgrind will already catch these leaks\n* remove the extra layer of function calls\n* remove the assert of non-null in free, freeing null is well defined\n  but throwing a failure from free will not be\n* stop initializing the `prev`/`next` pointers\n* abort on out-of-memory, failing won't necessarily work", "tree": {"sha": "64589d59861624f36771f0f1d1a300fe4d49ffec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64589d59861624f36771f0f1d1a300fe4d49ffec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b883d6a54c460f8357b1107b3599108eb1f8580b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b883d6a54c460f8357b1107b3599108eb1f8580b", "html_url": "https://github.com/rust-lang/rust/commit/b883d6a54c460f8357b1107b3599108eb1f8580b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b883d6a54c460f8357b1107b3599108eb1f8580b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "439b13f071a4a884ea8645670df83162ffcf129f", "url": "https://api.github.com/repos/rust-lang/rust/commits/439b13f071a4a884ea8645670df83162ffcf129f", "html_url": "https://github.com/rust-lang/rust/commit/439b13f071a4a884ea8645670df83162ffcf129f"}], "stats": {"total": 224, "additions": 44, "deletions": 180}, "files": [{"sha": "9b74754d71107dda00bd4a2c84e16e018836fe14", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=b883d6a54c460f8357b1107b3599108eb1f8580b", "patch": "@@ -730,7 +730,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n         #[cfg(windows)]\n         unsafe fn get_list(p: &Path) -> ~[~str] {\n             use libc::consts::os::extra::INVALID_HANDLE_VALUE;\n-            use libc::wcslen;\n+            use libc::{wcslen, free};\n             use libc::funcs::extra::kernel32::{\n                 FindFirstFileW,\n                 FindNextFileW,\n@@ -739,7 +739,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n             use os::win32::{\n                 as_utf16_p\n             };\n-            use rt::global_heap::{malloc_raw, free_raw};\n+            use rt::global_heap::malloc_raw;\n             #[nolink]\n             extern {\n                 unsafe fn rust_list_dir_wfd_size() -> libc::size_t;\n@@ -772,7 +772,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n                             ::cast::transmute(wfd_ptr));\n                     }\n                     FindClose(find_handle);\n-                    free_raw(wfd_ptr);\n+                    free(wfd_ptr)\n                 }\n                 strings\n             }"}, {"sha": "3994b722f592293dd155d8ec8a67555ec519a697", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 41, "deletions": 53, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=b883d6a54c460f8357b1107b3599108eb1f8580b", "patch": "@@ -8,62 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use sys::{size_of};\n-use libc::{c_void, size_t, uintptr_t};\n-use c_malloc = libc::malloc;\n-use c_free = libc::free;\n+use libc::{c_char, c_void, size_t, uintptr_t, free, malloc};\n use managed::raw::{BoxHeaderRepr, BoxRepr};\n-use cast::transmute;\n-use unstable::intrinsics::{atomic_xadd,atomic_xsub,TyDesc};\n-use ptr::null;\n+use unstable::intrinsics::TyDesc;\n+use sys::size_of;\n \n-pub unsafe fn malloc(td: *TyDesc, size: uint) -> *c_void {\n-    assert!(td.is_not_null());\n-\n-    let total_size = get_box_size(size, (*td).align);\n-    let p = c_malloc(total_size as size_t);\n-    assert!(p.is_not_null());\n-\n-    let box: &mut BoxRepr = transmute(p);\n-    box.header.ref_count = -1; // Exchange values not ref counted\n-    box.header.type_desc = td;\n-    box.header.prev = null();\n-    box.header.next = null();\n-\n-    let exchange_count = &mut *exchange_count_ptr();\n-    atomic_xadd(exchange_count, 1);\n-\n-    return transmute(box);\n-}\n-/**\n-Thin wrapper around libc::malloc, none of the box header\n-stuff in exchange_alloc::malloc\n-*/\n-pub unsafe fn malloc_raw(size: uint) -> *c_void {\n-    let p = c_malloc(size as size_t);\n-    if p.is_null() {\n-        fail!(\"Failure in malloc_raw: result ptr is null\");\n-    }\n-    p\n-}\n-\n-pub unsafe fn free(ptr: *c_void) {\n-    let exchange_count = &mut *exchange_count_ptr();\n-    atomic_xsub(exchange_count, 1);\n-\n-    assert!(ptr.is_not_null());\n-    c_free(ptr);\n-}\n-///Thin wrapper around libc::free, as with exchange_alloc::malloc_raw\n-pub unsafe fn free_raw(ptr: *c_void) {\n-    c_free(ptr);\n+extern {\n+    #[rust_stack]\n+    fn abort();\n }\n \n fn get_box_size(body_size: uint, body_align: uint) -> uint {\n     let header_size = size_of::<BoxHeaderRepr>();\n     // FIXME (#2699): This alignment calculation is suspicious. Is it right?\n     let total_size = align_to(header_size, body_align) + body_size;\n-    return total_size;\n+    total_size\n }\n \n // Rounds |size| to the nearest |alignment|. Invariant: |alignment| is a power\n@@ -73,11 +32,40 @@ fn align_to(size: uint, align: uint) -> uint {\n     (size + align - 1) & !(align - 1)\n }\n \n-fn exchange_count_ptr() -> *mut int {\n-    // XXX: Need mutable globals\n-    unsafe { transmute(&rust_exchange_count) }\n+/// A wrapper around libc::malloc, aborting on out-of-memory\n+pub unsafe fn malloc_raw(size: uint) -> *c_void {\n+    let p = malloc(size as size_t);\n+    if p.is_null() {\n+        // we need a non-allocating way to print an error here\n+        abort();\n+    }\n+    p\n }\n \n-extern {\n-    static rust_exchange_count: uintptr_t;\n+// FIXME #4942: Make these signatures agree with exchange_alloc's signatures\n+#[lang=\"exchange_malloc\"]\n+#[inline]\n+pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n+    let td = td as *TyDesc;\n+    let size = size as uint;\n+\n+    assert!(td.is_not_null());\n+\n+    let total_size = get_box_size(size, (*td).align);\n+    let p = malloc_raw(total_size as uint);\n+\n+    let box: *mut BoxRepr = p as *mut BoxRepr;\n+    (*box).header.ref_count = -1; // Exchange values not ref counted\n+    (*box).header.type_desc = td;\n+\n+    box as *c_char\n+}\n+\n+// NB: Calls to free CANNOT be allowed to fail, as throwing an exception from\n+// inside a landing pad may corrupt the state of the exception handler.\n+#[cfg(not(test))]\n+#[lang=\"exchange_free\"]\n+#[inline]\n+pub unsafe fn exchange_free(ptr: *c_char) {\n+    free(ptr as *c_void);\n }"}, {"sha": "5c47901df480226214d2db95f88ac4ef310c8b64", "filename": "src/libstd/unstable/exchange_alloc.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/439b13f071a4a884ea8645670df83162ffcf129f/src%2Flibstd%2Funstable%2Fexchange_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439b13f071a4a884ea8645670df83162ffcf129f/src%2Flibstd%2Funstable%2Fexchange_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fexchange_alloc.rs?ref=439b13f071a4a884ea8645670df83162ffcf129f", "patch": "@@ -1,83 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use sys::size_of;\n-use libc::{c_void, size_t};\n-use c_malloc = libc::malloc;\n-use c_free = libc::free;\n-use managed::raw::{BoxHeaderRepr, BoxRepr};\n-use cast::transmute;\n-use unstable::intrinsics::{atomic_xadd,atomic_xsub};\n-use ptr::null;\n-#[cfg(stage0)]\n-use intrinsic::TyDesc;\n-#[cfg(not(stage0))]\n-use unstable::intrinsics::TyDesc;\n-\n-pub unsafe fn malloc(td: *TyDesc, size: uint) -> *c_void {\n-    assert!(td.is_not_null());\n-\n-    let total_size = get_box_size(size, (*td).align);\n-    let p = c_malloc(total_size as size_t);\n-    assert!(p.is_not_null());\n-\n-    let box: &mut BoxRepr = transmute(p);\n-    box.header.ref_count = -1; // Exchange values not ref counted\n-    box.header.type_desc = td;\n-    box.header.prev = null();\n-    box.header.next = null();\n-\n-    let exchange_count = &mut *rust_get_exchange_count_ptr();\n-    atomic_xadd(exchange_count, 1);\n-\n-    return transmute(box);\n-}\n-/**\n-Thin wrapper around libc::malloc, none of the box header\n-stuff in exchange_alloc::malloc\n-*/\n-pub unsafe fn malloc_raw(size: uint) -> *c_void {\n-    let p = c_malloc(size as size_t);\n-    if p.is_null() {\n-        fail!(\"Failure in malloc_raw: result ptr is null\");\n-    }\n-    p\n-}\n-\n-pub unsafe fn free(ptr: *c_void) {\n-    let exchange_count = &mut *rust_get_exchange_count_ptr();\n-    atomic_xsub(exchange_count, 1);\n-\n-    assert!(ptr.is_not_null());\n-    c_free(ptr);\n-}\n-///Thin wrapper around libc::free, as with exchange_alloc::malloc_raw\n-pub unsafe fn free_raw(ptr: *c_void) {\n-    c_free(ptr);\n-}\n-\n-fn get_box_size(body_size: uint, body_align: uint) -> uint {\n-    let header_size = size_of::<BoxHeaderRepr>();\n-    // FIXME (#2699): This alignment calculation is suspicious. Is it right?\n-    let total_size = align_to(header_size, body_align) + body_size;\n-    return total_size;\n-}\n-\n-// Rounds |size| to the nearest |alignment|. Invariant: |alignment| is a power\n-// of two.\n-fn align_to(size: uint, align: uint) -> uint {\n-    assert!(align != 0);\n-    (size + align - 1) & !(align - 1)\n-}\n-\n-extern {\n-    #[rust_stack]\n-    fn rust_get_exchange_count_ptr() -> *mut int;\n-}"}, {"sha": "fddd847af341ca5f5663efe5ee6a612d14e0d44c", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=b883d6a54c460f8357b1107b3599108eb1f8580b", "patch": "@@ -22,7 +22,6 @@ use rt::task::Task;\n use rt::local::Local;\n use option::{Option, Some, None};\n use io;\n-use rt::global_heap;\n \n #[allow(non_camel_case_types)]\n pub type rust_task = c_void;\n@@ -150,13 +149,6 @@ unsafe fn fail_borrowed(box: *mut BoxRepr, file: *c_char, line: size_t) {\n     }\n }\n \n-// FIXME #4942: Make these signatures agree with exchange_alloc's signatures\n-#[lang=\"exchange_malloc\"]\n-#[inline]\n-pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n-    transmute(global_heap::malloc(transmute(td), transmute(size)))\n-}\n-\n /// Because this code is so perf. sensitive, use a static constant so that\n /// debug printouts are compiled out most of the time.\n static ENABLE_DEBUG: bool = false;\n@@ -228,15 +220,6 @@ impl DebugPrints for io::fd_t {\n     }\n }\n \n-// NB: Calls to free CANNOT be allowed to fail, as throwing an exception from\n-// inside a landing pad may corrupt the state of the exception handler. If a\n-// problem occurs, call exit instead.\n-#[lang=\"exchange_free\"]\n-#[inline]\n-pub unsafe fn exchange_free(ptr: *c_char) {\n-    global_heap::free(transmute(ptr))\n-}\n-\n #[lang=\"malloc\"]\n pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     match context() {"}, {"sha": "658d97031ce0aa28910706cd62ba6e289df1404a", "filename": "src/rt/rust_exchange_alloc.cpp", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Frt%2Frust_exchange_alloc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Frt%2Frust_exchange_alloc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_exchange_alloc.cpp?ref=b883d6a54c460f8357b1107b3599108eb1f8580b", "patch": "@@ -15,16 +15,10 @@\n #include <string.h>\n #include <stdio.h>\n \n-extern uintptr_t rust_exchange_count;\n-uintptr_t rust_exchange_count = 0;\n-\n void *\n rust_exchange_alloc::malloc(size_t size) {\n   void *value = ::malloc(size);\n   assert(value);\n-\n-  sync::increment(rust_exchange_count);\n-\n   return value;\n }\n \n@@ -37,15 +31,5 @@ rust_exchange_alloc::realloc(void *ptr, size_t size) {\n \n void\n rust_exchange_alloc::free(void *ptr) {\n-  sync::decrement(rust_exchange_count);\n   ::free(ptr);\n }\n-\n-void\n-rust_check_exchange_count_on_exit() {\n-  if (rust_exchange_count != 0) {\n-    printf(\"exchange heap not empty on exit\\n\");\n-    printf(\"%d dangling allocations\\n\", (int)rust_exchange_count);\n-    abort();\n-  }\n-}"}, {"sha": "9699ef6b5e9d9c1f2c4030b7757d598148e42b8e", "filename": "src/rt/rust_exchange_alloc.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Frt%2Frust_exchange_alloc.h", "raw_url": "https://github.com/rust-lang/rust/raw/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Frt%2Frust_exchange_alloc.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_exchange_alloc.h?ref=b883d6a54c460f8357b1107b3599108eb1f8580b", "patch": "@@ -21,10 +21,4 @@ class rust_exchange_alloc {\n     void free(void *mem);\n };\n \n-extern \"C\" uintptr_t *\n-rust_get_exchange_count_ptr();\n-\n-void\n-rust_check_exchange_count_on_exit();\n-\n #endif"}, {"sha": "583f836c0d66ced9f0b8a6602911f7e0a2f0489b", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=b883d6a54c460f8357b1107b3599108eb1f8580b", "patch": "@@ -211,7 +211,6 @@ rust_kernel::run() {\n     assert(osmain_driver != NULL);\n     osmain_driver->start_main_loop();\n     sched_reaper.join();\n-    rust_check_exchange_count_on_exit();\n     return rval;\n }\n "}, {"sha": "b572f1aba6a5321470f17dfdd584490b38fd37a3", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/b883d6a54c460f8357b1107b3599108eb1f8580b/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=b883d6a54c460f8357b1107b3599108eb1f8580b", "patch": "@@ -196,7 +196,6 @@ rust_register_exit_function\n rust_get_global_data_ptr\n rust_inc_kernel_live_count\n rust_dec_kernel_live_count\n-rust_exchange_count\n rust_get_rt_tls_key\n swap_registers\n rust_readdir"}]}