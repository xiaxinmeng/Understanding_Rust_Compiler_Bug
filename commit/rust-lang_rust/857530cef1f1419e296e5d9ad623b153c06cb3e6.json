{"sha": "857530cef1f1419e296e5d9ad623b153c06cb3e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NzUzMGNlZjFmMTQxOWUyOTZlNWQ5YWQ2MjNiMTUzYzA2Y2IzZTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-02T11:48:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-02T11:48:12Z"}, "message": "liballoc: fix some idiom lints.", "tree": {"sha": "de94fc4c80f394a5e12c54aa23d354ec8ae90609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de94fc4c80f394a5e12c54aa23d354ec8ae90609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/857530cef1f1419e296e5d9ad623b153c06cb3e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/857530cef1f1419e296e5d9ad623b153c06cb3e6", "html_url": "https://github.com/rust-lang/rust/commit/857530cef1f1419e296e5d9ad623b153c06cb3e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/857530cef1f1419e296e5d9ad623b153c06cb3e6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95a95189570001e37712661f46a496cdedce62b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a95189570001e37712661f46a496cdedce62b3", "html_url": "https://github.com/rust-lang/rust/commit/95a95189570001e37712661f46a496cdedce62b3"}], "stats": {"total": 177, "additions": 90, "deletions": 87}, "files": [{"sha": "1fda36778f48681c08950d7e05e368e6c0d55913", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -332,7 +332,7 @@ impl<B: ?Sized> fmt::Debug for Cow<'_, B>\n     where B: fmt::Debug + ToOwned,\n           <B as ToOwned>::Owned: fmt::Debug\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             Borrowed(ref b) => fmt::Debug::fmt(b, f),\n             Owned(ref o) => fmt::Debug::fmt(o, f),\n@@ -345,7 +345,7 @@ impl<B: ?Sized> fmt::Display for Cow<'_, B>\n     where B: fmt::Display + ToOwned,\n           <B as ToOwned>::Owned: fmt::Display\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             Borrowed(ref b) => fmt::Display::fmt(b, f),\n             Owned(ref o) => fmt::Display::fmt(o, f),"}, {"sha": "40b091b92c1a5a95df5a27ff58dd5b9ab5639807", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -605,21 +605,21 @@ impl Box<dyn Any + Send> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Display + ?Sized> fmt::Display for Box<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug + ?Sized> fmt::Debug for Box<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> fmt::Pointer for Box<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // It's not possible to extract the inner Uniq directly from the Box,\n         // instead we cast it to a *const which aliases the Unique\n         let ptr: *const T = &**self;"}, {"sha": "5f0386400d707107c0baf933fd5522729b797418", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -232,7 +232,7 @@ pub struct PeekMut<'a, T: 'a + Ord> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: Ord + fmt::Debug> fmt::Debug for PeekMut<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"PeekMut\")\n          .field(&self.heap.data[0])\n          .finish()\n@@ -295,7 +295,7 @@ impl<T: Ord> Default for BinaryHeap<T> {\n \n #[stable(feature = \"binaryheap_debug\", since = \"1.4.0\")]\n impl<T: fmt::Debug + Ord> fmt::Debug for BinaryHeap<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.iter()).finish()\n     }\n }\n@@ -353,7 +353,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         Iter { iter: self.data.iter() }\n     }\n \n@@ -404,7 +404,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert_eq!(heap.peek(), Some(&2));\n     /// ```\n     #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-    pub fn peek_mut(&mut self) -> Option<PeekMut<T>> {\n+    pub fn peek_mut(&mut self) -> Option<PeekMut<'_, T>> {\n         if self.is_empty() {\n             None\n         } else {\n@@ -765,7 +765,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n-    pub fn drain(&mut self) -> Drain<T> {\n+    pub fn drain(&mut self) -> Drain<'_, T> {\n         Drain { iter: self.data.drain(..) }\n     }\n \n@@ -937,7 +937,7 @@ pub struct Iter<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Iter\")\n          .field(&self.iter.as_slice())\n          .finish()\n@@ -1000,7 +1000,7 @@ pub struct IntoIter<T> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"IntoIter\")\n          .field(&self.iter.as_slice())\n          .finish()"}, {"sha": "fe6b5fef210e16641e1da4faff84f8c39eae102f", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -249,7 +249,7 @@ impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>\n \n     fn replace(&mut self, key: K) -> Option<K> {\n         self.ensure_root_is_owned();\n-        match search::search_tree::<marker::Mut, K, (), K>(self.root.as_mut(), &key) {\n+        match search::search_tree::<marker::Mut<'_>, K, (), K>(self.root.as_mut(), &key) {\n             Found(handle) => Some(mem::replace(handle.into_kv_mut().0, key)),\n             GoDown(handle) => {\n                 VacantEntry {\n@@ -280,7 +280,7 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Iter<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n }\n@@ -315,7 +315,7 @@ pub struct IntoIter<K, V> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let range = Range {\n             front: self.front.reborrow(),\n             back: self.back.reborrow(),\n@@ -338,7 +338,7 @@ pub struct Keys<'a, K: 'a, V: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<K: fmt::Debug, V> fmt::Debug for Keys<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n }\n@@ -357,7 +357,7 @@ pub struct Values<'a, K: 'a, V: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<K, V: fmt::Debug> fmt::Debug for Values<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n }\n@@ -390,7 +390,7 @@ pub struct Range<'a, K: 'a, V: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Range<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n }\n@@ -413,7 +413,7 @@ pub struct RangeMut<'a, K: 'a, V: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for RangeMut<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let range = Range {\n             front: self.front.reborrow(),\n             back: self.back.reborrow(),\n@@ -443,7 +443,7 @@ pub enum Entry<'a, K: 'a, V: 'a> {\n \n #[stable(feature= \"debug_btree_map\", since = \"1.12.0\")]\n impl<K: Debug + Ord, V: Debug> Debug for Entry<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             Vacant(ref v) => f.debug_tuple(\"Entry\")\n                               .field(v)\n@@ -471,7 +471,7 @@ pub struct VacantEntry<'a, K: 'a, V: 'a> {\n \n #[stable(feature= \"debug_btree_map\", since = \"1.12.0\")]\n impl<K: Debug + Ord, V> Debug for VacantEntry<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"VacantEntry\")\n          .field(self.key())\n          .finish()\n@@ -494,7 +494,7 @@ pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n \n #[stable(feature= \"debug_btree_map\", since = \"1.12.0\")]\n impl<K: Debug + Ord, V: Debug> Debug for OccupiedEntry<'_, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"OccupiedEntry\")\n          .field(\"key\", self.key())\n          .field(\"value\", self.get())\n@@ -818,7 +818,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// assert_eq!(Some((&5, &\"b\")), map.range(4..).next());\n     /// ```\n     #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n-    pub fn range<T: ?Sized, R>(&self, range: R) -> Range<K, V>\n+    pub fn range<T: ?Sized, R>(&self, range: R) -> Range<'_, K, V>\n         where T: Ord, K: Borrow<T>, R: RangeBounds<T>\n     {\n         let root1 = self.root.as_ref();\n@@ -859,7 +859,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// }\n     /// ```\n     #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n-    pub fn range_mut<T: ?Sized, R>(&mut self, range: R) -> RangeMut<K, V>\n+    pub fn range_mut<T: ?Sized, R>(&mut self, range: R) -> RangeMut<'_, K, V>\n         where T: Ord, K: Borrow<T>, R: RangeBounds<T>\n     {\n         let root1 = self.root.as_mut();\n@@ -892,7 +892,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// assert_eq!(count[\"a\"], 3);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn entry(&mut self, key: K) -> Entry<K, V> {\n+    pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {\n         // FIXME(@porglezomp) Avoid allocating if we don't insert\n         self.ensure_root_is_owned();\n         match search::search_tree(self.root.as_mut(), &key) {\n@@ -1783,7 +1783,7 @@ impl<K: Ord, V: Ord> Ord for BTreeMap<K, V> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_map().entries(self.iter()).finish()\n     }\n }\n@@ -1940,7 +1940,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!((*first_key, *first_value), (1, \"a\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<K, V> {\n+    pub fn iter(&self) -> Iter<'_, K, V> {\n         Iter {\n             range: Range {\n                 front: first_leaf_edge(self.root.as_ref()),\n@@ -1972,7 +1972,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter_mut(&mut self) -> IterMut<K, V> {\n+    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n         let root1 = self.root.as_mut();\n         let root2 = unsafe { ptr::read(&root1) };\n         IterMut {\n@@ -2049,7 +2049,7 @@ impl<K, V> BTreeMap<K, V> {\n     ///                     String::from(\"goodbye!\")]);\n     /// ```\n     #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n-    pub fn values_mut(&mut self) -> ValuesMut<K, V> {\n+    pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {\n         ValuesMut { inner: self.iter_mut() }\n     }\n "}, {"sha": "a5f90aa8974b666e17628ada50bdcd905196ac9a", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -230,7 +230,7 @@ impl<K, V> Root<K, V> {\n     }\n \n     pub fn as_ref(&self)\n-            -> NodeRef<marker::Immut, K, V, marker::LeafOrInternal> {\n+            -> NodeRef<marker::Immut<'_>, K, V, marker::LeafOrInternal> {\n         NodeRef {\n             height: self.height,\n             node: self.node.as_ptr(),\n@@ -240,7 +240,7 @@ impl<K, V> Root<K, V> {\n     }\n \n     pub fn as_mut(&mut self)\n-            -> NodeRef<marker::Mut, K, V, marker::LeafOrInternal> {\n+            -> NodeRef<marker::Mut<'_>, K, V, marker::LeafOrInternal> {\n         NodeRef {\n             height: self.height,\n             node: self.node.as_ptr(),\n@@ -262,7 +262,7 @@ impl<K, V> Root<K, V> {\n     /// Adds a new internal node with a single edge, pointing to the previous root, and make that\n     /// new node the root. This increases the height by 1 and is the opposite of `pop_level`.\n     pub fn push_level(&mut self)\n-            -> NodeRef<marker::Mut, K, V, marker::Internal> {\n+            -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {\n         debug_assert!(!self.is_shared_root());\n         let mut new_node = Box::new(unsafe { InternalNode::new() });\n         new_node.edges[0].set(unsafe { BoxedNode::from_ptr(self.node.as_ptr()) });\n@@ -535,7 +535,7 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     /// Unsafely asserts to the compiler some static information about whether this\n     /// node is a `Leaf`.\n     unsafe fn cast_unchecked<NewType>(&mut self)\n-            -> NodeRef<marker::Mut, K, V, NewType> {\n+            -> NodeRef<marker::Mut<'_>, K, V, NewType> {\n \n         NodeRef {\n             height: self.height,\n@@ -555,7 +555,7 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     /// of a reborrowed handle, out of bounds.\n     // FIXME(@gereeter) consider adding yet another type parameter to `NodeRef` that restricts\n     // the use of `ascend` and `into_root_mut` on reborrowed pointers, preventing this unsafety.\n-    unsafe fn reborrow_mut(&mut self) -> NodeRef<marker::Mut, K, V, Type> {\n+    unsafe fn reborrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {\n         NodeRef {\n             height: self.height,\n             node: self.node,\n@@ -932,7 +932,7 @@ impl<BorrowType, K, V, NodeType, HandleType>\n \n     /// Temporarily takes out another, immutable handle on the same location.\n     pub fn reborrow(&self)\n-            -> Handle<NodeRef<marker::Immut, K, V, NodeType>, HandleType> {\n+            -> Handle<NodeRef<marker::Immut<'_>, K, V, NodeType>, HandleType> {\n \n         // We can't use Handle::new_kv or Handle::new_edge because we don't know our type\n         Handle {\n@@ -957,7 +957,7 @@ impl<'a, K, V, NodeType, HandleType>\n     // FIXME(@gereeter) consider adding yet another type parameter to `NodeRef` that restricts\n     // the use of `ascend` and `into_root_mut` on reborrowed pointers, preventing this unsafety.\n     pub unsafe fn reborrow_mut(&mut self)\n-            -> Handle<NodeRef<marker::Mut, K, V, NodeType>, HandleType> {\n+            -> Handle<NodeRef<marker::Mut<'_>, K, V, NodeType>, HandleType> {\n \n         // We can't use Handle::new_kv or Handle::new_edge because we don't know our type\n         Handle {\n@@ -1072,7 +1072,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n     /// Unsafely asserts to the compiler some static information about whether the underlying\n     /// node of this handle is a `Leaf`.\n     unsafe fn cast_unchecked<NewType>(&mut self)\n-            -> Handle<NodeRef<marker::Mut, K, V, NewType>, marker::Edge> {\n+            -> Handle<NodeRef<marker::Mut<'_>, K, V, NewType>, marker::Edge> {\n \n         Handle::new_edge(self.node.cast_unchecked(), self.idx)\n     }\n@@ -1562,8 +1562,8 @@ unsafe fn move_kv<K, V>(\n \n // Source and destination must have the same height.\n unsafe fn move_edges<K, V>(\n-    mut source: NodeRef<marker::Mut, K, V, marker::Internal>, source_offset: usize,\n-    mut dest: NodeRef<marker::Mut, K, V, marker::Internal>, dest_offset: usize,\n+    mut source: NodeRef<marker::Mut<'_>, K, V, marker::Internal>, source_offset: usize,\n+    mut dest: NodeRef<marker::Mut<'_>, K, V, marker::Internal>, dest_offset: usize,\n     count: usize)\n {\n     let source_ptr = source.as_internal_mut().edges.as_mut_ptr();"}, {"sha": "ba3b3ed76c82f28dac944da098f8b2609ee92dc1", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -80,7 +80,7 @@ pub struct Iter<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Iter\")\n          .field(&self.iter.clone())\n          .finish()\n@@ -128,7 +128,7 @@ pub struct Difference<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for Difference<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Difference\")\n          .field(&self.a)\n          .field(&self.b)\n@@ -151,7 +151,7 @@ pub struct SymmetricDifference<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for SymmetricDifference<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"SymmetricDifference\")\n          .field(&self.a)\n          .field(&self.b)\n@@ -174,7 +174,7 @@ pub struct Intersection<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for Intersection<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Intersection\")\n          .field(&self.a)\n          .field(&self.b)\n@@ -197,7 +197,7 @@ pub struct Union<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for Union<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Union\")\n          .field(&self.a)\n          .field(&self.b)\n@@ -244,7 +244,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// assert_eq!(Some(&5), set.range(4..).next());\n     /// ```\n     #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n-    pub fn range<K: ?Sized, R>(&self, range: R) -> Range<T>\n+    pub fn range<K: ?Sized, R>(&self, range: R) -> Range<'_, T>\n         where K: Ord, T: Borrow<K>, R: RangeBounds<K>\n     {\n         Range { iter: self.map.range(range) }\n@@ -706,7 +706,7 @@ impl<T> BTreeSet<T> {\n     /// assert_eq!(set_iter.next(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         Iter { iter: self.map.keys() }\n     }\n \n@@ -905,7 +905,7 @@ impl<T: Ord + Clone> BitOr<&BTreeSet<T>> for &BTreeSet<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Debug> Debug for BTreeSet<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_set().entries(self.iter()).finish()\n     }\n }"}, {"sha": "f601fa2c8d190926579b80d9fe008add4f4bcf01", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -64,7 +64,7 @@ pub struct Iter<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Iter\")\n          .field(&self.len)\n          .finish()\n@@ -96,7 +96,7 @@ pub struct IterMut<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"IterMut\")\n          .field(&self.list)\n          .field(&self.len)\n@@ -119,7 +119,7 @@ pub struct IntoIter<T> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"IntoIter\")\n          .field(&self.list)\n          .finish()\n@@ -333,7 +333,7 @@ impl<T> LinkedList<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         Iter {\n             head: self.head,\n             tail: self.tail,\n@@ -367,7 +367,7 @@ impl<T> LinkedList<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter_mut(&mut self) -> IterMut<T> {\n+    pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         IterMut {\n             head: self.head,\n             tail: self.tail,\n@@ -766,7 +766,7 @@ impl<T> LinkedList<T> {\n     /// assert_eq!(odds.into_iter().collect::<Vec<_>>(), vec![1, 3, 5, 9, 11, 13, 15]);\n     /// ```\n     #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n-    pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<T, F>\n+    pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F>\n         where F: FnMut(&mut T) -> bool\n     {\n         // avoid borrow issues.\n@@ -1023,7 +1023,7 @@ impl<T, F> Drop for DrainFilter<'_, T, F>\n impl<T: fmt::Debug, F> fmt::Debug for DrainFilter<'_, T, F>\n     where F: FnMut(&mut T) -> bool\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"DrainFilter\")\n          .field(&self.list)\n          .finish()\n@@ -1166,7 +1166,7 @@ impl<T: Clone> Clone for LinkedList<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug> fmt::Debug for LinkedList<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self).finish()\n     }\n }"}, {"sha": "f92c7ed04f4e3e5d03fb6e392d99058b7c1c2f2d", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -801,7 +801,7 @@ impl<T> VecDeque<T> {\n     /// assert_eq!(&c[..], b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         Iter {\n             tail: self.tail,\n             head: self.head,\n@@ -827,7 +827,7 @@ impl<T> VecDeque<T> {\n     /// assert_eq!(&buf.iter_mut().collect::<Vec<&mut i32>>()[..], b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter_mut(&mut self) -> IterMut<T> {\n+    pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         IterMut {\n             tail: self.tail,\n             head: self.head,\n@@ -961,7 +961,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n-    pub fn drain<R>(&mut self, range: R) -> Drain<T>\n+    pub fn drain<R>(&mut self, range: R) -> Drain<'_, T>\n         where R: RangeBounds<usize>\n     {\n         // Memory safety\n@@ -2127,7 +2127,7 @@ pub struct Iter<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n         f.debug_tuple(\"Iter\")\n             .field(&front)\n@@ -2232,7 +2232,7 @@ pub struct IterMut<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let (front, back) = RingSlices::ring_slices(&*self.ring, self.head, self.tail);\n         f.debug_tuple(\"IterMut\")\n             .field(&front)\n@@ -2323,7 +2323,7 @@ pub struct IntoIter<T> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"IntoIter\")\n          .field(&self.inner)\n          .finish()\n@@ -2381,7 +2381,7 @@ pub struct Drain<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for Drain<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Drain\")\n          .field(&self.after_tail)\n          .field(&self.after_head)\n@@ -2657,7 +2657,7 @@ impl<'a, T: 'a + Copy> Extend<&'a T> for VecDeque<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug> fmt::Debug for VecDeque<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self).finish()\n     }\n }"}, {"sha": "a8a99c7e7a3d35e74031dd541f5e46b4c0015b69", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -552,7 +552,7 @@ use crate::string;\n /// [`format_args!`]: ../../std/macro.format_args.html\n /// [`format!`]: ../../std/macro.format.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn format(args: Arguments) -> string::String {\n+pub fn format(args: Arguments<'_>) -> string::String {\n     let capacity = args.estimated_capacity();\n     let mut output = string::String::with_capacity(capacity);\n     output"}, {"sha": "ab0ade7e5547c68302668b54671c23f46ba87c51", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -63,6 +63,9 @@\n #![no_std]\n #![needs_allocator]\n \n+#![deny(rust_2018_idioms)]\n+#![allow(explicit_outlives_requirements)]\n+\n #![warn(deprecated_in_future)]\n #![warn(intra_doc_link_resolution_failure)]\n #![warn(missing_debug_implementations)]"}, {"sha": "01a26b6f4233758171a6e21329b15417e10ca411", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -1122,21 +1122,21 @@ impl<T: ?Sized + Hash> Hash for Rc<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + fmt::Display> fmt::Display for Rc<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for Rc<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> fmt::Pointer for Rc<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&(&**self as *const T), f)\n     }\n }\n@@ -1460,7 +1460,7 @@ impl<T: ?Sized> Clone for Weak<T> {\n \n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"(Weak)\")\n     }\n }"}, {"sha": "cb497f5bde21233006272eb339e3fdce9046dc08", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -1494,7 +1494,7 @@ impl String {\n     /// assert_eq!(s, \"\");\n     /// ```\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n-    pub fn drain<R>(&mut self, range: R) -> Drain\n+    pub fn drain<R>(&mut self, range: R) -> Drain<'_>\n         where R: RangeBounds<usize>\n     {\n         // Memory safety\n@@ -1678,14 +1678,14 @@ impl FromUtf8Error {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for FromUtf8Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.error, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for FromUtf16Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(\"invalid utf-16: lone surrogate found\", f)\n     }\n }\n@@ -1876,15 +1876,15 @@ impl Default for String {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for String {\n     #[inline]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for String {\n     #[inline]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&**self, f)\n     }\n }\n@@ -2106,14 +2106,14 @@ impl Clone for ParseError {\n \n #[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n impl fmt::Debug for ParseError {\n-    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {}\n     }\n }\n \n #[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n impl fmt::Display for ParseError {\n-    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {}\n     }\n }\n@@ -2374,7 +2374,7 @@ pub struct Drain<'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl fmt::Debug for Drain<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Drain { .. }\")\n     }\n }"}, {"sha": "52f8879d1844b41cbaab2f825b090f6e0d1e8c27", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -257,7 +257,7 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Weak<U>> for Weak<T> {}\n \n #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"(Weak)\")\n     }\n }\n@@ -1554,21 +1554,21 @@ impl<T: ?Sized + Eq> Eq for Arc<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + fmt::Display> fmt::Display for Arc<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for Arc<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> fmt::Pointer for Arc<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&(&**self as *const T), f)\n     }\n }"}, {"sha": "66a73e7579951e4b6182608f389234719a46197b", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857530cef1f1419e296e5d9ad623b153c06cb3e6/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=857530cef1f1419e296e5d9ad623b153c06cb3e6", "patch": "@@ -1122,7 +1122,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(v, &[]);\n     /// ```\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n-    pub fn drain<R>(&mut self, range: R) -> Drain<T>\n+    pub fn drain<R>(&mut self, range: R) -> Drain<'_, T>\n         where R: RangeBounds<usize>\n     {\n         // Memory safety\n@@ -1979,7 +1979,7 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n-    pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<I::IntoIter>\n+    pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter>\n         where R: RangeBounds<usize>, I: IntoIterator<Item=T>\n     {\n         Splice {\n@@ -2034,7 +2034,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);\n     /// ```\n     #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n-    pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<T, F>\n+    pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F>\n         where F: FnMut(&mut T) -> bool,\n     {\n         let old_len = self.len();\n@@ -2150,7 +2150,7 @@ impl<T> Default for Vec<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug> fmt::Debug for Vec<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&**self, f)\n     }\n }\n@@ -2293,7 +2293,7 @@ pub struct IntoIter<T> {\n \n #[stable(feature = \"vec_intoiter_debug\", since = \"1.13.0\")]\n impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"IntoIter\")\n             .field(&self.as_slice())\n             .finish()\n@@ -2463,7 +2463,7 @@ pub struct Drain<'a, T: 'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Drain\")\n          .field(&self.iter.as_slice())\n          .finish()\n@@ -2652,7 +2652,7 @@ impl<T> Drain<'_, T> {\n /// An iterator produced by calling `drain_filter` on Vec.\n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n #[derive(Debug)]\n-pub struct DrainFilter<'a, T: 'a, F>\n+pub struct DrainFilter<'a, T, F>\n     where F: FnMut(&mut T) -> bool,\n {\n     vec: &'a mut Vec<T>,"}]}