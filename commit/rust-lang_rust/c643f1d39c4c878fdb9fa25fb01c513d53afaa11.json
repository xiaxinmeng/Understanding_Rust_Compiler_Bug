{"sha": "c643f1d39c4c878fdb9fa25fb01c513d53afaa11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NDNmMWQzOWM0Yzg3OGZkYjlmYTI1ZmIwMWM1MTNkNTNhZmFhMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-24T12:51:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-24T12:51:21Z"}, "message": "auto merge of #8732 : kballard/rust/str-truncate, r=thestinger", "tree": {"sha": "1ba8ea546921e58919e92f4ae3351d0746f3d76b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ba8ea546921e58919e92f4ae3351d0746f3d76b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c643f1d39c4c878fdb9fa25fb01c513d53afaa11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c643f1d39c4c878fdb9fa25fb01c513d53afaa11", "html_url": "https://github.com/rust-lang/rust/commit/c643f1d39c4c878fdb9fa25fb01c513d53afaa11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c643f1d39c4c878fdb9fa25fb01c513d53afaa11/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db5615ddd5c315af115bbcca6a9a0d7ac79f6088", "url": "https://api.github.com/repos/rust-lang/rust/commits/db5615ddd5c315af115bbcca6a9a0d7ac79f6088", "html_url": "https://github.com/rust-lang/rust/commit/db5615ddd5c315af115bbcca6a9a0d7ac79f6088"}, {"sha": "6b4ceff610c4a9063d44e1e422470075c234111d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b4ceff610c4a9063d44e1e422470075c234111d", "html_url": "https://github.com/rust-lang/rust/commit/6b4ceff610c4a9063d44e1e422470075c234111d"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "c57df2137860be6e0ed8ebd38166746189070a7d", "filename": "src/libstd/str.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c643f1d39c4c878fdb9fa25fb01c513d53afaa11/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643f1d39c4c878fdb9fa25fb01c513d53afaa11/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=c643f1d39c4c878fdb9fa25fb01c513d53afaa11", "patch": "@@ -2107,6 +2107,7 @@ pub trait OwnedStr {\n     fn reserve(&mut self, n: uint);\n     fn reserve_at_least(&mut self, n: uint);\n     fn capacity(&self) -> uint;\n+    fn truncate(&mut self, len: uint);\n \n     /// Work with the mutable byte buffer and length of a slice.\n     ///\n@@ -2264,6 +2265,15 @@ impl OwnedStr for ~str {\n         }\n     }\n \n+    /// Shorten a string to the specified length (which must be <= the current length)\n+    #[inline]\n+    fn truncate(&mut self, len: uint) {\n+        assert!(len <= self.len());\n+        assert!(self.is_char_boundary(len));\n+        unsafe { raw::set_len(self, len); }\n+    }\n+\n+\n     #[inline]\n     fn as_mut_buf<T>(&mut self, f: &fn(*mut u8, uint) -> T) -> T {\n         let v: &mut ~[u8] = unsafe { cast::transmute(self) };\n@@ -3482,6 +3492,38 @@ mod tests {\n         assert_eq!(5, sum_len([~\"01\", ~\"2\", ~\"34\", ~\"\"]));\n         assert_eq!(5, sum_len([s.as_slice()]));\n     }\n+\n+    #[test]\n+    fn test_str_truncate() {\n+        let mut s = ~\"12345\";\n+        s.truncate(5);\n+        assert_eq!(s.as_slice(), \"12345\");\n+        s.truncate(3);\n+        assert_eq!(s.as_slice(), \"123\");\n+        s.truncate(0);\n+        assert_eq!(s.as_slice(), \"\");\n+\n+        let mut s = ~\"12345\";\n+        let p = s.as_imm_buf(|p,_| p);\n+        s.truncate(3);\n+        s.push_str(\"6\");\n+        let p_ = s.as_imm_buf(|p,_| p);\n+        assert_eq!(p_, p);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_str_truncate_invalid_len() {\n+        let mut s = ~\"12345\";\n+        s.truncate(6);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_str_truncate_split_codepoint() {\n+        let mut s = ~\"\\u00FC\"; // \u00fc\n+        s.truncate(1);\n+    }\n }\n \n #[cfg(test)]"}]}