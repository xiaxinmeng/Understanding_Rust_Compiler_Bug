{"sha": "89698b9613179a1c025ce61fc17334a3ff315598", "node_id": "C_kwDOAAsO6NoAKDg5Njk4Yjk2MTMxNzlhMWMwMjVjZTYxZmMxNzMzNGEzZmYzMTU1OTg", "commit": {"author": {"name": "Nahua Kang", "email": "kangnahua@gmail.com", "date": "2022-08-04T21:46:41Z"}, "committer": {"name": "Nahua Kang", "email": "kangnahua@gmail.com", "date": "2022-08-19T17:49:16Z"}, "message": "Extend and improve initial test cases for collapsible_str_replace", "tree": {"sha": "05f8341c9edf81f52960e6ec12638133f65b8548", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f8341c9edf81f52960e6ec12638133f65b8548"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89698b9613179a1c025ce61fc17334a3ff315598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89698b9613179a1c025ce61fc17334a3ff315598", "html_url": "https://github.com/rust-lang/rust/commit/89698b9613179a1c025ce61fc17334a3ff315598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89698b9613179a1c025ce61fc17334a3ff315598/comments", "author": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4413f75bf829549fdc0f01a834988d1128d6ba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4413f75bf829549fdc0f01a834988d1128d6ba9", "html_url": "https://github.com/rust-lang/rust/commit/a4413f75bf829549fdc0f01a834988d1128d6ba9"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "0f4bdf094808cbf8991825ba54953697414b9cb8", "filename": "tests/ui/collapsible_str_replace.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/89698b9613179a1c025ce61fc17334a3ff315598/tests%2Fui%2Fcollapsible_str_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89698b9613179a1c025ce61fc17334a3ff315598/tests%2Fui%2Fcollapsible_str_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_str_replace.rs?ref=89698b9613179a1c025ce61fc17334a3ff315598", "patch": "@@ -1,44 +1,70 @@\n #![warn(clippy::collapsible_str_replace)]\n \n+fn get_filter() -> &'static str {\n+    \"u\"\n+}\n+\n fn main() {\n     let misspelled = \"hesuo worpd\";\n \n     let p = 'p';\n     let s = 's';\n     let u = 'u';\n \n+    // LINT CASES\n     // If the first argument to a single `str::replace` call is a slice and none of the chars\n     // are variables, recommend `collapsible_str_replace`\n     let replacement = misspelled.replace(&['s', 'u', 'p'], \"l\");\n     println!(\"{replacement}\");\n \n-    // The first iteration of `collapsible_str_replace` will not create lint if the first argument to\n-    // a single `str::replace` call is a slice and one or more of its chars are variables\n-    let replacement = misspelled.replace(&['s', u, 'p'], \"l\");\n-    println!(\"{replacement}\");\n-\n-    let replacement = misspelled.replace(&[s, u, 'p'], \"l\");\n+    // If there are consecutive calls to `str::replace` and none of the chars are variables,\n+    // recommend `collapsible_str_replace`\n+    let replacement = misspelled.replace('s', \"l\").replace('u', \"l\");\n     println!(\"{replacement}\");\n \n-    let replacement = misspelled.replace(&[s, u, p], \"l\");\n+    let replacement = misspelled.replace('s', \"l\").replace('u', \"l\").replace('p', \"l\");\n     println!(\"{replacement}\");\n \n-    // If there is a single call to `str::replace` and the first argument is a char or a variable, don't\n-    // not recommend `collapsible_str_replace`\n+    // NO LINT CASES\n+    // If there is a single call to `str::replace` and the first argument is a char or a variable,\n+    // do not recommend `collapsible_str_replace`\n     let replacement = misspelled.replace('s', \"l\");\n     println!(\"{replacement}\");\n \n     let replacement = misspelled.replace(s, \"l\");\n     println!(\"{replacement}\");\n \n-    // If there are consecutive calls to `str::replace` and none of the chars are variables,\n-    // recommend `collapsible_str_replace`\n-    let replacement = misspelled.replace('s', \"l\").replace('u', \"l\");\n+    // If the `from` argument is of kind other than a slice or a char, do not lint\n+    let replacement = misspelled.replace(&get_filter(), \"l\");\n+\n+    // NO LINT TIL IMPROVEMENT\n+    // If multiple `str::replace` calls contain slices and none of the chars are variables,\n+    // the first iteration does not recommend `collapsible_str_replace`\n+    let replacement = misspelled.replace(&['s', 'u', 'p'], \"l\").replace(&['s', 'p'], \"l\");\n     println!(\"{replacement}\");\n \n-    let replacement = misspelled.replace('s', \"l\").replace('u', \"l\").replace('p', \"l\");\n+    // If a mixture of `str::replace` calls with slice and char arguments are used for `from` arg,\n+    // the first iteration does not recommend `collapsible_str_replace`\n+    let replacement = misspelled.replace(&['s', 'u'], \"l\").replace('p', \"l\");\n+    println!(\"replacement\");\n+\n+    let replacement = misspelled.replace('p', \"l\").replace(&['s', 'u'], \"l\");\n+\n+    // The first iteration of `collapsible_str_replace` will not create lint if the first argument to\n+    // a single `str::replace` call is a slice and one or more of its chars are variables\n+    let replacement = misspelled.replace(&['s', u, 'p'], \"l\");\n+    println!(\"{replacement}\");\n+\n+    let replacement = misspelled.replace(&[s, u, 'p'], \"l\");\n+    println!(\"{replacement}\");\n+\n+    let replacement = misspelled.replace(&[s, u, p], \"l\");\n+    println!(\"{replacement}\");\n+\n+    let replacement = misspelled.replace(&[s, u], \"l\").replace(&[u, p], \"l\");\n     println!(\"{replacement}\");\n \n+    // FALLBACK CASES\n     // If there are consecutive calls to `str::replace` and all or any chars are variables,\n     // recommend the fallback `misspelled.replace(&[s, u, p], \"l\")`\n     let replacement = misspelled.replace(s, \"l\").replace('u', \"l\");"}]}