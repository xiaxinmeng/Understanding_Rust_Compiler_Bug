{"sha": "505846ec07c1303369358a1c3358c7d7ee0ca12e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNTg0NmVjMDdjMTMwMzM2OTM1OGExYzMzNThjN2Q3ZWUwY2ExMmU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-07T11:07:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-07T11:07:06Z"}, "message": "Rollup merge of #83476 - mystor:rc_mutate_strong_count, r=m-ou-se\n\nAdd strong_count mutation methods to Rc\n\nThe corresponding methods were stabilized on `Arc` in #79285 (tracking: #71983). This patch implements and stabilizes identical methods on the `Rc` types as well.", "tree": {"sha": "54841e777a4af849b43003dcdb19b4e22e781a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54841e777a4af849b43003dcdb19b4e22e781a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/505846ec07c1303369358a1c3358c7d7ee0ca12e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbZJaCRBK7hj4Ov3rIwAAdHIIABhKdpD5iQhvSlv4fAp5j49K\nlezVZXqe1LPgZ5Kj7CY3tvhnmFMFnRZt4LrNCJfkkZJLcV6jxi59Kpcp+VXs6hA0\nFxRmEt0w51Hi++a8FEBilGLxAePk5OriW10wP6t9e3Tx5Pq++V9Ma/X4+y7iXWO2\naGx455wo1GcMEr6ssQbmgaOqMloNRZsgidTjRN/9dpSZj8yS7Z72D2yiZeNEdIzv\nDrpZMhM3WRDt4AG7rQ8gp3/jlVHikw8rKIJPHdTU1Cnq5aeI3XpvsU8tUQTYFB6p\nhiTH4jfwQKx0bX1mTGgYKzSJbK+BLDQeiqfvg4Kf/yXZonOswuo52cYHq27YF10=\n=1jRU\n-----END PGP SIGNATURE-----\n", "payload": "tree 54841e777a4af849b43003dcdb19b4e22e781a17\nparent 1c158b6a8b440f826d952c3a8f42bdc3f77a5ac1\nparent a591d7ab9004f5b653b6f135c4a79bd3104a44a4\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617793626 +0200\ncommitter GitHub <noreply@github.com> 1617793626 +0200\n\nRollup merge of #83476 - mystor:rc_mutate_strong_count, r=m-ou-se\n\nAdd strong_count mutation methods to Rc\n\nThe corresponding methods were stabilized on `Arc` in #79285 (tracking: #71983). This patch implements and stabilizes identical methods on the `Rc` types as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/505846ec07c1303369358a1c3358c7d7ee0ca12e", "html_url": "https://github.com/rust-lang/rust/commit/505846ec07c1303369358a1c3358c7d7ee0ca12e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/505846ec07c1303369358a1c3358c7d7ee0ca12e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c158b6a8b440f826d952c3a8f42bdc3f77a5ac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c158b6a8b440f826d952c3a8f42bdc3f77a5ac1", "html_url": "https://github.com/rust-lang/rust/commit/1c158b6a8b440f826d952c3a8f42bdc3f77a5ac1"}, {"sha": "a591d7ab9004f5b653b6f135c4a79bd3104a44a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a591d7ab9004f5b653b6f135c4a79bd3104a44a4", "html_url": "https://github.com/rust-lang/rust/commit/a591d7ab9004f5b653b6f135c4a79bd3104a44a4"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "c81ababf1519d290a2512a881df3d91c31595e53", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/505846ec07c1303369358a1c3358c7d7ee0ca12e/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505846ec07c1303369358a1c3358c7d7ee0ca12e/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=505846ec07c1303369358a1c3358c7d7ee0ca12e", "patch": "@@ -910,6 +910,73 @@ impl<T: ?Sized> Rc<T> {\n         this.inner().strong()\n     }\n \n+    /// Increments the strong reference count on the `Rc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Rc::into_raw`, and the\n+    /// associated `Rc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) for the duration of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Rc::into_raw(five);\n+    ///     Rc::increment_strong_count(ptr);\n+    ///\n+    ///     let five = Rc::from_raw(ptr);\n+    ///     assert_eq!(2, Rc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rc_mutate_strong_count\", since = \"1.53.0\")]\n+    pub unsafe fn increment_strong_count(ptr: *const T) {\n+        // Retain Rc, but don't touch refcount by wrapping in ManuallyDrop\n+        let rc = unsafe { mem::ManuallyDrop::new(Rc::<T>::from_raw(ptr)) };\n+        // Now increase refcount, but don't drop new refcount either\n+        let _rc_clone: mem::ManuallyDrop<_> = rc.clone();\n+    }\n+\n+    /// Decrements the strong reference count on the `Rc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Rc::into_raw`, and the\n+    /// associated `Rc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) when invoking this method. This method can be used to release\n+    /// the final `Rc` and backing storage, but **should not** be called after\n+    /// the final `Rc` has been released.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Rc::into_raw(five);\n+    ///     Rc::increment_strong_count(ptr);\n+    ///\n+    ///     let five = Rc::from_raw(ptr);\n+    ///     assert_eq!(2, Rc::strong_count(&five));\n+    ///     Rc::decrement_strong_count(ptr);\n+    ///     assert_eq!(1, Rc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rc_mutate_strong_count\", since = \"1.53.0\")]\n+    pub unsafe fn decrement_strong_count(ptr: *const T) {\n+        unsafe { mem::drop(Rc::from_raw(ptr)) };\n+    }\n+\n     /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to\n     /// this allocation.\n     #[inline]"}]}