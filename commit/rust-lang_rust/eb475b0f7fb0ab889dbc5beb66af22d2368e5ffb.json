{"sha": "eb475b0f7fb0ab889dbc5beb66af22d2368e5ffb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNDc1YjBmN2ZiMGFiODg5ZGJjNWJlYjY2YWYyMmQyMzY4ZTVmZmI=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-01-30T20:37:34Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-02-11T21:08:20Z"}, "message": "Document stable versions of  memory-related intrinsics", "tree": {"sha": "a16a452c29ab7c0982d0971add6bfdb36589f15c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a16a452c29ab7c0982d0971add6bfdb36589f15c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb475b0f7fb0ab889dbc5beb66af22d2368e5ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb475b0f7fb0ab889dbc5beb66af22d2368e5ffb", "html_url": "https://github.com/rust-lang/rust/commit/eb475b0f7fb0ab889dbc5beb66af22d2368e5ffb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb475b0f7fb0ab889dbc5beb66af22d2368e5ffb/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "216f100dfcd00891ea1f6684df77fc87711453ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/216f100dfcd00891ea1f6684df77fc87711453ed", "html_url": "https://github.com/rust-lang/rust/commit/216f100dfcd00891ea1f6684df77fc87711453ed"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "1414217e9717493831c665b06df8b8dcb4f7383b", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eb475b0f7fb0ab889dbc5beb66af22d2368e5ffb/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb475b0f7fb0ab889dbc5beb66af22d2368e5ffb/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=eb475b0f7fb0ab889dbc5beb66af22d2368e5ffb", "patch": "@@ -855,8 +855,15 @@ extern \"rust-intrinsic\" {\n     /// Moves a value to an uninitialized memory location.\n     ///\n     /// Drop glue is not run on the destination.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::ptr::write`](../../std/ptr/fn.write.html).\n     pub fn move_val_init<T>(dst: *mut T, src: T);\n \n+    /// The minimum alignment of a type.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::mem::align_of`](../../std/mem/fn.align_of.html).\n     #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n     pub fn min_align_of<T>() -> usize;\n     #[rustc_const_unstable(feature = \"const_pref_align_of\", issue = \"none\")]\n@@ -867,6 +874,10 @@ extern \"rust-intrinsic\" {\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::size_of_val`](../../std/mem/fn.size_of_val.html).\n     pub fn size_of_val<T: ?Sized>(_: &T) -> usize;\n+    /// The minimum alignment of the type of the value that `val` points to.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::mem::min_align_of_val`](../../std/mem/fn.min_align_of_val.html).\n     pub fn min_align_of_val<T: ?Sized>(_: &T) -> usize;\n \n     /// Gets a static string slice containing the name of a type.\n@@ -897,6 +908,9 @@ extern \"rust-intrinsic\" {\n     /// which is unsafe unless `T` is `Copy`. Also, even if T is\n     /// `Copy`, an all-zero value may not correspond to any legitimate\n     /// state for the type in question.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::mem::zeroed`](../../std/mem/fn.zeroed.html).\n     #[unstable(\n         feature = \"core_intrinsics\",\n         reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n@@ -914,6 +928,9 @@ extern \"rust-intrinsic\" {\n     /// state, which means it may claim either dropped or\n     /// undropped. In the general case one must use `ptr::write` to\n     /// initialize memory previous set to the result of `uninit`.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::mem::MaybeUninit`](../../std/mem/union.MaybeUninit.html).\n     #[unstable(\n         feature = \"core_intrinsics\",\n         reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n@@ -1159,6 +1176,9 @@ extern \"rust-intrinsic\" {\n     /// byte past the end of an allocated object. If either pointer is out of\n     /// bounds or arithmetic overflow occurs then any further use of the\n     /// returned value will result in undefined behavior.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::pointer::offset`](../../std/primitive.pointer.html#method.offset).\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Calculates the offset from a pointer, potentially wrapping.\n@@ -1172,6 +1192,9 @@ extern \"rust-intrinsic\" {\n     /// resulting pointer to point into or one byte past the end of an allocated\n     /// object, and it wraps with two's complement arithmetic. The resulting\n     /// value is not necessarily valid to be used to actually access memory.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::pointer::wrapping_offset`](../../std/primitive.pointer.html#method.wrapping_offset).\n     pub fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n@@ -1626,6 +1649,8 @@ extern \"rust-intrinsic\" {\n \n     /// Returns the value of the discriminant for the variant in 'v',\n     /// cast to a `u64`; if `T` has no discriminant, returns 0.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::mem::discriminant`](../../std/mem/fn.discriminant.html)\n     pub fn discriminant_value<T>(v: &T) -> u64;\n \n     /// Rust's \"try catch\" construct which invokes the function pointer `f` with"}]}