{"sha": "0006216c9d83dabed3f13f5ed231c152561ceb6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMDYyMTZjOWQ4M2RhYmVkM2YxM2Y1ZWQyMzFjMTUyNTYxY2ViNmE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-28T08:23:41Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-28T08:24:04Z"}, "message": "rustc_apfloat: make the crate #![no_std] explicitly.", "tree": {"sha": "5f791c5b089b7e12ae30785c95b5c30cdb0fa015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f791c5b089b7e12ae30785c95b5c30cdb0fa015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0006216c9d83dabed3f13f5ed231c152561ceb6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0006216c9d83dabed3f13f5ed231c152561ceb6a", "html_url": "https://github.com/rust-lang/rust/commit/0006216c9d83dabed3f13f5ed231c152561ceb6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0006216c9d83dabed3f13f5ed231c152561ceb6a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd48e6f166739344528a5fff4f02516b77d7916", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd48e6f166739344528a5fff4f02516b77d7916", "html_url": "https://github.com/rust-lang/rust/commit/bbd48e6f166739344528a5fff4f02516b77d7916"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "18d968fbddd9b6b319798a369251ec85bab2bce0", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0006216c9d83dabed3f13f5ed231c152561ceb6a/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0006216c9d83dabed3f13f5ed231c152561ceb6a/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=0006216c9d83dabed3f13f5ed231c152561ceb6a", "patch": "@@ -1,13 +1,13 @@\n use crate::{Category, ExpInt, IEK_INF, IEK_NAN, IEK_ZERO};\n use crate::{Float, FloatConvert, ParseError, Round, Status, StatusAnd};\n \n+use core::cmp::{self, Ordering};\n+use core::convert::TryFrom;\n+use core::fmt::{self, Write};\n+use core::marker::PhantomData;\n+use core::mem;\n+use core::ops::Neg;\n use smallvec::{SmallVec, smallvec};\n-use std::cmp::{self, Ordering};\n-use std::convert::TryFrom;\n-use std::fmt::{self, Write};\n-use std::marker::PhantomData;\n-use std::mem;\n-use std::ops::Neg;\n \n #[must_use]\n pub struct IeeeFloat<S> {\n@@ -2287,8 +2287,8 @@ impl Loss {\n /// Implementation details of IeeeFloat significands, such as big integer arithmetic.\n /// As a rule of thumb, no functions in this module should dynamically allocate.\n mod sig {\n-    use std::cmp::Ordering;\n-    use std::mem;\n+    use core::cmp::Ordering;\n+    use core::mem;\n     use super::{ExpInt, Limb, LIMB_BITS, limbs_for_bits, Loss};\n \n     pub(super) fn is_all_zeros(limbs: &[Limb]) -> bool {"}, {"sha": "1190cea21acc3cf364b89018d7798462f9b7c4b2", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0006216c9d83dabed3f13f5ed231c152561ceb6a/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0006216c9d83dabed3f13f5ed231c152561ceb6a/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=0006216c9d83dabed3f13f5ed231c152561ceb6a", "patch": "@@ -31,15 +31,19 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![no_std]\n #![forbid(unsafe_code)]\n \n #![feature(nll)]\n \n-use std::cmp::Ordering;\n-use std::fmt;\n-use std::ops::{Neg, Add, Sub, Mul, Div, Rem};\n-use std::ops::{AddAssign, SubAssign, MulAssign, DivAssign, RemAssign};\n-use std::str::FromStr;\n+#[macro_use]\n+extern crate alloc;\n+\n+use core::cmp::Ordering;\n+use core::fmt;\n+use core::ops::{Neg, Add, Sub, Mul, Div, Rem};\n+use core::ops::{AddAssign, SubAssign, MulAssign, DivAssign, RemAssign};\n+use core::str::FromStr;\n \n bitflags::bitflags! {\n     /// IEEE-754R 7: Default exception handling.\n@@ -587,7 +591,7 @@ macro_rules! float_common_impls {\n             }\n         }\n \n-        impl<$t> ::std::str::FromStr for $ty<$t> where Self: Float {\n+        impl<$t> ::core::str::FromStr for $ty<$t> where Self: Float {\n             type Err = ParseError;\n             fn from_str(s: &str) -> Result<Self, ParseError> {\n                 Self::from_str_r(s, Round::NearestTiesToEven).map(|x| x.value)\n@@ -596,66 +600,66 @@ macro_rules! float_common_impls {\n \n         // Rounding ties to the nearest even, by default.\n \n-        impl<$t> ::std::ops::Add for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::Add for $ty<$t> where Self: Float {\n             type Output = StatusAnd<Self>;\n             fn add(self, rhs: Self) -> StatusAnd<Self> {\n                 self.add_r(rhs, Round::NearestTiesToEven)\n             }\n         }\n \n-        impl<$t> ::std::ops::Sub for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::Sub for $ty<$t> where Self: Float {\n             type Output = StatusAnd<Self>;\n             fn sub(self, rhs: Self) -> StatusAnd<Self> {\n                 self.sub_r(rhs, Round::NearestTiesToEven)\n             }\n         }\n \n-        impl<$t> ::std::ops::Mul for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::Mul for $ty<$t> where Self: Float {\n             type Output = StatusAnd<Self>;\n             fn mul(self, rhs: Self) -> StatusAnd<Self> {\n                 self.mul_r(rhs, Round::NearestTiesToEven)\n             }\n         }\n \n-        impl<$t> ::std::ops::Div for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::Div for $ty<$t> where Self: Float {\n             type Output = StatusAnd<Self>;\n             fn div(self, rhs: Self) -> StatusAnd<Self> {\n                 self.div_r(rhs, Round::NearestTiesToEven)\n             }\n         }\n \n-        impl<$t> ::std::ops::Rem for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::Rem for $ty<$t> where Self: Float {\n             type Output = StatusAnd<Self>;\n             fn rem(self, rhs: Self) -> StatusAnd<Self> {\n                 self.c_fmod(rhs)\n             }\n         }\n \n-        impl<$t> ::std::ops::AddAssign for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::AddAssign for $ty<$t> where Self: Float {\n             fn add_assign(&mut self, rhs: Self) {\n                 *self = (*self + rhs).value;\n             }\n         }\n \n-        impl<$t> ::std::ops::SubAssign for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::SubAssign for $ty<$t> where Self: Float {\n             fn sub_assign(&mut self, rhs: Self) {\n                 *self = (*self - rhs).value;\n             }\n         }\n \n-        impl<$t> ::std::ops::MulAssign for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::MulAssign for $ty<$t> where Self: Float {\n             fn mul_assign(&mut self, rhs: Self) {\n                 *self = (*self * rhs).value;\n             }\n         }\n \n-        impl<$t> ::std::ops::DivAssign for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::DivAssign for $ty<$t> where Self: Float {\n             fn div_assign(&mut self, rhs: Self) {\n                 *self = (*self / rhs).value;\n             }\n         }\n \n-        impl<$t> ::std::ops::RemAssign for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::RemAssign for $ty<$t> where Self: Float {\n             fn rem_assign(&mut self, rhs: Self) {\n                 *self = (*self % rhs).value;\n             }"}, {"sha": "8e2e390568e48261e5e0ea262dfd89a64ad07bc4", "filename": "src/librustc_apfloat/ppc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0006216c9d83dabed3f13f5ed231c152561ceb6a/src%2Flibrustc_apfloat%2Fppc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0006216c9d83dabed3f13f5ed231c152561ceb6a/src%2Flibrustc_apfloat%2Fppc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fppc.rs?ref=0006216c9d83dabed3f13f5ed231c152561ceb6a", "patch": "@@ -1,9 +1,9 @@\n use crate::{Category, ExpInt, Float, FloatConvert, Round, ParseError, Status, StatusAnd};\n use crate::ieee;\n \n-use std::cmp::Ordering;\n-use std::fmt;\n-use std::ops::Neg;\n+use core::cmp::Ordering;\n+use core::fmt;\n+use core::ops::Neg;\n \n #[must_use]\n #[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]"}]}