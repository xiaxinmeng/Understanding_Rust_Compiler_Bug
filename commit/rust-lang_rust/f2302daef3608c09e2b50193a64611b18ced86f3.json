{"sha": "f2302daef3608c09e2b50193a64611b18ced86f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMzAyZGFlZjM2MDhjMDllMmI1MDE5M2E2NDYxMWIxOGNlZDg2ZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-12T21:20:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-12T21:20:05Z"}, "message": "Auto merge of #53409 - GuillaumeGomez:associated-const-value, r=QuietMisdreavus\n\nDon't show associated const value anymore\n\nPart of #44348.\n\nBefore:\n\n<img width=\"1440\" alt=\"screen shot 2018-08-16 at 00 48 30\" src=\"https://user-images.githubusercontent.com/3050060/44177414-20ef1480-a0ee-11e8-80d4-7caf082cf0de.png\">\n\nAfter:\n\n<img width=\"1440\" alt=\"screen shot 2018-08-16 at 00 48 23\" src=\"https://user-images.githubusercontent.com/3050060/44177417-251b3200-a0ee-11e8-956a-4229275e3342.png\">\n\ncc @nox\n\nr? @QuietMisdreavus", "tree": {"sha": "587c28333ce12e085b33c5890e70f4303a162c10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/587c28333ce12e085b33c5890e70f4303a162c10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2302daef3608c09e2b50193a64611b18ced86f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2302daef3608c09e2b50193a64611b18ced86f3", "html_url": "https://github.com/rust-lang/rust/commit/f2302daef3608c09e2b50193a64611b18ced86f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2302daef3608c09e2b50193a64611b18ced86f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06d2448f1fde4005bddd2f349f9dce4c79adce65", "url": "https://api.github.com/repos/rust-lang/rust/commits/06d2448f1fde4005bddd2f349f9dce4c79adce65", "html_url": "https://github.com/rust-lang/rust/commit/06d2448f1fde4005bddd2f349f9dce4c79adce65"}, {"sha": "86141797dbeb406a6b0a7c6442cc715d3f7bcc75", "url": "https://api.github.com/repos/rust-lang/rust/commits/86141797dbeb406a6b0a7c6442cc715d3f7bcc75", "html_url": "https://github.com/rust-lang/rust/commit/86141797dbeb406a6b0a7c6442cc715d3f7bcc75"}], "stats": {"total": 104, "additions": 31, "deletions": 73}, "files": [{"sha": "867b2a329057b5f40f4265eff4fdae879e14c752", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f2302daef3608c09e2b50193a64611b18ced86f3", "patch": "@@ -2213,8 +2213,7 @@ fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Re\n         info!(\"Documenting {}\", name);\n     }\n     document_stability(w, cx, item)?;\n-    let prefix = render_assoc_const_value(item);\n-    document_full(w, item, cx, &prefix)?;\n+    document_full(w, item, cx, \"\")?;\n     Ok(())\n }\n \n@@ -2246,20 +2245,6 @@ fn document_short(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item, link\n     Ok(())\n }\n \n-fn render_assoc_const_value(item: &clean::Item) -> String {\n-    match item.inner {\n-        clean::AssociatedConstItem(ref ty, Some(ref default)) => {\n-            highlight::render_with_highlighting(\n-                &format!(\"{}: {:#} = {}\", item.name.as_ref().unwrap(), ty, default),\n-                None,\n-                None,\n-                None,\n-            )\n-        }\n-        _ => String::new(),\n-    }\n-}\n-\n fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n                  cx: &Context, prefix: &str) -> fmt::Result {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n@@ -2609,27 +2594,15 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n     stability\n }\n \n-struct Initializer<'a>(&'a str);\n-\n-impl<'a> fmt::Display for Initializer<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let Initializer(s) = *self;\n-        if s.is_empty() { return Ok(()); }\n-        write!(f, \"<code> = </code>\")?;\n-        write!(f, \"<code>{}</code>\", Escape(s))\n-    }\n-}\n-\n fn item_constant(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  c: &clean::Constant) -> fmt::Result {\n     write!(w, \"<pre class='rust const'>\")?;\n     render_attributes(w, it)?;\n     write!(w, \"{vis}const \\\n-               {name}: {typ}{init}</pre>\",\n+               {name}: {typ}</pre>\",\n            vis = VisSpace(&it.visibility),\n            name = it.name.as_ref().unwrap(),\n-           typ = c.type_,\n-           init = Initializer(&c.expr))?;\n+           typ = c.type_)?;\n     document(w, cx, it)\n }\n \n@@ -2638,12 +2611,11 @@ fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     write!(w, \"<pre class='rust static'>\")?;\n     render_attributes(w, it)?;\n     write!(w, \"{vis}static {mutability}\\\n-               {name}: {typ}{init}</pre>\",\n+               {name}: {typ}</pre>\",\n            vis = VisSpace(&it.visibility),\n            mutability = MutableSpace(s.mutability),\n            name = it.name.as_ref().unwrap(),\n-           typ = s.type_,\n-           init = Initializer(&s.expr))?;\n+           typ = s.type_)?;\n     document(w, cx, it)\n }\n \n@@ -3878,7 +3850,13 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                 write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n                 write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id))?;\n-                write!(w, \"</code></span></h4>\\n\")?;\n+                let src = if let Some(l) = (Item { cx, item }).src_href() {\n+                    format!(\"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n+                            l, \"goto source code\")\n+                } else {\n+                    String::new()\n+                };\n+                write!(w, \"</code>{}</span></h4>\\n\", src)?;\n             }\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n@@ -3893,8 +3871,6 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         }\n \n         if render_method_item || render_mode == RenderMode::Normal {\n-            let prefix = render_assoc_const_value(item);\n-\n             if !is_default_item {\n                 if let Some(t) = trait_ {\n                     // The trait item may have been stripped so we might not\n@@ -3904,23 +3880,23 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                         // because impls can't have a stability.\n                         document_stability(w, cx, it)?;\n                         if item.doc_value().is_some() {\n-                            document_full(w, item, cx, &prefix)?;\n+                            document_full(w, item, cx, \"\")?;\n                         } else if show_def_docs {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(w, cx, it, link, &prefix)?;\n+                            document_short(w, cx, it, link, \"\")?;\n                         }\n                     }\n                 } else {\n                     document_stability(w, cx, item)?;\n                     if show_def_docs {\n-                        document_full(w, item, cx, &prefix)?;\n+                        document_full(w, item, cx, \"\")?;\n                     }\n                 }\n             } else {\n                 document_stability(w, cx, item)?;\n                 if show_def_docs {\n-                    document_short(w, cx, item, link, &prefix)?;\n+                    document_short(w, cx, item, link, \"\")?;\n                 }\n             }\n         }"}, {"sha": "a6027a546576f2708b447cb2bc50620a64b7289a", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=f2302daef3608c09e2b50193a64611b18ced86f3", "patch": "@@ -2028,7 +2028,8 @@\n         if (!next) {\n             return;\n         }\n-        if ((checkIfThereAreMethods(next.childNodes) || hasClass(e, 'method')) &&\n+        if ((hasClass(e, 'method') || hasClass(e, 'associatedconstant') ||\n+             checkIfThereAreMethods(next.childNodes)) &&\n             (hasClass(next, 'docblock') ||\n              hasClass(e, 'impl') ||\n              (hasClass(next, 'stability') &&\n@@ -2037,10 +2038,8 @@\n         }\n     };\n     onEach(document.getElementsByClassName('method'), func);\n+    onEach(document.getElementsByClassName('associatedconstant'), func);\n     onEach(document.getElementsByClassName('impl'), func);\n-    onEach(document.getElementsByClassName('impl-items'), function(e) {\n-        onEach(e.getElementsByClassName('associatedconstant'), func);\n-    });\n \n     function createToggle(otherMessage, fontSize, extraClass) {\n         var span = document.createElement('span');"}, {"sha": "923a486060a3ae6734457babf771cb762c2be15c", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=f2302daef3608c09e2b50193a64611b18ced86f3", "patch": "@@ -575,6 +575,14 @@ a {\n \ttext-decoration: underline;\n }\n \n+.invisible > .srclink {\n+\tposition: absolute;\n+\ttop: 0;\n+\tright: 0;\n+\tfont-size: 17px;\n+\tfont-weight: normal;\n+}\n+\n .block a.current.crate { font-weight: 500; }\n \n .search-container {"}, {"sha": "71e7db5f4a543d08cda585497b0d1d546aea5dc9", "filename": "src/test/rustdoc/assoc-consts.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-consts.rs?ref=f2302daef3608c09e2b50193a64611b18ced86f3", "patch": "@@ -13,7 +13,6 @@ pub trait Foo {\n     // @has assoc_consts/trait.Foo.html '//*[@class=\"rust trait\"]' \\\n     //      'const FOO: usize;'\n     // @has - '//*[@id=\"associatedconstant.FOO\"]' 'const FOO: usize'\n-    // @has - '//*[@class=\"docblock\"]' 'FOO: usize = 12'\n     const FOO: usize = 12;\n     // @has - '//*[@id=\"associatedconstant.FOO_NO_DEFAULT\"]' 'const FOO_NO_DEFAULT: bool'\n     const FOO_NO_DEFAULT: bool;\n@@ -27,10 +26,8 @@ pub struct Bar;\n impl Foo for Bar {\n     // @has assoc_consts/struct.Bar.html '//code' 'impl Foo for Bar'\n     // @has - '//*[@id=\"associatedconstant.FOO\"]' 'const FOO: usize'\n-    // @has - '//*[@class=\"docblock\"]' 'FOO: usize = 12'\n     const FOO: usize = 12;\n     // @has - '//*[@id=\"associatedconstant.FOO_NO_DEFAULT\"]' 'const FOO_NO_DEFAULT: bool'\n-    // @has - '//*[@class=\"docblock\"]' 'FOO_NO_DEFAULT: bool = false'\n     const FOO_NO_DEFAULT: bool = false;\n     // @!has - FOO_HIDDEN\n     #[doc(hidden)]\n@@ -40,7 +37,6 @@ impl Foo for Bar {\n impl Bar {\n     // @has assoc_consts/struct.Bar.html '//*[@id=\"associatedconstant.BAR\"]' \\\n     //      'const BAR: usize'\n-    // @has - '//*[@class=\"docblock\"]' 'BAR: usize = 3'\n     pub const BAR: usize = 3;\n }\n \n@@ -49,7 +45,6 @@ pub struct Baz<'a, U: 'a, T>(T, &'a [U]);\n impl Bar {\n     // @has assoc_consts/struct.Bar.html '//*[@id=\"associatedconstant.BAZ\"]' \\\n     //      \"const BAZ: Baz<'static, u8, u32>\"\n-    // @has - '//*[@class=\"docblock\"]' \"BAZ: Baz<'static, u8, u32> = Baz(321, &[1, 2, 3])\"\n     pub const BAZ: Baz<'static, u8, u32> = Baz(321, &[1, 2, 3]);\n }\n \n@@ -58,7 +53,6 @@ pub fn f(_: &(ToString + 'static)) {}\n impl Bar {\n     // @has assoc_consts/struct.Bar.html '//*[@id=\"associatedconstant.F\"]' \\\n     //      \"const F: fn(_: &(ToString + 'static))\"\n-    // @has - '//*[@class=\"docblock\"]' \"F: fn(_: &(ToString + 'static)) = f\"\n     pub const F: fn(_: &(ToString + 'static)) = f;\n }\n \n@@ -81,17 +75,14 @@ pub trait Qux {\n     /// Docs for QUX1 in trait.\n     const QUX1: i8;\n     // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT0\"]' 'const QUX_DEFAULT0: u16'\n-    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT0: u16 = 1\"\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT0 in trait.\"\n     /// Docs for QUX_DEFAULT0 in trait.\n     const QUX_DEFAULT0: u16 = 1;\n     // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT1\"]' 'const QUX_DEFAULT1: i16'\n-    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT1: i16 = 2\"\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT1 in trait.\"\n     /// Docs for QUX_DEFAULT1 in trait.\n     const QUX_DEFAULT1: i16 = 2;\n     // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT2\"]' 'const QUX_DEFAULT2: u32'\n-    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT2: u32 = 3\"\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT2 in trait.\"\n     /// Docs for QUX_DEFAULT2 in trait.\n     const QUX_DEFAULT2: u32 = 3;\n@@ -100,25 +91,20 @@ pub trait Qux {\n // @has assoc_consts/struct.Bar.html '//code' 'impl Qux for Bar'\n impl Qux for Bar {\n     // @has - '//*[@id=\"associatedconstant.QUX0\"]' 'const QUX0: u8'\n-    // @has - '//*[@class=\"docblock\"]' \"QUX0: u8 = 4\"\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX0 in trait.\"\n     /// Docs for QUX0 in trait.\n     const QUX0: u8 = 4;\n     // @has - '//*[@id=\"associatedconstant.QUX1\"]' 'const QUX1: i8'\n-    // @has - '//*[@class=\"docblock\"]' \"QUX1: i8 = 5\"\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX1 in impl.\"\n     /// Docs for QUX1 in impl.\n     const QUX1: i8 = 5;\n     // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT0\"]' 'const QUX_DEFAULT0: u16'\n-    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT0: u16 = 6\"\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT0 in trait.\"\n     const QUX_DEFAULT0: u16 = 6;\n     // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT1\"]' 'const QUX_DEFAULT1: i16'\n-    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT1: i16 = 7\"\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT1 in impl.\"\n     /// Docs for QUX_DEFAULT1 in impl.\n     const QUX_DEFAULT1: i16 = 7;\n     // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT2\"]' 'const QUX_DEFAULT2: u32'\n-    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT2: u32 = 3\"\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT2 in trait.\"\n }"}, {"sha": "b8bded7621e539c6c4f1bb67fc43c9a3860bd7a6", "filename": "src/test/rustdoc/const-doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Fconst-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Fconst-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-doc.rs?ref=f2302daef3608c09e2b50193a64611b18ced86f3", "patch": "@@ -23,7 +23,7 @@ pub struct ContentType {\n \n impl ContentType {\n     // @has const_doc/struct.ContentType.html\n-    // @has  - '//*[@class=\"docblock\"]' 'Any: ContentType = ContentType{ttype: Foo{f: '\n+    // @has  - '//*[@id=\"associatedconstant.Any\"]' 'const Any: ContentType'\n     pub const Any: ContentType = ContentType { ttype: Foo { f: PhantomData, },\n                                                subtype: Foo { f: PhantomData, },\n                                                params: None, };"}, {"sha": "4594eb95ea18e2abc23202a596b016dde16afbaf", "filename": "src/test/rustdoc/escape-rust-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Fescape-rust-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Fescape-rust-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fescape-rust-expr.rs?ref=f2302daef3608c09e2b50193a64611b18ced86f3", "patch": "@@ -11,5 +11,5 @@\n // Test that we HTML-escape Rust expressions, where HTML special chars\n // can occur, and we know it's definitely not markup.\n \n-// @has escape_rust_expr/constant.CONST_S.html '//pre[@class=\"rust const\"]' '\"<script>\"'\n+// @!has escape_rust_expr/constant.CONST_S.html '//pre[@class=\"rust const\"]' '\"<script>\"'\n pub const CONST_S: &'static str = \"<script>\";"}, {"sha": "0885f005d13164d559853a6c599ce5c8b02a9346", "filename": "src/test/rustdoc/inline_cross/assoc-items.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc-items.rs?ref=f2302daef3608c09e2b50193a64611b18ced86f3", "patch": "@@ -19,16 +19,13 @@ extern crate assoc_items;\n // @has foo/struct.MyStruct.html\n // @!has - 'PrivateConst'\n // @has - '//*[@id=\"associatedconstant.PublicConst\"]' 'pub const PublicConst: u8'\n-// @has - '//*[@class=\"docblock\"]' 'PublicConst: u8 = 123'\n // @has - '//*[@class=\"docblock\"]' 'docs for PublicConst'\n // @!has - 'private_method'\n // @has - '//*[@id=\"method.public_method\"]' 'pub fn public_method()'\n // @has - '//*[@class=\"docblock\"]' 'docs for public_method'\n // @has - '//*[@id=\"associatedconstant.ConstNoDefault\"]' 'const ConstNoDefault: i16'\n-// @has - '//*[@class=\"docblock\"]' 'ConstNoDefault: i16 = -123'\n // @has - '//*[@class=\"docblock\"]' 'dox for ConstNoDefault'\n // @has - '//*[@id=\"associatedconstant.ConstWithDefault\"]' 'const ConstWithDefault: u16'\n-// @has - '//*[@class=\"docblock\"]' 'ConstWithDefault: u16 = 12345'\n // @has - '//*[@class=\"docblock\"]' 'docs for ConstWithDefault'\n // @has - '//*[@id=\"associatedtype.TypeNoDefault\"]' 'type TypeNoDefault = i32'\n // @has - '//*[@class=\"docblock\"]' 'dox for TypeNoDefault'\n@@ -44,11 +41,9 @@ pub use assoc_items::MyStruct;\n // @has - '//*[@id=\"associatedconstant.ConstNoDefault\"]' 'const ConstNoDefault: i16'\n // @has - '//*[@class=\"docblock\"]' 'docs for ConstNoDefault'\n // @has - '//*[@id=\"associatedconstant.ConstWithDefault\"]' 'const ConstWithDefault: u16'\n-// @has - '//*[@class=\"docblock\"]' 'ConstWithDefault: u16 = 12345'\n // @has - '//*[@class=\"docblock\"]' 'docs for ConstWithDefault'\n // @has - '//*[@id=\"associatedtype.TypeNoDefault\"]' 'type TypeNoDefault'\n // @has - '//*[@class=\"docblock\"]' 'docs for TypeNoDefault'\n-// @has - '//*[@id=\"associatedtype.TypeWithDefault\"]' 'type TypeWithDefault = u32'\n // @has - '//*[@class=\"docblock\"]' 'docs for TypeWithDefault'\n // @has - '//*[@id=\"tymethod.method_no_default\"]' 'fn method_no_default()'\n // @has - '//*[@class=\"docblock\"]' 'docs for method_no_default'"}, {"sha": "cf4ebba4c32ce92e00b0b9dfe8158ece18846772", "filename": "src/test/rustdoc/issue-28478.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Fissue-28478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Fissue-28478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-28478.rs?ref=f2302daef3608c09e2b50193a64611b18ced86f3", "patch": "@@ -16,7 +16,6 @@ pub trait Bar {\n     // @has - '//*[@href=\"#associatedtype.Bar\"]' 'Bar'\n     type Bar = ();\n     // @has - '//*[@id=\"associatedconstant.Baz\"]' 'const Baz: usize'\n-    // @has - '//*[@class=\"docblock\"]' 'Baz: usize = 7'\n     // @has - '//*[@href=\"#associatedconstant.Baz\"]' 'Baz'\n     const Baz: usize = 7;\n     // @has - '//*[@id=\"tymethod.bar\"]' 'fn bar'"}, {"sha": "538de228424ae11fb9a28aaca34130c70420b5ea", "filename": "src/test/rustdoc/issue-33302.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Fissue-33302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2302daef3608c09e2b50193a64611b18ced86f3/src%2Ftest%2Frustdoc%2Fissue-33302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-33302.rs?ref=f2302daef3608c09e2b50193a64611b18ced86f3", "patch": "@@ -17,18 +17,17 @@ macro_rules! make {\n         pub struct S;\n \n         // @has issue_33302/constant.CST.html \\\n-        //        '//pre[@class=\"rust const\"]' 'pub const CST: i32 = 4 * 4'\n+        //        '//pre[@class=\"rust const\"]' 'pub const CST: i32'\n         pub const CST: i32 = ($n * $n);\n         // @has issue_33302/static.ST.html \\\n-        //        '//pre[@class=\"rust static\"]' 'pub static ST: i32 = 4 * 4'\n+        //        '//pre[@class=\"rust static\"]' 'pub static ST: i32'\n         pub static ST: i32 = ($n * $n);\n \n         pub trait T<X> {\n             fn ignore(_: &X) {}\n             const C: X;\n             // @has issue_33302/trait.T.html \\\n             //        '//*[@class=\"rust trait\"]' 'const D: i32'\n-            // @has - '//*[@class=\"docblock\"]' 'D: i32 = 4 * 4'\n             // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32'\n             const D: i32 = ($n * $n);\n         }\n@@ -37,7 +36,6 @@ macro_rules! make {\n         //        '//h3[@class=\"impl\"]' 'impl T<[i32; 16]> for S'\n         // @has - '//*[@id=\"associatedconstant.C\"]' 'const C: [i32; 16]'\n         // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32'\n-        // @has - '//*[@class=\"docblock\"]' 'C: [i32; 16] = [0; 4 * 4]'\n         impl T<[i32; ($n * $n)]> for S {\n             const C: [i32; ($n * $n)] = [0; ($n * $n)];\n         }\n@@ -46,7 +44,6 @@ macro_rules! make {\n         //        '//h3[@class=\"impl\"]' 'impl T<[i32; 16]> for S'\n         // @has - '//*[@id=\"associatedconstant.C-1\"]' 'const C: (i32,)'\n         // @has - '//*[@id=\"associatedconstant.D-1\"]' 'const D: i32'\n-        // @has - '//*[@class=\"docblock\"]' 'C: (i32,) = (4,)'\n         impl T<(i32,)> for S {\n             const C: (i32,) = ($n,);\n         }\n@@ -55,8 +52,6 @@ macro_rules! make {\n         //        '//h3[@class=\"impl\"]' 'impl T<(i32, i32)> for S'\n         // @has - '//*[@id=\"associatedconstant.C-2\"]' 'const C: (i32, i32)'\n         // @has - '//*[@id=\"associatedconstant.D-2\"]' 'const D: i32'\n-        // @has - '//*[@class=\"docblock\"]' 'C: (i32, i32) = (4, 4)'\n-        // @has - '//*[@class=\"docblock\"]' 'D: i32 = 4 / 4'\n         impl T<(i32, i32)> for S {\n             const C: (i32, i32) = ($n, $n);\n             const D: i32 = ($n / $n);"}]}