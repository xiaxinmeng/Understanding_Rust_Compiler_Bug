{"sha": "7698a85d0100d3c6b152169813eacf9385cc50b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OThhODVkMDEwMGQzYzZiMTUyMTY5ODEzZWFjZjkzODVjYzUwYjQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T09:19:13Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T09:19:13Z"}, "message": "Simplify Repr::Array's elem size.", "tree": {"sha": "e67d96c80f0e2beaeca82790997f92a6aaff6dfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e67d96c80f0e2beaeca82790997f92a6aaff6dfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7698a85d0100d3c6b152169813eacf9385cc50b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7698a85d0100d3c6b152169813eacf9385cc50b4", "html_url": "https://github.com/rust-lang/rust/commit/7698a85d0100d3c6b152169813eacf9385cc50b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7698a85d0100d3c6b152169813eacf9385cc50b4/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4704bdca8d1eefe1efe32a40ce3f6798b207129d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4704bdca8d1eefe1efe32a40ce3f6798b207129d", "html_url": "https://github.com/rust-lang/rust/commit/4704bdca8d1eefe1efe32a40ce3f6798b207129d"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "9c5e505671afcfc1447dba6baeb75c17d3ce96bd", "filename": "src/interpreter.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7698a85d0100d3c6b152169813eacf9385cc50b4/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7698a85d0100d3c6b152169813eacf9385cc50b4/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=7698a85d0100d3c6b152169813eacf9385cc50b4", "patch": "@@ -372,9 +372,8 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                     },\n \n                     Vec => match dest_repr {\n-                        Repr::Array { ref elem, length } => {\n+                        Repr::Array { elem_size, length } => {\n                             assert_eq!(length, operands.len());\n-                            let elem_size = elem.size();\n                             for (i, operand) in operands.iter().enumerate() {\n                                 let src = try!(self.eval_operand(operand));\n                                 let offset = i * elem_size;\n@@ -396,8 +395,8 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             }\n \n             Box(ty) => {\n-                let repr = self.ty_to_repr(ty);\n-                let ptr = self.memory.allocate(repr.size());\n+                let size = self.ty_to_repr(ty).size();\n+                let ptr = self.memory.allocate(size);\n                 self.memory.write_ptr(dest, ptr)\n             }\n \n@@ -538,7 +537,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             Str(ref _s) => unimplemented!(),\n             ByteStr(ref _bs) => unimplemented!(),\n             Bool(b) => {\n-                let ptr = self.memory.allocate(Repr::Bool.size());\n+                let ptr = self.memory.allocate(1);\n                 try!(self.memory.write_bool(ptr, b));\n                 Ok(ptr)\n             }\n@@ -616,7 +615,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             }\n \n             ty::TyArray(ref elem_ty, length) => Repr::Array {\n-                elem: Box::new(self.ty_to_repr(elem_ty)),\n+                elem_size: self.ty_to_repr(elem_ty).size(),\n                 length: length,\n             },\n \n@@ -786,8 +785,8 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n                 let mut miri = Interpreter::new(tcx, mir_map);\n                 let return_ptr = match mir.return_ty {\n                     ty::FnConverging(ty) => {\n-                        let repr = miri.ty_to_repr(ty).size();\n-                        Some(miri.memory.allocate(repr))\n+                        let size = miri.ty_to_repr(ty).size();\n+                        Some(miri.memory.allocate(size))\n                     }\n                     ty::FnDiverging => None,\n                 };"}, {"sha": "a42d504381ae72bb5261d6a4c240bb6bf52ad422", "filename": "src/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7698a85d0100d3c6b152169813eacf9385cc50b4/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7698a85d0100d3c6b152169813eacf9385cc50b4/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=7698a85d0100d3c6b152169813eacf9385cc50b4", "patch": "@@ -68,7 +68,7 @@ pub enum Repr {\n     },\n \n     Array {\n-        elem: Box<Repr>,\n+        elem_size: usize,\n \n         /// Number of elements.\n         length: usize,\n@@ -386,7 +386,7 @@ impl Repr {\n             Repr::I64 | Repr::U64 => 8,\n             Repr::Product { size, .. } => size,\n             Repr::Sum { discr_size, max_variant_size, .. } => discr_size + max_variant_size,\n-            Repr::Array { ref elem, length } => elem.size() * length,\n+            Repr::Array { elem_size, length } => elem_size * length,\n             Repr::Pointer => POINTER_SIZE,\n             Repr::FatPointer => POINTER_SIZE * 2,\n         }"}]}