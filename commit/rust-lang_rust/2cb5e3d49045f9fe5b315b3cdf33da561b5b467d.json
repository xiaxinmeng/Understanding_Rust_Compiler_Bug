{"sha": "2cb5e3d49045f9fe5b315b3cdf33da561b5b467d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYjVlM2Q0OTA0NWY5ZmU1YjMxNWIzY2RmMzNkYTU2MWI1YjQ2N2Q=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-12T08:34:57Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-12T08:34:57Z"}, "message": "Manually inline trivial function", "tree": {"sha": "277994782e7728cec9b42314dfb6b184d155459b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/277994782e7728cec9b42314dfb6b184d155459b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cb5e3d49045f9fe5b315b3cdf33da561b5b467d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb5e3d49045f9fe5b315b3cdf33da561b5b467d", "html_url": "https://github.com/rust-lang/rust/commit/2cb5e3d49045f9fe5b315b3cdf33da561b5b467d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cb5e3d49045f9fe5b315b3cdf33da561b5b467d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07345f041ee0bf7bdd0ea0395865872297725668", "url": "https://api.github.com/repos/rust-lang/rust/commits/07345f041ee0bf7bdd0ea0395865872297725668", "html_url": "https://github.com/rust-lang/rust/commit/07345f041ee0bf7bdd0ea0395865872297725668"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "37d5e9dca36955b82e7bab862ac7f7b8ac34ec2b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2cb5e3d49045f9fe5b315b3cdf33da561b5b467d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb5e3d49045f9fe5b315b3cdf33da561b5b467d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=2cb5e3d49045f9fe5b315b3cdf33da561b5b467d", "patch": "@@ -243,7 +243,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return;\n         }\n \n-        if self.const_let_allowed() {\n+        if self.tcx.features().const_let {\n             let mut dest = dest;\n             let index = loop {\n                 match dest {\n@@ -320,10 +320,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         }\n     }\n \n-    fn const_let_allowed(&self) -> bool {\n-        self.tcx.features().const_let\n-    }\n-\n     /// Qualify a whole const, static initializer or const fn.\n     fn qualify_const(&mut self) -> (Qualif, Lrc<BitSet<Local>>) {\n         debug!(\"qualifying {} {:?}\", self.mode, self.def_id);\n@@ -361,7 +357,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::FalseUnwind { .. } => None,\n \n                 TerminatorKind::Return => {\n-                    if !self.const_let_allowed() {\n+                    if !self.tcx.features().const_let {\n                         // Check for unused values. This usually means\n                         // there are extra statements in the AST.\n                         for temp in mir.temps_iter() {\n@@ -468,7 +464,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n-            LocalKind::Var if !self.const_let_allowed() => {\n+            LocalKind::Var if !self.tcx.features().const_let => {\n                 if self.mode != Mode::Fn {\n                     emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n                                     self.span, GateIssue::Language,\n@@ -561,7 +557,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 this.not_const()\n                             } else {\n                                 // just make sure this doesn't get promoted\n-                                this.qualif.add(Qualif::NOT_CONST);\n+                                this.add(Qualif::NOT_CONST);\n                             }\n                             let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n                             match this.mode {\n@@ -1168,7 +1164,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n         if let (Mode::ConstFn, &Place::Local(index)) = (self.mode, dest) {\n             if self.mir.local_kind(index) == LocalKind::Var &&\n                self.const_fn_arg_vars.insert(index) &&\n-               !self.const_let_allowed() {\n+               !self.tcx.features().const_let {\n                 // Direct use of an argument is permitted.\n                 match *rvalue {\n                     Rvalue::Use(Operand::Copy(Place::Local(local))) |"}]}