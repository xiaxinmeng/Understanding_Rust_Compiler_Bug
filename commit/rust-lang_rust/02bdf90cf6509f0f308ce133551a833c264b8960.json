{"sha": "02bdf90cf6509f0f308ce133551a833c264b8960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYmRmOTBjZjY1MDlmMGYzMDhjZTEzMzU1MWE4MzNjMjY0Yjg5NjA=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-31T19:07:44Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-01T14:54:22Z"}, "message": "extra: Use `do` instead of `for` in extra::iter", "tree": {"sha": "1c3c590a1ce7f6219b0fd00524455fb8d4fd5f25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c3c590a1ce7f6219b0fd00524455fb8d4fd5f25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02bdf90cf6509f0f308ce133551a833c264b8960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02bdf90cf6509f0f308ce133551a833c264b8960", "html_url": "https://github.com/rust-lang/rust/commit/02bdf90cf6509f0f308ce133551a833c264b8960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02bdf90cf6509f0f308ce133551a833c264b8960/comments", "author": null, "committer": null, "parents": [{"sha": "6d7a0c8cbcd81242d12ad41e0d13c2408c73c8ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7a0c8cbcd81242d12ad41e0d13c2408c73c8ac", "html_url": "https://github.com/rust-lang/rust/commit/6d7a0c8cbcd81242d12ad41e0d13c2408c73c8ac"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "720a525164a3256b3cb4e79d3e8f3427df549f57", "filename": "src/libextra/iter.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/02bdf90cf6509f0f308ce133551a833c264b8960/src%2Flibextra%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02bdf90cf6509f0f308ce133551a833c264b8960/src%2Flibextra%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fiter.rs?ref=02bdf90cf6509f0f308ce133551a833c264b8960", "patch": "@@ -72,12 +72,9 @@ pub trait FromIter<T> {\n #[inline]\n pub fn any<T>(predicate: &fn(T) -> bool,\n               iter: &fn(f: &fn(T) -> bool) -> bool) -> bool {\n-    for iter |x| {\n-        if predicate(x) {\n-            return true;\n-        }\n+    do iter |x| {\n+        predicate(x)\n     }\n-    return false;\n }\n \n /**\n@@ -111,12 +108,14 @@ pub fn all<T>(predicate: &fn(T) -> bool,\n #[inline]\n pub fn find<T>(predicate: &fn(&T) -> bool,\n                iter: &fn(f: &fn(T) -> bool) -> bool) -> Option<T> {\n-    for iter |x| {\n+    let mut ret = None;\n+    do iter |x| {\n         if predicate(&x) {\n-            return Some(x);\n-        }\n-    }\n-    None\n+            ret = Some(x);\n+            false\n+        } else { true }\n+    };\n+    ret\n }\n \n /**\n@@ -132,7 +131,7 @@ pub fn find<T>(predicate: &fn(&T) -> bool,\n #[inline]\n pub fn max<T: Ord>(iter: &fn(f: &fn(T) -> bool) -> bool) -> Option<T> {\n     let mut result = None;\n-    for iter |x| {\n+    do iter |x| {\n         match result {\n             Some(ref mut y) => {\n                 if x > *y {\n@@ -141,7 +140,8 @@ pub fn max<T: Ord>(iter: &fn(f: &fn(T) -> bool) -> bool) -> Option<T> {\n             }\n             None => result = Some(x)\n         }\n-    }\n+        true\n+    };\n     result\n }\n \n@@ -158,7 +158,7 @@ pub fn max<T: Ord>(iter: &fn(f: &fn(T) -> bool) -> bool) -> Option<T> {\n #[inline]\n pub fn min<T: Ord>(iter: &fn(f: &fn(T) -> bool) -> bool) -> Option<T> {\n     let mut result = None;\n-    for iter |x| {\n+    do iter |x| {\n         match result {\n             Some(ref mut y) => {\n                 if x < *y {\n@@ -167,7 +167,8 @@ pub fn min<T: Ord>(iter: &fn(f: &fn(T) -> bool) -> bool) -> Option<T> {\n             }\n             None => result = Some(x)\n         }\n-    }\n+        true\n+    };\n     result\n }\n \n@@ -183,9 +184,10 @@ pub fn min<T: Ord>(iter: &fn(f: &fn(T) -> bool) -> bool) -> Option<T> {\n #[inline]\n pub fn fold<T, U>(start: T, iter: &fn(f: &fn(U) -> bool) -> bool, f: &fn(&mut T, U)) -> T {\n     let mut result = start;\n-    for iter |x| {\n+    do iter |x| {\n         f(&mut result, x);\n-    }\n+        true\n+    };\n     result\n }\n \n@@ -206,9 +208,10 @@ pub fn fold<T, U>(start: T, iter: &fn(f: &fn(U) -> bool) -> bool, f: &fn(&mut T,\n #[inline]\n pub fn fold_ref<T, U>(start: T, iter: &fn(f: &fn(&U) -> bool) -> bool, f: &fn(&mut T, &U)) -> T {\n     let mut result = start;\n-    for iter |x| {\n+    do iter |x| {\n         f(&mut result, x);\n-    }\n+        true\n+    };\n     result\n }\n \n@@ -246,7 +249,7 @@ impl<T> FromIter<T> for ~[T]{\n     #[inline]\n     pub fn from_iter(iter: &fn(f: &fn(T) -> bool) -> bool) -> ~[T] {\n         let mut v = ~[];\n-        for iter |x| { v.push(x) }\n+        do iter |x| { v.push(x); true };\n         v\n     }\n }"}]}