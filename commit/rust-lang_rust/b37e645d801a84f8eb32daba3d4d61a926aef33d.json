{"sha": "b37e645d801a84f8eb32daba3d4d61a926aef33d", "node_id": "C_kwDOAAsO6NoAKGIzN2U2NDVkODAxYTg0ZjhlYjMyZGFiYTNkNGQ2MWE5MjZhZWYzM2Q", "commit": {"author": {"name": "111", "email": "mic215@ucsd.edu", "date": "2022-09-01T14:09:45Z"}, "committer": {"name": "111", "email": "mic215@ucsd.edu", "date": "2022-09-01T15:35:38Z"}, "message": "Migrate limit error", "tree": {"sha": "83a772f0e331307e37d952a7f2be086090eeba55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83a772f0e331307e37d952a7f2be086090eeba55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b37e645d801a84f8eb32daba3d4d61a926aef33d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b37e645d801a84f8eb32daba3d4d61a926aef33d", "html_url": "https://github.com/rust-lang/rust/commit/b37e645d801a84f8eb32daba3d4d61a926aef33d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b37e645d801a84f8eb32daba3d4d61a926aef33d/comments", "author": {"login": "MingyuChen1", "id": 44656112, "node_id": "MDQ6VXNlcjQ0NjU2MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/44656112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MingyuChen1", "html_url": "https://github.com/MingyuChen1", "followers_url": "https://api.github.com/users/MingyuChen1/followers", "following_url": "https://api.github.com/users/MingyuChen1/following{/other_user}", "gists_url": "https://api.github.com/users/MingyuChen1/gists{/gist_id}", "starred_url": "https://api.github.com/users/MingyuChen1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MingyuChen1/subscriptions", "organizations_url": "https://api.github.com/users/MingyuChen1/orgs", "repos_url": "https://api.github.com/users/MingyuChen1/repos", "events_url": "https://api.github.com/users/MingyuChen1/events{/privacy}", "received_events_url": "https://api.github.com/users/MingyuChen1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MingyuChen1", "id": 44656112, "node_id": "MDQ6VXNlcjQ0NjU2MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/44656112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MingyuChen1", "html_url": "https://github.com/MingyuChen1", "followers_url": "https://api.github.com/users/MingyuChen1/followers", "following_url": "https://api.github.com/users/MingyuChen1/following{/other_user}", "gists_url": "https://api.github.com/users/MingyuChen1/gists{/gist_id}", "starred_url": "https://api.github.com/users/MingyuChen1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MingyuChen1/subscriptions", "organizations_url": "https://api.github.com/users/MingyuChen1/orgs", "repos_url": "https://api.github.com/users/MingyuChen1/repos", "events_url": "https://api.github.com/users/MingyuChen1/events{/privacy}", "received_events_url": "https://api.github.com/users/MingyuChen1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cd965046f6f3e9fcf937bf1f6fec4d7f8d50ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/00cd965046f6f3e9fcf937bf1f6fec4d7f8d50ca", "html_url": "https://github.com/rust-lang/rust/commit/00cd965046f6f3e9fcf937bf1f6fec4d7f8d50ca"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "3a55064c7077e3a84cd372302217d838ec1f4cbc", "filename": "compiler/rustc_error_messages/locales/en-US/middle.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b37e645d801a84f8eb32daba3d4d61a926aef33d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b37e645d801a84f8eb32daba3d4d61a926aef33d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl?ref=b37e645d801a84f8eb32daba3d4d61a926aef33d", "patch": "@@ -11,3 +11,7 @@ middle_conflict_types =\n \n middle_previous_use_here =\n     previous use here\n+\n+middle_limit_invalid =\n+    `limit` must be a non-negative integer\n+    .label = {$error_str}"}, {"sha": "0dfe6374cf30a4cfc38c30bbe302b22215370b02", "filename": "compiler/rustc_middle/src/error.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b37e645d801a84f8eb32daba3d4d61a926aef33d/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37e645d801a84f8eb32daba3d4d61a926aef33d/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ferror.rs?ref=b37e645d801a84f8eb32daba3d4d61a926aef33d", "patch": "@@ -38,3 +38,13 @@ pub enum TypeMismatchReason {\n         span: Span,\n     },\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(middle::limit_invalid)]\n+pub struct LimitInvalid<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub value_span: Span,\n+    pub error_str: &'a str,\n+}"}, {"sha": "53c4d92678490a92c6c36bc78632c89d84de5681", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b37e645d801a84f8eb32daba3d4d61a926aef33d/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37e645d801a84f8eb32daba3d4d61a926aef33d/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=b37e645d801a84f8eb32daba3d4d61a926aef33d", "patch": "@@ -10,6 +10,7 @@\n //! just peeks and looks for that attribute.\n \n use crate::bug;\n+use crate::error::LimitInvalid;\n use crate::ty;\n use rustc_ast::Attribute;\n use rustc_session::Session;\n@@ -56,9 +57,6 @@ fn get_limit(krate_attrs: &[Attribute], sess: &Session, name: Symbol, default: u\n             match s.as_str().parse() {\n                 Ok(n) => return Limit::new(n),\n                 Err(e) => {\n-                    let mut err =\n-                        sess.struct_span_err(attr.span, \"`limit` must be a non-negative integer\");\n-\n                     let value_span = attr\n                         .meta()\n                         .and_then(|meta| meta.name_value_literal_span())\n@@ -74,9 +72,7 @@ fn get_limit(krate_attrs: &[Attribute], sess: &Session, name: Symbol, default: u\n                         IntErrorKind::Zero => bug!(\"zero is a valid `limit`\"),\n                         kind => bug!(\"unimplemented IntErrorKind variant: {:?}\", kind),\n                     };\n-\n-                    err.span_label(value_span, error_str);\n-                    err.emit();\n+                    sess.emit_err(LimitInvalid { span: attr.span, value_span, error_str });\n                 }\n             }\n         }"}]}