{"sha": "b4f4db946e71c2bf4f2b324cc002d92068e2cff2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjRkYjk0NmU3MWMyYmY0ZjJiMzI0Y2MwMDJkOTIwNjhlMmNmZjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-27T10:50:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-27T16:48:06Z"}, "message": "Add expect test for rustdoc html highlighting\n\nIt's a unit-test in a sense that it only checks syntax highlighting.\nHowever, the resulting HTML is written to disk and can be easily\ninspected in the browser.\n\nTo update the test, run with `--bless` argument or set\n`UPDATE_EXPEC=1` env var", "tree": {"sha": "17ec0515ba4dbc6626c312595b78b3edb40f9858", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17ec0515ba4dbc6626c312595b78b3edb40f9858"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f4db946e71c2bf4f2b324cc002d92068e2cff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f4db946e71c2bf4f2b324cc002d92068e2cff2", "html_url": "https://github.com/rust-lang/rust/commit/b4f4db946e71c2bf4f2b324cc002d92068e2cff2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f4db946e71c2bf4f2b324cc002d92068e2cff2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f95a91c24d114637131a635fe71dfd1d457fe30", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f95a91c24d114637131a635fe71dfd1d457fe30", "html_url": "https://github.com/rust-lang/rust/commit/1f95a91c24d114637131a635fe71dfd1d457fe30"}], "stats": {"total": 128, "additions": 67, "deletions": 61}, "files": [{"sha": "0ee4d41c6473bea8852d40f0cccf14c470129bed", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4f4db946e71c2bf4f2b324cc002d92068e2cff2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b4f4db946e71c2bf4f2b324cc002d92068e2cff2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b4f4db946e71c2bf4f2b324cc002d92068e2cff2", "patch": "@@ -4122,6 +4122,7 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n+ \"expect-test\",\n  \"itertools 0.8.2\",\n  \"minifier\",\n  \"pulldown-cmark\","}, {"sha": "09afb3cae5b48df977fce801ee762cd8f6b76fe7", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4f4db946e71c2bf4f2b324cc002d92068e2cff2/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b4f4db946e71c2bf4f2b324cc002d92068e2cff2/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=b4f4db946e71c2bf4f2b324cc002d92068e2cff2", "patch": "@@ -17,3 +17,6 @@ serde_json = \"1.0\"\n smallvec = \"1.0\"\n tempfile = \"3\"\n itertools = \"0.8\"\n+\n+[dev-dependencies]\n+expect-test = \"0.1\""}, {"sha": "d937246f4665af95dcf04c60fb02577d4a5c4fe6", "filename": "src/librustdoc/html/highlight/fixtures/sample.html", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b4f4db946e71c2bf4f2b324cc002d92068e2cff2/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "raw_url": "https://github.com/rust-lang/rust/raw/b4f4db946e71c2bf4f2b324cc002d92068e2cff2/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html?ref=b4f4db946e71c2bf4f2b324cc002d92068e2cff2", "patch": "@@ -0,0 +1,27 @@\n+\n+<style>\n+.kw { color: #8959A8; }\n+.kw-2, .prelude-ty { color: #4271AE; }\n+.number, .string { color: #718C00; }\n+.self, .bool-val, .prelude-val, .attribute, .attribute .ident { color: #C82829; }\n+.macro, .macro-nonterminal { color: #3E999F; }\n+.lifetime { color: #B76514; }\n+.question-mark { color: #ff9011; }\n+</style>\n+<pre><code><span class=\"attribute\">#![<span class=\"ident\">crate_type</span> <span class=\"op\">=</span> <span class=\"string\">&quot;lib&quot;</span>]</span>\n+\n+<span class=\"attribute\">#[<span class=\"ident\">cfg</span>(<span class=\"ident\">target_os</span> <span class=\"op\">=</span> <span class=\"string\">&quot;linux&quot;</span>)]</span>\n+<span class=\"kw\">fn</span> <span class=\"ident\">main</span>() {\n+    <span class=\"kw\">let</span> <span class=\"ident\">foo</span> <span class=\"op\">=</span> <span class=\"bool-val\">true</span> <span class=\"op\">&amp;&amp;</span> <span class=\"bool-val\">false</span> <span class=\"op\">|</span><span class=\"op\">|</span> <span class=\"bool-val\">true</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span>: <span class=\"kw-2\">*</span><span class=\"kw\">const</span> () <span class=\"op\">=</span> <span class=\"number\">0</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">foo</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"op\">&amp;&amp;</span><span class=\"ident\">foo</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">*</span><span class=\"ident\">foo</span>;\n+    <span class=\"macro\">mac</span><span class=\"macro\">!</span>(<span class=\"ident\">foo</span>, <span class=\"kw-2\">&amp;</span><span class=\"kw-2\">mut</span> <span class=\"ident\">bar</span>);\n+    <span class=\"macro\">assert</span><span class=\"macro\">!</span>(<span class=\"self\">self</span>.<span class=\"ident\">length</span> <span class=\"op\">&lt;</span> <span class=\"ident\">N</span> <span class=\"op\">&amp;&amp;</span> <span class=\"ident\">index</span> <span class=\"op\">&lt;</span><span class=\"op\">=</span> <span class=\"self\">self</span>.<span class=\"ident\">length</span>);\n+}\n+\n+<span class=\"macro\">macro_rules</span><span class=\"macro\">!</span> <span class=\"ident\">bar</span> {\n+    (<span class=\"macro-nonterminal\">$</span><span class=\"macro-nonterminal\">foo</span>:<span class=\"ident\">tt</span>) <span class=\"op\">=</span><span class=\"op\">&gt;</span> {};\n+}\n+</code></pre>"}, {"sha": "956fdbe090baebe29999161e4c1a5f95b66031d2", "filename": "src/librustdoc/html/highlight/fixtures/sample.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4f4db946e71c2bf4f2b324cc002d92068e2cff2/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f4db946e71c2bf4f2b324cc002d92068e2cff2/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.rs?ref=b4f4db946e71c2bf4f2b324cc002d92068e2cff2", "patch": "@@ -0,0 +1,16 @@\n+#![crate_type = \"lib\"]\n+\n+#[cfg(target_os = \"linux\")]\n+fn main() {\n+    let foo = true && false || true;\n+    let _: *const () = 0;\n+    let _ = &foo;\n+    let _ = &&foo;\n+    let _ = *foo;\n+    mac!(foo, &mut bar);\n+    assert!(self.length < N && index <= self.length);\n+}\n+\n+macro_rules! bar {\n+    ($foo:tt) => {};\n+}"}, {"sha": "398cd4f670e56957ce0eed0f71846ac672d0a0d7", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 20, "deletions": 61, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/b4f4db946e71c2bf4f2b324cc002d92068e2cff2/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f4db946e71c2bf4f2b324cc002d92068e2cff2/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=b4f4db946e71c2bf4f2b324cc002d92068e2cff2", "patch": "@@ -1,66 +1,25 @@\n use super::write_code;\n-\n-fn highlight(src: &str) -> String {\n-    let mut out = String::new();\n-    write_code(&mut out, src);\n-    out\n-}\n-\n-#[test]\n-fn function() {\n-    assert_eq!(\n-        highlight(\"fn main() {}\"),\n-        r#\"<span class=\"kw\">fn</span> <span class=\"ident\">main</span>() {}\"#,\n-    );\n-}\n-\n-#[test]\n-fn statement() {\n-    assert_eq!(\n-        highlight(\"let foo = true;\"),\n-        concat!(\n-            r#\"<span class=\"kw\">let</span> <span class=\"ident\">foo</span> \"#,\n-            r#\"<span class=\"op\">=</span> <span class=\"bool-val\">true</span>;\"#,\n-        ),\n-    );\n-}\n+use expect_test::expect_file;\n \n #[test]\n-fn inner_attr() {\n-    assert_eq!(\n-        highlight(r##\"#![crate_type = \"lib\"]\"##),\n-        concat!(\n-            r##\"<span class=\"attribute\">#![<span class=\"ident\">crate_type</span> \"##,\n-            r##\"<span class=\"op\">=</span> <span class=\"string\">&quot;lib&quot;</span>]</span>\"##,\n-        ),\n-    );\n+fn test_html_highlighting() {\n+    let src = include_str!(\"fixtures/sample.rs\");\n+    let html = {\n+        let mut out = String::new();\n+        write_code(&mut out, src);\n+        format!(\"{}<pre><code>{}</code></pre>\\n\", STYLE, out)\n+    };\n+    expect_file![\"src/librustdoc/html/highlight/fixtures/sample.html\"].assert_eq(&html);\n }\n \n-#[test]\n-fn outer_attr() {\n-    assert_eq!(\n-        highlight(r##\"#[cfg(target_os = \"linux\")]\"##),\n-        concat!(\n-            r##\"<span class=\"attribute\">#[<span class=\"ident\">cfg</span>(\"##,\n-            r##\"<span class=\"ident\">target_os</span> <span class=\"op\">=</span> \"##,\n-            r##\"<span class=\"string\">&quot;linux&quot;</span>)]</span>\"##,\n-        ),\n-    );\n-}\n-\n-#[test]\n-fn mac() {\n-    assert_eq!(\n-        highlight(\"mac!(foo bar)\"),\n-        concat!(\n-            r#\"<span class=\"macro\">mac</span><span class=\"macro\">!</span>(\"#,\n-            r#\"<span class=\"ident\">foo</span> <span class=\"ident\">bar</span>)\"#,\n-        ),\n-    );\n-}\n-\n-// Regression test for #72684\n-#[test]\n-fn andand() {\n-    assert_eq!(highlight(\"&&\"), r#\"<span class=\"op\">&amp;&amp;</span>\"#);\n-}\n+const STYLE: &str = r#\"\n+<style>\n+.kw { color: #8959A8; }\n+.kw-2, .prelude-ty { color: #4271AE; }\n+.number, .string { color: #718C00; }\n+.self, .bool-val, .prelude-val, .attribute, .attribute .ident { color: #C82829; }\n+.macro, .macro-nonterminal { color: #3E999F; }\n+.lifetime { color: #B76514; }\n+.question-mark { color: #ff9011; }\n+</style>\n+\"#;"}]}