{"sha": "76d0546ac7789ce94d15d305b07269d8b5e10038", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZDA1NDZhYzc3ODljZTk0ZDE1ZDMwNWIwNzI2OWQ4YjVlMTAwMzg=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-02T10:33:27Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-02T10:33:27Z"}, "message": "Use lookup table instead of enum for postfix completion kinds", "tree": {"sha": "cd18002af90c6c6e907f2a62baf54a4386e55542", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd18002af90c6c6e907f2a62baf54a4386e55542"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d0546ac7789ce94d15d305b07269d8b5e10038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d0546ac7789ce94d15d305b07269d8b5e10038", "html_url": "https://github.com/rust-lang/rust/commit/76d0546ac7789ce94d15d305b07269d8b5e10038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d0546ac7789ce94d15d305b07269d8b5e10038/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7ac540f150e74ec7577df08511f977a67cd40e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ac540f150e74ec7577df08511f977a67cd40e1", "html_url": "https://github.com/rust-lang/rust/commit/b7ac540f150e74ec7577df08511f977a67cd40e1"}], "stats": {"total": 82, "additions": 20, "deletions": 62}, "files": [{"sha": "b663ba171959fa1a7793cedf691692d5a4ea51a3", "filename": "crates/ide/src/completion/complete_postfix/format_like.rs", "status": "modified", "additions": 20, "deletions": 62, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/76d0546ac7789ce94d15d305b07269d8b5e10038/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d0546ac7789ce94d15d305b07269d8b5e10038/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs?ref=76d0546ac7789ce94d15d305b07269d8b5e10038", "patch": "@@ -20,6 +20,18 @@ use crate::completion::{\n };\n use syntax::ast::{self, AstToken};\n \n+/// Mapping (\"postfix completion item\" => \"macro to use\")\n+static KINDS: &[(&str, &str)] = &[\n+    (\"fmt\", \"format!\"),\n+    (\"panic\", \"panic!\"),\n+    (\"println\", \"println!\"),\n+    (\"logd\", \"log::debug!\"),\n+    (\"logt\", \"log::trace!\"),\n+    (\"logi\", \"log::info!\"),\n+    (\"logw\", \"log::warn!\"),\n+    (\"loge\", \"log::error!\"),\n+];\n+\n pub(super) fn add_format_like_completions(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n@@ -36,11 +48,10 @@ pub(super) fn add_format_like_completions(\n     let mut parser = FormatStrParser::new(input);\n \n     if parser.parse().is_ok() {\n-        for kind in PostfixKind::all_suggestions() {\n-            let snippet = parser.into_suggestion(*kind);\n-            let (label, detail) = kind.into_description();\n+        for (label, macro_name) in KINDS {\n+            let snippet = parser.into_suggestion(macro_name);\n \n-            postfix_snippet(ctx, cap, &dot_receiver, label, detail, &snippet).add_to(acc);\n+            postfix_snippet(ctx, cap, &dot_receiver, label, macro_name, &snippet).add_to(acc);\n         }\n     }\n }\n@@ -66,59 +77,6 @@ pub struct FormatStrParser {\n     parsed: bool,\n }\n \n-#[derive(Debug, Clone, Copy)]\n-pub enum PostfixKind {\n-    Format,\n-    Panic,\n-    Println,\n-    LogDebug,\n-    LogTrace,\n-    LogInfo,\n-    LogWarn,\n-    LogError,\n-}\n-\n-impl PostfixKind {\n-    pub fn all_suggestions() -> &'static [PostfixKind] {\n-        &[\n-            Self::Format,\n-            Self::Panic,\n-            Self::Println,\n-            Self::LogDebug,\n-            Self::LogTrace,\n-            Self::LogInfo,\n-            Self::LogWarn,\n-            Self::LogError,\n-        ]\n-    }\n-\n-    pub fn into_description(self) -> (&'static str, &'static str) {\n-        match self {\n-            Self::Format => (\"fmt\", \"format!\"),\n-            Self::Panic => (\"panic\", \"panic!\"),\n-            Self::Println => (\"println\", \"println!\"),\n-            Self::LogDebug => (\"logd\", \"log::debug!\"),\n-            Self::LogTrace => (\"logt\", \"log::trace!\"),\n-            Self::LogInfo => (\"logi\", \"log::info!\"),\n-            Self::LogWarn => (\"logw\", \"log::warn!\"),\n-            Self::LogError => (\"loge\", \"log::error!\"),\n-        }\n-    }\n-\n-    pub fn into_macro_name(self) -> &'static str {\n-        match self {\n-            Self::Format => \"format!\",\n-            Self::Panic => \"panic!\",\n-            Self::Println => \"println!\",\n-            Self::LogDebug => \"log::debug!\",\n-            Self::LogTrace => \"log::trace!\",\n-            Self::LogInfo => \"log::info!\",\n-            Self::LogWarn => \"log::warn!\",\n-            Self::LogError => \"log::error!\",\n-        }\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq)]\n enum State {\n     NotExpr,\n@@ -235,11 +193,11 @@ impl FormatStrParser {\n         Ok(())\n     }\n \n-    pub fn into_suggestion(&self, kind: PostfixKind) -> String {\n+    pub fn into_suggestion(&self, macro_name: &str) -> String {\n         assert!(self.parsed, \"Attempt to get a suggestion from not parsed expression\");\n \n         let expressions_as_string = self.extracted_expressions.join(\", \");\n-        format!(r#\"{}(\"{}\", {})\"#, kind.into_macro_name(), self.output, expressions_as_string)\n+        format!(r#\"{}(\"{}\", {})\"#, macro_name, self.output, expressions_as_string)\n     }\n }\n \n@@ -300,13 +258,13 @@ mod tests {\n     #[test]\n     fn test_into_suggestion() {\n         let test_vector = &[\n-            (PostfixKind::Println, \"{}\", r#\"println!(\"{}\", $1)\"#),\n+            (\"println!\", \"{}\", r#\"println!(\"{}\", $1)\"#),\n             (\n-                PostfixKind::LogInfo,\n+                \"log::info!\",\n                 \"{} {expr} {} {2 + 2}\",\n                 r#\"log::info!(\"{} {} {} {}\", $1, expr, $2, 2 + 2)\"#,\n             ),\n-            (PostfixKind::Format, \"{expr:?}\", r#\"format!(\"{:?}\", expr)\"#),\n+            (\"format!\", \"{expr:?}\", r#\"format!(\"{:?}\", expr)\"#),\n         ];\n \n         for (kind, input, output) in test_vector {"}]}