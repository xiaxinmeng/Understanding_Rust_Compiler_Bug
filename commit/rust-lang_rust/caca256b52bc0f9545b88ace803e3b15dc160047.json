{"sha": "caca256b52bc0f9545b88ace803e3b15dc160047", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhY2EyNTZiNTJiYzBmOTU0NWI4OGFjZTgwM2UzYjE1ZGMxNjAwNDc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-31T08:41:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-31T08:41:29Z"}, "message": "Rollup merge of #88503 - m-ou-se:array-into-inter-ambiguous, r=cjgillot\n\nWarn when [T; N].into_iter() is ambiguous in the new edition.\n\nFixes https://github.com/rust-lang/rust/issues/88475\n\nIn https://github.com/rust-lang/rust/issues/88475, a situation was found where `[T; N].into_iter()` becomes *ambiguous* in the new edition. This is different than the case where `(&[T; N]).into_iter()` resolves differently, which was the only case handled by the `array_into_iter` lint. This is almost identical to the new-traits-in-the-prelude problem. Effectively, due to the array-into-iter hack disappearing in Rust 2021, we effectively added `IntoIterator` to the 'prelude' in Rust 2021 specifically for arrays.\n\nThis modifies the prelude collisions lint to detect that case and emit a `array_into_iter` lint in that case.", "tree": {"sha": "9c2990f322a8c9fdb645ec6f1a874867dd4e23bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c2990f322a8c9fdb645ec6f1a874867dd4e23bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caca256b52bc0f9545b88ace803e3b15dc160047", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLes5CRBK7hj4Ov3rIwAAlQUIAAMHouTa0PMssLokj/p5ieWD\ncqjcWJtdTAwgLX7FNH7T32n97UJhnvSMRcGIDNqXKQXRzDV8isJduEYXZW4nFMSW\njUVhxL7DjtaOong0KKyas1OwERHNCQ/RloW4Ws5/iMAE1h1MMzZjJlk3S4nGw4AY\nudM/vUhn4MKMmIqbGaEloE077oPnb8UA995Yo7B4YY87pbjzgMBaJFqQG4kceprk\ns9oh7+boq+sL1ObLjP2b7th9BsRQS7HLuaUJ8fN/XB/8umELOT2F31i8o4PScSlW\niE3mIakevbi1CBDq4x9TSG6nfCQu1Wi5GF+MR/nuimFeMahvPvY4PYUrkIc1VVo=\n=2TQy\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c2990f322a8c9fdb645ec6f1a874867dd4e23bf\nparent db44069482b3e14582809989859a5cc791e3110c\nparent ac93ca3b94fefb2ac4844722d4b3222e2f331046\nauthor Mara Bos <m-ou.se@m-ou.se> 1630399289 +0200\ncommitter GitHub <noreply@github.com> 1630399289 +0200\n\nRollup merge of #88503 - m-ou-se:array-into-inter-ambiguous, r=cjgillot\n\nWarn when [T; N].into_iter() is ambiguous in the new edition.\n\nFixes https://github.com/rust-lang/rust/issues/88475\n\nIn https://github.com/rust-lang/rust/issues/88475, a situation was found where `[T; N].into_iter()` becomes *ambiguous* in the new edition. This is different than the case where `(&[T; N]).into_iter()` resolves differently, which was the only case handled by the `array_into_iter` lint. This is almost identical to the new-traits-in-the-prelude problem. Effectively, due to the array-into-iter hack disappearing in Rust 2021, we effectively added `IntoIterator` to the 'prelude' in Rust 2021 specifically for arrays.\n\nThis modifies the prelude collisions lint to detect that case and emit a `array_into_iter` lint in that case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caca256b52bc0f9545b88ace803e3b15dc160047", "html_url": "https://github.com/rust-lang/rust/commit/caca256b52bc0f9545b88ace803e3b15dc160047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caca256b52bc0f9545b88ace803e3b15dc160047/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db44069482b3e14582809989859a5cc791e3110c", "url": "https://api.github.com/repos/rust-lang/rust/commits/db44069482b3e14582809989859a5cc791e3110c", "html_url": "https://github.com/rust-lang/rust/commit/db44069482b3e14582809989859a5cc791e3110c"}, {"sha": "ac93ca3b94fefb2ac4844722d4b3222e2f331046", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac93ca3b94fefb2ac4844722d4b3222e2f331046", "html_url": "https://github.com/rust-lang/rust/commit/ac93ca3b94fefb2ac4844722d4b3222e2f331046"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "1dfe710eceec5ee0986830c95b0f2373a27c48ec", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caca256b52bc0f9545b88ace803e3b15dc160047/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/caca256b52bc0f9545b88ace803e3b15dc160047/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=caca256b52bc0f9545b88ace803e3b15dc160047", "patch": "@@ -4405,6 +4405,7 @@ dependencies = [\n  \"rustc_hir_pretty\",\n  \"rustc_index\",\n  \"rustc_infer\",\n+ \"rustc_lint\",\n  \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_session\","}, {"sha": "ef4bda666ba062c7bb033084109649cda82bab23", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca256b52bc0f9545b88ace803e3b15dc160047/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca256b52bc0f9545b88ace803e3b15dc160047/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=caca256b52bc0f9545b88ace803e3b15dc160047", "patch": "@@ -62,6 +62,8 @@ mod traits;\n mod types;\n mod unused;\n \n+pub use array_into_iter::ARRAY_INTO_ITER;\n+\n use rustc_ast as ast;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;"}, {"sha": "dd76a5e4b99b235b0ba395fa38e95776b3029f3e", "filename": "compiler/rustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caca256b52bc0f9545b88ace803e3b15dc160047/compiler%2Frustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/caca256b52bc0f9545b88ace803e3b15dc160047/compiler%2Frustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2FCargo.toml?ref=caca256b52bc0f9545b88ace803e3b15dc160047", "patch": "@@ -26,3 +26,4 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_ty_utils = { path = \"../rustc_ty_utils\" }\n+rustc_lint = { path = \"../rustc_lint\" }"}, {"sha": "1347f56258ea16ab8122c146e832c6b5f3173602", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/caca256b52bc0f9545b88ace803e3b15dc160047/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca256b52bc0f9545b88ace803e3b15dc160047/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=caca256b52bc0f9545b88ace803e3b15dc160047", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{Adt, Ref, Ty};\n+use rustc_middle::ty::{Adt, Array, Ref, Ty};\n use rustc_session::lint::builtin::RUST_2021_PRELUDE_COLLISIONS;\n use rustc_span::symbol::kw::{Empty, Underscore};\n use rustc_span::symbol::{sym, Ident};\n@@ -38,10 +38,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        // These are the method names that were added to prelude in Rust 2021\n-        if !matches!(segment.ident.name, sym::try_into) {\n-            return;\n-        }\n+        let prelude_or_array_lint = match segment.ident.name {\n+            // `try_into` was added to the prelude in Rust 2021.\n+            sym::try_into => RUST_2021_PRELUDE_COLLISIONS,\n+            // `into_iter` wasn't added to the prelude,\n+            // but `[T; N].into_iter()` doesn't resolve to IntoIterator::into_iter\n+            // before Rust 2021, which results in the same problem.\n+            // It is only a problem for arrays.\n+            sym::into_iter if let Array(..) = self_ty.kind() => {\n+                // In this case, it wasn't really a prelude addition that was the problem.\n+                // Instead, the problem is that the array-into_iter hack will no longer apply in Rust 2021.\n+                rustc_lint::ARRAY_INTO_ITER\n+            }\n+            _ => return,\n+        };\n \n         // No need to lint if method came from std/core, as that will now be in the prelude\n         if matches!(self.tcx.crate_name(pick.item.def_id.krate), sym::std | sym::core) {\n@@ -69,7 +79,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Inherent impls only require not relying on autoref and autoderef in order to\n             // ensure that the trait implementation won't be used\n             self.tcx.struct_span_lint_hir(\n-                RUST_2021_PRELUDE_COLLISIONS,\n+                prelude_or_array_lint,\n                 self_expr.hir_id,\n                 self_expr.span,\n                 |lint| {\n@@ -130,7 +140,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // trait implementations require full disambiguation to not clash with the new prelude\n             // additions (i.e. convert from dot-call to fully-qualified call)\n             self.tcx.struct_span_lint_hir(\n-                RUST_2021_PRELUDE_COLLISIONS,\n+                prelude_or_array_lint,\n                 call_expr.hir_id,\n                 call_expr.span,\n                 |lint| {"}, {"sha": "76f661baed7509ac41b280d3d683e63093ce890b", "filename": "src/test/ui/rust-2021/array-into-iter-ambiguous.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/caca256b52bc0f9545b88ace803e3b15dc160047/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/caca256b52bc0f9545b88ace803e3b15dc160047/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.fixed?ref=caca256b52bc0f9545b88ace803e3b15dc160047", "patch": "@@ -0,0 +1,27 @@\n+// See https://github.com/rust-lang/rust/issues/88475\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(array_into_iter)]\n+#![allow(unused)]\n+\n+struct FooIter;\n+\n+trait MyIntoIter {\n+    fn into_iter(self) -> FooIter;\n+}\n+\n+impl<T, const N: usize> MyIntoIter for [T; N] {\n+    fn into_iter(self) -> FooIter {\n+        FooIter\n+    }\n+}\n+\n+struct Point;\n+\n+pub fn main() {\n+    let points: [Point; 1] = [Point];\n+    let y = MyIntoIter::into_iter(points);\n+    //~^ WARNING trait method `into_iter` will become ambiguous in Rust 2021\n+    //~| WARNING this changes meaning in Rust 2021\n+}"}, {"sha": "83fbf8f6c218dbd26ee01eec431cc7e52a410cdf", "filename": "src/test/ui/rust-2021/array-into-iter-ambiguous.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/caca256b52bc0f9545b88ace803e3b15dc160047/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca256b52bc0f9545b88ace803e3b15dc160047/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.rs?ref=caca256b52bc0f9545b88ace803e3b15dc160047", "patch": "@@ -0,0 +1,27 @@\n+// See https://github.com/rust-lang/rust/issues/88475\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(array_into_iter)]\n+#![allow(unused)]\n+\n+struct FooIter;\n+\n+trait MyIntoIter {\n+    fn into_iter(self) -> FooIter;\n+}\n+\n+impl<T, const N: usize> MyIntoIter for [T; N] {\n+    fn into_iter(self) -> FooIter {\n+        FooIter\n+    }\n+}\n+\n+struct Point;\n+\n+pub fn main() {\n+    let points: [Point; 1] = [Point];\n+    let y = points.into_iter();\n+    //~^ WARNING trait method `into_iter` will become ambiguous in Rust 2021\n+    //~| WARNING this changes meaning in Rust 2021\n+}"}, {"sha": "fac8d21c7b48a2e0f11eade73539b34aa929b3c6", "filename": "src/test/ui/rust-2021/array-into-iter-ambiguous.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/caca256b52bc0f9545b88ace803e3b15dc160047/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caca256b52bc0f9545b88ace803e3b15dc160047/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.stderr?ref=caca256b52bc0f9545b88ace803e3b15dc160047", "patch": "@@ -0,0 +1,16 @@\n+warning: trait method `into_iter` will become ambiguous in Rust 2021\n+  --> $DIR/array-into-iter-ambiguous.rs:24:13\n+   |\n+LL |     let y = points.into_iter();\n+   |             ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `MyIntoIter::into_iter(points)`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/array-into-iter-ambiguous.rs:5:9\n+   |\n+LL | #![warn(array_into_iter)]\n+   |         ^^^^^^^^^^^^^^^\n+   = warning: this changes meaning in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n+\n+warning: 1 warning emitted\n+"}]}