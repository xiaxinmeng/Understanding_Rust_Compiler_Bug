{"sha": "8003ccfdcd5731fe00c48f477857bf5ad52c6146", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMDNjY2ZkY2Q1NzMxZmUwMGM0OGY0Nzc4NTdiZjVhZDUyYzYxNDY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T08:53:11Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T11:06:47Z"}, "message": "ty_def_id -> def_id_for_type_of", "tree": {"sha": "de8a26a0fc6ba22fee7c54f02255815001146bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de8a26a0fc6ba22fee7c54f02255815001146bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8003ccfdcd5731fe00c48f477857bf5ad52c6146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8003ccfdcd5731fe00c48f477857bf5ad52c6146", "html_url": "https://github.com/rust-lang/rust/commit/8003ccfdcd5731fe00c48f477857bf5ad52c6146", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8003ccfdcd5731fe00c48f477857bf5ad52c6146/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a909eb6b653080683b49b2be5e6621ca08cecf01", "url": "https://api.github.com/repos/rust-lang/rust/commits/a909eb6b653080683b49b2be5e6621ca08cecf01", "html_url": "https://github.com/rust-lang/rust/commit/a909eb6b653080683b49b2be5e6621ca08cecf01"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "26ce8e54a65ca6aa8c14e906cf04e3ee0360b60f", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8003ccfdcd5731fe00c48f477857bf5ad52c6146/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8003ccfdcd5731fe00c48f477857bf5ad52c6146/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=8003ccfdcd5731fe00c48f477857bf5ad52c6146", "patch": "@@ -1623,7 +1623,7 @@ impl WithOptConstParam<LocalDefId> {\n         WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }\n     }\n \n-    pub fn ty_def_id(self) -> DefId {\n+    pub fn def_id_for_type_of(self) -> DefId {\n         if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }\n     }\n }\n@@ -1653,7 +1653,7 @@ impl WithOptConstParam<DefId> {\n         self.did.is_local()\n     }\n \n-    pub fn ty_def_id(self) -> DefId {\n+    pub fn def_id_for_type_of(self) -> DefId {\n         self.const_param_did.unwrap_or(self.did)\n     }\n }"}, {"sha": "8cdfe5e5ac6fdcca06d6f96e50ae775a7bd5a316", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8003ccfdcd5731fe00c48f477857bf5ad52c6146/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8003ccfdcd5731fe00c48f477857bf5ad52c6146/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=8003ccfdcd5731fe00c48f477857bf5ad52c6146", "patch": "@@ -2231,7 +2231,7 @@ impl<'tcx> Const<'tcx> {\n \n         let expr = &tcx.hir().body(body_id).value;\n \n-        let ty = tcx.type_of(def.ty_def_id());\n+        let ty = tcx.type_of(def.def_id_for_type_of());\n \n         let lit_input = match expr.kind {\n             hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),"}, {"sha": "55d817b3f1ce38d925746068879b8bcc5678030b", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8003ccfdcd5731fe00c48f477857bf5ad52c6146/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8003ccfdcd5731fe00c48f477857bf5ad52c6146/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=8003ccfdcd5731fe00c48f477857bf5ad52c6146", "patch": "@@ -636,7 +636,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 // For a constant body, there are no inputs, and one\n                 // \"output\" (the type of the constant).\n                 assert_eq!(self.mir_def.did.to_def_id(), def_id);\n-                let ty = tcx.type_of(self.mir_def.ty_def_id());\n+                let ty = tcx.type_of(self.mir_def.def_id_for_type_of());\n                 let ty = indices.fold_to_region_vids(tcx, &ty);\n                 ty::Binder::dummy(tcx.intern_type_list(&[ty]))\n             }"}, {"sha": "1a3308468bb4c51a08cd133a56a15aa0c5e78570", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8003ccfdcd5731fe00c48f477857bf5ad52c6146/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8003ccfdcd5731fe00c48f477857bf5ad52c6146/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=8003ccfdcd5731fe00c48f477857bf5ad52c6146", "patch": "@@ -50,7 +50,7 @@ fn inner_resolve_instance<'tcx>(\n         let item = tcx.associated_item(def.did);\n         resolve_associated_item(tcx, &item, param_env, trait_def_id, substs)\n     } else {\n-        let ty = tcx.type_of(def.ty_def_id());\n+        let ty = tcx.type_of(def.def_id_for_type_of());\n         let item_type = tcx.subst_and_normalize_erasing_regions(substs, param_env, &ty);\n \n         let def = match item_type.kind {"}]}