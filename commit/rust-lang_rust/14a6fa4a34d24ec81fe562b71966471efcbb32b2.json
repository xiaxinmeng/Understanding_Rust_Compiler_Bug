{"sha": "14a6fa4a34d24ec81fe562b71966471efcbb32b2", "node_id": "C_kwDOAAsO6NoAKDE0YTZmYTRhMzRkMjRlYzgxZmU1NjJiNzE5NjY0NzFlZmNiYjMyYjI", "commit": {"author": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-20T02:09:27Z"}, "committer": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-25T10:06:45Z"}, "message": "use in_external_macro", "tree": {"sha": "62699f9b8b0ae27937cd83d3748112b15c74db86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62699f9b8b0ae27937cd83d3748112b15c74db86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14a6fa4a34d24ec81fe562b71966471efcbb32b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14a6fa4a34d24ec81fe562b71966471efcbb32b2", "html_url": "https://github.com/rust-lang/rust/commit/14a6fa4a34d24ec81fe562b71966471efcbb32b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14a6fa4a34d24ec81fe562b71966471efcbb32b2/comments", "author": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ac30d3c860a5ed67c3d31b9d93c251a19af9c6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac30d3c860a5ed67c3d31b9d93c251a19af9c6f", "html_url": "https://github.com/rust-lang/rust/commit/1ac30d3c860a5ed67c3d31b9d93c251a19af9c6f"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "5b588e914fdf887b1d50b15bee5e0887e8794312", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14a6fa4a34d24ec81fe562b71966471efcbb32b2/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a6fa4a34d24ec81fe562b71966471efcbb32b2/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=14a6fa4a34d24ec81fe562b71966471efcbb32b2", "patch": "@@ -253,10 +253,6 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         use rustc_ast::LitKind;\n \n-        if e.span.from_expansion() {\n-            return;\n-        }\n-\n         if_chain! {\n             // Find std::str::converts::from_utf8\n             if let Some(args) = match_function_call(cx, e, &paths::STR_FROM_UTF8);\n@@ -296,6 +292,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n         }\n \n         if_chain! {\n+            if !in_external_macro(cx.sess(), e.span);\n             if let ExprKind::MethodCall(path, receiver, ..) = &e.kind;\n             if path.ident.name == sym!(as_bytes);\n             if let ExprKind::Lit(lit) = &receiver.kind;"}, {"sha": "e5bb906663c564d65674e91fa6239dc49adb2da5", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14a6fa4a34d24ec81fe562b71966471efcbb32b2/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a6fa4a34d24ec81fe562b71966471efcbb32b2/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=14a6fa4a34d24ec81fe562b71966471efcbb32b2", "patch": "@@ -21,6 +21,13 @@ macro_rules! string_add {\n     };\n }\n \n+#[macro_export]\n+macro_rules! string_lit_as_bytes {\n+    ($s:literal) => {\n+        const C: &[u8] = $s.as_bytes();\n+    };\n+}\n+\n #[macro_export]\n macro_rules! mut_mut {\n     () => {"}, {"sha": "3fc11b8b0885e9070944e97d74cc9fa6ddb6a42e", "filename": "tests/ui/string_lit_as_bytes.fixed", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14a6fa4a34d24ec81fe562b71966471efcbb32b2/tests%2Fui%2Fstring_lit_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/14a6fa4a34d24ec81fe562b71966471efcbb32b2/tests%2Fui%2Fstring_lit_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.fixed?ref=14a6fa4a34d24ec81fe562b71966471efcbb32b2", "patch": "@@ -1,11 +1,15 @@\n //@run-rustfix\n+//@aux-build:macro_rules.rs\n \n #![allow(dead_code, unused_variables)]\n #![warn(clippy::string_lit_as_bytes)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n macro_rules! b {\n     ($b:literal) => {\n-        const C: &[u8] = $b.as_bytes();\n+        const B: &[u8] = b\"warning\";\n     };\n }\n \n@@ -17,7 +21,9 @@ fn str_lit_as_bytes() {\n     let bs = b\"lit to string\".to_vec();\n     let bs = b\"lit to owned\".to_vec();\n \n-    b!(\"aaa\");\n+    b!(\"warning\");\n+\n+    string_lit_as_bytes!(\"no warning\");\n \n     // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();"}, {"sha": "7d54acf630e6cf06d0ffad3298b2809245407e6e", "filename": "tests/ui/string_lit_as_bytes.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14a6fa4a34d24ec81fe562b71966471efcbb32b2/tests%2Fui%2Fstring_lit_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a6fa4a34d24ec81fe562b71966471efcbb32b2/tests%2Fui%2Fstring_lit_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.rs?ref=14a6fa4a34d24ec81fe562b71966471efcbb32b2", "patch": "@@ -1,11 +1,15 @@\n //@run-rustfix\n+//@aux-build:macro_rules.rs\n \n #![allow(dead_code, unused_variables)]\n #![warn(clippy::string_lit_as_bytes)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n macro_rules! b {\n     ($b:literal) => {\n-        const C: &[u8] = $b.as_bytes();\n+        const B: &[u8] = $b.as_bytes();\n     };\n }\n \n@@ -17,7 +21,9 @@ fn str_lit_as_bytes() {\n     let bs = \"lit to string\".to_string().into_bytes();\n     let bs = \"lit to owned\".to_owned().into_bytes();\n \n-    b!(\"aaa\");\n+    b!(\"warning\");\n+\n+    string_lit_as_bytes!(\"no warning\");\n \n     // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();"}, {"sha": "61b4e210e0fb94d6c0173faf863016639a8b0733", "filename": "tests/ui/string_lit_as_bytes.stderr", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/14a6fa4a34d24ec81fe562b71966471efcbb32b2/tests%2Fui%2Fstring_lit_as_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14a6fa4a34d24ec81fe562b71966471efcbb32b2/tests%2Fui%2Fstring_lit_as_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.stderr?ref=14a6fa4a34d24ec81fe562b71966471efcbb32b2", "patch": "@@ -1,40 +1,51 @@\n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:13:14\n+  --> $DIR/string_lit_as_bytes.rs:17:14\n    |\n LL |     let bs = \"hello there\".as_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"hello there\"`\n    |\n    = note: `-D clippy::string-lit-as-bytes` implied by `-D warnings`\n \n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:15:14\n+  --> $DIR/string_lit_as_bytes.rs:19:14\n    |\n LL |     let bs = r###\"raw string with 3# plus \" \"\"###.as_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `br###\"raw string with 3# plus \" \"\"###`\n \n error: calling `into_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:17:14\n+  --> $DIR/string_lit_as_bytes.rs:21:14\n    |\n LL |     let bs = \"lit to string\".to_string().into_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"lit to string\".to_vec()`\n \n error: calling `into_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:18:14\n+  --> $DIR/string_lit_as_bytes.rs:22:14\n    |\n LL |     let bs = \"lit to owned\".to_owned().into_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"lit to owned\".to_vec()`\n \n+error: calling `as_bytes()` on a string literal\n+  --> $DIR/string_lit_as_bytes.rs:12:26\n+   |\n+LL |         const B: &[u8] = $b.as_bytes();\n+   |                          ^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"warning\"`\n+...\n+LL |     b!(\"warning\");\n+   |     ------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: calling `as_bytes()` on `include_str!(..)`\n-  --> $DIR/string_lit_as_bytes.rs:33:22\n+  --> $DIR/string_lit_as_bytes.rs:39:22\n    |\n LL |     let includestr = include_str!(\"string_lit_as_bytes.rs\").as_bytes();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `include_bytes!(..)` instead: `include_bytes!(\"string_lit_as_bytes.rs\")`\n \n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:35:13\n+  --> $DIR/string_lit_as_bytes.rs:41:13\n    |\n LL |     let _ = \"string with newline/t/n\".as_bytes();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"string with newline/t/n\"`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n "}]}