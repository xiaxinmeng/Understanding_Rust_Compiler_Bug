{"sha": "e745e098c45771c5d411f55b72efa96cbeb9aca6", "node_id": "C_kwDOAAsO6NoAKGU3NDVlMDk4YzQ1NzcxYzVkNDExZjU1YjcyZWZhOTZjYmViOWFjYTY", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-05T19:52:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T19:52:45Z"}, "message": "Rollup merge of #89351 - tspiteri:wrapping_rem, r=dtolnay\n\nfor signed wrapping remainder, do not compare lhs with MIN\n\nSince the wrapped remainder is going to be 0 for all cases when the rhs is -1, there is no need to compare the lhs with MIN.", "tree": {"sha": "bbffeab68ab88fc5a69fa98772cdb59f3c9b1e6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbffeab68ab88fc5a69fa98772cdb59f3c9b1e6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e745e098c45771c5d411f55b72efa96cbeb9aca6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXK0NCRBK7hj4Ov3rIwAAqGQIACsp06K+CMfJj6qATcbG/xIe\nVJZ4xAStk36ZYWRzfl1ctNSkME6uoEVV7prfL04m8JeMTqPS4Epwsqp++t2DNfW+\nQhObICYnY0lacK8yKfLSRwl8lCa6ipg5eNSJ1Sv4dGBtU6wRNXDm5erSdpgz9RFm\nR4CwFrotSk0vxckoNvdYhG1Uysl8xiC0frn0l7y9dzNREhoJ7novQtXksTjx34Wc\nKTFsvPj/RsDfOVfy2xOmYQnKxg/Z2kUSBVw/BlKB0tibmRf6c7IIqnsKwf1GryrZ\n8vQxsvbLVC7vFhuR4WHQkQcTogBGcH+3hUq2CuPw5gGYvIlXcja4tkxKlh8CrGw=\n=6SC+\n-----END PGP SIGNATURE-----\n", "payload": "tree bbffeab68ab88fc5a69fa98772cdb59f3c9b1e6f\nparent 0352a2820d65159c19e323b519c147d134fbf9f0\nparent 4ec0377d6a9118b41df4fb587dc0b7d1fc53656f\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633463565 -0700\ncommitter GitHub <noreply@github.com> 1633463565 -0700\n\nRollup merge of #89351 - tspiteri:wrapping_rem, r=dtolnay\n\nfor signed wrapping remainder, do not compare lhs with MIN\n\nSince the wrapped remainder is going to be 0 for all cases when the rhs is -1, there is no need to compare the lhs with MIN.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e745e098c45771c5d411f55b72efa96cbeb9aca6", "html_url": "https://github.com/rust-lang/rust/commit/e745e098c45771c5d411f55b72efa96cbeb9aca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e745e098c45771c5d411f55b72efa96cbeb9aca6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0352a2820d65159c19e323b519c147d134fbf9f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0352a2820d65159c19e323b519c147d134fbf9f0", "html_url": "https://github.com/rust-lang/rust/commit/0352a2820d65159c19e323b519c147d134fbf9f0"}, {"sha": "4ec0377d6a9118b41df4fb587dc0b7d1fc53656f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec0377d6a9118b41df4fb587dc0b7d1fc53656f", "html_url": "https://github.com/rust-lang/rust/commit/4ec0377d6a9118b41df4fb587dc0b7d1fc53656f"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "9d46948ce02af8fdcbec47d90c949ebcbfdbff4c", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e745e098c45771c5d411f55b72efa96cbeb9aca6/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e745e098c45771c5d411f55b72efa96cbeb9aca6/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=e745e098c45771c5d411f55b72efa96cbeb9aca6", "patch": "@@ -1533,9 +1533,8 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n-            // Using `&` helps LLVM see that it is the same check made in division.\n-            if unlikely!((self == Self::MIN) & (rhs == -1)) {\n-                (0, true)\n+            if unlikely!(rhs == -1) {\n+                (0, self == Self::MIN)\n             } else {\n                 (self % rhs, false)\n             }\n@@ -1565,9 +1564,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n-            // Using `&` helps LLVM see that it is the same check made in division.\n-            if unlikely!((self == Self::MIN) & (rhs == -1)) {\n-                (0, true)\n+            if unlikely!(rhs == -1) {\n+                (0, self == Self::MIN)\n             } else {\n                 (self.rem_euclid(rhs), false)\n             }"}]}