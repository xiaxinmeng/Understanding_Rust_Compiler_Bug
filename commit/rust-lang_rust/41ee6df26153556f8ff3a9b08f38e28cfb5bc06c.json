{"sha": "41ee6df26153556f8ff3a9b08f38e28cfb5bc06c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZWU2ZGYyNjE1MzU1NmY4ZmYzYTliMDhmMzhlMjhjZmI1YmMwNmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:37Z"}, "message": "rollup merge of #24846: dotdash/fast_cttz8\n\nCurrently, LLVM lowers a cttz8 on x86_64 to these instructions:\n\n```asm\n    movzbl      %dil, %eax\n    bsfl        %eax, %eax\n    movl        $32, %ecx\n    cmovnel     %eax, %ecx\n    cmpl        $32, %ecx\n    movl        $8, %eax\n    cmovnel     %ecx, %eax\n```\n\nTo improve the codegen, we can zero extend the 8 bit integer, then set\nbit 8 and perform a cttz operation on the extended value. That way\nthere's no conditional operation involved at all.\n\nThis was discovered by  this benchmark: https://github.com/Kimundi/long_strings_without_repeats\n\nTimings on my box with the current nightly:\n```\nrunning 4 tests\ntest bench_cpp_naive_big     ... bench:   5479222 ns/iter (+/- 254222)\ntest bench_noop_big          ... bench:    571405 ns/iter (+/- 111950)\ntest bench_rust_naive_big    ... bench:   7798102 ns/iter (+/- 148841)\ntest bench_rust_unsafe_big   ... bench:   6606488 ns/iter (+/- 67529)\n```\n\nTimings with the patch applied:\n```\nrunning 4 tests\ntest bench_cpp_naive_big     ... bench:   5470944 ns/iter (+/- 7109)\ntest bench_noop_big          ... bench:    568944 ns/iter (+/- 6895)\ntest bench_rust_naive_big    ... bench:   6795901 ns/iter (+/- 43806)\ntest bench_rust_unsafe_big   ... bench:   5584879 ns/iter (+/- 5291)\n```", "tree": {"sha": "7de411b0cd37c893267dfaa52be4a22d528504aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de411b0cd37c893267dfaa52be4a22d528504aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ee6df26153556f8ff3a9b08f38e28cfb5bc06c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ee6df26153556f8ff3a9b08f38e28cfb5bc06c", "html_url": "https://github.com/rust-lang/rust/commit/41ee6df26153556f8ff3a9b08f38e28cfb5bc06c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ee6df26153556f8ff3a9b08f38e28cfb5bc06c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfb60802c5411881658d28b79b55606e27d9f827", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb60802c5411881658d28b79b55606e27d9f827", "html_url": "https://github.com/rust-lang/rust/commit/dfb60802c5411881658d28b79b55606e27d9f827"}, {"sha": "36dccec2f39c7e1da7f056ea421ad5256df3fb0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/36dccec2f39c7e1da7f056ea421ad5256df3fb0b", "html_url": "https://github.com/rust-lang/rust/commit/36dccec2f39c7e1da7f056ea421ad5256df3fb0b"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "b8638c5b09be257ea87e9c7db993ea0c930328d5", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/41ee6df26153556f8ff3a9b08f38e28cfb5bc06c/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ee6df26153556f8ff3a9b08f38e28cfb5bc06c/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=41ee6df26153556f8ff3a9b08f38e28cfb5bc06c", "patch": "@@ -745,7 +745,20 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn trailing_zeros(self) -> u32 {\n-            unsafe { $cttz(self as $ActualT) as u32 }\n+            // As of LLVM 3.6 the codegen for the zero-safe cttz8 intrinsic\n+            // emits two conditional moves on x86_64. By promoting the value to\n+            // u16 and setting bit 8, we get better code without any conditional\n+            // operations.\n+            // FIXME: There's a LLVM patch (http://reviews.llvm.org/D9284)\n+            // pending, remove this workaround once LLVM generates better code\n+            // for cttz8.\n+            unsafe {\n+                if $BITS == 8 {\n+                    intrinsics::cttz16(self as u16 | 0x100) as u32\n+                } else {\n+                    $cttz(self as $ActualT) as u32\n+                }\n+            }\n         }\n \n         /// Shifts the bits to the left by a specified amount, `n`,"}, {"sha": "8dbe927f06bf14257e7ef7b07f4ae235a13d0dce", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41ee6df26153556f8ff3a9b08f38e28cfb5bc06c/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ee6df26153556f8ff3a9b08f38e28cfb5bc06c/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=41ee6df26153556f8ff3a9b08f38e28cfb5bc06c", "patch": "@@ -109,11 +109,6 @@ pub fn main() {\n         assert_eq!(cttz32(100), 2);\n         assert_eq!(cttz64(100), 2);\n \n-        assert_eq!(cttz8(-1), 0);\n-        assert_eq!(cttz16(-1), 0);\n-        assert_eq!(cttz32(-1), 0);\n-        assert_eq!(cttz64(-1), 0);\n-\n         assert_eq!(bswap16(0x0A0B), 0x0B0A);\n         assert_eq!(bswap32(0x0ABBCC0D), 0x0DCCBB0A);\n         assert_eq!(bswap64(0x0122334455667708), 0x0877665544332201);"}]}