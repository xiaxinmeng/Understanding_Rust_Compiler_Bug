{"sha": "e252277fe9b44ed9a913aeeb9f55dc85eaadace4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNTIyNzdmZTliNDRlZDlhOTEzYWVlYjlmNTVkYzg1ZWFhZGFjZTQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-17T08:13:23Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-16T17:13:23Z"}, "message": "rustc: handle allocas and LoadRangeAsserts in unreachable blocks correctly.\n\nAn alloca in an unreachable block would shortcircuit with Undef, but with type\n`Type`, rather than type `*Type` (i.e. a plain value, not a pointer) but it is\nexpected to return a pointer into the stack, leading to confusion and LLVM\nasserts later.\n\nSimilarly, attaching the range metadata to a Load in an unreachable block\nmakes LLVM unhappy, since the Load returns Undef.\n\nFixes #7344.", "tree": {"sha": "f4c5efcf4e52b091b3053fa438d83035c5c06fb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c5efcf4e52b091b3053fa438d83035c5c06fb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e252277fe9b44ed9a913aeeb9f55dc85eaadace4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e252277fe9b44ed9a913aeeb9f55dc85eaadace4", "html_url": "https://github.com/rust-lang/rust/commit/e252277fe9b44ed9a913aeeb9f55dc85eaadace4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e252277fe9b44ed9a913aeeb9f55dc85eaadace4/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4f7561bcdf3b54dafefd478b86e1f7610e74348", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f7561bcdf3b54dafefd478b86e1f7610e74348", "html_url": "https://github.com/rust-lang/rust/commit/e4f7561bcdf3b54dafefd478b86e1f7610e74348"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "8b64809df9ea32cc216fdb04b60fb51c049f2c0d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e252277fe9b44ed9a913aeeb9f55dc85eaadace4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e252277fe9b44ed9a913aeeb9f55dc85eaadace4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e252277fe9b44ed9a913aeeb9f55dc85eaadace4", "patch": "@@ -1549,7 +1549,7 @@ pub fn alloca_maybe_zeroed(cx: block, ty: Type, name: &str, zero: bool) -> Value\n     let _icx = push_ctxt(\"alloca\");\n     if cx.unreachable {\n         unsafe {\n-            return llvm::LLVMGetUndef(ty.to_ref());\n+            return llvm::LLVMGetUndef(ty.ptr_to().to_ref());\n         }\n     }\n     let initcx = base::raw_block(cx.fcx, false, cx.fcx.get_llstaticallocas());"}, {"sha": "1b92574fd96e197bfeda60727464508bebccd598", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e252277fe9b44ed9a913aeeb9f55dc85eaadace4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e252277fe9b44ed9a913aeeb9f55dc85eaadace4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=e252277fe9b44ed9a913aeeb9f55dc85eaadace4", "patch": "@@ -569,15 +569,17 @@ pub fn LoadRangeAssert(cx: block, PointerVal: ValueRef, lo: c_ulonglong,\n                        hi: c_ulonglong, signed: lib::llvm::Bool) -> ValueRef {\n     let value = Load(cx, PointerVal);\n \n-    unsafe {\n-        let t = llvm::LLVMGetElementType(llvm::LLVMTypeOf(PointerVal));\n-        let min = llvm::LLVMConstInt(t, lo, signed);\n-        let max = llvm::LLVMConstInt(t, hi, signed);\n-\n-        do [min, max].as_imm_buf |ptr, len| {\n-            llvm::LLVMSetMetadata(value, lib::llvm::MD_range as c_uint,\n-                                  llvm::LLVMMDNodeInContext(cx.fcx.ccx.llcx,\n-                                                            ptr, len as c_uint));\n+    if !cx.unreachable {\n+        unsafe {\n+            let t = llvm::LLVMGetElementType(llvm::LLVMTypeOf(PointerVal));\n+            let min = llvm::LLVMConstInt(t, lo, signed);\n+            let max = llvm::LLVMConstInt(t, hi, signed);\n+\n+            do [min, max].as_imm_buf |ptr, len| {\n+                llvm::LLVMSetMetadata(value, lib::llvm::MD_range as c_uint,\n+                                      llvm::LLVMMDNodeInContext(cx.fcx.ccx.llcx,\n+                                                                ptr, len as c_uint));\n+            }\n         }\n     }\n "}, {"sha": "efd666c8d9691da794f308e445cb935c4f95a4d6", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e252277fe9b44ed9a913aeeb9f55dc85eaadace4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e252277fe9b44ed9a913aeeb9f55dc85eaadace4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=e252277fe9b44ed9a913aeeb9f55dc85eaadace4", "patch": "@@ -413,7 +413,7 @@ impl Datum {\n     pub fn to_value_datum(&self, bcx: block) -> Datum {\n         /*!\n          *\n-         * Yields a by-ref form of this datum.  This may involve\n+         * Yields a by-value form of this datum.  This may involve\n          * creation of a temporary stack slot.  The value returned by\n          * this function is not separately rooted from this datum, so\n          * it will not live longer than the current datum. */"}, {"sha": "acf55d2463bc3aa04ca8cd11cac06f239df5183d", "filename": "src/test/run-pass/issue-7344.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e252277fe9b44ed9a913aeeb9f55dc85eaadace4/src%2Ftest%2Frun-pass%2Fissue-7344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e252277fe9b44ed9a913aeeb9f55dc85eaadace4/src%2Ftest%2Frun-pass%2Fissue-7344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7344.rs?ref=e252277fe9b44ed9a913aeeb9f55dc85eaadace4", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unreachable_code)];\n+\n+fn foo() -> bool { false }\n+\n+fn bar() {\n+    return;\n+    !foo();\n+}\n+\n+fn baz() {\n+    return;\n+    if \"\" == \"\" {}\n+}\n+\n+fn main() {\n+    bar();\n+    baz();\n+}"}]}