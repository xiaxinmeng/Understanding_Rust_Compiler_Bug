{"sha": "94a1b266f9b3688d8fb6ff382e7b846a8d4eb38d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YTFiMjY2ZjliMzY4OGQ4ZmI2ZmYzODJlN2I4NDZhOGQ0ZWIzOGQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-04-19T20:38:37Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-04-19T20:38:37Z"}, "message": "Call skolemize_late_bound_regions only after fast rejection\n\nskolemize_late_bound_regions essentially copies the entire type (most of the times it shouldn't, but it does), and match_impl runs millions of times.\n\nTimes compiling rustc, tested with\n$ make -j4 rustc-stage1\n$ ( time RUSTFLAGS=-Z time-passes make -j4 rustc-stage2 ) # need LLVM time for calibration\n\nBefore:\nreal\t21m44.960s\nuser\t29m38.812s\nsys\t0m14.944s\n\nAfter:\nreal\t19m31.445s\nuser\t26m47.260s\nsys\t0m14.952s\n\nMaking this is a 10% performance improvement.\n\nLLVM passes took 867 seconds before, 862 seconds after.", "tree": {"sha": "ce0e1d08318b1e0c51712625cfa442adfe628d32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce0e1d08318b1e0c51712625cfa442adfe628d32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94a1b266f9b3688d8fb6ff382e7b846a8d4eb38d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94a1b266f9b3688d8fb6ff382e7b846a8d4eb38d", "html_url": "https://github.com/rust-lang/rust/commit/94a1b266f9b3688d8fb6ff382e7b846a8d4eb38d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94a1b266f9b3688d8fb6ff382e7b846a8d4eb38d/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be41e9806747febb761d4d9ba85e937197db09af", "url": "https://api.github.com/repos/rust-lang/rust/commits/be41e9806747febb761d4d9ba85e937197db09af", "html_url": "https://github.com/rust-lang/rust/commit/be41e9806747febb761d4d9ba85e937197db09af"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "153ec0ab2b375c439226dd173b3a46c334f757d5", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/94a1b266f9b3688d8fb6ff382e7b846a8d4eb38d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a1b266f9b3688d8fb6ff382e7b846a8d4eb38d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=94a1b266f9b3688d8fb6ff382e7b846a8d4eb38d", "patch": "@@ -532,11 +532,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                obligation.repr(self.tcx()));\n \n         self.infcx.probe(|snapshot| {\n-            let (skol_obligation_trait_ref, skol_map) =\n-                self.infcx().skolemize_late_bound_regions(&obligation.predicate, snapshot);\n-            match self.match_impl(impl_def_id, obligation, snapshot,\n-                                  &skol_map, skol_obligation_trait_ref.trait_ref.clone()) {\n-                Ok(substs) => {\n+            match self.match_impl(impl_def_id, obligation, snapshot) {\n+                Ok((substs, skol_map)) => {\n                     let vtable_impl = self.vtable_impl(impl_def_id,\n                                                        substs,\n                                                        obligation.cause.clone(),\n@@ -1160,10 +1157,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let all_impls = self.all_impls(def_id);\n         for &impl_def_id in &all_impls {\n             self.infcx.probe(|snapshot| {\n-                let (skol_obligation_trait_pred, skol_map) =\n-                    self.infcx().skolemize_late_bound_regions(&obligation.predicate, snapshot);\n-                match self.match_impl(impl_def_id, obligation, snapshot,\n-                                      &skol_map, skol_obligation_trait_pred.trait_ref.clone()) {\n+                match self.match_impl(impl_def_id, obligation, snapshot) {\n                     Ok(_) => {\n                         candidates.vec.push(ImplCandidate(impl_def_id));\n                     }\n@@ -2115,11 +2109,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // First, create the substitutions by matching the impl again,\n         // this time not in a probe.\n         self.infcx.commit_if_ok(|snapshot| {\n-            let (skol_obligation_trait_ref, skol_map) =\n-                self.infcx().skolemize_late_bound_regions(&obligation.predicate, snapshot);\n-            let substs =\n+            let (substs, skol_map) =\n                 self.rematch_impl(impl_def_id, obligation,\n-                                  snapshot, &skol_map, skol_obligation_trait_ref.trait_ref);\n+                                  snapshot);\n             debug!(\"confirm_impl_candidate substs={}\", substs.repr(self.tcx()));\n             Ok(self.vtable_impl(impl_def_id, substs, obligation.cause.clone(),\n                                 obligation.recursion_depth + 1, skol_map, snapshot))\n@@ -2306,14 +2298,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn rematch_impl(&mut self,\n                     impl_def_id: ast::DefId,\n                     obligation: &TraitObligation<'tcx>,\n-                    snapshot: &infer::CombinedSnapshot,\n-                    skol_map: &infer::SkolemizationMap,\n-                    skol_obligation_trait_ref: Rc<ty::TraitRef<'tcx>>)\n-                    -> Normalized<'tcx, Substs<'tcx>>\n+                    snapshot: &infer::CombinedSnapshot)\n+                    -> (Normalized<'tcx, Substs<'tcx>>, infer::SkolemizationMap)\n     {\n-        match self.match_impl(impl_def_id, obligation, snapshot,\n-                              skol_map, skol_obligation_trait_ref) {\n-            Ok(substs) => substs,\n+        match self.match_impl(impl_def_id, obligation, snapshot) {\n+            Ok((substs, skol_map)) => (substs, skol_map),\n             Err(()) => {\n                 self.tcx().sess.bug(\n                     &format!(\"Impl {} was matchable against {} but now is not\",\n@@ -2326,10 +2315,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn match_impl(&mut self,\n                   impl_def_id: ast::DefId,\n                   obligation: &TraitObligation<'tcx>,\n-                  snapshot: &infer::CombinedSnapshot,\n-                  skol_map: &infer::SkolemizationMap,\n-                  skol_obligation_trait_ref: Rc<ty::TraitRef<'tcx>>)\n-                  -> Result<Normalized<'tcx, Substs<'tcx>>, ()>\n+                  snapshot: &infer::CombinedSnapshot)\n+                  -> Result<(Normalized<'tcx, Substs<'tcx>>,\n+                             infer::SkolemizationMap), ()>\n     {\n         let impl_trait_ref = ty::impl_trait_ref(self.tcx(), impl_def_id).unwrap();\n \n@@ -2340,6 +2328,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return Err(());\n         }\n \n+        let (skol_obligation, skol_map) = self.infcx().skolemize_late_bound_regions(\n+            &obligation.predicate,\n+            snapshot);\n+        let skol_obligation_trait_ref = skol_obligation.trait_ref;\n+\n         let impl_substs = util::fresh_type_vars_for_impl(self.infcx,\n                                                          obligation.cause.span,\n                                                          impl_def_id);\n@@ -2370,17 +2363,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return Err(());\n         }\n \n-        if let Err(e) = self.infcx.leak_check(skol_map, snapshot) {\n+        if let Err(e) = self.infcx.leak_check(&skol_map, snapshot) {\n             debug!(\"match_impl: failed leak check due to `{}`\",\n                    ty::type_err_to_str(self.tcx(), &e));\n             return Err(());\n         }\n \n         debug!(\"match_impl: success impl_substs={}\", impl_substs.repr(self.tcx()));\n-        Ok(Normalized {\n+        Ok((Normalized {\n             value: impl_substs,\n             obligations: impl_trait_ref.obligations\n-        })\n+        }, skol_map))\n     }\n \n     fn fast_reject_trait_refs(&mut self,"}]}