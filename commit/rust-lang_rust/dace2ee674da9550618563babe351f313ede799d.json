{"sha": "dace2ee674da9550618563babe351f313ede799d", "node_id": "C_kwDOAAsO6NoAKGRhY2UyZWU2NzRkYTk1NTA2MTg1NjNiYWJlMzUxZjMxM2VkZTc5OWQ", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-25T16:50:12Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-25T16:50:12Z"}, "message": "rustdoc: Document `is_assoc_ty()`\n\nIt's adapted from the old documentation for the `is_generic` field.", "tree": {"sha": "34b967add55936221c3eedbe5e2da6fa51f613ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34b967add55936221c3eedbe5e2da6fa51f613ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dace2ee674da9550618563babe351f313ede799d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dace2ee674da9550618563babe351f313ede799d", "html_url": "https://github.com/rust-lang/rust/commit/dace2ee674da9550618563babe351f313ede799d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dace2ee674da9550618563babe351f313ede799d/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1085dc2148594bc259f9629b7ca4aa9489c8c10d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1085dc2148594bc259f9629b7ca4aa9489c8c10d", "html_url": "https://github.com/rust-lang/rust/commit/1085dc2148594bc259f9629b7ca4aa9489c8c10d"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "986729dd044e2dd230f7d6341bf91419a3d77622", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dace2ee674da9550618563babe351f313ede799d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dace2ee674da9550618563babe351f313ede799d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=dace2ee674da9550618563babe351f313ede799d", "patch": "@@ -1498,6 +1498,7 @@ impl Type {\n         }\n     }\n \n+    /// Checks if this is a `T::Name` path for an associated type.\n     crate fn is_assoc_ty(&self) -> bool {\n         match self {\n             ResolvedPath { path, .. } => path.is_assoc_ty(),\n@@ -1990,6 +1991,7 @@ impl Path {\n             + &self.segments.iter().map(|s| s.name.to_string()).collect::<Vec<_>>().join(\"::\")\n     }\n \n+    /// Checks if this is a `T::Name` path for an associated type.\n     crate fn is_assoc_ty(&self) -> bool {\n         match self.res {\n             Res::SelfTy(..) if self.segments.len() != 1 => true,"}]}