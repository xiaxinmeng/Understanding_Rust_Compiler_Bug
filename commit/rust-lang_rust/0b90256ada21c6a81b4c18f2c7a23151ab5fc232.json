{"sha": "0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "node_id": "C_kwDOAAsO6NoAKDBiOTAyNTZhZGEyMWM2YTgxYjRjMThmMmM3YTIzMTUxYWI1ZmMyMzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-13T13:57:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-13T13:57:21Z"}, "message": "Auto merge of #106776 - oli-obk:om_nom_nom_nom_nom, r=cjgillot\n\nFeed a bunch of queries instead of tracking fields on TyCtxt\n\nr? `@cjgillot`\n\npulled out of https://github.com/rust-lang/rust/pull/105462", "tree": {"sha": "ef066e14c07cd48aa364b2e7ab2853a40e2d162a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef066e14c07cd48aa364b2e7ab2853a40e2d162a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "html_url": "https://github.com/rust-lang/rust/commit/0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "html_url": "https://github.com/rust-lang/rust/commit/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b"}, {"sha": "d36db0d2a0c4fa0adaf49b2e795670bfc235d390", "url": "https://api.github.com/repos/rust-lang/rust/commits/d36db0d2a0c4fa0adaf49b2e795670bfc235d390", "html_url": "https://github.com/rust-lang/rust/commit/d36db0d2a0c4fa0adaf49b2e795670bfc235d390"}], "stats": {"total": 75, "additions": 29, "deletions": 46}, "files": [{"sha": "41d4a5679f1a0b2822396af1256c20e5497350a0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "patch": "@@ -416,8 +416,7 @@ fn compute_hir_hash(\n \n pub fn lower_to_hir(tcx: TyCtxt<'_>, (): ()) -> hir::Crate<'_> {\n     let sess = tcx.sess;\n-    let krate = tcx.untracked_crate.steal();\n-    let mut resolver = tcx.resolver_for_lowering(()).steal();\n+    let (mut resolver, krate) = tcx.resolver_for_lowering(()).steal();\n \n     let ast_index = index_crate(&resolver.node_id_to_def_id, &krate);\n     let mut owners = IndexVec::from_fn_n("}, {"sha": "2a6852d44eba7fd92f5ae8b2f496ae080d45f9da", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "patch": "@@ -817,23 +817,26 @@ pub fn create_global_ctxt<'tcx>(\n                 lint_store,\n                 arena,\n                 hir_arena,\n-                untracked_resolutions,\n                 untracked,\n-                krate,\n                 dep_graph,\n                 queries.on_disk_cache.as_ref().map(OnDiskCache::as_dyn),\n                 queries.as_dyn(),\n                 rustc_query_impl::query_callbacks(arena),\n-                crate_name,\n-                outputs,\n             )\n         })\n     });\n \n     let mut qcx = QueryContext { gcx };\n     qcx.enter(|tcx| {\n-        tcx.feed_unit_query()\n-            .resolver_for_lowering(tcx.arena.alloc(Steal::new(untracked_resolver_for_lowering)))\n+        let feed = tcx.feed_unit_query();\n+        feed.resolver_for_lowering(\n+            tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n+        );\n+        feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n+        feed.output_filenames(tcx.arena.alloc(std::sync::Arc::new(outputs)));\n+        feed.features_query(sess.features_untracked());\n+        let feed = tcx.feed_local_crate();\n+        feed.crate_name(crate_name);\n     });\n     qcx\n }"}, {"sha": "e9eb14ea18800f0fe187d0a40d33ed6c425f6d15", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "patch": "@@ -11,7 +11,7 @@ pub(crate) fn provide(providers: &mut Providers) {\n }\n \n fn check_expectations(tcx: TyCtxt<'_>, tool_filter: Option<Symbol>) {\n-    if !tcx.sess.features_untracked().enabled(sym::lint_reasons) {\n+    if !tcx.features().enabled(sym::lint_reasons) {\n         return;\n     }\n "}, {"sha": "f816d614500a07b9322ae679745de27cb097fc98", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "patch": "@@ -30,7 +30,12 @@ macro_rules! arena_types {\n             [decode] typeck_results: rustc_middle::ty::TypeckResults<'tcx>,\n             [decode] borrowck_result:\n                 rustc_middle::mir::BorrowCheckResult<'tcx>,\n-            [] resolver: rustc_data_structures::steal::Steal<rustc_middle::ty::ResolverAstLowering>,\n+            [] resolver: rustc_data_structures::steal::Steal<(\n+                rustc_middle::ty::ResolverAstLowering,\n+                rustc_data_structures::sync::Lrc<rustc_ast::Crate>,\n+            )>,\n+            [] output_filenames: std::sync::Arc<rustc_session::config::OutputFilenames>,\n+            [] resolutions: rustc_middle::ty::ResolverGlobalCtxt,\n             [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,\n             [] const_allocs: rustc_middle::mir::interpret::Allocation,"}, {"sha": "8665591573695657dc3941e61f092529869f3327", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "patch": "@@ -27,12 +27,12 @@ rustc_queries! {\n     }\n \n     query resolutions(_: ()) -> &'tcx ty::ResolverGlobalCtxt {\n-        eval_always\n+        feedable\n         no_hash\n         desc { \"getting the resolver outputs\" }\n     }\n \n-    query resolver_for_lowering(_: ()) -> &'tcx Steal<ty::ResolverAstLowering> {\n+    query resolver_for_lowering(_: ()) -> &'tcx Steal<(ty::ResolverAstLowering, Lrc<ast::Crate>)> {\n         feedable\n         no_hash\n         desc { \"getting the resolver for lowering\" }\n@@ -1673,7 +1673,7 @@ rustc_queries! {\n \n     /// Gets the name of the crate.\n     query crate_name(_: CrateNum) -> Symbol {\n-        eval_always\n+        feedable\n         desc { \"fetching what a crate is named\" }\n         separate_provide_extern\n     }\n@@ -1857,7 +1857,7 @@ rustc_queries! {\n     /// This query returns an `&Arc` because codegen backends need the value even after the `TyCtxt`\n     /// has been destroyed.\n     query output_filenames(_: ()) -> &'tcx Arc<OutputFilenames> {\n-        eval_always\n+        feedable\n         desc { \"getting output filenames\" }\n     }\n \n@@ -2041,7 +2041,7 @@ rustc_queries! {\n     }\n \n     query features_query(_: ()) -> &'tcx rustc_feature::Features {\n-        eval_always\n+        feedable\n         desc { \"looking up enabled feature gates\" }\n     }\n "}, {"sha": "63f31e5a11f39e96e835a308d2e12653767d22f7", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "patch": "@@ -51,7 +51,7 @@ use rustc_macros::HashStable;\n use rustc_query_system::dep_graph::DepNodeIndex;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n-use rustc_session::config::{CrateType, OutputFilenames};\n+use rustc_session::config::CrateType;\n use rustc_session::cstore::{CrateStoreDyn, Untracked};\n use rustc_session::lint::Lint;\n use rustc_session::Limit;\n@@ -74,7 +74,6 @@ use std::hash::{Hash, Hasher};\n use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n-use std::sync::Arc;\n \n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n@@ -363,6 +362,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn feed_unit_query(self) -> TyCtxtFeed<'tcx, ()> {\n         TyCtxtFeed { tcx: self, key: () }\n     }\n+    pub fn feed_local_crate(self) -> TyCtxtFeed<'tcx, CrateNum> {\n+        TyCtxtFeed { tcx: self, key: LOCAL_CRATE }\n+    }\n }\n \n impl<'tcx, KEY: Copy> TyCtxtFeed<'tcx, KEY> {\n@@ -428,11 +430,6 @@ pub struct GlobalCtxt<'tcx> {\n     pub consts: CommonConsts<'tcx>,\n \n     untracked: Untracked,\n-    /// Output of the resolver.\n-    pub(crate) untracked_resolutions: ty::ResolverGlobalCtxt,\n-    /// The entire crate as AST. This field serves as the input for the hir_crate query,\n-    /// which lowers it from AST to HIR. It must not be read or used by anything else.\n-    pub untracked_crate: Steal<Lrc<ast::Crate>>,\n \n     /// This provides access to the incremental compilation on-disk cache for query results.\n     /// Do not access this directly. It is only meant to be used by\n@@ -457,17 +454,11 @@ pub struct GlobalCtxt<'tcx> {\n     /// Merge this with `selection_cache`?\n     pub evaluation_cache: traits::EvaluationCache<'tcx>,\n \n-    /// The definite name of the current crate after taking into account\n-    /// attributes, commandline parameters, etc.\n-    crate_name: Symbol,\n-\n     /// Data layout specification for the current target.\n     pub data_layout: TargetDataLayout,\n \n     /// Stores memory for globals (statics/consts).\n     pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,\n-\n-    output_filenames: Arc<OutputFilenames>,\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -592,15 +583,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,\n-        untracked_resolutions: ty::ResolverGlobalCtxt,\n         untracked: Untracked,\n-        krate: Lrc<ast::Crate>,\n         dep_graph: DepGraph,\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n         queries: &'tcx dyn query::QueryEngine<'tcx>,\n         query_kinds: &'tcx [DepKindStruct<'tcx>],\n-        crate_name: Symbol,\n-        output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = s.target.parse_data_layout().unwrap_or_else(|err| {\n             s.emit_fatal(err);\n@@ -622,8 +609,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             lifetimes: common_lifetimes,\n             consts: common_consts,\n             untracked,\n-            untracked_resolutions,\n-            untracked_crate: Steal::new(krate),\n             on_disk_cache,\n             queries,\n             query_caches: query::QueryCaches::default(),\n@@ -632,10 +617,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             pred_rcache: Default::default(),\n             selection_cache: Default::default(),\n             evaluation_cache: Default::default(),\n-            crate_name,\n             data_layout,\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n-            output_filenames: Arc::new(output_filenames),\n         }\n     }\n \n@@ -810,7 +793,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // statements within the query system and we'd run into endless\n         // recursion otherwise.\n         let (crate_name, stable_crate_id) = if def_id.is_local() {\n-            (self.crate_name, self.sess.local_stable_crate_id())\n+            (self.crate_name(LOCAL_CRATE), self.sess.local_stable_crate_id())\n         } else {\n             let cstore = &*self.untracked.cstore;\n             (cstore.crate_name(def_id.krate), cstore.stable_crate_id(def_id.krate))\n@@ -2407,13 +2390,8 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;\n     providers.module_reexports =\n         |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);\n-    providers.crate_name = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        tcx.crate_name\n-    };\n     providers.maybe_unused_trait_imports =\n         |tcx, ()| &tcx.resolutions(()).maybe_unused_trait_imports;\n     providers.maybe_unused_extern_crates =\n@@ -2424,8 +2402,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n \n     providers.extern_mod_stmt_cnum =\n         |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();\n-    providers.output_filenames = |tcx, ()| &tcx.output_filenames;\n-    providers.features_query = |tcx, ()| tcx.sess.features_untracked();\n     providers.is_panic_runtime = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)"}, {"sha": "d1b6d470e86ce91da866d11d89abbed6dc1622be", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "patch": "@@ -1221,7 +1221,7 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n     ) {\n         let ast_attrs = self.tcx.hir().attrs(hir_id);\n         if let Some(ref cfg) = ast_attrs.cfg(self.tcx, &FxHashSet::default()) {\n-            if !cfg.matches(&self.sess.parse_sess, Some(self.sess.features_untracked())) {\n+            if !cfg.matches(&self.sess.parse_sess, Some(self.tcx.features())) {\n                 return;\n             }\n         }"}, {"sha": "751c262673b1ca04bec420a92bddbeea88ffdf10", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90256ada21c6a81b4c18f2c7a23151ab5fc232/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "patch": "@@ -472,7 +472,7 @@ fn check_clippy_lint_names(cx: &LateContext<'_>, name: Symbol, items: &[NestedMe\n \n fn check_lint_reason(cx: &LateContext<'_>, name: Symbol, items: &[NestedMetaItem], attr: &'_ Attribute) {\n     // Check for the feature\n-    if !cx.tcx.sess.features_untracked().lint_reasons {\n+    if !cx.tcx.features().lint_reasons {\n         return;\n     }\n "}]}