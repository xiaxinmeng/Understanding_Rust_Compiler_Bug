{"sha": "6230ec14820c07755f533fff5664f91d3bc244b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMzBlYzE0ODIwYzA3NzU1ZjUzM2ZmZjU2NjRmOTFkM2JjMjQ0YjQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-01T10:10:08Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-19T05:55:24Z"}, "message": "debuginfo: Replaced vec::mapi with iterator version.", "tree": {"sha": "4fb2b6dcf74d5dac28f273ff1649a922e3788992", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb2b6dcf74d5dac28f273ff1649a922e3788992"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6230ec14820c07755f533fff5664f91d3bc244b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6230ec14820c07755f533fff5664f91d3bc244b4", "html_url": "https://github.com/rust-lang/rust/commit/6230ec14820c07755f533fff5664f91d3bc244b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6230ec14820c07755f533fff5664f91d3bc244b4/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f424e931da4c04e410b003f48503acee92720ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f424e931da4c04e410b003f48503acee92720ffb", "html_url": "https://github.com/rust-lang/rust/commit/f424e931da4c04e410b003f48503acee92720ffb"}], "stats": {"total": 43, "additions": 11, "deletions": 32}, "files": [{"sha": "e2a8f8e01303c2771ce3d0aeee8e81c76e27c691", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 11, "deletions": 32, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6230ec14820c07755f533fff5664f91d3bc244b4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6230ec14820c07755f533fff5664f91d3bc244b4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=6230ec14820c07755f533fff5664f91d3bc244b4", "patch": "@@ -62,9 +62,6 @@ use std::sys;\n use std::vec;\n use syntax::codemap::span;\n use syntax::{ast, codemap, ast_util, ast_map};\n-use syntax::parse::token;\n-\n-\n \n static DW_LANG_RUST: int = 0x9000;\n \n@@ -529,7 +526,7 @@ fn create_tuple(cx: &mut CrateContext,\n                 span: span)\n              -> DICompositeType {\n \n-    let tuple_name = \"tuple\"; // TODO: better type name\n+    let tuple_name = \"tuple\"; // this should have a better name\n     let tuple_llvm_type = type_of::type_of(cx, tuple_type);\n     // Create a vec of empty strings. A vec::build_n() function would be nice for this.\n     let mut component_names : ~[~str] = vec::with_capacity(component_types.len());\n@@ -566,7 +563,7 @@ fn create_composite_type(cx: &mut CrateContext,\n     let composite_size = machine::llsize_of_alloc(cx, composite_llvm_type);\n     let composite_align = machine::llalign_of_min(cx, composite_llvm_type);\n \n-    let xxx : ~[DIDescriptor] = member_llvm_types\n+    let member_metadata : ~[DIDescriptor] = member_llvm_types\n         .iter()\n         .enumerate()\n         .transform(|(i, member_llvm_type)| {\n@@ -587,33 +584,10 @@ fn create_composite_type(cx: &mut CrateContext,\n                     bytes_to_bits(member_offset),\n                     0,\n                     member_type_metadata[i])\n-            }}})\n+            }}\n+        })\n         .collect();\n \n-    let member_metadata = create_DIArray(DIB(cx), xxx);\n-        // transform the ty::t array of components into an array of DIEs\n-        // do vec::mapi(member_llvm_types) |i, member_llvm_type| {\n-        // do member_llvm_types.iter().enumerate().transform |(i, member_llvm_type)| {\n-        //     let member_size = machine::llsize_of_alloc(cx, *member_llvm_type);\n-        //     let member_align = machine::llalign_of_min(cx, *member_llvm_type);\n-        //     let member_offset = machine::llelement_offset(cx, composite_llvm_type, i);\n-        //     let member_name : &str = member_names[i];\n-\n-        //     do member_name.as_c_str |member_name| { unsafe {\n-        //         llvm::LLVMDIBuilderCreateMemberType(\n-        //             DIB(cx),\n-        //             file_metadata,\n-        //             member_name,\n-        //             file_metadata,\n-        //             loc.line as c_uint,\n-        //             bytes_to_bits(member_size),\n-        //             bytes_to_bits(member_align),\n-        //             bytes_to_bits(member_offset),\n-        //             0,\n-        //             member_type_metadata[i])\n-        //     }}\n-        // }.collect());\n-\n     return do composite_type_name.as_c_str |name| { unsafe {\n         llvm::LLVMDIBuilderCreateStructType(\n             DIB(cx),\n@@ -625,7 +599,7 @@ fn create_composite_type(cx: &mut CrateContext,\n             bytes_to_bits(composite_align),\n             0,\n             ptr::null(),\n-            member_metadata,\n+            create_DIArray(DIB(cx), member_metadata),\n             0,\n             ptr::null())\n     }};\n@@ -873,7 +847,12 @@ fn get_or_create_ty(cx: &mut CrateContext, t: ty::t, span: span) -> DIType {\n         ty::ty_uniq(ref mt) => {\n             let content_llvm_type = type_of::type_of(cx, mt.ty);\n             let content_type_metadata = get_or_create_ty(cx, mt.ty, span);\n-            let box_metadata = create_boxed_type(cx, content_llvm_type, content_type_metadata, span);\n+\n+            let box_metadata = create_boxed_type(cx,\n+                                                 content_llvm_type,\n+                                                 content_type_metadata,\n+                                                 span);\n+\n             create_pointer_type(cx, t, span, box_metadata)\n         },\n         ty::ty_evec(ref mt, ref vstore) => {"}]}