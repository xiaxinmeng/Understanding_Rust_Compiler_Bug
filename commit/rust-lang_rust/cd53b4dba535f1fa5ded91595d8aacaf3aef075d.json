{"sha": "cd53b4dba535f1fa5ded91595d8aacaf3aef075d", "node_id": "C_kwDOAAsO6NoAKGNkNTNiNGRiYTUzNWYxZmE1ZGVkOTE1OTVkOGFhY2FmM2FlZjA3NWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-29T19:12:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-29T19:12:57Z"}, "message": "Rollup merge of #101131 - RalfJung:ctfe-no-needs-rfc, r=oli-obk\n\nCTFE: exposing pointers and calling extern fn is just impossible\n\nThe remaining \"needs RFC\" errors are just needlessly confusing, I think -- time to get rid of that error variant. They are anyway only reachable with miri-unleashed (if at all).\n\nr? `@oli-obk`", "tree": {"sha": "737a8317acab5baf07c89c3d1b7c18094ca1c9eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/737a8317acab5baf07c89c3d1b7c18094ca1c9eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd53b4dba535f1fa5ded91595d8aacaf3aef075d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDQ+5CRBK7hj4Ov3rIwAAeMMIAHswJDHvKJuPePPJOz71xY4h\nypzaQoOGczKXNT3EQXCEqpOESnphdfCYoUqarSvCAfdvOSirJQCOKV0I0Y1lI6A7\n+Br1GiNde41j2XfbdpnsxdTRRKe0zqKO425ApHNhuVU3T/+JWguh76KEz6x4S1oJ\nrS6CbU48E4jDfhe1XBnfs0qFsNWVy3ygK3IuToAOJSkP4MH6FmZ2WfQqfdNJcWWE\nXWsN+PJlgAytIIzyNWjEkNOxK/Py7LKyvjPYIzPnMCN9XZ0iOhL1ENHtJyc8tzkF\nhlpf7OauUyEqTnsZHjwN6X53pOb+hL/zmY4+2MrQ1RgNKWeRBI01pkhAQFI6w+Y=\n=cg1m\n-----END PGP SIGNATURE-----\n", "payload": "tree 737a8317acab5baf07c89c3d1b7c18094ca1c9eb\nparent ecd908ac5e0f91923f4b0915a7ac04d7909d6e8e\nparent f29c3c421b9fd2afb52062590c5f2e052f8d3815\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661800377 +0200\ncommitter GitHub <noreply@github.com> 1661800377 +0200\n\nRollup merge of #101131 - RalfJung:ctfe-no-needs-rfc, r=oli-obk\n\nCTFE: exposing pointers and calling extern fn is just impossible\n\nThe remaining \"needs RFC\" errors are just needlessly confusing, I think -- time to get rid of that error variant. They are anyway only reachable with miri-unleashed (if at all).\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd53b4dba535f1fa5ded91595d8aacaf3aef075d", "html_url": "https://github.com/rust-lang/rust/commit/cd53b4dba535f1fa5ded91595d8aacaf3aef075d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd53b4dba535f1fa5ded91595d8aacaf3aef075d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecd908ac5e0f91923f4b0915a7ac04d7909d6e8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd908ac5e0f91923f4b0915a7ac04d7909d6e8e", "html_url": "https://github.com/rust-lang/rust/commit/ecd908ac5e0f91923f4b0915a7ac04d7909d6e8e"}, {"sha": "f29c3c421b9fd2afb52062590c5f2e052f8d3815", "url": "https://api.github.com/repos/rust-lang/rust/commits/f29c3c421b9fd2afb52062590c5f2e052f8d3815", "html_url": "https://github.com/rust-lang/rust/commit/f29c3c421b9fd2afb52062590c5f2e052f8d3815"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "bba4b1815b457ca475cf0a51bb9292485311d39d", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd53b4dba535f1fa5ded91595d8aacaf3aef075d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd53b4dba535f1fa5ded91595d8aacaf3aef075d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=cd53b4dba535f1fa5ded91595d8aacaf3aef075d", "patch": "@@ -15,7 +15,6 @@ use crate::interpret::{\n /// The CTFE machine has some custom error kinds.\n #[derive(Clone, Debug)]\n pub enum ConstEvalErrKind {\n-    NeedsRfc(String),\n     ConstAccessesStatic,\n     ModifiedGlobal,\n     AssertFailure(AssertKind<ConstInt>),\n@@ -42,9 +41,6 @@ impl fmt::Display for ConstEvalErrKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::ConstEvalErrKind::*;\n         match *self {\n-            NeedsRfc(ref msg) => {\n-                write!(f, \"\\\"{}\\\" needs an rfc before being allowed inside constants\", msg)\n-            }\n             ConstAccessesStatic => write!(f, \"constant accesses static\"),\n             ModifiedGlobal => {\n                 write!(f, \"modifying a static's initial value from another static's initializer\")"}, {"sha": "9ea9fbe0e0e54188260281048bf8bfd11edfc308", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd53b4dba535f1fa5ded91595d8aacaf3aef075d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd53b4dba535f1fa5ded91595d8aacaf3aef075d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=cd53b4dba535f1fa5ded91595d8aacaf3aef075d", "patch": "@@ -269,9 +269,10 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                     );\n                     throw_inval!(AlreadyReported(guar));\n                 } else {\n+                    // `find_mir_or_eval_fn` checks that this is a const fn before even calling us,\n+                    // so this should be unreachable.\n                     let path = ecx.tcx.def_path_str(def.did);\n-                    Err(ConstEvalErrKind::NeedsRfc(format!(\"calling extern function `{}`\", path))\n-                        .into())\n+                    bug!(\"trying to call extern function `{path}` at compile-time\");\n                 }\n             }\n             _ => Ok(ecx.tcx.instance_mir(instance)),\n@@ -339,11 +340,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n         // CTFE-specific intrinsics.\n         let Some(ret) = target else {\n-            return Err(ConstEvalErrKind::NeedsRfc(format!(\n-                \"calling intrinsic `{}`\",\n-                intrinsic_name\n-            ))\n-            .into());\n+            throw_unsup_format!(\"intrinsic `{intrinsic_name}` is not supported at compile-time\");\n         };\n         match intrinsic_name {\n             sym::ptr_guaranteed_eq | sym::ptr_guaranteed_ne => {\n@@ -400,11 +397,9 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 }\n             }\n             _ => {\n-                return Err(ConstEvalErrKind::NeedsRfc(format!(\n-                    \"calling intrinsic `{}`\",\n-                    intrinsic_name\n-                ))\n-                .into());\n+                throw_unsup_format!(\n+                    \"intrinsic `{intrinsic_name}` is not supported at compile-time\"\n+                );\n             }\n         }\n \n@@ -447,7 +442,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         _left: &ImmTy<'tcx>,\n         _right: &ImmTy<'tcx>,\n     ) -> InterpResult<'tcx, (Scalar, bool, Ty<'tcx>)> {\n-        Err(ConstEvalErrKind::NeedsRfc(\"pointer arithmetic or comparison\".to_string()).into())\n+        throw_unsup_format!(\"pointer arithmetic or comparison is not supported at compile-time\");\n     }\n \n     fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n@@ -469,7 +464,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _ptr: Pointer<AllocId>,\n     ) -> InterpResult<'tcx> {\n-        Err(ConstEvalErrKind::NeedsRfc(\"exposing pointers\".to_string()).into())\n+        // This is only reachable with -Zunleash-the-miri-inside-of-you.\n+        throw_unsup_format!(\"exposing pointers is not possible at compile-time\")\n     }\n \n     #[inline(always)]"}, {"sha": "8df6737b83980891768aaee2496426643e587fa4", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd53b4dba535f1fa5ded91595d8aacaf3aef075d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd53b4dba535f1fa5ded91595d8aacaf3aef075d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=cd53b4dba535f1fa5ded91595d8aacaf3aef075d", "patch": "@@ -490,6 +490,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     ) -> InterpResult<$tcx, Pointer<Option<AllocId>>> {\n         // Allow these casts, but make the pointer not dereferenceable.\n         // (I.e., they behave like transmutation.)\n+        // This is correct because no pointers can ever be exposed in compile-time evaluation.\n         Ok(Pointer::from_addr(addr))\n     }\n "}, {"sha": "6a19b294585ae038bf6edfc87a432e6996dde9d7", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd53b4dba535f1fa5ded91595d8aacaf3aef075d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd53b4dba535f1fa5ded91595d8aacaf3aef075d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs?ref=cd53b4dba535f1fa5ded91595d8aacaf3aef075d", "patch": "@@ -8,7 +8,7 @@\n static PTR_INT_CAST: () = {\n     let x = &0 as *const _ as usize;\n     //~^ ERROR could not evaluate static initializer\n-    //~| \"exposing pointers\" needs an rfc before being allowed inside constants\n+    //~| exposing pointers\n     let _v = x == x;\n };\n \n@@ -19,4 +19,7 @@ static PTR_INT_TRANSMUTE: () = unsafe {\n     //~| unable to turn pointer into raw bytes\n };\n \n+// I'd love to test pointer comparison, but that is not possible since\n+// their `PartialEq` impl is non-`const`.\n+\n fn main() {}"}, {"sha": "f5c5ee2b8ebad330a511c8135d59483909a34d04", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd53b4dba535f1fa5ded91595d8aacaf3aef075d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd53b4dba535f1fa5ded91595d8aacaf3aef075d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=cd53b4dba535f1fa5ded91595d8aacaf3aef075d", "patch": "@@ -2,7 +2,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ptr_arith.rs:9:13\n    |\n LL |     let x = &0 as *const _ as usize;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ \"exposing pointers\" needs an rfc before being allowed inside constants\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ exposing pointers is not possible at compile-time\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ptr_arith.rs:17:14"}]}