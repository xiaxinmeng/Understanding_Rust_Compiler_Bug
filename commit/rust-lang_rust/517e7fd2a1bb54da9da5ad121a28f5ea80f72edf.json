{"sha": "517e7fd2a1bb54da9da5ad121a28f5ea80f72edf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxN2U3ZmQyYTFiYjU0ZGE5ZGE1YWQxMjFhMjhmNWVhODBmNzJlZGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-06T15:12:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-15T10:56:48Z"}, "message": "remove `assigned_map` (appears to be dead code)", "tree": {"sha": "2ef876b0f9a02fb3b95151fc7e62bb686c264535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ef876b0f9a02fb3b95151fc7e62bb686c264535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/517e7fd2a1bb54da9da5ad121a28f5ea80f72edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/517e7fd2a1bb54da9da5ad121a28f5ea80f72edf", "html_url": "https://github.com/rust-lang/rust/commit/517e7fd2a1bb54da9da5ad121a28f5ea80f72edf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/517e7fd2a1bb54da9da5ad121a28f5ea80f72edf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56109dbf709c2e4f6ca27d79feba2155b7f66e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/56109dbf709c2e4f6ca27d79feba2155b7f66e03", "html_url": "https://github.com/rust-lang/rust/commit/56109dbf709c2e4f6ca27d79feba2155b7f66e03"}], "stats": {"total": 9, "additions": 0, "deletions": 9}, "files": [{"sha": "e6b8cd6abf066bbda7cf42846e07d85c74f1bea3", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/517e7fd2a1bb54da9da5ad121a28f5ea80f72edf/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517e7fd2a1bb54da9da5ad121a28f5ea80f72edf/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=517e7fd2a1bb54da9da5ad121a28f5ea80f72edf", "patch": "@@ -58,11 +58,6 @@ pub struct Borrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     /// corresponding `BorrowIndex`.\n     location_map: FxHashMap<Location, BorrowIndex>,\n \n-    /// Every borrow in MIR is immediately stored into a place via an\n-    /// assignment statement. This maps each such assigned place back\n-    /// to its borrow-indexes.\n-    assigned_map: FxHashMap<Place<'tcx>, FxHashSet<BorrowIndex>>,\n-\n     /// Locations which activate borrows.\n     activation_map: FxHashMap<Location, FxHashSet<BorrowIndex>>,\n \n@@ -144,7 +139,6 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n             mir,\n             idx_vec: IndexVec::new(),\n             location_map: FxHashMap(),\n-            assigned_map: FxHashMap(),\n             activation_map: FxHashMap(),\n             region_map: FxHashMap(),\n             local_map: FxHashMap(),\n@@ -158,7 +152,6 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                          scope_tree,\n                          root_scope,\n                          location_map: visitor.location_map,\n-                         assigned_map: visitor.assigned_map,\n                          activation_map: visitor.activation_map,\n                          region_map: visitor.region_map,\n                          local_map: visitor.local_map,\n@@ -170,7 +163,6 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n             mir: &'a Mir<'tcx>,\n             idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n             location_map: FxHashMap<Location, BorrowIndex>,\n-            assigned_map: FxHashMap<Place<'tcx>, FxHashSet<BorrowIndex>>,\n             activation_map: FxHashMap<Location, FxHashSet<BorrowIndex>>,\n             region_map: FxHashMap<Region<'tcx>, FxHashSet<BorrowIndex>>,\n             local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n@@ -209,7 +201,6 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                     self.location_map.insert(location, idx);\n \n                     insert(&mut self.activation_map, &activate_location, idx);\n-                    insert(&mut self.assigned_map, assigned_place, idx);\n                     insert(&mut self.region_map, &region, idx);\n                     if let Some(local) = root_local(borrowed_place) {\n                         insert(&mut self.local_map, &local, idx);"}]}