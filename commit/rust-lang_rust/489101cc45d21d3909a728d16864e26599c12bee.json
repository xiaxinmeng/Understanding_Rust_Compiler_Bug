{"sha": "489101cc45d21d3909a728d16864e26599c12bee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OTEwMWNjNDVkMjFkMzkwOWE3MjhkMTY4NjRlMjY1OTljMTJiZWU=", "commit": {"author": {"name": "F001", "email": "changchun.fan@qq.com", "date": "2018-07-23T11:20:50Z"}, "committer": {"name": "f001", "email": "changchun.fan@qq.com", "date": "2018-07-23T12:58:40Z"}, "message": "use inherent method instead", "tree": {"sha": "eff4752bf9ada9a3c1513174b9656a76e5c7a880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eff4752bf9ada9a3c1513174b9656a76e5c7a880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/489101cc45d21d3909a728d16864e26599c12bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/489101cc45d21d3909a728d16864e26599c12bee", "html_url": "https://github.com/rust-lang/rust/commit/489101cc45d21d3909a728d16864e26599c12bee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/489101cc45d21d3909a728d16864e26599c12bee/comments", "author": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "committer": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6", "html_url": "https://github.com/rust-lang/rust/commit/8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "b6087628ea6a487ac9ccf7641335bc070a8c5274", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/489101cc45d21d3909a728d16864e26599c12bee/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489101cc45d21d3909a728d16864e26599c12bee/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=489101cc45d21d3909a728d16864e26599c12bee", "patch": "@@ -200,9 +200,8 @@ use cmp::Ordering;\n use fmt::{self, Debug, Display};\n use marker::Unsize;\n use mem;\n-use ops::{Deref, DerefMut, CoerceUnsized, Index};\n+use ops::{Deref, DerefMut, CoerceUnsized};\n use ptr;\n-use slice::SliceIndex;\n \n /// A mutable memory location.\n ///\n@@ -511,9 +510,8 @@ impl<T: ?Sized> Cell<T> {\n     ///\n     /// let slice: &mut [i32] = &mut [1, 2, 3];\n     /// let cell_slice: &Cell<[i32]> = Cell::from_mut(slice);\n-    /// assert_eq!(cell_slice[..].len(), 3);\n+    /// let slice_cell: &[Cell<i32>] = cell_slice.as_slice_of_cells();\n     ///\n-    /// let slice_cell: &[Cell<i32>] = &cell_slice[..];\n     /// assert_eq!(slice_cell.len(), 3);\n     /// ```\n     #[inline]\n@@ -548,15 +546,25 @@ impl<T: Default> Cell<T> {\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<Cell<U>> for Cell<T> {}\n \n-#[unstable(feature = \"as_cell\", issue=\"43038\")]\n-impl<T, I> Index<I> for Cell<[T]>\n-    where I: SliceIndex<[Cell<T>]>\n-{\n-    type Output = I::Output;\n-\n-    fn index(&self, index: I) -> &Self::Output {\n+impl<T> Cell<[T]> {\n+    /// Returns a `&[Cell<T>]` from a `&Cell<[T]>`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(as_cell)]\n+    /// use std::cell::Cell;\n+    ///\n+    /// let slice: &mut [i32] = &mut [1, 2, 3];\n+    /// let cell_slice: &Cell<[i32]> = Cell::from_mut(slice);\n+    /// let slice_cell: &[Cell<i32>] = cell_slice.as_slice_of_cells();\n+    ///\n+    /// assert_eq!(slice_cell.len(), 3);\n+    /// ```\n+    #[unstable(feature = \"as_cell\", issue=\"43038\")]\n+    pub fn as_slice_of_cells(&self) -> &[Cell<T>] {\n         unsafe {\n-            Index::index(&*(self as *const Cell<[T]> as *const [Cell<T>]), index)\n+            &*(self as *const Cell<[T]> as *const [Cell<T>])\n         }\n     }\n }"}, {"sha": "88f7fbc86df6ed4533cba915169b0107fcc2167b", "filename": "src/test/run-pass/rfc-1789-as-cell/from-mut.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/489101cc45d21d3909a728d16864e26599c12bee/src%2Ftest%2Frun-pass%2Frfc-1789-as-cell%2Ffrom-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489101cc45d21d3909a728d16864e26599c12bee/src%2Ftest%2Frun-pass%2Frfc-1789-as-cell%2Ffrom-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1789-as-cell%2Ffrom-mut.rs?ref=489101cc45d21d3909a728d16864e26599c12bee", "patch": "@@ -15,8 +15,7 @@ use std::cell::Cell;\n fn main() {\n     let slice: &mut [i32] = &mut [1, 2, 3];\n     let cell_slice: &Cell<[i32]> = Cell::from_mut(slice);\n-    assert_eq!(cell_slice[..].len(), 3);\n+    let slice_cell: &[Cell<i32>] = cell_slice.as_slice_of_cells();\n \n-    let sub_slice: &[Cell<i32>] = &cell_slice[1..];\n-    assert_eq!(sub_slice.len(), 2);\n+    assert_eq!(slice_cell.len(), 3);\n }"}]}