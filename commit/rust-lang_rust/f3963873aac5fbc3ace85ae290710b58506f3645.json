{"sha": "f3963873aac5fbc3ace85ae290710b58506f3645", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTYzODczYWFjNWZiYzNhY2U4NWFlMjkwNzEwYjU4NTA2ZjM2NDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-10T01:47:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-10T01:47:32Z"}, "message": "Rollup merge of #67820 - ecstatic-morse:const-trait, r=oli-obk\n\nParse the syntax described in RFC 2632\n\nThis adds support for both `impl const Trait for Ty` and `?const Trait` bound syntax from rust-lang/rfcs#2632 to the parser. For now, both modifiers end up in a newly-added `constness` field on `ast::TraitRef`, although this may change once the implementation is fleshed out.\n\nI was planning on using `delay_span_bug` when this syntax is encountered during lowering, but I can't write `should-ice` UI tests. I emit a normal error instead, which causes duplicates when the feature gate is not enabled (see the `.stderr` files for the feature gate tests). Not sure what the desired approach is; Maybe just do nothing when the syntax is encountered with the feature gate is enabled?\n\n@oli-obk I went with `const_trait_impl` and `const_trait_bound_opt_out` for the names of these features. Are these to your liking?\n\ncc #67792 #67794\n\nr? @Centril", "tree": {"sha": "b874b91c46dc830da454d15dc6dead5b4644120a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b874b91c46dc830da454d15dc6dead5b4644120a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3963873aac5fbc3ace85ae290710b58506f3645", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeF9e0CRBK7hj4Ov3rIwAAdHIIAGqJ03tiyTbyMj3u4ypcUZR3\n/x1MyNC0XGliZVzKuAQYXTaghRdE/+9/GDgo37/Q5hviwsVfcbaGhcUfTMcRvbWa\nHzLzf8qwOEHHw8aa/4YFyI6ssZmld4t2RW82IIst86z0bH3rJ44qmTAMlEmFPhc0\nnx1uMA81Gc8HelNZPvAo53DsBClT6CFiXIW56Yoj4gSET+5eH9w0yz32srfjvIjh\nz6PBhHLZe0IIZUxYU/iGnQf7P3MrOW8JyM0wBXGp2ZFDt13Q6wSFjP+amiJKSpnn\n+1AarssHBQCsr3KlQPcDikYG7penwjsO1UR14dTQVWQ5hUu95u0gzOR9l9NOzLw=\n=SoL5\n-----END PGP SIGNATURE-----\n", "payload": "tree b874b91c46dc830da454d15dc6dead5b4644120a\nparent e180d36d49ef7a14196bddd9b8741eb36d689277\nparent fd1c00348b7b3521f7340a2d034b32406229fe1b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578620852 +0100\ncommitter GitHub <noreply@github.com> 1578620852 +0100\n\nRollup merge of #67820 - ecstatic-morse:const-trait, r=oli-obk\n\nParse the syntax described in RFC 2632\n\nThis adds support for both `impl const Trait for Ty` and `?const Trait` bound syntax from rust-lang/rfcs#2632 to the parser. For now, both modifiers end up in a newly-added `constness` field on `ast::TraitRef`, although this may change once the implementation is fleshed out.\n\nI was planning on using `delay_span_bug` when this syntax is encountered during lowering, but I can't write `should-ice` UI tests. I emit a normal error instead, which causes duplicates when the feature gate is not enabled (see the `.stderr` files for the feature gate tests). Not sure what the desired approach is; Maybe just do nothing when the syntax is encountered with the feature gate is enabled?\n\n@oli-obk I went with `const_trait_impl` and `const_trait_bound_opt_out` for the names of these features. Are these to your liking?\n\ncc #67792 #67794\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3963873aac5fbc3ace85ae290710b58506f3645", "html_url": "https://github.com/rust-lang/rust/commit/f3963873aac5fbc3ace85ae290710b58506f3645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3963873aac5fbc3ace85ae290710b58506f3645/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e180d36d49ef7a14196bddd9b8741eb36d689277", "url": "https://api.github.com/repos/rust-lang/rust/commits/e180d36d49ef7a14196bddd9b8741eb36d689277", "html_url": "https://github.com/rust-lang/rust/commit/e180d36d49ef7a14196bddd9b8741eb36d689277"}, {"sha": "fd1c00348b7b3521f7340a2d034b32406229fe1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1c00348b7b3521f7340a2d034b32406229fe1b", "html_url": "https://github.com/rust-lang/rust/commit/fd1c00348b7b3521f7340a2d034b32406229fe1b"}], "stats": {"total": 611, "additions": 586, "deletions": 25}, "files": [{"sha": "7c95b2a86c6859ce33fff953fa243ab918285605", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -71,6 +71,12 @@ impl<'a, 'lowering, 'hir> Visitor<'a> for ItemLowerer<'a, 'lowering, 'hir> {\n             self.lctx.with_parent_item_lifetime_defs(hir_id, |this| {\n                 let this = &mut ItemLowerer { lctx: this };\n                 if let ItemKind::Impl(.., ref opt_trait_ref, _, _) = item.kind {\n+                    if opt_trait_ref.as_ref().map(|tr| tr.constness.is_some()).unwrap_or(false) {\n+                        this.lctx\n+                            .diagnostic()\n+                            .span_err(item.span, \"const trait impls are not yet implemented\");\n+                    }\n+\n                     this.with_trait_impl_ref(opt_trait_ref, |this| visit::walk_item(this, item));\n                 } else {\n                     visit::walk_item(this, item);"}, {"sha": "73d1e49725826ccc97d2058c286a22b9f9018c58", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -2579,6 +2579,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         p: &PolyTraitRef,\n         mut itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::PolyTraitRef<'hir> {\n+        if p.trait_ref.constness.is_some() {\n+            self.diagnostic().span_err(p.span, \"`?const` on trait bounds is not yet implemented\");\n+        }\n+\n         let bound_generic_params = self.lower_generic_params(\n             &p.bound_generic_params,\n             &NodeMap::default(),"}, {"sha": "bd3d6b589d00acfb210de183690e5f1f95fdae5d", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -110,7 +110,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn trait_ref(&self, path: ast::Path) -> ast::TraitRef {\n-        ast::TraitRef { path, ref_id: ast::DUMMY_NODE_ID }\n+        ast::TraitRef { path, constness: None, ref_id: ast::DUMMY_NODE_ID }\n     }\n \n     pub fn poly_trait_ref(&self, span: Span, path: ast::Path) -> ast::PolyTraitRef {"}, {"sha": "6a15cc5cb0fceee67e147d867e5e619f343aeed4", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -544,6 +544,12 @@ declare_features! (\n     /// For example, you can write `x @ Some(y)`.\n     (active, bindings_after_at, \"1.41.0\", Some(65490), None),\n \n+    /// Allows `impl const Trait for T` syntax.\n+    (active, const_trait_impl, \"1.42.0\", Some(67792), None),\n+\n+    /// Allows `T: ?const Trait` syntax in bounds.\n+    (active, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -559,4 +565,6 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::or_patterns,\n     sym::let_chains,\n     sym::raw_dylib,\n+    sym::const_trait_impl,\n+    sym::const_trait_bound_opt_out,\n ];"}, {"sha": "b209e5a78266ae9daa08db187f1d545219e98b6c", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -5,7 +5,7 @@ use crate::maybe_whole;\n \n use rustc_error_codes::*;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult, StashKey};\n-use rustc_span::source_map::{self, respan, Span};\n+use rustc_span::source_map::{self, respan, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::BytePos;\n use syntax::ast::{self, AttrKind, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n@@ -542,10 +542,11 @@ impl<'a> Parser<'a> {\n     ///    impl<'a, T> TYPE { /* impl items */ }\n     ///    impl<'a, T> TRAIT for TYPE { /* impl items */ }\n     ///    impl<'a, T> !TRAIT for TYPE { /* impl items */ }\n+    ///    impl<'a, T> const TRAIT for TYPE { /* impl items */ }\n     ///\n     /// We actually parse slightly more relaxed grammar for better error reporting and recovery.\n-    ///     `impl` GENERICS `!`? TYPE `for`? (TYPE | `..`) (`where` PREDICATES)? `{` BODY `}`\n-    ///     `impl` GENERICS `!`? TYPE (`where` PREDICATES)? `{` BODY `}`\n+    ///   `impl` GENERICS `const`? `!`? TYPE `for`? (TYPE | `..`) (`where` PREDICATES)? `{` BODY `}`\n+    ///   `impl` GENERICS `const`? `!`? TYPE (`where` PREDICATES)? `{` BODY `}`\n     fn parse_item_impl(\n         &mut self,\n         unsafety: Unsafety,\n@@ -558,6 +559,14 @@ impl<'a> Parser<'a> {\n             Generics::default()\n         };\n \n+        let constness = if self.eat_keyword(kw::Const) {\n+            let span = self.prev_span;\n+            self.sess.gated_spans.gate(sym::const_trait_impl, span);\n+            Some(respan(span, Constness::Const))\n+        } else {\n+            None\n+        };\n+\n         // Disambiguate `impl !Trait for Type { ... }` and `impl ! { ... }` for the never type.\n         let polarity = if self.check(&token::Not) && self.look_ahead(1, |t| t.can_begin_type()) {\n             self.bump(); // `!`\n@@ -618,7 +627,8 @@ impl<'a> Parser<'a> {\n                         err_path(ty_first.span)\n                     }\n                 };\n-                let trait_ref = TraitRef { path, ref_id: ty_first.id };\n+                let constness = constness.map(|c| c.node);\n+                let trait_ref = TraitRef { path, constness, ref_id: ty_first.id };\n \n                 ItemKind::Impl(\n                     unsafety,\n@@ -631,6 +641,13 @@ impl<'a> Parser<'a> {\n                 )\n             }\n             None => {\n+                // Reject `impl const Type {}` here\n+                if let Some(Spanned { node: Constness::Const, span }) = constness {\n+                    self.struct_span_err(span, \"`const` cannot modify an inherent impl\")\n+                        .help(\"only a trait impl can be `const`\")\n+                        .emit();\n+                }\n+\n                 // impl Type\n                 ItemKind::Impl(\n                     unsafety,"}, {"sha": "ea14aa278ac29e3f83455d4b551695b3b9286494", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 77, "deletions": 14, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -6,7 +6,7 @@ use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use rustc_error_codes::*;\n use rustc_errors::{pluralize, struct_span_err, Applicability, PResult};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, sym};\n use syntax::ast::{\n     self, BareFnTy, FunctionRetTy, GenericParam, Ident, Lifetime, MutTy, Ty, TyKind,\n };\n@@ -17,6 +17,24 @@ use syntax::ast::{Mac, Mutability};\n use syntax::ptr::P;\n use syntax::token::{self, Token};\n \n+/// Any `?` or `?const` modifiers that appear at the start of a bound.\n+struct BoundModifiers {\n+    /// `?Trait`.\n+    maybe: Option<Span>,\n+\n+    /// `?const Trait`.\n+    maybe_const: Option<Span>,\n+}\n+\n+impl BoundModifiers {\n+    fn trait_bound_modifier(&self) -> TraitBoundModifier {\n+        match self.maybe {\n+            Some(_) => TraitBoundModifier::Maybe,\n+            None => TraitBoundModifier::None,\n+        }\n+    }\n+}\n+\n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`.\n ///\n@@ -195,7 +213,9 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         parse_plus: bool,\n     ) -> PResult<'a, TyKind> {\n-        let poly_trait_ref = PolyTraitRef::new(generic_params, path, lo.to(self.prev_span));\n+        assert_ne!(self.token, token::Question);\n+\n+        let poly_trait_ref = PolyTraitRef::new(generic_params, path, None, lo.to(self.prev_span));\n         let mut bounds = vec![GenericBound::Trait(poly_trait_ref, TraitBoundModifier::None)];\n         if parse_plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n@@ -421,12 +441,15 @@ impl<'a> Parser<'a> {\n         let has_parens = self.eat(&token::OpenDelim(token::Paren));\n         let inner_lo = self.token.span;\n         let is_negative = self.eat(&token::Not);\n-        let question = self.eat(&token::Question).then_some(self.prev_span);\n+\n+        let modifiers = self.parse_ty_bound_modifiers();\n         let bound = if self.token.is_lifetime() {\n-            self.parse_generic_lt_bound(lo, inner_lo, has_parens, question)?\n+            self.error_lt_bound_with_modifiers(modifiers);\n+            self.parse_generic_lt_bound(lo, inner_lo, has_parens)?\n         } else {\n-            self.parse_generic_ty_bound(lo, has_parens, question)?\n+            self.parse_generic_ty_bound(lo, has_parens, modifiers)?\n         };\n+\n         Ok(if is_negative { Err(anchor_lo.to(self.prev_span)) } else { Ok(bound) })\n     }\n \n@@ -439,9 +462,7 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         inner_lo: Span,\n         has_parens: bool,\n-        question: Option<Span>,\n     ) -> PResult<'a, GenericBound> {\n-        self.error_opt_out_lifetime(question);\n         let bound = GenericBound::Outlives(self.expect_lifetime());\n         if has_parens {\n             // FIXME(Centril): Consider not erroring here and accepting `('lt)` instead,\n@@ -451,8 +472,17 @@ impl<'a> Parser<'a> {\n         Ok(bound)\n     }\n \n-    fn error_opt_out_lifetime(&self, question: Option<Span>) {\n-        if let Some(span) = question {\n+    /// Emits an error if any trait bound modifiers were present.\n+    fn error_lt_bound_with_modifiers(&self, modifiers: BoundModifiers) {\n+        if let Some(span) = modifiers.maybe_const {\n+            self.struct_span_err(\n+                span,\n+                \"`?const` may only modify trait bounds, not lifetime bounds\",\n+            )\n+            .emit();\n+        }\n+\n+        if let Some(span) = modifiers.maybe {\n             self.struct_span_err(span, \"`?` may only modify trait bounds, not lifetime bounds\")\n                 .emit();\n         }\n@@ -478,25 +508,58 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n+    /// Parses the modifiers that may precede a trait in a bound, e.g. `?Trait` or `?const Trait`.\n+    ///\n+    /// If no modifiers are present, this does not consume any tokens.\n+    ///\n+    /// ```\n+    /// TY_BOUND_MODIFIERS = \"?\" [\"const\" [\"?\"]]\n+    /// ```\n+    fn parse_ty_bound_modifiers(&mut self) -> BoundModifiers {\n+        if !self.eat(&token::Question) {\n+            return BoundModifiers { maybe: None, maybe_const: None };\n+        }\n+\n+        // `? ...`\n+        let first_question = self.prev_span;\n+        if !self.eat_keyword(kw::Const) {\n+            return BoundModifiers { maybe: Some(first_question), maybe_const: None };\n+        }\n+\n+        // `?const ...`\n+        let maybe_const = first_question.to(self.prev_span);\n+        self.sess.gated_spans.gate(sym::const_trait_bound_opt_out, maybe_const);\n+        if !self.eat(&token::Question) {\n+            return BoundModifiers { maybe: None, maybe_const: Some(maybe_const) };\n+        }\n+\n+        // `?const ? ...`\n+        let second_question = self.prev_span;\n+        BoundModifiers { maybe: Some(second_question), maybe_const: Some(maybe_const) }\n+    }\n+\n     /// Parses a type bound according to:\n     /// ```\n     /// TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n-    /// TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g., `?for<'a: 'b> m::Trait<'a>`)\n+    /// TY_BOUND_NOPAREN = [TY_BOUND_MODIFIERS] [for<LT_PARAM_DEFS>] SIMPLE_PATH\n     /// ```\n+    ///\n+    /// For example, this grammar accepts `?const ?for<'a: 'b> m::Trait<'a>`.\n     fn parse_generic_ty_bound(\n         &mut self,\n         lo: Span,\n         has_parens: bool,\n-        question: Option<Span>,\n+        modifiers: BoundModifiers,\n     ) -> PResult<'a, GenericBound> {\n         let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n         let path = self.parse_path(PathStyle::Type)?;\n         if has_parens {\n             self.expect(&token::CloseDelim(token::Paren))?;\n         }\n-        let poly_trait = PolyTraitRef::new(lifetime_defs, path, lo.to(self.prev_span));\n-        let modifier = question.map_or(TraitBoundModifier::None, |_| TraitBoundModifier::Maybe);\n-        Ok(GenericBound::Trait(poly_trait, modifier))\n+\n+        let constness = modifiers.maybe_const.map(|_| ast::Constness::NotConst);\n+        let poly_trait = PolyTraitRef::new(lifetime_defs, path, constness, lo.to(self.prev_span));\n+        Ok(GenericBound::Trait(poly_trait, modifiers.trait_bound_modifier()))\n     }\n \n     /// Optionally parses `for<$generic_params>`."}, {"sha": "724d717304c203a8772771a821e4ec2aa8fae413", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -24,6 +24,24 @@ use syntax::walk_list;\n \n use rustc_error_codes::*;\n \n+/// A syntactic context that disallows certain kinds of bounds (e.g., `?Trait` or `?const Trait`).\n+#[derive(Clone, Copy)]\n+enum BoundContext {\n+    ImplTrait,\n+    TraitBounds,\n+    TraitObject,\n+}\n+\n+impl BoundContext {\n+    fn description(&self) -> &'static str {\n+        match self {\n+            Self::ImplTrait => \"`impl Trait`\",\n+            Self::TraitBounds => \"supertraits\",\n+            Self::TraitObject => \"trait objects\",\n+        }\n+    }\n+}\n+\n struct AstValidator<'a> {\n     session: &'a Session,\n     has_proc_macro_decls: bool,\n@@ -33,6 +51,12 @@ struct AstValidator<'a> {\n     /// e.g., `impl Iterator<Item = impl Debug>`.\n     outer_impl_trait: Option<Span>,\n \n+    /// Keeps track of the `BoundContext` as we recurse.\n+    ///\n+    /// This is used to forbid `?const Trait` bounds in, e.g.,\n+    /// `impl Iterator<Item = Box<dyn ?const Trait>`.\n+    bound_context: Option<BoundContext>,\n+\n     /// Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n     /// or `Foo::Bar<impl Trait>`\n     is_impl_trait_banned: bool,\n@@ -59,10 +83,20 @@ impl<'a> AstValidator<'a> {\n \n     fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n-        f(self);\n+        if outer.is_some() {\n+            self.with_bound_context(BoundContext::ImplTrait, |this| f(this));\n+        } else {\n+            f(self)\n+        }\n         self.outer_impl_trait = old;\n     }\n \n+    fn with_bound_context(&mut self, ctx: BoundContext, f: impl FnOnce(&mut Self)) {\n+        let old = self.bound_context.replace(ctx);\n+        f(self);\n+        self.bound_context = old;\n+    }\n+\n     fn visit_assoc_ty_constraint_from_generic_args(&mut self, constraint: &'a AssocTyConstraint) {\n         match constraint.kind {\n             AssocTyConstraintKind::Equality { .. } => {}\n@@ -84,6 +118,9 @@ impl<'a> AstValidator<'a> {\n             TyKind::ImplTrait(..) => {\n                 self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t))\n             }\n+            TyKind::TraitObject(..) => {\n+                self.with_bound_context(BoundContext::TraitObject, |this| visit::walk_ty(this, t));\n+            }\n             TyKind::Path(ref qself, ref path) => {\n                 // We allow these:\n                 //  - `Option<impl Trait>`\n@@ -192,6 +229,7 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n+    // FIXME(ecstaticmorse): Instead, use `bound_context` to check this in `visit_param_bound`.\n     fn no_questions_in_bounds(&self, bounds: &GenericBounds, where_: &str, is_trait: bool) {\n         for bound in bounds {\n             if let GenericBound::Trait(ref poly, TraitBoundModifier::Maybe) = *bound {\n@@ -697,6 +735,18 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n+\n+                // Equivalent of `visit::walk_item` for `ItemKind::Trait` that inserts a bound\n+                // context for the supertraits.\n+                self.visit_vis(&item.vis);\n+                self.visit_ident(item.ident);\n+                self.visit_generics(generics);\n+                self.with_bound_context(BoundContext::TraitBounds, |this| {\n+                    walk_list!(this, visit_param_bound, bounds);\n+                });\n+                walk_list!(self, visit_trait_item, trait_items);\n+                walk_list!(self, visit_attribute, &item.attrs);\n+                return;\n             }\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (cf. issue #35584).\n@@ -841,6 +891,29 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_generic_param(self, param);\n     }\n \n+    fn visit_param_bound(&mut self, bound: &'a GenericBound) {\n+        if let GenericBound::Trait(poly, maybe_bound) = bound {\n+            match poly.trait_ref.constness {\n+                Some(Constness::NotConst) => {\n+                    if *maybe_bound == TraitBoundModifier::Maybe {\n+                        self.err_handler()\n+                            .span_err(bound.span(), \"`?const` and `?` are mutually exclusive\");\n+                    }\n+\n+                    if let Some(ctx) = self.bound_context {\n+                        let msg = format!(\"`?const` is not permitted in {}\", ctx.description());\n+                        self.err_handler().span_err(bound.span(), &msg);\n+                    }\n+                }\n+\n+                Some(Constness::Const) => bug!(\"Parser should reject bare `const` on bounds\"),\n+                None => {}\n+            }\n+        }\n+\n+        visit::walk_param_bound(self, bound)\n+    }\n+\n     fn visit_pat(&mut self, pat: &'a Pat) {\n         match pat.kind {\n             PatKind::Lit(ref expr) => {\n@@ -949,6 +1022,7 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut lint::LintBuffe\n         session,\n         has_proc_macro_decls: false,\n         outer_impl_trait: None,\n+        bound_context: None,\n         is_impl_trait_banned: false,\n         is_assoc_ty_bound_banned: false,\n         lint_buffer: lints,"}, {"sha": "d9f4b72560ceb831f4d99db93ec25bb617936a79", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -219,6 +219,8 @@ symbols! {\n         const_raw_ptr_deref,\n         const_raw_ptr_to_usize_cast,\n         const_transmute,\n+        const_trait_bound_opt_out,\n+        const_trait_impl,\n         contents,\n         context,\n         convert,"}, {"sha": "1d3bb7d87686cfe81bd89853365c2339844bf708", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -1033,7 +1033,7 @@ impl Expr {\n     pub fn to_bound(&self) -> Option<GenericBound> {\n         match &self.kind {\n             ExprKind::Path(None, path) => Some(GenericBound::Trait(\n-                PolyTraitRef::new(Vec::new(), path.clone(), self.span),\n+                PolyTraitRef::new(Vec::new(), path.clone(), None, self.span),\n                 TraitBoundModifier::None,\n             )),\n             _ => None,\n@@ -2376,6 +2376,15 @@ pub enum AttrKind {\n pub struct TraitRef {\n     pub path: Path,\n     pub ref_id: NodeId,\n+\n+    /// The `const` modifier, if any, that appears before this trait.\n+    ///\n+    /// |                | `constness`                 |\n+    /// |----------------|-----------------------------|\n+    /// | `Trait`        | `None`                      |\n+    /// | `const Trait`  | `Some(Constness::Const)`    |\n+    /// | `?const Trait` | `Some(Constness::NotConst)` |\n+    pub constness: Option<Constness>,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n@@ -2390,10 +2399,15 @@ pub struct PolyTraitRef {\n }\n \n impl PolyTraitRef {\n-    pub fn new(generic_params: Vec<GenericParam>, path: Path, span: Span) -> Self {\n+    pub fn new(\n+        generic_params: Vec<GenericParam>,\n+        path: Path,\n+        constness: Option<Constness>,\n+        span: Span,\n+    ) -> Self {\n         PolyTraitRef {\n             bound_generic_params: generic_params,\n-            trait_ref: TraitRef { path, ref_id: DUMMY_NODE_ID },\n+            trait_ref: TraitRef { path, constness, ref_id: DUMMY_NODE_ID },\n             span,\n         }\n     }"}, {"sha": "52eb20d320f7be759adef09fac1e7ba95fa310d3", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -909,6 +909,8 @@ pub fn check_crate(\n     gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n     gate_all!(const_extern_fn, \"`const extern fn` definitions are unstable\");\n     gate_all!(raw_ref_op, \"raw address of syntax is experimental\");\n+    gate_all!(const_trait_bound_opt_out, \"`?const` on trait bounds is experimental\");\n+    gate_all!(const_trait_impl, \"const trait impls are experimental\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "264ba25cedecc78edb4d4eebc77b5c599b2d468f", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -838,7 +838,8 @@ pub fn noop_visit_variant_data<T: MutVisitor>(vdata: &mut VariantData, vis: &mut\n     }\n }\n \n-pub fn noop_visit_trait_ref<T: MutVisitor>(TraitRef { path, ref_id }: &mut TraitRef, vis: &mut T) {\n+pub fn noop_visit_trait_ref<T: MutVisitor>(tr: &mut TraitRef, vis: &mut T) {\n+    let TraitRef { path, ref_id, constness: _ } = tr;\n     vis.visit_path(path);\n     vis.visit_id(ref_id);\n }"}, {"sha": "7a187a0518af9d7f404c031d1c3be8f25dbf175f", "filename": "src/test/ui/parser/bounds-type.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -8,6 +8,11 @@ struct S<\n     T: ?for<'a> Trait, // OK\n     T: Tr +, // OK\n     T: ?'a, //~ ERROR `?` may only modify trait bounds, not lifetime bounds\n+\n+    T: ?const Tr, // OK\n+    T: ?const ?Tr, // OK\n+    T: ?const Tr + 'a, // OK\n+    T: ?const 'a, //~ ERROR `?const` may only modify trait bounds, not lifetime bounds\n >;\n \n fn main() {}"}, {"sha": "9a1f2ed398240f48f8da6b140af1848eee8b5fea", "filename": "src/test/ui/parser/bounds-type.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Fparser%2Fbounds-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Fparser%2Fbounds-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-type.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -4,5 +4,11 @@ error: `?` may only modify trait bounds, not lifetime bounds\n LL |     T: ?'a,\n    |        ^\n \n-error: aborting due to previous error\n+error: `?const` may only modify trait bounds, not lifetime bounds\n+  --> $DIR/bounds-type.rs:15:8\n+   |\n+LL |     T: ?const 'a,\n+   |        ^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "0bf337ad08dbfe682d8090f1a01023c8783d5696", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/feature-gate.gated.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,8 @@\n+error: `?const` on trait bounds is not yet implemented\n+  --> $DIR/feature-gate.rs:11:29\n+   |\n+LL | const fn get_assoc_const<S: ?const T>() -> i32 { <S as T>::CONST }\n+   |                             ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "cf1ed30da0fcce22b8ca46b32439bf13404338d6", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/feature-gate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,15 @@\n+// revisions: stock gated\n+// gate-test-const_trait_bound_opt_out\n+\n+#![cfg_attr(gated, feature(const_trait_bound_opt_out))]\n+#![allow(incomplete_features)]\n+\n+trait T {\n+    const CONST: i32;\n+}\n+\n+const fn get_assoc_const<S: ?const T>() -> i32 { <S as T>::CONST }\n+//[stock]~^ ERROR `?const` on trait bounds is experimental\n+//[stock,gated]~^^ ERROR `?const` on trait bounds is not yet implemented\n+\n+fn main() {}"}, {"sha": "64388004b5b72b7fca9b85d8994e4f3b7bf33410", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/feature-gate.stock.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,18 @@\n+error[E0658]: `?const` on trait bounds is experimental\n+  --> $DIR/feature-gate.rs:11:29\n+   |\n+LL | const fn get_assoc_const<S: ?const T>() -> i32 { <S as T>::CONST }\n+   |                             ^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/67794\n+   = help: add `#![feature(const_trait_bound_opt_out)]` to the crate attributes to enable\n+\n+error: `?const` on trait bounds is not yet implemented\n+  --> $DIR/feature-gate.rs:11:29\n+   |\n+LL | const fn get_assoc_const<S: ?const T>() -> i32 { <S as T>::CONST }\n+   |                             ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e4e6bedd93746b5b257e591719885360741fba13", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-impl-trait.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,25 @@\n+#![feature(const_trait_bound_opt_out)]\n+#![feature(associated_type_bounds)]\n+#![allow(incomplete_features)]\n+\n+trait T {}\n+struct S;\n+impl T for S {}\n+\n+fn rpit() -> impl ?const T { S }\n+//~^ ERROR `?const` is not permitted in `impl Trait`\n+//~| ERROR `?const` on trait bounds is not yet implemented\n+\n+fn apit(_: impl ?const T) {}\n+//~^ ERROR `?const` is not permitted in `impl Trait`\n+//~| ERROR `?const` on trait bounds is not yet implemented\n+\n+fn rpit_assoc_bound() -> impl IntoIterator<Item: ?const T> { Some(S) }\n+//~^ ERROR `?const` is not permitted in `impl Trait`\n+//~| ERROR `?const` on trait bounds is not yet implemented\n+\n+fn apit_assoc_bound(_: impl IntoIterator<Item: ?const T>) {}\n+//~^ ERROR `?const` is not permitted in `impl Trait`\n+//~| ERROR `?const` on trait bounds is not yet implemented\n+\n+fn main() {}"}, {"sha": "f4abd4b714e8a2a3da06d8db048a2ac98b027f7f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-impl-trait.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,50 @@\n+error: `?const` is not permitted in `impl Trait`\n+  --> $DIR/in-impl-trait.rs:9:19\n+   |\n+LL | fn rpit() -> impl ?const T { S }\n+   |                   ^^^^^^^^\n+\n+error: `?const` is not permitted in `impl Trait`\n+  --> $DIR/in-impl-trait.rs:13:17\n+   |\n+LL | fn apit(_: impl ?const T) {}\n+   |                 ^^^^^^^^\n+\n+error: `?const` is not permitted in `impl Trait`\n+  --> $DIR/in-impl-trait.rs:17:50\n+   |\n+LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ?const T> { Some(S) }\n+   |                                                  ^^^^^^^^\n+\n+error: `?const` is not permitted in `impl Trait`\n+  --> $DIR/in-impl-trait.rs:21:48\n+   |\n+LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ?const T>) {}\n+   |                                                ^^^^^^^^\n+\n+error: `?const` on trait bounds is not yet implemented\n+  --> $DIR/in-impl-trait.rs:9:19\n+   |\n+LL | fn rpit() -> impl ?const T { S }\n+   |                   ^^^^^^^^\n+\n+error: `?const` on trait bounds is not yet implemented\n+  --> $DIR/in-impl-trait.rs:13:17\n+   |\n+LL | fn apit(_: impl ?const T) {}\n+   |                 ^^^^^^^^\n+\n+error: `?const` on trait bounds is not yet implemented\n+  --> $DIR/in-impl-trait.rs:17:50\n+   |\n+LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ?const T> { Some(S) }\n+   |                                                  ^^^^^^^^\n+\n+error: `?const` on trait bounds is not yet implemented\n+  --> $DIR/in-impl-trait.rs:21:48\n+   |\n+LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ?const T>) {}\n+   |                                                ^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "4523b46bc51f6e31a06ad2b8693891134cbc48c0", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-trait-bounds.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+trait Super {}\n+trait T: ?const Super {}\n+//~^ ERROR `?const` is not permitted in supertraits\n+//~| ERROR `?const` on trait bounds is not yet implemented\n+\n+fn main() {}"}, {"sha": "8003361be7d2efacc3df4a1fcb750a6cf7a2d6b9", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-trait-bounds.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,14 @@\n+error: `?const` is not permitted in supertraits\n+  --> $DIR/in-trait-bounds.rs:5:10\n+   |\n+LL | trait T: ?const Super {}\n+   |          ^^^^^^^^^^^^\n+\n+error: `?const` on trait bounds is not yet implemented\n+  --> $DIR/in-trait-bounds.rs:5:10\n+   |\n+LL | trait T: ?const Super {}\n+   |          ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6cfca7154867485c58159a5c1a27b731084e05bd", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-trait-object.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,22 @@\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(bare_trait_objects)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+trait T {}\n+impl T for S {}\n+\n+// An inherent impl for the trait object `?const T`.\n+impl ?const T {}\n+//~^ ERROR `?const` is not permitted in trait objects\n+//~| ERROR `?const` on trait bounds is not yet implemented\n+\n+fn trait_object() -> &'static dyn ?const T { &S }\n+//~^ ERROR `?const` is not permitted in trait objects\n+//~| ERROR `?const` on trait bounds is not yet implemented\n+\n+fn trait_object_in_apit(_: impl IntoIterator<Item = Box<dyn ?const T>>) {}\n+//~^ ERROR `?const` is not permitted in trait objects\n+//~| ERROR `?const` on trait bounds is not yet implemented\n+\n+fn main() {}"}, {"sha": "c059f16902250c1bd74d870c2729988065f02071", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-trait-object.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,38 @@\n+error: `?const` is not permitted in trait objects\n+  --> $DIR/in-trait-object.rs:10:6\n+   |\n+LL | impl ?const T {}\n+   |      ^^^^^^^^\n+\n+error: `?const` is not permitted in trait objects\n+  --> $DIR/in-trait-object.rs:14:35\n+   |\n+LL | fn trait_object() -> &'static dyn ?const T { &S }\n+   |                                   ^^^^^^^^\n+\n+error: `?const` is not permitted in trait objects\n+  --> $DIR/in-trait-object.rs:18:61\n+   |\n+LL | fn trait_object_in_apit(_: impl IntoIterator<Item = Box<dyn ?const T>>) {}\n+   |                                                             ^^^^^^^^\n+\n+error: `?const` on trait bounds is not yet implemented\n+  --> $DIR/in-trait-object.rs:10:6\n+   |\n+LL | impl ?const T {}\n+   |      ^^^^^^^^\n+\n+error: `?const` on trait bounds is not yet implemented\n+  --> $DIR/in-trait-object.rs:14:35\n+   |\n+LL | fn trait_object() -> &'static dyn ?const T { &S }\n+   |                                   ^^^^^^^^\n+\n+error: `?const` on trait bounds is not yet implemented\n+  --> $DIR/in-trait-object.rs:18:61\n+   |\n+LL | fn trait_object_in_apit(_: impl IntoIterator<Item = Box<dyn ?const T>>) {}\n+   |                                                             ^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "01e941a8fba451fe03f59f59041d29a1c4fa1af2", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/opt-out-twice.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Z parse-only\n+\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+struct S<T: ?const ?const Tr>;\n+//~^ ERROR expected identifier, found keyword `const`\n+//~| ERROR expected one of `(`, `+`, `,`, `::`, `<`, `=`, or `>`"}, {"sha": "f7924b3f24db39a0b176323c00824bdfca18d3d5", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/opt-out-twice.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,14 @@\n+error: expected identifier, found keyword `const`\n+  --> $DIR/opt-out-twice.rs:6:21\n+   |\n+LL | struct S<T: ?const ?const Tr>;\n+   |                     ^^^^^ expected identifier, found keyword\n+\n+error: expected one of `(`, `+`, `,`, `::`, `<`, `=`, or `>`, found `Tr`\n+  --> $DIR/opt-out-twice.rs:6:27\n+   |\n+LL | struct S<T: ?const ?const Tr>;\n+   |                           ^^ expected one of 7 possible tokens\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a0d9610bbb5e2b6517648d34923757c46894be62", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/syntax.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fsyntax.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z parse-only\n+// check-pass\n+\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+struct S<\n+    T: ?const ?for<'a> Tr<'a> + 'static + ?const std::ops::Add,\n+    T: ?const ?for<'a: 'b> m::Trait<'a>,\n+>;"}, {"sha": "425784f4e4326aa955b2cf36df8741d0489a6844", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/with-maybe-sized.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,8 @@\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+struct S<T: ?const ?Sized>(std::marker::PhantomData<T>);\n+//~^ ERROR `?const` and `?` are mutually exclusive\n+//~| ERROR `?const` on trait bounds is not yet implemented\n+\n+fn main() {}"}, {"sha": "44f6d464ae6a83fac168c206f2e4428f8f835850", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/with-maybe-sized.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,14 @@\n+error: `?const` and `?` are mutually exclusive\n+  --> $DIR/with-maybe-sized.rs:4:13\n+   |\n+LL | struct S<T: ?const ?Sized>(std::marker::PhantomData<T>);\n+   |             ^^^^^^^^^^^^^\n+\n+error: `?const` on trait bounds is not yet implemented\n+  --> $DIR/with-maybe-sized.rs:4:13\n+   |\n+LL | struct S<T: ?const ?Sized>(std::marker::PhantomData<T>);\n+   |             ^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b904a2eec0dd0f531e998be78a2694059869f0f5", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/without-question-mark.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: -Z parse-only\n+\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+struct S<T: const Tr>;\n+//~^ ERROR expected one of `!`, `(`, `,`, `=`, `>`, `?`, `for`, lifetime, or path"}, {"sha": "0dbca952c037ec8161df6a9bcc3a94d56328916a", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/without-question-mark.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `!`, `(`, `,`, `=`, `>`, `?`, `for`, lifetime, or path, found keyword `const`\n+  --> $DIR/without-question-mark.rs:6:13\n+   |\n+LL | struct S<T: const Tr>;\n+   |             ^^^^^ expected one of 9 possible tokens\n+\n+error: aborting due to previous error\n+"}, {"sha": "b196f9ef57380b255985db6f25379722c03105e2", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.gated.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,8 @@\n+error: const trait impls are not yet implemented\n+  --> $DIR/feature-gate.rs:9:1\n+   |\n+LL | impl const T for S {}\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "49b6c0926c50c18c2f940d2acc53cf7a5fa01303", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,13 @@\n+// revisions: stock gated\n+// gate-test-const_trait_impl\n+\n+#![cfg_attr(gated, feature(const_trait_impl))]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+trait T {}\n+impl const T for S {}\n+//[stock]~^ ERROR const trait impls are experimental\n+//[stock,gated]~^^ ERROR const trait impls are not yet implemented\n+\n+fn main() {}"}, {"sha": "093946f859ac36ab145bd830924cdced64253077", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.stock.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,18 @@\n+error[E0658]: const trait impls are experimental\n+  --> $DIR/feature-gate.rs:9:6\n+   |\n+LL | impl const T for S {}\n+   |      ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/67792\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n+\n+error: const trait impls are not yet implemented\n+  --> $DIR/feature-gate.rs:9:1\n+   |\n+LL | impl const T for S {}\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "98d3a220d8674d8b98f7eae5a3a2c52f5c3a291e", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-opt-out-trait.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-opt-out-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-opt-out-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-opt-out-trait.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_trait_bound_opt_out)]\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+trait T {}\n+\n+impl ?const T for S {}\n+//~^ ERROR expected a trait, found type\n+\n+fn main() {}"}, {"sha": "8f923efb093f3f0feffae3c9e765a661b0535a93", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-opt-out-trait.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-opt-out-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-opt-out-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-opt-out-trait.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,8 @@\n+error: expected a trait, found type\n+  --> $DIR/impl-opt-out-trait.rs:8:6\n+   |\n+LL | impl ?const T for S {}\n+   |      ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9cffe75addd63b76bbabc2874047119bca8ab4df", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Z parse-only\n+\n+#![feature(const_trait_impl)]\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+#![allow(bare_trait_objects)]\n+\n+struct S;\n+trait T {}\n+\n+impl const T {}\n+//~^ ERROR `const` cannot modify an inherent impl\n+\n+fn main() {}"}, {"sha": "1d245576559513774c0f1ecea0c21f19e1b6be66", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,10 @@\n+error: `const` cannot modify an inherent impl\n+  --> $DIR/inherent-impl.rs:11:6\n+   |\n+LL | impl const T {}\n+   |      ^^^^^\n+   |\n+   = help: only a trait impl can be `const`\n+\n+error: aborting due to previous error\n+"}, {"sha": "354d48d630f7b6c14a6d0b6e2a78005c8af5b91d", "filename": "src/test/ui/rfc-2632-const-trait-impl/syntax.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3963873aac5fbc3ace85ae290710b58506f3645/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsyntax.rs?ref=f3963873aac5fbc3ace85ae290710b58506f3645", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: -Z parse-only\n+// check-pass\n+\n+#![feature(const_trait_bound_opt_out)]\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+// For now, this parses since an error does not occur until AST lowering.\n+impl ?const T {}"}]}