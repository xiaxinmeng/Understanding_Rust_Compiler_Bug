{"sha": "84daccc5596f6041a7593856aadd665341a3adb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZGFjY2M1NTk2ZjYwNDFhNzU5Mzg1NmFhZGQ2NjUzNDFhM2FkYjc=", "commit": {"author": {"name": "Leonora Tindall", "email": "nora@nora.codes", "date": "2020-09-11T21:36:58Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-10-23T00:26:48Z"}, "message": "change the order of type arguments on ControlFlow\n\nThis allows ControlFlow<BreakType> which is much more ergonomic for\ncommon iterator combinator use cases.", "tree": {"sha": "63869c0129d7255f4d899e57608bbd9d2818958b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63869c0129d7255f4d899e57608bbd9d2818958b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84daccc5596f6041a7593856aadd665341a3adb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84daccc5596f6041a7593856aadd665341a3adb7", "html_url": "https://github.com/rust-lang/rust/commit/84daccc5596f6041a7593856aadd665341a3adb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84daccc5596f6041a7593856aadd665341a3adb7/comments", "author": {"login": "NoraCodes", "id": 3290365, "node_id": "MDQ6VXNlcjMyOTAzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3290365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NoraCodes", "html_url": "https://github.com/NoraCodes", "followers_url": "https://api.github.com/users/NoraCodes/followers", "following_url": "https://api.github.com/users/NoraCodes/following{/other_user}", "gists_url": "https://api.github.com/users/NoraCodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/NoraCodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NoraCodes/subscriptions", "organizations_url": "https://api.github.com/users/NoraCodes/orgs", "repos_url": "https://api.github.com/users/NoraCodes/repos", "events_url": "https://api.github.com/users/NoraCodes/events{/privacy}", "received_events_url": "https://api.github.com/users/NoraCodes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9cd294cf2775441e713c7ee2918b728733b99f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cd294cf2775441e713c7ee2918b728733b99f5", "html_url": "https://github.com/rust-lang/rust/commit/a9cd294cf2775441e713c7ee2918b728733b99f5"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "c0c3260e2e2ecabb6f4524aaa4f9f67cb0cacfae", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84daccc5596f6041a7593856aadd665341a3adb7/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84daccc5596f6041a7593856aadd665341a3adb7/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=84daccc5596f6041a7593856aadd665341a3adb7", "patch": "@@ -87,8 +87,7 @@ where\n }\n \n /// Allows searches to terminate early with a value.\n-// FIXME (#75744): remove the alias once the generics are in a better order and `C=()`.\n-pub type ControlFlow<T> = std::ops::ControlFlow<(), T>;\n+pub use std::ops::ControlFlow;\n \n /// The status of a node in the depth-first search.\n ///"}, {"sha": "9c8e639c2d802cfcf0350386b69575e874f5345a", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84daccc5596f6041a7593856aadd665341a3adb7/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84daccc5596f6041a7593856aadd665341a3adb7/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=84daccc5596f6041a7593856aadd665341a3adb7", "patch": "@@ -1280,7 +1280,7 @@ where\n         #[inline]\n         fn find<T, B>(\n             f: &mut impl FnMut(T) -> Option<B>,\n-        ) -> impl FnMut((), T) -> ControlFlow<(), B> + '_ {\n+        ) -> impl FnMut((), T) -> ControlFlow<B> + '_ {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n                 None => ControlFlow::CONTINUE,\n@@ -2059,7 +2059,7 @@ where\n             flag: &'a mut bool,\n             p: &'a mut impl FnMut(&T) -> bool,\n             mut fold: impl FnMut(Acc, T) -> R + 'a,\n-        ) -> impl FnMut(Acc, T) -> ControlFlow<Acc, R> + 'a {\n+        ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> + 'a {\n             move |acc, x| {\n                 if p(&x) {\n                     ControlFlow::from_try(fold(acc, x))\n@@ -2372,7 +2372,7 @@ where\n         fn check<T, Acc, R: Try<Ok = Acc>>(\n             mut n: usize,\n             mut fold: impl FnMut(Acc, T) -> R,\n-        ) -> impl FnMut(Acc, T) -> ControlFlow<Acc, R> {\n+        ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> {\n             move |acc, x| {\n                 n -= 1;\n                 let r = fold(acc, x);\n@@ -2496,7 +2496,7 @@ where\n         fn check<'a, T, Acc, R: Try<Ok = Acc>>(\n             n: &'a mut usize,\n             mut fold: impl FnMut(Acc, T) -> R + 'a,\n-        ) -> impl FnMut(Acc, T) -> ControlFlow<Acc, R> + 'a {\n+        ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> + 'a {\n             move |acc, x| {\n                 *n -= 1;\n                 let r = fold(acc, x);\n@@ -2681,7 +2681,7 @@ where\n             state: &'a mut St,\n             f: &'a mut impl FnMut(&mut St, T) -> Option<B>,\n             mut fold: impl FnMut(Acc, B) -> R + 'a,\n-        ) -> impl FnMut(Acc, T) -> ControlFlow<Acc, R> + 'a {\n+        ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> + 'a {\n             move |acc, x| match f(state, x) {\n                 None => ControlFlow::Break(try { acc }),\n                 Some(x) => ControlFlow::from_try(fold(acc, x)),"}, {"sha": "6f8cb6b5a65b6fcdef683a4b24b300cbfd1037e0", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84daccc5596f6041a7593856aadd665341a3adb7/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84daccc5596f6041a7593856aadd665341a3adb7/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=84daccc5596f6041a7593856aadd665341a3adb7", "patch": "@@ -339,9 +339,7 @@ pub trait DoubleEndedIterator: Iterator {\n         P: FnMut(&Self::Item) -> bool,\n     {\n         #[inline]\n-        fn check<T>(\n-            mut predicate: impl FnMut(&T) -> bool,\n-        ) -> impl FnMut((), T) -> ControlFlow<(), T> {\n+        fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n             move |(), x| {\n                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n             }"}, {"sha": "7fc60caec2a736fe5ee56895dc3575188c43bdab", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/84daccc5596f6041a7593856aadd665341a3adb7/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84daccc5596f6041a7593856aadd665341a3adb7/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=84daccc5596f6041a7593856aadd665341a3adb7", "patch": "@@ -2109,7 +2109,7 @@ pub trait Iterator {\n         F: FnMut(Self::Item) -> bool,\n     {\n         #[inline]\n-        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<(), ()> {\n+        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n             move |(), x| {\n                 if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }\n             }\n@@ -2162,7 +2162,7 @@ pub trait Iterator {\n         F: FnMut(Self::Item) -> bool,\n     {\n         #[inline]\n-        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<(), ()> {\n+        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n             move |(), x| {\n                 if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n             }\n@@ -2222,9 +2222,7 @@ pub trait Iterator {\n         P: FnMut(&Self::Item) -> bool,\n     {\n         #[inline]\n-        fn check<T>(\n-            mut predicate: impl FnMut(&T) -> bool,\n-        ) -> impl FnMut((), T) -> ControlFlow<(), T> {\n+        fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n             move |(), x| {\n                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n             }\n@@ -2255,9 +2253,7 @@ pub trait Iterator {\n         F: FnMut(Self::Item) -> Option<B>,\n     {\n         #[inline]\n-        fn check<T, B>(\n-            mut f: impl FnMut(T) -> Option<B>,\n-        ) -> impl FnMut((), T) -> ControlFlow<(), B> {\n+        fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n                 None => ControlFlow::CONTINUE,\n@@ -2296,7 +2292,7 @@ pub trait Iterator {\n         R: Try<Ok = bool>,\n     {\n         #[inline]\n-        fn check<F, T, R>(mut f: F) -> impl FnMut((), T) -> ControlFlow<(), Result<T, R::Error>>\n+        fn check<F, T, R>(mut f: F) -> impl FnMut((), T) -> ControlFlow<Result<T, R::Error>>\n         where\n             F: FnMut(&T) -> R,\n             R: Try<Ok = bool>,"}, {"sha": "5ede1ba8e2c104076aa205dff4ff2edd5e87a738", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84daccc5596f6041a7593856aadd665341a3adb7/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84daccc5596f6041a7593856aadd665341a3adb7/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=84daccc5596f6041a7593856aadd665341a3adb7", "patch": "@@ -3,15 +3,15 @@ use crate::ops::Try;\n /// Used to make try_fold closures more like normal loops\n #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n #[derive(Debug, Clone, Copy, PartialEq)]\n-pub enum ControlFlow<C, B> {\n+pub enum ControlFlow<B, C = ()> {\n     /// Continue in the loop, using the given value for the next iteration\n     Continue(C),\n     /// Exit the loop, yielding the given value\n     Break(B),\n }\n \n #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n-impl<C, B> Try for ControlFlow<C, B> {\n+impl<B, C> Try for ControlFlow<B, C> {\n     type Ok = C;\n     type Error = B;\n     #[inline]\n@@ -31,7 +31,7 @@ impl<C, B> Try for ControlFlow<C, B> {\n     }\n }\n \n-impl<C, B> ControlFlow<C, B> {\n+impl<B, C> ControlFlow<B, C> {\n     /// Returns `true` if this is a `Break` variant.\n     #[inline]\n     #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n@@ -58,7 +58,7 @@ impl<C, B> ControlFlow<C, B> {\n     }\n }\n \n-impl<R: Try> ControlFlow<R::Ok, R> {\n+impl<R: Try> ControlFlow<R, R::Ok> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n     #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n@@ -80,7 +80,7 @@ impl<R: Try> ControlFlow<R::Ok, R> {\n     }\n }\n \n-impl<B> ControlFlow<(), B> {\n+impl<B> ControlFlow<B, ()> {\n     /// It's frequently the case that there's no value needed with `Continue`,\n     /// so this provides a way to avoid typing `(())`, if you prefer it.\n     ///\n@@ -102,7 +102,7 @@ impl<B> ControlFlow<(), B> {\n     pub const CONTINUE: Self = ControlFlow::Continue(());\n }\n \n-impl<C> ControlFlow<C, ()> {\n+impl<C> ControlFlow<(), C> {\n     /// APIs like `try_for_each` don't need values with `Break`,\n     /// so this provides a way to avoid typing `(())`, if you prefer it.\n     ///"}]}