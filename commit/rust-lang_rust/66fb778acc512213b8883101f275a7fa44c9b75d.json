{"sha": "66fb778acc512213b8883101f275a7fa44c9b75d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZmI3NzhhY2M1MTIyMTNiODg4MzEwMWYyNzVhN2ZhNDRjOWI3NWQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-27T09:47:18Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-04T16:30:54Z"}, "message": "Make `rustc_peek` a safe intrinsic", "tree": {"sha": "3aee599944fc8572a2a200561eff424b41b5cc48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aee599944fc8572a2a200561eff424b41b5cc48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66fb778acc512213b8883101f275a7fa44c9b75d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66fb778acc512213b8883101f275a7fa44c9b75d", "html_url": "https://github.com/rust-lang/rust/commit/66fb778acc512213b8883101f275a7fa44c9b75d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66fb778acc512213b8883101f275a7fa44c9b75d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "html_url": "https://github.com/rust-lang/rust/commit/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939"}], "stats": {"total": 158, "additions": 79, "deletions": 79}, "files": [{"sha": "da5b9f18c0719e1c891a351c357f27b42d58ecd8", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -75,7 +75,7 @@ pub fn intrinsic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n         | \"saturating_sub\" | \"rotate_left\" | \"rotate_right\" | \"ctpop\" | \"ctlz\" | \"cttz\"\n         | \"bswap\" | \"bitreverse\" | \"discriminant_value\" | \"type_id\" | \"likely\" | \"unlikely\"\n         | \"ptr_guaranteed_eq\" | \"ptr_guaranteed_ne\" | \"minnumf32\" | \"minnumf64\" | \"maxnumf32\"\n-        | \"maxnumf64\" | \"type_name\" | \"variant_count\" => hir::Unsafety::Normal,\n+        | \"rustc_peek\" | \"maxnumf64\" | \"type_name\" | \"variant_count\" => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,\n     }\n }"}, {"sha": "30460824a167890b98c57512d5c0f02770e4603e", "filename": "src/test/ui/mir-dataflow/def-inits-1.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.rs?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -11,13 +11,13 @@ struct S(i32);\n fn foo(test: bool, x: &mut S, y: S, mut z: S) -> S {\n     let ret;\n     // `ret` starts off uninitialized\n-    unsafe { rustc_peek(&ret); }  //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&ret);  //~ ERROR rustc_peek: bit not set\n \n     // All function formal parameters start off initialized.\n \n-    unsafe { rustc_peek(&x) };\n-    unsafe { rustc_peek(&y) };\n-    unsafe { rustc_peek(&z) };\n+    rustc_peek(&x);\n+    rustc_peek(&y);\n+    rustc_peek(&z);\n \n     ret = if test {\n         ::std::mem::replace(x, y)\n@@ -27,21 +27,21 @@ fn foo(test: bool, x: &mut S, y: S, mut z: S) -> S {\n     };\n \n     // `z` may be uninitialized here.\n-    unsafe { rustc_peek(&z); } //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&z); //~ ERROR rustc_peek: bit not set\n \n     // `y` is definitely uninitialized here.\n-    unsafe { rustc_peek(&y); } //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&y); //~ ERROR rustc_peek: bit not set\n \n     // `x` is still (definitely) initialized (replace above is a reborrow).\n-    unsafe { rustc_peek(&x); }\n+    rustc_peek(&x);\n \n     ::std::mem::drop(x);\n \n     // `x` is *definitely* uninitialized here\n-    unsafe { rustc_peek(&x); } //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&x); //~ ERROR rustc_peek: bit not set\n \n     // `ret` is now definitely initialized (via `if` above).\n-    unsafe { rustc_peek(&ret); }\n+    rustc_peek(&ret);\n \n     ret\n }"}, {"sha": "e2bddb54d9ba86154215bada94fb1e89c5e5b480", "filename": "src/test/ui/mir-dataflow/def-inits-1.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.stderr?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -1,26 +1,26 @@\n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:14:14\n+  --> $DIR/def-inits-1.rs:14:5\n    |\n-LL |     unsafe { rustc_peek(&ret); }\n-   |              ^^^^^^^^^^^^^^^^\n+LL |     rustc_peek(&ret);\n+   |     ^^^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:30:14\n+  --> $DIR/def-inits-1.rs:30:5\n    |\n-LL |     unsafe { rustc_peek(&z); }\n-   |              ^^^^^^^^^^^^^^\n+LL |     rustc_peek(&z);\n+   |     ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:33:14\n+  --> $DIR/def-inits-1.rs:33:5\n    |\n-LL |     unsafe { rustc_peek(&y); }\n-   |              ^^^^^^^^^^^^^^\n+LL |     rustc_peek(&y);\n+   |     ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:41:14\n+  --> $DIR/def-inits-1.rs:41:5\n    |\n-LL |     unsafe { rustc_peek(&x); }\n-   |              ^^^^^^^^^^^^^^\n+LL |     rustc_peek(&x);\n+   |     ^^^^^^^^^^^^^^\n \n error: stop_after_dataflow ended compilation\n "}, {"sha": "374a9f75a134b68036aadf51d1d86d8beece9480", "filename": "src/test/ui/mir-dataflow/indirect-mutation-offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Findirect-mutation-offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Findirect-mutation-offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Findirect-mutation-offset.rs?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -38,7 +38,7 @@ const BOO: i32 = {\n \n     *rmut_cell = 42;  // Mutates `x` indirectly even though `x` is not marked indirectly mutable!!!\n     let val = *rmut_cell;\n-    unsafe { rustc_peek(x) }; //~ ERROR rustc_peek: bit not set\n+    rustc_peek(x); //~ ERROR rustc_peek: bit not set\n \n     val\n };"}, {"sha": "1d5287c15ab7994983d160f6764fa9b3872b5ab7", "filename": "src/test/ui/mir-dataflow/indirect-mutation-offset.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Findirect-mutation-offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Findirect-mutation-offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Findirect-mutation-offset.stderr?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -1,8 +1,8 @@\n error: rustc_peek: bit not set\n-  --> $DIR/indirect-mutation-offset.rs:41:14\n+  --> $DIR/indirect-mutation-offset.rs:41:5\n    |\n-LL |     unsafe { rustc_peek(x) };\n-   |              ^^^^^^^^^^^^^\n+LL |     rustc_peek(x);\n+   |     ^^^^^^^^^^^^^\n \n error: stop_after_dataflow ended compilation\n "}, {"sha": "8fb1d4bc736d6be6d4e368d710aca46633b899da", "filename": "src/test/ui/mir-dataflow/inits-1.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.rs?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -11,13 +11,13 @@ struct S(i32);\n fn foo(test: bool, x: &mut S, y: S, mut z: S) -> S {\n     let ret;\n     // `ret` starts off uninitialized, so we get an error report here.\n-    unsafe { rustc_peek(&ret); }  //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&ret);  //~ ERROR rustc_peek: bit not set\n \n     // All function formal parameters start off initialized.\n \n-    unsafe { rustc_peek(&x) };\n-    unsafe { rustc_peek(&y) };\n-    unsafe { rustc_peek(&z) };\n+    rustc_peek(&x);\n+    rustc_peek(&y);\n+    rustc_peek(&z);\n \n     ret = if test {\n         ::std::mem::replace(x, y)\n@@ -28,21 +28,21 @@ fn foo(test: bool, x: &mut S, y: S, mut z: S) -> S {\n \n \n     // `z` may be initialized here.\n-    unsafe { rustc_peek(&z); }\n+    rustc_peek(&z);\n \n     // `y` is definitely uninitialized here.\n-    unsafe { rustc_peek(&y); }  //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&y);  //~ ERROR rustc_peek: bit not set\n \n     // `x` is still (definitely) initialized (replace above is a reborrow).\n-    unsafe { rustc_peek(&x); }\n+    rustc_peek(&x);\n \n     ::std::mem::drop(x);\n \n     // `x` is *definitely* uninitialized here\n-    unsafe { rustc_peek(&x); } //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&x); //~ ERROR rustc_peek: bit not set\n \n     // `ret` is now definitely initialized (via `if` above).\n-    unsafe { rustc_peek(&ret); }\n+    rustc_peek(&ret);\n \n     ret\n }"}, {"sha": "7a00a70af6f84f95b06f8ac1ce166a5f1a536c44", "filename": "src/test/ui/mir-dataflow/inits-1.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.stderr?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -1,20 +1,20 @@\n error: rustc_peek: bit not set\n-  --> $DIR/inits-1.rs:14:14\n+  --> $DIR/inits-1.rs:14:5\n    |\n-LL |     unsafe { rustc_peek(&ret); }\n-   |              ^^^^^^^^^^^^^^^^\n+LL |     rustc_peek(&ret);\n+   |     ^^^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/inits-1.rs:34:14\n+  --> $DIR/inits-1.rs:34:5\n    |\n-LL |     unsafe { rustc_peek(&y); }\n-   |              ^^^^^^^^^^^^^^\n+LL |     rustc_peek(&y);\n+   |     ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/inits-1.rs:42:14\n+  --> $DIR/inits-1.rs:42:5\n    |\n-LL |     unsafe { rustc_peek(&x); }\n-   |              ^^^^^^^^^^^^^^\n+LL |     rustc_peek(&x);\n+   |     ^^^^^^^^^^^^^^\n \n error: stop_after_dataflow ended compilation\n "}, {"sha": "786da523a339177d6d895108ed361483051fca80", "filename": "src/test/ui/mir-dataflow/liveness-ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-ptr.rs?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -10,17 +10,17 @@ fn foo() -> i32 {\n     x = 0;\n \n     // `x` is live here since it is used in the next statement...\n-    unsafe { rustc_peek(x); }\n+    rustc_peek(x);\n \n     p = &x;\n \n     // ... but not here, even while it can be accessed through `p`.\n-    unsafe { rustc_peek(x); } //~ ERROR rustc_peek: bit not set\n+    rustc_peek(x); //~ ERROR rustc_peek: bit not set\n     let tmp = unsafe { *p };\n \n     x = tmp + 1;\n \n-    unsafe { rustc_peek(x); }\n+    rustc_peek(x);\n \n     x\n }"}, {"sha": "858cdbac3d312362864fad917cc328c70badf642", "filename": "src/test/ui/mir-dataflow/liveness-ptr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-ptr.stderr?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -1,8 +1,8 @@\n error: rustc_peek: bit not set\n-  --> $DIR/liveness-ptr.rs:18:14\n+  --> $DIR/liveness-ptr.rs:18:5\n    |\n-LL |     unsafe { rustc_peek(x); }\n-   |              ^^^^^^^^^^^^^\n+LL |     rustc_peek(x);\n+   |     ^^^^^^^^^^^^^\n \n error: stop_after_dataflow ended compilation\n "}, {"sha": "c2b4284a7b4f8b83aefb9115bac6df58aadd2293", "filename": "src/test/ui/mir-dataflow/uninits-1.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.rs?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -11,13 +11,13 @@ struct S(i32);\n fn foo(test: bool, x: &mut S, y: S, mut z: S) -> S {\n     let ret;\n     // `ret` starts off uninitialized\n-    unsafe { rustc_peek(&ret); }\n+    rustc_peek(&ret);\n \n     // All function formal parameters start off initialized.\n \n-    unsafe { rustc_peek(&x) }; //~ ERROR rustc_peek: bit not set\n-    unsafe { rustc_peek(&y) }; //~ ERROR rustc_peek: bit not set\n-    unsafe { rustc_peek(&z) }; //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&x); //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&y); //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&z); //~ ERROR rustc_peek: bit not set\n \n     ret = if test {\n         ::std::mem::replace(x, y)\n@@ -27,21 +27,21 @@ fn foo(test: bool, x: &mut S, y: S, mut z: S) -> S {\n     };\n \n     // `z` may be uninitialized here.\n-    unsafe { rustc_peek(&z); }\n+    rustc_peek(&z);\n \n     // `y` is definitely uninitialized here.\n-    unsafe { rustc_peek(&y); }\n+    rustc_peek(&y);\n \n     // `x` is still (definitely) initialized (replace above is a reborrow).\n-    unsafe { rustc_peek(&x); } //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&x); //~ ERROR rustc_peek: bit not set\n \n     ::std::mem::drop(x);\n \n     // `x` is *definitely* uninitialized here\n-    unsafe { rustc_peek(&x); }\n+    rustc_peek(&x);\n \n     // `ret` is now definitely initialized (via `if` above).\n-    unsafe { rustc_peek(&ret); } //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&ret); //~ ERROR rustc_peek: bit not set\n \n     ret\n }"}, {"sha": "c52f5ac7bd9b66b83af1906b3523d4aa95ded5be", "filename": "src/test/ui/mir-dataflow/uninits-1.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.stderr?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -1,32 +1,32 @@\n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:18:14\n+  --> $DIR/uninits-1.rs:18:5\n    |\n-LL |     unsafe { rustc_peek(&x) };\n-   |              ^^^^^^^^^^^^^^\n+LL |     rustc_peek(&x);\n+   |     ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:19:14\n+  --> $DIR/uninits-1.rs:19:5\n    |\n-LL |     unsafe { rustc_peek(&y) };\n-   |              ^^^^^^^^^^^^^^\n+LL |     rustc_peek(&y);\n+   |     ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:20:14\n+  --> $DIR/uninits-1.rs:20:5\n    |\n-LL |     unsafe { rustc_peek(&z) };\n-   |              ^^^^^^^^^^^^^^\n+LL |     rustc_peek(&z);\n+   |     ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:36:14\n+  --> $DIR/uninits-1.rs:36:5\n    |\n-LL |     unsafe { rustc_peek(&x); }\n-   |              ^^^^^^^^^^^^^^\n+LL |     rustc_peek(&x);\n+   |     ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:44:14\n+  --> $DIR/uninits-1.rs:44:5\n    |\n-LL |     unsafe { rustc_peek(&ret); }\n-   |              ^^^^^^^^^^^^^^^^\n+LL |     rustc_peek(&ret);\n+   |     ^^^^^^^^^^^^^^^^\n \n error: stop_after_dataflow ended compilation\n "}, {"sha": "c584ee74afb48418348996301a1097b27d105ebc", "filename": "src/test/ui/mir-dataflow/uninits-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.rs?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -11,12 +11,12 @@ struct S(i32);\n fn foo(x: &mut S) {\n     // `x` is initialized here, so maybe-uninit bit is 0.\n \n-    unsafe { rustc_peek(&x) }; //~ ERROR rustc_peek: bit not set\n+    rustc_peek(&x); //~ ERROR rustc_peek: bit not set\n \n     ::std::mem::drop(x);\n \n     // `x` definitely uninitialized here, so maybe-uninit bit is 1.\n-    unsafe { rustc_peek(&x) };\n+    rustc_peek(&x);\n }\n fn main() {\n     foo(&mut S(13));"}, {"sha": "0ef954e35a4d807fa4814805d1e745342aa5572f", "filename": "src/test/ui/mir-dataflow/uninits-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66fb778acc512213b8883101f275a7fa44c9b75d/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.stderr?ref=66fb778acc512213b8883101f275a7fa44c9b75d", "patch": "@@ -1,8 +1,8 @@\n error: rustc_peek: bit not set\n-  --> $DIR/uninits-2.rs:14:14\n+  --> $DIR/uninits-2.rs:14:5\n    |\n-LL |     unsafe { rustc_peek(&x) };\n-   |              ^^^^^^^^^^^^^^\n+LL |     rustc_peek(&x);\n+   |     ^^^^^^^^^^^^^^\n \n error: stop_after_dataflow ended compilation\n "}]}