{"sha": "95576b8ec40538fc311029dd838d2a22c0e9af7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NTc2YjhlYzQwNTM4ZmMzMTEwMjlkZDgzOGQyYTIyYzBlOWFmN2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-30T01:13:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-02T15:49:26Z"}, "message": "update unit tests", "tree": {"sha": "f020be7921415e50f681a9232d48f16c4fdb2e74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f020be7921415e50f681a9232d48f16c4fdb2e74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95576b8ec40538fc311029dd838d2a22c0e9af7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95576b8ec40538fc311029dd838d2a22c0e9af7f", "html_url": "https://github.com/rust-lang/rust/commit/95576b8ec40538fc311029dd838d2a22c0e9af7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95576b8ec40538fc311029dd838d2a22c0e9af7f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba5fac1a460de9936b85f9459668b0992f21f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba5fac1a460de9936b85f9459668b0992f21f06", "html_url": "https://github.com/rust-lang/rust/commit/2ba5fac1a460de9936b85f9459668b0992f21f06"}], "stats": {"total": 77, "additions": 38, "deletions": 39}, "files": [{"sha": "486e2ace0876a1b9196c5f409b814e3e710a9c65", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/95576b8ec40538fc311029dd838d2a22c0e9af7f/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95576b8ec40538fc311029dd838d2a22c0e9af7f/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=95576b8ec40538fc311029dd838d2a22c0e9af7f", "patch": "@@ -13,6 +13,7 @@ use self::Destination::*;\n use codemap::{self, COMMAND_LINE_SP, DUMMY_SP, Pos, Span, MultiSpan};\n use diagnostics;\n \n+use errors::check_old_skool;\n use errors::{Level, RenderSpan, CodeSuggestion, DiagnosticBuilder};\n use errors::RenderSpan::*;\n use errors::Level::*;\n@@ -59,10 +60,7 @@ impl<T: CoreEmitter> Emitter for T {\n     }\n \n     fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n-        let old_school = match ::std::env::var(\"RUST_NEW_ERROR_FORMAT\") {\n-            Ok(_) => false,\n-            Err(_) => true,\n-        };\n+        let old_school = check_old_skool();\n         let db_span = FullSpan(db.span.clone());\n         self.emit_message(&FullSpan(db.span.clone()),\n                           &db.message,\n@@ -198,10 +196,7 @@ impl EmitterWriter {\n                   registry: Option<diagnostics::registry::Registry>,\n                   code_map: Rc<codemap::CodeMap>)\n                   -> EmitterWriter {\n-        let old_school = match ::std::env::var(\"RUST_NEW_ERROR_FORMAT\") {\n-            Ok(_) => false,\n-            Err(_) => true,\n-        };\n+        let old_school = check_old_skool();\n         if color_config.use_color() {\n             let dst = Destination::from_stderr();\n             EmitterWriter { dst: dst,\n@@ -222,10 +217,7 @@ impl EmitterWriter {\n                registry: Option<diagnostics::registry::Registry>,\n                code_map: Rc<codemap::CodeMap>)\n                -> EmitterWriter {\n-        let old_school = match ::std::env::var(\"RUST_NEW_ERROR_FORMAT\") {\n-            Ok(_) => false,\n-            Err(_) => true,\n-        };\n+        let old_school = check_old_skool();\n         EmitterWriter { dst: Raw(dst),\n                         registry: registry,\n                         cm: code_map,\n@@ -454,10 +446,7 @@ fn print_diagnostic(dst: &mut Destination,\n                     code: Option<&str>)\n                     -> io::Result<()> {\n     if !topic.is_empty() {\n-        let old_school = match ::std::env::var(\"RUST_NEW_ERROR_FORMAT\") {\n-            Ok(_) => false,\n-            Err(_) => true,\n-        };\n+        let old_school = check_old_skool();\n         if !old_school {\n             write!(dst, \"{}: \", topic)?;\n         }"}, {"sha": "4ade537c8ce04778e8b3cb0259f6705ba43ed22d", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/95576b8ec40538fc311029dd838d2a22c0e9af7f/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95576b8ec40538fc311029dd838d2a22c0e9af7f/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=95576b8ec40538fc311029dd838d2a22c0e9af7f", "patch": "@@ -683,3 +683,20 @@ pub fn expect<T, M>(diag: &Handler, opt: Option<T>, msg: M) -> T where\n         None => diag.bug(&msg()),\n     }\n }\n+\n+/// True if we should use the old-skool error format style. This is\n+/// the default setting until the new errors are deemed stable enough\n+/// for general use.\n+///\n+/// FIXME(#33240)\n+#[cfg(not(test))]\n+fn check_old_skool() -> bool {\n+    use std::env;\n+    env::var(\"RUST_NEW_ERROR_FORMAT\").is_err()\n+}\n+\n+/// For unit tests, use the new format.\n+#[cfg(test)]\n+fn check_old_skool() -> bool {\n+    false\n+}"}, {"sha": "6c90bfd08186b19f4a80ae5464df3543b69aad6a", "filename": "src/libsyntax/errors/snippet/mod.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/95576b8ec40538fc311029dd838d2a22c0e9af7f/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95576b8ec40538fc311029dd838d2a22c0e9af7f/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs?ref=95576b8ec40538fc311029dd838d2a22c0e9af7f", "patch": "@@ -11,6 +11,7 @@\n // Code for annotating snippets.\n \n use codemap::{CharPos, CodeMap, FileMap, LineInfo, Span};\n+use errors::check_old_skool;\n use std::cmp;\n use std::rc::Rc;\n use std::mem;\n@@ -432,10 +433,8 @@ impl FileInfo {\n     }\n \n     fn render_file_lines(&self, codemap: &Rc<CodeMap>) -> Vec<RenderedLine> {\n-        let old_school = match ::std::env::var(\"RUST_NEW_ERROR_FORMAT\") {\n-            Ok(_) => false,\n-            Err(_) => true,\n-        };\n+        let old_school = check_old_skool();\n+\n         // As a first step, we elide any instance of more than one\n         // continuous unannotated line.\n \n@@ -525,10 +524,7 @@ impl FileInfo {\n     }\n \n     fn render_line(&self, line: &Line) -> Vec<RenderedLine> {\n-        let old_school = match ::std::env::var(\"RUST_NEW_ERROR_FORMAT\") {\n-            Ok(_) => false,\n-            Err(_) => true,\n-        };\n+        let old_school = check_old_skool();\n         let source_string = self.file.get_line(line.line_index)\n                                      .unwrap_or(\"\");\n         let source_kind = RenderedLineKind::SourceText {\n@@ -709,10 +705,7 @@ impl FileInfo {\n }\n \n fn prepend_prefixes(rendered_lines: &mut [RenderedLine]) {\n-    let old_school = match ::std::env::var(\"RUST_NEW_ERROR_FORMAT\") {\n-        Ok(_) => false,\n-        Err(_) => true,\n-    };\n+    let old_school = check_old_skool();\n     if old_school {\n         return;\n     }"}, {"sha": "569d11199190c42ea28db9ac891b8bacbb5b65ef", "filename": "src/libsyntax/errors/snippet/test.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/95576b8ec40538fc311029dd838d2a22c0e9af7f/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95576b8ec40538fc311029dd838d2a22c0e9af7f/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs?ref=95576b8ec40538fc311029dd838d2a22c0e9af7f", "patch": "@@ -105,7 +105,7 @@ fn foo() {\n \n     println!(\"text=\\n{}\", text);\n     assert_eq!(&text[..], &r#\"\n->>>> foo.rs\n+ ::: foo.rs\n 3 |>     vec.push(vec.pop().unwrap());\n   |>     ---      ---                - previous borrow ends here\n   |>     |        |\n@@ -180,7 +180,7 @@ fn bar() {\n     |>     |        |\n     |>     |        b\n     |>     a\n->>>>>> bar.rs\n+   ::: bar.rs\n 17  |>     vec.push();\n     |>     ---       - f\n     |>     |\n@@ -224,7 +224,7 @@ fn foo() {\n \n     println!(\"text=\\n{}\", text);\n     assert_eq!(&text[..], &r#\"\n->>>>>> foo.rs\n+   ::: foo.rs\n 3   |>     let name = find_id(&data, 22).unwrap();\n     |>                         ---- immutable borrow begins here\n ...\n@@ -263,7 +263,7 @@ fn foo() {\n \n     println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n     assert_eq!(&text[..], &r#\"\n->>>> foo.rs\n+ ::: foo.rs\n 3 |>     vec.push(vec.pop().unwrap());\n   |>     --------           ------ D\n   |>     ||\n@@ -299,7 +299,7 @@ fn foo() {\n \n     println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n     assert_eq!(&text[..], &r#\"\n->>>> foo.rs\n+ ::: foo.rs\n 3 |>     vec.push(vec.pop().unwrap());\n   |>     ---      ---                - previous borrow ends here\n   |>     |        |\n@@ -337,7 +337,7 @@ fn foo() {\n     let text: String = make_string(&lines);\n     println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n     assert_eq!(&text[..], &r#\"\n->>>>>> foo.rs\n+   ::: foo.rs\n 4   |>     let mut vec2 = vec;\n     |>                    --- `vec` moved here because it has type `collections::vec::Vec<i32>`\n ...\n@@ -373,7 +373,7 @@ fn foo() {\n     let text: String = make_string(&lines);\n     println!(\"text=&r#\\\"\\n{}\\n\\\"#[1..]\", text);\n     assert_eq!(text, &r#\"\n->>>> foo.rs\n+ ::: foo.rs\n 3 |>     let mut vec = vec![0, 1, 2];\n   |>             ---   ---\n 4 |>     let mut vec2 = vec;\n@@ -404,7 +404,7 @@ impl SomeTrait for () {\n     let text: String = make_string(&lines);\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n->>>> foo.rs\n+ ::: foo.rs\n 3 |>     fn foo(x: u32) {\n   |>     -\n \"#[1..]);\n@@ -433,7 +433,7 @@ fn span_overlap_label() {\n     let text: String = make_string(&lines);\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n->>>> foo.rs\n+ ::: foo.rs\n 2 |>     fn foo(x: u32) {\n   |>     --------------\n   |>     |      |\n@@ -467,7 +467,7 @@ fn span_overlap_label2() {\n     let text: String = make_string(&lines);\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n->>>> foo.rs\n+ ::: foo.rs\n 2 |>     fn foo(x: u32) {\n   |>     --------------\n   |>     |      |\n@@ -512,7 +512,7 @@ fn span_overlap_label3() {\n     let text: String = make_string(&lines);\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n->>>> foo.rs\n+ ::: foo.rs\n 3 |>        let closure = || {\n   |>                      - foo\n 4 |>            inner"}]}