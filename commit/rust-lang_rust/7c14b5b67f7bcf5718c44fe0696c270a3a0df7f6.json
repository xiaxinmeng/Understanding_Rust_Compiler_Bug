{"sha": "7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMTRiNWI2N2Y3YmNmNTcxOGM0NGZlMDY5NmMyNzBhM2EwZGY3ZjY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-11T20:57:48Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-11T20:57:48Z"}, "message": "Merge pull request #132 from birkenfeld/let_and_return\n\nNew lint: let and immediately return", "tree": {"sha": "ab62c1a3a011b6ad33e558a4e9da023bd4cdacce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab62c1a3a011b6ad33e558a4e9da023bd4cdacce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6", "html_url": "https://github.com/rust-lang/rust/commit/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d948705bf992a3e5de75637d2db5c30188df381", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d948705bf992a3e5de75637d2db5c30188df381", "html_url": "https://github.com/rust-lang/rust/commit/1d948705bf992a3e5de75637d2db5c30188df381"}, {"sha": "f6dc48fe3a0ec30b6db132b6848f6908f987af14", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6dc48fe3a0ec30b6db132b6848f6908f987af14", "html_url": "https://github.com/rust-lang/rust/commit/f6dc48fe3a0ec30b6db132b6848f6908f987af14"}], "stats": {"total": 219, "additions": 148, "deletions": 71}, "files": [{"sha": "1176841ca201cdff012bc561c733709fe07681a3", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6", "patch": "@@ -31,6 +31,7 @@ Lints included in this crate:\n  - `zero_width_space`: Warns on encountering a unicode zero-width space\n  - `string_add_assign`: Warns on `x = x + ..` where `x` is a `String` and suggests using `push_str(..)` instead.\n  - `needless_return`: Warns on using `return expr;` when a simple `expr` would suffice.\n+ - `let_and_return`: Warns on doing `let x = expr; x` at the end of a function.\n  - `option_unwrap_used`: Warns when `Option.unwrap()` is used, and suggests `.expect()`.\n  - `result_unwrap_used`: Warns when `Result.unwrap()` is used (silent by default).\n  - `modulo_one`: Warns on taking a number modulo 1, which always has a result of 0."}, {"sha": "c5469c19858071c971d26d88bce00d1ecdc4d2e0", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6", "patch": "@@ -30,6 +30,7 @@ pub mod unicode;\n pub mod utils;\n pub mod strings;\n pub mod methods;\n+pub mod returns;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -55,7 +56,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box misc::ModuloOne as LintPassObject);\n     reg.register_lint_pass(box unicode::Unicode as LintPassObject);\n     reg.register_lint_pass(box strings::StringAdd as LintPassObject);\n-    reg.register_lint_pass(box misc::NeedlessReturn as LintPassObject);\n+    reg.register_lint_pass(box returns::ReturnPass as LintPassObject);\n     reg.register_lint_pass(box methods::MethodsPass as LintPassObject);\n \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n@@ -77,7 +78,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            collapsible_if::COLLAPSIBLE_IF,\n                                            unicode::ZERO_WIDTH_SPACE,\n                                            strings::STRING_ADD_ASSIGN,\n-                                           misc::NEEDLESS_RETURN,\n+                                           returns::NEEDLESS_RETURN,\n                                            misc::MODULO_ONE,\n                                            methods::OPTION_UNWRAP_USED,\n                                            methods::RESULT_UNWRAP_USED,"}, {"sha": "934e8a7fb77e14a982f1c773a84c842726719637", "filename": "src/misc.rs", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6", "patch": "@@ -270,75 +270,6 @@ fn is_str_arg(cx: &Context, args: &[P<Expr>]) -> bool {\n         walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty { true } else { false }\n }\n \n-declare_lint!(pub NEEDLESS_RETURN, Warn,\n-              \"Warn on using a return statement where an expression would be enough\");\n-\n-#[derive(Copy,Clone)]\n-pub struct NeedlessReturn;\n-\n-impl NeedlessReturn {\n-    // Check the final stmt or expr in a block for unnecessary return.\n-    fn check_block_return(&mut self, cx: &Context, block: &Block) {\n-        if let Some(ref expr) = block.expr {\n-            self.check_final_expr(cx, expr);\n-        } else if let Some(stmt) = block.stmts.last() {\n-            if let StmtSemi(ref expr, _) = stmt.node {\n-                if let ExprRet(Some(ref inner)) = expr.node {\n-                    self.emit_lint(cx, (expr.span, inner.span));\n-                }\n-            }\n-        }\n-    }\n-\n-    // Check a the final expression in a block if it's a return.\n-    fn check_final_expr(&mut self, cx: &Context, expr: &Expr) {\n-        match expr.node {\n-            // simple return is always \"bad\"\n-            ExprRet(Some(ref inner)) => {\n-                self.emit_lint(cx, (expr.span, inner.span));\n-            }\n-            // a whole block? check it!\n-            ExprBlock(ref block) => {\n-                self.check_block_return(cx, block);\n-            }\n-            // an if/if let expr, check both exprs\n-            // note, if without else is going to be a type checking error anyways\n-            // (except for unit type functions) so we don't match it\n-            ExprIf(_, ref ifblock, Some(ref elsexpr)) |\n-            ExprIfLet(_, _, ref ifblock, Some(ref elsexpr)) => {\n-                self.check_block_return(cx, ifblock);\n-                self.check_final_expr(cx, elsexpr);\n-            }\n-            // a match expr, check all arms\n-            ExprMatch(_, ref arms, _) => {\n-                for arm in arms {\n-                    self.check_final_expr(cx, &*arm.body);\n-                }\n-            }\n-            _ => { }\n-        }\n-    }\n-\n-    fn emit_lint(&mut self, cx: &Context, spans: (Span, Span)) {\n-        span_lint(cx, NEEDLESS_RETURN, spans.0, &format!(\n-            \"unneeded return statement. Consider using {} \\\n-             without the trailing semicolon\",\n-            snippet(cx, spans.1, \"..\")))\n-    }\n-}\n-\n-impl LintPass for NeedlessReturn {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_RETURN)\n-    }\n-\n-    fn check_fn(&mut self, cx: &Context, _: FnKind, _: &FnDecl,\n-                block: &Block, _: Span, _: ast::NodeId) {\n-        self.check_block_return(cx, block);\n-    }\n-}\n-\n-\n declare_lint!(pub MODULO_ONE, Warn, \"Warn on expressions that include % 1, which is always 0\");\n \n #[derive(Copy,Clone)]"}, {"sha": "9bfc99972c9698e80c24c72e901e25e9c81c94ee", "filename": "src/returns.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6", "patch": "@@ -0,0 +1,110 @@\n+use syntax::ast;\n+use syntax::ast::*;\n+use syntax::codemap::{Span, Spanned};\n+use syntax::visit::FnKind;\n+use rustc::lint::{Context, LintPass, LintArray, Level};\n+\n+use utils::{span_lint, snippet, match_path};\n+\n+declare_lint!(pub NEEDLESS_RETURN, Warn,\n+              \"Warn on using a return statement where an expression would be enough\");\n+declare_lint!(pub LET_AND_RETURN, Warn,\n+              \"Warn on creating a let-binding and then immediately returning it\");\n+\n+#[derive(Copy,Clone)]\n+pub struct ReturnPass;\n+\n+impl ReturnPass {\n+    // Check the final stmt or expr in a block for unnecessary return.\n+    fn check_block_return(&mut self, cx: &Context, block: &Block) {\n+        if let Some(ref expr) = block.expr {\n+            self.check_final_expr(cx, expr);\n+        } else if let Some(stmt) = block.stmts.last() {\n+            if let StmtSemi(ref expr, _) = stmt.node {\n+                if let ExprRet(Some(ref inner)) = expr.node {\n+                    self.emit_return_lint(cx, (expr.span, inner.span));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Check a the final expression in a block if it's a return.\n+    fn check_final_expr(&mut self, cx: &Context, expr: &Expr) {\n+        match expr.node {\n+            // simple return is always \"bad\"\n+            ExprRet(Some(ref inner)) => {\n+                self.emit_return_lint(cx, (expr.span, inner.span));\n+            }\n+            // a whole block? check it!\n+            ExprBlock(ref block) => {\n+                self.check_block_return(cx, block);\n+            }\n+            // an if/if let expr, check both exprs\n+            // note, if without else is going to be a type checking error anyways\n+            // (except for unit type functions) so we don't match it\n+            ExprIf(_, ref ifblock, Some(ref elsexpr)) |\n+            ExprIfLet(_, _, ref ifblock, Some(ref elsexpr)) => {\n+                self.check_block_return(cx, ifblock);\n+                self.check_final_expr(cx, elsexpr);\n+            }\n+            // a match expr, check all arms\n+            ExprMatch(_, ref arms, _) => {\n+                for arm in arms {\n+                    self.check_final_expr(cx, &*arm.body);\n+                }\n+            }\n+            _ => { }\n+        }\n+    }\n+\n+    fn emit_return_lint(&mut self, cx: &Context, spans: (Span, Span)) {\n+        span_lint(cx, NEEDLESS_RETURN, spans.0, &format!(\n+            \"unneeded return statement. Consider using {} \\\n+             without the trailing semicolon\",\n+            snippet(cx, spans.1, \"..\")))\n+    }\n+\n+    // Check for \"let x = EXPR; x\"\n+    fn check_let_return(&mut self, cx: &Context, block: &Block) {\n+        // we need both a let-binding stmt and an expr\n+        if let Some(stmt) = block.stmts.last() {\n+            if let StmtDecl(ref decl, _) = stmt.node {\n+                if let DeclLocal(ref local) = decl.node {\n+                    if let Some(ref initexpr) = local.init {\n+                        if let PatIdent(_, Spanned { node: id, .. }, _) = local.pat.node {\n+                            if let Some(ref retexpr) = block.expr {\n+                                if let ExprPath(_, ref path) = retexpr.node {\n+                                    if match_path(path, &[&*id.name.as_str()]) {\n+                                        self.emit_let_lint(cx, retexpr.span, initexpr.span);\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    fn emit_let_lint(&mut self, cx: &Context, lint_span: Span, note_span: Span) {\n+        span_lint(cx, LET_AND_RETURN, lint_span,\n+                  \"returning the result of a let binding. \\\n+                   Consider returning the expression directly.\");\n+        if cx.current_level(LET_AND_RETURN) != Level::Allow {\n+            cx.sess().span_note(note_span,\n+                                \"this expression can be directly returned\");\n+        }\n+    }\n+}\n+\n+impl LintPass for ReturnPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NEEDLESS_RETURN, LET_AND_RETURN)\n+    }\n+\n+    fn check_fn(&mut self, cx: &Context, _: FnKind, _: &FnDecl,\n+                block: &Block, _: Span, _: ast::NodeId) {\n+        self.check_block_return(cx, block);\n+        self.check_let_return(cx, block);\n+    }\n+}"}, {"sha": "8ea4653ef0f2963b93a963baf922084d875347d8", "filename": "tests/compile-fail/let_return.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6/tests%2Fcompile-fail%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6/tests%2Fcompile-fail%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flet_return.rs?ref=7c14b5b67f7bcf5718c44fe0696c270a3a0df7f6", "patch": "@@ -0,0 +1,34 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(let_and_return)]\n+\n+fn test() -> i32 {\n+    let _y = 0; // no warning\n+    let x = 5;   //~NOTE\n+    x            //~ERROR:\n+}\n+\n+fn test_nowarn_1() -> i32 {\n+    let mut x = 5;\n+    x += 1;\n+    x\n+}\n+\n+fn test_nowarn_2() -> i32 {\n+    let x = 5;\n+    x + 1\n+}\n+\n+fn test_nowarn_3() -> (i32, i32) {\n+    // this should technically warn, but we do not compare complex patterns\n+    let (x, y) = (5, 9);\n+    (x, y)\n+}\n+\n+fn main() {\n+    test();\n+    test_nowarn_1();\n+    test_nowarn_2();\n+    test_nowarn_3();\n+}"}]}