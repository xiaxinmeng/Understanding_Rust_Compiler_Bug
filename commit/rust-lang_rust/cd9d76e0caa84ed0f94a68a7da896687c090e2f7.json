{"sha": "cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "node_id": "C_kwDOAAsO6NoAKGNkOWQ3NmUwY2FhODRlZDBmOTRhNjhhN2RhODk2Njg3YzA5MGUyZjc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-20T14:24:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-20T14:24:37Z"}, "message": "internal: Store function param names in ItemTree", "tree": {"sha": "74a95f688decfca06fae40b5951ac8b3cffff7fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a95f688decfca06fae40b5951ac8b3cffff7fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "html_url": "https://github.com/rust-lang/rust/commit/cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f609efff8762abe66a8418d926a157b5299e457c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f609efff8762abe66a8418d926a157b5299e457c", "html_url": "https://github.com/rust-lang/rust/commit/f609efff8762abe66a8418d926a157b5299e457c"}], "stats": {"total": 153, "additions": 61, "deletions": 92}, "files": [{"sha": "46815cff86496b52c4c7397096c9776a8f647cce", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "patch": "@@ -12,10 +12,7 @@ use hir_ty::{\n     },\n     Interner, TraitRefExt, WhereClause,\n };\n-use syntax::{\n-    ast::{self, HasName},\n-    SmolStr,\n-};\n+use syntax::SmolStr;\n \n use crate::{\n     Adt, Const, ConstParam, Enum, Field, Function, GenericParam, HasCrate, HasVisibility,\n@@ -69,7 +66,7 @@ impl HirDisplay for Function {\n         };\n \n         let mut first = true;\n-        for (param, type_ref) in self.assoc_fn_params(f.db).into_iter().zip(&data.params) {\n+        for (name, type_ref) in &data.params {\n             if !first {\n                 write!(f, \", \")?;\n             } else {\n@@ -79,11 +76,9 @@ impl HirDisplay for Function {\n                     continue;\n                 }\n             }\n-            match param.pattern_source(f.db) {\n-                Some(ast::Pat::IdentPat(p)) if p.name().is_some() => {\n-                    write!(f, \"{}: \", p.name().unwrap())?\n-                }\n-                _ => write!(f, \"_: \")?,\n+            match name {\n+                Some(name) => write!(f, \"{}: \", name)?,\n+                None => write!(f, \"_: \")?,\n             }\n             // FIXME: Use resolved `param.ty` or raw `type_ref`?\n             // The former will ignore lifetime arguments currently."}, {"sha": "b57f49690ac04713d5cd1973d1589de1553e1fc0", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "patch": "@@ -1343,7 +1343,7 @@ impl Function {\n             .params\n             .iter()\n             .enumerate()\n-            .map(|(idx, type_ref)| {\n+            .map(|(idx, (_, type_ref))| {\n                 let ty = Type { krate, env: environment.clone(), ty: ctx.lower_ty(type_ref) };\n                 Param { func: self, ty, idx }\n             })\n@@ -1421,6 +1421,10 @@ impl Param {\n         &self.ty\n     }\n \n+    pub fn name(&self, db: &dyn HirDatabase) -> Option<Name> {\n+        db.function_data(self.func.id).params[self.idx].0.clone()\n+    }\n+\n     pub fn as_local(&self, db: &dyn HirDatabase) -> Local {\n         let parent = DefWithBodyId::FunctionId(self.func.into());\n         let body = db.body(parent);\n@@ -1454,7 +1458,7 @@ impl SelfParam {\n         func_data\n             .params\n             .first()\n-            .map(|param| match &**param {\n+            .map(|(_, param)| match &**param {\n                 TypeRef::Reference(.., mutability) => match mutability {\n                     hir_def::type_ref::Mutability::Shared => Access::Shared,\n                     hir_def::type_ref::Mutability::Mut => Access::Exclusive,"}, {"sha": "aa2844461b6756bb92080f21c7715fc497629cda", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "patch": "@@ -20,7 +20,7 @@ use crate::{\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct FunctionData {\n     pub name: Name,\n-    pub params: Vec<Interned<TypeRef>>,\n+    pub params: Vec<(Option<Name>, Interned<TypeRef>)>,\n     pub ret_type: Interned<TypeRef>,\n     pub async_ret_type: Option<Interned<TypeRef>>,\n     pub attrs: Attrs,\n@@ -72,7 +72,7 @@ impl FunctionData {\n             params: enabled_params\n                 .clone()\n                 .filter_map(|id| match &item_tree[id] {\n-                    Param::Normal(ty) => Some(ty.clone()),\n+                    Param::Normal(name, ty) => Some((name.clone(), ty.clone())),\n                     Param::Varargs => None,\n                 })\n                 .collect(),"}, {"sha": "c4bd5b39c5bd5280ead4c832a9e320e7a9e47539", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "patch": "@@ -113,7 +113,7 @@ impl GenericParams {\n                 // Don't create an `Expander` nor call `loc.source(db)` if not needed since this\n                 // causes a reparse after the `ItemTree` has been created.\n                 let mut expander = Lazy::new(|| Expander::new(db, loc.source(db).file_id, module));\n-                for param in &func_data.params {\n+                for (_, param) in &func_data.params {\n                     generic_params.fill_implicit_impl_trait_args(db, &mut expander, param);\n                 }\n "}, {"sha": "aafda49693447dffea690a1215c72ac13ed82ae9", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "patch": "@@ -598,7 +598,7 @@ pub struct Function {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Param {\n-    Normal(Interned<TypeRef>),\n+    Normal(Option<Name>, Interned<TypeRef>),\n     Varargs,\n }\n "}, {"sha": "acc26bcf6338e2f053345c5bbe53720f966d8b08", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "patch": "@@ -269,7 +269,7 @@ impl<'a> Ctx<'a> {\n                     }\n                 };\n                 let ty = Interned::new(self_type);\n-                let idx = self.data().params.alloc(Param::Normal(ty));\n+                let idx = self.data().params.alloc(Param::Normal(None, ty));\n                 self.add_attrs(idx.into(), RawAttrs::new(self.db, &self_param, &self.hygiene));\n                 has_self_param = true;\n             }\n@@ -279,7 +279,19 @@ impl<'a> Ctx<'a> {\n                     None => {\n                         let type_ref = TypeRef::from_ast_opt(&self.body_ctx, param.ty());\n                         let ty = Interned::new(type_ref);\n-                        self.data().params.alloc(Param::Normal(ty))\n+                        let mut pat = param.pat();\n+                        // FIXME: This really shouldn't be here, in fact FunctionData/ItemTree's function shouldn't know about\n+                        // pattern names at all\n+                        let name = loop {\n+                            match pat {\n+                                Some(ast::Pat::RefPat(ref_pat)) => pat = ref_pat.pat(),\n+                                Some(ast::Pat::IdentPat(ident)) => {\n+                                    break ident.name().map(|it| it.as_name())\n+                                }\n+                                _ => break None,\n+                            }\n+                        };\n+                        self.data().params.alloc(Param::Normal(name, ty))\n                     }\n                 };\n                 self.add_attrs(idx.into(), RawAttrs::new(self.db, &param, &self.hygiene));"}, {"sha": "eaaff5a21f7bf5447ec05e3d2929d484491af79f", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "patch": "@@ -257,8 +257,11 @@ impl<'a> Printer<'a> {\n                         for param in params.clone() {\n                             this.print_attrs_of(param);\n                             match &this.tree[param] {\n-                                Param::Normal(ty) => {\n-                                    w!(this, \"_: \");\n+                                Param::Normal(name, ty) => {\n+                                    match name {\n+                                        Some(name) => w!(this, \"{}: \", name),\n+                                        None => w!(this, \"_: \"),\n+                                    }\n                                     this.print_type_ref(ty);\n                                     wln!(this, \",\");\n                                 }"}, {"sha": "3022291d9fe6238a834e7c9e0400bb7cc8ce20f3", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "patch": "@@ -697,7 +697,7 @@ impl<'a> InferenceContext<'a> {\n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n             .with_impl_trait_mode(ImplTraitLoweringMode::Param);\n         let param_tys =\n-            data.params.iter().map(|type_ref| ctx.lower_ty(type_ref)).collect::<Vec<_>>();\n+            data.params.iter().map(|(_, type_ref)| ctx.lower_ty(type_ref)).collect::<Vec<_>>();\n         for (ty, pat) in param_tys.into_iter().zip(body.params.iter()) {\n             let ty = self.insert_type_vars(ty);\n             let ty = self.normalize_associated_types_in(ty);"}, {"sha": "a450f6c75ccc5e0c2a610003be66a8d7e5737f1b", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "patch": "@@ -1278,7 +1278,7 @@ fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {\n     let ctx_params = TyLoweringContext::new(db, &resolver)\n         .with_impl_trait_mode(ImplTraitLoweringMode::Variable)\n         .with_type_param_mode(TypeParamLoweringMode::Variable);\n-    let params = data.params.iter().map(|tr| ctx_params.lower_ty(tr)).collect::<Vec<_>>();\n+    let params = data.params.iter().map(|(_, tr)| ctx_params.lower_ty(tr)).collect::<Vec<_>>();\n     let ctx_ret = TyLoweringContext::new(db, &resolver)\n         .with_impl_trait_mode(ImplTraitLoweringMode::Opaque)\n         .with_type_param_mode(TypeParamLoweringMode::Variable);"}, {"sha": "8f8bd1dfcda4e63fbbf487d8487ba70c60ea43ff", "filename": "crates/ide_completion/src/render/builder_ext.rs", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "patch": "@@ -1,13 +1,12 @@\n //! Extensions for `Builder` structure required for item rendering.\n \n use itertools::Itertools;\n-use syntax::ast::{self, HasName};\n \n use crate::{context::PathKind, item::Builder, patterns::ImmediateLocation, CompletionContext};\n \n #[derive(Debug)]\n pub(super) enum Params {\n-    Named(Option<ast::SelfParam>, Vec<(ast::Param, hir::Param)>),\n+    Named(Option<hir::SelfParam>, Vec<hir::Param>),\n     Anonymous(usize),\n }\n \n@@ -80,44 +79,22 @@ impl Builder {\n                     let offset = if self_param.is_some() { 2 } else { 1 };\n                     let function_params_snippet = params.iter().enumerate().format_with(\n                         \", \",\n-                        |(index, (param_source, param)), f| {\n-                            let name;\n-                            let text;\n-                            let n = (|| {\n-                                let mut pat = param_source.pat()?;\n-                                loop {\n-                                    match pat {\n-                                        ast::Pat::IdentPat(pat) => break pat.name(),\n-                                        ast::Pat::RefPat(it) => pat = it.pat()?,\n-                                        _ => return None,\n-                                    }\n-                                }\n-                            })();\n-                            let (ref_, name) = match n {\n-                                Some(n) => {\n-                                    name = n;\n-                                    text = name.text();\n-                                    let text = text.as_str().trim_start_matches('_');\n-                                    let ref_ = ref_of_param(ctx, text, param.ty());\n-                                    (ref_, text)\n-                                }\n-                                None => (\"\", \"_\"),\n-                            };\n-\n-                            f(&format_args!(\"${{{}:{}{}}}\", index + offset, ref_, name))\n+                        |(index, param), f| match param.name(ctx.db) {\n+                            Some(n) => {\n+                                let smol_str = n.to_smol_str();\n+                                let text = smol_str.as_str().trim_start_matches('_');\n+                                let ref_ = ref_of_param(ctx, text, param.ty());\n+                                f(&format_args!(\"${{{}:{}{}}}\", index + offset, ref_, text))\n+                            }\n+                            None => f(&format_args!(\"${{{}:_}}\", index + offset,)),\n                         },\n                     );\n                     match self_param {\n                         Some(self_param) => {\n-                            let prefix = match self_param.kind() {\n-                                ast::SelfParamKind::Owned => \"\",\n-                                ast::SelfParamKind::Ref => \"&\",\n-                                ast::SelfParamKind::MutRef => \"&mut \",\n-                            };\n                             format!(\n-                                \"{}(${{1:{}self}}{}{})$0\",\n+                                \"{}(${{1:{}}}{}{})$0\",\n                                 name,\n-                                prefix,\n+                                self_param.display(ctx.db),\n                                 if params.is_empty() { \"\" } else { \", \" },\n                                 function_params_snippet\n                             )"}, {"sha": "918210f2f36869147ff80eaa8b76cd7c274a7bbd", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 14, "deletions": 36, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d76e0caa84ed0f94a68a7da896687c090e2f7/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=cd9d76e0caa84ed0f94a68a7da896687c090e2f7", "patch": "@@ -1,10 +1,9 @@\n //! Renderer for function calls.\n \n-use hir::{AsAssocItem, HasSource, HirDisplay};\n+use hir::{AsAssocItem, HirDisplay};\n use ide_db::SymbolKind;\n use itertools::Itertools;\n use stdx::format_to;\n-use syntax::ast;\n \n use crate::{\n     item::{CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit},\n@@ -41,21 +40,6 @@ struct FunctionRender<'a> {\n     name: hir::Name,\n     receiver: Option<hir::Name>,\n     func: hir::Function,\n-    /// NB: having `ast::Fn` here might or might not be a good idea. The problem\n-    /// with it is that, to get an `ast::`, you want to parse the corresponding\n-    /// source file. So, when flyimport completions suggest a bunch of\n-    /// functions, we spend quite some time parsing many files.\n-    ///\n-    /// We need ast because we want to access parameter names (patterns). We can\n-    /// add them to the hir of the function itself, but parameter names are not\n-    /// something hir cares otherwise.\n-    ///\n-    /// Alternatively we can reconstruct params from the function body, but that\n-    /// would require parsing anyway.\n-    ///\n-    /// It seems that just using `ast` is the best choice -- most of parses\n-    /// should be cached anyway.\n-    param_list: Option<ast::ParamList>,\n     is_method: bool,\n }\n \n@@ -68,9 +52,8 @@ impl<'a> FunctionRender<'a> {\n         is_method: bool,\n     ) -> Option<FunctionRender<'a>> {\n         let name = local_name.unwrap_or_else(|| fn_.name(ctx.db()));\n-        let param_list = fn_.source(ctx.db())?.value.param_list();\n \n-        Some(FunctionRender { ctx, name, receiver, func: fn_, param_list, is_method })\n+        Some(FunctionRender { ctx, name, receiver, func: fn_, is_method })\n     }\n \n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n@@ -151,23 +134,18 @@ impl<'a> FunctionRender<'a> {\n     }\n \n     fn params(&self) -> Params {\n-        let ast_params = match &self.param_list {\n-            Some(it) => it,\n-            None => return Params::Named(None, Vec::new()),\n-        };\n-        let params = ast_params.params();\n-\n-        let (params, self_param) = if self.ctx.completion.has_dot_receiver()\n-            || self.receiver.is_some()\n-        {\n-            (params.zip(self.func.method_params(self.ctx.db()).unwrap_or_default()).collect(), None)\n-        } else {\n-            let mut assoc_params = self.func.assoc_fn_params(self.ctx.db());\n-            if self.func.self_param(self.ctx.db()).is_some() {\n-                assoc_params.remove(0);\n-            }\n-            (params.zip(assoc_params).collect(), ast_params.self_param())\n-        };\n+        let (params, self_param) =\n+            if self.ctx.completion.has_dot_receiver() || self.receiver.is_some() {\n+                (self.func.method_params(self.ctx.db()).unwrap_or_default(), None)\n+            } else {\n+                let self_param = self.func.self_param(self.ctx.db());\n+\n+                let mut assoc_params = self.func.assoc_fn_params(self.ctx.db());\n+                if self_param.is_some() {\n+                    assoc_params.remove(0);\n+                }\n+                (assoc_params, self_param)\n+            };\n \n         Params::Named(self_param, params)\n     }"}]}