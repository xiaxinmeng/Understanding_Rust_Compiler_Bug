{"sha": "3215403dde605b310826d8985261d8eeed3ea983", "node_id": "C_kwDOAAsO6NoAKDMyMTU0MDNkZGU2MDViMzEwODI2ZDg5ODUyNjFkOGVlZWQzZWE5ODM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-10-07T23:38:33Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-10-08T08:55:48Z"}, "message": "tests", "tree": {"sha": "d2d2c4de18564962b63da6eed9c466e956d82792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d2c4de18564962b63da6eed9c466e956d82792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3215403dde605b310826d8985261d8eeed3ea983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3215403dde605b310826d8985261d8eeed3ea983", "html_url": "https://github.com/rust-lang/rust/commit/3215403dde605b310826d8985261d8eeed3ea983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3215403dde605b310826d8985261d8eeed3ea983/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbf91532a7bfb2f2ce23067b13cc44659f7883d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf91532a7bfb2f2ce23067b13cc44659f7883d2", "html_url": "https://github.com/rust-lang/rust/commit/cbf91532a7bfb2f2ce23067b13cc44659f7883d2"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "ce8173169b1b3aa2f25510f9b06824d299442e78", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215403dde605b310826d8985261d8eeed3ea983/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3215403dde605b310826d8985261d8eeed3ea983/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr?ref=3215403dde605b310826d8985261d8eeed3ea983", "patch": "@@ -6,7 +6,6 @@ LL |     let _result = &Some(42).as_deref();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: Deref`\n-           `<{integer} as Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "e4e9705b07db5e59cf61369e83427b85590f279c", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3215403dde605b310826d8985261d8eeed3ea983/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3215403dde605b310826d8985261d8eeed3ea983/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr?ref=3215403dde605b310826d8985261d8eeed3ea983", "patch": "@@ -6,7 +6,7 @@ LL |     let _result = &mut Some(42).as_deref_mut();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: DerefMut`\n-           `<{integer} as Deref>::Target = _`\n+           `{integer}: Deref`\n \n error: aborting due to previous error\n "}, {"sha": "a3b9ac6775805243dd4a23147146762d6907fac9", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215403dde605b310826d8985261d8eeed3ea983/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3215403dde605b310826d8985261d8eeed3ea983/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr?ref=3215403dde605b310826d8985261d8eeed3ea983", "patch": "@@ -6,7 +6,6 @@ LL |     let _result = &Ok(42).as_deref();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: Deref`\n-           `<{integer} as Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "98a7091dd0583c8a0f27efae8e7ecac5483e59e8", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3215403dde605b310826d8985261d8eeed3ea983/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3215403dde605b310826d8985261d8eeed3ea983/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=3215403dde605b310826d8985261d8eeed3ea983", "patch": "@@ -6,7 +6,7 @@ LL |     let _result = &mut Ok(42).as_deref_mut();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: DerefMut`\n-           `<{integer} as Deref>::Target = _`\n+           `{integer}: Deref`\n \n error: aborting due to previous error\n "}, {"sha": "337ec307ef3261ea57afc3c4f45dee857cee263a", "filename": "src/test/ui/resolve/issue-85671.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3215403dde605b310826d8985261d8eeed3ea983/src%2Ftest%2Fui%2Fresolve%2Fissue-85671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215403dde605b310826d8985261d8eeed3ea983/src%2Ftest%2Fui%2Fresolve%2Fissue-85671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-85671.rs?ref=3215403dde605b310826d8985261d8eeed3ea983", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+\n+// Some trait with a function that returns a slice:\n+pub trait AsSlice {\n+    type Element;\n+    fn as_slice(&self) -> &[Self::Element];\n+}\n+\n+// Some type\n+pub struct A<Cont>(Cont);\n+\n+// Here we say that if A wraps a slice, then it implements AsSlice\n+impl<'a, Element> AsSlice for A<&'a [Element]> {\n+    type Element = Element;\n+    fn as_slice(&self) -> &[Self::Element] {\n+        self.0\n+    }\n+}\n+\n+impl<Cont> A<Cont> {\n+    // We want this function to work\n+    pub fn failing<Coef>(&self)\n+    where\n+        Self: AsSlice<Element = Coef>,\n+    {\n+        self.as_ref_a().as_ref_a();\n+    }\n+\n+    pub fn as_ref_a<Coef>(&self) -> A<&[<Self as AsSlice>::Element]>\n+    where\n+        Self: AsSlice<Element = Coef>,\n+    {\n+        A(self.as_slice())\n+    }\n+}\n+\n+fn main() {}"}]}