{"sha": "d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2M2Y4MzQwYTVlOTQ3Y2RmNmIzYWQzNGQzNjgzZjJhZTllNWNmODQ=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-14T01:15:56Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-15T16:26:52Z"}, "message": "Properly ref counting to fix valgrind issues on linux.", "tree": {"sha": "d125d87449992eeed18954fca6052c7f7e1fb543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d125d87449992eeed18954fca6052c7f7e1fb543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84", "html_url": "https://github.com/rust-lang/rust/commit/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/comments", "author": null, "committer": null, "parents": [{"sha": "aa0a51a7f56c4c343b296492ffaa2bc296c0b224", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0a51a7f56c4c343b296492ffaa2bc296c0b224", "html_url": "https://github.com/rust-lang/rust/commit/aa0a51a7f56c4c343b296492ffaa2bc296c0b224"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "9a4f1cf52e156776e279502ea011722bc1a3c65e", "filename": "src/lib/task.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84", "patch": "@@ -16,6 +16,7 @@ native \"rust\" mod rustrt {\n     fn set_min_stack(stack_size: uint);\n \n     fn new_task() -> task_id;\n+    fn drop_task(id : task_id);\n     fn get_task_pointer(id : task_id) -> *rust_task;\n     fn get_task_context(id : task_id) -> *x86_registers;\n     fn start_task(id : task_id);\n@@ -114,6 +115,11 @@ fn _spawn(thunk : fn() -> ()) -> task_id {\n \n     rustrt::leak(thunk);\n \n+    // Drop twice because get_task_context and get_task_pounter both bump the\n+    // ref count and expect us to free it.\n+    rustrt::drop_task(id);\n+    rustrt::drop_task(id);\n+\n     ret id;\n }\n "}, {"sha": "7b38f65caafad3b22933e80452b0d2243f4cd130", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84", "patch": "@@ -4,7 +4,7 @@\n // NB: please do not commit code with this uncommented. It's\n // hugely expensive and should only be used as a last resort.\n //\n-#define TRACK_ALLOCATIONS\n+// #define TRACK_ALLOCATIONS\n \n #define MAGIC 0xbadc0ffe\n "}, {"sha": "cc2f86da4b28601fe3edf08784b232994f0a6666", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84", "patch": "@@ -108,6 +108,8 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     }\n \n     root_task->start(main_fn, (uintptr_t)args->args);\n+    root_task->deref();\n+    root_task = NULL;\n \n     int ret = kernel->start_task_threads();\n     delete args;"}, {"sha": "ef236247396c0368a007bd3eeb2286295ec6f067", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84", "patch": "@@ -303,8 +303,10 @@ task_join(rust_task *task, rust_task_id tid) {\n         join_task->lock.unlock();\n     }\n     if (!join_task->failed) {\n+        join_task->deref();\n         return 0;\n     } else {\n+        join_task->deref();\n         return -1;\n     }\n }\n@@ -728,16 +730,27 @@ get_task_context(rust_task *task, rust_task_id id) {\n     return regs;\n }\n \n+extern \"C\" CDECL void\n+drop_task(rust_task *task, rust_task_id tid) {\n+    rust_task *target = task->kernel->get_task_by_id(tid);\n+    if(target) {\n+        target->deref();\n+        // Deref twice because get_task_by_id does once.\n+        target->deref();\n+    }\n+}\n+\n extern \"C\" CDECL rust_task *\n get_task_pointer(rust_task *task, rust_task_id id) {\n-    return task->kernel->get_task_by_id(id);\n+    rust_task *t = task->kernel->get_task_by_id(id);\n+    return t;\n }\n \n extern \"C\" CDECL void\n start_task(rust_task *task, rust_task_id id) {\n     rust_task * target = task->kernel->get_task_by_id(id);\n-\n     target->start();\n+    target->deref();\n }\n \n extern \"C\" void *task_trampoline asm(\"task_trampoline\");\n@@ -754,6 +767,7 @@ migrate_alloc(rust_task *task, void *alloc, rust_task_id tid) {\n     if(target) {\n         task->local_region.release_alloc(alloc);\n         target->local_region.claim_alloc(alloc);\n+        target->deref();\n     }\n     else {\n         // We couldn't find the target. Maybe we should just free?\n@@ -849,6 +863,7 @@ chan_id_send(rust_task *task, type_desc *t, rust_task_id target_task_id,\n         if(port) {\n             port->remote_chan->send(sptr);\n         }\n+        target_task->deref();\n     }\n }\n "}, {"sha": "c11a5b69b730c13ccad2bcf424b1e728a742d9f5", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84", "patch": "@@ -160,6 +160,7 @@ rust_kernel::get_task_by_id(rust_task_id id) {\n     rust_task *task = NULL;\n     // get leaves task unchanged if not found.\n     task_table.get(id, &task);\n+    if(task) task->ref();\n     return task;\n }\n "}, {"sha": "dc406a83ea02a8e32a9f0cae830cab892b28c448", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84", "patch": "@@ -133,7 +133,9 @@ upcall_clone_chan(rust_task *task, rust_task_id tid,\n     // FIXME: This should be removed.\n     LOG_UPCALL_ENTRY(task);\n     rust_task *target = task->kernel->get_task_by_id(tid);\n-    return chan->clone(target);\n+    rust_chan *c = chan->clone(target);\n+    target->deref();\n+    return c;\n }\n \n extern \"C\" CDECL rust_task *\n@@ -197,6 +199,7 @@ upcall_kill(rust_task *task, rust_task_id tid) {\n     LOG_UPCALL_ENTRY(task);\n     rust_task *target = task->kernel->get_task_by_id(tid);\n     target->kill();\n+    target->deref();\n }\n \n /**\n@@ -315,7 +318,9 @@ extern \"C\" CDECL rust_str *\n upcall_dup_str(rust_task *task, rust_task_id tid, rust_str *str) {\n     LOG_UPCALL_ENTRY(task);\n     rust_task *target = task->kernel->get_task_by_id(tid);\n-    return make_str(target, (char const *)str->data, str->fill);\n+    rust_str *s = make_str(target, (char const *)str->data, str->fill);\n+    target->deref();\n+    return s;\n }\n \n extern \"C\" CDECL rust_vec *\n@@ -478,27 +483,25 @@ upcall_new_task(rust_task *spawner, rust_vec *name) {\n     LOG_UPCALL_ENTRY(spawner);\n     rust_task_id tid =\n         spawner->kernel->create_task(spawner, (const char *)name->data);\n-    rust_task *task = spawner->kernel->get_task_by_id(tid);\n-    task->ref();\n+    // let the kernel bump the ref count.\n+    spawner->kernel->get_task_by_id(tid);\n+    // no deref because we're letting the caller take ownership.\n     return tid;\n }\n \n extern \"C\" CDECL void\n upcall_take_task(rust_task *task, rust_task_id tid) {\n     LOG_UPCALL_ENTRY(task);\n-    rust_task *target = task->kernel->get_task_by_id(tid);\n-    if(target) {\n-        target->ref();\n-    }\n+    // get_task_by_id increments the refcount.\n+    task->kernel->get_task_by_id(tid);\n }\n \n+extern \"C\" CDECL void\n+drop_task(rust_task *task, rust_task_id tid);\n extern \"C\" CDECL void\n upcall_drop_task(rust_task *task, rust_task_id tid) {\n     LOG_UPCALL_ENTRY(task);\n-    rust_task *target = task->kernel->get_task_by_id(tid);\n-    if(target) {\n-        target->deref();\n-    }\n+    drop_task(task, tid);\n }\n \n extern \"C\" CDECL void\n@@ -544,6 +547,7 @@ upcall_start_task(rust_task *spawner,\n     memcpy((void*)task->rust_sp, (void*)args, args_sz);\n \n     task->start(spawnee_fn, child_arg);\n+    task->deref();\n     return task;\n }\n "}, {"sha": "ccc190077d8e875bd02f41157f2f7ea5880553af", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=d63f8340a5e947cdf6b3ad34d3683f2ae9e5cf84", "patch": "@@ -26,6 +26,7 @@ debug_tydesc\n do_gc\n drop_chan\n drop_port\n+drop_task\n get_port_id\n get_task_context\n get_task_id"}]}