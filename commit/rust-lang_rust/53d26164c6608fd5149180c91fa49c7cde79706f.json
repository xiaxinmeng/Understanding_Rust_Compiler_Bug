{"sha": "53d26164c6608fd5149180c91fa49c7cde79706f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZDI2MTY0YzY2MDhmZDUxNDkxODBjOTFmYTQ5YzdjZGU3OTcwNmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-17T17:50:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T17:50:15Z"}, "message": "Merge #9316\n\n9316: internal: add default to minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e65e8eeb44c21a0f1e378c0c32a565c3c09375bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e65e8eeb44c21a0f1e378c0c32a565c3c09375bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53d26164c6608fd5149180c91fa49c7cde79706f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgy4tXCRBK7hj4Ov3rIwAA/gkIAK8MCDJTliQvxz1R14UyjkdY\n4Q5ICvdnpvXjvliqPzPlmjUcP6lypHW3zyjuhYMUwu3Xd4rOH4BPbjYwNsZFtbVB\nxfxznC2h4aF5f/fKGoqN0pdkQ+vYgKX4X1DdZsO5eTJEI57tKqJafBK+52ArSdKS\n6ghjzryVWqYuqR/Zc3+UZiSj2AST3kkLSPLMqJQdA11AUItasgz4FLCWRxHbr7bv\ntZinskOEALExhudGDfIRbwoTmqJYP8+O6rzIDWfzraGA9E5RRCT9Uj64q8Dgjmf4\nQ4tkV+cunXW1MEI54hl8oE+B/xvplS8w69kwZT1ph7U/tt0Gpd1gozpQTX2rrEg=\n=n8fQ\n-----END PGP SIGNATURE-----\n", "payload": "tree e65e8eeb44c21a0f1e378c0c32a565c3c09375bc\nparent ce926aebc4461e38535047958c0b6f72b7a0c0ea\nparent 08c220ab2c4651f38d3029898706f2a996bf2c6b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623952215 +0000\ncommitter GitHub <noreply@github.com> 1623952215 +0000\n\nMerge #9316\n\n9316: internal: add default to minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53d26164c6608fd5149180c91fa49c7cde79706f", "html_url": "https://github.com/rust-lang/rust/commit/53d26164c6608fd5149180c91fa49c7cde79706f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53d26164c6608fd5149180c91fa49c7cde79706f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce926aebc4461e38535047958c0b6f72b7a0c0ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce926aebc4461e38535047958c0b6f72b7a0c0ea", "html_url": "https://github.com/rust-lang/rust/commit/ce926aebc4461e38535047958c0b6f72b7a0c0ea"}, {"sha": "08c220ab2c4651f38d3029898706f2a996bf2c6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/08c220ab2c4651f38d3029898706f2a996bf2c6b", "html_url": "https://github.com/rust-lang/rust/commit/08c220ab2c4651f38d3029898706f2a996bf2c6b"}], "stats": {"total": 172, "additions": 94, "deletions": 78}, "files": [{"sha": "592610eab0886f7ae249d3eb3c64ac4f8ac1310a", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=53d26164c6608fd5149180c91fa49c7cde79706f", "patch": "@@ -3016,8 +3016,8 @@ fn foo() {\n                                     file_id: FileId(\n                                         1,\n                                     ),\n-                                    full_range: 245..427,\n-                                    focus_range: 284..290,\n+                                    full_range: 246..428,\n+                                    focus_range: 285..291,\n                                     name: \"Future\",\n                                     kind: Trait,\n                                     description: \"pub trait Future\","}, {"sha": "e55c385029ee68529ab77d3096c38fc062f0219c", "filename": "crates/ide_assists/src/handlers/generate_default_from_enum_variant.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs?ref=53d26164c6608fd5149180c91fa49c7cde79706f", "patch": "@@ -1,5 +1,4 @@\n-use ide_db::helpers::FamousDefs;\n-use ide_db::RootDatabase;\n+use ide_db::{helpers::FamousDefs, RootDatabase};\n use syntax::ast::{self, AstNode, NameOwner};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -92,23 +91,20 @@ mod tests {\n \n     use super::*;\n \n-    fn check_not_applicable(ra_fixture: &str) {\n-        let fixture =\n-            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n-        check_assist_not_applicable(generate_default_from_enum_variant, &fixture)\n-    }\n-\n     #[test]\n     fn test_generate_default_from_variant() {\n         check_assist(\n             generate_default_from_enum_variant,\n             r#\"\n+//- minicore: default\n enum Variant {\n     Undefined,\n     Minor$0,\n     Major,\n-}\"#,\n-            r#\"enum Variant {\n+}\n+\"#,\n+            r#\"\n+enum Variant {\n     Undefined,\n     Minor,\n     Major,\n@@ -118,15 +114,18 @@ impl Default for Variant {\n     fn default() -> Self {\n         Self::Minor\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_generate_default_already_implemented() {\n         cov_mark::check!(test_gen_default_impl_already_exists);\n-        check_not_applicable(\n+        check_assist_not_applicable(\n+            generate_default_from_enum_variant,\n             r#\"\n+//- minicore: default\n enum Variant {\n     Undefined,\n     Minor$0,\n@@ -137,36 +136,44 @@ impl Default for Variant {\n     fn default() -> Self {\n         Self::Minor\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_add_from_impl_no_element() {\n         cov_mark::check!(test_gen_default_on_non_unit_variant_not_implemented);\n-        check_not_applicable(\n+        check_assist_not_applicable(\n+            generate_default_from_enum_variant,\n             r#\"\n+//- minicore: default\n enum Variant {\n     Undefined,\n     Minor(u32)$0,\n     Major,\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_generate_default_from_variant_with_one_variant() {\n         check_assist(\n             generate_default_from_enum_variant,\n-            r#\"enum Variant { Undefi$0ned }\"#,\n+            r#\"\n+//- minicore: default\n+enum Variant { Undefi$0ned }\n+\"#,\n             r#\"\n enum Variant { Undefined }\n \n impl Default for Variant {\n     fn default() -> Self {\n         Self::Undefined\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n }"}, {"sha": "b54ec59da1f11417ff6d6db52a2e9dc472b6ed7c", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 51, "deletions": 32, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=53d26164c6608fd5149180c91fa49c7cde79706f", "patch": "@@ -1,7 +1,3 @@\n-use crate::{\n-    assist_context::{AssistContext, Assists},\n-    AssistId,\n-};\n use ide_db::helpers::FamousDefs;\n use itertools::Itertools;\n use stdx::format_to;\n@@ -10,6 +6,11 @@ use syntax::{\n     AstNode,\n };\n \n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId,\n+};\n+\n // Assist: generate_default_from_new\n //\n // Generates default implementation from new method.\n@@ -140,16 +141,16 @@ fn is_default_implemented(ctx: &AssistContext, impl_: &Impl) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use ide_db::helpers::FamousDefs;\n-\n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n     #[test]\n     fn generate_default() {\n-        check_pass(\n+        check_assist(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n struct Example { _inner: () }\n \n impl Example {\n@@ -182,8 +183,10 @@ fn main() {}\n \n     #[test]\n     fn generate_default2() {\n-        check_pass(\n+        check_assist(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n struct Test { value: u32 }\n \n impl Test {\n@@ -212,8 +215,10 @@ impl Default for Test {\n \n     #[test]\n     fn new_function_with_generic() {\n-        check_pass(\n+        check_assist(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n pub struct Foo<T> {\n     _bar: *mut T,\n }\n@@ -246,8 +251,10 @@ impl<T> Default for Foo<T> {\n \n     #[test]\n     fn new_function_with_generics() {\n-        check_pass(\n+        check_assist(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n pub struct Foo<T, B> {\n     _tars: *mut T,\n     _bar: *mut B,\n@@ -282,8 +289,10 @@ impl<T, B> Default for Foo<T, B> {\n \n     #[test]\n     fn new_function_with_generic_and_bound() {\n-        check_pass(\n+        check_assist(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n pub struct Foo<T> {\n     t: T,\n }\n@@ -316,8 +325,10 @@ impl<T: From<i32>> Default for Foo<T> {\n \n     #[test]\n     fn new_function_with_generics_and_bounds() {\n-        check_pass(\n+        check_assist(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n pub struct Foo<T, B> {\n     _tars: T,\n     _bar: B,\n@@ -352,8 +363,10 @@ impl<T: From<i32>, B: From<i64>> Default for Foo<T, B> {\n \n     #[test]\n     fn new_function_with_generic_and_where() {\n-        check_pass(\n+        check_assist(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n pub struct Foo<T> {\n     t: T,\n }\n@@ -395,8 +408,10 @@ where\n \n     #[test]\n     fn new_function_with_generics_and_wheres() {\n-        check_pass(\n+        check_assist(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n pub struct Foo<T, B> {\n     _tars: T,\n     _bar: B,\n@@ -441,8 +456,10 @@ where\n     #[test]\n     fn new_function_with_parameters() {\n         cov_mark::check!(new_function_with_parameters);\n-        check_not_applicable(\n+        check_assist_not_applicable(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n struct Example { _inner: () }\n \n impl Example {\n@@ -457,7 +474,8 @@ impl Example {\n     #[test]\n     fn other_function_than_new() {\n         cov_mark::check!(other_function_than_new);\n-        check_not_applicable(\n+        check_assist_not_applicable(\n+            generate_default_from_new,\n             r#\"\n struct Example { _inner: () }\n \n@@ -474,8 +492,10 @@ impl Example {\n     #[test]\n     fn default_block_is_already_present() {\n         cov_mark::check!(default_block_is_already_present);\n-        check_not_applicable(\n+        check_assist_not_applicable(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n struct Example { _inner: () }\n \n impl Example {\n@@ -495,7 +515,8 @@ impl Default for Example {\n \n     #[test]\n     fn standalone_new_function() {\n-        check_not_applicable(\n+        check_assist_not_applicable(\n+            generate_default_from_new,\n             r#\"\n fn n$0ew() -> u32 {\n     0\n@@ -506,8 +527,10 @@ fn n$0ew() -> u32 {\n \n     #[test]\n     fn multiple_struct_blocks() {\n-        check_pass(\n+        check_assist(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n struct Example { _inner: () }\n struct Test { value: u32 }\n \n@@ -538,8 +561,10 @@ impl Default for Example {\n \n     #[test]\n     fn when_struct_is_after_impl() {\n-        check_pass(\n+        check_assist(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n impl Example {\n     pub fn $0new() -> Self {\n         Self { _inner: () }\n@@ -568,8 +593,10 @@ struct Example { _inner: () }\n \n     #[test]\n     fn struct_in_module() {\n-        check_pass(\n+        check_assist(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n mod test {\n     struct Example { _inner: () }\n \n@@ -603,8 +630,10 @@ impl Default for Example {\n     #[test]\n     fn struct_in_module_with_default() {\n         cov_mark::check!(struct_in_module_with_default);\n-        check_not_applicable(\n+        check_assist_not_applicable(\n+            generate_default_from_new,\n             r#\"\n+//- minicore: default\n mod test {\n     struct Example { _inner: () }\n \n@@ -623,14 +652,4 @@ mod test {\n \"#,\n         );\n     }\n-\n-    fn check_pass(before: &str, after: &str) {\n-        let before = &format!(\"//- /main.rs crate:main deps:core{}{}\", before, FamousDefs::FIXTURE);\n-        check_assist(generate_default_from_new, before, after);\n-    }\n-\n-    fn check_not_applicable(before: &str) {\n-        let before = &format!(\"//- /main.rs crate:main deps:core{}{}\", before, FamousDefs::FIXTURE);\n-        check_assist_not_applicable(generate_default_from_new, before);\n-    }\n }"}, {"sha": "e876337f12941ffa925e7760c6511b5a0191fc56", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=53d26164c6608fd5149180c91fa49c7cde79706f", "patch": "@@ -48,10 +48,9 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n-    use ide_db::helpers::FamousDefs;\n \n     use crate::{\n-        tests::{self, filtered_completion_list},\n+        tests::{check_edit, filtered_completion_list},\n         CompletionKind,\n     };\n \n@@ -61,31 +60,17 @@ mod tests {\n     }\n \n     fn check_snippet(ra_fixture: &str, expect: Expect) {\n-        let actual = filtered_completion_list(\n-            &format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE),\n-            CompletionKind::Snippet,\n-        );\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Snippet);\n         expect.assert_eq(&actual);\n     }\n \n-    fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-        tests::check_edit(\n-            what,\n-            &format!(\n-                \"//- /main.rs crate:main deps:core{}\\n{}\",\n-                ra_fixture_before,\n-                FamousDefs::FIXTURE,\n-            ),\n-            &(ra_fixture_after.to_owned() + \"\\n\"),\n-        );\n-    }\n-\n     #[test]\n     fn test_record_literal_field_default() {\n         let test_code = r#\"\n+//- minicore: default\n struct S { foo: u32, bar: usize }\n \n-impl core::default::Default for S {\n+impl Default for S {\n     fn default() -> Self {\n         S {\n             foo: 0,\n@@ -121,9 +106,10 @@ fn process(f: S) {\n         check_edit(\n             \"..Default::default()\",\n             r#\"\n+//- minicore: default\n struct S { foo: u32, bar: usize }\n \n-impl core::default::Default for S {\n+impl Default for S {\n     fn default() -> Self {\n         S {\n             foo: 0,\n@@ -142,7 +128,7 @@ fn process(f: S) {\n             r#\"\n struct S { foo: u32, bar: usize }\n \n-impl core::default::Default for S {\n+impl Default for S {\n     fn default() -> Self {\n         S {\n             foo: 0,"}, {"sha": "5e0d514cf9fbf313c2172eef80561a659d3028eb", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=53d26164c6608fd5149180c91fa49c7cde79706f", "patch": "@@ -20,12 +20,6 @@ pub mod convert {\n     }\n }\n \n-pub mod default {\n-    pub trait Default {\n-        fn default() -> Self;\n-    }\n-}\n-\n pub mod option {\n     pub enum Option<T> {\n         None,"}, {"sha": "4093a04bced6641beea2d35dd06ee5411f3d32ad", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d26164c6608fd5149180c91fa49c7cde79706f/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=53d26164c6608fd5149180c91fa49c7cde79706f", "patch": "@@ -22,6 +22,7 @@\n //!     result:\n //!     iterator: option\n //!     iterators: iterator\n+//!     default: sized\n \n pub mod marker {\n     // region:sized\n@@ -37,6 +38,14 @@ pub mod marker {\n     // endregion:unsize\n }\n \n+// region:default\n+pub mod default {\n+    pub trait Default: Sized {\n+        fn default() -> Self;\n+    }\n+}\n+// endregion:default\n+\n pub mod ops {\n     // region:coerce_unsized\n     mod unsize {\n@@ -309,6 +318,7 @@ pub mod iter {\n pub mod prelude {\n     pub mod v1 {\n         pub use crate::{\n+            default::Default,                   // :default\n             iter::{IntoIterator, Iterator},     // :iterator\n             marker::Sized,                      // :sized\n             ops::{Fn, FnMut, FnOnce},           // :fn"}]}