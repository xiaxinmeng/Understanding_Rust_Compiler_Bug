{"sha": "67678862388992f5819163be8ba831e2431b36aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3Njc4ODYyMzg4OTkyZjU4MTkxNjNiZThiYTgzMWUyNDMxYjM2YWE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T08:12:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T08:12:52Z"}, "message": "Rollup merge of #52853 - RalfJung:bootstrap-help, r=alexcrichton\n\nImprove bootstrap help on stages\n\nCc @eddyb", "tree": {"sha": "00a30b9d74ef5cae63b30b253368d136cb8347f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00a30b9d74ef5cae63b30b253368d136cb8347f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67678862388992f5819163be8ba831e2431b36aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYWuFCRBK7hj4Ov3rIwAAdHIIADFbl4GLJyoXE8Y7acpy/mT5\nHs6Xio5lxEShzreokLzmiTfiGyqllOXxOpBb3qguHPu1VrO5VqjYfI9/Y3L+oQS9\nsPiueuEQIrpgvwMlDi4s3I4koacRvNPDaRVAhF6ZLY2GAc+6a6lW5FweFm+l21TN\nhNr2t9Xg3JLXq+QFyCtMpvMKluRKlwwYesZEWOgB4MEfrHD42s0Hjj9yGIKKwjeA\nJSE54h6qLWodyQNUGOcQEmnKk9sirfRdAET/Uw2tghRsvG5s8udxsCDKlqj27oX1\n48pO9Hy3HCazal89TnYA+m1NgtA84dLqQluAu9JrxjNsDj/baA9xeI/ZcDZJ7uE=\n=5I69\n-----END PGP SIGNATURE-----\n", "payload": "tree 00a30b9d74ef5cae63b30b253368d136cb8347f5\nparent 5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d\nparent aa7d7d0c2b7c85ae860b9eba61d59005b0d049b0\nauthor Pietro Albini <pietro@pietroalbini.org> 1533111172 +0200\ncommitter GitHub <noreply@github.com> 1533111172 +0200\n\nRollup merge of #52853 - RalfJung:bootstrap-help, r=alexcrichton\n\nImprove bootstrap help on stages\n\nCc @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67678862388992f5819163be8ba831e2431b36aa", "html_url": "https://github.com/rust-lang/rust/commit/67678862388992f5819163be8ba831e2431b36aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67678862388992f5819163be8ba831e2431b36aa/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "html_url": "https://github.com/rust-lang/rust/commit/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d"}, {"sha": "aa7d7d0c2b7c85ae860b9eba61d59005b0d049b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7d7d0c2b7c85ae860b9eba61d59005b0d049b0", "html_url": "https://github.com/rust-lang/rust/commit/aa7d7d0c2b7c85ae860b9eba61d59005b0d049b0"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "60b4d65f444014133bd81262a7cbdcabea84bdfe", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67678862388992f5819163be8ba831e2431b36aa/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67678862388992f5819163be8ba831e2431b36aa/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=67678862388992f5819163be8ba831e2431b36aa", "patch": "@@ -121,7 +121,10 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n         opts.optmulti(\"\", \"exclude\", \"build paths to exclude\", \"PATH\");\n         opts.optopt(\"\", \"on-fail\", \"command to run on failure\", \"CMD\");\n         opts.optflag(\"\", \"dry-run\", \"dry run; don't build anything\");\n-        opts.optopt(\"\", \"stage\", \"stage to build\", \"N\");\n+        opts.optopt(\"\", \"stage\",\n+            \"stage to build (indicates compiler to use/test, e.g. stage 0 uses the \\\n+             bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)\",\n+            \"N\");\n         opts.optmulti(\"\", \"keep-stage\", \"stage(s) to keep without recompiling\", \"N\");\n         opts.optopt(\"\", \"src\", \"path to the root of the rust checkout\", \"DIR\");\n         opts.optopt(\"j\", \"jobs\", \"number of jobs to run in parallel\", \"JOBS\");\n@@ -258,7 +261,7 @@ Arguments:\n \n         ./x.py build --stage 1 src/libtest\n \n-    This will first build everything once (like --stage 0 without further\n+    This will first build everything once (like `--stage 0` without further\n     arguments would), and then use the compiler built in stage 0 to build\n     src/libtest and its dependencies.\n     Once this is done, build/$ARCH/stage1 contains a usable compiler.\",\n@@ -290,10 +293,14 @@ Arguments:\n \n         ./x.py test src/test/run-pass\n         ./x.py test src/libstd --test-args hash_map\n-        ./x.py test src/libstd --stage 0\n+        ./x.py test src/libstd --stage 0 --no-doc\n         ./x.py test src/test/ui --bless\n         ./x.py test src/test/ui --compare-mode nll\n \n+    Note that `test src/test/* --stage N` does NOT depend on `build src/rustc --stage N`;\n+    just like `build src/libstd --stage N` it tests the compiler produced by the previous\n+    stage.\n+\n     If no arguments are passed then the complete artifacts for that stage are\n     compiled and tested.\n "}]}