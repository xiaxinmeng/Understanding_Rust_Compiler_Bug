{"sha": "3c96c3012dcaecd23e111616867bb5e4574e32b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOTZjMzAxMmRjYWVjZDIzZTExMTYxNjg2N2JiNWU0NTc0ZTMyYjc=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2017-11-10T11:31:51Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2017-11-10T11:54:58Z"}, "message": "Normalize inlined function in MIR inliner", "tree": {"sha": "c244dfeae419f48148a7d83311f91587313737ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c244dfeae419f48148a7d83311f91587313737ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c96c3012dcaecd23e111616867bb5e4574e32b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c96c3012dcaecd23e111616867bb5e4574e32b7", "html_url": "https://github.com/rust-lang/rust/commit/3c96c3012dcaecd23e111616867bb5e4574e32b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c96c3012dcaecd23e111616867bb5e4574e32b7/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ff0e6422061c390a141354af8eacd540dca10b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ff0e6422061c390a141354af8eacd540dca10b", "html_url": "https://github.com/rust-lang/rust/commit/d5ff0e6422061c390a141354af8eacd540dca10b"}], "stats": {"total": 76, "additions": 71, "deletions": 5}, "files": [{"sha": "05ab80acf84c8f7f9bd25827d1b7f107669ac1f8", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3c96c3012dcaecd23e111616867bb5e4574e32b7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c96c3012dcaecd23e111616867bb5e4574e32b7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=3c96c3012dcaecd23e111616867bb5e4574e32b7", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc::mir::*;\n use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::visit::*;\n-use rustc::ty::{self, Ty, TyCtxt, Instance};\n+use rustc::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::subst::{Subst,Substs};\n \n use std::collections::VecDeque;\n@@ -77,8 +77,13 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         let mut callsites = VecDeque::new();\n \n+        let param_env;\n+\n         // Only do inlining into fn bodies.\n         if let MirSource::Fn(caller_id) = self.source {\n+            let caller_def_id = self.tcx.hir.local_def_id(caller_id);\n+            param_env = self.tcx.param_env(caller_def_id);\n+\n             for (bb, bb_data) in caller_mir.basic_blocks().iter_enumerated() {\n                 // Don't inline calls that are in cleanup blocks.\n                 if bb_data.is_cleanup { continue; }\n@@ -88,9 +93,6 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 if let TerminatorKind::Call {\n                     func: Operand::Constant(ref f), .. } = terminator.kind {\n                         if let ty::TyFnDef(callee_def_id, substs) = f.ty.sty {\n-                            let caller_def_id = self.tcx.hir.local_def_id(caller_id);\n-                            let param_env = self.tcx.param_env(caller_def_id);\n-\n                             if let Some(instance) = Instance::resolve(self.tcx,\n                                                                       param_env,\n                                                                       callee_def_id,\n@@ -105,6 +107,8 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                         }\n                     }\n             }\n+        } else {\n+            return;\n         }\n \n         let mut local_change;\n@@ -121,7 +125,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                                                                            callsite.location.span,\n                                                                            callsite.callee) {\n                     Ok(ref callee_mir) if self.should_inline(callsite, callee_mir) => {\n-                        callee_mir.subst(self.tcx, callsite.substs)\n+                        subst_and_normalize(callee_mir, self.tcx, &callsite.substs, param_env)\n                     }\n                     Ok(_) => continue,\n \n@@ -570,6 +574,30 @@ fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     })\n }\n \n+fn subst_and_normalize<'a, 'tcx: 'a>(\n+    mir: &Mir<'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    substs: &'tcx ty::subst::Substs<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+) -> Mir<'tcx> {\n+    struct Folder<'a, 'tcx: 'a> {\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        substs: &'tcx ty::subst::Substs<'tcx>,\n+    }\n+    impl<'a, 'tcx: 'a> ty::fold::TypeFolder<'tcx, 'tcx> for Folder<'a, 'tcx> {\n+        fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> {\n+            self.tcx\n+        }\n+\n+        fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+            self.tcx.trans_apply_param_substs_env(&self.substs, self.param_env, &t)\n+        }\n+    }\n+    let mut f = Folder { tcx, param_env, substs };\n+    mir.fold_with(&mut f)\n+}\n+\n /**\n  * Integrator.\n  *"}, {"sha": "702cb6a9bc16545115a58cc0591aea16e34cfbfb", "filename": "src/test/run-pass/mir-inlining/ice-issue-45885.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3c96c3012dcaecd23e111616867bb5e4574e32b7/src%2Ftest%2Frun-pass%2Fmir-inlining%2Fice-issue-45885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c96c3012dcaecd23e111616867bb5e4574e32b7/src%2Ftest%2Frun-pass%2Fmir-inlining%2Fice-issue-45885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir-inlining%2Fice-issue-45885.rs?ref=3c96c3012dcaecd23e111616867bb5e4574e32b7", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Zmir-opt-level=2\n+\n+pub enum Enum {\n+    A,\n+    B,\n+}\n+\n+trait SliceIndex {\n+    type Output;\n+    fn get(&self) -> &Self::Output;\n+}\n+\n+impl SliceIndex for usize {\n+    type Output = Enum;\n+    #[inline(never)]\n+    fn get(&self) -> &Enum {\n+        &Enum::A\n+    }\n+}\n+\n+#[inline(always)]\n+fn index<T: SliceIndex>(t: &T) -> &T::Output {\n+    t.get()\n+}\n+\n+fn main() {\n+    match *index(&0) { Enum::A => true, _ => false };\n+}"}]}