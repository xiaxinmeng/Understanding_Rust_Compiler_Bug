{"sha": "5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMGU0NTEwYTgwNWFhN2ZlYjkzZjdhMzQwMDBiZTdkNWQ5YTYyNDk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-22T18:31:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-22T18:31:24Z"}, "message": "Rollup merge of #59266 - estebank:struct-parse-recovery, r=petrochenkov\n\nDo not complain about non-existing fields after parse recovery\n\nWhen failing to parse struct-like enum variants, the ADT gets recorded\nas having no fields. Record that we have actually recovered during\nparsing of this variant to avoid complaing about non-existing fields\nwhen actually using it.\n\nFix #57361.", "tree": {"sha": "df4aff066dccc48f8c83eb25920296a15a8c491e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df4aff066dccc48f8c83eb25920296a15a8c491e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJclSn8CRBK7hj4Ov3rIwAAdHIIAA04BVEgzHki1ZXdD1lpdSdP\nY6hu76A0XQauEXv6HfZAhdR/mP0wtTio8M1+ZApcGX1iRRm0itKIOQE4ZQLhl9ZD\ncNZz0tNCrbyanuGp/5OfM2esDaLR3GxBCk15BstxhJPcH0wNZu6ZGy9v4fuPQ+Aw\nLDKAlaSwowV1QT3827M2b5shigd+fuQ0EtvZNrhA5p/PVOcHGi7xJj2lL71vP9AC\nsF3eeyzg8SCLgIZOvrGYtMcV9K8e9uX8qbmLL95q7qjSo6VfRmJhWu8yUdtJD7ta\n+eHAtSXR3o7ZdgY56K+XH6CyloEjkoX5HyB89f9m21y1NO4F8f47YcjkGGroyRw=\n=imz1\n-----END PGP SIGNATURE-----\n", "payload": "tree df4aff066dccc48f8c83eb25920296a15a8c491e\nparent adbfcea58f89dee842519d4ef0cbaefe09fac3a5\nparent 757eb679927e2c85457f567487e887eb080eb7cb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553279484 +0100\ncommitter GitHub <noreply@github.com> 1553279484 +0100\n\nRollup merge of #59266 - estebank:struct-parse-recovery, r=petrochenkov\n\nDo not complain about non-existing fields after parse recovery\n\nWhen failing to parse struct-like enum variants, the ADT gets recorded\nas having no fields. Record that we have actually recovered during\nparsing of this variant to avoid complaing about non-existing fields\nwhen actually using it.\n\nFix #57361.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "html_url": "https://github.com/rust-lang/rust/commit/5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adbfcea58f89dee842519d4ef0cbaefe09fac3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/adbfcea58f89dee842519d4ef0cbaefe09fac3a5", "html_url": "https://github.com/rust-lang/rust/commit/adbfcea58f89dee842519d4ef0cbaefe09fac3a5"}, {"sha": "757eb679927e2c85457f567487e887eb080eb7cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/757eb679927e2c85457f567487e887eb080eb7cb", "html_url": "https://github.com/rust-lang/rust/commit/757eb679927e2c85457f567487e887eb080eb7cb"}], "stats": {"total": 169, "additions": 111, "deletions": 58}, "files": [{"sha": "73c3b3026d98bf2b7c8465e9436448d24bb0a7ba", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -2672,7 +2672,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_variant_data(&mut self, vdata: &VariantData) -> hir::VariantData {\n         match *vdata {\n-            VariantData::Struct(ref fields, id) => {\n+            VariantData::Struct(ref fields, id, recovered) => {\n                 let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n \n                 hir::VariantData::Struct(\n@@ -2682,6 +2682,7 @@ impl<'a> LoweringContext<'a> {\n                         .map(|f| self.lower_struct_field(f))\n                         .collect(),\n                     hir_id,\n+                    recovered,\n                 )\n             },\n             VariantData::Tuple(ref fields, id) => {"}, {"sha": "51d91cc562f6821d6cd8081e0b35d8e11fa0dfb2", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -2173,7 +2173,7 @@ impl StructField {\n /// Id of the whole struct lives in `Item`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum VariantData {\n-    Struct(HirVec<StructField>, HirId),\n+    Struct(HirVec<StructField>, HirId, /* recovered */ bool),\n     Tuple(HirVec<StructField>, HirId),\n     Unit(HirId),\n }\n@@ -2187,7 +2187,7 @@ impl VariantData {\n     }\n     pub fn hir_id(&self) -> HirId {\n         match *self {\n-            VariantData::Struct(_, hir_id)\n+            VariantData::Struct(_, hir_id, _)\n             | VariantData::Tuple(_, hir_id)\n             | VariantData::Unit(hir_id) => hir_id,\n         }"}, {"sha": "91b84b68802b1366556b50b81af1ea5e3ada7fb8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -1811,6 +1811,7 @@ pub struct VariantDef {\n     pub fields: Vec<FieldDef>,\n     pub ctor_kind: CtorKind,\n     flags: VariantFlags,\n+    pub recovered: bool,\n }\n \n impl<'a, 'gcx, 'tcx> VariantDef {\n@@ -1829,16 +1830,17 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n     ///\n     /// If someone speeds up attribute loading to not be a performance concern, they can\n     /// remove this hack and use the constructor `DefId` everywhere.\n-    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-               did: DefId,\n-               ident: Ident,\n-               discr: VariantDiscr,\n-               fields: Vec<FieldDef>,\n-               adt_kind: AdtKind,\n-               ctor_kind: CtorKind,\n-               attribute_def_id: DefId)\n-               -> Self\n-    {\n+    pub fn new(\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        did: DefId,\n+        ident: Ident,\n+        discr: VariantDiscr,\n+        fields: Vec<FieldDef>,\n+        adt_kind: AdtKind,\n+        ctor_kind: CtorKind,\n+        attribute_def_id: DefId,\n+        recovered: bool,\n+    ) -> Self {\n         debug!(\"VariantDef::new({:?}, {:?}, {:?}, {:?}, {:?}, {:?}, {:?})\", did, ident, discr,\n                fields, adt_kind, ctor_kind, attribute_def_id);\n         let mut flags = VariantFlags::NO_VARIANT_FLAGS;\n@@ -1852,7 +1854,8 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n             discr,\n             fields,\n             ctor_kind,\n-            flags\n+            flags,\n+            recovered,\n         }\n     }\n \n@@ -1868,7 +1871,8 @@ impl_stable_hash_for!(struct VariantDef {\n     discr,\n     fields,\n     ctor_kind,\n-    flags\n+    flags,\n+    recovered\n });\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "c608c03095aa35f5c00d0c1fdf5c0361a2b8bd8c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -576,7 +576,8 @@ impl<'a, 'tcx> CrateMetadata {\n             }).collect(),\n             adt_kind,\n             data.ctor_kind,\n-            attribute_def_id\n+            attribute_def_id,\n+            false,\n         )\n     }\n "}, {"sha": "01bb643c1d5873cd1c574ae02211deafd0c0048c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -481,8 +481,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         };\n \n         let (value, fields) = match item.node {\n-            ast::ItemKind::Struct(ast::VariantData::Struct(ref fields, _), _) |\n-            ast::ItemKind::Union(ast::VariantData::Struct(ref fields, _), _) => {\n+            ast::ItemKind::Struct(ast::VariantData::Struct(ref fields, ..), _) |\n+            ast::ItemKind::Union(ast::VariantData::Struct(ref fields, ..), _) => {\n                 let include_priv_fields = !self.save_ctxt.config.pub_only;\n                 let fields_str = fields\n                     .iter()\n@@ -560,7 +560,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             let name_span = variant.node.ident.span;\n \n             match variant.node.data {\n-                ast::VariantData::Struct(ref fields, _) => {\n+                ast::VariantData::Struct(ref fields, ..) => {\n                     let fields_str = fields\n                         .iter()\n                         .enumerate()"}, {"sha": "6e47ae6b159845259441cb626c0499683f46d9ea", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -703,7 +703,7 @@ impl Sig for ast::Variant_ {\n     fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let mut text = self.ident.to_string();\n         match self.data {\n-            ast::VariantData::Struct(ref fields, id) => {\n+            ast::VariantData::Struct(ref fields, id, r) => {\n                 let name_def = SigElement {\n                     id: id_from_node_id(id, scx),\n                     start: offset,\n@@ -712,12 +712,16 @@ impl Sig for ast::Variant_ {\n                 text.push_str(\" { \");\n                 let mut defs = vec![name_def];\n                 let mut refs = vec![];\n-                for f in fields {\n-                    let field_sig = f.make(offset + text.len(), Some(id), scx)?;\n-                    text.push_str(&field_sig.text);\n-                    text.push_str(\", \");\n-                    defs.extend(field_sig.defs.into_iter());\n-                    refs.extend(field_sig.refs.into_iter());\n+                if r {\n+                    text.push_str(\"/* parse error */ \");\n+                } else {\n+                    for f in fields {\n+                        let field_sig = f.make(offset + text.len(), Some(id), scx)?;\n+                        text.push_str(&field_sig.text);\n+                        text.push_str(\", \");\n+                        defs.extend(field_sig.defs.into_iter());\n+                        refs.extend(field_sig.refs.into_iter());\n+                    }\n                 }\n                 text.push('}');\n                 Ok(Signature { text, defs, refs })"}, {"sha": "c30b9d65fec831bef6c99f856554a8cf8189fd1e", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -918,14 +918,16 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         pat_ty\n     }\n \n-    fn check_struct_pat_fields(&self,\n-                               adt_ty: Ty<'tcx>,\n-                               pat_id: hir::HirId,\n-                               span: Span,\n-                               variant: &'tcx ty::VariantDef,\n-                               fields: &'gcx [Spanned<hir::FieldPat>],\n-                               etc: bool,\n-                               def_bm: ty::BindingMode) -> bool {\n+    fn check_struct_pat_fields(\n+        &self,\n+        adt_ty: Ty<'tcx>,\n+        pat_id: hir::HirId,\n+        span: Span,\n+        variant: &'tcx ty::VariantDef,\n+        fields: &'gcx [Spanned<hir::FieldPat>],\n+        etc: bool,\n+        def_bm: ty::BindingMode,\n+    ) -> bool {\n         let tcx = self.tcx;\n \n         let (substs, adt) = match adt_ty.sty {\n@@ -985,7 +987,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 .map(|field| field.ident.modern())\n                 .filter(|ident| !used_fields.contains_key(&ident))\n                 .collect::<Vec<_>>();\n-        if inexistent_fields.len() > 0 {\n+        if inexistent_fields.len() > 0 && !variant.recovered {\n             let (field_names, t, plural) = if inexistent_fields.len() == 1 {\n                 (format!(\"a field named `{}`\", inexistent_fields[0].1), \"this\", \"\")\n             } else {"}, {"sha": "ab0e4b086bc77492b53ca6e21c0e786da195e8f7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -3734,12 +3734,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                            field, expr_t)\n     }\n \n-    fn report_unknown_field(&self,\n-                            ty: Ty<'tcx>,\n-                            variant: &'tcx ty::VariantDef,\n-                            field: &hir::Field,\n-                            skip_fields: &[hir::Field],\n-                            kind_name: &str) {\n+    fn report_unknown_field(\n+        &self,\n+        ty: Ty<'tcx>,\n+        variant: &'tcx ty::VariantDef,\n+        field: &hir::Field,\n+        skip_fields: &[hir::Field],\n+        kind_name: &str,\n+    ) {\n+        if variant.recovered {\n+            return;\n+        }\n         let mut err = self.type_error_struct_with_diag(\n             field.ident.span,\n             |actual| match ty.sty {"}, {"sha": "c0739db3df6a2ad51f4bd441c0fd04e46313ddfd", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -598,14 +598,19 @@ fn convert_variant<'a, 'tcx>(\n             }\n         })\n         .collect();\n+    let recovered = match def {\n+        hir::VariantData::Struct(_, _, r) => *r,\n+        _ => false,\n+    };\n     ty::VariantDef::new(tcx,\n         did,\n         ident,\n         discr,\n         fields,\n         adt_kind,\n         CtorKind::from_hir(def),\n-        attribute_def_id\n+        attribute_def_id,\n+        recovered,\n     )\n }\n "}, {"sha": "2cbd2dfeb25d6372d9fb58b283f3055126736e45", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -620,7 +620,7 @@ pub enum PatKind {\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`.\n-    Struct(Path, Vec<Spanned<FieldPat>>, bool),\n+    Struct(Path, Vec<Spanned<FieldPat>>, /* recovered */ bool),\n \n     /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n@@ -2133,7 +2133,7 @@ pub enum VariantData {\n     /// Struct variant.\n     ///\n     /// E.g., `Bar { .. }` as in `enum Foo { Bar { .. } }`.\n-    Struct(Vec<StructField>, NodeId),\n+    Struct(Vec<StructField>, NodeId, bool),\n     /// Tuple variant.\n     ///\n     /// E.g., `Bar(..)` as in `enum Foo { Bar(..) }`.\n@@ -2147,13 +2147,13 @@ pub enum VariantData {\n impl VariantData {\n     pub fn fields(&self) -> &[StructField] {\n         match *self {\n-            VariantData::Struct(ref fields, _) | VariantData::Tuple(ref fields, _) => fields,\n+            VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, _) => fields,\n             _ => &[],\n         }\n     }\n     pub fn id(&self) -> NodeId {\n         match *self {\n-            VariantData::Struct(_, id) | VariantData::Tuple(_, id) | VariantData::Unit(id) => id,\n+            VariantData::Struct(_, id, _) | VariantData::Tuple(_, id) | VariantData::Unit(id) => id,\n         }\n     }\n     pub fn is_struct(&self) -> bool {"}, {"sha": "7159c949513ac280e01aa16574464a6f564780f9", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -225,7 +225,7 @@ impl<'a> StripUnconfigured<'a> {\n \n     fn configure_variant_data(&mut self, vdata: &mut ast::VariantData) {\n         match vdata {\n-            ast::VariantData::Struct(fields, _id) |\n+            ast::VariantData::Struct(fields, _id, _) |\n             ast::VariantData::Tuple(fields, _id) =>\n                 fields.flat_map_in_place(|field| self.configure(field)),\n             ast::VariantData::Unit(_id) => {}"}, {"sha": "5bb1d8a4b94768814c7f53004625db8dabf4b746", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -765,7 +765,7 @@ pub fn noop_visit_where_predicate<T: MutVisitor>(pred: &mut WherePredicate, vis:\n \n pub fn noop_visit_variant_data<T: MutVisitor>(vdata: &mut VariantData, vis: &mut T) {\n     match vdata {\n-        VariantData::Struct(fields, id) |\n+        VariantData::Struct(fields, id, _) |\n         VariantData::Tuple(fields, id) => {\n             visit_vec(fields, |field| vis.visit_struct_field(field));\n             vis.visit_id(id);"}, {"sha": "648ee771ddbd00afbe13741c0b825c67b52205f9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -6837,14 +6837,16 @@ impl<'a> Parser<'a> {\n                 VariantData::Unit(ast::DUMMY_NODE_ID)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n+                let (fields, recovered) = self.parse_record_struct_body()?;\n+                VariantData::Struct(fields, ast::DUMMY_NODE_ID, recovered)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if self.eat(&token::Semi) {\n             VariantData::Unit(ast::DUMMY_NODE_ID)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n+            let (fields, recovered) = self.parse_record_struct_body()?;\n+            VariantData::Struct(fields, ast::DUMMY_NODE_ID, recovered)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n             let body = VariantData::Tuple(self.parse_tuple_struct_body()?, ast::DUMMY_NODE_ID);\n@@ -6872,9 +6874,11 @@ impl<'a> Parser<'a> {\n \n         let vdata = if self.token.is_keyword(keywords::Where) {\n             generics.where_clause = self.parse_where_clause()?;\n-            VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n+            let (fields, recovered) = self.parse_record_struct_body()?;\n+            VariantData::Struct(fields, ast::DUMMY_NODE_ID, recovered)\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n+            let (fields, recovered) = self.parse_record_struct_body()?;\n+            VariantData::Struct(fields, ast::DUMMY_NODE_ID, recovered)\n         } else {\n             let token_str = self.this_token_descr();\n             let mut err = self.fatal(&format!(\n@@ -6906,12 +6910,16 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn parse_record_struct_body(&mut self) -> PResult<'a, Vec<StructField>> {\n+    fn parse_record_struct_body(\n+        &mut self,\n+    ) -> PResult<'a, (Vec<StructField>, /* recovered */ bool)> {\n         let mut fields = Vec::new();\n+        let mut recovered = false;\n         if self.eat(&token::OpenDelim(token::Brace)) {\n             while self.token != token::CloseDelim(token::Brace) {\n                 let field = self.parse_struct_decl_field().map_err(|e| {\n                     self.recover_stmt();\n+                    recovered = true;\n                     e\n                 });\n                 match field {\n@@ -6930,7 +6938,7 @@ impl<'a> Parser<'a> {\n             return Err(err);\n         }\n \n-        Ok(fields)\n+        Ok((fields, recovered))\n     }\n \n     fn parse_tuple_struct_body(&mut self) -> PResult<'a, Vec<StructField>> {\n@@ -7693,12 +7701,14 @@ impl<'a> Parser<'a> {\n             if self.check(&token::OpenDelim(token::Brace)) {\n                 // Parse a struct variant.\n                 all_nullary = false;\n-                struct_def = VariantData::Struct(self.parse_record_struct_body()?,\n-                                                 ast::DUMMY_NODE_ID);\n+                let (fields, recovered) = self.parse_record_struct_body()?;\n+                struct_def = VariantData::Struct(fields, ast::DUMMY_NODE_ID, recovered);\n             } else if self.check(&token::OpenDelim(token::Paren)) {\n                 all_nullary = false;\n-                struct_def = VariantData::Tuple(self.parse_tuple_struct_body()?,\n-                                                ast::DUMMY_NODE_ID);\n+                struct_def = VariantData::Tuple(\n+                    self.parse_tuple_struct_body()?,\n+                    ast::DUMMY_NODE_ID,\n+                );\n             } else if self.eat(&token::Eq) {\n                 disr_expr = Some(AnonConst {\n                     id: ast::DUMMY_NODE_ID,"}, {"sha": "5b195dcc3787849545770910f991ae31a9951950", "filename": "src/test/ui/parser/recovered-struct-variant.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.rs?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -0,0 +1,13 @@\n+enum Foo {\n+    A { a, b: usize }\n+    //~^ ERROR expected `:`, found `,`\n+}\n+\n+fn main() {\n+    // no complaints about non-existing fields\n+    let f = Foo::A { a:3, b: 4};\n+    match f {\n+        // no complaints about non-existing fields\n+        Foo::A {a, b} => {}\n+    }\n+}"}, {"sha": "51aaf8bb3cfbe2daff10cd6b34cbfd177eb2d663", "filename": "src/test/ui/parser/recovered-struct-variant.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a0e4510a805aa7feb93f7a34000be7d5d9a6249/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.stderr?ref=5a0e4510a805aa7feb93f7a34000be7d5d9a6249", "patch": "@@ -0,0 +1,8 @@\n+error: expected `:`, found `,`\n+  --> $DIR/recovered-struct-variant.rs:2:10\n+   |\n+LL |     A { a, b: usize }\n+   |          ^ expected `:`\n+\n+error: aborting due to previous error\n+"}]}