{"sha": "323a74779fca1b269daed42f16864d7fef18ba47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyM2E3NDc3OWZjYTFiMjY5ZGFlZDQyZjE2ODY0ZDdmZWYxOGJhNDc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-06T13:31:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-06T13:31:38Z"}, "message": "Move LinkerInfo into CrateInfo", "tree": {"sha": "297557b5fa698c5507f0f5309e6fd39bfe7d4edf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/297557b5fa698c5507f0f5309e6fd39bfe7d4edf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/323a74779fca1b269daed42f16864d7fef18ba47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/323a74779fca1b269daed42f16864d7fef18ba47", "html_url": "https://github.com/rust-lang/rust/commit/323a74779fca1b269daed42f16864d7fef18ba47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/323a74779fca1b269daed42f16864d7fef18ba47/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a27044f42ace9eb652781b53f598e25d4e7e918", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a27044f42ace9eb652781b53f598e25d4e7e918", "html_url": "https://github.com/rust-lang/rust/commit/9a27044f42ace9eb652781b53f598e25d4e7e918"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "50fd53481f74580c59afbd09346dd1b5b48dfe59", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=323a74779fca1b269daed42f16864d7fef18ba47", "patch": "@@ -4,7 +4,6 @@\n use std::path::PathBuf;\n \n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n-use rustc_codegen_ssa::back::linker::LinkerInfo;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule, CrateInfo, ModuleKind};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n@@ -296,8 +295,7 @@ pub(crate) fn run_aot(\n             allocator_module,\n             metadata_module,\n             metadata,\n-            linker_info: LinkerInfo::new(tcx, crate::target_triple(tcx.sess).to_string()),\n-            crate_info: CrateInfo::new(tcx),\n+            crate_info: CrateInfo::new(tcx, crate::target_triple(tcx.sess).to_string()),\n         },\n         work_products,\n     ))"}, {"sha": "04ec01ad28148483519cefcf65e9615e2203d2d2", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=323a74779fca1b269daed42f16864d7fef18ba47", "patch": "@@ -178,7 +178,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n \n     let mut dylib_paths = Vec::new();\n \n-    let crate_info = CrateInfo::new(tcx);\n+    let crate_info = CrateInfo::new(tcx, \"dummy_target_cpu\".to_string());\n     let formats = tcx.dependency_formats(());\n     let data = &formats\n         .iter()"}, {"sha": "dfce3c5b7a5d2923116b596ea4ea77bbefacc1b6", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=323a74779fca1b269daed42f16864d7fef18ba47", "patch": "@@ -1804,7 +1804,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // FIXME: Move `/LIBPATH` addition for uwp targets from the linker construction\n     // to the linker args construction.\n     assert!(base_cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n-    let cmd = &mut *codegen_results.linker_info.to_linker(base_cmd, &sess, flavor);\n+    let cmd = &mut *codegen_results.crate_info.linker_info.to_linker(base_cmd, &sess, flavor);\n     let link_output_kind = link_output_kind(sess, crate_type);\n \n     // ------------ Early order-dependent options ------------\n@@ -1986,10 +1986,10 @@ fn add_order_independent_options(\n     if flavor == LinkerFlavor::PtxLinker {\n         // Provide the linker with fallback to internal `target-cpu`.\n         cmd.arg(\"--fallback-arch\");\n-        cmd.arg(&codegen_results.linker_info.target_cpu);\n+        cmd.arg(&codegen_results.crate_info.linker_info.target_cpu);\n     } else if flavor == LinkerFlavor::BpfLinker {\n         cmd.arg(\"--cpu\");\n-        cmd.arg(&codegen_results.linker_info.target_cpu);\n+        cmd.arg(&codegen_results.crate_info.linker_info.target_cpu);\n         cmd.arg(\"--cpu-features\");\n         cmd.arg(match &sess.opts.cg.target_feature {\n             feat if !feat.is_empty() => feat,"}, {"sha": "49b588294837962391114f9b58a332465fdf1a11", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=323a74779fca1b269daed42f16864d7fef18ba47", "patch": "@@ -35,7 +35,7 @@ pub fn disable_localization(linker: &mut Command) {\n \n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n-#[derive(Encodable, Decodable)]\n+#[derive(Debug, Encodable, Decodable)]\n pub struct LinkerInfo {\n     pub(super) target_cpu: String,\n     exports: FxHashMap<CrateType, Vec<String>>,"}, {"sha": "41823f7d80d69acd3d28c95060a91c4b517c33b4", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=323a74779fca1b269daed42f16864d7fef18ba47", "patch": "@@ -1,5 +1,4 @@\n use super::link::{self, ensure_removed};\n-use super::linker::LinkerInfo;\n use super::lto::{self, SerializedModule};\n use super::symbol_export::symbol_name_for_instance_in_crate;\n \n@@ -430,8 +429,7 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let no_builtins = tcx.sess.contains_name(crate_attrs, sym::no_builtins);\n     let is_compiler_builtins = tcx.sess.contains_name(crate_attrs, sym::compiler_builtins);\n \n-    let linker_info = LinkerInfo::new(tcx, target_cpu);\n-    let crate_info = CrateInfo::new(tcx);\n+    let crate_info = CrateInfo::new(tcx, target_cpu);\n \n     let regular_config =\n         ModuleConfig::new(ModuleKind::Regular, sess, no_builtins, is_compiler_builtins);\n@@ -461,7 +459,6 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     OngoingCodegen {\n         backend,\n         metadata,\n-        linker_info,\n         crate_info,\n \n         coordinator_send,\n@@ -1799,7 +1796,6 @@ impl SharedEmitterMain {\n pub struct OngoingCodegen<B: ExtraBackendMethods> {\n     pub backend: B,\n     pub metadata: EncodedMetadata,\n-    pub linker_info: LinkerInfo,\n     pub crate_info: CrateInfo,\n     pub coordinator_send: Sender<Box<dyn Any + Send>>,\n     pub codegen_worker_receive: Receiver<Message<B>>,\n@@ -1842,7 +1838,6 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n         (\n             CodegenResults {\n                 metadata: self.metadata,\n-                linker_info: self.linker_info,\n                 crate_info: self.crate_info,\n \n                 modules: compiled_modules.modules,"}, {"sha": "234825b39094ec544ccf16da27337980ecec02ef", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=323a74779fca1b269daed42f16864d7fef18ba47", "patch": "@@ -1,3 +1,4 @@\n+use crate::back::linker::LinkerInfo;\n use crate::back::write::{\n     compute_per_cgu_lto_type, start_async_codegen, submit_codegened_module_to_llvm,\n     submit_post_lto_module_to_llvm, submit_pre_lto_module_to_llvm, ComputedLtoType, OngoingCodegen,\n@@ -754,7 +755,8 @@ impl<B: ExtraBackendMethods> Drop for AbortCodegenOnDrop<B> {\n }\n \n impl CrateInfo {\n-    pub fn new(tcx: TyCtxt<'_>) -> CrateInfo {\n+    pub fn new(tcx: TyCtxt<'_>, target_cpu: String) -> CrateInfo {\n+        let linker_info = LinkerInfo::new(tcx, target_cpu);\n         let local_crate_name = tcx.crate_name(LOCAL_CRATE);\n         let crate_attrs = tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n         let subsystem = tcx.sess.first_attr_value_str_by_name(crate_attrs, sym::windows_subsystem);\n@@ -770,6 +772,7 @@ impl CrateInfo {\n         });\n \n         let mut info = CrateInfo {\n+            linker_info,\n             local_crate_name,\n             panic_runtime: None,\n             compiler_builtins: None,"}, {"sha": "bcd9182f58da366614cbc2aee49db4f6bd993457", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323a74779fca1b269daed42f16864d7fef18ba47/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=323a74779fca1b269daed42f16864d7fef18ba47", "patch": "@@ -135,6 +135,7 @@ impl From<&cstore::NativeLib> for NativeLib {\n /// and the corresponding properties without referencing information outside of a `CrateInfo`.\n #[derive(Debug, Encodable, Decodable)]\n pub struct CrateInfo {\n+    pub linker_info: back::linker::LinkerInfo,\n     pub local_crate_name: Symbol,\n     pub panic_runtime: Option<CrateNum>,\n     pub compiler_builtins: Option<CrateNum>,\n@@ -157,7 +158,6 @@ pub struct CodegenResults {\n     pub allocator_module: Option<CompiledModule>,\n     pub metadata_module: Option<CompiledModule>,\n     pub metadata: rustc_middle::middle::cstore::EncodedMetadata,\n-    pub linker_info: back::linker::LinkerInfo,\n     pub crate_info: CrateInfo,\n }\n "}]}