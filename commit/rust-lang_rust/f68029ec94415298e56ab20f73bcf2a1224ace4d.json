{"sha": "f68029ec94415298e56ab20f73bcf2a1224ace4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ODAyOWVjOTQ0MTUyOThlNTZhYjIwZjczYmNmMmExMjI0YWNlNGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-18T21:39:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-20T19:27:51Z"}, "message": "Make fatal errors work with codes, add to typeck", "tree": {"sha": "2f45d58f772cba8be3ef47d055b668a0f59ba8eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f45d58f772cba8be3ef47d055b668a0f59ba8eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f68029ec94415298e56ab20f73bcf2a1224ace4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f68029ec94415298e56ab20f73bcf2a1224ace4d", "html_url": "https://github.com/rust-lang/rust/commit/f68029ec94415298e56ab20f73bcf2a1224ace4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f68029ec94415298e56ab20f73bcf2a1224ace4d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c5225c5bf31dcca141c36ce1b5850ff2df79b9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5225c5bf31dcca141c36ce1b5850ff2df79b9c", "html_url": "https://github.com/rust-lang/rust/commit/0c5225c5bf31dcca141c36ce1b5850ff2df79b9c"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "0392fbfdeaecca8f95a7373f9b4b2329f7458a66", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f68029ec94415298e56ab20f73bcf2a1224ace4d", "patch": "@@ -69,6 +69,9 @@ impl Session {\n     pub fn span_fatal(&self, sp: Span, msg: &str) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n+    pub fn span_fatal_with_code(&self, sp: Span, msg: &str, code: &str) -> ! {\n+        self.diagnostic().span_fatal_with_code(sp, msg, code)\n+    }\n     pub fn fatal(&self, msg: &str) -> ! {\n         self.diagnostic().handler().fatal(msg)\n     }"}, {"sha": "cfcc65bd15ace43c66519b2d1f78a3c798396097", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f68029ec94415298e56ab20f73bcf2a1224ace4d", "patch": "@@ -339,22 +339,22 @@ fn create_substs_for_ast_path<'tcx>(\n         } else {\n             \"expected\"\n         };\n-        this.tcx().sess.span_fatal(span,\n-                                   &format!(\"wrong number of type arguments: {} {}, found {}\",\n+        span_fatal!(this.tcx().sess, span, E0243,\n+                                   \"wrong number of type arguments: {} {}, found {}\",\n                                            expected,\n                                            required_ty_param_count,\n-                                           supplied_ty_param_count)[]);\n+                                           supplied_ty_param_count);\n     } else if supplied_ty_param_count > formal_ty_param_count {\n         let expected = if required_ty_param_count < formal_ty_param_count {\n             \"expected at most\"\n         } else {\n             \"expected\"\n         };\n-        this.tcx().sess.span_fatal(span,\n-                                   &format!(\"wrong number of type arguments: {} {}, found {}\",\n+        span_fatal!(this.tcx().sess, span, E0244,\n+                                   \"wrong number of type arguments: {} {}, found {}\",\n                                            expected,\n                                            formal_ty_param_count,\n-                                           supplied_ty_param_count)[]);\n+                                           supplied_ty_param_count);\n     }\n \n     let mut substs = Substs::new_type(types, regions);\n@@ -557,10 +557,9 @@ pub fn instantiate_trait_ref<'tcx>(\n             trait_ref\n         }\n         _ => {\n-            this.tcx().sess.span_fatal(\n-                ast_trait_ref.path.span,\n-                &format!(\"`{}` is not a trait\",\n-                        ast_trait_ref.path.user_string(this.tcx()))[]);\n+            span_fatal!(this.tcx().sess, ast_trait_ref.path.span, E0245,\n+                \"`{}` is not a trait\",\n+                        ast_trait_ref.path.user_string(this.tcx()));\n         }\n     }\n }\n@@ -1036,7 +1035,7 @@ pub fn ast_ty_to_ty<'tcx>(\n     match ast_ty_to_ty_cache.get(&ast_ty.id) {\n         Some(&ty::atttce_resolved(ty)) => return ty,\n         Some(&ty::atttce_unresolved) => {\n-            tcx.sess.span_fatal(ast_ty.span,\n+            span_fatal!(tcx.sess, ast_ty.span, E0246,\n                                 \"illegal recursive type; insert an enum \\\n                                  or struct in the cycle, if this is \\\n                                  desired\");\n@@ -1136,9 +1135,9 @@ pub fn ast_ty_to_ty<'tcx>(\n                         ty::mk_self_type(tcx)\n                     }\n                     def::DefMod(id) => {\n-                        tcx.sess.span_fatal(ast_ty.span,\n-                            &format!(\"found module name used as a type: {}\",\n-                                    tcx.map.node_to_string(id.node))[]);\n+                        span_fatal!(tcx.sess, ast_ty.span, E0247,\n+                            \"found module name used as a type: {}\",\n+                                    tcx.map.node_to_string(id.node));\n                     }\n                     def::DefPrimTy(_) => {\n                         panic!(\"DefPrimTy arm missed in previous ast_ty_to_prim_ty call\");\n@@ -1164,10 +1163,10 @@ pub fn ast_ty_to_ty<'tcx>(\n                         associated_path_def_to_ty(this, ast_ty, provenance, assoc_ident.name)\n                     }\n                     _ => {\n-                        tcx.sess.span_fatal(ast_ty.span,\n-                                            &format!(\"found value name used \\\n+                        span_fatal!(tcx.sess, ast_ty.span, E0248,\n+                                            \"found value name used \\\n                                                      as a type: {:?}\",\n-                                                    a_def)[]);\n+                                                    a_def);\n                     }\n                 }\n             }\n@@ -1185,17 +1184,16 @@ pub fn ast_ty_to_ty<'tcx>(\n                                 ty::mk_vec(tcx, ast_ty_to_ty(this, rscope, &**ty),\n                                            Some(i as uint)),\n                             _ => {\n-                                tcx.sess.span_fatal(\n-                                    ast_ty.span, \"expected constant expr for array length\");\n+                                span_fatal!(tcx.sess, ast_ty.span, E0249,\n+                                            \"expected constant expr for array length\");\n                             }\n                         }\n                     }\n                     Err(ref r) => {\n-                        tcx.sess.span_fatal(\n-                            ast_ty.span,\n-                            &format!(\"expected constant expr for array \\\n+                        span_fatal!(tcx.sess, ast_ty.span, E0250,\n+                            \"expected constant expr for array \\\n                                      length: {}\",\n-                                    *r)[]);\n+                                    *r);\n                     }\n                 }\n             }"}, {"sha": "db4962b0d22db299b517bf75c1c9750a23a86131", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f68029ec94415298e56ab20f73bcf2a1224ace4d", "patch": "@@ -5224,7 +5224,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n             \"get_tydesc\" => {\n               let tydesc_ty = match ty::get_tydesc_ty(ccx.tcx) {\n                   Ok(t) => t,\n-                  Err(s) => { tcx.sess.span_fatal(it.span, &s[]); }\n+                  Err(s) => { span_fatal!(tcx.sess, it.span, E0240, \"{}\", &s[]); }\n               };\n               let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {\n                   ty: tydesc_ty,"}, {"sha": "3627fa41160608adf2778a3593e93737fc780277", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=f68029ec94415298e56ab20f73bcf2a1224ace4d", "patch": "@@ -160,7 +160,18 @@ register_diagnostics! {\n     E0236, // no lang item for range syntax\n     E0237, // no lang item for range syntax\n     E0238, // parenthesized parameters may only be used with a trait\n-    E0239  // `next` method of `Iterator` trait has unexpected type\n+    E0239, // `next` method of `Iterator` trait has unexpected type\n+    E0240,\n+    E0241,\n+    E0242, // internal error looking up a definition\n+    E0243, // wrong number of type arguments\n+    E0244, // wrong number of type arguments\n+    E0245, // not a trait\n+    E0246, // illegal recursive type\n+    E0247, // found module name used as a type\n+    E0248, // found value name used as a type\n+    E0249, // expected constant expr for array length\n+    E0250  // expected constant expr for array length\n }\n \n __build_diagnostic_array! { DIAGNOSTICS }"}, {"sha": "78007f3552ece5b61d336e719d5f0a4d6b286186", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=f68029ec94415298e56ab20f73bcf2a1224ace4d", "patch": "@@ -162,7 +162,7 @@ fn lookup_def_tcx(tcx:&ty::ctxt, sp: Span, id: ast::NodeId) -> def::Def {\n     match tcx.def_map.borrow().get(&id) {\n         Some(x) => x.clone(),\n         _ => {\n-            tcx.sess.span_fatal(sp, \"internal error looking up a definition\")\n+            span_fatal!(tcx.sess, sp, E0242, \"internal error looking up a definition\")\n         }\n     }\n }"}, {"sha": "b26ec64c24bf2d98fce18cc2733b36951ff5145a", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=f68029ec94415298e56ab20f73bcf2a1224ace4d", "patch": "@@ -92,6 +92,10 @@ impl SpanHandler {\n         self.handler.emit(Some((&self.cm, sp)), msg, Fatal);\n         panic!(FatalError);\n     }\n+    pub fn span_fatal_with_code(&self, sp: Span, msg: &str, code: &str) -> ! {\n+        self.handler.emit_with_code(Some((&self.cm, sp)), msg, code, Fatal);\n+        panic!(FatalError);\n+    }\n     pub fn span_err(&self, sp: Span, msg: &str) {\n         self.handler.emit(Some((&self.cm, sp)), msg, Error);\n         self.handler.bump_err_count();"}, {"sha": "5bd683c86aecac268352eddcc0ba0b34f234cf7b", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f68029ec94415298e56ab20f73bcf2a1224ace4d/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=f68029ec94415298e56ab20f73bcf2a1224ace4d", "patch": "@@ -14,6 +14,14 @@ macro_rules! register_diagnostic {\n     ($code:tt) => (__register_diagnostic! { $code })\n }\n \n+#[macro_export]\n+macro_rules! span_fatal {\n+    ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n+        __diagnostic_used!($code);\n+        $session.span_fatal_with_code($span, format!($($message)*).as_slice(), stringify!($code))\n+    })\n+}\n+\n #[macro_export]\n macro_rules! span_err {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({"}]}