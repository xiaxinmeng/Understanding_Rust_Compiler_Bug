{"sha": "cfd5fb51027b4baa854242e1c941a48e4e850e47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZDVmYjUxMDI3YjRiYWE4NTQyNDJlMWM5NDFhNDhlNGU4NTBlNDc=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T09:10:42Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T18:49:38Z"}, "message": "Reuse `to_bits` instead of badly reinventing it", "tree": {"sha": "5fcffa621d257e69ab5bb1d7277008b4c1ea5bd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fcffa621d257e69ab5bb1d7277008b4c1ea5bd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfd5fb51027b4baa854242e1c941a48e4e850e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd5fb51027b4baa854242e1c941a48e4e850e47", "html_url": "https://github.com/rust-lang/rust/commit/cfd5fb51027b4baa854242e1c941a48e4e850e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfd5fb51027b4baa854242e1c941a48e4e850e47/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50628b73734fe43d394edda79ba1132f5af35be6", "url": "https://api.github.com/repos/rust-lang/rust/commits/50628b73734fe43d394edda79ba1132f5af35be6", "html_url": "https://github.com/rust-lang/rust/commit/50628b73734fe43d394edda79ba1132f5af35be6"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "32cad88edb0379a358bfb927e575678e2a6e01dc", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cfd5fb51027b4baa854242e1c941a48e4e850e47/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd5fb51027b4baa854242e1c941a48e4e850e47/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=cfd5fb51027b4baa854242e1c941a48e4e850e47", "patch": "@@ -1092,27 +1092,24 @@ pub fn compare_const_vals<'a, 'tcx>(\n                 (\n                     Some(Value::ScalarPair(\n                         Scalar::Ptr(ptr_a),\n-                        Scalar::Bits {\n-                            bits: size_a,\n-                            defined: defined_a,\n-                        },\n+                        len_a,\n                     )),\n                     Some(Value::ScalarPair(\n                         Scalar::Ptr(ptr_b),\n-                        Scalar::Bits {\n-                            bits: size_b,\n-                            defined: defined_b,\n-                        },\n+                        len_b,\n                     ))\n-                ) if size_a == size_b &&\n-                     ptr_a.offset.bytes() == 0 && ptr_b.offset.bytes() == 0 &&\n-                     tcx.data_layout.pointer_size.bits() <= defined_a.into() &&\n-                     tcx.data_layout.pointer_size.bits() <= defined_b.into() => {\n-                    let map = tcx.alloc_map.lock();\n-                    let alloc_a = map.unwrap_memory(ptr_a.alloc_id);\n-                    let alloc_b = map.unwrap_memory(ptr_b.alloc_id);\n-                    if alloc_a.bytes.len() as u64 == size_a as u64 {\n-                        return from_bool(alloc_a == alloc_b);\n+                ) if ptr_a.offset.bytes() == 0 && ptr_b.offset.bytes() == 0 => {\n+                    if let Ok(len_a) = len_a.to_bits(tcx.data_layout.pointer_size) {\n+                        if let Ok(len_b) = len_b.to_bits(tcx.data_layout.pointer_size) {\n+                            if len_a == len_b {\n+                                let map = tcx.alloc_map.lock();\n+                                let alloc_a = map.unwrap_memory(ptr_a.alloc_id);\n+                                let alloc_b = map.unwrap_memory(ptr_b.alloc_id);\n+                                if alloc_a.bytes.len() as u128 == len_a {\n+                                    return from_bool(alloc_a == alloc_b);\n+                                }\n+                            }\n+                        }\n                     }\n                 }\n                 _ => (),"}]}