{"sha": "a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZTU2OGJjYzg3ZmE4Y2U0YzA0YTk1YjI0NDExNjdlMjhlOTQ1OGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-19T04:12:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-19T04:12:43Z"}, "message": "Auto merge of #4551 - mikerite:fix-ice-reporting, r=llogiq\n\nFix ice reporting\n\nchangelog: none", "tree": {"sha": "0676d6bd8029ab25fe73313b0ddcbfdfb8727175", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0676d6bd8029ab25fe73313b0ddcbfdfb8727175"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "html_url": "https://github.com/rust-lang/rust/commit/a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535bc1d7046ed640dd013aacfce7426e16e7459d", "url": "https://api.github.com/repos/rust-lang/rust/commits/535bc1d7046ed640dd013aacfce7426e16e7459d", "html_url": "https://github.com/rust-lang/rust/commit/535bc1d7046ed640dd013aacfce7426e16e7459d"}, {"sha": "16ce071bed9251712e79f002f35af1bce87700aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ce071bed9251712e79f002f35af1bce87700aa", "html_url": "https://github.com/rust-lang/rust/commit/16ce071bed9251712e79f002f35af1bce87700aa"}], "stats": {"total": 153, "additions": 90, "deletions": 63}, "files": [{"sha": "023fd5693183a07e8331445a5468bf8f8132c38f", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_copy, match_def_path, paths, span_note_and_lint};\n+use crate::utils::{is_copy, match_def_path, paths, qpath_res, span_note_and_lint};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -114,7 +114,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n             if let ExprKind::Call(ref path, ref args) = expr.node;\n             if let ExprKind::Path(ref qpath) = path.node;\n             if args.len() == 1;\n-            if let Some(def_id) = cx.tables.qpath_res(qpath, path.hir_id).opt_def_id();\n+            if let Some(def_id) = qpath_res(cx, qpath, path.hir_id).opt_def_id();\n             then {\n                 let lint;\n                 let msg;"}, {"sha": "b332148cbddcd29f22a586bf6b8b2e6e04163168", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -1,6 +1,6 @@\n use std::convert::TryFrom;\n \n-use crate::utils::{iter_input_pats, snippet, snippet_opt, span_lint, type_is_unsafe_function};\n+use crate::utils::{iter_input_pats, qpath_res, snippet, snippet_opt, span_lint, type_is_unsafe_function};\n use matches::matches;\n use rustc::hir;\n use rustc::hir::def::Res;\n@@ -318,7 +318,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n impl<'a, 'tcx> DerefVisitor<'a, 'tcx> {\n     fn check_arg(&self, ptr: &hir::Expr) {\n         if let hir::ExprKind::Path(ref qpath) = ptr.node {\n-            if let Res::Local(id) = self.cx.tables.qpath_res(qpath, ptr.hir_id) {\n+            if let Res::Local(id) = qpath_res(self.cx, qpath, ptr.hir_id) {\n                 if self.ptrs.contains(&id) {\n                     span_lint(\n                         self.cx,"}, {"sha": "4b1b57b4808a7287a9e2aeb47efa2c422ac10ec2", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{higher, snippet, span_lint_and_then};\n+use crate::utils::{higher, qpath_res, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::def::Res;\n@@ -145,7 +145,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         if_chain! {\n             if let hir::ExprKind::Path(ref qpath) = expr.node;\n-            if let Res::Local(local_id) = self.cx.tables.qpath_res(qpath, expr.hir_id);\n+            if let Res::Local(local_id) = qpath_res(self.cx, qpath, expr.hir_id);\n             if self.id == local_id;\n             then {\n                 self.used = true;\n@@ -170,7 +170,7 @@ fn check_assign<'a, 'tcx>(\n         if let hir::StmtKind::Semi(ref expr) = expr.node;\n         if let hir::ExprKind::Assign(ref var, ref value) = expr.node;\n         if let hir::ExprKind::Path(ref qpath) = var.node;\n-        if let Res::Local(local_id) = cx.tables.qpath_res(qpath, var.hir_id);\n+        if let Res::Local(local_id) = qpath_res(cx, qpath, var.hir_id);\n         if decl == local_id;\n         then {\n             let mut v = UsedVisitor {"}, {"sha": "2db8acc4b95e54e08623cac05367731f68608bb0", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -11,7 +11,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n // use rustc::middle::region::CodeExtent;\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n-use crate::utils::{is_type_diagnostic_item, sext, sugg};\n+use crate::utils::{is_type_diagnostic_item, qpath_res, sext, sugg};\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::middle::mem_categorization::Categorization;\n@@ -754,7 +754,7 @@ fn same_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr, var: HirId) -> bo\n         if let ExprKind::Path(ref qpath) = expr.node;\n         if let QPath::Resolved(None, ref path) = *qpath;\n         if path.segments.len() == 1;\n-        if let Res::Local(local_id) = cx.tables.qpath_res(qpath, expr.hir_id);\n+        if let Res::Local(local_id) = qpath_res(cx, qpath, expr.hir_id);\n         // our variable!\n         if local_id == var;\n         then {\n@@ -1618,7 +1618,7 @@ fn check_for_mutability(cx: &LateContext<'_, '_>, bound: &Expr) -> Option<HirId>\n         if let ExprKind::Path(ref qpath) = bound.node;\n         if let QPath::Resolved(None, _) = *qpath;\n         then {\n-            let res = cx.tables.qpath_res(qpath, bound.hir_id);\n+            let res = qpath_res(cx, qpath, bound.hir_id);\n             if let Res::Local(node_id) = res {\n                 let node_str = cx.tcx.hir().get(node_id);\n                 if_chain! {\n@@ -1762,7 +1762,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                     if self.prefer_mutable {\n                         self.indexed_mut.insert(seqvar.segments[0].ident.name);\n                     }\n-                    let res = self.cx.tables.qpath_res(seqpath, seqexpr.hir_id);\n+                    let res = qpath_res(self.cx, seqpath, seqexpr.hir_id);\n                     match res {\n                         Res::Local(hir_id) => {\n                             let parent_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n@@ -1824,7 +1824,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             if let QPath::Resolved(None, ref path) = *qpath;\n             if path.segments.len() == 1;\n             then {\n-                if let Res::Local(local_id) = self.cx.tables.qpath_res(qpath, expr.hir_id) {\n+                if let Res::Local(local_id) = qpath_res(self.cx, qpath, expr.hir_id) {\n                     if local_id == self.var {\n                         self.nonindex = true;\n                     } else {\n@@ -2163,7 +2163,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n \n fn var_def_id(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<HirId> {\n     if let ExprKind::Path(ref qpath) = expr.node {\n-        let path_res = cx.tables.qpath_res(qpath, expr.hir_id);\n+        let path_res = qpath_res(cx, qpath, expr.hir_id);\n         if let Res::Local(node_id) = path_res {\n             return Some(node_id);\n         }\n@@ -2355,7 +2355,7 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n         if_chain! {\n             if let ExprKind::Path(ref qpath) = ex.node;\n             if let QPath::Resolved(None, _) = *qpath;\n-            let res = self.cx.tables.qpath_res(qpath, ex.hir_id);\n+            let res = qpath_res(self.cx, qpath, ex.hir_id);\n             then {\n                 match res {\n                     Res::Local(node_id) => {"}, {"sha": "9d457f453e6284e4d63db889c180fbf622381c07", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_def_path, paths, span_lint};\n+use crate::utils::{match_def_path, paths, qpath_res, span_lint};\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -29,7 +29,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemForget {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Call(ref path_expr, ref args) = e.node {\n             if let ExprKind::Path(ref qpath) = path_expr.node {\n-                if let Some(def_id) = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id() {\n+                if let Some(def_id) = qpath_res(cx, qpath, path_expr.hir_id).opt_def_id() {\n                     if match_def_path(cx, def_id, &paths::MEM_FORGET) {\n                         let forgot_ty = cx.tables.expr_ty(&args[0]);\n "}, {"sha": "96df13e61effcc61ab375f05b9b343e12867f835", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{has_drop, snippet_opt, span_lint, span_lint_and_sugg};\n+use crate::utils::{has_drop, qpath_res, snippet_opt, span_lint, span_lint_and_sugg};\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -67,7 +67,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n         },\n         ExprKind::Call(ref callee, ref args) => {\n             if let ExprKind::Path(ref qpath) = callee.node {\n-                let res = cx.tables.qpath_res(qpath, callee.hir_id);\n+                let res = qpath_res(cx, qpath, callee.hir_id);\n                 match res {\n                     Res::Def(DefKind::Struct, ..) | Res::Def(DefKind::Variant, ..) | Res::Def(DefKind::Ctor(..), _) => {\n                         !has_drop(cx, cx.tables.expr_ty(expr)) && args.iter().all(|arg| has_no_effect(cx, arg))\n@@ -145,7 +145,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec\n         },\n         ExprKind::Call(ref callee, ref args) => {\n             if let ExprKind::Path(ref qpath) = callee.node {\n-                let res = cx.tables.qpath_res(qpath, callee.hir_id);\n+                let res = qpath_res(cx, qpath, callee.hir_id);\n                 match res {\n                     Res::Def(DefKind::Struct, ..) | Res::Def(DefKind::Variant, ..) | Res::Def(DefKind::Ctor(..), _)\n                         if !has_drop(cx, cx.tables.expr_ty(expr)) =>"}, {"sha": "992baa05e78e7050c37d86960922748e070487f1", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -14,7 +14,7 @@ use rustc_errors::Applicability;\n use rustc_typeck::hir_ty_to_ty;\n use syntax_pos::{InnerSpan, Span, DUMMY_SP};\n \n-use crate::utils::{in_constant, is_copy, span_lint_and_then};\n+use crate::utils::{in_constant, is_copy, qpath_res, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for declaration of `const` items which is interior\n@@ -195,7 +195,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n             }\n \n             // Make sure it is a const item.\n-            match cx.tables.qpath_res(qpath, expr.hir_id) {\n+            match qpath_res(cx, qpath, expr.hir_id) {\n                 Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssocConst, _) => {},\n                 _ => return,\n             };"}, {"sha": "469306aa405b215971a94c82345168900718a3f7", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -24,7 +24,7 @@ use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, int_bits, last_path_segment, match_def_path,\n-    match_path, multispan_sugg, same_tys, sext, snippet, snippet_opt, snippet_with_applicability,\n+    match_path, multispan_sugg, qpath_res, same_tys, sext, snippet, snippet_opt, snippet_with_applicability,\n     snippet_with_macro_callsite, span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n@@ -218,7 +218,7 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath, path: &[&str])\n             _ => None,\n         });\n         if let TyKind::Path(ref qpath) = ty.node;\n-        if let Some(did) = cx.tables.qpath_res(qpath, ty.hir_id).opt_def_id();\n+        if let Some(did) = qpath_res(cx, qpath, ty.hir_id).opt_def_id();\n         if match_def_path(cx, did, path);\n         then {\n             return true;\n@@ -240,7 +240,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n     match hir_ty.node {\n         TyKind::Path(ref qpath) if !is_local => {\n             let hir_id = hir_ty.hir_id;\n-            let res = cx.tables.qpath_res(qpath, hir_id);\n+            let res = qpath_res(cx, qpath, hir_id);\n             if let Some(def_id) = res.opt_def_id() {\n                 if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                     if match_type_parameter(cx, qpath, &paths::VEC) {\n@@ -263,7 +263,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n                         });\n                         // ty is now _ at this point\n                         if let TyKind::Path(ref ty_qpath) = ty.node;\n-                        let res = cx.tables.qpath_res(ty_qpath, ty.hir_id);\n+                        let res = qpath_res(cx, ty_qpath, ty.hir_id);\n                         if let Some(def_id) = res.opt_def_id();\n                         if Some(def_id) == cx.tcx.lang_items().owned_box();\n                         // At this point, we know ty is Box<T>, now get T\n@@ -369,7 +369,7 @@ fn check_ty_rptr(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool, lt:\n     match mut_ty.ty.node {\n         TyKind::Path(ref qpath) => {\n             let hir_id = mut_ty.ty.hir_id;\n-            let def = cx.tables.qpath_res(qpath, hir_id);\n+            let def = qpath_res(cx, qpath, hir_id);\n             if_chain! {\n                 if let Some(def_id) = def.opt_def_id();\n                 if Some(def_id) == cx.tcx.lang_items().owned_box();"}, {"sha": "9165f8d74d7831bc1f2e453a2b58100db5d1260f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -273,6 +273,19 @@ pub fn path_to_res(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<(def::Res)\n     }\n }\n \n+pub fn qpath_res(cx: &LateContext<'_, '_>, qpath: &hir::QPath, id: hir::HirId) -> Res {\n+    match qpath {\n+        hir::QPath::Resolved(_, path) => path.res,\n+        hir::QPath::TypeRelative(..) => {\n+            if cx.tcx.has_typeck_tables(id.owner_def_id()) {\n+                cx.tcx.typeck_tables_of(id.owner_def_id()).qpath_res(qpath, id)\n+            } else {\n+                Res::Err\n+            }\n+        },\n+    }\n+}\n+\n /// Convenience function to get the `DefId` of a trait by path.\n /// It could be a trait or trait alias.\n pub fn get_trait_def_id(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<DefId> {"}, {"sha": "359d2f8530cbbc8be025408ee5e7f02f629c9309", "filename": "src/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -247,8 +247,9 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n+    rustc_driver::install_ice_hook();\n     exit(\n-        rustc_driver::report_ices_to_stderr_if_any(move || {\n+        rustc_driver::catch_fatal_errors(move || {\n             use std::env;\n \n             if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {"}, {"sha": "d9c9c2096d97c364f62fb2f686ce7e9b280b3a0c", "filename": "tests/ui/ice-4545.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/tests%2Fui%2Fice-4545.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/tests%2Fui%2Fice-4545.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fice-4545.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -0,0 +1,14 @@\n+fn repro() {\n+    trait Foo {\n+        type Bar;\n+    }\n+\n+    #[allow(dead_code)]\n+    struct Baz<T: Foo> {\n+        field: T::Bar,\n+    }\n+}\n+\n+fn main() {\n+    repro();\n+}"}, {"sha": "5a62957cdb47bac38fb98f519002bfcd548dc66e", "filename": "tests/ui/non_copy_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/tests%2Fui%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/tests%2Fui%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.rs?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_string_new, const_vec_new)]\n #![allow(clippy::ref_in_deref, dead_code)]\n \n use std::borrow::Cow;"}, {"sha": "2f325f9e3dfd2dadce4f4be555f900b26b33a5b8", "filename": "tests/ui/non_copy_const.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/tests%2Fui%2Fnon_copy_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5e568bcc87fa8ce4c04a95b2441167e28e9458f/tests%2Fui%2Fnon_copy_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.stderr?ref=a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "patch": "@@ -1,5 +1,5 @@\n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:10:1\n+  --> $DIR/non_copy_const.rs:9:1\n    |\n LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n    | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,23 +9,23 @@ LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n    = note: `#[deny(clippy::declare_interior_mutable_const)]` on by default\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:11:1\n+  --> $DIR/non_copy_const.rs:10:1\n    |\n LL | const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n    | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |\n    | help: make this a static item: `static`\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:12:1\n+  --> $DIR/non_copy_const.rs:11:1\n    |\n LL | const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n    | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |\n    | help: make this a static item: `static`\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:17:9\n+  --> $DIR/non_copy_const.rs:16:9\n    |\n LL |         const $name: $ty = $e;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -34,49 +34,49 @@ LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n    | ------------------------------------------ in this macro invocation\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:41:5\n+  --> $DIR/non_copy_const.rs:40:5\n    |\n LL |     const ATOMIC: AtomicUsize; //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:45:5\n+  --> $DIR/non_copy_const.rs:44:5\n    |\n LL |     const INPUT: T;\n    |     ^^^^^^^^^^^^^^^\n    |\n help: consider requiring `T` to be `Copy`\n-  --> $DIR/non_copy_const.rs:45:18\n+  --> $DIR/non_copy_const.rs:44:18\n    |\n LL |     const INPUT: T;\n    |                  ^\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:48:5\n+  --> $DIR/non_copy_const.rs:47:5\n    |\n LL |     const ASSOC: Self::NonCopyType;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider requiring `<Self as Trait<T>>::NonCopyType` to be `Copy`\n-  --> $DIR/non_copy_const.rs:48:18\n+  --> $DIR/non_copy_const.rs:47:18\n    |\n LL |     const ASSOC: Self::NonCopyType;\n    |                  ^^^^^^^^^^^^^^^^^\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:52:5\n+  --> $DIR/non_copy_const.rs:51:5\n    |\n LL |     const AN_INPUT: T = Self::INPUT;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider requiring `T` to be `Copy`\n-  --> $DIR/non_copy_const.rs:52:21\n+  --> $DIR/non_copy_const.rs:51:21\n    |\n LL |     const AN_INPUT: T = Self::INPUT;\n    |                     ^\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:17:9\n+  --> $DIR/non_copy_const.rs:16:9\n    |\n LL |         const $name: $ty = $e;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -85,49 +85,49 @@ LL |     declare_const!(ANOTHER_INPUT: T = Self::INPUT); //~ ERROR interior muta\n    |     ----------------------------------------------- in this macro invocation\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:61:5\n+  --> $DIR/non_copy_const.rs:60:5\n    |\n LL |     const SELF_2: Self;\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n help: consider requiring `Self` to be `Copy`\n-  --> $DIR/non_copy_const.rs:61:19\n+  --> $DIR/non_copy_const.rs:60:19\n    |\n LL |     const SELF_2: Self;\n    |                   ^^^^\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:82:5\n+  --> $DIR/non_copy_const.rs:81:5\n    |\n LL |     const ASSOC_3: AtomicUsize = AtomicUsize::new(14); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:85:5\n+  --> $DIR/non_copy_const.rs:84:5\n    |\n LL |     const U_SELF: U = U::SELF_2;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider requiring `U` to be `Copy`\n-  --> $DIR/non_copy_const.rs:85:19\n+  --> $DIR/non_copy_const.rs:84:19\n    |\n LL |     const U_SELF: U = U::SELF_2;\n    |                   ^\n \n error: a const item should never be interior mutable\n-  --> $DIR/non_copy_const.rs:88:5\n+  --> $DIR/non_copy_const.rs:87:5\n    |\n LL |     const T_ASSOC: T::NonCopyType = T::ASSOC;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider requiring `<T as Trait<u32>>::NonCopyType` to be `Copy`\n-  --> $DIR/non_copy_const.rs:88:20\n+  --> $DIR/non_copy_const.rs:87:20\n    |\n LL |     const T_ASSOC: T::NonCopyType = T::ASSOC;\n    |                    ^^^^^^^^^^^^^^\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:95:5\n+  --> $DIR/non_copy_const.rs:94:5\n    |\n LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^\n@@ -136,119 +136,119 @@ LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:96:16\n+  --> $DIR/non_copy_const.rs:95:16\n    |\n LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability\n    |                ^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:99:22\n+  --> $DIR/non_copy_const.rs:98:22\n    |\n LL |     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability\n    |                      ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:100:25\n+  --> $DIR/non_copy_const.rs:99:25\n    |\n LL |     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability\n    |                         ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:101:27\n+  --> $DIR/non_copy_const.rs:100:27\n    |\n LL |     let _once_ref_4 = &&&&ONCE_INIT; //~ ERROR interior mutability\n    |                           ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:102:26\n+  --> $DIR/non_copy_const.rs:101:26\n    |\n LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n    |                          ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:113:14\n+  --> $DIR/non_copy_const.rs:112:14\n    |\n LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:114:14\n+  --> $DIR/non_copy_const.rs:113:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:115:19\n+  --> $DIR/non_copy_const.rs:114:19\n    |\n LL |     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n    |                   ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:116:14\n+  --> $DIR/non_copy_const.rs:115:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:117:13\n+  --> $DIR/non_copy_const.rs:116:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:123:13\n+  --> $DIR/non_copy_const.rs:122:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:128:5\n+  --> $DIR/non_copy_const.rs:127:5\n    |\n LL |     CELL.set(2); //~ ERROR interior mutability\n    |     ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:129:16\n+  --> $DIR/non_copy_const.rs:128:16\n    |\n LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n    |                ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:142:5\n+  --> $DIR/non_copy_const.rs:141:5\n    |\n LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:143:16\n+  --> $DIR/non_copy_const.rs:142:16\n    |\n LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n    |                ^^^^^^^^^^^"}]}