{"sha": "c6e7917d6ed2ae36534b064a51697b54f497e02e", "node_id": "C_kwDOAAsO6NoAKGM2ZTc5MTdkNmVkMmFlMzY1MzRiMDY0YTUxNjk3YjU0ZjQ5N2UwMmU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-07T14:21:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-07T14:21:37Z"}, "message": "Fix up token_tree_to_syntax_node float split handling", "tree": {"sha": "935e9504ac5ff200aef72b833844edaf41f92587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/935e9504ac5ff200aef72b833844edaf41f92587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e7917d6ed2ae36534b064a51697b54f497e02e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e7917d6ed2ae36534b064a51697b54f497e02e", "html_url": "https://github.com/rust-lang/rust/commit/c6e7917d6ed2ae36534b064a51697b54f497e02e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e7917d6ed2ae36534b064a51697b54f497e02e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9053bcc65c41707e2272757fdccf3a97e167217d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9053bcc65c41707e2272757fdccf3a97e167217d", "html_url": "https://github.com/rust-lang/rust/commit/9053bcc65c41707e2272757fdccf3a97e167217d"}], "stats": {"total": 88, "additions": 76, "deletions": 12}, "files": [{"sha": "19d01630ef0885bed9c4d5286d9e99d05c453f7e", "filename": "crates/hir-def/src/item_tree.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7917d6ed2ae36534b064a51697b54f497e02e/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7917d6ed2ae36534b064a51697b54f497e02e/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs?ref=c6e7917d6ed2ae36534b064a51697b54f497e02e", "patch": "@@ -111,7 +111,8 @@ impl ItemTree {\n             Some(node) => node,\n             None => return Default::default(),\n         };\n-        if never!(syntax.kind() == SyntaxKind::ERROR) {\n+        if never!(syntax.kind() == SyntaxKind::ERROR, \"{:?} from {:?} {}\", file_id, syntax, syntax)\n+        {\n             // FIXME: not 100% sure why these crop up, but return an empty tree to avoid a panic\n             return Default::default();\n         }\n@@ -133,7 +134,7 @@ impl ItemTree {\n                     ctx.lower_macro_stmts(stmts)\n                 },\n                 _ => {\n-                    panic!(\"cannot create item tree from {syntax:?} {syntax}\");\n+                    panic!(\"cannot create item tree for file {file_id:?} from {syntax:?} {syntax}\");\n                 },\n             }\n         };"}, {"sha": "822bdcc122dc6633c49f34ef0d4d23d5dd45a32e", "filename": "crates/hir-def/src/macro_expansion_tests/proc_macros.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7917d6ed2ae36534b064a51697b54f497e02e/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7917d6ed2ae36534b064a51697b54f497e02e/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs?ref=c6e7917d6ed2ae36534b064a51697b54f497e02e", "patch": "@@ -104,7 +104,7 @@ macro_rules! id {\n         $($t)*\n     };\n }\n-id /*+errors*/! {\n+id! {\n     #[proc_macros::identity]\n     impl Foo for WrapBj {\n         async fn foo(&self) {\n@@ -113,18 +113,17 @@ id /*+errors*/! {\n     }\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n macro_rules! id {\n     ($($t:tt)*) => {\n         $($t)*\n     };\n }\n-/* parse error: expected SEMICOLON */\n #[proc_macros::identity] impl Foo for WrapBj {\n     async fn foo(&self ) {\n         self .0.id().await ;\n     }\n }\n-\"##]],\n+\"#]],\n     );\n }"}, {"sha": "8b9a3bca021de84772ec3b42c0cb5d4361fbf103", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7917d6ed2ae36534b064a51697b54f497e02e/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7917d6ed2ae36534b064a51697b54f497e02e/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=c6e7917d6ed2ae36534b064a51697b54f497e02e", "patch": "@@ -95,7 +95,7 @@ pub fn token_tree_to_syntax_node(\n             parser::Step::Token { kind, n_input_tokens: n_raw_tokens } => {\n                 tree_sink.token(kind, n_raw_tokens)\n             }\n-            parser::Step::FloatSplit { .. } => tree_sink.token(SyntaxKind::FLOAT_NUMBER, 1),\n+            parser::Step::FloatSplit { has_pseudo_dot } => tree_sink.float_split(has_pseudo_dot),\n             parser::Step::Enter { kind } => tree_sink.start_node(kind),\n             parser::Step::Exit => tree_sink.finish_node(),\n             parser::Step::Error { msg } => tree_sink.error(msg.to_string()),\n@@ -797,6 +797,41 @@ fn delim_to_str(d: tt::DelimiterKind, closing: bool) -> Option<&'static str> {\n }\n \n impl<'a> TtTreeSink<'a> {\n+    fn float_split(&mut self, has_pseudo_dot: bool) {\n+        let (text, _span) = match self.cursor.token_tree() {\n+            Some(tt::buffer::TokenTreeRef::Leaf(tt::Leaf::Literal(lit), _)) => {\n+                (lit.text.as_str(), lit.span)\n+            }\n+            _ => unreachable!(),\n+        };\n+        match text.split_once('.') {\n+            Some((left, right)) => {\n+                assert!(!left.is_empty());\n+                self.inner.start_node(SyntaxKind::NAME_REF);\n+                self.inner.token(SyntaxKind::INT_NUMBER, left);\n+                self.inner.finish_node();\n+\n+                // here we move the exit up, the original exit has been deleted in process\n+                self.inner.finish_node();\n+\n+                self.inner.token(SyntaxKind::DOT, \".\");\n+\n+                if has_pseudo_dot {\n+                    assert!(right.is_empty());\n+                } else {\n+                    self.inner.start_node(SyntaxKind::NAME_REF);\n+                    self.inner.token(SyntaxKind::INT_NUMBER, right);\n+                    self.inner.finish_node();\n+\n+                    // the parser creates an unbalanced start node, we are required to close it here\n+                    self.inner.finish_node();\n+                }\n+            }\n+            None => unreachable!(),\n+        }\n+        self.cursor = self.cursor.bump();\n+    }\n+\n     fn token(&mut self, kind: SyntaxKind, mut n_tokens: u8) {\n         if kind == LIFETIME_IDENT {\n             n_tokens = 2;"}, {"sha": "c05a2ca15023db61356ed58597afa496a0b39369", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7917d6ed2ae36534b064a51697b54f497e02e/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7917d6ed2ae36534b064a51697b54f497e02e/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=c6e7917d6ed2ae36534b064a51697b54f497e02e", "patch": "@@ -170,11 +170,38 @@ impl<'a> TtIter<'a> {\n         let mut res = vec![];\n \n         if cursor.is_root() {\n-            while curr != cursor {\n-                if let Some(token) = curr.token_tree() {\n-                    res.push(token.cloned());\n+            if float_splits.is_empty() {\n+                while curr != cursor {\n+                    if let Some(token) = curr.token_tree() {\n+                        res.push(token.cloned());\n+                    }\n+                    curr = curr.bump();\n+                }\n+            } else {\n+                // let mut float_splits = float_splits.into_iter().peekable();\n+                // while let Some(tt) = curr.token_tree() {\n+                //     let mut tt = tt.cloned();\n+                //     let mut tt_mut_ref = &mut tt;\n+                //     if let Some(fs) = float_splits.peek() {\n+                //         loop {\n+                //             curr = curr.bump_subtree();\n+                //             if curr == *fs {\n+                //                 float_splits.next();\n+                //             }\n+                //             if curr.is_root() {\n+                //                 break;\n+                //             }\n+                //         }\n+                //     }\n+                //     res.push(tt);\n+                // }\n+\n+                while curr != cursor {\n+                    if let Some(token) = curr.token_tree() {\n+                        res.push(token.cloned());\n+                    }\n+                    curr = curr.bump();\n                 }\n-                curr = curr.bump();\n             }\n         }\n         self.inner = self.inner.as_slice()[res.len()..].iter();"}, {"sha": "6c72b5994b58c81adef14f3d60d77668f64317d2", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7917d6ed2ae36534b064a51697b54f497e02e/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7917d6ed2ae36534b064a51697b54f497e02e/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=c6e7917d6ed2ae36534b064a51697b54f497e02e", "patch": "@@ -102,10 +102,12 @@ impl TopEntryPoint {\n                 match step {\n                     Step::Enter { .. } => depth += 1,\n                     Step::Exit => depth -= 1,\n-                    Step::FloatSplit { .. } | Step::Token { .. } | Step::Error { .. } => (),\n+                    Step::FloatSplit { .. } => depth -= 1,\n+                    Step::Token { .. } | Step::Error { .. } => (),\n                 }\n             }\n             assert!(!first, \"no tree at all\");\n+            assert_eq!(depth, 0, \"unbalanced tree\");\n         }\n \n         res"}]}