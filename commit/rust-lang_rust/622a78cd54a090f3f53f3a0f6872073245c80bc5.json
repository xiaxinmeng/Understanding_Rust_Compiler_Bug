{"sha": "622a78cd54a090f3f53f3a0f6872073245c80bc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMmE3OGNkNTRhMDkwZjNmNTNmM2EwZjY4NzIwNzMyNDVjODBiYzU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-10-01T15:15:15Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-10-01T15:15:15Z"}, "message": "handle nested generics in Generics::type_param/region_param\n\nFixes #44952.", "tree": {"sha": "35fa5d4a29c3e15b3d70d458b71a29268bcdadcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35fa5d4a29c3e15b3d70d458b71a29268bcdadcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/622a78cd54a090f3f53f3a0f6872073245c80bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/622a78cd54a090f3f53f3a0f6872073245c80bc5", "html_url": "https://github.com/rust-lang/rust/commit/622a78cd54a090f3f53f3a0f6872073245c80bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/622a78cd54a090f3f53f3a0f6872073245c80bc5/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0defa208dcb5a0f3c1ca5bc4df7acf52759ece44", "url": "https://api.github.com/repos/rust-lang/rust/commits/0defa208dcb5a0f3c1ca5bc4df7acf52759ece44", "html_url": "https://github.com/rust-lang/rust/commit/0defa208dcb5a0f3c1ca5bc4df7acf52759ece44"}], "stats": {"total": 79, "additions": 68, "deletions": 11}, "files": [{"sha": "72f24b62e682fd48a98bb0a51e6f4b10e547dada", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/622a78cd54a090f3f53f3a0f6872073245c80bc5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622a78cd54a090f3f53f3a0f6872073245c80bc5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=622a78cd54a090f3f53f3a0f6872073245c80bc5", "patch": "@@ -795,7 +795,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     // Account for the case where `did` corresponds to `Self`, which doesn't have\n                     // the expected type argument.\n                     if generics.types.len() > 0 {\n-                        let type_param = generics.type_param(param);\n+                        let type_param = generics.type_param(param, self.tcx);\n                         let hir = &self.tcx.hir;\n                         hir.as_local_node_id(type_param.def_id).map(|id| {\n                             // Get the `hir::TyParam` to verify wether it already has any bounds."}, {"sha": "c57ecb9b69c42d46a4c517d8517a83a0e70602d1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/622a78cd54a090f3f53f3a0f6872073245c80bc5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622a78cd54a090f3f53f3a0f6872073245c80bc5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=622a78cd54a090f3f53f3a0f6872073245c80bc5", "patch": "@@ -729,7 +729,7 @@ pub struct Generics {\n     pub has_late_bound_regions: Option<Span>,\n }\n \n-impl Generics {\n+impl<'a, 'gcx, 'tcx> Generics {\n     pub fn parent_count(&self) -> usize {\n         self.parent_regions as usize + self.parent_types as usize\n     }\n@@ -742,14 +742,28 @@ impl Generics {\n         self.parent_count() + self.own_count()\n     }\n \n-    pub fn region_param(&self, param: &EarlyBoundRegion) -> &RegionParameterDef {\n-        assert_eq!(self.parent_count(), 0);\n-        &self.regions[param.index as usize - self.has_self as usize]\n+    pub fn region_param(&'tcx self,\n+                        param: &EarlyBoundRegion,\n+                        tcx: TyCtxt<'a, 'gcx, 'tcx>)\n+                        -> &'tcx RegionParameterDef\n+    {\n+        if let Some(index) = param.index.checked_sub(self.parent_count() as u32) {\n+            &self.regions[index as usize - self.has_self as usize]\n+        } else {\n+            tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))\n+                .region_param(param, tcx)\n+        }\n     }\n \n-    pub fn type_param(&self, param: &ParamTy) -> &TypeParameterDef {\n-        assert_eq!(self.parent_count(), 0);\n-        &self.types[param.idx as usize - self.has_self as usize - self.regions.len()]\n+    pub fn type_param(&'tcx self,\n+                      param: &ParamTy,\n+                      tcx: TyCtxt<'a, 'gcx, 'tcx>) -> &TypeParameterDef {\n+        if let Some(idx) = param.idx.checked_sub(self.parent_count() as u32) {\n+            &self.types[idx as usize - self.has_self as usize - self.regions.len()]\n+        } else {\n+            tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))\n+                .type_param(param, tcx)\n+        }\n     }\n }\n "}, {"sha": "c8037ce081a71e6b5e47ef7e03db742b81069cd4", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/622a78cd54a090f3f53f3a0f6872073245c80bc5/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622a78cd54a090f3f53f3a0f6872073245c80bc5/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=622a78cd54a090f3f53f3a0f6872073245c80bc5", "patch": "@@ -515,11 +515,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let result = item_substs.iter().zip(impl_substs.iter())\n             .filter(|&(_, &k)| {\n                 if let Some(&ty::RegionKind::ReEarlyBound(ref ebr)) = k.as_region() {\n-                    !impl_generics.region_param(ebr).pure_wrt_drop\n+                    !impl_generics.region_param(ebr, self).pure_wrt_drop\n                 } else if let Some(&ty::TyS {\n                     sty: ty::TypeVariants::TyParam(ref pt), ..\n                 }) = k.as_type() {\n-                    !impl_generics.type_param(pt).pure_wrt_drop\n+                    !impl_generics.type_param(pt, self).pure_wrt_drop\n                 } else {\n                     // not a type or region param - this should be reported\n                     // as an error."}, {"sha": "a41d8b0e34228077c6e63cc2b03fa296071485be", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/622a78cd54a090f3f53f3a0f6872073245c80bc5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622a78cd54a090f3f53f3a0f6872073245c80bc5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs?ref=622a78cd54a090f3f53f3a0f6872073245c80bc5", "patch": "@@ -28,4 +28,14 @@ struct Foo<T> {\n     foo: &'static T\n }\n \n+trait X<T> {}\n+\n+struct Nested<K>(K);\n+impl<K> Nested<K> {\n+    fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+    }\n+    fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+    }\n+}\n+\n fn main() {}"}, {"sha": "c74302fe9b32b9fe36edd0a1febda58a956ec7e6", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/622a78cd54a090f3f53f3a0f6872073245c80bc5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/622a78cd54a090f3f53f3a0f6872073245c80bc5/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=622a78cd54a090f3f53f3a0f6872073245c80bc5", "patch": "@@ -26,5 +26,38 @@ note: ...so that the reference type `&'static T` does not outlive the data it po\n 28 |     foo: &'static T\n    |     ^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0309]: the parameter type `K` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:35:5\n+   |\n+34 |   impl<K> Nested<K> {\n+   |        - help: consider adding an explicit lifetime bound `K: 'a`...\n+35 | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+36 | |     }\n+   | |_____^\n+   |\n+note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:35:5\n+   |\n+35 | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+36 | |     }\n+   | |_____^\n+\n+error[E0309]: the parameter type `M` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:37:5\n+   |\n+37 |       fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+   |       ^                                                -- help: consider adding an explicit lifetime bound `M: 'a`...\n+   |  _____|\n+   | |\n+38 | |     }\n+   | |_____^\n+   |\n+note: ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:37:5\n+   |\n+37 | /     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+38 | |     }\n+   | |_____^\n+\n+error: aborting due to 4 previous errors\n "}]}