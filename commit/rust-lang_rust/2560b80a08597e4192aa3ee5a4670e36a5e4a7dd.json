{"sha": "2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "node_id": "C_kwDOAAsO6NoAKDI1NjBiODBhMDg1OTdlNDE5MmFhM2VlNWE0NjcwZTM2YTVlNGE3ZGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-28T04:41:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-28T04:41:13Z"}, "message": "Auto merge of #112000 - wesleywiser:safestack, r=Amanieu\n\nAdd support for LLVM SafeStack\n\nAdds support for LLVM [SafeStack] which provides backward edge control\nflow protection by separating the stack into two parts: data which is\nonly accessed in provable safe ways is allocated on the normal stack\n(the \"safe stack\") and all other data is placed in a separate allocation\n(the \"unsafe stack\").\n\nSafeStack support is enabled by passing `-Zsanitizer=safestack`.\n\n[SafeStack]: https://clang.llvm.org/docs/SafeStack.html\n\ncc `@rcvalle` #39699", "tree": {"sha": "ec75c4a52fa5946872d23a4cc34216d775700e3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec75c4a52fa5946872d23a4cc34216d775700e3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "html_url": "https://github.com/rust-lang/rust/commit/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "html_url": "https://github.com/rust-lang/rust/commit/b9c5fdc888e05be88269a47d40fd0d911ec2be0b"}, {"sha": "019d75b44e3f4349495890453d2d154a8f7ba116", "url": "https://api.github.com/repos/rust-lang/rust/commits/019d75b44e3f4349495890453d2d154a8f7ba116", "html_url": "https://github.com/rust-lang/rust/commit/019d75b44e3f4349495890453d2d154a8f7ba116"}], "stats": {"total": 173, "additions": 82, "deletions": 91}, "files": [{"sha": "6d00464e0a0b31cbf3755568c25ee34e044e8e7a", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -88,6 +88,9 @@ pub fn sanitize_attrs<'ll>(\n \n         attrs.push(llvm::AttributeKind::SanitizeMemTag.create_attr(cx.llcx));\n     }\n+    if enabled.contains(SanitizerSet::SAFESTACK) {\n+        attrs.push(llvm::AttributeKind::SanitizeSafeStack.create_attr(cx.llcx));\n+    }\n     attrs\n }\n "}, {"sha": "6ef3418cc5f77a0dd1c078b8321dbca73056a588", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -196,6 +196,7 @@ pub enum AttributeKind {\n     AllocSize = 37,\n     AllocatedPointer = 38,\n     AllocAlign = 39,\n+    SanitizeSafeStack = 40,\n }\n \n /// LLVMIntPredicate"}, {"sha": "5cc234268b0160b3f31ffecbbf9bece26623b63a", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -1188,6 +1188,9 @@ fn add_sanitizer_libraries(sess: &Session, crate_type: CrateType, linker: &mut d\n     if sanitizer.contains(SanitizerSet::HWADDRESS) {\n         link_sanitizer_runtime(sess, linker, \"hwasan\");\n     }\n+    if sanitizer.contains(SanitizerSet::SAFESTACK) {\n+        link_sanitizer_runtime(sess, linker, \"safestack\");\n+    }\n }\n \n fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {"}, {"sha": "af6f4d5eaf998b900c77d4562eecc2ffa2b348b6", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -96,6 +96,7 @@ enum LLVMRustAttribute {\n   AllocatedPointer = 38,\n   AllocAlign = 39,\n #endif\n+  SanitizeSafeStack = 40,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "ea04899ab6872a0f517c47d0257ad3fe5c61849c", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -234,6 +234,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n   case AllocAlign:\n     return Attribute::AllocAlign;\n #endif\n+  case SanitizeSafeStack:\n+    return Attribute::SafeStack;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }"}, {"sha": "007e720823bfaf37ae5ba76676ae25ed198d4a83", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -372,7 +372,7 @@ mod desc {\n     pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n     pub const parse_oom_strategy: &str = \"either `panic` or `abort`\";\n     pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `kcfi`, `kernel-address`, `leak`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\";\n+    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `kcfi`, `kernel-address`, `leak`, `memory`, `memtag`, `safestack`, `shadow-call-stack`, or `thread`\";\n     pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n     pub const parse_cfguard: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n@@ -694,6 +694,7 @@ mod parse {\n                     \"shadow-call-stack\" => SanitizerSet::SHADOWCALLSTACK,\n                     \"thread\" => SanitizerSet::THREAD,\n                     \"hwaddress\" => SanitizerSet::HWADDRESS,\n+                    \"safestack\" => SanitizerSet::SAFESTACK,\n                     _ => return false,\n                 }\n             }"}, {"sha": "62f94209cf04dd687ee767ccdf0793c144d93643", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -815,6 +815,7 @@ bitflags::bitflags! {\n         const SHADOWCALLSTACK = 1 << 7;\n         const KCFI    = 1 << 8;\n         const KERNELADDRESS = 1 << 9;\n+        const SAFESTACK = 1 << 10;\n     }\n }\n \n@@ -831,6 +832,7 @@ impl SanitizerSet {\n             SanitizerSet::LEAK => \"leak\",\n             SanitizerSet::MEMORY => \"memory\",\n             SanitizerSet::MEMTAG => \"memtag\",\n+            SanitizerSet::SAFESTACK => \"safestack\",\n             SanitizerSet::SHADOWCALLSTACK => \"shadow-call-stack\",\n             SanitizerSet::THREAD => \"thread\",\n             SanitizerSet::HWADDRESS => \"hwaddress\",\n@@ -871,6 +873,7 @@ impl IntoIterator for SanitizerSet {\n             SanitizerSet::THREAD,\n             SanitizerSet::HWADDRESS,\n             SanitizerSet::KERNELADDRESS,\n+            SanitizerSet::SAFESTACK,\n         ]\n         .iter()\n         .copied()\n@@ -2364,6 +2367,7 @@ impl Target {\n                                 Some(\"leak\") => SanitizerSet::LEAK,\n                                 Some(\"memory\") => SanitizerSet::MEMORY,\n                                 Some(\"memtag\") => SanitizerSet::MEMTAG,\n+                                Some(\"safestack\") => SanitizerSet::SAFESTACK,\n                                 Some(\"shadow-call-stack\") => SanitizerSet::SHADOWCALLSTACK,\n                                 Some(\"thread\") => SanitizerSet::THREAD,\n                                 Some(\"hwaddress\") => SanitizerSet::HWADDRESS,"}, {"sha": "deb15c02c68391e9e158e9be0f5515794c987beb", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -11,6 +11,7 @@ pub fn target() -> Target {\n         | SanitizerSet::CFI\n         | SanitizerSet::LEAK\n         | SanitizerSet::MEMORY\n+        | SanitizerSet::SAFESTACK\n         | SanitizerSet::THREAD;\n     base.supports_xray = true;\n "}, {"sha": "3fd0cca40e522f354fd4c412c015acc11dbae298", "filename": "src/bootstrap/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/src%2Fbootstrap%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/src%2Fbootstrap%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fllvm.rs?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -1017,7 +1017,7 @@ fn supported_sanitizers(\n         \"x86_64-unknown-illumos\" => common_libs(\"illumos\", \"x86_64\", &[\"asan\"]),\n         \"x86_64-pc-solaris\" => common_libs(\"solaris\", \"x86_64\", &[\"asan\"]),\n         \"x86_64-unknown-linux-gnu\" => {\n-            common_libs(\"linux\", \"x86_64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n+            common_libs(\"linux\", \"x86_64\", &[\"asan\", \"lsan\", \"msan\", \"safestack\", \"tsan\"])\n         }\n         \"x86_64-unknown-linux-musl\" => {\n             common_libs(\"linux\", \"x86_64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])"}, {"sha": "172048704f48d2ef7e45b0b067713af0f4aa093c", "filename": "src/doc/rustc/src/exploit-mitigations.md", "status": "modified", "additions": 31, "deletions": 88, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -55,88 +55,18 @@ Table I \\\n Summary of exploit mitigations supported by the Rust compiler when building\n programs for the Linux operating system on the AMD64 architecture and\n equivalent.\n-<table class=\"table\">\n-  <tr>\n-   <td><strong>Exploit mitigation</strong>\n-   </td>\n-   <td><strong>Supported and enabled by default</strong>\n-   </td>\n-   <td><strong>Since</strong>\n-   </td>\n-  </tr>\n-  <tr>\n-   <td>Position-independent executable\n-   </td>\n-   <td>Yes\n-   </td>\n-   <td>0.12.0 (2014-10-09)\n-   </td>\n-  </tr>\n-  <tr>\n-   <td>Integer overflow checks\n-   </td>\n-   <td>Yes (enabled when debug assertions are enabled, and disabled when debug assertions are disabled)\n-   </td>\n-   <td>1.1.0 (2015-06-25)\n-   </td>\n-  </tr>\n-  <tr>\n-   <td>Non-executable memory regions\n-   </td>\n-   <td>Yes\n-   </td>\n-   <td>1.8.0 (2016-04-14)\n-   </td>\n-  </tr>\n-  <tr>\n-   <td>Stack clashing protection\n-   </td>\n-   <td>Yes\n-   </td>\n-   <td>1.20.0 (2017-08-31)\n-   </td>\n-  </tr>\n-  <tr>\n-   <td>Read-only relocations and immediate binding\n-   </td>\n-   <td>Yes\n-   </td>\n-   <td>1.21.0 (2017-10-12)\n-   </td>\n-  </tr>\n-  <tr>\n-   <td>Heap corruption protection\n-   </td>\n-   <td>Yes\n-   </td>\n-   <td>1.32.0 (2019-01-17) (via operating system default or specified allocator)\n-   </td>\n-  </tr>\n-  <tr>\n-   <td>Stack smashing protection\n-   </td>\n-   <td>Yes\n-   </td>\n-   <td>Nightly\n-   </td>\n-  </tr>\n-  <tr>\n-   <td>Forward-edge control flow protection\n-   </td>\n-   <td>Yes\n-   </td>\n-   <td>Nightly\n-   </td>\n-  </tr>\n-  <tr>\n-   <td>Backward-edge control flow protection (e.g., shadow and safe stack)\n-   </td>\n-   <td>No\n-   </td>\n-   <td>\n-   </td>\n-  </tr>\n-</table>\n+\n+| Exploit mitigation | Supported and enabled by default | Since |\n+| - | - | - |\n+| Position-independent executable | Yes | 0.12.0 (2014-10-09) |\n+| Integer overflow checks | Yes (enabled when debug assertions are enabled, and disabled when debug assertions are disabled) | 1.1.0 (2015-06-25) |\n+| Non-executable memory regions | Yes | 1.8.0 (2016-04-14) |\n+| Stack clashing protection | Yes | 1.20.0 (2017-08-31) |\n+| Read-only relocations and immediate binding | Yes | 1.21.0 (2017-10-12) |\n+| Heap corruption protection | Yes | 1.32.0 (2019-01-17) (via operating system default or specified allocator) |\n+| Stack smashing protection | Yes | Nightly |\n+| Forward-edge control flow protection | Yes | Nightly |\n+| Backward-edge control flow protection (e.g., shadow and safe stack) | Yes | Nightly |\n \n <small id=\"fn:1\">1\\. See\n <https://github.com/rust-lang/rust/tree/master/compiler/rustc_target/src/spec>\n@@ -513,20 +443,21 @@ Newer processors provide hardware assistance for backward-edge control flow\n protection, such as ARM Pointer Authentication, and Intel Shadow Stack as\n part of Intel CET.\n \n-The Rust compiler does not support shadow or safe stack. There is work\n-currently ongoing to add support for the sanitizers[40], which may or may\n-not include support for safe stack<sup id=\"fnref:7\" role=\"doc-noteref\"><a\n-href=\"#fn:7\" class=\"footnote\">7</a></sup>.\n+The Rust compiler supports shadow stack for aarch64 only\n+<sup id=\"fnref:7\" role=\"doc-noteref\"><a href=\"#fn:7\" class=\"footnote\">7</a></sup>\n+on nightly Rust compilers [43]-[44]. Safe stack is available on nightly\n+Rust compilers [45]-[46].\n \n ```text\n $ readelf -s target/release/hello-rust | grep __safestack_init\n+  1177: 00000000000057b0   444 FUNC    GLOBAL DEFAULT    9 __safestack_init\n ```\n Fig. 16.\u2003Checking if LLVM SafeStack is enabled for a given binary.\n \n The presence of the `__safestack_init` symbol indicates that LLVM SafeStack\n-is enabled for a given binary. Conversely, the absence of the\n+is enabled for a given binary (see Fig. 16). Conversely, the absence of the\n `__safestack_init` symbol indicates that LLVM SafeStack is not enabled for a\n-given binary (see Fig. 16).\n+given binary.\n \n <small id=\"fn:7\">7\\. The shadow stack implementation for the AMD64\n architecture and equivalent in LLVM was removed due to performance and\n@@ -698,3 +629,15 @@ defaults (unrelated to `READ_IMPLIES_EXEC`).\n \n 42. bbjornse. \u201cadd codegen option for using LLVM stack smash protection #84197.\u201d\n     GitHub. <https://github.com/rust-lang/rust/pull/84197>\n+\n+43. ivanloz. \u201cAdd support for LLVM ShadowCallStack. #98208.\u201d GitHub.\n+    <https://github.com/rust-lang/rust/pull/98208>.\n+\n+44. \u201cShadowCallStack.\u201d The Rust Unstable Book.\n+    [https://doc.rust-lang.org/unstable-book/compiler-flags/sanitizer.html#shadowcallstack](../unstable-book/compiler-flags/sanitizer.html#shadowcallstack).\n+\n+45. W. Wiser. \u201cAdd support for LLVM SafeStack #112000\u201d GitHub.\n+    <https://github.com/rust-lang/rust/pull/112000>\n+\n+46. \u201cSafeStack.\u201d The Rust Unstable Book.\n+    [https://doc.rust-lang/org/unstable-book/compiler-flags/sanitizer.html#safestack](../unstable-book/compiler-flags/sanitizer.html#safestack)."}, {"sha": "49389b28c8fc7a06e47fd52c7705abc9e16d8218", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -21,7 +21,8 @@ This feature allows for use of one of following sanitizers:\n * [MemorySanitizer](#memorysanitizer) a detector of uninitialized reads.\n * [MemTagSanitizer](#memtagsanitizer) fast memory error detector based on\n   Armv8.5-A Memory Tagging Extension.\n-* [ShadowCallStack](#shadowcallstack) provides backward-edge control flow protection.\n+* [SafeStack](#safestack) provides backward-edge control flow protection by separating the stack into safe and unsafe regions.\n+* [ShadowCallStack](#shadowcallstack) provides backward-edge control flow protection (aarch64 only).\n * [ThreadSanitizer](#threadsanitizer) a fast data race detector.\n \n To enable a sanitizer compile with `-Zsanitizer=address`,`-Zsanitizer=cfi`,\n@@ -712,6 +713,16 @@ To enable this target feature compile with `-C target-feature=\"+mte\"`.\n \n See the [LLVM MemTagSanitizer documentation][llvm-memtag] for more details.\n \n+# SafeStack\n+\n+SafeStack provides backward edge control flow protection by separating the stack into data which is only accessed safely (the safe stack) and all other data (the unsafe stack).\n+\n+SafeStack can be enabled with the `-Zsanitizer=safestack` option and is supported on the following targets:\n+\n+* `x86_64-unknown-linux-gnu`\n+\n+See the [Clang SafeStack documentation][clang-safestack] for more details.\n+\n # ShadowCallStack\n \n ShadowCallStack provides backward edge control flow protection by storing a function's return address in a separately allocated 'shadow call stack' and loading the return address from that shadow call stack.\n@@ -828,6 +839,7 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n [clang-kcfi]: https://clang.llvm.org/docs/ControlFlowIntegrity.html#fsanitize-kcfi\n [clang-lsan]: https://clang.llvm.org/docs/LeakSanitizer.html\n [clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n+[clang-safestack]: https://clang.llvm.org/docs/SafeStack.html\n [clang-scs]: https://clang.llvm.org/docs/ShadowCallStack.html\n [clang-tsan]: https://clang.llvm.org/docs/ThreadSanitizer.html\n [linux-kasan]: https://www.kernel.org/doc/html/latest/dev-tools/kasan.html"}, {"sha": "18b3b913a682fe65b75c9c9ac72a9f973c0e43ea", "filename": "src/tools/compiletest/src/header/needs.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fneeds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fneeds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fneeds.rs?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -70,6 +70,11 @@ pub(super) fn handle_needs(\n             condition: cache.sanitizer_shadow_call_stack,\n             ignore_reason: \"ignored on targets without shadow call stacks\",\n         },\n+        Need {\n+            name: \"needs-sanitizer-safestack\",\n+            condition: cache.sanitizer_safestack,\n+            ignore_reason: \"ignored on targets without SafeStack support\",\n+        },\n         Need {\n             name: \"needs-run-enabled\",\n             condition: config.run_enabled(),\n@@ -184,6 +189,7 @@ pub(super) struct CachedNeedsConditions {\n     sanitizer_hwaddress: bool,\n     sanitizer_memtag: bool,\n     sanitizer_shadow_call_stack: bool,\n+    sanitizer_safestack: bool,\n     xray: bool,\n     rust_lld: bool,\n     i686_dlltool: bool,\n@@ -220,6 +226,7 @@ impl CachedNeedsConditions {\n             sanitizer_hwaddress: util::HWASAN_SUPPORTED_TARGETS.contains(target),\n             sanitizer_memtag: util::MEMTAG_SUPPORTED_TARGETS.contains(target),\n             sanitizer_shadow_call_stack: util::SHADOWCALLSTACK_SUPPORTED_TARGETS.contains(target),\n+            sanitizer_safestack: util::SAFESTACK_SUPPORTED_TARGETS.contains(target),\n             xray: util::XRAY_SUPPORTED_TARGETS.contains(target),\n \n             // For tests using the `needs-rust-lld` directive (e.g. for `-Zgcc-ld=lld`), we need to find"}, {"sha": "17bed38b65e881c29bc52a0313b3ddc6b277dd12", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -104,6 +104,8 @@ pub const XRAY_SUPPORTED_TARGETS: &[&str] = &[\n     \"x86_64-unknown-openbsd\",\n ];\n \n+pub const SAFESTACK_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n+\n pub fn make_new_path(path: &str) -> String {\n     assert!(cfg!(windows));\n     // Windows just uses PATH as the library search path, so we have to"}, {"sha": "b73ed00e7308e1d260ff57ae2789d5034ea2f4e8", "filename": "tests/codegen/sanitizer-safestack-attr-check.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/tests%2Fcodegen%2Fsanitizer-safestack-attr-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2560b80a08597e4192aa3ee5a4670e36a5e4a7dd/tests%2Fcodegen%2Fsanitizer-safestack-attr-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-safestack-attr-check.rs?ref=2560b80a08597e4192aa3ee5a4670e36a5e4a7dd", "patch": "@@ -0,0 +1,11 @@\n+// This tests that the safestack attribute is applied when enabling the safe-stack sanitizer.\n+//\n+// needs-sanitizer-safestack\n+// compile-flags: -Zsanitizer=safestack\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK: ; Function Attrs:{{.*}}safestack\n+pub fn tagged() {}\n+\n+// CHECK: attributes #0 = {{.*}}safestack"}]}