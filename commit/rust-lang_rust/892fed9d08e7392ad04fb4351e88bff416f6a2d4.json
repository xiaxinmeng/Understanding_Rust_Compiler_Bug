{"sha": "892fed9d08e7392ad04fb4351e88bff416f6a2d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MmZlZDlkMDhlNzM5MmFkMDRmYjQzNTFlODhiZmY0MTZmNmEyZDQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-18T08:03:38Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-01T00:15:37Z"}, "message": "Add support for using a jobserver with Rayon", "tree": {"sha": "411f51bd12c004610e7a96fefc810b21caac2ffa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/411f51bd12c004610e7a96fefc810b21caac2ffa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/892fed9d08e7392ad04fb4351e88bff416f6a2d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/892fed9d08e7392ad04fb4351e88bff416f6a2d4", "html_url": "https://github.com/rust-lang/rust/commit/892fed9d08e7392ad04fb4351e88bff416f6a2d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/892fed9d08e7392ad04fb4351e88bff416f6a2d4/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "350674b7180a41c8e508d93c6ab8e203b69d3df7", "url": "https://api.github.com/repos/rust-lang/rust/commits/350674b7180a41c8e508d93c6ab8e203b69d3df7", "html_url": "https://github.com/rust-lang/rust/commit/350674b7180a41c8e508d93c6ab8e203b69d3df7"}], "stats": {"total": 204, "additions": 172, "deletions": 32}, "files": [{"sha": "26a27ea88e27a0551e138439a07124cb99482c14", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=892fed9d08e7392ad04fb4351e88bff416f6a2d4", "patch": "@@ -20,8 +20,8 @@ num_cpus = \"1.0\"\n scoped-tls = \"1.0\"\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n polonius-engine = \"0.6.2\"\n-rustc-rayon = \"0.1.1\"\n-rustc-rayon-core = \"0.1.1\"\n+rustc-rayon = \"0.1.2\"\n+rustc-rayon-core = \"0.1.2\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "3cff5ec230959d8eb46a1369d2070c9fe36fe830", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=892fed9d08e7392ad04fb4351e88bff416f6a2d4", "patch": "@@ -34,7 +34,8 @@ use crate::util::profiling::SelfProfiler;\n \n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n use rustc_data_structures::flock;\n-use jobserver::Client;\n+use rustc_data_structures::jobserver;\n+use ::jobserver::Client;\n \n use std;\n use std::cell::{self, Cell, RefCell};\n@@ -1230,32 +1231,7 @@ pub fn build_session_(\n         optimization_fuel,\n         print_fuel_crate,\n         print_fuel,\n-        // Note that this is unsafe because it may misinterpret file descriptors\n-        // on Unix as jobserver file descriptors. We hopefully execute this near\n-        // the beginning of the process though to ensure we don't get false\n-        // positives, or in other words we try to execute this before we open\n-        // any file descriptors ourselves.\n-        //\n-        // Pick a \"reasonable maximum\" if we don't otherwise have\n-        // a jobserver in our environment, capping out at 32 so we\n-        // don't take everything down by hogging the process run queue.\n-        // The fixed number is used to have deterministic compilation\n-        // across machines.\n-        //\n-        // Also note that we stick this in a global because there could be\n-        // multiple `Session` instances in this process, and the jobserver is\n-        // per-process.\n-        jobserver: unsafe {\n-            static mut GLOBAL_JOBSERVER: *mut Client = 0 as *mut _;\n-            static INIT: std::sync::Once = std::sync::ONCE_INIT;\n-            INIT.call_once(|| {\n-                let client = Client::from_env().unwrap_or_else(|| {\n-                    Client::new(32).expect(\"failed to create jobserver\")\n-                });\n-                GLOBAL_JOBSERVER = Box::into_raw(Box::new(client));\n-            });\n-            (*GLOBAL_JOBSERVER).clone()\n-        },\n+        jobserver: jobserver::client(),\n         has_global_allocator: Once::new(),\n         has_panic_handler: Once::new(),\n         driver_lint_caps,"}, {"sha": "8e68c9fa30431c13789630c95e6a37aa838f0f64", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=892fed9d08e7392ad04fb4351e88bff416f6a2d4", "patch": "@@ -7,6 +7,7 @@ use std::{fmt, ptr};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{Lock, LockGuard, Lrc, Weak};\n use rustc_data_structures::OnDrop;\n+use rustc_data_structures::jobserver;\n use syntax_pos::Span;\n \n use crate::ty::tls;\n@@ -198,7 +199,11 @@ impl<'tcx> QueryLatch<'tcx> {\n             // we have to be in the `wait` call. This is ensured by the deadlock handler\n             // getting the self.info lock.\n             rayon_core::mark_blocked();\n+            jobserver::release_thread();\n             waiter.condvar.wait(&mut info);\n+            // Release the lock before we potentially block in `acquire_thread`\n+            mem::drop(info);\n+            jobserver::acquire_thread();\n         }\n     }\n "}, {"sha": "6002bf69b7069871ee9d75e4ab57c0d7edd81b83", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=892fed9d08e7392ad04fb4351e88bff416f6a2d4", "patch": "@@ -12,13 +12,15 @@ crate-type = [\"dylib\"]\n [dependencies]\n ena = \"0.11\"\n log = \"0.4\"\n+jobserver_crate = { version = \"0.1\", package = \"jobserver\" }\n+lazy_static = \"1\"\n rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n serialize = { path = \"../libserialize\" }\n graphviz = { path = \"../libgraphviz\" }\n cfg-if = \"0.1.2\"\n stable_deref_trait = \"1.0.0\"\n-rayon = { version = \"0.1.1\", package = \"rustc-rayon\" }\n-rayon-core = { version = \"0.1.1\", package = \"rustc-rayon-core\" }\n+rayon = { version = \"0.1.2\", package = \"rustc-rayon\" }\n+rayon-core = { version = \"0.1.2\", package = \"rustc-rayon-core\" }\n rustc-hash = \"1.0.1\"\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n "}, {"sha": "c85cdfbdcd8dd7141c490fa318bfa14102225764", "filename": "src/librustc_data_structures/jobserver.rs", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc_data_structures%2Fjobserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc_data_structures%2Fjobserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fjobserver.rs?ref=892fed9d08e7392ad04fb4351e88bff416f6a2d4", "patch": "@@ -0,0 +1,153 @@\n+use jobserver_crate::{Client, HelperThread, Acquired};\n+use lazy_static::lazy_static;\n+use std::sync::{Condvar, Arc, Mutex};\n+use std::mem;\n+\n+#[derive(Default)]\n+pub struct LockedProxyData {\n+    /// The number of free thread tokens, this may include the implicit token given to the process\n+    free: usize,\n+\n+    /// The number of threads waiting for a token\n+    waiters: usize,\n+\n+    /// The number of tokens we requested from the server\n+    requested: usize,\n+\n+    /// Stored tokens which will be dropped when we no longer need them\n+    tokens: Vec<Acquired>,\n+}\n+\n+impl LockedProxyData {\n+    fn request_token(&mut self, thread: &Mutex<HelperThread>) {\n+        self.requested += 1;\n+        thread.lock().unwrap().request_token();\n+    }\n+\n+    fn release_token(&mut self, cond_var: &Condvar) {\n+        if self.waiters > 0 {\n+            self.free += 1;\n+            cond_var.notify_one();\n+        } else {\n+            if self.tokens.is_empty() {\n+                // We are returning the implicit token\n+                self.free += 1;\n+            } else {\n+                // Return a real token to the server\n+                self.tokens.pop().unwrap();\n+            }\n+        }\n+    }\n+\n+    fn take_token(&mut self, thread: &Mutex<HelperThread>) -> bool {\n+        if self.free > 0 {\n+            self.free -= 1;\n+            self.waiters -= 1;\n+\n+            // We stole some token reqested by someone else\n+            // Request another one\n+            if self.requested + self.free < self.waiters {\n+                self.request_token(thread);\n+            }\n+\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n+    fn new_requested_token(&mut self, token: Acquired, cond_var: &Condvar) {\n+        self.requested -= 1;\n+\n+        // Does anything need this token?\n+        if self.waiters > 0 {\n+            self.free += 1;\n+            self.tokens.push(token);\n+            cond_var.notify_one();\n+        } else {\n+            // Otherwise we'll just drop it\n+            mem::drop(token);\n+        }\n+    }\n+}\n+\n+#[derive(Default)]\n+pub struct ProxyData {\n+    lock: Mutex<LockedProxyData>,\n+    cond_var: Condvar,\n+}\n+\n+pub struct Proxy {\n+    thread: Mutex<HelperThread>,\n+    data: Arc<ProxyData>,\n+}\n+\n+lazy_static! {\n+    // We can only call `from_env` once per process\n+\n+    // Note that this is unsafe because it may misinterpret file descriptors\n+    // on Unix as jobserver file descriptors. We hopefully execute this near\n+    // the beginning of the process though to ensure we don't get false\n+    // positives, or in other words we try to execute this before we open\n+    // any file descriptors ourselves.\n+    //\n+    // Pick a \"reasonable maximum\" if we don't otherwise have\n+    // a jobserver in our environment, capping out at 32 so we\n+    // don't take everything down by hogging the process run queue.\n+    // The fixed number is used to have deterministic compilation\n+    // across machines.\n+    //\n+    // Also note that we stick this in a global because there could be\n+    // multiple rustc instances in this process, and the jobserver is\n+    // per-process.\n+    static ref GLOBAL_CLIENT: Client = unsafe {\n+        Client::from_env().unwrap_or_else(|| {\n+            Client::new(32).expect(\"failed to create jobserver\")\n+        })\n+    };\n+\n+    static ref GLOBAL_PROXY: Proxy = {\n+        let data = Arc::new(ProxyData::default());\n+\n+        Proxy {\n+            data: data.clone(),\n+            thread: Mutex::new(client().into_helper_thread(move |token| {\n+                data.lock.lock().unwrap().new_requested_token(token.unwrap(), &data.cond_var);\n+            }).unwrap()),\n+        }\n+    };\n+}\n+\n+pub fn client() -> Client {\n+    GLOBAL_CLIENT.clone()\n+}\n+\n+pub fn acquire_thread() {\n+    GLOBAL_PROXY.acquire_token();\n+}\n+\n+pub fn release_thread() {\n+    GLOBAL_PROXY.release_token();\n+}\n+\n+impl Proxy {\n+    pub fn release_token(&self) {\n+        self.data.lock.lock().unwrap().release_token(&self.data.cond_var);\n+    }\n+\n+    pub fn acquire_token(&self) {\n+        let mut data = self.data.lock.lock().unwrap();\n+        data.waiters += 1;\n+        if data.take_token(&self.thread) {\n+            return;\n+        }\n+        // Request a token for us\n+        data.request_token(&self.thread);\n+        loop {\n+            data = self.data.cond_var.wait(data).unwrap();\n+            if data.take_token(&self.thread) {\n+                return;\n+            }\n+        }\n+    }\n+}"}, {"sha": "09482340b1a1d725a2a8f3b4068ca8ffd0ad73c8", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=892fed9d08e7392ad04fb4351e88bff416f6a2d4", "patch": "@@ -77,6 +77,7 @@ pub mod fx;\n pub mod graph;\n pub mod indexed_vec;\n pub mod interner;\n+pub mod jobserver;\n pub mod obligation_forest;\n pub mod owning_ref;\n pub mod ptr_key;"}, {"sha": "a77e497af7b8720f1bcee109eaa9b24cacdfe28f", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=892fed9d08e7392ad04fb4351e88bff416f6a2d4", "patch": "@@ -13,7 +13,7 @@ arena = { path = \"../libarena\" }\n graphviz = { path = \"../libgraphviz\" }\n log = \"0.4\"\n env_logger = { version = \"0.5\", default-features = false }\n-rustc-rayon = \"0.1.1\"\n+rustc-rayon = \"0.1.2\"\n scoped-tls = \"1.0\"\n rustc = { path = \"../librustc\" }\n rustc_allocator = { path = \"../librustc_allocator\" }"}, {"sha": "c4d8a66aa6db6136d60dd502d2395ad2f5d87ba3", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892fed9d08e7392ad04fb4351e88bff416f6a2d4/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=892fed9d08e7392ad04fb4351e88bff416f6a2d4", "patch": "@@ -17,6 +17,7 @@ use rustc_allocator as allocator;\n use rustc_borrowck as borrowck;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::sync::{self, Lock};\n+use rustc_data_structures::jobserver;\n use rustc_incremental;\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::{self, CStore};\n@@ -72,6 +73,8 @@ pub fn spawn_thread_pool<F: FnOnce(config::Options) -> R + sync::Send, R: sync::\n     let gcx_ptr = &Lock::new(0);\n \n     let config = ThreadPoolBuilder::new()\n+        .acquire_thread_handler(jobserver::acquire_thread)\n+        .release_thread_handler(jobserver::release_thread)\n         .num_threads(Session::threads_from_count(opts.debugging_opts.threads))\n         .deadlock_handler(|| unsafe { ty::query::handle_deadlock() })\n         .stack_size(::STACK_SIZE);"}]}