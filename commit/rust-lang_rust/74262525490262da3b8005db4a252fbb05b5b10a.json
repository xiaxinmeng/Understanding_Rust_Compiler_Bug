{"sha": "74262525490262da3b8005db4a252fbb05b5b10a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MjYyNTI1NDkwMjYyZGEzYjgwMDVkYjRhMjUyZmJiMDViNWIxMGE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-03T04:55:38Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-03T05:02:59Z"}, "message": "Generate code properly for calls with _|_ - typed arguments\n\nThe code for translating a fail (for example) would call\nUnreachable(), which terminates the block; if a fail appeared as an\nargument, this would cause an LLVM assertion failure. Changed\ntrans_call to handle this situation correctly.", "tree": {"sha": "950686971e88b27cf85abd03524552bdf3b68730", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/950686971e88b27cf85abd03524552bdf3b68730"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74262525490262da3b8005db4a252fbb05b5b10a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74262525490262da3b8005db4a252fbb05b5b10a", "html_url": "https://github.com/rust-lang/rust/commit/74262525490262da3b8005db4a252fbb05b5b10a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74262525490262da3b8005db4a252fbb05b5b10a/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0fad0dca5ad89ff03ba3eaab7b477bb64be6e8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fad0dca5ad89ff03ba3eaab7b477bb64be6e8d", "html_url": "https://github.com/rust-lang/rust/commit/f0fad0dca5ad89ff03ba3eaab7b477bb64be6e8d"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "aaaa54e4779519e4a4c56568701a5b5e4dfdd317", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/74262525490262da3b8005db4a252fbb05b5b10a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74262525490262da3b8005db4a252fbb05b5b10a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=74262525490262da3b8005db4a252fbb05b5b10a", "patch": "@@ -5564,9 +5564,10 @@ fn trans_arg_expr(&@block_ctxt cx, &ty::arg arg, TypeRef lldestty0,\n             val = do_spill(lv.res.bcx, lv.res.val);\n         }\n     } else { auto re = trans_expr(bcx, e); val = re.val; bcx = re.bcx; }\n+    auto is_bot = ty::type_is_bot(cx.fcx.lcx.ccx.tcx, e_ty);\n \n     // Make a copy here if the type is structural and we're passing by value.\n-    if (arg.mode == ty::mo_val) {\n+    if (arg.mode == ty::mo_val && !is_bot) {\n         if (ty::type_owns_heap_mem(cx.fcx.lcx.ccx.tcx, e_ty)) {\n             auto rslt = alloc_ty(bcx, e_ty);\n             bcx = rslt.bcx;\n@@ -5579,7 +5580,7 @@ fn trans_arg_expr(&@block_ctxt cx, &ty::arg arg, TypeRef lldestty0,\n         }\n     }\n \n-    if (ty::type_is_bot(cx.fcx.lcx.ccx.tcx, e_ty)) {\n+    if (is_bot) {\n         // For values of type _|_, we generate an\n         // \"undef\" value, as such a value should never\n         // be inspected. It's important for the value\n@@ -5747,25 +5748,30 @@ fn trans_call(&@block_ctxt cx, &@ast::expr f, &option::t[ValueRef] lliterbody,\n     }\n     */\n \n-    bcx.build.FastCall(faddr, llargs);\n+    /* If the block is terminated,\n+       then one or more of the args has\n+       type _|_. Since that means it diverges, the code\n+       for the call itself is unreachable. */\n     auto retval = C_nil();\n-    alt (lliterbody) {\n-        case (none) {\n-            if (!ty::type_is_nil(cx.fcx.lcx.ccx.tcx, ret_ty)) {\n-                retval = load_if_immediate(bcx, llretslot, ret_ty);\n-                // Retval doesn't correspond to anything really tangible in\n-                // the frame, but it's a ref all the same, so we put a note\n-                // here to drop it when we're done in this scope.\n-\n-                find_scope_cx(cx).cleanups +=\n-                    [clean(bind drop_ty(_, retval, ret_ty))];\n+    if (!bcx.build.is_terminated()) {\n+        bcx.build.FastCall(faddr, llargs);\n+        alt (lliterbody) {\n+            case (none) {\n+                if (!ty::type_is_nil(cx.fcx.lcx.ccx.tcx, ret_ty)) {\n+                    retval = load_if_immediate(bcx, llretslot, ret_ty);\n+                    // Retval doesn't correspond to anything really tangible\n+                    // in the frame, but it's a ref all the same, so we put a\n+                    // note here to drop it when we're done in this scope.\n+                    \n+                    find_scope_cx(cx).cleanups +=\n+                        [clean(bind drop_ty(_, retval, ret_ty))];\n+                }\n+            }\n+            case (some(_)) {\n+                // If there was an lliterbody, it means we were calling an\n+                // iter, and we are *not* the party using its 'output' value,\n+                // we should ignore llretslot.\n             }\n-        }\n-        case (some(_)) {\n-            // If there was an lliterbody, it means we were calling an\n-            // iter, and we are *not* the party using its 'output' value,\n-            // we should ignore llretslot.\n-\n         }\n     }\n     ret rslt(bcx, retval);"}, {"sha": "59fc8e4bd55409388c6475c49649a26b33789cf5", "filename": "src/test/run-fail/fail-arg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74262525490262da3b8005db4a252fbb05b5b10a/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74262525490262da3b8005db4a252fbb05b5b10a/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-arg.rs?ref=74262525490262da3b8005db4a252fbb05b5b10a", "patch": "@@ -0,0 +1,9 @@\n+// xfail-stage0\n+// error-pattern:explicit failure\n+fn f(int a) {\n+  log a;\n+}\n+\n+fn main() { \n+  f(fail);\n+} "}]}