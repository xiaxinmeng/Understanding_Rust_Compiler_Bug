{"sha": "53f028d79072f9ff37af0315bea9b3c1c9615d5b", "node_id": "C_kwDOAAsO6NoAKDUzZjAyOGQ3OTA3MmY5ZmYzN2FmMDMxNWJlYTliM2MxYzk2MTVkNWI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-20T16:26:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-20T16:26:03Z"}, "message": "Rollup merge of #96167 - CAD97:weak-dlsym-less-ptr-crime, r=thomcc\n\nReplace sys/unix/weak AtomicUsize with AtomicPtr\n\nShould fix #96163. Can't easily test on Windows though...", "tree": {"sha": "f861f619dcff7712fe4050191e9c0f9d743009a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f861f619dcff7712fe4050191e9c0f9d743009a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53f028d79072f9ff37af0315bea9b3c1c9615d5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiYDQbCRBK7hj4Ov3rIwAAkYMIAGPOvHWzgS98FojrJ39adIDy\nYeiXlHBRrSsVSfuAh0ULjZwnckiKrkRjEBOazv5rR3zokGaibuD3iJHdPiN8Hy8F\nBYGmzlJhSpwEBoOBiWNMhEiHhiosHILoKtaBsdtVnS5ifc2XSzBDfHdieAkUlVwy\nFifBtYojNDZ5OiHq4yr2KVrWmD1dE8uqrczgJzc54Rl4lQOyGOc5arbYrXCUEzri\nh3tnVq8p7RabJDIkIlhV8VR2+l6sny2ysyrWrJ2Xv0mr+zO/Vg8ay8TxyAXEAScc\nz5sAsdkOJry38vggjI538dK4mkZsWIa42GKAEIRHaOmm50xW0S0RKw+NQouww+U=\n=BxLX\n-----END PGP SIGNATURE-----\n", "payload": "tree f861f619dcff7712fe4050191e9c0f9d743009a1\nparent 72cb09461101e336d087c4beff7ab09d5cc114bf\nparent 620c0a4d5b7949e51ada8dbed4e700f6b9531cdc\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650471963 +0200\ncommitter GitHub <noreply@github.com> 1650471963 +0200\n\nRollup merge of #96167 - CAD97:weak-dlsym-less-ptr-crime, r=thomcc\n\nReplace sys/unix/weak AtomicUsize with AtomicPtr\n\nShould fix #96163. Can't easily test on Windows though...\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53f028d79072f9ff37af0315bea9b3c1c9615d5b", "html_url": "https://github.com/rust-lang/rust/commit/53f028d79072f9ff37af0315bea9b3c1c9615d5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53f028d79072f9ff37af0315bea9b3c1c9615d5b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72cb09461101e336d087c4beff7ab09d5cc114bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/72cb09461101e336d087c4beff7ab09d5cc114bf", "html_url": "https://github.com/rust-lang/rust/commit/72cb09461101e336d087c4beff7ab09d5cc114bf"}, {"sha": "620c0a4d5b7949e51ada8dbed4e700f6b9531cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/620c0a4d5b7949e51ada8dbed4e700f6b9531cdc", "html_url": "https://github.com/rust-lang/rust/commit/620c0a4d5b7949e51ada8dbed4e700f6b9531cdc"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "e4ff21b25bd9ce47aea69b7fd0f2eb696c873306", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/53f028d79072f9ff37af0315bea9b3c1c9615d5b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f028d79072f9ff37af0315bea9b3c1c9615d5b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=53f028d79072f9ff37af0315bea9b3c1c9615d5b", "patch": "@@ -25,7 +25,8 @@\n use crate::ffi::CStr;\n use crate::marker::PhantomData;\n use crate::mem;\n-use crate::sync::atomic::{self, AtomicUsize, Ordering};\n+use crate::ptr;\n+use crate::sync::atomic::{self, AtomicPtr, Ordering};\n \n // We can use true weak linkage on ELF targets.\n #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n@@ -83,25 +84,25 @@ pub(crate) macro dlsym {\n }\n pub(crate) struct DlsymWeak<F> {\n     name: &'static str,\n-    addr: AtomicUsize,\n+    func: AtomicPtr<libc::c_void>,\n     _marker: PhantomData<F>,\n }\n \n impl<F> DlsymWeak<F> {\n     pub(crate) const fn new(name: &'static str) -> Self {\n-        DlsymWeak { name, addr: AtomicUsize::new(1), _marker: PhantomData }\n+        DlsymWeak { name, func: AtomicPtr::new(ptr::invalid_mut(1)), _marker: PhantomData }\n     }\n \n     #[inline]\n     pub(crate) fn get(&self) -> Option<F> {\n         unsafe {\n             // Relaxed is fine here because we fence before reading through the\n             // pointer (see the comment below).\n-            match self.addr.load(Ordering::Relaxed) {\n-                1 => self.initialize(),\n-                0 => None,\n-                addr => {\n-                    let func = mem::transmute_copy::<usize, F>(&addr);\n+            match self.func.load(Ordering::Relaxed) {\n+                func if func.addr() == 1 => self.initialize(),\n+                func if func.is_null() => None,\n+                func => {\n+                    let func = mem::transmute_copy::<*mut libc::c_void, F>(&func);\n                     // The caller is presumably going to read through this value\n                     // (by calling the function we've dlsymed). This means we'd\n                     // need to have loaded it with at least C11's consume\n@@ -129,25 +130,22 @@ impl<F> DlsymWeak<F> {\n     // Cold because it should only happen during first-time initialization.\n     #[cold]\n     unsafe fn initialize(&self) -> Option<F> {\n-        assert_eq!(mem::size_of::<F>(), mem::size_of::<usize>());\n+        assert_eq!(mem::size_of::<F>(), mem::size_of::<*mut libc::c_void>());\n \n         let val = fetch(self.name);\n         // This synchronizes with the acquire fence in `get`.\n-        self.addr.store(val, Ordering::Release);\n+        self.func.store(val, Ordering::Release);\n \n-        match val {\n-            0 => None,\n-            addr => Some(mem::transmute_copy::<usize, F>(&addr)),\n-        }\n+        if val.is_null() { None } else { Some(mem::transmute_copy::<*mut libc::c_void, F>(&val)) }\n     }\n }\n \n-unsafe fn fetch(name: &str) -> usize {\n+unsafe fn fetch(name: &str) -> *mut libc::c_void {\n     let name = match CStr::from_bytes_with_nul(name.as_bytes()) {\n         Ok(cstr) => cstr,\n-        Err(..) => return 0,\n+        Err(..) => return ptr::null_mut(),\n     };\n-    libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr()) as usize\n+    libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr())\n }\n \n #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]"}]}