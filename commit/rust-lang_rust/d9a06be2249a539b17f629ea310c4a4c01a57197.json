{"sha": "d9a06be2249a539b17f629ea310c4a4c01a57197", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YTA2YmUyMjQ5YTUzOWIxN2Y2MjllYTMxMGM0YTRjMDFhNTcxOTc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-28T21:49:49Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-28T21:59:22Z"}, "message": "Fix patterns in tuple", "tree": {"sha": "a4e8b8a8f39b20202dda6152ad268480e6c8e746", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4e8b8a8f39b20202dda6152ad268480e6c8e746"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a06be2249a539b17f629ea310c4a4c01a57197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a06be2249a539b17f629ea310c4a4c01a57197", "html_url": "https://github.com/rust-lang/rust/commit/d9a06be2249a539b17f629ea310c4a4c01a57197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a06be2249a539b17f629ea310c4a4c01a57197/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ae3e7bf212b0db5949e113858bae1da0e6ae29", "url": "https://api.github.com/repos/rust-lang/rust/commits/70ae3e7bf212b0db5949e113858bae1da0e6ae29", "html_url": "https://github.com/rust-lang/rust/commit/70ae3e7bf212b0db5949e113858bae1da0e6ae29"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "4cc6ff8a259ed82607c7c06a8a01e2daf2c66ffa", "filename": "src/libcore/core.rc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9a06be2249a539b17f629ea310c4a4c01a57197/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d9a06be2249a539b17f629ea310c4a4c01a57197/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=d9a06be2249a539b17f629ea310c4a4c01a57197", "patch": "@@ -39,6 +39,9 @@ Implicitly, all crates behave as if they included the following prologue:\n #[legacy_modes];\n #[legacy_exports];\n \n+#[warn(deprecated_mode)];\n+#[warn(deprecated_pattern)];\n+\n #[warn(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n "}, {"sha": "43df1bc4bbcd66f34bee807bca84a20271390b5a", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d9a06be2249a539b17f629ea310c4a4c01a57197/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a06be2249a539b17f629ea310c4a4c01a57197/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=d9a06be2249a539b17f629ea310c4a4c01a57197", "patch": "@@ -78,14 +78,10 @@ impl<A: Copy, B: Copy> (~[A], ~[B]): ExtendedTupleOps<A,B> {\n \n impl<A: Eq, B: Eq> (A, B) : Eq {\n     pure fn eq(other: &(A, B)) -> bool {\n-        // XXX: This would be a lot less wordy with ref bindings, but I don't\n-        // trust that they work yet.\n         match self {\n-            (self_a, self_b) => {\n-                match (*other) {\n-                    (ref other_a, ref other_b) => {\n-                        self_a.eq(other_a) && self_b.eq(other_b)\n-                    }\n+            (ref self_a, ref self_b) => match other {\n+                &(ref other_a, ref other_b) => {\n+                    (*self_a).eq(other_a) && (*self_b).eq(other_b)\n                 }\n             }\n         }\n@@ -115,16 +111,11 @@ impl<A: Ord, B: Ord> (A, B) : Ord {\n \n impl<A: Eq, B: Eq, C: Eq> (A, B, C) : Eq {\n     pure fn eq(other: &(A, B, C)) -> bool {\n-        // XXX: This would be a lot less wordy with ref bindings, but I don't\n-        // trust that they work yet.\n         match self {\n-            (self_a, self_b, self_c) => {\n-                match (*other) {\n-                    (ref other_a, ref other_b, ref other_c) => {\n-                        self_a.eq(other_a) &&\n-                        self_b.eq(other_b) &&\n-                        self_c.eq(other_c)\n-                    }\n+            (ref self_a, ref self_b, ref self_c) => match other {\n+                &(ref other_a, ref other_b, ref other_c) => {\n+                    (*self_a).eq(other_a) && (*self_b).eq(other_b)\n+                        && (*self_c).eq(other_c)\n                 }\n             }\n         }"}]}