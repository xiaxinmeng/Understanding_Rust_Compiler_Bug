{"sha": "e8923713c51bc3484bd98085ad620713959bbc0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OTIzNzEzYzUxYmMzNDg0YmQ5ODA4NWFkNjIwNzEzOTU5YmJjMGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T17:13:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T21:51:34Z"}, "message": "add sysroot boilerplate", "tree": {"sha": "d7146aa1dac0e3d056daacf47770a239cf1f62c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7146aa1dac0e3d056daacf47770a239cf1f62c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8923713c51bc3484bd98085ad620713959bbc0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8923713c51bc3484bd98085ad620713959bbc0d", "html_url": "https://github.com/rust-lang/rust/commit/e8923713c51bc3484bd98085ad620713959bbc0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8923713c51bc3484bd98085ad620713959bbc0d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6bc55f542c88b1b0789435219f9dbf38c110f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6bc55f542c88b1b0789435219f9dbf38c110f47", "html_url": "https://github.com/rust-lang/rust/commit/b6bc55f542c88b1b0789435219f9dbf38c110f47"}], "stats": {"total": 189, "additions": 157, "deletions": 32}, "files": [{"sha": "0dda9548a9696cdb4cb5ece18e18dcfd48faaeda", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=e8923713c51bc3484bd98085ad620713959bbc0d", "patch": "@@ -347,11 +347,11 @@ pub fn handle_runnables(\n                 .read()\n                 .file2path(ra_vfs::VfsFile(file_id.0.into()));\n             let res = world.workspaces.iter().find_map(|ws| {\n-                let tgt = ws.target_by_root(&path)?;\n+                let tgt = ws.cargo.target_by_root(&path)?;\n                 let res = CargoTargetSpec {\n-                    package: tgt.package(ws).name(ws).to_string(),\n-                    target: tgt.name(ws).to_string(),\n-                    target_kind: tgt.kind(ws),\n+                    package: tgt.package(&ws.cargo).name(&ws.cargo).to_string(),\n+                    target: tgt.name(&ws.cargo).to_string(),\n+                    target_kind: tgt.kind(&ws.cargo),\n                 };\n                 Some(res)\n             });"}, {"sha": "6fbaba7d9ce0743437df3c2f487ff8b3be75c101", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 101, "deletions": 15, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=e8923713c51bc3484bd98085ad620713959bbc0d", "patch": "@@ -1,4 +1,7 @@\n-use std::path::{Path, PathBuf};\n+use std::{\n+    path::{Path, PathBuf},\n+    process::Command,\n+};\n \n use cargo_metadata::{metadata_run, CargoOpt};\n use ra_syntax::SmolStr;\n@@ -9,6 +12,36 @@ use thread_worker::{WorkerHandle, Worker};\n \n use crate::Result;\n \n+#[derive(Debug, Clone)]\n+pub struct ProjectWorkspace {\n+    pub(crate) cargo: CargoWorkspace,\n+    pub(crate) sysroot: Sysroot,\n+}\n+\n+impl ProjectWorkspace {\n+    pub fn discover(path: &Path) -> Result<ProjectWorkspace> {\n+        let cargo_toml = find_cargo_toml(path)?;\n+        let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml)?;\n+        let sysroot = sysroot_info(&cargo_toml)?;\n+        let res = ProjectWorkspace { cargo, sysroot };\n+        Ok(res)\n+    }\n+}\n+\n+pub fn workspace_loader() -> (Worker<PathBuf, Result<ProjectWorkspace>>, WorkerHandle) {\n+    thread_worker::spawn::<PathBuf, Result<ProjectWorkspace>, _>(\n+        \"workspace loader\",\n+        1,\n+        |input_receiver, output_sender| {\n+            input_receiver\n+                .into_iter()\n+                .map(|path| ProjectWorkspace::discover(path.as_path()))\n+                .try_for_each(|it| output_sender.send(it))\n+                .unwrap()\n+        },\n+    )\n+}\n+\n /// `CargoWorksapce` represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n ///\n@@ -63,6 +96,11 @@ pub enum TargetKind {\n     Other,\n }\n \n+#[derive(Debug, Clone)]\n+pub(crate) struct Sysroot {\n+    crates: FxHashMap<SmolStr, PathBuf>,\n+}\n+\n impl Package {\n     pub fn name(self, ws: &CargoWorkspace) -> &str {\n         ws.packages[self].name.as_str()\n@@ -160,6 +198,68 @@ impl CargoWorkspace {\n     }\n }\n \n+fn sysroot_info(cargo_toml: &Path) -> Result<Sysroot> {\n+    let rustc_output = Command::new(\"rustc\")\n+        .current_dir(cargo_toml.parent().unwrap())\n+        .args(&[\"--print\", \"sysroot\"])\n+        .output()?;\n+    if !rustc_output.status.success() {\n+        failure::bail!(\"failed to locate sysroot\")\n+    }\n+    let stdout = String::from_utf8(rustc_output.stdout)?;\n+    let sysroot_path = Path::new(stdout.trim());\n+    let src = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n+\n+    let crates: &[(&str, &[&str])] = &[\n+        (\n+            \"std\",\n+            &[\n+                \"alloc_jemalloc\",\n+                \"alloc_system\",\n+                \"panic_abort\",\n+                \"rand\",\n+                \"compiler_builtins\",\n+                \"unwind\",\n+                \"rustc_asan\",\n+                \"rustc_lsan\",\n+                \"rustc_msan\",\n+                \"rustc_tsan\",\n+                \"build_helper\",\n+            ],\n+        ),\n+        (\"core\", &[]),\n+        (\"alloc\", &[]),\n+        (\"collections\", &[]),\n+        (\"libc\", &[]),\n+        (\"panic_unwind\", &[]),\n+        (\"proc_macro\", &[]),\n+        (\"rustc_unicode\", &[]),\n+        (\"std_unicode\", &[]),\n+        (\"test\", &[]),\n+        // Feature gated\n+        (\"alloc_jemalloc\", &[]),\n+        (\"alloc_system\", &[]),\n+        (\"compiler_builtins\", &[]),\n+        (\"getopts\", &[]),\n+        (\"panic_unwind\", &[]),\n+        (\"panic_abort\", &[]),\n+        (\"rand\", &[]),\n+        (\"term\", &[]),\n+        (\"unwind\", &[]),\n+        // Dependencies\n+        (\"build_helper\", &[]),\n+        (\"rustc_asan\", &[]),\n+        (\"rustc_lsan\", &[]),\n+        (\"rustc_msan\", &[]),\n+        (\"rustc_tsan\", &[]),\n+        (\"syntax\", &[]),\n+    ];\n+\n+    Ok(Sysroot {\n+        crates: FxHashMap::default(),\n+    })\n+}\n+\n fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n     if path.ends_with(\"Cargo.toml\") {\n         return Ok(path.to_path_buf());\n@@ -190,17 +290,3 @@ impl TargetKind {\n         TargetKind::Other\n     }\n }\n-\n-pub fn workspace_loader() -> (Worker<PathBuf, Result<CargoWorkspace>>, WorkerHandle) {\n-    thread_worker::spawn::<PathBuf, Result<CargoWorkspace>, _>(\n-        \"workspace loader\",\n-        1,\n-        |input_receiver, output_sender| {\n-            input_receiver\n-                .into_iter()\n-                .map(|path| CargoWorkspace::from_cargo_metadata(path.as_path()))\n-                .try_for_each(|it| output_sender.send(it))\n-                .unwrap()\n-        },\n-    )\n-}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/ra_lsp_server/src/project_model/cargo_workspace.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fcargo_workspace.rs?ref=e8923713c51bc3484bd98085ad620713959bbc0d"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/ra_lsp_server/src/project_model/sysroot.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs?ref=e8923713c51bc3484bd98085ad620713959bbc0d"}, {"sha": "2debbe55721f34f42c0c97719c4f609694154312", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=e8923713c51bc3484bd98085ad620713959bbc0d", "patch": "@@ -15,34 +15,34 @@ use parking_lot::RwLock;\n use failure::format_err;\n \n use crate::{\n-    project_model::{CargoWorkspace, TargetKind},\n+    project_model::{ProjectWorkspace, TargetKind},\n     Result,\n };\n \n #[derive(Debug)]\n pub struct ServerWorldState {\n     pub roots_to_scan: usize,\n     pub root: PathBuf,\n-    pub workspaces: Arc<Vec<CargoWorkspace>>,\n+    pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis_host: AnalysisHost,\n     pub vfs: Arc<RwLock<Vfs>>,\n }\n \n pub struct ServerWorld {\n-    pub workspaces: Arc<Vec<CargoWorkspace>>,\n+    pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis: Analysis,\n     pub vfs: Arc<RwLock<Vfs>>,\n }\n \n impl ServerWorldState {\n-    pub fn new(root: PathBuf, workspaces: Vec<CargoWorkspace>) -> ServerWorldState {\n+    pub fn new(root: PathBuf, workspaces: Vec<ProjectWorkspace>) -> ServerWorldState {\n         let mut change = AnalysisChange::new();\n \n         let mut roots = Vec::new();\n         roots.push(root.clone());\n         for ws in workspaces.iter() {\n-            for pkg in ws.packages() {\n-                roots.push(pkg.root(&ws).to_path_buf());\n+            for pkg in ws.cargo.packages() {\n+                roots.push(pkg.root(&ws.cargo).to_path_buf());\n             }\n         }\n         let roots_to_scan = roots.len();\n@@ -56,13 +56,13 @@ impl ServerWorldState {\n         let mut pkg_to_lib_crate = FxHashMap::default();\n         let mut pkg_crates = FxHashMap::default();\n         for ws in workspaces.iter() {\n-            for pkg in ws.packages() {\n-                for tgt in pkg.targets(ws) {\n-                    let root = tgt.root(ws);\n+            for pkg in ws.cargo.packages() {\n+                for tgt in pkg.targets(&ws.cargo) {\n+                    let root = tgt.root(&ws.cargo);\n                     if let Some(file_id) = vfs.load(root) {\n                         let file_id = FileId(file_id.0.into());\n                         let crate_id = crate_graph.add_crate_root(file_id);\n-                        if tgt.kind(ws) == TargetKind::Lib {\n+                        if tgt.kind(&ws.cargo) == TargetKind::Lib {\n                             pkg_to_lib_crate.insert(pkg, crate_id);\n                         }\n                         pkg_crates\n@@ -72,8 +72,8 @@ impl ServerWorldState {\n                     }\n                 }\n             }\n-            for pkg in ws.packages() {\n-                for dep in pkg.dependencies(ws) {\n+            for pkg in ws.cargo.packages() {\n+                for dep in pkg.dependencies(&ws.cargo) {\n                     if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n                         for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n                             crate_graph.add_dep(from, dep.name.clone(), to);"}, {"sha": "927664ffb9d50386f4858758fcf4f767598769f7", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8923713c51bc3484bd98085ad620713959bbc0d/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=e8923713c51bc3484bd98085ad620713959bbc0d", "patch": "@@ -4,14 +4,53 @@ use languageserver_types::{\n     CodeActionContext, DocumentFormattingParams, FormattingOptions, Position, Range,\n };\n use ra_lsp_server::req::{\n-    CodeActionParams, CodeActionRequest, Formatting, Runnables, RunnablesParams,\n+    CodeActionParams, CodeActionRequest, Formatting, Runnables, RunnablesParams, CompletionParams, Completion,\n };\n use serde_json::json;\n \n use crate::support::project;\n \n const LOG: &'static str = \"\";\n \n+#[test]\n+fn completes_items_from_standard_library() {\n+    let server = project(\n+        r#\"\n+//- Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- src/lib.rs\n+use std::collections::;\n+\"#,\n+    );\n+    server.wait_for_feedback(\"workspace loaded\");\n+    server.request::<Completion>(\n+        CompletionParams {\n+            text_document: server.doc_id(\"src/lib.rs\"),\n+            context: None,\n+            position: Position::new(0, 22),\n+        },\n+        json!([\n+          {\n+            \"filterText\": \"self\",\n+            \"insertText\": \"self\",\n+            \"insertTextFormat\": 1,\n+            \"kind\": 14,\n+            \"label\": \"self\"\n+          },\n+          {\n+            \"filterText\": \"super\",\n+            \"insertText\": \"super\",\n+            \"insertTextFormat\": 1,\n+            \"kind\": 14,\n+            \"label\": \"super\"\n+          }\n+        ]),\n+    );\n+}\n+\n #[test]\n fn test_runnables_no_project() {\n     let server = project("}]}