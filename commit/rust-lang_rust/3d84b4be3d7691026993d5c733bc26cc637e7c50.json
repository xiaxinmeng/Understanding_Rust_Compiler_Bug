{"sha": "3d84b4be3d7691026993d5c733bc26cc637e7c50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkODRiNGJlM2Q3NjkxMDI2OTkzZDVjNzMzYmMyNmNjNjM3ZTdjNTA=", "commit": {"author": {"name": "John Schmidt", "email": "john.schmidt.h@gmail.com", "date": "2014-05-31T11:02:29Z"}, "committer": {"name": "John", "email": "john.schmidt.h@gmail.com", "date": "2014-06-30T16:50:32Z"}, "message": "Add `utf16_units`\n\nThis deprecates `.to_utf16`. `x.to_utf16()` should be replaced by either\n`x.utf16_units().collect::<Vec<u16>>()` (the type annotation may be optional), or\njust `x.utf16_units()` directly, if it can be used in an iterator context.\n\nCloses #14358\n\n[breaking-change]", "tree": {"sha": "a86da659fa4c8602ffe111ba4004afca011b9ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a86da659fa4c8602ffe111ba4004afca011b9ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d84b4be3d7691026993d5c733bc26cc637e7c50", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d84b4be3d7691026993d5c733bc26cc637e7c50", "html_url": "https://github.com/rust-lang/rust/commit/3d84b4be3d7691026993d5c733bc26cc637e7c50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d84b4be3d7691026993d5c733bc26cc637e7c50/comments", "author": {"login": "schmee", "id": 3405586, "node_id": "MDQ6VXNlcjM0MDU1ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/3405586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schmee", "html_url": "https://github.com/schmee", "followers_url": "https://api.github.com/users/schmee/followers", "following_url": "https://api.github.com/users/schmee/following{/other_user}", "gists_url": "https://api.github.com/users/schmee/gists{/gist_id}", "starred_url": "https://api.github.com/users/schmee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schmee/subscriptions", "organizations_url": "https://api.github.com/users/schmee/orgs", "repos_url": "https://api.github.com/users/schmee/repos", "events_url": "https://api.github.com/users/schmee/events{/privacy}", "received_events_url": "https://api.github.com/users/schmee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "schmee", "id": 3405586, "node_id": "MDQ6VXNlcjM0MDU1ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/3405586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schmee", "html_url": "https://github.com/schmee", "followers_url": "https://api.github.com/users/schmee/followers", "following_url": "https://api.github.com/users/schmee/following{/other_user}", "gists_url": "https://api.github.com/users/schmee/gists{/gist_id}", "starred_url": "https://api.github.com/users/schmee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schmee/subscriptions", "organizations_url": "https://api.github.com/users/schmee/orgs", "repos_url": "https://api.github.com/users/schmee/repos", "events_url": "https://api.github.com/users/schmee/events{/privacy}", "received_events_url": "https://api.github.com/users/schmee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b569c77148e8e839b38b678c7c167efc643d2721", "url": "https://api.github.com/repos/rust-lang/rust/commits/b569c77148e8e839b38b678c7c167efc643d2721", "html_url": "https://github.com/rust-lang/rust/commit/b569c77148e8e839b38b678c7c167efc643d2721"}], "stats": {"total": 111, "additions": 84, "deletions": 27}, "files": [{"sha": "e07281523f4b63fb5b24ac5a9e50c2d798643c6c", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=3d84b4be3d7691026993d5c733bc26cc637e7c50", "patch": "@@ -803,15 +803,9 @@ pub trait StrAllocating: Str {\n     }\n \n     /// Converts to a vector of `u16` encoded as UTF-16.\n+    #[deprecated = \"use `utf16_units` instead\"]\n     fn to_utf16(&self) -> Vec<u16> {\n-        let me = self.as_slice();\n-        let mut u = Vec::new();\n-        for ch in me.chars() {\n-            let mut buf = [0u16, ..2];\n-            let n = ch.encode_utf16(buf /* as mut slice! */);\n-            u.push_all(buf.slice_to(n));\n-        }\n-        u\n+        self.as_slice().utf16_units().collect::<Vec<u16>>()\n     }\n \n     /// Given a string, make a new string with repeated copies of it.\n@@ -1619,14 +1613,17 @@ mod tests {\n \n         for p in pairs.iter() {\n             let (s, u) = (*p).clone();\n+            let s_as_utf16 = s.as_slice().utf16_units().collect::<Vec<u16>>();\n+            let u_as_string = from_utf16(u.as_slice()).unwrap();\n+\n             assert!(is_utf16(u.as_slice()));\n-            assert_eq!(s.to_utf16(), u);\n+            assert_eq!(s_as_utf16, u);\n \n-            assert_eq!(from_utf16(u.as_slice()).unwrap(), s);\n+            assert_eq!(u_as_string, s);\n             assert_eq!(from_utf16_lossy(u.as_slice()), s);\n \n-            assert_eq!(from_utf16(s.to_utf16().as_slice()).unwrap(), s);\n-            assert_eq!(from_utf16(u.as_slice()).unwrap().to_utf16(), u);\n+            assert_eq!(from_utf16(s_as_utf16.as_slice()).unwrap(), s);\n+            assert_eq!(u_as_string.as_slice().utf16_units().collect::<Vec<u16>>(), u);\n         }\n     }\n "}, {"sha": "e7174944a2143383e4a39e52e88226f055d623ff", "filename": "src/libcore/str.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=3d84b4be3d7691026993d5c733bc26cc637e7c50", "patch": "@@ -16,6 +16,7 @@\n \n use mem;\n use char;\n+use char::Char;\n use clone::Clone;\n use cmp;\n use cmp::{PartialEq, Eq};\n@@ -24,7 +25,7 @@ use default::Default;\n use iter::{Filter, Map, Iterator};\n use iter::{DoubleEndedIterator, ExactSize};\n use iter::range;\n-use num::Saturating;\n+use num::{CheckedMul, Saturating};\n use option::{None, Option, Some};\n use raw::Repr;\n use slice::ImmutableVector;\n@@ -557,6 +558,41 @@ impl<'a> Iterator<&'a str> for StrSplits<'a> {\n     }\n }\n \n+/// External iterator for a string's UTF16 codeunits.\n+/// Use with the `std::iter` module.\n+#[deriving(Clone)]\n+pub struct Utf16CodeUnits<'a> {\n+    chars: Chars<'a>,\n+    extra: u16\n+}\n+\n+impl<'a> Iterator<u16> for Utf16CodeUnits<'a> {\n+    #[inline]\n+    fn next(&mut self) -> Option<u16> {\n+        if self.extra != 0 {\n+            let tmp = self.extra;\n+            self.extra = 0;\n+            return Some(tmp);\n+        }\n+\n+        let mut buf = [0u16, ..2];\n+        self.chars.next().map(|ch| {\n+            let n = ch.encode_utf16(buf /* as mut slice! */);\n+            if n == 2 { self.extra = buf[1]; }\n+            buf[0]\n+        })\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (low, high) = self.chars.size_hint();\n+        // every char gets either one u16 or two u16,\n+        // so this iterator is between 1 or 2 times as\n+        // long as the underlying iterator.\n+        (low, high.and_then(|n| n.checked_mul(&2)))\n+    }\n+}\n+\n /*\n Section: Comparing strings\n */\n@@ -1619,6 +1655,9 @@ pub trait StrSlice<'a> {\n     /// and that it is not reallocated (e.g. by pushing to the\n     /// string).\n     fn as_ptr(&self) -> *const u8;\n+\n+    /// Return an iterator of `u16` over the string encoded as UTF-16.\n+    fn utf16_units(&self) -> Utf16CodeUnits<'a>;\n }\n \n impl<'a> StrSlice<'a> for &'a str {\n@@ -1967,6 +2006,11 @@ impl<'a> StrSlice<'a> for &'a str {\n     fn as_ptr(&self) -> *const u8 {\n         self.repr().data\n     }\n+\n+    #[inline]\n+    fn utf16_units(&self) -> Utf16CodeUnits<'a> {\n+        Utf16CodeUnits{ chars: self.chars(), extra: 0}\n+    }\n }\n \n impl<'a> Default for &'a str {"}, {"sha": "802526c91969524a9cfd4023466b7fce9f93aa72", "filename": "src/libnative/io/c_win32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibnative%2Fio%2Fc_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibnative%2Fio%2Fc_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_win32.rs?ref=3d84b4be3d7691026993d5c733bc26cc637e7c50", "patch": "@@ -70,6 +70,7 @@ extern \"system\" {\n \n pub mod compat {\n     use std::intrinsics::{atomic_store_relaxed, transmute};\n+    use std::iter::Iterator;\n     use libc::types::os::arch::extra::{LPCWSTR, HMODULE, LPCSTR, LPVOID};\n \n     extern \"system\" {\n@@ -82,7 +83,8 @@ pub mod compat {\n     // layer (after it's loaded) shouldn't be any slower than a regular DLL\n     // call.\n     unsafe fn store_func(ptr: *mut uint, module: &str, symbol: &str, fallback: uint) {\n-        let module = module.to_utf16().append_one(0);\n+        let module: Vec<u16> = module.utf16_units().collect();\n+        let module = module.append_one(0);\n         symbol.with_c_str(|symbol| {\n             let handle = GetModuleHandleW(module.as_ptr());\n             let func: uint = transmute(GetProcAddress(handle, symbol));"}, {"sha": "98553603313404382aafa07a63d726c28ef9b1a6", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=3d84b4be3d7691026993d5c733bc26cc637e7c50", "patch": "@@ -255,7 +255,7 @@ impl Drop for Inner {\n \n pub fn to_utf16(s: &CString) -> IoResult<Vec<u16>> {\n     match s.as_str() {\n-        Some(s) => Ok(s.to_utf16().append_one(0)),\n+        Some(s) => Ok(s.utf16_units().collect::<Vec<u16>>().append_one(0)),\n         None => Err(IoError {\n             code: libc::ERROR_INVALID_NAME as uint,\n             extra: 0,"}, {"sha": "3d248e159a2ea80e732753a94e9364a7d55bc59b", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=3d84b4be3d7691026993d5c733bc26cc637e7c50", "patch": "@@ -294,6 +294,8 @@ fn spawn_process_os(cfg: ProcessConfig,\n     use libc::funcs::extra::msvcrt::get_osfhandle;\n \n     use std::mem;\n+    use std::iter::Iterator;\n+    use std::str::StrSlice;\n \n     if cfg.gid.is_some() || cfg.uid.is_some() {\n         return Err(IoError {\n@@ -328,7 +330,8 @@ fn spawn_process_os(cfg: ProcessConfig,\n                         lpSecurityDescriptor: ptr::mut_null(),\n                         bInheritHandle: 1,\n                     };\n-                    let filename = \"NUL\".to_utf16().append_one(0);\n+                    let filename: Vec<u16> = \"NUL\".utf16_units().collect();\n+                    let filename = filename.append_one(0);\n                     *slot = libc::CreateFileW(filename.as_ptr(),\n                                               access,\n                                               libc::FILE_SHARE_READ |\n@@ -371,7 +374,8 @@ fn spawn_process_os(cfg: ProcessConfig,\n \n         with_envp(cfg.env, |envp| {\n             with_dirp(cfg.cwd, |dirp| {\n-                let mut cmd_str = cmd_str.to_utf16().append_one(0);\n+                let mut cmd_str: Vec<u16> = cmd_str.as_slice().utf16_units().collect();\n+                cmd_str = cmd_str.append_one(0);\n                 let created = CreateProcessW(ptr::null(),\n                                              cmd_str.as_mut_ptr(),\n                                              ptr::mut_null(),\n@@ -770,7 +774,7 @@ fn with_envp<T>(env: Option<&[(CString, CString)]>, cb: |*mut c_void| -> T) -> T\n                 let kv = format!(\"{}={}\",\n                                  pair.ref0().as_str().unwrap(),\n                                  pair.ref1().as_str().unwrap());\n-                blk.push_all(kv.to_utf16().as_slice());\n+                blk.extend(kv.as_slice().utf16_units());\n                 blk.push(0);\n             }\n \n@@ -788,7 +792,9 @@ fn with_dirp<T>(d: Option<&CString>, cb: |*const u16| -> T) -> T {\n       Some(dir) => {\n           let dir_str = dir.as_str()\n                            .expect(\"expected workingdirectory to be utf-8 encoded\");\n-          let dir_str = dir_str.to_utf16().append_one(0);\n+          let dir_str: Vec<u16> = dir_str.utf16_units().collect();\n+          let dir_str = dir_str.append_one(0);\n+\n           cb(dir_str.as_ptr())\n       },\n       None => cb(ptr::null())"}, {"sha": "f07c016367634919387f6794fed522fd6a7673f9", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=3d84b4be3d7691026993d5c733bc26cc637e7c50", "patch": "@@ -162,7 +162,8 @@ mod imp {\n \n     impl Lock {\n         pub fn new(p: &Path) -> Lock {\n-            let p_16 = p.as_str().unwrap().to_utf16().append_one(0);\n+            let p_16: Vec<u16> = p.as_str().unwrap().utf16_units().collect();\n+            let p_16 = p_16.append_one(0);\n             let handle = unsafe {\n                 libc::CreateFileW(p_16.as_ptr(),\n                                   libc::FILE_GENERIC_READ |"}, {"sha": "728875ce2601012f3d25b645de37fddae4212a36", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=3d84b4be3d7691026993d5c733bc26cc637e7c50", "patch": "@@ -281,19 +281,22 @@ pub mod dl {\n #[cfg(target_os = \"win32\")]\n pub mod dl {\n     use c_str::ToCStr;\n+    use iter::Iterator;\n     use libc;\n     use os;\n     use ptr;\n     use result::{Ok, Err, Result};\n-    use str::StrAllocating;\n+    use str::StrSlice;\n     use str;\n     use string::String;\n+    use vec::Vec;\n \n     pub unsafe fn open_external<T: ToCStr>(filename: T) -> *mut u8 {\n         // Windows expects Unicode data\n         let filename_cstr = filename.to_c_str();\n         let filename_str = str::from_utf8(filename_cstr.as_bytes_no_nul()).unwrap();\n-        let filename_str = filename_str.to_utf16().append_one(0);\n+        let filename_str: Vec<u16> = filename_str.utf16_units().collect();\n+        let filename_str = filename_str.append_one(0);\n         LoadLibraryW(filename_str.as_ptr() as *const libc::c_void) as *mut u8\n     }\n "}, {"sha": "be3b6be57b3849ef3c7da1c442d764b99ba75a54", "filename": "src/libstd/os.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d84b4be3d7691026993d5c733bc26cc637e7c50/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=3d84b4be3d7691026993d5c733bc26cc637e7c50", "patch": "@@ -365,7 +365,8 @@ pub fn getenv(n: &str) -> Option<String> {\n     unsafe {\n         with_env_lock(|| {\n             use os::win32::{fill_utf16_buf_and_decode};\n-            let n = n.to_utf16().append_one(0);\n+            let n: Vec<u16> = n.utf16_units().collect();\n+            let n = n.append_one(0);\n             fill_utf16_buf_and_decode(|buf, sz| {\n                 libc::GetEnvironmentVariableW(n.as_ptr(), buf, sz)\n             })\n@@ -411,8 +412,10 @@ pub fn setenv(n: &str, v: &str) {\n \n     #[cfg(windows)]\n     fn _setenv(n: &str, v: &str) {\n-        let n = n.to_utf16().append_one(0);\n-        let v = v.to_utf16().append_one(0);\n+        let n: Vec<u16> = n.utf16_units().collect();\n+        let n = n.append_one(0);\n+        let v: Vec<u16> = v.utf16_units().collect();\n+        let v = v.append_one(0);\n         unsafe {\n             with_env_lock(|| {\n                 libc::SetEnvironmentVariableW(n.as_ptr(), v.as_ptr());\n@@ -437,7 +440,8 @@ pub fn unsetenv(n: &str) {\n \n     #[cfg(windows)]\n     fn _unsetenv(n: &str) {\n-        let n = n.to_utf16().append_one(0);\n+        let n: Vec<u16> = n.utf16_units().collect();\n+        let n = n.append_one(0);\n         unsafe {\n             with_env_lock(|| {\n                 libc::SetEnvironmentVariableW(n.as_ptr(), ptr::null());\n@@ -804,7 +808,7 @@ pub fn change_dir(p: &Path) -> bool {\n     #[cfg(windows)]\n     fn chdir(p: &Path) -> bool {\n         let p = match p.as_str() {\n-            Some(s) => s.to_utf16().append_one(0),\n+            Some(s) => s.utf16_units().collect::<Vec<u16>>().append_one(0),\n             None => return false,\n         };\n         unsafe {"}]}