{"sha": "8adc744645f72dce8d3030b3c3cd282c14e8a6de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZGM3NDQ2NDVmNzJkY2U4ZDMwMzBiM2MzY2QyODJjMTRlOGE2ZGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-04T17:04:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-04T17:04:25Z"}, "message": "Implement Box rvalue", "tree": {"sha": "1d78b200d065744510798574ae357a75b5391337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d78b200d065744510798574ae357a75b5391337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8adc744645f72dce8d3030b3c3cd282c14e8a6de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8adc744645f72dce8d3030b3c3cd282c14e8a6de", "html_url": "https://github.com/rust-lang/rust/commit/8adc744645f72dce8d3030b3c3cd282c14e8a6de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8adc744645f72dce8d3030b3c3cd282c14e8a6de/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e407f39ba89c7ffeed4eba4ffe0688c0f80b5c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e407f39ba89c7ffeed4eba4ffe0688c0f80b5c9f", "html_url": "https://github.com/rust-lang/rust/commit/e407f39ba89c7ffeed4eba4ffe0688c0f80b5c9f"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "3c07f08f95159340f422e69e2cc6bf059d6342d9", "filename": "Readme.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8adc744645f72dce8d3030b3c3cd282c14e8a6de/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/8adc744645f72dce8d3030b3c3cd282c14e8a6de/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=8adc744645f72dce8d3030b3c3cd282c14e8a6de", "patch": "@@ -40,7 +40,6 @@ $ ./build.sh\n * Unsized types\n * Slice indexing\n * Sub slice\n-* Some rvalue's\n \n * Inline assembly\n * Custom sections"}, {"sha": "75059743b9d90817a06258d5c6b8f77d807ece27", "filename": "examples/mini_core.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8adc744645f72dce8d3030b3c3cd282c14e8a6de/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc744645f72dce8d3030b3c3cd282c14e8a6de/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=8adc744645f72dce8d3030b3c3cd282c14e8a6de", "patch": "@@ -45,6 +45,7 @@ unsafe impl Sync for i32 {}\n unsafe impl Sync for isize {}\n unsafe impl Sync for char {}\n unsafe impl<'a, T: ?Sized> Sync for &'a T {}\n+unsafe impl Sync for [u8; 16] {}\n \n #[lang = \"freeze\"]\n trait Freeze {}\n@@ -186,6 +187,16 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n     drop_in_place(to_drop);\n }\n \n+#[lang = \"owned_box\"]\n+pub struct Box<T>(*mut T);\n+\n+static mut MY_TINY_HEAP: [u8; 16] = [0; 16];\n+\n+#[lang = \"exchange_malloc\"]\n+unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n+     &mut MY_TINY_HEAP as *mut [u8; 16] as *mut u8\n+}\n+\n pub mod intrinsics {\n     extern \"rust-intrinsic\" {\n         pub fn abort() -> !;"}, {"sha": "a8297fe7613030d9bb3fbf5cafc863a7ec4d3796", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8adc744645f72dce8d3030b3c3cd282c14e8a6de/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc744645f72dce8d3030b3c3cd282c14e8a6de/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=8adc744645f72dce8d3030b3c3cd282c14e8a6de", "patch": "@@ -1,6 +1,6 @@\n // Adapted from https://github.com/sunfishcode/mir2cranelift/blob/master/rust-examples/nocore-hello-world.rs\n \n-#![feature(no_core, unboxed_closures, start, lang_items)]\n+#![feature(no_core, unboxed_closures, start, lang_items, box_syntax)]\n #![no_core]\n #![allow(dead_code)]\n \n@@ -43,9 +43,11 @@ static NUM_REF: &'static u8 = unsafe { &NUM };\n \n fn main() {\n     unsafe {\n-        let slice: &[u8] = b\"Hello!\\0\" as &[u8; 7];\n+        let slice: &[u8] = b\"Hello\\0\" as &[u8; 6];\n         let ptr: *const u8 = slice as *const [u8] as *const u8;\n+        let world = box \"World!\\0\";\n         puts(ptr);\n+        puts(*world as *const str as *const u8);\n     }\n \n     //panic(&(\"panic msg\", \"abc.rs\", 0, 43));"}, {"sha": "cfe44f2f6895d704d4867f4f420b2c0bac86fdec", "filename": "src/base.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8adc744645f72dce8d3030b3c3cd282c14e8a6de/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc744645f72dce8d3030b3c3cd282c14e8a6de/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=8adc744645f72dce8d3030b3c3cd282c14e8a6de", "patch": "@@ -488,7 +488,28 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n                     lval.write_cvalue(fx, CValue::ByVal(size, usize_layout));\n                 }\n-                Rvalue::NullaryOp(NullOp::Box, ty) => unimplemented!(\"rval box {:?}\", ty),\n+                Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n+                    use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n+\n+                    let usize_type = fx.cton_type(fx.tcx.types.usize).unwrap();\n+                    let (size, align) = fx.layout_of(content_ty).size_and_align();\n+                    let llsize = fx.bcx.ins().iconst(usize_type, size.bytes() as i64);\n+                    let llalign = fx.bcx.ins().iconst(usize_type, align.abi() as i64);\n+                    let box_layout = fx.layout_of(fx.tcx.mk_box(content_ty));\n+\n+                    // Allocate space:\n+                    let def_id = match fx.tcx.lang_items().require(ExchangeMallocFnLangItem) {\n+                        Ok(id) => id,\n+                        Err(s) => {\n+                            fx.tcx.sess.fatal(&format!(\"allocation of `{}` {}\", box_layout.ty, s));\n+                        }\n+                    };\n+                    let instance = ty::Instance::mono(fx.tcx, def_id);\n+                    let func_ref = fx.get_function_ref(instance);\n+                    let call = fx.bcx.ins().call(func_ref, &[llsize, llalign]);\n+                    let ptr = fx.bcx.inst_results(call)[0];\n+                    lval.write_cvalue(fx, CValue::ByVal(ptr, box_layout));\n+                },\n                 Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n                     assert!(\n                         lval.layout()"}, {"sha": "7081511b19bdfe1f43154f14bee720893702fc49", "filename": "src/common.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8adc744645f72dce8d3030b3c3cd282c14e8a6de/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc744645f72dce8d3030b3c3cd282c14e8a6de/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=8adc744645f72dce8d3030b3c3cd282c14e8a6de", "patch": "@@ -29,14 +29,6 @@ fn scalar_to_cton_type(tcx: TyCtxt, scalar: &Scalar) -> Type {\n     }\n }\n \n-fn ptr_referee<'tcx>(ty: Ty<'tcx>) -> Ty<'tcx> {\n-    match ty.sty {\n-        ty::Ref(_, ty, _) => ty,\n-        ty::RawPtr(TypeAndMut { ty, mutbl: _ }) => ty,\n-        _ => bug!(\"{:?}\", ty),\n-    }\n-}\n-\n pub fn cton_type_from_ty<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ty: Ty<'tcx>,\n@@ -153,7 +145,14 @@ impl<'tcx> CValue<'tcx> {\n             CValue::ByRef(addr, layout) => {\n                 let cton_ty = fx\n                     .cton_type(layout.ty)\n-                    .expect(&format!(\"load_value of type {:?}\", layout.ty));\n+                    .unwrap_or_else(|| {\n+                        if layout.ty.is_box() && !fx.layout_of(layout.ty.builtin_deref(true).unwrap().ty).is_unsized() {\n+                            // Consider sized box to be a ptr\n+                            pointer_ty(fx.tcx)\n+                        } else {\n+                            panic!(\"load_value of type {:?}\", layout.ty);\n+                        }\n+                    });\n                 fx.bcx.ins().load(cton_ty, MemFlags::new(), addr, 0)\n             }\n             CValue::ByVal(value, _layout) => value,\n@@ -223,7 +222,7 @@ impl<'tcx> CValue<'tcx> {\n         }\n         match &self.layout().ty.sty {\n             ty::Ref(_, ty, _) | ty::RawPtr(TypeAndMut { ty, mutbl: _ }) => {\n-                let (ptr, extra) = match ptr_referee(dest.layout().ty).sty {\n+                let (ptr, extra) = match dest.layout().ty.builtin_deref(true).unwrap().ty.sty {\n                     ty::Slice(slice_elem_ty) => match ty.sty {\n                         ty::Array(array_elem_ty, size) => {\n                             assert_eq!(slice_elem_ty, array_elem_ty);\n@@ -453,7 +452,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     }\n \n     pub fn place_deref(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> CPlace<'tcx> {\n-        let inner_layout = fx.layout_of(ptr_referee(self.layout().ty));\n+        let inner_layout = fx.layout_of(self.layout().ty.builtin_deref(true).unwrap().ty);\n         if !inner_layout.is_unsized() {\n             CPlace::Addr(self.to_cvalue(fx).load_value(fx), None, inner_layout)\n         } else {"}]}