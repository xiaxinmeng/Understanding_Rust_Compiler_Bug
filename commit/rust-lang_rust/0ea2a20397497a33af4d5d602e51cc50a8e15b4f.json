{"sha": "0ea2a20397497a33af4d5d602e51cc50a8e15b4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYTJhMjAzOTc0OTdhMzNhZjRkNWQ2MDJlNTFjYzUwYThlMTViNGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-20T21:37:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-20T21:37:49Z"}, "message": "Add PointerKind to LpDeref", "tree": {"sha": "ef772772c1159fb49c257c093ddb26f161d648ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef772772c1159fb49c257c093ddb26f161d648ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ea2a20397497a33af4d5d602e51cc50a8e15b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ea2a20397497a33af4d5d602e51cc50a8e15b4f", "html_url": "https://github.com/rust-lang/rust/commit/0ea2a20397497a33af4d5d602e51cc50a8e15b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ea2a20397497a33af4d5d602e51cc50a8e15b4f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2246d56e7149402f18041d05e3c0ecf598671904", "url": "https://api.github.com/repos/rust-lang/rust/commits/2246d56e7149402f18041d05e3c0ecf598671904", "html_url": "https://github.com/rust-lang/rust/commit/2246d56e7149402f18041d05e3c0ecf598671904"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "3b518cb15904b141e281c576c238c5e943b1d875", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ea2a20397497a33af4d5d602e51cc50a8e15b4f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea2a20397497a33af4d5d602e51cc50a8e15b4f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=0ea2a20397497a33af4d5d602e51cc50a8e15b4f", "patch": "@@ -101,7 +101,7 @@ impl RestrictionsContext {\n                 self.extend(result, cmt.mutbl, LpInterior(i), restrictions)\n             }\n \n-            mc::cat_deref(cmt_base, _, mc::uniq_ptr) => {\n+            mc::cat_deref(cmt_base, _, pk @ mc::uniq_ptr) => {\n                 // R-Deref-Send-Pointer\n                 //\n                 // When we borrow the interior of an owned pointer, we\n@@ -110,7 +110,7 @@ impl RestrictionsContext {\n                 let result = self.restrict(\n                     cmt_base,\n                     restrictions | RESTR_MUTATE | RESTR_CLAIM);\n-                self.extend(result, cmt.mutbl, LpDeref, restrictions)\n+                self.extend(result, cmt.mutbl, LpDeref(pk), restrictions)\n             }\n \n             mc::cat_copied_upvar(*) | // FIXME(#2152) allow mutation of upvars\n@@ -129,7 +129,7 @@ impl RestrictionsContext {\n                 Safe\n             }\n \n-            mc::cat_deref(cmt_base, _, mc::gc_ptr(m_mutbl)) => {\n+            mc::cat_deref(cmt_base, _, pk @ mc::gc_ptr(m_mutbl)) => {\n                 // R-Deref-Managed-Borrowed\n                 //\n                 // Technically, no restrictions are *necessary* here.\n@@ -170,14 +170,14 @@ impl RestrictionsContext {\n                 match opt_loan_path(cmt_base) {\n                     None => Safe,\n                     Some(lp_base) => {\n-                        let lp = @LpExtend(lp_base, cmt.mutbl, LpDeref);\n+                        let lp = @LpExtend(lp_base, cmt.mutbl, LpDeref(pk));\n                         SafeIf(lp, ~[Restriction {loan_path: lp,\n                                                   set: restrictions}])\n                     }\n                 }\n             }\n \n-            mc::cat_deref(cmt_base, _, mc::region_ptr(m_mutbl, _)) => {\n+            mc::cat_deref(cmt_base, _, pk @ mc::region_ptr(m_mutbl, _)) => {\n                 // Because an `&mut` pointer does not inherit its\n                 // mutability, we can only prevent mutation or prevent\n                 // freezing if it is not aliased. Therefore, in such\n@@ -187,7 +187,7 @@ impl RestrictionsContext {\n                     let result = self.restrict(\n                         cmt_base,\n                         RESTR_ALIAS | RESTR_MUTATE | RESTR_CLAIM);\n-                    self.extend(result, cmt.mutbl, LpDeref, restrictions)\n+                    self.extend(result, cmt.mutbl, LpDeref(pk), restrictions)\n                 } else {\n                     // R-Deref-Mut-Borrowed-2\n                     Safe"}, {"sha": "a84716bd73f8d06348a0eb98a43c180e36019ef7", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ea2a20397497a33af4d5d602e51cc50a8e15b4f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea2a20397497a33af4d5d602e51cc50a8e15b4f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=0ea2a20397497a33af4d5d602e51cc50a8e15b4f", "patch": "@@ -261,7 +261,7 @@ pub enum LoanPath {\n \n #[deriving(Eq, IterBytes)]\n pub enum LoanPathElem {\n-    LpDeref,                     // `*LV` in doc.rs\n+    LpDeref(mc::PointerKind),    // `*LV` in doc.rs\n     LpInterior(mc::InteriorKind) // `LV.f` in doc.rs\n }\n \n@@ -295,9 +295,9 @@ pub fn opt_loan_path(cmt: mc::cmt) -> Option<@LoanPath> {\n             Some(@LpVar(id))\n         }\n \n-        mc::cat_deref(cmt_base, _, _) => {\n+        mc::cat_deref(cmt_base, _, pk) => {\n             do opt_loan_path(cmt_base).map_move |lp| {\n-                @LpExtend(lp, cmt.mutbl, LpDeref)\n+                @LpExtend(lp, cmt.mutbl, LpDeref(pk))\n             }\n         }\n \n@@ -728,7 +728,7 @@ impl BorrowckCtxt {\n                                                  loan_path: &LoanPath,\n                                                  out: &mut ~str) {\n         match *loan_path {\n-            LpExtend(_, _, LpDeref) => {\n+            LpExtend(_, _, LpDeref(_)) => {\n                 out.push_char('(');\n                 self.append_loan_path_to_str(loan_path, out);\n                 out.push_char(')');\n@@ -776,7 +776,7 @@ impl BorrowckCtxt {\n                 out.push_str(\"[]\");\n             }\n \n-            LpExtend(lp_base, _, LpDeref) => {\n+            LpExtend(lp_base, _, LpDeref(_)) => {\n                 out.push_char('*');\n                 self.append_loan_path_to_str(lp_base, out);\n             }\n@@ -854,7 +854,7 @@ impl Repr for LoanPath {\n                 fmt!(\"$(%?)\", id)\n             }\n \n-            &LpExtend(lp, _, LpDeref) => {\n+            &LpExtend(lp, _, LpDeref(_)) => {\n                 fmt!(\"%s.*\", lp.repr(tcx))\n             }\n "}, {"sha": "2cd2d94b9daf8fdf6429024861a5e2886460b95e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ea2a20397497a33af4d5d602e51cc50a8e15b4f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea2a20397497a33af4d5d602e51cc50a8e15b4f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=0ea2a20397497a33af4d5d602e51cc50a8e15b4f", "patch": "@@ -59,18 +59,18 @@ use syntax::print::pprust;\n \n #[deriving(Eq)]\n pub enum categorization {\n-    cat_rvalue(ast::NodeId),          // temporary val, argument is its scope\n+    cat_rvalue(ast::NodeId),           // temporary val, argument is its scope\n     cat_static_item,\n     cat_implicit_self,\n     cat_copied_upvar(CopiedUpvar),     // upvar copied into @fn or ~fn env\n     cat_stack_upvar(cmt),              // by ref upvar from &fn\n-    cat_local(ast::NodeId),           // local variable\n-    cat_arg(ast::NodeId),             // formal argument\n-    cat_deref(cmt, uint, ptr_kind),    // deref of a ptr\n+    cat_local(ast::NodeId),            // local variable\n+    cat_arg(ast::NodeId),              // formal argument\n+    cat_deref(cmt, uint, PointerKind), // deref of a ptr\n     cat_interior(cmt, InteriorKind),   // something interior: field, tuple, etc\n     cat_downcast(cmt),                 // selects a particular enum variant (*)\n-    cat_discr(cmt, ast::NodeId),      // match discriminant (see preserve())\n-    cat_self(ast::NodeId),            // explicit `self`\n+    cat_discr(cmt, ast::NodeId),       // match discriminant (see preserve())\n+    cat_self(ast::NodeId),             // explicit `self`\n \n     // (*) downcast is only required if the enum has more than one variant\n }\n@@ -82,8 +82,8 @@ pub struct CopiedUpvar {\n }\n \n // different kinds of pointers:\n-#[deriving(Eq)]\n-pub enum ptr_kind {\n+#[deriving(Eq, IterBytes)]\n+pub enum PointerKind {\n     uniq_ptr,\n     gc_ptr(ast::mutability),\n     region_ptr(ast::mutability, ty::Region),\n@@ -147,7 +147,7 @@ pub type cmt = @cmt_;\n // We pun on *T to mean both actual deref of a ptr as well\n // as accessing of components:\n pub enum deref_kind {\n-    deref_ptr(ptr_kind),\n+    deref_ptr(PointerKind),\n     deref_interior(InteriorKind),\n }\n \n@@ -1233,7 +1233,7 @@ impl Repr for categorization {\n     }\n }\n \n-pub fn ptr_sigil(ptr: ptr_kind) -> ~str {\n+pub fn ptr_sigil(ptr: PointerKind) -> ~str {\n     match ptr {\n         uniq_ptr => ~\"~\",\n         gc_ptr(_) => ~\"@\","}]}