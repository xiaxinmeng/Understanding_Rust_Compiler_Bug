{"sha": "642cd467c6b49f50b42d833480b875ca5eb64e32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MmNkNDY3YzZiNDlmNTBiNDJkODMzNDgwYjg3NWNhNWViNjRlMzI=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-16T12:51:50Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-16T15:52:46Z"}, "message": "Avoid quadratic growth of cleanup blocks\n\nCurrently, cleanup blocks are only reused when there are nested scopes, the\nchild scope's cleanup block will terminate with a jump to the parent\nscope's cleanup block. But within a single scope, adding or revoking\nany cleanup will force a fresh cleanup block. This means quadratic\ngrowth with the number of allocations in a scope, because each\nallocation needs a landing pad.\n\nInstead of forcing a fresh cleanup block, we can keep a list chained\ncleanup blocks that form a prefix of the currently required cleanups.\nThat way, the next cleanup block only has to handle newly added\ncleanups. And by keeping the whole list instead of just the latest\nblock, we can also handle revocations more efficiently, by only\ndropping those blocks that are no longer required, instead of all of\nthem.\n\nReduces the size of librustc by about 5% and the time required to build\nit by about 10%.", "tree": {"sha": "f8711972df699b79546d4355d374d0a11f826cf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8711972df699b79546d4355d374d0a11f826cf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/642cd467c6b49f50b42d833480b875ca5eb64e32", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/642cd467c6b49f50b42d833480b875ca5eb64e32", "html_url": "https://github.com/rust-lang/rust/commit/642cd467c6b49f50b42d833480b875ca5eb64e32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/642cd467c6b49f50b42d833480b875ca5eb64e32/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebca26cd542e2e733bf11c7be7b541b54b0f9ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebca26cd542e2e733bf11c7be7b541b54b0f9ef2", "html_url": "https://github.com/rust-lang/rust/commit/ebca26cd542e2e733bf11c7be7b541b54b0f9ef2"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "53f2729c38e91624bc56cdb975c9f744c535226d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/642cd467c6b49f50b42d833480b875ca5eb64e32/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642cd467c6b49f50b42d833480b875ca5eb64e32/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=642cd467c6b49f50b42d833480b875ca5eb64e32", "patch": "@@ -1317,26 +1317,38 @@ pub fn cleanup_and_leave(bcx: block,\n \n         match cur.kind {\n             block_scope(inf) if !inf.empty_cleanups() => {\n-                let (sub_cx, inf_cleanups) = {\n+                let (sub_cx, dest, inf_cleanups) = {\n                     let inf = &mut *inf; // FIXME(#5074) workaround stage0\n+                    let mut skip = 0;\n+                    let mut dest = None;\n                     {\n-                        let r = vec::find((*inf).cleanup_paths, |cp| cp.target == leave);\n+                        let r = vec::rfind((*inf).cleanup_paths, |cp| cp.target == leave);\n                         for r.iter().advance |cp| {\n-                            Br(bcx, cp.dest);\n-                            return;\n+                            if cp.size == inf.cleanups.len() {\n+                                Br(bcx, cp.dest);\n+                                return;\n+                            }\n+\n+                            skip = cp.size;\n+                            dest = Some(cp.dest);\n                         }\n                     }\n                     let sub_cx = sub_block(bcx, \"cleanup\");\n                     Br(bcx, sub_cx.llbb);\n                     inf.cleanup_paths.push(cleanup_path {\n                         target: leave,\n+                        size: inf.cleanups.len(),\n                         dest: sub_cx.llbb\n                     });\n-                    (sub_cx, copy inf.cleanups)\n+                    (sub_cx, dest, inf.cleanups.tailn(skip).to_owned())\n                 };\n                 bcx = trans_block_cleanups_(sub_cx,\n                                             inf_cleanups,\n                                             is_lpad);\n+                for dest.iter().advance |&dest| {\n+                    Br(bcx, dest);\n+                    return;\n+                }\n             }\n             _ => ()\n         }"}, {"sha": "ff98e5a177f2ee26df59c98302fcfac808523ebe", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/642cd467c6b49f50b42d833480b875ca5eb64e32/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642cd467c6b49f50b42d833480b875ca5eb64e32/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=642cd467c6b49f50b42d833480b875ca5eb64e32", "patch": "@@ -325,11 +325,17 @@ pub enum cleanup {\n // target: none means the path ends in an resume instruction\n pub struct cleanup_path {\n     target: Option<BasicBlockRef>,\n+    size: uint,\n     dest: BasicBlockRef\n }\n \n-pub fn scope_clean_changed(scope_info: &mut scope_info) {\n-    if scope_info.cleanup_paths.len() > 0u { scope_info.cleanup_paths = ~[]; }\n+pub fn shrink_scope_clean(scope_info: &mut scope_info, size: uint) {\n+    scope_info.landing_pad = None;\n+    scope_info.cleanup_paths = scope_info.cleanup_paths.iter()\n+            .take_while(|&cu| cu.size <= size).transform(|&x|x).collect();\n+}\n+\n+pub fn grow_scope_clean(scope_info: &mut scope_info) {\n     scope_info.landing_pad = None;\n }\n \n@@ -374,7 +380,7 @@ pub fn add_clean(bcx: block, val: ValueRef, t: ty::t) {\n         scope_info.cleanups.push(\n             clean(|a| glue::drop_ty_root(a, root, rooted, t),\n                   cleanup_type));\n-        scope_clean_changed(scope_info);\n+        grow_scope_clean(scope_info);\n     }\n }\n \n@@ -388,7 +394,7 @@ pub fn add_clean_temp_immediate(cx: block, val: ValueRef, ty: ty::t) {\n         scope_info.cleanups.push(\n             clean_temp(val, |a| glue::drop_ty_immediate(a, val, ty),\n                        cleanup_type));\n-        scope_clean_changed(scope_info);\n+        grow_scope_clean(scope_info);\n     }\n }\n pub fn add_clean_temp_mem(bcx: block, val: ValueRef, t: ty::t) {\n@@ -402,7 +408,7 @@ pub fn add_clean_temp_mem(bcx: block, val: ValueRef, t: ty::t) {\n         scope_info.cleanups.push(\n             clean_temp(val, |a| glue::drop_ty_root(a, root, rooted, t),\n                        cleanup_type));\n-        scope_clean_changed(scope_info);\n+        grow_scope_clean(scope_info);\n     }\n }\n pub fn add_clean_return_to_mut(bcx: block,\n@@ -434,7 +440,7 @@ pub fn add_clean_return_to_mut(bcx: block,\n                                                  filename_val,\n                                                  line_val),\n                 normal_exit_only));\n-        scope_clean_changed(scope_info);\n+        grow_scope_clean(scope_info);\n     }\n }\n pub fn add_clean_free(cx: block, ptr: ValueRef, heap: heap) {\n@@ -451,7 +457,7 @@ pub fn add_clean_free(cx: block, ptr: ValueRef, heap: heap) {\n     do in_scope_cx(cx) |scope_info| {\n         scope_info.cleanups.push(clean_temp(ptr, free_fn,\n                                       normal_exit_and_unwind));\n-        scope_clean_changed(scope_info);\n+        grow_scope_clean(scope_info);\n     }\n }\n \n@@ -474,7 +480,7 @@ pub fn revoke_clean(cx: block, val: ValueRef) {\n                             vec::slice(scope_info.cleanups,\n                                       *i + 1u,\n                                       scope_info.cleanups.len()));\n-            scope_clean_changed(scope_info);\n+            shrink_scope_clean(scope_info, *i);\n         }\n     }\n }"}]}