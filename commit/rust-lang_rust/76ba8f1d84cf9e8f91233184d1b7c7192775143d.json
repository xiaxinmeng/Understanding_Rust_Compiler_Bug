{"sha": "76ba8f1d84cf9e8f91233184d1b7c7192775143d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YmE4ZjFkODRjZjllOGY5MTIzMzE4NGQxYjdjNzE5Mjc3NTE0M2Q=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-09T13:59:46Z"}, "committer": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-09T13:59:46Z"}, "message": "Changed array_list::replace() return behavior.", "tree": {"sha": "6d2bedb8a580f0965e921fcb148eb8f6e49f0208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d2bedb8a580f0965e921fcb148eb8f6e49f0208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76ba8f1d84cf9e8f91233184d1b7c7192775143d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76ba8f1d84cf9e8f91233184d1b7c7192775143d", "html_url": "https://github.com/rust-lang/rust/commit/76ba8f1d84cf9e8f91233184d1b7c7192775143d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76ba8f1d84cf9e8f91233184d1b7c7192775143d/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f043ee1d3399b9f651f8465aeca27ecbb53da520", "url": "https://api.github.com/repos/rust-lang/rust/commits/f043ee1d3399b9f651f8465aeca27ecbb53da520", "html_url": "https://github.com/rust-lang/rust/commit/f043ee1d3399b9f651f8465aeca27ecbb53da520"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "a7ad173255242e86347180e127cffb5d4a99525e", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76ba8f1d84cf9e8f91233184d1b7c7192775143d/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/76ba8f1d84cf9e8f91233184d1b7c7192775143d/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=76ba8f1d84cf9e8f91233184d1b7c7192775143d", "patch": "@@ -53,7 +53,9 @@ rust_srv::realloc(void *p, size_t bytes)\n     }\n     void * val = ::realloc(p, bytes);\n #ifdef TRACK_ALLOCATIONS\n-    if (allocation_list.replace(p, val) == NULL) {\n+    if (allocation_list.replace(p, val) == false) {\n+        printf(\"realloc: ptr 0x%\" PRIxPTR \" is not in allocation_list\\n\",\n+               (uintptr_t) p);\n         fatal(\"not in allocation_list\", __FILE__, __LINE__);\n     }\n #endif\n@@ -64,8 +66,8 @@ void\n rust_srv::free(void *p)\n {\n #ifdef TRACK_ALLOCATIONS\n-    if (allocation_list.replace(p, NULL) == NULL) {\n-        printf(\"ptr 0x%\" PRIxPTR \" is not in allocation_list\\n\",\n+    if (allocation_list.replace(p, NULL) == false) {\n+        printf(\"free: ptr 0x%\" PRIxPTR \" is not in allocation_list\\n\",\n                (uintptr_t) p);\n         fatal(\"not in allocation_list\", __FILE__, __LINE__);\n     }"}, {"sha": "929117f3fc26a8c4648e4e758aec4ffcb4b2d121", "filename": "src/rt/util/array_list.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76ba8f1d84cf9e8f91233184d1b7c7192775143d/src%2Frt%2Futil%2Farray_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/76ba8f1d84cf9e8f91233184d1b7c7192775143d/src%2Frt%2Futil%2Farray_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Farray_list.h?ref=76ba8f1d84cf9e8f91233184d1b7c7192775143d", "patch": "@@ -16,7 +16,7 @@ template<typename T> class array_list {\n     int32_t append(T value);\n     int32_t push(T value);\n     T pop();\n-    T replace(T old_value, T new_value);\n+    bool replace(T old_value, T new_value);\n     int32_t index_of(T value);\n     bool is_empty();\n     T & operator[](size_t index);\n@@ -62,16 +62,16 @@ array_list<T>::pop() {\n \n /**\n  * Replaces the old_value in the list with the new_value.\n- * Returns the old_value if the replacement succeeded, or NULL otherwise.\n+ * Returns the true if the replacement succeeded, or false otherwise.\n  */\n-template<typename T> T\n+template<typename T> bool\n array_list<T>::replace(T old_value, T new_value) {\n     int index = index_of(old_value);\n     if (index < 0) {\n-        return NULL;\n+        return false;\n     }\n     _data[index] = new_value;\n-    return old_value;\n+    return true;\n }\n \n template<typename T> int32_t"}]}