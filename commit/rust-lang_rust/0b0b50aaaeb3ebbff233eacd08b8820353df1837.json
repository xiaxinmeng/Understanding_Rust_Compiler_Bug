{"sha": "0b0b50aaaeb3ebbff233eacd08b8820353df1837", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMGI1MGFhYWViM2ViYmZmMjMzZWFjZDA4Yjg4MjAzNTNkZjE4Mzc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-20T11:07:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-21T00:32:42Z"}, "message": "tutorial: Remove the entire 'Types' section\n\nIt's not interesting\n\n/cc: #4217", "tree": {"sha": "edd866eee1e23eb024637f8be4ecfdc315e5356e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edd866eee1e23eb024637f8be4ecfdc315e5356e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b0b50aaaeb3ebbff233eacd08b8820353df1837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0b50aaaeb3ebbff233eacd08b8820353df1837", "html_url": "https://github.com/rust-lang/rust/commit/0b0b50aaaeb3ebbff233eacd08b8820353df1837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b0b50aaaeb3ebbff233eacd08b8820353df1837/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64681213af5d24d9bf308b81145661a81dd0e97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/64681213af5d24d9bf308b81145661a81dd0e97c", "html_url": "https://github.com/rust-lang/rust/commit/64681213af5d24d9bf308b81145661a81dd0e97c"}], "stats": {"total": 81, "additions": 0, "deletions": 81}, "files": [{"sha": "5ac91438dc33ce927efc355f6b1546596f862db9", "filename": "doc/tutorial.md", "status": "modified", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/0b0b50aaaeb3ebbff233eacd08b8820353df1837/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/0b0b50aaaeb3ebbff233eacd08b8820353df1837/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=0b0b50aaaeb3ebbff233eacd08b8820353df1837", "patch": "@@ -308,87 +308,6 @@ fn is_four(x: int) -> bool {\n }\n ~~~~\n \n-## Types\n-\n-The basic types include the usual boolean, integral, and floating-point types.\n-\n-------------------------- -----------------------------------------------\n-`()`                      Unit, the type that has only a single value\n-`bool`                    Boolean type, with values `true` and `false`\n-`int`, `uint`             Machine-pointer-sized signed and unsigned integers\n-`i8`, `i16`, `i32`, `i64` Signed integers with a specific size (in bits)\n-`u8`, `u16`, `u32`, `u64` Unsigned integers with a specific size\n-`float`                   The largest floating-point type efficiently supported on the target machine\n-`f32`, `f64`              Floating-point types with a specific size\n-`char`                    A Unicode character (32 bits)\n-------------------------- -----------------------------------------------\n-\n-These can be combined in composite types, which will be described in\n-more detail later on (the `T`s here stand for any other type,\n-while N should be a literal number):\n-\n-------------------------- -----------------------------------------------\n-`[T * N]`                 Vector (like an array in other languages) with N elements\n-`(T1, T2)`                Tuple type; any arity above 1 is supported\n-`&T`, `~T`, `@T`          [Pointer types](#boxes-and-pointers)\n-------------------------- -----------------------------------------------\n-\n-Some types can only be manipulated by pointer, never directly. For instance,\n-you cannot refer to a string (`str`); instead you refer to a pointer to a\n-string (`@str`, `~str`, or `&str`). These *dynamically-sized* types consist\n-of:\n-\n-------------------------- -----------------------------------------------\n-`fn(a: T1, b: T2) -> T3`  Function types\n-`str`                     String type (in UTF-8)\n-`[T]`                     Vector with unknown size (also called a slice)\n-`[mut T]`                 Mutable vector with unknown size\n-------------------------- -----------------------------------------------\n-\n-> ***Note***: In the future, mutability for vectors may be defined by\n-> the slot that contains the vector, not the type of the vector itself,\n-> deprecating [mut T] syntax.\n-\n-In function types, the return type is specified with an arrow, as in\n-the type `fn() -> bool` or the function declaration `fn foo() -> bool\n-{ }`.  For functions that do not return a meaningful value, you can\n-optionally write `-> ()`, but usually the return annotation is simply\n-left off, as in `fn main() { ... }`.\n-\n-Types can be given names or aliases with `type` declarations:\n-\n-~~~~\n-type MonsterSize = uint;\n-~~~~\n-\n-This will provide a synonym, `MonsterSize`, for unsigned integers. It will not\n-actually create a new, incompatible type\u2014`MonsterSize` and `uint` can be used\n-interchangeably, and using one where the other is expected is not a type\n-error. In that sense, types declared with `type` are *structural*: their\n-meaning follows from their structure, and their names are irrelevant in the\n-type system.\n-\n-Sometimes, you want your data types to be *nominal* instead of structural: you\n-want their name to be part of their meaning, so that types with the same\n-structure but different names are not interchangeable. Rust has two ways to\n-create nominal data types: `struct` and `enum`. They're described in more\n-detail below, but they look like this:\n-\n-~~~~\n-enum HidingPlaces {\n-   Closet(uint),\n-   UnderTheBed(uint)\n-}\n-\n-struct HeroicBabysitter {\n-   bedtime_stories: uint,\n-   sharpened_stakes: uint\n-}\n-\n-struct BabysitterSize(uint);  // a single-variant struct\n-enum MonsterSize = uint;      // a single-variant enum\n-~~~~\n-\n ## Literals\n \n Integers can be written in decimal (`144`), hexadecimal (`0x90`), or"}]}