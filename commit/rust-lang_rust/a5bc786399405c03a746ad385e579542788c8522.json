{"sha": "a5bc786399405c03a746ad385e579542788c8522", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YmM3ODYzOTk0MDVjMDNhNzQ2YWQzODVlNTc5NTQyNzg4Yzg1MjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-24T21:16:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-24T21:16:45Z"}, "message": "Auto merge of #67445 - llogiq:todo, r=dtolnay\n\nDifferentiate todo! and unimplemented!\n\nThis updates the panic message and docs to make it clear that `todo!` is for unfinished code and `unimplemented!` is for partial trait or enum impls.\n\nr? @Centril", "tree": {"sha": "24aa6795bd30d3deb0c3bffafe3d3eb7b047bc70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24aa6795bd30d3deb0c3bffafe3d3eb7b047bc70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5bc786399405c03a746ad385e579542788c8522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5bc786399405c03a746ad385e579542788c8522", "html_url": "https://github.com/rust-lang/rust/commit/a5bc786399405c03a746ad385e579542788c8522", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5bc786399405c03a746ad385e579542788c8522/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9c1c04e986dbf610be8cbe6a8107f90b4db61ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c1c04e986dbf610be8cbe6a8107f90b4db61ce", "html_url": "https://github.com/rust-lang/rust/commit/a9c1c04e986dbf610be8cbe6a8107f90b4db61ce"}, {"sha": "f4d0a04c64e29184e0a92258618e5cbdd0937f86", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4d0a04c64e29184e0a92258618e5cbdd0937f86", "html_url": "https://github.com/rust-lang/rust/commit/f4d0a04c64e29184e0a92258618e5cbdd0937f86"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "e66d9c5bd2e7e7c15db6e9552c014ec952659e8e", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a5bc786399405c03a746ad385e579542788c8522/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5bc786399405c03a746ad385e579542788c8522/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=a5bc786399405c03a746ad385e579542788c8522", "patch": "@@ -557,13 +557,15 @@ macro_rules! unreachable {\n     });\n }\n \n-/// Indicates unfinished code by panicking with a message of \"not yet implemented\".\n+/// Indicates unimplemented code by panicking with a message of \"not implemented\".\n ///\n /// This allows the your code to type-check, which is useful if you are prototyping or\n /// implementing a trait that requires multiple methods which you don't plan of using all of.\n ///\n-/// There is no difference between `unimplemented!` and `todo!` apart from the\n-/// name.\n+/// The difference between `unimplemented!` and [`todo!`](macro.todo.html) is that while `todo!`\n+/// conveys an intent of implementing the functionality later and the message is \"not yet\n+/// implemented\", `unimplemented!` makes no such claims. Its message is \"not implemented\".\n+/// Also some IDEs will mark `todo!`s.\n ///\n /// # Panics\n ///\n@@ -574,7 +576,7 @@ macro_rules! unreachable {\n ///\n /// # Examples\n ///\n-/// Here's an example of some in-progress code. We have a trait `Foo`:\n+/// Say we have a trait `Foo`:\n ///\n /// ```\n /// trait Foo {\n@@ -584,13 +586,13 @@ macro_rules! unreachable {\n /// }\n /// ```\n ///\n-/// We want to implement `Foo` for 'MyStruct', but so far we only know how to\n-/// implement the `bar()` function. `baz()` and `qux()` will still need to be defined\n+/// We want to implement `Foo` for 'MyStruct', but for some reason it only makes sense\n+/// to implement the `bar()` function. `baz()` and `qux()` will still need to be defined\n /// in our implementation of `Foo`, but we can use `unimplemented!` in their definitions\n /// to allow our code to compile.\n ///\n-/// In the meantime, we want to have our program stop running once these\n-/// unimplemented functions are reached.\n+/// We still want to have our program stop running if the unimplemented methods are\n+/// reached.\n ///\n /// ```\n /// # trait Foo {\n@@ -606,19 +608,18 @@ macro_rules! unreachable {\n ///     }\n ///\n ///     fn baz(&self) {\n-///         // We aren't sure how to even start writing baz yet,\n-///         // so we have no logic here at all.\n-///         // This will display \"thread 'main' panicked at 'not yet implemented'\".\n+///         // It makes no sense to `baz` a `MyStruct`, so we have no logic here\n+///         // at all.\n+///         // This will display \"thread 'main' panicked at 'not implemented'\".\n ///         unimplemented!();\n ///     }\n ///\n ///     fn qux(&self) -> Result<u64, ()> {\n-///         let n = self.bar();\n ///         // We have some logic here,\n-///         // so we can use unimplemented! to display what we have so far.\n+///         // We can add a message to unimplemented! to display our omission.\n ///         // This will display:\n-///         // \"thread 'main' panicked at 'not yet implemented: we need to divide by 2'\".\n-///         unimplemented!(\"we need to divide by {}\", n);\n+///         // \"thread 'main' panicked at 'not implemented: MyStruct isn't quxable'\".\n+///         unimplemented!(\"MyStruct isn't quxable\");\n ///     }\n /// }\n ///\n@@ -630,17 +631,21 @@ macro_rules! unreachable {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! unimplemented {\n-    () => (panic!(\"not yet implemented\"));\n-    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));\n+    () => (panic!(\"not implemented\"));\n+    ($($arg:tt)+) => (panic!(\"not implemented: {}\", $crate::format_args!($($arg)+)));\n }\n \n /// Indicates unfinished code.\n ///\n /// This can be useful if you are prototyping and are just looking to have your\n /// code typecheck.\n ///\n-/// There is no difference between `unimplemented!` and `todo!` apart from the\n-/// name.\n+/// The difference between [`unimplemented!`] and `todo!` is that while `todo!` conveys\n+/// an intent of implementing the functionality later and the message is \"not yet\n+/// implemented\", `unimplemented!` makes no such claims. Its message is \"not implemented\".\n+/// Also some IDEs will mark `todo!`s.\n+///\n+/// [`unimplemented!`]: macro.unimplemented.html\n ///\n /// # Panics\n ///\n@@ -683,7 +688,7 @@ macro_rules! unimplemented {\n ///     let s = MyStruct;\n ///     s.bar();\n ///\n-///     // we aren't even using baz() yet, so this is fine.\n+///     // we aren't even using baz(), so this is fine.\n /// }\n /// ```\n #[macro_export]"}, {"sha": "4d9cb740fc60953f37ccc8cb72cb59405402a7b8", "filename": "src/test/run-fail/unimplemented-macro-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5bc786399405c03a746ad385e579542788c8522/src%2Ftest%2Frun-fail%2Funimplemented-macro-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5bc786399405c03a746ad385e579542788c8522/src%2Ftest%2Frun-fail%2Funimplemented-macro-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funimplemented-macro-panic.rs?ref=a5bc786399405c03a746ad385e579542788c8522", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:not yet implemented\n+// error-pattern:not implemented\n fn main() {\n     unimplemented!()\n }"}, {"sha": "1b006c69cfd6ea9822fb38accdffc044ca5686fe", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5bc786399405c03a746ad385e579542788c8522/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5bc786399405c03a746ad385e579542788c8522/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=a5bc786399405c03a746ad385e579542788c8522", "patch": "@@ -25,7 +25,7 @@ error: any use of this value will cause an error\n LL | pub const X: () = unimplemented!();\n    | ------------------^^^^^^^^^^^^^^^^-\n    |                   |\n-   |                   the evaluated program panicked at 'not yet implemented', $DIR/const_panic.rs:10:19\n+   |                   the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:10:19\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "abc844e984261e7a66af80d98f46066859207ecb", "filename": "src/test/ui/consts/const-eval/const_panic_libcore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5bc786399405c03a746ad385e579542788c8522/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5bc786399405c03a746ad385e579542788c8522/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr?ref=a5bc786399405c03a746ad385e579542788c8522", "patch": "@@ -25,7 +25,7 @@ error: any use of this value will cause an error\n LL | const X: () = unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not yet implemented', $DIR/const_panic_libcore.rs:11:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore.rs:11:15\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "24ddefe01b5f9295f9f35f824354bef700b4e0b9", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5bc786399405c03a746ad385e579542788c8522/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5bc786399405c03a746ad385e579542788c8522/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr?ref=a5bc786399405c03a746ad385e579542788c8522", "patch": "@@ -25,7 +25,7 @@ error: any use of this value will cause an error\n LL | const X: () = unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not yet implemented', $DIR/const_panic_libcore_main.rs:15:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_main.rs:15:15\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}]}