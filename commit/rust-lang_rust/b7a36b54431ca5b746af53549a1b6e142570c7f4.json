{"sha": "b7a36b54431ca5b746af53549a1b6e142570c7f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YTM2YjU0NDMxY2E1Yjc0NmFmNTM1NDlhMWI2ZTE0MjU3MGM3ZjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-20T13:43:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-20T13:43:34Z"}, "message": "Merge #2326\n\n2326: Remove duplicate tests r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8b3e178168a19f89de2195e0af5a3f0404c4ed9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b3e178168a19f89de2195e0af5a3f0404c4ed9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7a36b54431ca5b746af53549a1b6e142570c7f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1UMGCRBK7hj4Ov3rIwAAdHIIAKDnexruOvmcxbzmSrbP292Z\nXtk2d91KW0yP5IN6v1+h6sCevxvSaZpcNg304Dud1ACpY3AQ4Hw/VcdEqkn7NRWr\nAriIBrhaOsbA7clR61TJTMCKrHnc4EO5lkJMWtjQFSWmpEzPdAT9o5u7zLcBLtOE\nkMyvy4hpqGNpyOxBV0Iym0jkYabIfNLpiWCE8xetLAV68I2iJcwfADo8tPSmTqrC\nyncW8SIT5wbxxd6gXuTCEbRIyJICaj89sjGujG8ATi5cQXeIFHy+JZw22bACseji\nmNb++duv4xhx3kmgY3UgZv9w2Kd/Hu6qwxrTBvm/vBfrGG8xxBNaCJZ6GrhPlBk=\n=Svlj\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b3e178168a19f89de2195e0af5a3f0404c4ed9d\nparent 4ef9cab41a9d8a0a9a683c327f022b6ca9524a37\nparent 3888487ca8af25047351542dbf37b90e0029e230\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574257414 +0000\ncommitter GitHub <noreply@github.com> 1574257414 +0000\n\nMerge #2326\n\n2326: Remove duplicate tests r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a36b54431ca5b746af53549a1b6e142570c7f4", "html_url": "https://github.com/rust-lang/rust/commit/b7a36b54431ca5b746af53549a1b6e142570c7f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7a36b54431ca5b746af53549a1b6e142570c7f4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ef9cab41a9d8a0a9a683c327f022b6ca9524a37", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ef9cab41a9d8a0a9a683c327f022b6ca9524a37", "html_url": "https://github.com/rust-lang/rust/commit/4ef9cab41a9d8a0a9a683c327f022b6ca9524a37"}, {"sha": "3888487ca8af25047351542dbf37b90e0029e230", "url": "https://api.github.com/repos/rust-lang/rust/commits/3888487ca8af25047351542dbf37b90e0029e230", "html_url": "https://github.com/rust-lang/rust/commit/3888487ca8af25047351542dbf37b90e0029e230"}], "stats": {"total": 132, "additions": 0, "deletions": 132}, "files": [{"sha": "d58496049e21a9125d479f5ff72e73df9da18f1d", "filename": "crates/ra_ide_api/src/references/rename.rs", "status": "modified", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/b7a36b54431ca5b746af53549a1b6e142570c7f4/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a36b54431ca5b746af53549a1b6e142570c7f4/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs?ref=b7a36b54431ca5b746af53549a1b6e142570c7f4", "patch": "@@ -121,140 +121,8 @@ mod tests {\n \n     use crate::{\n         mock_analysis::analysis_and_position, mock_analysis::single_file_with_position, FileId,\n-        ReferenceSearchResult,\n     };\n \n-    #[test]\n-    fn test_find_all_refs_for_local() {\n-        let code = r#\"\n-    fn main() {\n-        let mut i = 1;\n-        let j = 1;\n-        i = i<|> + j;\n-\n-        {\n-            i = 0;\n-        }\n-\n-        i = 5;\n-    }\"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 5);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_for_param_inside() {\n-        let code = r#\"\n-    fn foo(i : u32) -> u32 {\n-        i<|>\n-    }\"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 2);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_for_fn_param() {\n-        let code = r#\"\n-    fn foo(i<|> : u32) -> u32 {\n-        i\n-    }\"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 2);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_field_name() {\n-        let code = r#\"\n-            //- /lib.rs\n-            struct Foo {\n-                pub spam<|>: u32,\n-            }\n-\n-            fn main(s: Foo) {\n-                let f = s.spam;\n-            }\n-        \"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 2);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_impl_item_name() {\n-        let code = r#\"\n-            //- /lib.rs\n-            struct Foo;\n-            impl Foo {\n-                fn f<|>(&self) {  }\n-            }\n-        \"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 1);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_enum_var_name() {\n-        let code = r#\"\n-            //- /lib.rs\n-            enum Foo {\n-                A,\n-                B<|>,\n-                C,\n-            }\n-        \"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 1);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_modules() {\n-        let code = r#\"\n-            //- /lib.rs\n-            pub mod foo;\n-            pub mod bar;\n-\n-            fn f() {\n-                let i = foo::Foo { n: 5 };\n-            }\n-\n-            //- /foo.rs\n-            use crate::bar;\n-\n-            pub struct Foo {\n-                pub n: u32,\n-            }\n-\n-            fn f() {\n-                let i = bar::Bar { n: 5 };\n-            }\n-\n-            //- /bar.rs\n-            use crate::foo;\n-\n-            pub struct Bar {\n-                pub n: u32,\n-            }\n-\n-            fn f() {\n-                let i = foo::Foo<|> { n: 5 };\n-            }\n-        \"#;\n-\n-        let (analysis, pos) = analysis_and_position(code);\n-        let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n-        assert_eq!(refs.len(), 3);\n-    }\n-\n-    fn get_all_refs(text: &str) -> ReferenceSearchResult {\n-        let (analysis, position) = single_file_with_position(text);\n-        analysis.find_all_refs(position, None).unwrap().unwrap()\n-    }\n-\n     #[test]\n     fn test_rename_for_local() {\n         test_rename("}]}