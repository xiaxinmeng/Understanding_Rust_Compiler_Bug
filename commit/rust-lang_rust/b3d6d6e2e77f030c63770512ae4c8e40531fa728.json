{"sha": "b3d6d6e2e77f030c63770512ae4c8e40531fa728", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZDZkNmUyZTc3ZjAzMGM2Mzc3MDUxMmFlNGM4ZTQwNTMxZmE3Mjg=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-12-03T09:21:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-03T09:21:32Z"}, "message": "Rollup merge of #6395 - Suyash458:master, r=flip1995\n\nswitch Version/VersionReq usages to RustcVersion\n\nadd `rustc-semver` to dependencies\nswitch `Version/VersionReq` usages to `RustcVersion`\nchangelog: none", "tree": {"sha": "161fe576c078be95a7ba02e8b728f944424cc3a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/161fe576c078be95a7ba02e8b728f944424cc3a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3d6d6e2e77f030c63770512ae4c8e40531fa728", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfyK4cCRBK7hj4Ov3rIwAAdHIIACZOG64FqWhcRZxWKykj04Je\nqIjkhcQN8LYao4tOibCDrEedlK+VAuoH3trnz6+QzLiUK1NfRrHOIah19dJ0UHij\nAUu/spaF6LRI4XEJIoZ99OeIjklnIN/i9MOjS4XxX0M0CjrZGNlYK7zsHKhYy/Yc\nwuv295kbZ+GWYtWfWDKwJeZLxxH7E28aMmNPzOvSi0GZZap8ze165N0V03gAL/eC\nbH7BT9hpDnl7eAFKCvPVz+i+E2nkKWN2S7VcNwo/B7gzBy7uVHr7zx6/Zcqb6yLs\n7cfXiwugpBnniBjxd3wuRUWoxWHSCjcEsbWP+jsOsNktlGG+kzGciV5vF/BJMGU=\n=204d\n-----END PGP SIGNATURE-----\n", "payload": "tree 161fe576c078be95a7ba02e8b728f944424cc3a5\nparent c3db082347ba7c951e76c3b07a79148ccff86b6e\nparent e7258ac714941ed5534ae31cddac7164ce1f50c1\nauthor Philipp Krones <hello@philkrones.com> 1606987292 +0100\ncommitter GitHub <noreply@github.com> 1606987292 +0100\n\nRollup merge of #6395 - Suyash458:master, r=flip1995\n\nswitch Version/VersionReq usages to RustcVersion\n\nadd `rustc-semver` to dependencies\nswitch `Version/VersionReq` usages to `RustcVersion`\nchangelog: none\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d6d6e2e77f030c63770512ae4c8e40531fa728", "html_url": "https://github.com/rust-lang/rust/commit/b3d6d6e2e77f030c63770512ae4c8e40531fa728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3d6d6e2e77f030c63770512ae4c8e40531fa728/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3db082347ba7c951e76c3b07a79148ccff86b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3db082347ba7c951e76c3b07a79148ccff86b6e", "html_url": "https://github.com/rust-lang/rust/commit/c3db082347ba7c951e76c3b07a79148ccff86b6e"}, {"sha": "e7258ac714941ed5534ae31cddac7164ce1f50c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7258ac714941ed5534ae31cddac7164ce1f50c1", "html_url": "https://github.com/rust-lang/rust/commit/e7258ac714941ed5534ae31cddac7164ce1f50c1"}], "stats": {"total": 161, "additions": 103, "deletions": 58}, "files": [{"sha": "7697eba650aca9499c95b1adf6e885ec9f885797", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=b3d6d6e2e77f030c63770512ae4c8e40531fa728", "patch": "@@ -28,6 +28,7 @@ smallvec = { version = \"1\", features = [\"union\"] }\n toml = \"0.5.3\"\n unicode-normalization = \"0.1\"\n semver = \"0.11\"\n+rustc-semver=\"1.1.0\"\n # NOTE: cargo requires serde feat in its url dep\n # see <https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864>\n url = { version =  \"2.1.0\", features = [\"serde\"] }"}, {"sha": "788aedd4273e1525dd9464911648826ffe5c162f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b3d6d6e2e77f030c63770512ae4c8e40531fa728", "patch": "@@ -984,22 +984,17 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n \n-    let parsed_msrv = conf.msrv.as_ref().and_then(|s| {\n+    let msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n             sess.err(&format!(\"error reading Clippy's configuration file. `{}` is not a valid Rust version\", s));\n             None\n         })\n     });\n \n-    let msrv = parsed_msrv.clone();\n-    store.register_late_pass(move || box methods::Methods::new(msrv.clone()));\n-    let msrv = parsed_msrv.clone();\n-    store.register_late_pass(move || box matches::Matches::new(msrv.clone()));\n-    let msrv = parsed_msrv.clone();\n-    store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv.clone()));\n-    let msrv = parsed_msrv;\n-    store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv.clone()));\n-\n+    store.register_late_pass(move || box methods::Methods::new(msrv));\n+    store.register_late_pass(move || box matches::Matches::new(msrv));\n+    store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n+    store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));\n     store.register_late_pass(|| box map_clone::MapClone);\n     store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n     store.register_late_pass(|| box shadow::Shadow);"}, {"sha": "91849e748878f645b6453e1571cf8357f0fab61f", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=b3d6d6e2e77f030c63770512ae4c8e40531fa728", "patch": "@@ -4,17 +4,11 @@ use rustc_ast::ast::{Attribute, Item, ItemKind, StructField, Variant, VariantDat\n use rustc_attr as attr;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n-use semver::{Version, VersionReq};\n \n-const MANUAL_NON_EXHAUSTIVE_MSRV: Version = Version {\n-    major: 1,\n-    minor: 40,\n-    patch: 0,\n-    pre: Vec::new(),\n-    build: Vec::new(),\n-};\n+const MANUAL_NON_EXHAUSTIVE_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for manual implementations of the non-exhaustive pattern.\n@@ -66,12 +60,12 @@ declare_clippy_lint! {\n \n #[derive(Clone)]\n pub struct ManualNonExhaustive {\n-    msrv: Option<VersionReq>,\n+    msrv: Option<RustcVersion>,\n }\n \n impl ManualNonExhaustive {\n     #[must_use]\n-    pub fn new(msrv: Option<VersionReq>) -> Self {\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n         Self { msrv }\n     }\n }"}, {"sha": "f593abdb1047d427ec2524a522582dff956b845a", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=b3d6d6e2e77f030c63770512ae4c8e40531fa728", "patch": "@@ -13,18 +13,12 @@ use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n+use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n use rustc_span::Span;\n-use semver::{Version, VersionReq};\n \n-const MANUAL_STRIP_MSRV: Version = Version {\n-    major: 1,\n-    minor: 45,\n-    patch: 0,\n-    pre: Vec::new(),\n-    build: Vec::new(),\n-};\n+const MANUAL_STRIP_MSRV: RustcVersion = RustcVersion::new(1, 45, 0);\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -61,12 +55,12 @@ declare_clippy_lint! {\n }\n \n pub struct ManualStrip {\n-    msrv: Option<VersionReq>,\n+    msrv: Option<RustcVersion>,\n }\n \n impl ManualStrip {\n     #[must_use]\n-    pub fn new(msrv: Option<VersionReq>) -> Self {\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n         Self { msrv }\n     }\n }"}, {"sha": "86e3e2f637e464d04f91f27e6ba5ab4e4a34ad75", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=b3d6d6e2e77f030c63770512ae4c8e40531fa728", "patch": "@@ -20,10 +20,10 @@ use rustc_hir::{\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty, TyS};\n+use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::{sym, Symbol};\n-use semver::{Version, VersionReq};\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n use std::collections::Bound;\n@@ -535,13 +535,13 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct Matches {\n-    msrv: Option<VersionReq>,\n+    msrv: Option<RustcVersion>,\n     infallible_destructuring_match_linted: bool,\n }\n \n impl Matches {\n     #[must_use]\n-    pub fn new(msrv: Option<VersionReq>) -> Self {\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n         Self {\n             msrv,\n             ..Matches::default()\n@@ -568,13 +568,7 @@ impl_lint_pass!(Matches => [\n     MATCH_SAME_ARMS,\n ]);\n \n-const MATCH_LIKE_MATCHES_MACRO_MSRV: Version = Version {\n-    major: 1,\n-    minor: 42,\n-    patch: 0,\n-    pre: Vec::new(),\n-    build: Vec::new(),\n-};\n+const MATCH_LIKE_MATCHES_MACRO_MSRV: RustcVersion = RustcVersion::new(1, 42, 0);\n \n impl<'tcx> LateLintPass<'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {"}, {"sha": "8002c27a5e91b7e27b92818a5b51f47275832761", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=b3d6d6e2e77f030c63770512ae4c8e40531fa728", "patch": "@@ -18,6 +18,7 @@ use rustc_hir::{TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n+use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, SymbolStr};\n@@ -33,7 +34,6 @@ use crate::utils::{\n     snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg,\n     walk_ptrs_ty_depth, SpanlessEq,\n };\n-use semver::{Version, VersionReq};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n@@ -1405,12 +1405,12 @@ declare_clippy_lint! {\n }\n \n pub struct Methods {\n-    msrv: Option<VersionReq>,\n+    msrv: Option<RustcVersion>,\n }\n \n impl Methods {\n     #[must_use]\n-    pub fn new(msrv: Option<VersionReq>) -> Self {\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n         Self { msrv }\n     }\n }\n@@ -3470,13 +3470,7 @@ fn lint_suspicious_map(cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n     );\n }\n \n-const OPTION_AS_REF_DEREF_MSRV: Version = Version {\n-    major: 1,\n-    minor: 40,\n-    patch: 0,\n-    pre: Vec::new(),\n-    build: Vec::new(),\n-};\n+const OPTION_AS_REF_DEREF_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n \n /// lint use of `_.as_ref().map(Deref::deref)` for `Option`s\n fn lint_option_as_ref_deref<'tcx>(\n@@ -3485,7 +3479,7 @@ fn lint_option_as_ref_deref<'tcx>(\n     as_ref_args: &[hir::Expr<'_>],\n     map_args: &[hir::Expr<'_>],\n     is_mut: bool,\n-    msrv: Option<&VersionReq>,\n+    msrv: Option<&RustcVersion>,\n ) {\n     if !meets_msrv(msrv, &OPTION_AS_REF_DEREF_MSRV) {\n         return;"}, {"sha": "3a6b64c90e8f65ef4634ecc7197f2275af7017c9", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d6d6e2e77f030c63770512ae4c8e40531fa728/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b3d6d6e2e77f030c63770512ae4c8e40531fa728", "patch": "@@ -52,6 +52,7 @@ use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n+use rustc_semver::RustcVersion;\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n@@ -60,13 +61,12 @@ use rustc_span::symbol::{self, kw, Symbol};\n use rustc_span::{BytePos, Pos, Span, DUMMY_SP};\n use rustc_target::abi::Integer;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n-use semver::{Version, VersionReq};\n use smallvec::SmallVec;\n \n use crate::consts::{constant, Constant};\n \n-pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<VersionReq> {\n-    if let Ok(version) = VersionReq::parse(msrv) {\n+pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n+    if let Ok(version) = RustcVersion::parse(msrv) {\n         return Some(version);\n     } else if let Some(sess) = sess {\n         if let Some(span) = span {\n@@ -76,8 +76,8 @@ pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Opt\n     None\n }\n \n-pub fn meets_msrv(msrv: Option<&VersionReq>, lint_msrv: &Version) -> bool {\n-    msrv.map_or(true, |msrv| !msrv.matches(lint_msrv))\n+pub fn meets_msrv(msrv: Option<&RustcVersion>, lint_msrv: &RustcVersion) -> bool {\n+    msrv.map_or(true, |msrv| msrv.meets(*lint_msrv))\n }\n \n macro_rules! extract_msrv_attr {"}, {"sha": "1026cc40d3b0e20ce6824f1735472e02fbf8a1ca", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b3d6d6e2e77f030c63770512ae4c8e40531fa728/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d6d6e2e77f030c63770512ae4c8e40531fa728/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=b3d6d6e2e77f030c63770512ae4c8e40531fa728", "patch": "@@ -35,7 +35,7 @@ fn match_same_arms2() {\n     };\n }\n \n-fn manual_strip_msrv() {\n+pub fn manual_strip_msrv() {\n     let s = \"hello, world!\";\n     if s.starts_with(\"hello, \") {\n         assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n@@ -49,3 +49,39 @@ fn main() {\n     match_same_arms2();\n     manual_strip_msrv();\n }\n+\n+mod meets_msrv {\n+    #![feature(custom_inner_attributes)]\n+    #![clippy::msrv = \"1.45.0\"]\n+\n+    fn main() {\n+        let s = \"hello, world!\";\n+        if s.starts_with(\"hello, \") {\n+            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+        }\n+    }\n+}\n+\n+mod just_under_msrv {\n+    #![feature(custom_inner_attributes)]\n+    #![clippy::msrv = \"1.46.0\"]\n+\n+    fn main() {\n+        let s = \"hello, world!\";\n+        if s.starts_with(\"hello, \") {\n+            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+        }\n+    }\n+}\n+\n+mod just_above_msrv {\n+    #![feature(custom_inner_attributes)]\n+    #![clippy::msrv = \"1.44.0\"]\n+\n+    fn main() {\n+        let s = \"hello, world!\";\n+        if s.starts_with(\"hello, \") {\n+            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+        }\n+    }\n+}"}, {"sha": "3e1af046e7a2795127d85fdd27bcaf4f16c5e7f8", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b3d6d6e2e77f030c63770512ae4c8e40531fa728/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3d6d6e2e77f030c63770512ae4c8e40531fa728/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=b3d6d6e2e77f030c63770512ae4c8e40531fa728", "patch": "@@ -0,0 +1,37 @@\n+error: stripping a prefix manually\n+  --> $DIR/min_rust_version_attr.rs:60:24\n+   |\n+LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+   |                        ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::manual-strip` implied by `-D warnings`\n+note: the prefix was tested here\n+  --> $DIR/min_rust_version_attr.rs:59:9\n+   |\n+LL |         if s.starts_with(\"hello, \") {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try using the `strip_prefix` method\n+   |\n+LL |         if let Some(<stripped>) = s.strip_prefix(\"hello, \") {\n+LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n+   |\n+\n+error: stripping a prefix manually\n+  --> $DIR/min_rust_version_attr.rs:72:24\n+   |\n+LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+   |                        ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the prefix was tested here\n+  --> $DIR/min_rust_version_attr.rs:71:9\n+   |\n+LL |         if s.starts_with(\"hello, \") {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try using the `strip_prefix` method\n+   |\n+LL |         if let Some(<stripped>) = s.strip_prefix(\"hello, \") {\n+LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "98fffe1e3512b9c41750f598f0787ce56329eade", "filename": "tests/ui/min_rust_version_no_patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d6d6e2e77f030c63770512ae4c8e40531fa728/tests%2Fui%2Fmin_rust_version_no_patch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d6d6e2e77f030c63770512ae4c8e40531fa728/tests%2Fui%2Fmin_rust_version_no_patch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_no_patch.rs?ref=b3d6d6e2e77f030c63770512ae4c8e40531fa728", "patch": "@@ -1,6 +1,6 @@\n #![allow(clippy::redundant_clone)]\n #![feature(custom_inner_attributes)]\n-#![clippy::msrv = \"^1.0\"]\n+#![clippy::msrv = \"1.0\"]\n \n fn manual_strip_msrv() {\n     let s = \"hello, world!\";"}]}