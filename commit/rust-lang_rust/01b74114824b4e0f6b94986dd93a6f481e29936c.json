{"sha": "01b74114824b4e0f6b94986dd93a6f481e29936c", "node_id": "C_kwDOAAsO6NoAKDAxYjc0MTE0ODI0YjRlMGY2Yjk0OTg2ZGQ5M2E2ZjQ4MWUyOTkzNmM", "commit": {"author": {"name": "Piotr Mikulski", "email": "piotr@near.org", "date": "2021-12-24T06:00:14Z"}, "committer": {"name": "Piotr Mikulski", "email": "piotr@near.org", "date": "2021-12-24T06:00:20Z"}, "message": "Refactor", "tree": {"sha": "d97c3365d52dc2d3e074209718b694797635dd18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d97c3365d52dc2d3e074209718b694797635dd18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01b74114824b4e0f6b94986dd93a6f481e29936c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01b74114824b4e0f6b94986dd93a6f481e29936c", "html_url": "https://github.com/rust-lang/rust/commit/01b74114824b4e0f6b94986dd93a6f481e29936c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01b74114824b4e0f6b94986dd93a6f481e29936c/comments", "author": {"login": "pmnoxx", "id": 7828365, "node_id": "MDQ6VXNlcjc4MjgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7828365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmnoxx", "html_url": "https://github.com/pmnoxx", "followers_url": "https://api.github.com/users/pmnoxx/followers", "following_url": "https://api.github.com/users/pmnoxx/following{/other_user}", "gists_url": "https://api.github.com/users/pmnoxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmnoxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmnoxx/subscriptions", "organizations_url": "https://api.github.com/users/pmnoxx/orgs", "repos_url": "https://api.github.com/users/pmnoxx/repos", "events_url": "https://api.github.com/users/pmnoxx/events{/privacy}", "received_events_url": "https://api.github.com/users/pmnoxx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmnoxx", "id": 7828365, "node_id": "MDQ6VXNlcjc4MjgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7828365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmnoxx", "html_url": "https://github.com/pmnoxx", "followers_url": "https://api.github.com/users/pmnoxx/followers", "following_url": "https://api.github.com/users/pmnoxx/following{/other_user}", "gists_url": "https://api.github.com/users/pmnoxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmnoxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmnoxx/subscriptions", "organizations_url": "https://api.github.com/users/pmnoxx/orgs", "repos_url": "https://api.github.com/users/pmnoxx/repos", "events_url": "https://api.github.com/users/pmnoxx/events{/privacy}", "received_events_url": "https://api.github.com/users/pmnoxx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b3a87f8866bf0a76a7fd63d35331be5566db791", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b3a87f8866bf0a76a7fd63d35331be5566db791", "html_url": "https://github.com/rust-lang/rust/commit/4b3a87f8866bf0a76a7fd63d35331be5566db791"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "e641b5c45994649dde38d7a421cdecd409a0394f", "filename": "clippy_lints/src/methods/unwrap_or_else_default.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01b74114824b4e0f6b94986dd93a6f481e29936c/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b74114824b4e0f6b94986dd93a6f481e29936c/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs?ref=01b74114824b4e0f6b94986dd93a6f481e29936c", "patch": "@@ -2,8 +2,8 @@\n \n use super::UNWRAP_OR_ELSE_DEFAULT;\n use clippy_utils::{\n-    diagnostics::span_lint_and_sugg, is_default_equivalent_ctor, is_diag_trait_item, is_trait_item,\n-    source::snippet_with_applicability, ty::is_type_diagnostic_item,\n+    diagnostics::span_lint_and_sugg, is_default_equivalent_call, is_trait_item, source::snippet_with_applicability,\n+    ty::is_type_diagnostic_item,\n };\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -23,21 +23,9 @@ pub(super) fn check<'tcx>(\n     let is_option = is_type_diagnostic_item(cx, recv_ty, sym::Option);\n     let is_result = is_type_diagnostic_item(cx, recv_ty, sym::Result);\n \n-    let is_default_eq = match &u_arg.kind {\n-        hir::ExprKind::Path(qpath) => {\n-            if let Some(repl_def_id) = cx.qpath_res(qpath, u_arg.hir_id).opt_def_id() {\n-                is_diag_trait_item(cx, repl_def_id, sym::Default)\n-                    || is_default_equivalent_ctor(cx, repl_def_id, qpath)\n-            } else {\n-                false\n-            }\n-        },\n-        _ => false,\n-    };\n-\n     if_chain! {\n         if is_option || is_result;\n-        if is_trait_item(cx, u_arg, sym::Default) || is_default_eq;\n+        if is_trait_item(cx, u_arg, sym::Default) || is_default_equivalent_call(cx, u_arg);\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n "}, {"sha": "4af870d3155447c8f83437767cf58ba28e647dc7", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/01b74114824b4e0f6b94986dd93a6f481e29936c/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b74114824b4e0f6b94986dd93a6f481e29936c/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=01b74114824b4e0f6b94986dd93a6f481e29936c", "patch": "@@ -637,7 +637,7 @@ pub fn can_mut_borrow_both(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>) -\n \n /// Returns true if the `def_id` associated with the `path` is recognized as a \"default-equivalent\"\n /// constructor from the std library\n-pub fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<'_>) -> bool {\n+fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<'_>) -> bool {\n     let std_types_symbols = &[\n         sym::String,\n         sym::Vec,\n@@ -664,6 +664,22 @@ pub fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QP\n     false\n }\n \n+/// Return true if the expr is equal to `Default::default` when evaluated.\n+pub fn is_default_equivalent_call(cx: &LateContext<'_>, repl_func: &Expr<'_>) -> bool {\n+    if_chain! {\n+        if let hir::ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n+        if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n+        if is_diag_trait_item(cx, repl_def_id, sym::Default)\n+            || is_default_equivalent_ctor(cx, repl_def_id, repl_func_qpath);\n+        then {\n+            true\n+        }\n+        else {\n+            false\n+        }\n+    }\n+}\n+\n /// Returns true if the expr is equal to `Default::default()` of it's type when evaluated.\n /// It doesn't cover all cases, for example indirect function calls (some of std\n /// functions are supported) but it is the best we have.\n@@ -686,18 +702,7 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n                 false\n             }\n         },\n-        ExprKind::Call(repl_func, _) => if_chain! {\n-            if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n-            if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-            if is_diag_trait_item(cx, repl_def_id, sym::Default)\n-                || is_default_equivalent_ctor(cx, repl_def_id, repl_func_qpath);\n-            then {\n-                true\n-            }\n-            else {\n-                false\n-            }\n-        },\n+        ExprKind::Call(repl_func, _) => is_default_equivalent_call(cx, repl_func),\n         ExprKind::Path(qpath) => is_lang_ctor(cx, qpath, OptionNone),\n         ExprKind::AddrOf(rustc_hir::BorrowKind::Ref, _, expr) => matches!(expr.kind, ExprKind::Array([])),\n         _ => false,"}]}