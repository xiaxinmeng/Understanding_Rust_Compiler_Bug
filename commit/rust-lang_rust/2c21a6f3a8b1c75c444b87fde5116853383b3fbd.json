{"sha": "2c21a6f3a8b1c75c444b87fde5116853383b3fbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMjFhNmYzYThiMWM3NWM0NDRiODdmZGU1MTE2ODUzMzgzYjNmYmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-19T22:50:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-19T22:50:46Z"}, "message": "Auto merge of #74495 - shepmaster:bootstrap-dist-target-files, r=Mark-Simulacrum\n\nTeach bootstrap install and dist commands about TargetSelection\n\nWith this, we can now use a target JSON file to build a\ncross-compiler:\n\n```\nx.py install --host ../aarch64-apple-darwin.json --target aarch64-apple-darwin\n```\n\nr? @Mark-Simulacrum", "tree": {"sha": "30fd744a1d6b1935ece3806b24e4dcb44a6c664d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30fd744a1d6b1935ece3806b24e4dcb44a6c664d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c21a6f3a8b1c75c444b87fde5116853383b3fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c21a6f3a8b1c75c444b87fde5116853383b3fbd", "html_url": "https://github.com/rust-lang/rust/commit/2c21a6f3a8b1c75c444b87fde5116853383b3fbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c21a6f3a8b1c75c444b87fde5116853383b3fbd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f94516345a36ddfcd68cbdf1df835d356795c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f94516345a36ddfcd68cbdf1df835d356795c3", "html_url": "https://github.com/rust-lang/rust/commit/d7f94516345a36ddfcd68cbdf1df835d356795c3"}, {"sha": "57614da71560281c50c228a0028946f0389d8803", "url": "https://api.github.com/repos/rust-lang/rust/commits/57614da71560281c50c228a0028946f0389d8803", "html_url": "https://github.com/rust-lang/rust/commit/57614da71560281c50c228a0028946f0389d8803"}], "stats": {"total": 106, "additions": 55, "deletions": 51}, "files": [{"sha": "c64934cd6c9ded20f166b32e7988f80eb94eb68c", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 54, "deletions": 50, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/2c21a6f3a8b1c75c444b87fde5116853383b3fbd/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c21a6f3a8b1c75c444b87fde5116853383b3fbd/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=2c21a6f3a8b1c75c444b87fde5116853383b3fbd", "patch": "@@ -91,15 +91,15 @@ impl Step for Docs {\n         let name = pkgname(builder, \"rust-docs\");\n \n         if !builder.config.docs {\n-            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host));\n+            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host.triple));\n         }\n \n         builder.default_doc(None);\n \n         builder.info(&format!(\"Dist docs ({})\", host));\n         let _time = timeit(builder);\n \n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n+        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host.triple));\n         let _ = fs::remove_dir_all(&image);\n \n         let dst = image.join(\"share/doc/rust/html\");\n@@ -119,14 +119,14 @@ impl Step for Docs {\n             .arg(&tmpdir(builder))\n             .arg(\"--output-dir\")\n             .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", name, host))\n+            .arg(format!(\"--package-name={}-{}\", name, host.triple))\n             .arg(\"--component-name=rust-docs\")\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--bulk-dirs=share/doc/rust/html\");\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n \n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host))\n+        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host.triple))\n     }\n }\n \n@@ -154,12 +154,12 @@ impl Step for RustcDocs {\n         let name = pkgname(builder, \"rustc-docs\");\n \n         if !builder.config.compiler_docs {\n-            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host));\n+            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host.triple));\n         }\n \n         builder.default_doc(None);\n \n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n+        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host.triple));\n         let _ = fs::remove_dir_all(&image);\n \n         let dst = image.join(\"share/doc/rust/html\");\n@@ -178,7 +178,7 @@ impl Step for RustcDocs {\n             .arg(&tmpdir(builder))\n             .arg(\"--output-dir\")\n             .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", name, host))\n+            .arg(format!(\"--package-name={}-{}\", name, host.triple))\n             .arg(\"--component-name=rustc-docs\")\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--bulk-dirs=share/doc/rust/html\");\n@@ -188,7 +188,7 @@ impl Step for RustcDocs {\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n \n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host))\n+        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host.triple))\n     }\n }\n \n@@ -372,7 +372,7 @@ impl Step for Mingw {\n         builder.info(&format!(\"Dist mingw ({})\", host));\n         let _time = timeit(builder);\n         let name = pkgname(builder, \"rust-mingw\");\n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n+        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host.triple));\n         let _ = fs::remove_dir_all(&image);\n         t!(fs::create_dir_all(&image));\n \n@@ -393,12 +393,12 @@ impl Step for Mingw {\n             .arg(&tmpdir(builder))\n             .arg(\"--output-dir\")\n             .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", name, host))\n+            .arg(format!(\"--package-name={}-{}\", name, host.triple))\n             .arg(\"--component-name=rust-mingw\")\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n         builder.run(&mut cmd);\n         t!(fs::remove_dir_all(&image));\n-        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host)))\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host.triple)))\n     }\n }\n \n@@ -427,9 +427,9 @@ impl Step for Rustc {\n         let host = self.compiler.host;\n \n         let name = pkgname(builder, \"rustc\");\n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n+        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host.triple));\n         let _ = fs::remove_dir_all(&image);\n-        let overlay = tmpdir(builder).join(format!(\"{}-{}-overlay\", name, host));\n+        let overlay = tmpdir(builder).join(format!(\"{}-{}-overlay\", name, host.triple));\n         let _ = fs::remove_dir_all(&overlay);\n \n         // Prepare the rustc \"image\", what will actually end up getting installed\n@@ -483,17 +483,17 @@ impl Step for Rustc {\n             .arg(&distdir(builder))\n             .arg(\"--non-installed-overlay\")\n             .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, host))\n+            .arg(format!(\"--package-name={}-{}\", name, host.triple))\n             .arg(\"--component-name=rustc\")\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n \n-        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, host));\n+        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, host.triple));\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n         builder.remove_dir(&overlay);\n \n-        return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host));\n+        return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host.triple));\n \n         fn prepare_image(builder: &Builder<'_>, compiler: Compiler, image: &Path) {\n             let host = compiler.host;\n@@ -707,14 +707,14 @@ impl Step for Std {\n         let target = self.target;\n \n         let name = pkgname(builder, \"rust-std\");\n-        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple));\n         if skip_host_target_lib(builder, compiler) {\n             return archive;\n         }\n \n         builder.ensure(compile::Std { compiler, target });\n \n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n+        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target.triple));\n         let _ = fs::remove_dir_all(&image);\n \n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n@@ -732,8 +732,8 @@ impl Step for Std {\n             .arg(&tmpdir(builder))\n             .arg(\"--output-dir\")\n             .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", name, target))\n-            .arg(format!(\"--component-name=rust-std-{}\", target))\n+            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n+            .arg(format!(\"--component-name=rust-std-{}\", target.triple))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n \n         builder\n@@ -776,14 +776,14 @@ impl Step for RustcDev {\n         let target = self.target;\n \n         let name = pkgname(builder, \"rustc-dev\");\n-        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple));\n         if skip_host_target_lib(builder, compiler) {\n             return archive;\n         }\n \n         builder.ensure(compile::Rustc { compiler, target });\n \n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n+        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target.triple));\n         let _ = fs::remove_dir_all(&image);\n \n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n@@ -801,8 +801,8 @@ impl Step for RustcDev {\n             .arg(&tmpdir(builder))\n             .arg(\"--output-dir\")\n             .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", name, target))\n-            .arg(format!(\"--component-name=rustc-dev-{}\", target))\n+            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n+            .arg(format!(\"--component-name=rustc-dev-{}\", target.triple))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n \n         builder.info(&format!(\n@@ -853,12 +853,12 @@ impl Step for Analysis {\n         let name = pkgname(builder, \"rust-analysis\");\n \n         if compiler.host != builder.config.build {\n-            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple));\n         }\n \n         builder.ensure(compile::Std { compiler, target });\n \n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n+        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target.triple));\n \n         let src = builder\n             .stage_out(compiler, Mode::Std)\n@@ -883,15 +883,15 @@ impl Step for Analysis {\n             .arg(&tmpdir(builder))\n             .arg(\"--output-dir\")\n             .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", name, target))\n-            .arg(format!(\"--component-name=rust-analysis-{}\", target))\n+            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n+            .arg(format!(\"--component-name=rust-analysis-{}\", target.triple))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n \n         builder.info(\"Dist analysis\");\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n+        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple))\n     }\n }\n \n@@ -1242,14 +1242,14 @@ impl Step for Cargo {\n             .arg(&distdir(builder))\n             .arg(\"--non-installed-overlay\")\n             .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, target))\n+            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n             .arg(\"--component-name=cargo\")\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n \n         builder.info(&format!(\"Dist cargo stage{} ({})\", compiler.stage, target));\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n+        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple))\n     }\n }\n \n@@ -1332,14 +1332,14 @@ impl Step for Rls {\n             .arg(&distdir(builder))\n             .arg(\"--non-installed-overlay\")\n             .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, target))\n+            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--component-name=rls-preview\");\n \n-        builder.info(&format!(\"Dist RLS stage{} ({})\", compiler.stage, target));\n+        builder.info(&format!(\"Dist RLS stage{} ({})\", compiler.stage, target.triple));\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n-        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple)))\n     }\n }\n \n@@ -1419,14 +1419,14 @@ impl Step for RustAnalyzer {\n             .arg(&distdir(builder))\n             .arg(\"--non-installed-overlay\")\n             .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, target))\n+            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--component-name=rust-analyzer-preview\");\n \n         builder.info(&format!(\"Dist rust-analyzer stage{} ({})\", compiler.stage, target));\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n+        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple))\n     }\n }\n \n@@ -1510,14 +1510,14 @@ impl Step for Clippy {\n             .arg(&distdir(builder))\n             .arg(\"--non-installed-overlay\")\n             .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, target))\n+            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--component-name=clippy-preview\");\n \n         builder.info(&format!(\"Dist clippy stage{} ({})\", compiler.stage, target));\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n+        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple))\n     }\n }\n \n@@ -1607,14 +1607,14 @@ impl Step for Miri {\n             .arg(&distdir(builder))\n             .arg(\"--non-installed-overlay\")\n             .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, target))\n+            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--component-name=miri-preview\");\n \n         builder.info(&format!(\"Dist miri stage{} ({})\", compiler.stage, target));\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n-        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple)))\n     }\n }\n \n@@ -1701,14 +1701,14 @@ impl Step for Rustfmt {\n             .arg(&distdir(builder))\n             .arg(\"--non-installed-overlay\")\n             .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, target))\n+            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--component-name=rustfmt-preview\");\n \n         builder.info(&format!(\"Dist Rustfmt stage{} ({})\", compiler.stage, target));\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n-        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple)))\n     }\n }\n \n@@ -1813,7 +1813,7 @@ impl Step for Extended {\n             .arg(&work)\n             .arg(\"--output-dir\")\n             .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", pkgname(builder, \"rust\"), target))\n+            .arg(format!(\"--package-name={}-{}\", pkgname(builder, \"rust\"), target.triple))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--input-tarballs\")\n             .arg(input_tarballs)\n@@ -1893,7 +1893,7 @@ impl Step for Extended {\n             let prepare = |name: &str| {\n                 builder.create_dir(&pkg.join(name));\n                 builder.cp_r(\n-                    &work.join(&format!(\"{}-{}\", pkgname(builder, name), target)),\n+                    &work.join(&format!(\"{}-{}\", pkgname(builder, name), target.triple)),\n                     &pkg.join(name),\n                 );\n                 builder.install(&etc.join(\"pkg/postinstall\"), &pkg.join(name), 0o755);\n@@ -1926,7 +1926,11 @@ impl Step for Extended {\n                 .arg(xform(&etc.join(\"pkg/Distribution.xml\")))\n                 .arg(\"--resources\")\n                 .arg(pkg.join(\"res\"))\n-                .arg(distdir(builder).join(format!(\"{}-{}.pkg\", pkgname(builder, \"rust\"), target)))\n+                .arg(distdir(builder).join(format!(\n+                    \"{}-{}.pkg\",\n+                    pkgname(builder, \"rust\"),\n+                    target.triple\n+                )))\n                 .arg(\"--package-path\")\n                 .arg(&pkg);\n             let _time = timeit(builder);\n@@ -1940,7 +1944,7 @@ impl Step for Extended {\n             let prepare = |name: &str| {\n                 builder.create_dir(&exe.join(name));\n                 let dir = if name == \"rust-std\" || name == \"rust-analysis\" {\n-                    format!(\"{}-{}\", name, target)\n+                    format!(\"{}-{}\", name, target.triple)\n                 } else if name == \"rls\" {\n                     \"rls-preview\".to_string()\n                 } else if name == \"rust-analyzer\" {\n@@ -1953,7 +1957,7 @@ impl Step for Extended {\n                     name.to_string()\n                 };\n                 builder.cp_r(\n-                    &work.join(&format!(\"{}-{}\", pkgname(builder, name), target)).join(dir),\n+                    &work.join(&format!(\"{}-{}\", pkgname(builder, name), target.triple)).join(dir),\n                     &exe.join(name),\n                 );\n                 builder.remove(&exe.join(name).join(\"manifest.in\"));\n@@ -2212,7 +2216,7 @@ impl Step for Extended {\n             builder.install(&etc.join(\"gfx/dialogbg.bmp\"), &exe, 0o644);\n \n             builder.info(&format!(\"building `msi` installer with {:?}\", light));\n-            let filename = format!(\"{}-{}.msi\", pkgname(builder, \"rust\"), target);\n+            let filename = format!(\"{}-{}.msi\", pkgname(builder, \"rust\"), target.triple);\n             let mut cmd = Command::new(&light);\n             cmd.arg(\"-nologo\")\n                 .arg(\"-ext\")\n@@ -2461,11 +2465,11 @@ impl Step for LlvmTools {\n             .arg(&distdir(builder))\n             .arg(\"--non-installed-overlay\")\n             .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, target))\n+            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--component-name=llvm-tools-preview\");\n \n         builder.run(&mut cmd);\n-        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple)))\n     }\n }"}, {"sha": "1316f95dd41770b7b1cd0217924de8a11ff52c46", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c21a6f3a8b1c75c444b87fde5116853383b3fbd/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c21a6f3a8b1c75c444b87fde5116853383b3fbd/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=2c21a6f3a8b1c75c444b87fde5116853383b3fbd", "patch": "@@ -107,7 +107,7 @@ fn install_sh(\n \n     t!(fs::create_dir_all(&empty_dir));\n     let package_name = if let Some(host) = host {\n-        format!(\"{}-{}\", pkgname(builder, name), host)\n+        format!(\"{}-{}\", pkgname(builder, name), host.triple)\n     } else {\n         pkgname(builder, name)\n     };"}]}