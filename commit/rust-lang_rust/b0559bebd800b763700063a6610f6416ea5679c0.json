{"sha": "b0559bebd800b763700063a6610f6416ea5679c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNTU5YmViZDgwMGI3NjM3MDAwNjNhNjYxMGY2NDE2ZWE1Njc5YzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-08T07:55:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-08T07:55:20Z"}, "message": "Rollup merge of #72583 - CAD97:vec-iter-asref-slice, r=dtolnay\n\nimpl AsRef<[T]> for vec::IntoIter<T>\n\nAdds `impl<T> AsRef<[T]> for vec::IntoIter<T>`. This mirrors the same trait impl for [`slice::Iter`](https://doc.rust-lang.org/nightly/std/slice/struct.Iter.html). Both types already offer `fn as_slice(&self) -> &[T]`, this just adds the trait impl for `vec::IntoIter`.\n\nIf/when `fn as_slice(&self) -> &[T]` stabilizes for `vec::Drain` and `slice::IterMut`, they should get `AsRef<[T]>` impls as well. As thus, tangentially related to #58957.\n\nMy ultimate goal here: being able to use `for<T, I: Iterator<Item=T> + AsRef<[T]>> I` to refer to `vec::IntoIter`, `vec::Drain`, and eventually `array::IntoIter`, as an approximation of the set of by-value iterators that can be \"previewed\" as by-ref iterators. (Actually expressing that as a trait requires GAT.)", "tree": {"sha": "cd879799beb234464da4076fc7042a63f8efcdea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd879799beb234464da4076fc7042a63f8efcdea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0559bebd800b763700063a6610f6416ea5679c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3e7oCRBK7hj4Ov3rIwAAdHIIAHnyc6YhuHoH7h1binxaQhTB\nwEEwK+Y0IMwifmYrsoE85784AH1gtXNgjFgZkYlRsqE+IE87fVfbTepOTwjyA05P\nXaVy+YfQiaMEkNT5X+2F9ElzzQlxkiwe4EideUUXDj6A/wJzpoQhja8swAzIpVBM\nPyTYyHvQ6yWrimsXp3CQQhyQqiIKFL+VMUTQZ2gacQb6zDxoYNz1lkt11192sJ6s\n1opPeLHOidEkcc08ZMSeaLBSn6jJQ4Ux6zhSnuOOL5dMxU0vRh/TwtRbQF/CpmVU\nvGpnfFF2Dkj877BksbMPOu2DQsVfGFS2mSXka+P6gCKSSd4m4aaGN2HjWTZ1Wc4=\n=r9/p\n-----END PGP SIGNATURE-----\n", "payload": "tree cd879799beb234464da4076fc7042a63f8efcdea\nparent 8484b9935c4d0a8e2209511a0094cc92ba09f561\nparent 91f52a51a23f8c5e8c82c49bbf3ab1bb781d3b02\nauthor Ralf Jung <post@ralfj.de> 1591602920 +0200\ncommitter GitHub <noreply@github.com> 1591602920 +0200\n\nRollup merge of #72583 - CAD97:vec-iter-asref-slice, r=dtolnay\n\nimpl AsRef<[T]> for vec::IntoIter<T>\n\nAdds `impl<T> AsRef<[T]> for vec::IntoIter<T>`. This mirrors the same trait impl for [`slice::Iter`](https://doc.rust-lang.org/nightly/std/slice/struct.Iter.html). Both types already offer `fn as_slice(&self) -> &[T]`, this just adds the trait impl for `vec::IntoIter`.\n\nIf/when `fn as_slice(&self) -> &[T]` stabilizes for `vec::Drain` and `slice::IterMut`, they should get `AsRef<[T]>` impls as well. As thus, tangentially related to #58957.\n\nMy ultimate goal here: being able to use `for<T, I: Iterator<Item=T> + AsRef<[T]>> I` to refer to `vec::IntoIter`, `vec::Drain`, and eventually `array::IntoIter`, as an approximation of the set of by-value iterators that can be \"previewed\" as by-ref iterators. (Actually expressing that as a trait requires GAT.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0559bebd800b763700063a6610f6416ea5679c0", "html_url": "https://github.com/rust-lang/rust/commit/b0559bebd800b763700063a6610f6416ea5679c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0559bebd800b763700063a6610f6416ea5679c0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8484b9935c4d0a8e2209511a0094cc92ba09f561", "url": "https://api.github.com/repos/rust-lang/rust/commits/8484b9935c4d0a8e2209511a0094cc92ba09f561", "html_url": "https://github.com/rust-lang/rust/commit/8484b9935c4d0a8e2209511a0094cc92ba09f561"}, {"sha": "91f52a51a23f8c5e8c82c49bbf3ab1bb781d3b02", "url": "https://api.github.com/repos/rust-lang/rust/commits/91f52a51a23f8c5e8c82c49bbf3ab1bb781d3b02", "html_url": "https://github.com/rust-lang/rust/commit/91f52a51a23f8c5e8c82c49bbf3ab1bb781d3b02"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "9c775eef6a89b35aa576a5b9f5bf4ff2b75378d8", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0559bebd800b763700063a6610f6416ea5679c0/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0559bebd800b763700063a6610f6416ea5679c0/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=b0559bebd800b763700063a6610f6416ea5679c0", "patch": "@@ -2628,6 +2628,13 @@ impl<T> IntoIter<T> {\n     }\n }\n \n+#[stable(feature = \"vec_intoiter_as_ref\", since = \"1.46.0\")]\n+impl<T> AsRef<[T]> for IntoIter<T> {\n+    fn as_ref(&self) -> &[T] {\n+        self.as_slice()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for IntoIter<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}