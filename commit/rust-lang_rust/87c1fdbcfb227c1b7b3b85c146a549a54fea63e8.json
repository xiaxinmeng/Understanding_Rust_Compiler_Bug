{"sha": "87c1fdbcfb227c1b7b3b85c146a549a54fea63e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YzFmZGJjZmIyMjdjMWI3YjNiODVjMTQ2YTU0OWE1NGZlYTYzZTg=", "commit": {"author": {"name": "Edd Barrett", "email": "vext01@gmail.com", "date": "2020-11-24T11:29:25Z"}, "committer": {"name": "Edd Barrett", "email": "vext01@gmail.com", "date": "2020-12-03T13:49:24Z"}, "message": "Make the kernel_copy tests more robust/concurrent.\n\nThese tests write to the same filenames in /tmp and in some cases these\nfiles don't get cleaned up properly. This caused issues for us when\ndifferent users run the tests on the same system, e.g.:\n\n```\n---- sys::unix::kernel_copy::tests::bench_file_to_file_copy stdout ----\nthread 'sys::unix::kernel_copy::tests::bench_file_to_file_copy' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 13, kind: PermissionDenied, message: \"Permission denied\" }', library/std/src/sys/unix/kernel_copy/tests.rs:71:10\n---- sys::unix::kernel_copy::tests::bench_file_to_socket_copy stdout ----\nthread 'sys::unix::kernel_copy::tests::bench_file_to_socket_copy' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 13, kind: PermissionDenied, message: \"Permission denied\" }', library/std/src/sys/unix/kernel_copy/tests.rs:100:10\n```\n\nUse `std::sys_common::io__test::tmpdir()` to solve this.", "tree": {"sha": "7f019557d78ccc692a612fe42afa48bc4075d521", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f019557d78ccc692a612fe42afa48bc4075d521"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c1fdbcfb227c1b7b3b85c146a549a54fea63e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c1fdbcfb227c1b7b3b85c146a549a54fea63e8", "html_url": "https://github.com/rust-lang/rust/commit/87c1fdbcfb227c1b7b3b85c146a549a54fea63e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c1fdbcfb227c1b7b3b85c146a549a54fea63e8/comments", "author": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7cff213e937c1bb301be807ce04fcf6092b9163", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7cff213e937c1bb301be807ce04fcf6092b9163", "html_url": "https://github.com/rust-lang/rust/commit/c7cff213e937c1bb301be807ce04fcf6092b9163"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "0e20e99226ed05d0d80231509d62d2b4d1bb1966", "filename": "library/std/src/sys/unix/kernel_copy/tests.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/87c1fdbcfb227c1b7b3b85c146a549a54fea63e8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c1fdbcfb227c1b7b3b85c146a549a54fea63e8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs?ref=87c1fdbcfb227c1b7b3b85c146a549a54fea63e8", "patch": "@@ -1,18 +1,18 @@\n-use crate::env::temp_dir;\n use crate::fs::OpenOptions;\n use crate::io;\n use crate::io::Result;\n use crate::io::SeekFrom;\n use crate::io::{BufRead, Read, Seek, Write};\n use crate::os::unix::io::AsRawFd;\n+use crate::sys_common::io::test::tmpdir;\n \n #[test]\n fn copy_specialization() -> Result<()> {\n     use crate::io::{BufReader, BufWriter};\n \n-    let path = crate::env::temp_dir();\n-    let source_path = path.join(\"copy-spec.source\");\n-    let sink_path = path.join(\"copy-spec.sink\");\n+    let tmp_path = tmpdir();\n+    let source_path = tmp_path.join(\"copy-spec.source\");\n+    let sink_path = tmp_path.join(\"copy-spec.sink\");\n \n     let result: Result<()> = try {\n         let mut source = crate::fs::OpenOptions::new()\n@@ -61,7 +61,8 @@ fn copy_specialization() -> Result<()> {\n #[bench]\n fn bench_file_to_file_copy(b: &mut test::Bencher) {\n     const BYTES: usize = 128 * 1024;\n-    let src_path = temp_dir().join(\"file-copy-bench-src\");\n+    let temp_path = tmpdir();\n+    let src_path = temp_path.join(\"file-copy-bench-src\");\n     let mut src = crate::fs::OpenOptions::new()\n         .create(true)\n         .truncate(true)\n@@ -71,7 +72,7 @@ fn bench_file_to_file_copy(b: &mut test::Bencher) {\n         .unwrap();\n     src.write(&vec![0u8; BYTES]).unwrap();\n \n-    let sink_path = temp_dir().join(\"file-copy-bench-sink\");\n+    let sink_path = temp_path.join(\"file-copy-bench-sink\");\n     let mut sink = crate::fs::OpenOptions::new()\n         .create(true)\n         .truncate(true)\n@@ -90,7 +91,8 @@ fn bench_file_to_file_copy(b: &mut test::Bencher) {\n #[bench]\n fn bench_file_to_socket_copy(b: &mut test::Bencher) {\n     const BYTES: usize = 128 * 1024;\n-    let src_path = temp_dir().join(\"pipe-copy-bench-src\");\n+    let temp_path = tmpdir();\n+    let src_path = temp_path.join(\"pipe-copy-bench-src\");\n     let mut src = OpenOptions::new()\n         .create(true)\n         .truncate(true)\n@@ -121,7 +123,8 @@ fn bench_file_to_socket_copy(b: &mut test::Bencher) {\n #[bench]\n fn bench_file_to_uds_copy(b: &mut test::Bencher) {\n     const BYTES: usize = 128 * 1024;\n-    let src_path = temp_dir().join(\"uds-copy-bench-src\");\n+    let temp_path = tmpdir();\n+    let src_path = temp_path.join(\"uds-copy-bench-src\");\n     let mut src = OpenOptions::new()\n         .create(true)\n         .truncate(true)"}]}