{"sha": "41369b734d2e0afdde5bb1856286b92d52050dd8", "node_id": "C_kwDOAAsO6NoAKDQxMzY5YjczNGQyZTBhZmRkZTViYjE4NTYyODZiOTJkNTIwNTBkZDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-31T06:03:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-31T06:03:14Z"}, "message": "Rollup merge of #109598 - veera-sivarajan:improve-wording, r=thomcc\n\nImprove documentation for str::replace() and str::replacen()\n\nCurrently, to know what the function will return when the pattern doesn't match, the docs require the reader to understand the implementation detail and mentally evaluate or run the example code. It is not immediately clear.\n\nThis PR makes it more explicit so the reader can quickly find the information.", "tree": {"sha": "7fd63263c0c668bc5535d2576851844ddd8d2535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fd63263c0c668bc5535d2576851844ddd8d2535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41369b734d2e0afdde5bb1856286b92d52050dd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkJneiCRBK7hj4Ov3rIwAAjMMIAFwpzUDEIqpZcB/gNMpb8giX\ndP8i3RhBCA/BH7R5Nfy82YTUqmgFpr1XQPjduG/5p11dJLC8NDpx1MJ7KUE5DzUk\ndlvIywIGBF/WPRqpfy2RuKe1NHB3l3FXCE1AiKPd4Pt/si6TGQkTq5gYBFxUt5Pm\nN0KYpMGlLw3YxAyRN2IPMXNmt7q54KjJ9Tq3hIfYSBVJXgeHbPNN/Yu73AmcO30N\nKp+Uy3UY0X2saTcJFBeZ/vHN5/F7bolouitw0xvIIbRugIwdI5N7eQemeKBRyocy\ndGaL2802hqIrLXMcp1SprRpczsp/as2lkdrznhoJ9zTAfO7yjJ6VUxyLNRuiOUw=\n=N08R\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fd63263c0c668bc5535d2576851844ddd8d2535\nparent 276029deae08ad5b62f7d1ef2ea1acb7f5f529d8\nparent 9fe3a39e3467da1c8a291e7c16f498e3aacfd353\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680242594 +0200\ncommitter GitHub <noreply@github.com> 1680242594 +0200\n\nRollup merge of #109598 - veera-sivarajan:improve-wording, r=thomcc\n\nImprove documentation for str::replace() and str::replacen()\n\nCurrently, to know what the function will return when the pattern doesn't match, the docs require the reader to understand the implementation detail and mentally evaluate or run the example code. It is not immediately clear.\n\nThis PR makes it more explicit so the reader can quickly find the information.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41369b734d2e0afdde5bb1856286b92d52050dd8", "html_url": "https://github.com/rust-lang/rust/commit/41369b734d2e0afdde5bb1856286b92d52050dd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41369b734d2e0afdde5bb1856286b92d52050dd8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "276029deae08ad5b62f7d1ef2ea1acb7f5f529d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/276029deae08ad5b62f7d1ef2ea1acb7f5f529d8", "html_url": "https://github.com/rust-lang/rust/commit/276029deae08ad5b62f7d1ef2ea1acb7f5f529d8"}, {"sha": "9fe3a39e3467da1c8a291e7c16f498e3aacfd353", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe3a39e3467da1c8a291e7c16f498e3aacfd353", "html_url": "https://github.com/rust-lang/rust/commit/9fe3a39e3467da1c8a291e7c16f498e3aacfd353"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "b87ef59f64a3b9e2a9a3536a92690a0e068a8498", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41369b734d2e0afdde5bb1856286b92d52050dd8/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41369b734d2e0afdde5bb1856286b92d52050dd8/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=41369b734d2e0afdde5bb1856286b92d52050dd8", "patch": "@@ -256,7 +256,7 @@ impl str {\n     /// assert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n     /// ```\n     ///\n-    /// When the pattern doesn't match:\n+    /// When the pattern doesn't match, it returns this string slice as [`String`]:\n     ///\n     /// ```\n     /// let s = \"this is old\";\n@@ -297,7 +297,7 @@ impl str {\n     /// assert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n     /// ```\n     ///\n-    /// When the pattern doesn't match:\n+    /// When the pattern doesn't match, it returns this string slice as [`String`]:\n     ///\n     /// ```\n     /// let s = \"this is old\";"}]}