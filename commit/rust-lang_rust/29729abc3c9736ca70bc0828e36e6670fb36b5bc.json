{"sha": "29729abc3c9736ca70bc0828e36e6670fb36b5bc", "node_id": "C_kwDOAAsO6NoAKDI5NzI5YWJjM2M5NzM2Y2E3MGJjMDgyOGUzNmU2NjcwZmIzNmI1YmM", "commit": {"author": {"name": "Stanislav", "email": "enomado@users.noreply.github.com", "date": "2022-09-04T16:10:04Z"}, "committer": {"name": "Stanislav", "email": "enomado@users.noreply.github.com", "date": "2022-09-04T16:14:52Z"}, "message": "Retain imports on find-all-references", "tree": {"sha": "101da17de222b418febcb1ed2b9bac1e1b30f906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/101da17de222b418febcb1ed2b9bac1e1b30f906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29729abc3c9736ca70bc0828e36e6670fb36b5bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29729abc3c9736ca70bc0828e36e6670fb36b5bc", "html_url": "https://github.com/rust-lang/rust/commit/29729abc3c9736ca70bc0828e36e6670fb36b5bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29729abc3c9736ca70bc0828e36e6670fb36b5bc/comments", "author": {"login": "enomado", "id": 707007, "node_id": "MDQ6VXNlcjcwNzAwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/707007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/enomado", "html_url": "https://github.com/enomado", "followers_url": "https://api.github.com/users/enomado/followers", "following_url": "https://api.github.com/users/enomado/following{/other_user}", "gists_url": "https://api.github.com/users/enomado/gists{/gist_id}", "starred_url": "https://api.github.com/users/enomado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/enomado/subscriptions", "organizations_url": "https://api.github.com/users/enomado/orgs", "repos_url": "https://api.github.com/users/enomado/repos", "events_url": "https://api.github.com/users/enomado/events{/privacy}", "received_events_url": "https://api.github.com/users/enomado/received_events", "type": "User", "site_admin": false}, "committer": {"login": "enomado", "id": 707007, "node_id": "MDQ6VXNlcjcwNzAwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/707007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/enomado", "html_url": "https://github.com/enomado", "followers_url": "https://api.github.com/users/enomado/followers", "following_url": "https://api.github.com/users/enomado/following{/other_user}", "gists_url": "https://api.github.com/users/enomado/gists{/gist_id}", "starred_url": "https://api.github.com/users/enomado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/enomado/subscriptions", "organizations_url": "https://api.github.com/users/enomado/orgs", "repos_url": "https://api.github.com/users/enomado/repos", "events_url": "https://api.github.com/users/enomado/events{/privacy}", "received_events_url": "https://api.github.com/users/enomado/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ddb8b7e8ed9fd99f580503b5ee94e8452d57f5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ddb8b7e8ed9fd99f580503b5ee94e8452d57f5e", "html_url": "https://github.com/rust-lang/rust/commit/8ddb8b7e8ed9fd99f580503b5ee94e8452d57f5e"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "fad44930fec2a8a15994ec17235ac0a451530126", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/29729abc3c9736ca70bc0828e36e6670fb36b5bc/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29729abc3c9736ca70bc0828e36e6670fb36b5bc/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=29729abc3c9736ca70bc0828e36e6670fb36b5bc", "patch": "@@ -79,6 +79,8 @@ pub(crate) fn find_all_refs(\n                 retain_adt_literal_usages(&mut usages, def, sema);\n             }\n \n+            retain_import_usages(&mut usages, sema);\n+\n             let references = usages\n                 .into_iter()\n                 .map(|(file_id, refs)| {\n@@ -112,6 +114,32 @@ pub(crate) fn find_all_refs(\n     }\n }\n \n+fn retain_import_usages(usages: &mut UsageSearchResult, sema: &Semantics<'_, RootDatabase>) {\n+    for (file_id, refs) in &mut usages.references {\n+        refs.retain(|x| {\n+            let file_sema = sema.parse(file_id.clone()).syntax().clone();\n+\n+            let maybe_node = file_sema.child_or_token_at_range(x.range.clone());\n+\n+            if let Some(node) = maybe_node {\n+                let res = match node {\n+                    syntax::NodeOrToken::Node(x) => {\n+                        if matches!(x.kind(), USE) {\n+                            false\n+                        } else {\n+                            true\n+                        }\n+                    }\n+                    syntax::NodeOrToken::Token(_) => true,\n+                };\n+                res\n+            } else {\n+                true\n+            }\n+        });\n+    }\n+}\n+\n pub(crate) fn find_defs<'a>(\n     sema: &'a Semantics<'_, RootDatabase>,\n     syntax: &SyntaxNode,"}]}