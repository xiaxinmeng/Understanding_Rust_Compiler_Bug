{"sha": "1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "node_id": "C_kwDOAAsO6NoAKDFjOGJjZjBkNGVlNmIzMGUwODk5ZjkyMGM0NTJjNzdkY2E2M2I0OWE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-20T12:45:31Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-20T13:05:18Z"}, "message": "Move inlay hints tests into implementation modules", "tree": {"sha": "02a374da6f4f8b751b1f14f70fa012dffd04719c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02a374da6f4f8b751b1f14f70fa012dffd04719c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "html_url": "https://github.com/rust-lang/rust/commit/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "191cfba9d26137233d8fef91dcf5d32ef1a1841f", "url": "https://api.github.com/repos/rust-lang/rust/commits/191cfba9d26137233d8fef91dcf5d32ef1a1841f", "html_url": "https://github.com/rust-lang/rust/commit/191cfba9d26137233d8fef91dcf5d32ef1a1841f"}], "stats": {"total": 3621, "additions": 1844, "deletions": 1777}, "files": [{"sha": "152f31b3a573327a15ea80d0e23b6e8eeaa9be49", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 6, "deletions": 1777, "changes": 1783, "blob_url": "https://github.com/rust-lang/rust/blob/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "patch": "@@ -326,17 +326,16 @@ fn closure_has_block_body(closure: &ast::ClosureExpr) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use expect_test::{expect, Expect};\n+    use expect_test::Expect;\n     use itertools::Itertools;\n-    use syntax::{TextRange, TextSize};\n     use test_utils::extract_annotations;\n \n     use crate::inlay_hints::AdjustmentHints;\n     use crate::{fixture, inlay_hints::InlayHintsConfig, LifetimeElisionHints};\n \n     use super::ClosureReturnTypeHints;\n \n-    const DISABLED_CONFIG: InlayHintsConfig = InlayHintsConfig {\n+    pub(super) const DISABLED_CONFIG: InlayHintsConfig = InlayHintsConfig {\n         render_colons: false,\n         type_hints: false,\n         parameter_hints: false,\n@@ -351,7 +350,7 @@ mod tests {\n         max_length: None,\n         closing_brace_hints_min_lines: None,\n     };\n-    const TEST_CONFIG: InlayHintsConfig = InlayHintsConfig {\n+    pub(super) const TEST_CONFIG: InlayHintsConfig = InlayHintsConfig {\n         type_hints: true,\n         parameter_hints: true,\n         chaining_hints: true,\n@@ -362,30 +361,12 @@ mod tests {\n     };\n \n     #[track_caller]\n-    fn check(ra_fixture: &str) {\n+    pub(super) fn check(ra_fixture: &str) {\n         check_with_config(TEST_CONFIG, ra_fixture);\n     }\n \n     #[track_caller]\n-    fn check_params(ra_fixture: &str) {\n-        check_with_config(\n-            InlayHintsConfig { parameter_hints: true, ..DISABLED_CONFIG },\n-            ra_fixture,\n-        );\n-    }\n-\n-    #[track_caller]\n-    fn check_types(ra_fixture: &str) {\n-        check_with_config(InlayHintsConfig { type_hints: true, ..DISABLED_CONFIG }, ra_fixture);\n-    }\n-\n-    #[track_caller]\n-    fn check_chains(ra_fixture: &str) {\n-        check_with_config(InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG }, ra_fixture);\n-    }\n-\n-    #[track_caller]\n-    fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n+    pub(super) fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n         let (analysis, file_id) = fixture::file(ra_fixture);\n         let mut expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis.inlay_hints(&config, file_id, None).unwrap();\n@@ -400,7 +381,7 @@ mod tests {\n     }\n \n     #[track_caller]\n-    fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n+    pub(super) fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = fixture::file(ra_fixture);\n         let inlay_hints = analysis.inlay_hints(&config, file_id, None).unwrap();\n         expect.assert_debug_eq(&inlay_hints)\n@@ -417,1756 +398,4 @@ fn main() {\n }\"#,\n         );\n     }\n-\n-    // Parameter hint tests\n-\n-    #[test]\n-    fn param_hints_only() {\n-        check_params(\n-            r#\"\n-fn foo(a: i32, b: i32) -> i32 { a + b }\n-fn main() {\n-    let _x = foo(\n-        4,\n-      //^ a\n-        4,\n-      //^ b\n-    );\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn param_hints_on_closure() {\n-        check_params(\n-            r#\"\n-fn main() {\n-    let clo = |a: u8, b: u8| a + b;\n-    clo(\n-        1,\n-      //^ a\n-        2,\n-      //^ b\n-    );\n-}\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn param_name_similar_to_fn_name_still_hints() {\n-        check_params(\n-            r#\"\n-fn max(x: i32, y: i32) -> i32 { x + y }\n-fn main() {\n-    let _x = max(\n-        4,\n-      //^ x\n-        4,\n-      //^ y\n-    );\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn param_name_similar_to_fn_name() {\n-        check_params(\n-            r#\"\n-fn param_with_underscore(with_underscore: i32) -> i32 { with_underscore }\n-fn main() {\n-    let _x = param_with_underscore(\n-        4,\n-    );\n-}\"#,\n-        );\n-        check_params(\n-            r#\"\n-fn param_with_underscore(underscore: i32) -> i32 { underscore }\n-fn main() {\n-    let _x = param_with_underscore(\n-        4,\n-    );\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn param_name_same_as_fn_name() {\n-        check_params(\n-            r#\"\n-fn foo(foo: i32) -> i32 { foo }\n-fn main() {\n-    let _x = foo(\n-        4,\n-    );\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn never_hide_param_when_multiple_params() {\n-        check_params(\n-            r#\"\n-fn foo(foo: i32, bar: i32) -> i32 { bar + baz }\n-fn main() {\n-    let _x = foo(\n-        4,\n-      //^ foo\n-        8,\n-      //^ bar\n-    );\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn param_hints_look_through_as_ref_and_clone() {\n-        check_params(\n-            r#\"\n-fn foo(bar: i32, baz: f32) {}\n-\n-fn main() {\n-    let bar = 3;\n-    let baz = &\"baz\";\n-    let fez = 1.0;\n-    foo(bar.clone(), bar.clone());\n-                   //^^^^^^^^^^^ baz\n-    foo(bar.as_ref(), bar.as_ref());\n-                    //^^^^^^^^^^^^ baz\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn self_param_hints() {\n-        check_params(\n-            r#\"\n-struct Foo;\n-\n-impl Foo {\n-    fn foo(self: Self) {}\n-    fn bar(self: &Self) {}\n-}\n-\n-fn main() {\n-    Foo::foo(Foo);\n-           //^^^ self\n-    Foo::bar(&Foo);\n-           //^^^^ self\n-}\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn param_name_hints_show_for_literals() {\n-        check_params(\n-            r#\"pub fn test(a: i32, b: i32) -> [i32; 2] { [a, b] }\n-fn main() {\n-    test(\n-        0xa_b,\n-      //^^^^^ a\n-        0xa_b,\n-      //^^^^^ b\n-    );\n-}\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn function_call_parameter_hint() {\n-        check_params(\n-            r#\"\n-//- minicore: option\n-struct FileId {}\n-struct SmolStr {}\n-\n-struct TextRange {}\n-struct SyntaxKind {}\n-struct NavigationTarget {}\n-\n-struct Test {}\n-\n-impl Test {\n-    fn method(&self, mut param: i32) -> i32 { param * 2 }\n-\n-    fn from_syntax(\n-        file_id: FileId,\n-        name: SmolStr,\n-        focus_range: Option<TextRange>,\n-        full_range: TextRange,\n-        kind: SyntaxKind,\n-        docs: Option<String>,\n-    ) -> NavigationTarget {\n-        NavigationTarget {}\n-    }\n-}\n-\n-fn test_func(mut foo: i32, bar: i32, msg: &str, _: i32, last: i32) -> i32 {\n-    foo + bar\n-}\n-\n-fn main() {\n-    let not_literal = 1;\n-    let _: i32 = test_func(1,    2,      \"hello\", 3,  not_literal);\n-                         //^ foo ^ bar   ^^^^^^^ msg  ^^^^^^^^^^^ last\n-    let t: Test = Test {};\n-    t.method(123);\n-           //^^^ param\n-    Test::method(&t,      3456);\n-               //^^ self  ^^^^ param\n-    Test::from_syntax(\n-        FileId {},\n-        \"impl\".into(),\n-      //^^^^^^^^^^^^^ name\n-        None,\n-      //^^^^ focus_range\n-        TextRange {},\n-      //^^^^^^^^^^^^ full_range\n-        SyntaxKind {},\n-      //^^^^^^^^^^^^^ kind\n-        None,\n-      //^^^^ docs\n-    );\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn parameter_hint_heuristics() {\n-        check_params(\n-            r#\"\n-fn check(ra_fixture_thing: &str) {}\n-\n-fn map(f: i32) {}\n-fn filter(predicate: i32) {}\n-\n-fn strip_suffix(suffix: &str) {}\n-fn stripsuffix(suffix: &str) {}\n-fn same(same: u32) {}\n-fn same2(_same2: u32) {}\n-\n-fn enum_matches_param_name(completion_kind: CompletionKind) {}\n-\n-fn foo(param: u32) {}\n-fn bar(param_eter: u32) {}\n-\n-enum CompletionKind {\n-    Keyword,\n-}\n-\n-fn non_ident_pat((a, b): (u32, u32)) {}\n-\n-fn main() {\n-    const PARAM: u32 = 0;\n-    foo(PARAM);\n-    foo(!PARAM);\n-     // ^^^^^^ param\n-    check(\"\");\n-\n-    map(0);\n-    filter(0);\n-\n-    strip_suffix(\"\");\n-    stripsuffix(\"\");\n-              //^^ suffix\n-    same(0);\n-    same2(0);\n-\n-    enum_matches_param_name(CompletionKind::Keyword);\n-\n-    let param = 0;\n-    foo(param);\n-    foo(param as _);\n-    let param_end = 0;\n-    foo(param_end);\n-    let start_param = 0;\n-    foo(start_param);\n-    let param2 = 0;\n-    foo(param2);\n-      //^^^^^^ param\n-\n-    macro_rules! param {\n-        () => {};\n-    };\n-    foo(param!());\n-\n-    let param_eter = 0;\n-    bar(param_eter);\n-    let param_eter_end = 0;\n-    bar(param_eter_end);\n-    let start_param_eter = 0;\n-    bar(start_param_eter);\n-    let param_eter2 = 0;\n-    bar(param_eter2);\n-      //^^^^^^^^^^^ param_eter\n-\n-    non_ident_pat((0, 0));\n-}\"#,\n-        );\n-    }\n-\n-    // Type-Hint tests\n-\n-    #[test]\n-    fn type_hints_only() {\n-        check_types(\n-            r#\"\n-fn foo(a: i32, b: i32) -> i32 { a + b }\n-fn main() {\n-    let _x = foo(4, 4);\n-      //^^ i32\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn type_hints_bindings_after_at() {\n-        check_types(\n-            r#\"\n-//- minicore: option\n-fn main() {\n-    let ref foo @ bar @ ref mut baz = 0;\n-          //^^^ &i32\n-                //^^^ i32\n-                              //^^^ &mut i32\n-    let [x @ ..] = [0];\n-       //^ [i32; 1]\n-    if let x @ Some(_) = Some(0) {}\n-         //^ Option<i32>\n-    let foo @ (bar, baz) = (3, 3);\n-      //^^^ (i32, i32)\n-             //^^^ i32\n-                  //^^^ i32\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn default_generic_types_should_not_be_displayed() {\n-        check(\n-            r#\"\n-struct Test<K, T = u8> { k: K, t: T }\n-\n-fn main() {\n-    let zz = Test { t: 23u8, k: 33 };\n-      //^^ Test<i32>\n-    let zz_ref = &zz;\n-      //^^^^^^ &Test<i32>\n-    let test = || zz;\n-      //^^^^ || -> Test<i32>\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn shorten_iterators_in_associated_params() {\n-        check_types(\n-            r#\"\n-//- minicore: iterators\n-use core::iter;\n-\n-pub struct SomeIter<T> {}\n-\n-impl<T> SomeIter<T> {\n-    pub fn new() -> Self { SomeIter {} }\n-    pub fn push(&mut self, t: T) {}\n-}\n-\n-impl<T> Iterator for SomeIter<T> {\n-    type Item = T;\n-    fn next(&mut self) -> Option<Self::Item> {\n-        None\n-    }\n-}\n-\n-fn main() {\n-    let mut some_iter = SomeIter::new();\n-          //^^^^^^^^^ SomeIter<Take<Repeat<i32>>>\n-      some_iter.push(iter::repeat(2).take(2));\n-    let iter_of_iters = some_iter.take(2);\n-      //^^^^^^^^^^^^^ impl Iterator<Item = impl Iterator<Item = i32>>\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn iterator_hint_regression_issue_12674() {\n-        // Ensure we don't crash while solving the projection type of iterators.\n-        check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n-            r#\"\n-//- minicore: iterators\n-struct S<T>(T);\n-impl<T> S<T> {\n-    fn iter(&self) -> Iter<'_, T> { loop {} }\n-}\n-struct Iter<'a, T: 'a>(&'a T);\n-impl<'a, T> Iterator for Iter<'a, T> {\n-    type Item = &'a T;\n-    fn next(&mut self) -> Option<Self::Item> { loop {} }\n-}\n-struct Container<'a> {\n-    elements: S<&'a str>,\n-}\n-struct SliceIter<'a, T>(&'a T);\n-impl<'a, T> Iterator for SliceIter<'a, T> {\n-    type Item = &'a T;\n-    fn next(&mut self) -> Option<Self::Item> { loop {} }\n-}\n-\n-fn main(a: SliceIter<'_, Container>) {\n-    a\n-    .filter_map(|c| Some(c.elements.iter().filter_map(|v| Some(v))))\n-    .map(|e| e);\n-}\n-            \"#,\n-            expect![[r#\"\n-                [\n-                    InlayHint {\n-                        range: 484..554,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"impl Iterator<Item = impl Iterator<Item = &&str>>\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                484..554,\n-                            ),\n-                        ),\n-                    },\n-                    InlayHint {\n-                        range: 484..485,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"SliceIter<Container>\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                484..485,\n-                            ),\n-                        ),\n-                    },\n-                ]\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn infer_call_method_return_associated_types_with_generic() {\n-        check_types(\n-            r#\"\n-            pub trait Default {\n-                fn default() -> Self;\n-            }\n-            pub trait Foo {\n-                type Bar: Default;\n-            }\n-\n-            pub fn quux<T: Foo>() -> T::Bar {\n-                let y = Default::default();\n-                  //^ <T as Foo>::Bar\n-\n-                y\n-            }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn fn_hints() {\n-        check_types(\n-            r#\"\n-//- minicore: fn, sized\n-fn foo() -> impl Fn() { loop {} }\n-fn foo1() -> impl Fn(f64) { loop {} }\n-fn foo2() -> impl Fn(f64, f64) { loop {} }\n-fn foo3() -> impl Fn(f64, f64) -> u32 { loop {} }\n-fn foo4() -> &'static dyn Fn(f64, f64) -> u32 { loop {} }\n-fn foo5() -> &'static dyn Fn(&'static dyn Fn(f64, f64) -> u32, f64) -> u32 { loop {} }\n-fn foo6() -> impl Fn(f64, f64) -> u32 + Sized { loop {} }\n-fn foo7() -> *const (impl Fn(f64, f64) -> u32 + Sized) { loop {} }\n-\n-fn main() {\n-    let foo = foo();\n-     // ^^^ impl Fn()\n-    let foo = foo1();\n-     // ^^^ impl Fn(f64)\n-    let foo = foo2();\n-     // ^^^ impl Fn(f64, f64)\n-    let foo = foo3();\n-     // ^^^ impl Fn(f64, f64) -> u32\n-    let foo = foo4();\n-     // ^^^ &dyn Fn(f64, f64) -> u32\n-    let foo = foo5();\n-     // ^^^ &dyn Fn(&dyn Fn(f64, f64) -> u32, f64) -> u32\n-    let foo = foo6();\n-     // ^^^ impl Fn(f64, f64) -> u32\n-    let foo = foo7();\n-     // ^^^ *const impl Fn(f64, f64) -> u32\n-}\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn check_hint_range_limit() {\n-        let fixture = r#\"\n-        //- minicore: fn, sized\n-        fn foo() -> impl Fn() { loop {} }\n-        fn foo1() -> impl Fn(f64) { loop {} }\n-        fn foo2() -> impl Fn(f64, f64) { loop {} }\n-        fn foo3() -> impl Fn(f64, f64) -> u32 { loop {} }\n-        fn foo4() -> &'static dyn Fn(f64, f64) -> u32 { loop {} }\n-        fn foo5() -> &'static dyn Fn(&'static dyn Fn(f64, f64) -> u32, f64) -> u32 { loop {} }\n-        fn foo6() -> impl Fn(f64, f64) -> u32 + Sized { loop {} }\n-        fn foo7() -> *const (impl Fn(f64, f64) -> u32 + Sized) { loop {} }\n-\n-        fn main() {\n-            let foo = foo();\n-            let foo = foo1();\n-            let foo = foo2();\n-             // ^^^ impl Fn(f64, f64)\n-            let foo = foo3();\n-             // ^^^ impl Fn(f64, f64) -> u32\n-            let foo = foo4();\n-            let foo = foo5();\n-            let foo = foo6();\n-            let foo = foo7();\n-        }\n-        \"#;\n-        let (analysis, file_id) = fixture::file(fixture);\n-        let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n-        let inlay_hints = analysis\n-            .inlay_hints(\n-                &InlayHintsConfig { type_hints: true, ..DISABLED_CONFIG },\n-                file_id,\n-                Some(TextRange::new(TextSize::from(500), TextSize::from(600))),\n-            )\n-            .unwrap();\n-        let actual =\n-            inlay_hints.into_iter().map(|it| (it.range, it.label.to_string())).collect::<Vec<_>>();\n-        assert_eq!(expected, actual, \"\\nExpected:\\n{:#?}\\n\\nActual:\\n{:#?}\", expected, actual);\n-    }\n-\n-    #[test]\n-    fn fn_hints_ptr_rpit_fn_parentheses() {\n-        check_types(\n-            r#\"\n-//- minicore: fn, sized\n-trait Trait {}\n-\n-fn foo1() -> *const impl Fn() { loop {} }\n-fn foo2() -> *const (impl Fn() + Sized) { loop {} }\n-fn foo3() -> *const (impl Fn() + ?Sized) { loop {} }\n-fn foo4() -> *const (impl Sized + Fn()) { loop {} }\n-fn foo5() -> *const (impl ?Sized + Fn()) { loop {} }\n-fn foo6() -> *const (impl Fn() + Trait) { loop {} }\n-fn foo7() -> *const (impl Fn() + Sized + Trait) { loop {} }\n-fn foo8() -> *const (impl Fn() + ?Sized + Trait) { loop {} }\n-fn foo9() -> *const (impl Fn() -> u8 + ?Sized) { loop {} }\n-fn foo10() -> *const (impl Fn() + Sized + ?Sized) { loop {} }\n-\n-fn main() {\n-    let foo = foo1();\n-    //  ^^^ *const impl Fn()\n-    let foo = foo2();\n-    //  ^^^ *const impl Fn()\n-    let foo = foo3();\n-    //  ^^^ *const (impl Fn() + ?Sized)\n-    let foo = foo4();\n-    //  ^^^ *const impl Fn()\n-    let foo = foo5();\n-    //  ^^^ *const (impl Fn() + ?Sized)\n-    let foo = foo6();\n-    //  ^^^ *const (impl Fn() + Trait)\n-    let foo = foo7();\n-    //  ^^^ *const (impl Fn() + Trait)\n-    let foo = foo8();\n-    //  ^^^ *const (impl Fn() + Trait + ?Sized)\n-    let foo = foo9();\n-    //  ^^^ *const (impl Fn() -> u8 + ?Sized)\n-    let foo = foo10();\n-    //  ^^^ *const impl Fn()\n-}\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn unit_structs_have_no_type_hints() {\n-        check_types(\n-            r#\"\n-//- minicore: result\n-struct SyntheticSyntax;\n-\n-fn main() {\n-    match Ok(()) {\n-        Ok(_) => (),\n-        Err(SyntheticSyntax) => (),\n-    }\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn let_statement() {\n-        check_types(\n-            r#\"\n-#[derive(PartialEq)]\n-enum Option<T> { None, Some(T) }\n-\n-#[derive(PartialEq)]\n-struct Test { a: Option<u32>, b: u8 }\n-\n-fn main() {\n-    struct InnerStruct {}\n-\n-    let test = 54;\n-      //^^^^ i32\n-    let test: i32 = 33;\n-    let mut test = 33;\n-          //^^^^ i32\n-    let _ = 22;\n-    let test = \"test\";\n-      //^^^^ &str\n-    let test = InnerStruct {};\n-      //^^^^ InnerStruct\n-\n-    let test = unresolved();\n-\n-    let test = (42, 'a');\n-      //^^^^ (i32, char)\n-    let (a,    (b,     (c,)) = (2, (3, (9.2,));\n-       //^ i32  ^ i32   ^ f64\n-    let &x = &92;\n-       //^ i32\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn if_expr() {\n-        check_types(\n-            r#\"\n-//- minicore: option\n-struct Test { a: Option<u32>, b: u8 }\n-\n-fn main() {\n-    let test = Some(Test { a: Some(3), b: 1 });\n-      //^^^^ Option<Test>\n-    if let None = &test {};\n-    if let test = &test {};\n-         //^^^^ &Option<Test>\n-    if let Some(test) = &test {};\n-              //^^^^ &Test\n-    if let Some(Test { a,             b }) = &test {};\n-                     //^ &Option<u32> ^ &u8\n-    if let Some(Test { a: x,             b: y }) = &test {};\n-                        //^ &Option<u32>    ^ &u8\n-    if let Some(Test { a: Some(x),  b: y }) = &test {};\n-                             //^ &u32  ^ &u8\n-    if let Some(Test { a: None,  b: y }) = &test {};\n-                                  //^ &u8\n-    if let Some(Test { b: y, .. }) = &test {};\n-                        //^ &u8\n-    if test == None {}\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn while_expr() {\n-        check_types(\n-            r#\"\n-//- minicore: option\n-struct Test { a: Option<u32>, b: u8 }\n-\n-fn main() {\n-    let test = Some(Test { a: Some(3), b: 1 });\n-      //^^^^ Option<Test>\n-    while let Some(Test { a: Some(x),  b: y }) = &test {};\n-                                //^ &u32  ^ &u8\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn match_arm_list() {\n-        check_types(\n-            r#\"\n-//- minicore: option\n-struct Test { a: Option<u32>, b: u8 }\n-\n-fn main() {\n-    match Some(Test { a: Some(3), b: 1 }) {\n-        None => (),\n-        test => (),\n-      //^^^^ Option<Test>\n-        Some(Test { a: Some(x), b: y }) => (),\n-                          //^ u32  ^ u8\n-        _ => {}\n-    }\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_for_hint() {\n-        check_types(\n-            r#\"\n-//- minicore: iterator\n-pub struct Vec<T> {}\n-\n-impl<T> Vec<T> {\n-    pub fn new() -> Self { Vec {} }\n-    pub fn push(&mut self, t: T) {}\n-}\n-\n-impl<T> IntoIterator for Vec<T> {\n-    type Item = T;\n-    type IntoIter = IntoIter<T>;\n-}\n-\n-struct IntoIter<T> {}\n-\n-impl<T> Iterator for IntoIter<T> {\n-    type Item = T;\n-}\n-\n-fn main() {\n-    let mut data = Vec::new();\n-          //^^^^ Vec<&str>\n-    data.push(\"foo\");\n-    for i in data {\n-      //^ &str\n-      let z = i;\n-        //^ &str\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn multi_dyn_trait_bounds() {\n-        check_types(\n-            r#\"\n-pub struct Vec<T> {}\n-\n-impl<T> Vec<T> {\n-    pub fn new() -> Self { Vec {} }\n-}\n-\n-pub struct Box<T> {}\n-\n-trait Display {}\n-auto trait Sync {}\n-\n-fn main() {\n-    // The block expression wrapping disables the constructor hint hiding logic\n-    let _v = { Vec::<Box<&(dyn Display + Sync)>>::new() };\n-      //^^ Vec<Box<&(dyn Display + Sync)>>\n-    let _v = { Vec::<Box<*const (dyn Display + Sync)>>::new() };\n-      //^^ Vec<Box<*const (dyn Display + Sync)>>\n-    let _v = { Vec::<Box<dyn Display + Sync>>::new() };\n-      //^^ Vec<Box<dyn Display + Sync>>\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn shorten_iterator_hints() {\n-        check_types(\n-            r#\"\n-//- minicore: iterators\n-use core::iter;\n-\n-struct MyIter;\n-\n-impl Iterator for MyIter {\n-    type Item = ();\n-    fn next(&mut self) -> Option<Self::Item> {\n-        None\n-    }\n-}\n-\n-fn main() {\n-    let _x = MyIter;\n-      //^^ MyIter\n-    let _x = iter::repeat(0);\n-      //^^ impl Iterator<Item = i32>\n-    fn generic<T: Clone>(t: T) {\n-        let _x = iter::repeat(t);\n-          //^^ impl Iterator<Item = T>\n-        let _chained = iter::repeat(t).take(10);\n-          //^^^^^^^^ impl Iterator<Item = T>\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn skip_constructor_and_enum_type_hints() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                type_hints: true,\n-                hide_named_constructor_hints: true,\n-                ..DISABLED_CONFIG\n-            },\n-            r#\"\n-//- minicore: try, option\n-use core::ops::ControlFlow;\n-\n-mod x {\n-    pub mod y { pub struct Foo; }\n-    pub struct Foo;\n-    pub enum AnotherEnum {\n-        Variant()\n-    };\n-}\n-struct Struct;\n-struct TupleStruct();\n-\n-impl Struct {\n-    fn new() -> Self {\n-        Struct\n-    }\n-    fn try_new() -> ControlFlow<(), Self> {\n-        ControlFlow::Continue(Struct)\n-    }\n-}\n-\n-struct Generic<T>(T);\n-impl Generic<i32> {\n-    fn new() -> Self {\n-        Generic(0)\n-    }\n-}\n-\n-enum Enum {\n-    Variant(u32)\n-}\n-\n-fn times2(value: i32) -> i32 {\n-    2 * value\n-}\n-\n-fn main() {\n-    let enumb = Enum::Variant(0);\n-\n-    let strukt = x::Foo;\n-    let strukt = x::y::Foo;\n-    let strukt = Struct;\n-    let strukt = Struct::new();\n-\n-    let tuple_struct = TupleStruct();\n-\n-    let generic0 = Generic::new();\n-    //  ^^^^^^^^ Generic<i32>\n-    let generic1 = Generic(0);\n-    //  ^^^^^^^^ Generic<i32>\n-    let generic2 = Generic::<i32>::new();\n-    let generic3 = <Generic<i32>>::new();\n-    let generic4 = Generic::<i32>(0);\n-\n-\n-    let option = Some(0);\n-    //  ^^^^^^ Option<i32>\n-    let func = times2;\n-    //  ^^^^ fn times2(i32) -> i32\n-    let closure = |x: i32| x * 2;\n-    //  ^^^^^^^ |i32| -> i32\n-}\n-\n-fn fallible() -> ControlFlow<()> {\n-    let strukt = Struct::try_new()?;\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn shows_constructor_type_hints_when_enabled() {\n-        check_types(\n-            r#\"\n-//- minicore: try\n-use core::ops::ControlFlow;\n-\n-struct Struct;\n-struct TupleStruct();\n-\n-impl Struct {\n-    fn new() -> Self {\n-        Struct\n-    }\n-    fn try_new() -> ControlFlow<(), Self> {\n-        ControlFlow::Continue(Struct)\n-    }\n-}\n-\n-struct Generic<T>(T);\n-impl Generic<i32> {\n-    fn new() -> Self {\n-        Generic(0)\n-    }\n-}\n-\n-fn main() {\n-    let strukt = Struct::new();\n-     // ^^^^^^ Struct\n-    let tuple_struct = TupleStruct();\n-     // ^^^^^^^^^^^^ TupleStruct\n-    let generic0 = Generic::new();\n-     // ^^^^^^^^ Generic<i32>\n-    let generic1 = Generic::<i32>::new();\n-     // ^^^^^^^^ Generic<i32>\n-    let generic2 = <Generic<i32>>::new();\n-     // ^^^^^^^^ Generic<i32>\n-}\n-\n-fn fallible() -> ControlFlow<()> {\n-    let strukt = Struct::try_new()?;\n-     // ^^^^^^ Struct\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn closures() {\n-        check(\n-            r#\"\n-fn main() {\n-    let mut start = 0;\n-          //^^^^^ i32\n-    (0..2).for_each(|increment      | { start += increment; });\n-                   //^^^^^^^^^ i32\n-\n-    let multiply =\n-      //^^^^^^^^ |i32, i32| -> i32\n-      | a,     b| a * b\n-      //^ i32  ^ i32\n-\n-    ;\n-\n-    let _: i32 = multiply(1,  2);\n-                        //^ a ^ b\n-    let multiply_ref = &multiply;\n-      //^^^^^^^^^^^^ &|i32, i32| -> i32\n-\n-    let return_42 = || 42;\n-      //^^^^^^^^^ || -> i32\n-      || { 42 };\n-    //^^ i32\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn return_type_hints_for_closure_without_block() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                closure_return_type_hints: ClosureReturnTypeHints::Always,\n-                ..DISABLED_CONFIG\n-            },\n-            r#\"\n-fn main() {\n-    let a = || { 0 };\n-          //^^ i32\n-    let b = || 0;\n-          //^^ i32\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn skip_closure_type_hints() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                type_hints: true,\n-                hide_closure_initialization_hints: true,\n-                ..DISABLED_CONFIG\n-            },\n-            r#\"\n-//- minicore: fn\n-fn main() {\n-    let multiple_2 = |x: i32| { x * 2 };\n-\n-    let multiple_2 = |x: i32| x * 2;\n-    //  ^^^^^^^^^^ |i32| -> i32\n-\n-    let (not) = (|x: bool| { !x });\n-    //   ^^^ |bool| -> bool\n-\n-    let (is_zero, _b) = (|x: usize| { x == 0 }, false);\n-    //   ^^^^^^^ |usize| -> bool\n-    //            ^^ bool\n-\n-    let plus_one = |x| { x + 1 };\n-    //              ^ u8\n-    foo(plus_one);\n-\n-    let add_mul = bar(|x: u8| { x + 1 });\n-    //  ^^^^^^^ impl FnOnce(u8) -> u8 + ?Sized\n-\n-    let closure = if let Some(6) = add_mul(2).checked_sub(1) {\n-    //  ^^^^^^^ fn(i32) -> i32\n-        |x: i32| { x * 2 }\n-    } else {\n-        |x: i32| { x * 3 }\n-    };\n-}\n-\n-fn foo(f: impl FnOnce(u8) -> u8) {}\n-\n-fn bar(f: impl FnOnce(u8) -> u8) -> impl FnOnce(u8) -> u8 {\n-    move |x: u8| f(x) * 2\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn hint_truncation() {\n-        check_with_config(\n-            InlayHintsConfig { max_length: Some(8), ..TEST_CONFIG },\n-            r#\"\n-struct Smol<T>(T);\n-\n-struct VeryLongOuterName<T>(T);\n-\n-fn main() {\n-    let a = Smol(0u32);\n-      //^ Smol<u32>\n-    let b = VeryLongOuterName(0usize);\n-      //^ VeryLongOuterName<\u2026>\n-    let c = Smol(Smol(0u32))\n-      //^ Smol<Smol<\u2026>>\n-}\"#,\n-        );\n-    }\n-\n-    // Chaining hint tests\n-\n-    #[test]\n-    fn chaining_hints_ignore_comments() {\n-        check_expect(\n-            InlayHintsConfig { type_hints: false, chaining_hints: true, ..DISABLED_CONFIG },\n-            r#\"\n-struct A(B);\n-impl A { fn into_b(self) -> B { self.0 } }\n-struct B(C);\n-impl B { fn into_c(self) -> C { self.0 } }\n-struct C;\n-\n-fn main() {\n-    let c = A(B(C))\n-        .into_b() // This is a comment\n-        // This is another comment\n-        .into_c();\n-}\n-\"#,\n-            expect![[r#\"\n-                [\n-                    InlayHint {\n-                        range: 147..172,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"B\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                147..172,\n-                            ),\n-                        ),\n-                    },\n-                    InlayHint {\n-                        range: 147..154,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"A\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                147..154,\n-                            ),\n-                        ),\n-                    },\n-                ]\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn chaining_hints_without_newlines() {\n-        check_chains(\n-            r#\"\n-struct A(B);\n-impl A { fn into_b(self) -> B { self.0 } }\n-struct B(C);\n-impl B { fn into_c(self) -> C { self.0 } }\n-struct C;\n-\n-fn main() {\n-    let c = A(B(C)).into_b().into_c();\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn struct_access_chaining_hints() {\n-        check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n-            r#\"\n-struct A { pub b: B }\n-struct B { pub c: C }\n-struct C(pub bool);\n-struct D;\n-\n-impl D {\n-    fn foo(&self) -> i32 { 42 }\n-}\n-\n-fn main() {\n-    let x = A { b: B { c: C(true) } }\n-        .b\n-        .c\n-        .0;\n-    let x = D\n-        .foo();\n-}\"#,\n-            expect![[r#\"\n-                [\n-                    InlayHint {\n-                        range: 143..190,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"C\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                143..190,\n-                            ),\n-                        ),\n-                    },\n-                    InlayHint {\n-                        range: 143..179,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"B\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                143..179,\n-                            ),\n-                        ),\n-                    },\n-                ]\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn generic_chaining_hints() {\n-        check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n-            r#\"\n-struct A<T>(T);\n-struct B<T>(T);\n-struct C<T>(T);\n-struct X<T,R>(T, R);\n-\n-impl<T> A<T> {\n-    fn new(t: T) -> Self { A(t) }\n-    fn into_b(self) -> B<T> { B(self.0) }\n-}\n-impl<T> B<T> {\n-    fn into_c(self) -> C<T> { C(self.0) }\n-}\n-fn main() {\n-    let c = A::new(X(42, true))\n-        .into_b()\n-        .into_c();\n-}\n-\"#,\n-            expect![[r#\"\n-                [\n-                    InlayHint {\n-                        range: 246..283,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"B<X<i32, bool>>\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                246..283,\n-                            ),\n-                        ),\n-                    },\n-                    InlayHint {\n-                        range: 246..265,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"A<X<i32, bool>>\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                246..265,\n-                            ),\n-                        ),\n-                    },\n-                ]\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn shorten_iterator_chaining_hints() {\n-        check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n-            r#\"\n-//- minicore: iterators\n-use core::iter;\n-\n-struct MyIter;\n-\n-impl Iterator for MyIter {\n-    type Item = ();\n-    fn next(&mut self) -> Option<Self::Item> {\n-        None\n-    }\n-}\n-\n-fn main() {\n-    let _x = MyIter.by_ref()\n-        .take(5)\n-        .by_ref()\n-        .take(5)\n-        .by_ref();\n-}\n-\"#,\n-            expect![[r#\"\n-                [\n-                    InlayHint {\n-                        range: 174..241,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"impl Iterator<Item = ()>\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                174..241,\n-                            ),\n-                        ),\n-                    },\n-                    InlayHint {\n-                        range: 174..224,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"impl Iterator<Item = ()>\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                174..224,\n-                            ),\n-                        ),\n-                    },\n-                    InlayHint {\n-                        range: 174..206,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"impl Iterator<Item = ()>\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                174..206,\n-                            ),\n-                        ),\n-                    },\n-                    InlayHint {\n-                        range: 174..189,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"&mut MyIter\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                174..189,\n-                            ),\n-                        ),\n-                    },\n-                ]\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn hints_in_attr_call() {\n-        check_expect(\n-            TEST_CONFIG,\n-            r#\"\n-//- proc_macros: identity, input_replace\n-struct Struct;\n-impl Struct {\n-    fn chain(self) -> Self {\n-        self\n-    }\n-}\n-#[proc_macros::identity]\n-fn main() {\n-    let strukt = Struct;\n-    strukt\n-        .chain()\n-        .chain()\n-        .chain();\n-    Struct::chain(strukt);\n-}\n-\"#,\n-            expect![[r#\"\n-                [\n-                    InlayHint {\n-                        range: 124..130,\n-                        kind: TypeHint,\n-                        label: [\n-                            \"Struct\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                124..130,\n-                            ),\n-                        ),\n-                    },\n-                    InlayHint {\n-                        range: 145..185,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"Struct\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                145..185,\n-                            ),\n-                        ),\n-                    },\n-                    InlayHint {\n-                        range: 145..168,\n-                        kind: ChainingHint,\n-                        label: [\n-                            \"Struct\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                145..168,\n-                            ),\n-                        ),\n-                    },\n-                    InlayHint {\n-                        range: 222..228,\n-                        kind: ParameterHint,\n-                        label: [\n-                            \"self\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverOffset(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                42,\n-                            ),\n-                        ),\n-                    },\n-                ]\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn hints_lifetimes() {\n-        check(\n-            r#\"\n-fn empty() {}\n-\n-fn no_gpl(a: &()) {}\n- //^^^^^^<'0>\n-          // ^'0\n-fn empty_gpl<>(a: &()) {}\n-      //    ^'0   ^'0\n-fn partial<'b>(a: &(), b: &'b ()) {}\n-//        ^'0, $  ^'0\n-fn partial<'a>(a: &'a (), b: &()) {}\n-//        ^'0, $             ^'0\n-\n-fn single_ret(a: &()) -> &() {}\n-// ^^^^^^^^^^<'0>\n-              // ^'0     ^'0\n-fn full_mul(a: &(), b: &()) {}\n-// ^^^^^^^^<'0, '1>\n-            // ^'0     ^'1\n-\n-fn foo<'c>(a: &'c ()) -> &() {}\n-                      // ^'c\n-\n-fn nested_in(a: &   &X< &()>) {}\n-// ^^^^^^^^^<'0, '1, '2>\n-              //^'0 ^'1 ^'2\n-fn nested_out(a: &()) -> &   &X< &()>{}\n-// ^^^^^^^^^^<'0>\n-               //^'0     ^'0 ^'0 ^'0\n-\n-impl () {\n-    fn foo(&self) {}\n-    // ^^^<'0>\n-        // ^'0\n-    fn foo(&self) -> &() {}\n-    // ^^^<'0>\n-        // ^'0       ^'0\n-    fn foo(&self, a: &()) -> &() {}\n-    // ^^^<'0, '1>\n-        // ^'0       ^'1     ^'0\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn hints_lifetimes_named() {\n-        check_with_config(\n-            InlayHintsConfig { param_names_for_lifetime_elision_hints: true, ..TEST_CONFIG },\n-            r#\"\n-fn nested_in<'named>(named: &        &X<      &()>) {}\n-//          ^'named1, 'named2, 'named3, $\n-                          //^'named1 ^'named2 ^'named3\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn hints_lifetimes_trivial_skip() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                lifetime_elision_hints: LifetimeElisionHints::SkipTrivial,\n-                ..TEST_CONFIG\n-            },\n-            r#\"\n-fn no_gpl(a: &()) {}\n-fn empty_gpl<>(a: &()) {}\n-fn partial<'b>(a: &(), b: &'b ()) {}\n-fn partial<'a>(a: &'a (), b: &()) {}\n-\n-fn single_ret(a: &()) -> &() {}\n-// ^^^^^^^^^^<'0>\n-              // ^'0     ^'0\n-fn full_mul(a: &(), b: &()) {}\n-\n-fn foo<'c>(a: &'c ()) -> &() {}\n-                      // ^'c\n-\n-fn nested_in(a: &   &X< &()>) {}\n-fn nested_out(a: &()) -> &   &X< &()>{}\n-// ^^^^^^^^^^<'0>\n-               //^'0     ^'0 ^'0 ^'0\n-\n-impl () {\n-    fn foo(&self) {}\n-    fn foo(&self) -> &() {}\n-    // ^^^<'0>\n-        // ^'0       ^'0\n-    fn foo(&self, a: &()) -> &() {}\n-    // ^^^<'0, '1>\n-        // ^'0       ^'1     ^'0\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn hints_lifetimes_static() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                lifetime_elision_hints: LifetimeElisionHints::Always,\n-                ..TEST_CONFIG\n-            },\n-            r#\"\n-trait Trait {}\n-static S: &str = \"\";\n-//        ^'static\n-const C: &str = \"\";\n-//       ^'static\n-const C: &dyn Trait = panic!();\n-//       ^'static\n-\n-impl () {\n-    const C: &str = \"\";\n-    const C: &dyn Trait = panic!();\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn hints_binding_modes() {\n-        check_with_config(\n-            InlayHintsConfig { binding_mode_hints: true, ..DISABLED_CONFIG },\n-            r#\"\n-fn __(\n-    (x,): (u32,),\n-    (x,): &(u32,),\n-  //^^^^&\n-   //^ ref\n-    (x,): &mut (u32,)\n-  //^^^^&mut\n-   //^ ref mut\n-) {\n-    let (x,) = (0,);\n-    let (x,) = &(0,);\n-      //^^^^ &\n-       //^ ref\n-    let (x,) = &mut (0,);\n-      //^^^^ &mut\n-       //^ ref mut\n-    let &mut (x,) = &mut (0,);\n-    let (ref mut x,) = &mut (0,);\n-      //^^^^^^^^^^^^ &mut\n-    let &mut (ref mut x,) = &mut (0,);\n-    let (mut x,) = &mut (0,);\n-      //^^^^^^^^ &mut\n-    match (0,) {\n-        (x,) => ()\n-    }\n-    match &(0,) {\n-        (x,) | (x,) => (),\n-      //^^^^^^^^^^^&\n-       //^ ref\n-              //^ ref\n-      //^^^^^^^^^^^(\n-      //^^^^^^^^^^^)\n-        ((x,) | (x,)) => (),\n-      //^^^^^^^^^^^^^&\n-        //^ ref\n-               //^ ref\n-    }\n-    match &mut (0,) {\n-        (x,) => ()\n-      //^^^^ &mut\n-       //^ ref mut\n-    }\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn hints_closing_brace() {\n-        check_with_config(\n-            InlayHintsConfig { closing_brace_hints_min_lines: Some(2), ..DISABLED_CONFIG },\n-            r#\"\n-fn a() {}\n-\n-fn f() {\n-} // no hint unless `}` is the last token on the line\n-\n-fn g() {\n-  }\n-//^ fn g\n-\n-fn h<T>(with: T, arguments: u8, ...) {\n-  }\n-//^ fn h\n-\n-trait Tr {\n-    fn f();\n-    fn g() {\n-    }\n-  //^ fn g\n-  }\n-//^ trait Tr\n-impl Tr for () {\n-  }\n-//^ impl Tr for ()\n-impl dyn Tr {\n-  }\n-//^ impl dyn Tr\n-\n-static S0: () = 0;\n-static S1: () = {};\n-static S2: () = {\n- };\n-//^ static S2\n-const _: () = {\n- };\n-//^ const _\n-\n-mod m {\n-  }\n-//^ mod m\n-\n-m! {}\n-m!();\n-m!(\n- );\n-//^ m!\n-\n-m! {\n-  }\n-//^ m!\n-\n-fn f() {\n-    let v = vec![\n-    ];\n-  }\n-//^ fn f\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn adjustment_hints() {\n-        check_with_config(\n-            InlayHintsConfig { adjustment_hints: AdjustmentHints::Always, ..DISABLED_CONFIG },\n-            r#\"\n-//- minicore: coerce_unsized\n-fn main() {\n-    let _: u32         = loop {};\n-                       //^^^^^^^<never-to-any>\n-    let _: &u32        = &mut 0;\n-                       //^^^^^^&\n-                       //^^^^^^*\n-    let _: &mut u32    = &mut 0;\n-                       //^^^^^^&mut $\n-                       //^^^^^^*\n-    let _: *const u32  = &mut 0;\n-                       //^^^^^^&raw const $\n-                       //^^^^^^*\n-    let _: *mut u32    = &mut 0;\n-                       //^^^^^^&raw mut $\n-                       //^^^^^^*\n-    let _: fn()        = main;\n-                       //^^^^<fn-item-to-fn-pointer>\n-    let _: unsafe fn() = main;\n-                       //^^^^<safe-fn-pointer-to-unsafe-fn-pointer>\n-                       //^^^^<fn-item-to-fn-pointer>\n-    let _: unsafe fn() = main as fn();\n-                       //^^^^^^^^^^^^<safe-fn-pointer-to-unsafe-fn-pointer>\n-    let _: fn()        = || {};\n-                       //^^^^^<closure-to-fn-pointer>\n-    let _: unsafe fn() = || {};\n-                       //^^^^^<closure-to-unsafe-fn-pointer>\n-    let _: *const u32  = &mut 0u32 as *mut u32;\n-                       //^^^^^^^^^^^^^^^^^^^^^<mut-ptr-to-const-ptr>\n-    let _: &mut [_]    = &mut [0; 0];\n-                       //^^^^^^^^^^^<unsize>\n-                       //^^^^^^^^^^^&mut $\n-                       //^^^^^^^^^^^*\n-\n-    Struct.consume();\n-    Struct.by_ref();\n-  //^^^^^^(\n-  //^^^^^^&\n-  //^^^^^^)\n-    Struct.by_ref_mut();\n-  //^^^^^^(\n-  //^^^^^^&mut $\n-  //^^^^^^)\n-\n-    (&Struct).consume();\n-   //^^^^^^^*\n-    (&Struct).by_ref();\n-\n-    (&mut Struct).consume();\n-   //^^^^^^^^^^^*\n-    (&mut Struct).by_ref();\n-   //^^^^^^^^^^^&\n-   //^^^^^^^^^^^*\n-    (&mut Struct).by_ref_mut();\n-\n-    // Check that block-like expressions don't duplicate hints\n-    let _: &mut [u32] = (&mut []);\n-                       //^^^^^^^<unsize>\n-                       //^^^^^^^&mut $\n-                       //^^^^^^^*\n-    let _: &mut [u32] = { &mut [] };\n-                        //^^^^^^^<unsize>\n-                        //^^^^^^^&mut $\n-                        //^^^^^^^*\n-    let _: &mut [u32] = unsafe { &mut [] };\n-                               //^^^^^^^<unsize>\n-                               //^^^^^^^&mut $\n-                               //^^^^^^^*\n-    let _: &mut [u32] = if true {\n-        &mut []\n-      //^^^^^^^<unsize>\n-      //^^^^^^^&mut $\n-      //^^^^^^^*\n-    } else {\n-        loop {}\n-      //^^^^^^^<never-to-any>\n-    };\n-    let _: &mut [u32] = match () { () => &mut [] }\n-                                       //^^^^^^^<unsize>\n-                                       //^^^^^^^&mut $\n-                                       //^^^^^^^*\n-}\n-\n-#[derive(Copy, Clone)]\n-struct Struct;\n-impl Struct {\n-    fn consume(self) {}\n-    fn by_ref(&self) {}\n-    fn by_ref_mut(&mut self) {}\n-}\n-trait Trait {}\n-impl Trait for Struct {}\n-\"#,\n-        )\n-    }\n }"}, {"sha": "2722e2c8623ef3a78d2d8863829c42edef1c604a", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "patch": "@@ -100,3 +100,112 @@ pub(super) fn hints(\n     }\n     Some(())\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{\n+        inlay_hints::tests::{check_with_config, DISABLED_CONFIG},\n+        AdjustmentHints, InlayHintsConfig,\n+    };\n+\n+    #[test]\n+    fn adjustment_hints() {\n+        check_with_config(\n+            InlayHintsConfig { adjustment_hints: AdjustmentHints::Always, ..DISABLED_CONFIG },\n+            r#\"\n+//- minicore: coerce_unsized\n+fn main() {\n+    let _: u32         = loop {};\n+                       //^^^^^^^<never-to-any>\n+    let _: &u32        = &mut 0;\n+                       //^^^^^^&\n+                       //^^^^^^*\n+    let _: &mut u32    = &mut 0;\n+                       //^^^^^^&mut $\n+                       //^^^^^^*\n+    let _: *const u32  = &mut 0;\n+                       //^^^^^^&raw const $\n+                       //^^^^^^*\n+    let _: *mut u32    = &mut 0;\n+                       //^^^^^^&raw mut $\n+                       //^^^^^^*\n+    let _: fn()        = main;\n+                       //^^^^<fn-item-to-fn-pointer>\n+    let _: unsafe fn() = main;\n+                       //^^^^<safe-fn-pointer-to-unsafe-fn-pointer>\n+                       //^^^^<fn-item-to-fn-pointer>\n+    let _: unsafe fn() = main as fn();\n+                       //^^^^^^^^^^^^<safe-fn-pointer-to-unsafe-fn-pointer>\n+    let _: fn()        = || {};\n+                       //^^^^^<closure-to-fn-pointer>\n+    let _: unsafe fn() = || {};\n+                       //^^^^^<closure-to-unsafe-fn-pointer>\n+    let _: *const u32  = &mut 0u32 as *mut u32;\n+                       //^^^^^^^^^^^^^^^^^^^^^<mut-ptr-to-const-ptr>\n+    let _: &mut [_]    = &mut [0; 0];\n+                       //^^^^^^^^^^^<unsize>\n+                       //^^^^^^^^^^^&mut $\n+                       //^^^^^^^^^^^*\n+\n+    Struct.consume();\n+    Struct.by_ref();\n+  //^^^^^^(\n+  //^^^^^^&\n+  //^^^^^^)\n+    Struct.by_ref_mut();\n+  //^^^^^^(\n+  //^^^^^^&mut $\n+  //^^^^^^)\n+\n+    (&Struct).consume();\n+   //^^^^^^^*\n+    (&Struct).by_ref();\n+\n+    (&mut Struct).consume();\n+   //^^^^^^^^^^^*\n+    (&mut Struct).by_ref();\n+   //^^^^^^^^^^^&\n+   //^^^^^^^^^^^*\n+    (&mut Struct).by_ref_mut();\n+\n+    // Check that block-like expressions don't duplicate hints\n+    let _: &mut [u32] = (&mut []);\n+                       //^^^^^^^<unsize>\n+                       //^^^^^^^&mut $\n+                       //^^^^^^^*\n+    let _: &mut [u32] = { &mut [] };\n+                        //^^^^^^^<unsize>\n+                        //^^^^^^^&mut $\n+                        //^^^^^^^*\n+    let _: &mut [u32] = unsafe { &mut [] };\n+                               //^^^^^^^<unsize>\n+                               //^^^^^^^&mut $\n+                               //^^^^^^^*\n+    let _: &mut [u32] = if true {\n+        &mut []\n+      //^^^^^^^<unsize>\n+      //^^^^^^^&mut $\n+      //^^^^^^^*\n+    } else {\n+        loop {}\n+      //^^^^^^^<never-to-any>\n+    };\n+    let _: &mut [u32] = match () { () => &mut [] }\n+                                       //^^^^^^^<unsize>\n+                                       //^^^^^^^&mut $\n+                                       //^^^^^^^*\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Struct;\n+impl Struct {\n+    fn consume(self) {}\n+    fn by_ref(&self) {}\n+    fn by_ref_mut(&mut self) {}\n+}\n+trait Trait {}\n+impl Trait for Struct {}\n+\"#,\n+        )\n+    }\n+}"}, {"sha": "6a19e83e5bbb65cd7d8d3f9140b2e50ca6a40ef1", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 769, "deletions": 0, "changes": 769, "blob_url": "https://github.com/rust-lang/rust/blob/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "patch": "@@ -185,3 +185,772 @@ fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir\n         false\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    // This module also contains tests for super::closure_ret\n+\n+    use expect_test::expect;\n+    use syntax::{TextRange, TextSize};\n+    use test_utils::extract_annotations;\n+\n+    use crate::{fixture, inlay_hints::InlayHintsConfig};\n+\n+    use crate::inlay_hints::tests::{\n+        check, check_expect, check_with_config, DISABLED_CONFIG, TEST_CONFIG,\n+    };\n+    use crate::ClosureReturnTypeHints;\n+\n+    #[track_caller]\n+    fn check_types(ra_fixture: &str) {\n+        check_with_config(InlayHintsConfig { type_hints: true, ..DISABLED_CONFIG }, ra_fixture);\n+    }\n+\n+    #[test]\n+    fn type_hints_only() {\n+        check_types(\n+            r#\"\n+fn foo(a: i32, b: i32) -> i32 { a + b }\n+fn main() {\n+    let _x = foo(4, 4);\n+      //^^ i32\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn type_hints_bindings_after_at() {\n+        check_types(\n+            r#\"\n+//- minicore: option\n+fn main() {\n+    let ref foo @ bar @ ref mut baz = 0;\n+          //^^^ &i32\n+                //^^^ i32\n+                              //^^^ &mut i32\n+    let [x @ ..] = [0];\n+       //^ [i32; 1]\n+    if let x @ Some(_) = Some(0) {}\n+         //^ Option<i32>\n+    let foo @ (bar, baz) = (3, 3);\n+      //^^^ (i32, i32)\n+             //^^^ i32\n+                  //^^^ i32\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn default_generic_types_should_not_be_displayed() {\n+        check(\n+            r#\"\n+struct Test<K, T = u8> { k: K, t: T }\n+\n+fn main() {\n+    let zz = Test { t: 23u8, k: 33 };\n+      //^^ Test<i32>\n+    let zz_ref = &zz;\n+      //^^^^^^ &Test<i32>\n+    let test = || zz;\n+      //^^^^ || -> Test<i32>\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn shorten_iterators_in_associated_params() {\n+        check_types(\n+            r#\"\n+//- minicore: iterators\n+use core::iter;\n+\n+pub struct SomeIter<T> {}\n+\n+impl<T> SomeIter<T> {\n+    pub fn new() -> Self { SomeIter {} }\n+    pub fn push(&mut self, t: T) {}\n+}\n+\n+impl<T> Iterator for SomeIter<T> {\n+    type Item = T;\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    let mut some_iter = SomeIter::new();\n+          //^^^^^^^^^ SomeIter<Take<Repeat<i32>>>\n+      some_iter.push(iter::repeat(2).take(2));\n+    let iter_of_iters = some_iter.take(2);\n+      //^^^^^^^^^^^^^ impl Iterator<Item = impl Iterator<Item = i32>>\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn iterator_hint_regression_issue_12674() {\n+        // Ensure we don't crash while solving the projection type of iterators.\n+        check_expect(\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+//- minicore: iterators\n+struct S<T>(T);\n+impl<T> S<T> {\n+    fn iter(&self) -> Iter<'_, T> { loop {} }\n+}\n+struct Iter<'a, T: 'a>(&'a T);\n+impl<'a, T> Iterator for Iter<'a, T> {\n+    type Item = &'a T;\n+    fn next(&mut self) -> Option<Self::Item> { loop {} }\n+}\n+struct Container<'a> {\n+    elements: S<&'a str>,\n+}\n+struct SliceIter<'a, T>(&'a T);\n+impl<'a, T> Iterator for SliceIter<'a, T> {\n+    type Item = &'a T;\n+    fn next(&mut self) -> Option<Self::Item> { loop {} }\n+}\n+\n+fn main(a: SliceIter<'_, Container>) {\n+    a\n+    .filter_map(|c| Some(c.elements.iter().filter_map(|v| Some(v))))\n+    .map(|e| e);\n+}\n+            \"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 484..554,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"impl Iterator<Item = impl Iterator<Item = &&str>>\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                484..554,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 484..485,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"SliceIter<Container>\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                484..485,\n+                            ),\n+                        ),\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_call_method_return_associated_types_with_generic() {\n+        check_types(\n+            r#\"\n+            pub trait Default {\n+                fn default() -> Self;\n+            }\n+            pub trait Foo {\n+                type Bar: Default;\n+            }\n+\n+            pub fn quux<T: Foo>() -> T::Bar {\n+                let y = Default::default();\n+                  //^ <T as Foo>::Bar\n+\n+                y\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn fn_hints() {\n+        check_types(\n+            r#\"\n+//- minicore: fn, sized\n+fn foo() -> impl Fn() { loop {} }\n+fn foo1() -> impl Fn(f64) { loop {} }\n+fn foo2() -> impl Fn(f64, f64) { loop {} }\n+fn foo3() -> impl Fn(f64, f64) -> u32 { loop {} }\n+fn foo4() -> &'static dyn Fn(f64, f64) -> u32 { loop {} }\n+fn foo5() -> &'static dyn Fn(&'static dyn Fn(f64, f64) -> u32, f64) -> u32 { loop {} }\n+fn foo6() -> impl Fn(f64, f64) -> u32 + Sized { loop {} }\n+fn foo7() -> *const (impl Fn(f64, f64) -> u32 + Sized) { loop {} }\n+\n+fn main() {\n+    let foo = foo();\n+     // ^^^ impl Fn()\n+    let foo = foo1();\n+     // ^^^ impl Fn(f64)\n+    let foo = foo2();\n+     // ^^^ impl Fn(f64, f64)\n+    let foo = foo3();\n+     // ^^^ impl Fn(f64, f64) -> u32\n+    let foo = foo4();\n+     // ^^^ &dyn Fn(f64, f64) -> u32\n+    let foo = foo5();\n+     // ^^^ &dyn Fn(&dyn Fn(f64, f64) -> u32, f64) -> u32\n+    let foo = foo6();\n+     // ^^^ impl Fn(f64, f64) -> u32\n+    let foo = foo7();\n+     // ^^^ *const impl Fn(f64, f64) -> u32\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn check_hint_range_limit() {\n+        let fixture = r#\"\n+        //- minicore: fn, sized\n+        fn foo() -> impl Fn() { loop {} }\n+        fn foo1() -> impl Fn(f64) { loop {} }\n+        fn foo2() -> impl Fn(f64, f64) { loop {} }\n+        fn foo3() -> impl Fn(f64, f64) -> u32 { loop {} }\n+        fn foo4() -> &'static dyn Fn(f64, f64) -> u32 { loop {} }\n+        fn foo5() -> &'static dyn Fn(&'static dyn Fn(f64, f64) -> u32, f64) -> u32 { loop {} }\n+        fn foo6() -> impl Fn(f64, f64) -> u32 + Sized { loop {} }\n+        fn foo7() -> *const (impl Fn(f64, f64) -> u32 + Sized) { loop {} }\n+\n+        fn main() {\n+            let foo = foo();\n+            let foo = foo1();\n+            let foo = foo2();\n+             // ^^^ impl Fn(f64, f64)\n+            let foo = foo3();\n+             // ^^^ impl Fn(f64, f64) -> u32\n+            let foo = foo4();\n+            let foo = foo5();\n+            let foo = foo6();\n+            let foo = foo7();\n+        }\n+        \"#;\n+        let (analysis, file_id) = fixture::file(fixture);\n+        let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n+        let inlay_hints = analysis\n+            .inlay_hints(\n+                &InlayHintsConfig { type_hints: true, ..DISABLED_CONFIG },\n+                file_id,\n+                Some(TextRange::new(TextSize::from(500), TextSize::from(600))),\n+            )\n+            .unwrap();\n+        let actual =\n+            inlay_hints.into_iter().map(|it| (it.range, it.label.to_string())).collect::<Vec<_>>();\n+        assert_eq!(expected, actual, \"\\nExpected:\\n{:#?}\\n\\nActual:\\n{:#?}\", expected, actual);\n+    }\n+\n+    #[test]\n+    fn fn_hints_ptr_rpit_fn_parentheses() {\n+        check_types(\n+            r#\"\n+//- minicore: fn, sized\n+trait Trait {}\n+\n+fn foo1() -> *const impl Fn() { loop {} }\n+fn foo2() -> *const (impl Fn() + Sized) { loop {} }\n+fn foo3() -> *const (impl Fn() + ?Sized) { loop {} }\n+fn foo4() -> *const (impl Sized + Fn()) { loop {} }\n+fn foo5() -> *const (impl ?Sized + Fn()) { loop {} }\n+fn foo6() -> *const (impl Fn() + Trait) { loop {} }\n+fn foo7() -> *const (impl Fn() + Sized + Trait) { loop {} }\n+fn foo8() -> *const (impl Fn() + ?Sized + Trait) { loop {} }\n+fn foo9() -> *const (impl Fn() -> u8 + ?Sized) { loop {} }\n+fn foo10() -> *const (impl Fn() + Sized + ?Sized) { loop {} }\n+\n+fn main() {\n+    let foo = foo1();\n+    //  ^^^ *const impl Fn()\n+    let foo = foo2();\n+    //  ^^^ *const impl Fn()\n+    let foo = foo3();\n+    //  ^^^ *const (impl Fn() + ?Sized)\n+    let foo = foo4();\n+    //  ^^^ *const impl Fn()\n+    let foo = foo5();\n+    //  ^^^ *const (impl Fn() + ?Sized)\n+    let foo = foo6();\n+    //  ^^^ *const (impl Fn() + Trait)\n+    let foo = foo7();\n+    //  ^^^ *const (impl Fn() + Trait)\n+    let foo = foo8();\n+    //  ^^^ *const (impl Fn() + Trait + ?Sized)\n+    let foo = foo9();\n+    //  ^^^ *const (impl Fn() -> u8 + ?Sized)\n+    let foo = foo10();\n+    //  ^^^ *const impl Fn()\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn unit_structs_have_no_type_hints() {\n+        check_types(\n+            r#\"\n+//- minicore: result\n+struct SyntheticSyntax;\n+\n+fn main() {\n+    match Ok(()) {\n+        Ok(_) => (),\n+        Err(SyntheticSyntax) => (),\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn let_statement() {\n+        check_types(\n+            r#\"\n+#[derive(PartialEq)]\n+enum Option<T> { None, Some(T) }\n+\n+#[derive(PartialEq)]\n+struct Test { a: Option<u32>, b: u8 }\n+\n+fn main() {\n+    struct InnerStruct {}\n+\n+    let test = 54;\n+      //^^^^ i32\n+    let test: i32 = 33;\n+    let mut test = 33;\n+          //^^^^ i32\n+    let _ = 22;\n+    let test = \"test\";\n+      //^^^^ &str\n+    let test = InnerStruct {};\n+      //^^^^ InnerStruct\n+\n+    let test = unresolved();\n+\n+    let test = (42, 'a');\n+      //^^^^ (i32, char)\n+    let (a,    (b,     (c,)) = (2, (3, (9.2,));\n+       //^ i32  ^ i32   ^ f64\n+    let &x = &92;\n+       //^ i32\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn if_expr() {\n+        check_types(\n+            r#\"\n+//- minicore: option\n+struct Test { a: Option<u32>, b: u8 }\n+\n+fn main() {\n+    let test = Some(Test { a: Some(3), b: 1 });\n+      //^^^^ Option<Test>\n+    if let None = &test {};\n+    if let test = &test {};\n+         //^^^^ &Option<Test>\n+    if let Some(test) = &test {};\n+              //^^^^ &Test\n+    if let Some(Test { a,             b }) = &test {};\n+                     //^ &Option<u32> ^ &u8\n+    if let Some(Test { a: x,             b: y }) = &test {};\n+                        //^ &Option<u32>    ^ &u8\n+    if let Some(Test { a: Some(x),  b: y }) = &test {};\n+                             //^ &u32  ^ &u8\n+    if let Some(Test { a: None,  b: y }) = &test {};\n+                                  //^ &u8\n+    if let Some(Test { b: y, .. }) = &test {};\n+                        //^ &u8\n+    if test == None {}\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn while_expr() {\n+        check_types(\n+            r#\"\n+//- minicore: option\n+struct Test { a: Option<u32>, b: u8 }\n+\n+fn main() {\n+    let test = Some(Test { a: Some(3), b: 1 });\n+      //^^^^ Option<Test>\n+    while let Some(Test { a: Some(x),  b: y }) = &test {};\n+                                //^ &u32  ^ &u8\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn match_arm_list() {\n+        check_types(\n+            r#\"\n+//- minicore: option\n+struct Test { a: Option<u32>, b: u8 }\n+\n+fn main() {\n+    match Some(Test { a: Some(3), b: 1 }) {\n+        None => (),\n+        test => (),\n+      //^^^^ Option<Test>\n+        Some(Test { a: Some(x), b: y }) => (),\n+                          //^ u32  ^ u8\n+        _ => {}\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_for_hint() {\n+        check_types(\n+            r#\"\n+//- minicore: iterator\n+pub struct Vec<T> {}\n+\n+impl<T> Vec<T> {\n+    pub fn new() -> Self { Vec {} }\n+    pub fn push(&mut self, t: T) {}\n+}\n+\n+impl<T> IntoIterator for Vec<T> {\n+    type Item = T;\n+    type IntoIter = IntoIter<T>;\n+}\n+\n+struct IntoIter<T> {}\n+\n+impl<T> Iterator for IntoIter<T> {\n+    type Item = T;\n+}\n+\n+fn main() {\n+    let mut data = Vec::new();\n+          //^^^^ Vec<&str>\n+    data.push(\"foo\");\n+    for i in data {\n+      //^ &str\n+      let z = i;\n+        //^ &str\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn multi_dyn_trait_bounds() {\n+        check_types(\n+            r#\"\n+pub struct Vec<T> {}\n+\n+impl<T> Vec<T> {\n+    pub fn new() -> Self { Vec {} }\n+}\n+\n+pub struct Box<T> {}\n+\n+trait Display {}\n+auto trait Sync {}\n+\n+fn main() {\n+    // The block expression wrapping disables the constructor hint hiding logic\n+    let _v = { Vec::<Box<&(dyn Display + Sync)>>::new() };\n+      //^^ Vec<Box<&(dyn Display + Sync)>>\n+    let _v = { Vec::<Box<*const (dyn Display + Sync)>>::new() };\n+      //^^ Vec<Box<*const (dyn Display + Sync)>>\n+    let _v = { Vec::<Box<dyn Display + Sync>>::new() };\n+      //^^ Vec<Box<dyn Display + Sync>>\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn shorten_iterator_hints() {\n+        check_types(\n+            r#\"\n+//- minicore: iterators\n+use core::iter;\n+\n+struct MyIter;\n+\n+impl Iterator for MyIter {\n+    type Item = ();\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    let _x = MyIter;\n+      //^^ MyIter\n+    let _x = iter::repeat(0);\n+      //^^ impl Iterator<Item = i32>\n+    fn generic<T: Clone>(t: T) {\n+        let _x = iter::repeat(t);\n+          //^^ impl Iterator<Item = T>\n+        let _chained = iter::repeat(t).take(10);\n+          //^^^^^^^^ impl Iterator<Item = T>\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn skip_constructor_and_enum_type_hints() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                type_hints: true,\n+                hide_named_constructor_hints: true,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+//- minicore: try, option\n+use core::ops::ControlFlow;\n+\n+mod x {\n+    pub mod y { pub struct Foo; }\n+    pub struct Foo;\n+    pub enum AnotherEnum {\n+        Variant()\n+    };\n+}\n+struct Struct;\n+struct TupleStruct();\n+\n+impl Struct {\n+    fn new() -> Self {\n+        Struct\n+    }\n+    fn try_new() -> ControlFlow<(), Self> {\n+        ControlFlow::Continue(Struct)\n+    }\n+}\n+\n+struct Generic<T>(T);\n+impl Generic<i32> {\n+    fn new() -> Self {\n+        Generic(0)\n+    }\n+}\n+\n+enum Enum {\n+    Variant(u32)\n+}\n+\n+fn times2(value: i32) -> i32 {\n+    2 * value\n+}\n+\n+fn main() {\n+    let enumb = Enum::Variant(0);\n+\n+    let strukt = x::Foo;\n+    let strukt = x::y::Foo;\n+    let strukt = Struct;\n+    let strukt = Struct::new();\n+\n+    let tuple_struct = TupleStruct();\n+\n+    let generic0 = Generic::new();\n+    //  ^^^^^^^^ Generic<i32>\n+    let generic1 = Generic(0);\n+    //  ^^^^^^^^ Generic<i32>\n+    let generic2 = Generic::<i32>::new();\n+    let generic3 = <Generic<i32>>::new();\n+    let generic4 = Generic::<i32>(0);\n+\n+\n+    let option = Some(0);\n+    //  ^^^^^^ Option<i32>\n+    let func = times2;\n+    //  ^^^^ fn times2(i32) -> i32\n+    let closure = |x: i32| x * 2;\n+    //  ^^^^^^^ |i32| -> i32\n+}\n+\n+fn fallible() -> ControlFlow<()> {\n+    let strukt = Struct::try_new()?;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn shows_constructor_type_hints_when_enabled() {\n+        check_types(\n+            r#\"\n+//- minicore: try\n+use core::ops::ControlFlow;\n+\n+struct Struct;\n+struct TupleStruct();\n+\n+impl Struct {\n+    fn new() -> Self {\n+        Struct\n+    }\n+    fn try_new() -> ControlFlow<(), Self> {\n+        ControlFlow::Continue(Struct)\n+    }\n+}\n+\n+struct Generic<T>(T);\n+impl Generic<i32> {\n+    fn new() -> Self {\n+        Generic(0)\n+    }\n+}\n+\n+fn main() {\n+    let strukt = Struct::new();\n+     // ^^^^^^ Struct\n+    let tuple_struct = TupleStruct();\n+     // ^^^^^^^^^^^^ TupleStruct\n+    let generic0 = Generic::new();\n+     // ^^^^^^^^ Generic<i32>\n+    let generic1 = Generic::<i32>::new();\n+     // ^^^^^^^^ Generic<i32>\n+    let generic2 = <Generic<i32>>::new();\n+     // ^^^^^^^^ Generic<i32>\n+}\n+\n+fn fallible() -> ControlFlow<()> {\n+    let strukt = Struct::try_new()?;\n+     // ^^^^^^ Struct\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn closures() {\n+        check(\n+            r#\"\n+fn main() {\n+    let mut start = 0;\n+          //^^^^^ i32\n+    (0..2).for_each(|increment      | { start += increment; });\n+                   //^^^^^^^^^ i32\n+\n+    let multiply =\n+      //^^^^^^^^ |i32, i32| -> i32\n+      | a,     b| a * b\n+      //^ i32  ^ i32\n+\n+    ;\n+\n+    let _: i32 = multiply(1,  2);\n+                        //^ a ^ b\n+    let multiply_ref = &multiply;\n+      //^^^^^^^^^^^^ &|i32, i32| -> i32\n+\n+    let return_42 = || 42;\n+      //^^^^^^^^^ || -> i32\n+      || { 42 };\n+    //^^ i32\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn return_type_hints_for_closure_without_block() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                closure_return_type_hints: ClosureReturnTypeHints::Always,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+fn main() {\n+    let a = || { 0 };\n+          //^^ i32\n+    let b = || 0;\n+          //^^ i32\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn skip_closure_type_hints() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                type_hints: true,\n+                hide_closure_initialization_hints: true,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+//- minicore: fn\n+fn main() {\n+    let multiple_2 = |x: i32| { x * 2 };\n+\n+    let multiple_2 = |x: i32| x * 2;\n+    //  ^^^^^^^^^^ |i32| -> i32\n+\n+    let (not) = (|x: bool| { !x });\n+    //   ^^^ |bool| -> bool\n+\n+    let (is_zero, _b) = (|x: usize| { x == 0 }, false);\n+    //   ^^^^^^^ |usize| -> bool\n+    //            ^^ bool\n+\n+    let plus_one = |x| { x + 1 };\n+    //              ^ u8\n+    foo(plus_one);\n+\n+    let add_mul = bar(|x: u8| { x + 1 });\n+    //  ^^^^^^^ impl FnOnce(u8) -> u8 + ?Sized\n+\n+    let closure = if let Some(6) = add_mul(2).checked_sub(1) {\n+    //  ^^^^^^^ fn(i32) -> i32\n+        |x: i32| { x * 2 }\n+    } else {\n+        |x: i32| { x * 3 }\n+    };\n+}\n+\n+fn foo(f: impl FnOnce(u8) -> u8) {}\n+\n+fn bar(f: impl FnOnce(u8) -> u8) -> impl FnOnce(u8) -> u8 {\n+    move |x: u8| f(x) * 2\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn hint_truncation() {\n+        check_with_config(\n+            InlayHintsConfig { max_length: Some(8), ..TEST_CONFIG },\n+            r#\"\n+struct Smol<T>(T);\n+\n+struct VeryLongOuterName<T>(T);\n+\n+fn main() {\n+    let a = Smol(0u32);\n+      //^ Smol<u32>\n+    let b = VeryLongOuterName(0usize);\n+      //^ VeryLongOuterName<\u2026>\n+    let c = Smol(Smol(0u32))\n+      //^ Smol<Smol<\u2026>>\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "5c675efe80eb2399cad52d82406f3cc1ad61696e", "filename": "crates/ide/src/inlay_hints/binding_mode.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs?ref=1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "patch": "@@ -76,3 +76,62 @@ pub(super) fn hints(\n \n     Some(())\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{\n+        inlay_hints::tests::{check_with_config, DISABLED_CONFIG},\n+        InlayHintsConfig,\n+    };\n+\n+    #[test]\n+    fn hints_binding_modes() {\n+        check_with_config(\n+            InlayHintsConfig { binding_mode_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+fn __(\n+    (x,): (u32,),\n+    (x,): &(u32,),\n+  //^^^^&\n+   //^ ref\n+    (x,): &mut (u32,)\n+  //^^^^&mut\n+   //^ ref mut\n+) {\n+    let (x,) = (0,);\n+    let (x,) = &(0,);\n+      //^^^^ &\n+       //^ ref\n+    let (x,) = &mut (0,);\n+      //^^^^ &mut\n+       //^ ref mut\n+    let &mut (x,) = &mut (0,);\n+    let (ref mut x,) = &mut (0,);\n+      //^^^^^^^^^^^^ &mut\n+    let &mut (ref mut x,) = &mut (0,);\n+    let (mut x,) = &mut (0,);\n+      //^^^^^^^^ &mut\n+    match (0,) {\n+        (x,) => ()\n+    }\n+    match &(0,) {\n+        (x,) | (x,) => (),\n+      //^^^^^^^^^^^&\n+       //^ ref\n+              //^ ref\n+      //^^^^^^^^^^^(\n+      //^^^^^^^^^^^)\n+        ((x,) | (x,)) => (),\n+      //^^^^^^^^^^^^^&\n+        //^ ref\n+               //^ ref\n+    }\n+    match &mut (0,) {\n+        (x,) => ()\n+      //^^^^ &mut\n+       //^ ref mut\n+    }\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "1dd51f5421ad12ce7abbdc11f0464b2fd0f4126a", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 386, "deletions": 0, "changes": 386, "blob_url": "https://github.com/rust-lang/rust/blob/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "patch": "@@ -70,3 +70,389 @@ pub(super) fn hints(\n     }\n     Some(())\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use expect_test::expect;\n+\n+    use crate::{\n+        inlay_hints::tests::{check_expect, check_with_config, DISABLED_CONFIG, TEST_CONFIG},\n+        InlayHintsConfig,\n+    };\n+\n+    #[track_caller]\n+    fn check_chains(ra_fixture: &str) {\n+        check_with_config(InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG }, ra_fixture);\n+    }\n+\n+    #[test]\n+    fn chaining_hints_ignore_comments() {\n+        check_expect(\n+            InlayHintsConfig { type_hints: false, chaining_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+struct A(B);\n+impl A { fn into_b(self) -> B { self.0 } }\n+struct B(C);\n+impl B { fn into_c(self) -> C { self.0 } }\n+struct C;\n+\n+fn main() {\n+    let c = A(B(C))\n+        .into_b() // This is a comment\n+        // This is another comment\n+        .into_c();\n+}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 147..172,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"B\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                147..172,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 147..154,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"A\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                147..154,\n+                            ),\n+                        ),\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn chaining_hints_without_newlines() {\n+        check_chains(\n+            r#\"\n+struct A(B);\n+impl A { fn into_b(self) -> B { self.0 } }\n+struct B(C);\n+impl B { fn into_c(self) -> C { self.0 } }\n+struct C;\n+\n+fn main() {\n+    let c = A(B(C)).into_b().into_c();\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_access_chaining_hints() {\n+        check_expect(\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+struct A { pub b: B }\n+struct B { pub c: C }\n+struct C(pub bool);\n+struct D;\n+\n+impl D {\n+    fn foo(&self) -> i32 { 42 }\n+}\n+\n+fn main() {\n+    let x = A { b: B { c: C(true) } }\n+        .b\n+        .c\n+        .0;\n+    let x = D\n+        .foo();\n+}\"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 143..190,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"C\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                143..190,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 143..179,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"B\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                143..179,\n+                            ),\n+                        ),\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn generic_chaining_hints() {\n+        check_expect(\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+struct A<T>(T);\n+struct B<T>(T);\n+struct C<T>(T);\n+struct X<T,R>(T, R);\n+\n+impl<T> A<T> {\n+    fn new(t: T) -> Self { A(t) }\n+    fn into_b(self) -> B<T> { B(self.0) }\n+}\n+impl<T> B<T> {\n+    fn into_c(self) -> C<T> { C(self.0) }\n+}\n+fn main() {\n+    let c = A::new(X(42, true))\n+        .into_b()\n+        .into_c();\n+}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 246..283,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"B<X<i32, bool>>\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                246..283,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 246..265,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"A<X<i32, bool>>\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                246..265,\n+                            ),\n+                        ),\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn shorten_iterator_chaining_hints() {\n+        check_expect(\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+//- minicore: iterators\n+use core::iter;\n+\n+struct MyIter;\n+\n+impl Iterator for MyIter {\n+    type Item = ();\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    let _x = MyIter.by_ref()\n+        .take(5)\n+        .by_ref()\n+        .take(5)\n+        .by_ref();\n+}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 174..241,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"impl Iterator<Item = ()>\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                174..241,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 174..224,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"impl Iterator<Item = ()>\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                174..224,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 174..206,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"impl Iterator<Item = ()>\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                174..206,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 174..189,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"&mut MyIter\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                174..189,\n+                            ),\n+                        ),\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn hints_in_attr_call() {\n+        check_expect(\n+            TEST_CONFIG,\n+            r#\"\n+//- proc_macros: identity, input_replace\n+struct Struct;\n+impl Struct {\n+    fn chain(self) -> Self {\n+        self\n+    }\n+}\n+#[proc_macros::identity]\n+fn main() {\n+    let strukt = Struct;\n+    strukt\n+        .chain()\n+        .chain()\n+        .chain();\n+    Struct::chain(strukt);\n+}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 124..130,\n+                        kind: TypeHint,\n+                        label: [\n+                            \"Struct\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                124..130,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 145..185,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"Struct\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                145..185,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 145..168,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"Struct\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                145..168,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 222..228,\n+                        kind: ParameterHint,\n+                        label: [\n+                            \"self\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverOffset(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                42,\n+                            ),\n+                        ),\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+}"}, {"sha": "a40c931f4aaf9b3b9b967b9f6fa964bc53ad5a3e", "filename": "crates/ide/src/inlay_hints/closing_brace.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs?ref=1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "patch": "@@ -114,3 +114,75 @@ pub(super) fn hints(\n \n     None\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{\n+        inlay_hints::tests::{check_with_config, DISABLED_CONFIG},\n+        InlayHintsConfig,\n+    };\n+\n+    #[test]\n+    fn hints_closing_brace() {\n+        check_with_config(\n+            InlayHintsConfig { closing_brace_hints_min_lines: Some(2), ..DISABLED_CONFIG },\n+            r#\"\n+fn a() {}\n+\n+fn f() {\n+} // no hint unless `}` is the last token on the line\n+\n+fn g() {\n+  }\n+//^ fn g\n+\n+fn h<T>(with: T, arguments: u8, ...) {\n+  }\n+//^ fn h\n+\n+trait Tr {\n+    fn f();\n+    fn g() {\n+    }\n+  //^ fn g\n+  }\n+//^ trait Tr\n+impl Tr for () {\n+  }\n+//^ impl Tr for ()\n+impl dyn Tr {\n+  }\n+//^ impl dyn Tr\n+\n+static S0: () = 0;\n+static S1: () = {};\n+static S2: () = {\n+ };\n+//^ static S2\n+const _: () = {\n+ };\n+//^ const _\n+\n+mod m {\n+  }\n+//^ mod m\n+\n+m! {}\n+m!();\n+m!(\n+ );\n+//^ m!\n+\n+m! {\n+  }\n+//^ m!\n+\n+fn f() {\n+    let v = vec![\n+    ];\n+  }\n+//^ fn f\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "25a4866fc324f5f813a1f7f67ef6a5090c2c5dfb", "filename": "crates/ide/src/inlay_hints/fn_lifetime_fn.rs", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs?ref=1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "patch": "@@ -188,3 +188,110 @@ pub(super) fn hints(\n     }\n     Some(())\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{\n+        inlay_hints::tests::{check, check_with_config, TEST_CONFIG},\n+        InlayHintsConfig, LifetimeElisionHints,\n+    };\n+\n+    #[test]\n+    fn hints_lifetimes() {\n+        check(\n+            r#\"\n+fn empty() {}\n+\n+fn no_gpl(a: &()) {}\n+ //^^^^^^<'0>\n+          // ^'0\n+fn empty_gpl<>(a: &()) {}\n+      //    ^'0   ^'0\n+fn partial<'b>(a: &(), b: &'b ()) {}\n+//        ^'0, $  ^'0\n+fn partial<'a>(a: &'a (), b: &()) {}\n+//        ^'0, $             ^'0\n+\n+fn single_ret(a: &()) -> &() {}\n+// ^^^^^^^^^^<'0>\n+              // ^'0     ^'0\n+fn full_mul(a: &(), b: &()) {}\n+// ^^^^^^^^<'0, '1>\n+            // ^'0     ^'1\n+\n+fn foo<'c>(a: &'c ()) -> &() {}\n+                      // ^'c\n+\n+fn nested_in(a: &   &X< &()>) {}\n+// ^^^^^^^^^<'0, '1, '2>\n+              //^'0 ^'1 ^'2\n+fn nested_out(a: &()) -> &   &X< &()>{}\n+// ^^^^^^^^^^<'0>\n+               //^'0     ^'0 ^'0 ^'0\n+\n+impl () {\n+    fn foo(&self) {}\n+    // ^^^<'0>\n+        // ^'0\n+    fn foo(&self) -> &() {}\n+    // ^^^<'0>\n+        // ^'0       ^'0\n+    fn foo(&self, a: &()) -> &() {}\n+    // ^^^<'0, '1>\n+        // ^'0       ^'1     ^'0\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn hints_lifetimes_named() {\n+        check_with_config(\n+            InlayHintsConfig { param_names_for_lifetime_elision_hints: true, ..TEST_CONFIG },\n+            r#\"\n+fn nested_in<'named>(named: &        &X<      &()>) {}\n+//          ^'named1, 'named2, 'named3, $\n+                          //^'named1 ^'named2 ^'named3\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn hints_lifetimes_trivial_skip() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                lifetime_elision_hints: LifetimeElisionHints::SkipTrivial,\n+                ..TEST_CONFIG\n+            },\n+            r#\"\n+fn no_gpl(a: &()) {}\n+fn empty_gpl<>(a: &()) {}\n+fn partial<'b>(a: &(), b: &'b ()) {}\n+fn partial<'a>(a: &'a (), b: &()) {}\n+\n+fn single_ret(a: &()) -> &() {}\n+// ^^^^^^^^^^<'0>\n+              // ^'0     ^'0\n+fn full_mul(a: &(), b: &()) {}\n+\n+fn foo<'c>(a: &'c ()) -> &() {}\n+                      // ^'c\n+\n+fn nested_in(a: &   &X< &()>) {}\n+fn nested_out(a: &()) -> &   &X< &()>{}\n+// ^^^^^^^^^^<'0>\n+               //^'0     ^'0 ^'0 ^'0\n+\n+impl () {\n+    fn foo(&self) {}\n+    fn foo(&self) -> &() {}\n+    // ^^^<'0>\n+        // ^'0       ^'0\n+    fn foo(&self, a: &()) -> &() {}\n+    // ^^^<'0, '1>\n+        // ^'0       ^'1     ^'0\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "299230db8d7a62c1bc2d5bd1ef516f0a30613523", "filename": "crates/ide/src/inlay_hints/implicit_static.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs?ref=1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "patch": "@@ -37,3 +37,35 @@ pub(super) fn hints(\n \n     Some(())\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{\n+        inlay_hints::tests::{check_with_config, TEST_CONFIG},\n+        InlayHintsConfig, LifetimeElisionHints,\n+    };\n+\n+    #[test]\n+    fn hints_lifetimes_static() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                lifetime_elision_hints: LifetimeElisionHints::Always,\n+                ..TEST_CONFIG\n+            },\n+            r#\"\n+trait Trait {}\n+static S: &str = \"\";\n+//        ^'static\n+const C: &str = \"\";\n+//       ^'static\n+const C: &dyn Trait = panic!();\n+//       ^'static\n+\n+impl () {\n+    const C: &str = \"\";\n+    const C: &dyn Trait = panic!();\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "c16ae5936b5e7a46600487b29269d8bc07b9d1da", "filename": "crates/ide/src/inlay_hints/param_name.rs", "status": "modified", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8bcf0d4ee6b30e0899f920c452c77dca63b49a/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs?ref=1c8bcf0d4ee6b30e0899f920c452c77dca63b49a", "patch": "@@ -235,3 +235,307 @@ fn is_adt_constructor_similar_to_param_name(\n     })()\n     .unwrap_or(false)\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{\n+        inlay_hints::tests::{check_with_config, DISABLED_CONFIG},\n+        InlayHintsConfig,\n+    };\n+\n+    #[track_caller]\n+    fn check_params(ra_fixture: &str) {\n+        check_with_config(\n+            InlayHintsConfig { parameter_hints: true, ..DISABLED_CONFIG },\n+            ra_fixture,\n+        );\n+    }\n+\n+    #[test]\n+    fn param_hints_only() {\n+        check_params(\n+            r#\"\n+fn foo(a: i32, b: i32) -> i32 { a + b }\n+fn main() {\n+    let _x = foo(\n+        4,\n+      //^ a\n+        4,\n+      //^ b\n+    );\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn param_hints_on_closure() {\n+        check_params(\n+            r#\"\n+fn main() {\n+    let clo = |a: u8, b: u8| a + b;\n+    clo(\n+        1,\n+      //^ a\n+        2,\n+      //^ b\n+    );\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn param_name_similar_to_fn_name_still_hints() {\n+        check_params(\n+            r#\"\n+fn max(x: i32, y: i32) -> i32 { x + y }\n+fn main() {\n+    let _x = max(\n+        4,\n+      //^ x\n+        4,\n+      //^ y\n+    );\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn param_name_similar_to_fn_name() {\n+        check_params(\n+            r#\"\n+fn param_with_underscore(with_underscore: i32) -> i32 { with_underscore }\n+fn main() {\n+    let _x = param_with_underscore(\n+        4,\n+    );\n+}\"#,\n+        );\n+        check_params(\n+            r#\"\n+fn param_with_underscore(underscore: i32) -> i32 { underscore }\n+fn main() {\n+    let _x = param_with_underscore(\n+        4,\n+    );\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn param_name_same_as_fn_name() {\n+        check_params(\n+            r#\"\n+fn foo(foo: i32) -> i32 { foo }\n+fn main() {\n+    let _x = foo(\n+        4,\n+    );\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn never_hide_param_when_multiple_params() {\n+        check_params(\n+            r#\"\n+fn foo(foo: i32, bar: i32) -> i32 { bar + baz }\n+fn main() {\n+    let _x = foo(\n+        4,\n+      //^ foo\n+        8,\n+      //^ bar\n+    );\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn param_hints_look_through_as_ref_and_clone() {\n+        check_params(\n+            r#\"\n+fn foo(bar: i32, baz: f32) {}\n+\n+fn main() {\n+    let bar = 3;\n+    let baz = &\"baz\";\n+    let fez = 1.0;\n+    foo(bar.clone(), bar.clone());\n+                   //^^^^^^^^^^^ baz\n+    foo(bar.as_ref(), bar.as_ref());\n+                    //^^^^^^^^^^^^ baz\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn self_param_hints() {\n+        check_params(\n+            r#\"\n+struct Foo;\n+\n+impl Foo {\n+    fn foo(self: Self) {}\n+    fn bar(self: &Self) {}\n+}\n+\n+fn main() {\n+    Foo::foo(Foo);\n+           //^^^ self\n+    Foo::bar(&Foo);\n+           //^^^^ self\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn param_name_hints_show_for_literals() {\n+        check_params(\n+            r#\"pub fn test(a: i32, b: i32) -> [i32; 2] { [a, b] }\n+fn main() {\n+    test(\n+        0xa_b,\n+      //^^^^^ a\n+        0xa_b,\n+      //^^^^^ b\n+    );\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn function_call_parameter_hint() {\n+        check_params(\n+            r#\"\n+//- minicore: option\n+struct FileId {}\n+struct SmolStr {}\n+\n+struct TextRange {}\n+struct SyntaxKind {}\n+struct NavigationTarget {}\n+\n+struct Test {}\n+\n+impl Test {\n+    fn method(&self, mut param: i32) -> i32 { param * 2 }\n+\n+    fn from_syntax(\n+        file_id: FileId,\n+        name: SmolStr,\n+        focus_range: Option<TextRange>,\n+        full_range: TextRange,\n+        kind: SyntaxKind,\n+        docs: Option<String>,\n+    ) -> NavigationTarget {\n+        NavigationTarget {}\n+    }\n+}\n+\n+fn test_func(mut foo: i32, bar: i32, msg: &str, _: i32, last: i32) -> i32 {\n+    foo + bar\n+}\n+\n+fn main() {\n+    let not_literal = 1;\n+    let _: i32 = test_func(1,    2,      \"hello\", 3,  not_literal);\n+                         //^ foo ^ bar   ^^^^^^^ msg  ^^^^^^^^^^^ last\n+    let t: Test = Test {};\n+    t.method(123);\n+           //^^^ param\n+    Test::method(&t,      3456);\n+               //^^ self  ^^^^ param\n+    Test::from_syntax(\n+        FileId {},\n+        \"impl\".into(),\n+      //^^^^^^^^^^^^^ name\n+        None,\n+      //^^^^ focus_range\n+        TextRange {},\n+      //^^^^^^^^^^^^ full_range\n+        SyntaxKind {},\n+      //^^^^^^^^^^^^^ kind\n+        None,\n+      //^^^^ docs\n+    );\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn parameter_hint_heuristics() {\n+        check_params(\n+            r#\"\n+fn check(ra_fixture_thing: &str) {}\n+\n+fn map(f: i32) {}\n+fn filter(predicate: i32) {}\n+\n+fn strip_suffix(suffix: &str) {}\n+fn stripsuffix(suffix: &str) {}\n+fn same(same: u32) {}\n+fn same2(_same2: u32) {}\n+\n+fn enum_matches_param_name(completion_kind: CompletionKind) {}\n+\n+fn foo(param: u32) {}\n+fn bar(param_eter: u32) {}\n+\n+enum CompletionKind {\n+    Keyword,\n+}\n+\n+fn non_ident_pat((a, b): (u32, u32)) {}\n+\n+fn main() {\n+    const PARAM: u32 = 0;\n+    foo(PARAM);\n+    foo(!PARAM);\n+     // ^^^^^^ param\n+    check(\"\");\n+\n+    map(0);\n+    filter(0);\n+\n+    strip_suffix(\"\");\n+    stripsuffix(\"\");\n+              //^^ suffix\n+    same(0);\n+    same2(0);\n+\n+    enum_matches_param_name(CompletionKind::Keyword);\n+\n+    let param = 0;\n+    foo(param);\n+    foo(param as _);\n+    let param_end = 0;\n+    foo(param_end);\n+    let start_param = 0;\n+    foo(start_param);\n+    let param2 = 0;\n+    foo(param2);\n+      //^^^^^^ param\n+\n+    macro_rules! param {\n+        () => {};\n+    };\n+    foo(param!());\n+\n+    let param_eter = 0;\n+    bar(param_eter);\n+    let param_eter_end = 0;\n+    bar(param_eter_end);\n+    let start_param_eter = 0;\n+    bar(start_param_eter);\n+    let param_eter2 = 0;\n+    bar(param_eter2);\n+      //^^^^^^^^^^^ param_eter\n+\n+    non_ident_pat((0, 0));\n+}\"#,\n+        );\n+    }\n+}"}]}