{"sha": "33ded3ec7f5dbc133f9371b101310ea606663762", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZGVkM2VjN2Y1ZGJjMTMzZjkzNzFiMTAxMzEwZWE2MDY2NjM3NjI=", "commit": {"author": {"name": "Daniel Silverstone", "email": "dsilvers@digital-scurf.org", "date": "2019-11-07T23:53:56Z"}, "committer": {"name": "Daniel Silverstone", "email": "dsilvers@digital-scurf.org", "date": "2019-11-08T07:41:40Z"}, "message": "rustdoc: Deliberately load extern crates before processing docs\n\nIn order that we can successfully later resolve paths in crates\nwhich weren't loaded as a result of merely parsing the crate\nwe're documenting, we force the resolution of the path to each\ncrate before cloning the resolver to use later.  Closes #66159\n\nSigned-off-by: Daniel Silverstone <dsilvers@digital-scurf.org>", "tree": {"sha": "eb0ba3cf2e4c4f889127ac247f1c6b109b86f315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb0ba3cf2e4c4f889127ac247f1c6b109b86f315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33ded3ec7f5dbc133f9371b101310ea606663762", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFPBAABCgA5FiEEbMzlsXMGvNwXnPlUww30OfKYfXQFAl3FHDQbHGRzaWx2ZXJz\nQGRpZ2l0YWwtc2N1cmYub3JnAAoJEMMN9DnymH10CtoH/33cwervJY88/Kxbs47G\nnzKW7v/yeKmQG+oE9eaSXC/oPPdsAUS35gGNwyPaRkdGBGcKGOA4I2hy0P309z1u\nNgaS5CXjlMjgZoz+4z3y485cgumfSmB+ufN7pPBqah2aVpCn0CGWCMQL/fsdFbzd\ndLMq3FxXSIVpOogU3ctQnOSJeziwqKdN0P3E+N+KCrLt7sfTt0BnF5GkNo3eDnf5\neZfvKE4zR/WVboM5Ex1r7/YWKUyCwv3Z9apNkZuYoYN/roJen1CxsDraDE/FtSfN\nWPydyNvvyia2ezf8ooPhCxzN0x34Ob/8h1ZPC3F3U7MLE2qvFMVZOqOknwXMcgkN\nVx0=\n=XpKm\n-----END PGP SIGNATURE-----", "payload": "tree eb0ba3cf2e4c4f889127ac247f1c6b109b86f315\nparent 2c33568a77cf308c91129e0f0a4d4d53f1689ebb\nauthor Daniel Silverstone <dsilvers@digital-scurf.org> 1573170836 +0000\ncommitter Daniel Silverstone <dsilvers@digital-scurf.org> 1573198900 +0000\n\nrustdoc: Deliberately load extern crates before processing docs\n\nIn order that we can successfully later resolve paths in crates\nwhich weren't loaded as a result of merely parsing the crate\nwe're documenting, we force the resolution of the path to each\ncrate before cloning the resolver to use later.  Closes #66159\n\nSigned-off-by: Daniel Silverstone <dsilvers@digital-scurf.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33ded3ec7f5dbc133f9371b101310ea606663762", "html_url": "https://github.com/rust-lang/rust/commit/33ded3ec7f5dbc133f9371b101310ea606663762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33ded3ec7f5dbc133f9371b101310ea606663762/comments", "author": {"login": "kinnison", "id": 1469421, "node_id": "MDQ6VXNlcjE0Njk0MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1469421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kinnison", "html_url": "https://github.com/kinnison", "followers_url": "https://api.github.com/users/kinnison/followers", "following_url": "https://api.github.com/users/kinnison/following{/other_user}", "gists_url": "https://api.github.com/users/kinnison/gists{/gist_id}", "starred_url": "https://api.github.com/users/kinnison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kinnison/subscriptions", "organizations_url": "https://api.github.com/users/kinnison/orgs", "repos_url": "https://api.github.com/users/kinnison/repos", "events_url": "https://api.github.com/users/kinnison/events{/privacy}", "received_events_url": "https://api.github.com/users/kinnison/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kinnison", "id": 1469421, "node_id": "MDQ6VXNlcjE0Njk0MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1469421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kinnison", "html_url": "https://github.com/kinnison", "followers_url": "https://api.github.com/users/kinnison/followers", "following_url": "https://api.github.com/users/kinnison/following{/other_user}", "gists_url": "https://api.github.com/users/kinnison/gists{/gist_id}", "starred_url": "https://api.github.com/users/kinnison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kinnison/subscriptions", "organizations_url": "https://api.github.com/users/kinnison/orgs", "repos_url": "https://api.github.com/users/kinnison/repos", "events_url": "https://api.github.com/users/kinnison/events{/privacy}", "received_events_url": "https://api.github.com/users/kinnison/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c33568a77cf308c91129e0f0a4d4d53f1689ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c33568a77cf308c91129e0f0a4d4d53f1689ebb", "html_url": "https://github.com/rust-lang/rust/commit/2c33568a77cf308c91129e0f0a4d4d53f1689ebb"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "6047d3f2753b8162703857330685141654b9c520", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/33ded3ec7f5dbc133f9371b101310ea606663762/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ded3ec7f5dbc133f9371b101310ea606663762/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=33ded3ec7f5dbc133f9371b101310ea606663762", "patch": "@@ -1,5 +1,6 @@\n use rustc_lint;\n use rustc::session::{self, config};\n+use rustc::hir::def::Namespace::TypeNS;\n use rustc::hir::def_id::{DefId, DefIndex, CrateNum, LOCAL_CRATE};\n use rustc::hir::HirId;\n use rustc::middle::cstore::CrateStore;\n@@ -13,11 +14,13 @@ use rustc_interface::interface;\n use rustc_driver::abort_on_err;\n use rustc_resolve as resolve;\n \n+use syntax::ast::CRATE_NODE_ID;\n use syntax::source_map;\n use syntax::attr;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::json::JsonEmitter;\n use syntax::symbol::sym;\n+use syntax_pos::DUMMY_SP;\n use errors;\n use errors::emitter::{Emitter, EmitterWriter};\n \n@@ -246,6 +249,8 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         ..\n     } = options;\n \n+    let extern_names: Vec<String> = externs.iter().map(|(s,_)| s).cloned().collect();\n+\n     // Add the rustdoc cfg into the doc build.\n     cfgs.push(\"rustdoc\".to_string());\n \n@@ -343,7 +348,25 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         // We need to hold on to the complete resolver, so we cause everything to be\n         // cloned for the analysis passes to use. Suboptimal, but necessary in the\n         // current architecture.\n-        let resolver = abort_on_err(compiler.expansion(), sess).peek().1.borrow().clone();\n+        let resolver = {\n+            let parts = abort_on_err(compiler.expansion(), sess).peek();\n+            let resolver = parts.1.borrow();\n+\n+            // Before we actually clone it, let's force all the extern'd crates to\n+            // actually be loaded, just in case they're only referred to inside\n+            // intra-doc-links\n+            resolver.borrow_mut().access(|resolver| {\n+                for extern_name in &extern_names {\n+                    resolver.resolve_str_path_error(DUMMY_SP, extern_name, TypeNS, CRATE_NODE_ID)\n+                        .unwrap_or_else(\n+                            |()| panic!(\"Unable to resolve external crate {}\", extern_name)\n+                        );\n+                }\n+            });\n+\n+            // Now we're good to clone the resolver because everything should be loaded\n+            resolver.clone()\n+        };\n \n         if sess.has_errors() {\n             sess.fatal(\"Compilation failed, aborting rustdoc\");"}, {"sha": "2f3d069bd51c36665d483943ee79d60dded77367", "filename": "src/test/rustdoc/auxiliary/issue-66159-1.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ded3ec7f5dbc133f9371b101310ea606663762/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ded3ec7f5dbc133f9371b101310ea606663762/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs?ref=33ded3ec7f5dbc133f9371b101310ea606663762", "patch": "@@ -0,0 +1,2 @@\n+/// This will be referred to by the test docstring\n+pub struct Something;"}, {"sha": "88eca7338707c27746afe4d5799e7fb5fd6d839e", "filename": "src/test/rustdoc/issue-66159.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33ded3ec7f5dbc133f9371b101310ea606663762/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ded3ec7f5dbc133f9371b101310ea606663762/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-66159.rs?ref=33ded3ec7f5dbc133f9371b101310ea606663762", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:issue-66159-1.rs\n+// extern-private:issue_66159_1\n+\n+// The issue was an ICE which meant that we never actually generated the docs\n+// so if we have generated the docs, we're okay.\n+// Since we don't generate the docs for the auxilliary files, we can't actually\n+// verify that the struct is linked correctly.\n+\n+// @has issue_66159/index.html\n+//! [issue_66159_1::Something]"}]}