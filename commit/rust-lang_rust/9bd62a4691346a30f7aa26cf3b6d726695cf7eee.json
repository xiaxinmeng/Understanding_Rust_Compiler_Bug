{"sha": "9bd62a4691346a30f7aa26cf3b6d726695cf7eee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZDYyYTQ2OTEzNDZhMzBmN2FhMjZjZjNiNmQ3MjY2OTVjZjdlZWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-08-09T16:57:28Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-08-09T17:48:33Z"}, "message": "Readd backticks around ()", "tree": {"sha": "e10611de55fe4b5248200a3f11fb9c3190a20bb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e10611de55fe4b5248200a3f11fb9c3190a20bb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bd62a4691346a30f7aa26cf3b6d726695cf7eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd62a4691346a30f7aa26cf3b6d726695cf7eee", "html_url": "https://github.com/rust-lang/rust/commit/9bd62a4691346a30f7aa26cf3b6d726695cf7eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bd62a4691346a30f7aa26cf3b6d726695cf7eee/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fcdb8ba723a46a1c036c99c6a503f39a0667156", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcdb8ba723a46a1c036c99c6a503f39a0667156", "html_url": "https://github.com/rust-lang/rust/commit/3fcdb8ba723a46a1c036c99c6a503f39a0667156"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "8e363eee24d4526a761a5026751fa0b0f62cd074", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9bd62a4691346a30f7aa26cf3b6d726695cf7eee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd62a4691346a30f7aa26cf3b6d726695cf7eee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9bd62a4691346a30f7aa26cf3b6d726695cf7eee", "patch": "@@ -95,7 +95,7 @@ use rustc::middle::region::CodeExtent;\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits::{self, FulfillmentContext, ObligationCause, ObligationCauseCode};\n use rustc::ty::{ParamTy, LvaluePreference, NoPreference, PreferMutLvalue};\n-use rustc::ty::{self, Ty, TyCtxt, Visibility, TypeVariants};\n+use rustc::ty::{self, Ty, TyCtxt, Visibility};\n use rustc::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc::ty::fold::{BottomUpFolder, TypeFoldable};\n use rustc::ty::maps::Providers;\n@@ -4315,7 +4315,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n             (&hir::FunctionRetTy::DefaultReturn(span), _, _) => {\n                 // `fn main()` must return `()`, do not suggest changing return type\n-                err.span_label(span, \"expected () because of default return type\");\n+                err.span_label(span, \"expected `()` because of default return type\");\n             }\n             (&hir::FunctionRetTy::Return(ref ty), _, _) => {\n                 // Only point to return type if the expected type is the return type, as if they\n@@ -4326,19 +4326,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 debug!(\"suggest_missing_return_type: return type sty {:?}\", ty.sty);\n                 debug!(\"suggest_missing_return_type: expected type sty {:?}\", ty.sty);\n                 if ty.sty == expected.sty {\n-                    let quote = if let TypeVariants::TyTuple(ref slice, _) = expected.sty {\n-                        if slice.len() == 0 {  // don't use backtics for ()\n-                            \"\"\n-                        } else {\n-                            \"`\"\n-                        }\n-                    } else {\n-                        \"`\"\n-                    };\n-                    err.span_label(sp, format!(\"expected {}{}{} because of return type\",\n-                                               quote,\n-                                               expected,\n-                                               quote));\n+                    err.span_label(sp, format!(\"expected `{}` because of return type\",\n+                                               expected));\n                 }\n             }\n         }"}, {"sha": "20c7dc416f3bb339851af79389f335581b014b89", "filename": "src/test/ui/block-result/block-must-not-have-result-res.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bd62a4691346a30f7aa26cf3b6d726695cf7eee/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bd62a4691346a30f7aa26cf3b6d726695cf7eee/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr?ref=9bd62a4691346a30f7aa26cf3b6d726695cf7eee", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-res.rs:15:9\n    |\n 14 |     fn drop(&mut self) {\n-   |                        - expected () because of default return type\n+   |                        - expected `()` because of default return type\n 15 |         true //~  ERROR mismatched types\n    |         ^^^^ expected (), found bool\n    |"}, {"sha": "cd8c28cd2cfa8eb0716d78ff675ff7b63b7b819e", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bd62a4691346a30f7aa26cf3b6d726695cf7eee/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bd62a4691346a30f7aa26cf3b6d726695cf7eee/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=9bd62a4691346a30f7aa26cf3b6d726695cf7eee", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:17:5\n    |\n 16 |   pub fn get_enum_struct_variant() -> () {\n-   |                                       -- expected () because of return type\n+   |                                       -- expected `()` because of return type\n 17 |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n    |"}, {"sha": "c6113ae0c9f6016a6f518dd53be2d2c013601af3", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bd62a4691346a30f7aa26cf3b6d726695cf7eee/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bd62a4691346a30f7aa26cf3b6d726695cf7eee/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=9bd62a4691346a30f7aa26cf3b6d726695cf7eee", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-22645.rs:25:3\n    |\n 23 | fn main() {\n-   |           - expected () because of default return type\n+   |           - expected `()` because of default return type\n 24 |   let b = Bob + 3.5;\n 25 |   b + 3 //~ ERROR E0277\n    |   ^^^^^ expected (), found struct `Bob`"}, {"sha": "29dbd5a8cf5999db93ca037d544dd2510f7ba668", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bd62a4691346a30f7aa26cf3b6d726695cf7eee/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bd62a4691346a30f7aa26cf3b6d726695cf7eee/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=9bd62a4691346a30f7aa26cf3b6d726695cf7eee", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-5500.rs:12:5\n    |\n 11 | fn main() {\n-   |           - expected () because of default return type\n+   |           - expected `()` because of default return type\n 12 |     &panic!()\n    |     ^^^^^^^^^ expected (), found reference\n    |"}]}