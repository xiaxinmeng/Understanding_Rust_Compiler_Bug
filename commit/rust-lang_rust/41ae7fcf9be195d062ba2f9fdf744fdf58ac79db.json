{"sha": "41ae7fcf9be195d062ba2f9fdf744fdf58ac79db", "node_id": "C_kwDOAAsO6NoAKDQxYWU3ZmNmOWJlMTk1ZDA2MmJhMmY5ZmRmNzQ0ZmRmNThhYzc5ZGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-18T04:44:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-18T04:44:46Z"}, "message": "Rollup merge of #110409 - Nilstrieb:some-manual-javascript-object-notationing, r=fee1-dead\n\nDon't use `serde_json` to serialize a simple JSON object\n\nThis avoids `rustc_data_structures` depending on `serde_json` which allows it to be compiled much earlier, unlocking most of rustc.\n\nThis used to not matter, but after #110407 we're not blocked on fluent anymore, which means that it's now a blocking edge.\n![image](https://user-images.githubusercontent.com/48135649/232313178-e0150420-3020-4eb6-98d3-fe5294a8f947.png)\n\nThis saves a few more seconds.\n\ncc ````@Zoxc```` who added it recently", "tree": {"sha": "bc7805014b7129978e92f83763a53d6fac5973b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc7805014b7129978e92f83763a53d6fac5973b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkPiA+CRBK7hj4Ov3rIwAA6n4IAIYsvaGSAtSJfkfq+r/BivSH\n2tXqhnRnnGPwRLiERFi2jrI/n9RLkua3O+w1aeNcpND5vyJargiu6zLec6Lw+H1i\nPuWJNYrXKxcqrIB69YOdHZt9o8/oCMR6zg/eQA1Ai2yP5TZJzljj2mcQOUkfoDof\nP07bXnlFTHIr/nbQmmBz66Lg8mj5xvMY2C7f4ermwfq1TgNOdm5NBJYWVjKVZKGL\na0R+A0Gq4rTPQ/85I1HL2dQAQPP6qaPJVPBCq6j6Z4xIxQ02ZAChZFnd7Lj9v/Xg\n5GkMuXzPVngQx6jWiR38h+K86Fz37cLKfGFnee8cHJ0q5ijroANBhWB2XsYljso=\n=ka14\n-----END PGP SIGNATURE-----\n", "payload": "tree bc7805014b7129978e92f83763a53d6fac5973b5\nparent afea84f99c8c9a7bb7c7afb22bc1d5aceceb1a8d\nparent 7859a8e9a55725bd19636baa8d2a1a99b76689bf\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681793086 +0200\ncommitter GitHub <noreply@github.com> 1681793086 +0200\n\nRollup merge of #110409 - Nilstrieb:some-manual-javascript-object-notationing, r=fee1-dead\n\nDon't use `serde_json` to serialize a simple JSON object\n\nThis avoids `rustc_data_structures` depending on `serde_json` which allows it to be compiled much earlier, unlocking most of rustc.\n\nThis used to not matter, but after #110407 we're not blocked on fluent anymore, which means that it's now a blocking edge.\n![image](https://user-images.githubusercontent.com/48135649/232313178-e0150420-3020-4eb6-98d3-fe5294a8f947.png)\n\nThis saves a few more seconds.\n\ncc ````@Zoxc```` who added it recently\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db", "html_url": "https://github.com/rust-lang/rust/commit/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afea84f99c8c9a7bb7c7afb22bc1d5aceceb1a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/afea84f99c8c9a7bb7c7afb22bc1d5aceceb1a8d", "html_url": "https://github.com/rust-lang/rust/commit/afea84f99c8c9a7bb7c7afb22bc1d5aceceb1a8d"}, {"sha": "7859a8e9a55725bd19636baa8d2a1a99b76689bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7859a8e9a55725bd19636baa8d2a1a99b76689bf", "html_url": "https://github.com/rust-lang/rust/commit/7859a8e9a55725bd19636baa8d2a1a99b76689bf"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "da2e483fe61b2be1ac8a79b5334a8b86f36f927b", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=41ae7fcf9be195d062ba2f9fdf744fdf58ac79db", "patch": "@@ -3181,7 +3181,6 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n- \"serde_json\",\n  \"smallvec\",\n  \"stable_deref_trait\",\n  \"stacker\","}, {"sha": "39f4bc63c88d1accb807c874f7ddfac794c65bb1", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=41ae7fcf9be195d062ba2f9fdf744fdf58ac79db", "patch": "@@ -21,7 +21,6 @@ rustc-hash = \"1.1.0\"\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n-serde_json = \"1.0.59\"\n smallvec = { version = \"1.8.1\", features = [\n     \"const_generics\",\n     \"union\","}, {"sha": "8fa1ac70a78c0533c395c2c1a5f981e8883eb9bf", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=41ae7fcf9be195d062ba2f9fdf744fdf58ac79db", "patch": "@@ -87,6 +87,7 @@ use crate::fx::FxHashMap;\n use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n use std::error::Error;\n+use std::fmt::Display;\n use std::fs;\n use std::intrinsics::unlikely;\n use std::path::Path;\n@@ -97,7 +98,6 @@ use std::time::{Duration, Instant};\n pub use measureme::EventId;\n use measureme::{EventIdBuilder, Profiler, SerializableString, StringId};\n use parking_lot::RwLock;\n-use serde_json::json;\n use smallvec::SmallVec;\n \n bitflags::bitflags! {\n@@ -763,6 +763,31 @@ impl Drop for VerboseTimingGuard<'_> {\n     }\n }\n \n+struct JsonTimePassesEntry<'a> {\n+    pass: &'a str,\n+    time: f64,\n+    start_rss: Option<usize>,\n+    end_rss: Option<usize>,\n+}\n+\n+impl Display for JsonTimePassesEntry<'_> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        let Self { pass: what, time, start_rss, end_rss } = self;\n+        write!(f, r#\"{{\"pass\":\"{what}\",\"time\":{time},\"rss_start\":\"#).unwrap();\n+        match start_rss {\n+            Some(rss) => write!(f, \"{rss}\")?,\n+            None => write!(f, \"null\")?,\n+        }\n+        write!(f, r#\",\"rss_end\":\"#)?;\n+        match end_rss {\n+            Some(rss) => write!(f, \"{rss}\")?,\n+            None => write!(f, \"null\")?,\n+        }\n+        write!(f, \"}}\")?;\n+        Ok(())\n+    }\n+}\n+\n pub fn print_time_passes_entry(\n     what: &str,\n     dur: Duration,\n@@ -772,13 +797,10 @@ pub fn print_time_passes_entry(\n ) {\n     match format {\n         TimePassesFormat::Json => {\n-            let json = json!({\n-                \"pass\": what,\n-                \"time\": dur.as_secs_f64(),\n-                \"rss_start\": start_rss,\n-                \"rss_end\": end_rss,\n-            });\n-            eprintln!(\"time: {json}\");\n+            let entry =\n+                JsonTimePassesEntry { pass: what, time: dur.as_secs_f64(), start_rss, end_rss };\n+\n+            eprintln!(r#\"time: {entry}\"#);\n             return;\n         }\n         TimePassesFormat::Text => (),\n@@ -894,3 +916,6 @@ cfg_if! {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "2b09de085da061a752a1c9c0085e2f65082dc899", "filename": "compiler/rustc_data_structures/src/profiling/tests.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ae7fcf9be195d062ba2f9fdf744fdf58ac79db/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling%2Ftests.rs?ref=41ae7fcf9be195d062ba2f9fdf744fdf58ac79db", "patch": "@@ -0,0 +1,19 @@\n+use super::JsonTimePassesEntry;\n+\n+#[test]\n+fn with_rss() {\n+    let entry =\n+        JsonTimePassesEntry { pass: \"typeck\", time: 56.1, start_rss: Some(10), end_rss: Some(20) };\n+\n+    assert_eq!(entry.to_string(), r#\"{\"pass\":\"typeck\",\"time\":56.1,\"rss_start\":10,\"rss_end\":20}\"#)\n+}\n+\n+#[test]\n+fn no_rss() {\n+    let entry = JsonTimePassesEntry { pass: \"typeck\", time: 56.1, start_rss: None, end_rss: None };\n+\n+    assert_eq!(\n+        entry.to_string(),\n+        r#\"{\"pass\":\"typeck\",\"time\":56.1,\"rss_start\":null,\"rss_end\":null}\"#\n+    )\n+}"}]}