{"sha": "e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZjNkNmVkZGQyOGE5MTdjOWEwZjdjZDczYTQ4OTA0OGNhN2Y0Y2Q=", "commit": {"author": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-11-01T04:21:47Z"}, "committer": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-12-08T03:08:33Z"}, "message": "Let str::replace take a pattern\n\nIt appears this was left out of RFC #528 because it might be useful to\nalso generalize the second argument in some way.  That doesn't seem to\nprevent generalizing the first argument now, however.\n\nThis is a [breaking-change] because it could cause type-inference to\nfail where it previously succeeded.", "tree": {"sha": "c09d2d45e36c62a9fd318455a7def076e54b0138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c09d2d45e36c62a9fd318455a7def076e54b0138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd", "html_url": "https://github.com/rust-lang/rust/commit/e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd/comments", "author": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8864f2c83ac800881da34c3e835c931c081a8785", "url": "https://api.github.com/repos/rust-lang/rust/commits/8864f2c83ac800881da34c3e835c931c081a8785", "html_url": "https://github.com/rust-lang/rust/commit/8864f2c83ac800881da34c3e835c931c081a8785"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "989637517b0e501381cbab0481ecb7f259eb1133", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd", "patch": "@@ -1706,7 +1706,7 @@ impl str {\n     /// assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn replace(&self, from: &str, to: &str) -> String {\n+    pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String {\n         let mut result = String::new();\n         let mut last_end = 0;\n         for (start, part) in self.match_indices(from) {"}, {"sha": "4d84855ddf97f3b7bf712b72b5b737ddc70b26cd", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd", "patch": "@@ -269,6 +269,15 @@ fn test_replace_2d() {\n     assert_eq!(data.replace(d, repl), data);\n }\n \n+#[test]\n+fn test_replace_pattern() {\n+    let data = \"abcd\u03b1\u03b2\u03b3\u03b4abcd\u03b1\u03b2\u03b3\u03b4\";\n+    assert_eq!(data.replace(\"d\u03b1\u03b2\", \"\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\"), \"abc\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b3\u03b4abc\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b3\u03b4\");\n+    assert_eq!(data.replace('\u03b3', \"\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\"), \"abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4\");\n+    assert_eq!(data.replace(&['a', '\u03b3'] as &[_], \"\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\"), \"\ud83d\ude3a\ud83d\ude3a\ud83d\ude3abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4\ud83d\ude3a\ud83d\ude3a\ud83d\ude3abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4\");\n+    assert_eq!(data.replace(|c| c == '\u03b3', \"\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\"), \"abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4\");\n+}\n+\n #[test]\n fn test_slice() {\n     assert_eq!(\"ab\", &\"abc\"[0..2]);"}]}