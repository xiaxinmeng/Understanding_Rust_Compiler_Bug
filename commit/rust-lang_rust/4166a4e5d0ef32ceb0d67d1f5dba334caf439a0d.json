{"sha": "4166a4e5d0ef32ceb0d67d1f5dba334caf439a0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNjZhNGU1ZDBlZjMyY2ViMGQ2N2QxZjVkYmEzMzRjYWY0MzlhMGQ=", "commit": {"author": {"name": "Vardhan Thigle", "email": "vardhan.thigle@fortanix.com", "date": "2019-01-03T05:16:22Z"}, "committer": {"name": "Vardhan Thigle", "email": "vardhan.thigle@fortanix.com", "date": "2019-01-08T16:40:55Z"}, "message": "Supporting backtrace for x86_64-fortanix-unknown-sgx.", "tree": {"sha": "525660bdcae9fa71d55ac3874a07cff0374526f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/525660bdcae9fa71d55ac3874a07cff0374526f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4166a4e5d0ef32ceb0d67d1f5dba334caf439a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4166a4e5d0ef32ceb0d67d1f5dba334caf439a0d", "html_url": "https://github.com/rust-lang/rust/commit/4166a4e5d0ef32ceb0d67d1f5dba334caf439a0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4166a4e5d0ef32ceb0d67d1f5dba334caf439a0d/comments", "author": null, "committer": null, "parents": [{"sha": "7ad470c0a64ed0801708cee6657e82be097a29ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad470c0a64ed0801708cee6657e82be097a29ac", "html_url": "https://github.com/rust-lang/rust/commit/7ad470c0a64ed0801708cee6657e82be097a29ac"}], "stats": {"total": 93, "additions": 83, "deletions": 10}, "files": [{"sha": "2f35b58106eab96dbb035f86e96213d324560c9e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4166a4e5d0ef32ceb0d67d1f5dba334caf439a0d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4166a4e5d0ef32ceb0d67d1f5dba334caf439a0d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4166a4e5d0ef32ceb0d67d1f5dba334caf439a0d", "patch": "@@ -305,7 +305,7 @@\n #![feature(maybe_uninit)]\n #![cfg_attr(all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n             feature(global_asm, range_contains, slice_index_methods,\n-                    decl_macro, coerce_unsized, sgx_platform))]\n+                    decl_macro, coerce_unsized, sgx_platform, ptr_wrapping_offset_from))]\n \n #![default_lib_allocator]\n "}, {"sha": "7e792300f434cc44bc345f5a62b10a9e175fd30b", "filename": "src/libstd/sys/sgx/backtrace.rs", "status": "modified", "additions": 82, "deletions": 9, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/4166a4e5d0ef32ceb0d67d1f5dba334caf439a0d/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4166a4e5d0ef32ceb0d67d1f5dba334caf439a0d/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs?ref=4166a4e5d0ef32ceb0d67d1f5dba334caf439a0d", "patch": "@@ -1,27 +1,100 @@\n use io;\n-use sys::unsupported;\n+use error::Error;\n+use libc;\n use sys_common::backtrace::Frame;\n+use unwind as uw;\n \n pub struct BacktraceContext;\n \n-pub fn unwind_backtrace(_frames: &mut [Frame])\n-    -> io::Result<(usize, BacktraceContext)>\n-{\n-    unsupported()\n+struct Context<'a> {\n+    idx: usize,\n+    frames: &'a mut [Frame],\n+}\n+\n+#[derive(Debug)]\n+struct UnwindError(uw::_Unwind_Reason_Code);\n+\n+impl Error for UnwindError {\n+    fn description(&self) -> &'static str {\n+        \"unexpected return value while unwinding\"\n+    }\n+}\n+\n+impl ::fmt::Display for UnwindError {\n+    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {\n+        write!(f, \"{}: {:?}\", self.description(), self.0)\n+    }\n+}\n+\n+#[inline(never)] // this function call can be skipped it when tracing.\n+pub fn unwind_backtrace(frames: &mut [Frame]) -> io::Result<(usize, BacktraceContext)> {\n+    let mut cx = Context { idx: 0, frames };\n+    let result_unwind =\n+        unsafe { uw::_Unwind_Backtrace(trace_fn, &mut cx as *mut Context as *mut libc::c_void) };\n+    // See libunwind:src/unwind/Backtrace.c for the return values.\n+    // No, there is no doc.\n+    let res = match result_unwind {\n+        // These return codes seem to be benign and need to be ignored for backtraces\n+        // to show up properly on all tested platforms.\n+        uw::_URC_END_OF_STACK | uw::_URC_FATAL_PHASE1_ERROR | uw::_URC_FAILURE => {\n+            Ok((cx.idx, BacktraceContext))\n+        }\n+        _ => Err(io::Error::new(\n+            io::ErrorKind::Other,\n+            UnwindError(result_unwind),\n+        )),\n+    };\n+    res\n }\n \n-pub fn resolve_symname<F>(_frame: Frame,\n-                          _callback: F,\n+extern \"C\" fn trace_fn(\n+    ctx: *mut uw::_Unwind_Context,\n+    arg: *mut libc::c_void,\n+) -> uw::_Unwind_Reason_Code {\n+    let cx = unsafe { &mut *(arg as *mut Context) };\n+    if cx.idx >= cx.frames.len() {\n+        return uw::_URC_NORMAL_STOP;\n+    }\n+\n+    let mut ip_before_insn = 0;\n+    let mut ip = unsafe { uw::_Unwind_GetIPInfo(ctx, &mut ip_before_insn) as *mut libc::c_void };\n+    if !ip.is_null() && ip_before_insn == 0 {\n+        // this is a non-signaling frame, so `ip` refers to the address\n+        // after the calling instruction. account for that.\n+        ip = (ip as usize - 1) as *mut _;\n+    }\n+\n+    let symaddr = unsafe { uw::_Unwind_FindEnclosingFunction(ip) };\n+    cx.frames[cx.idx] = Frame {\n+        symbol_addr: symaddr as *mut u8,\n+        exact_position: ip as *mut u8,\n+        inline_context: 0,\n+    };\n+    cx.idx += 1;\n+\n+    uw::_URC_NO_REASON\n+}\n+\n+extern {\n+   static IMAGE_BASE: u8;\n+}\n+\n+\n+// To reduce TCB size in Sgx enclave, we do not want to implement resolve_symname functionality.\n+// Rather, we print the offset of the address here, which could be later mapped to correct function.\n+pub fn resolve_symname<F>(frame: Frame,\n+                          callback: F,\n                           _: &BacktraceContext) -> io::Result<()>\n     where F: FnOnce(Option<&str>) -> io::Result<()>\n {\n-    unsupported()\n+    callback(Some(&format!(\"0x{:x}\",\n+            (unsafe {frame.symbol_addr.wrapping_offset_from(&IMAGE_BASE)}))))\n }\n \n pub fn foreach_symbol_fileline<F>(_: Frame,\n                                   _: F,\n                                   _: &BacktraceContext) -> io::Result<bool>\n     where F: FnMut(&[u8], u32) -> io::Result<()>\n {\n-    unsupported()\n+    Ok(false)\n }"}]}