{"sha": "3146e552d199a4db223773e0b80ce8cd510df78a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNDZlNTUyZDE5OWE0ZGIyMjM3NzNlMGI4MGNlOGNkNTEwZGY3OGE=", "commit": {"author": {"name": "Cengiz Can", "email": "cengizc@gmail.com", "date": "2017-05-29T21:13:09Z"}, "committer": {"name": "Cengiz Can", "email": "cengizc@gmail.com", "date": "2017-07-03T11:13:01Z"}, "message": "use PAGER to view --explain output #32665", "tree": {"sha": "1a920a0459dcd7a0314a35026c61234ce7167ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a920a0459dcd7a0314a35026c61234ce7167ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3146e552d199a4db223773e0b80ce8cd510df78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3146e552d199a4db223773e0b80ce8cd510df78a", "html_url": "https://github.com/rust-lang/rust/commit/3146e552d199a4db223773e0b80ce8cd510df78a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3146e552d199a4db223773e0b80ce8cd510df78a/comments", "author": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d2db7b9e8082f0459e000985d77fc7ad0dabade", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d2db7b9e8082f0459e000985d77fc7ad0dabade", "html_url": "https://github.com/rust-lang/rust/commit/1d2db7b9e8082f0459e000985d77fc7ad0dabade"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "f408316c9f9231d09ae9544e21a0b89b2c3af613", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3146e552d199a4db223773e0b80ce8cd510df78a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146e552d199a4db223773e0b80ce8cd510df78a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=3146e552d199a4db223773e0b80ce8cd510df78a", "patch": "@@ -84,10 +84,11 @@ use std::cmp::max;\n use std::cmp::Ordering::Equal;\n use std::default::Default;\n use std::env;\n+use std::ffi::OsString;\n use std::io::{self, Read, Write};\n use std::iter::repeat;\n use std::path::PathBuf;\n-use std::process;\n+use std::process::{self, Command, Stdio};\n use std::rc::Rc;\n use std::str;\n use std::sync::{Arc, Mutex};\n@@ -354,27 +355,66 @@ fn handle_explain(code: &str,\n     match descriptions.find_description(&normalised) {\n         Some(ref description) => {\n             let mut is_in_code_block = false;\n+            let mut text = String::new();\n+\n             // Slice off the leading newline and print.\n             for line in description[1..].lines() {\n                 let indent_level = line.find(|c: char| !c.is_whitespace())\n                     .unwrap_or_else(|| line.len());\n                 let dedented_line = &line[indent_level..];\n                 if dedented_line.starts_with(\"```\") {\n                     is_in_code_block = !is_in_code_block;\n-                    println!(\"{}\", &line[..(indent_level+3)]);\n+                    text.push_str(&line[..(indent_level+3)]);\n+                    text.push('\\n');\n                 } else if is_in_code_block && dedented_line.starts_with(\"# \") {\n                     continue;\n                 } else {\n-                    println!(\"{}\", line);\n+                    text.push_str(line);\n+                    text.push('\\n');\n                 }\n             }\n+\n+            show_content_with_pager(&text);\n         }\n         None => {\n             early_error(output, &format!(\"no extended information for {}\", code));\n         }\n     }\n }\n \n+fn show_content_with_pager(content: &String) {\n+    let pager_name = env::var_os(\"PAGER\").unwrap_or(if cfg!(windows) {\n+        OsString::from(\"more.com\")\n+    } else {\n+        OsString::from(\"less\")\n+    });\n+\n+    let mut fallback_to_println = false;\n+\n+    match Command::new(pager_name).stdin(Stdio::piped()).spawn() {\n+        Ok(mut pager) => {\n+            if let Some(mut pipe) = pager.stdin.as_mut() {\n+                if pipe.write_all(content.as_bytes()).is_err() {\n+                    fallback_to_println = true;\n+                }\n+            }\n+\n+            if pager.wait().is_err() {\n+                fallback_to_println = true;\n+            }\n+        }\n+        Err(_) => {\n+            fallback_to_println = true;\n+        }\n+    }\n+\n+    // If pager fails for whatever reason, we should still print the content\n+    // to standard output\n+    if fallback_to_println {\n+        println!(\"{}\", content);\n+    }\n+}\n+\n impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn early_callback(&mut self,\n                       matches: &getopts::Matches,"}]}