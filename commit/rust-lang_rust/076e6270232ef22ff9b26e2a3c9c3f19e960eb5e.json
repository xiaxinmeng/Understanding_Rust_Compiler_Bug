{"sha": "076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "node_id": "C_kwDOAAsO6NoAKDA3NmU2MjcwMjMyZWYyMmZmOWIyNmUyYTNjOWMzZjE5ZTk2MGViNWU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-21T08:49:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-21T08:49:59Z"}, "message": "Rollup merge of #108141 - spastorino:add_rpitit_queries, r=compiler-errors\n\nAdd rpitit queries\n\nThis is part of the changes we are making to lower RPITITs as an associated type. The rest of the stuff will follow under a `-Z` flag.\n\nI still need to add comments to the code, explain stuff and also I'd need to avoid encoding in metadata when rpitit queries return `&[]`\n\nr? `@compiler-errors`", "tree": {"sha": "d05a8ec90de842abb804a9e15d28351c1cbed55d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d05a8ec90de842abb804a9e15d28351c1cbed55d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj9IW3CRBK7hj4Ov3rIwAAgxcIAFTZregRzjsgoXSChamYkaPi\nivgFdOGNTs85SD2BWKsqX6znBcSlx7+iAFrmO9Z6CUinPaZS7dMGNs1n8GBbpUR3\nlg2R5l9gXvOtECOmMofdhBU+QwDn6q2fM1Elmfq4dN1+JYwmBzJRZBPhCzTVFtcl\nX2C5bO3mMex0HRcZ63T16Q18L6S/2TCy+7qocBfVf8wgPfPBagTtWYLgKqLH0BON\nCPhwNkYcZ6mHDmwV+G4VFUjEeNBFG8zbXuuEIrrh/sx231WClyCly9AhtmJo2FU8\n/hAIusd/eobM8cGQbe4QSnWPSPxnZzoI2ZxOfRau74l6vXUCEQa8TJR8/guE4Ak=\n=IevR\n-----END PGP SIGNATURE-----\n", "payload": "tree d05a8ec90de842abb804a9e15d28351c1cbed55d\nparent e781a6ff3b39b0baff6d1bae6a2422cc39cb62d8\nparent 5e763b662470f8f35d537215928c83be9b537c0e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676969399 +0530\ncommitter GitHub <noreply@github.com> 1676969399 +0530\n\nRollup merge of #108141 - spastorino:add_rpitit_queries, r=compiler-errors\n\nAdd rpitit queries\n\nThis is part of the changes we are making to lower RPITITs as an associated type. The rest of the stuff will follow under a `-Z` flag.\n\nI still need to add comments to the code, explain stuff and also I'd need to avoid encoding in metadata when rpitit queries return `&[]`\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "html_url": "https://github.com/rust-lang/rust/commit/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e781a6ff3b39b0baff6d1bae6a2422cc39cb62d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e781a6ff3b39b0baff6d1bae6a2422cc39cb62d8", "html_url": "https://github.com/rust-lang/rust/commit/e781a6ff3b39b0baff6d1bae6a2422cc39cb62d8"}, {"sha": "5e763b662470f8f35d537215928c83be9b537c0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e763b662470f8f35d537215928c83be9b537c0e", "html_url": "https://github.com/rust-lang/rust/commit/5e763b662470f8f35d537215928c83be9b537c0e"}], "stats": {"total": 171, "additions": 158, "deletions": 13}, "files": [{"sha": "8ceb176491b6f95d37934f00f2cba89dd721f99f", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "patch": "@@ -280,6 +280,8 @@ pub enum DefPathData {\n     AnonConst,\n     /// An `impl Trait` type node.\n     ImplTrait,\n+    /// `impl Trait` generated associated type node.\n+    ImplTraitAssocTy,\n }\n \n impl Definitions {\n@@ -403,7 +405,7 @@ impl DefPathData {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => Some(name),\n \n             Impl | ForeignMod | CrateRoot | Use | GlobalAsm | ClosureExpr | Ctor | AnonConst\n-            | ImplTrait => None,\n+            | ImplTrait | ImplTraitAssocTy => None,\n         }\n     }\n \n@@ -422,7 +424,7 @@ impl DefPathData {\n             ClosureExpr => DefPathDataName::Anon { namespace: sym::closure },\n             Ctor => DefPathDataName::Anon { namespace: sym::constructor },\n             AnonConst => DefPathDataName::Anon { namespace: sym::constant },\n-            ImplTrait => DefPathDataName::Anon { namespace: sym::opaque },\n+            ImplTrait | ImplTraitAssocTy => DefPathDataName::Anon { namespace: sym::opaque },\n         }\n     }\n }"}, {"sha": "83a0e833edc1d74b78f9bb778844ef0c87fbb47f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "patch": "@@ -254,6 +254,8 @@ provide! { tcx, def_id, other, cdata,\n             .process_decoded(tcx, || panic!(\"{def_id:?} does not have trait_impl_trait_tys\")))\n      }\n \n+    associated_items_for_impl_trait_in_trait => { table_defaulted_array }\n+\n     visibility => { cdata.get_visibility(def_id.index) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n     adt_destructor => {"}, {"sha": "f0dafe73c004e9c99a41c98d0591fd985c3fdf93", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "patch": "@@ -1129,6 +1129,11 @@ fn should_encode_trait_impl_trait_tys(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     })\n }\n \n+// Return `false` to avoid encoding impl trait in trait, while we don't use the query.\n+fn should_encode_fn_impl_trait_in_trait<'tcx>(_tcx: TyCtxt<'tcx>, _def_id: DefId) -> bool {\n+    false\n+}\n+\n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_attrs(&mut self, def_id: LocalDefId) {\n         let tcx = self.tcx;\n@@ -1137,8 +1142,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             is_doc_hidden: false,\n         };\n         let attr_iter = tcx\n-            .hir()\n-            .attrs(tcx.hir().local_def_id_to_hir_id(def_id))\n+            .opt_local_def_id_to_hir_id(def_id)\n+            .map_or(Default::default(), |hir_id| tcx.hir().attrs(hir_id))\n             .iter()\n             .filter(|attr| analyze_attr(attr, &mut state));\n \n@@ -1211,6 +1216,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             {\n                 record!(self.tables.trait_impl_trait_tys[def_id] <- table);\n             }\n+            if should_encode_fn_impl_trait_in_trait(tcx, def_id) {\n+                let table = tcx.associated_items_for_impl_trait_in_trait(def_id);\n+                record_defaulted_array!(self.tables.associated_items_for_impl_trait_in_trait[def_id] <- table);\n+            }\n         }\n \n         let inherent_impls = tcx.with_stable_hashing_context(|hcx| {"}, {"sha": "a7ec2d790b73a9efc962a67d2c5bedfd10d61243", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "patch": "@@ -354,6 +354,7 @@ define_tables! {\n     explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,\n     inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Clause<'static>, Span)>>,\n     inherent_impls: Table<DefIndex, LazyArray<DefIndex>>,\n+    associated_items_for_impl_trait_in_trait: Table<DefIndex, LazyArray<DefId>>,\n \n - optional:\n     attributes: Table<DefIndex, LazyArray<ast::Attribute>>,"}, {"sha": "2df851a7857715d5c02764fe09feb0b3989e764a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "patch": "@@ -849,6 +849,13 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    pub fn get_fn_output(self, def_id: LocalDefId) -> Option<&'hir FnRetTy<'hir>> {\n+        match self.tcx.hir_owner(OwnerId { def_id }) {\n+            Some(Owner { node, .. }) => node.fn_decl().map(|fn_decl| &fn_decl.output),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn expect_variant(self, id: HirId) -> &'hir Variant<'hir> {\n         match self.find(id) {\n             Some(Node::Variant(variant)) => variant,"}, {"sha": "2e2ca6a27888ead9c7d4f6b931237e609acd9dda", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "patch": "@@ -121,13 +121,13 @@ pub fn provide(providers: &mut Providers) {\n         let node = owner.node();\n         Some(Owner { node, hash_without_bodies: owner.nodes.hash_without_bodies })\n     };\n-    providers.local_def_id_to_hir_id = |tcx, id| {\n+    providers.opt_local_def_id_to_hir_id = |tcx, id| {\n         let owner = tcx.hir_crate(()).owners[id].map(|_| ());\n-        match owner {\n+        Some(match owner {\n             MaybeOwner::Owner(_) => HirId::make_owner(id),\n             MaybeOwner::Phantom => bug!(\"No HirId for {:?}\", id),\n             MaybeOwner::NonOwner(hir_id) => hir_id,\n-        }\n+        })\n     };\n     providers.hir_owner_nodes = |tcx, id| tcx.hir_crate(()).owners[id.def_id].map(|i| &i.nodes);\n     providers.hir_owner_parent = |tcx, id| {"}, {"sha": "6a34e5ede193878122fa427f5243cbd1be5ba08d", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "patch": "@@ -85,11 +85,10 @@ rustc_queries! {\n         desc { |tcx| \"getting HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n-    /// Gives access to the HIR ID for the given `LocalDefId` owner `key`.\n+    /// Gives access to the HIR ID for the given `LocalDefId` owner `key` if any.\n     ///\n-    /// This can be conveniently accessed by methods on `tcx.hir()`.\n-    /// Avoid calling this query directly.\n-    query local_def_id_to_hir_id(key: LocalDefId) -> hir::HirId {\n+    /// Definitions that were generated with no HIR, would be feeded to return `None`.\n+    query opt_local_def_id_to_hir_id(key: LocalDefId) -> Option<hir::HirId>{\n         desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n@@ -767,6 +766,26 @@ rustc_queries! {\n         desc { |tcx| \"comparing impl items against trait for `{}`\", tcx.def_path_str(impl_id) }\n     }\n \n+    /// Given `fn_def_id` of a trait or of an impl that implements a given trait:\n+    /// if `fn_def_id` is the def id of a function defined inside a trait, then it creates and returns\n+    /// the associated items that correspond to each impl trait in return position for that trait.\n+    /// if `fn_def_id` is the def id of a function defined inside an impl that implements a trait, then it\n+    /// creates and returns the associated items that correspond to each impl trait in return position\n+    /// of the implemented trait.\n+    query associated_items_for_impl_trait_in_trait(fn_def_id: DefId) -> &'tcx [DefId] {\n+        desc { |tcx| \"creating associated items for impl trait in trait returned by `{}`\", tcx.def_path_str(fn_def_id) }\n+        cache_on_disk_if { fn_def_id.is_local() }\n+        separate_provide_extern\n+    }\n+\n+    /// Given an impl trait in trait `opaque_ty_def_id`, create and return the corresponding\n+    /// associated item.\n+    query associated_item_for_impl_trait_in_trait(opaque_ty_def_id: LocalDefId) -> LocalDefId {\n+        desc { |tcx| \"creates the associated item corresponding to the opaque type `{}`\", tcx.def_path_str(opaque_ty_def_id.to_def_id()) }\n+        cache_on_disk_if { true }\n+        separate_provide_extern\n+    }\n+\n     /// Given an `impl_id`, return the trait it implements.\n     /// Return `None` if this is an inherent impl.\n     query impl_trait_ref(impl_id: DefId) -> Option<ty::EarlyBinder<ty::TraitRef<'tcx>>> {"}, {"sha": "27f069275cfba8f7f5725bba1c02deeca92eca6a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "patch": "@@ -2451,6 +2451,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         )\n     }\n \n+    pub fn local_def_id_to_hir_id(self, local_def_id: LocalDefId) -> HirId {\n+        self.opt_local_def_id_to_hir_id(local_def_id).unwrap()\n+    }\n+\n     pub fn trait_solver_next(self) -> bool {\n         self.sess.opts.unstable_opts.trait_solver == rustc_session::config::TraitSolver::Next\n     }"}, {"sha": "1d299e2925631cf753bf178a6e490b64dc8337ed", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "patch": "@@ -396,6 +396,7 @@ fn encode_ty_name(tcx: TyCtxt<'_>, def_id: DefId) -> String {\n             hir::definitions::DefPathData::CrateRoot\n             | hir::definitions::DefPathData::Use\n             | hir::definitions::DefPathData::GlobalAsm\n+            | hir::definitions::DefPathData::ImplTraitAssocTy\n             | hir::definitions::DefPathData::MacroNs(..)\n             | hir::definitions::DefPathData::LifetimeNs(..) => {\n                 bug!(\"encode_ty_name: unexpected `{:?}`\", disambiguated_data.data);"}, {"sha": "d53f0cea6b54e4ae0ff8ede57583c8cb4e05bf56", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "patch": "@@ -791,6 +791,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             | DefPathData::Use\n             | DefPathData::GlobalAsm\n             | DefPathData::Impl\n+            | DefPathData::ImplTraitAssocTy\n             | DefPathData::MacroNs(_)\n             | DefPathData::LifetimeNs(_) => {\n                 bug!(\"symbol_names: unexpected DefPathData: {:?}\", disambiguated_data.data)"}, {"sha": "d4866b5dbdd4956f8c76d0d1cda7c9bd35ff236a", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 101, "deletions": 2, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e6270232ef22ff9b26e2a3c9c3f19e960eb5e/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=076e6270232ef22ff9b26e2a3c9c3f19e960eb5e", "patch": "@@ -1,13 +1,18 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::definitions::DefPathData;\n+use rustc_hir::intravisit::{self, Visitor};\n+use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         associated_item,\n         associated_item_def_ids,\n         associated_items,\n+        associated_items_for_impl_trait_in_trait,\n+        associated_item_for_impl_trait_in_trait,\n         impl_item_implementor_ids,\n         ..*providers\n     };\n@@ -112,3 +117,97 @@ fn associated_item_from_impl_item_ref(impl_item_ref: &hir::ImplItemRef) -> ty::A\n         fn_has_self_parameter: has_self,\n     }\n }\n+\n+/// Given an `fn_def_id` of a trait or of an impl that implements a given trait:\n+/// if `fn_def_id` is the def id of a function defined inside a trait, then it creates and returns\n+/// the associated items that correspond to each impl trait in return position for that trait.\n+/// if `fn_def_id` is the def id of a function defined inside an impl that implements a trait, then it\n+/// creates and returns the associated items that correspond to each impl trait in return position\n+/// of the implemented trait.\n+fn associated_items_for_impl_trait_in_trait(tcx: TyCtxt<'_>, fn_def_id: DefId) -> &'_ [DefId] {\n+    let parent_def_id = tcx.parent(fn_def_id);\n+\n+    match tcx.def_kind(parent_def_id) {\n+        DefKind::Trait => {\n+            struct RPITVisitor {\n+                rpits: Vec<LocalDefId>,\n+            }\n+\n+            impl<'v> Visitor<'v> for RPITVisitor {\n+                fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n+                    if let hir::TyKind::OpaqueDef(item_id, _, _) = ty.kind {\n+                        self.rpits.push(item_id.owner_id.def_id)\n+                    }\n+                    intravisit::walk_ty(self, ty)\n+                }\n+            }\n+\n+            let mut visitor = RPITVisitor { rpits: Vec::new() };\n+\n+            if let Some(output) = tcx.hir().get_fn_output(fn_def_id.expect_local()) {\n+                visitor.visit_fn_ret_ty(output);\n+\n+                tcx.arena.alloc_from_iter(visitor.rpits.iter().map(|opaque_ty_def_id| {\n+                    tcx.associated_item_for_impl_trait_in_trait(opaque_ty_def_id).to_def_id()\n+                }))\n+            } else {\n+                &[]\n+            }\n+        }\n+\n+        DefKind::Impl { .. } => {\n+            let Some(trait_fn_def_id) = tcx.associated_item(fn_def_id).trait_item_def_id else { return &[] };\n+\n+            tcx.arena.alloc_from_iter(\n+                tcx.associated_items_for_impl_trait_in_trait(trait_fn_def_id).iter().map(\n+                    move |trait_assoc_def_id| {\n+                        impl_associated_item_for_impl_trait_in_trait(\n+                            tcx,\n+                            trait_assoc_def_id.expect_local(),\n+                            fn_def_id.expect_local(),\n+                        )\n+                        .to_def_id()\n+                    },\n+                ),\n+            )\n+        }\n+\n+        def_kind => bug!(\n+            \"associated_items_for_impl_trait_in_trait: {:?} should be Trait or Impl but is {:?}\",\n+            parent_def_id,\n+            def_kind\n+        ),\n+    }\n+}\n+\n+/// Given an `opaque_ty_def_id` corresponding to an impl trait in trait, create and return the\n+/// corresponding associated item.\n+fn associated_item_for_impl_trait_in_trait(\n+    tcx: TyCtxt<'_>,\n+    opaque_ty_def_id: LocalDefId,\n+) -> LocalDefId {\n+    let fn_def_id = tcx.impl_trait_in_trait_parent(opaque_ty_def_id.to_def_id());\n+    let trait_def_id = tcx.parent(fn_def_id);\n+    assert_eq!(tcx.def_kind(trait_def_id), DefKind::Trait);\n+\n+    let span = tcx.def_span(opaque_ty_def_id);\n+    let trait_assoc_ty =\n+        tcx.at(span).create_def(trait_def_id.expect_local(), DefPathData::ImplTraitAssocTy);\n+    trait_assoc_ty.def_id()\n+}\n+\n+/// Given an `trait_assoc_def_id` that corresponds to a previously synthethized impl trait in trait\n+/// into an associated type and an `impl_def_id` corresponding to an impl block, create and return\n+/// the corresponding associated item inside the impl block.\n+fn impl_associated_item_for_impl_trait_in_trait(\n+    tcx: TyCtxt<'_>,\n+    trait_assoc_def_id: LocalDefId,\n+    impl_fn_def_id: LocalDefId,\n+) -> LocalDefId {\n+    let impl_def_id = tcx.local_parent(impl_fn_def_id);\n+\n+    let span = tcx.def_span(trait_assoc_def_id);\n+    let impl_assoc_ty = tcx.at(span).create_def(impl_def_id, DefPathData::ImplTraitAssocTy);\n+\n+    impl_assoc_ty.def_id()\n+}"}]}