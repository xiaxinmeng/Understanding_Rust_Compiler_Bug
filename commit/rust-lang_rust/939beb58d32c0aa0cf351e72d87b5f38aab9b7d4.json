{"sha": "939beb58d32c0aa0cf351e72d87b5f38aab9b7d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOWJlYjU4ZDMyYzBhYTBjZjM1MWU3MmQ4N2I1ZjM4YWFiOWI3ZDQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-19T22:53:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-19T22:53:52Z"}, "message": "Rollup merge of #67253 - elichai:2019-12-fmt, r=Dylan-DPC\n\nAdd more delegations to the fmt docs and add doctests\n\nHI,\nthis is a continuation to #67021\nI replaced the `Debug` example with one that use the `Debug*` helpers so that padding etc will work too.\nI also added asserts for the doctests as @RalfJung asked :)\n\nThe only thing I left with the `write!` macro is the `Display` example as I didn't know if there's a better way to do that.\n\nr? @QuietMisdreavus", "tree": {"sha": "48a7af4fb97af115298dd1612bf448b59faa9141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48a7af4fb97af115298dd1612bf448b59faa9141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/939beb58d32c0aa0cf351e72d87b5f38aab9b7d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd+/+ACRBK7hj4Ov3rIwAAdHIIABrbMPkpzPP167Zzz9VPYWiJ\nPF7YQuVlc9sooDihhiL8DkDUIs2iHZUcqGXJikwttlaOAshGck2JEnHoHGSepk7r\nBz/JkTBci5eLrJs2Km+aINbPwHxGUjBSM/V4QKg0WdjEUEsL1qGJzhB3oFZ+ubs2\ncQfPGUtbVGLvIGEcURO2x9+sponbxErM7FpZzX5BibQFawSkd8bOzNGnBdVsJMsK\n9IedOIEoZeZVjK9K4LjerEtXvXaKUgPOZcyZEPmQp+Wq1F8EZNVgbgu6o9xM6vip\nJjpd7BBO490go+cMSIUV7pLHfARN3ieN+bdaCoLz26BxbQb3Z28uHvijXCin7bY=\n=4JkV\n-----END PGP SIGNATURE-----\n", "payload": "tree 48a7af4fb97af115298dd1612bf448b59faa9141\nparent 0de96d37fbcc54978458c18f5067cd9817669bc8\nparent a9d6889e4d211e251e2f37cca358f61e488cb7cc\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1576796032 -0500\ncommitter GitHub <noreply@github.com> 1576796032 -0500\n\nRollup merge of #67253 - elichai:2019-12-fmt, r=Dylan-DPC\n\nAdd more delegations to the fmt docs and add doctests\n\nHI,\nthis is a continuation to #67021\nI replaced the `Debug` example with one that use the `Debug*` helpers so that padding etc will work too.\nI also added asserts for the doctests as @RalfJung asked :)\n\nThe only thing I left with the `write!` macro is the `Display` example as I didn't know if there's a better way to do that.\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/939beb58d32c0aa0cf351e72d87b5f38aab9b7d4", "html_url": "https://github.com/rust-lang/rust/commit/939beb58d32c0aa0cf351e72d87b5f38aab9b7d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/939beb58d32c0aa0cf351e72d87b5f38aab9b7d4/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0de96d37fbcc54978458c18f5067cd9817669bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0de96d37fbcc54978458c18f5067cd9817669bc8", "html_url": "https://github.com/rust-lang/rust/commit/0de96d37fbcc54978458c18f5067cd9817669bc8"}, {"sha": "a9d6889e4d211e251e2f37cca358f61e488cb7cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d6889e4d211e251e2f37cca358f61e488cb7cc", "html_url": "https://github.com/rust-lang/rust/commit/a9d6889e4d211e251e2f37cca358f61e488cb7cc"}], "stats": {"total": 120, "additions": 76, "deletions": 44}, "files": [{"sha": "793c1f124ed6590e4d0a5f873e9638336bdf6ff6", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 76, "deletions": 44, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/939beb58d32c0aa0cf351e72d87b5f38aab9b7d4/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939beb58d32c0aa0cf351e72d87b5f38aab9b7d4/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=939beb58d32c0aa0cf351e72d87b5f38aab9b7d4", "patch": "@@ -63,7 +63,7 @@ pub mod rt {\n ///\n /// let pythagorean_triple = Triangle { a: 3.0, b: 4.0, c: 5.0 };\n ///\n-/// println!(\"{}\", pythagorean_triple);\n+/// assert_eq!(format!(\"{}\", pythagorean_triple), \"(3, 4, 5)\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type Result = result::Result<(), Error>;\n@@ -440,7 +440,7 @@ impl Display for Arguments<'_> {\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {:?}\", origin);\n+/// assert_eq!(format!(\"The origin is: {:?}\", origin), \"The origin is: Point { x: 0, y: 0 }\");\n /// ```\n ///\n /// Manually implementing:\n@@ -455,28 +455,25 @@ impl Display for Arguments<'_> {\n ///\n /// impl fmt::Debug for Point {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-///         write!(f, \"Point {{ x: {}, y: {} }}\", self.x, self.y)\n+///         f.debug_struct(\"Point\")\n+///          .field(\"x\", &self.x)\n+///          .field(\"y\", &self.y)\n+///          .finish()\n ///     }\n /// }\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {:?}\", origin);\n+/// assert_eq!(format!(\"The origin is: {:?}\", origin), \"The origin is: Point { x: 0, y: 0 }\");\n /// ```\n ///\n-/// This outputs:\n-///\n-/// ```text\n-/// The origin is: Point { x: 0, y: 0 }\n-/// ```\n-///\n-/// There are a number of `debug_*` methods on [`Formatter`] to help you with manual\n-/// implementations, such as [`debug_struct`][debug_struct].\n+/// There are a number of helper methods on the [`Formatter`] struct to help you with manual\n+/// implementations, such as [`debug_struct`].\n ///\n /// `Debug` implementations using either `derive` or the debug builder API\n /// on [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\n ///\n-/// [debug_struct]: ../../std/fmt/struct.Formatter.html#method.debug_struct\n+/// [`debug_struct`]: ../../std/fmt/struct.Formatter.html#method.debug_struct\n /// [`Formatter`]: ../../std/fmt/struct.Formatter.html\n ///\n /// Pretty-printing with `#?`:\n@@ -490,17 +487,13 @@ impl Display for Arguments<'_> {\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {:#?}\", origin);\n-/// ```\n-///\n-/// This outputs:\n-///\n-/// ```text\n-/// The origin is: Point {\n+/// assert_eq!(format!(\"The origin is: {:#?}\", origin),\n+/// \"The origin is: Point {\n ///     x: 0,\n-///     y: 0\n-/// }\n+///     y: 0,\n+/// }\");\n /// ```\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n     on(\n@@ -528,12 +521,20 @@ pub trait Debug {\n     ///\n     /// impl fmt::Debug for Position {\n     ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"({:?}, {:?})\", self.longitude, self.latitude)\n+    ///         f.debug_tuple(\"\")\n+    ///          .field(&self.longitude)\n+    ///          .field(&self.latitude)\n+    ///          .finish()\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(\"(1.987, 2.983)\".to_owned(),\n-    ///            format!(\"{:?}\", Position { longitude: 1.987, latitude: 2.983, }));\n+    /// let position = Position { longitude: 1.987, latitude: 2.983 };\n+    /// assert_eq!(format!(\"{:?}\", position), \"(1.987, 2.983)\");\n+    ///\n+    /// assert_eq!(format!(\"{:#?}\", position), \"(\n+    ///     1.987,\n+    ///     2.983,\n+    /// )\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n@@ -584,7 +585,7 @@ pub use macros::Debug;\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {}\", origin);\n+/// assert_eq!(format!(\"The origin is: {}\", origin), \"The origin is: (0, 0)\");\n /// ```\n #[rustc_on_unimplemented(\n     on(\n@@ -618,7 +619,7 @@ pub trait Display {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(\"(1.987, 2.983)\".to_owned(),\n+    /// assert_eq!(\"(1.987, 2.983)\",\n     ///            format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -668,7 +669,9 @@ pub trait Display {\n ///\n /// let l = Length(9);\n ///\n-/// println!(\"l as octal is: {:o}\", l);\n+/// assert_eq!(format!(\"l as octal is: {:o}\", l), \"l as octal is: 11\");\n+///\n+/// assert_eq!(format!(\"l as octal is: {:#06o}\", l), \"l as octal is: 0o0011\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Octal {\n@@ -718,7 +721,12 @@ pub trait Octal {\n ///\n /// let l = Length(107);\n ///\n-/// println!(\"l as binary is: {:b}\", l);\n+/// assert_eq!(format!(\"l as binary is: {:b}\", l), \"l as binary is: 1101011\");\n+///\n+/// assert_eq!(\n+///     format!(\"l as binary is: {:#032b}\", l),\n+///     \"l as binary is: 0b000000000000000000000001101011\"\n+/// );\n /// ```\n ///\n /// [module]: ../../std/fmt/index.html\n@@ -777,7 +785,9 @@ pub trait Binary {\n ///\n /// let l = Length(9);\n ///\n-/// println!(\"l as hex is: {:x}\", l);\n+/// assert_eq!(format!(\"l as hex is: {:x}\", l), \"l as hex is: 9\");\n+///\n+/// assert_eq!(format!(\"l as hex is: {:#010x}\", l), \"l as hex is: 0x00000009\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait LowerHex {\n@@ -828,9 +838,11 @@ pub trait LowerHex {\n ///     }\n /// }\n ///\n-/// let l = Length(9);\n+/// let l = Length(i32::max_value());\n ///\n-/// println!(\"l as hex is: {:X}\", l);\n+/// assert_eq!(format!(\"l as hex is: {:X}\", l), \"l as hex is: 7FFFFFFF\");\n+///\n+/// assert_eq!(format!(\"l as hex is: {:#010X}\", l), \"l as hex is: 0x7FFFFFFF\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait UpperHex {\n@@ -877,6 +889,10 @@ pub trait UpperHex {\n /// let l = Length(42);\n ///\n /// println!(\"l is in memory here: {:p}\", l);\n+///\n+/// let l_ptr = format!(\"{:018p}\", l);\n+/// assert_eq!(l_ptr.len(), 18);\n+/// assert_eq!(&l_ptr[..2], \"0x\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Pointer {\n@@ -912,14 +928,22 @@ pub trait Pointer {\n ///\n /// impl fmt::LowerExp for Length {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-///         let val = self.0;\n-///         write!(f, \"{}e1\", val / 10)\n+///         let val = f64::from(self.0);\n+///         fmt::LowerExp::fmt(&val, f) // delegate to f64's implementation\n ///     }\n /// }\n ///\n /// let l = Length(100);\n ///\n-/// println!(\"l in scientific notation is: {:e}\", l);\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:e}\", l),\n+///     \"l in scientific notation is: 1e2\"\n+/// );\n+///\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:05e}\", l),\n+///     \"l in scientific notation is: 001e2\"\n+/// );\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait LowerExp {\n@@ -955,14 +979,22 @@ pub trait LowerExp {\n ///\n /// impl fmt::UpperExp for Length {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-///         let val = self.0;\n-///         write!(f, \"{}E1\", val / 10)\n+///         let val = f64::from(self.0);\n+///         fmt::UpperExp::fmt(&val, f) // delegate to f64's implementation\n ///     }\n /// }\n ///\n /// let l = Length(100);\n ///\n-/// println!(\"l in scientific notation is: {:E}\", l);\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:E}\", l),\n+///     \"l in scientific notation is: 1E2\"\n+/// );\n+///\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:05E}\", l),\n+///     \"l in scientific notation is: 001E2\"\n+/// );\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait UpperExp {\n@@ -1807,8 +1839,7 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// // prints \"[10, 11]\"\n-    /// println!(\"{:?}\", Foo(vec![10, 11]));\n+    /// assert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"[10, 11]\");\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_list<'b>(&'b mut self) -> DebugList<'b, 'a> {\n@@ -1831,8 +1862,7 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// // prints \"{10, 11}\"\n-    /// println!(\"{:?}\", Foo(vec![10, 11]));\n+    /// assert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"{10, 11}\");\n     /// ```\n     ///\n     /// [`format_args!`]: ../../std/macro.format_args.html\n@@ -1890,8 +1920,10 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// // prints \"{\"A\": 10, \"B\": 11}\"\n-    /// println!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\",  Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n+    ///     r#\"{\"A\": 10, \"B\": 11}\"#\n+    ///  );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_map<'b>(&'b mut self) -> DebugMap<'b, 'a> {"}]}