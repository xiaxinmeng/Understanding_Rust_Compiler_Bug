{"sha": "b61e69433951e31f7bd746e22f516a48ad41623b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MWU2OTQzMzk1MWUzMWY3YmQ3NDZlMjJmNTE2YTQ4YWQ0MTYyM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-28T22:42:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-28T22:42:58Z"}, "message": "Auto merge of #64883 - Centril:rollup-uehjt63, r=Centril\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #64131 (data_structures: Add deterministic FxHashMap and FxHashSet wrappers)\n - #64387 (Fix redundant semicolon lint interaction with proc macro attributes)\n - #64678 (added more context for duplicate lang item errors (fixes #60561))\n - #64763 (Add E0734 and its long explanation)\n - #64793 (Fix format macro expansions spans to be macro-generated)\n - #64837 (Improve wording in documentation of MaybeUninit)\n - #64852 (Print ParamTy span when accessing a field (#52082))\n - #64875 (Upgrade async/await to \"used\" keywords.)\n - #64876 (Fix typo in intrinsics op safety)\n - #64880 (Slice docs: fix typo)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "255b133e7b09bfc79a8a45a26d1ab4b66e700a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/255b133e7b09bfc79a8a45a26d1ab4b66e700a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b61e69433951e31f7bd746e22f516a48ad41623b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b61e69433951e31f7bd746e22f516a48ad41623b", "html_url": "https://github.com/rust-lang/rust/commit/b61e69433951e31f7bd746e22f516a48ad41623b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b61e69433951e31f7bd746e22f516a48ad41623b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "488381ce9ef0ceabe83b73127c659e5d38137df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/488381ce9ef0ceabe83b73127c659e5d38137df0", "html_url": "https://github.com/rust-lang/rust/commit/488381ce9ef0ceabe83b73127c659e5d38137df0"}, {"sha": "46526718b15dd168543a59cb632bf8dea6eedafe", "url": "https://api.github.com/repos/rust-lang/rust/commits/46526718b15dd168543a59cb632bf8dea6eedafe", "html_url": "https://github.com/rust-lang/rust/commit/46526718b15dd168543a59cb632bf8dea6eedafe"}], "stats": {"total": 783, "additions": 620, "deletions": 163}, "files": [{"sha": "792ce9dfad419b0770094bef9c5af8c02c081130", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -5,12 +5,12 @@ use crate::mem::ManuallyDrop;\n ///\n /// # Initialization invariant\n ///\n-/// The compiler, in general, assumes that variables are properly initialized\n-/// at their respective type. For example, a variable of reference type must\n-/// be aligned and non-NULL. This is an invariant that must *always* be upheld,\n-/// even in unsafe code. As a consequence, zero-initializing a variable of reference\n-/// type causes instantaneous [undefined behavior][ub], no matter whether that reference\n-/// ever gets used to access memory:\n+/// The compiler, in general, assumes that a variable is properly initialized\n+/// according to the requirements of the variable's type. For example, a variable of\n+/// reference type must be aligned and non-NULL. This is an invariant that must\n+/// *always* be upheld, even in unsafe code. As a consequence, zero-initializing a\n+/// variable of reference type causes instantaneous [undefined behavior][ub],\n+/// no matter whether that reference ever gets used to access memory:\n ///\n /// ```rust,no_run\n /// # #![allow(invalid_value)]"}, {"sha": "968b0b9f2f2b73eab1e5b67b62fbf7ea0d4d93af", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -2217,6 +2217,23 @@ Examples of erroneous code:\n static X: u32 = 42;\n ```\n \"##,\n+\n+E0734: r##\"\n+A stability attribute has been used outside of the standard library.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0734\n+#[rustc_deprecated(since = \"b\", reason = \"text\")] // invalid\n+#[stable(feature = \"a\", since = \"b\")] // invalid\n+#[unstable(feature = \"b\", issue = \"0\")] // invalid\n+fn foo(){}\n+```\n+\n+These attributes are meant to only be used by the standard library and are\n+rejected in your own crates.\n+\"##,\n+\n ;\n //  E0006, // merged with E0005\n //  E0101, // replaced with E0282"}, {"sha": "ddf6262b7382e372144ea931f01c42333e869c1b", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -126,10 +126,17 @@ pub struct ExternCrate {\n     /// used to select the extern with the shortest path\n     pub path_len: usize,\n \n+    /// Crate that depends on this crate\n+    pub dependency_of: CrateNum,\n+}\n+\n+impl ExternCrate {\n     /// If true, then this crate is the crate named by the extern\n     /// crate referenced above. If false, then this crate is a dep\n     /// of the crate.\n-    pub direct: bool,\n+    pub fn is_direct(&self) -> bool {\n+        self.dependency_of == LOCAL_CRATE\n+    }\n }\n \n #[derive(Copy, Clone, Debug, HashStable)]"}, {"sha": "cab929389d6a4c4b0e1b4fe458f8dc946e6395ca", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -13,6 +13,7 @@ use crate::hir::def_id::DefId;\n use crate::hir::check_attr::Target;\n use crate::ty::{self, TyCtxt};\n use crate::middle::weak_lang_items;\n+use crate::middle::cstore::ExternCrate;\n use crate::util::nodemap::FxHashMap;\n \n use syntax::ast;\n@@ -182,16 +183,39 @@ impl LanguageItemCollector<'tcx> {\n                         E0152,\n                         \"duplicate lang item found: `{}`.\",\n                         name),\n-                    None => self.tcx.sess.struct_err(&format!(\n-                            \"duplicate lang item in crate `{}`: `{}`.\",\n-                            self.tcx.crate_name(item_def_id.krate),\n-                            name)),\n+                    None => {\n+                        match self.tcx.extern_crate(item_def_id) {\n+                            Some(ExternCrate {dependency_of, ..}) => {\n+                                self.tcx.sess.struct_err(&format!(\n+                                \"duplicate lang item in crate `{}` (which `{}` depends on): `{}`.\",\n+                                self.tcx.crate_name(item_def_id.krate),\n+                                self.tcx.crate_name(*dependency_of),\n+                                name))\n+                            },\n+                            _ => {\n+                                self.tcx.sess.struct_err(&format!(\n+                                \"duplicate lang item in crate `{}`: `{}`.\",\n+                                self.tcx.crate_name(item_def_id.krate),\n+                                name))\n+                            }\n+                        }\n+                    },\n                 };\n                 if let Some(span) = self.tcx.hir().span_if_local(original_def_id) {\n                     span_note!(&mut err, span, \"first defined here.\");\n                 } else {\n-                    err.note(&format!(\"first defined in crate `{}`.\",\n+                    match self.tcx.extern_crate(original_def_id) {\n+                        Some(ExternCrate {dependency_of, ..}) => {\n+                            err.note(&format!(\n+                            \"first defined in crate `{}` (which `{}` depends on).\",\n+                                      self.tcx.crate_name(original_def_id.krate),\n+                                      self.tcx.crate_name(*dependency_of)));\n+                        },\n+                        _ => {\n+                            err.note(&format!(\"first defined in crate `{}`.\",\n                                       self.tcx.crate_name(original_def_id.krate)));\n+                        }\n+                    }\n                 }\n                 err.emit();\n             }"}, {"sha": "30a88d155f5f86fd4fe1b8a8ae3caa78662d5de4", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -199,8 +199,12 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 let name = attr.name_or_empty();\n                 if [sym::unstable, sym::stable, sym::rustc_deprecated].contains(&name) {\n                     attr::mark_used(attr);\n-                    self.tcx.sess.span_err(attr.span, \"stability attributes may not be used \\\n-                                                        outside of the standard library\");\n+                    struct_span_err!(\n+                        self.tcx.sess,\n+                        attr.span,\n+                        E0734,\n+                        \"stability attributes may not be used outside of the standard library\",\n+                    ).emit();\n                 }\n             }\n "}, {"sha": "0adb75626975f13b10b6160b18cee1f4ee6cd13e", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -278,7 +278,7 @@ pub trait PrettyPrinter<'tcx>:\n             match self.tcx().extern_crate(def_id) {\n                 Some(&ExternCrate {\n                     src: ExternCrateSource::Extern(def_id),\n-                    direct: true,\n+                    dependency_of: LOCAL_CRATE,\n                     span,\n                     ..\n                 }) => {"}, {"sha": "d6e9c479c9b8dad1d1e5fb87763a8a406a480af4", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -73,6 +73,7 @@ pub mod box_region;\n pub mod const_cstr;\n pub mod flock;\n pub mod fx;\n+pub mod stable_map;\n pub mod graph;\n pub mod indexed_vec;\n pub mod jobserver;\n@@ -84,6 +85,7 @@ pub mod small_c_str;\n pub mod snapshot_map;\n pub use ena::snapshot_vec;\n pub mod sorted_map;\n+pub mod stable_set;\n #[macro_use] pub mod stable_hasher;\n pub mod sync;\n pub mod sharded;"}, {"sha": "f69f28e14b2a1b3fcd2d6ceace3e812ff5fe9cc5", "filename": "src/librustc_data_structures/stable_map.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_data_structures%2Fstable_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_data_structures%2Fstable_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_map.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -0,0 +1,99 @@\n+pub use rustc_hash::FxHashMap;\n+use std::borrow::Borrow;\n+use std::collections::hash_map::Entry;\n+use std::fmt;\n+use std::hash::Hash;\n+\n+/// A deterministic wrapper around FxHashMap that does not provide iteration support.\n+///\n+/// It supports insert, remove, get and get_mut functions from FxHashMap.\n+/// It also allows to convert hashmap to a sorted vector with the method `into_sorted_vector()`.\n+#[derive(Clone)]\n+pub struct StableMap<K, V> {\n+    base: FxHashMap<K, V>,\n+}\n+\n+impl<K, V> Default for StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+{\n+    fn default() -> StableMap<K, V> {\n+        StableMap::new()\n+    }\n+}\n+\n+impl<K, V> fmt::Debug for StableMap<K, V>\n+where\n+    K: Eq + Hash + fmt::Debug,\n+    V: fmt::Debug,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}\", self.base)\n+    }\n+}\n+\n+impl<K, V> PartialEq for StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+    V: PartialEq,\n+{\n+    fn eq(&self, other: &StableMap<K, V>) -> bool {\n+        self.base == other.base\n+    }\n+}\n+\n+impl<K, V> Eq for StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+    V: Eq,\n+{}\n+\n+impl<K, V> StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+{\n+    pub fn new() -> StableMap<K, V> {\n+        StableMap { base: FxHashMap::default() }\n+    }\n+\n+    pub fn into_sorted_vector(self) -> Vec<(K, V)>\n+    where\n+        K: Ord + Copy,\n+    {\n+        let mut vector = self.base.into_iter().collect::<Vec<_>>();\n+        vector.sort_unstable_by_key(|pair| pair.0);\n+        vector\n+    }\n+\n+    pub fn entry(&mut self, k: K) -> Entry<'_, K, V> {\n+        self.base.entry(k)\n+    }\n+\n+    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get(k)\n+    }\n+\n+    pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get_mut(k)\n+    }\n+\n+    pub fn insert(&mut self, k: K, v: V) -> Option<V> {\n+        self.base.insert(k, v)\n+    }\n+\n+    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.remove(k)\n+    }\n+}"}, {"sha": "c7ca74f5fbd9d1243f1895b392451b6b4757fbd9", "filename": "src/librustc_data_structures/stable_set.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_data_structures%2Fstable_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_data_structures%2Fstable_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_set.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -0,0 +1,77 @@\n+pub use rustc_hash::FxHashSet;\n+use std::borrow::Borrow;\n+use std::fmt;\n+use std::hash::Hash;\n+\n+/// A deterministic wrapper around FxHashSet that does not provide iteration support.\n+///\n+/// It supports insert, remove, get functions from FxHashSet.\n+/// It also allows to convert hashset to a sorted vector with the method `into_sorted_vector()`.\n+#[derive(Clone)]\n+pub struct StableSet<T> {\n+    base: FxHashSet<T>,\n+}\n+\n+impl<T> Default for StableSet<T>\n+where\n+    T: Eq + Hash,\n+{\n+    fn default() -> StableSet<T> {\n+        StableSet::new()\n+    }\n+}\n+\n+impl<T> fmt::Debug for StableSet<T>\n+where\n+    T: Eq + Hash + fmt::Debug,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}\", self.base)\n+    }\n+}\n+\n+impl<T> PartialEq<StableSet<T>> for StableSet<T>\n+where\n+    T: Eq + Hash,\n+{\n+    fn eq(&self, other: &StableSet<T>) -> bool {\n+        self.base == other.base\n+    }\n+}\n+\n+impl<T> Eq for StableSet<T> where T: Eq + Hash {}\n+\n+impl<T: Hash + Eq> StableSet<T> {\n+    pub fn new() -> StableSet<T> {\n+        StableSet { base: FxHashSet::default() }\n+    }\n+\n+    pub fn into_sorted_vector(self) -> Vec<T>\n+    where\n+        T: Ord,\n+    {\n+        let mut vector = self.base.into_iter().collect::<Vec<_>>();\n+        vector.sort_unstable();\n+        vector\n+    }\n+\n+    pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>\n+    where\n+        T: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get(value)\n+    }\n+\n+    pub fn insert(&mut self, value: T) -> bool {\n+        self.base.insert(value)\n+    }\n+\n+    pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool\n+    where\n+        T: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.remove(value)\n+    }\n+}"}, {"sha": "682835d81a62b9b7ea973cdb2809b0c65350879f", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -17,6 +17,7 @@ use rustc::middle::cstore::{ExternCrate, ExternCrateSource};\n use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::map::Definitions;\n+use rustc::hir::def_id::LOCAL_CRATE;\n \n use std::ops::Deref;\n use std::path::PathBuf;\n@@ -430,7 +431,7 @@ impl<'a> CrateLoader<'a> {\n                            mut extern_crate: ExternCrate,\n                            visited: &mut FxHashSet<(CrateNum, bool)>)\n     {\n-        if !visited.insert((cnum, extern_crate.direct)) { return }\n+        if !visited.insert((cnum, extern_crate.is_direct())) { return }\n \n         let cmeta = self.cstore.get_crate_data(cnum);\n         let mut old_extern_crate = cmeta.extern_crate.borrow_mut();\n@@ -441,14 +442,14 @@ impl<'a> CrateLoader<'a> {\n         // - shorter paths to longer (tuple.2).\n         let new_rank = (\n             true,\n-            extern_crate.direct,\n+            extern_crate.is_direct(),\n             cmp::Reverse(extern_crate.path_len),\n         );\n         let old_rank = match *old_extern_crate {\n             None => (false, false, cmp::Reverse(usize::max_value())),\n             Some(ref c) => (\n                 true,\n-                c.direct,\n+                c.is_direct(),\n                 cmp::Reverse(c.path_len),\n             ),\n         };\n@@ -460,7 +461,7 @@ impl<'a> CrateLoader<'a> {\n         drop(old_extern_crate);\n \n         // Propagate the extern crate info to dependencies.\n-        extern_crate.direct = false;\n+        extern_crate.dependency_of = cnum;\n         for &dep_cnum in cmeta.dependencies.borrow().iter() {\n             self.update_extern_crate(dep_cnum, extern_crate, visited);\n         }\n@@ -1030,7 +1031,7 @@ impl<'a> CrateLoader<'a> {\n                         src: ExternCrateSource::Extern(def_id),\n                         span: item.span,\n                         path_len,\n-                        direct: true,\n+                        dependency_of: LOCAL_CRATE,\n                     },\n                     &mut FxHashSet::default(),\n                 );\n@@ -1057,7 +1058,7 @@ impl<'a> CrateLoader<'a> {\n                 span,\n                 // to have the least priority in `update_extern_crate`\n                 path_len: usize::max_value(),\n-                direct: true,\n+                dependency_of: LOCAL_CRATE,\n             },\n             &mut FxHashSet::default(),\n         );\n@@ -1081,7 +1082,7 @@ impl<'a> CrateLoader<'a> {\n                 span,\n                 // to have the least priority in `update_extern_crate`\n                 path_len: usize::max_value(),\n-                direct: true,\n+                dependency_of: LOCAL_CRATE,\n             },\n             &mut FxHashSet::default(),\n         );"}, {"sha": "83182df31cf528bb2a4758eecd56357fe743365e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -233,7 +233,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n     missing_extern_crate_item => {\n         let r = match *cdata.extern_crate.borrow() {\n-            Some(extern_crate) if !extern_crate.direct => true,\n+            Some(extern_crate) if !extern_crate.is_direct() => true,\n             _ => false,\n         };\n         r"}, {"sha": "6bed321d27f82a92bd7037a82b3b890cca5786c9", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 54, "deletions": 24, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1394,30 +1394,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if self.method_exists(field, expr_t, expr.hir_id, true) {\n             self.ban_take_value_of_method(expr, expr_t, field);\n         } else if !expr_t.is_primitive_ty() {\n-            let mut err = self.no_such_field_err(field.span, field, expr_t);\n-\n-            match expr_t.kind {\n-                ty::Adt(def, _) if !def.is_enum() => {\n-                    self.suggest_fields_on_recordish(&mut err, def, field);\n-                }\n-                ty::Array(_, len) => {\n-                    self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n-                }\n-                ty::RawPtr(..) => {\n-                    self.suggest_first_deref_field(&mut err, expr, base, field);\n-                }\n-                _ => {}\n-            }\n-\n-            if field.name == kw::Await {\n-                // We know by construction that `<expr>.await` is either on Rust 2015\n-                // or results in `ExprKind::Await`. Suggest switching the edition to 2018.\n-                err.note(\"to `.await` a `Future`, switch to Rust 2018\");\n-                err.help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\");\n-                err.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n-            }\n-\n-            err.emit();\n+            self.ban_nonexisting_field(field, base, expr, expr_t);\n         } else {\n             type_error_struct!(\n                 self.tcx().sess,\n@@ -1433,6 +1410,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx().types.err\n     }\n \n+    fn ban_nonexisting_field(\n+        &self,\n+        field: ast::Ident,\n+        base: &'tcx hir::Expr,\n+        expr: &'tcx hir::Expr,\n+        expr_t: Ty<'tcx>,\n+    ) {\n+        let mut err = self.no_such_field_err(field.span, field, expr_t);\n+\n+        match expr_t.peel_refs().kind {\n+            ty::Array(_, len) => {\n+                self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n+            }\n+            ty::RawPtr(..) => {\n+                self.suggest_first_deref_field(&mut err, expr, base, field);\n+            }\n+            ty::Adt(def, _) if !def.is_enum() => {\n+                self.suggest_fields_on_recordish(&mut err, def, field);\n+            }\n+            ty::Param(param_ty) => {\n+                self.point_at_param_definition(&mut err, param_ty);\n+            }\n+            _ => {}\n+        }\n+\n+        if field.name == kw::Await {\n+            // We know by construction that `<expr>.await` is either on Rust 2015\n+            // or results in `ExprKind::Await`. Suggest switching the edition to 2018.\n+            err.note(\"to `.await` a `Future`, switch to Rust 2018\");\n+            err.help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\");\n+            err.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n+        }\n+\n+        err.emit();\n+    }\n+\n     fn ban_private_field_access(\n         &self,\n         expr: &hir::Expr,\n@@ -1495,6 +1508,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn point_at_param_definition(&self, err: &mut DiagnosticBuilder<'_>, param: ty::ParamTy) {\n+        let generics = self.tcx.generics_of(self.body_id.owner_def_id());\n+        let generic_param = generics.type_param(&param, self.tcx);\n+        if let ty::GenericParamDefKind::Type{synthetic: Some(..), ..} = generic_param.kind {\n+            return;\n+        }\n+        let param_def_id = generic_param.def_id;\n+        let param_hir_id = match self.tcx.hir().as_local_hir_id(param_def_id) {\n+            Some(x) => x,\n+            None    => return,\n+        };\n+        let param_span = self.tcx.hir().span(param_hir_id);\n+        let param_name = self.tcx.hir().ty_param_name(param_hir_id);\n+\n+        err.span_label(param_span, &format!(\"type parameter '{}' declared here\", param_name));\n+    }\n+\n     fn suggest_fields_on_recordish(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "aeb2c40e2ef832f7ac4cb377e210cbbabedf388e", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -63,7 +63,7 @@ fn equate_intrinsic_type<'tcx>(\n }\n \n /// Returns `true` if the given intrinsic is unsafe to call or not.\n-pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n+pub fn intrinsic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n     match intrinsic {\n         \"size_of\" | \"min_align_of\" | \"needs_drop\" |\n         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n@@ -130,7 +130,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n     } else if &name[..] == \"abort\" || &name[..] == \"unreachable\" {\n         (0, Vec::new(), tcx.types.never, hir::Unsafety::Unsafe)\n     } else {\n-        let unsafety = intrisic_operation_unsafety(&name[..]);\n+        let unsafety = intrinsic_operation_unsafety(&name[..]);\n         let (n_tps, inputs, output) = match &name[..] {\n             \"breakpoint\" => (0, Vec::new(), tcx.mk_unit()),\n             \"size_of\" |"}, {"sha": "8c3d6357f0bbf32ed17ef1a39bb87c06ae066bb6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -16,7 +16,7 @@\n \n use crate::astconv::{AstConv, Bounds, SizedByDefault};\n use crate::constrained_generic_params as cgp;\n-use crate::check::intrinsic::intrisic_operation_unsafety;\n+use crate::check::intrinsic::intrinsic_operation_unsafety;\n use crate::lint;\n use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n@@ -2366,7 +2366,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     abi: abi::Abi,\n ) -> ty::PolyFnSig<'tcx> {\n     let unsafety = if abi == abi::Abi::RustIntrinsic {\n-        intrisic_operation_unsafety(&*tcx.item_name(def_id).as_str())\n+        intrinsic_operation_unsafety(&*tcx.item_name(def_id).as_str())\n     } else {\n         hir::Unsafety::Unsafe\n     };"}, {"sha": "3e389c40fbc0107b52f75afe375fe881df49390d", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -567,7 +567,7 @@ mod prim_array { }\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n /// A dynamically-sized view into a contiguous sequence, `[T]`. Contiguous here\n-/// means that elements are layed out so that every element is the same\n+/// means that elements are laid out so that every element is the same\n /// distance from its neighbors.\n ///\n /// *[See also the `std::slice` module](slice/index.html).*"}, {"sha": "4b9c2d13f26b95b82d460c498faf7cb3a268125b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1657,9 +1657,18 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::StmtKind::Semi(ref expr) => {\n-                self.space_if_not_bol();\n-                self.print_expr_outer_attr_style(expr, false);\n-                self.s.word(\";\");\n+                match expr.kind {\n+                    // Filter out empty `Tup` exprs created for the `redundant_semicolon`\n+                    // lint, as they shouldn't be visible and interact poorly\n+                    // with proc macros.\n+                    ast::ExprKind::Tup(ref exprs) if exprs.is_empty()\n+                      && expr.attrs.is_empty() => (),\n+                    _ => {\n+                        self.space_if_not_bol();\n+                        self.print_expr_outer_attr_style(expr, false);\n+                        self.s.word(\";\");\n+                    }\n+                }\n             }\n             ast::StmtKind::Mac(ref mac) => {\n                 let (ref mac, style, ref attrs) = **mac;"}, {"sha": "8fc64021b51fcc50af8f0cfda4a62bcd9768ede5", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -695,7 +695,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         // Now create a vector containing all the arguments\n         let args = locals.into_iter().chain(counts.into_iter());\n \n-        let args_array = self.ecx.expr_vec(self.fmtsp, args.collect());\n+        let args_array = self.ecx.expr_vec(self.macsp, args.collect());\n \n         // Constructs an AST equivalent to:\n         //\n@@ -724,12 +724,12 @@ impl<'a, 'b> Context<'a, 'b> {\n         //\n         // But the nested match expression is proved to perform not as well\n         // as series of let's; the first approach does.\n-        let pat = self.ecx.pat_tuple(self.fmtsp, pats);\n-        let arm = self.ecx.arm(self.fmtsp, pat, args_array);\n-        let head = self.ecx.expr(self.fmtsp, ast::ExprKind::Tup(heads));\n-        let result = self.ecx.expr_match(self.fmtsp, head, vec![arm]);\n+        let pat = self.ecx.pat_tuple(self.macsp, pats);\n+        let arm = self.ecx.arm(self.macsp, pat, args_array);\n+        let head = self.ecx.expr(self.macsp, ast::ExprKind::Tup(heads));\n+        let result = self.ecx.expr_match(self.macsp, head, vec![arm]);\n \n-        let args_slice = self.ecx.expr_addr_of(self.fmtsp, result);\n+        let args_slice = self.ecx.expr_addr_of(self.macsp, result);\n \n         // Now create the fmt::Arguments struct with all our locals we created.\n         let (fn_name, fn_args) = if self.all_pieces_simple {"}, {"sha": "44a34070deccd9ac39fb760e5a6f2b30b3cd7531", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -83,11 +83,11 @@ symbols! {\n         Yield:              \"yield\",\n \n         // Edition-specific keywords that are used in stable Rust.\n+        Async:              \"async\", // >= 2018 Edition only\n+        Await:              \"await\", // >= 2018 Edition only\n         Dyn:                \"dyn\", // >= 2018 Edition only\n \n         // Edition-specific keywords that are used in unstable Rust or reserved for future use.\n-        Async:              \"async\", // >= 2018 Edition only\n-        Await:              \"await\", // >= 2018 Edition only\n         Try:                \"try\", // >= 2018 Edition only\n \n         // Special lifetime names\n@@ -1088,11 +1088,11 @@ pub mod sym {\n \n impl Symbol {\n     fn is_used_keyword_2018(self) -> bool {\n-        self == kw::Dyn\n+        self >= kw::Async && self <= kw::Dyn\n     }\n \n     fn is_unused_keyword_2018(self) -> bool {\n-        self >= kw::Async && self <= kw::Try\n+        self == kw::Try\n     }\n \n     /// Used for sanity checking rustdoc keyword sections."}, {"sha": "9e78f7c512014ac225eba8dd07f582d0a3eac61c", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -3,21 +3,21 @@\n #![allow(non_camel_case_types)]\n \n mod outer_mod {\n-    pub mod await { //~ ERROR expected identifier, found reserved keyword `await`\n-        pub struct await; //~ ERROR expected identifier, found reserved keyword `await`\n+    pub mod await { //~ ERROR expected identifier, found keyword `await`\n+        pub struct await; //~ ERROR expected identifier, found keyword `await`\n     }\n }\n-use self::outer_mod::await::await; //~ ERROR expected identifier, found reserved keyword `await`\n-//~^ ERROR expected identifier, found reserved keyword `await`\n+use self::outer_mod::await::await; //~ ERROR expected identifier, found keyword `await`\n+//~^ ERROR expected identifier, found keyword `await`\n \n struct Foo { await: () }\n-//~^ ERROR expected identifier, found reserved keyword `await`\n+//~^ ERROR expected identifier, found keyword `await`\n \n impl Foo { fn await() {} }\n-//~^ ERROR expected identifier, found reserved keyword `await`\n+//~^ ERROR expected identifier, found keyword `await`\n \n macro_rules! await {\n-//~^ ERROR expected identifier, found reserved keyword `await`\n+//~^ ERROR expected identifier, found keyword `await`\n     () => {}\n }\n "}, {"sha": "0e859466322c0dac773081a756abc5a66e447996", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,68 +1,68 @@\n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:6:13\n    |\n LL |     pub mod await {\n-   |             ^^^^^ expected identifier, found reserved keyword\n+   |             ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     pub mod r#await {\n    |             ^^^^^^^\n \n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:7:20\n    |\n LL |         pub struct await;\n-   |                    ^^^^^ expected identifier, found reserved keyword\n+   |                    ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |         pub struct r#await;\n    |                    ^^^^^^^\n \n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:10:22\n    |\n LL | use self::outer_mod::await::await;\n-   |                      ^^^^^ expected identifier, found reserved keyword\n+   |                      ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::r#await::await;\n    |                      ^^^^^^^\n \n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:10:29\n    |\n LL | use self::outer_mod::await::await;\n-   |                             ^^^^^ expected identifier, found reserved keyword\n+   |                             ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::await::r#await;\n    |                             ^^^^^^^\n \n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:13:14\n    |\n LL | struct Foo { await: () }\n-   |              ^^^^^ expected identifier, found reserved keyword\n+   |              ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | struct Foo { r#await: () }\n    |              ^^^^^^^\n \n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:16:15\n    |\n LL | impl Foo { fn await() {} }\n-   |               ^^^^^ expected identifier, found reserved keyword\n+   |               ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | impl Foo { fn r#await() {} }\n    |               ^^^^^^^\n \n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:19:14\n    |\n LL | macro_rules! await {\n-   |              ^^^^^ expected identifier, found reserved keyword\n+   |              ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | macro_rules! r#await {"}, {"sha": "7ce52259acac317d7c0d5db2e8959c0648f2a689", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -7,9 +7,9 @@ mod outer_mod {\n     }\n }\n use self::outer_mod::await::await; //~ ERROR expected identifier\n-    //~^ ERROR expected identifier, found reserved keyword `await`\n+    //~^ ERROR expected identifier, found keyword `await`\n \n-macro_rules! await { () => {}; } //~ ERROR expected identifier, found reserved keyword `await`\n+macro_rules! await { () => {}; } //~ ERROR expected identifier, found keyword `await`\n \n fn main() {\n     await!(); //~ ERROR expected expression, found `)`"}, {"sha": "71f403f278eb3193b4012400fd5f4f761c681e45", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,48 +1,48 @@\n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:5:13\n    |\n LL |     pub mod await {\n-   |             ^^^^^ expected identifier, found reserved keyword\n+   |             ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     pub mod r#await {\n    |             ^^^^^^^\n \n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:6:20\n    |\n LL |         pub struct await;\n-   |                    ^^^^^ expected identifier, found reserved keyword\n+   |                    ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |         pub struct r#await;\n    |                    ^^^^^^^\n \n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:9:22\n    |\n LL | use self::outer_mod::await::await;\n-   |                      ^^^^^ expected identifier, found reserved keyword\n+   |                      ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::r#await::await;\n    |                      ^^^^^^^\n \n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:9:29\n    |\n LL | use self::outer_mod::await::await;\n-   |                             ^^^^^ expected identifier, found reserved keyword\n+   |                             ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::await::r#await;\n    |                             ^^^^^^^\n \n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:12:14\n    |\n LL | macro_rules! await { () => {}; }\n-   |              ^^^^^ expected identifier, found reserved keyword\n+   |              ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | macro_rules! r#await { () => {}; }"}, {"sha": "ef7edf85049527da8c18e56036a22c6266d7a929", "filename": "src/test/ui/async-await/no-const-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -3,5 +3,5 @@\n // compile-flags: --crate-type lib\n \n pub const async fn x() {}\n-//~^ ERROR expected identifier, found reserved keyword `async`\n+//~^ ERROR expected identifier, found keyword `async`\n //~^^ expected `:`, found keyword `fn`"}, {"sha": "fe0591457853e3dfd72b931a413294b536f8abf8", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,8 +1,8 @@\n-error: expected identifier, found reserved keyword `async`\n+error: expected identifier, found keyword `async`\n   --> $DIR/no-const-async.rs:5:11\n    |\n LL | pub const async fn x() {}\n-   |           ^^^^^ expected identifier, found reserved keyword\n+   |           ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | pub const r#async fn x() {}"}, {"sha": "7bd0eaf77a95d7369dec79a8ed5921a9b42806c1", "filename": "src/test/ui/derived-errors/issue-30580.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fderived-errors%2Fissue-30580.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fderived-errors%2Fissue-30580.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-30580.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -2,7 +2,7 @@ error[E0609]: no field `c` on type `&Foo`\n   --> $DIR/issue-30580.rs:12:11\n    |\n LL |         b.c;\n-   |           ^\n+   |           ^ help: a field with a similar name exists: `a`\n \n error: aborting due to previous error\n "}, {"sha": "02be11d1fd0e542237e050d57a3e8cf7179a84f0", "filename": "src/test/ui/duplicate_entry_error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -7,7 +7,7 @@ LL | |     loop {}\n LL | | }\n    | |_^\n    |\n-   = note: first defined in crate `std`.\n+   = note: first defined in crate `std` (which `duplicate_entry_error` depends on).\n \n error: aborting due to previous error\n "}, {"sha": "9f34a3887b7f1dcc4102a7d8f9272cabaacbad19", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -5,7 +5,7 @@\n extern crate edition_kw_macro_2018;\n \n mod one_async {\n-    produces_async! {} //~ ERROR expected identifier, found reserved keyword\n+    produces_async! {} //~ ERROR expected identifier, found keyword\n }\n mod two_async {\n     produces_async_raw! {} // OK"}, {"sha": "04a70cf98302f3c022bd3aa0fa58748791b7161b", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,8 +1,8 @@\n-error: expected identifier, found reserved keyword `async`\n+error: expected identifier, found keyword `async`\n   --> $DIR/edition-keywords-2015-2018-expansion.rs:8:5\n    |\n LL |     produces_async! {}\n-   |     ^^^^^^^^^^^^^^^^^^ expected identifier, found reserved keyword\n+   |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers"}, {"sha": "dbc0465b08e77931a29d1d10b1137e98829f140f", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -5,7 +5,7 @@\n extern crate edition_kw_macro_2015;\n \n pub fn check_async() {\n-    let mut async = 1; //~ ERROR expected identifier, found reserved keyword `async`\n+    let mut async = 1; //~ ERROR expected identifier, found keyword `async`\n     let mut r#async = 1; // OK\n \n     r#async = consumes_async!(async); // OK\n@@ -15,6 +15,6 @@ pub fn check_async() {\n \n     if passes_ident!(async) == 1 {}\n     if passes_ident!(r#async) == 1 {} // OK\n-    module::async(); //~ ERROR expected identifier, found reserved keyword `async`\n+    module::async(); //~ ERROR expected identifier, found keyword `async`\n     module::r#async(); // OK\n }"}, {"sha": "be991cd0c81283faea65874a5db4e60e8484e069", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,18 +1,18 @@\n-error: expected identifier, found reserved keyword `async`\n+error: expected identifier, found keyword `async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:8:13\n    |\n LL |     let mut async = 1;\n-   |             ^^^^^ expected identifier, found reserved keyword\n+   |             ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let mut r#async = 1;\n    |             ^^^^^^^\n \n-error: expected identifier, found reserved keyword `async`\n+error: expected identifier, found keyword `async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:18:13\n    |\n LL |     module::async();\n-   |             ^^^^^ expected identifier, found reserved keyword\n+   |             ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     module::r#async();"}, {"sha": "a8e69fed6959ee679922c511db5e8f11276b7fc4", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -5,7 +5,7 @@\n extern crate edition_kw_macro_2018;\n \n mod one_async {\n-    produces_async! {} //~ ERROR expected identifier, found reserved keyword `async`\n+    produces_async! {} //~ ERROR expected identifier, found keyword `async`\n }\n mod two_async {\n     produces_async_raw! {} // OK"}, {"sha": "fb12051eed4090c52f82264124e3bf5b5b52e53e", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,8 +1,8 @@\n-error: expected identifier, found reserved keyword `async`\n+error: expected identifier, found keyword `async`\n   --> $DIR/edition-keywords-2018-2018-expansion.rs:8:5\n    |\n LL |     produces_async! {}\n-   |     ^^^^^^^^^^^^^^^^^^ expected identifier, found reserved keyword\n+   |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers"}, {"sha": "5aca0839f0f15cfefc8c19ea23b20b3273dfe454", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -5,7 +5,7 @@\n extern crate edition_kw_macro_2018;\n \n pub fn check_async() {\n-    let mut async = 1; //~ ERROR expected identifier, found reserved keyword `async`\n+    let mut async = 1; //~ ERROR expected identifier, found keyword `async`\n     let mut r#async = 1; // OK\n \n     r#async = consumes_async!(async); // OK\n@@ -15,6 +15,6 @@ pub fn check_async() {\n \n     if passes_ident!(async) == 1 {}\n     if passes_ident!(r#async) == 1 {} // OK\n-    module::async(); //~ ERROR expected identifier, found reserved keyword `async`\n+    module::async(); //~ ERROR expected identifier, found keyword `async`\n     module::r#async(); // OK\n }"}, {"sha": "93a7627f88713fc10ea1ebde6cf95723c27a55d5", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,18 +1,18 @@\n-error: expected identifier, found reserved keyword `async`\n+error: expected identifier, found keyword `async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:8:13\n    |\n LL |     let mut async = 1;\n-   |             ^^^^^ expected identifier, found reserved keyword\n+   |             ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let mut r#async = 1;\n    |             ^^^^^^^\n \n-error: expected identifier, found reserved keyword `async`\n+error: expected identifier, found keyword `async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:18:13\n    |\n LL |     module::async();\n-   |             ^^^^^ expected identifier, found reserved keyword\n+   |             ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     module::r#async();"}, {"sha": "d4b59a1148e60b5c66fcdee0163b0cf7ebfc12a1", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -4,7 +4,7 @@ error[E0152]: duplicate lang item found: `arc`.\n LL | struct Foo;\n    | ^^^^^^^^^^^\n    |\n-   = note: first defined in crate `alloc`.\n+   = note: first defined in crate `alloc` (which `std` depends on).\n \n error: aborting due to previous error\n "}, {"sha": "8c6c26f7b2d819d7c48f9f4ece2e926e6e80080e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-rustc_deprecated.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,44 +1,45 @@\n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:7:1\n    |\n LL | #![rustc_deprecated()]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:10:1\n    |\n LL | #[rustc_deprecated()]\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:13:17\n    |\n LL |     mod inner { #![rustc_deprecated()] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:16:5\n    |\n LL |     #[rustc_deprecated()] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:19:5\n    |\n LL |     #[rustc_deprecated()] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:22:5\n    |\n LL |     #[rustc_deprecated()] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:25:5\n    |\n LL |     #[rustc_deprecated()] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n \n+For more information about this error, try `rustc --explain E0734`."}, {"sha": "09dabd293ff97bf01dd24dda456e04f756583d75", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-stable.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,44 +1,45 @@\n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:7:1\n    |\n LL | #![stable()]\n    | ^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:10:1\n    |\n LL | #[stable()]\n    | ^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:13:17\n    |\n LL |     mod inner { #![stable()] }\n    |                 ^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:16:5\n    |\n LL |     #[stable()] fn f() { }\n    |     ^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:19:5\n    |\n LL |     #[stable()] struct S;\n    |     ^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:22:5\n    |\n LL |     #[stable()] type T = S;\n    |     ^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:25:5\n    |\n LL |     #[stable()] impl S { }\n    |     ^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n \n+For more information about this error, try `rustc --explain E0734`."}, {"sha": "49da2c59580e7e1d86447902dccdf363b1e60f89", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-unstable.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,44 +1,45 @@\n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:7:1\n    |\n LL | #![unstable()]\n    | ^^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:10:1\n    |\n LL | #[unstable()]\n    | ^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:13:17\n    |\n LL |     mod inner { #![unstable()] }\n    |                 ^^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:16:5\n    |\n LL |     #[unstable()] fn f() { }\n    |     ^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:19:5\n    |\n LL |     #[unstable()] struct S;\n    |     ^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:22:5\n    |\n LL |     #[unstable()] type T = S;\n    |     ^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:25:5\n    |\n LL |     #[unstable()] impl S { }\n    |     ^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n \n+For more information about this error, try `rustc --explain E0734`."}, {"sha": "a71d26ce16f5b6f407ce1d593bc24b845b2ed80a", "filename": "src/test/ui/feature-gates/feature-gate-staged_api.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-staged_api.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-staged_api.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-staged_api.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,14 +1,15 @@\n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/feature-gate-staged_api.rs:1:1\n    |\n LL | #![stable(feature = \"a\", since = \"b\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/feature-gate-staged_api.rs:8:1\n    |\n LL | #[stable(feature = \"a\", since = \"b\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0734`."}, {"sha": "88f70f584022d39d520079b39b6fe613233fbde6", "filename": "src/test/ui/issues/issue-27592.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fissues%2Fissue-27592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fissues%2Fissue-27592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27592.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -15,5 +15,5 @@ impl ::std::fmt::Write for Stream {\n fn main() {\n     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n     //~^ ERROR cannot return value referencing temporary value\n-    //~| ERROR cannot return value referencing temporary value\n+    //~| ERROR cannot return reference to temporary value\n }"}, {"sha": "c8649d82d7451c9a2cfe8fe5debe645744558e39", "filename": "src/test/ui/issues/issue-27592.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -7,14 +7,11 @@ LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n    |              |                  temporary value created here\n    |              returns a value referencing data owned by the current function\n \n-error[E0515]: cannot return value referencing temporary value\n+error[E0515]: cannot return reference to temporary value\n   --> $DIR/issue-27592.rs:16:14\n    |\n LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n-   |              ^^^^^^^^^^^^^----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |            |\n-   |              |            temporary value created here\n-   |              returns a value referencing data owned by the current function\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c7618e0835b8d93e613213b76d5da9f21f64200c", "filename": "src/test/ui/issues/issue-31011.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -4,6 +4,9 @@ error[E0609]: no field `trace` on type `&T`\n LL |         if $ctx.trace {\n    |                 ^^^^^\n ...\n+LL | fn wrap<T>(context: &T) -> ()\n+   |         - type parameter 'T' declared here\n+LL | {\n LL |     log!(context, \"entered wrapper\");\n    |     --------------------------------- in this macro invocation\n "}, {"sha": "5a94ccd746803333ed99a09d0cfc0a32e8b1ac10", "filename": "src/test/ui/lint/redundant-semicolon/auxiliary/redundant-semi-proc-macro-def.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fauxiliary%2Fredundant-semi-proc-macro-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fauxiliary%2Fredundant-semi-proc-macro-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fauxiliary%2Fredundant-semi-proc-macro-def.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -0,0 +1,12 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type=\"proc-macro\"]\n+#![crate_name=\"redundant_semi_proc_macro\"]\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn should_preserve_spans(_attr: TokenStream, item: TokenStream) -> TokenStream {\n+    eprintln!(\"{:?}\", item);\n+    item\n+}"}, {"sha": "f207b235735feae397fc3b89799930caf7f4fc02", "filename": "src/test/ui/lint/redundant-semicolon/redundant-semi-proc-macro.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -0,0 +1,19 @@\n+// aux-build:redundant-semi-proc-macro-def.rs\n+\n+#![deny(redundant_semicolon)]\n+extern crate redundant_semi_proc_macro;\n+use redundant_semi_proc_macro::should_preserve_spans;\n+\n+#[should_preserve_spans]\n+fn span_preservation()  {\n+    let tst = 123;; //~ ERROR unnecessary trailing semicolon\n+    match tst {\n+        // Redundant semicolons are parsed as empty tuple exprs\n+        // for the lint, so ensure the lint doesn't affect\n+        // empty tuple exprs explicitly in source.\n+        123 => (),\n+        _ => ()\n+    };;; //~ ERROR unnecessary trailing semicolons\n+}\n+\n+fn main() {}"}, {"sha": "5f289c0914d6e9873d4cf3756c16a3f0c0c7af12", "filename": "src/test/ui/lint/redundant-semicolon/redundant-semi-proc-macro.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -0,0 +1,21 @@\n+TokenStream [Ident { ident: \"fn\", span: #0 bytes(197..199) }, Ident { ident: \"span_preservation\", span: #0 bytes(200..217) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(217..219) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(227..230) }, Ident { ident: \"tst\", span: #0 bytes(231..234) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(235..236) }, Literal { lit: Lit { kind: Integer, symbol: 123, suffix: None }, span: Span { lo: BytePos(237), hi: BytePos(240), ctxt: #0 } }, Punct { ch: ';', spacing: Joint, span: #0 bytes(240..241) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(241..242) }, Ident { ident: \"match\", span: #0 bytes(288..293) }, Ident { ident: \"tst\", span: #0 bytes(294..297) }, Group { delimiter: Brace, stream: TokenStream [Literal { lit: Lit { kind: Integer, symbol: 123, suffix: None }, span: Span { lo: BytePos(482), hi: BytePos(485), ctxt: #0 } }, Punct { ch: '=', spacing: Joint, span: #0 bytes(486..488) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(486..488) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(489..491) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(491..492) }, Ident { ident: \"_\", span: #0 bytes(501..502) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(503..505) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(503..505) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(506..508) }], span: #0 bytes(298..514) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(514..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(516..517) }], span: #0 bytes(221..561) }]\n+error: unnecessary trailing semicolon\n+  --> $DIR/redundant-semi-proc-macro.rs:9:19\n+   |\n+LL |     let tst = 123;;\n+   |                   ^ help: remove this semicolon\n+   |\n+note: lint level defined here\n+  --> $DIR/redundant-semi-proc-macro.rs:3:9\n+   |\n+LL | #![deny(redundant_semicolon)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary trailing semicolons\n+  --> $DIR/redundant-semi-proc-macro.rs:16:7\n+   |\n+LL |     };;;\n+   |       ^^ help: remove these semicolons\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e6d24348ca8250de54e94990b48137372bb06013", "filename": "src/test/ui/panic-handler/panic-handler-std.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -6,7 +6,7 @@ LL | |     loop {}\n LL | | }\n    | |_^\n    |\n-   = note: first defined in crate `std`.\n+   = note: first defined in crate `std` (which `panic_handler_std` depends on).\n \n error: argument should be `&PanicInfo`\n   --> $DIR/panic-handler-std.rs:7:16"}, {"sha": "66fd5893af5ee69b4e2ba754cc278d17d30d285a", "filename": "src/test/ui/parser/mut-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n     //~| ERROR `mut` must be attached to each individual binding\n     //~| ERROR expected identifier, found reserved keyword `yield`\n     //~| ERROR expected identifier, found reserved keyword `become`\n-    //~| ERROR expected identifier, found reserved keyword `await`\n+    //~| ERROR expected identifier, found keyword `await`\n \n     struct W<T, U>(T, U);\n     struct B { f: Box<u8> }"}, {"sha": "b1cf99189f17dcbb30fa0d9631b356b527b261a2", "filename": "src/test/ui/parser/mut-patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -62,11 +62,11 @@ help: you can escape reserved keywords to use them as identifiers\n LL |     let mut mut yield(r#become, await) = r#yield(0, 0);\n    |                       ^^^^^^^^\n \n-error: expected identifier, found reserved keyword `await`\n+error: expected identifier, found keyword `await`\n   --> $DIR/mut-patterns.rs:26:31\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n-   |                               ^^^^^ expected identifier, found reserved keyword\n+   |                               ^^^^^ expected identifier, found keyword\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let mut mut yield(become, r#await) = r#yield(0, 0);"}, {"sha": "32b0f405d6fb0a1319f01462665cd3f351f47e3e", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged-force-unstable.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,20 +1,21 @@\n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged-force-unstable.rs:3:1\n    |\n LL | #[unstable()]\n    | ^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged-force-unstable.rs:4:1\n    |\n LL | #[stable()]\n    | ^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged-force-unstable.rs:5:1\n    |\n LL | #[rustc_deprecated()]\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0734`."}, {"sha": "7648effc480b54397d8da2e7204330d57ae3b150", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -1,20 +1,21 @@\n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged.rs:1:1\n    |\n LL | #[unstable()]\n    | ^^^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged.rs:2:1\n    |\n LL | #[stable()]\n    | ^^^^^^^^^^^\n \n-error: stability attributes may not be used outside of the standard library\n+error[E0734]: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged.rs:3:1\n    |\n LL | #[rustc_deprecated()]\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0734`."}, {"sha": "6526ef58a447978e0e096812f2dafc4464f55b2d", "filename": "src/test/ui/structs/struct-pat-derived-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -2,7 +2,7 @@ error[E0609]: no field `d` on type `&A`\n   --> $DIR/struct-pat-derived-error.rs:8:31\n    |\n LL |         let A { x, y } = self.d;\n-   |                               ^\n+   |                               ^ help: a field with a similar name exists: `b`\n \n error[E0026]: struct `A` does not have fields named `x`, `y`\n   --> $DIR/struct-pat-derived-error.rs:8:17"}, {"sha": "c57e8149574c94d3b2b90b050c1e9ce7de83f5cd", "filename": "src/test/ui/typeck/issue-52082-type-param-shadows-existing-type.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -0,0 +1,54 @@\n+// Fix issue 52082: Confusing error if accidentially defining a type paramter with the same name as\n+// an existing type\n+//\n+// To this end, make sure that when trying to retrieve a field of a (reference to) type parameter,\n+// rustc points to the point where the parameter was defined.\n+#[derive(Debug)]\n+struct Point\n+{\n+    x: i32,\n+    y: i32\n+}\n+\n+impl Point\n+{\n+    fn add(a: &Point, b: &Point) -> Point\n+    {\n+        Point {x: a.x + b.x, y: a.y + b.y}\n+    }\n+}\n+\n+trait Eq\n+{\n+    fn equals_ref<T>(a: &T, b: &T) -> bool;\n+    fn equals_val<T>(a: T, b: T) -> bool;\n+}\n+\n+impl Eq for Point\n+{\n+    fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+    {\n+        a.x == b.x && a.y == b.y //~ ERROR no field `x` on type `&Point` [E0609]\n+                                 //~|ERROR no field `x` on type `&Point` [E0609]\n+                                 //~|ERROR no field `y` on type `&Point` [E0609]\n+                                 //~|ERROR no field `y` on type `&Point` [E0609]\n+    }\n+\n+    fn equals_val<Point>(a: Point, b: Point) -> bool\n+    {\n+        a.x == b.x && a.y == b.y //~ ERROR no field `x` on type `Point` [E0609]\n+                                 //~|ERROR no field `x` on type `Point` [E0609]\n+                                 //~|ERROR no field `y` on type `Point` [E0609]\n+                                 //~|ERROR no field `y` on type `Point` [E0609]\n+    }\n+}\n+\n+fn main()\n+{\n+    let p1 = Point {x:  0, y: 10};\n+    let p2 = Point {x: 20, y: 42};\n+    println!(\"{:?}\", Point::add(&p1, &p2));\n+    println!(\"p1: {:?}, p2: {:?}\", p1, p2);\n+    println!(\"&p1 == &p2: {:?}\", Point::equals_ref(&p1, &p2));\n+    println!(\"p1 == p2: {:?}\", Point::equals_val(p1, p2));\n+}"}, {"sha": "4be4c91dfc2c3ffbd4cbac25a471e8aa3f8bb0d4", "filename": "src/test/ui/typeck/issue-52082-type-param-shadows-existing-type.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.stderr?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -0,0 +1,75 @@\n+error[E0609]: no field `x` on type `&Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:11\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |           ^\n+\n+error[E0609]: no field `x` on type `&Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:18\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                  ^\n+\n+error[E0609]: no field `y` on type `&Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:25\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                         ^\n+\n+error[E0609]: no field `y` on type `&Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:32\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                                ^\n+\n+error[E0609]: no field `x` on type `Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:11\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |           ^\n+\n+error[E0609]: no field `x` on type `Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:18\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                  ^\n+\n+error[E0609]: no field `y` on type `Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:25\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                         ^\n+\n+error[E0609]: no field `y` on type `Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:32\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                                ^\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0609`."}, {"sha": "a824546d436f7e64564472a3dbb51f3b981db48d", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e69433951e31f7bd746e22f516a48ad41623b/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=b61e69433951e31f7bd746e22f516a48ad41623b", "patch": "@@ -384,7 +384,7 @@ fn map_lib_features(base_src_path: &Path,\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n         if !filename.ends_with(\".rs\") || filename == \"features.rs\" ||\n-           filename == \"diagnostic_list.rs\" {\n+           filename == \"diagnostic_list.rs\" || filename == \"error_codes.rs\" {\n             return;\n         }\n "}]}