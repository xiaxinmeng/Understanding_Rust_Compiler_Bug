{"sha": "4fc181dd62f38c7b424e5261756a2f01ded68a5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzE4MWRkNjJmMzhjN2I0MjRlNTI2MTc1NmEyZjAxZGVkNjhhNWI=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-09T17:49:29Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-09T18:13:21Z"}, "message": "split guard into read and write types", "tree": {"sha": "4e7508d182ea51d434b1ec53fed5b0df6f20d9e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e7508d182ea51d434b1ec53fed5b0df6f20d9e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc181dd62f38c7b424e5261756a2f01ded68a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc181dd62f38c7b424e5261756a2f01ded68a5b", "html_url": "https://github.com/rust-lang/rust/commit/4fc181dd62f38c7b424e5261756a2f01ded68a5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc181dd62f38c7b424e5261756a2f01ded68a5b/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44abad5b12afa58b9f495593f1c8b090e644fd7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/44abad5b12afa58b9f495593f1c8b090e644fd7e", "html_url": "https://github.com/rust-lang/rust/commit/44abad5b12afa58b9f495593f1c8b090e644fd7e"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "1d1118aa694347d285a59dcbd4c45bf10f32812f", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc181dd62f38c7b424e5261756a2f01ded68a5b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc181dd62f38c7b424e5261756a2f01ded68a5b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=4fc181dd62f38c7b424e5261756a2f01ded68a5b", "patch": "@@ -22,7 +22,7 @@ use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n use crate::sys_common::mutex::{StaticMutex, StaticMutexGuard};\n-use crate::sys_common::rwlock::{RWLockGuard, StaticRWLock};\n+use crate::sys_common::rwlock::{RWLockReadGuard, StaticRWLock};\n use crate::vec;\n \n use libc::{c_char, c_int, c_void};\n@@ -496,7 +496,7 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n \n static ENV_LOCK: StaticRWLock = StaticRWLock::new();\n \n-pub fn env_read_lock() -> RWLockGuard {\n+pub fn env_read_lock() -> RWLockReadGuard {\n     ENV_LOCK.read_with_guard()\n }\n "}, {"sha": "41e8ad772946388da8fafb48f1ecf66bfbc31d7b", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4fc181dd62f38c7b424e5261756a2f01ded68a5b/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc181dd62f38c7b424e5261756a2f01ded68a5b/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=4fc181dd62f38c7b424e5261756a2f01ded68a5b", "patch": "@@ -102,47 +102,46 @@ impl StaticRWLock {\n     ///\n     /// The lock is automatically unlocked when the returned guard is dropped.\n     #[inline]\n-    pub fn read_with_guard(&'static self) -> RWLockGuard {\n+    pub fn read_with_guard(&'static self) -> RWLockReadGuard {\n         // Safety: All methods require static references, therefore self\n         // cannot be moved between invocations.\n         unsafe {\n             self.0.read();\n         }\n-        RWLockGuard(&self.0, GuardType::Read)\n+        RWLockReadGuard(&self.0)\n     }\n \n     /// Acquires write access to the underlying lock, blocking the current thread\n     /// to do so.\n     ///\n     /// The lock is automatically unlocked when the returned guard is dropped.\n     #[inline]\n-    pub fn write_with_guard(&'static self) -> RWLockGuard {\n+    pub fn write_with_guard(&'static self) -> RWLockWriteGuard {\n         // Safety: All methods require static references, therefore self\n         // cannot be moved between invocations.\n         unsafe {\n             self.0.write();\n         }\n-        RWLockGuard(&self.0, GuardType::Write)\n+        RWLockWriteGuard(&self.0)\n     }\n }\n \n #[cfg(unix)]\n-enum GuardType {\n-    Read,\n-    Write,\n+pub struct RWLockReadGuard(&'static RWLock);\n+\n+#[cfg(unix)]\n+impl Drop for RWLockReadGuard {\n+    fn drop(&mut self) {\n+        unsafe { self.0.read_unlock() }\n+    }\n }\n \n #[cfg(unix)]\n-pub struct RWLockGuard(&'static RWLock, GuardType);\n+pub struct RWLockWriteGuard(&'static RWLock);\n \n #[cfg(unix)]\n-impl Drop for RWLockGuard {\n+impl Drop for RWLockWriteGuard {\n     fn drop(&mut self) {\n-        unsafe {\n-            match &self.1 {\n-                GuardType::Read => self.0.read_unlock(),\n-                GuardType::Write => self.0.write_unlock(),\n-            }\n-        }\n+        unsafe { self.0.write_unlock() }\n     }\n }"}]}