{"sha": "9f705575452e04ce2d8cb88e5f5accdc4d54e650", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNzA1NTc1NDUyZTA0Y2UyZDhjYjg4ZTVmNWFjY2RjNGQ1NGU2NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T14:38:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T14:38:04Z"}, "message": "Auto merge of #38108 - linclark:32777-E0328, r=GuillaumeGomez\n\nAdd error explanation for E0328.\n\nThis PR adds an explanation for an error in the list in #32777.\n\nI haven't used this feature myself, so I was piecing it together from the docs. Please let me know if any changes in wording should be made.\n\nOne problem: When I followed the instructions in CONTRIBUTING.md, it said to run `make check-stage1` before posting the PR. This reported failures, but they seemed to be intermittent. I got different numbers of failures on each run. Here's the output for the last run\n\n```\nfailures:\n\n---- [run-make] run-make/rustc-macro-dep-files stdout ----\n\nerror: make failed\nstatus: exit code: 2\ncommand: \"make\"\nstdout:\n------------------------------------------\nDYLD_LIBRARY_PATH=\"/Users/lclark/Repos/rust/x86_64-apple-darwin/test/run-make/rustc-macro-dep-files.stage1-x86_64-apple-darwin:/Users/lclark/Repos/rust/x86_64-apple-darwin/stage1/lib:\" '/Users/lclark/Repos/rust/x86_64-apple-darwin/stage1/bin/rustc' --out-dir /Users/lclark/Repos/rust/x86_64-apple-darwin/test/run-make/rustc-macro-dep-files.stage1-x86_64-apple-darwin -L /Users/lclark/Repos/rust/x86_64-apple-darwin/test/run-make/rustc-macro-dep-files.stage1-x86_64-apple-darwin  foo.rs\nDYLD_LIBRARY_PATH=\"/Users/lclark/Repos/rust/x86_64-apple-darwin/test/run-make/rustc-macro-dep-files.stage1-x86_64-apple-darwin:/Users/lclark/Repos/rust/x86_64-apple-darwin/stage1/lib:\" '/Users/lclark/Repos/rust/x86_64-apple-darwin/stage1/bin/rustc' --out-dir /Users/lclark/Repos/rust/x86_64-apple-darwin/test/run-make/rustc-macro-dep-files.stage1-x86_64-apple-darwin -L /Users/lclark/Repos/rust/x86_64-apple-darwin/test/run-make/rustc-macro-dep-files.stage1-x86_64-apple-darwin  bar.rs --emit dep-info\n\n------------------------------------------\nstderr:\n------------------------------------------\ndyld: lazy symbol binding failed: Symbol not found: __ZN4core3fmt5write17h2f7663117dd4fb40E\n  Referenced from: /Users/lclark/Repos/rust/x86_64-apple-darwin/test/run-make/rustc-macro-dep-files.stage1-x86_64-apple-darwin/libfoo.dylib\n  Expected in: /Users/lclark/Repos/rust/x86_64-apple-darwin/stage1/lib/libstd-fdb5dc8c.dylib\n\ndyld: Symbol not found: __ZN4core3fmt5write17h2f7663117dd4fb40E\n  Referenced from: /Users/lclark/Repos/rust/x86_64-apple-darwin/test/run-make/rustc-macro-dep-files.stage1-x86_64-apple-darwin/libfoo.dylib\n  Expected in: /Users/lclark/Repos/rust/x86_64-apple-darwin/stage1/lib/libstd-fdb5dc8c.dylib\n\nmake[1]: *** [all] Trace/BPT trap: 5\n\n------------------------------------------\n\nthread '[run-make] run-make/rustc-macro-dep-files' panicked at 'explicit panic', /Users/lclark/Repos/rust/src/tools/compiletest/src/runtest.rs:2407\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\nfailures:\n    [run-make] run-make/rustc-macro-dep-files\n\ntest result: FAILED. 136 passed; 1 failed; 0 ignored; 0 measured\n\nthread 'main' panicked at 'Some tests failed', /Users/lclark/Repos/rust/src/tools/compiletest/src/main.rs:302\nmake: *** [tmp/check-stage1-T-x86_64-apple-darwin-H-x86_64-apple-darwin-rmake.ok] Error 101\n```\n\nr? @GuillaumeGomez", "tree": {"sha": "869ec14f574e51de474e3fd2b84ac4a75acd4064", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/869ec14f574e51de474e3fd2b84ac4a75acd4064"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f705575452e04ce2d8cb88e5f5accdc4d54e650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f705575452e04ce2d8cb88e5f5accdc4d54e650", "html_url": "https://github.com/rust-lang/rust/commit/9f705575452e04ce2d8cb88e5f5accdc4d54e650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f705575452e04ce2d8cb88e5f5accdc4d54e650/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ddc27025229c01bd1aeab9da3ebe34e3046da58", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddc27025229c01bd1aeab9da3ebe34e3046da58", "html_url": "https://github.com/rust-lang/rust/commit/3ddc27025229c01bd1aeab9da3ebe34e3046da58"}, {"sha": "ac28aba886c92ff3b81347425c7b09cdfaf88ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac28aba886c92ff3b81347425c7b09cdfaf88ec8", "html_url": "https://github.com/rust-lang/rust/commit/ac28aba886c92ff3b81347425c7b09cdfaf88ec8"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "6d943f3ca2ef69961ef928e7129a7d192d1ef247", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9f705575452e04ce2d8cb88e5f5accdc4d54e650/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f705575452e04ce2d8cb88e5f5accdc4d54e650/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9f705575452e04ce2d8cb88e5f5accdc4d54e650", "patch": "@@ -3038,6 +3038,42 @@ impl Foo for Bar {\n ```\n \"##,\n \n+E0328: r##\"\n+The Unsize trait should not be implemented directly. All implementations of\n+Unsize are provided automatically by the compiler.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0328\n+#![feature(unsize)]\n+\n+use std::marker::Unsize;\n+\n+pub struct MyType;\n+\n+impl<T> Unsize<T> for MyType {}\n+```\n+\n+If you are defining your own smart pointer type and would like to enable\n+conversion from a sized to an unsized type with the [DST coercion system]\n+(https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md), use\n+[`CoerceUnsized`](https://doc.rust-lang.org/std/ops/trait.CoerceUnsized.html)\n+instead.\n+\n+```\n+#![feature(coerce_unsized)]\n+\n+use std::ops::CoerceUnsized;\n+\n+pub struct MyType<T: ?Sized> {\n+    field_with_unsized_type: T,\n+}\n+\n+impl<T, U> CoerceUnsized<MyType<U>> for MyType<T>\n+    where T: CoerceUnsized<U> {}\n+```\n+\"##,\n+\n E0329: r##\"\n An attempt was made to access an associated constant through either a generic\n type parameter or `Self`. This is not supported yet. An example causing this\n@@ -4147,7 +4183,6 @@ register_diagnostics! {\n //  E0249,\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n     E0320, // recursive overflow during dropck\n-    E0328, // cannot implement Unsize explicitly\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition"}]}