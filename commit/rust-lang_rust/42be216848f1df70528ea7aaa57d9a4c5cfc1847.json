{"sha": "42be216848f1df70528ea7aaa57d9a4c5cfc1847", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYmUyMTY4NDhmMWRmNzA1MjhlYTdhYWE1N2Q5YTRjNWNmYzE4NDc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-22T03:10:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-22T03:11:38Z"}, "message": "mk: Refactor platform.mk a bit", "tree": {"sha": "2837b9f757dfd590e0a7de858ce31815d64221c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2837b9f757dfd590e0a7de858ce31815d64221c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42be216848f1df70528ea7aaa57d9a4c5cfc1847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42be216848f1df70528ea7aaa57d9a4c5cfc1847", "html_url": "https://github.com/rust-lang/rust/commit/42be216848f1df70528ea7aaa57d9a4c5cfc1847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42be216848f1df70528ea7aaa57d9a4c5cfc1847/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "html_url": "https://github.com/rust-lang/rust/commit/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0"}], "stats": {"total": 158, "additions": 77, "deletions": 81}, "files": [{"sha": "ce6d0a684e651cba05d3a672c2a8e14d9d036f8f", "filename": "mk/platform.mk", "status": "modified", "additions": 77, "deletions": 81, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/42be216848f1df70528ea7aaa57d9a4c5cfc1847/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/42be216848f1df70528ea7aaa57d9a4c5cfc1847/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=42be216848f1df70528ea7aaa57d9a4c5cfc1847", "patch": "@@ -19,6 +19,13 @@ endef\n $(foreach t,$(CFG_TARGET_TRIPLES),$(eval $(call DEF_HOST_VAR,$(t))))\n $(foreach t,$(CFG_TARGET_TRIPLES),$(info cfg: host for $(t) is $(HOST_$(t))))\n \n+# Ditto for OSTYPE\n+define DEF_OSTYPE_VAR\n+  OSTYPE_$(1) = $(subst $(firstword $(subst -, ,$(1)))-,,$(1))\n+endef\n+$(foreach t,$(CFG_TARGET_TRIPLES),$(eval $(call DEF_OSTYPE_VAR,$(t))))\n+$(foreach t,$(CFG_TARGET_TRIPLES),$(info cfg: os for $(t) is $(OSTYPE_$(t))))\n+\n # FIXME: no-omit-frame-pointer is just so that task_start_wrapper\n # has a frame pointer and the stack walker can understand it. Turning off\n # frame pointers everywhere is overkill\n@@ -33,6 +40,21 @@ CFG_DSYMUTIL := true\n # non-Darwin platforms; omitting it causes a full -R copy of lib/\n CFG_LIB_DSYM_GLOB=lib$(1)-*.dylib.dSYM\n \n+# Hack: not sure how to test if a file exists in make other than this\n+OS_SUPP = $(patsubst %,--suppressions=%,\\\n+      $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n+\n+ifneq ($(findstring mingw,$(CFG_OSTYPE)),)\n+  CFG_WINDOWSY := 1\n+endif\n+\n+ifdef CFG_DISABLE_OPTIMIZE_CXX\n+  $(info cfg: disabling C++ optimization (CFG_DISABLE_OPTIMIZE_CXX))\n+  CFG_GCCISH_CFLAGS += -O0\n+else\n+  CFG_GCCISH_CFLAGS += -O2\n+endif\n+\n ifneq ($(findstring freebsd,$(CFG_OSTYPE)),)\n   CFG_LIB_NAME=lib$(1).so\n   CFG_LIB_GLOB=lib$(1)-*.so\n@@ -112,32 +134,6 @@ ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n   CFG_INSTALL_NAME = -Wl,-install_name,@rpath/$(1)\n endif\n \n-# Hack: not sure how to test if a file exists in make other than this\n-OS_SUPP = $(patsubst %,--suppressions=%,\\\n-      $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n-\n-ifneq ($(findstring mingw,$(CFG_OSTYPE)),)\n-  CFG_WINDOWSY := 1\n-endif\n-\n-ifdef CFG_DISABLE_OPTIMIZE_CXX\n-  $(info cfg: disabling C++ optimization (CFG_DISABLE_OPTIMIZE_CXX))\n-  CFG_GCCISH_CFLAGS += -O0\n-else\n-  CFG_GCCISH_CFLAGS += -O2\n-endif\n-\n-CFG_TESTLIB=$(CFG_BUILD_DIR)/$(2)/$(strip \\\n- $(if $(findstring stage0,$(1)), \\\n-       stage0/$(CFG_LIBDIR), \\\n-      $(if $(findstring stage1,$(1)), \\\n-           stage1/$(CFG_LIBDIR), \\\n-          $(if $(findstring stage2,$(1)), \\\n-               stage2/$(CFG_LIBDIR), \\\n-               $(if $(findstring stage3,$(1)), \\\n-                    stage3/$(CFG_LIBDIR), \\\n-               )))))/rustc/$(CFG_BUILD_TRIPLE)/$(CFG_LIBDIR)\n-\n ifdef CFG_UNIXY\n   CFG_INFO := $(info cfg: unix-y environment)\n \n@@ -152,25 +148,26 @@ ifdef CFG_UNIXY\n     CFG_LIBUV_LINK_FLAGS=-lpthread -lkvm\n   endif\n \n-  ifdef CFG_ENABLE_MINGW_CROSS\n-    CFG_WINDOWSY := 1\n-    CFG_INFO := $(info cfg: mingw-cross)\n-    CFG_GCCISH_CROSS := i586-mingw32msvc-\n-    ifdef CFG_VALGRIND\n-      CFG_VALGRIND += wine\n-    endif\n+  # FIXME: This is surely super broken\n+  # ifdef CFG_ENABLE_MINGW_CROSS\n+  #   CFG_WINDOWSY := 1\n+  #   CFG_INFO := $(info cfg: mingw-cross)\n+  #   CFG_GCCISH_CROSS := i586-mingw32msvc-\n+  #   ifdef CFG_VALGRIND\n+  #     CFG_VALGRIND += wine\n+  #   endif\n \n-    CFG_GCCISH_CFLAGS := -march=i586\n-    CFG_GCCISH_PRE_LIB_FLAGS :=\n-    CFG_GCCISH_POST_LIB_FLAGS :=\n-    CFG_GCCISH_DEF_FLAG :=\n-    CFG_GCCISH_LINK_FLAGS := -shared\n+  #   CFG_GCCISH_CFLAGS := -march=i586\n+  #   CFG_GCCISH_PRE_LIB_FLAGS :=\n+  #   CFG_GCCISH_POST_LIB_FLAGS :=\n+  #   CFG_GCCISH_DEF_FLAG :=\n+  #   CFG_GCCISH_LINK_FLAGS := -shared\n \n-    ifeq ($(CFG_CPUTYPE), x86_64)\n-      CFG_GCCISH_CFLAGS += -m32\n-      CFG_GCCISH_LINK_FLAGS += -m32\n-    endif\n-  endif\n+  #   ifeq ($(CFG_CPUTYPE), x86_64)\n+  #     CFG_GCCISH_CFLAGS += -m32\n+  #     CFG_GCCISH_LINK_FLAGS += -m32\n+  #   endif\n+  # endif\n   ifdef CFG_VALGRIND\n     CFG_VALGRIND += --error-exitcode=100 \\\n                     --quiet \\\n@@ -200,6 +197,18 @@ else\n   CFG_LDPATH :=\n   CFG_RUN=$(2)\n endif\n+\n+  CFG_TESTLIB=$(CFG_BUILD_DIR)/$(2)/$(strip \\\n+   $(if $(findstring stage0,$(1)), \\\n+       stage0/$(CFG_LIBDIR), \\\n+      $(if $(findstring stage1,$(1)), \\\n+           stage1/$(CFG_LIBDIR), \\\n+          $(if $(findstring stage2,$(1)), \\\n+               stage2/$(CFG_LIBDIR), \\\n+               $(if $(findstring stage3,$(1)), \\\n+                    stage3/$(CFG_LIBDIR), \\\n+               )))))/rustc/$(CFG_BUILD_TRIPLE)/$(CFG_LIBDIR)\n+\n   CFG_RUN_TARG=$(call CFG_RUN,$(HLIB$(1)_H_$(CFG_BUILD_TRIPLE)),$(2))\n   CFG_RUN_TEST=$(call CFG_RUN,$(call CFG_TESTLIB,$(1),$(3)),$(1))\n   CFG_LIBUV_LINK_FLAGS=-lWs2_32 -lpsapi -liphlpapi\n@@ -233,34 +242,13 @@ ifeq ($(CFG_C_COMPILER),clang)\n   # next to the .o file that lists header deps.\n   CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n \n-  define CFG_MAKE_CC\n-  CFG_COMPILE_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC)  \\\n-    $$(CFG_GCCISH_CFLAGS) $$(CFG_CLANG_CFLAGS)    \\\n-    $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n-      $$(CFG_CLANG_CFLAGS_$$(HOST_$(1)))        \\\n-        $$(CFG_DEPEND_FLAGS)                            \\\n-    -c -o $$(1) $$(2)\n-    CFG_LINK_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC) \\\n-    $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n-    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n-        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n-      $$(call CFG_INSTALL_NAME,$$(4))\n-  CFG_COMPILE_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)  \\\n-    $$(CFG_GCCISH_CFLAGS) $$(CFG_CLANG_CFLAGS)    \\\n-    $$(CFG_GCCISH_CXXFLAGS)                       \\\n-    $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n-      $$(CFG_CLANG_CFLAGS_$$(HOST_$(1)))        \\\n-        $$(CFG_DEPEND_FLAGS)                            \\\n-    -c -o $$(1) $$(2)\n-    CFG_LINK_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX) \\\n-    $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n-    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n-        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n-      $$(call CFG_INSTALL_NAME,$$(4))\n+  CFG_SPECIFIC_CC_CFLAGS = $(CFG_CLANG_CFLAGS)\n+  define MAKE_CLANG_SPECIFIC_CFLAGS\n+    CFG_SPECIFIC_CC_CFLAGS_$$(HOST_$(target)) = $(CFG_CLANG_CFLAGS_$$(HOST_$(target)))\n   endef\n-\n   $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-    $(eval $(call CFG_MAKE_CC,$(target))))\n+    $(eval $(call MAKE_CLANG_SPECIFIC_CFLAGS,$(target))))\n+\n else\n ifeq ($(CFG_C_COMPILER),gcc)\n   ifeq ($(origin CC),default)\n@@ -279,12 +267,24 @@ ifeq ($(CFG_C_COMPILER),gcc)\n   # next to the .o file that lists header deps.\n   CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n \n-  define CFG_MAKE_CC\n+  CFG_SPECIFIC_CC_CFLAGS = $(CFG_GCC_CFLAGS)\n+  define MAKE_GCC_SPECIFIC_CFLAGS\n+    CFG_SPECIFIC_CC_CFLAGS_$$(HOST_$(target)) = $(CFG_GCC_CFLAGS_$$(HOST_$(target)))\n+  endef\n+  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+    $(eval $(call MAKE_GCC_SPECIFIC_CFLAGS,$(target))))\n+\n+else\n+  CFG_ERR := $(error please try on a system with gcc or clang)\n+endif\n+endif\n+\n+define CFG_MAKE_CC\n   CFG_COMPILE_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC)  \\\n         $$(CFG_GCCISH_CFLAGS)             \\\n       $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n-        $$(CFG_GCC_CFLAGS)                \\\n-        $$(CFG_GCC_CFLAGS_$$(HOST_$(1)))        \\\n+        $$(CFG_SPECIFIC_CC_CFLAGS)                \\\n+        $$(CFG_SPECIFIC_CC_CFLAGS_$$(HOST_$(1)))        \\\n         $$(CFG_DEPEND_FLAGS)                            \\\n         -c -o $$(1) $$(2)\n     CFG_LINK_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC) \\\n@@ -296,23 +296,19 @@ ifeq ($(CFG_C_COMPILER),gcc)\n         $$(CFG_GCCISH_CFLAGS)             \\\n         $$(CFG_GCCISH_CXXFLAGS)           \\\n       $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n-        $$(CFG_GCC_CFLAGS)                \\\n-        $$(CFG_GCC_CFLAGS_$$(HOST_$(1)))        \\\n+        $$(CFG_SPECIFIC_CC_CFLAGS)                \\\n+        $$(CFG_SPECIFIC_CC_CFLAGS_$$(HOST_$(1)))        \\\n         $$(CFG_DEPEND_FLAGS)                            \\\n         -c -o $$(1) $$(2)\n     CFG_LINK_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX) \\\n         $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n     $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n         $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n         $$(call CFG_INSTALL_NAME,$$(4))\n-  endef\n+endef\n \n-  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-    $(eval $(call CFG_MAKE_CC,$(target))))\n-else\n-  CFG_ERR := $(error please try on a system with gcc or clang)\n-endif\n-endif\n+$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(eval $(call CFG_MAKE_CC,$(target))))\n \n # We're using llvm-mc as our assembler because it supports\n # .cfi pseudo-ops on mac"}]}