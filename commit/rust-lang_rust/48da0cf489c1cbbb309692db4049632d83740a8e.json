{"sha": "48da0cf489c1cbbb309692db4049632d83740a8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZGEwY2Y0ODljMWNiYmIzMDk2OTJkYjQwNDk2MzJkODM3NDBhOGU=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-30T15:35:59Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-30T15:35:59Z"}, "message": "Fix prctl SET_NAME and GET_NAME behaviour.", "tree": {"sha": "ef0d26e02dd7fb1a32620ab34d2493ffc0deaeaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef0d26e02dd7fb1a32620ab34d2493ffc0deaeaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48da0cf489c1cbbb309692db4049632d83740a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48da0cf489c1cbbb309692db4049632d83740a8e", "html_url": "https://github.com/rust-lang/rust/commit/48da0cf489c1cbbb309692db4049632d83740a8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48da0cf489c1cbbb309692db4049632d83740a8e/comments", "author": null, "committer": null, "parents": [{"sha": "603ec0b3d848f4f0f63f4842231ac13e0fa0ce8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/603ec0b3d848f4f0f63f4842231ac13e0fa0ce8c", "html_url": "https://github.com/rust-lang/rust/commit/603ec0b3d848f4f0f63f4842231ac13e0fa0ce8c"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "2f553c1c729e85629a930ae399112834ba38a86b", "filename": "src/shims/thread.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48da0cf489c1cbbb309692db4049632d83740a8e/src%2Fshims%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48da0cf489c1cbbb309692db4049632d83740a8e/src%2Fshims%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fthread.rs?ref=48da0cf489c1cbbb309692db4049632d83740a8e", "patch": "@@ -99,11 +99,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let option = this.read_scalar(option)?.to_i32()?;\n         if option == this.eval_libc_i32(\"PR_SET_NAME\")? {\n             let address = this.read_scalar(arg2)?.not_undef()?;\n-            let name = this.memory.read_c_str(address)?.to_owned();\n+            let mut name = this.memory.read_c_str(address)?.to_owned();\n+            // The name should be no more than 16 bytes, including the null\n+            // byte. Since `read_c_str` returns the string without the null\n+            // byte, we need to truncate to 15.\n+            name.truncate(15);\n             this.set_active_thread_name(name)?;\n         } else if option == this.eval_libc_i32(\"PR_GET_NAME\")? {\n             let address = this.read_scalar(arg2)?.not_undef()?;\n-            let name = this.get_active_thread_name()?.to_vec();\n+            let mut name = this.get_active_thread_name()?.to_vec();\n+            name.push(0u8);\n+            assert!(name.len() <= 16);\n             this.memory.write_bytes(address, name)?;\n         } else {\n             throw_unsup_format!(\"unsupported prctl option {}\", option);"}, {"sha": "376920e225ba7f5d4cfc95e0b1cc5eea59bc83c7", "filename": "src/thread.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48da0cf489c1cbbb309692db4049632d83740a8e/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48da0cf489c1cbbb309692db4049632d83740a8e/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=48da0cf489c1cbbb309692db4049632d83740a8e", "patch": "@@ -313,11 +313,11 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     }\n \n     /// Get the name of the active thread.\n-    fn get_thread_name(&self) -> InterpResult<'tcx, &[u8]> {\n+    fn get_thread_name(&self) -> &[u8] {\n         if let Some(ref thread_name) = self.active_thread_ref().thread_name {\n-            Ok(thread_name)\n+            thread_name\n         } else {\n-            throw_ub_format!(\"thread {:?} has no name set\", self.active_thread)\n+            b\"<unnamed>\"\n         }\n     }\n \n@@ -574,7 +574,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         'mir: 'c,\n     {\n         let this = self.eval_context_ref();\n-        this.machine.threads.get_thread_name()\n+        Ok(this.machine.threads.get_thread_name())\n     }\n \n     #[inline]"}, {"sha": "04ca5c0b3b1a924cc91d1942e1f1b40dcff5c51e", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/48da0cf489c1cbbb309692db4049632d83740a8e/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48da0cf489c1cbbb309692db4049632d83740a8e/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=48da0cf489c1cbbb309692db4049632d83740a8e", "patch": "@@ -147,12 +147,21 @@ fn test_rwlock_libc_static_initializer() {\n #[cfg(target_os = \"linux\")]\n fn test_prctl_thread_name() {\n     use std::ffi::CString;\n+    use libc::c_long;\n     unsafe {\n+        let mut buf = [255; 10];\n+        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr() as c_long, 0 as c_long, 0 as c_long, 0 as c_long), 0);\n+        assert_eq!(b\"<unnamed>\\0\", &buf);\n         let thread_name = CString::new(\"hello\").expect(\"CString::new failed\");\n-        assert_eq!(libc::prctl(libc::PR_SET_NAME, thread_name.as_ptr() as libc::c_long, 0 as libc::c_long, 0 as libc::c_long, 0 as libc::c_long), 0);\n-        let mut buf = [0; 6];\n-        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr() as libc::c_long, 0 as libc::c_long, 0 as libc::c_long, 0 as libc::c_long), 0);\n-        assert_eq!(thread_name.as_bytes_with_nul(), buf);\n+        assert_eq!(libc::prctl(libc::PR_SET_NAME, thread_name.as_ptr() as c_long, 0 as c_long, 0 as c_long, 0 as c_long), 0);\n+        let mut buf = [255; 6];\n+        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr() as c_long, 0 as c_long, 0 as c_long, 0 as c_long), 0);\n+        assert_eq!(b\"hello\\0\", &buf);\n+        let long_thread_name = CString::new(\"01234567890123456789\").expect(\"CString::new failed\");\n+        assert_eq!(libc::prctl(libc::PR_SET_NAME, long_thread_name.as_ptr() as c_long, 0 as c_long, 0 as c_long, 0 as c_long), 0);\n+        let mut buf = [255; 16];\n+        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr() as c_long, 0 as c_long, 0 as c_long, 0 as c_long), 0);\n+        assert_eq!(b\"012345678901234\\0\", &buf);\n     }\n }\n "}]}