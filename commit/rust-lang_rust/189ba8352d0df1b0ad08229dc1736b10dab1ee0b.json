{"sha": "189ba8352d0df1b0ad08229dc1736b10dab1ee0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OWJhODM1MmQwZGYxYjBhZDA4MjI5ZGMxNzM2YjEwZGFiMWVlMGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-02T10:43:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-02T10:43:42Z"}, "message": "Rustup to rustc 1.34.0-nightly (852701ad6 2019-02-01)", "tree": {"sha": "599ff98a65a774226057ec36f1bb3dfe6725a738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/599ff98a65a774226057ec36f1bb3dfe6725a738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/189ba8352d0df1b0ad08229dc1736b10dab1ee0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/189ba8352d0df1b0ad08229dc1736b10dab1ee0b", "html_url": "https://github.com/rust-lang/rust/commit/189ba8352d0df1b0ad08229dc1736b10dab1ee0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/189ba8352d0df1b0ad08229dc1736b10dab1ee0b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99e43822b44e3a499493ee2797e5b501437d1815", "url": "https://api.github.com/repos/rust-lang/rust/commits/99e43822b44e3a499493ee2797e5b501437d1815", "html_url": "https://github.com/rust-lang/rust/commit/99e43822b44e3a499493ee2797e5b501437d1815"}], "stats": {"total": 140, "additions": 112, "deletions": 28}, "files": [{"sha": "16dcacacb48577856c7ca1050e1badf6da262a46", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/189ba8352d0df1b0ad08229dc1736b10dab1ee0b/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/189ba8352d0df1b0ad08229dc1736b10dab1ee0b/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=189ba8352d0df1b0ad08229dc1736b10dab1ee0b", "patch": "@@ -1,6 +1,6 @@\n-From e56a552cfe6d51ec4db5ea69aff1c46c0090f470 Mon Sep 17 00:00:00 2001\n+From d723688cb9f94c7c90617eb96b1d64fd968a02c3 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Tue, 29 Jan 2019 20:19:01 +0100\n+Date: Sat, 2 Feb 2019 11:30:28 +0100\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n@@ -18,15 +18,15 @@ Subject: [PATCH] Disable u128 and i128 in libcore\n  src/libcore/num/wrapping.rs      |  14 ++---\n  src/libcore/ops/arith.rs         |  22 +++----\n  src/libcore/ops/bit.rs           |  30 ++++------\n- src/libcore/sync/atomic.rs       |  28 ---------\n+ src/libcore/sync/atomic.rs       |  30 ----------\n  src/libcore/tests/iter.rs        |  15 -----\n  src/libcore/tests/num/mod.rs     |  18 ------\n  src/libcore/time.rs              | 123 ---------------------------------------\n  src/libstd/lib.rs                |   4 --\n  src/libstd/net/ip.rs             |  20 -------\n  src/libstd/num.rs                |   2 +-\n  src/libstd/panic.rs              |   6 --\n- 22 files changed, 63 insertions(+), 368 deletions(-)\n+ 22 files changed, 63 insertions(+), 370 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n index ed90b7d..1739f91 100644\n@@ -94,18 +94,18 @@ index 0e47c2f..570b949 100644\n  default_impl! { f32, 0.0f32, \"Returns the default value of `0.0`\" }\n  default_impl! { f64, 0.0f64, \"Returns the default value of `0.0`\" }\n diff --git a/src/libcore/fmt/num.rs b/src/libcore/fmt/num.rs\n-index c7c8fc5..689d611 100644\n+index 3a81233..f889d57 100644\n --- a/src/libcore/fmt/num.rs\n +++ b/src/libcore/fmt/num.rs\n-@@ -19,7 +19,6 @@ trait Int: PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n+@@ -17,7 +17,6 @@ trait Int: PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n      fn to_u16(&self) -> u16;\n      fn to_u32(&self) -> u32;\n      fn to_u64(&self) -> u64;\n -    fn to_u128(&self) -> u128;\n  }\n  \n  macro_rules! doit {\n-@@ -30,10 +29,9 @@ macro_rules! doit {\n+@@ -28,10 +27,9 @@ macro_rules! doit {\n          fn to_u16(&self) -> u16 { *self as u16 }\n          fn to_u32(&self) -> u32 { *self as u32 }\n          fn to_u64(&self) -> u64 { *self as u64 }\n@@ -117,15 +117,15 @@ index c7c8fc5..689d611 100644\n  \n  /// A type that represents a specific radix\n  #[doc(hidden)]\n-@@ -174,7 +172,6 @@ integer! { i8, u8 }\n+@@ -176,7 +174,6 @@ integer! { i8, u8 }\n  integer! { i16, u16 }\n  integer! { i32, u32 }\n  integer! { i64, u64 }\n -integer! { i128, u128 }\n  \n  const DEC_DIGITS_LUT: &'static[u8] =\n      b\"0001020304050607080910111213141516171819\\\n-@@ -250,7 +247,6 @@ macro_rules! impl_Display {\n+@@ -252,7 +249,6 @@ macro_rules! impl_Display {\n  \n  impl_Display!(i8, u8, i16, u16, i32, u32: to_u32);\n  impl_Display!(i64, u64: to_u64);\n@@ -218,10 +218,10 @@ index dfe1d2a..06cc578 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index cde7e7c..094e1fb 100644\n+index 97b07aa..9e1e9a6 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -146,14 +146,12 @@ mod uint_macros;\n+@@ -149,14 +149,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -252,7 +252,7 @@ index 457d556..91425fb 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 0eeac5e..d8277ef 100644\n+index 8b6d9d8..8023dc1 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n @@ -163,12 +163,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n@@ -269,7 +269,7 @@ index 0eeac5e..d8277ef 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index 7cf2317..f928d40 100644\n+index f80f839..eed1241 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n @@ -102,13 +102,11 @@ nonzero_integers! {\n@@ -286,7 +286,7 @@ index 7cf2317..f928d40 100644\n      #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n  }\n  \n-@@ -2074,18 +2072,6 @@ impl i64 {\n+@@ -2084,18 +2082,6 @@ impl i64 {\n           \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -305,7 +305,7 @@ index 7cf2317..f928d40 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4316,17 +4302,6 @@ impl u64 {\n+@@ -4336,17 +4322,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -323,7 +323,7 @@ index 7cf2317..f928d40 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4410,7 +4385,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4430,7 +4405,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -332,7 +332,7 @@ index 7cf2317..f928d40 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4526,30 +4501,25 @@ macro_rules! rev {\n+@@ -4546,30 +4521,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -367,7 +367,7 @@ index 7cf2317..f928d40 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4561,21 +4531,21 @@ mod ptr_try_from_impls {\n+@@ -4581,21 +4551,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -397,7 +397,7 @@ index 7cf2317..f928d40 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4584,24 +4554,24 @@ mod ptr_try_from_impls {\n+@@ -4604,24 +4574,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -430,7 +430,7 @@ index 7cf2317..f928d40 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4610,24 +4580,20 @@ mod ptr_try_from_impls {\n+@@ -4630,24 +4600,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -459,7 +459,7 @@ index 7cf2317..f928d40 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -4662,7 +4628,7 @@ macro_rules! doit {\n+@@ -4682,7 +4648,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -468,7 +468,7 @@ index 7cf2317..f928d40 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4853,52 +4819,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4873,52 +4839,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -845,11 +845,11 @@ index 2c9bf24..af2ab6f 100644\n -shr_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n diff --git a/src/libcore/sync/atomic.rs b/src/libcore/sync/atomic.rs\n-index bcedff5..a388e78 100644\n+index 8c5dde7..8122120 100644\n --- a/src/libcore/sync/atomic.rs\n +++ b/src/libcore/sync/atomic.rs\n-@@ -1978,34 +1978,6 @@ atomic_int! {\n-     8,\n+@@ -2003,36 +2003,6 @@ atomic_int! {\n+     \"AtomicU64::new(0)\",\n      u64 AtomicU64 ATOMIC_U64_INIT\n  }\n -#[cfg(target_has_atomic = \"128\")]\n@@ -864,6 +864,7 @@ index bcedff5..a388e78 100644\n -    \"#![feature(integer_atomics)]\\n\\n\",\n -    atomic_min, atomic_max,\n -    16,\n+-    \"AtomicI128::new(0)\",\n -    i128 AtomicI128 ATOMIC_I128_INIT\n -}\n -#[cfg(target_has_atomic = \"128\")]\n@@ -878,6 +879,7 @@ index bcedff5..a388e78 100644\n -    \"#![feature(integer_atomics)]\\n\\n\",\n -    atomic_umin, atomic_umax,\n -    16,\n+-    \"AtomicU128::new(0)\",\n -    u128 AtomicU128 ATOMIC_U128_INIT\n -}\n  #[cfg(target_pointer_width = \"16\")]\n@@ -1134,10 +1136,10 @@ index a751965..5d162cb 100644\n      ///\n      /// # Examples\n diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index 137ec65..4d1386c 100644\n+index f269fda..07c3680 100644\n --- a/src/libstd/lib.rs\n +++ b/src/libstd/lib.rs\n-@@ -398,8 +398,6 @@ pub use core::i16;\n+@@ -397,8 +397,6 @@ pub use core::i16;\n  pub use core::i32;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::i64;\n@@ -1146,7 +1148,7 @@ index 137ec65..4d1386c 100644\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::usize;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-@@ -432,8 +430,6 @@ pub use alloc_crate::string;\n+@@ -431,8 +429,6 @@ pub use alloc_crate::string;\n  pub use alloc_crate::vec;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::char;"}, {"sha": "36b8f071aea6967b60cf6ea9b18ab54260ab572a", "filename": "patches/0009-Workaround-missing-saturating_sub-intrinsic-impl.patch", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/189ba8352d0df1b0ad08229dc1736b10dab1ee0b/patches%2F0009-Workaround-missing-saturating_sub-intrinsic-impl.patch", "raw_url": "https://github.com/rust-lang/rust/raw/189ba8352d0df1b0ad08229dc1736b10dab1ee0b/patches%2F0009-Workaround-missing-saturating_sub-intrinsic-impl.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0009-Workaround-missing-saturating_sub-intrinsic-impl.patch?ref=189ba8352d0df1b0ad08229dc1736b10dab1ee0b", "patch": "@@ -0,0 +1,82 @@\n+From 725a1e7b487e32b5f2e90049c8b37fed1a957003 Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Sat, 2 Feb 2019 11:39:22 +0100\n+Subject: [PATCH] Workaround missing saturating_sub intrinsic impl\n+\n+---\n+ src/libcore/num/mod.rs | 20 --------------------\n+ 1 file changed, 20 deletions(-)\n+\n+diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n+index eed1241..f928d40 100644\n+--- a/src/libcore/num/mod.rs\n++++ b/src/libcore/num/mod.rs\n+@@ -881,16 +881,11 @@ $EndFeature, \"\n+             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+             #[inline]\n+             pub fn saturating_add(self, rhs: Self) -> Self {\n+-                #[cfg(stage0)]\n+                 match self.checked_add(rhs) {\n+                     Some(x) => x,\n+                     None if rhs >= 0 => Self::max_value(),\n+                     None => Self::min_value(),\n+                 }\n+-                #[cfg(not(stage0))]\n+-                {\n+-                    intrinsics::saturating_add(self, rhs)\n+-                }\n+             }\n+         }\n+ \n+@@ -911,16 +906,11 @@ $EndFeature, \"\n+             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+             #[inline]\n+             pub fn saturating_sub(self, rhs: Self) -> Self {\n+-                #[cfg(stage0)]\n+                 match self.checked_sub(rhs) {\n+                     Some(x) => x,\n+                     None if rhs >= 0 => Self::min_value(),\n+                     None => Self::max_value(),\n+                 }\n+-                #[cfg(not(stage0))]\n+-                {\n+-                    intrinsics::saturating_sub(self, rhs)\n+-                }\n+             }\n+         }\n+ \n+@@ -2740,15 +2730,10 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n+             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+             #[inline]\n+             pub fn saturating_add(self, rhs: Self) -> Self {\n+-                #[cfg(stage0)]\n+                 match self.checked_add(rhs) {\n+                     Some(x) => x,\n+                     None => Self::max_value(),\n+                 }\n+-                #[cfg(not(stage0))]\n+-                {\n+-                    intrinsics::saturating_add(self, rhs)\n+-                }\n+             }\n+         }\n+ \n+@@ -2767,15 +2752,10 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n+             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+             #[inline]\n+             pub fn saturating_sub(self, rhs: Self) -> Self {\n+-                #[cfg(stage0)]\n+                 match self.checked_sub(rhs) {\n+                     Some(x) => x,\n+                     None => Self::min_value(),\n+                 }\n+-                #[cfg(not(stage0))]\n+-                {\n+-                    intrinsics::saturating_sub(self, rhs)\n+-                }\n+             }\n+         }\n+ \n+-- \n+2.11.0\n+"}]}