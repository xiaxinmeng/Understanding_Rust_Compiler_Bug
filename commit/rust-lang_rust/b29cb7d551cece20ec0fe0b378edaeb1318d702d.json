{"sha": "b29cb7d551cece20ec0fe0b378edaeb1318d702d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOWNiN2Q1NTFjZWNlMjBlYzBmZTBiMzc4ZWRhZWIxMzE4ZDcwMmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T08:54:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T08:56:25Z"}, "message": "avoid catching errors", "tree": {"sha": "1f209515f9c4d46b56a4404a0cd5465f7496b23a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f209515f9c4d46b56a4404a0cd5465f7496b23a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b29cb7d551cece20ec0fe0b378edaeb1318d702d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b29cb7d551cece20ec0fe0b378edaeb1318d702d", "html_url": "https://github.com/rust-lang/rust/commit/b29cb7d551cece20ec0fe0b378edaeb1318d702d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b29cb7d551cece20ec0fe0b378edaeb1318d702d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec25066e741fd0e4a87f2eed53a777dbc64b802", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec25066e741fd0e4a87f2eed53a777dbc64b802", "html_url": "https://github.com/rust-lang/rust/commit/8ec25066e741fd0e4a87f2eed53a777dbc64b802"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "df60acc661ed4a51899f34bbf1274a43cf1c9656", "filename": "src/operator.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b29cb7d551cece20ec0fe0b378edaeb1318d702d/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cb7d551cece20ec0fe0b378edaeb1318d702d/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=b29cb7d551cece20ec0fe0b378edaeb1318d702d", "patch": "@@ -397,21 +397,24 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n             .checked_mul(pointee_size)\n             .ok_or_else(|| InterpError::Overflow(mir::BinOp::Mul))?;\n         // Now let's see what kind of pointer this is.\n-        if let Ok(ptr) = self.force_ptr(ptr) {\n-            // Both old and new pointer must be in-bounds of a *live* allocation.\n-            // (Of the same allocation, but that part is trivial with our representation.)\n-            self.pointer_inbounds(ptr)?;\n-            let ptr = ptr.signed_offset(offset, self)?;\n-            self.pointer_inbounds(ptr)?;\n-            Ok(Scalar::Ptr(ptr))\n-        } else {\n-            // A \"true\" integer pointer. They can only be offset by 0, and we pretend there\n-            // is a little zero-sized allocation here.\n-            if offset == 0 {\n-                Ok(ptr)\n-            } else {\n-                err!(InvalidPointerMath)\n+        let ptr = if offset == 0 {\n+            match ptr {\n+                Scalar::Ptr(ptr) => ptr,\n+                Scalar::Raw { .. } => {\n+                    // Offset 0 on an integer. We accept that, pretending there is\n+                    // a little zero-sized allocation here.\n+                    return Ok(ptr);\n+                }\n             }\n-        }\n+        } else {\n+            // Offset > 0. We *require* a pointer.\n+            self.force_ptr(ptr)?\n+        };\n+        // Both old and new pointer must be in-bounds of a *live* allocation.\n+        // (Of the same allocation, but that part is trivial with our representation.)\n+        self.pointer_inbounds(ptr)?;\n+        let ptr = ptr.signed_offset(offset, self)?;\n+        self.pointer_inbounds(ptr)?;\n+        Ok(Scalar::Ptr(ptr))\n     }\n }"}, {"sha": "2d3282a0a97a0c95c72d355de2aacba96e76c89d", "filename": "tests/compile-fail/ptr_offset_int_plus_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b29cb7d551cece20ec0fe0b378edaeb1318d702d/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cb7d551cece20ec0fe0b378edaeb1318d702d/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs?ref=b29cb7d551cece20ec0fe0b378edaeb1318d702d", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: invalid arithmetic on pointers\n+// error-pattern: tried to interpret some bytes as a pointer\n \n fn main() {\n     // Can't offset an integer pointer by non-zero offset."}]}