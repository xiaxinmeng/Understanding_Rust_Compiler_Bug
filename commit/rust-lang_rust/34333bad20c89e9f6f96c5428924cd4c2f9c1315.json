{"sha": "34333bad20c89e9f6f96c5428924cd4c2f9c1315", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MzMzYmFkMjBjODllOWY2Zjk2YzU0Mjg5MjRjZDRjMmY5YzEzMTU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-11-11T20:56:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-11T20:56:35Z"}, "message": "Merge pull request #3189 from scampi/issue3032\n\nfix logic for adding or not a newline after a missed span", "tree": {"sha": "91bb1297adb5d4725de067de89ac12d6ed3d82af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91bb1297adb5d4725de067de89ac12d6ed3d82af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34333bad20c89e9f6f96c5428924cd4c2f9c1315", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb6JeDCRBK7hj4Ov3rIwAAdHIIAKOt0+BbET95btQZY8jUUiP+\nC2ECWmWApnDNNNZ+Lv+5Jeb8A0vnHoqad8BKCI5/XapRvTsF4uPWiLK34/5fSMUp\nNw3TEkfL6t9jLWH3sA2DEvZ11OFlkojkYpHOOhPwBJjjNV+MiOQ/x2ynrkFt12Sh\nqxFCJHEoUoj0ng4nO8HDY4k95vebk0us0DhXLwN5LJvIejiFIBFPX88tJdWfvN83\nOafDNDFJktIRrtMd2ZZtjbNY0PFWrOwWdkAmcwOzO7K312FFTBsMmWfA7lqvt1RN\n00LJvMpl8eEifGc1/rN0FObyUOzXfQKDUPNw4jaTl6bh6ROpkyacBho6P6Iu+GA=\n=9HwP\n-----END PGP SIGNATURE-----\n", "payload": "tree 91bb1297adb5d4725de067de89ac12d6ed3d82af\nparent 4e2f7419176f9511c8f11fbd1378a3d455c09759\nparent d121d7205f7a41859013de8ae6cea97ea623f1b6\nauthor Nick Cameron <nrc@ncameron.org> 1541969795 +1300\ncommitter GitHub <noreply@github.com> 1541969795 +1300\n\nMerge pull request #3189 from scampi/issue3032\n\nfix logic for adding or not a newline after a missed span"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34333bad20c89e9f6f96c5428924cd4c2f9c1315", "html_url": "https://github.com/rust-lang/rust/commit/34333bad20c89e9f6f96c5428924cd4c2f9c1315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34333bad20c89e9f6f96c5428924cd4c2f9c1315/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e2f7419176f9511c8f11fbd1378a3d455c09759", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2f7419176f9511c8f11fbd1378a3d455c09759", "html_url": "https://github.com/rust-lang/rust/commit/4e2f7419176f9511c8f11fbd1378a3d455c09759"}, {"sha": "d121d7205f7a41859013de8ae6cea97ea623f1b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d121d7205f7a41859013de8ae6cea97ea623f1b6", "html_url": "https://github.com/rust-lang/rust/commit/d121d7205f7a41859013de8ae6cea97ea623f1b6"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "3c67108b1f197d0d0382932571d84ee5c80a506f", "filename": "src/missed_spans.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/34333bad20c89e9f6f96c5428924cd4c2f9c1315/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34333bad20c89e9f6f96c5428924cd4c2f9c1315/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=34333bad20c89e9f6f96c5428924cd4c2f9c1315", "patch": "@@ -259,15 +259,16 @@ impl<'a> FmtVisitor<'a> {\n         status.last_wspace = None;\n         status.line_start = offset + subslice.len();\n \n-        if let Some('/') = subslice.chars().nth(1) {\n-            // Only add a newline if the last line is a line comment\n-            if !subslice.trim_end().ends_with(\"*/\") {\n-                self.push_str(\"\\n\");\n-            }\n-        } else if status.line_start <= snippet.len() {\n-            // For other comments add a newline if there isn't one at the end already\n+        // Add a newline:\n+        // - if there isn't one already\n+        // - otherwise, only if the last line is a line comment\n+        if status.line_start <= snippet.len() {\n             match snippet[status.line_start..].chars().next() {\n-                Some('\\n') | Some('\\r') => (),\n+                Some('\\n') | Some('\\r') => {\n+                    if !subslice.trim_end().ends_with(\"*/\") {\n+                        self.push_str(\"\\n\");\n+                    }\n+                }\n                 _ => self.push_str(\"\\n\"),\n             }\n         }"}, {"sha": "612c8a3b8eb679466ae194c86a0134578449bf79", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34333bad20c89e9f6f96c5428924cd4c2f9c1315/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34333bad20c89e9f6f96c5428924cd4c2f9c1315/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=34333bad20c89e9f6f96c5428924cd4c2f9c1315", "patch": "@@ -236,7 +236,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             }\n         }\n \n-        let unindent_comment = (self.is_if_else_block && !b.stmts.is_empty()) && {\n+        let unindent_comment = self.is_if_else_block && !b.stmts.is_empty() && {\n             let end_pos = source!(self, b.span).hi() - brace_compensation - remove_len;\n             let snippet = self.snippet(mk_sp(self.last_pos, end_pos));\n             snippet.contains(\"//\") || snippet.contains(\"/*\")"}, {"sha": "a0ebf4b7c73873a55ffce3bdcdd3c5078fff56a6", "filename": "tests/target/issue-3032.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/34333bad20c89e9f6f96c5428924cd4c2f9c1315/tests%2Ftarget%2Fissue-3032.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34333bad20c89e9f6f96c5428924cd4c2f9c1315/tests%2Ftarget%2Fissue-3032.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3032.rs?ref=34333bad20c89e9f6f96c5428924cd4c2f9c1315", "patch": "@@ -0,0 +1,36 @@\n+pub fn get_array_index_from_id(_cx: *mut JSContext, id: HandleId) -> Option<u32> {\n+    let raw_id = id.into();\n+    unsafe {\n+        if RUST_JSID_IS_INT(raw_id) {\n+            return Some(RUST_JSID_TO_INT(raw_id) as u32);\n+        }\n+        None\n+    }\n+    // if id is length atom, -1, otherwise\n+    /*return if JSID_IS_ATOM(id) {\n+        let atom = JSID_TO_ATOM(id);\n+        //let s = *GetAtomChars(id);\n+        if s > 'a' && s < 'z' {\n+            return -1;\n+        }\n+\n+        let i = 0;\n+        let str = AtomToLinearString(JSID_TO_ATOM(id));\n+       return if StringIsArray(str, &mut i) != 0 { i } else { -1 }\n+    } else {\n+        IdToInt32(cx, id);\n+    }*/\n+}\n+\n+impl Foo {\n+    fn bar() -> usize {\n+        42\n+        /* a block comment */\n+    }\n+\n+    fn baz() -> usize {\n+        42\n+        // this is a line\n+        /* a block comment */\n+    }\n+}"}]}