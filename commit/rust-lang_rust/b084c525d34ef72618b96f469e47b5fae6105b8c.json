{"sha": "b084c525d34ef72618b96f469e47b5fae6105b8c", "node_id": "C_kwDOAAsO6NoAKGIwODRjNTI1ZDM0ZWY3MjYxOGI5NmY0NjllNDdiNWZhZTYxMDViOGM", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-26T02:43:13Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-26T02:43:13Z"}, "message": "Generate docs for bootstrap itself\n\nThis verifies the intra-doc links are correct, and hopefully makes\nthings easier for new contributors.", "tree": {"sha": "07965ad1317115ac532c9bbd9473916afe7f9b06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07965ad1317115ac532c9bbd9473916afe7f9b06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b084c525d34ef72618b96f469e47b5fae6105b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b084c525d34ef72618b96f469e47b5fae6105b8c", "html_url": "https://github.com/rust-lang/rust/commit/b084c525d34ef72618b96f469e47b5fae6105b8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b084c525d34ef72618b96f469e47b5fae6105b8c/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb9da7bfa375ad58bcb946115f3191a2756785e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9da7bfa375ad58bcb946115f3191a2756785e5", "html_url": "https://github.com/rust-lang/rust/commit/eb9da7bfa375ad58bcb946115f3191a2756785e5"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "f9de87c3f0dae104938530a2b325a4e02304b24b", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b084c525d34ef72618b96f469e47b5fae6105b8c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b084c525d34ef72618b96f469e47b5fae6105b8c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b084c525d34ef72618b96f469e47b5fae6105b8c", "patch": "@@ -264,7 +264,7 @@ impl PathSet {\n \n     /// A convenience wrapper for Steps which know they have no aliases and all their sets contain only a single path.\n     ///\n-    /// This can be used with [`ShouldRun::krate`], [`ShouldRun::path`], or [`ShouldRun::alias`].\n+    /// This can be used with [`ShouldRun::crate_or_deps`], [`ShouldRun::path`], or [`ShouldRun::alias`].\n     #[track_caller]\n     pub fn assert_single_path(&self) -> &TaskPath {\n         match self {\n@@ -787,6 +787,7 @@ impl<'a> Builder<'a> {\n                 doc::EditionGuide,\n                 doc::StyleGuide,\n                 doc::Tidy,\n+                doc::Bootstrap,\n             ),\n             Kind::Dist => describe!(\n                 dist::Docs,"}, {"sha": "b52c3b68cc4ff3d8d4555e2669d8c38fdf4a87a3", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b084c525d34ef72618b96f469e47b5fae6105b8c/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b084c525d34ef72618b96f469e47b5fae6105b8c/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=b084c525d34ef72618b96f469e47b5fae6105b8c", "patch": "@@ -839,6 +839,8 @@ macro_rules! tool_doc {\n                 )+\n \n                 cargo.rustdocflag(\"--document-private-items\");\n+                // Since we always pass --document-private-items, there's no need to warn about linking to private items.\n+                cargo.rustdocflag(\"-Arustdoc::private-intra-doc-links\");\n                 cargo.rustdocflag(\"--enable-index-page\");\n                 cargo.rustdocflag(\"--show-type-layout\");\n                 cargo.rustdocflag(\"--generate-link-to-definition\");\n@@ -882,7 +884,8 @@ tool_doc!(\n         // \"cargo-credential-wincred\",\n     ]\n );\n-tool_doc!(Tidy, \"tidy\", \"src/tools/tidy\", [\"tidy\"]);\n+tool_doc!(Tidy, \"tidy\", \"src/tools/tidy\", rustc_tool = false, [\"tidy\"]);\n+tool_doc!(Bootstrap, \"bootstrap\", \"src/bootstrap\", rustc_tool = false, [\"bootstrap\"]);\n \n #[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {"}, {"sha": "c7969d2a2c7bed1e1b635c2b07d3f61deab9c446", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b084c525d34ef72618b96f469e47b5fae6105b8c/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b084c525d34ef72618b96f469e47b5fae6105b8c/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=b084c525d34ef72618b96f469e47b5fae6105b8c", "patch": "@@ -123,7 +123,7 @@ impl Config {\n     /// This is only required on NixOS and uses the PatchELF utility to\n     /// change the interpreter/RPATH of ELF executables.\n     ///\n-    /// Please see https://nixos.org/patchelf.html for more information\n+    /// Please see <https://nixos.org/patchelf.html> for more information\n     fn fix_bin_or_dylib(&self, fname: &Path) {\n         assert_eq!(SHOULD_FIX_BINS_AND_DYLIBS.get(), Some(&true));\n         println!(\"attempting to patch {}\", fname.display());"}, {"sha": "943f513415a1689ff4d9f364079dacc0442dc387", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b084c525d34ef72618b96f469e47b5fae6105b8c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b084c525d34ef72618b96f469e47b5fae6105b8c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=b084c525d34ef72618b96f469e47b5fae6105b8c", "patch": "@@ -1011,6 +1011,8 @@ impl Build {\n     }\n \n     /// Return a `Group` guard for a [`Step`] that is built for each `--stage`.\n+    ///\n+    /// [`Step`]: crate::builder::Step\n     fn msg(\n         &self,\n         action: impl Into<Kind>,\n@@ -1035,6 +1037,8 @@ impl Build {\n     }\n \n     /// Return a `Group` guard for a [`Step`] that is only built once and isn't affected by `--stage`.\n+    ///\n+    /// [`Step`]: crate::builder::Step\n     fn msg_unstaged(\n         &self,\n         action: impl Into<Kind>,"}, {"sha": "9bfdc77e6b6cc39b50c2f5ab73c11fb4cdeed5ae", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b084c525d34ef72618b96f469e47b5fae6105b8c/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b084c525d34ef72618b96f469e47b5fae6105b8c/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=b084c525d34ef72618b96f469e47b5fae6105b8c", "patch": "@@ -488,7 +488,7 @@ fn absolute_windows(path: &std::path::Path) -> std::io::Result<std::path::PathBu\n     }\n }\n \n-/// Adapted from https://github.com/llvm/llvm-project/blob/782e91224601e461c019e0a4573bbccc6094fbcd/llvm/cmake/modules/HandleLLVMOptions.cmake#L1058-L1079\n+/// Adapted from <https://github.com/llvm/llvm-project/blob/782e91224601e461c019e0a4573bbccc6094fbcd/llvm/cmake/modules/HandleLLVMOptions.cmake#L1058-L1079>\n ///\n /// When `clang-cl` is used with instrumentation, we need to add clang's runtime library resource\n /// directory to the linker flags, otherwise there will be linker errors about the profiler runtime"}]}