{"sha": "f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OWQ0ZGZlZjJjZjNjYmJmNTY5OWU0NGZkZGYwMTk2OTVlMWQwMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-17T06:43:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-17T06:43:16Z"}, "message": "Auto merge of #38205 - jseyfried:fix_module_directory_regression, r=eddyb\n\nmacros: fix the expected paths for a non-inline module matched by an `item` fragment\n\nFixes #38190.\nr? @nrc", "tree": {"sha": "260767f07070b84f1c19a19eae4c0adc682f9afa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/260767f07070b84f1c19a19eae4c0adc682f9afa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "html_url": "https://github.com/rust-lang/rust/commit/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d250169cb5a96481a3e7c8f9fe05de49f60e5ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d250169cb5a96481a3e7c8f9fe05de49f60e5ae5", "html_url": "https://github.com/rust-lang/rust/commit/d250169cb5a96481a3e7c8f9fe05de49f60e5ae5"}, {"sha": "fd98a8d795b17b76ea6d1edcae55d4450efd466f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd98a8d795b17b76ea6d1edcae55d4450efd466f", "html_url": "https://github.com/rust-lang/rust/commit/fd98a8d795b17b76ea6d1edcae55d4450efd466f"}], "stats": {"total": 86, "additions": 63, "deletions": 23}, "files": [{"sha": "19545e2e642b12fc6b25592e15a9d2e72f7eca0f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "patch": "@@ -650,7 +650,7 @@ fn string_to_tts(text: String, parse_sess: &ParseSess) -> Vec<TokenTree> {\n                             .new_filemap(String::from(\"<macro expansion>\"), None, text);\n \n     let lexer = lexer::StringReader::new(&parse_sess.span_diagnostic, filemap);\n-    let mut parser = Parser::new(parse_sess, Box::new(lexer));\n+    let mut parser = Parser::new(parse_sess, Box::new(lexer), None, false);\n     panictry!(parser.parse_all_token_trees())\n }\n "}, {"sha": "2de31166070e759fb39643e715fa986e299d3aed", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "patch": "@@ -83,7 +83,7 @@ use syntax_pos::{self, BytePos, mk_sp, Span};\n use codemap::Spanned;\n use errors::FatalError;\n use parse::lexer::*; //resolve bug?\n-use parse::ParseSess;\n+use parse::{Directory, ParseSess};\n use parse::parser::{PathStyle, Parser};\n use parse::token::{DocComment, MatchNt, SubstNt};\n use parse::token::{Token, Nonterminal};\n@@ -407,8 +407,9 @@ fn inner_parse_loop(cur_eis: &mut SmallVector<Box<MatcherPos>>,\n     Success(())\n }\n \n-pub fn parse(sess: &ParseSess, rdr: TtReader, ms: &[TokenTree]) -> NamedParseResult {\n-    let mut parser = Parser::new_with_doc_flag(sess, Box::new(rdr), true);\n+pub fn parse(sess: &ParseSess, rdr: TtReader, ms: &[TokenTree], directory: Option<Directory>)\n+             -> NamedParseResult {\n+    let mut parser = Parser::new(sess, Box::new(rdr), directory, true);\n     let mut cur_eis = SmallVector::one(initial_matcher_pos(ms.to_owned(), parser.span.lo));\n     let mut next_eis = Vec::new(); // or proceed normally\n "}, {"sha": "ca18e580ecdfbb7910d489d0eaa1a9c9f59e9eec", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "patch": "@@ -17,7 +17,7 @@ use ext::placeholders;\n use ext::tt::macro_parser::{Success, Error, Failure};\n use ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use ext::tt::macro_parser::{parse, parse_failure_msg};\n-use parse::ParseSess;\n+use parse::{Directory, ParseSess};\n use parse::lexer::new_tt_reader;\n use parse::parser::Parser;\n use parse::token::{self, NtTT, Token};\n@@ -116,12 +116,13 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                 // rhs has holes ( `$id` and `$(...)` that need filled)\n                 let trncbr =\n                     new_tt_reader(&cx.parse_sess.span_diagnostic, Some(named_matches), rhs);\n-                let mut p = Parser::new(cx.parse_sess(), Box::new(trncbr));\n-                let module = &cx.current_expansion.module;\n-                p.directory.path = module.directory.clone();\n-                p.directory.ownership = cx.current_expansion.directory_ownership;\n-                p.root_module_name =\n-                    module.mod_path.last().map(|id| (*id.name.as_str()).to_owned());\n+                let directory = Directory {\n+                    path: cx.current_expansion.module.directory.clone(),\n+                    ownership: cx.current_expansion.directory_ownership,\n+                };\n+                let mut p = Parser::new(cx.parse_sess(), Box::new(trncbr), Some(directory), false);\n+                p.root_module_name = cx.current_expansion.module.mod_path.last()\n+                    .map(|id| (*id.name.as_str()).to_owned());\n \n                 p.check_unknown_macro_variable();\n                 // Let the context choose how to interpret the result.\n@@ -222,7 +223,7 @@ pub fn compile(sess: &ParseSess, def: &ast::MacroDef) -> SyntaxExtension {\n     // Parse the macro_rules! invocation (`none` is for no interpolations):\n     let arg_reader = new_tt_reader(&sess.span_diagnostic, None, def.body.clone());\n \n-    let argument_map = match parse(sess, arg_reader, &argument_gram) {\n+    let argument_map = match parse(sess, arg_reader, &argument_gram, None) {\n         Success(m) => m,\n         Failure(sp, tok) => {\n             let s = parse_failure_msg(tok);"}, {"sha": "c982205f0ecef8e8f135731803971224388d37f4", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "patch": "@@ -222,14 +222,14 @@ pub fn filemap_to_tts(sess: &ParseSess, filemap: Rc<FileMap>)\n     // it appears to me that the cfg doesn't matter here... indeed,\n     // parsing tt's probably shouldn't require a parser at all.\n     let srdr = lexer::StringReader::new(&sess.span_diagnostic, filemap);\n-    let mut p1 = Parser::new(sess, Box::new(srdr));\n+    let mut p1 = Parser::new(sess, Box::new(srdr), None, false);\n     panictry!(p1.parse_all_token_trees())\n }\n \n /// Given tts and the ParseSess, produce a parser\n pub fn tts_to_parser<'a>(sess: &'a ParseSess, tts: Vec<tokenstream::TokenTree>) -> Parser<'a> {\n     let trdr = lexer::new_tt_reader(&sess.span_diagnostic, None, tts);\n-    let mut p = Parser::new(sess, Box::new(trdr));\n+    let mut p = Parser::new(sess, Box::new(trdr), None, false);\n     p.check_unknown_macro_variable();\n     p\n }"}, {"sha": "4367f93348577d2262e454512a5e6aeeaf2fe566", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "patch": "@@ -267,12 +267,11 @@ impl From<P<Expr>> for LhsExpr {\n }\n \n impl<'a> Parser<'a> {\n-    pub fn new(sess: &'a ParseSess, rdr: Box<Reader+'a>) -> Self {\n-        Parser::new_with_doc_flag(sess, rdr, false)\n-    }\n-\n-    pub fn new_with_doc_flag(sess: &'a ParseSess, rdr: Box<Reader+'a>, desugar_doc_comments: bool)\n-                             -> Self {\n+    pub fn new(sess: &'a ParseSess,\n+               rdr: Box<Reader+'a>,\n+               directory: Option<Directory>,\n+               desugar_doc_comments: bool)\n+               -> Self {\n         let mut parser = Parser {\n             reader: rdr,\n             sess: sess,\n@@ -298,7 +297,9 @@ impl<'a> Parser<'a> {\n         let tok = parser.next_tok();\n         parser.token = tok.tok;\n         parser.span = tok.sp;\n-        if parser.span != syntax_pos::DUMMY_SP {\n+        if let Some(directory) = directory {\n+            parser.directory = directory;\n+        } else if parser.span != syntax_pos::DUMMY_SP {\n             parser.directory.path = PathBuf::from(sess.codemap().span_to_filename(parser.span));\n             parser.directory.path.pop();\n         }"}, {"sha": "e352e7853c71cda647213687c5ec57c8731ce002", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "patch": "@@ -31,7 +31,7 @@ use ext::base;\n use ext::tt::macro_parser;\n use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use parse::lexer;\n-use parse;\n+use parse::{self, Directory};\n use parse::token::{self, Token, Lit, Nonterminal};\n use print::pprust;\n use symbol::Symbol;\n@@ -218,7 +218,11 @@ impl TokenTree {\n         let diag = &cx.parse_sess().span_diagnostic;\n         // `None` is because we're not interpolating\n         let arg_rdr = lexer::new_tt_reader(diag, None, tts.iter().cloned().collect());\n-        macro_parser::parse(cx.parse_sess(), arg_rdr, mtch)\n+        let directory = Directory {\n+            path: cx.current_expansion.module.directory.clone(),\n+            ownership: cx.current_expansion.directory_ownership,\n+        };\n+        macro_parser::parse(cx.parse_sess(), arg_rdr, mtch, Some(directory))\n     }\n \n     /// Check if this TokenTree is equal to the other, regardless of span information."}, {"sha": "7fc4390d6dcfb2600f5713efec536858cb6c579c", "filename": "src/test/run-pass/auxiliary/issue_38190.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38190.rs?ref=f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! m { ([$i:item]) => {} }"}, {"sha": "ed9bf9e809520c0bf89e0aed03f8b22d1cd574c1", "filename": "src/test/run-pass/issue-38190.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Ftest%2Frun-pass%2Fissue-38190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99d4dfef2cf3cbbf5699e44fddf019695e1d00d/src%2Ftest%2Frun-pass%2Fissue-38190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38190.rs?ref=f99d4dfef2cf3cbbf5699e44fddf019695e1d00d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue_38190.rs\n+// ignore-pretty issue #37195\n+\n+#[macro_use]\n+extern crate issue_38190;\n+\n+mod auxiliary {\n+    m!([mod issue_38190;]);\n+}\n+\n+fn main() {}"}]}