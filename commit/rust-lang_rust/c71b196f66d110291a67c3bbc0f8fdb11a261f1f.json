{"sha": "c71b196f66d110291a67c3bbc0f8fdb11a261f1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MWIxOTZmNjZkMTEwMjkxYTY3YzNiYmMwZjhmZGIxMWEyNjFmMWY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-20T20:34:26Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-20T20:34:26Z"}, "message": "review", "tree": {"sha": "2fe9e66ca45308b9b77d6f31bc4867553dccc9c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fe9e66ca45308b9b77d6f31bc4867553dccc9c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c71b196f66d110291a67c3bbc0f8fdb11a261f1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c71b196f66d110291a67c3bbc0f8fdb11a261f1f", "html_url": "https://github.com/rust-lang/rust/commit/c71b196f66d110291a67c3bbc0f8fdb11a261f1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c71b196f66d110291a67c3bbc0f8fdb11a261f1f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ac3713f256dd379d8fe24b09bc8ba6643ea41b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac3713f256dd379d8fe24b09bc8ba6643ea41b4", "html_url": "https://github.com/rust-lang/rust/commit/1ac3713f256dd379d8fe24b09bc8ba6643ea41b4"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "047552b6aeb6dab267575f3851252ca56b3826c3", "filename": "src/librustc_trait_selection/traits/coherence.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c71b196f66d110291a67c3bbc0f8fdb11a261f1f/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71b196f66d110291a67c3bbc0f8fdb11a261f1f/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs?ref=c71b196f66d110291a67c3bbc0f8fdb11a261f1f", "patch": "@@ -438,6 +438,15 @@ fn orphan_check_trait_ref<'tcx>(\n ///\n /// This is just `ty` itself unless `ty` is `#[fundamental]`,\n /// in which case we recursively look into this type.\n+///\n+/// If `ty` is local itself, this method returns an empty `Vec`.\n+///\n+/// # Examples\n+///\n+/// - `u32` is not local, so this returns `[u32]`.\n+/// - for `Foo<u32>`, where `Foo` is a local type, this returns `[]`.\n+/// - `&mut u32` returns `[u32]`, as `&mut` is a fundamental type, similar to `Box`.\n+/// - `Box<Foo<u32>>` returns `[]`, as `Box` is a fundamental type and `Foo` is local.\n fn contained_non_local_types(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, in_crate: InCrate) -> Vec<Ty<'tcx>> {\n     if ty_is_local_constructor(ty, in_crate) {\n         Vec::new()\n@@ -493,7 +502,7 @@ fn def_id_is_local(def_id: DefId, in_crate: InCrate) -> bool {\n }\n \n fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n-    debug!(\"ty_is_non_local_constructor({:?})\", ty);\n+    debug!(\"ty_is_local_constructor({:?})\", ty);\n \n     match ty.kind {\n         ty::Bool"}]}