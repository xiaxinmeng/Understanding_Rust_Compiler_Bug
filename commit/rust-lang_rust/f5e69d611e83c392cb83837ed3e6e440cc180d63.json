{"sha": "f5e69d611e83c392cb83837ed3e6e440cc180d63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZTY5ZDYxMWU4M2MzOTJjYjgzODM3ZWQzZTZlNDQwY2MxODBkNjM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-13T22:24:41Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-14T00:03:54Z"}, "message": "Change the pretty printer to print vstores for strs in prefix notation.", "tree": {"sha": "3f18cfd3461f8e2b777e2a15f2ba13f457158bf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f18cfd3461f8e2b777e2a15f2ba13f457158bf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e69d611e83c392cb83837ed3e6e440cc180d63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e69d611e83c392cb83837ed3e6e440cc180d63", "html_url": "https://github.com/rust-lang/rust/commit/f5e69d611e83c392cb83837ed3e6e440cc180d63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e69d611e83c392cb83837ed3e6e440cc180d63/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "985b52be6df504ce6dcef29df61ea20ab9c9323f", "url": "https://api.github.com/repos/rust-lang/rust/commits/985b52be6df504ce6dcef29df61ea20ab9c9323f", "html_url": "https://github.com/rust-lang/rust/commit/985b52be6df504ce6dcef29df61ea20ab9c9323f"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "c0cbf78c5cf7609ee397654e7e589ffa56eab025", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f5e69d611e83c392cb83837ed3e6e440cc180d63", "patch": "@@ -379,18 +379,15 @@ fn print_type_ex(s: ps, &&ty: @ast::ty, print_colons: bool) {\n         word(s.s, constrs_str(cs, ty_constr_to_str));\n       }\n       ast::ty_vstore(t, v) {\n-        // If it is a vector, print it in prefix notation.\n-        // Someday it will all be like this.\n-        let is_fixed = alt v { ast::vstore_fixed(_) { true } _ { false } };\n-        alt t.node {\n-          ast::ty_vec(*) if !is_fixed {\n-            print_vstore(s, v);\n+        alt v {\n+          ast::vstore_fixed(_) {\n             print_type(s, t);\n+            word(s.s, \"/\");\n+            print_vstore(s, v);\n           }\n           _ {\n-            print_type(s, t);\n-            word(s.s, \"/\");\n             print_vstore(s, v);\n+            print_type(s, t);\n           }\n         }\n       }\n@@ -888,18 +885,15 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n     s.ann.pre(ann_node);\n     alt expr.node {\n       ast::expr_vstore(e, v) {\n-        // If it is a vector, print it in prefix notation.\n-        // Someday it will all be like this.\n-        let is_fixed = alt v { ast::vstore_fixed(_) { true } _ { false } };\n-        alt e.node {\n-          ast::expr_vec(*) if !is_fixed {\n-            print_vstore(s, v);\n+        alt v {\n+          ast::vstore_fixed(_) {\n             print_expr(s, e);\n+            word(s.s, \"/\");\n+            print_vstore(s, v);\n           }\n           _ {\n-            print_expr(s, e);\n-            word(s.s, \"/\");\n             print_vstore(s, v);\n+            print_expr(s, e);\n           }\n         }\n       }"}, {"sha": "01593ecea2ce7dd63e6aa04baafb89faae035098", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=f5e69d611e83c392cb83837ed3e6e440cc180d63", "patch": "@@ -100,6 +100,15 @@ fn vstore_to_str(cx: ctxt, vs: ty::vstore) -> str {\n     }\n }\n \n+fn vstore_ty_to_str(cx: ctxt, ty: str, vs: ty::vstore) -> str {\n+    alt vs {\n+      ty::vstore_fixed(_) {\n+        #fmt[\"%s/%s\", ty, vstore_to_str(cx, vs)]\n+      }\n+      _ { #fmt[\"%s%s\", vstore_to_str(cx, vs), ty] }\n+    }\n+}\n+\n fn tys_to_str(cx: ctxt, ts: ~[t]) -> str {\n     let mut rs = \"\";\n     for ts.each |t| { rs += ty_to_str(cx, t); }\n@@ -223,14 +232,9 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n         parameterized(cx, base, substs.self_r, substs.tps)\n       }\n       ty_evec(mt, vs) {\n-        alt vs {\n-          ty::vstore_fixed(_) {\n-            #fmt[\"[%s]/%s\", mt_to_str(cx, mt), vstore_to_str(cx, vs)]\n-          }\n-          _ { #fmt[\"%s[%s]\", vstore_to_str(cx, vs), mt_to_str(cx, mt)] }\n-        }\n+        vstore_ty_to_str(cx, #fmt[\"[%s]\", mt_to_str(cx, mt)], vs)\n       }\n-      ty_estr(vs) { #fmt[\"str/%s\", vstore_to_str(cx, vs)] }\n+      ty_estr(vs) { vstore_ty_to_str(cx, \"str\", vs) }\n       ty_opaque_box { \"@?\" }\n       ty_constr(t, _) { \"@?\" }\n       ty_opaque_closure_ptr(ck_block) { \"closure&\" }"}, {"sha": "7c0601e7aa6a81ddb201ef3d99c864aacc36fa44", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=f5e69d611e83c392cb83837ed3e6e440cc180d63", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected `str/~` but found `int`\n+// error-pattern:expected `~str` but found `int`\n \n const i: str = 10i;\n fn main() { log(debug, i); }"}, {"sha": "b698eb7c426e33779bb998f839a7ebc714e5b779", "filename": "src/test/compile-fail/binop-bitxor-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs?ref=f5e69d611e83c392cb83837ed3e6e440cc180d63", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:^ cannot be applied to type `str/~`\n+// error-pattern:^ cannot be applied to type `~str`\n \n fn main() { let x = \"a\" ^ \"b\"; }"}, {"sha": "e3324cb59b4454bc329435a3bf940dfb32483b57", "filename": "src/test/compile-fail/fail-type-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs?ref=f5e69d611e83c392cb83837ed3e6e440cc180d63", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:expected `str/~` but found `~[int]`\n+// error-pattern:expected `~str` but found `~[int]`\n fn main() { fail ~[0i]; }"}, {"sha": "b929ab0a1ce035052211d28bc08e813596b59902", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=f5e69d611e83c392cb83837ed3e6e440cc180d63", "patch": "@@ -8,5 +8,5 @@ import std::map::map;\n fn main() {\n     let x: map<str,str> = map::str_hash::<str>() as map::<str,str>;\n     let y: map<uint,str> = x;\n-    //~^ ERROR mismatched types: expected `std::map::map<uint,str/~>`\n+    //~^ ERROR mismatched types: expected `std::map::map<uint,~str>`\n }"}, {"sha": "00037ce0fda725d6c1d02d15a268f6f7cbe037cf", "filename": "src/test/compile-fail/minus-string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fminus-string.rs?ref=f5e69d611e83c392cb83837ed3e6e440cc180d63", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:cannot apply unary operator `-` to type `str/~`\n+// error-pattern:cannot apply unary operator `-` to type `~str`\n \n fn main() { -\"foo\"; }"}, {"sha": "a54c5961d5503057d8e1171a8dd25e53a8f45fc0", "filename": "src/test/compile-fail/missing-do.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e69d611e83c392cb83837ed3e6e440cc180d63/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs?ref=f5e69d611e83c392cb83837ed3e6e440cc180d63", "patch": "@@ -3,7 +3,7 @@\n fn foo(f: fn()) { f() }\n \n fn main() {\n-    \"\" || 42; //~ ERROR binary operation || cannot be applied to type `str/~`\n+    \"\" || 42; //~ ERROR binary operation || cannot be applied to type `~str`\n     foo || {}; //~ ERROR binary operation || cannot be applied to type `extern fn(fn())`\n     //~^ NOTE did you forget the 'do' keyword for the call?\n }"}]}