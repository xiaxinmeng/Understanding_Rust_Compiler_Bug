{"sha": "3cc6795418f3afefa4a6a1747a50edd77555a729", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYzY3OTU0MThmM2FmZWZhNGE2YTE3NDdhNTBlZGQ3NzU1NWE3Mjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-07T18:04:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-07T18:04:14Z"}, "message": "Auto merge of #1106 - RalfJung:memleak-ignore, r=RalfJung\n\nadd flag to ignore memory leaks", "tree": {"sha": "5085c76a6e4af528792f0748edfd0e1de6c71428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5085c76a6e4af528792f0748edfd0e1de6c71428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cc6795418f3afefa4a6a1747a50edd77555a729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc6795418f3afefa4a6a1747a50edd77555a729", "html_url": "https://github.com/rust-lang/rust/commit/3cc6795418f3afefa4a6a1747a50edd77555a729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cc6795418f3afefa4a6a1747a50edd77555a729/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c3ea59357976b54a722bbcc2b9e992d4f0b2d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c3ea59357976b54a722bbcc2b9e992d4f0b2d4", "html_url": "https://github.com/rust-lang/rust/commit/74c3ea59357976b54a722bbcc2b9e992d4f0b2d4"}, {"sha": "0a63637e6640cdb9ef9e0afeb4d3408cd553093f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a63637e6640cdb9ef9e0afeb4d3408cd553093f", "html_url": "https://github.com/rust-lang/rust/commit/0a63637e6640cdb9ef9e0afeb4d3408cd553093f"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "16eae05973b2adc616010b72d191f0a6de6962da", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cc6795418f3afefa4a6a1747a50edd77555a729/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3cc6795418f3afefa4a6a1747a50edd77555a729/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3cc6795418f3afefa4a6a1747a50edd77555a729", "patch": "@@ -159,6 +159,7 @@ Several `-Z` flags are relevant for Miri:\n * `-Zmiri-disable-isolation` disables host host isolation.  As a consequence,\n   the program has access to host resources such as environment variables and\n   randomness (and, eventually, file systems and more).\n+* `-Zmiri-ignore-leaks` disables the memory leak checker.\n * `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from \n   the host. Can be used multiple times to exclude several variables. The `TERM`\n   environment variable is excluded by default."}, {"sha": "aa0f3d99592580a5da46fb296dbfe1abae62ee5b", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cc6795418f3afefa4a6a1747a50edd77555a729/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc6795418f3afefa4a6a1747a50edd77555a729/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=3cc6795418f3afefa4a6a1747a50edd77555a729", "patch": "@@ -28,6 +28,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n                 let config = miri::MiriConfig {\n                     validate: true,\n                     communicate: false,\n+                    ignore_leaks: false,\n                     excluded_env_vars: vec![],\n                     args: vec![],\n                     seed: None,"}, {"sha": "df8bb583f8e3a1a29581c91613176f8a84483cda", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cc6795418f3afefa4a6a1747a50edd77555a729/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc6795418f3afefa4a6a1747a50edd77555a729/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=3cc6795418f3afefa4a6a1747a50edd77555a729", "patch": "@@ -41,6 +41,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                                 let config = MiriConfig {\n                                     validate: true,\n                                     communicate: false,\n+                                    ignore_leaks: false,\n                                     excluded_env_vars: vec![],\n                                     args: vec![],\n                                     seed: None,\n@@ -60,6 +61,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 let config = MiriConfig {\n                     validate: true,\n                     communicate: false,\n+                    ignore_leaks: false,\n                     excluded_env_vars: vec![],\n                     args: vec![],\n                     seed: None"}, {"sha": "e255afc3463d4bc4b325e965a615f87436d12701", "filename": "src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cc6795418f3afefa4a6a1747a50edd77555a729/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc6795418f3afefa4a6a1747a50edd77555a729/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=3cc6795418f3afefa4a6a1747a50edd77555a729", "patch": "@@ -124,6 +124,7 @@ fn main() {\n     // Parse our arguments and split them across `rustc` and `miri`.\n     let mut validate = true;\n     let mut communicate = false;\n+    let mut ignore_leaks = false;\n     let mut seed: Option<u64> = None;\n     let mut rustc_args = vec![];\n     let mut miri_args = vec![];\n@@ -145,6 +146,9 @@ fn main() {\n                 \"-Zmiri-disable-isolation\" => {\n                     communicate = true;\n                 },\n+                \"-Zmiri-ignore-leaks\" => {\n+                    ignore_leaks = true;\n+                },\n                 \"--\" => {\n                     after_dashdash = true;\n                 }\n@@ -200,6 +204,7 @@ fn main() {\n     let miri_config = miri::MiriConfig {\n         validate,\n         communicate,\n+        ignore_leaks,\n         excluded_env_vars,\n         seed,\n         args: miri_args,"}, {"sha": "8be42226b5ecf8d3751538f9cb6d4d595719c23c", "filename": "src/eval.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3cc6795418f3afefa4a6a1747a50edd77555a729/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc6795418f3afefa4a6a1747a50edd77555a729/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=3cc6795418f3afefa4a6a1747a50edd77555a729", "patch": "@@ -18,6 +18,8 @@ pub struct MiriConfig {\n     pub validate: bool,\n     /// Determines if communication with the host environment is enabled.\n     pub communicate: bool,\n+    /// Determines if memory leaks should be ignored.\n+    pub ignore_leaks: bool,\n     /// Environment variables that should always be isolated from the host.\n     pub excluded_env_vars: Vec<String>,\n     /// Command-line arguments passed to the interpreted program.\n@@ -169,6 +171,11 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n /// Returns `Some(return_code)` if program executed completed.\n /// Returns `None` if an evaluation error occured.\n pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) -> Option<i64> {\n+    // FIXME: We always ignore leaks on some platforms where we do not\n+    // correctly implement TLS destructors.\n+    let target_os = tcx.sess.target.target.target_os.to_lowercase();\n+    let ignore_leaks = config.ignore_leaks || target_os == \"windows\" || target_os == \"macos\";\n+\n     let (mut ecx, ret_place) = match create_ecx(tcx, main_id, config) {\n         Ok(v) => v,\n         Err(mut err) => {\n@@ -190,10 +197,6 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n     // Process the result.\n     match res {\n         Ok(return_code) => {\n-            // Disable the leak test on some platforms where we do not\n-            // correctly implement TLS destructors.\n-            let target_os = ecx.tcx.tcx.sess.target.target.target_os.to_lowercase();\n-            let ignore_leaks = target_os == \"windows\" || target_os == \"macos\";\n             if !ignore_leaks {\n                 let leaks = ecx.memory.leak_report();\n                 if leaks != 0 {"}, {"sha": "fddf14121ef3552391df9d3272c036bff43dd914", "filename": "tests/run-pass/memleak_ignored.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cc6795418f3afefa4a6a1747a50edd77555a729/tests%2Frun-pass%2Fmemleak_ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc6795418f3afefa4a6a1747a50edd77555a729/tests%2Frun-pass%2Fmemleak_ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmemleak_ignored.rs?ref=3cc6795418f3afefa4a6a1747a50edd77555a729", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags: -Zmiri-ignore-leaks\n+\n+fn main() {\n+    std::mem::forget(Box::new(42));\n+}"}]}