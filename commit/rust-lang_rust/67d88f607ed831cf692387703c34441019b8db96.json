{"sha": "67d88f607ed831cf692387703c34441019b8db96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZDg4ZjYwN2VkODMxY2Y2OTIzODc3MDNjMzQ0NDEwMTliOGRiOTY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-21T19:01:10Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-21T19:01:39Z"}, "message": "Remove constraints argument from path_all\n\nIt was never used", "tree": {"sha": "5fce7492b27d6a4564c3038dcc75dc3a76c9c2c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fce7492b27d6a4564c3038dcc75dc3a76c9c2c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d88f607ed831cf692387703c34441019b8db96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d88f607ed831cf692387703c34441019b8db96", "html_url": "https://github.com/rust-lang/rust/commit/67d88f607ed831cf692387703c34441019b8db96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d88f607ed831cf692387703c34441019b8db96/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5349e69ae207c4d11245e75463c091eded3ad13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5349e69ae207c4d11245e75463c091eded3ad13c", "html_url": "https://github.com/rust-lang/rust/commit/5349e69ae207c4d11245e75463c091eded3ad13c"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "84a27fcb7dd94e462ec25d6072bbd2f7631dfada", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=67d88f607ed831cf692387703c34441019b8db96", "patch": "@@ -14,20 +14,19 @@ pub trait AstBuilder {}\n \n impl<'a> ExtCtxt<'a> {\n     pub fn path(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n-        self.path_all(span, false, strs, vec![], vec![])\n+        self.path_all(span, false, strs, vec![])\n     }\n     pub fn path_ident(&self, span: Span, id: ast::Ident) -> ast::Path {\n         self.path(span, vec![id])\n     }\n     pub fn path_global(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n-        self.path_all(span, true, strs, vec![], vec![])\n+        self.path_all(span, true, strs, vec![])\n     }\n     pub fn path_all(&self,\n                 span: Span,\n                 global: bool,\n                 mut idents: Vec<ast::Ident> ,\n-                args: Vec<ast::GenericArg>,\n-                constraints: Vec<ast::AssocTyConstraint> )\n+                args: Vec<ast::GenericArg>)\n                 -> ast::Path {\n         assert!(!idents.is_empty());\n         let add_root = global && !idents[0].is_path_segment_keyword();\n@@ -39,8 +38,8 @@ impl<'a> ExtCtxt<'a> {\n         segments.extend(idents.into_iter().map(|ident| {\n             ast::PathSegment::from_ident(ident.with_span_pos(span))\n         }));\n-        let args = if !args.is_empty() || !constraints.is_empty() {\n-            ast::AngleBracketedArgs { args, constraints, span }.into()\n+        let args = if !args.is_empty() {\n+            ast::AngleBracketedArgs { args, constraints: Vec::new(), span }.into()\n         } else {\n             None\n         };"}, {"sha": "9a4c540dc6f1f349ea7600e655c24edb145f31d4", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=67d88f607ed831cf692387703c34441019b8db96", "patch": "@@ -115,7 +115,7 @@ fn cs_clone_shallow(name: &str,\n         let span = cx.with_def_site_ctxt(span);\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[sym::clone, Symbol::intern(helper_name)]),\n-                                        vec![GenericArg::Type(ty)], vec![]);\n+                                        vec![GenericArg::Type(ty)]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt<'_>, stmts: &mut Vec<ast::Stmt>, variant: &VariantData) {"}, {"sha": "471c92dd9994927a014a6f1c829ef9cf50ebc32f", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=67d88f607ed831cf692387703c34441019b8db96", "patch": "@@ -56,7 +56,7 @@ fn cs_total_eq_assert(cx: &mut ExtCtxt<'_>,\n         let span = cx.with_def_site_ctxt(span);\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[sym::cmp, Symbol::intern(helper_name)]),\n-                                        vec![GenericArg::Type(ty)], vec![]);\n+                                        vec![GenericArg::Type(ty)]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt<'_>,"}, {"sha": "5c332eccb62cc11e4882573eac39f6e0b9e89b89", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=67d88f607ed831cf692387703c34441019b8db96", "patch": "@@ -664,7 +664,7 @@ impl<'a> TraitDef<'a> {\n         }).collect();\n \n         // Create the type of `self`.\n-        let path = cx.path_all(self.span, false, vec![type_ident], self_params, vec![]);\n+        let path = cx.path_all(self.span, false, vec![type_ident], self_params);\n         let self_type = cx.ty_path(path);\n \n         let attr = cx.attribute(cx.meta_word(self.span, sym::automatically_derived));"}, {"sha": "6ae02a5cab199e8cc857370c6d5d4dd8a527d292", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=67d88f607ed831cf692387703c34441019b8db96", "patch": "@@ -82,12 +82,12 @@ impl<'a> Path<'a> {\n                        .collect();\n \n         match self.kind {\n-            PathKind::Global => cx.path_all(span, true, idents, params, Vec::new()),\n-            PathKind::Local => cx.path_all(span, false, idents, params, Vec::new()),\n+            PathKind::Global => cx.path_all(span, true, idents, params),\n+            PathKind::Local => cx.path_all(span, false, idents, params),\n             PathKind::Std => {\n                 let def_site = cx.with_def_site_ctxt(DUMMY_SP);\n                 idents.insert(0, Ident::new(kw::DollarCrate, def_site));\n-                cx.path_all(span, false, idents, params, Vec::new())\n+                cx.path_all(span, false, idents, params)\n             }\n         }\n \n@@ -183,7 +183,7 @@ impl<'a> Ty<'a> {\n                     }\n                 }).collect();\n \n-                cx.path_all(span, false, vec![self_ty], params, vec![])\n+                cx.path_all(span, false, vec![self_ty], params)\n             }\n             Literal(ref p) => p.to_path(cx, span, self_ty, generics),\n             Ptr(..) => cx.span_bug(span, \"pointer in a path in generic `derive`\"),"}, {"sha": "02757bf6b1689f730aa63aaea8a747f2870093a0", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d88f607ed831cf692387703c34441019b8db96/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=67d88f607ed831cf692387703c34441019b8db96", "patch": "@@ -32,7 +32,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                                                                  Ident::new(sym::str, sp)),\n                                                      Some(lt),\n                                                      ast::Mutability::Immutable))],\n-                                     vec![]))\n+                                     ))\n         }\n         Ok(s) => {\n             cx.expr_call_global(sp,"}]}