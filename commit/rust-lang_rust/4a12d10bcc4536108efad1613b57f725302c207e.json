{"sha": "4a12d10bcc4536108efad1613b57f725302c207e", "node_id": "C_kwDOAAsO6NoAKDRhMTJkMTBiY2M0NTM2MTA4ZWZhZDE2MTNiNTdmNzI1MzAyYzIwN2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T05:45:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T05:45:28Z"}, "message": "Auto merge of #101928 - notriddle:rollup-pexhhxe, r=notriddle\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #101340 (Adding Fuchsia zxdb debugging walkthrough to docs)\n - #101741 (Adding needs-unwind arg to applicable compiler ui tests)\n - #101782 (Update `symbol_mangling` diagnostics migration)\n - #101878 (More simple formatting)\n - #101898 (Remove some unused CSS rules)\n - #101911 (rustdoc: remove no-op CSS on `.source .content`)\n - #101914 (rustdoc-json-types: Document that ResolvedPath can also be a union)\n - #101921 (Pass --cfg=bootstrap for rustdoc for proc_macro crates)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "42c876d96b40df4493622989df942bdb764097b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42c876d96b40df4493622989df942bdb764097b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a12d10bcc4536108efad1613b57f725302c207e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a12d10bcc4536108efad1613b57f725302c207e", "html_url": "https://github.com/rust-lang/rust/commit/4a12d10bcc4536108efad1613b57f725302c207e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a12d10bcc4536108efad1613b57f725302c207e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c524c7dd258628f79e590626e8534dceac477c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c524c7dd258628f79e590626e8534dceac477c4c", "html_url": "https://github.com/rust-lang/rust/commit/c524c7dd258628f79e590626e8534dceac477c4c"}, {"sha": "cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3", "html_url": "https://github.com/rust-lang/rust/commit/cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3"}], "stats": {"total": 519, "additions": 307, "deletions": 212}, "files": [{"sha": "6c514c75a500c55fa8af8a7facee320bd16c58c7", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -2088,15 +2088,15 @@ pub enum InlineAsmRegOrRegClass {\n bitflags::bitflags! {\n     #[derive(Encodable, Decodable, HashStable_Generic)]\n     pub struct InlineAsmOptions: u16 {\n-        const PURE = 1 << 0;\n-        const NOMEM = 1 << 1;\n-        const READONLY = 1 << 2;\n+        const PURE            = 1 << 0;\n+        const NOMEM           = 1 << 1;\n+        const READONLY        = 1 << 2;\n         const PRESERVES_FLAGS = 1 << 3;\n-        const NORETURN = 1 << 4;\n-        const NOSTACK = 1 << 5;\n-        const ATT_SYNTAX = 1 << 6;\n-        const RAW = 1 << 7;\n-        const MAY_UNWIND = 1 << 8;\n+        const NORETURN        = 1 << 4;\n+        const NOSTACK         = 1 << 5;\n+        const ATT_SYNTAX      = 1 << 6;\n+        const RAW             = 1 << 7;\n+        const MAY_UNWIND      = 1 << 8;\n     }\n }\n "}, {"sha": "b40ad6f700e82e8abda0d851f2f241f830c4d2ce", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -297,11 +297,11 @@ impl ExprPrecedence {\n         match self {\n             ExprPrecedence::Closure => PREC_CLOSURE,\n \n-            ExprPrecedence::Break |\n-            ExprPrecedence::Continue |\n-            ExprPrecedence::Ret |\n-            ExprPrecedence::Yield |\n-            ExprPrecedence::Yeet => PREC_JUMP,\n+            ExprPrecedence::Break\n+            | ExprPrecedence::Continue\n+            | ExprPrecedence::Ret\n+            | ExprPrecedence::Yield\n+            | ExprPrecedence::Yeet => PREC_JUMP,\n \n             // `Range` claims to have higher precedence than `Assign`, but `x .. x = x` fails to\n             // parse, instead of parsing as `(x .. x) = x`.  Giving `Range` a lower precedence\n@@ -318,43 +318,43 @@ impl ExprPrecedence {\n             ExprPrecedence::AssignOp => AssocOp::Assign.precedence() as i8,\n \n             // Unary, prefix\n-            ExprPrecedence::Box |\n-            ExprPrecedence::AddrOf |\n+            ExprPrecedence::Box\n+            | ExprPrecedence::AddrOf\n             // Here `let pats = expr` has `let pats =` as a \"unary\" prefix of `expr`.\n             // However, this is not exactly right. When `let _ = a` is the LHS of a binop we\n             // need parens sometimes. E.g. we can print `(let _ = a) && b` as `let _ = a && b`\n             // but we need to print `(let _ = a) < b` as-is with parens.\n-            ExprPrecedence::Let |\n-            ExprPrecedence::Unary => PREC_PREFIX,\n+            | ExprPrecedence::Let\n+            | ExprPrecedence::Unary => PREC_PREFIX,\n \n             // Unary, postfix\n-            ExprPrecedence::Await |\n-            ExprPrecedence::Call |\n-            ExprPrecedence::MethodCall |\n-            ExprPrecedence::Field |\n-            ExprPrecedence::Index |\n-            ExprPrecedence::Try |\n-            ExprPrecedence::InlineAsm |\n-            ExprPrecedence::Mac => PREC_POSTFIX,\n+            ExprPrecedence::Await\n+            | ExprPrecedence::Call\n+            | ExprPrecedence::MethodCall\n+            | ExprPrecedence::Field\n+            | ExprPrecedence::Index\n+            | ExprPrecedence::Try\n+            | ExprPrecedence::InlineAsm\n+            | ExprPrecedence::Mac => PREC_POSTFIX,\n \n             // Never need parens\n-            ExprPrecedence::Array |\n-            ExprPrecedence::Repeat |\n-            ExprPrecedence::Tup |\n-            ExprPrecedence::Lit |\n-            ExprPrecedence::Path |\n-            ExprPrecedence::Paren |\n-            ExprPrecedence::If |\n-            ExprPrecedence::While |\n-            ExprPrecedence::ForLoop |\n-            ExprPrecedence::Loop |\n-            ExprPrecedence::Match |\n-            ExprPrecedence::ConstBlock |\n-            ExprPrecedence::Block |\n-            ExprPrecedence::TryBlock |\n-            ExprPrecedence::Async |\n-            ExprPrecedence::Struct |\n-            ExprPrecedence::Err => PREC_PAREN,\n+            ExprPrecedence::Array\n+            | ExprPrecedence::Repeat\n+            | ExprPrecedence::Tup\n+            | ExprPrecedence::Lit\n+            | ExprPrecedence::Path\n+            | ExprPrecedence::Paren\n+            | ExprPrecedence::If\n+            | ExprPrecedence::While\n+            | ExprPrecedence::ForLoop\n+            | ExprPrecedence::Loop\n+            | ExprPrecedence::Match\n+            | ExprPrecedence::ConstBlock\n+            | ExprPrecedence::Block\n+            | ExprPrecedence::TryBlock\n+            | ExprPrecedence::Async\n+            | ExprPrecedence::Struct\n+            | ExprPrecedence::Err => PREC_PAREN,\n         }\n     }\n }"}, {"sha": "b7d48280f46198d3b72e42a9f8937723d8b2a10e", "filename": "compiler/rustc_error_messages/locales/en-US/symbol_mangling.ftl", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsymbol_mangling.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsymbol_mangling.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsymbol_mangling.ftl?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,7 +1 @@\n-symbol_mangling_invalid_symbol_name = symbol-name({$mangled_formatted})\n-\n-symbol_mangling_invalid_trait_item = demangling({$demangling_formatted})\n-\n-symbol_mangling_alt_invalid_trait_item = demangling-alt({$alt_demangling_formatted})\n-\n-symbol_mangling_invalid_def_path = def-path({$def_path})\n+symbol_mangling_test_output = {$kind}({$content})"}, {"sha": "a8436ea64f8d77702b4a4579a45c28ebc300e114", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -139,11 +139,10 @@ impl LifetimeName {\n         match self {\n             LifetimeName::ImplicitObjectLifetimeDefault | LifetimeName::Infer => true,\n \n-            // It might seem surprising that `Fresh` counts as\n-            // *not* elided -- but this is because, as far as the code\n-            // in the compiler is concerned -- `Fresh` variants act\n-            // equivalently to \"some fresh name\". They correspond to\n-            // early-bound regions on an impl, in other words.\n+            // It might seem surprising that `Fresh` counts as not *elided*\n+            // -- but this is because, as far as the code in the compiler is\n+            // concerned -- `Fresh` variants act equivalently to \"some fresh name\".\n+            // They correspond to early-bound regions on an impl, in other words.\n             LifetimeName::Error | LifetimeName::Param(..) | LifetimeName::Static => false,\n         }\n     }"}, {"sha": "b3f15ba7cbf25609bf5f0d84bf927336fb955c02", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1666,7 +1666,8 @@ impl CheckAttrVisitor<'_> {\n                         E0552,\n                         \"unrecognized representation hint\"\n                     )\n-                    .help(\"valid reprs are `C`, `align`, `packed`, `transparent`, `simd`, `i8`, `u8`, `i16`, `u16`, `i32`, `u32`, `i64`, `u64`, `i128`, `u128`, `isize`, `usize`\")\n+                    .help(\"valid reprs are `C`, `align`, `packed`, `transparent`, `simd`, `i8`, `u8`, \\\n+                          `i16`, `u16`, `i32`, `u32`, `i64`, `u64`, `i128`, `u128`, `isize`, `usize`\")\n                     .emit();\n \n                     continue;"}, {"sha": "664d2543f1fdb384d475df29125b86fb21924230", "filename": "compiler/rustc_symbol_mangling/src/errors.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,36 +1,34 @@\n //! Errors emitted by symbol_mangling.\n \n+use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n use rustc_macros::SessionDiagnostic;\n use rustc_span::Span;\n \n #[derive(SessionDiagnostic)]\n-#[diag(symbol_mangling::invalid_symbol_name)]\n-pub struct InvalidSymbolName {\n+#[diag(symbol_mangling::test_output)]\n+pub struct TestOutput {\n     #[primary_span]\n     pub span: Span,\n-    pub mangled_formatted: String,\n+    pub kind: Kind,\n+    pub content: String,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(symbol_mangling::invalid_trait_item)]\n-pub struct InvalidTraitItem {\n-    #[primary_span]\n-    pub span: Span,\n-    pub demangling_formatted: String,\n+pub enum Kind {\n+    SymbolName,\n+    Demangling,\n+    DemanglingAlt,\n+    DefPath,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(symbol_mangling::alt_invalid_trait_item)]\n-pub struct AltInvalidTraitItem {\n-    #[primary_span]\n-    pub span: Span,\n-    pub alt_demangling_formatted: String,\n-}\n-\n-#[derive(SessionDiagnostic)]\n-#[diag(symbol_mangling::invalid_def_path)]\n-pub struct InvalidDefPath {\n-    #[primary_span]\n-    pub span: Span,\n-    pub def_path: String,\n+impl IntoDiagnosticArg for Kind {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        let kind = match self {\n+            Kind::SymbolName => \"symbol-name\",\n+            Kind::Demangling => \"demangling\",\n+            Kind::DemanglingAlt => \"demangling-alt\",\n+            Kind::DefPath => \"def-path\",\n+        }\n+        .into();\n+        DiagnosticArgValue::Str(kind)\n+    }\n }"}, {"sha": "9d89c9c52b20e6181c0a177f56b5139b575775e0", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -4,7 +4,7 @@\n //! def-path. This is used for unit testing the code that generates\n //! paths etc in all kinds of annoying scenarios.\n \n-use crate::errors::{AltInvalidTraitItem, InvalidDefPath, InvalidSymbolName, InvalidTraitItem};\n+use crate::errors::{Kind, TestOutput};\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{subst::InternalSubsts, Instance, TyCtxt};\n@@ -60,26 +60,30 @@ impl SymbolNamesTest<'_> {\n                 tcx.erase_regions(InternalSubsts::identity_for_item(tcx, def_id)),\n             );\n             let mangled = tcx.symbol_name(instance);\n-            tcx.sess.emit_err(InvalidSymbolName {\n+            tcx.sess.emit_err(TestOutput {\n                 span: attr.span,\n-                mangled_formatted: format!(\"{mangled}\"),\n+                kind: Kind::SymbolName,\n+                content: format!(\"{mangled}\"),\n             });\n             if let Ok(demangling) = rustc_demangle::try_demangle(mangled.name) {\n-                tcx.sess.emit_err(InvalidTraitItem {\n+                tcx.sess.emit_err(TestOutput {\n                     span: attr.span,\n-                    demangling_formatted: format!(\"{demangling}\"),\n+                    kind: Kind::Demangling,\n+                    content: format!(\"{demangling}\"),\n                 });\n-                tcx.sess.emit_err(AltInvalidTraitItem {\n+                tcx.sess.emit_err(TestOutput {\n                     span: attr.span,\n-                    alt_demangling_formatted: format!(\"{:#}\", demangling),\n+                    kind: Kind::DemanglingAlt,\n+                    content: format!(\"{:#}\", demangling),\n                 });\n             }\n         }\n \n         for attr in tcx.get_attrs(def_id.to_def_id(), DEF_PATH) {\n-            tcx.sess.emit_err(InvalidDefPath {\n+            tcx.sess.emit_err(TestOutput {\n                 span: attr.span,\n-                def_path: with_no_trimmed_paths!(tcx.def_path_str(def_id.to_def_id())),\n+                kind: Kind::DefPath,\n+                content: with_no_trimmed_paths!(tcx.def_path_str(def_id.to_def_id())),\n             });\n         }\n     }"}, {"sha": "e96f8b0d3125fe172d453801ac6aea0e7db52d4a", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -139,10 +139,8 @@ fn main() {\n         // Cargo doesn't pass RUSTFLAGS to proc_macros:\n         // https://github.com/rust-lang/cargo/issues/4423\n         // Thus, if we are on stage 0, we explicitly set `--cfg=bootstrap`.\n-        // We also declare that the flag is expected, which is mainly needed for\n-        // later stages so that they don't warn about #[cfg(bootstrap)],\n-        // but enabling it for stage 0 too lets any warnings, if they occur,\n-        // occur more early on, e.g. about #[cfg(bootstrap = \"foo\")].\n+        // We also declare that the flag is expected, which we need to do to not\n+        // get warnings about it being unexpected.\n         if stage == \"0\" {\n             cmd.arg(\"--cfg=bootstrap\");\n         }"}, {"sha": "e69cab956c5078eed10822aefc6cf5b0489c718d", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -11,6 +11,7 @@ include!(\"../dylib_util.rs\");\n \n fn main() {\n     let args = env::args_os().skip(1).collect::<Vec<_>>();\n+    let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n     let rustdoc = env::var_os(\"RUSTDOC_REAL\").expect(\"RUSTDOC_REAL was not set\");\n     let libdir = env::var_os(\"RUSTDOC_LIBDIR\").expect(\"RUSTDOC_LIBDIR was not set\");\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n@@ -62,6 +63,16 @@ fn main() {\n             cmd.arg(\"-Clink-arg=-Wl,--threads=1\");\n         }\n     }\n+    // Cargo doesn't pass RUSTDOCFLAGS to proc_macros:\n+    // https://github.com/rust-lang/cargo/issues/4423\n+    // Thus, if we are on stage 0, we explicitly set `--cfg=bootstrap`.\n+    // We also declare that the flag is expected, which we need to do to not\n+    // get warnings about it being unexpected.\n+    if stage == \"0\" {\n+        cmd.arg(\"--cfg=bootstrap\");\n+    }\n+    cmd.arg(\"-Zunstable-options\");\n+    cmd.arg(\"--check-cfg=values(bootstrap)\");\n \n     if verbose > 1 {\n         eprintln!("}, {"sha": "1ff6003c121cd51f2b2079e2f106796a9f7297c1", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 135, "deletions": 2, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -42,6 +42,11 @@ authoritative if this occurs. Instead of pinging individual members, use\n 1. [Testing](#testing)\n     1. [Running unit tests](#running-unit-tests)\n     1. [Running the compiler test suite](#running-the-compiler-test-suite)\n+1. [Debugging](#debugging)\n+    1. [`zxdb`](#zxdb)\n+    1. [Attaching `zxdb`](#attaching-zxdb)\n+    1. [Using `zxdb`](#using-zxdb)\n+    1. [Displaying source code in `zxdb`](#displaying-source-code-in-zxdb)\n \n ## Requirements\n \n@@ -136,7 +141,7 @@ These options configure the following:\n \n * `-Lnative=${SDK_PATH}/arch/${ARCH}/lib`: Link against Fuchsia libraries from\n   the SDK\n-* `-Lnative=${SDK_PATH}/arch/${ARCH}/sysroot/lib`: Link against Fuchsia kernel\n+* `-Lnative=${SDK_PATH}/arch/${ARCH}/sysroot/lib`: Link against Fuchsia sysroot\n   libraries from the SDK\n \n In total, our new project will look like:\n@@ -253,7 +258,7 @@ the following options:\n   platform of your choice\n * `-Lnative ${SDK_PATH}/arch/${ARCH}/lib`: Link against Fuchsia libraries from\n   the SDK\n-* `-Lnative ${SDK_PATH}/arch/${ARCH}/sysroot/lib`: Link against Fuchsia kernel\n+* `-Lnative ${SDK_PATH}/arch/${ARCH}/sysroot/lib`: Link against Fuchsia sysroot\n   libraries from the SDK\n \n Putting it all together:\n@@ -639,6 +644,130 @@ available on the [Fuchsia devsite].\n Running the Rust test suite on Fuchsia is [not currently supported], but work is\n underway to enable it.\n \n+## Debugging\n+\n+### `zxdb`\n+\n+Debugging components running on a Fuchsia emulator can be done using the\n+console-mode debugger: [zxdb]. We will demonstrate attaching necessary symbol\n+paths to debug our `hello-fuchsia` component.\n+\n+### Attaching `zxdb`\n+\n+In a separate terminal, issue the following command from our `hello_fuchsia`\n+directory to launch `zxdb`:\n+\n+**In separate terminal**\n+```sh\n+${SDK_PATH}/tools/${ARCH}/ffx debug connect -- \\\n+    --symbol-path target/x86_64-fuchsia/debug\n+```\n+\n+* `--symbol-path` gets required symbol paths, which are\n+necessary for stepping through your program.\n+\n+The \"[displaying source code in `zxdb`](#displaying-source-code-in-zxdb)\" section describes how you can\n+display Rust and/or Fuchsia source code in your debugging session.\n+\n+### Using `zxdb`\n+\n+Once launched, you will be presented with the window:\n+\n+```sh\n+Connecting (use \"disconnect\" to cancel)...\n+Connected successfully.\n+\ud83d\udc49 To get started, try \"status\" or \"help\".\n+[zxdb]\n+```\n+\n+To attach to our program, we can run:\n+\n+```sh\n+[zxdb] attach hello_fuchsia\n+```\n+\n+**Expected output**\n+```sh\n+Waiting for process matching \"hello_fuchsia\".\n+Type \"filter\" to see the current filters.\n+```\n+\n+Next, we can create a breakpoint at main using \"b main\":\n+\n+```sh\n+[zxdb] b main\n+```\n+\n+**Expected output**\n+```sh\n+Created Breakpoint 1 @ main\n+```\n+\n+Finally, we can re-run the \"hello_fuchsia\" component from our original\n+terminal:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/ffx component run \\\n+    --recreate \\\n+    fuchsia-pkg://hello-fuchsia/hello_fuchsia_manifest#meta/hello_fuchsia.cm\n+```\n+\n+Once our component is running, our `zxdb` window will stop execution\n+in our main as desired:\n+\n+**Expected output**\n+```txt\n+Breakpoint 1 now matching 1 addrs for main\n+\ud83d\uded1 on bp 1 hello_fuchsia::main() \u2022 main.rs:2\n+   1 fn main() {\n+ \u25b6 2     println!(\"Hello Fuchsia!\");\n+   3 }\n+   4\n+[zxdb]\n+```\n+\n+`zxdb` has similar commands to other debuggers like [gdb].\n+To list the available commands, run \"help\" in the\n+`zxdb` window or visit [the zxdb documentation].\n+\n+```sh\n+[zxdb] help\n+```\n+\n+**Expected output**\n+```sh\n+Help!\n+\n+  Type \"help <command>\" for command-specific help.\n+\n+Other help topics (see \"help <topic>\")\n+...\n+```\n+\n+### Displaying source code in `zxdb`\n+\n+By default, the debugger will not be able to display\n+source code while debugging. For our user code, we displayed\n+source code by pointing our debugger to our debug binary via\n+the `--symbol-path` arg. To display library source code in\n+the debugger, you must provide paths to the source using\n+`--build-dir`. For example, to display the Rust and Fuchsia\n+source code:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/ffx debug connect -- \\\n+    --symbol-path target/x86_64-fuchsia/debug \\\n+    --build-dir ${RUST_SRC_PATH}/rust \\\n+    --build-dir ${FUCHSIA_SRC_PATH}/fuchsia/out/default\n+```\n+\n+ * `--build-dir` links against source code paths, which\n+ are not strictly necessary for debugging, but is a nice-to-have\n+ for displaying source code in `zxdb`.\n+\n+ Linking to a Fuchsia checkout can help with debugging Fuchsia libraries,\n+ such as [fdio].\n+\n [Fuchsia team]: https://team-api.infra.rust-lang.org/v1/teams/fuchsia.json\n [Fuchsia]: https://fuchsia.dev/\n [source tree]: https://fuchsia.dev/fuchsia-src/get-started/learn/build\n@@ -649,3 +778,7 @@ underway to enable it.\n [reference for the file format]: https://fuchsia.dev/reference/cml\n [Fuchsia devsite]: https://fuchsia.dev/reference/cml\n [not currently supported]: https://fxbug.dev/105393\n+[zxdb]: https://fuchsia.dev/fuchsia-src/development/debugger\n+[gdb]: https://www.sourceware.org/gdb/\n+[the zxdb documentation]: https://fuchsia.dev/fuchsia-src/development/debugger\n+[fdio]: https://cs.opensource.google/fuchsia/fuchsia/+/main:sdk/lib/fdio/"}, {"sha": "3995c9fdb01b259b36005f41964682a6f8577e3d", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -346,9 +346,7 @@ img {\n }\n \n .source .content {\n-\tmax-width: none;\n \toverflow: visible;\n-\tmargin-left: 0px;\n }\n \n .sub-container {"}, {"sha": "c292a8a7ef70b196ec97ec0949b344e9ca88db4d", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 9, "deletions": 48, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -118,8 +118,7 @@ pre, .rustdoc.source .example-wrap {\n .content span.primitive, .content a.primitive { color: #ffa0a5; }\n .content span.traitalias, .content a.traitalias { color: #39AFD7; }\n .content span.keyword, .content a.keyword { color: #39AFD7; }\n-\n-.content span.externcrate, .content span.mod, .content a.mod {\n+.content span.mod, .content a.mod {\n \tcolor: #39AFD7;\n }\n .content span.struct, .content a.struct {\n@@ -131,28 +130,17 @@ pre, .rustdoc.source .example-wrap {\n .content span.trait, .content a.trait {\n \tcolor: #39AFD7;\n }\n-.content span.type, .content a.type {\n-\tcolor: #39AFD7;\n-}\n-.content span.type,\n-.content a.type,\n-.block a.current.type { color: #39AFD7; }\n-.content span.associatedtype,\n-.content a.associatedtype,\n-.block a.current.associatedtype { color: #39AFD7; }\n-.content span.fn, .content a.fn, .content span.method,\n-.content a.method, .content span.tymethod,\n-.content a.tymethod, .content .fnname {\n-\tcolor: #fdd687;\n-}\n+.content span.type, .content a.type { color: #39AFD7; }\n+.content span.associatedtype, .content a.associatedtype { color: #39AFD7; }\n+.content span.fn, .content a.fn,\n+.content .fnname { color: #fdd687; }\n .content span.attr, .content a.attr, .content span.derive,\n .content a.derive, .content span.macro, .content a.macro {\n \tcolor: #a37acc;\n }\n \n .sidebar a { color: #53b1db; }\n .sidebar a.current.type { color: #53b1db; }\n-.sidebar a.current.associatedtype { color: #53b1db; }\n \n pre.rust .comment { color: #788797; }\n pre.rust .doccomment { color: #a1ac88; }\n@@ -290,34 +278,11 @@ individually rather than as a group) */\n /* FIXME: these rules should be at the bottom of the file but currently must be\n above the `@media (max-width: 700px)` rules due to a bug in the css checker */\n /* see https://github.com/rust-lang/rust/pull/71237#issuecomment-618170143 */\n-.content span.attr,.content a.attr,.block a.current.attr,.content span.derive,.content a.derive,\n-.block a.current.derive,.content span.macro,.content a.macro,.block a.current.macro {}\n-.content span.struct,.content a.struct,.block a.current.struct {}\n-#titles>button:hover,#titles>button.selected {}\n-.content span.typedef,.content a.typedef,.block a.current.typedef {}\n-.content span.union,.content a.union,.block a.current.union {}\n pre.rust .lifetime {}\n-.stab.unstable {}\n-h2,\n-h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod) {}\n-.content span.enum,.content a.enum,.block a.current.enum {}\n-.content span.constant,.content a.constant,.block a.current.constant,.content span.static,\n-.content a.static, .block a.current.static {}\n-.content span.keyword,.content a.keyword,.block a.current.keyword {}\n-.content span.traitalias,.content a.traitalias,.block a.current.traitalias {}\n-.content span.fn,.content a.fn,.block a.current.fn,.content span.method,.content a.method,\n-.block a.current.method,.content span.tymethod,.content a.tymethod,.block a.current.tymethod,\n-.content .fnname {}\n pre.rust .kw {}\n-pre.rust .self,pre.rust .bool-val,pre.rust .prelude-val,pre.rust .attribute {}\n-.content span.foreigntype,.content a.foreigntype,.block a.current.foreigntype {}\n-.stab.deprecated {}\n-.content a.attr,.content a.derive,.content a.macro {}\n-.stab.portability {}\n-.content span.primitive,.content a.primitive,.block a.current.primitive {}\n-.content span.externcrate,.content span.mod,.content a.mod,.block a.current.mod {}\n-pre.rust .kw-2,pre.rust .prelude-ty {}\n-.content span.trait,.content a.trait,.block a.current.trait {}\n+#titles > button:hover, #titles > button.selected {}\n+pre.rust .self, pre.rust .bool-val, pre.rust .prelude-val, pre.rust .attribute {}\n+pre.rust .kw-2, pre.rust .prelude-ty {}\n \n .search-results a:focus span {}\n a.result-trait:focus {}\n@@ -353,13 +318,9 @@ a.result-keyword:focus {}\n .sidebar a.current.constant\n .sidebar a.current.static {}\n .sidebar a.current.primitive {}\n-.sidebar a.current.externcrate\n-.sidebar a.current.mod {}\n .sidebar a.current.trait {}\n .sidebar a.current.traitalias {}\n-.sidebar a.current.fn,\n-.sidebar a.current.method,\n-.sidebar a.current.tymethod {}\n+.sidebar a.current.fn {}\n .sidebar a.current.keyword {}\n \n kbd {"}, {"sha": "68542d3305ca04f4ccbcb6125a8247eb62256afa", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -83,35 +83,29 @@ a.result-keyword:focus { background-color: #884719; }\n \n .content .item-info::before { color: #ccc; }\n \n-.content span.enum, .content a.enum, .block a.current.enum { color: #2dbfb8; }\n-.content span.struct, .content a.struct, .block a.current.struct { color: #2dbfb8; }\n-.content span.type, .content a.type, .block a.current.type { color: #2dbfb8; }\n-.content span.associatedtype,\n-.content a.associatedtype,\n-.block a.current.associatedtype { color: #D2991D; }\n-.content span.foreigntype, .content a.foreigntype, .block a.current.foreigntype { color: #2dbfb8; }\n-.content span.attr, .content a.attr, .block a.current.attr,\n-.content span.derive, .content a.derive, .block a.current.derive,\n-.content span.macro, .content a.macro, .block a.current.macro { color: #09bd00; }\n-.content span.union, .content a.union, .block a.current.union { color: #2dbfb8; }\n-.content span.constant, .content a.constant, .block a.current.constant,\n-.content span.static, .content a.static, .block a.current.static { color: #D2991D; }\n-.content span.primitive, .content a.primitive, .block a.current.primitive { color: #2dbfb8; }\n-.content span.externcrate,\n-.content span.mod, .content a.mod, .block a.current.mod { color: #D2991D; }\n-.content span.trait, .content a.trait, .block a.current.trait { color: #b78cf2; }\n-.content span.traitalias, .content a.traitalias, .block a.current.traitalias { color: #b78cf2; }\n-.content span.fn, .content a.fn, .block a.current.fn,\n-.content span.method, .content a.method, .block a.current.method,\n-.content span.tymethod, .content a.tymethod, .block a.current.tymethod,\n-.content .fnname{ color: #2BAB63; }\n-.content span.keyword, .content a.keyword, .block a.current.keyword { color: #D2991D; }\n+.content span.enum, .content a.enum { color: #2dbfb8; }\n+.content span.struct, .content a.struct { color: #2dbfb8; }\n+.content span.type, .content a.type { color: #2dbfb8; }\n+.content span.associatedtype, .content a.associatedtype { color: #D2991D; }\n+.content span.foreigntype, .content a.foreigntype { color: #2dbfb8; }\n+.content span.attr, .content a.attr,\n+.content span.derive, .content a.derive,\n+.content span.macro, .content a.macro { color: #09bd00; }\n+.content span.union, .content a.union { color: #2dbfb8; }\n+.content span.constant, .content a.constant,\n+.content span.static, .content a.static { color: #D2991D; }\n+.content span.primitive, .content a.primitive { color: #2dbfb8; }\n+.content span.mod, .content a.mod { color: #D2991D; }\n+.content span.trait, .content a.trait { color: #b78cf2; }\n+.content span.traitalias, .content a.traitalias { color: #b78cf2; }\n+.content span.fn, .content a.fn,\n+.content .fnname { color: #2BAB63; }\n+.content span.keyword, .content a.keyword { color: #D2991D; }\n \n .sidebar a { color: #fdbf35; }\n .sidebar a.current.enum { color: #12ece2; }\n .sidebar a.current.struct { color: #12ece2; }\n .sidebar a.current.type { color: #12ece2; }\n-.sidebar a.current.associatedtype { color: #fdbf35; }\n .sidebar a.current.foreigntype { color: #12ece2; }\n .sidebar a.current.attr,\n .sidebar a.current.derive,\n@@ -120,13 +114,9 @@ a.result-keyword:focus { background-color: #884719; }\n .sidebar a.current.constant\n .sidebar a.current.static { color: #fdbf35; }\n .sidebar a.current.primitive { color: #12ece2; }\n-.sidebar a.current.externcrate\n-.sidebar a.current.mod { color: #fdbf35; }\n .sidebar a.current.trait { color: #cca7ff; }\n .sidebar a.current.traitalias { color: #cca7ff; }\n-.sidebar a.current.fn,\n-.sidebar a.current.method,\n-.sidebar a.current.tymethod { color: #32d479; }\n+.sidebar a.current.fn { color: #32d479; }\n .sidebar a.current.keyword { color: #fdbf35; }\n \n pre.rust .comment { color: #8d8d8b; }"}, {"sha": "0b7d1600e7aa47e94474fdd8a9d4a0e8b859fa3e", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -82,35 +82,29 @@ a.result-keyword:focus { background-color: #afc6e4; }\n \n .content .item-info::before { color: #ccc; }\n \n-.content span.enum, .content a.enum, .block a.current.enum { color: #AD378A; }\n-.content span.struct, .content a.struct, .block a.current.struct { color: #AD378A; }\n-.content span.type, .content a.type, .block a.current.type { color:  #AD378A; }\n-.content span.foreigntype, .content a.foreigntype, .block a.current.foreigntype { color: #3873AD; }\n-.content span.associatedtype,\n-.content a.associatedtype,\n-.block a.current.associatedtype { color: #3873AD; }\n-.content span.attr, .content a.attr, .block a.current.attr,\n-.content span.derive, .content a.derive, .block a.current.derive,\n-.content span.macro, .content a.macro, .block a.current.macro { color: #068000; }\n-.content span.union, .content a.union, .block a.current.union { color: #AD378A; }\n-.content span.constant, .content a.constant, .block a.current.constant,\n-.content span.static, .content a.static, .block a.current.static { color: #3873AD; }\n-.content span.primitive, .content a.primitive, .block a.current.primitive { color: #AD378A; }\n-.content span.externcrate,\n-.content span.mod, .content a.mod, .block a.current.mod { color: #3873AD; }\n-.content span.trait, .content a.trait, .block a.current.trait { color: #6E4FC9; }\n-.content span.traitalias, .content a.traitalias, .block a.current.traitalias { color: #5137AD; }\n-.content span.fn, .content a.fn, .block a.current.fn,\n-.content span.method, .content a.method, .block a.current.method,\n-.content span.tymethod, .content a.tymethod, .block a.current.tymethod,\n+.content span.enum, .content a.enum { color: #AD378A; }\n+.content span.struct, .content a.struct { color: #AD378A; }\n+.content span.type, .content a.type { color:  #AD378A; }\n+.content span.associatedtype, .content a.associatedtype { color: #3873AD; }\n+.content span.foreigntype, .content a.foreigntype { color: #3873AD; }\n+.content span.attr, .content a.attr,\n+.content span.derive, .content a.derive,\n+.content span.macro, .content a.macro { color: #068000; }\n+.content span.union, .content a.union { color: #AD378A; }\n+.content span.constant, .content a.constant,\n+.content span.static, .content a.static { color: #3873AD; }\n+.content span.primitive, .content a.primitive { color: #AD378A; }\n+.content span.mod, .content a.mod { color: #3873AD; }\n+.content span.trait, .content a.trait { color: #6E4FC9; }\n+.content span.traitalias, .content a.traitalias { color: #5137AD; }\n+.content span.fn, .content a.fn,\n .content .fnname { color: #AD7C37; }\n-.content span.keyword, .content a.keyword, .block a.current.keyword { color: #3873AD; }\n+.content span.keyword, .content a.keyword { color: #3873AD; }\n \n .sidebar a { color: #356da4; }\n .sidebar a.current.enum { color: #a63283; }\n .sidebar a.current.struct { color: #a63283; }\n .sidebar a.current.type { color: #a63283; }\n-.sidebar a.current.associatedtype { color: #356da4; }\n .sidebar a.current.foreigntype { color: #356da4; }\n .sidebar a.current.attr,\n .sidebar a.current.derive,\n@@ -119,13 +113,9 @@ a.result-keyword:focus { background-color: #afc6e4; }\n .sidebar a.current.constant\n .sidebar a.current.static { color: #356da4; }\n .sidebar a.current.primitive { color: #a63283; }\n-.sidebar a.current.externcrate\n-.sidebar a.current.mod { color: #356da4; }\n .sidebar a.current.trait { color: #6849c3; }\n .sidebar a.current.traitalias { color: #4b349e; }\n-.sidebar a.current.fn,\n-.sidebar a.current.method,\n-.sidebar a.current.tymethod { color: #a67736; }\n+.sidebar a.current.fn { color: #a67736; }\n .sidebar a.current.keyword { color: #356da4; }\n \n a {"}, {"sha": "fb183042670e8db73ee2240255962a537d60cfd8", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -542,7 +542,7 @@ pub enum Term {\n #[serde(rename_all = \"snake_case\")]\n #[serde(tag = \"kind\", content = \"inner\")]\n pub enum Type {\n-    /// Structs and enums\n+    /// Structs, enums, and unions\n     ResolvedPath(Path),\n     DynTrait(DynTrait),\n     /// Parameterized types"}, {"sha": "c9df2b81c4b0f61f283a829fb4979c3720fef581", "filename": "src/test/rustdoc-json/unions/union.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Frustdoc-json%2Funions%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Frustdoc-json%2Funions%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Funions%2Funion.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,7 +1,15 @@\n // @has \"$.index[*][?(@.name=='Union')].visibility\" \\\"public\\\"\n // @has \"$.index[*][?(@.name=='Union')].kind\" \\\"union\\\"\n // @!has \"$.index[*][?(@.name=='Union')].inner.struct_type\"\n+// @set Union = \"$.index[*][?(@.name=='Union')].id\"\n pub union Union {\n     int: i32,\n     float: f32,\n }\n+\n+\n+// @is \"$.index[*][?(@.name=='make_int_union')].inner.decl.output.kind\" '\"resolved_path\"'\n+// @is \"$.index[*][?(@.name=='make_int_union')].inner.decl.output.inner.id\" $Union\n+pub fn make_int_union(int: i32) -> Union {\n+    Union { int }\n+}"}, {"sha": "2f5d1a360246a573a7a8151710c10d1073a1d955", "filename": "src/test/ui/asm/x86_64/may_unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,6 +1,7 @@\n // only-x86_64\n // run-pass\n // needs-asm-support\n+// needs-unwind\n \n #![feature(asm_sym, asm_unwind)]\n "}, {"sha": "3d215610593f305c3de45af412cd71a7de1b284d", "filename": "src/test/ui/mir/mir_codegen_calls_diverging_drops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls_diverging_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls_diverging_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls_diverging_drops.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -2,6 +2,7 @@\n // error-pattern:diverging_fn called\n // error-pattern:0 dropped\n // ignore-emscripten no processes\n+// needs-unwind this test checks that a destructor is called after panicking\n \n struct Droppable(u8);\n impl Drop for Droppable {"}, {"sha": "9a1802737722c15664479eacb8500d051c32fad3", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,4 +1,5 @@\n // aux-build:invalid-punct-ident.rs\n+// needs-unwind proc macro panics to report errors\n \n #[macro_use]\n extern crate invalid_punct_ident;"}, {"sha": "78aa84401a50582274826b21198b7cec422373d4", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,5 +1,5 @@\n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-1.rs:6:1\n+  --> $DIR/invalid-punct-ident-1.rs:7:1\n    |\n LL | invalid_punct!();\n    | ^^^^^^^^^^^^^^^^"}, {"sha": "afb6985e45829d27b7a10e814840acb82c578cd7", "filename": "src/test/ui/proc-macro/invalid-punct-ident-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,4 +1,5 @@\n // aux-build:invalid-punct-ident.rs\n+// needs-unwind proc macro panics to report errors\n \n #[macro_use]\n extern crate invalid_punct_ident;"}, {"sha": "66979e756aec020df2575a114986e5ed32e54764", "filename": "src/test/ui/proc-macro/invalid-punct-ident-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,5 +1,5 @@\n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-2.rs:6:1\n+  --> $DIR/invalid-punct-ident-2.rs:7:1\n    |\n LL | invalid_ident!();\n    | ^^^^^^^^^^^^^^^^"}, {"sha": "ff83695c5624759291f710ab79bcb27eec179512", "filename": "src/test/ui/proc-macro/invalid-punct-ident-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,4 +1,5 @@\n // aux-build:invalid-punct-ident.rs\n+// needs-unwind proc macro panics to report errors\n \n #[macro_use]\n extern crate invalid_punct_ident;"}, {"sha": "c096bc8c0439680b5ebba51f1a6a30999af8bc4e", "filename": "src/test/ui/proc-macro/invalid-punct-ident-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,5 +1,5 @@\n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-3.rs:6:1\n+  --> $DIR/invalid-punct-ident-3.rs:7:1\n    |\n LL | invalid_raw_ident!();\n    | ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "2d2774bd194c7e9c82d95e74c9f5f9e5c67b6002", "filename": "src/test/ui/proc-macro/invalid-punct-ident-4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,4 +1,5 @@\n // aux-build:invalid-punct-ident.rs\n+// needs-unwind proc macro panics to report errors\n \n #[macro_use]\n extern crate invalid_punct_ident;"}, {"sha": "ab4116141d81382d6a065f022a240bec3f8b1b37", "filename": "src/test/ui/proc-macro/invalid-punct-ident-4.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,19 +1,19 @@\n error: unexpected closing delimiter: `)`\n-  --> $DIR/invalid-punct-ident-4.rs:6:1\n+  --> $DIR/invalid-punct-ident-4.rs:7:1\n    |\n LL | lexer_failure!();\n    | ^^^^^^^^^^^^^^^^ unexpected closing delimiter\n    |\n    = note: this error originates in the macro `lexer_failure` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-4.rs:6:1\n+  --> $DIR/invalid-punct-ident-4.rs:7:1\n    |\n LL | lexer_failure!();\n    | ^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-punct-ident-4.rs:11:33\n+  --> $DIR/invalid-punct-ident-4.rs:12:33\n    |\n LL |     let _recovery_witness: () = 0;\n    |                            --   ^ expected `()`, found integer"}, {"sha": "03cdfa05e6b23156213b9fcf7979a3e01e2eec7e", "filename": "src/test/ui/proc-macro/issue-36935.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,4 +1,5 @@\n // aux-build:test-macros.rs\n+// needs-unwind proc macro panics to report errors\n \n #[macro_use]\n extern crate test_macros;"}, {"sha": "12290379853f1c0ac8fd3273d994951615ac98ce", "filename": "src/test/ui/proc-macro/issue-36935.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.stderr?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,5 +1,5 @@\n error[E0428]: the name `Baz` is defined multiple times\n-  --> $DIR/issue-36935.rs:7:1\n+  --> $DIR/issue-36935.rs:8:1\n    |\n LL | struct Baz {\n    | ^^^^^^^^^^\n@@ -10,7 +10,7 @@ LL | struct Baz {\n    = note: `Baz` must be defined only once in the type namespace of this module\n \n error: proc-macro derive panicked\n-  --> $DIR/issue-36935.rs:6:20\n+  --> $DIR/issue-36935.rs:7:20\n    |\n LL | #[derive(Identity, Panic)]\n    |                    ^^^^^"}, {"sha": "5aefec3ece0383ef1da1cf3e7705951028a3c68d", "filename": "src/test/ui/proc-macro/issue-76270-panic-in-libproc-macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fissue-76270-panic-in-libproc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fissue-76270-panic-in-libproc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-76270-panic-in-libproc-macro.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,5 +1,6 @@\n // aux-build:proc-macro-panic.rs\n // edition:2018\n+// needs-unwind proc macro panics to report errors\n \n // Regression test for issue #76270\n // Tests that we don't print an ICE message when a panic"}, {"sha": "d69de23a4c0ac4b43ff2d85853386462c22da050", "filename": "src/test/ui/proc-macro/issue-76270-panic-in-libproc-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fissue-76270-panic-in-libproc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fissue-76270-panic-in-libproc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-76270-panic-in-libproc-macro.stderr?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,5 +1,5 @@\n error: proc macro panicked\n-  --> $DIR/issue-76270-panic-in-libproc-macro.rs:10:1\n+  --> $DIR/issue-76270-panic-in-libproc-macro.rs:11:1\n    |\n LL | proc_macro_panic::panic_in_libproc_macro!();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "bcdcb704a7538b12ccb606ed324ad849d5a740ae", "filename": "src/test/ui/proc-macro/load-panic-backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -3,6 +3,7 @@\n // rustc-env:RUST_BACKTRACE=0\n // normalize-stderr-test \"thread '.*' panicked \" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+// needs-unwind proc macro panics to report errors\n \n #[macro_use]\n extern crate test_macros;"}, {"sha": "45d4fd1c9bc4cca809c4f58aa391cfc0494d4915", "filename": "src/test/ui/proc-macro/load-panic-backtrace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.stderr?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,6 +1,6 @@\n at 'panic-derive', $DIR/auxiliary/test-macros.rs:43:5\n error: proc-macro derive panicked\n-  --> $DIR/load-panic-backtrace.rs:10:10\n+  --> $DIR/load-panic-backtrace.rs:11:10\n    |\n LL | #[derive(Panic)]\n    |          ^^^^^"}, {"sha": "6ce88c400e0f7c4e343c898a333c146b8c38eec7", "filename": "src/test/ui/proc-macro/load-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.rs?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,4 +1,5 @@\n // aux-build:test-macros.rs\n+// needs-unwind proc macro panics to report errors\n \n #[macro_use]\n extern crate test_macros;"}, {"sha": "f0d62f690fd3c26e7a8cc5720e2e152781c73788", "filename": "src/test/ui/proc-macro/load-panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a12d10bcc4536108efad1613b57f725302c207e/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.stderr?ref=4a12d10bcc4536108efad1613b57f725302c207e", "patch": "@@ -1,5 +1,5 @@\n error: proc-macro derive panicked\n-  --> $DIR/load-panic.rs:6:10\n+  --> $DIR/load-panic.rs:7:10\n    |\n LL | #[derive(Panic)]\n    |          ^^^^^"}]}