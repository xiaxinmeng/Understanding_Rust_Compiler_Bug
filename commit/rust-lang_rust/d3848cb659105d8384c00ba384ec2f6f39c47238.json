{"sha": "d3848cb659105d8384c00ba384ec2f6f39c47238", "node_id": "C_kwDOAAsO6NoAKGQzODQ4Y2I2NTkxMDVkODM4NGMwMGJhMzg0ZWMyZjZmMzljNDcyMzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-18T15:01:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-18T15:01:32Z"}, "message": "Auto merge of #92064 - matthiaskrgr:rollup-tgj2pai, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #91858 (pass -Wl,-z,origin to set DF_ORIGIN when using rpath)\n - #91923 (Remove `in_band_lifetimes` from `rustc_query_impl`)\n - #91925 (Remove `in_band_lifetimes` from `rustc_privacy`)\n - #91977 (Clean up search code and unify function returned values)\n - #92018 (Fix typo in \"new region bound\" suggestion)\n - #92022 (Eliminate duplicate codes of expected_found_bool)\n - #92032 (hir: Do not introduce dummy type names for `extern` blocks in def paths)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bcabff3a473ed525cfe5830738b903a24b87eaf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcabff3a473ed525cfe5830738b903a24b87eaf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3848cb659105d8384c00ba384ec2f6f39c47238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3848cb659105d8384c00ba384ec2f6f39c47238", "html_url": "https://github.com/rust-lang/rust/commit/d3848cb659105d8384c00ba384ec2f6f39c47238", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3848cb659105d8384c00ba384ec2f6f39c47238/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f300477b89e70dd42379ba53c0e8ff74e9c694", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f300477b89e70dd42379ba53c0e8ff74e9c694", "html_url": "https://github.com/rust-lang/rust/commit/d3f300477b89e70dd42379ba53c0e8ff74e9c694"}, {"sha": "5e8f934149772b781bb04e796be73446f63f99d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8f934149772b781bb04e796be73446f63f99d2", "html_url": "https://github.com/rust-lang/rust/commit/5e8f934149772b781bb04e796be73446f63f99d2"}], "stats": {"total": 375, "additions": 183, "deletions": 192}, "files": [{"sha": "0b5656c9ad12786771b15b09fee80cb54e31a6a7", "filename": "compiler/rustc_codegen_ssa/src/back/rpath.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -23,9 +23,12 @@ pub fn get_rpath_flags(config: &mut RPathConfig<'_>) -> Vec<String> {\n     let rpaths = get_rpaths(config);\n     let mut flags = rpaths_to_flags(&rpaths);\n \n-    // Use DT_RUNPATH instead of DT_RPATH if available\n     if config.linker_is_gnu {\n+        // Use DT_RUNPATH instead of DT_RPATH if available\n         flags.push(\"-Wl,--enable-new-dtags\".to_owned());\n+\n+        // Set DF_ORIGIN for substitute $ORIGIN\n+        flags.push(\"-Wl,-z,origin\".to_owned());\n     }\n \n     flags"}, {"sha": "40071c6df8ccaa2b439fea85bcaae52c9eb60430", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -267,6 +267,8 @@ pub enum DefPathData {\n     // Different kinds of items and item-like things:\n     /// An impl.\n     Impl,\n+    /// An `extern` block.\n+    ForeignMod,\n     /// Something in the type namespace.\n     TypeNs(Symbol),\n     /// Something in the value namespace.\n@@ -469,7 +471,9 @@ impl DefPathData {\n         match *self {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => Some(name),\n \n-            Impl | CrateRoot | Misc | ClosureExpr | Ctor | AnonConst | ImplTrait => None,\n+            Impl | ForeignMod | CrateRoot | Misc | ClosureExpr | Ctor | AnonConst | ImplTrait => {\n+                None\n+            }\n         }\n     }\n \n@@ -482,6 +486,7 @@ impl DefPathData {\n             // Note that this does not show up in user print-outs.\n             CrateRoot => DefPathDataName::Anon { namespace: kw::Crate },\n             Impl => DefPathDataName::Anon { namespace: kw::Impl },\n+            ForeignMod => DefPathDataName::Anon { namespace: kw::Extern },\n             Misc => DefPathDataName::Anon { namespace: sym::misc },\n             ClosureExpr => DefPathDataName::Anon { namespace: sym::closure },\n             Ctor => DefPathDataName::Anon { namespace: sym::constructor },"}, {"sha": "03596f7dfad6d25dc282e95e6ec26f64192a4de2", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -37,7 +37,7 @@ use crate::traits::{Obligation, PredicateObligations};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::traits::ObligationCause;\n-use rustc_middle::ty::error::TypeError;\n+use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable};\n@@ -790,23 +790,23 @@ pub fn const_unification_error<'tcx>(\n     a_is_expected: bool,\n     (a, b): (&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>),\n ) -> TypeError<'tcx> {\n-    TypeError::ConstMismatch(ty::relate::expected_found_bool(a_is_expected, a, b))\n+    TypeError::ConstMismatch(ExpectedFound::new(a_is_expected, a, b))\n }\n \n fn int_unification_error<'tcx>(\n     a_is_expected: bool,\n     v: (ty::IntVarValue, ty::IntVarValue),\n ) -> TypeError<'tcx> {\n     let (a, b) = v;\n-    TypeError::IntMismatch(ty::relate::expected_found_bool(a_is_expected, a, b))\n+    TypeError::IntMismatch(ExpectedFound::new(a_is_expected, a, b))\n }\n \n fn float_unification_error<'tcx>(\n     a_is_expected: bool,\n     v: (ty::FloatVarValue, ty::FloatVarValue),\n ) -> TypeError<'tcx> {\n     let (ty::FloatVarValue(a), ty::FloatVarValue(b)) = v;\n-    TypeError::FloatMismatch(ty::relate::expected_found_bool(a_is_expected, a, b))\n+    TypeError::FloatMismatch(ExpectedFound::new(a_is_expected, a, b))\n }\n \n struct ConstInferUnifier<'cx, 'tcx> {"}, {"sha": "bf867db9ce6effaa7a316e7584b0dbbe46d7dd97", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -275,7 +275,7 @@ pub fn unexpected_hidden_region_diagnostic(\n                     fn_returns,\n                     hidden_region.to_string(),\n                     None,\n-                    format!(\"captures {}\", hidden_region),\n+                    format!(\"captures `{}`\", hidden_region),\n                     None,\n                 )\n             }"}, {"sha": "c065ff37722090ccbc30e24950e895bab6b55f81", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -1030,8 +1030,8 @@ impl<'tcx> LateContext<'tcx> {\n             ) -> Result<Self::Path, Self::Error> {\n                 let mut path = print_prefix(self)?;\n \n-                // Skip `::{{constructor}}` on tuple/unit structs.\n-                if let DefPathData::Ctor = disambiguated_data.data {\n+                // Skip `::{{extern}}` blocks and `::{{constructor}}` on tuple/unit structs.\n+                if let DefPathData::ForeignMod | DefPathData::Ctor = disambiguated_data.data {\n                     return Ok(path);\n                 }\n "}, {"sha": "b3b8183d313f36b7c50d507cf68657ee48bd7f67", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -1740,30 +1740,26 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     ) -> Result<Self::Path, Self::Error> {\n         self = print_prefix(self)?;\n \n-        // Skip `::{{constructor}}` on tuple/unit structs.\n-        if let DefPathData::Ctor = disambiguated_data.data {\n+        // Skip `::{{extern}}` blocks and `::{{constructor}}` on tuple/unit structs.\n+        if let DefPathData::ForeignMod | DefPathData::Ctor = disambiguated_data.data {\n             return Ok(self);\n         }\n \n-        // FIXME(eddyb) `name` should never be empty, but it\n-        // currently is for `extern { ... }` \"foreign modules\".\n         let name = disambiguated_data.data.name();\n-        if name != DefPathDataName::Named(kw::Empty) {\n-            if !self.empty_path {\n-                write!(self, \"::\")?;\n-            }\n+        if !self.empty_path {\n+            write!(self, \"::\")?;\n+        }\n \n-            if let DefPathDataName::Named(name) = name {\n-                if Ident::with_dummy_span(name).is_raw_guess() {\n-                    write!(self, \"r#\")?;\n-                }\n+        if let DefPathDataName::Named(name) = name {\n+            if Ident::with_dummy_span(name).is_raw_guess() {\n+                write!(self, \"r#\")?;\n             }\n+        }\n \n-            let verbose = self.tcx.sess.verbose();\n-            disambiguated_data.fmt_maybe_verbose(&mut self, verbose)?;\n+        let verbose = self.tcx.sess.verbose();\n+        disambiguated_data.fmt_maybe_verbose(&mut self, verbose)?;\n \n-            self.empty_path = false;\n-        }\n+        self.empty_path = false;\n \n         Ok(self)\n     }"}, {"sha": "aaef137c7e0f8fbe040efe2d02efd8cb38834099", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -836,13 +836,5 @@ pub fn expected_found<R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>\n where\n     R: TypeRelation<'tcx>,\n {\n-    expected_found_bool(relation.a_is_expected(), a, b)\n-}\n-\n-pub fn expected_found_bool<T>(a_is_expected: bool, a: T, b: T) -> ExpectedFound<T> {\n-    if a_is_expected {\n-        ExpectedFound { expected: a, found: b }\n-    } else {\n-        ExpectedFound { expected: b, found: a }\n-    }\n+    ExpectedFound::new(relation.a_is_expected(), a, b)\n }"}, {"sha": "10f6f6b1a9fac91c166ed9acb7f2bc92cdeb1e2c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -1,5 +1,4 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(control_flow_enum)]\n #![feature(try_blocks)]\n@@ -310,7 +309,7 @@ struct PubRestrictedVisitor<'tcx> {\n     has_pub_restricted: bool,\n }\n \n-impl Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -432,7 +431,7 @@ struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {\n     ev: &'a mut EmbargoVisitor<'tcx>,\n }\n \n-impl EmbargoVisitor<'tcx> {\n+impl<'tcx> EmbargoVisitor<'tcx> {\n     fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {\n         self.access_levels.map.get(&def_id).copied()\n     }\n@@ -674,7 +673,7 @@ impl EmbargoVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     /// We want to visit items in the context of their containing\n@@ -944,7 +943,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n     }\n }\n \n-impl ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n+impl ReachEverythingInTheInterfaceVisitor<'_, '_> {\n     fn generics(&mut self) -> &mut Self {\n         for param in &self.ev.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n@@ -983,7 +982,7 @@ impl ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n     }\n }\n \n-impl DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n+impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.ev.tcx\n     }\n@@ -1413,7 +1412,7 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n     }\n }\n \n-impl DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {\n+impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -1800,7 +1799,7 @@ struct SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     in_assoc_ty: bool,\n }\n \n-impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n+impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     fn generics(&mut self) -> &mut Self {\n         for param in &self.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n@@ -1921,7 +1920,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     }\n }\n \n-impl DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n+impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "581a2bce2e50e5cd81b8835aecfd117b2ba0bf68", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -151,7 +151,7 @@ impl Key for (DefId, DefId) {\n     }\n }\n \n-impl Key for (ty::Instance<'tcx>, LocalDefId) {\n+impl<'tcx> Key for (ty::Instance<'tcx>, LocalDefId) {\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true"}, {"sha": "de9d425353712b09c9d61a65abecbcdc39511f06", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -2,7 +2,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n-#![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(min_specialization)]\n #![feature(once_cell)]"}, {"sha": "11f54ea66fa51d96a20a5c61f2b720a45e01485e", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -212,7 +212,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n     /// Cache promotions require invoking queries, which needs to read the serialized data.\n     /// In order to serialize the new on-disk cache, the former on-disk cache file needs to be\n     /// deleted, hence we won't be able to refer to its memmapped data.\n-    fn drop_serialized_data(&self, tcx: TyCtxt<'tcx>) {\n+    fn drop_serialized_data(&self, tcx: TyCtxt<'_>) {\n         // Load everything into memory so we can write it out to the on-disk\n         // cache. The vast majority of cacheable query results should already\n         // be in memory, so this should be a cheap operation."}, {"sha": "6d76d09f6190e21d5fa56fe8c17be3c3299df2ab", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -31,7 +31,7 @@ impl<'tcx> std::ops::Deref for QueryCtxt<'tcx> {\n     }\n }\n \n-impl HasDepContext for QueryCtxt<'tcx> {\n+impl<'tcx> HasDepContext for QueryCtxt<'tcx> {\n     type DepKind = rustc_middle::dep_graph::DepKind;\n     type DepContext = TyCtxt<'tcx>;\n \n@@ -41,7 +41,7 @@ impl HasDepContext for QueryCtxt<'tcx> {\n     }\n }\n \n-impl QueryContext for QueryCtxt<'tcx> {\n+impl QueryContext for QueryCtxt<'_> {\n     fn current_query_job(&self) -> Option<QueryJobId<Self::DepKind>> {\n         tls::with_related_context(**self, |icx| icx.query)\n     }\n@@ -130,7 +130,7 @@ impl<'tcx> QueryCtxt<'tcx> {\n \n     pub(super) fn encode_query_results(\n         self,\n-        encoder: &mut on_disk_cache::CacheEncoder<'a, 'tcx, opaque::FileEncoder>,\n+        encoder: &mut on_disk_cache::CacheEncoder<'_, 'tcx, opaque::FileEncoder>,\n         query_result_index: &mut on_disk_cache::EncodedDepNodeIndex,\n     ) -> opaque::FileEncodeResult {\n         macro_rules! encode_queries {\n@@ -511,7 +511,7 @@ macro_rules! define_queries_struct {\n             }\n         }\n \n-        impl QueryEngine<'tcx> for Queries<'tcx> {\n+        impl<'tcx> QueryEngine<'tcx> for Queries<'tcx> {\n             fn as_any(&'tcx self) -> &'tcx dyn std::any::Any {\n                 let this = unsafe { std::mem::transmute::<&Queries<'_>, &Queries<'_>>(self) };\n                 this as _"}, {"sha": "41ee75c2432d82c51e8e7c48f632e5616d0dde9e", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -295,7 +295,7 @@ fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n /// If we are recording only summary data, the ids will point to\n /// just the query names. If we are recording query keys too, we\n /// allocate the corresponding strings here.\n-pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'tcx>) {\n+pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n     if !tcx.prof.enabled() {\n         return;\n     }"}, {"sha": "688b7b1a8c6d25593472d8beb5c436c1d5be0760", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -92,14 +92,14 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n         // information we encapsulate into, the better\n         let def_data = match &i.kind {\n             ItemKind::Impl { .. } => DefPathData::Impl,\n+            ItemKind::ForeignMod(..) => DefPathData::ForeignMod,\n             ItemKind::Mod(..)\n             | ItemKind::Trait(..)\n             | ItemKind::TraitAlias(..)\n             | ItemKind::Enum(..)\n             | ItemKind::Struct(..)\n             | ItemKind::Union(..)\n             | ItemKind::ExternCrate(..)\n-            | ItemKind::ForeignMod(..)\n             | ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) => {\n                 DefPathData::ValueNs(i.ident.name)"}, {"sha": "0232aace6d78c1b5c0d13e888410a61d58c00cfe", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -311,8 +311,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n     ) -> Result<Self::Path, Self::Error> {\n         self = print_prefix(self)?;\n \n-        // Skip `::{{constructor}}` on tuple/unit structs.\n-        if let DefPathData::Ctor = disambiguated_data.data {\n+        // Skip `::{{extern}}` blocks and `::{{constructor}}` on tuple/unit structs.\n+        if let DefPathData::ForeignMod | DefPathData::Ctor = disambiguated_data.data {\n             return Ok(self);\n         }\n "}, {"sha": "ea6366c407e218fd7f049ca65fcc4dff45cc013e", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -771,6 +771,10 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n         disambiguated_data: &DisambiguatedDefPathData,\n     ) -> Result<Self::Path, Self::Error> {\n         let ns = match disambiguated_data.data {\n+            // FIXME: It shouldn't be necessary to add anything for extern block segments,\n+            // but we add 't' for backward compatibility.\n+            DefPathData::ForeignMod => 't',\n+\n             // Uppercase categories are more stable than lowercase ones.\n             DefPathData::TypeNs(_) => 't',\n             DefPathData::ValueNs(_) => 'v',"}, {"sha": "096c4fcf472075ed92f463d408cfd651608c2883", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -36,8 +36,8 @@ use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n+use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::error::TypeError::{FieldMisMatch, Sorts};\n-use rustc_middle::ty::relate::expected_found_bool;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, Ty, TypeFoldable};\n use rustc_session::parse::feature_err;\n@@ -1493,7 +1493,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         &self.misc(base_expr.span),\n                                         adt_ty,\n                                         base_ty,\n-                                        Sorts(expected_found_bool(true, adt_ty, base_ty)),\n+                                        Sorts(ExpectedFound::new(true, adt_ty, base_ty)),\n                                     )\n                                     .emit();\n                             }"}, {"sha": "bbd2c087ccabbc8858f47eaae444a61d99fe1e1b", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -1176,6 +1176,7 @@ impl<'a> Builder<'a> {\n                 rustflags.arg(\"-Zosx-rpath-install-name\");\n                 Some(\"-Wl,-rpath,@loader_path/../lib\")\n             } else if !target.contains(\"windows\") {\n+                rustflags.arg(\"-Clink-args=-Wl,-z,origin\");\n                 Some(\"-Wl,-rpath,$ORIGIN/../lib\")\n             } else {\n                 None"}, {"sha": "57621f4f18cfe0529efa9f5815aa14573c03aa0f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::definitions::DefPathData;\n use rustc_hir::Mutability;\n use rustc_metadata::creader::{CStore, LoadedMacro};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -165,9 +166,8 @@ crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: ItemType)\n     let crate_name = cx.tcx.crate_name(did.krate).to_string();\n \n     let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n-        // extern blocks have an empty name\n-        let s = elem.data.to_string();\n-        if !s.is_empty() { Some(s) } else { None }\n+        // Filter out extern blocks\n+        (elem.data != DefPathData::ForeignMod).then(|| elem.data.to_string())\n     });\n     let fqn = if let ItemType::Macro = kind {\n         // Check to see if it is a macro 2.0 or built-in macro"}, {"sha": "d419e384a594a9d6bfed0918d6646e09e83d3ed6", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 102, "deletions": 110, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -176,16 +176,13 @@ window.initSearch = function(rawSearchIndex) {\n             var ar = [];\n             for (var entry in results) {\n                 if (hasOwnPropertyRustdoc(results, entry)) {\n-                    ar.push(results[entry]);\n+                    var result = results[entry];\n+                    result.word = searchWords[result.id];\n+                    result.item = searchIndex[result.id] || {};\n+                    ar.push(result);\n                 }\n             }\n             results = ar;\n-            var i, len, result;\n-            for (i = 0, len = results.length; i < len; ++i) {\n-                result = results[i];\n-                result.word = searchWords[result.id];\n-                result.item = searchIndex[result.id] || {};\n-            }\n             // if there are no results then return to default and fail\n             if (results.length === 0) {\n                 return [];\n@@ -258,7 +255,7 @@ window.initSearch = function(rawSearchIndex) {\n                 return 0;\n             });\n \n-            for (i = 0, len = results.length; i < len; ++i) {\n+            for (var i = 0, len = results.length; i < len; ++i) {\n                 result = results[i];\n \n                 // this validation does not make sense when searching by types\n@@ -344,7 +341,17 @@ window.initSearch = function(rawSearchIndex) {\n             return MAX_LEV_DISTANCE + 1;\n         }\n \n-        // Check for type name and type generics (if any).\n+        /**\n+          * This function checks if the object (`obj`) matches the given type (`val`) and its\n+          * generics (if any).\n+          *\n+          * @param {Object} obj\n+          * @param {string} val\n+          * @param {boolean} literalSearch\n+          *\n+          * @return {integer} - Returns a Levenshtein distance to the best match. If there is\n+          *                     no match, returns `MAX_LEV_DISTANCE + 1`.\n+          */\n         function checkType(obj, val, literalSearch) {\n             var lev_distance = MAX_LEV_DISTANCE + 1;\n             var tmp_lev = MAX_LEV_DISTANCE + 1;\n@@ -363,24 +370,23 @@ window.initSearch = function(rawSearchIndex) {\n                                 elems[obj[GENERICS_DATA][x][NAME]] += 1;\n                             }\n \n-                            var allFound = true;\n                             len = val.generics.length;\n                             for (x = 0; x < len; ++x) {\n                                 firstGeneric = val.generics[x];\n                                 if (elems[firstGeneric]) {\n                                     elems[firstGeneric] -= 1;\n                                 } else {\n-                                    allFound = false;\n-                                    break;\n+                                    // Something wasn't found and this is a literal search so\n+                                    // abort and return a \"failing\" distance.\n+                                    return MAX_LEV_DISTANCE + 1;\n                                 }\n                             }\n-                            if (allFound) {\n-                                return true;\n-                            }\n+                            // Everything was found, success!\n+                            return 0;\n                         }\n-                        return false;\n+                        return MAX_LEV_DISTANCE + 1;\n                     }\n-                    return true;\n+                    return 0;\n                 } else {\n                     // If the type has generics but don't match, then it won't return at this point.\n                     // Otherwise, `checkGenerics` will return 0 and it'll return.\n@@ -392,14 +398,15 @@ window.initSearch = function(rawSearchIndex) {\n                     }\n                 }\n             } else if (literalSearch) {\n+                var found = false;\n                 if ((!val.generics || val.generics.length === 0) &&\n                       obj.length > GENERICS_DATA && obj[GENERICS_DATA].length > 0) {\n-                    return obj[GENERICS_DATA].some(\n+                    found = obj[GENERICS_DATA].some(\n                         function(gen) {\n                             return gen[NAME] === val.name;\n                         });\n                 }\n-                return false;\n+                return found ? 0 : MAX_LEV_DISTANCE + 1;\n             }\n             lev_distance = Math.min(levenshtein(obj[NAME], val.name), lev_distance);\n             if (lev_distance <= MAX_LEV_DISTANCE) {\n@@ -430,6 +437,17 @@ window.initSearch = function(rawSearchIndex) {\n             return Math.min(lev_distance, tmp_lev) + 1;\n         }\n \n+        /**\n+         * This function checks if the object (`obj`) has an argument with the given type (`val`).\n+         *\n+         * @param {Object} obj\n+         * @param {string} val\n+         * @param {boolean} literalSearch\n+         * @param {integer} typeFilter\n+         *\n+         * @return {integer} - Returns a Levenshtein distance to the best match. If there is no\n+         *                      match, returns `MAX_LEV_DISTANCE + 1`.\n+         */\n         function findArg(obj, val, literalSearch, typeFilter) {\n             var lev_distance = MAX_LEV_DISTANCE + 1;\n \n@@ -441,19 +459,15 @@ window.initSearch = function(rawSearchIndex) {\n                         continue;\n                     }\n                     tmp = checkType(tmp, val, literalSearch);\n-                    if (literalSearch) {\n-                        if (tmp) {\n-                            return true;\n-                        }\n+                    if (tmp === 0) {\n+                        return 0;\n+                    } else if (literalSearch) {\n                         continue;\n                     }\n                     lev_distance = Math.min(tmp, lev_distance);\n-                    if (lev_distance === 0) {\n-                        return 0;\n-                    }\n                 }\n             }\n-            return literalSearch ? false : lev_distance;\n+            return literalSearch ? MAX_LEV_DISTANCE + 1 : lev_distance;\n         }\n \n         function checkReturned(obj, val, literalSearch, typeFilter) {\n@@ -470,19 +484,15 @@ window.initSearch = function(rawSearchIndex) {\n                         continue;\n                     }\n                     tmp = checkType(tmp, val, literalSearch);\n-                    if (literalSearch) {\n-                        if (tmp) {\n-                            return true;\n-                        }\n+                    if (tmp === 0) {\n+                        return 0;\n+                    } else if (literalSearch) {\n                         continue;\n                     }\n                     lev_distance = Math.min(tmp, lev_distance);\n-                    if (lev_distance === 0) {\n-                        return 0;\n-                    }\n                 }\n             }\n-            return literalSearch ? false : lev_distance;\n+            return literalSearch ? MAX_LEV_DISTANCE + 1 : lev_distance;\n         }\n \n         function checkPath(contains, lastElem, ty) {\n@@ -612,6 +622,44 @@ window.initSearch = function(rawSearchIndex) {\n             onEach(crateAliases, pushFunc);\n         }\n \n+        /**\n+         * This function adds the given result into the provided `res` map if it matches the\n+         * following condition:\n+         *\n+         * * If it is a \"literal search\" (`isExact`), then `lev` must be 0.\n+         * * If it is not a \"literal search\", `lev` must be <= `MAX_LEV_DISTANCE`.\n+         *\n+         * The `res` map contains information which will be used to sort the search results:\n+         *\n+         * * `fullId` is a `string`` used as the key of the object we use for the `res` map.\n+         * * `id` is the index in both `searchWords` and `searchIndex` arrays for this element.\n+         * * `index` is an `integer`` used to sort by the position of the word in the item's name.\n+         * * `lev` is the main metric used to sort the search results.\n+         *\n+         * @param {boolean} isExact\n+         * @param {Object} res\n+         * @param {string} fullId\n+         * @param {integer} id\n+         * @param {integer} index\n+         * @param {integer} lev\n+         */\n+        function addIntoResults(isExact, res, fullId, id, index, lev) {\n+            if (lev === 0 || (!isExact && lev <= MAX_LEV_DISTANCE)) {\n+                if (res[fullId] !== undefined) {\n+                    var result = res[fullId];\n+                    if (result.dontValidate || result.lev <= lev) {\n+                        return;\n+                    }\n+                }\n+                res[fullId] = {\n+                    id: id,\n+                    index: index,\n+                    dontValidate: isExact,\n+                    lev: lev,\n+                };\n+            }\n+        }\n+\n         // quoted values mean literal search\n         var nSearchWords = searchWords.length;\n         var i, it;\n@@ -634,28 +682,11 @@ window.initSearch = function(rawSearchIndex) {\n                 fullId = ty.id;\n \n                 if (searchWords[i] === val.name\n-                    && typePassesFilter(typeFilter, searchIndex[i].ty)\n-                    && results[fullId] === undefined) {\n-                    results[fullId] = {\n-                        id: i,\n-                        index: -1,\n-                        dontValidate: true,\n-                    };\n-                }\n-                if (in_args && results_in_args[fullId] === undefined) {\n-                    results_in_args[fullId] = {\n-                        id: i,\n-                        index: -1,\n-                        dontValidate: true,\n-                    };\n-                }\n-                if (returned && results_returned[fullId] === undefined) {\n-                    results_returned[fullId] = {\n-                        id: i,\n-                        index: -1,\n-                        dontValidate: true,\n-                    };\n+                    && typePassesFilter(typeFilter, searchIndex[i].ty)) {\n+                    addIntoResults(true, results, fullId, i, -1, 0);\n                 }\n+                addIntoResults(true, results_in_args, fullId, i, -1, in_args);\n+                addIntoResults(true, results_returned, fullId, i, -1, returned);\n             }\n             query.inputs = [val];\n             query.output = val;\n@@ -684,39 +715,27 @@ window.initSearch = function(rawSearchIndex) {\n                 fullId = ty.id;\n \n                 returned = checkReturned(ty, output, true, NO_TYPE_FILTER);\n-                if (output.name === \"*\" || returned) {\n+                if (output.name === \"*\" || returned === 0) {\n                     in_args = false;\n                     var is_module = false;\n \n                     if (input === \"*\") {\n                         is_module = true;\n                     } else {\n-                        var allFound = true;\n-                        for (it = 0, len = inputs.length; allFound && it < len; it++) {\n-                            allFound = checkType(type, inputs[it], true);\n+                        var firstNonZeroDistance = 0;\n+                        for (it = 0, len = inputs.length; it < len; it++) {\n+                            var distance = checkType(type, inputs[it], true);\n+                            if (distance > 0) {\n+                                firstNonZeroDistance = distance;\n+                                break;\n+                            }\n                         }\n-                        in_args = allFound;\n-                    }\n-                    if (in_args) {\n-                        results_in_args[fullId] = {\n-                            id: i,\n-                            index: -1,\n-                            dontValidate: true,\n-                        };\n-                    }\n-                    if (returned) {\n-                        results_returned[fullId] = {\n-                            id: i,\n-                            index: -1,\n-                            dontValidate: true,\n-                        };\n+                        in_args = firstNonZeroDistance;\n                     }\n+                    addIntoResults(true, results_in_args, fullId, i, -1, in_args);\n+                    addIntoResults(true, results_returned, fullId, i, -1, returned);\n                     if (is_module) {\n-                        results[fullId] = {\n-                            id: i,\n-                            index: -1,\n-                            dontValidate: true,\n-                        };\n+                        addIntoResults(true, results, fullId, i, -1, 0);\n                     }\n                 }\n             }\n@@ -788,41 +807,14 @@ window.initSearch = function(rawSearchIndex) {\n                         lev = 0;\n                     }\n                 }\n-                if (in_args <= MAX_LEV_DISTANCE) {\n-                    if (results_in_args[fullId] === undefined) {\n-                        results_in_args[fullId] = {\n-                            id: j,\n-                            index: index,\n-                            lev: in_args,\n-                        };\n-                    }\n-                    results_in_args[fullId].lev =\n-                        Math.min(results_in_args[fullId].lev, in_args);\n-                }\n-                if (returned <= MAX_LEV_DISTANCE) {\n-                    if (results_returned[fullId] === undefined) {\n-                        results_returned[fullId] = {\n-                            id: j,\n-                            index: index,\n-                            lev: returned,\n-                        };\n-                    }\n-                    results_returned[fullId].lev =\n-                        Math.min(results_returned[fullId].lev, returned);\n-                }\n+                addIntoResults(false, results_in_args, fullId, j, index, in_args);\n+                addIntoResults(false, results_returned, fullId, j, index, returned);\n                 if (typePassesFilter(typeFilter, ty.ty) &&\n                         (index !== -1 || lev <= MAX_LEV_DISTANCE)) {\n                     if (index !== -1 && paths.length < 2) {\n                         lev = 0;\n                     }\n-                    if (results[fullId] === undefined) {\n-                        results[fullId] = {\n-                            id: j,\n-                            index: index,\n-                            lev: lev,\n-                        };\n-                    }\n-                    results[fullId].lev = Math.min(results[fullId].lev, lev);\n+                    addIntoResults(false, results, fullId, j, index, lev);\n                 }\n             }\n         }"}, {"sha": "ea7372761ba311fe49eb7a65596736b65a2ddd02", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -5,6 +5,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::definitions::DefPathData;\n use rustc_hir::Node;\n use rustc_hir::CRATE_HIR_ID;\n use rustc_middle::middle::privacy::AccessLevel;\n@@ -45,9 +46,8 @@ impl Module<'hir> {\n fn def_id_to_path(tcx: TyCtxt<'_>, did: DefId) -> Vec<String> {\n     let crate_name = tcx.crate_name(did.krate).to_string();\n     let relative = tcx.def_path(did).data.into_iter().filter_map(|elem| {\n-        // extern blocks have an empty name\n-        let s = elem.data.to_string();\n-        if !s.is_empty() { Some(s) } else { None }\n+        // Filter out extern blocks\n+        (elem.data != DefPathData::ForeignMod).then(|| elem.data.to_string())\n     });\n     std::iter::once(crate_name).chain(relative).collect()\n }"}, {"sha": "2722c72c20a339a485453316d57e3382d39f4f7d", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -21,7 +21,7 @@ LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<\n    |                                    |\n    |                                    hidden type `(&'a u8, &'b u8)` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n    |                                                                                ++++"}, {"sha": "464f283095dad52c8bd420e12b4b1afa36bf273e", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -16,7 +16,7 @@ LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<\n    |                                    |\n    |                                    hidden type `(&'a u8, &'b u8)` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n    |                                                                                ++++"}, {"sha": "c6d11293eec530c3f86c4c59123d8d0d891da1e6", "filename": "src/test/ui/impl-trait/hidden-lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -6,7 +6,7 @@ LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n    |                 |\n    |                 hidden type `&'a mut &'b T` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a + 'b {\n    |                                                                     ++++\n@@ -19,7 +19,7 @@ LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl S\n    |                        |\n    |                        hidden type `Rc<RefCell<&'b T>>` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a + 'b {\n    |                                                                                     ++++"}, {"sha": "32829a0a1b2fa60af0e0577a26e32fd92fa4e68b", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -6,7 +6,7 @@ LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> im\n    |                     |\n    |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e> + 'b\n    |                                                                                             ++++"}, {"sha": "83ad23b253bb3729ebdf6927fbe8ce195ac9e33e", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -6,7 +6,7 @@ LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a,\n    |                     |\n    |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b> + 'b\n    |                                                                                 ++++"}, {"sha": "2f6bd8ff377a544bdc2f559567cf3e739d62bbc6", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -6,7 +6,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n    |              |\n    |              hidden type `&i32` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n@@ -19,7 +19,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             |\n    |             hidden type `&'a i32` captures the lifetime `'a` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n+help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ++++\n@@ -74,7 +74,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                              |\n    |                              hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:35:5: 35:31]` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) + 'b {\n    |                                                                              ++++"}, {"sha": "07ac0a8db35a923946ff2603c0ae527e00714444", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -6,7 +6,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n    |              |\n    |              hidden type `&i32` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n@@ -19,7 +19,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             |\n    |             hidden type `&'a i32` captures the lifetime `'a` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n+help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ++++\n@@ -119,7 +119,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                              |\n    |                              hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:35:5: 35:31]` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) + 'b {\n    |                                                                              ++++"}, {"sha": "cf854f67d0456436bcbae328748c2e1283dba6ed", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -7,7 +7,7 @@ LL |\n LL | where 'x: 'y\n    |       -- hidden type `Cell<&'x u32>` captures the lifetime `'x` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'x, you can add an explicit `'x` lifetime bound\n+help: to declare that the `impl Trait` captures `'x`, you can add an explicit `'x` lifetime bound\n    |\n LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y> + 'x\n    |                                            ++++"}, {"sha": "7424da76182ab3bb703ff03322ce8eaae214d94f", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -6,7 +6,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         |\n    |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:9:27: 9:34]>` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ++++\n@@ -19,7 +19,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         |\n    |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:9:27: 9:34]>` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ++++\n@@ -32,7 +32,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    |\n    |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:14:27: 14:34]>` captures the lifetime `'a` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n+help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ++++\n@@ -45,7 +45,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    |\n    |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:14:27: 14:34]>` captures the lifetime `'a` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n+help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ++++"}, {"sha": "5e56e12eda021a109fc1e517bfa1b9d27c5a2ac4", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -6,7 +6,7 @@ LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n    |                  |\n    |                  hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0)) T` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0)), you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0))` lifetime bound\n+help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0))` lifetime bound\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0)) {\n    |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"}, {"sha": "61ac7731777b473f1fe0ebbf445a980139e60ce7", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -6,7 +6,7 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          |\n    |                          hidden type `Pin<&Foo>` captures the lifetime `'_` as defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                                ++++"}, {"sha": "6f8200739b9deb222f6cd6ff7a7bd4d96380251a", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3848cb659105d8384c00ba384ec2f6f39c47238/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=d3848cb659105d8384c00ba384ec2f6f39c47238", "patch": "@@ -6,7 +6,7 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                    |\n    |                    hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                          ++++"}]}