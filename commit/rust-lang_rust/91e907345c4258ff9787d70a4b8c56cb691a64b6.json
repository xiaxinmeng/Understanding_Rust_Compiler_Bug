{"sha": "91e907345c4258ff9787d70a4b8c56cb691a64b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZTkwNzM0NWM0MjU4ZmY5Nzg3ZDcwYTRiOGM1NmNiNjkxYTY0YjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-21T03:33:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-21T03:33:38Z"}, "message": "Auto merge of #33625 - alexcrichton:rustbuild-moar-tests, r=aturon\n\nrustbuild: Touch up some test suites\n\nThis adds in some missing test suites, primarily a few pretty suites. It also starts optimizing tests by default as the current test suite does, but also recognizes `--disable-optimize-tests`.\n\nCurrently the optimization of tests isn't recognized by crate tests because Cargo doesn't support the ability to compile an unoptimized test suite against an optimized library. Perhaps a feature to add, though!", "tree": {"sha": "c71a47c4c7df9aa66095a37958603158b8c4a4a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c71a47c4c7df9aa66095a37958603158b8c4a4a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91e907345c4258ff9787d70a4b8c56cb691a64b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91e907345c4258ff9787d70a4b8c56cb691a64b6", "html_url": "https://github.com/rust-lang/rust/commit/91e907345c4258ff9787d70a4b8c56cb691a64b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91e907345c4258ff9787d70a4b8c56cb691a64b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "500e5c15cbc2492cada6415e0db8b68385b062b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/500e5c15cbc2492cada6415e0db8b68385b062b9", "html_url": "https://github.com/rust-lang/rust/commit/500e5c15cbc2492cada6415e0db8b68385b062b9"}, {"sha": "5f295f22a752f42de421e2d5e1545908f15df9d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f295f22a752f42de421e2d5e1545908f15df9d9", "html_url": "https://github.com/rust-lang/rust/commit/5f295f22a752f42de421e2d5e1545908f15df9d9"}], "stats": {"total": 292, "additions": 225, "deletions": 67}, "files": [{"sha": "154d9556fd7ba2331e248ab1e9c20c7ca72757f7", "filename": "src/bootstrap/build/check.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcheck.rs?ref=91e907345c4258ff9787d70a4b8c56cb691a64b6", "patch": "@@ -105,9 +105,18 @@ pub fn compiletest(build: &Build,\n     cmd.arg(\"--host\").arg(compiler.host);\n     cmd.arg(\"--llvm-filecheck\").arg(build.llvm_filecheck(&build.config.build));\n \n+    let mut flags = format!(\"-Crpath\");\n+    if build.config.rust_optimize_tests {\n+        flags.push_str(\" -O\");\n+    }\n+    if build.config.rust_debuginfo_tests {\n+        flags.push_str(\" -g\");\n+    }\n+\n+    cmd.arg(\"--host-rustcflags\").arg(&flags);\n+\n     let linkflag = format!(\"-Lnative={}\", build.test_helpers_out(target).display());\n-    cmd.arg(\"--host-rustcflags\").arg(\"-Crpath\");\n-    cmd.arg(\"--target-rustcflags\").arg(format!(\"-Crpath {}\", linkflag));\n+    cmd.arg(\"--target-rustcflags\").arg(format!(\"{} {}\", flags, linkflag));\n \n     // FIXME: needs android support\n     cmd.arg(\"--android-cross-path\").arg(\"\");"}, {"sha": "3c35b9a95169a908478b0fcf9ce0d7a156f4e775", "filename": "src/bootstrap/build/config.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Fbootstrap%2Fbuild%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Fbootstrap%2Fbuild%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fconfig.rs?ref=91e907345c4258ff9787d70a4b8c56cb691a64b6", "patch": "@@ -59,6 +59,8 @@ pub struct Config {\n     pub rust_rpath: bool,\n     pub rustc_default_linker: Option<String>,\n     pub rustc_default_ar: Option<String>,\n+    pub rust_optimize_tests: bool,\n+    pub rust_debuginfo_tests: bool,\n \n     pub build: String,\n     pub host: Vec<String>,\n@@ -136,6 +138,8 @@ struct Rust {\n     channel: Option<String>,\n     musl_root: Option<String>,\n     rpath: Option<bool>,\n+    optimize_tests: Option<bool>,\n+    debuginfo_tests: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -154,6 +158,7 @@ impl Config {\n         config.llvm_optimize = true;\n         config.use_jemalloc = true;\n         config.rust_optimize = true;\n+        config.rust_optimize_tests = true;\n         config.submodules = true;\n         config.docs = true;\n         config.rust_rpath = true;\n@@ -219,6 +224,8 @@ impl Config {\n             set(&mut config.rust_debug_assertions, rust.debug_assertions);\n             set(&mut config.rust_debuginfo, rust.debuginfo);\n             set(&mut config.rust_optimize, rust.optimize);\n+            set(&mut config.rust_optimize_tests, rust.optimize_tests);\n+            set(&mut config.rust_debuginfo_tests, rust.debuginfo_tests);\n             set(&mut config.rust_rpath, rust.rpath);\n             set(&mut config.debug_jemalloc, rust.debug_jemalloc);\n             set(&mut config.use_jemalloc, rust.use_jemalloc);\n@@ -306,6 +313,8 @@ impl Config {\n                 (\"JEMALLOC\", self.use_jemalloc),\n                 (\"DEBUG_JEMALLOC\", self.debug_jemalloc),\n                 (\"RPATH\", self.rust_rpath),\n+                (\"OPTIMIZE_TESTS\", self.rust_optimize_tests),\n+                (\"DEBUGINFO_TESTS\", self.rust_debuginfo_tests),\n             }\n \n             match key {"}, {"sha": "ebc05c5f61c50784a9eccd3a7d2c88b760582f57", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=91e907345c4258ff9787d70a4b8c56cb691a64b6", "patch": "@@ -318,10 +318,18 @@ impl Build {\n                     check::compiletest(self, &compiler, target.target,\n                                        \"run-pass\", \"run-pass\");\n                 }\n+                CheckRPassFull { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"run-pass\", \"run-pass-fulldeps\");\n+                }\n                 CheckCFail { compiler } => {\n                     check::compiletest(self, &compiler, target.target,\n                                        \"compile-fail\", \"compile-fail\");\n                 }\n+                CheckCFailFull { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"compile-fail\", \"compile-fail-fulldeps\")\n+                }\n                 CheckPFail { compiler } => {\n                     check::compiletest(self, &compiler, target.target,\n                                        \"parse-fail\", \"parse-fail\");\n@@ -330,10 +338,34 @@ impl Build {\n                     check::compiletest(self, &compiler, target.target,\n                                        \"run-fail\", \"run-fail\");\n                 }\n+                CheckRFailFull { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"run-fail\", \"run-fail-fulldeps\");\n+                }\n                 CheckPretty { compiler } => {\n                     check::compiletest(self, &compiler, target.target,\n                                        \"pretty\", \"pretty\");\n                 }\n+                CheckPrettyRPass { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"pretty\", \"run-pass\");\n+                }\n+                CheckPrettyRPassFull { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"pretty\", \"run-pass-fulldeps\");\n+                }\n+                CheckPrettyRFail { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"pretty\", \"run-fail\");\n+                }\n+                CheckPrettyRFailFull { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"pretty\", \"run-fail-fulldeps\");\n+                }\n+                CheckPrettyRPassValgrind { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"pretty\", \"run-pass-valgrind\");\n+                }\n                 CheckCodegen { compiler } => {\n                     check::compiletest(self, &compiler, target.target,\n                                        \"codegen\", \"codegen\");\n@@ -370,14 +402,6 @@ impl Build {\n                     check::compiletest(self, &compiler, target.target,\n                                        \"run-pass-valgrind\", \"run-pass-valgrind\");\n                 }\n-                CheckRPassFull { compiler } => {\n-                    check::compiletest(self, &compiler, target.target,\n-                                       \"run-pass\", \"run-pass-fulldeps\");\n-                }\n-                CheckCFailFull { compiler } => {\n-                    check::compiletest(self, &compiler, target.target,\n-                                       \"compile-fail\", \"compile-fail-fulldeps\")\n-                }\n                 CheckDocs { compiler } => {\n                     check::docs(self, &compiler);\n                 }"}, {"sha": "742fd8575bb809d6abb264ed1c3b49e31432733e", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=91e907345c4258ff9787d70a4b8c56cb691a64b6", "patch": "@@ -106,19 +106,25 @@ macro_rules! targets {\n             (check_cargotest, CheckCargoTest { stage: u32 }),\n             (check_tidy, CheckTidy { stage: u32 }),\n             (check_rpass, CheckRPass { compiler: Compiler<'a> }),\n+            (check_rpass_full, CheckRPassFull { compiler: Compiler<'a> }),\n+            (check_rpass_valgrind, CheckRPassValgrind { compiler: Compiler<'a> }),\n             (check_rfail, CheckRFail { compiler: Compiler<'a> }),\n+            (check_rfail_full, CheckRFailFull { compiler: Compiler<'a> }),\n             (check_cfail, CheckCFail { compiler: Compiler<'a> }),\n+            (check_cfail_full, CheckCFailFull { compiler: Compiler<'a> }),\n             (check_pfail, CheckPFail { compiler: Compiler<'a> }),\n+            (check_pretty, CheckPretty { compiler: Compiler<'a> }),\n+            (check_pretty_rpass, CheckPrettyRPass { compiler: Compiler<'a> }),\n+            (check_pretty_rpass_full, CheckPrettyRPassFull { compiler: Compiler<'a> }),\n+            (check_pretty_rfail, CheckPrettyRFail { compiler: Compiler<'a> }),\n+            (check_pretty_rfail_full, CheckPrettyRFailFull { compiler: Compiler<'a> }),\n+            (check_pretty_rpass_valgrind, CheckPrettyRPassValgrind { compiler: Compiler<'a> }),\n             (check_codegen, CheckCodegen { compiler: Compiler<'a> }),\n             (check_codegen_units, CheckCodegenUnits { compiler: Compiler<'a> }),\n             (check_incremental, CheckIncremental { compiler: Compiler<'a> }),\n             (check_ui, CheckUi { compiler: Compiler<'a> }),\n             (check_debuginfo, CheckDebuginfo { compiler: Compiler<'a> }),\n             (check_rustdoc, CheckRustdoc { compiler: Compiler<'a> }),\n-            (check_pretty, CheckPretty { compiler: Compiler<'a> }),\n-            (check_rpass_valgrind, CheckRPassValgrind { compiler: Compiler<'a> }),\n-            (check_rpass_full, CheckRPassFull { compiler: Compiler<'a> }),\n-            (check_cfail_full, CheckCFailFull { compiler: Compiler<'a> }),\n             (check_docs, CheckDocs { compiler: Compiler<'a> }),\n             (check_error_index, CheckErrorIndex { compiler: Compiler<'a> }),\n             (check_rmake, CheckRMake { compiler: Compiler<'a> }),\n@@ -378,8 +384,11 @@ impl<'a> Step<'a> {\n             Source::Check { stage, compiler } => {\n                 vec![\n                     self.check_rpass(compiler),\n-                    self.check_cfail(compiler),\n+                    self.check_rpass_full(compiler),\n                     self.check_rfail(compiler),\n+                    self.check_rfail_full(compiler),\n+                    self.check_cfail(compiler),\n+                    self.check_cfail_full(compiler),\n                     self.check_pfail(compiler),\n                     self.check_incremental(compiler),\n                     self.check_ui(compiler),\n@@ -391,9 +400,12 @@ impl<'a> Step<'a> {\n                     self.check_debuginfo(compiler),\n                     self.check_rustdoc(compiler),\n                     self.check_pretty(compiler),\n+                    self.check_pretty_rpass(compiler),\n+                    self.check_pretty_rpass_full(compiler),\n+                    self.check_pretty_rfail(compiler),\n+                    self.check_pretty_rfail_full(compiler),\n+                    self.check_pretty_rpass_valgrind(compiler),\n                     self.check_rpass_valgrind(compiler),\n-                    self.check_rpass_full(compiler),\n-                    self.check_cfail_full(compiler),\n                     self.check_error_index(compiler),\n                     self.check_docs(compiler),\n                     self.check_rmake(compiler),\n@@ -412,6 +424,8 @@ impl<'a> Step<'a> {\n             Source::CheckTidy { stage } => {\n                 vec![self.tool_tidy(stage)]\n             }\n+            Source::CheckPrettyRPass { compiler } |\n+            Source::CheckPrettyRFail { compiler } |\n             Source::CheckRFail { compiler } |\n             Source::CheckPFail { compiler } |\n             Source::CheckCodegen { compiler } |\n@@ -438,7 +452,11 @@ impl<'a> Step<'a> {\n                 ]\n             }\n             Source::CheckRPassFull { compiler } |\n+            Source::CheckRFailFull { compiler } |\n             Source::CheckCFailFull { compiler } |\n+            Source::CheckPrettyRPassFull { compiler } |\n+            Source::CheckPrettyRFailFull { compiler } |\n+            Source::CheckPrettyRPassValgrind { compiler } |\n             Source::CheckRMake { compiler } => {\n                 vec![self.librustc(compiler),\n                      self.tool_compiletest(compiler.stage)]"}, {"sha": "6f0658423283be3c61f9377c0f04dcc8f0b24f49", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=91e907345c4258ff9787d70a4b8c56cb691a64b6", "patch": "@@ -122,6 +122,11 @@\n # desired in distributions, for example.\n #rpath = true\n \n+# Flag indicating whether tests are compiled with optimizations (the -O flag) or\n+# with debuginfo (the -g flag)\n+#optimize-tests = true\n+#debuginfo-tests = true\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "d82a72994ca6f55303fe41f66caaa45c52ce76d5", "filename": "src/librustc_bitflags/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Flibrustc_bitflags%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Flibrustc_bitflags%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2FCargo.toml?ref=91e907345c4258ff9787d70a4b8c56cb691a64b6", "patch": "@@ -6,5 +6,4 @@ version = \"0.0.0\"\n [lib]\n name = \"rustc_bitflags\"\n path = \"lib.rs\"\n-test = false\n doctest = false"}, {"sha": "ad6bb2dbac221e23a624797e32a658a366962408", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 80, "deletions": 49, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=91e907345c4258ff9787d70a4b8c56cb691a64b6", "patch": "@@ -143,6 +143,11 @@ impl PMDSource {\n     }\n }\n \n+enum LoadResult {\n+    Previous(ast::CrateNum),\n+    Loaded(loader::Library),\n+}\n+\n impl<'a> CrateReader<'a> {\n     pub fn new(sess: &'a Session,\n                cstore: &'a CStore,\n@@ -358,12 +363,8 @@ impl<'a> CrateReader<'a> {\n                      kind: PathKind,\n                      explicitly_linked: bool)\n                      -> (ast::CrateNum, Rc<cstore::crate_metadata>, cstore::CrateSource) {\n-        enum LookupResult {\n-            Previous(ast::CrateNum),\n-            Loaded(loader::Library),\n-        }\n         let result = match self.existing_match(name, hash, kind) {\n-            Some(cnum) => LookupResult::Previous(cnum),\n+            Some(cnum) => LoadResult::Previous(cnum),\n             None => {\n                 let mut load_ctxt = loader::Context {\n                     sess: self.sess,\n@@ -380,40 +381,59 @@ impl<'a> CrateReader<'a> {\n                     rejected_via_kind: vec!(),\n                     should_match_name: true,\n                 };\n-                let library = load_ctxt.load_library_crate();\n-\n-                // In the case that we're loading a crate, but not matching\n-                // against a hash, we could load a crate which has the same hash\n-                // as an already loaded crate. If this is the case prevent\n-                // duplicates by just using the first crate.\n-                let meta_hash = decoder::get_crate_hash(library.metadata\n-                                                               .as_slice());\n-                let mut result = LookupResult::Loaded(library);\n-                self.cstore.iter_crate_data(|cnum, data| {\n-                    if data.name() == name && meta_hash == data.hash() {\n-                        assert!(hash.is_none());\n-                        result = LookupResult::Previous(cnum);\n-                    }\n-                });\n-                result\n+                match self.load(&mut load_ctxt) {\n+                    Some(result) => result,\n+                    None => load_ctxt.report_load_errs(),\n+                }\n             }\n         };\n \n         match result {\n-            LookupResult::Previous(cnum) => {\n+            LoadResult::Previous(cnum) => {\n                 let data = self.cstore.get_crate_data(cnum);\n                 if explicitly_linked && !data.explicitly_linked.get() {\n                     data.explicitly_linked.set(explicitly_linked);\n                 }\n                 (cnum, data, self.cstore.used_crate_source(cnum))\n             }\n-            LookupResult::Loaded(library) => {\n+            LoadResult::Loaded(library) => {\n                 self.register_crate(root, ident, name, span, library,\n                                     explicitly_linked)\n             }\n         }\n     }\n \n+    fn load(&mut self, loader: &mut loader::Context) -> Option<LoadResult> {\n+        let library = match loader.maybe_load_library_crate() {\n+            Some(lib) => lib,\n+            None => return None,\n+        };\n+\n+        // In the case that we're loading a crate, but not matching\n+        // against a hash, we could load a crate which has the same hash\n+        // as an already loaded crate. If this is the case prevent\n+        // duplicates by just using the first crate.\n+        //\n+        // Note that we only do this for target triple crates, though, as we\n+        // don't want to match a host crate against an equivalent target one\n+        // already loaded.\n+        if loader.triple == self.sess.opts.target_triple {\n+            let meta_hash = decoder::get_crate_hash(library.metadata.as_slice());\n+            let meta_name = decoder::get_crate_name(library.metadata.as_slice())\n+                                    .to_string();\n+            let mut result = LoadResult::Loaded(library);\n+            self.cstore.iter_crate_data(|cnum, data| {\n+                if data.name() == meta_name && meta_hash == data.hash() {\n+                    assert!(loader.hash.is_none());\n+                    result = LoadResult::Previous(cnum);\n+                }\n+            });\n+            Some(result)\n+        } else {\n+            Some(LoadResult::Loaded(library))\n+        }\n+    }\n+\n     fn update_extern_crate(&mut self,\n                            cnum: ast::CrateNum,\n                            mut extern_crate: ExternCrate)\n@@ -488,35 +508,46 @@ impl<'a> CrateReader<'a> {\n             rejected_via_kind: vec!(),\n             should_match_name: true,\n         };\n-        let library = match load_ctxt.maybe_load_library_crate() {\n-            Some(l) => l,\n-            None if is_cross => {\n-                // Try loading from target crates. This will abort later if we\n-                // try to load a plugin registrar function,\n-                target_only = true;\n-                should_link = info.should_link;\n-\n-                load_ctxt.target = &self.sess.target.target;\n-                load_ctxt.triple = target_triple;\n-                load_ctxt.filesearch = self.sess.target_filesearch(PathKind::Crate);\n-                load_ctxt.load_library_crate()\n+        let library = self.load(&mut load_ctxt).or_else(|| {\n+            if !is_cross {\n+                return None\n             }\n-            None => { load_ctxt.report_load_errs(); },\n+            // Try loading from target crates. This will abort later if we\n+            // try to load a plugin registrar function,\n+            target_only = true;\n+            should_link = info.should_link;\n+\n+            load_ctxt.target = &self.sess.target.target;\n+            load_ctxt.triple = target_triple;\n+            load_ctxt.filesearch = self.sess.target_filesearch(PathKind::Crate);\n+\n+            self.load(&mut load_ctxt)\n+        });\n+        let library = match library {\n+            Some(l) => l,\n+            None => load_ctxt.report_load_errs(),\n         };\n \n-        let dylib = library.dylib.clone();\n-        let register = should_link && self.existing_match(&info.name,\n-                                                          None,\n-                                                          PathKind::Crate).is_none();\n-        let metadata = if register {\n-            // Register crate now to avoid double-reading metadata\n-            let (_, cmd, _) = self.register_crate(&None, &info.ident,\n-                                                  &info.name, span, library,\n-                                                  true);\n-            PMDSource::Registered(cmd)\n-        } else {\n-            // Not registering the crate; just hold on to the metadata\n-            PMDSource::Owned(library.metadata)\n+        let (dylib, metadata) = match library {\n+            LoadResult::Previous(cnum) => {\n+                let dylib = self.cstore.opt_used_crate_source(cnum).unwrap().dylib;\n+                let data = self.cstore.get_crate_data(cnum);\n+                (dylib, PMDSource::Registered(data))\n+            }\n+            LoadResult::Loaded(library) => {\n+                let dylib = library.dylib.clone();\n+                let metadata = if should_link {\n+                    // Register crate now to avoid double-reading metadata\n+                    let (_, cmd, _) = self.register_crate(&None, &info.ident,\n+                                                          &info.name, span,\n+                                                          library, true);\n+                    PMDSource::Registered(cmd)\n+                } else {\n+                    // Not registering the crate; just hold on to the metadata\n+                    PMDSource::Owned(library.metadata)\n+                };\n+                (dylib, metadata)\n+            }\n         };\n \n         ExtensionCrate {"}, {"sha": "567d7e78a57a47793c600263e2dd8c5adc1ed488", "filename": "src/test/run-make/extern-multiple-copies2/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2FMakefile?ref=91e907345c4258ff9787d70a4b8c56cb691a64b6", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo1.rs\n+\t$(RUSTC) foo2.rs\n+\tmkdir $(TMPDIR)/foo\n+\tcp $(TMPDIR)/libfoo1.rlib $(TMPDIR)/foo/libfoo1.rlib\n+\t$(RUSTC) bar.rs \\\n+\t\t--extern foo1=$(TMPDIR)/foo/libfoo1.rlib \\\n+\t\t--extern foo2=$(TMPDIR)/libfoo2.rlib"}, {"sha": "b8ac34aa53e3099bc0efebcf6f4cb51551166bc2", "filename": "src/test/run-make/extern-multiple-copies2/bar.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2Fbar.rs?ref=91e907345c4258ff9787d70a4b8c56cb691a64b6", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_use]\n+extern crate foo2; // foo2 first to exhibit the bug\n+#[macro_use]\n+extern crate foo1;\n+\n+fn main() {\n+    foo2::foo2(foo1::A);\n+}"}, {"sha": "1787772053ba455f4c035d99d6aec11e3042e79a", "filename": "src/test/run-make/extern-multiple-copies2/foo1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2Ffoo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2Ffoo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2Ffoo1.rs?ref=91e907345c4258ff9787d70a4b8c56cb691a64b6", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+pub struct A;\n+\n+pub fn foo1(a: A) {\n+    drop(a);\n+}"}, {"sha": "bad1030438779165a962beaab1639d7d44fc84b4", "filename": "src/test/run-make/extern-multiple-copies2/foo2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2Ffoo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e907345c4258ff9787d70a4b8c56cb691a64b6/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2Ffoo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-multiple-copies2%2Ffoo2.rs?ref=91e907345c4258ff9787d70a4b8c56cb691a64b6", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+#[macro_use]\n+extern crate foo1;\n+\n+pub fn foo2(a: foo1::A) {\n+    foo1::foo1(a);\n+}"}]}