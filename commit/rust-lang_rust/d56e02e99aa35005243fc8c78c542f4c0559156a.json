{"sha": "d56e02e99aa35005243fc8c78c542f4c0559156a", "node_id": "C_kwDOAAsO6NoAKGQ1NmUwMmU5OWFhMzUwMDUyNDNmYzhjNzhjNTQyZjRjMDU1OTE1NmE", "commit": {"author": {"name": "Your Name", "email": "you@example.com", "date": "2022-09-13T19:07:48Z"}, "committer": {"name": "Your Name", "email": "you@example.com", "date": "2022-09-13T19:08:07Z"}, "message": "Added platform docs", "tree": {"sha": "a0bf57954346af7cbcd0f458402c20a9f229a5a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0bf57954346af7cbcd0f458402c20a9f229a5a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d56e02e99aa35005243fc8c78c542f4c0559156a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d56e02e99aa35005243fc8c78c542f4c0559156a", "html_url": "https://github.com/rust-lang/rust/commit/d56e02e99aa35005243fc8c78c542f4c0559156a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d56e02e99aa35005243fc8c78c542f4c0559156a/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9025ab7a1f5d8ce136fcc41d82c0b6be8b8adaf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9025ab7a1f5d8ce136fcc41d82c0b6be8b8adaf7", "html_url": "https://github.com/rust-lang/rust/commit/9025ab7a1f5d8ce136fcc41d82c0b6be8b8adaf7"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "83f554b507a94b82453453b163dac7bd58e6ecbc", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d56e02e99aa35005243fc8c78c542f4c0559156a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/d56e02e99aa35005243fc8c78c542f4c0559156a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=d56e02e99aa35005243fc8c78c542f4c0559156a", "patch": "@@ -223,6 +223,7 @@ target | std | host | notes\n `aarch64_be-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (big-endian, ILP32 ABI)\n `aarch64_be-unknown-linux-gnu` | \u2713 | \u2713 | ARM64 Linux (big-endian)\n [`arm64_32-apple-watchos`](platform-support/apple-watchos.md) | \u2713 | | ARM Apple WatchOS 64-bit with 32-bit pointers\n+[`armeb-linux-gnueabi`](platform-support/armeb-linux-gnueabi.md) | \u2713 | ? | ARM BE8 the default ARM big-endian architecture since [ARMv6](https://developer.arm.com/documentation/101754/0616/armlink-Reference/armlink-Command-line-Options/--be8?lang=en).\n `armv4t-none-eabi` | * |  | ARMv4T A32\n `armv4t-unknown-linux-gnueabi` | ? |  |\n `armv5te-unknown-linux-uclibceabi` | ? |  | ARMv5TE Linux with uClibc"}, {"sha": "e9576fad95364cd88334090b2e2419af2846c7ae", "filename": "src/doc/rustc/src/platform-support/armeb-linux-gnueabi.md", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d56e02e99aa35005243fc8c78c542f4c0559156a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmeb-linux-gnueabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/d56e02e99aa35005243fc8c78c542f4c0559156a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmeb-linux-gnueabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmeb-linux-gnueabi.md?ref=d56e02e99aa35005243fc8c78c542f4c0559156a", "patch": "@@ -0,0 +1,74 @@\n+# armeb-linux-gnueabi\n+**Tier: 3**\n+\n+Target for cross-compiling Linux user-mode applications targetting the ARM BE8 architecture.\n+\n+## Overview\n+BE8 architecture retains the same little-endian ordered code-stream used by conventional little endian ARM systems, however the data accesses are in big-endian. BE8 is used primarily in high-performance networking applications where the ability to read packets in their native \"Network Byte Order\" is important (many network protocols transmit data in big-endian byte order for their wire formats).\n+\n+## History\n+BE8 architecture is the default big-endian architecture for ARM since [ARMv6](https://developer.arm.com/documentation/101754/0616/armlink-Reference/armlink-Command-line-Options/--be8?lang=en). It's predecessor, used for ARMv4 and ARMv5 devices was [BE32](https://developer.arm.com/documentation/dui0474/j/linker-command-line-options/--be32). On ARMv6 architecture, endianness can be configured via [system registers](https://developer.arm.com/documentation/ddi0290/g/unaligned-and-mixed-endian-data-access-support/mixed-endian-access-support/interaction-between-the-bus-protocol-and-the-core-endianness). However, BE32 was withdrawn for [ARMv7](https://developer.arm.com/documentation/ddi0406/cb/Appendixes/Deprecated-and-Obsolete-Features/Obsolete-features/Support-for-BE-32-endianness-model) onwards.\n+\n+## Target Maintainers\n+* [@WorksButNotTested](https://github.com/WorksButNotTested)\n+\n+## Requirements\n+The target is cross-compiled. This target supports `std` in the normal way (indeed only nominal changes are required from the standard ARM configuration).\n+\n+## Target definition\n+The target definition can be seen [here](../../../../../compiler/rustc_target/src/spec/armeb_linux_gnueabi.rs). In particular, it should be noted that the `features` specify that this target is built for the ARMv8 core. Though this can likely be modified as required.\n+\n+## Building the target\n+Because it is Tier 3, rust does not yet ship pre-compiled artifacts for this target.\n+\n+Therefore, you can build Rust with support for the target by adding it to the target list in config.toml, a sample configuration is shown below. It is expected that the user already have a working GNU compiler toolchain and update the paths accordingly.\n+\n+```toml\n+[llvm]\n+download-ci-llvm = false\n+skip-rebuild = true\n+optimize = true\n+ninja = true\n+targets = \"ARM;X86\"\n+clang = false\n+\n+[build]\n+target = [\"x86_64-unknown-linux-gnu\", \"armeb-linux-gnueabi\"]\n+docs = false\n+docs-minification = false\n+compiler-docs = false\n+[install]\n+prefix = \"/home/user/x-tools/rust/\"\n+\n+[rust]\n+debug-logging=true\n+backtrace = true\n+incremental = true\n+\n+[target.x86_64-unknown-linux-gnu]\n+\n+[dist]\n+\n+[target.armeb-linux-gnueabi]\n+cc = \"/home/user/x-tools/armeb-linux-gnueabi/bin/armeb-linux-gnueabi-gcc\"\n+cxx = \"/home/user/x-tools/armeb-linux-gnueabi/bin/armeb-linux-gnueabi-g++\"\n+ar = \"/home/user/x-tools/armeb-linux-gnueabi/bin/armeb-linux-gnueabi-ar\"\n+ranlib = \"/home/user/x-tools/armeb-linux-gnueabi/bin/armeb-linux-gnueabi-ranlib\"\n+linker = \"/home/user/x-tools/armeb-linux-gnueabi/bin/armeb-linux-gnueabi-gcc\"\n+llvm-config = \"/home/user/x-tools/clang/bin/llvm-config\"\n+llvm-filecheck = \"/home/user/x-tools/clang/bin/FileCheck\"\n+```\n+\n+## Building Rust programs\n+\n+The following `.cargo/config` is needed inside any project directory to build for the BE8 target:\n+\n+```toml\n+[build]\n+target = \"armeb-linux-gnueabi\"\n+\n+[target.armeb-linux-gnueabi]\n+linker = \"armeb-linux-gnueabi-gcc\"\n+```\n+\n+Note that it is expected that the user has a suitable linker from the GNU toolchain."}]}