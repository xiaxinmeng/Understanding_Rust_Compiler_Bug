{"sha": "e16c76e3c30fd1123921e33f408d99b5cb40532f", "node_id": "C_kwDOAAsO6NoAKGUxNmM3NmUzYzMwZmQxMTIzOTIxZTMzZjQwOGQ5OWI1Y2I0MDUzMmY", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-12-23T18:42:58Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-12-24T19:36:10Z"}, "message": "Inline all format arguments where possible\n\nThis makes code more readale and concise,\nmoving all format arguments like `format!(\"{}\", foo)`\ninto the more compact `format!(\"{foo}\")` form.\n\nThe change was automatically created with, so there are far less change\nof an accidental typo.\n\n```\ncargo clippy --fix -- -A clippy::all -W clippy::uninlined_format_args\n```", "tree": {"sha": "7baaed532b19918ed80b8e6d91baed4610411713", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7baaed532b19918ed80b8e6d91baed4610411713"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e16c76e3c30fd1123921e33f408d99b5cb40532f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e16c76e3c30fd1123921e33f408d99b5cb40532f", "html_url": "https://github.com/rust-lang/rust/commit/e16c76e3c30fd1123921e33f408d99b5cb40532f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e16c76e3c30fd1123921e33f408d99b5cb40532f/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1927c2e1d8d222656cae7051cdd924aa44428622", "url": "https://api.github.com/repos/rust-lang/rust/commits/1927c2e1d8d222656cae7051cdd924aa44428622", "html_url": "https://github.com/rust-lang/rust/commit/1927c2e1d8d222656cae7051cdd924aa44428622"}], "stats": {"total": 988, "additions": 487, "deletions": 501}, "files": [{"sha": "6f83ea40e76f669a784fde7f3d745a7b758a52b6", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -407,9 +407,9 @@ fn parse_crate(crate_str: String) -> (String, CrateOrigin, Option<String>) {\n                 Some((version, url)) => {\n                     (version, CrateOrigin::CratesIo { repo: Some(url.to_owned()), name: None })\n                 }\n-                _ => panic!(\"Bad crates.io parameter: {}\", data),\n+                _ => panic!(\"Bad crates.io parameter: {data}\"),\n             },\n-            _ => panic!(\"Bad string for crate origin: {}\", b),\n+            _ => panic!(\"Bad string for crate origin: {b}\"),\n         };\n         (a.to_owned(), origin, Some(version.to_string()))\n     } else {\n@@ -439,7 +439,7 @@ impl From<Fixture> for FileMeta {\n             introduce_new_source_root: f.introduce_new_source_root.map(|kind| match &*kind {\n                 \"local\" => SourceRootKind::Local,\n                 \"library\" => SourceRootKind::Library,\n-                invalid => panic!(\"invalid source root kind '{}'\", invalid),\n+                invalid => panic!(\"invalid source root kind '{invalid}'\"),\n             }),\n             target_data_layout: f.target_data_layout,\n         }"}, {"sha": "5fa4a8024950997849e08e2f619a09e675350e44", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -618,8 +618,8 @@ impl CyclicDependenciesError {\n impl fmt::Display for CyclicDependenciesError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let render = |(id, name): &(CrateId, Option<CrateDisplayName>)| match name {\n-            Some(it) => format!(\"{}({:?})\", it, id),\n-            None => format!(\"{:?}\", id),\n+            Some(it) => format!(\"{it}({id:?})\"),\n+            None => format!(\"{id:?}\"),\n         };\n         let path = self.path.iter().rev().map(render).collect::<Vec<String>>().join(\" -> \");\n         write!("}, {"sha": "55a51d3bbb2c784d91f14e42f4c7c3e5a0bf967a", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -75,7 +75,7 @@ pub trait SourceDatabase: FileLoader + std::fmt::Debug {\n }\n \n fn parse_query(db: &dyn SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {\n-    let _p = profile::span(\"parse_query\").detail(|| format!(\"{:?}\", file_id));\n+    let _p = profile::span(\"parse_query\").detail(|| format!(\"{file_id:?}\"));\n     let text = db.file_text(file_id);\n     SourceFile::parse(&text)\n }"}, {"sha": "5f4eefa8366199e34130040f520b0dd0fd944266", "filename": "crates/cfg/src/cfg_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -44,7 +44,7 @@ impl fmt::Display for CfgAtom {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             CfgAtom::Flag(name) => name.fmt(f),\n-            CfgAtom::KeyValue { key, value } => write!(f, \"{} = {:?}\", key, value),\n+            CfgAtom::KeyValue { key, value } => write!(f, \"{key} = {value:?}\"),\n         }\n     }\n }"}, {"sha": "30709c968dacfaa1a4d06416471b2f7948bc932d", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -37,7 +37,7 @@ impl fmt::Debug for CfgOptions {\n             .iter()\n             .map(|atom| match atom {\n                 CfgAtom::Flag(it) => it.to_string(),\n-                CfgAtom::KeyValue { key, value } => format!(\"{}={}\", key, value),\n+                CfgAtom::KeyValue { key, value } => format!(\"{key}={value}\"),\n             })\n             .collect::<Vec<_>>();\n         items.sort();\n@@ -175,7 +175,7 @@ impl fmt::Display for InactiveReason {\n                 atom.fmt(f)?;\n             }\n             let is_are = if self.enabled.len() == 1 { \"is\" } else { \"are\" };\n-            write!(f, \" {} enabled\", is_are)?;\n+            write!(f, \" {is_are} enabled\")?;\n \n             if !self.disabled.is_empty() {\n                 f.write_str(\" and \")?;\n@@ -194,7 +194,7 @@ impl fmt::Display for InactiveReason {\n                 atom.fmt(f)?;\n             }\n             let is_are = if self.disabled.len() == 1 { \"is\" } else { \"are\" };\n-            write!(f, \" {} disabled\", is_are)?;\n+            write!(f, \" {is_are} disabled\")?;\n         }\n \n         Ok(())"}, {"sha": "b3e7443d1c1c093b2f67805d7b9fb17baa112771", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -60,9 +60,9 @@ pub enum FlycheckConfig {\n impl fmt::Display for FlycheckConfig {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            FlycheckConfig::CargoCommand { command, .. } => write!(f, \"cargo {}\", command),\n+            FlycheckConfig::CargoCommand { command, .. } => write!(f, \"cargo {command}\"),\n             FlycheckConfig::CustomCommand { command, args, .. } => {\n-                write!(f, \"{} {}\", command, args.join(\" \"))\n+                write!(f, \"{command} {}\", args.join(\" \"))\n             }\n         }\n     }\n@@ -474,7 +474,7 @@ impl CargoActor {\n         );\n         match output {\n             Ok(_) => Ok((read_at_least_one_message, error)),\n-            Err(e) => Err(io::Error::new(e.kind(), format!(\"{:?}: {}\", e, error))),\n+            Err(e) => Err(io::Error::new(e.kind(), format!(\"{e:?}: {error}\"))),\n         }\n     }\n }"}, {"sha": "ab5d180e1bb9ef7df385db25b5ff4876aa60d05d", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -712,7 +712,7 @@ impl AttrSourceMap {\n         self.source\n             .get(ast_idx)\n             .map(|it| InFile::new(file_id, it))\n-            .unwrap_or_else(|| panic!(\"cannot find attr at index {:?}\", id))\n+            .unwrap_or_else(|| panic!(\"cannot find attr at index {id:?}\"))\n     }\n }\n "}, {"sha": "04279751f0c89fe062e13d32b223adb52f56cb8d", "filename": "crates/hir-def/src/body/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -32,7 +32,7 @@ pub(super) fn print_body_hir(db: &dyn DefDatabase, body: &Body, owner: DefWithBo\n                 Some(name) => name.to_string(),\n                 None => \"_\".to_string(),\n             };\n-            format!(\"const {} = \", name)\n+            format!(\"const {name} = \")\n         }\n         DefWithBodyId::VariantId(it) => {\n             needs_semi = false;\n@@ -42,7 +42,7 @@ pub(super) fn print_body_hir(db: &dyn DefDatabase, body: &Body, owner: DefWithBo\n                 Some(name) => name.to_string(),\n                 None => \"_\".to_string(),\n             };\n-            format!(\"{}\", name)\n+            format!(\"{name}\")\n         }\n     };\n "}, {"sha": "e90dc47cf38d63f068b0c3ed9a2eb057c278fbc4", "filename": "crates/hir-def/src/find_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ffind_path.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -512,7 +512,7 @@ mod tests {\n     fn check_found_path_(ra_fixture: &str, path: &str, prefix_kind: Option<PrefixKind>) {\n         let (db, pos) = TestDB::with_position(ra_fixture);\n         let module = db.module_at_position(pos);\n-        let parsed_path_file = syntax::SourceFile::parse(&format!(\"use {};\", path));\n+        let parsed_path_file = syntax::SourceFile::parse(&format!(\"use {path};\"));\n         let ast_path =\n             parsed_path_file.syntax_node().descendants().find_map(syntax::ast::Path::cast).unwrap();\n         let mod_path = ModPath::from_src(&db, ast_path, &Hygiene::new_unhygienic()).unwrap();\n@@ -531,7 +531,7 @@ mod tests {\n \n         let found_path =\n             find_path_inner(&db, ItemInNs::Types(resolved), module, prefix_kind, false);\n-        assert_eq!(found_path, Some(mod_path), \"{:?}\", prefix_kind);\n+        assert_eq!(found_path, Some(mod_path), \"{prefix_kind:?}\");\n     }\n \n     fn check_found_path("}, {"sha": "193c766200885696cf49fdada08341a714bbc336", "filename": "crates/hir-def/src/import_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fimport_map.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -243,7 +243,7 @@ impl fmt::Debug for ImportMap {\n                     ItemInNs::Values(_) => \"v\",\n                     ItemInNs::Macros(_) => \"m\",\n                 };\n-                format!(\"- {} ({})\", info.path, ns)\n+                format!(\"- {} ({ns})\", info.path)\n             })\n             .collect();\n \n@@ -398,7 +398,7 @@ pub fn search_dependencies<'a>(\n     krate: CrateId,\n     query: Query,\n ) -> FxHashSet<ItemInNs> {\n-    let _p = profile::span(\"search_dependencies\").detail(|| format!(\"{:?}\", query));\n+    let _p = profile::span(\"search_dependencies\").detail(|| format!(\"{query:?}\"));\n \n     let graph = db.crate_graph();\n     let import_maps: Vec<_> =\n@@ -549,7 +549,7 @@ mod tests {\n                         None\n                     }\n                 })?;\n-            return Some(format!(\"{}::{}\", dependency_imports.path_of(trait_)?, assoc_item_name));\n+            return Some(format!(\"{}::{assoc_item_name}\", dependency_imports.path_of(trait_)?));\n         }\n         None\n     }\n@@ -589,7 +589,7 @@ mod tests {\n \n                 let map = db.import_map(krate);\n \n-                Some(format!(\"{}:\\n{:?}\\n\", name, map))\n+                Some(format!(\"{name}:\\n{map:?}\\n\"))\n             })\n             .sorted()\n             .collect::<String>();"}, {"sha": "80297f8adf16e2a14e43215f7b1c1827e619be86", "filename": "crates/hir-def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -105,7 +105,7 @@ pub struct ItemTree {\n \n impl ItemTree {\n     pub(crate) fn file_item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {\n-        let _p = profile::span(\"file_item_tree_query\").detail(|| format!(\"{:?}\", file_id));\n+        let _p = profile::span(\"file_item_tree_query\").detail(|| format!(\"{file_id:?}\"));\n         let syntax = match db.parse_or_expand(file_id) {\n             Some(node) => node,\n             None => return Default::default(),\n@@ -132,7 +132,7 @@ impl ItemTree {\n                     ctx.lower_macro_stmts(stmts)\n                 },\n                 _ => {\n-                    panic!(\"cannot create item tree from {:?} {}\", syntax, syntax);\n+                    panic!(\"cannot create item tree from {syntax:?} {syntax}\");\n                 },\n             }\n         };"}, {"sha": "907cc98f7b59b6d83d138756a3830dc91db34d11", "filename": "crates/hir-def/src/macro_expansion_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -179,7 +179,7 @@ pub fn identity_when_valid(_attr: TokenStream, item: TokenStream) -> TokenStream\n             if tree {\n                 let tree = format!(\"{:#?}\", parse.syntax_node())\n                     .split_inclusive('\\n')\n-                    .map(|line| format!(\"// {}\", line))\n+                    .map(|line| format!(\"// {line}\"))\n                     .collect::<String>();\n                 format_to!(expn_text, \"\\n{}\", tree)\n             }"}, {"sha": "393747d304b7721a471703e0a7bc1fc241efd619", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -461,7 +461,7 @@ impl DefMap {\n             for (name, child) in\n                 map.modules[module].children.iter().sorted_by(|a, b| Ord::cmp(&a.0, &b.0))\n             {\n-                let path = format!(\"{}::{}\", path, name);\n+                let path = format!(\"{path}::{name}\");\n                 buf.push('\\n');\n                 go(buf, map, &path, *child);\n             }"}, {"sha": "6e1f85bc081cbcf56fd2fcf64ab89f8b838f4f0f", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -1017,7 +1017,7 @@ impl DefCollector<'_> {\n                         None => true,\n                         Some(old_vis) => {\n                             let max_vis = old_vis.max(vis, &self.def_map).unwrap_or_else(|| {\n-                                panic!(\"`Tr as _` imports with unrelated visibilities {:?} and {:?} (trait {:?})\", old_vis, vis, tr);\n+                                panic!(\"`Tr as _` imports with unrelated visibilities {old_vis:?} and {vis:?} (trait {tr:?})\");\n                             });\n \n                             if max_vis == old_vis {"}, {"sha": "11d20d3db39a5bc554f3b135fa8686bc886bc5f3", "filename": "crates/hir-def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -74,12 +74,12 @@ impl ModDir {\n                 candidate_files.push(self.dir_path.join_attr(attr_path, self.root_non_dir_owner))\n             }\n             None if file_id.is_include_macro(db.upcast()) => {\n-                candidate_files.push(format!(\"{}.rs\", name));\n-                candidate_files.push(format!(\"{}/mod.rs\", name));\n+                candidate_files.push(format!(\"{name}.rs\"));\n+                candidate_files.push(format!(\"{name}/mod.rs\"));\n             }\n             None => {\n-                candidate_files.push(format!(\"{}{}.rs\", self.dir_path.0, name));\n-                candidate_files.push(format!(\"{}{}/mod.rs\", self.dir_path.0, name));\n+                candidate_files.push(format!(\"{}{name}.rs\", self.dir_path.0));\n+                candidate_files.push(format!(\"{}{name}/mod.rs\", self.dir_path.0));\n             }\n         };\n \n@@ -91,7 +91,7 @@ impl ModDir {\n                 let (dir_path, root_non_dir_owner) = if is_mod_rs || attr_path.is_some() {\n                     (DirPath::empty(), false)\n                 } else {\n-                    (DirPath::new(format!(\"{}/\", name)), true)\n+                    (DirPath::new(format!(\"{name}/\")), true)\n                 };\n                 if let Some(mod_dir) = self.child(dir_path, root_non_dir_owner) {\n                     return Ok((file_id, is_mod_rs, mod_dir));\n@@ -156,7 +156,7 @@ impl DirPath {\n         } else {\n             attr\n         };\n-        let res = format!(\"{}{}\", base, attr);\n+        let res = format!(\"{base}{attr}\");\n         res\n     }\n }"}, {"sha": "c7c50fa94a0935034b63babb4a60b1a94757c445", "filename": "crates/hir-def/src/nameres/path_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -170,8 +170,8 @@ impl DefMap {\n     ) -> ResolvePathResult {\n         let graph = db.crate_graph();\n         let _cx = stdx::panic_context::enter(format!(\n-            \"DefMap {:?} crate_name={:?} block={:?} path={}\",\n-            self.krate, graph[self.krate].display_name, self.block, path\n+            \"DefMap {:?} crate_name={:?} block={:?} path={path}\",\n+            self.krate, graph[self.krate].display_name, self.block\n         ));\n \n         let mut segments = path.segments().iter().enumerate();"}, {"sha": "f5190b76db058e33c0f69c04f159cf26fb6f91ab", "filename": "crates/hir-def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -13,15 +13,15 @@ fn check_def_map_is_not_recomputed(ra_fixture_initial: &str, ra_fixture_change:\n         let events = db.log_executed(|| {\n             db.crate_def_map(krate);\n         });\n-        assert!(format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n+        assert!(format!(\"{events:?}\").contains(\"crate_def_map\"), \"{events:#?}\")\n     }\n     db.set_file_text(pos.file_id, Arc::new(ra_fixture_change.to_string()));\n \n     {\n         let events = db.log_executed(|| {\n             db.crate_def_map(krate);\n         });\n-        assert!(!format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n+        assert!(!format!(\"{events:?}\").contains(\"crate_def_map\"), \"{events:#?}\")\n     }\n }\n \n@@ -94,7 +94,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n             let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n             assert_eq!(module_data.scope.resolutions().count(), 1);\n         });\n-        assert!(format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n+        assert!(format!(\"{events:?}\").contains(\"crate_def_map\"), \"{events:#?}\")\n     }\n     db.set_file_text(pos.file_id, Arc::new(\"m!(Y);\".to_string()));\n \n@@ -104,7 +104,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n             let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n             assert_eq!(module_data.scope.resolutions().count(), 1);\n         });\n-        assert!(!format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n+        assert!(!format!(\"{events:?}\").contains(\"crate_def_map\"), \"{events:#?}\")\n     }\n }\n "}, {"sha": "befd0c5ffa0550a9c3188661bbd35dd9380127d0", "filename": "crates/hir-def/src/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-def%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpretty.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -92,7 +92,7 @@ pub(crate) fn print_generic_args(generics: &GenericArgs, buf: &mut dyn Write) ->\n pub(crate) fn print_generic_arg(arg: &GenericArg, buf: &mut dyn Write) -> fmt::Result {\n     match arg {\n         GenericArg::Type(ty) => print_type_ref(ty, buf),\n-        GenericArg::Const(c) => write!(buf, \"{}\", c),\n+        GenericArg::Const(c) => write!(buf, \"{c}\"),\n         GenericArg::Lifetime(lt) => write!(buf, \"{}\", lt.name),\n     }\n }\n@@ -118,7 +118,7 @@ pub(crate) fn print_type_ref(type_ref: &TypeRef, buf: &mut dyn Write) -> fmt::Re\n                 Mutability::Shared => \"*const\",\n                 Mutability::Mut => \"*mut\",\n             };\n-            write!(buf, \"{} \", mtbl)?;\n+            write!(buf, \"{mtbl} \")?;\n             print_type_ref(pointee, buf)?;\n         }\n         TypeRef::Reference(pointee, lt, mtbl) => {\n@@ -130,13 +130,13 @@ pub(crate) fn print_type_ref(type_ref: &TypeRef, buf: &mut dyn Write) -> fmt::Re\n             if let Some(lt) = lt {\n                 write!(buf, \"{} \", lt.name)?;\n             }\n-            write!(buf, \"{}\", mtbl)?;\n+            write!(buf, \"{mtbl}\")?;\n             print_type_ref(pointee, buf)?;\n         }\n         TypeRef::Array(elem, len) => {\n             write!(buf, \"[\")?;\n             print_type_ref(elem, buf)?;\n-            write!(buf, \"; {}]\", len)?;\n+            write!(buf, \"; {len}]\")?;\n         }\n         TypeRef::Slice(elem) => {\n             write!(buf, \"[\")?;"}, {"sha": "b28e60187defffb214fd7a0a52b39ae35db4e4c2", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -444,7 +444,7 @@ fn macro_expand(db: &dyn AstDatabase, id: MacroCallId) -> ExpandResult<Option<Ar\n         // be reported at the definition site (when we construct a def map).\n         Err(err) => {\n             return ExpandResult::only_err(ExpandError::Other(\n-                format!(\"invalid macro definition: {}\", err).into(),\n+                format!(\"invalid macro definition: {err}\").into(),\n             ))\n         }\n     };"}, {"sha": "2f55e78b76343c4feb2d758bd1c28e8455764fc3", "filename": "crates/hir-expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Feager.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -161,7 +161,7 @@ pub fn expand_eager_macro(\n \n         Ok(Ok(db.intern_macro_call(loc)))\n     } else {\n-        panic!(\"called `expand_eager_macro` on non-eager macro def {:?}\", def);\n+        panic!(\"called `expand_eager_macro` on non-eager macro def {def:?}\");\n     }\n }\n "}, {"sha": "75d364d5f846b2adac1965daf339cb119de99dba", "filename": "crates/hir-expand/src/fixup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Ffixup.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -366,7 +366,7 @@ mod tests {\n             fixups.append,\n         );\n \n-        let actual = format!(\"{}\\n\", tt);\n+        let actual = format!(\"{tt}\\n\");\n \n         expect.indent(false);\n         expect.assert_eq(&actual);"}, {"sha": "c0a7bc7ca8815f2d3760bd3848e0ad472f23bb74", "filename": "crates/hir-expand/src/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fquote.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -233,7 +233,7 @@ mod tests {\n \n         let quoted = quote!(#a);\n         assert_eq!(quoted.to_string(), \"hello\");\n-        let t = format!(\"{:?}\", quoted);\n+        let t = format!(\"{quoted:?}\");\n         assert_eq!(t, \"SUBTREE $\\n  IDENT   hello 4294967295\");\n     }\n "}, {"sha": "d5ef0c22dec83bcea0438d0e8726df13868dc9f8", "filename": "crates/hir-ty/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -142,7 +142,7 @@ impl<D> TyBuilder<D> {\n         match (a.data(Interner), e) {\n             (chalk_ir::GenericArgData::Ty(_), ParamKind::Type)\n             | (chalk_ir::GenericArgData::Const(_), ParamKind::Const(_)) => (),\n-            _ => panic!(\"Mismatched kinds: {:?}, {:?}, {:?}\", a, self.vec, self.param_kinds),\n+            _ => panic!(\"Mismatched kinds: {a:?}, {:?}, {:?}\", self.vec, self.param_kinds),\n         }\n     }\n }"}, {"sha": "345cf63c4fd0071952f9383c4627f33db135fdc4", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -90,14 +90,14 @@ impl Display for ComputedExpr {\n             ComputedExpr::Literal(l) => match l {\n                 Literal::Int(x, _) => {\n                     if *x >= 10 {\n-                        write!(f, \"{} ({:#X})\", x, x)\n+                        write!(f, \"{x} ({x:#X})\")\n                     } else {\n                         x.fmt(f)\n                     }\n                 }\n                 Literal::Uint(x, _) => {\n                     if *x >= 10 {\n-                        write!(f, \"{} ({:#X})\", x, x)\n+                        write!(f, \"{x} ({x:#X})\")\n                     } else {\n                         x.fmt(f)\n                     }"}, {"sha": "6ba03737cf8e42f2be297a25abe81062a619c41d", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -14,7 +14,7 @@ fn check_number(ra_fixture: &str, answer: i128) {\n     match r {\n         ComputedExpr::Literal(Literal::Int(r, _)) => assert_eq!(r, answer),\n         ComputedExpr::Literal(Literal::Uint(r, _)) => assert_eq!(r, answer as u128),\n-        x => panic!(\"Expected number but found {:?}\", x),\n+        x => panic!(\"Expected number but found {x:?}\"),\n     }\n }\n \n@@ -126,7 +126,7 @@ fn enums() {\n             assert_eq!(name, \"E::A\");\n             assert_eq!(val, 1);\n         }\n-        x => panic!(\"Expected enum but found {:?}\", x),\n+        x => panic!(\"Expected enum but found {x:?}\"),\n     }\n }\n "}, {"sha": "8b0f051b46b629a0ac88eaef87d6dbb35290de09", "filename": "crates/hir-ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -386,7 +386,7 @@ impl HirDisplay for Pat {\n                 }\n                 subpattern.hir_fmt(f)\n             }\n-            PatKind::LiteralBool { value } => write!(f, \"{}\", value),\n+            PatKind::LiteralBool { value } => write!(f, \"{value}\"),\n             PatKind::Or { pats } => f.write_joined(pats.iter(), \" | \"),\n         }\n     }"}, {"sha": "d130827a77e8487cbf6eeb020db7a02f21693ce0", "filename": "crates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -372,7 +372,7 @@ impl Constructor {\n                     hir_def::AdtId::UnionId(id) => id.into(),\n                 }\n             }\n-            _ => panic!(\"bad constructor {:?} for adt {:?}\", self, adt),\n+            _ => panic!(\"bad constructor {self:?} for adt {adt:?}\"),\n         }\n     }\n "}, {"sha": "66e813eed8b4a022b62729c0c2198fd0de5bca74", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -176,13 +176,13 @@ impl<'a> HirFormatter<'a> {\n         let mut first = true;\n         for e in iter {\n             if !first {\n-                write!(self, \"{}\", sep)?;\n+                write!(self, \"{sep}\")?;\n             }\n             first = false;\n \n             // Abbreviate multiple omitted types with a single ellipsis.\n             if self.should_truncate() {\n-                return write!(self, \"{}\", TYPE_HINT_TRUNCATION);\n+                return write!(self, \"{TYPE_HINT_TRUNCATION}\");\n             }\n \n             e.hir_fmt(self)?;\n@@ -320,7 +320,7 @@ impl<T: HirDisplay + Internable> HirDisplay for Interned<T> {\n impl HirDisplay for ProjectionTy {\n     fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n         if f.should_truncate() {\n-            return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n+            return write!(f, \"{TYPE_HINT_TRUNCATION}\");\n         }\n \n         let trait_ref = self.trait_ref(f.db);\n@@ -342,7 +342,7 @@ impl HirDisplay for ProjectionTy {\n impl HirDisplay for OpaqueTy {\n     fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n         if f.should_truncate() {\n-            return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n+            return write!(f, \"{TYPE_HINT_TRUNCATION}\");\n         }\n \n         self.substitution.at(Interner, 0).hir_fmt(f)\n@@ -385,7 +385,7 @@ impl HirDisplay for BoundVar {\n impl HirDisplay for Ty {\n     fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n         if f.should_truncate() {\n-            return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n+            return write!(f, \"{TYPE_HINT_TRUNCATION}\");\n         }\n \n         match self.kind(Interner) {\n@@ -572,7 +572,7 @@ impl HirDisplay for Ty {\n                             hir_def::AdtId::UnionId(it) => f.db.union_data(it).name.clone(),\n                             hir_def::AdtId::EnumId(it) => f.db.enum_data(it).name.clone(),\n                         };\n-                        write!(f, \"{}\", name)?;\n+                        write!(f, \"{name}\")?;\n                     }\n                     DisplayTarget::SourceCode { module_id } => {\n                         if let Some(path) = find_path::find_path(\n@@ -581,7 +581,7 @@ impl HirDisplay for Ty {\n                             module_id,\n                             false,\n                         ) {\n-                            write!(f, \"{}\", path)?;\n+                            write!(f, \"{path}\")?;\n                         } else {\n                             return Err(HirDisplayError::DisplaySourceCodeError(\n                                 DisplaySourceCodeError::PathNotFound,\n@@ -737,7 +737,7 @@ impl HirDisplay for Ty {\n                     if sig.params().is_empty() {\n                         write!(f, \"||\")?;\n                     } else if f.should_truncate() {\n-                        write!(f, \"|{}|\", TYPE_HINT_TRUNCATION)?;\n+                        write!(f, \"|{TYPE_HINT_TRUNCATION}|\")?;\n                     } else {\n                         write!(f, \"|\")?;\n                         f.write_joined(sig.params(), \", \")?;\n@@ -928,7 +928,7 @@ pub fn write_bounds_like_dyn_trait_with_prefix(\n     default_sized: SizedByDefault,\n     f: &mut HirFormatter<'_>,\n ) -> Result<(), HirDisplayError> {\n-    write!(f, \"{}\", prefix)?;\n+    write!(f, \"{prefix}\")?;\n     if !predicates.is_empty()\n         || predicates.is_empty() && matches!(default_sized, SizedByDefault::Sized { .. })\n     {\n@@ -1056,7 +1056,7 @@ fn fmt_trait_ref(\n     use_as: bool,\n ) -> Result<(), HirDisplayError> {\n     if f.should_truncate() {\n-        return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n+        return write!(f, \"{TYPE_HINT_TRUNCATION}\");\n     }\n \n     tr.self_type_parameter(Interner).hir_fmt(f)?;\n@@ -1083,7 +1083,7 @@ impl HirDisplay for TraitRef {\n impl HirDisplay for WhereClause {\n     fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n         if f.should_truncate() {\n-            return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n+            return write!(f, \"{TYPE_HINT_TRUNCATION}\");\n         }\n \n         match self {\n@@ -1197,7 +1197,7 @@ impl HirDisplay for TypeRef {\n                     hir_def::type_ref::Mutability::Shared => \"*const \",\n                     hir_def::type_ref::Mutability::Mut => \"*mut \",\n                 };\n-                write!(f, \"{}\", mutability)?;\n+                write!(f, \"{mutability}\")?;\n                 inner.hir_fmt(f)?;\n             }\n             TypeRef::Reference(inner, lifetime, mutability) => {\n@@ -1209,13 +1209,13 @@ impl HirDisplay for TypeRef {\n                 if let Some(lifetime) = lifetime {\n                     write!(f, \"{} \", lifetime.name)?;\n                 }\n-                write!(f, \"{}\", mutability)?;\n+                write!(f, \"{mutability}\")?;\n                 inner.hir_fmt(f)?;\n             }\n             TypeRef::Array(inner, len) => {\n                 write!(f, \"[\")?;\n                 inner.hir_fmt(f)?;\n-                write!(f, \"; {}]\", len)?;\n+                write!(f, \"; {len}]\")?;\n             }\n             TypeRef::Slice(inner) => {\n                 write!(f, \"[\")?;\n@@ -1232,7 +1232,7 @@ impl HirDisplay for TypeRef {\n                     for index in 0..function_parameters.len() {\n                         let (param_name, param_type) = &function_parameters[index];\n                         if let Some(name) = param_name {\n-                            write!(f, \"{}: \", name)?;\n+                            write!(f, \"{name}: \")?;\n                         }\n \n                         param_type.hir_fmt(f)?;\n@@ -1408,7 +1408,7 @@ impl HirDisplay for hir_def::path::GenericArg {\n     fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n         match self {\n             hir_def::path::GenericArg::Type(ty) => ty.hir_fmt(f),\n-            hir_def::path::GenericArg::Const(c) => write!(f, \"{}\", c),\n+            hir_def::path::GenericArg::Const(c) => write!(f, \"{c}\"),\n             hir_def::path::GenericArg::Lifetime(lifetime) => write!(f, \"{}\", lifetime.name),\n         }\n     }"}, {"sha": "01b5719be4c0a90efc7d531bd81a5de32dd1a9d2", "filename": "crates/hir-ty/src/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finterner.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -143,7 +143,7 @@ impl chalk_ir::interner::Interner for Interner {\n \n     fn debug_goal(goal: &Goal<Interner>, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n         let goal_data = goal.data(Interner);\n-        Some(write!(fmt, \"{:?}\", goal_data))\n+        Some(write!(fmt, \"{goal_data:?}\"))\n     }\n \n     fn debug_goals("}, {"sha": "d3b445c017902a6acf691530bf3cf76ef4e3cad4", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -513,7 +513,7 @@ where\n     let mut error_replacer = ErrorReplacer { vars: 0 };\n     let value = match t.clone().try_fold_with(&mut error_replacer, DebruijnIndex::INNERMOST) {\n         Ok(t) => t,\n-        Err(_) => panic!(\"Encountered unbound or inference vars in {:?}\", t),\n+        Err(_) => panic!(\"Encountered unbound or inference vars in {t:?}\"),\n     };\n     let kinds = (0..error_replacer.vars).map(|_| {\n         chalk_ir::CanonicalVarKind::new("}, {"sha": "7bcf89ff59c07922c5b0b7204b6601cc03afa7a5", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -105,7 +105,7 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n                         .collect(),\n                 );\n             } else {\n-                panic!(\"unexpected annotation: {}\", expected);\n+                panic!(\"unexpected annotation: {expected}\");\n             }\n             had_annotations = true;\n         }\n@@ -181,11 +181,11 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n                         expected,\n                         adjustments\n                             .iter()\n-                            .map(|Adjustment { kind, .. }| format!(\"{:?}\", kind))\n+                            .map(|Adjustment { kind, .. }| format!(\"{kind:?}\"))\n                             .collect::<Vec<_>>()\n                     );\n                 } else {\n-                    panic!(\"expected {:?} adjustments, found none\", expected);\n+                    panic!(\"expected {expected:?} adjustments, found none\");\n                 }\n             }\n         }"}, {"sha": "073d6d9be2b9fab2466d5af807e0b9c3b6278409", "filename": "crates/hir-ty/src/tests/incremental.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fincremental.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -24,7 +24,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n                 db.infer(def);\n             });\n         });\n-        assert!(format!(\"{:?}\", events).contains(\"infer\"))\n+        assert!(format!(\"{events:?}\").contains(\"infer\"))\n     }\n \n     let new_text = \"\n@@ -46,6 +46,6 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n                 db.infer(def);\n             });\n         });\n-        assert!(!format!(\"{:?}\", events).contains(\"infer\"), \"{:#?}\", events)\n+        assert!(!format!(\"{events:?}\").contains(\"infer\"), \"{events:#?}\")\n     }\n }"}, {"sha": "8b75ec842a4f63560cbe26674b3df3854a4304af", "filename": "crates/hir-ty/src/tests/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmacros.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -849,7 +849,7 @@ fn main() {\n   //^^^^^^^^^^^^^^^^^ RegisterBlock\n }\n     \"#;\n-    let fixture = format!(\"{}\\n//- /foo.rs\\n{}\", fixture, data);\n+    let fixture = format!(\"{fixture}\\n//- /foo.rs\\n{data}\");\n \n     {\n         let _b = bench(\"include macro\");"}, {"sha": "b7e6ee6740be7c74dfdc134168f1cec746310a6a", "filename": "crates/hir-ty/src/tls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftls.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -67,12 +67,12 @@ impl DebugContext<'_> {\n         let trait_ref = projection_ty.trait_ref(self.0);\n         let trait_params = trait_ref.substitution.as_slice(Interner);\n         let self_ty = trait_ref.self_type_parameter(Interner);\n-        write!(fmt, \"<{:?} as {}\", self_ty, trait_name)?;\n+        write!(fmt, \"<{self_ty:?} as {trait_name}\")?;\n         if trait_params.len() > 1 {\n             write!(\n                 fmt,\n                 \"<{}>\",\n-                trait_params[1..].iter().format_with(\", \", |x, f| f(&format_args!(\"{:?}\", x))),\n+                trait_params[1..].iter().format_with(\", \", |x, f| f(&format_args!(\"{x:?}\"))),\n             )?;\n         }\n         write!(fmt, \">::{}\", type_alias_data.name)?;\n@@ -83,7 +83,7 @@ impl DebugContext<'_> {\n             write!(\n                 fmt,\n                 \"<{}>\",\n-                proj_params.iter().format_with(\", \", |x, f| f(&format_args!(\"{:?}\", x))),\n+                proj_params.iter().format_with(\", \", |x, f| f(&format_args!(\"{x:?}\"))),\n             )?;\n         }\n \n@@ -105,9 +105,9 @@ impl DebugContext<'_> {\n             }\n         };\n         match def {\n-            CallableDefId::FunctionId(_) => write!(fmt, \"{{fn {}}}\", name),\n+            CallableDefId::FunctionId(_) => write!(fmt, \"{{fn {name}}}\"),\n             CallableDefId::StructId(_) | CallableDefId::EnumVariantId(_) => {\n-                write!(fmt, \"{{ctor {}}}\", name)\n+                write!(fmt, \"{{ctor {name}}}\")\n             }\n         }\n     }"}, {"sha": "615fd9d94db69accd6a991d5685d2374eb075b89", "filename": "crates/hir-ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftraits.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -130,7 +130,7 @@ fn solve(\n \n     let mut solve = || {\n         let _ctx = if is_chalk_debug() || is_chalk_print() {\n-            Some(panic_context::enter(format!(\"solving {:?}\", goal)))\n+            Some(panic_context::enter(format!(\"solving {goal:?}\")))\n         } else {\n             None\n         };"}, {"sha": "54425d69b6b7f789d62f723b54c27703d61e7782", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -148,7 +148,7 @@ fn resolve_doc_path(\n \n     let modpath = {\n         // FIXME: this is not how we should get a mod path here\n-        let ast_path = ast::SourceFile::parse(&format!(\"type T = {};\", link))\n+        let ast_path = ast::SourceFile::parse(&format!(\"type T = {link};\"))\n             .syntax_node()\n             .descendants()\n             .find_map(ast::Path::cast)?;"}, {"sha": "5a4b2f3344968dcd83bf00074077dad1ceae2c12", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -79,7 +79,7 @@ impl HirDisplay for Function {\n                 }\n             }\n             match name {\n-                Some(name) => write!(f, \"{}: \", name)?,\n+                Some(name) => write!(f, \"{name}: \")?,\n                 None => f.write_str(\"_: \")?,\n             }\n             // FIXME: Use resolved `param.ty` or raw `type_ref`?\n@@ -327,15 +327,15 @@ fn write_generic_params(\n                         continue;\n                     }\n                     delim(f)?;\n-                    write!(f, \"{}\", name)?;\n+                    write!(f, \"{name}\")?;\n                     if let Some(default) = &ty.default {\n                         f.write_str(\" = \")?;\n                         default.hir_fmt(f)?;\n                     }\n                 }\n                 TypeOrConstParamData::ConstParamData(c) => {\n                     delim(f)?;\n-                    write!(f, \"const {}: \", name)?;\n+                    write!(f, \"const {name}: \")?;\n                     c.ty.hir_fmt(f)?;\n                 }\n             }\n@@ -372,7 +372,7 @@ fn write_where_clause(def: GenericDefId, f: &mut HirFormatter<'_>) -> Result<(),\n         WherePredicateTypeTarget::TypeRef(ty) => ty.hir_fmt(f),\n         WherePredicateTypeTarget::TypeOrConstParam(id) => {\n             match &params.type_or_consts[*id].name() {\n-                Some(name) => write!(f, \"{}\", name),\n+                Some(name) => write!(f, \"{name}\"),\n                 None => f.write_str(\"{unnamed}\"),\n             }\n         }\n@@ -424,7 +424,7 @@ fn write_where_clause(def: GenericDefId, f: &mut HirFormatter<'_>) -> Result<(),\n                         if idx != 0 {\n                             f.write_str(\", \")?;\n                         }\n-                        write!(f, \"{}\", lifetime)?;\n+                        write!(f, \"{lifetime}\")?;\n                     }\n                     f.write_str(\"> \")?;\n                     write_target(target, f)?;\n@@ -447,7 +447,7 @@ impl HirDisplay for Const {\n         let data = f.db.const_data(self.id);\n         f.write_str(\"const \")?;\n         match &data.name {\n-            Some(name) => write!(f, \"{}: \", name)?,\n+            Some(name) => write!(f, \"{name}: \")?,\n             None => f.write_str(\"_: \")?,\n         }\n         data.type_ref.hir_fmt(f)?;\n@@ -511,9 +511,9 @@ impl HirDisplay for Module {\n     fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n         // FIXME: Module doesn't have visibility saved in data.\n         match self.name(f.db) {\n-            Some(name) => write!(f, \"mod {}\", name),\n+            Some(name) => write!(f, \"mod {name}\"),\n             None if self.is_crate_root(f.db) => match self.krate(f.db).display_name(f.db) {\n-                Some(name) => write!(f, \"extern crate {}\", name),\n+                Some(name) => write!(f, \"extern crate {name}\"),\n                 None => f.write_str(\"extern crate {unknown}\"),\n             },\n             None => f.write_str(\"mod {unnamed}\"),"}, {"sha": "3f8acdfd2ff952eab398fbdadd6faac35dd3dca3", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -813,7 +813,7 @@ fn precise_macro_call_location(\n                 .doc_comments_and_attrs()\n                 .nth((*invoc_attr_index) as usize)\n                 .and_then(Either::left)\n-                .unwrap_or_else(|| panic!(\"cannot find attribute #{}\", invoc_attr_index));\n+                .unwrap_or_else(|| panic!(\"cannot find attribute #{invoc_attr_index}\"));\n \n             (\n                 ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&attr))),"}, {"sha": "a255dc1972ceba4e3c25713c41c4d8dc994f9893", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -1378,7 +1378,7 @@ impl<'db> SemanticsImpl<'db> {\n                 self.cache\n                     .borrow()\n                     .keys()\n-                    .map(|it| format!(\"{:?}\", it))\n+                    .map(|it| format!(\"{it:?}\"))\n                     .collect::<Vec<_>>()\n                     .join(\", \")\n             )"}, {"sha": "c2c5bf3aabb19c616401ee75b9275cc9b8648896", "filename": "crates/ide-assists/src/handlers/generate_delegate_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -81,7 +81,7 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext<'\n         acc.add_group(\n             &GroupLabel(\"Generate delegate methods\u2026\".to_owned()),\n             AssistId(\"generate_delegate_methods\", AssistKind::Generate),\n-            format!(\"Generate delegate for `{}.{}()`\", field_name, method.name(ctx.db())),\n+            format!(\"Generate delegate for `{field_name}.{}()`\", method.name(ctx.db())),\n             target,\n             |builder| {\n                 // Create the function"}, {"sha": "ee643ce9a4ac306c4bc76de73a715eaad8794d5b", "filename": "crates/ide-assists/src/handlers/generate_enum_projection_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -157,7 +157,7 @@ fn generate_enum_projection_method(\n         assist_description,\n         target,\n         |builder| {\n-            let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+            let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{v} \"));\n \n             let field_type_syntax = field_type.syntax();\n "}, {"sha": "a82dde2333776b64f0f43538d14aae9d41bbb690", "filename": "crates/ide-assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -235,7 +235,7 @@ fn generate_getter_from_info(\n ) -> String {\n     let mut buf = String::with_capacity(512);\n \n-    let vis = info.strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+    let vis = info.strukt.visibility().map_or(String::new(), |v| format!(\"{v} \"));\n     let (ty, body) = if info.mutable {\n         (\n             format!(\"&mut {}\", record_field_info.field_ty),"}, {"sha": "fca268a1f0b2d57e3806803cddb930f0c12d7786", "filename": "crates/ide-assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -171,7 +171,7 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult<'_>, assist_la\n                     }\n                     FileSystemEdit::MoveDir { src, src_id, dst } => {\n                         // temporary placeholder for MoveDir since we are not using MoveDir in ide assists yet.\n-                        (dst, format!(\"{:?}\\n{:?}\", src_id, src))\n+                        (dst, format!(\"{src_id:?}\\n{src:?}\"))\n                     }\n                 };\n                 let sr = db.file_source_root(dst.anchor);"}, {"sha": "c574d6bc631aacdbd95093aa3e31b652fa5177b2", "filename": "crates/ide-assists/src/tests/sourcegen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -18,7 +18,7 @@ use super::check_doc_test;\n         for assist in assists.iter() {\n             for (idx, section) in assist.sections.iter().enumerate() {\n                 let test_id =\n-                    if idx == 0 { assist.id.clone() } else { format!(\"{}_{}\", &assist.id, idx) };\n+                    if idx == 0 { assist.id.clone() } else { format!(\"{}_{idx}\", &assist.id) };\n                 let test = format!(\n                     r######\"\n #[test]\n@@ -175,7 +175,7 @@ impl fmt::Display for Assist {\n fn hide_hash_comments(text: &str) -> String {\n     text.split('\\n') // want final newline\n         .filter(|&it| !(it.starts_with(\"# \") || it == \"#\"))\n-        .map(|it| format!(\"{}\\n\", it))\n+        .map(|it| format!(\"{it}\\n\"))\n         .collect()\n }\n \n@@ -190,6 +190,6 @@ fn reveal_hash_comments(text: &str) -> String {\n                 it\n             }\n         })\n-        .map(|it| format!(\"{}\\n\", it))\n+        .map(|it| format!(\"{it}\\n\"))\n         .collect()\n }"}, {"sha": "eb87d6c58262d43078e6098261a3ccf588f6f982", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -133,7 +133,7 @@ impl Completions {\n                 if incomplete_let && snippet.ends_with('}') {\n                     // complete block expression snippets with a trailing semicolon, if inside an incomplete let\n                     cov_mark::hit!(let_semi);\n-                    item.insert_snippet(cap, format!(\"{};\", snippet));\n+                    item.insert_snippet(cap, format!(\"{snippet};\"));\n                 } else {\n                     item.insert_snippet(cap, snippet);\n                 }"}, {"sha": "7ef4ff30b56c7c1b82cbbb21a81b4fdc34887dd7", "filename": "crates/ide-completion/src/completions/attribute/cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -11,7 +11,7 @@ use crate::{completions::Completions, context::CompletionContext, CompletionItem\n pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext<'_>) {\n     let add_completion = |item: &str| {\n         let mut completion = CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), item);\n-        completion.insert_text(format!(r#\"\"{}\"\"#, item));\n+        completion.insert_text(format!(r#\"\"{item}\"\"#));\n         acc.add(completion.build());\n     };\n \n@@ -29,7 +29,7 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext<'_>) {\n         Some(\"target_vendor\") => KNOWN_VENDOR.iter().copied().for_each(add_completion),\n         Some(\"target_endian\") => [\"little\", \"big\"].into_iter().for_each(add_completion),\n         Some(name) => ctx.krate.potential_cfg(ctx.db).get_cfg_values(name).cloned().for_each(|s| {\n-            let insert_text = format!(r#\"\"{}\"\"#, s);\n+            let insert_text = format!(r#\"\"{s}\"\"#);\n             let mut item = CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), s);\n             item.insert_text(insert_text);\n "}, {"sha": "818c3cfd5fe7f1c2701b5994f5b68291e708c9c6", "filename": "crates/ide-completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -51,7 +51,7 @@ pub(super) fn complete_lint(\n             continue;\n         }\n         let label = match qual {\n-            Some(qual) if !is_qualified => format!(\"{}::{}\", qual, name),\n+            Some(qual) if !is_qualified => format!(\"{qual}::{name}\"),\n             _ => name.to_owned(),\n         };\n         let mut item = CompletionItem::new(SymbolKind::Attribute, ctx.source_range(), label);"}, {"sha": "a094e857bbad7a5ceebf35a22b644f6375bde7d2", "filename": "crates/ide-completion/src/completions/env_vars.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -112,7 +112,7 @@ mod tests {\n         \"#;\n \n         let completions = completion_list(fixture);\n-        assert!(completions.is_empty(), \"Completions weren't empty: {}\", completions);\n+        assert!(completions.is_empty(), \"Completions weren't empty: {completions}\");\n     }\n \n     #[test]\n@@ -129,7 +129,7 @@ mod tests {\n         \"#;\n \n         let completions = completion_list(fixture);\n-        assert!(completions.is_empty(), \"Completions weren't empty: {}\", completions);\n+        assert!(completions.is_empty(), \"Completions weren't empty: {completions}\");\n     }\n \n     #[test]\n@@ -145,6 +145,6 @@ mod tests {\n         \"#;\n \n         let completions = completion_list(fixture);\n-        assert!(completions.is_empty(), \"Completions weren't empty: {}\", completions)\n+        assert!(completions.is_empty(), \"Completions weren't empty: {completions}\")\n     }\n }"}, {"sha": "d8b8a190eb840fc11cf40d2416ed0be79f98a10e", "filename": "crates/ide-completion/src/completions/fn_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -192,5 +192,5 @@ fn comma_wrapper(ctx: &CompletionContext<'_>) -> Option<(impl Fn(&str) -> String\n         matches!(prev_token_kind, SyntaxKind::COMMA | SyntaxKind::L_PAREN | SyntaxKind::PIPE);\n     let leading = if has_leading_comma { \"\" } else { \", \" };\n \n-    Some((move |label: &_| (format!(\"{}{}{}\", leading, label, trailing)), param.text_range()))\n+    Some((move |label: &_| (format!(\"{leading}{label}{trailing}\")), param.text_range()))\n }"}, {"sha": "21ec13bba015c7a098406d63a4b75e82cb2a57ef", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -190,7 +190,7 @@ fn add_function_impl(\n     };\n \n     let mut item = CompletionItem::new(completion_kind, replacement_range, label);\n-    item.lookup_by(format!(\"fn {}\", fn_name))\n+    item.lookup_by(format!(\"fn {fn_name}\"))\n         .set_documentation(func.docs(ctx.db))\n         .set_relevance(CompletionRelevance { is_item_from_trait: true, ..Default::default() });\n \n@@ -205,11 +205,11 @@ fn add_function_impl(\n             let function_decl = function_declaration(&transformed_fn, source.file_id.is_macro());\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    let snippet = format!(\"{} {{\\n    $0\\n}}\", function_decl);\n+                    let snippet = format!(\"{function_decl} {{\\n    $0\\n}}\");\n                     item.snippet_edit(cap, TextEdit::replace(replacement_range, snippet));\n                 }\n                 None => {\n-                    let header = format!(\"{} {{\", function_decl);\n+                    let header = format!(\"{function_decl} {{\");\n                     item.text_edit(TextEdit::replace(replacement_range, header));\n                 }\n             };\n@@ -249,10 +249,10 @@ fn add_type_alias_impl(\n ) {\n     let alias_name = type_alias.name(ctx.db).unescaped().to_smol_str();\n \n-    let label = format!(\"type {} =\", alias_name);\n+    let label = format!(\"type {alias_name} =\");\n \n     let mut item = CompletionItem::new(SymbolKind::TypeAlias, replacement_range, label);\n-    item.lookup_by(format!(\"type {}\", alias_name))\n+    item.lookup_by(format!(\"type {alias_name}\"))\n         .set_documentation(type_alias.docs(ctx.db))\n         .set_relevance(CompletionRelevance { is_item_from_trait: true, ..Default::default() });\n \n@@ -290,7 +290,7 @@ fn add_type_alias_impl(\n \n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    let snippet = format!(\"{}$0;\", decl);\n+                    let snippet = format!(\"{decl}$0;\");\n                     item.snippet_edit(cap, TextEdit::replace(replacement_range, snippet));\n                 }\n                 None => {\n@@ -321,10 +321,10 @@ fn add_const_impl(\n                 };\n \n                 let label = make_const_compl_syntax(&transformed_const, source.file_id.is_macro());\n-                let replacement = format!(\"{} \", label);\n+                let replacement = format!(\"{label} \");\n \n                 let mut item = CompletionItem::new(SymbolKind::Const, replacement_range, label);\n-                item.lookup_by(format!(\"const {}\", const_name))\n+                item.lookup_by(format!(\"const {const_name}\"))\n                     .set_documentation(const_.docs(ctx.db))\n                     .set_relevance(CompletionRelevance {\n                         is_item_from_trait: true,\n@@ -333,7 +333,7 @@ fn add_const_impl(\n                 match ctx.config.snippet_cap {\n                     Some(cap) => item.snippet_edit(\n                         cap,\n-                        TextEdit::replace(replacement_range, format!(\"{}$0;\", replacement)),\n+                        TextEdit::replace(replacement_range, format!(\"{replacement}$0;\")),\n                     ),\n                     None => item.text_edit(TextEdit::replace(replacement_range, replacement)),\n                 };"}, {"sha": "2404491c1f09e0ad3056f20be2a9d92f81edea23", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -61,7 +61,7 @@ pub(crate) fn complete_postfix(\n                 let mut item = postfix_snippet(\n                     \"drop\",\n                     \"fn drop(&mut self)\",\n-                    &format!(\"drop($0{})\", receiver_text),\n+                    &format!(\"drop($0{receiver_text})\"),\n                 );\n                 item.set_documentation(drop_fn.docs(ctx.db));\n                 item.add_to(acc);\n@@ -76,56 +76,52 @@ pub(crate) fn complete_postfix(\n                 postfix_snippet(\n                     \"ifl\",\n                     \"if let Ok {}\",\n-                    &format!(\"if let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                    &format!(\"if let Ok($1) = {receiver_text} {{\\n    $0\\n}}\"),\n                 )\n                 .add_to(acc);\n \n                 postfix_snippet(\n                     \"while\",\n                     \"while let Ok {}\",\n-                    &format!(\"while let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                    &format!(\"while let Ok($1) = {receiver_text} {{\\n    $0\\n}}\"),\n                 )\n                 .add_to(acc);\n             }\n             TryEnum::Option => {\n                 postfix_snippet(\n                     \"ifl\",\n                     \"if let Some {}\",\n-                    &format!(\"if let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                    &format!(\"if let Some($1) = {receiver_text} {{\\n    $0\\n}}\"),\n                 )\n                 .add_to(acc);\n \n                 postfix_snippet(\n                     \"while\",\n                     \"while let Some {}\",\n-                    &format!(\"while let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                    &format!(\"while let Some($1) = {receiver_text} {{\\n    $0\\n}}\"),\n                 )\n                 .add_to(acc);\n             }\n         }\n     } else if receiver_ty.is_bool() || receiver_ty.is_unknown() {\n-        postfix_snippet(\"if\", \"if expr {}\", &format!(\"if {} {{\\n    $0\\n}}\", receiver_text))\n+        postfix_snippet(\"if\", \"if expr {}\", &format!(\"if {receiver_text} {{\\n    $0\\n}}\"))\n             .add_to(acc);\n-        postfix_snippet(\n-            \"while\",\n-            \"while expr {}\",\n-            &format!(\"while {} {{\\n    $0\\n}}\", receiver_text),\n-        )\n-        .add_to(acc);\n-        postfix_snippet(\"not\", \"!expr\", &format!(\"!{}\", receiver_text)).add_to(acc);\n+        postfix_snippet(\"while\", \"while expr {}\", &format!(\"while {receiver_text} {{\\n    $0\\n}}\"))\n+            .add_to(acc);\n+        postfix_snippet(\"not\", \"!expr\", &format!(\"!{receiver_text}\")).add_to(acc);\n     } else if let Some(trait_) = ctx.famous_defs().core_iter_IntoIterator() {\n         if receiver_ty.impls_trait(ctx.db, trait_, &[]) {\n             postfix_snippet(\n                 \"for\",\n                 \"for ele in expr {}\",\n-                &format!(\"for ele in {} {{\\n    $0\\n}}\", receiver_text),\n+                &format!(\"for ele in {receiver_text} {{\\n    $0\\n}}\"),\n             )\n             .add_to(acc);\n         }\n     }\n \n-    postfix_snippet(\"ref\", \"&expr\", &format!(\"&{}\", receiver_text)).add_to(acc);\n-    postfix_snippet(\"refm\", \"&mut expr\", &format!(\"&mut {}\", receiver_text)).add_to(acc);\n+    postfix_snippet(\"ref\", \"&expr\", &format!(\"&{receiver_text}\")).add_to(acc);\n+    postfix_snippet(\"refm\", \"&mut expr\", &format!(\"&mut {receiver_text}\")).add_to(acc);\n \n     // The rest of the postfix completions create an expression that moves an argument,\n     // so it's better to consider references now to avoid breaking the compilation\n@@ -148,7 +144,7 @@ pub(crate) fn complete_postfix(\n                 postfix_snippet(\n                     \"match\",\n                     \"match expr {}\",\n-                    &format!(\"match {} {{\\n    Ok(${{1:_}}) => {{$2}},\\n    Err(${{3:_}}) => {{$0}},\\n}}\", receiver_text),\n+                    &format!(\"match {receiver_text} {{\\n    Ok(${{1:_}}) => {{$2}},\\n    Err(${{3:_}}) => {{$0}},\\n}}\"),\n                 )\n                 .add_to(acc);\n             }\n@@ -168,21 +164,21 @@ pub(crate) fn complete_postfix(\n             postfix_snippet(\n                 \"match\",\n                 \"match expr {}\",\n-                &format!(\"match {} {{\\n    ${{1:_}} => {{$0}},\\n}}\", receiver_text),\n+                &format!(\"match {receiver_text} {{\\n    ${{1:_}} => {{$0}},\\n}}\"),\n             )\n             .add_to(acc);\n         }\n     }\n \n-    postfix_snippet(\"box\", \"Box::new(expr)\", &format!(\"Box::new({})\", receiver_text)).add_to(acc);\n-    postfix_snippet(\"dbg\", \"dbg!(expr)\", &format!(\"dbg!({})\", receiver_text)).add_to(acc); // fixme\n-    postfix_snippet(\"dbgr\", \"dbg!(&expr)\", &format!(\"dbg!(&{})\", receiver_text)).add_to(acc);\n-    postfix_snippet(\"call\", \"function(expr)\", &format!(\"${{1}}({})\", receiver_text)).add_to(acc);\n+    postfix_snippet(\"box\", \"Box::new(expr)\", &format!(\"Box::new({receiver_text})\")).add_to(acc);\n+    postfix_snippet(\"dbg\", \"dbg!(expr)\", &format!(\"dbg!({receiver_text})\")).add_to(acc); // fixme\n+    postfix_snippet(\"dbgr\", \"dbg!(&expr)\", &format!(\"dbg!(&{receiver_text})\")).add_to(acc);\n+    postfix_snippet(\"call\", \"function(expr)\", &format!(\"${{1}}({receiver_text})\")).add_to(acc);\n \n     if let Some(parent) = dot_receiver.syntax().parent().and_then(|p| p.parent()) {\n         if matches!(parent.kind(), STMT_LIST | EXPR_STMT) {\n-            postfix_snippet(\"let\", \"let\", &format!(\"let $0 = {};\", receiver_text)).add_to(acc);\n-            postfix_snippet(\"letm\", \"let mut\", &format!(\"let mut $0 = {};\", receiver_text))\n+            postfix_snippet(\"let\", \"let\", &format!(\"let $0 = {receiver_text};\")).add_to(acc);\n+            postfix_snippet(\"letm\", \"let mut\", &format!(\"let mut $0 = {receiver_text};\"))\n                 .add_to(acc);\n         }\n     }\n@@ -300,7 +296,7 @@ fn add_custom_postfix_completions(\n             let body = snippet.postfix_snippet(receiver_text);\n             let mut builder =\n                 postfix_snippet(trigger, snippet.description.as_deref().unwrap_or_default(), &body);\n-            builder.documentation(Documentation::new(format!(\"```rust\\n{}\\n```\", body)));\n+            builder.documentation(Documentation::new(format!(\"```rust\\n{body}\\n```\")));\n             for import in imports.into_iter() {\n                 builder.add_import(import);\n             }"}, {"sha": "d64d6379a9cde2de636f4677e08f7bae2157f312", "filename": "crates/ide-completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -54,7 +54,7 @@ pub(crate) fn add_format_like_completions(\n     if let Ok((out, exprs)) = parse_format_exprs(receiver_text.text()) {\n         let exprs = with_placeholders(exprs);\n         for (label, macro_name) in KINDS {\n-            let snippet = format!(r#\"{}({}, {})\"#, macro_name, out, exprs.join(\", \"));\n+            let snippet = format!(r#\"{macro_name}({out}, {})\"#, exprs.join(\", \"));\n \n             postfix_snippet(label, macro_name, &snippet).add_to(acc);\n         }\n@@ -81,7 +81,7 @@ mod tests {\n         for (kind, input, output) in test_vector {\n             let (parsed_string, exprs) = parse_format_exprs(input).unwrap();\n             let exprs = with_placeholders(exprs);\n-            let snippet = format!(r#\"{}(\"{}\", {})\"#, kind, parsed_string, exprs.join(\", \"));\n+            let snippet = format!(r#\"{kind}(\"{parsed_string}\", {})\"#, exprs.join(\", \"));\n             assert_eq!(&snippet, output);\n         }\n     }"}, {"sha": "da1f0542d286ff25254e0ba77c5978dca0664d5e", "filename": "crates/ide-completion/src/completions/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -141,7 +141,7 @@ fn add_custom_completions(\n             };\n             let body = snip.snippet();\n             let mut builder = snippet(ctx, cap, trigger, &body);\n-            builder.documentation(Documentation::new(format!(\"```rust\\n{}\\n```\", body)));\n+            builder.documentation(Documentation::new(format!(\"```rust\\n{body}\\n```\")));\n             for import in imports.into_iter() {\n                 builder.add_import(import);\n             }"}, {"sha": "a654a5db57445e78822bcda000f4f5156cfb677a", "filename": "crates/ide-completion/src/context/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcontext%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fcontext%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -19,7 +19,7 @@ fn check_expected_type_and_name(ra_fixture: &str, expect: Expect) {\n     let name =\n         completion_context.expected_name.map_or_else(|| \"?\".to_owned(), |name| name.to_string());\n \n-    expect.assert_eq(&format!(\"ty: {}, name: {}\", ty, name));\n+    expect.assert_eq(&format!(\"ty: {ty}, name: {name}\"));\n }\n \n #[test]"}, {"sha": "657eab5b1b83036270479f3f6d37f1aa1151d327", "filename": "crates/ide-completion/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fitem.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -453,10 +453,10 @@ impl Builder {\n             // snippets can have multiple imports, but normal completions only have up to one\n             if let Some(original_path) = import_edit.original_path.as_ref() {\n                 lookup = lookup.or_else(|| Some(label.clone()));\n-                label = SmolStr::from(format!(\"{} (use {})\", label, original_path));\n+                label = SmolStr::from(format!(\"{label} (use {original_path})\"));\n             }\n         } else if let Some(trait_name) = self.trait_name {\n-            label = SmolStr::from(format!(\"{} (as {})\", label, trait_name));\n+            label = SmolStr::from(format!(\"{label} (as {trait_name})\"));\n         }\n \n         let text_edit = match self.text_edit {"}, {"sha": "e48d1aecd04fa621cb881a2fbe91c5065fd659a8", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -144,8 +144,7 @@ pub(crate) fn render_field(\n }\n \n fn field_with_receiver(receiver: Option<&hir::Name>, field_name: &str) -> SmolStr {\n-    receiver\n-        .map_or_else(|| field_name.into(), |receiver| format!(\"{}.{}\", receiver, field_name).into())\n+    receiver.map_or_else(|| field_name.into(), |receiver| format!(\"{receiver}.{field_name}\").into())\n }\n \n pub(crate) fn render_tuple_field(\n@@ -306,7 +305,7 @@ fn render_resolution_path(\n                 item.lookup_by(name.clone())\n                     .label(SmolStr::from_iter([&name, \"<\u2026>\"]))\n                     .trigger_call_info()\n-                    .insert_snippet(cap, format!(\"{}<$0>\", local_name));\n+                    .insert_snippet(cap, format!(\"{local_name}<$0>\"));\n             }\n         }\n     }\n@@ -528,13 +527,13 @@ mod tests {\n \n                 let tag = it.kind().tag();\n                 let relevance = display_relevance(it.relevance());\n-                items.push(format!(\"{} {} {}\\n\", tag, it.label(), relevance));\n+                items.push(format!(\"{tag} {} {relevance}\\n\", it.label()));\n \n                 if let Some((mutability, _offset, relevance)) = it.ref_match() {\n                     let label = format!(\"&{}{}\", mutability.as_keyword_for_ref(), it.label());\n                     let relevance = display_relevance(relevance);\n \n-                    items.push(format!(\"{} {} {}\\n\", tag, label, relevance));\n+                    items.push(format!(\"{tag} {label} {relevance}\\n\"));\n                 }\n \n                 items\n@@ -563,7 +562,7 @@ mod tests {\n             .filter_map(|(cond, desc)| if cond { Some(desc) } else { None })\n             .join(\"+\");\n \n-            format!(\"[{}]\", relevance_factors)\n+            format!(\"[{relevance_factors}]\")\n         }\n     }\n "}, {"sha": "197592e78ce266f7b21fbff15b9f088768bfc039", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -53,7 +53,7 @@ fn render(\n     let (call, escaped_call) = match &func_kind {\n         FuncKind::Method(_, Some(receiver)) => (\n             format!(\"{}.{}\", receiver.unescaped(), name.unescaped()).into(),\n-            format!(\"{}.{}\", receiver, name).into(),\n+            format!(\"{receiver}.{name}\").into(),\n         ),\n         _ => (name.unescaped().to_smol_str(), name.to_smol_str()),\n     };\n@@ -162,7 +162,7 @@ pub(super) fn add_call_parens<'b>(\n     cov_mark::hit!(inserts_parens_for_function_calls);\n \n     let (snippet, label_suffix) = if self_param.is_none() && params.is_empty() {\n-        (format!(\"{}()$0\", escaped_name), \"()\")\n+        (format!(\"{escaped_name}()$0\"), \"()\")\n     } else {\n         builder.trigger_call_info();\n         let snippet = if let Some(CallableSnippets::FillArguments) = ctx.config.callable {\n@@ -174,7 +174,7 @@ pub(super) fn add_call_parens<'b>(\n                             let smol_str = n.to_smol_str();\n                             let text = smol_str.as_str().trim_start_matches('_');\n                             let ref_ = ref_of_param(ctx, text, param.ty());\n-                            f(&format_args!(\"${{{}:{}{}}}\", index + offset, ref_, text))\n+                            f(&format_args!(\"${{{}:{ref_}{text}}}\", index + offset))\n                         }\n                         None => {\n                             let name = match param.ty().as_adt() {\n@@ -185,7 +185,7 @@ pub(super) fn add_call_parens<'b>(\n                                     .map(|s| to_lower_snake_case(s.as_str()))\n                                     .unwrap_or_else(|| \"_\".to_string()),\n                             };\n-                            f(&format_args!(\"${{{}:{}}}\", index + offset, name))\n+                            f(&format_args!(\"${{{}:{name}}}\", index + offset))\n                         }\n                     }\n                 });\n@@ -200,12 +200,12 @@ pub(super) fn add_call_parens<'b>(\n                     )\n                 }\n                 None => {\n-                    format!(\"{}({})$0\", escaped_name, function_params_snippet)\n+                    format!(\"{escaped_name}({function_params_snippet})$0\")\n                 }\n             }\n         } else {\n             cov_mark::hit!(suppress_arg_snippets);\n-            format!(\"{}($0)\", escaped_name)\n+            format!(\"{escaped_name}($0)\")\n         };\n \n         (snippet, \"(\u2026)\")"}, {"sha": "ffcad1185aa41d98f0aa08bbb178d6338744c2f1", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -66,7 +66,7 @@ fn render(\n \n     match ctx.snippet_cap() {\n         Some(cap) if needs_bang && !has_call_parens => {\n-            let snippet = format!(\"{}!{}$0{}\", escaped_name, bra, ket);\n+            let snippet = format!(\"{escaped_name}!{bra}$0{ket}\");\n             let lookup = banged_name(&name);\n             item.insert_snippet(cap, snippet).lookup_by(lookup);\n         }"}, {"sha": "5995da68a1650b40c7372105a4e35ecfddc560f9", "filename": "crates/ide-completion/src/render/variant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -35,8 +35,8 @@ pub(crate) fn render_record_lit(\n     });\n \n     RenderedLiteral {\n-        literal: format!(\"{} {{ {} }}\", path, completions),\n-        detail: format!(\"{} {{ {} }}\", path, types),\n+        literal: format!(\"{path} {{ {completions} }}\"),\n+        detail: format!(\"{path} {{ {types} }}\"),\n     }\n }\n \n@@ -49,7 +49,7 @@ pub(crate) fn render_tuple_lit(\n     path: &str,\n ) -> RenderedLiteral {\n     if snippet_cap.is_none() {\n-        return RenderedLiteral { literal: format!(\"{}\", path), detail: format!(\"{}\", path) };\n+        return RenderedLiteral { literal: format!(\"{path}\"), detail: format!(\"{path}\") };\n     }\n     let completions = fields.iter().enumerate().format_with(\", \", |(idx, _), f| {\n         if snippet_cap.is_some() {\n@@ -62,8 +62,8 @@ pub(crate) fn render_tuple_lit(\n     let types = fields.iter().format_with(\", \", |field, f| f(&field.ty(db).display(db)));\n \n     RenderedLiteral {\n-        literal: format!(\"{}({})\", path, completions),\n-        detail: format!(\"{}({})\", path, types),\n+        literal: format!(\"{path}({completions})\"),\n+        detail: format!(\"{path}({types})\"),\n     }\n }\n "}, {"sha": "343719c53694e50992ecad8019300be2d666ee15", "filename": "crates/ide-completion/src/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fsnippet.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -199,7 +199,7 @@ fn validate_snippet(\n ) -> Option<(Box<[GreenNode]>, String, Option<Box<str>>)> {\n     let mut imports = Vec::with_capacity(requires.len());\n     for path in requires.iter() {\n-        let use_path = ast::SourceFile::parse(&format!(\"use {};\", path))\n+        let use_path = ast::SourceFile::parse(&format!(\"use {path};\"))\n             .syntax_node()\n             .descendants()\n             .find_map(ast::Path::cast)?;"}, {"sha": "d206377e177a20dc10e23bc02085e5c8010fc5a0", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -153,7 +153,7 @@ fn render_completion_list(completions: Vec<CompletionItem>) -> String {\n         .into_iter()\n         .map(|it| {\n             let tag = it.kind().tag();\n-            let var_name = format!(\"{} {}\", tag, it.label());\n+            let var_name = format!(\"{tag} {}\", it.label());\n             let mut buf = var_name;\n             if let Some(detail) = it.detail() {\n                 let width = label_width.saturating_sub(monospace_width(it.label()));\n@@ -188,7 +188,7 @@ pub(crate) fn check_edit_with_config(\n         .iter()\n         .filter(|it| it.lookup() == what)\n         .collect_tuple()\n-        .unwrap_or_else(|| panic!(\"can't find {:?} completion in {:#?}\", what, completions));\n+        .unwrap_or_else(|| panic!(\"can't find {what:?} completion in {completions:#?}\"));\n     let mut actual = db.file_text(position.file_id).to_string();\n \n     let mut combined_edit = completion.text_edit().to_owned();"}, {"sha": "043f552bd8a4c90aae46b08b53017aa3dcb6340c", "filename": "crates/ide-completion/src/tests/expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -4,7 +4,7 @@ use expect_test::{expect, Expect};\n use crate::tests::{check_edit, completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(&format!(\"{}{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n+    let actual = completion_list(&format!(\"{BASE_ITEMS_FIXTURE}{ra_fixture}\"));\n     expect.assert_eq(&actual)\n }\n "}, {"sha": "3ef2a7c942bce4fd3e57bc0e374039943c2743c3", "filename": "crates/ide-completion/src/tests/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -7,7 +7,7 @@ use expect_test::{expect, Expect};\n use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(&format!(\"{}{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n+    let actual = completion_list(&format!(\"{BASE_ITEMS_FIXTURE}{ra_fixture}\"));\n     expect.assert_eq(&actual)\n }\n "}, {"sha": "b62b988885d08fd9274e53ca28501f941d9218a5", "filename": "crates/ide-completion/src/tests/item_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -4,7 +4,7 @@ use expect_test::{expect, Expect};\n use crate::tests::{check_edit, completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(&format!(\"{}{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n+    let actual = completion_list(&format!(\"{BASE_ITEMS_FIXTURE}{ra_fixture}\"));\n     expect.assert_eq(&actual)\n }\n "}, {"sha": "ad9254e7f2ecfd6ff45f00f989d905cc79b9c061", "filename": "crates/ide-completion/src/tests/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -9,7 +9,7 @@ fn check_empty(ra_fixture: &str, expect: Expect) {\n }\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(&format!(\"{}\\n{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n+    let actual = completion_list(&format!(\"{BASE_ITEMS_FIXTURE}\\n{ra_fixture}\"));\n     expect.assert_eq(&actual)\n }\n "}, {"sha": "2656a4d545e662f8bbc93e9e4a4f1338936106cd", "filename": "crates/ide-completion/src/tests/predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -4,7 +4,7 @@ use expect_test::{expect, Expect};\n use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(&format!(\"{}\\n{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n+    let actual = completion_list(&format!(\"{BASE_ITEMS_FIXTURE}\\n{ra_fixture}\"));\n     expect.assert_eq(&actual)\n }\n "}, {"sha": "c3f4fb4d1817fc9f297687f39adafc2b341a7077", "filename": "crates/ide-completion/src/tests/type_pos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -4,7 +4,7 @@ use expect_test::{expect, Expect};\n use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(&format!(\"{}\\n{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n+    let actual = completion_list(&format!(\"{BASE_ITEMS_FIXTURE}\\n{ra_fixture}\"));\n     expect.assert_eq(&actual)\n }\n "}, {"sha": "8c6c1c44aa7063aefcd74c81f1e674098af9a92f", "filename": "crates/ide-db/src/assists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fassists.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -88,7 +88,7 @@ impl FromStr for AssistKind {\n             \"RefactorExtract\" => Ok(AssistKind::RefactorExtract),\n             \"RefactorInline\" => Ok(AssistKind::RefactorInline),\n             \"RefactorRewrite\" => Ok(AssistKind::RefactorRewrite),\n-            unknown => Err(format!(\"Unknown AssistKind: '{}'\", unknown)),\n+            unknown => Err(format!(\"Unknown AssistKind: '{unknown}'\")),\n         }\n     }\n }"}, {"sha": "994d48385a0f77366611ab12d44bc22e612875c5", "filename": "crates/ide-db/src/imports/import_assets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -367,7 +367,7 @@ fn import_for_item(\n     let expected_import_end = if item_as_assoc(db, original_item).is_some() {\n         unresolved_qualifier.to_string()\n     } else {\n-        format!(\"{}::{}\", unresolved_qualifier, item_name(db, original_item)?)\n+        format!(\"{unresolved_qualifier}::{}\", item_name(db, original_item)?)\n     };\n     if !import_path_string.contains(unresolved_first_segment)\n         || !import_path_string.ends_with(&expected_import_end)"}, {"sha": "b92e367f7e12abfc9834ee86009c122c0fdec8cf", "filename": "crates/ide-db/src/imports/insert_use/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -1014,7 +1014,7 @@ fn check_with_config(\n         .and_then(|it| ImportScope::find_insert_use_container(&it, sema))\n         .or_else(|| ImportScope::from(syntax))\n         .unwrap();\n-    let path = ast::SourceFile::parse(&format!(\"use {};\", path))\n+    let path = ast::SourceFile::parse(&format!(\"use {path};\"))\n         .tree()\n         .syntax()\n         .descendants()"}, {"sha": "cd4a7e1554cd7bff2dd0c7afdfc2d6f445f1452b", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -197,7 +197,7 @@ fn rename_mod(\n \n         // Module exists in a named file\n         if !is_mod_rs {\n-            let path = format!(\"{}.rs\", new_name);\n+            let path = format!(\"{new_name}.rs\");\n             let dst = AnchoredPathBuf { anchor, path };\n             source_change.push_file_system_edit(FileSystemEdit::MoveFile { src: anchor, dst })\n         }\n@@ -207,9 +207,7 @@ fn rename_mod(\n         //  - Module has submodules defined in separate files\n         let dir_paths = match (is_mod_rs, has_detached_child, module.name(sema.db)) {\n             // Go up one level since the anchor is inside the dir we're trying to rename\n-            (true, _, Some(mod_name)) => {\n-                Some((format!(\"../{}\", mod_name), format!(\"../{}\", new_name)))\n-            }\n+            (true, _, Some(mod_name)) => Some((format!(\"../{mod_name}\"), format!(\"../{new_name}\"))),\n             // The anchor is on the same level as target dir\n             (false, true, Some(mod_name)) => Some((mod_name.to_string(), new_name.to_string())),\n             _ => None,\n@@ -356,7 +354,7 @@ fn source_edit_from_name(edit: &mut TextEditBuilder, name: &ast::Name, new_name:\n \n             // FIXME: instead of splitting the shorthand, recursively trigger a rename of the\n             // other name https://github.com/rust-lang/rust-analyzer/issues/6547\n-            edit.insert(ident_pat.syntax().text_range().start(), format!(\"{}: \", new_name));\n+            edit.insert(ident_pat.syntax().text_range().start(), format!(\"{new_name}: \"));\n             return true;\n         }\n     }\n@@ -414,15 +412,15 @@ fn source_edit_from_name_ref(\n                 // Foo { field } -> Foo { new_name: field }\n                 //       ^ insert `new_name: `\n                 let offset = name_ref.syntax().text_range().start();\n-                edit.insert(offset, format!(\"{}: \", new_name));\n+                edit.insert(offset, format!(\"{new_name}: \"));\n                 return true;\n             }\n             (None, Some(_)) if matches!(def, Definition::Local(_)) => {\n                 cov_mark::hit!(test_rename_local_in_field_shorthand);\n                 // Foo { field } -> Foo { field: new_name }\n                 //            ^ insert `: new_name`\n                 let offset = name_ref.syntax().text_range().end();\n-                edit.insert(offset, format!(\": {}\", new_name));\n+                edit.insert(offset, format!(\": {new_name}\"));\n                 return true;\n             }\n             _ => (),"}, {"sha": "c054cc1597968d7bf9c171efe3b4ce688bf041f5", "filename": "crates/ide-db/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -206,7 +206,7 @@ pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n }\n \n pub fn crate_symbols(db: &RootDatabase, krate: Crate, query: Query) -> Vec<FileSymbol> {\n-    let _p = profile::span(\"crate_symbols\").detail(|| format!(\"{:?}\", query));\n+    let _p = profile::span(\"crate_symbols\").detail(|| format!(\"{query:?}\"));\n \n     let modules = krate.modules(db);\n     let indices: Vec<_> = modules"}, {"sha": "f5f03d70b0134373d083946c81fa1cdf467ae569", "filename": "crates/ide-db/src/syntax_helpers/format_string_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -205,7 +205,7 @@ mod tests {\n     fn check(input: &str, expect: &Expect) {\n         let (output, exprs) = parse_format_exprs(input).unwrap_or((\"-\".to_string(), vec![]));\n         let outcome_repr = if !exprs.is_empty() {\n-            format!(\"{}; {}\", output, with_placeholders(exprs).join(\", \"))\n+            format!(\"{output}; {}\", with_placeholders(exprs).join(\", \"))\n         } else {\n             output\n         };"}, {"sha": "c7d5f3613d4bcfabef19ec74533575d35aad8fdf", "filename": "crates/ide-db/src/tests/sourcegen_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Ftests%2Fsourcegen_lints.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -241,9 +241,9 @@ fn generate_descriptor_clippy(buf: &mut String, path: &Path) {\n \n     buf.push_str(r#\"pub const CLIPPY_LINT_GROUPS: &[LintGroup] = &[\"#);\n     for (id, children) in clippy_groups {\n-        let children = children.iter().map(|id| format!(\"clippy::{}\", id)).collect::<Vec<_>>();\n+        let children = children.iter().map(|id| format!(\"clippy::{id}\")).collect::<Vec<_>>();\n         if !children.is_empty() {\n-            let lint_ident = format!(\"clippy::{}\", id);\n+            let lint_ident = format!(\"clippy::{id}\");\n             let description = format!(\"lint group for: {}\", children.iter().join(\", \"));\n             push_lint_group(buf, &lint_ident, &description, &children);\n         }\n@@ -273,7 +273,7 @@ fn push_lint_group(buf: &mut String, label: &str, description: &str, children: &\n \n     push_lint_completion(buf, label, description);\n \n-    let children = format!(\"&[{}]\", children.iter().map(|it| format!(\"\\\"{}\\\"\", it)).join(\", \"));\n+    let children = format!(\"&[{}]\", children.iter().map(|it| format!(\"\\\"{it}\\\"\")).join(\", \"));\n     format_to!(\n         buf,\n         r###\""}, {"sha": "c5db8c3741b814c3ca252c84440e7b89e80289a8", "filename": "crates/ide-diagnostics/src/handlers/mismatched_arg_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn mismatched_arg_count(\n     d: &hir::MismatchedArgCount,\n ) -> Diagnostic {\n     let s = if d.expected == 1 { \"\" } else { \"s\" };\n-    let message = format!(\"expected {} argument{}, found {}\", d.expected, s, d.found);\n+    let message = format!(\"expected {} argument{s}, found {}\", d.expected, d.found);\n     Diagnostic::new(\"mismatched-arg-count\", message, invalid_args_range(ctx, d))\n }\n "}, {"sha": "8673524c109da5cabe61bbdee1d52d08a06bda65", "filename": "crates/ide-diagnostics/src/handlers/no_such_field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -78,13 +78,13 @@ fn missing_record_expr_field_fixes(\n \n     let mut new_field = new_field.to_string();\n     if usage_file_id != def_file_id {\n-        new_field = format!(\"pub(crate) {}\", new_field);\n+        new_field = format!(\"pub(crate) {new_field}\");\n     }\n-    new_field = format!(\"\\n{}{}\", indent, new_field);\n+    new_field = format!(\"\\n{indent}{new_field}\");\n \n     let needs_comma = !last_field_syntax.to_string().ends_with(',');\n     if needs_comma {\n-        new_field = format!(\",{}\", new_field);\n+        new_field = format!(\",{new_field}\");\n     }\n \n     let source_change = SourceChange::from_text_edit("}, {"sha": "2adae165e4d253dd6b0fdc2cf7d6472e5ffe0b83", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -106,11 +106,11 @@ fn add_missing_ok_or_some(\n     }\n \n     let mut builder = TextEdit::builder();\n-    builder.insert(expr.syntax().text_range().start(), format!(\"{}(\", variant_name));\n+    builder.insert(expr.syntax().text_range().start(), format!(\"{variant_name}(\"));\n     builder.insert(expr.syntax().text_range().end(), \")\".to_string());\n     let source_change =\n         SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), builder.finish());\n-    let name = format!(\"Wrap in {}\", variant_name);\n+    let name = format!(\"Wrap in {variant_name}\");\n     acc.push(fix(\"wrap_in_constructor\", &name, source_change, expr_range));\n     Some(())\n }"}, {"sha": "be70f0ac4f797b8d8751e4c9d916e79a2d2b3003", "filename": "crates/ide-diagnostics/src/handlers/unlinked_file.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -64,7 +64,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, file_id: FileId) -> Option<Vec<Assist>> {\n         // `submod/bla.rs` -> `submod.rs`\n         let parent_mod = (|| {\n             let (name, _) = parent.name_and_extension()?;\n-            parent.parent()?.join(&format!(\"{}.rs\", name))\n+            parent.parent()?.join(&format!(\"{name}.rs\"))\n         })();\n         paths.extend(parent_mod);\n         paths\n@@ -99,8 +99,8 @@ fn make_fixes(\n         matches!(item, ast::Item::Module(m) if m.item_list().is_none())\n     }\n \n-    let mod_decl = format!(\"mod {};\", new_mod_name);\n-    let pub_mod_decl = format!(\"pub mod {};\", new_mod_name);\n+    let mod_decl = format!(\"mod {new_mod_name};\");\n+    let pub_mod_decl = format!(\"pub mod {new_mod_name};\");\n \n     let ast: ast::SourceFile = db.parse(parent_file_id).tree();\n \n@@ -125,24 +125,24 @@ fn make_fixes(\n         Some(last) => {\n             cov_mark::hit!(unlinked_file_append_to_existing_mods);\n             let offset = last.syntax().text_range().end();\n-            mod_decl_builder.insert(offset, format!(\"\\n{}\", mod_decl));\n-            pub_mod_decl_builder.insert(offset, format!(\"\\n{}\", pub_mod_decl));\n+            mod_decl_builder.insert(offset, format!(\"\\n{mod_decl}\"));\n+            pub_mod_decl_builder.insert(offset, format!(\"\\n{pub_mod_decl}\"));\n         }\n         None => {\n             // Prepend before the first item in the file.\n             match ast.items().next() {\n                 Some(item) => {\n                     cov_mark::hit!(unlinked_file_prepend_before_first_item);\n                     let offset = item.syntax().text_range().start();\n-                    mod_decl_builder.insert(offset, format!(\"{}\\n\\n\", mod_decl));\n-                    pub_mod_decl_builder.insert(offset, format!(\"{}\\n\\n\", pub_mod_decl));\n+                    mod_decl_builder.insert(offset, format!(\"{mod_decl}\\n\\n\"));\n+                    pub_mod_decl_builder.insert(offset, format!(\"{pub_mod_decl}\\n\\n\"));\n                 }\n                 None => {\n                     // No items in the file, so just append at the end.\n                     cov_mark::hit!(unlinked_file_empty_file);\n                     let offset = ast.syntax().text_range().end();\n-                    mod_decl_builder.insert(offset, format!(\"{}\\n\", mod_decl));\n-                    pub_mod_decl_builder.insert(offset, format!(\"{}\\n\", pub_mod_decl));\n+                    mod_decl_builder.insert(offset, format!(\"{mod_decl}\\n\"));\n+                    pub_mod_decl_builder.insert(offset, format!(\"{pub_mod_decl}\\n\"));\n                 }\n             }\n         }\n@@ -152,13 +152,13 @@ fn make_fixes(\n     Some(vec![\n         fix(\n             \"add_mod_declaration\",\n-            &format!(\"Insert `{}`\", mod_decl),\n+            &format!(\"Insert `{mod_decl}`\"),\n             SourceChange::from_text_edit(parent_file_id, mod_decl_builder.finish()),\n             trigger_range,\n         ),\n         fix(\n             \"add_pub_mod_declaration\",\n-            &format!(\"Insert `{}`\", pub_mod_decl),\n+            &format!(\"Insert `{pub_mod_decl}`\"),\n             SourceChange::from_text_edit(parent_file_id, pub_mod_decl_builder.finish()),\n             trigger_range,\n         ),"}, {"sha": "1a5efff2c0c60ecbfd00cb68d58b179d8f71e1b2", "filename": "crates/ide-diagnostics/src/handlers/unresolved_macro_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn unresolved_macro_call(\n     let bang = if d.is_bang { \"!\" } else { \"\" };\n     Diagnostic::new(\n         \"unresolved-macro-call\",\n-        format!(\"unresolved macro `{}{}`\", d.path, bang),\n+        format!(\"unresolved macro `{}{bang}`\", d.path),\n         display_range,\n     )\n     .experimental()"}, {"sha": "91395f1d841adfc9021540283aea6e83b12d1fb5", "filename": "crates/ide-diagnostics/src/handlers/unresolved_module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -16,7 +16,7 @@ pub(crate) fn unresolved_module(\n         \"unresolved-module\",\n         match &*d.candidates {\n             [] => \"unresolved module\".to_string(),\n-            [candidate] => format!(\"unresolved module, can't find module file: {}\", candidate),\n+            [candidate] => format!(\"unresolved module, can't find module file: {candidate}\"),\n             [candidates @ .., last] => {\n                 format!(\n                     \"unresolved module, can't find module file: {}, or {}\","}, {"sha": "b2ed19104e27854fa1523ad1f0c72ce949621ce2", "filename": "crates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -26,7 +26,7 @@ pub(crate) fn unresolved_proc_macro(\n     };\n \n     let message = match &d.macro_name {\n-        Some(name) => format!(\"proc macro `{}` not expanded\", name),\n+        Some(name) => format!(\"proc macro `{name}` not expanded\"),\n         None => \"proc macro not expanded\".to_string(),\n     };\n     let severity = if config_enabled { Severity::Error } else { Severity::WeakWarning };"}, {"sha": "b244666d1c0e875cd88a80490f0290826182af78", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -218,7 +218,7 @@ pub fn diagnostics(\n     // [#34344] Only take first 128 errors to prevent slowing down editor/ide, the number 128 is chosen arbitrarily.\n     res.extend(\n         parse.errors().iter().take(128).map(|err| {\n-            Diagnostic::new(\"syntax-error\", format!(\"Syntax Error: {}\", err), err.range())\n+            Diagnostic::new(\"syntax-error\", format!(\"Syntax Error: {err}\"), err.range())\n         }),\n     );\n "}, {"sha": "afa641c733ebb20147f3d0b535f2dced5fd2a7e9", "filename": "crates/ide-diagnostics/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -75,7 +75,7 @@ pub(crate) fn check_no_fix(ra_fixture: &str) {\n     )\n     .pop()\n     .unwrap();\n-    assert!(diagnostic.fixes.is_none(), \"got a fix when none was expected: {:?}\", diagnostic);\n+    assert!(diagnostic.fixes.is_none(), \"got a fix when none was expected: {diagnostic:?}\");\n }\n \n pub(crate) fn check_expect(ra_fixture: &str, expect: Expect) {"}, {"sha": "71d27e6d217df0eaf47f820a8c40d395a5499d9a", "filename": "crates/ide-diagnostics/src/tests/sourcegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -39,7 +39,7 @@ impl Diagnostic {\n             for block in comment_blocks {\n                 let id = block.id;\n                 if let Err(msg) = is_valid_diagnostic_name(&id) {\n-                    panic!(\"invalid diagnostic name: {:?}:\\n  {}\", id, msg)\n+                    panic!(\"invalid diagnostic name: {id:?}:\\n  {msg}\")\n                 }\n                 let doc = block.contents.join(\"\\n\");\n                 let location = sourcegen::Location { file: path.clone(), line: block.line };"}, {"sha": "d78d009681a6039a49033e3d5b46840f658ba54a", "filename": "crates/ide-ssr/src/parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2Fsrc%2Fparsing.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -352,7 +352,7 @@ impl NodeKind {\n impl Placeholder {\n     fn new(name: SmolStr, constraints: Vec<Constraint>) -> Self {\n         Self {\n-            stand_in_name: format!(\"__placeholder_{}\", name),\n+            stand_in_name: format!(\"__placeholder_{name}\"),\n             constraints,\n             ident: Var(name.to_string()),\n         }"}, {"sha": "61698fca80fee7874ecc070d26a7e0093f6947f4", "filename": "crates/ide-ssr/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide-ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2Fsrc%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -121,7 +121,7 @@ fn print_match_debug_info(match_finder: &MatchFinder<'_>, file_id: FileId, snipp\n         snippet\n     );\n     for (index, d) in debug_info.iter().enumerate() {\n-        println!(\"Node #{}\\n{:#?}\\n\", index, d);\n+        println!(\"Node #{index}\\n{d:#?}\\n\");\n     }\n }\n \n@@ -144,7 +144,7 @@ fn assert_no_match(pattern: &str, code: &str) {\n     let matches = match_finder.matches().flattened().matches;\n     if !matches.is_empty() {\n         print_match_debug_info(&match_finder, position.file_id, &matches[0].matched_text());\n-        panic!(\"Got {} matches when we expected none: {:#?}\", matches.len(), matches);\n+        panic!(\"Got {} matches when we expected none: {matches:#?}\", matches.len());\n     }\n }\n "}, {"sha": "8569701346d45c54d40e99d6d8fcf2208d859f6e", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -453,7 +453,7 @@ fn get_doc_base_url(db: &RootDatabase, def: Definition) -> Option<Url> {\n             })?\n         }\n     };\n-    Url::parse(&base).ok()?.join(&format!(\"{}/\", display_name)).ok()\n+    Url::parse(&base).ok()?.join(&format!(\"{display_name}/\")).ok()\n }\n \n /// Get the filename and extension generated for a symbol by rustdoc.\n@@ -488,7 +488,7 @@ fn filename_and_frag_for_def(\n                 Some(kw) => {\n                     format!(\"keyword.{}.html\", kw.trim_matches('\"'))\n                 }\n-                None => format!(\"{}/index.html\", name),\n+                None => format!(\"{name}/index.html\"),\n             },\n             None => String::from(\"index.html\"),\n         },"}, {"sha": "13088bdc3b30f71c88875d536d4055b3e29de297", "filename": "crates/ide/src/doc_links/intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fdoc_links%2Fintra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fdoc_links%2Fintra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links%2Fintra_doc_links.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -63,8 +63,8 @@ mod tests {\n \n     fn check(link: &str, expected: Expect) {\n         let (l, a) = parse_intra_doc_link(link);\n-        let a = a.map_or_else(String::new, |a| format!(\" ({:?})\", a));\n-        expected.assert_eq(&format!(\"{}{}\", l, a));\n+        let a = a.map_or_else(String::new, |a| format!(\" ({a:?})\"));\n+        expected.assert_eq(&format!(\"{l}{a}\"));\n     }\n \n     #[test]"}, {"sha": "104181a33e68dea356f6e1248b12ed621c8f4200", "filename": "crates/ide/src/doc_links/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -40,7 +40,7 @@ fn check_doc_links(ra_fixture: &str) {\n         .into_iter()\n         .map(|(_, link, ns)| {\n             let def = resolve_doc_path_for_def(sema.db, cursor_def, &link, ns)\n-                .unwrap_or_else(|| panic!(\"Failed to resolve {}\", link));\n+                .unwrap_or_else(|| panic!(\"Failed to resolve {link}\"));\n             let nav_target = def.try_to_nav(sema.db).unwrap();\n             let range =\n                 FileRange { file_id: nav_target.file_id, range: nav_target.focus_or_full_range() };"}, {"sha": "73fd518a9ef08867ef5196cf446f291cd29b9e27", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -187,7 +187,7 @@ mod tests {\n         let (analysis, position) = fixture::position(ra_fixture);\n         let navs = analysis.goto_definition(position).unwrap().expect(\"no definition found\").info;\n \n-        assert!(navs.is_empty(), \"didn't expect this to resolve anywhere: {:?}\", navs)\n+        assert!(navs.is_empty(), \"didn't expect this to resolve anywhere: {navs:?}\")\n     }\n \n     #[test]"}, {"sha": "bfb19a40bdecdb1d9767c596d3f2dbe5bf7f14e7", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -163,7 +163,7 @@ pub(crate) fn hover(\n                 .filter_map(|(def, node)| hover_for_definition(sema, file_id, def, &node, config))\n                 .reduce(|mut acc: HoverResult, HoverResult { markup, actions }| {\n                     acc.actions.extend(actions);\n-                    acc.markup = Markup::from(format!(\"{}\\n---\\n{}\", acc.markup, markup));\n+                    acc.markup = Markup::from(format!(\"{}\\n---\\n{markup}\", acc.markup));\n                     acc\n                 })\n         })"}, {"sha": "4015a411c5888ad5f768de22e796e228f74b4dbc", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -417,8 +417,8 @@ pub(super) fn definition(\n         Definition::Variant(it) => label_value_and_docs(db, it, |&it| {\n             if !it.parent_enum(db).is_data_carrying(db) {\n                 match it.eval(db) {\n-                    Ok(x) => Some(format!(\"{}\", x)),\n-                    Err(_) => it.value(db).map(|x| format!(\"{:?}\", x)),\n+                    Ok(x) => Some(format!(\"{x}\")),\n+                    Err(_) => it.value(db).map(|x| format!(\"{x:?}\")),\n                 }\n             } else {\n                 None\n@@ -427,7 +427,7 @@ pub(super) fn definition(\n         Definition::Const(it) => label_value_and_docs(db, it, |it| {\n             let body = it.eval(db);\n             match body {\n-                Ok(x) => Some(format!(\"{}\", x)),\n+                Ok(x) => Some(format!(\"{x}\")),\n                 Err(_) => {\n                     let source = it.source(db)?;\n                     let mut body = source.value.body()?.syntax().clone();\n@@ -483,7 +483,7 @@ pub(super) fn definition(\n \n fn render_builtin_attr(db: &RootDatabase, attr: hir::BuiltinAttr) -> Option<Markup> {\n     let name = attr.name(db);\n-    let desc = format!(\"#[{}]\", name);\n+    let desc = format!(\"#[{name}]\");\n \n     let AttributeTemplate { word, list, name_value_str } = match attr.template(db) {\n         Some(template) => template,\n@@ -522,7 +522,7 @@ where\n     V: Display,\n {\n     let label = if let Some(value) = value_extractor(&def) {\n-        format!(\"{} // {}\", def.display(db), value)\n+        format!(\"{} // {value}\", def.display(db))\n     } else {\n         def.display(db).to_string()\n     };\n@@ -541,7 +541,7 @@ where\n     V: Display,\n {\n     let label = if let Some(value) = value_extractor(&def) {\n-        format!(\"{} = {}\", def.display(db), value)\n+        format!(\"{} = {value}\", def.display(db))\n     } else {\n         def.display(db).to_string()\n     };\n@@ -605,9 +605,9 @@ fn local(db: &RootDatabase, it: hir::Local) -> Option<Markup> {\n             } else {\n                 \"\"\n             };\n-            format!(\"{}{}{}: {}\", let_kw, is_mut, name, ty)\n+            format!(\"{let_kw}{is_mut}{name}: {ty}\")\n         }\n-        Either::Right(_) => format!(\"{}self: {}\", is_mut, ty),\n+        Either::Right(_) => format!(\"{is_mut}self: {ty}\"),\n     };\n     markup(None, desc, None)\n }"}, {"sha": "c7f241f2fea6446a3872a86965b4975c347785e4", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -37,7 +37,7 @@ fn check(ra_fixture: &str, expect: Expect) {\n     let content = analysis.db.file_text(position.file_id);\n     let hovered_element = &content[hover.range];\n \n-    let actual = format!(\"*{}*\\n{}\\n\", hovered_element, hover.info.markup);\n+    let actual = format!(\"*{hovered_element}*\\n{}\\n\", hover.info.markup);\n     expect.assert_eq(&actual)\n }\n \n@@ -58,7 +58,7 @@ fn check_hover_no_links(ra_fixture: &str, expect: Expect) {\n     let content = analysis.db.file_text(position.file_id);\n     let hovered_element = &content[hover.range];\n \n-    let actual = format!(\"*{}*\\n{}\\n\", hovered_element, hover.info.markup);\n+    let actual = format!(\"*{hovered_element}*\\n{}\\n\", hover.info.markup);\n     expect.assert_eq(&actual)\n }\n \n@@ -79,7 +79,7 @@ fn check_hover_no_markdown(ra_fixture: &str, expect: Expect) {\n     let content = analysis.db.file_text(position.file_id);\n     let hovered_element = &content[hover.range];\n \n-    let actual = format!(\"*{}*\\n{}\\n\", hovered_element, hover.info.markup);\n+    let actual = format!(\"*{hovered_element}*\\n{}\\n\", hover.info.markup);\n     expect.assert_eq(&actual)\n }\n "}, {"sha": "9fabc6bc4f95784a3e32bfdc1a5011b6b3bfc9d3", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -468,7 +468,7 @@ mod tests {\n             .collect::<Vec<_>>();\n         expected.sort_by_key(|(range, _)| range.start());\n \n-        assert_eq!(expected, actual, \"\\nExpected:\\n{:#?}\\n\\nActual:\\n{:#?}\", expected, actual);\n+        assert_eq!(expected, actual, \"\\nExpected:\\n{expected:#?}\\n\\nActual:\\n{actual:#?}\");\n     }\n \n     #[track_caller]"}, {"sha": "7127c433c63d54f7c7bae1d693d1013ddb37bb57", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -160,7 +160,7 @@ fn is_named_constructor(\n     let ctor_name = match qual_seg.kind()? {\n         ast::PathSegmentKind::Name(name_ref) => {\n             match qual_seg.generic_arg_list().map(|it| it.generic_args()) {\n-                Some(generics) => format!(\"{}<{}>\", name_ref, generics.format(\", \")),\n+                Some(generics) => format!(\"{name_ref}<{}>\", generics.format(\", \")),\n                 None => name_ref.to_string(),\n             }\n         }\n@@ -473,7 +473,7 @@ fn main() {\n             .unwrap();\n         let actual =\n             inlay_hints.into_iter().map(|it| (it.range, it.label.to_string())).collect::<Vec<_>>();\n-        assert_eq!(expected, actual, \"\\nExpected:\\n{:#?}\\n\\nActual:\\n{:#?}\", expected, actual);\n+        assert_eq!(expected, actual, \"\\nExpected:\\n{expected:#?}\\n\\nActual:\\n{actual:#?}\");\n     }\n \n     #[test]"}, {"sha": "de9fef61a78eaca0381307c756777c014e811bdb", "filename": "crates/ide/src/markup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fmarkup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fmarkup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmarkup.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -33,6 +33,6 @@ impl Markup {\n         self.text.as_str()\n     }\n     pub fn fenced_block(contents: &impl fmt::Display) -> Markup {\n-        format!(\"```rust\\n{}\\n```\", contents).into()\n+        format!(\"```rust\\n{contents}\\n```\").into()\n     }\n }"}, {"sha": "af5e96d2381acaff2b4d0c83f1153370ac0a9034", "filename": "crates/ide/src/moniker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fmoniker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fmoniker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmoniker.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -273,7 +273,7 @@ mod tests {\n     fn no_moniker(ra_fixture: &str) {\n         let (analysis, position) = fixture::position(ra_fixture);\n         if let Some(x) = analysis.moniker(position).unwrap() {\n-            assert_eq!(x.info.len(), 0, \"Moniker founded but no moniker expected: {:?}\", x);\n+            assert_eq!(x.info.len(), 0, \"Moniker founded but no moniker expected: {x:?}\");\n         }\n     }\n "}, {"sha": "3aa799d43a8a3eedd835471b6abff526d733adb7", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -117,10 +117,10 @@ impl NavigationTarget {\n             self.full_range\n         );\n         if let Some(focus_range) = self.focus_range {\n-            buf.push_str(&format!(\" {:?}\", focus_range))\n+            buf.push_str(&format!(\" {focus_range:?}\"))\n         }\n         if let Some(container_name) = &self.container_name {\n-            buf.push_str(&format!(\" {}\", container_name))\n+            buf.push_str(&format!(\" {container_name}\"))\n         }\n         buf\n     }"}, {"sha": "595a3b8ac4f19691f3f4a9fd6b0a8ccdbf0e6bdd", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -345,7 +345,7 @@ mod tests {\n         let (analysis, position) = fixture::position(ra_fixture_before);\n         let rename_result = analysis\n             .rename(position, new_name)\n-            .unwrap_or_else(|err| panic!(\"Rename to '{}' was cancelled: {}\", new_name, err));\n+            .unwrap_or_else(|err| panic!(\"Rename to '{new_name}' was cancelled: {err}\"));\n         match rename_result {\n             Ok(source_change) => {\n                 let mut text_edit_builder = TextEdit::builder();\n@@ -371,7 +371,7 @@ mod tests {\n                         .collect::<String>();\n                     assert_eq!(error_message.trim(), err.to_string());\n                 } else {\n-                    panic!(\"Rename to '{}' failed unexpectedly: {}\", new_name, err)\n+                    panic!(\"Rename to '{new_name}' failed unexpectedly: {err}\")\n                 }\n             }\n         };\n@@ -397,11 +397,11 @@ mod tests {\n         let (analysis, position) = fixture::position(ra_fixture);\n         let result = analysis\n             .prepare_rename(position)\n-            .unwrap_or_else(|err| panic!(\"PrepareRename was cancelled: {}\", err));\n+            .unwrap_or_else(|err| panic!(\"PrepareRename was cancelled: {err}\"));\n         match result {\n             Ok(RangeInfo { range, info: () }) => {\n                 let source = analysis.file_text(position.file_id).unwrap();\n-                expect.assert_eq(&format!(\"{:?}: {}\", range, &source[range]))\n+                expect.assert_eq(&format!(\"{range:?}: {}\", &source[range]))\n             }\n             Err(RenameError(err)) => expect.assert_eq(&err),\n         };"}, {"sha": "5b35262aabe11b9b0c350f074e6ccd1b7607537f", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -66,12 +66,12 @@ impl Runnable {\n     // test package::module::testname\n     pub fn label(&self, target: Option<String>) -> String {\n         match &self.kind {\n-            RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),\n-            RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n-            RunnableKind::Bench { test_id } => format!(\"bench {}\", test_id),\n-            RunnableKind::DocTest { test_id, .. } => format!(\"doctest {}\", test_id),\n+            RunnableKind::Test { test_id, .. } => format!(\"test {test_id}\"),\n+            RunnableKind::TestMod { path } => format!(\"test-mod {path}\"),\n+            RunnableKind::Bench { test_id } => format!(\"bench {test_id}\"),\n+            RunnableKind::DocTest { test_id, .. } => format!(\"doctest {test_id}\"),\n             RunnableKind::Bin => {\n-                target.map_or_else(|| \"run binary\".to_string(), |t| format!(\"run {}\", t))\n+                target.map_or_else(|| \"run binary\".to_string(), |t| format!(\"run {t}\"))\n             }\n         }\n     }\n@@ -377,7 +377,7 @@ pub(crate) fn runnable_impl(\n     } else {\n         String::new()\n     };\n-    let mut test_id = format!(\"{}{}\", adt_name, params);\n+    let mut test_id = format!(\"{adt_name}{params}\");\n     test_id.retain(|c| c != ' ');\n     let test_id = TestId::Path(test_id);\n "}, {"sha": "b6a58f5ef59bc988ff2d66fc0fe6e2a5f9019067", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -233,13 +233,13 @@ mod tests {\n             for (range, _) in f.tokens {\n                 let x = FileRange { file_id: f.file_id, range };\n                 if !range_set.contains(&x) {\n-                    panic!(\"additional range {:?}\", x);\n+                    panic!(\"additional range {x:?}\");\n                 }\n                 range_set.remove(&x);\n             }\n         }\n         if !range_set.is_empty() {\n-            panic!(\"unfound ranges {:?}\", range_set);\n+            panic!(\"unfound ranges {range_set:?}\");\n         }\n     }\n \n@@ -254,13 +254,13 @@ mod tests {\n                     continue;\n                 }\n                 if !range_set.contains(&x) {\n-                    panic!(\"additional definition {:?}\", x);\n+                    panic!(\"additional definition {x:?}\");\n                 }\n                 range_set.remove(&x);\n             }\n         }\n         if !range_set.is_empty() {\n-            panic!(\"unfound definitions {:?}\", range_set);\n+            panic!(\"unfound definitions {range_set:?}\");\n         }\n     }\n "}, {"sha": "7ce782f93be14dda6d526c2bf71031536d220e29", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -52,8 +52,8 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n         let crate_graph = db.crate_graph();\n         for krate in crates {\n             let display_crate = |krate: CrateId| match &crate_graph[krate].display_name {\n-                Some(it) => format!(\"{}({:?})\", it, krate),\n-                None => format!(\"{:?}\", krate),\n+                Some(it) => format!(\"{it}({krate:?})\"),\n+                None => format!(\"{krate:?}\"),\n             };\n             format_to!(buf, \"Crate: {}\\n\", display_crate(krate));\n             let deps = crate_graph[krate]"}, {"sha": "2c7823069b3f8465875d14041238e177db1b6bea", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         let class = r.highlight.to_string().replace('.', \" \");\n         let color = match (rainbow, r.binding_hash) {\n             (true, Some(hash)) => {\n-                format!(\" data-binding-hash=\\\"{}\\\" style=\\\"color: {};\\\"\", hash, rainbowify(hash))\n+                format!(\" data-binding-hash=\\\"{hash}\\\" style=\\\"color: {};\\\"\", rainbowify(hash))\n             }\n             _ => \"\".into(),\n         };"}, {"sha": "bb6827e8a44e4678d78533e2e60ce3e78e8ef580", "filename": "crates/ide/src/syntax_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn syntax_tree(\n             }\n         };\n \n-        format!(\"{:#?}\", node)\n+        format!(\"{node:#?}\")\n     } else {\n         format!(\"{:#?}\", parse.tree().syntax())\n     }"}, {"sha": "eba5a485636e27ebacba6f93ff502caf3dd1a113", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -397,7 +397,7 @@ mod tests {\n \n     fn type_char(char_typed: char, ra_fixture_before: &str, ra_fixture_after: &str) {\n         let actual = do_type_char(char_typed, ra_fixture_before)\n-            .unwrap_or_else(|| panic!(\"typing `{}` did nothing\", char_typed));\n+            .unwrap_or_else(|| panic!(\"typing `{char_typed}` did nothing\"));\n \n         assert_eq_text!(ra_fixture_after, &actual);\n     }"}, {"sha": "298482f2ab5c4e4793df4a1d94016275a81bf4cd", "filename": "crates/ide/src/typing/on_enter.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -108,7 +108,7 @@ fn on_enter_in_comment(\n     }\n \n     let indent = node_indent(file, comment.syntax())?;\n-    let inserted = format!(\"\\n{}{} $0\", indent, prefix);\n+    let inserted = format!(\"\\n{indent}{prefix} $0\");\n     let delete = if remove_trailing_whitespace {\n         let trimmed_len = comment.text().trim_end().len() as u32;\n         let trailing_whitespace_len = comment.text().len() as u32 - trimmed_len;\n@@ -129,7 +129,7 @@ fn on_enter_in_block(block: ast::BlockExpr, position: FilePosition) -> Option<Te\n \n     let indent = IndentLevel::from_node(block.syntax());\n     let mut edit = TextEdit::insert(position.offset, format!(\"\\n{}$0\", indent + 1));\n-    edit.union(TextEdit::insert(contents.text_range().end(), format!(\"\\n{}\", indent))).ok()?;\n+    edit.union(TextEdit::insert(contents.text_range().end(), format!(\"\\n{indent}\"))).ok()?;\n     Some(edit)\n }\n \n@@ -140,11 +140,8 @@ fn on_enter_in_use_tree_list(list: ast::UseTreeList, position: FilePosition) ->\n \n     let indent = IndentLevel::from_node(list.syntax());\n     let mut edit = TextEdit::insert(position.offset, format!(\"\\n{}$0\", indent + 1));\n-    edit.union(TextEdit::insert(\n-        list.r_curly_token()?.text_range().start(),\n-        format!(\"\\n{}\", indent),\n-    ))\n-    .ok()?;\n+    edit.union(TextEdit::insert(list.r_curly_token()?.text_range().start(), format!(\"\\n{indent}\")))\n+        .ok()?;\n     Some(edit)\n }\n "}, {"sha": "6b2534aa4619df42f3125b622750942094191204", "filename": "crates/limit/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Flimit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Flimit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flimit%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -59,7 +59,7 @@ impl Limit {\n                     .compare_exchange_weak(old_max, other, Ordering::Relaxed, Ordering::Relaxed)\n                     .is_ok()\n                 {\n-                    eprintln!(\"new max: {}\", other);\n+                    eprintln!(\"new max: {other}\");\n                 }\n             }\n "}, {"sha": "1915c0b6611b7273829ce281d9ce2c892428aad0", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -101,7 +101,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, DeclarativeMacro>) -> Vec<(Stri\n                     }\n                     try_cnt += 1;\n                     if try_cnt > 100 {\n-                        panic!(\"invocaton fixture {} cannot be generated.\\n\", name);\n+                        panic!(\"invocaton fixture {name} cannot be generated.\\n\");\n                     }\n                 }\n             }\n@@ -139,7 +139,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, DeclarativeMacro>) -> Vec<(Stri\n                 }\n \n                 None => (),\n-                Some(kind) => panic!(\"Unhandled kind {:?}\", kind),\n+                Some(kind) => panic!(\"Unhandled kind {kind:?}\"),\n             },\n             Op::Leaf(leaf) => parent.token_trees.push(leaf.clone().into()),\n             Op::Repeat { tokens, kind, separator } => {"}, {"sha": "4ca3ba74ae34989dff73eab603b894f3516628d6", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -237,7 +237,7 @@ fn convert_tokens<C: TokenConverter>(conv: &mut C) -> tt::Subtree {\n             let char = match token.to_char(conv) {\n                 Some(c) => c,\n                 None => {\n-                    panic!(\"Token from lexer must be single char: token = {:#?}\", token);\n+                    panic!(\"Token from lexer must be single char: token = {token:#?}\");\n                 }\n             };\n             tt::Leaf::from(tt::Punct { char, spacing, id: conv.id_alloc().alloc(range, synth_id) })"}, {"sha": "606c259e5182dd184e672b4d297f374261cdaa48", "filename": "crates/mbe/src/syntax_bridge/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fmbe%2Fsrc%2Fsyntax_bridge%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fmbe%2Fsrc%2Fsyntax_bridge%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -19,7 +19,7 @@ fn check_punct_spacing(fixture: &str) {\n             let spacing = match annotation.as_str() {\n                 \"Alone\" => Spacing::Alone,\n                 \"Joint\" => Spacing::Joint,\n-                a => panic!(\"unknown annotation: {}\", a),\n+                a => panic!(\"unknown annotation: {a}\"),\n             };\n             (token, spacing)\n         })\n@@ -39,7 +39,7 @@ fn check_punct_spacing(fixture: &str) {\n         cursor = cursor.bump();\n     }\n \n-    assert!(annotations.is_empty(), \"unchecked annotations: {:?}\", annotations);\n+    assert!(annotations.is_empty(), \"unchecked annotations: {annotations:?}\");\n }\n \n #[test]"}, {"sha": "7013aa58b55dc295522d10d71604b9837b39a4a8", "filename": "crates/mbe/src/to_parser_input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -60,7 +60,7 @@ pub(crate) fn to_parser_input(buffer: &TokenBuffer<'_>) -> parser::Input {\n                     },\n                     tt::Leaf::Punct(punct) => {\n                         let kind = SyntaxKind::from_char(punct.char)\n-                            .unwrap_or_else(|| panic!(\"{:#?} is not a valid punct\", punct));\n+                            .unwrap_or_else(|| panic!(\"{punct:#?} is not a valid punct\"));\n                         res.push(kind);\n                         if punct.spacing == tt::Spacing::Joint {\n                             res.was_joint();"}, {"sha": "30bd0b3b169ee925270fd5121f0d4cf9ce0785b6", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -205,7 +205,7 @@ impl<'t> Parser<'t> {\n         if self.eat(kind) {\n             return true;\n         }\n-        self.error(format!(\"expected {:?}\", kind));\n+        self.error(format!(\"expected {kind:?}\"));\n         false\n     }\n "}, {"sha": "caf1a3e83cb934075bcd23006934423ae4fc9b0d", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -37,8 +37,8 @@ fn lex(text: &str) -> String {\n         let text = lexed.text(i);\n         let error = lexed.error(i);\n \n-        let error = error.map(|err| format!(\" error: {}\", err)).unwrap_or_default();\n-        writeln!(res, \"{:?} {:?}{}\", kind, text, error).unwrap();\n+        let error = error.map(|err| format!(\" error: {err}\")).unwrap_or_default();\n+        writeln!(res, \"{kind:?} {text:?}{error}\").unwrap();\n     }\n     res\n }\n@@ -47,7 +47,7 @@ fn lex(text: &str) -> String {\n fn parse_ok() {\n     for case in TestCase::list(\"parser/ok\") {\n         let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n-        assert!(!errors, \"errors in an OK file {}:\\n{}\", case.rs.display(), actual);\n+        assert!(!errors, \"errors in an OK file {}:\\n{actual}\", case.rs.display());\n         expect_file![case.rast].assert_eq(&actual);\n     }\n }\n@@ -56,7 +56,7 @@ fn parse_ok() {\n fn parse_inline_ok() {\n     for case in TestCase::list(\"parser/inline/ok\") {\n         let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n-        assert!(!errors, \"errors in an OK file {}:\\n{}\", case.rs.display(), actual);\n+        assert!(!errors, \"errors in an OK file {}:\\n{actual}\", case.rs.display());\n         expect_file![case.rast].assert_eq(&actual);\n     }\n }\n@@ -65,7 +65,7 @@ fn parse_inline_ok() {\n fn parse_err() {\n     for case in TestCase::list(\"parser/err\") {\n         let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n-        assert!(errors, \"no errors in an ERR file {}:\\n{}\", case.rs.display(), actual);\n+        assert!(errors, \"no errors in an ERR file {}:\\n{actual}\", case.rs.display());\n         expect_file![case.rast].assert_eq(&actual)\n     }\n }\n@@ -74,7 +74,7 @@ fn parse_err() {\n fn parse_inline_err() {\n     for case in TestCase::list(\"parser/inline/err\") {\n         let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n-        assert!(errors, \"no errors in an ERR file {}:\\n{}\", case.rs.display(), actual);\n+        assert!(errors, \"no errors in an ERR file {}:\\n{actual}\", case.rs.display());\n         expect_file![case.rast].assert_eq(&actual)\n     }\n }\n@@ -93,14 +93,14 @@ fn parse(entry: TopEntryPoint, text: &str) -> (String, bool) {\n         crate::StrStep::Token { kind, text } => {\n             assert!(depth > 0);\n             len += text.len();\n-            write!(buf, \"{}\", indent).unwrap();\n-            write!(buf, \"{:?} {:?}\\n\", kind, text).unwrap();\n+            write!(buf, \"{indent}\").unwrap();\n+            write!(buf, \"{kind:?} {text:?}\\n\").unwrap();\n         }\n         crate::StrStep::Enter { kind } => {\n             assert!(depth > 0 || len == 0);\n             depth += 1;\n-            write!(buf, \"{}\", indent).unwrap();\n-            write!(buf, \"{:?}\\n\", kind).unwrap();\n+            write!(buf, \"{indent}\").unwrap();\n+            write!(buf, \"{kind:?}\\n\").unwrap();\n             indent.push_str(\"  \");\n         }\n         crate::StrStep::Exit => {\n@@ -111,7 +111,7 @@ fn parse(entry: TopEntryPoint, text: &str) -> (String, bool) {\n         }\n         crate::StrStep::Error { msg, pos } => {\n             assert!(depth > 0);\n-            errors.push(format!(\"error {}: {}\\n\", pos, msg))\n+            errors.push(format!(\"error {pos}: {msg}\\n\"))\n         }\n     });\n     assert_eq!(\n@@ -124,7 +124,7 @@ fn parse(entry: TopEntryPoint, text: &str) -> (String, bool) {\n \n     for (token, msg) in lexed.errors() {\n         let pos = lexed.text_start(token);\n-        errors.push(format!(\"error {}: {}\\n\", pos, msg));\n+        errors.push(format!(\"error {pos}: {msg}\\n\"));\n     }\n \n     let has_errors = !errors.is_empty();\n@@ -149,7 +149,7 @@ impl TestCase {\n \n         let mut res = Vec::new();\n         let read_dir = fs::read_dir(&dir)\n-            .unwrap_or_else(|err| panic!(\"can't `read_dir` {}: {}\", dir.display(), err));\n+            .unwrap_or_else(|err| panic!(\"can't `read_dir` {}: {err}\", dir.display()));\n         for file in read_dir {\n             let file = file.unwrap();\n             let path = file.path();"}, {"sha": "54e85c07344b21a944336c376a8e3c1833341498", "filename": "crates/parser/src/tests/sourcegen_inline_tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fparser%2Fsrc%2Ftests%2Fsourcegen_inline_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fparser%2Fsrc%2Ftests%2Fsourcegen_inline_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fsourcegen_inline_tests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -23,15 +23,15 @@ fn sourcegen_parser_tests() {\n         // ok is never actually read, but it needs to be specified to create a Test in existing_tests\n         let existing = existing_tests(&tests_dir, true);\n         for t in existing.keys().filter(|&t| !tests.contains_key(t)) {\n-            panic!(\"Test is deleted: {}\", t);\n+            panic!(\"Test is deleted: {t}\");\n         }\n \n         let mut new_idx = existing.len() + 1;\n         for (name, test) in tests {\n             let path = match existing.get(name) {\n                 Some((path, _test)) => path.clone(),\n                 None => {\n-                    let file_name = format!(\"{:04}_{}.rs\", new_idx, name);\n+                    let file_name = format!(\"{new_idx:04}_{name}.rs\");\n                     new_idx += 1;\n                     tests_dir.join(file_name)\n                 }\n@@ -116,7 +116,7 @@ fn existing_tests(dir: &Path, ok: bool) -> HashMap<String, (PathBuf, Test)> {\n         let text = fs::read_to_string(&path).unwrap();\n         let test = Test { name: name.clone(), text, ok };\n         if let Some(old) = res.insert(name, (path, test)) {\n-            println!(\"Duplicate test: {:?}\", old);\n+            println!(\"Duplicate test: {old:?}\");\n         }\n     }\n     res"}, {"sha": "7921fda331eed345c56d6dc03f23c5b9f82165d7", "filename": "crates/proc-macro-api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -60,7 +60,7 @@ impl MacroDylib {\n \n         let info = version::read_dylib_info(&path)?;\n         if info.version.0 < 1 || info.version.1 < 47 {\n-            let msg = format!(\"proc-macro {} built by {:#?} is not supported by rust-analyzer, please update your Rust version.\", path.display(), info);\n+            let msg = format!(\"proc-macro {} built by {info:#?} is not supported by rust-analyzer, please update your Rust version.\", path.display());\n             return Err(io::Error::new(io::ErrorKind::InvalidData, msg));\n         }\n "}, {"sha": "f50ecccf1e2b01442da2d70174ee60b6bfdaa94e", "filename": "crates/proc-macro-api/src/msg/flat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-api%2Fsrc%2Fmsg%2Fflat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-api%2Fsrc%2Fmsg%2Fflat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fmsg%2Fflat.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -137,7 +137,7 @@ impl SubtreeRepr {\n             1 => Some(tt::DelimiterKind::Parenthesis),\n             2 => Some(tt::DelimiterKind::Brace),\n             3 => Some(tt::DelimiterKind::Bracket),\n-            other => panic!(\"bad kind {}\", other),\n+            other => panic!(\"bad kind {other}\"),\n         };\n         SubtreeRepr { id: TokenId(id), kind, tt: [lo, len] }\n     }\n@@ -164,7 +164,7 @@ impl PunctRepr {\n         let spacing = match spacing {\n             0 => tt::Spacing::Alone,\n             1 => tt::Spacing::Joint,\n-            other => panic!(\"bad spacing {}\", other),\n+            other => panic!(\"bad spacing {other}\"),\n         };\n         PunctRepr { id: TokenId(id), char: char.try_into().unwrap(), spacing }\n     }\n@@ -312,7 +312,7 @@ impl Reader {\n                                 })\n                                 .into()\n                             }\n-                            other => panic!(\"bad tag: {}\", other),\n+                            other => panic!(\"bad tag: {other}\"),\n                         }\n                     })\n                     .collect(),"}, {"sha": "40125c2a512ad28ac20e278675800a197b654b59", "filename": "crates/proc-macro-api/src/version.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-api%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-api%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fversion.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -125,7 +125,7 @@ pub fn read_version(dylib_path: &AbsPath) -> io::Result<String> {\n         _ => {\n             return Err(io::Error::new(\n                 io::ErrorKind::InvalidData,\n-                format!(\"unsupported metadata version {}\", version),\n+                format!(\"unsupported metadata version {version}\"),\n             ));\n         }\n     }"}, {"sha": "c5145d00e329e6c22fb75baa2336b5ea0b2091e5", "filename": "crates/proc-macro-srv/src/abis/abi_1_58/proc_macro/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fproc_macro%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fproc_macro%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fproc_macro%2Fmod.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -877,7 +877,7 @@ impl Literal {\n     /// example if it is infinity or NaN this function will panic.\n     pub fn f32_unsuffixed(n: f32) -> Literal {\n         if !n.is_finite() {\n-            panic!(\"Invalid float literal {}\", n);\n+            panic!(\"Invalid float literal {n}\");\n         }\n         let mut repr = n.to_string();\n         if !repr.contains('.') {\n@@ -901,7 +901,7 @@ impl Literal {\n     /// example if it is infinity or NaN this function will panic.\n     pub fn f32_suffixed(n: f32) -> Literal {\n         if !n.is_finite() {\n-            panic!(\"Invalid float literal {}\", n);\n+            panic!(\"Invalid float literal {n}\");\n         }\n         Literal(bridge::client::Literal::f32(&n.to_string()))\n     }\n@@ -920,7 +920,7 @@ impl Literal {\n     /// example if it is infinity or NaN this function will panic.\n     pub fn f64_unsuffixed(n: f64) -> Literal {\n         if !n.is_finite() {\n-            panic!(\"Invalid float literal {}\", n);\n+            panic!(\"Invalid float literal {n}\");\n         }\n         let mut repr = n.to_string();\n         if !repr.contains('.') {\n@@ -944,7 +944,7 @@ impl Literal {\n     /// example if it is infinity or NaN this function will panic.\n     pub fn f64_suffixed(n: f64) -> Literal {\n         if !n.is_finite() {\n-            panic!(\"Invalid float literal {}\", n);\n+            panic!(\"Invalid float literal {n}\");\n         }\n         Literal(bridge::client::Literal::f64(&n.to_string()))\n     }"}, {"sha": "22d4ad94f770e8e59329d98562bf53a579f34d16", "filename": "crates/proc-macro-srv/src/abis/abi_1_58/ra_server.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fra_server.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -548,13 +548,13 @@ impl server::Literal for RustAnalyzer {\n \n     fn f32(&mut self, n: &str) -> Self::Literal {\n         let n: f32 = n.parse().unwrap();\n-        let text = format!(\"{}f32\", n);\n+        let text = format!(\"{n}f32\");\n         Literal { text: text.into(), id: tt::TokenId::unspecified() }\n     }\n \n     fn f64(&mut self, n: &str) -> Self::Literal {\n         let n: f64 = n.parse().unwrap();\n-        let text = format!(\"{}f64\", n);\n+        let text = format!(\"{n}f64\");\n         Literal { text: text.into(), id: tt::TokenId::unspecified() }\n     }\n \n@@ -563,11 +563,11 @@ impl server::Literal for RustAnalyzer {\n         for ch in string.chars() {\n             escaped.extend(ch.escape_debug());\n         }\n-        Literal { text: format!(\"\\\"{}\\\"\", escaped).into(), id: tt::TokenId::unspecified() }\n+        Literal { text: format!(\"\\\"{escaped}\\\"\").into(), id: tt::TokenId::unspecified() }\n     }\n \n     fn character(&mut self, ch: char) -> Self::Literal {\n-        Literal { text: format!(\"'{}'\", ch).into(), id: tt::TokenId::unspecified() }\n+        Literal { text: format!(\"'{ch}'\").into(), id: tt::TokenId::unspecified() }\n     }\n \n     fn byte_string(&mut self, bytes: &[u8]) -> Self::Literal {\n@@ -578,7 +578,7 @@ impl server::Literal for RustAnalyzer {\n             .map(Into::<char>::into)\n             .collect::<String>();\n \n-        Literal { text: format!(\"b\\\"{}\\\"\", string).into(), id: tt::TokenId::unspecified() }\n+        Literal { text: format!(\"b\\\"{string}\\\"\").into(), id: tt::TokenId::unspecified() }\n     }\n \n     fn span(&mut self, literal: &Self::Literal) -> Self::Span {"}, {"sha": "f82f20c37bc3d323b117452ce38d1b694e3ba9f6", "filename": "crates/proc-macro-srv/src/abis/abi_1_63/ra_server.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fra_server.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -563,13 +563,13 @@ impl server::Literal for RustAnalyzer {\n \n     fn f32(&mut self, n: &str) -> Self::Literal {\n         let n: f32 = n.parse().unwrap();\n-        let text = format!(\"{}f32\", n);\n+        let text = format!(\"{n}f32\");\n         Literal { text: text.into(), id: tt::TokenId::unspecified() }\n     }\n \n     fn f64(&mut self, n: &str) -> Self::Literal {\n         let n: f64 = n.parse().unwrap();\n-        let text = format!(\"{}f64\", n);\n+        let text = format!(\"{n}f64\");\n         Literal { text: text.into(), id: tt::TokenId::unspecified() }\n     }\n \n@@ -578,11 +578,11 @@ impl server::Literal for RustAnalyzer {\n         for ch in string.chars() {\n             escaped.extend(ch.escape_debug());\n         }\n-        Literal { text: format!(\"\\\"{}\\\"\", escaped).into(), id: tt::TokenId::unspecified() }\n+        Literal { text: format!(\"\\\"{escaped}\\\"\").into(), id: tt::TokenId::unspecified() }\n     }\n \n     fn character(&mut self, ch: char) -> Self::Literal {\n-        Literal { text: format!(\"'{}'\", ch).into(), id: tt::TokenId::unspecified() }\n+        Literal { text: format!(\"'{ch}'\").into(), id: tt::TokenId::unspecified() }\n     }\n \n     fn byte_string(&mut self, bytes: &[u8]) -> Self::Literal {\n@@ -593,7 +593,7 @@ impl server::Literal for RustAnalyzer {\n             .map(Into::<char>::into)\n             .collect::<String>();\n \n-        Literal { text: format!(\"b\\\"{}\\\"\", string).into(), id: tt::TokenId::unspecified() }\n+        Literal { text: format!(\"b\\\"{string}\\\"\").into(), id: tt::TokenId::unspecified() }\n     }\n \n     fn span(&mut self, literal: &Self::Literal) -> Self::Span {"}, {"sha": "2eb939a7ce581ef219f8917c1a9ec38d265dbab7", "filename": "crates/proc-macro-srv/src/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -48,7 +48,7 @@ impl ProcMacroSrv {\n     pub fn expand(&mut self, task: ExpandMacro) -> Result<FlatTree, PanicMessage> {\n         let expander = self.expander(task.lib.as_ref()).map_err(|err| {\n             debug_assert!(false, \"should list macros before asking to expand\");\n-            PanicMessage(format!(\"failed to load macro: {}\", err))\n+            PanicMessage(format!(\"failed to load macro: {err}\"))\n         })?;\n \n         let prev_env = EnvSnapshot::new();\n@@ -59,7 +59,7 @@ impl ProcMacroSrv {\n             Some(dir) => {\n                 let prev_working_dir = std::env::current_dir().ok();\n                 if let Err(err) = std::env::set_current_dir(&dir) {\n-                    eprintln!(\"Failed to set the current working dir to {}. Error: {:?}\", dir, err)\n+                    eprintln!(\"Failed to set the current working dir to {dir}. Error: {err:?}\")\n                 }\n                 prev_working_dir\n             }\n@@ -112,14 +112,16 @@ impl ProcMacroSrv {\n     }\n \n     fn expander(&mut self, path: &Path) -> Result<&dylib::Expander, String> {\n-        let time = fs::metadata(path).and_then(|it| it.modified()).map_err(|err| {\n-            format!(\"Failed to get file metadata for {}: {}\", path.display(), err)\n-        })?;\n+        let time = fs::metadata(path)\n+            .and_then(|it| it.modified())\n+            .map_err(|err| format!(\"Failed to get file metadata for {}: {err}\", path.display()))?;\n \n         Ok(match self.expanders.entry((path.to_path_buf(), time)) {\n-            Entry::Vacant(v) => v.insert(dylib::Expander::new(path).map_err(|err| {\n-                format!(\"Cannot create expander for {}: {}\", path.display(), err)\n-            })?),\n+            Entry::Vacant(v) => {\n+                v.insert(dylib::Expander::new(path).map_err(|err| {\n+                    format!(\"Cannot create expander for {}: {err}\", path.display())\n+                })?)\n+            }\n             Entry::Occupied(e) => e.into_mut(),\n         })\n     }"}, {"sha": "340e9f93ed6c26d8eaa09bc9e944b7b199124597", "filename": "crates/proc-macro-test/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-test%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproc-macro-test%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-test%2Fbuild.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -71,7 +71,7 @@ fn main() {\n         .arg(\"--target-dir\")\n         .arg(&target_dir);\n \n-    println!(\"Running {:?}\", cmd);\n+    println!(\"Running {cmd:?}\");\n \n     let output = cmd.output().unwrap();\n     if !output.status.success() {\n@@ -87,7 +87,7 @@ fn main() {\n     for message in Message::parse_stream(output.stdout.as_slice()) {\n         if let Message::CompilerArtifact(artifact) = message.unwrap() {\n             if artifact.target.kind.contains(&\"proc-macro\".to_string()) {\n-                let repr = format!(\"{} {}\", name, version);\n+                let repr = format!(\"{name} {version}\");\n                 if artifact.package_id.repr.starts_with(&repr) {\n                     artifact_path = Some(PathBuf::from(&artifact.filenames[0]));\n                 }"}, {"sha": "ea89a89c5c5ca89da3c4dcf89607f1e18d16507d", "filename": "crates/profile/src/hprof.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -238,7 +238,7 @@ impl ProfileStack {\n             self.heartbeat(frame.heartbeats);\n             let avg_span = duration / (frame.heartbeats + 1);\n             if avg_span > self.filter.heartbeat_longer_than {\n-                eprintln!(\"Too few heartbeats {} ({}/{:?})?\", label, frame.heartbeats, duration);\n+                eprintln!(\"Too few heartbeats {label} ({}/{duration:?})?\", frame.heartbeats);\n             }\n         }\n \n@@ -275,7 +275,7 @@ fn print(\n     out: &mut impl Write,\n ) {\n     let current_indent = \"    \".repeat(level as usize);\n-    let detail = tree[curr].detail.as_ref().map(|it| format!(\" @ {}\", it)).unwrap_or_default();\n+    let detail = tree[curr].detail.as_ref().map(|it| format!(\" @ {it}\")).unwrap_or_default();\n     writeln!(\n         out,\n         \"{}{} - {}{}\",\n@@ -302,13 +302,13 @@ fn print(\n     }\n \n     for (child_msg, (duration, count)) in &short_children {\n-        writeln!(out, \"    {}{} - {} ({} calls)\", current_indent, ms(*duration), child_msg, count)\n+        writeln!(out, \"    {current_indent}{} - {child_msg} ({count} calls)\", ms(*duration))\n             .expect(\"printing profiling info\");\n     }\n \n     let unaccounted = tree[curr].duration - accounted_for;\n     if tree.children(curr).next().is_some() && unaccounted > longer_than {\n-        writeln!(out, \"    {}{} - ???\", current_indent, ms(unaccounted))\n+        writeln!(out, \"    {current_indent}{} - ???\", ms(unaccounted))\n             .expect(\"printing profiling info\");\n     }\n }\n@@ -320,7 +320,7 @@ impl fmt::Display for ms {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.0.as_millis() {\n             0 => f.write_str(\"    0  \"),\n-            n => write!(f, \"{:5}ms\", n),\n+            n => write!(f, \"{n:5}ms\"),\n         }\n     }\n }"}, {"sha": "8017f865792b36e451f6b35c7b54ebd4cca6472b", "filename": "crates/profile/src/memory_usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -109,7 +109,7 @@ impl fmt::Display for Bytes {\n                 suffix = \"mb\";\n             }\n         }\n-        f.pad(&format!(\"{}{}\", value, suffix))\n+        f.pad(&format!(\"{value}{suffix}\"))\n     }\n }\n "}, {"sha": "71303d5a631621119abbc2a1a7deb4c62e8d269f", "filename": "crates/profile/src/stop_watch.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fprofile%2Fsrc%2Fstop_watch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fprofile%2Fsrc%2Fstop_watch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fstop_watch.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -33,11 +33,11 @@ impl StopWatch {\n             if *PERF_ENABLED {\n                 let mut counter = perf_event::Builder::new()\n                     .build()\n-                    .map_err(|err| eprintln!(\"Failed to create perf counter: {}\", err))\n+                    .map_err(|err| eprintln!(\"Failed to create perf counter: {err}\"))\n                     .ok();\n                 if let Some(counter) = &mut counter {\n                     if let Err(err) = counter.enable() {\n-                        eprintln!(\"Failed to start perf counter: {}\", err)\n+                        eprintln!(\"Failed to start perf counter: {err}\")\n                     }\n                 }\n                 counter\n@@ -64,7 +64,7 @@ impl StopWatch {\n \n         #[cfg(target_os = \"linux\")]\n         let instructions = self.counter.as_mut().and_then(|it| {\n-            it.read().map_err(|err| eprintln!(\"Failed to read perf counter: {}\", err)).ok()\n+            it.read().map_err(|err| eprintln!(\"Failed to read perf counter: {err}\")).ok()\n         });\n         #[cfg(not(target_os = \"linux\"))]\n         let instructions = None;\n@@ -91,10 +91,10 @@ impl fmt::Display for StopWatchSpan {\n                 instructions /= 1000;\n                 prefix = \"g\";\n             }\n-            write!(f, \", {}{}instr\", instructions, prefix)?;\n+            write!(f, \", {instructions}{prefix}instr\")?;\n         }\n         if let Some(memory) = self.memory {\n-            write!(f, \", {}\", memory)?;\n+            write!(f, \", {memory}\")?;\n         }\n         Ok(())\n     }"}, {"sha": "ae9cba52ded2c447b0a05a88537e860a7091f479", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -295,7 +295,7 @@ impl WorkspaceBuildScripts {\n                 match message {\n                     Message::BuildScriptExecuted(mut message) => {\n                         with_output_for(&message.package_id.repr, &mut |name, data| {\n-                            progress(format!(\"running build-script: {}\", name));\n+                            progress(format!(\"running build-script: {name}\"));\n                             let cfgs = {\n                                 let mut acc = Vec::new();\n                                 for cfg in &message.cfgs {\n@@ -334,7 +334,7 @@ impl WorkspaceBuildScripts {\n                     }\n                     Message::CompilerArtifact(message) => {\n                         with_output_for(&message.package_id.repr, &mut |name, data| {\n-                            progress(format!(\"building proc-macros: {}\", name));\n+                            progress(format!(\"building proc-macros: {name}\"));\n                             if message.target.kind.iter().any(|k| k == \"proc-macro\") {\n                                 // Skip rmeta file\n                                 if let Some(filename) ="}, {"sha": "c134b78ab3a2e09e5e18f654f8ab8c55a9c6b233", "filename": "crates/project-model/src/cfg_flag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Fcfg_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Fcfg_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcfg_flag.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -17,7 +17,7 @@ impl FromStr for CfgFlag {\n         let res = match s.split_once('=') {\n             Some((key, value)) => {\n                 if !(value.starts_with('\"') && value.ends_with('\"')) {\n-                    return Err(format!(\"Invalid cfg ({:?}), value should be in quotes\", s));\n+                    return Err(format!(\"Invalid cfg ({s:?}), value should be in quotes\"));\n                 }\n                 let key = key.to_string();\n                 let value = value[1..value.len() - 1].to_string();"}, {"sha": "e2f09bad2ded5eaa420457fba09942e03b94173a", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -146,7 +146,7 @@ impl ProjectManifest {\n }\n \n fn utf8_stdout(mut cmd: Command) -> Result<String> {\n-    let output = cmd.output().with_context(|| format!(\"{:?} failed\", cmd))?;\n+    let output = cmd.output().with_context(|| format!(\"{cmd:?} failed\"))?;\n     if !output.status.success() {\n         match String::from_utf8(output.stderr) {\n             Ok(stderr) if !stderr.is_empty() => {"}, {"sha": "9af0eafe9fddbe30b1818d4d08da72d7f7b8d7f3", "filename": "crates/project-model/src/project_json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fproject_json.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -197,5 +197,5 @@ where\n     D: de::Deserializer<'de>,\n {\n     let name = String::deserialize(de)?;\n-    CrateName::new(&name).map_err(|err| de::Error::custom(format!(\"invalid crate name: {:?}\", err)))\n+    CrateName::new(&name).map_err(|err| de::Error::custom(format!(\"invalid crate name: {err:?}\")))\n }"}, {"sha": "b62b2026b64b8e4e493b80683dce18b2296f0ca6", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -104,7 +104,7 @@ impl Sysroot {\n \n         for path in SYSROOT_CRATES.trim().lines() {\n             let name = path.split('/').last().unwrap();\n-            let root = [format!(\"{}/src/lib.rs\", path), format!(\"lib{}/lib.rs\", path)]\n+            let root = [format!(\"{path}/src/lib.rs\"), format!(\"lib{path}/lib.rs\")]\n                 .into_iter()\n                 .map(|it| sysroot.src_root.join(it))\n                 .filter_map(|it| ManifestPath::try_from(it).ok())"}, {"sha": "2bb9ebf998bdb40903a71d4835187cd373e052df", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -107,7 +107,7 @@ fn to_crate_graph(project_workspace: ProjectWorkspace) -> CrateGraph {\n }\n \n fn check_crate_graph(crate_graph: CrateGraph, expect: Expect) {\n-    let mut crate_graph = format!(\"{:#?}\", crate_graph);\n+    let mut crate_graph = format!(\"{crate_graph:#?}\");\n     replace_root(&mut crate_graph, false);\n     expect.assert_eq(&crate_graph);\n }"}, {"sha": "8caadecd850b39de59764966c7076f876d50acea", "filename": "crates/rust-analyzer/src/bin/logger.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -81,9 +81,9 @@ impl Logger {\n                 Registry::default()\n                     .with(\n                         self.filter\n-                            .add_directive(format!(\"chalk_solve={}\", val).parse()?)\n-                            .add_directive(format!(\"chalk_ir={}\", val).parse()?)\n-                            .add_directive(format!(\"chalk_recursive={}\", val).parse()?),\n+                            .add_directive(format!(\"chalk_solve={val}\").parse()?)\n+                            .add_directive(format!(\"chalk_ir={val}\").parse()?)\n+                            .add_directive(format!(\"chalk_recursive={val}\").parse()?),\n                     )\n                     .with(ra_fmt_layer)\n                     .with(chalk_layer)\n@@ -124,7 +124,7 @@ where\n             Some(log) => log.target(),\n             None => event.metadata().target(),\n         };\n-        write!(writer, \"[{} {}] \", level, target)?;\n+        write!(writer, \"[{level} {target}] \")?;\n \n         // Write spans and fields of each span\n         ctx.visit_spans(|span| {\n@@ -140,7 +140,7 @@ where\n             let fields = &ext.get::<FormattedFields<N>>().expect(\"will never be `None`\");\n \n             if !fields.is_empty() {\n-                write!(writer, \"{{{}}}\", fields)?;\n+                write!(writer, \"{{{fields}}}\")?;\n             }\n             write!(writer, \": \")?;\n "}, {"sha": "53710749de3d400f6d67d85e0e2645a0644b845c", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -30,7 +30,7 @@ fn main() {\n         let code = match rustc_wrapper::run_rustc_skipping_cargo_checking(rustc, args.collect()) {\n             Ok(rustc_wrapper::ExitCode(code)) => code.unwrap_or(102),\n             Err(err) => {\n-                eprintln!(\"{}\", err);\n+                eprintln!(\"{err}\");\n                 101\n             }\n         };\n@@ -40,7 +40,7 @@ fn main() {\n     let flags = flags::RustAnalyzer::from_env_or_exit();\n     if let Err(err) = try_main(flags) {\n         tracing::error!(\"Unexpected error: {}\", err);\n-        eprintln!(\"{}\", err);\n+        eprintln!(\"{err}\");\n         process::exit(101);\n     }\n }"}, {"sha": "d5d877680a09a513a8392a2a0f3f50eee6da5b50", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -46,7 +46,7 @@ fn report_metric(metric: &str, value: u64, unit: &str) {\n     if std::env::var(\"RA_METRICS\").is_err() {\n         return;\n     }\n-    println!(\"METRIC:{}:{}:{}\", metric, value, unit)\n+    println!(\"METRIC:{metric}:{value}:{unit}\")\n }\n \n fn print_memory_usage(mut host: AnalysisHost, vfs: Vfs) {\n@@ -65,6 +65,6 @@ fn print_memory_usage(mut host: AnalysisHost, vfs: Vfs) {\n \n     for (name, bytes) in mem {\n         // NOTE: Not a debug print, so avoid going through the `eprintln` defined above.\n-        eprintln!(\"{:>8} {}\", bytes, name);\n+        eprintln!(\"{bytes:>8} {name}\");\n     }\n }"}, {"sha": "053db5fc5331dc94a39abef5e595fbb02db44578", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -87,9 +87,9 @@ impl flags::AnalysisStats {\n             load_workspace(workspace, &cargo_config.extra_env, &load_cargo_config)?;\n         let db = host.raw_database();\n         eprint!(\"{:<20} {}\", \"Database loaded:\", db_load_sw.elapsed());\n-        eprint!(\" (metadata {}\", metadata_time);\n+        eprint!(\" (metadata {metadata_time}\");\n         if let Some(build_scripts_time) = build_scripts_time {\n-            eprint!(\"; build {}\", build_scripts_time);\n+            eprint!(\"; build {build_scripts_time}\");\n         }\n         eprintln!(\")\");\n \n@@ -118,7 +118,7 @@ impl flags::AnalysisStats {\n             shuffle(&mut rng, &mut visit_queue);\n         }\n \n-        eprint!(\"  crates: {}\", num_crates);\n+        eprint!(\"  crates: {num_crates}\");\n         let mut num_decls = 0;\n         let mut funcs = Vec::new();\n         while let Some(module) = visit_queue.pop() {\n@@ -142,7 +142,7 @@ impl flags::AnalysisStats {\n                 }\n             }\n         }\n-        eprintln!(\", mods: {}, decls: {}, fns: {}\", visited_modules.len(), num_decls, funcs.len());\n+        eprintln!(\", mods: {}, decls: {num_decls}, fns: {}\", visited_modules.len(), funcs.len());\n         eprintln!(\"{:<20} {}\", \"Item Collection:\", analysis_sw.elapsed());\n \n         if self.randomize {\n@@ -154,7 +154,7 @@ impl flags::AnalysisStats {\n         }\n \n         let total_span = analysis_sw.elapsed();\n-        eprintln!(\"{:<20} {}\", \"Total:\", total_span);\n+        eprintln!(\"{:<20} {total_span}\", \"Total:\");\n         report_metric(\"total time\", total_span.time.as_millis() as u64, \"ms\");\n         if let Some(instructions) = total_span.instructions {\n             report_metric(\"total instructions\", instructions, \"#instr\");\n@@ -179,7 +179,7 @@ impl flags::AnalysisStats {\n                     total_macro_file_size += syntax_len(val.syntax_node())\n                 }\n             }\n-            eprintln!(\"source files: {}, macro files: {}\", total_file_size, total_macro_file_size);\n+            eprintln!(\"source files: {total_file_size}, macro files: {total_macro_file_size}\");\n         }\n \n         if self.memory_usage && verbosity.is_verbose() {\n@@ -239,7 +239,7 @@ impl flags::AnalysisStats {\n                     continue;\n                 }\n             }\n-            let mut msg = format!(\"processing: {}\", full_name);\n+            let mut msg = format!(\"processing: {full_name}\");\n             if verbosity.is_verbose() {\n                 if let Some(src) = f.source(db) {\n                     let original_file = src.file_id.original_file(db);\n@@ -275,7 +275,7 @@ impl flags::AnalysisStats {\n                                 end.col,\n                             ));\n                         } else {\n-                            bar.println(format!(\"{}: Unknown type\", name,));\n+                            bar.println(format!(\"{name}: Unknown type\",));\n                         }\n                     }\n                     true\n@@ -402,7 +402,7 @@ fn location_csv(\n     let text_range = original_range.range;\n     let (start, end) =\n         (line_index.line_col(text_range.start()), line_index.line_col(text_range.end()));\n-    format!(\"{},{}:{},{}:{}\", path, start.line + 1, start.col, end.line + 1, end.col)\n+    format!(\"{path},{}:{},{}:{}\", start.line + 1, start.col, end.line + 1, end.col)\n }\n \n fn expr_syntax_range("}, {"sha": "fd5b3ce61f78d3c687ef2086483917d2f9a246f1", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -40,7 +40,7 @@ impl flags::Diagnostics {\n             if !visited_files.contains(&file_id) {\n                 let crate_name =\n                     module.krate().display_name(db).as_deref().unwrap_or(\"unknown\").to_string();\n-                println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n+                println!(\"processing crate: {crate_name}, module: {}\", _vfs.file_path(file_id));\n                 for diagnostic in analysis\n                     .diagnostics(\n                         &DiagnosticsConfig::test_sample(),\n@@ -53,7 +53,7 @@ impl flags::Diagnostics {\n                         found_error = true;\n                     }\n \n-                    println!(\"{:?}\", diagnostic);\n+                    println!(\"{diagnostic:?}\");\n                 }\n \n                 visited_files.insert(file_id);"}, {"sha": "770612cc9478d86b8824c5fe16f36b15907b9510", "filename": "crates/rust-analyzer/src/cli/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -255,7 +255,7 @@ impl FromStr for OutputFormat {\n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n             \"csv\" => Ok(Self::Csv),\n-            _ => Err(format!(\"unknown output format `{}`\", s)),\n+            _ => Err(format!(\"unknown output format `{s}`\")),\n         }\n     }\n }"}, {"sha": "84607b9fd5d52817f0d7c38add00da5734fa08a0", "filename": "crates/rust-analyzer/src/cli/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fhighlight.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -8,7 +8,7 @@ impl flags::Highlight {\n     pub fn run(self) -> anyhow::Result<()> {\n         let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n         let html = analysis.highlight_as_html(file_id, self.rainbow).unwrap();\n-        println!(\"{}\", html);\n+        println!(\"{html}\");\n         Ok(())\n     }\n }"}, {"sha": "af8356d041f83608b365d1ed5cce40b9acd73515", "filename": "crates/rust-analyzer/src/cli/lsif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -83,7 +83,7 @@ impl LsifManager<'_> {\n \n     // FIXME: support file in addition to stdout here\n     fn emit(&self, data: &str) {\n-        println!(\"{}\", data);\n+        println!(\"{data}\");\n     }\n \n     fn get_token_id(&mut self, id: TokenId) -> Id {"}, {"sha": "d459dd115cebe92de194942c5959a348b9524365", "filename": "crates/rust-analyzer/src/cli/progress_report.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fprogress_report.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fprogress_report.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fprogress_report.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -67,7 +67,7 @@ impl ProgressReport {\n             return;\n         }\n         let percent = (self.curr * 100.0) as u32;\n-        let text = format!(\"{}/{} {:3>}% {}\", self.pos, self.len, percent, self.msg);\n+        let text = format!(\"{}/{} {percent:3>}% {}\", self.pos, self.len, self.msg);\n         self.update_text(&text);\n     }\n \n@@ -114,7 +114,7 @@ impl ProgressReport {\n         // Fill all last text to space and return the cursor\n         let spaces = \" \".repeat(self.text.len());\n         let backspaces = \"\\x08\".repeat(self.text.len());\n-        print!(\"{}{}{}\", backspaces, spaces, backspaces);\n+        print!(\"{backspaces}{spaces}{backspaces}\");\n         let _ = io::stdout().flush();\n \n         self.text = String::new();"}, {"sha": "b1a803d28c6b2513ba238a8bb2b79a048129ac1e", "filename": "crates/rust-analyzer/src/cli/scip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -28,7 +28,7 @@ impl flags::Scip {\n         let now = Instant::now();\n         let cargo_config = CargoConfig::default();\n \n-        let no_progress = &|s| (eprintln!(\"rust-analyzer: Loading {}\", s));\n+        let no_progress = &|s| (eprintln!(\"rust-analyzer: Loading {s}\"));\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: true,\n             with_proc_macro: true,\n@@ -209,7 +209,7 @@ fn new_descriptor_str(\n fn new_descriptor(name: Name, suffix: scip_types::descriptor::Suffix) -> scip_types::Descriptor {\n     let mut name = name.to_string();\n     if name.contains(\"'\") {\n-        name = format!(\"`{}`\", name);\n+        name = format!(\"`{name}`\");\n     }\n \n     new_descriptor_str(name.as_str(), suffix)\n@@ -303,11 +303,11 @@ mod test {\n         }\n \n         if expected == \"\" {\n-            assert!(found_symbol.is_none(), \"must have no symbols {:?}\", found_symbol);\n+            assert!(found_symbol.is_none(), \"must have no symbols {found_symbol:?}\");\n             return;\n         }\n \n-        assert!(found_symbol.is_some(), \"must have one symbol {:?}\", found_symbol);\n+        assert!(found_symbol.is_some(), \"must have one symbol {found_symbol:?}\");\n         let res = found_symbol.unwrap();\n         let formatted = format_symbol(res);\n         assert_eq!(formatted, expected);"}, {"sha": "84c48917167b6778ac8be328011a3cef7c5b5448", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -70,7 +70,7 @@ impl flags::Search {\n                 let sr = db.source_root(root);\n                 for file_id in sr.iter() {\n                     for debug_info in match_finder.debug_where_text_equal(file_id, debug_snippet) {\n-                        println!(\"{:#?}\", debug_info);\n+                        println!(\"{debug_info:#?}\");\n                     }\n                 }\n             }"}, {"sha": "9fad6723afcd9025aed3f3876337d3bef02b7537", "filename": "crates/rust-analyzer/src/cli/symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fsymbols.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -9,7 +9,7 @@ impl flags::Symbols {\n         let (analysis, file_id) = Analysis::from_single_file(text);\n         let structure = analysis.file_structure(file_id).unwrap();\n         for s in structure {\n-            println!(\"{:?}\", s);\n+            println!(\"{s:?}\");\n         }\n         Ok(())\n     }"}, {"sha": "ac496a7a9f9a901a432a62afd98ab1f9547abaa6", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -1869,14 +1869,14 @@ fn schema(fields: &[(&'static str, &'static str, &[&str], &str)]) -> serde_json:\n         fn key(f: &str) -> &str {\n             f.splitn(2, '_').next().unwrap()\n         }\n-        assert!(key(f1) <= key(f2), \"wrong field order: {:?} {:?}\", f1, f2);\n+        assert!(key(f1) <= key(f2), \"wrong field order: {f1:?} {f2:?}\");\n     }\n \n     let map = fields\n         .iter()\n         .map(|(field, ty, doc, default)| {\n             let name = field.replace('_', \".\");\n-            let name = format!(\"rust-analyzer.{}\", name);\n+            let name = format!(\"rust-analyzer.{name}\");\n             let props = field_props(field, ty, doc, default);\n             (name, props)\n         })\n@@ -2166,7 +2166,7 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 },\n             ],\n         },\n-        _ => panic!(\"missing entry for {}: {}\", ty, default),\n+        _ => panic!(\"missing entry for {ty}: {default}\"),\n     }\n \n     map.into()\n@@ -2194,14 +2194,14 @@ Default:\n                     name, name, default, doc\n                 )\n             } else {\n-                format!(\"[[{}]]{} (default: `{}`)::\\n+\\n--\\n{}--\\n\", name, name, default, doc)\n+                format!(\"[[{name}]]{name} (default: `{default}`)::\\n+\\n--\\n{doc}--\\n\")\n             }\n         })\n         .collect::<String>()\n }\n \n fn doc_comment_to_string(doc: &[&str]) -> String {\n-    doc.iter().map(|it| it.strip_prefix(' ').unwrap_or(it)).map(|it| format!(\"{}\\n\", it)).collect()\n+    doc.iter().map(|it| it.strip_prefix(' ').unwrap_or(it)).map(|it| format!(\"{it}\\n\")).collect()\n }\n \n #[cfg(test)]\n@@ -2215,7 +2215,7 @@ mod tests {\n     #[test]\n     fn generate_package_json_config() {\n         let s = Config::json_schema();\n-        let schema = format!(\"{:#}\", s);\n+        let schema = format!(\"{s:#}\");\n         let mut schema = schema\n             .trim_start_matches('{')\n             .trim_end_matches('}')"}, {"sha": "d1ee99af3ec6e5f4a8fa06dd124c9a202b170aed", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -161,7 +161,7 @@ fn resolve_path(\n         .iter()\n         .find_map(|(from, to)| file_name.strip_prefix(from).map(|file_name| (to, file_name)))\n     {\n-        Some((to, file_name)) => workspace_root.join(format!(\"{}{}\", to, file_name)),\n+        Some((to, file_name)) => workspace_root.join(format!(\"{to}{file_name}\")),\n         None => workspace_root.join(file_name),\n     }\n }\n@@ -218,7 +218,7 @@ fn map_rust_child_diagnostic(\n     if !suggested_replacements.is_empty() {\n         message.push_str(\": \");\n         let suggestions =\n-            suggested_replacements.iter().map(|suggestion| format!(\"`{}`\", suggestion)).join(\", \");\n+            suggested_replacements.iter().map(|suggestion| format!(\"`{suggestion}`\")).join(\", \");\n         message.push_str(&suggestions);\n     }\n \n@@ -493,7 +493,7 @@ fn rustc_code_description(code: Option<&str>) -> Option<lsp_types::CodeDescripti\n             && chars.next().is_none()\n     })\n     .and_then(|code| {\n-        lsp_types::Url::parse(&format!(\"https://doc.rust-lang.org/error-index.html#{}\", code))\n+        lsp_types::Url::parse(&format!(\"https://doc.rust-lang.org/error-index.html#{code}\"))\n             .ok()\n             .map(|href| lsp_types::CodeDescription { href })\n     })"}, {"sha": "715804449a0450e4b58237cfa5cc89d7a754f2bf", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -145,7 +145,7 @@ impl<'a> RequestDispatcher<'a> {\n         match res {\n             Ok(params) => {\n                 let panic_context =\n-                    format!(\"\\nversion: {}\\nrequest: {} {:#?}\", version(), R::METHOD, params);\n+                    format!(\"\\nversion: {}\\nrequest: {} {params:#?}\", version(), R::METHOD);\n                 Some((req, params, panic_context))\n             }\n             Err(err) => {"}, {"sha": "7f6ced26ce9ae991b4a0af43b24c232337074192", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -429,6 +429,6 @@ pub(crate) fn file_id_to_url(vfs: &vfs::Vfs, id: FileId) -> Url {\n \n pub(crate) fn url_to_file_id(vfs: &vfs::Vfs, url: &Url) -> Result<FileId> {\n     let path = from_proto::vfs_path(url)?;\n-    let res = vfs.file_id(&path).ok_or_else(|| format!(\"file not found: {}\", path))?;\n+    let res = vfs.file_id(&path).ok_or_else(|| format!(\"file not found: {path}\"))?;\n     Ok(res)\n }"}, {"sha": "33f5b8a4efb265fb949afa616a6a5adfbea37936", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -730,7 +730,7 @@ pub(crate) fn handle_runnables(\n         Some(spec) => {\n             for cmd in [\"check\", \"test\"] {\n                 res.push(lsp_ext::Runnable {\n-                    label: format!(\"cargo {} -p {} --all-targets\", cmd, spec.package),\n+                    label: format!(\"cargo {cmd} -p {} --all-targets\", spec.package),\n                     location: None,\n                     kind: lsp_ext::RunnableKind::Cargo,\n                     args: lsp_ext::CargoRunnable {\n@@ -1146,8 +1146,8 @@ pub(crate) fn handle_code_action_resolve(\n         Ok(parsed_data) => parsed_data,\n         Err(e) => {\n             return Err(invalid_params_error(format!(\n-                \"Failed to parse action id string '{}': {}\",\n-                params.id, e\n+                \"Failed to parse action id string '{}': {e}\",\n+                params.id\n             ))\n             .into())\n         }\n@@ -1191,7 +1191,7 @@ fn parse_action_id(action_id: &str) -> Result<(usize, SingleResolve), String> {\n             let assist_kind: AssistKind = assist_kind_string.parse()?;\n             let index: usize = match index_string.parse() {\n                 Ok(index) => index,\n-                Err(e) => return Err(format!(\"Incorrect index string: {}\", e)),\n+                Err(e) => return Err(format!(\"Incorrect index string: {e}\")),\n             };\n             Ok((index, SingleResolve { assist_id: assist_id_string.to_string(), assist_kind }))\n         }\n@@ -1870,7 +1870,7 @@ fn run_rustfmt(\n         .stdout(Stdio::piped())\n         .stderr(Stdio::piped())\n         .spawn()\n-        .context(format!(\"Failed to spawn {:?}\", command))?;\n+        .context(format!(\"Failed to spawn {command:?}\"))?;\n \n     rustfmt.stdin.as_mut().unwrap().write_all(file.as_bytes())?;\n \n@@ -1903,9 +1903,9 @@ fn run_rustfmt(\n                     format!(\n                         r#\"rustfmt exited with:\n                            Status: {}\n-                           stdout: {}\n-                           stderr: {}\"#,\n-                        output.status, captured_stdout, captured_stderr,\n+                           stdout: {captured_stdout}\n+                           stderr: {captured_stderr}\"#,\n+                        output.status,\n                     ),\n                 )\n                 .into())"}, {"sha": "405d261db6fb407f244ce9073f2bf30a553b2069", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -48,7 +48,7 @@ fn integrated_highlighting_benchmark() {\n     let file_id = {\n         let file = workspace_to_load.join(file);\n         let path = VfsPath::from(AbsPathBuf::assert(file));\n-        vfs.file_id(&path).unwrap_or_else(|| panic!(\"can't find virtual file for {}\", path))\n+        vfs.file_id(&path).unwrap_or_else(|| panic!(\"can't find virtual file for {path}\"))\n     };\n \n     {\n@@ -102,7 +102,7 @@ fn integrated_completion_benchmark() {\n     let file_id = {\n         let file = workspace_to_load.join(file);\n         let path = VfsPath::from(AbsPathBuf::assert(file));\n-        vfs.file_id(&path).unwrap_or_else(|| panic!(\"can't find virtual file for {}\", path))\n+        vfs.file_id(&path).unwrap_or_else(|| panic!(\"can't find virtual file for {path}\"))\n     };\n \n     {"}, {"sha": "32dc3750fdf6bfa36e71818f352d19d78952fab2", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -55,7 +55,7 @@ pub type Result<T, E = Error> = std::result::Result<T, E>;\n \n pub fn from_json<T: DeserializeOwned>(what: &'static str, json: &serde_json::Value) -> Result<T> {\n     let res = serde_json::from_value(json.clone())\n-        .map_err(|e| format!(\"Failed to deserialize {}: {}; {}\", what, e, json))?;\n+        .map_err(|e| format!(\"Failed to deserialize {what}: {e}; {json}\"))?;\n     Ok(res)\n }\n "}, {"sha": "dcaee92857abd3a6d99b7da0aed4e03af391d626", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -98,7 +98,7 @@ impl GlobalState {\n         });\n         let cancellable = Some(cancel_token.is_some());\n         let token = lsp_types::ProgressToken::String(\n-            cancel_token.unwrap_or_else(|| format!(\"rustAnalyzer/{}\", title)),\n+            cancel_token.unwrap_or_else(|| format!(\"rustAnalyzer/{title}\")),\n         );\n         let work_done_progress = match state {\n             Progress::Begin => {"}, {"sha": "9cedcf1bec1d63c39862a1fe7999ad24adad25d4", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -229,8 +229,8 @@ impl GlobalState {\n \n                             message = match &report.crates_currently_indexing[..] {\n                                 [crate_name] => Some(format!(\n-                                    \"{}/{} ({})\",\n-                                    report.crates_done, report.crates_total, crate_name\n+                                    \"{}/{} ({crate_name})\",\n+                                    report.crates_done, report.crates_total\n                                 )),\n                                 [crate_name, rest @ ..] => Some(format!(\n                                     \"{}/{} ({} + {} more)\",\n@@ -516,7 +516,7 @@ impl GlobalState {\n                 self.report_progress(\n                     \"Roots Scanned\",\n                     state,\n-                    Some(format!(\"{}/{}\", n_done, n_total)),\n+                    Some(format!(\"{n_done}/{n_total}\")),\n                     Some(Progress::fraction(n_done, n_total)),\n                     None,\n                 )\n@@ -587,7 +587,7 @@ impl GlobalState {\n                     state,\n                     message,\n                     None,\n-                    Some(format!(\"rust-analyzer/flycheck/{}\", id)),\n+                    Some(format!(\"rust-analyzer/flycheck/{id}\")),\n                 );\n             }\n         }"}, {"sha": "35ced15de549dc0c1394310a318b6268e23af2ff", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -342,7 +342,7 @@ fn completion_item(\n         // by the client. Hex format is used because it is easier to\n         // visually compare very large values, which the sort text\n         // tends to be since it is the opposite of the score.\n-        res.sort_text = Some(format!(\"{:08x}\", sort_score));\n+        res.sort_text = Some(format!(\"{sort_score:08x}\"));\n     }\n }\n \n@@ -1113,7 +1113,7 @@ pub(crate) fn code_action(\n         (Some(it), _) => res.edit = Some(snippet_workspace_edit(snap, it)?),\n         (None, Some((index, code_action_params))) => {\n             res.data = Some(lsp_ext::CodeActionData {\n-                id: format!(\"{}:{}:{}\", assist.id.0, assist.id.1.name(), index),\n+                id: format!(\"{}:{}:{index}\", assist.id.0, assist.id.1.name()),\n                 code_action_params,\n             });\n         }\n@@ -1352,15 +1352,15 @@ pub(crate) fn implementation_title(count: usize) -> String {\n     if count == 1 {\n         \"1 implementation\".into()\n     } else {\n-        format!(\"{} implementations\", count)\n+        format!(\"{count} implementations\")\n     }\n }\n \n pub(crate) fn reference_title(count: usize) -> String {\n     if count == 1 {\n         \"1 reference\".into()\n     } else {\n-        format!(\"{} references\", count)\n+        format!(\"{count} references\")\n     }\n }\n "}, {"sha": "76eb60ac7cb237d171ee520a847247d23ddd210d", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -263,7 +263,7 @@ mod tests {\n     for runnable in [\"consumer\", \"dependency\", \"devdependency\"] {\n         server.request::<Runnables>(\n             RunnablesParams {\n-                text_document: server.doc_id(&format!(\"{}/src/lib.rs\", runnable)),\n+                text_document: server.doc_id(&format!(\"{runnable}/src/lib.rs\")),\n                 position: None,\n             },\n             json!([\n@@ -595,8 +595,8 @@ fn diagnostics_dont_block_typing() {\n         return;\n     }\n \n-    let librs: String = (0..10).map(|i| format!(\"mod m{};\", i)).collect();\n-    let libs: String = (0..10).map(|i| format!(\"//- /src/m{}.rs\\nfn foo() {{}}\\n\\n\", i)).collect();\n+    let librs: String = (0..10).map(|i| format!(\"mod m{i};\")).collect();\n+    let libs: String = (0..10).map(|i| format!(\"//- /src/m{i}.rs\\nfn foo() {{}}\\n\\n\")).collect();\n     let server = Project::with_fixture(&format!(\n         r#\"\n //- /Cargo.toml\n@@ -622,7 +622,7 @@ fn main() {{}}\n     for i in 0..10 {\n         server.notification::<DidOpenTextDocument>(DidOpenTextDocumentParams {\n             text_document: TextDocumentItem {\n-                uri: server.doc_id(&format!(\"src/m{}.rs\", i)).uri,\n+                uri: server.doc_id(&format!(\"src/m{i}.rs\")).uri,\n                 language_id: \"rust\".to_string(),\n                 version: 0,\n                 text: \"/// Docs\\nfn foo() {}\".to_string(),\n@@ -645,7 +645,7 @@ fn main() {{}}\n         }]),\n     );\n     let elapsed = start.elapsed();\n-    assert!(elapsed.as_millis() < 2000, \"typing enter took {:?}\", elapsed);\n+    assert!(elapsed.as_millis() < 2000, \"typing enter took {elapsed:?}\");\n }\n \n #[test]\n@@ -942,7 +942,7 @@ fn test_will_rename_files_same_level() {\n     let tmp_dir = TestDir::new();\n     let tmp_dir_path = tmp_dir.path().to_owned();\n     let tmp_dir_str = tmp_dir_path.to_str().unwrap();\n-    let base_path = PathBuf::from(format!(\"file://{}\", tmp_dir_str));\n+    let base_path = PathBuf::from(format!(\"file://{tmp_dir_str}\"));\n \n     let code = r#\"\n //- /Cargo.toml"}, {"sha": "7465ca9ab5773234afca8dac102f1839eafef6fe", "filename": "crates/rust-analyzer/tests/slow-tests/sourcegen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -42,7 +42,7 @@ impl Feature {\n             for block in comment_blocks {\n                 let id = block.id;\n                 if let Err(msg) = is_valid_feature_name(&id) {\n-                    panic!(\"invalid feature name: {:?}:\\n  {}\", id, msg)\n+                    panic!(\"invalid feature name: {id:?}:\\n  {msg}\")\n                 }\n                 let doc = block.contents.join(\"\\n\");\n                 let location = sourcegen::Location { file: path.clone(), line: block.line };\n@@ -63,11 +63,11 @@ fn is_valid_feature_name(feature: &str) -> Result<(), String> {\n         }\n         for short in [\"To\", \"And\"] {\n             if word == short {\n-                return Err(format!(\"Don't capitalize {:?}\", word));\n+                return Err(format!(\"Don't capitalize {word:?}\"));\n             }\n         }\n         if !word.starts_with(char::is_uppercase) {\n-            return Err(format!(\"Capitalize {:?}\", word));\n+            return Err(format!(\"Capitalize {word:?}\"));\n         }\n     }\n     Ok(())"}, {"sha": "269212ebb99c1b2d337216400a1a341aa03e8657", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -216,7 +216,7 @@ impl Server {\n     fn send_request_(&self, r: Request) -> Value {\n         let id = r.id.clone();\n         self.client.sender.send(r.clone().into()).unwrap();\n-        while let Some(msg) = self.recv().unwrap_or_else(|Timeout| panic!(\"timeout: {:?}\", r)) {\n+        while let Some(msg) = self.recv().unwrap_or_else(|Timeout| panic!(\"timeout: {r:?}\")) {\n             match msg {\n                 Message::Request(req) => {\n                     if req.method == \"client/registerCapability\" {\n@@ -228,19 +228,19 @@ impl Server {\n                             continue;\n                         }\n                     }\n-                    panic!(\"unexpected request: {:?}\", req)\n+                    panic!(\"unexpected request: {req:?}\")\n                 }\n                 Message::Notification(_) => (),\n                 Message::Response(res) => {\n                     assert_eq!(res.id, id);\n                     if let Some(err) = res.error {\n-                        panic!(\"error response: {:#?}\", err);\n+                        panic!(\"error response: {err:#?}\");\n                     }\n                     return res.result.unwrap();\n                 }\n             }\n         }\n-        panic!(\"no response for {:?}\", r);\n+        panic!(\"no response for {r:?}\");\n     }\n     pub(crate) fn wait_until_workspace_is_loaded(self) -> Server {\n         self.wait_for_message_cond(1, &|msg: &Message| match msg {"}, {"sha": "f7fceb588869634363418b5664105d5392536420", "filename": "crates/rust-analyzer/tests/slow-tests/testdir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftestdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftestdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftestdir.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -28,7 +28,7 @@ impl TestDir {\n         static CNT: AtomicUsize = AtomicUsize::new(0);\n         for _ in 0..100 {\n             let cnt = CNT.fetch_add(1, Ordering::Relaxed);\n-            let path = base.join(format!(\"{}_{}\", pid, cnt));\n+            let path = base.join(format!(\"{pid}_{cnt}\"));\n             if path.is_dir() {\n                 continue;\n             }\n@@ -53,7 +53,7 @@ impl Drop for TestDir {\n             return;\n         }\n         remove_dir_all(&self.path).unwrap_or_else(|err| {\n-            panic!(\"failed to remove temporary directory {}: {}\", self.path.display(), err)\n+            panic!(\"failed to remove temporary directory {}: {err}\", self.path.display())\n         })\n     }\n }"}, {"sha": "745faf424916d01519563fe40c8ac07a22e402f5", "filename": "crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -216,18 +216,18 @@ Zlib OR Apache-2.0 OR MIT\n         diff.push_str(\"New Licenses:\\n\");\n         for &l in licenses.iter() {\n             if !expected.contains(&l) {\n-                diff += &format!(\"  {}\\n\", l)\n+                diff += &format!(\"  {l}\\n\")\n             }\n         }\n \n         diff.push_str(\"\\nMissing Licenses:\\n\");\n         for &l in expected.iter() {\n             if !licenses.contains(&l) {\n-                diff += &format!(\"  {}\\n\", l)\n+                diff += &format!(\"  {l}\\n\")\n             }\n         }\n \n-        panic!(\"different set of licenses!\\n{}\", diff);\n+        panic!(\"different set of licenses!\\n{diff}\");\n     }\n     assert_eq!(licenses, expected);\n }\n@@ -316,7 +316,7 @@ fn check_test_attrs(path: &Path, text: &str) {\n         \"ide-assists/src/tests/generated.rs\",\n     ];\n     if text.contains(\"#[ignore\") && !need_ignore.iter().any(|p| path.ends_with(p)) {\n-        panic!(\"\\ndon't `#[ignore]` tests, see:\\n\\n    {}\\n\\n   {}\\n\", ignore_rule, path.display(),)\n+        panic!(\"\\ndon't `#[ignore]` tests, see:\\n\\n    {ignore_rule}\\n\\n   {}\\n\", path.display(),)\n     }\n \n     let panic_rule =\n@@ -438,7 +438,7 @@ impl TidyMarks {\n             self.hits.symmetric_difference(&self.checks).map(|it| it.as_str()).collect();\n \n         if !diff.is_empty() {\n-            panic!(\"unpaired marks: {:?}\", diff)\n+            panic!(\"unpaired marks: {diff:?}\")\n         }\n     }\n }"}, {"sha": "9d7a0c480bde535319dd4b863448c8c1fd1d66ec", "filename": "crates/sourcegen/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsourcegen%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsourcegen%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsourcegen%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -57,7 +57,7 @@ impl CommentBlock {\n     pub fn extract(tag: &str, text: &str) -> Vec<CommentBlock> {\n         assert!(tag.starts_with(char::is_uppercase));\n \n-        let tag = format!(\"{}:\", tag);\n+        let tag = format!(\"{tag}:\");\n         // Would be nice if we had `.retain_mut` here!\n         CommentBlock::extract_untagged(text)\n             .into_iter()\n@@ -163,7 +163,7 @@ pub fn reformat(text: String) -> String {\n }\n \n pub fn add_preamble(generator: &'static str, mut text: String) -> String {\n-    let preamble = format!(\"//! Generated by `{}`, do not edit by hand.\\n\\n\", generator);\n+    let preamble = format!(\"//! Generated by `{generator}`, do not edit by hand.\\n\\n\");\n     text.insert_str(0, &preamble);\n     text\n }"}, {"sha": "c3e8813b0e813356aa209f94fa4c83e1ee930a8b", "filename": "crates/stdx/src/panic_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fpanic_context.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -25,7 +25,7 @@ impl PanicContext {\n                 if !ctx.is_empty() {\n                     eprintln!(\"Panic context:\");\n                     for frame in ctx.iter() {\n-                        eprintln!(\"> {}\\n\", frame);\n+                        eprintln!(\"> {frame}\\n\");\n                     }\n                 }\n                 default_hook(panic_info);"}, {"sha": "bcfece4503c8dd38f2796de7dd8a74d3630925f9", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -616,7 +616,7 @@ fn main() {\n \n         let fmt_syntax = |syn: &SyntaxElement| match syn.kind() {\n             SyntaxKind::WHITESPACE => format!(\"{:?}\", syn.to_string()),\n-            _ => format!(\"{}\", syn),\n+            _ => format!(\"{syn}\"),\n         };\n \n         let insertions =\n@@ -637,7 +637,7 @@ fn main() {\n             .iter()\n             .sorted_by_key(|(syntax, _)| syntax.text_range().start())\n             .format_with(\"\\n\", |(k, v), f| {\n-                f(&format!(\"Line {}: {:?} -> {}\", line_number(k), k, fmt_syntax(v)))\n+                f(&format!(\"Line {}: {k:?} -> {}\", line_number(k), fmt_syntax(v)))\n             });\n \n         let deletions = diff"}, {"sha": "5bc6b780e47fa3ae74b50bb3080e3b1ebeac4d8b", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -87,7 +87,7 @@ impl IndentLevel {\n         for token in tokens {\n             if let Some(ws) = ast::Whitespace::cast(token) {\n                 if ws.text().contains('\\n') {\n-                    let new_ws = make::tokens::whitespace(&format!(\"{}{}\", ws.syntax(), self));\n+                    let new_ws = make::tokens::whitespace(&format!(\"{}{self}\", ws.syntax()));\n                     ted::replace(ws.syntax(), &new_ws);\n                 }\n             }\n@@ -103,7 +103,7 @@ impl IndentLevel {\n             if let Some(ws) = ast::Whitespace::cast(token) {\n                 if ws.text().contains('\\n') {\n                     let new_ws = make::tokens::whitespace(\n-                        &ws.syntax().text().replace(&format!(\"\\n{}\", self), \"\\n\"),\n+                        &ws.syntax().text().replace(&format!(\"\\n{self}\"), \"\\n\"),\n                     );\n                     ted::replace(ws.syntax(), &new_ws);\n                 }"}, {"sha": "d7ad4f332f36be2f91225266621d29ecb9be9ea3", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -481,7 +481,7 @@ impl ast::AssocItemList {\n             },\n         };\n         let elements: Vec<SyntaxElement<_>> = vec![\n-            make::tokens::whitespace(&format!(\"{}{}\", whitespace, indent)).into(),\n+            make::tokens::whitespace(&format!(\"{whitespace}{indent}\")).into(),\n             item.syntax().clone().into(),\n         ];\n         ted::insert_all(position, elements);\n@@ -537,7 +537,7 @@ impl ast::MatchArmList {\n             },\n         };\n         let indent = IndentLevel::from_node(self.syntax()) + 1;\n-        elements.push(make::tokens::whitespace(&format!(\"\\n{}\", indent)).into());\n+        elements.push(make::tokens::whitespace(&format!(\"\\n{indent}\")).into());\n         elements.push(arm.syntax().clone().into());\n         if needs_comma(&arm) {\n             ted::append_child(arm.syntax(), make::token(SyntaxKind::COMMA));\n@@ -555,7 +555,7 @@ impl ast::RecordExprFieldList {\n         let is_multiline = self.syntax().text().contains_char('\\n');\n         let whitespace = if is_multiline {\n             let indent = IndentLevel::from_node(self.syntax()) + 1;\n-            make::tokens::whitespace(&format!(\"\\n{}\", indent))\n+            make::tokens::whitespace(&format!(\"\\n{indent}\"))\n         } else {\n             make::tokens::single_space()\n         };\n@@ -616,7 +616,7 @@ impl ast::RecordPatFieldList {\n         let is_multiline = self.syntax().text().contains_char('\\n');\n         let whitespace = if is_multiline {\n             let indent = IndentLevel::from_node(self.syntax()) + 1;\n-            make::tokens::whitespace(&format!(\"\\n{}\", indent))\n+            make::tokens::whitespace(&format!(\"\\n{indent}\"))\n         } else {\n             make::tokens::single_space()\n         };\n@@ -681,7 +681,7 @@ impl ast::VariantList {\n             },\n         };\n         let elements: Vec<SyntaxElement<_>> = vec![\n-            make::tokens::whitespace(&format!(\"{}{}\", \"\\n\", indent)).into(),\n+            make::tokens::whitespace(&format!(\"{}{indent}\", \"\\n\")).into(),\n             variant.syntax().clone().into(),\n             ast::make::token(T![,]).into(),\n         ];\n@@ -704,11 +704,11 @@ fn normalize_ws_between_braces(node: &SyntaxNode) -> Option<()> {\n     match l.next_sibling_or_token() {\n         Some(ws) if ws.kind() == SyntaxKind::WHITESPACE => {\n             if ws.next_sibling_or_token()?.into_token()? == r {\n-                ted::replace(ws, make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n+                ted::replace(ws, make::tokens::whitespace(&format!(\"\\n{indent}\")));\n             }\n         }\n         Some(ws) if ws.kind() == T!['}'] => {\n-            ted::insert(Position::after(l), make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n+            ted::insert(Position::after(l), make::tokens::whitespace(&format!(\"\\n{indent}\")));\n         }\n         _ => (),\n     }"}, {"sha": "ca18196300df614a787ff551fde5efd30f6bd543", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -436,9 +436,7 @@ mod tests {\n \n     fn check_string_value<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n         assert_eq!(\n-            ast::String { syntax: make::tokens::literal(&format!(\"\\\"{}\\\"\", lit)) }\n-                .value()\n-                .as_deref(),\n+            ast::String { syntax: make::tokens::literal(&format!(\"\\\"{lit}\\\"\")) }.value().as_deref(),\n             expected.into()\n         );\n     }\n@@ -461,7 +459,7 @@ bcde\", \"abcde\",\n         expected: impl Into<Option<&'a [u8; N]>>,\n     ) {\n         assert_eq!(\n-            ast::ByteString { syntax: make::tokens::literal(&format!(\"b\\\"{}\\\"\", lit)) }\n+            ast::ByteString { syntax: make::tokens::literal(&format!(\"b\\\"{lit}\\\"\")) }\n                 .value()\n                 .as_deref(),\n             expected.into().map(|value| &value[..])"}, {"sha": "239a89f9b2d5200b6a671a44bc88b24fb0d2c53b", "filename": "crates/syntax/src/fuzz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ffuzz.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -36,7 +36,7 @@ impl CheckReparse {\n         let delete_len = usize::from_str(lines.next()?).ok()?;\n         let insert = lines.next()?.to_string();\n         let text = lines.collect::<Vec<_>>().join(\"\\n\");\n-        let text = format!(\"{}{}{}\", PREFIX, text, SUFFIX);\n+        let text = format!(\"{PREFIX}{text}{SUFFIX}\");\n         text.get(delete_start..delete_start.checked_add(delete_len)?)?; // make sure delete is a valid range\n         let delete =\n             TextRange::at(delete_start.try_into().unwrap(), delete_len.try_into().unwrap());\n@@ -60,8 +60,8 @@ impl CheckReparse {\n                 eprint!(\"reparsed:\\n{:#?}\", new_parse.tree().syntax());\n                 eprint!(\"full reparse:\\n{:#?}\", full_reparse.tree().syntax());\n                 assert_eq!(\n-                    format!(\"{:?}\", a),\n-                    format!(\"{:?}\", b),\n+                    format!(\"{a:?}\"),\n+                    format!(\"{b:?}\"),\n                     \"different syntax tree produced by the full reparse\"\n                 );\n             }"}, {"sha": "a3023c3195f3f0793d2f94453c55b8cff94a388b", "filename": "crates/syntax/src/hacks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Fhacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Fhacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fhacks.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -6,7 +6,7 @@ use crate::{ast, AstNode};\n \n pub fn parse_expr_from_str(s: &str) -> Option<ast::Expr> {\n     let s = s.trim();\n-    let file = ast::SourceFile::parse(&format!(\"const _: () = {};\", s));\n+    let file = ast::SourceFile::parse(&format!(\"const _: () = {s};\"));\n     let expr = file.syntax_node().descendants().find_map(ast::Expr::cast)?;\n     if expr.syntax().text() != s {\n         return None;"}, {"sha": "29788d05e845fbdca757dbb187d0f7574946289e", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -157,15 +157,15 @@ fn ws_before(position: &Position, new: &SyntaxElement) -> Option<SyntaxToken> {\n         if let Some(item_list) = prev.parent().and_then(ast::ItemList::cast) {\n             let mut indent = IndentLevel::from_element(&item_list.syntax().clone().into());\n             indent.0 += 1;\n-            return Some(make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n+            return Some(make::tokens::whitespace(&format!(\"\\n{indent}\")));\n         }\n     }\n \n     if prev.kind() == T!['{'] && ast::Stmt::can_cast(new.kind()) {\n         if let Some(stmt_list) = prev.parent().and_then(ast::StmtList::cast) {\n             let mut indent = IndentLevel::from_element(&stmt_list.syntax().clone().into());\n             indent.0 += 1;\n-            return Some(make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n+            return Some(make::tokens::whitespace(&format!(\"\\n{indent}\")));\n         }\n     }\n \n@@ -200,7 +200,7 @@ fn ws_between(left: &SyntaxElement, right: &SyntaxElement) -> Option<SyntaxToken\n         if left.kind() == SyntaxKind::USE {\n             indent.0 = IndentLevel::from_element(right).0.max(indent.0);\n         }\n-        return Some(make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n+        return Some(make::tokens::whitespace(&format!(\"\\n{indent}\")));\n     }\n     Some(make::tokens::single_space())\n }"}, {"sha": "9148c08b4af3f4ca5bd56a5e1c20f8dd3071d509", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -108,7 +108,7 @@ fn self_hosting_parsing() {\n             .into_iter()\n             .map(|(path, err)| format!(\"{}: {:?}\\n\", path.display(), err[0]))\n             .collect::<String>();\n-        panic!(\"Parsing errors:\\n{}\\n\", errors);\n+        panic!(\"Parsing errors:\\n{errors}\\n\");\n     }\n }\n \n@@ -181,6 +181,6 @@ fn rust_files_in_dir(dir: &Path) -> Vec<PathBuf> {\n /// so this should always be correct.\n fn read_text(path: &Path) -> String {\n     fs::read_to_string(path)\n-        .unwrap_or_else(|_| panic!(\"File at {:?} should be valid\", path))\n+        .unwrap_or_else(|_| panic!(\"File at {path:?} should be valid\"))\n         .replace(\"\\r\\n\", \"\\n\")\n }"}, {"sha": "d66ff7365f8e991ce50e96802e9696ccacf22549", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -328,7 +328,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n \n fn write_doc_comment(contents: &[String], dest: &mut String) {\n     for line in contents {\n-        writeln!(dest, \"///{}\", line).unwrap();\n+        writeln!(dest, \"///{line}\").unwrap();\n     }\n }\n \n@@ -501,7 +501,7 @@ fn to_pascal_case(s: &str) -> String {\n }\n \n fn pluralize(s: &str) -> String {\n-    format!(\"{}s\", s)\n+    format!(\"{s}s\")\n }\n \n impl Field {\n@@ -637,7 +637,7 @@ fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, label: Option<&String>, r\n             let mut name = grammar[*token].name.clone();\n             if name != \"int_number\" && name != \"string\" {\n                 if \"[]{}()\".contains(&name) {\n-                    name = format!(\"'{}'\", name);\n+                    name = format!(\"'{name}'\");\n                 }\n                 let field = Field::Token(name);\n                 acc.push(field);\n@@ -651,7 +651,7 @@ fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, label: Option<&String>, r\n                 acc.push(field);\n                 return;\n             }\n-            panic!(\"unhandled rule: {:?}\", rule)\n+            panic!(\"unhandled rule: {rule:?}\")\n         }\n         Rule::Labeled { label: l, rule } => {\n             assert!(label.is_none());"}, {"sha": "d6acdde383f1fdaeba6d0556d6eb4e708069a5ae", "filename": "crates/test-utils/src/assert_linear.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Ftest-utils%2Fsrc%2Fassert_linear.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Ftest-utils%2Fsrc%2Fassert_linear.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fassert_linear.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -83,7 +83,7 @@ impl Round {\n \n         let a = mean_y - b * mean_x;\n \n-        self.plot = format!(\"y_pred = {:.3} + {:.3} * x\\n\\nx     y     y_pred\\n\", a, b);\n+        self.plot = format!(\"y_pred = {a:.3} + {b:.3} * x\\n\\nx     y     y_pred\\n\");\n \n         let mut se = 0.0;\n         let mut max_error = 0.0f64;"}, {"sha": "e7bc64620b2ce3c1539e6c113fcba5d7e00d2df2", "filename": "crates/test-utils/src/fixture.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Ffixture.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -153,7 +153,7 @@ impl Fixture {\n                     && !line.contains('.')\n                     && line.chars().all(|it| !it.is_uppercase())\n                 {\n-                    panic!(\"looks like invalid metadata line: {:?}\", line);\n+                    panic!(\"looks like invalid metadata line: {line:?}\");\n                 }\n \n                 if let Some(entry) = res.last_mut() {\n@@ -172,7 +172,7 @@ impl Fixture {\n         let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n \n         let path = components[0].to_string();\n-        assert!(path.starts_with('/'), \"fixture path does not start with `/`: {:?}\", path);\n+        assert!(path.starts_with('/'), \"fixture path does not start with `/`: {path:?}\");\n \n         let mut krate = None;\n         let mut deps = Vec::new();\n@@ -184,9 +184,8 @@ impl Fixture {\n         let mut introduce_new_source_root = None;\n         let mut target_data_layout = None;\n         for component in components[1..].iter() {\n-            let (key, value) = component\n-                .split_once(':')\n-                .unwrap_or_else(|| panic!(\"invalid meta line: {:?}\", meta));\n+            let (key, value) =\n+                component.split_once(':').unwrap_or_else(|| panic!(\"invalid meta line: {meta:?}\"));\n             match key {\n                 \"crate\" => krate = Some(value.to_string()),\n                 \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n@@ -216,7 +215,7 @@ impl Fixture {\n                 }\n                 \"new_source_root\" => introduce_new_source_root = Some(value.to_string()),\n                 \"target_data_layout\" => target_data_layout = Some(value.to_string()),\n-                _ => panic!(\"bad component: {:?}\", component),\n+                _ => panic!(\"bad component: {component:?}\"),\n             }\n         }\n \n@@ -253,7 +252,7 @@ impl MiniCore {\n     #[track_caller]\n     fn assert_valid_flag(&self, flag: &str) {\n         if !self.valid_flags.iter().any(|it| it == flag) {\n-            panic!(\"invalid flag: {:?}, valid flags: {:?}\", flag, self.valid_flags);\n+            panic!(\"invalid flag: {flag:?}, valid flags: {:?}\", self.valid_flags);\n         }\n     }\n \n@@ -263,7 +262,7 @@ impl MiniCore {\n         let line = line.strip_prefix(\"//- minicore:\").unwrap().trim();\n         for entry in line.split(\", \") {\n             if res.has_flag(entry) {\n-                panic!(\"duplicate minicore flag: {:?}\", entry);\n+                panic!(\"duplicate minicore flag: {entry:?}\");\n             }\n             res.activated_flags.push(entry.to_owned());\n         }\n@@ -369,7 +368,7 @@ impl MiniCore {\n \n         for flag in &self.valid_flags {\n             if !seen_regions.iter().any(|it| it == flag) {\n-                panic!(\"unused minicore flag: {:?}\", flag);\n+                panic!(\"unused minicore flag: {flag:?}\");\n             }\n         }\n         buf"}, {"sha": "74468ea750d93f8d55885b91e6282853e9082ecf", "filename": "crates/test-utils/src/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Ftest-utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Ftest-utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -146,8 +146,8 @@ pub fn extract_range_or_offset(text: &str) -> (RangeOrOffset, String) {\n \n /// Extracts ranges, marked with `<tag> </tag>` pairs from the `text`\n pub fn extract_tags(mut text: &str, tag: &str) -> (Vec<(TextRange, Option<String>)>, String) {\n-    let open = format!(\"<{}\", tag);\n-    let close = format!(\"</{}>\", tag);\n+    let open = format!(\"<{tag}\");\n+    let close = format!(\"</{tag}>\");\n     let mut ranges = Vec::new();\n     let mut res = String::new();\n     let mut stack = Vec::new();\n@@ -169,8 +169,7 @@ pub fn extract_tags(mut text: &str, tag: &str) -> (Vec<(TextRange, Option<String\n                     stack.push((from, attr));\n                 } else if text.starts_with(&close) {\n                     text = &text[close.len()..];\n-                    let (from, attr) =\n-                        stack.pop().unwrap_or_else(|| panic!(\"unmatched </{}>\", tag));\n+                    let (from, attr) = stack.pop().unwrap_or_else(|| panic!(\"unmatched </{tag}>\"));\n                     let to = TextSize::of(&res);\n                     ranges.push((TextRange::new(from, to), attr));\n                 } else {\n@@ -180,7 +179,7 @@ pub fn extract_tags(mut text: &str, tag: &str) -> (Vec<(TextRange, Option<String\n             }\n         }\n     }\n-    assert!(stack.is_empty(), \"unmatched <{}>\", tag);\n+    assert!(stack.is_empty(), \"unmatched <{tag}>\");\n     ranges.sort_by_key(|r| (r.0.start(), r.0.end()));\n     (ranges, res)\n }\n@@ -413,8 +412,8 @@ pub fn format_diff(chunks: Vec<dissimilar::Chunk<'_>>) -> String {\n     for chunk in chunks {\n         let formatted = match chunk {\n             dissimilar::Chunk::Equal(text) => text.into(),\n-            dissimilar::Chunk::Delete(text) => format!(\"\\x1b[41m{}\\x1b[0m\", text),\n-            dissimilar::Chunk::Insert(text) => format!(\"\\x1b[42m{}\\x1b[0m\", text),\n+            dissimilar::Chunk::Delete(text) => format!(\"\\x1b[41m{text}\\x1b[0m\"),\n+            dissimilar::Chunk::Insert(text) => format!(\"\\x1b[42m{text}\\x1b[0m\"),\n         };\n         buf.push_str(&formatted);\n     }"}, {"sha": "353b09fd8c1edcd1261e61be5c792be2a21785ce", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -115,15 +115,15 @@ fn print_debug_subtree(f: &mut fmt::Formatter<'_>, subtree: &Subtree, level: usi\n \n     let aux = match subtree.delimiter.map(|it| (it.kind, it.id.0)) {\n         None => \"$\".to_string(),\n-        Some((DelimiterKind::Parenthesis, id)) => format!(\"() {}\", id),\n-        Some((DelimiterKind::Brace, id)) => format!(\"{{}} {}\", id),\n-        Some((DelimiterKind::Bracket, id)) => format!(\"[] {}\", id),\n+        Some((DelimiterKind::Parenthesis, id)) => format!(\"() {id}\"),\n+        Some((DelimiterKind::Brace, id)) => format!(\"{{}} {id}\"),\n+        Some((DelimiterKind::Bracket, id)) => format!(\"[] {id}\"),\n     };\n \n     if subtree.token_trees.is_empty() {\n-        write!(f, \"{}SUBTREE {}\", align, aux)?;\n+        write!(f, \"{align}SUBTREE {aux}\")?;\n     } else {\n-        writeln!(f, \"{}SUBTREE {}\", align, aux)?;\n+        writeln!(f, \"{align}SUBTREE {aux}\")?;\n         for (idx, child) in subtree.token_trees.iter().enumerate() {\n             print_debug_token(f, child, level + 1)?;\n             if idx != subtree.token_trees.len() - 1 {\n@@ -140,7 +140,7 @@ fn print_debug_token(f: &mut fmt::Formatter<'_>, tkn: &TokenTree, level: usize)\n \n     match tkn {\n         TokenTree::Leaf(leaf) => match leaf {\n-            Leaf::Literal(lit) => write!(f, \"{}LITERAL {} {}\", align, lit.text, lit.id.0)?,\n+            Leaf::Literal(lit) => write!(f, \"{align}LITERAL {} {}\", lit.text, lit.id.0)?,\n             Leaf::Punct(punct) => write!(\n                 f,\n                 \"{}PUNCH   {} [{}] {}\",\n@@ -149,7 +149,7 @@ fn print_debug_token(f: &mut fmt::Formatter<'_>, tkn: &TokenTree, level: usize)\n                 if punct.spacing == Spacing::Alone { \"alone\" } else { \"joint\" },\n                 punct.id.0\n             )?,\n-            Leaf::Ident(ident) => write!(f, \"{}IDENT   {} {}\", align, ident.text, ident.id.0)?,\n+            Leaf::Ident(ident) => write!(f, \"{align}IDENT   {} {}\", ident.text, ident.id.0)?,\n         },\n         TokenTree::Subtree(subtree) => {\n             print_debug_subtree(f, subtree, level)?;\n@@ -312,7 +312,7 @@ pub fn pretty(tkns: &[TokenTree]) -> String {\n                     Some(DelimiterKind::Parenthesis) => (\"(\", \")\"),\n                     Some(DelimiterKind::Bracket) => (\"[\", \"]\"),\n                 };\n-                format!(\"{}{}{}\", open, content, close)\n+                format!(\"{open}{content}{close}\")\n             }\n         }\n     }"}, {"sha": "b23c9f1966d5c5effcda627c04fe6e4bd1770f6d", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -364,7 +364,7 @@ impl VirtualPath {\n             path = &path[\"../\".len()..];\n         }\n         path = path.trim_start_matches(\"./\");\n-        res.0 = format!(\"{}/{}\", res.0, path);\n+        res.0 = format!(\"{}/{path}\", res.0);\n         Some(res)\n     }\n "}, {"sha": "2f270afbbf1996c85cfb9c9f3b1c67c00439a265", "filename": "lib/lsp-server/examples/goto_def.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/lib%2Flsp-server%2Fexamples%2Fgoto_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/lib%2Flsp-server%2Fexamples%2Fgoto_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Flsp-server%2Fexamples%2Fgoto_def.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -80,32 +80,32 @@ fn main_loop(\n     let _params: InitializeParams = serde_json::from_value(params).unwrap();\n     eprintln!(\"starting example main loop\");\n     for msg in &connection.receiver {\n-        eprintln!(\"got msg: {:?}\", msg);\n+        eprintln!(\"got msg: {msg:?}\");\n         match msg {\n             Message::Request(req) => {\n                 if connection.handle_shutdown(&req)? {\n                     return Ok(());\n                 }\n-                eprintln!(\"got request: {:?}\", req);\n+                eprintln!(\"got request: {req:?}\");\n                 match cast::<GotoDefinition>(req) {\n                     Ok((id, params)) => {\n-                        eprintln!(\"got gotoDefinition request #{}: {:?}\", id, params);\n+                        eprintln!(\"got gotoDefinition request #{id}: {params:?}\");\n                         let result = Some(GotoDefinitionResponse::Array(Vec::new()));\n                         let result = serde_json::to_value(&result).unwrap();\n                         let resp = Response { id, result: Some(result), error: None };\n                         connection.sender.send(Message::Response(resp))?;\n                         continue;\n                     }\n-                    Err(err @ ExtractError::JsonError { .. }) => panic!(\"{:?}\", err),\n+                    Err(err @ ExtractError::JsonError { .. }) => panic!(\"{err:?}\"),\n                     Err(ExtractError::MethodMismatch(req)) => req,\n                 };\n                 // ...\n             }\n             Message::Response(resp) => {\n-                eprintln!(\"got response: {:?}\", resp);\n+                eprintln!(\"got response: {resp:?}\");\n             }\n             Message::Notification(not) => {\n-                eprintln!(\"got notification: {:?}\", not);\n+                eprintln!(\"got notification: {not:?}\");\n             }\n         }\n     }"}, {"sha": "8c3c81feabc1e4482b226417ac5e181bc74b4728", "filename": "lib/lsp-server/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/lib%2Flsp-server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/lib%2Flsp-server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Flsp-server%2Fsrc%2Flib.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -123,7 +123,7 @@ impl Connection {\n                     let resp = Response::new_err(\n                         req.id.clone(),\n                         ErrorCode::ServerNotInitialized as i32,\n-                        format!(\"expected initialize request, got {:?}\", req),\n+                        format!(\"expected initialize request, got {req:?}\"),\n                     );\n                     self.sender.send(resp.into()).unwrap();\n                 }\n@@ -221,11 +221,9 @@ impl Connection {\n         match &self.receiver.recv_timeout(std::time::Duration::from_secs(30)) {\n             Ok(Message::Notification(n)) if n.is_exit() => (),\n             Ok(msg) => {\n-                return Err(ProtocolError(format!(\"unexpected message during shutdown: {:?}\", msg)))\n-            }\n-            Err(e) => {\n-                return Err(ProtocolError(format!(\"unexpected error during shutdown: {}\", e)))\n+                return Err(ProtocolError(format!(\"unexpected message during shutdown: {msg:?}\")))\n             }\n+            Err(e) => return Err(ProtocolError(format!(\"unexpected error during shutdown: {e}\"))),\n         }\n         Ok(true)\n     }"}, {"sha": "410276bc45beffc962729741609ff1a37392e2e1", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -26,10 +26,10 @@ impl flags::Dist {\n \n         if let Some(patch_version) = self.client_patch_version {\n             let version = if stable {\n-                format!(\"{}.{}\", VERSION_STABLE, patch_version)\n+                format!(\"{VERSION_STABLE}.{patch_version}\")\n             } else {\n                 // A hack to make VS Code prefer nightly over stable.\n-                format!(\"{}.{}\", VERSION_NIGHTLY, patch_version)\n+                format!(\"{VERSION_NIGHTLY}.{patch_version}\")\n             };\n             dist_server(sh, &format!(\"{version}-standalone\"), &target)?;\n             let release_tag = if stable { date_iso(sh)? } else { \"nightly\".to_string() };\n@@ -59,10 +59,10 @@ fn dist_client(\n     let mut patch = Patch::new(sh, \"./package.json\")?;\n     patch\n         .replace(\n-            &format!(r#\"\"version\": \"{}.0-dev\"\"#, VERSION_DEV),\n-            &format!(r#\"\"version\": \"{}\"\"#, version),\n+            &format!(r#\"\"version\": \"{VERSION_DEV}.0-dev\"\"#),\n+            &format!(r#\"\"version\": \"{version}\"\"#),\n         )\n-        .replace(r#\"\"releaseTag\": null\"#, &format!(r#\"\"releaseTag\": \"{}\"\"#, release_tag))\n+        .replace(r#\"\"releaseTag\": null\"#, &format!(r#\"\"releaseTag\": \"{release_tag}\"\"#))\n         .replace(r#\"\"$generated-start\": {},\"#, \"\")\n         .replace(\",\\n                \\\"$generated-end\\\": {}\", \"\")\n         .replace(r#\"\"enabledApiProposals\": [],\"#, r#\"\"#);\n@@ -130,8 +130,8 @@ impl Target {\n         } else {\n             (String::new(), None)\n         };\n-        let server_path = out_path.join(format!(\"rust-analyzer{}\", exe_suffix));\n-        let artifact_name = format!(\"rust-analyzer-{}{}\", name, exe_suffix);\n+        let server_path = out_path.join(format!(\"rust-analyzer{exe_suffix}\"));\n+        let artifact_name = format!(\"rust-analyzer-{name}{exe_suffix}\");\n         Self { name, server_path, symbols_path, artifact_name }\n     }\n }"}, {"sha": "b6f730dbf126276d1dda377b663ef5a34bb6e016", "filename": "xtask/src/metrics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/xtask%2Fsrc%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/xtask%2Fsrc%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmetrics.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -87,7 +87,7 @@ impl Metrics {\n         self.measure_analysis_stats_path(\n             sh,\n             bench,\n-            &format!(\"./target/rustc-perf/collector/benchmarks/{}\", bench),\n+            &format!(\"./target/rustc-perf/collector/benchmarks/{bench}\"),\n         )\n     }\n     fn measure_analysis_stats_path("}, {"sha": "bfbe95569641360285a66b193a89ee04eb27e226", "filename": "xtask/src/release.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/xtask%2Fsrc%2Frelease.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/xtask%2Fsrc%2Frelease.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -64,7 +64,7 @@ impl flags::Release {\n         let prev_tag = tags.lines().filter(|line| is_release_tag(line)).last().unwrap();\n \n         let contents = changelog::get_changelog(sh, changelog_n, &commit, prev_tag, &today)?;\n-        let path = changelog_dir.join(format!(\"{}-changelog-{}.adoc\", today, changelog_n));\n+        let path = changelog_dir.join(format!(\"{today}-changelog-{changelog_n}.adoc\"));\n         sh.write_file(&path, &contents)?;\n \n         Ok(())"}, {"sha": "4a06bb9ac081d4b0769a3032f3e9cb024e54f06c", "filename": "xtask/src/release/changelog.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e16c76e3c30fd1123921e33f408d99b5cb40532f/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c76e3c30fd1123921e33f408d99b5cb40532f/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease%2Fchangelog.rs?ref=e16c76e3c30fd1123921e33f408d99b5cb40532f", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn get_changelog(\n         let line = line.trim_start();\n         if let Some(pr_num) = parse_pr_number(&line) {\n             let accept = \"Accept: application/vnd.github.v3+json\";\n-            let authorization = format!(\"Authorization: token {}\", token);\n+            let authorization = format!(\"Authorization: token {token}\");\n             let pr_url = \"https://api.github.com/repos/rust-lang/rust-analyzer/issues\";\n \n             // we don't use an HTTPS client or JSON parser to keep the build times low\n@@ -57,7 +57,7 @@ pub(crate) fn get_changelog(\n                 PrKind::Other => &mut others,\n                 PrKind::Skip => continue,\n             };\n-            writeln!(s, \"* pr:{}[] {}\", pr_num, l.message.as_deref().unwrap_or(&pr_title)).unwrap();\n+            writeln!(s, \"* pr:{pr_num}[] {}\", l.message.as_deref().unwrap_or(&pr_title)).unwrap();\n         }\n     }\n "}]}