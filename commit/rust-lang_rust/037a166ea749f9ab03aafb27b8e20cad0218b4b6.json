{"sha": "037a166ea749f9ab03aafb27b8e20cad0218b4b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzN2ExNjZlYTc0OWY5YWIwM2FhZmIyN2I4ZTIwY2FkMDIxOGI0YjY=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-22T22:51:11Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-22T22:51:11Z"}, "message": "Updating pbfs for new kind rules.", "tree": {"sha": "5e1e4fb1da7a21ae42b4dbf7e06839939dbbe050", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e1e4fb1da7a21ae42b4dbf7e06839939dbbe050"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/037a166ea749f9ab03aafb27b8e20cad0218b4b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/037a166ea749f9ab03aafb27b8e20cad0218b4b6", "html_url": "https://github.com/rust-lang/rust/commit/037a166ea749f9ab03aafb27b8e20cad0218b4b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/037a166ea749f9ab03aafb27b8e20cad0218b4b6/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b62d92c993b9206b05be30ae7722adc6bdf91946", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62d92c993b9206b05be30ae7722adc6bdf91946", "html_url": "https://github.com/rust-lang/rust/commit/b62d92c993b9206b05be30ae7722adc6bdf91946"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "09f2e265de3be0f4b40d6bbc8a5b50bee961be40", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/037a166ea749f9ab03aafb27b8e20cad0218b4b6/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037a166ea749f9ab03aafb27b8e20cad0218b4b6/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=037a166ea749f9ab03aafb27b8e20cad0218b4b6", "patch": "@@ -38,7 +38,7 @@ fn create_queue<T: send>() -> queue<T> {\n     let p = port();\n     let c = chan(p);\n \n-    impl<T: send> of queue<T> for repr<T> {\n+    impl<T: copy send> of queue<T> for repr<T> {\n         fn add_back(x : T) {\n             let x = x;\n             send(self.c, x);\n@@ -524,7 +524,8 @@ const min_granularity : uint = 1024u;\n \n This is used to build most of the other parallel vector functions,\n like map or alli.\"]\n-fn map_slices<A: send, B: send>(xs: [A], f: fn~(uint, [const A]/&) -> B) \n+fn map_slices<A: copy send, B: copy send>(xs: [A],\n+                                          f: fn~(uint, [const A]/&) -> B) \n     -> [B] {\n \n     let len = xs.len();\n@@ -577,14 +578,14 @@ fn map_slices<A: send, B: send>(xs: [A], f: fn~(uint, [const A]/&) -> B)\n }\n \n #[doc=\"A parallel version of map.\"]\n-fn map<A: send, B: send>(xs: [A], f: fn~(A) -> B) -> [B] {\n+fn map<A: copy send, B: copy send>(xs: [A], f: fn~(A) -> B) -> [B] {\n     vec::concat(map_slices(xs) {|_base, slice|\n         vec::map(slice, f)\n     })\n }\n \n #[doc=\"A parallel version of mapi.\"]\n-fn mapi<A: send, B: send>(xs: [A], f: fn~(uint, A) -> B) -> [B] {\n+fn mapi<A: copy send, B: copy send>(xs: [A], f: fn~(uint, A) -> B) -> [B] {\n     let slices = map_slices(xs) {|base, slice|\n         vec::mapi(slice) {|i, x|\n             f(i + base, x)\n@@ -597,7 +598,7 @@ fn mapi<A: send, B: send>(xs: [A], f: fn~(uint, A) -> B) -> [B] {\n }\n \n #[doc=\"Returns true if the function holds for all elements in the vector.\"]\n-fn alli<A: send>(xs: [A], f: fn~(uint, A) -> bool) -> bool {\n+fn alli<A: copy send>(xs: [A], f: fn~(uint, A) -> bool) -> bool {\n     vec::all(map_slices(xs) {|base, slice|\n         vec::alli(slice) {|i, x|\n             f(i + base, x)\n@@ -606,7 +607,7 @@ fn alli<A: send>(xs: [A], f: fn~(uint, A) -> bool) -> bool {\n }\n \n     #[doc=\"Returns true if the function holds for any elements in the vector.\"]\n-    fn any<A: send>(xs: [A], f: fn~(A) -> bool) -> bool {\n+    fn any<A: copy send>(xs: [A], f: fn~(A) -> bool) -> bool {\n         vec::any(map_slices(xs) {|_base, slice|\n             vec::any(slice, f)\n         }) {|x| x }"}]}