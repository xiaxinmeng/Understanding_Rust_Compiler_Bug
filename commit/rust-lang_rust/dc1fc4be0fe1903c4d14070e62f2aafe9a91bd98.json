{"sha": "dc1fc4be0fe1903c4d14070e62f2aafe9a91bd98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMWZjNGJlMGZlMTkwM2M0ZDE0MDcwZTYyZjJhYWZlOWE5MWJkOTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2016-04-11T16:49:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2016-04-11T19:56:54Z"}, "message": "unify format_string and format_file", "tree": {"sha": "4697644e6aa1ffe0be341e81047cf1c86df338f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4697644e6aa1ffe0be341e81047cf1c86df338f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc1fc4be0fe1903c4d14070e62f2aafe9a91bd98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1fc4be0fe1903c4d14070e62f2aafe9a91bd98", "html_url": "https://github.com/rust-lang/rust/commit/dc1fc4be0fe1903c4d14070e62f2aafe9a91bd98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc1fc4be0fe1903c4d14070e62f2aafe9a91bd98/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19849fea15badfb96539034b4dd646eb2d3a551d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19849fea15badfb96539034b4dd646eb2d3a551d", "html_url": "https://github.com/rust-lang/rust/commit/19849fea15badfb96539034b4dd646eb2d3a551d"}], "stats": {"total": 91, "additions": 37, "deletions": 54}, "files": [{"sha": "93267ef7af339789698d05cc2568980e77a4c5ee", "filename": "src/lib.rs", "status": "modified", "additions": 29, "deletions": 54, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/dc1fc4be0fe1903c4d14070e62f2aafe9a91bd98/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1fc4be0fe1903c4d14070e62f2aafe9a91bd98/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dc1fc4be0fe1903c4d14070e62f2aafe9a91bd98", "patch": "@@ -27,7 +27,7 @@ extern crate term;\n \n use syntax::ast;\n use syntax::codemap::{mk_sp, CodeMap, Span};\n-use syntax::errors::Handler;\n+use syntax::errors::{Handler, DiagnosticBuilder};\n use syntax::errors::emitter::{ColorConfig, EmitterWriter};\n use syntax::parse::{self, ParseSess};\n \n@@ -263,11 +263,11 @@ impl fmt::Display for FormatReport {\n }\n \n // Formatting which depends on the AST.\n-fn fmt_ast(krate: &ast::Crate,\n-           parse_session: &ParseSess,\n-           main_file: &Path,\n-           config: &Config)\n-           -> FileMap {\n+fn format_ast(krate: &ast::Crate,\n+              parse_session: &ParseSess,\n+              main_file: &Path,\n+              config: &Config)\n+              -> FileMap {\n     let mut file_map = FileMap::new();\n     for (path, module) in modules::list_files(krate, parse_session.codemap()) {\n         if config.skip_children && path.as_path() != main_file {\n@@ -367,43 +367,18 @@ fn format_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n     report\n }\n \n-fn format_string(input: String, config: &Config) -> FileMap {\n-    let path = \"stdin\";\n-    let codemap = Rc::new(CodeMap::new());\n-\n-    let tty_handler = Handler::with_tty_emitter(ColorConfig::Auto,\n-                                                None,\n-                                                true,\n-                                                false,\n-                                                codemap.clone());\n-    let mut parse_session = ParseSess::with_span_handler(tty_handler, codemap.clone());\n-\n-    let krate = parse::parse_crate_from_source_str(path.to_owned(),\n-                                                   input,\n-                                                   Vec::new(),\n-                                                   &parse_session)\n-                    .unwrap();\n-\n-    // Suppress error output after parsing.\n-    let silent_emitter = Box::new(EmitterWriter::new(Box::new(Vec::new()), None, codemap.clone()));\n-    parse_session.span_diagnostic = Handler::with_emitter(true, false, silent_emitter);\n-\n-    // FIXME: we still use a FileMap even though we only have\n-    // one file, because fmt_lines requires a FileMap\n-    let mut file_map = FileMap::new();\n-\n-    // do the actual formatting\n-    let mut visitor = FmtVisitor::from_codemap(&parse_session, config);\n-    visitor.format_separate_mod(&krate.module);\n-\n-    // append final newline\n-    visitor.buffer.push_str(\"\\n\");\n-    file_map.insert(path.to_owned(), visitor.buffer);\n+fn parse_input(input: Input, parse_session: &ParseSess) -> Result<ast::Crate, DiagnosticBuilder> {\n+    let krate = match input {\n+        Input::File(file) => parse::parse_crate_from_file(&file, Vec::new(), &parse_session),\n+        Input::Text(text) => {\n+            parse::parse_crate_from_source_str(\"stdin\".to_owned(), text, Vec::new(), &parse_session)\n+        }\n+    };\n \n-    file_map\n+    krate\n }\n \n-fn format_file(file: &Path, config: &Config) -> FileMap {\n+pub fn format_input(input: Input, config: &Config) -> (FileMap, FormatReport) {\n     let codemap = Rc::new(CodeMap::new());\n \n     let tty_handler = Handler::with_tty_emitter(ColorConfig::Auto,\n@@ -413,27 +388,29 @@ fn format_file(file: &Path, config: &Config) -> FileMap {\n                                                 codemap.clone());\n     let mut parse_session = ParseSess::with_span_handler(tty_handler, codemap.clone());\n \n-    let krate = parse::parse_crate_from_file(file, Vec::new(), &parse_session).unwrap();\n+    let main_file = match input {\n+        Input::File(ref file) => file.clone(),\n+        Input::Text(..) => PathBuf::from(\"stdin\"),\n+    };\n+\n+    let krate = match parse_input(input, &parse_session) {\n+        Ok(krate) => krate,\n+        Err(mut diagnostic) => {\n+            diagnostic.emit();\n+            panic!(\"Unrecoverable parse error\");\n+        }\n+    };\n \n     // Suppress error output after parsing.\n     let silent_emitter = Box::new(EmitterWriter::new(Box::new(Vec::new()), None, codemap.clone()));\n     parse_session.span_diagnostic = Handler::with_emitter(true, false, silent_emitter);\n \n-    let mut file_map = fmt_ast(&krate, &parse_session, file, config);\n+    let mut file_map = format_ast(&krate, &parse_session, &main_file, config);\n \n     // For some reason, the codemap does not include terminating\n     // newlines so we must add one on for each file. This is sad.\n     filemap::append_newlines(&mut file_map);\n \n-    file_map\n-}\n-\n-pub fn format_input(input: Input, config: &Config) -> (FileMap, FormatReport) {\n-    let mut file_map = match input {\n-        Input::File(ref file) => format_file(file, config),\n-        Input::Text(text) => format_string(text, config),\n-    };\n-\n     let report = format_lines(&mut file_map, config);\n     (file_map, report)\n }\n@@ -455,8 +432,6 @@ pub fn run(input: Input, config: &Config) {\n     let write_result = filemap::write_all_files(&file_map, &mut out, config);\n \n     if let Err(msg) = write_result {\n-        if !ignore_errors {\n-            msg!(\"Error writing files: {}\", msg);\n-        }\n+        msg!(\"Error writing files: {}\", msg);\n     }\n }"}, {"sha": "6b13e77a7be40dd906f0af45922e3e9052612bcf", "filename": "tests/system.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc1fc4be0fe1903c4d14070e62f2aafe9a91bd98/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1fc4be0fe1903c4d14070e62f2aafe9a91bd98/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=dc1fc4be0fe1903c4d14070e62f2aafe9a91bd98", "patch": "@@ -139,6 +139,14 @@ fn self_tests() {\n             warnings);\n }\n \n+#[test]\n+fn stdin_formatting_smoke_test() {\n+    let input = Input::Text(\"fn main () {}\".to_owned());\n+    let config = Config::default();\n+    let (file_map, _report) = format_input(input, &config);\n+    assert_eq!(file_map[\"stdin\"].to_string(), \"fn main() {}\\n\")\n+}\n+\n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n fn check_files<I>(files: I) -> (Vec<FormatReport>, u32, u32)"}]}