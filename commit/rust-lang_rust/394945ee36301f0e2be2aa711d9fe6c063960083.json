{"sha": "394945ee36301f0e2be2aa711d9fe6c063960083", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NDk0NWVlMzYzMDFmMGUyYmUyYWE3MTFkOWZlNmMwNjM5NjAwODM=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2018-05-02T03:02:05Z"}, "committer": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2018-05-13T19:51:32Z"}, "message": "stabilize :lifetime", "tree": {"sha": "15051dff7208993884c142fc2bc7a9a8ae43fb52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15051dff7208993884c142fc2bc7a9a8ae43fb52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/394945ee36301f0e2be2aa711d9fe6c063960083", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/394945ee36301f0e2be2aa711d9fe6c063960083", "html_url": "https://github.com/rust-lang/rust/commit/394945ee36301f0e2be2aa711d9fe6c063960083", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/394945ee36301f0e2be2aa711d9fe6c063960083/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fae1537462bb10fd17d07816efc17cfe4786806", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fae1537462bb10fd17d07816efc17cfe4786806", "html_url": "https://github.com/rust-lang/rust/commit/9fae1537462bb10fd17d07816efc17cfe4786806"}], "stats": {"total": 68, "additions": 4, "deletions": 64}, "files": [{"sha": "5b585d7f041d25877b2bd339cb01e7100f9413c3", "filename": "src/doc/unstable-book/src/language-features/macro-lifetime-matcher.md", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fae1537462bb10fd17d07816efc17cfe4786806/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-lifetime-matcher.md", "raw_url": "https://github.com/rust-lang/rust/raw/9fae1537462bb10fd17d07816efc17cfe4786806/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-lifetime-matcher.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-lifetime-matcher.md?ref=9fae1537462bb10fd17d07816efc17cfe4786806", "patch": "@@ -1,14 +0,0 @@\n-# `macro_lifetime_matcher`\n-\n-The tracking issue for this feature is: [#46895]\n-\n-With this feature gate enabled, the [list of fragment specifiers][frags] gains one more entry:\n-\n-* `lifetime`: a lifetime. Examples: 'static, 'a.\n-\n-A `lifetime` variable may be followed by anything.\n-\n-[#46895]: https://github.com/rust-lang/rust/issues/46895\n-[frags]: ../book/first-edition/macros.html#syntactic-requirements\n-\n-------------------------"}, {"sha": "b9928a08131f25c703b5fc042b083ef8e7ce4acd", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=394945ee36301f0e2be2aa711d9fe6c063960083", "patch": "@@ -50,7 +50,6 @@\n #![feature(from_ref)]\n #![feature(fs_read_write)]\n #![cfg_attr(windows, feature(libc))]\n-#![feature(macro_lifetime_matcher)]\n #![feature(macro_vis_matcher)]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]"}, {"sha": "60016a0d864517acb6dff2bac1ba82066f1692ea", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=394945ee36301f0e2be2aa711d9fe6c063960083", "patch": "@@ -15,9 +15,7 @@\n #![feature(box_patterns)]\n #![feature(fs_read_write)]\n #![feature(libc)]\n-#![feature(macro_lifetime_matcher)]\n #![feature(proc_macro_internals)]\n-#![feature(macro_lifetime_matcher)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]"}, {"sha": "bfcb23c1fb8910454cb27aea49e90f81bd3a162c", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=394945ee36301f0e2be2aa711d9fe6c063960083", "patch": "@@ -12,7 +12,6 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(custom_attribute)]\n-#![feature(macro_lifetime_matcher)]\n #![allow(unused_attributes)]\n \n #[macro_use]"}, {"sha": "e96a0e838cfcd50a46429727a3b3180294d1e039", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=394945ee36301f0e2be2aa711d9fe6c063960083", "patch": "@@ -904,20 +904,8 @@ fn is_legal_fragment_specifier(sess: &ParseSess,\n                                frag_name: &str,\n                                frag_span: Span) -> bool {\n     match frag_name {\n-        \"item\" | \"block\" | \"stmt\" | \"expr\" | \"pat\" |\n+        \"item\" | \"block\" | \"stmt\" | \"expr\" | \"pat\" | \"lifetime\" |\n         \"path\" | \"ty\" | \"ident\" | \"meta\" | \"tt\" | \"\" => true,\n-        \"lifetime\" => {\n-            if !features.macro_lifetime_matcher &&\n-               !attr::contains_name(attrs, \"allow_internal_unstable\") {\n-                let explain = feature_gate::EXPLAIN_LIFETIME_MATCHER;\n-                emit_feature_err(sess,\n-                                 \"macro_lifetime_matcher\",\n-                                 frag_span,\n-                                 GateIssue::Language,\n-                                 explain);\n-            }\n-            true\n-        },\n         \"literal\" => {\n             if !features.macro_literal_matcher &&\n                !attr::contains_name(attrs, \"allow_internal_unstable\") {"}, {"sha": "cb5125fe9ef5a25f9209cf09058e094f0f7d8d91", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=394945ee36301f0e2be2aa711d9fe6c063960083", "patch": "@@ -396,9 +396,6 @@ declare_features! (\n     // Termination trait in tests (RFC 1937)\n     (active, termination_trait_test, \"1.24.0\", Some(48854), Some(Edition::Edition2018)),\n \n-    // Allows use of the :lifetime macro fragment specifier\n-    (active, macro_lifetime_matcher, \"1.24.0\", Some(46895), None),\n-\n     // `extern` in paths\n     (active, extern_in_paths, \"1.23.0\", Some(44660), None),\n \n@@ -598,6 +595,8 @@ declare_features! (\n     (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n     // allow `#[must_use]` on functions; and, must-use operators (RFC 1940)\n     (accepted, fn_must_use, \"1.27.0\", Some(43302), None),\n+    // Allows use of the :lifetime macro fragment specifier\n+    (accepted, macro_lifetime_matcher, \"1.27.0\", Some(34303), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1331,9 +1330,6 @@ pub const EXPLAIN_DERIVE_UNDERSCORE: &'static str =\n pub const EXPLAIN_VIS_MATCHER: &'static str =\n     \":vis fragment specifier is experimental and subject to change\";\n \n-pub const EXPLAIN_LIFETIME_MATCHER: &'static str =\n-    \":lifetime fragment specifier is experimental and subject to change\";\n-\n pub const EXPLAIN_LITERAL_MATCHER: &'static str =\n     \":literal fragment specifier is experimental and subject to change\";\n "}, {"sha": "b9e1fde6b1f3e10efb0ea203e6ad4ee7d52ca39d", "filename": "src/test/run-pass/macro-lifetime-used-with-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-bound.rs?ref=394945ee36301f0e2be2aa711d9fe6c063960083", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(macro_lifetime_matcher)]\n-\n macro_rules! foo {\n     ($l:lifetime, $l2:lifetime) => {\n         fn f<$l: $l2, $l2>(arg: &$l str, arg2: &$l2 str) -> &$l str {"}, {"sha": "d003d7dcfb6206ba75ba87e51cfc12edac19a2ce", "filename": "src/test/run-pass/macro-lifetime-used-with-labels.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-labels.rs?ref=394945ee36301f0e2be2aa711d9fe6c063960083", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(unreachable_code)]\n-#![feature(macro_lifetime_matcher)]\n \n macro_rules! x {\n     ($a:lifetime) => {"}, {"sha": "5c1f8683e00f600a6c165f660265a8f4931c57fe", "filename": "src/test/run-pass/macro-lifetime-used-with-static.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-static.rs?ref=394945ee36301f0e2be2aa711d9fe6c063960083", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(macro_lifetime_matcher)]\n-\n macro_rules! foo {\n     ($l:lifetime) => {\n         fn f(arg: &$l str) -> &$l str {"}, {"sha": "ff5798ff78d62837e9c475c21296a7577786775c", "filename": "src/test/run-pass/macro-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Ftest%2Frun-pass%2Fmacro-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Ftest%2Frun-pass%2Fmacro-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-lifetime.rs?ref=394945ee36301f0e2be2aa711d9fe6c063960083", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(macro_lifetime_matcher)]\n-\n macro_rules! foo {\n     ($l:lifetime) => {\n         fn f<$l>(arg: &$l str) -> &$l str {"}, {"sha": "0d107d283cdff39818d955c902fe0e7091c2dfc1", "filename": "src/test/ui/feature-gate-macro-lifetime-matcher.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9fae1537462bb10fd17d07816efc17cfe4786806/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fae1537462bb10fd17d07816efc17cfe4786806/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.rs?ref=9fae1537462bb10fd17d07816efc17cfe4786806", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that the :lifetime macro fragment cannot be used when macro_lifetime_matcher\n-// feature gate is not used.\n-\n-macro_rules! m { ($lt:lifetime) => {} }\n-//~^ ERROR :lifetime fragment specifier is experimental and subject to change\n-\n-fn main() {\n-    m!('a);\n-}"}, {"sha": "54d280a63e7984637b095d8b3aafe0b024d2040e", "filename": "src/test/ui/macros/nonterminal-matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394945ee36301f0e2be2aa711d9fe6c063960083/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs?ref=394945ee36301f0e2be2aa711d9fe6c063960083", "patch": "@@ -11,7 +11,7 @@\n // Check that we are refusing to match on complex nonterminals for which tokens are\n // unavailable and we'd have to go through AST comparisons.\n \n-#![feature(decl_macro, macro_lifetime_matcher)]\n+#![feature(decl_macro)]\n \n macro simple_nonterminal($nt_ident: ident, $nt_lifetime: lifetime, $nt_tt: tt) {\n     macro n(a $nt_ident b $nt_lifetime c $nt_tt d) {"}]}