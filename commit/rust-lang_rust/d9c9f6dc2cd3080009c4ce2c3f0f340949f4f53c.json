{"sha": "d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YzlmNmRjMmNkMzA4MDAwOWM0Y2UyYzNmMGYzNDA5NDlmNGY1M2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-09T14:58:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-09T14:58:03Z"}, "message": "cleanups", "tree": {"sha": "af7620ddcab6df6b746e6b8b928acbc193248844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af7620ddcab6df6b746e6b8b928acbc193248844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c", "html_url": "https://github.com/rust-lang/rust/commit/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edeb4927829380ed25e3899e85b2809bbb39a846", "url": "https://api.github.com/repos/rust-lang/rust/commits/edeb4927829380ed25e3899e85b2809bbb39a846", "html_url": "https://github.com/rust-lang/rust/commit/edeb4927829380ed25e3899e85b2809bbb39a846"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "cb71ca8bdc89df6f25254a1379624475d511460e", "filename": "crates/ide_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c", "patch": "@@ -139,12 +139,12 @@ fn generate_unique_lifetime_param_name(\n \n fn add_lifetime_param(type_params: ast::GenericParamList, new_lifetime_param: char) {\n     let generic_param =\n-        make::generic_param(format!(\"'{}\", new_lifetime_param), None).clone_for_update();\n+        make::generic_param(&format!(\"'{}\", new_lifetime_param), None).clone_for_update();\n     type_params.add_generic_param(generic_param);\n }\n \n fn make_ast_lifetime(new_lifetime_param: char) -> ast::Lifetime {\n-    make::generic_param(format!(\"'{}\", new_lifetime_param), None)\n+    make::generic_param(&format!(\"'{}\", new_lifetime_param), None)\n         .syntax()\n         .descendants()\n         .find_map(ast::Lifetime::cast)"}, {"sha": "26a0e81f0eaba9d165d10e91ccb390f8a4f53b44", "filename": "crates/ide_assists/src/handlers/replace_impl_trait_with_generic.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs?ref=d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c", "patch": "@@ -1,6 +1,6 @@\n use syntax::ast::{self, edit::AstNodeEdit, make, AstNode, GenericParamsOwner};\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use crate::{utils::suggest_name, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: replace_impl_trait_with_generic\n //\n@@ -17,30 +17,30 @@ pub(crate) fn replace_impl_trait_with_generic(\n     acc: &mut Assists,\n     ctx: &AssistContext,\n ) -> Option<()> {\n-    let type_impl_trait = ctx.find_node_at_offset::<ast::ImplTraitType>()?;\n-    let type_param = type_impl_trait.syntax().parent().and_then(ast::Param::cast)?;\n-    let type_fn = type_param.syntax().ancestors().find_map(ast::Fn::cast)?;\n+    let impl_trait_type = ctx.find_node_at_offset::<ast::ImplTraitType>()?;\n+    let param = impl_trait_type.syntax().parent().and_then(ast::Param::cast)?;\n+    let fn_ = param.syntax().ancestors().find_map(ast::Fn::cast)?;\n \n-    let impl_trait_ty = type_impl_trait.type_bound_list()?;\n+    let type_bound_list = impl_trait_type.type_bound_list()?;\n \n-    let target = type_fn.syntax().text_range();\n+    let target = fn_.syntax().text_range();\n     acc.add(\n         AssistId(\"replace_impl_trait_with_generic\", AssistKind::RefactorRewrite),\n         \"Replace impl trait with generic\",\n         target,\n         |edit| {\n-            let generic_letter = impl_trait_ty.to_string().chars().next().unwrap().to_string();\n+            let type_param_name = suggest_name::generic_parameter(&impl_trait_type);\n \n-            let generic_param_list = type_fn\n+            let generic_param_list = fn_\n                 .generic_param_list()\n                 .unwrap_or_else(|| make::generic_param_list(None))\n-                .append_param(make::generic_param(generic_letter.clone(), Some(impl_trait_ty)));\n+                .append_param(make::generic_param(&type_param_name, Some(type_bound_list)));\n \n-            let new_type_fn = type_fn\n-                .replace_descendant::<ast::Type>(type_impl_trait.into(), make::ty(&generic_letter))\n+            let new_type_fn = fn_\n+                .replace_descendant::<ast::Type>(impl_trait_type.into(), make::ty(&type_param_name))\n                 .with_generic_param_list(generic_param_list);\n \n-            edit.replace_ast(type_fn.clone(), new_type_fn);\n+            edit.replace_ast(fn_.clone(), new_type_fn);\n         },\n     )\n }"}, {"sha": "c8487846d7ecb064ddd2de02472a12ced23a80b6", "filename": "crates/ide_assists/src/utils/suggest_name.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c", "patch": "@@ -6,7 +6,7 @@ use itertools::Itertools;\n use stdx::to_lower_snake_case;\n use syntax::{\n     ast::{self, NameOwner},\n-    match_ast, AstNode,\n+    match_ast, AstNode, SmolStr,\n };\n \n /// Trait names, that will be ignored when in `impl Trait` and `dyn Trait`\n@@ -57,6 +57,14 @@ const USELESS_METHODS: &[&str] = &[\n     \"iter_mut\",\n ];\n \n+pub(crate) fn generic_parameter(ty: &ast::ImplTraitType) -> SmolStr {\n+    let c = ty\n+        .type_bound_list()\n+        .and_then(|bounds| bounds.syntax().text().char_at(0.into()))\n+        .unwrap_or('T');\n+    c.encode_utf8(&mut [0; 4]).into()\n+}\n+\n /// Suggest name of variable for given expression\n ///\n /// **NOTE**: it is caller's responsibility to guarantee uniqueness of the name."}, {"sha": "2289d8f3e6af26484c38e5b406f0114835eae0db", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=d9c9f6dc2cd3080009c4ce2c3f0f340949f4f53c", "patch": "@@ -475,8 +475,8 @@ pub fn param_list(\n     };\n     ast_from_text(&list)\n }\n-\n-pub fn generic_param(name: String, ty: Option<ast::TypeBoundList>) -> ast::GenericParam {\n+// FIXME: s/&str/ast:Name\n+pub fn generic_param(name: &str, ty: Option<ast::TypeBoundList>) -> ast::GenericParam {\n     let bound = match ty {\n         Some(it) => format!(\": {}\", it),\n         None => String::new(),"}]}