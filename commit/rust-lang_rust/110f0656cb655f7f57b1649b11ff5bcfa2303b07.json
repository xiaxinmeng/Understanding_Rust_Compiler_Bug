{"sha": "110f0656cb655f7f57b1649b11ff5bcfa2303b07", "node_id": "C_kwDOAAsO6NoAKDExMGYwNjU2Y2I2NTVmN2Y1N2IxNjQ5YjExZmY1YmNmYTIzMDNiMDc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-12T18:36:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-01T19:38:16Z"}, "message": "Store associated item defaultness in impl_defaultness.", "tree": {"sha": "388ee504073c8ca77ceb2d3f5fe7cf679292d6bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/388ee504073c8ca77ceb2d3f5fe7cf679292d6bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/110f0656cb655f7f57b1649b11ff5bcfa2303b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/110f0656cb655f7f57b1649b11ff5bcfa2303b07", "html_url": "https://github.com/rust-lang/rust/commit/110f0656cb655f7f57b1649b11ff5bcfa2303b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/110f0656cb655f7f57b1649b11ff5bcfa2303b07/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9e134e1b609e571f4d7d18f91f0ccb1a0cb685d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e134e1b609e571f4d7d18f91f0ccb1a0cb685d", "html_url": "https://github.com/rust-lang/rust/commit/c9e134e1b609e571f4d7d18f91f0ccb1a0cb685d"}], "stats": {"total": 196, "additions": 89, "deletions": 107}, "files": [{"sha": "d5af74d47fd031418ba6049416323510c585e1e9", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -323,16 +323,15 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_trait_item_ref(&mut self, ii: &'hir TraitItemRef) {\n         // Do not visit the duplicate information in TraitItemRef. We want to\n         // map the actual nodes, not the duplicate ones in the *Ref.\n-        let TraitItemRef { id, ident: _, kind: _, span: _, defaultness: _ } = *ii;\n+        let TraitItemRef { id, ident: _, kind: _, span: _ } = *ii;\n \n         self.visit_nested_trait_item(id);\n     }\n \n     fn visit_impl_item_ref(&mut self, ii: &'hir ImplItemRef) {\n         // Do not visit the duplicate information in ImplItemRef. We want to\n         // map the actual nodes, not the duplicate ones in the *Ref.\n-        let ImplItemRef { id, ident: _, kind: _, span: _, defaultness: _, trait_item_def_id: _ } =\n-            *ii;\n+        let ImplItemRef { id, ident: _, kind: _, span: _, trait_item_def_id: _ } = *ii;\n \n         self.visit_nested_impl_item(id);\n     }"}, {"sha": "99f81afc1e25d2b45fe33fad1dfa457e7521129e", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -755,17 +755,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let hir_id = self.lower_node_id(i.id);\n         let trait_item_def_id = hir_id.expect_owner();\n \n-        let (generics, kind) = match i.kind {\n+        let (generics, kind, has_default) = match i.kind {\n             AssocItemKind::Const(_, ref ty, ref default) => {\n                 let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n-                (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body))\n+                (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body), body.is_some())\n             }\n             AssocItemKind::Fn(box Fn { ref sig, ref generics, body: None, .. }) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, i.id, FnDeclKind::Trait, None);\n-                (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)))\n+                (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)), false)\n             }\n             AssocItemKind::Fn(box Fn { ref sig, ref generics, body: Some(ref body), .. }) => {\n                 let asyncness = sig.header.asyncness;\n@@ -778,7 +778,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     FnDeclKind::Trait,\n                     asyncness.opt_return_id(),\n                 );\n-                (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)))\n+                (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)), true)\n             }\n             AssocItemKind::TyAlias(box TyAlias {\n                 ref generics,\n@@ -789,7 +789,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }) => {\n                 let mut generics = generics.clone();\n                 add_ty_alias_where_clause(&mut generics, where_clauses, false);\n-                self.lower_generics(\n+                let (generics, kind) = self.lower_generics(\n                     &generics,\n                     i.id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -805,7 +805,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             ty,\n                         )\n                     },\n-                )\n+                );\n+                (generics, kind, ty.is_some())\n             }\n             AssocItemKind::MacCall(..) => panic!(\"macro item shouldn't exist at this point\"),\n         };\n@@ -817,28 +818,25 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             generics,\n             kind,\n             span: self.lower_span(i.span),\n+            defaultness: hir::Defaultness::Default { has_value: has_default },\n         };\n         self.arena.alloc(item)\n     }\n \n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n-        let (kind, has_default) = match &i.kind {\n-            AssocItemKind::Const(_, _, default) => (hir::AssocItemKind::Const, default.is_some()),\n-            AssocItemKind::TyAlias(box TyAlias { ty, .. }) => {\n-                (hir::AssocItemKind::Type, ty.is_some())\n-            }\n-            AssocItemKind::Fn(box Fn { sig, body, .. }) => {\n-                (hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }, body.is_some())\n+        let kind = match &i.kind {\n+            AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n+            AssocItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n+            AssocItemKind::Fn(box Fn { sig, .. }) => {\n+                hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }\n             }\n             AssocItemKind::MacCall(..) => unimplemented!(),\n         };\n         let id = hir::TraitItemId { def_id: self.local_def_id(i.id) };\n-        let defaultness = hir::Defaultness::Default { has_value: has_default };\n         hir::TraitItemRef {\n             id,\n             ident: self.lower_ident(i.ident),\n             span: self.lower_span(i.span),\n-            defaultness,\n             kind,\n         }\n     }\n@@ -849,6 +847,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_impl_item(&mut self, i: &AssocItem) -> &'hir hir::ImplItem<'hir> {\n+        // Since `default impl` is not yet implemented, this is always true in impls.\n+        let has_value = true;\n+        let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n+\n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {\n                 let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n@@ -903,19 +905,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             kind,\n             vis_span: self.lower_span(i.vis.span),\n             span: self.lower_span(i.span),\n+            defaultness,\n         };\n         self.arena.alloc(item)\n     }\n \n     fn lower_impl_item_ref(&mut self, i: &AssocItem) -> hir::ImplItemRef {\n-        // Since `default impl` is not yet implemented, this is always true in impls.\n-        let has_value = true;\n-        let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n         hir::ImplItemRef {\n             id: hir::ImplItemId { def_id: self.local_def_id(i.id) },\n             ident: self.lower_ident(i.ident),\n             span: self.lower_span(i.span),\n-            defaultness,\n             kind: match &i.kind {\n                 AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n                 AssocItemKind::TyAlias(..) => hir::AssocItemKind::Type,"}, {"sha": "617433a9803d520412d472c855e0660ca441c657", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -2222,6 +2222,7 @@ pub struct TraitItem<'hir> {\n     pub generics: &'hir Generics<'hir>,\n     pub kind: TraitItemKind<'hir>,\n     pub span: Span,\n+    pub defaultness: Defaultness,\n }\n \n impl TraitItem<'_> {\n@@ -2281,6 +2282,7 @@ pub struct ImplItem<'hir> {\n     pub def_id: LocalDefId,\n     pub generics: &'hir Generics<'hir>,\n     pub kind: ImplItemKind<'hir>,\n+    pub defaultness: Defaultness,\n     pub span: Span,\n     pub vis_span: Span,\n }\n@@ -3083,7 +3085,6 @@ pub struct TraitItemRef {\n     pub ident: Ident,\n     pub kind: AssocItemKind,\n     pub span: Span,\n-    pub defaultness: Defaultness,\n }\n \n /// A reference from an impl to one of its associated items. This\n@@ -3098,7 +3099,6 @@ pub struct ImplItemRef {\n     pub ident: Ident,\n     pub kind: AssocItemKind,\n     pub span: Span,\n-    pub defaultness: Defaultness,\n     /// When we are in a trait impl, link to the trait-item's id.\n     pub trait_item_def_id: Option<DefId>,\n }\n@@ -3496,11 +3496,11 @@ mod size_asserts {\n     rustc_data_structures::static_assert_size!(ForeignItem<'static>, 72);\n     rustc_data_structures::static_assert_size!(GenericBound<'_>, 48);\n     rustc_data_structures::static_assert_size!(Generics<'static>, 56);\n-    rustc_data_structures::static_assert_size!(ImplItem<'static>, 80);\n+    rustc_data_structures::static_assert_size!(ImplItem<'static>, 88);\n     rustc_data_structures::static_assert_size!(Impl<'static>, 80);\n     rustc_data_structures::static_assert_size!(Item<'static>, 80);\n     rustc_data_structures::static_assert_size!(Pat<'static>, 88);\n     rustc_data_structures::static_assert_size!(QPath<'static>, 24);\n-    rustc_data_structures::static_assert_size!(TraitItem<'static>, 88);\n+    rustc_data_structures::static_assert_size!(TraitItem<'static>, 96);\n     rustc_data_structures::static_assert_size!(Ty<'static>, 72);\n }"}, {"sha": "5bb04a9d620e89b02b91caf872c62bda93be9227", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -948,6 +948,7 @@ pub fn walk_fn<'v, V: Visitor<'v>>(\n pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem<'v>) {\n     visitor.visit_ident(trait_item.ident);\n     visitor.visit_generics(&trait_item.generics);\n+    visitor.visit_defaultness(&trait_item.defaultness);\n     match trait_item.kind {\n         TraitItemKind::Const(ref ty, default) => {\n             visitor.visit_id(trait_item.hir_id());\n@@ -980,19 +981,27 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n \n pub fn walk_trait_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_item_ref: &'v TraitItemRef) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n-    let TraitItemRef { id, ident, ref kind, span: _, ref defaultness } = *trait_item_ref;\n+    let TraitItemRef { id, ident, ref kind, span: _ } = *trait_item_ref;\n     visitor.visit_nested_trait_item(id);\n     visitor.visit_ident(ident);\n     visitor.visit_associated_item_kind(kind);\n-    visitor.visit_defaultness(defaultness);\n }\n \n pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem<'v>) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n-    let ImplItem { def_id: _, ident, ref generics, ref kind, span: _, vis_span: _ } = *impl_item;\n+    let ImplItem {\n+        def_id: _,\n+        ident,\n+        ref generics,\n+        ref kind,\n+        ref defaultness,\n+        span: _,\n+        vis_span: _,\n+    } = *impl_item;\n \n     visitor.visit_ident(ident);\n     visitor.visit_generics(generics);\n+    visitor.visit_defaultness(defaultness);\n     match *kind {\n         ImplItemKind::Const(ref ty, body) => {\n             visitor.visit_id(impl_item.hir_id());\n@@ -1027,12 +1036,10 @@ pub fn walk_foreign_item_ref<'v, V: Visitor<'v>>(\n \n pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'v ImplItemRef) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n-    let ImplItemRef { id, ident, ref kind, span: _, ref defaultness, trait_item_def_id: _ } =\n-        *impl_item_ref;\n+    let ImplItemRef { id, ident, ref kind, span: _, trait_item_def_id: _ } = *impl_item_ref;\n     visitor.visit_nested_impl_item(id);\n     visitor.visit_ident(ident);\n     visitor.visit_associated_item_kind(kind);\n-    visitor.visit_defaultness(defaultness);\n }\n \n pub fn walk_struct_def<'v, V: Visitor<'v>>("}, {"sha": "ef97b95d40065ba1a2d7c4ad06125e64ba965197", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -1152,7 +1152,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             name,\n             kind,\n             vis: self.get_visibility(id),\n-            defaultness: container.defaultness(),\n             def_id: self.local_def_id(id),\n             trait_item_def_id: self.get_trait_item_def_id(id),\n             container: container.with_def_id(parent),"}, {"sha": "1fbd6f3795f6f842f7b1aa68eb66a10d73d34c36", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -1212,22 +1212,17 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let tcx = self.tcx;\n \n         let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());\n+        self.tables.impl_defaultness.set(def_id.index, ast_item.defaultness);\n         let trait_item = tcx.associated_item(def_id);\n \n-        let container = match trait_item.defaultness {\n-            hir::Defaultness::Default { has_value: true } => AssocContainer::TraitWithDefault,\n-            hir::Defaultness::Default { has_value: false } => AssocContainer::TraitRequired,\n-            hir::Defaultness::Final => span_bug!(ast_item.span, \"traits cannot have final items\"),\n-        };\n-\n         match trait_item.kind {\n             ty::AssocKind::Const => {\n                 let rendered = rustc_hir_pretty::to_string(\n                     &(&self.tcx.hir() as &dyn intravisit::Map<'_>),\n                     |s| s.print_trait_item(ast_item),\n                 );\n \n-                record!(self.tables.kind[def_id] <- EntryKind::AssocConst(container));\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocConst(AssocContainer::Trait));\n                 record!(self.tables.mir_const_qualif[def_id] <- mir::ConstQualifs::default());\n                 record!(self.tables.rendered_const[def_id] <- rendered);\n             }\n@@ -1244,21 +1239,21 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n                 self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n-                    container,\n+                    container:AssocContainer::Trait,\n                     has_self: trait_item.fn_has_self_parameter,\n                 })));\n             }\n             ty::AssocKind::Type => {\n                 self.encode_explicit_item_bounds(def_id);\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocType(AssocContainer::Trait));\n             }\n         }\n         match trait_item.kind {\n             ty::AssocKind::Const | ty::AssocKind::Fn => {\n                 self.encode_item_type(def_id);\n             }\n             ty::AssocKind::Type => {\n-                if trait_item.defaultness.has_value() {\n+                if ast_item.defaultness.has_value() {\n                     self.encode_item_type(def_id);\n                 }\n             }\n@@ -1273,23 +1268,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let tcx = self.tcx;\n \n         let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());\n+        self.tables.impl_defaultness.set(def_id.index, ast_item.defaultness);\n         let impl_item = self.tcx.associated_item(def_id);\n \n-        let container = match impl_item.defaultness {\n-            hir::Defaultness::Default { has_value: true } => AssocContainer::ImplDefault,\n-            hir::Defaultness::Final => AssocContainer::ImplFinal,\n-            hir::Defaultness::Default { has_value: false } => {\n-                span_bug!(ast_item.span, \"impl items always have values (currently)\")\n-            }\n-        };\n-\n         match impl_item.kind {\n             ty::AssocKind::Const => {\n                 if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {\n                     let qualifs = self.tcx.at(ast_item.span).mir_const_qualif(def_id);\n                     let const_data = self.encode_rendered_const_for_body(body_id);\n \n-                    record!(self.tables.kind[def_id] <- EntryKind::AssocConst(container));\n+                    record!(self.tables.kind[def_id] <- EntryKind::AssocConst(AssocContainer::Impl));\n                     record!(self.tables.mir_const_qualif[def_id] <- qualifs);\n                     record!(self.tables.rendered_const[def_id] <- const_data);\n                 } else {\n@@ -1308,12 +1296,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 };\n                 self.tables.constness.set(def_id.index, constness);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n-                    container,\n+                    container:AssocContainer::Impl,\n                     has_self: impl_item.fn_has_self_parameter,\n                 })));\n             }\n             ty::AssocKind::Type => {\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocType(AssocContainer::Impl));\n             }\n         }\n         self.encode_item_type(def_id);"}, {"sha": "d93d6323475c92a09e35d690d857d27916bba89a", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -439,32 +439,15 @@ struct VariantData {\n /// a default, or an in impl, whether it's marked \"default\".\n #[derive(Copy, Clone, TyEncodable, TyDecodable)]\n enum AssocContainer {\n-    TraitRequired,\n-    TraitWithDefault,\n-    ImplDefault,\n-    ImplFinal,\n+    Trait,\n+    Impl,\n }\n \n impl AssocContainer {\n     fn with_def_id(&self, def_id: DefId) -> ty::AssocItemContainer {\n         match *self {\n-            AssocContainer::TraitRequired | AssocContainer::TraitWithDefault => {\n-                ty::TraitContainer(def_id)\n-            }\n-\n-            AssocContainer::ImplDefault | AssocContainer::ImplFinal => ty::ImplContainer(def_id),\n-        }\n-    }\n-\n-    fn defaultness(&self) -> hir::Defaultness {\n-        match *self {\n-            AssocContainer::TraitRequired => hir::Defaultness::Default { has_value: false },\n-\n-            AssocContainer::TraitWithDefault | AssocContainer::ImplDefault => {\n-                hir::Defaultness::Default { has_value: true }\n-            }\n-\n-            AssocContainer::ImplFinal => hir::Defaultness::Final,\n+            AssocContainer::Trait => ty::TraitContainer(def_id),\n+            AssocContainer::Impl => ty::ImplContainer(def_id),\n         }\n     }\n }"}, {"sha": "2465f8e2533e80caa36077c63815cf6b45a3a6f3", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -217,7 +217,7 @@ impl<'tcx> Ancestors<'tcx> {\n         self.find_map(|node| {\n             if let Some(item) = node.item(tcx, trait_item_def_id) {\n                 if finalizing_node.is_none() {\n-                    let is_specializable = item.defaultness.is_default()\n+                    let is_specializable = item.defaultness(tcx).is_default()\n                         || tcx.impl_defaultness(node.def_id()).is_default();\n \n                     if !is_specializable {"}, {"sha": "af2d26b0579b6dedeb6032e999643423bc00f6f0", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -47,7 +47,6 @@ pub struct AssocItem {\n     pub name: Symbol,\n     pub kind: AssocKind,\n     pub vis: Visibility,\n-    pub defaultness: hir::Defaultness,\n     pub container: AssocItemContainer,\n \n     /// If this is an item in an impl of a trait then this is the `DefId` of\n@@ -64,6 +63,10 @@ impl AssocItem {\n         Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())\n     }\n \n+    pub fn defaultness(&self, tcx: TyCtxt<'_>) -> hir::Defaultness {\n+        tcx.impl_defaultness(self.def_id)\n+    }\n+\n     pub fn signature(&self, tcx: TyCtxt<'_>) -> String {\n         match self.kind {\n             ty::AssocKind::Fn => {"}, {"sha": "6fbe4ee8f7d3e083be5aefe04fac7f916e30aa6a", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -844,7 +844,8 @@ fn foo(&self) -> Self::T { String::new() }\n                         hir::AssocItemKind::Type => {\n                             // FIXME: account for returning some type in a trait fn impl that has\n                             // an assoc type as a return type (#72076).\n-                            if let hir::Defaultness::Default { has_value: true } = item.defaultness\n+                            if let hir::Defaultness::Default { has_value: true } =\n+                                self.impl_defaultness(item.id.def_id)\n                             {\n                                 if self.type_of(item.id.def_id) == found {\n                                     diag.span_label("}, {"sha": "96ce1fef77ec5605271d92afc14b31f78b229f5a", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -1945,7 +1945,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {\n         self.associated_items(id)\n             .in_definition_order()\n-            .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())\n+            .filter(move |item| item.kind == AssocKind::Fn && item.defaultness(self).has_value())\n     }\n \n     /// Look up the name of a definition across crates. This does not look at HIR."}, {"sha": "ee9f10930c42a897ea455cab476a0d5c87410e49", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -734,11 +734,12 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     self.reach(item.def_id, item_level).generics().predicates();\n \n                     for trait_item_ref in trait_item_refs {\n+                        let tcx = self.tcx;\n                         let mut reach = self.reach(trait_item_ref.id.def_id, item_level);\n                         reach.generics().predicates();\n \n                         if trait_item_ref.kind == AssocItemKind::Type\n-                            && !trait_item_ref.defaultness.has_value()\n+                            && !tcx.impl_defaultness(trait_item_ref.id.def_id).has_value()\n                         {\n                             // No type to visit.\n                         } else {\n@@ -1839,14 +1840,13 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n         &self,\n         def_id: LocalDefId,\n         assoc_item_kind: AssocItemKind,\n-        defaultness: hir::Defaultness,\n         vis: ty::Visibility,\n     ) {\n         let mut check = self.check(def_id, vis);\n \n         let (check_ty, is_assoc_ty) = match assoc_item_kind {\n             AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),\n-            AssocItemKind::Type => (defaultness.has_value(), true),\n+            AssocItemKind::Type => (self.tcx.impl_defaultness(def_id).has_value(), true),\n         };\n         check.in_assoc_ty = is_assoc_ty;\n         check.generics().predicates();\n@@ -1878,7 +1878,6 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n                         self.check_assoc_item(\n                             trait_item_ref.id.def_id,\n                             trait_item_ref.kind,\n-                            trait_item_ref.defaultness,\n                             item_visibility,\n                         );\n \n@@ -1951,7 +1950,6 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n                         self.check_assoc_item(\n                             impl_item_ref.id.def_id,\n                             impl_item_ref.kind,\n-                            impl_item_ref.defaultness,\n                             impl_item_vis,\n                         );\n                     }"}, {"sha": "a8e392d692caddda37072eb90e63e1e5644f771e", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -697,7 +697,7 @@ impl<'tcx> SaveContext<'tcx> {\n             }\n             Res::Def(HirDefKind::AssocFn, decl_id) => {\n                 let def_id = if decl_id.is_local() {\n-                    if self.tcx.associated_item(decl_id).defaultness.has_value() {\n+                    if self.tcx.impl_defaultness(decl_id).has_value() {\n                         Some(decl_id)\n                     } else {\n                         None"}, {"sha": "d22465db85b26ca48de5c3baa7c3570bbd569a01", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -1988,7 +1988,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n         return Progress { term: tcx.ty_error().into(), obligations: nested };\n     };\n \n-    if !assoc_ty.item.defaultness.has_value() {\n+    if !assoc_ty.item.defaultness(tcx).has_value() {\n         // This means that the impl is missing a definition for the\n         // associated type. This error will be reported by the type\n         // checker method `check_impl_items_against_trait`, so here we\n@@ -2089,7 +2089,11 @@ fn assoc_def(\n         return Ok(specialization_graph::LeafDef {\n             item: *item,\n             defining_node: impl_node,\n-            finalizing_node: if item.defaultness.is_default() { None } else { Some(impl_node) },\n+            finalizing_node: if item.defaultness(tcx).is_default() {\n+                None\n+            } else {\n+                Some(impl_node)\n+            },\n         });\n     }\n "}, {"sha": "e9bbc25d0261af1ec40911c563198f7b89649fc5", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -358,7 +358,8 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n }\n \n pub fn impl_item_is_final(tcx: TyCtxt<'_>, assoc_item: &ty::AssocItem) -> bool {\n-    assoc_item.defaultness.is_final() && tcx.impl_defaultness(assoc_item.container.id()).is_final()\n+    assoc_item.defaultness(tcx).is_final()\n+        && tcx.impl_defaultness(assoc_item.container.id()).is_final()\n }\n \n pub enum TupleArgumentsFlag {"}, {"sha": "ffdcf1a72149bb011c55a8f4d86fa2529211584f", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -103,7 +103,6 @@ fn associated_item_from_trait_item_ref(\n         name: trait_item_ref.ident.name,\n         kind,\n         vis: tcx.visibility(def_id),\n-        defaultness: trait_item_ref.defaultness,\n         def_id: def_id.to_def_id(),\n         trait_item_def_id: Some(def_id.to_def_id()),\n         container: ty::TraitContainer(parent_def_id.to_def_id()),\n@@ -127,7 +126,6 @@ fn associated_item_from_impl_item_ref(\n         name: impl_item_ref.ident.name,\n         kind,\n         vis: tcx.visibility(def_id),\n-        defaultness: impl_item_ref.defaultness,\n         def_id: def_id.to_def_id(),\n         trait_item_def_id: impl_item_ref.trait_item_def_id,\n         container: ty::ImplContainer(parent_def_id.to_def_id()),"}, {"sha": "bd1d568cd9a051079bae294ec74562a557c371ce", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -281,7 +281,7 @@ fn resolve_associated_item<'tcx>(\n             }\n \n             // If the item does not have a value, then we cannot return an instance.\n-            if !leaf_def.item.defaultness.has_value() {\n+            if !leaf_def.item.defaultness(tcx).has_value() {\n                 return Ok(None);\n             }\n "}, {"sha": "7007e76b86e28f3b2dbea17db0c10e4b93d4617b", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -70,11 +70,13 @@ fn sized_constraint_for_ty<'tcx>(\n }\n \n fn impl_defaultness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Defaultness {\n-    let item = tcx.hir().expect_item(def_id.expect_local());\n-    if let hir::ItemKind::Impl(impl_) = &item.kind {\n-        impl_.defaultness\n-    } else {\n-        bug!(\"`impl_defaultness` called on {:?}\", item);\n+    match tcx.hir().get_by_def_id(def_id.expect_local()) {\n+        hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(impl_), .. }) => impl_.defaultness,\n+        hir::Node::ImplItem(hir::ImplItem { defaultness, .. })\n+        | hir::Node::TraitItem(hir::TraitItem { defaultness, .. }) => *defaultness,\n+        node => {\n+            bug!(\"`impl_defaultness` called on {:?}\", node);\n+        }\n     }\n }\n "}, {"sha": "9c1fd9b30b4604277cb932998e37fabab0171179", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -1098,7 +1098,7 @@ fn check_impl_items_against_trait<'tcx>(\n         for &trait_item_id in tcx.associated_item_def_ids(impl_trait_ref.def_id) {\n             let is_implemented = ancestors\n                 .leaf_def(tcx, trait_item_id)\n-                .map_or(false, |node_item| node_item.item.defaultness.has_value());\n+                .map_or(false, |node_item| node_item.item.defaultness(tcx).has_value());\n \n             if !is_implemented && tcx.impl_defaultness(impl_id).is_final() {\n                 missing_items.push(tcx.associated_item(trait_item_id));"}, {"sha": "543e005c634f25efdd90a450cb33a2e511de9a86", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -1007,7 +1007,7 @@ fn check_associated_item(\n                 if let ty::AssocItemContainer::TraitContainer(_) = item.container {\n                     check_associated_type_bounds(wfcx, item, span)\n                 }\n-                if item.defaultness.has_value() {\n+                if item.defaultness(tcx).has_value() {\n                     let ty = tcx.type_of(item.def_id);\n                     let ty = wfcx.normalize(span, Some(WellFormedLoc::Ty(item_id)), ty);\n                     wfcx.register_wf_obligation(span, loc, ty.into());"}, {"sha": "91c90d1fa5293fb72a1e5a5542417fffc69fe326", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -1234,7 +1234,7 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n \n                 match item {\n                     Some(item) if matches!(item.kind, hir::AssocItemKind::Fn { .. }) => {\n-                        if !item.defaultness.has_value() {\n+                        if !tcx.impl_defaultness(item.id.def_id).has_value() {\n                             tcx.sess\n                                 .struct_span_err(\n                                     item.span,"}, {"sha": "9fee1eaaec9836e90fa9f4afb381743af7f3ef23", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -106,7 +106,7 @@ fn enforce_impl_params_are_constrained(tcx: TyCtxt<'_>, impl_def_id: LocalDefId)\n             let item = tcx.associated_item(def_id);\n             match item.kind {\n                 ty::AssocKind::Type => {\n-                    if item.defaultness.has_value() {\n+                    if item.defaultness(tcx).has_value() {\n                         cgp::parameters_for(&tcx.type_of(def_id), true)\n                     } else {\n                         Vec::new()"}, {"sha": "c9778b3e5a005d649e6e7822f5f1ffaefdfc82ea", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -1101,7 +1101,7 @@ impl<'tcx> Clean<'tcx, Item> for hir::ImplItem<'tcx> {\n                 }\n                 hir::ImplItemKind::Fn(ref sig, body) => {\n                     let m = clean_function(cx, sig, self.generics, body);\n-                    let defaultness = cx.tcx.associated_item(self.def_id).defaultness;\n+                    let defaultness = cx.tcx.impl_defaultness(self.def_id);\n                     MethodItem(m, Some(defaultness))\n                 }\n                 hir::ImplItemKind::TyAlias(hir_ty) => {\n@@ -1140,7 +1140,7 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n \n                 let provided = match self.container {\n                     ty::ImplContainer(_) => true,\n-                    ty::TraitContainer(_) => self.defaultness.has_value(),\n+                    ty::TraitContainer(_) => tcx.impl_defaultness(self.def_id).has_value(),\n                 };\n                 if provided {\n                     AssocConstItem(ty, ConstantKind::Extern { def_id: self.def_id })\n@@ -1179,11 +1179,11 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n \n                 let provided = match self.container {\n                     ty::ImplContainer(_) => true,\n-                    ty::TraitContainer(_) => self.defaultness.has_value(),\n+                    ty::TraitContainer(_) => self.defaultness(tcx).has_value(),\n                 };\n                 if provided {\n                     let defaultness = match self.container {\n-                        ty::ImplContainer(_) => Some(self.defaultness),\n+                        ty::ImplContainer(_) => Some(self.defaultness(tcx)),\n                         ty::TraitContainer(_) => None,\n                     };\n                     MethodItem(Box::new(Function { generics, decl }), defaultness)\n@@ -1280,7 +1280,7 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n                         None => bounds.push(GenericBound::maybe_sized(cx)),\n                     }\n \n-                    if self.defaultness.has_value() {\n+                    if tcx.impl_defaultness(self.def_id).has_value() {\n                         AssocTypeItem(\n                             Box::new(Typedef {\n                                 type_: clean_middle_ty("}, {"sha": "7d7a63c53847a501ed20f29b785715d60144789f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -234,7 +234,7 @@ impl UrlFragment {\n             &UrlFragment::Item(def_id) => {\n                 let kind = match tcx.def_kind(def_id) {\n                     DefKind::AssocFn => {\n-                        if tcx.associated_item(def_id).defaultness.has_value() {\n+                        if tcx.impl_defaultness(def_id).has_value() {\n                             \"method.\"\n                         } else {\n                             \"tymethod.\""}, {"sha": "9e14ccd34334b96b9a02b645870797e129738b60", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110f0656cb655f7f57b1649b11ff5bcfa2303b07/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f0656cb655f7f57b1649b11ff5bcfa2303b07/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=110f0656cb655f7f57b1649b11ff5bcfa2303b07", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n                     match tit_.kind {\n                         hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..) => {},\n                         hir::TraitItemKind::Fn(..) => {\n-                            if tit.defaultness.has_value() {\n+                            if cx.tcx.impl_defaultness(tit.id.def_id).has_value() {\n                                 // trait method with default body needs inline in case\n                                 // an impl is not provided\n                                 let desc = \"a default trait method\";"}]}