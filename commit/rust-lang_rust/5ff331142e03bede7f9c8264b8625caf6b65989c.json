{"sha": "5ff331142e03bede7f9c8264b8625caf6b65989c", "node_id": "C_kwDOAAsO6NoAKDVmZjMzMTE0MmUwM2JlZGU3ZjljODI2NGI4NjI1Y2FmNmI2NTk4OWM", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2022-02-22T19:54:47Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-19T12:21:45Z"}, "message": "Move check to existing pass\n\nThis alters the diagnostics a bit, as the trait method is still stable.\nThe only thing this check does is ensure that compilation fails if a\ntrait implementation is declared const-stable.", "tree": {"sha": "91b68c412532abe12f3cbd4e0a47f915db4b887f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91b68c412532abe12f3cbd4e0a47f915db4b887f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ff331142e03bede7f9c8264b8625caf6b65989c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff331142e03bede7f9c8264b8625caf6b65989c", "html_url": "https://github.com/rust-lang/rust/commit/5ff331142e03bede7f9c8264b8625caf6b65989c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ff331142e03bede7f9c8264b8625caf6b65989c/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0620c95038c1e586f5165d5d3be7cf009aaf387", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0620c95038c1e586f5165d5d3be7cf009aaf387", "html_url": "https://github.com/rust-lang/rust/commit/f0620c95038c1e586f5165d5d3be7cf009aaf387"}], "stats": {"total": 220, "additions": 62, "deletions": 158}, "files": [{"sha": "00119267e8561be4985be7d122ce95ab43793e0b", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ff331142e03bede7f9c8264b8625caf6b65989c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff331142e03bede7f9c8264b8625caf6b65989c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=5ff331142e03bede7f9c8264b8625caf6b65989c", "patch": "@@ -970,10 +970,6 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n \n     sess.time(\"layout_testing\", || layout_test::test_layout(tcx));\n \n-    sess.time(\"stable_impl_const_trait_checking\", || {\n-        rustc_passes::stability::check_const_impl_trait(tcx)\n-    });\n-\n     // Avoid overwhelming user with errors if borrow checking failed.\n     // I'm not sure how helpful this is, to be honest, but it avoids a\n     // lot of annoying errors in the ui tests (basically,"}, {"sha": "8f8f677cad4decba96b9584993f010e5155028e1", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 26, "deletions": 56, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5ff331142e03bede7f9c8264b8625caf6b65989c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff331142e03bede7f9c8264b8625caf6b65989c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=5ff331142e03bede7f9c8264b8625caf6b65989c", "patch": "@@ -9,7 +9,6 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{FieldDef, Generics, HirId, Item, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::AccessLevels;\n@@ -606,44 +605,6 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     // stable (assuming they have not inherited instability from their parent).\n }\n \n-struct CheckStableConstImplTrait<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-impl<'tcx> ItemLikeVisitor<'tcx> for CheckStableConstImplTrait<'tcx> {\n-    fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n-        if !matches!(\n-            item.kind,\n-            hir::ItemKind::Impl(hir::Impl {\n-                of_trait: Some(_),\n-                constness: hir::Constness::Const,\n-                ..\n-            })\n-        ) {\n-            return;\n-        }\n-\n-        if self.tcx.lookup_const_stability(item.def_id).map_or(false, |stab| stab.is_const_stable())\n-        {\n-            self.tcx\n-                .sess\n-                .struct_span_err(item.span, \"trait implementations cannot be const stable yet\")\n-                .note(\"see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\")\n-                .emit();\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        // Nothing to do here.\n-    }\n-    fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        // Nothing to do here.\n-    }\n-    fn visit_foreign_item(&mut self, _foreign_item: &'tcx hir::ForeignItem<'tcx>) {\n-        // Nothing to do here.\n-    }\n-}\n-\n fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n     let mut index = Index {\n         stab_map: Default::default(),\n@@ -748,16 +709,23 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n             // For implementations of traits, check the stability of each item\n             // individually as it's possible to have a stable trait with unstable\n             // items.\n-            hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref t), self_ty, items, .. }) => {\n-                if self.tcx.features().staged_api {\n+            hir::ItemKind::Impl(hir::Impl {\n+                of_trait: Some(ref t),\n+                self_ty,\n+                items,\n+                constness,\n+                ..\n+            }) => {\n+                let features = self.tcx.features();\n+                if features.staged_api {\n+                    let attrs = self.tcx.hir().attrs(item.hir_id());\n+                    let (stab, const_stab) = attr::find_stability(&self.tcx.sess, attrs, item.span);\n+\n                     // If this impl block has an #[unstable] attribute, give an\n                     // error if all involved types and traits are stable, because\n                     // it will have no effect.\n                     // See: https://github.com/rust-lang/rust/issues/55436\n-                    let attrs = self.tcx.hir().attrs(item.hir_id());\n-                    if let (Some((Stability { level: attr::Unstable { .. }, .. }, span)), _) =\n-                        attr::find_stability(&self.tcx.sess, attrs, item.span)\n-                    {\n+                    if let Some((Stability { level: attr::Unstable { .. }, .. }, span)) = stab {\n                         let mut c = CheckTraitImplStable { tcx: self.tcx, fully_stable: true };\n                         c.visit_ty(self_ty);\n                         c.visit_trait_ref(t);\n@@ -773,6 +741,19 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                             );\n                         }\n                     }\n+\n+                    // `#![feature(const_trait_impl)]` is unstable, so any impl declared stable\n+                    // needs to have an error emitted.\n+                    if features.const_trait_impl\n+                        && constness == hir::Constness::Const\n+                        && const_stab.map_or(false, |(stab, _)| stab.is_const_stable())\n+                    {\n+                        self.tcx\n+                            .sess\n+                            .struct_span_err(item.span, \"trait implementations cannot be const stable yet\")\n+                            .note(\"see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\")\n+                            .emit();\n+                    }\n                 }\n \n                 for impl_item_ref in *items {\n@@ -864,17 +845,6 @@ impl<'tcx> Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n     }\n }\n \n-pub fn check_const_impl_trait(tcx: TyCtxt<'_>) {\n-    let features = tcx.features(); // FIXME How cheap is this call?\n-    // Both feature gates have to be enabled for this check to have any effect.\n-    if !features.staged_api || !features.const_trait_impl {\n-        return;\n-    }\n-\n-    let mut visitor = CheckStableConstImplTrait { tcx };\n-    tcx.hir().visit_all_item_likes(&mut visitor);\n-}\n-\n /// Given the list of enabled features that were not language features (i.e., that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them."}, {"sha": "15f1db18f89d952b2e90254f164c32e9d28e18e5", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -1,43 +0,0 @@\n-#![feature(const_trait_impl)]\n-#![feature(staged_api)]\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Int(i32);\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl const std::ops::Sub for Int {\n-    //~^ ERROR trait implementations cannot be const stable yet\n-    type Output = Self;\n-\n-    fn sub(self, rhs: Self) -> Self {\n-        Int(self.0 - rhs.0)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_add\", issue = \"none\")]\n-impl const std::ops::Add for Int {\n-    type Output = Self;\n-\n-    fn add(self, rhs: Self) -> Self {\n-        Int(self.0 + rhs.0)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const fn const_err() {\n-    Int(0) + Int(0);\n-    //~^ ERROR not yet stable as a const fn\n-    Int(0) - Int(0);\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn non_const_success() {\n-    Int(0) + Int(0);\n-    Int(0) - Int(0);\n-}\n-\n-fn main() {}"}, {"sha": "fa3d85a3e6ad3d2453f18d48a1faa3fb536cd494", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -1,24 +0,0 @@\n-error: `<Int as Add>::add` is not yet stable as a const fn\n-  --> $DIR/stability.rs:32:5\n-   |\n-LL |     Int(0) + Int(0);\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = help: const-stable functions can only call other const-stable functions\n-\n-error: trait implementations cannot be const stable yet\n-  --> $DIR/stability.rs:10:1\n-   |\n-LL | / impl const std::ops::Sub for Int {\n-LL | |\n-LL | |     type Output = Self;\n-LL | |\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-   |\n-   = note: see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "f8a55a0a4a02f3cf6987720f508ab52d41f0b2dd", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5ff331142e03bede7f9c8264b8625caf6b65989c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff331142e03bede7f9c8264b8625caf6b65989c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs?ref=5ff331142e03bede7f9c8264b8625caf6b65989c", "patch": "@@ -11,26 +11,36 @@ extern crate staged_api;\n use staged_api::*;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Stable;\n+pub struct Foo;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(stable, rustc_const_stable(feature = \"rust1\", since = \"1.0.0\"))]\n-impl const MyTrait for Stable {\n+#[cfg_attr(unstable, rustc_const_unstable(feature = \"foo\", issue = \"none\"))]\n+impl const MyTrait for Foo {\n     //[stable]~^ ERROR trait implementations cannot be const stable yet\n-    //[unstable]~^^ ERROR implementation has missing const stability attribute\n     fn func() {}\n }\n \n+// Const stability has no impact on usage in non-const contexts.\n fn non_const_context() {\n     Unstable::func();\n-    Stable::func();\n+    Foo::func();\n }\n \n #[unstable(feature = \"none\", issue = \"none\")]\n const fn const_context() {\n     Unstable::func();\n-    //[stable]~^ ERROR `<staged_api::Unstable as staged_api::MyTrait>::func` is not yet stable as a const fn\n-    Stable::func();\n+    // ^ This is okay regardless of whether the `unstable` feature is enabled, as this function is\n+    // not const-stable.\n+    Foo::func();\n+    //[unstable]~^ not yet stable as a const fn\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+const fn stable_const_context() {\n+    Unstable::func();\n+    //[unstable]~^ ERROR not yet stable as a const fn\n+    Foo::func();\n+    //[unstable]~^ ERROR not yet stable as a const fn\n }\n \n fn main() {}"}, {"sha": "25407a0b43c18b752ce82ac57f8ca7a34a1d8167", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.stable.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ff331142e03bede7f9c8264b8625caf6b65989c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ff331142e03bede7f9c8264b8625caf6b65989c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stable.stderr?ref=5ff331142e03bede7f9c8264b8625caf6b65989c", "patch": "@@ -1,22 +1,11 @@\n-error: `<staged_api::Unstable as staged_api::MyTrait>::func` is not yet stable as a const fn\n-  --> $DIR/staged-api.rs:31:5\n-   |\n-LL |     Unstable::func();\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(unstable)]` to the crate attributes to enable\n-\n-error: trait implementations cannot be const stable yet\n+error: implementation has missing const stability attribute\n   --> $DIR/staged-api.rs:18:1\n    |\n-LL | / impl const MyTrait for Stable {\n-LL | |\n+LL | / impl const MyTrait for Foo {\n LL | |\n LL | |     fn func() {}\n LL | | }\n    | |_^\n-   |\n-   = note: see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "30fe97bb884b41b5be8c63178182769e233d3a3d", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.unstable.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5ff331142e03bede7f9c8264b8625caf6b65989c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ff331142e03bede7f9c8264b8625caf6b65989c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.unstable.stderr?ref=5ff331142e03bede7f9c8264b8625caf6b65989c", "patch": "@@ -1,12 +1,18 @@\n-error: implementation has missing const stability attribute\n-  --> $DIR/staged-api.rs:18:1\n-   |\n-LL | / impl const MyTrait for Stable {\n-LL | |\n-LL | |\n-LL | |     fn func() {}\n-LL | | }\n-   | |_^\n+error: `<Foo as staged_api::MyTrait>::func` is not yet stable as a const fn\n+  --> $DIR/staged-api.rs:34:5\n+   |\n+LL |     Foo::func();\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(foo)]` to the crate attributes to enable\n+\n+error: `<Foo as staged_api::MyTrait>::func` is not yet stable as a const fn\n+  --> $DIR/staged-api.rs:42:5\n+   |\n+LL |     Foo::func();\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(foo)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}]}