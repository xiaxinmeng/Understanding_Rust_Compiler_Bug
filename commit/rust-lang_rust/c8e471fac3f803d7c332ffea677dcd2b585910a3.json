{"sha": "c8e471fac3f803d7c332ffea677dcd2b585910a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZTQ3MWZhYzNmODAzZDdjMzMyZmZlYTY3N2RjZDJiNTg1OTEwYTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-31T18:52:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-05T08:17:48Z"}, "message": "also allow visiting places and mplaces", "tree": {"sha": "99d69165204069cd4b17f84a3a6c7cc3f34ac944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99d69165204069cd4b17f84a3a6c7cc3f34ac944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8e471fac3f803d7c332ffea677dcd2b585910a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e471fac3f803d7c332ffea677dcd2b585910a3", "html_url": "https://github.com/rust-lang/rust/commit/c8e471fac3f803d7c332ffea677dcd2b585910a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8e471fac3f803d7c332ffea677dcd2b585910a3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d7bd9b6c24a89ebafd4400a710a868fb3e70242", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7bd9b6c24a89ebafd4400a710a868fb3e70242", "html_url": "https://github.com/rust-lang/rust/commit/7d7bd9b6c24a89ebafd4400a710a868fb3e70242"}], "stats": {"total": 85, "additions": 76, "deletions": 9}, "files": [{"sha": "79b400a821ffa098f90709e6984c210531acf89e", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 76, "deletions": 9, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/c8e471fac3f803d7c332ffea677dcd2b585910a3/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e471fac3f803d7c332ffea677dcd2b585910a3/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=c8e471fac3f803d7c332ffea677dcd2b585910a3", "patch": "@@ -10,7 +10,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    Machine, EvalContext, MPlaceTy, OpTy,\n+    Machine, EvalContext, MPlaceTy, PlaceTy, OpTy,\n };\n \n // A thing that we can project into, and that has a layout.\n@@ -21,13 +21,16 @@ pub trait Value<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: Copy\n     // Get this value's layout.\n     fn layout(&self) -> TyLayout<'tcx>;\n \n-    // Get the underlying `MPlaceTy`, or panic if there is no such thing.\n-    fn to_mem_place(self) -> MPlaceTy<'tcx, M::PointerTag>;\n+    // Make this a `MPlaceTy`, or panic if that's not possible.\n+    fn force_allocation(\n+        self,\n+        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+    ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>>;\n \n-    // Create this from an `MPlaceTy`\n+    // Create this from an `MPlaceTy`.\n     fn from_mem_place(MPlaceTy<'tcx, M::PointerTag>) -> Self;\n \n-    // Project to the n-th field\n+    // Project to the n-th field.\n     fn project_field(\n         self,\n         ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n@@ -45,8 +48,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     }\n \n     #[inline(always)]\n-    fn to_mem_place(self) -> MPlaceTy<'tcx, M::PointerTag> {\n-        self.to_mem_place()\n+    fn force_allocation(\n+        self,\n+        _ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+    ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+        Ok(self.to_mem_place())\n     }\n \n     #[inline(always)]\n@@ -63,6 +69,66 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n         ectx.operand_field(self, field)\n     }\n }\n+impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n+    for MPlaceTy<'tcx, M::PointerTag>\n+{\n+    #[inline(always)]\n+    fn layout(&self) -> TyLayout<'tcx> {\n+        self.layout\n+    }\n+\n+    #[inline(always)]\n+    fn force_allocation(\n+        self,\n+        _ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+    ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+        Ok(self)\n+    }\n+\n+    #[inline(always)]\n+    fn from_mem_place(mplace: MPlaceTy<'tcx, M::PointerTag>) -> Self {\n+        mplace\n+    }\n+\n+    #[inline(always)]\n+    fn project_field(\n+        self,\n+        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+        field: u64,\n+    ) -> EvalResult<'tcx, Self> {\n+        ectx.mplace_field(self, field)\n+    }\n+}\n+impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n+    for PlaceTy<'tcx, M::PointerTag>\n+{\n+    #[inline(always)]\n+    fn layout(&self) -> TyLayout<'tcx> {\n+        self.layout\n+    }\n+\n+    #[inline(always)]\n+    fn force_allocation(\n+        self,\n+        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+    ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+        ectx.force_allocation(self)\n+    }\n+\n+    #[inline(always)]\n+    fn from_mem_place(mplace: MPlaceTy<'tcx, M::PointerTag>) -> Self {\n+        mplace.into()\n+    }\n+\n+    #[inline(always)]\n+    fn project_field(\n+        self,\n+        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+        field: u64,\n+    ) -> EvalResult<'tcx, Self> {\n+        ectx.place_field(self, field)\n+    }\n+}\n \n // How to traverse a value and what to do when we are at the leaves.\n pub trait ValueVisitor<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: fmt::Debug {\n@@ -135,7 +201,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         // If it is a trait object, switch to the actual type that was used to create it.\n         match v.layout().ty.sty {\n             ty::Dynamic(..) => {\n-                let dest = v.value().to_mem_place(); // immediate trait objects are not a thing\n+                // immediate trait objects are not a thing\n+                let dest = v.value().force_allocation(self)?;\n                 let inner = self.unpack_dyn_trait(dest)?.1;\n                 // recurse with the inner type\n                 return v.with_field(Value::from_mem_place(inner), 0, |v| self.visit_value(v));\n@@ -201,7 +268,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         MPlaceTy::dangling(v.layout(), self)\n                     } else {\n                         // non-ZST array/slice/str cannot be immediate\n-                        v.value().to_mem_place()\n+                        v.value().force_allocation(self)?\n                     };\n                     // Now iterate over it.\n                     for (i, field) in self.mplace_array_fields(mplace)?.enumerate() {"}]}