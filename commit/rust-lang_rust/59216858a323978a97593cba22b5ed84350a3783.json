{"sha": "59216858a323978a97593cba22b5ed84350a3783", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MjE2ODU4YTMyMzk3OGE5NzU5M2NiYTIyYjVlZDg0MzUwYTM3ODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-18T20:33:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-18T20:33:23Z"}, "message": "Auto merge of #86950 - tmiasko:personality, r=nagisa\n\nUse existing declaration of rust_eh_personality\n\nIf crate declares `rust_eh_personality`, re-use existing declaration\nas otherwise attempts to set function attributes that follow the\ndeclaration will fail (unless it happens to have exactly the same\ntype signature as the one predefined in the compiler).\n\nFixes #70117.\nFixes https://github.com/rust-lang/rust/pull/81469#issuecomment-809428126; probably.", "tree": {"sha": "aefe5dbab6851fbb1cbc03f28cc4495531e5909e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aefe5dbab6851fbb1cbc03f28cc4495531e5909e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59216858a323978a97593cba22b5ed84350a3783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59216858a323978a97593cba22b5ed84350a3783", "html_url": "https://github.com/rust-lang/rust/commit/59216858a323978a97593cba22b5ed84350a3783", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59216858a323978a97593cba22b5ed84350a3783/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "331da5820cfeb937dcdd76192d97a5fc4dd115c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/331da5820cfeb937dcdd76192d97a5fc4dd115c8", "html_url": "https://github.com/rust-lang/rust/commit/331da5820cfeb937dcdd76192d97a5fc4dd115c8"}, {"sha": "f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b", "html_url": "https://github.com/rust-lang/rust/commit/f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "5675a5d9812413c7caec00ce84b083ee564a1301", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59216858a323978a97593cba22b5ed84350a3783/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59216858a323978a97593cba22b5ed84350a3783/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=59216858a323978a97593cba22b5ed84350a3783", "patch": "@@ -928,8 +928,12 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         pers_fn: &'ll Value,\n         num_clauses: usize,\n     ) -> &'ll Value {\n+        // Use LLVMSetPersonalityFn to set the personality. It supports arbitrary Consts while,\n+        // LLVMBuildLandingPad requires the argument to be a Function (as of LLVM 12). The\n+        // personality lives on the parent function anyway.\n+        self.set_personality_fn(pers_fn);\n         unsafe {\n-            llvm::LLVMBuildLandingPad(self.llbuilder, ty, pers_fn, num_clauses as c_uint, UNNAMED)\n+            llvm::LLVMBuildLandingPad(self.llbuilder, ty, None, num_clauses as c_uint, UNNAMED)\n         }\n     }\n "}, {"sha": "59259857b4b0d8b2e73ac1859e32e8247a96418b", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/59216858a323978a97593cba22b5ed84350a3783/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59216858a323978a97593cba22b5ed84350a3783/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=59216858a323978a97593cba22b5ed84350a3783", "patch": "@@ -386,11 +386,16 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 } else {\n                     \"rust_eh_personality\"\n                 };\n-                let fty = self.type_variadic_func(&[], self.type_i32());\n-                self.declare_cfn(name, llvm::UnnamedAddr::Global, fty)\n+                if let Some(llfn) = self.get_declared_value(name) {\n+                    llfn\n+                } else {\n+                    let fty = self.type_variadic_func(&[], self.type_i32());\n+                    let llfn = self.declare_cfn(name, llvm::UnnamedAddr::Global, fty);\n+                    attributes::apply_target_cpu_attr(self, llfn);\n+                    llfn\n+                }\n             }\n         };\n-        attributes::apply_target_cpu_attr(self, llfn);\n         self.eh_personality.set(Some(llfn));\n         llfn\n     }"}, {"sha": "68d566cca095c3ea9faff2561310b88711eeede7", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59216858a323978a97593cba22b5ed84350a3783/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59216858a323978a97593cba22b5ed84350a3783/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=59216858a323978a97593cba22b5ed84350a3783", "patch": "@@ -1165,7 +1165,7 @@ extern \"C\" {\n     pub fn LLVMBuildLandingPad(\n         B: &Builder<'a>,\n         Ty: &'a Type,\n-        PersFn: &'a Value,\n+        PersFn: Option<&'a Value>,\n         NumClauses: c_uint,\n         Name: *const c_char,\n     ) -> &'a Value;"}, {"sha": "026364a2058fa0cc9d2351bde32366a91a06c8e0", "filename": "src/test/ui/panic-runtime/incompatible-type.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/59216858a323978a97593cba22b5ed84350a3783/src%2Ftest%2Fui%2Fpanic-runtime%2Fincompatible-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59216858a323978a97593cba22b5ed84350a3783/src%2Ftest%2Fui%2Fpanic-runtime%2Fincompatible-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fincompatible-type.rs?ref=59216858a323978a97593cba22b5ed84350a3783", "patch": "@@ -0,0 +1,24 @@\n+// Check that rust_eh_personality can have a different type signature than the\n+// one hardcoded in the compiler.  Regression test for #70117. Used to fail with:\n+//\n+// Assertion `isa<X>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\n+//\n+// build-pass\n+// compile-flags: --crate-type=lib -Ccodegen-units=1\n+#![no_std]\n+#![panic_runtime]\n+#![feature(panic_runtime)]\n+#![feature(rustc_attrs)]\n+\n+pub struct DropMe;\n+\n+impl Drop for DropMe {\n+    fn drop(&mut self) {}\n+}\n+\n+pub fn test(_: DropMe) {\n+    unreachable!();\n+}\n+\n+#[rustc_std_internal_symbol]\n+pub unsafe extern \"C\" fn rust_eh_personality() {}"}]}