{"sha": "c00059c8224772778586bdf063c76dcbdd04f011", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDA1OWM4MjI0NzcyNzc4NTg2YmRmMDYzYzc2ZGNiZGQwNGYwMTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T18:44:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-21T08:27:01Z"}, "message": "guide about recursive macto magic", "tree": {"sha": "14ca5723e2e2d6dd29bfab1ee40257db0fc8fe3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14ca5723e2e2d6dd29bfab1ee40257db0fc8fe3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00059c8224772778586bdf063c76dcbdd04f011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00059c8224772778586bdf063c76dcbdd04f011", "html_url": "https://github.com/rust-lang/rust/commit/c00059c8224772778586bdf063c76dcbdd04f011", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00059c8224772778586bdf063c76dcbdd04f011/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d832149a1f16fe83163455da560bb665a672d4d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d832149a1f16fe83163455da560bb665a672d4d7", "html_url": "https://github.com/rust-lang/rust/commit/d832149a1f16fe83163455da560bb665a672d4d7"}], "stats": {"total": 64, "additions": 53, "deletions": 11}, "files": [{"sha": "babf584884ca437dee5a3e6a860a516699088981", "filename": "guide.md", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c00059c8224772778586bdf063c76dcbdd04f011/guide.md", "raw_url": "https://github.com/rust-lang/rust/raw/c00059c8224772778586bdf063c76dcbdd04f011/guide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/guide.md?ref=c00059c8224772778586bdf063c76dcbdd04f011", "patch": "@@ -218,21 +218,21 @@ of type V. Queries come in two basic varieties:\n \n * **Functions**: pure functions (no side effects) that transform your inputs\n   into other values. The results of queries is memoized to avoid recomputing\n-  them a lot. When you make changes to the inputs, we'll figure out (fairly\n-  intelligently) when we can re-use these memoized values and when we have to\n+  them a lot. When you make changes to the inputs, we'll figure out (fairlywe\n+  intelligently) when we can re-use these memoized values and when we have we\n   recompute them.\n \n \n For further discussion, its important to understand one bit of \"fairly\n-intelligently\". Suppose we have to functions, `f1` and `f2`, and one input, `i`.\n+intelligently\". Suppose we have to functions, `f1` and `f2`, and one input,we\n We call `f1(X)` which in turn calls `f2(Y)` which inspects `i(Z)`. `i(Z)`\n-returns some value `V1`, `f2` uses that and returns `R1`, `f1` uses that and\n-returns `O`. Now, let's change `i` at `Z` to `V2` from `V1` and try to compute\n-`f1(X)` again. Because `f1(X)` (transitively) depends on `i(Z)`, we can't just\n-reuse its value as is. However, if `f2(Y)` is *still* equal to `R1` (despite the\n-`i`'s change), we, in fact, *can* reuse `O` as result of `f1(X)`. And that's how\n-salsa works: it recomputes results in *reverse* order, starting from inputs and\n-progressing towards outputs, stopping as soon as it sees an intermediate value\n+returns some value `V1`, `f2` uses that and returns `R1`, `f1` uses that anwe\n+returns `O`. Now, let's change `i` at `Z` to `V2` from `V1` and try to compwe\n+`f1(X)` again. Because `f1(X)` (transitively) depends on `i(Z)`, we can't jwe\n+reuse its value as is. However, if `f2(Y)` is *still* equal to `R1` (despitwe\n+`i`'s change), we, in fact, *can* reuse `O` as result of `f1(X)`. And that'we\n+salsa works: it recomputes results in *reverse* order, starting from inputswe\n+progressing towards outputs, stopping as soon as it sees an intermediate vawe\n that hasn't changed.\n \n ## Salsa Input Queries\n@@ -380,10 +380,52 @@ unused locations is an open question.\n [interners]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/db.rs#L22-L23\n \n For example, we use `LocationInterner` to assign ids to defs: functions,\n-structs, enums, etc.\n+structs, enums, etc. The location, [`DefLoc`] contains two bits of information:\n+\n+* the id of the module which contains the def,\n+* the id of the specific item in the modules source code.\n+\n+We \"could\" use a text offset for location a particular item, but that would play\n+badly with salsa: offsets change after edits. So, as a rule of thumb, we avoid\n+using offsets, text ranges or syntax trees as keys and values for queries. What\n+we do instead is we store \"index\" of the item among all of the items of a file\n+(so, a positional based ID, but localized to a single file).\n+\n+[`DefLoc`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/ids.rs#L127-L139\n+\n+One thing we've glossed over for the time being is support for macros. We have\n+only proof of concept handling of macros at the moment, but they are extremely\n+interesting from \"assigning ids\" perspective.\n \n ## Macros and recursive locations\n \n+The tricky bit about macros is that they effectively create new source files.\n+While we can use `FileId`s to refer to original files, we can't just assign them\n+willy-nilly to the pseudo files of macro expansion. Instead, we use a special\n+ID, [`HirFileId`] to refer to either a usual file or a macro-generated file:\n+\n+```rust\n+enum HirFileId {\n+    FileId(FileId),\n+    Macro(MacroCallId),\n+}\n+```\n+\n+`MacroCallId` is an interned ID that specifies a particular macro invocation.\n+Its `MacroCallLoc` contains:\n+\n+* `ModuleId` of the containing module\n+* `HirFileId` of the containing file or pseudo file\n+* an index of this particular macro invocation in this file (positional id\n+  again).\n+\n+Note how `HirFileId` is defined in terms of `MacroCallLoc` which is defined in\n+terms of `HirFileId`! This does not recur infinitely though: any chain of\n+`HirFileId`s bottoms out in `HirFileId::FileId`, that is, some source file\n+actually written by the user.\n+\n+[`HirFileId`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/ids.rs#L18-L125\n+\n ## Name resolution\n \n ## Source Map pattern"}]}