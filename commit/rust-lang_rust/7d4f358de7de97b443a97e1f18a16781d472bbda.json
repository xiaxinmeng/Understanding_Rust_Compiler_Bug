{"sha": "7d4f358de7de97b443a97e1f18a16781d472bbda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNGYzNThkZTdkZTk3YjQ0M2E5N2UxZjE4YTE2NzgxZDQ3MmJiZGE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-15T02:49:41Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-16T11:49:40Z"}, "message": "Support SSE with integer types in x86-64 FFI.\n\nUnlike the intrinics in C, this types the SSE values base on integer\nsize. This matches the LLVM intrinsics which have concrete vector types\n(`<4 x i32>` etc.), and is no loss of expressivity: if one is using a C\nfunction that really takes an untyped integral SSE value, just give it\nwhatever Rust type makes most sense.", "tree": {"sha": "3a87bdf8dc6423b31b28a7c71414aef3d4b76190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a87bdf8dc6423b31b28a7c71414aef3d4b76190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d4f358de7de97b443a97e1f18a16781d472bbda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d4f358de7de97b443a97e1f18a16781d472bbda", "html_url": "https://github.com/rust-lang/rust/commit/7d4f358de7de97b443a97e1f18a16781d472bbda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d4f358de7de97b443a97e1f18a16781d472bbda/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "url": "https://api.github.com/repos/rust-lang/rust/commits/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347", "html_url": "https://github.com/rust-lang/rust/commit/5edbe1f5ddab26a5a8ea75d447d5a37d8f7a3347"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "980a70256e9369fb1514f7fffa5ad48d9bac88d3", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d4f358de7de97b443a97e1f18a16781d472bbda/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d4f358de7de97b443a97e1f18a16781d472bbda/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=7d4f358de7de97b443a97e1f18a16781d472bbda", "patch": "@@ -32,7 +32,7 @@ enum RegClass {\n     SSEFv,\n     SSEDs,\n     SSEDv,\n-    SSEInt,\n+    SSEInt(/* bitwidth */ u64),\n     /// Data that can appear in the upper half of an SSE register.\n     SSEUp,\n     X87,\n@@ -57,7 +57,7 @@ impl TypeMethods for Type {\n impl RegClass {\n     fn is_sse(&self) -> bool {\n         match *self {\n-            SSEFs | SSEFv | SSEDs | SSEDv => true,\n+            SSEFs | SSEFv | SSEDs | SSEDv | SSEInt(_) => true,\n             _ => false\n         }\n     }\n@@ -254,7 +254,7 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n                 let elt = ty.element_type();\n                 let eltsz = ty_size(elt);\n                 let mut reg = match elt.kind() {\n-                    Integer => SSEInt,\n+                    Integer => SSEInt(elt.int_width()),\n                     Float => SSEFv,\n                     Double => SSEDv,\n                     _ => panic!(\"classify: unhandled vector element type\")\n@@ -350,19 +350,19 @@ fn llreg_ty(ccx: &CrateContext, cls: &[RegClass]) -> Type {\n             Int => {\n                 tys.push(Type::i64(ccx));\n             }\n-            SSEFv | SSEDv | SSEInt => {\n+            SSEFv | SSEDv | SSEInt(_) => {\n                 let (elts_per_word, elt_ty) = match cls[i] {\n                     SSEFv => (2, Type::f32(ccx)),\n                     SSEDv => (1, Type::f64(ccx)),\n-                    // FIXME: need to handle the element types, since\n-                    // C doesn't distinguish between the contained\n-                    // types of the vector at all; normalise to u8,\n-                    // maybe?\n-                    SSEInt => panic!(\"llregtype: SSEInt not yet supported\"),\n+                    SSEInt(bits) => {\n+                        assert!(bits == 8 || bits == 16 || bits == 32 || bits == 64,\n+                                \"llreg_ty: unsupported SSEInt width {}\", bits);\n+                        (64 / bits, Type::ix(ccx, bits))\n+                    }\n                     _ => unreachable!(),\n                 };\n                 let vec_len = llvec_len(&cls[(i + 1u)..]);\n-                let vec_ty = Type::vector(&elt_ty, (vec_len * elts_per_word) as u64);\n+                let vec_ty = Type::vector(&elt_ty, vec_len as u64 * elts_per_word);\n                 tys.push(vec_ty);\n                 i += vec_len;\n                 continue;"}]}