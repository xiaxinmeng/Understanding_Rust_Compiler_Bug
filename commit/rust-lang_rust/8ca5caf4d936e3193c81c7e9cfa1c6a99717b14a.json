{"sha": "8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYTVjYWY0ZDkzNmUzMTkzYzgxYzdlOWNmYTFjNmE5OTcxN2IxNGE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-03-31T11:00:26Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-03-31T21:41:52Z"}, "message": "num: rm wrapping of `Float` methods as functions\n\nThe `Float` trait methods will be usable as functions via UFCS, and\nwe came to a consensus to remove duplicate functions like this a long\ntime ago.\n\nIt does still make sense to keep the duplicate functions when the trait\nmethods are static, unless the decision to leave out the in-scope trait\nname resolution for static methods changes.", "tree": {"sha": "46b326699b4c280dcc119add28b9c37a35d19cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46b326699b4c280dcc119add28b9c37a35d19cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "html_url": "https://github.com/rust-lang/rust/commit/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e63b2d30775fdb6661cdd2160bf0111371144bc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e63b2d30775fdb6661cdd2160bf0111371144bc9", "html_url": "https://github.com/rust-lang/rust/commit/e63b2d30775fdb6661cdd2160bf0111371144bc9"}], "stats": {"total": 98, "additions": 10, "deletions": 88}, "files": [{"sha": "76e3b521957d79c2a05c0e3ac1991749c8b75ca7", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "patch": "@@ -332,8 +332,6 @@ sense, they're simple: just keep whatever ownership the data already has. For\n example:\n \n ~~~rust\n-use std::num::sqrt;\n-\n struct Point {\n     x: f32,\n     y: f32,\n@@ -343,7 +341,7 @@ fn compute_distance(p1: &Point, p2: &Point) -> f32 {\n     let x_d = p1.x - p2.x;\n     let y_d = p1.y - p2.y;\n \n-    sqrt(x_d * x_d + y_d * y_d)\n+    (x_d * x_d + y_d * y_d).sqrt()\n }\n \n fn main() {"}, {"sha": "0f7dda6b7bc7ea5d65080644ea4941437e5346da", "filename": "src/doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "patch": "@@ -826,14 +826,14 @@ Use declarations support a number of convenient shortcuts:\n An example of `use` declarations:\n \n ~~~~\n-use std::num::sin;\n+use std::iter::range_step;\n use std::option::{Some, None};\n \n # fn foo<T>(_: T){}\n \n fn main() {\n-    // Equivalent to 'std::num::sin(1.0);'\n-    sin(1.0);\n+    // Equivalent to 'std::iter::range_step(0, 10, 2);'\n+    range_step(0, 10, 2);\n \n     // Equivalent to 'foo(~[std::option::Some(1.0), std::option::None]);'\n     foo(~[Some(1.0), None]);"}, {"sha": "73c0d0b899a00e03e10069b99b776ddba7bcd48d", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "patch": "@@ -504,13 +504,12 @@ matching in order to bind names to the contents of data types.\n \n ~~~~\n use std::f64;\n-use std::num::atan;\n fn angle(vector: (f64, f64)) -> f64 {\n     let pi = f64::consts::PI;\n     match vector {\n       (0.0, y) if y < 0.0 => 1.5 * pi,\n       (0.0, _) => 0.5 * pi,\n-      (x, y) => atan(y / x)\n+      (x, y) => (y / x).atan()\n     }\n }\n ~~~~\n@@ -1430,12 +1429,11 @@ bad, but often copies are expensive. So we\u2019d like to define a function\n that takes the points by pointer. We can use references to do this:\n \n ~~~\n-use std::num::sqrt;\n # struct Point { x: f64, y: f64 }\n fn compute_distance(p1: &Point, p2: &Point) -> f64 {\n     let x_d = p1.x - p2.x;\n     let y_d = p1.y - p2.y;\n-    sqrt(x_d * x_d + y_d * y_d)\n+    (x_d * x_d + y_d * y_d).sqrt()\n }\n ~~~\n \n@@ -2303,7 +2301,7 @@ impl Shape for Circle {\n     fn new(area: f64) -> Circle { Circle { radius: (area / PI).sqrt() } }\n }\n impl Shape for Square {\n-    fn new(area: f64) -> Square { Square { length: (area).sqrt() } }\n+    fn new(area: f64) -> Square { Square { length: area.sqrt() } }\n }\n \n let area = 42.5;"}, {"sha": "a65f4254080f54917e0e6041d3a277b0fcd7e004", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "patch": "@@ -11,7 +11,6 @@\n //! The Gamma and derived distributions.\n \n use std::num::Float;\n-use std::num;\n use {Rng, Open01};\n use super::normal::StandardNormal;\n use super::{IndependentSample, Sample, Exp};\n@@ -114,7 +113,7 @@ impl GammaLargeShape {\n         GammaLargeShape {\n             shape: shape,\n             scale: scale,\n-            c: 1. / num::sqrt(9. * d),\n+            c: 1. / (9. * d).sqrt(),\n             d: d\n         }\n     }\n@@ -143,7 +142,7 @@ impl IndependentSample<f64> for GammaSmallShape {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n         let Open01(u) = rng.gen::<Open01<f64>>();\n \n-        self.large_shape.ind_sample(rng) * num::powf(u, self.inv_shape)\n+        self.large_shape.ind_sample(rng) * u.powf(&self.inv_shape)\n     }\n }\n impl IndependentSample<f64> for GammaLargeShape {\n@@ -160,7 +159,7 @@ impl IndependentSample<f64> for GammaLargeShape {\n \n             let x_sqr = x * x;\n             if u < 1.0 - 0.0331 * x_sqr * x_sqr ||\n-                num::ln(u) < 0.5 * x_sqr + self.d * (1.0 - v + num::ln(v)) {\n+                u.ln() < 0.5 * x_sqr + self.d * (1.0 - v + v.ln()) {\n                 return self.d * v * self.scale\n             }\n         }"}, {"sha": "2c628112957a5c29c0d988122c5505a50a9fb1e2", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "patch": "@@ -553,79 +553,6 @@ pub trait Float: Signed + Round + Primitive {\n     fn to_radians(&self) -> Self;\n }\n \n-/// Returns the exponential of the number, minus `1`, `exp(n) - 1`, in a way\n-/// that is accurate even if the number is close to zero.\n-#[inline(always)] pub fn exp_m1<T: Float>(value: T) -> T { value.exp_m1() }\n-/// Returns the natural logarithm of the number plus `1`, `ln(n + 1)`, more\n-/// accurately than if the operations were performed separately.\n-#[inline(always)] pub fn ln_1p<T: Float>(value: T) -> T { value.ln_1p() }\n-/// Fused multiply-add. Computes `(a * b) + c` with only one rounding error.\n-///\n-/// This produces a more accurate result with better performance (on some\n-/// architectures) than a separate multiplication operation followed by an add.\n-#[inline(always)] pub fn mul_add<T: Float>(a: T, b: T, c: T) -> T { a.mul_add(b, c) }\n-\n-/// Raise a number to a power.\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// use std::num;\n-///\n-/// let sixteen: f64 = num::powf(2.0, 4.0);\n-/// assert_eq!(sixteen, 16.0);\n-/// ```\n-#[inline(always)] pub fn powf<T: Float>(value: T, n: T) -> T { value.powf(&n) }\n-/// Take the square root of a number.\n-#[inline(always)] pub fn sqrt<T: Float>(value: T) -> T { value.sqrt() }\n-/// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n-#[inline(always)] pub fn rsqrt<T: Float>(value: T) -> T { value.rsqrt() }\n-/// Take the cubic root of a number.\n-#[inline(always)] pub fn cbrt<T: Float>(value: T) -> T { value.cbrt() }\n-/// Calculate the length of the hypotenuse of a right-angle triangle given legs\n-/// of length `x` and `y`.\n-#[inline(always)] pub fn hypot<T: Float>(x: T, y: T) -> T { x.hypot(&y) }\n-/// Sine function.\n-#[inline(always)] pub fn sin<T: Float>(value: T) -> T { value.sin() }\n-/// Cosine function.\n-#[inline(always)] pub fn cos<T: Float>(value: T) -> T { value.cos() }\n-/// Tangent function.\n-#[inline(always)] pub fn tan<T: Float>(value: T) -> T { value.tan() }\n-/// Compute the arcsine of the number.\n-#[inline(always)] pub fn asin<T: Float>(value: T) -> T { value.asin() }\n-/// Compute the arccosine of the number.\n-#[inline(always)] pub fn acos<T: Float>(value: T) -> T { value.acos() }\n-/// Compute the arctangent of the number.\n-#[inline(always)] pub fn atan<T: Float>(value: T) -> T { value.atan() }\n-/// Compute the arctangent with 2 arguments.\n-#[inline(always)] pub fn atan2<T: Float>(x: T, y: T) -> T { x.atan2(&y) }\n-/// Simultaneously computes the sine and cosine of the number.\n-#[inline(always)] pub fn sin_cos<T: Float>(value: T) -> (T, T) { value.sin_cos() }\n-/// Returns `e^(value)`, (the exponential function).\n-#[inline(always)] pub fn exp<T: Float>(value: T) -> T { value.exp() }\n-/// Returns 2 raised to the power of the number, `2^(value)`.\n-#[inline(always)] pub fn exp2<T: Float>(value: T) -> T { value.exp2() }\n-/// Returns the natural logarithm of the number.\n-#[inline(always)] pub fn ln<T: Float>(value: T) -> T { value.ln() }\n-/// Returns the logarithm of the number with respect to an arbitrary base.\n-#[inline(always)] pub fn log<T: Float>(value: T, base: T) -> T { value.log(&base) }\n-/// Returns the base 2 logarithm of the number.\n-#[inline(always)] pub fn log2<T: Float>(value: T) -> T { value.log2() }\n-/// Returns the base 10 logarithm of the number.\n-#[inline(always)] pub fn log10<T: Float>(value: T) -> T { value.log10() }\n-/// Hyperbolic sine function.\n-#[inline(always)] pub fn sinh<T: Float>(value: T) -> T { value.sinh() }\n-/// Hyperbolic cosine function.\n-#[inline(always)] pub fn cosh<T: Float>(value: T) -> T { value.cosh() }\n-/// Hyperbolic tangent function.\n-#[inline(always)] pub fn tanh<T: Float>(value: T) -> T { value.tanh() }\n-/// Inverse hyperbolic sine function.\n-#[inline(always)] pub fn asinh<T: Float>(value: T) -> T { value.asinh() }\n-/// Inverse hyperbolic cosine function.\n-#[inline(always)] pub fn acosh<T: Float>(value: T) -> T { value.acosh() }\n-/// Inverse hyperbolic tangent function.\n-#[inline(always)] pub fn atanh<T: Float>(value: T) -> T { value.atanh() }\n-\n /// A generic trait for converting a value to a number.\n pub trait ToPrimitive {\n     /// Converts the value of `self` to an `int`."}]}