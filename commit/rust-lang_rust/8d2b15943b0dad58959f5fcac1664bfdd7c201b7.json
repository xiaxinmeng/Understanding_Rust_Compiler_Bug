{"sha": "8d2b15943b0dad58959f5fcac1664bfdd7c201b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMmIxNTk0M2IwZGFkNTg5NTlmNWZjYWMxNjY0YmZkZDdjMjAxYjc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-09-29T13:33:25Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-09T13:21:45Z"}, "message": "bootstrap: always use the Rust version in package names\n\nThe format of the tarballs produced by CI is roughly the following:\n\n    {component}-{release}-{target}.{ext}\n\nWhile on the beta and nightly channels `{release}` is just the channel\nname, on the stable channel is either the Rust version or the version of\nthe component we're shipping:\n\n    cargo-0.47.0-x86_64-unknown-linux-gnu.tar.xz\n    clippy-0.0.212-x86_64-unknown-linux-gnu.tar.xz\n    llvm-tools-1.46.0-x86_64-unknown-linux-gnu.tar.xz\n    miri-0.1.0-x86_64-unknown-linux-gnu.tar.xz\n    rls-1.41.0-x86_64-unknown-linux-gnu.tar.xz\n    rust-1.46.0-x86_64-unknown-linux-gnu.tar.xz\n    ...\n\nThis makes it really hard to get the package URL without having access\nto the manifest (and there is no manifest on ci-artifacts.rlo), as there\nis no consistent version number to use.\n\nThis commit addresses the problem by always using the Rust version\nnumber as `{release}` for the stable channel, regardless of the version\nnumber of the component we're shipping. I chose that instead of \"stable\"\nto avoid breaking the URL scheme *that* much.\n\nRustup should not be affected by this change, as it fetches the URLs\nfrom the manifest. Unfortunately we don't have a way to test other\nclients before making a stable release, as this change only affects the\nstable channel.", "tree": {"sha": "970e1c5df4b8a04140cbc4fd0e4d922e9ddd590c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/970e1c5df4b8a04140cbc4fd0e4d922e9ddd590c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d2b15943b0dad58959f5fcac1664bfdd7c201b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl+AY+oACgkQPgar6Auq\n8ZzPaw/+J1fWZ9EFSQX8GLozqpah21StmJcIf0m9fnyMrU1lKkENPOwuvvpbhNZ8\ngAY0T2pYigaWl2u+URmpR/PUvJxk7bqm/awLOOzmgk4LWpZD17D7oQ4WtDEAJd8v\nmY2y8DtMxRVcrDmHCNyMWMnZMPJhTPx2LiE9fhUXsiAZpC+DKFXnKklI+/Hv5ANN\netjL43InBHwFS9Pf3WefLLgdrizEfBpOk1vztbW8hnZuG7C7WbzWo7a01hckirQl\nfMAshRWwBeYKif689CwfJ/Ktc7FbLlGPIqgyEC+CwfG4JjfrXBtZj+QpJmbkBSPf\nlJWY4ycuJdyRGZb1KHk9EAQl0avwVnsXHsLizBct9VI1ITmXNWon8GKaJoFbMNQX\nwjC2zi//+V6AKHvJy/+5No9ZgY/yQZFsLf0kiv9S5gs5U/joIFguoCcRyq9Eg3QK\nL3PTT3wLs7zacN83EP7WndBKhweSe6RbC6/GvpubqpB9yV8G04sLaaQ/zHhAv4Kf\nqB8Wk/a86uk4G7Ojkr/5giIyJYCClU7UYWEjNozrveQgL2phRoCUqFc8zhJbm6Qp\nOAL4A3z3D429CIwAQjLJBsZt7fDOv9fwdEYRgs2U3u+eUUKL88hNU2r/PDb4MeFu\nSXmBd94DCPczYHgj5kw5T3fkVCM68VHjsGJUuy7iZ3HUv0wpw2k=\n=thHQ\n-----END PGP SIGNATURE-----", "payload": "tree 970e1c5df4b8a04140cbc4fd0e4d922e9ddd590c\nparent ccea570488694e502c1a7ca8f3f0866c9b763ce4\nauthor Pietro Albini <pietro@pietroalbini.org> 1601386405 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1602249705 +0200\n\nbootstrap: always use the Rust version in package names\n\nThe format of the tarballs produced by CI is roughly the following:\n\n    {component}-{release}-{target}.{ext}\n\nWhile on the beta and nightly channels `{release}` is just the channel\nname, on the stable channel is either the Rust version or the version of\nthe component we're shipping:\n\n    cargo-0.47.0-x86_64-unknown-linux-gnu.tar.xz\n    clippy-0.0.212-x86_64-unknown-linux-gnu.tar.xz\n    llvm-tools-1.46.0-x86_64-unknown-linux-gnu.tar.xz\n    miri-0.1.0-x86_64-unknown-linux-gnu.tar.xz\n    rls-1.41.0-x86_64-unknown-linux-gnu.tar.xz\n    rust-1.46.0-x86_64-unknown-linux-gnu.tar.xz\n    ...\n\nThis makes it really hard to get the package URL without having access\nto the manifest (and there is no manifest on ci-artifacts.rlo), as there\nis no consistent version number to use.\n\nThis commit addresses the problem by always using the Rust version\nnumber as `{release}` for the stable channel, regardless of the version\nnumber of the component we're shipping. I chose that instead of \"stable\"\nto avoid breaking the URL scheme *that* much.\n\nRustup should not be affected by this change, as it fetches the URLs\nfrom the manifest. Unfortunately we don't have a way to test other\nclients before making a stable release, as this change only affects the\nstable channel.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2b15943b0dad58959f5fcac1664bfdd7c201b7", "html_url": "https://github.com/rust-lang/rust/commit/8d2b15943b0dad58959f5fcac1664bfdd7c201b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d2b15943b0dad58959f5fcac1664bfdd7c201b7/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccea570488694e502c1a7ca8f3f0866c9b763ce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccea570488694e502c1a7ca8f3f0866c9b763ce4", "html_url": "https://github.com/rust-lang/rust/commit/ccea570488694e502c1a7ca8f3f0866c9b763ce4"}], "stats": {"total": 122, "additions": 11, "deletions": 111}, "files": [{"sha": "3a0743da7a415f8d9215c9829ece0c35a38a582d", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8d2b15943b0dad58959f5fcac1664bfdd7c201b7/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2b15943b0dad58959f5fcac1664bfdd7c201b7/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=8d2b15943b0dad58959f5fcac1664bfdd7c201b7", "patch": "@@ -26,24 +26,7 @@ use crate::{Compiler, DependencyType, Mode, LLVM_TOOLS};\n use time::{self, Timespec};\n \n pub fn pkgname(builder: &Builder<'_>, component: &str) -> String {\n-    if component == \"cargo\" {\n-        format!(\"{}-{}\", component, builder.cargo_package_vers())\n-    } else if component == \"rls\" {\n-        format!(\"{}-{}\", component, builder.rls_package_vers())\n-    } else if component == \"rust-analyzer\" {\n-        format!(\"{}-{}\", component, builder.rust_analyzer_package_vers())\n-    } else if component == \"clippy\" {\n-        format!(\"{}-{}\", component, builder.clippy_package_vers())\n-    } else if component == \"miri\" {\n-        format!(\"{}-{}\", component, builder.miri_package_vers())\n-    } else if component == \"rustfmt\" {\n-        format!(\"{}-{}\", component, builder.rustfmt_package_vers())\n-    } else if component == \"llvm-tools\" {\n-        format!(\"{}-{}\", component, builder.llvm_tools_package_vers())\n-    } else {\n-        assert!(component.starts_with(\"rust\"));\n-        format!(\"{}-{}\", component, builder.rust_package_vers())\n-    }\n+    format!(\"{}-{}\", component, builder.rust_package_vers())\n }\n \n pub(crate) fn distdir(builder: &Builder<'_>) -> PathBuf {"}, {"sha": "bf81c4bf28e37af5f3d75ff0a476ade04a602191", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8d2b15943b0dad58959f5fcac1664bfdd7c201b7/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2b15943b0dad58959f5fcac1664bfdd7c201b7/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=8d2b15943b0dad58959f5fcac1664bfdd7c201b7", "patch": "@@ -1051,40 +1051,6 @@ impl Build {\n         self.package_vers(&self.version)\n     }\n \n-    /// Returns the value of `package_vers` above for Cargo\n-    fn cargo_package_vers(&self) -> String {\n-        self.package_vers(&self.release_num(\"cargo\"))\n-    }\n-\n-    /// Returns the value of `package_vers` above for rls\n-    fn rls_package_vers(&self) -> String {\n-        self.package_vers(&self.release_num(\"rls\"))\n-    }\n-\n-    /// Returns the value of `package_vers` above for rust-analyzer\n-    fn rust_analyzer_package_vers(&self) -> String {\n-        self.package_vers(&self.release_num(\"rust-analyzer/crates/rust-analyzer\"))\n-    }\n-\n-    /// Returns the value of `package_vers` above for clippy\n-    fn clippy_package_vers(&self) -> String {\n-        self.package_vers(&self.release_num(\"clippy\"))\n-    }\n-\n-    /// Returns the value of `package_vers` above for miri\n-    fn miri_package_vers(&self) -> String {\n-        self.package_vers(&self.release_num(\"miri\"))\n-    }\n-\n-    /// Returns the value of `package_vers` above for rustfmt\n-    fn rustfmt_package_vers(&self) -> String {\n-        self.package_vers(&self.release_num(\"rustfmt\"))\n-    }\n-\n-    fn llvm_tools_package_vers(&self) -> String {\n-        self.package_vers(&self.version)\n-    }\n-\n     fn llvm_tools_vers(&self) -> String {\n         self.rust_version()\n     }"}, {"sha": "b35f3a595fb38f05510881e6d8fe3cfc5a7a8599", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d2b15943b0dad58959f5fcac1664bfdd7c201b7/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2b15943b0dad58959f5fcac1664bfdd7c201b7/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=8d2b15943b0dad58959f5fcac1664bfdd7c201b7", "patch": "@@ -252,7 +252,7 @@ impl Builder {\n         }\n         let manifest = self.build_manifest();\n \n-        let rust_version = self.versions.package_version(&PkgType::Rust).unwrap();\n+        let rust_version = self.versions.rustc_version();\n         self.write_channel_files(self.versions.channel(), &manifest);\n         if self.versions.channel() != rust_version {\n             self.write_channel_files(&rust_version, &manifest);"}, {"sha": "75b6979b54a78ae17820695a932490685fa9fb21", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 9, "deletions": 58, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8d2b15943b0dad58959f5fcac1664bfdd7c201b7/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2b15943b0dad58959f5fcac1664bfdd7c201b7/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=8d2b15943b0dad58959f5fcac1664bfdd7c201b7", "patch": "@@ -38,23 +38,6 @@ impl PkgType {\n         }\n     }\n \n-    /// The directory containing the `Cargo.toml` of this component inside the monorepo, to\n-    /// retrieve the source code version. If `None` is returned Rust's version will be used.\n-    fn rust_monorepo_path(&self) -> Option<&'static str> {\n-        match self {\n-            PkgType::Cargo => Some(\"src/tools/cargo\"),\n-            PkgType::Rls => Some(\"src/tools/rls\"),\n-            PkgType::RustAnalyzer => Some(\"src/tools/rust-analyzer/crates/rust-analyzer\"),\n-            PkgType::Clippy => Some(\"src/tools/clippy\"),\n-            PkgType::Rustfmt => Some(\"src/tools/rustfmt\"),\n-            PkgType::Miri => Some(\"src/tools/miri\"),\n-            PkgType::Rust => None,\n-            PkgType::RustSrc => None,\n-            PkgType::LlvmTools => None,\n-            PkgType::Other(_) => None,\n-        }\n-    }\n-\n     /// First part of the tarball name.\n     fn tarball_component_name(&self) -> &str {\n         match self {\n@@ -105,9 +88,7 @@ pub(crate) struct VersionInfo {\n pub(crate) struct Versions {\n     channel: String,\n     rustc_version: String,\n-    monorepo_root: PathBuf,\n     dist_path: PathBuf,\n-    package_versions: HashMap<PkgType, String>,\n     versions: HashMap<PkgType, VersionInfo>,\n }\n \n@@ -123,9 +104,7 @@ impl Versions {\n                 .context(\"failed to read the rustc version from src/version\")?\n                 .trim()\n                 .to_string(),\n-            monorepo_root: monorepo_root.into(),\n             dist_path: dist_path.into(),\n-            package_versions: HashMap::new(),\n             versions: HashMap::new(),\n         })\n     }\n@@ -204,49 +183,21 @@ impl Versions {\n         target: &str,\n     ) -> Result<String, Error> {\n         let component_name = package.tarball_component_name();\n-        let version = self.package_version(package).with_context(|| {\n-            format!(\"failed to get the package version for component {:?}\", package,)\n-        })?;\n+        let version = match self.channel.as_str() {\n+            \"stable\" => self.rustc_version.clone(),\n+            \"beta\" => \"beta\".into(),\n+            \"nightly\" => \"nightly\".into(),\n+            _ => format!(\"{}-dev\", self.rustc_version),\n+        };\n+\n         if package.target_independent() {\n             Ok(format!(\"{}-{}.tar.gz\", component_name, version))\n         } else {\n             Ok(format!(\"{}-{}-{}.tar.gz\", component_name, version, target))\n         }\n     }\n \n-    pub(crate) fn package_version(&mut self, package: &PkgType) -> Result<String, Error> {\n-        match self.package_versions.get(package) {\n-            Some(release) => Ok(release.clone()),\n-            None => {\n-                let version = match package.rust_monorepo_path() {\n-                    Some(path) => {\n-                        let path = self.monorepo_root.join(path).join(\"Cargo.toml\");\n-                        let cargo_toml: CargoToml = toml::from_slice(&std::fs::read(path)?)?;\n-                        cargo_toml.package.version\n-                    }\n-                    None => self.rustc_version.clone(),\n-                };\n-\n-                let release = match self.channel.as_str() {\n-                    \"stable\" => version,\n-                    \"beta\" => \"beta\".into(),\n-                    \"nightly\" => \"nightly\".into(),\n-                    _ => format!(\"{}-dev\", version),\n-                };\n-\n-                self.package_versions.insert(package.clone(), release.clone());\n-                Ok(release)\n-            }\n-        }\n+    pub(crate) fn rustc_version(&self) -> &str {\n+        &self.rustc_version\n     }\n }\n-\n-#[derive(serde::Deserialize)]\n-struct CargoToml {\n-    package: CargoTomlPackage,\n-}\n-\n-#[derive(serde::Deserialize)]\n-struct CargoTomlPackage {\n-    version: String,\n-}"}]}