{"sha": "aa393b0cde881c612379d90ca300396cd7ce2e96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMzkzYjBjZGU4ODFjNjEyMzc5ZDkwY2EzMDAzOTZjZDdjZTJlOTY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-04-18T20:58:57Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-19T17:32:44Z"}, "message": "Some cleanup to `maybe_parse_struct_expr`", "tree": {"sha": "23ae8880b9af2e436f38e54cf6393c9bf773bac8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23ae8880b9af2e436f38e54cf6393c9bf773bac8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa393b0cde881c612379d90ca300396cd7ce2e96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa393b0cde881c612379d90ca300396cd7ce2e96", "html_url": "https://github.com/rust-lang/rust/commit/aa393b0cde881c612379d90ca300396cd7ce2e96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa393b0cde881c612379d90ca300396cd7ce2e96/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c4ca60edd9775873e555dbb5928b000bd734403", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4ca60edd9775873e555dbb5928b000bd734403", "html_url": "https://github.com/rust-lang/rust/commit/4c4ca60edd9775873e555dbb5928b000bd734403"}], "stats": {"total": 80, "additions": 26, "deletions": 54}, "files": [{"sha": "8feab373e710271ca99ad6b55cbc60dd79208667", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aa393b0cde881c612379d90ca300396cd7ce2e96/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa393b0cde881c612379d90ca300396cd7ce2e96/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aa393b0cde881c612379d90ca300396cd7ce2e96", "patch": "@@ -2910,27 +2910,22 @@ impl<'a> Parser<'a> {\n         path: &ast::Path,\n         attrs: &ThinVec<Attribute>,\n     ) -> Option<PResult<'a, P<Expr>>> {\n-        // We don't want to assume it's a struct when encountering `{ <ident>: <ident> }` because\n-        // it could be type ascription, like in `{ ident: u32 }`.\n-        let isnt_ascription = self.look_ahead(1, |t| t.is_ident()) &&\n-            self.look_ahead(2, |t| *t == token::Colon) && (\n-                (self.look_ahead(3, |t| t.is_ident()) &&\n-                 self.look_ahead(4, |t| *t == token::Comma)) ||\n-                self.look_ahead(3, |t| t.is_lit()) ||\n-                self.look_ahead(3, |t| *t == token::BinOp(token::Minus)) &&\n-                self.look_ahead(4, |t| t.is_lit())\n-            );\n-        let could_be_struct = self.look_ahead(1, |t| t.is_ident()) && (\n-            self.look_ahead(2, |t| *t == token::Colon) && isnt_ascription\n-            || self.look_ahead(2, |t| *t == token::Comma)\n-            // We could also check for `token::CloseDelim(token::Brace)`, but that would\n-            // have false positives in the case of `if x == y { z } { a }`.\n+        let struct_allowed = !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);\n+        let certainly_not_a_block = || self.look_ahead(1, |t| t.is_ident()) && (\n+            // `{ ident, ` cannot start a block\n+            self.look_ahead(2, |t| t == &token::Comma) ||\n+            self.look_ahead(2, |t| t == &token::Colon) && (\n+                // `{ ident: token, ` cannot start a block\n+                self.look_ahead(4, |t| t == &token::Comma) ||\n+                // `{ ident: ` cannot start a block unless it's a type ascription `ident: Type`\n+                self.look_ahead(3, |t| !t.can_begin_type())\n+            )\n         );\n-        let bad_struct = self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);\n-        if !bad_struct || could_be_struct {\n+\n+        if struct_allowed || certainly_not_a_block() {\n             // This is a struct literal, but we don't can't accept them here\n             let expr = self.parse_struct_expr(lo, path.clone(), attrs.clone());\n-            if let (Ok(expr), true) = (&expr, bad_struct) {\n+            if let (Ok(expr), false) = (&expr, struct_allowed) {\n                 let mut err = self.diagnostic().struct_span_err(\n                     expr.span,\n                     \"struct literals are not allowed here\","}, {"sha": "0058e8981cd25685e98bb3b44290bcef103d0162", "filename": "src/test/ui/parser/struct-literal-in-match-discriminant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa393b0cde881c612379d90ca300396cd7ce2e96/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa393b0cde881c612379d90ca300396cd7ce2e96/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr?ref=aa393b0cde881c612379d90ca300396cd7ce2e96", "patch": "@@ -14,3 +14,4 @@ LL |     }) {\n    |\n \n error: aborting due to previous error\n+"}, {"sha": "4ef8effaf1f5f36ec2e33d66c5f8de371b5dd7e6", "filename": "src/test/ui/struct-literal-variant-in-if.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa393b0cde881c612379d90ca300396cd7ce2e96/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa393b0cde881c612379d90ca300396cd7ce2e96/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.rs?ref=aa393b0cde881c612379d90ca300396cd7ce2e96", "patch": "@@ -13,9 +13,7 @@ fn test_E(x: E) {\n     if x == E::I { field1: true, field2: 42 } {}\n     //~^ ERROR struct literals are not allowed here\n     if x == E::V { field: false } {}\n-    //~^ ERROR expected identifier, found keyword `false`\n-    //~| ERROR expected type, found keyword `false`\n-    //~| ERROR expected value, found struct variant `E::V`\n+    //~^ ERROR struct literals are not allowed here\n     if x == E::J { field: -42 } {}\n     //~^ ERROR struct literals are not allowed here\n     if x == E::K { field: \"\" } {}"}, {"sha": "55f23baea7aa8831c65d5bddad33d3e0563e07b2", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/aa393b0cde881c612379d90ca300396cd7ce2e96/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa393b0cde881c612379d90ca300396cd7ce2e96/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=aa393b0cde881c612379d90ca300396cd7ce2e96", "patch": "@@ -8,32 +8,18 @@ help: surround the struct literal with parenthesis\n LL |     if x == (E::I { field1: true, field2: 42 }) {}\n    |             ^                                 ^\n \n-error: expected identifier, found keyword `false`\n-  --> $DIR/struct-literal-variant-in-if.rs:15:27\n-   |\n-LL |     if x == E::V { field: false } {}\n-   |                           ^^^^^ expected identifier, found keyword\n-help: you can escape reserved keywords to use them as identifiers\n-   |\n-LL |     if x == E::V { field: r#false } {}\n-   |                           ^^^^^^^\n-\n-error: expected type, found keyword `false`\n-  --> $DIR/struct-literal-variant-in-if.rs:15:27\n+error: struct literals are not allowed here\n+  --> $DIR/struct-literal-variant-in-if.rs:15:13\n    |\n LL |     if x == E::V { field: false } {}\n-   |                           ^^^^^ expecting a type here because of type ascription\n-   |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/struct-literal-variant-in-if.rs:15:20\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+help: surround the struct literal with parenthesis\n    |\n-LL |     if x == E::V { field: false } {}\n-   |                    ^^^^^\n-   = help: this might be indicative of a syntax error elsewhere\n+LL |     if x == (E::V { field: false }) {}\n+   |             ^                     ^\n \n error: struct literals are not allowed here\n-  --> $DIR/struct-literal-variant-in-if.rs:19:13\n+  --> $DIR/struct-literal-variant-in-if.rs:17:13\n    |\n LL |     if x == E::J { field: -42 } {}\n    |             ^^^^^^^^^^^^^^^^^^^\n@@ -43,7 +29,7 @@ LL |     if x == (E::J { field: -42 }) {}\n    |             ^                   ^\n \n error: struct literals are not allowed here\n-  --> $DIR/struct-literal-variant-in-if.rs:21:13\n+  --> $DIR/struct-literal-variant-in-if.rs:19:13\n    |\n LL |     if x == E::K { field: \"\" } {}\n    |             ^^^^^^^^^^^^^^^^^^\n@@ -60,14 +46,6 @@ LL |     if x == E::V { field } {}\n    |             |\n    |             help: surround the struct literal with parenthesis: `(E::V { field })`\n \n-error[E0423]: expected value, found struct variant `E::V`\n-  --> $DIR/struct-literal-variant-in-if.rs:15:13\n-   |\n-LL |     if x == E::V { field: false } {}\n-   |             ^^^^-----------------\n-   |             |\n-   |             help: surround the struct literal with parenthesis: `(E::V { field: false })`\n-\n error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:10:20\n    |\n@@ -81,15 +59,15 @@ LL |     if x == E::V { field } {}\n               found type `bool`\n \n error[E0308]: mismatched types\n-  --> $DIR/struct-literal-variant-in-if.rs:23:20\n+  --> $DIR/struct-literal-variant-in-if.rs:21:20\n    |\n LL |     let y: usize = ();\n    |                    ^^ expected usize, found ()\n    |\n    = note: expected type `usize`\n               found type `()`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors occurred: E0308, E0423.\n+Some errors have detailed explanations: E0308, E0423.\n For more information about an error, try `rustc --explain E0308`."}]}