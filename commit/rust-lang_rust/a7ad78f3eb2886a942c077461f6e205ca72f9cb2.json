{"sha": "a7ad78f3eb2886a942c077461f6e205ca72f9cb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YWQ3OGYzZWIyODg2YTk0MmMwNzc0NjFmNmUyMDVjYTcyZjljYjI=", "commit": {"author": {"name": "Heinz N. Gies", "email": "heinz@licenser.net", "date": "2019-10-15T19:33:07Z"}, "committer": {"name": "Heinz N. Gies", "email": "heinz@licenser.net", "date": "2019-10-18T05:37:58Z"}, "message": "Add expect\n\nCo-Authored-By: Philipp Krones <hello@philkrones.com>", "tree": {"sha": "c0c73308c04edaddffac97d3ef6ff1178c73ccf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0c73308c04edaddffac97d3ef6ff1178c73ccf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7ad78f3eb2886a942c077461f6e205ca72f9cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ad78f3eb2886a942c077461f6e205ca72f9cb2", "html_url": "https://github.com/rust-lang/rust/commit/a7ad78f3eb2886a942c077461f6e205ca72f9cb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7ad78f3eb2886a942c077461f6e205ca72f9cb2/comments", "author": {"login": "Licenser", "id": 119093, "node_id": "MDQ6VXNlcjExOTA5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/119093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Licenser", "html_url": "https://github.com/Licenser", "followers_url": "https://api.github.com/users/Licenser/followers", "following_url": "https://api.github.com/users/Licenser/following{/other_user}", "gists_url": "https://api.github.com/users/Licenser/gists{/gist_id}", "starred_url": "https://api.github.com/users/Licenser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Licenser/subscriptions", "organizations_url": "https://api.github.com/users/Licenser/orgs", "repos_url": "https://api.github.com/users/Licenser/repos", "events_url": "https://api.github.com/users/Licenser/events{/privacy}", "received_events_url": "https://api.github.com/users/Licenser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Licenser", "id": 119093, "node_id": "MDQ6VXNlcjExOTA5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/119093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Licenser", "html_url": "https://github.com/Licenser", "followers_url": "https://api.github.com/users/Licenser/followers", "following_url": "https://api.github.com/users/Licenser/following{/other_user}", "gists_url": "https://api.github.com/users/Licenser/gists{/gist_id}", "starred_url": "https://api.github.com/users/Licenser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Licenser/subscriptions", "organizations_url": "https://api.github.com/users/Licenser/orgs", "repos_url": "https://api.github.com/users/Licenser/repos", "events_url": "https://api.github.com/users/Licenser/events{/privacy}", "received_events_url": "https://api.github.com/users/Licenser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98dc3aabeaf4102669d46912fb9def5f125a05ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/98dc3aabeaf4102669d46912fb9def5f125a05ca", "html_url": "https://github.com/rust-lang/rust/commit/98dc3aabeaf4102669d46912fb9def5f125a05ca"}], "stats": {"total": 97, "additions": 94, "deletions": 3}, "files": [{"sha": "ac8a1dbdac3ff19962f1b833cbad0ebf281cfa0b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/a7ad78f3eb2886a942c077461f6e205ca72f9cb2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ad78f3eb2886a942c077461f6e205ca72f9cb2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a7ad78f3eb2886a942c077461f6e205ca72f9cb2", "patch": "@@ -73,7 +73,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// Using unwrap on an `Option`:\n+    /// Using unwrap on an `Result`:\n     ///\n     /// ```rust\n     /// let res: Result<usize, ()> = Ok(1);\n@@ -91,6 +91,63 @@ declare_clippy_lint! {\n     \"using `Result.unwrap()`, which might be better handled\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `.expect()` calls on `Option`s.\n+    ///\n+    /// **Why is this bad?** Usually it is better to handle the `None` case. Still,\n+    ///  for a lot of quick-and-dirty code, `expect` is a good choice, which is why\n+    ///  this lint is `Allow` by default.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Using expect on an `Option`:\n+    ///\n+    /// ```rust\n+    /// let opt = Some(1);\n+    /// opt.expect(\"one\");\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```rust\n+    /// let opt = Some(1);\n+    /// opt?;\n+    /// ```\n+    pub OPTION_EXPECT_USED,\n+    restriction,\n+    \"using `Option.expect()`, which might be better handled\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `.expect()` calls on `Result`s.\n+    ///\n+    /// **Why is this bad?** `result.expect()` will let the thread panic on `Err`\n+    /// values. Normally, you want to implement more sophisticated error handling,\n+    /// and propagate errors upwards with `try!`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Using expect on an `Result`:\n+    ///\n+    /// ```rust\n+    /// let res: Result<usize, ()> = Ok(1);\n+    /// res.expect(\"one\");\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```rust\n+    /// let res: Result<usize, ()> = Ok(1);\n+    /// res?;\n+    /// ```\n+    pub RESULT_EXPECT_USED,\n+    restriction,\n+    \"using `Result.expect()`, which might be better handled\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for methods that should live in a trait\n     /// implementation of a `std` trait (see [llogiq's blog\n@@ -1037,6 +1094,8 @@ declare_clippy_lint! {\n declare_lint_pass!(Methods => [\n     OPTION_UNWRAP_USED,\n     RESULT_UNWRAP_USED,\n+    OPTION_EXPECT_USED,\n+    RESULT_EXPECT_USED,\n     SHOULD_IMPLEMENT_TRAIT,\n     WRONG_SELF_CONVENTION,\n     WRONG_PUB_SELF_CONVENTION,\n@@ -1095,6 +1154,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"unwrap\", \"get_mut\"] => lint_get_unwrap(cx, expr, arg_lists[1], true),\n             [\"unwrap\", ..] => lint_unwrap(cx, expr, arg_lists[0]),\n             [\"expect\", \"ok\"] => lint_ok_expect(cx, expr, arg_lists[1]),\n+            [\"expect\", ..] => lint_expect(cx, expr, arg_lists[0]),\n             [\"unwrap_or\", \"map\"] => option_map_unwrap_or::lint(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"unwrap_or_else\", \"map\"] => lint_map_unwrap_or_else(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"map_or\", ..] => lint_map_or_none(cx, expr, arg_lists[0]),\n@@ -2063,6 +2123,31 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, unwrap_args: &[hir::E\n     }\n }\n \n+/// lint use of `expect()` for `Option`s and `Result`s\n+fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr, expect_args: &[hir::Expr]) {\n+    let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&expect_args[0]));\n+\n+    let mess = if match_type(cx, obj_ty, &paths::OPTION) {\n+        Some((OPTION_EXPECT_USED, \"an Option\", \"None\"))\n+    } else if match_type(cx, obj_ty, &paths::RESULT) {\n+        Some((RESULT_EXPECT_USED, \"a Result\", \"Err\"))\n+    } else {\n+        None\n+    };\n+\n+    if let Some((lint, kind, none_value)) = mess {\n+        span_lint(\n+            cx,\n+            lint,\n+            expr.span,\n+            &format!(\n+                \"used expect() on {} value. If this value is an {} it will panic\",\n+                kind, none_value\n+            ),\n+        );\n+    }\n+}\n+\n /// lint use of `ok().expect()` for `Result`s\n fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr, ok_args: &[hir::Expr]) {\n     if_chain! {"}, {"sha": "94efb5acc000da6aae35122d4e3740f3ef6b8122", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7ad78f3eb2886a942c077461f6e205ca72f9cb2/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ad78f3eb2886a942c077461f6e205ca72f9cb2/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=a7ad78f3eb2886a942c077461f6e205ca72f9cb2", "patch": "@@ -76,7 +76,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `unreachable!`.\n     ///\n-    /// **Why is this bad?** This macro can cause cause code to panics\n+    /// **Why is this bad?** This macro can cause code to panic\n     ///\n     /// **Known problems:** None.\n     ///"}, {"sha": "ca8358754ee9f8b1d79b39b4f9c1eaab16860bf1", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7ad78f3eb2886a942c077461f6e205ca72f9cb2/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ad78f3eb2886a942c077461f6e205ca72f9cb2/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=a7ad78f3eb2886a942c077461f6e205ca72f9cb2", "patch": "@@ -1,7 +1,13 @@\n // aux-build:option_helpers.rs\n // compile-flags: --edition 2018\n \n-#![warn(clippy::all, clippy::pedantic, clippy::option_unwrap_used)]\n+#![warn(\n+    clippy::all,\n+    clippy::pedantic,\n+    clippy::option_unwrap_used,\n+    clippy::option_expect_used,\n+    clippy::result_expect_used\n+)]\n #![allow(\n     clippy::blacklisted_name,\n     clippy::default_trait_access,"}]}