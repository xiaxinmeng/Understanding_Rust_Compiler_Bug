{"sha": "25b2f4861222d6507598149f576e7d25dc308c8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YjJmNDg2MTIyMmQ2NTA3NTk4MTQ5ZjU3NmU3ZDI1ZGMzMDhjOGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T10:06:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T10:06:44Z"}, "message": "Auto merge of #76378 - petrochenkov:lldtest, r=Mark-Simulacrum\n\nrustbuild: Build tests with LLD if `use-lld = true` was passed\n\nAddresses https://github.com/rust-lang/rust/pull/76127#discussion_r479932392.\n\nOur test suite is generally ready to run with an explicitly specified linker (https://github.com/rust-lang/rust/pull/45191),\n so LLD specified with `use-lld = true` works as well.\n\nOnly 4 tests fail (on `x86_64-pc-windows-msvc`):\n```\nui/panic-runtime/lto-unwind.rs\nrun-make-fulldeps/debug-assertions\nrun-make-fulldeps/foreign-exceptions\nrun-make-fulldeps/test-harness\n```\nAll of them are legitimate issues with LLD (or at least with combination Rust+LLD) and manifest in segfaults on access to TLS (https://github.com/rust-lang/rust/pull/76127#issuecomment-683473325). UPD: These issues are caused by https://github.com/rust-lang/rust/issues/72145 and appear because I had `-Ctarget-cpu=native` set.\n\nUPD: Further commits build tests with LLD for non-MSVC targets and propagate LLD to more places when `use-lld` is enabled.", "tree": {"sha": "fe5f65adf1860096d3dfbaa6e86192a4e7129662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe5f65adf1860096d3dfbaa6e86192a4e7129662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25b2f4861222d6507598149f576e7d25dc308c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25b2f4861222d6507598149f576e7d25dc308c8c", "html_url": "https://github.com/rust-lang/rust/commit/25b2f4861222d6507598149f576e7d25dc308c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25b2f4861222d6507598149f576e7d25dc308c8c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a18b34d9793a88142c122f83fe53683f58f26ecc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a18b34d9793a88142c122f83fe53683f58f26ecc", "html_url": "https://github.com/rust-lang/rust/commit/a18b34d9793a88142c122f83fe53683f58f26ecc"}, {"sha": "75a2c68fb66fb9aac2805e298d20578019a0c129", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a2c68fb66fb9aac2805e298d20578019a0c129", "html_url": "https://github.com/rust-lang/rust/commit/75a2c68fb66fb9aac2805e298d20578019a0c129"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "c311c933e7edcc5eac249ff5732cf0f535122921", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b2f4861222d6507598149f576e7d25dc308c8c/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/25b2f4861222d6507598149f576e7d25dc308c8c/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=25b2f4861222d6507598149f576e7d25dc308c8c", "patch": "@@ -431,7 +431,7 @@\n # supported platforms. The LLD from the bootstrap distribution will be used\n # and not the LLD compiled during the bootstrap.\n #\n-# LLD will not be used if we're cross linking or running tests.\n+# LLD will not be used if we're cross linking.\n #\n # Explicitly setting the linker for a target will override this option when targeting MSVC.\n #use-lld = false"}, {"sha": "3694bdbf67054e68d44d757e48979bb67b6ba179", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=25b2f4861222d6507598149f576e7d25dc308c8c", "patch": "@@ -112,6 +112,9 @@ fn main() {\n         if let Ok(host_linker) = env::var(\"RUSTC_HOST_LINKER\") {\n             cmd.arg(format!(\"-Clinker={}\", host_linker));\n         }\n+        if env::var_os(\"RUSTC_HOST_FUSE_LD_LLD\").is_some() {\n+            cmd.arg(\"-Clink-args=-fuse-ld=lld\");\n+        }\n \n         if let Ok(s) = env::var(\"RUSTC_HOST_CRT_STATIC\") {\n             if s == \"true\" {"}, {"sha": "cb58eb89ad870315fff8516a02459a853dd1185a", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=25b2f4861222d6507598149f576e7d25dc308c8c", "patch": "@@ -42,11 +42,14 @@ fn main() {\n     if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() {\n         cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n     }\n-    if let Some(linker) = env::var_os(\"RUSTC_TARGET_LINKER\") {\n+    if let Some(linker) = env::var_os(\"RUSTDOC_LINKER\") {\n         let mut arg = OsString::from(\"-Clinker=\");\n         arg.push(&linker);\n         cmd.arg(arg);\n     }\n+    if env::var_os(\"RUSTDOC_FUSE_LD_LLD\").is_some() {\n+        cmd.arg(\"-Clink-args=-fuse-ld=lld\");\n+    }\n \n     // Needed to be able to run all rustdoc tests.\n     if let Some(ref x) = env::var_os(\"RUSTDOC_RESOURCE_SUFFIX\") {"}, {"sha": "844a29fadae1e27e788f6a8074a711808bcfedf2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=25b2f4861222d6507598149f576e7d25dc308c8c", "patch": "@@ -756,8 +756,11 @@ impl<'a> Builder<'a> {\n         cmd.env_remove(\"MAKEFLAGS\");\n         cmd.env_remove(\"MFLAGS\");\n \n-        if let Some(linker) = self.linker(compiler.host, true) {\n-            cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n+        if let Some(linker) = self.linker(compiler.host) {\n+            cmd.env(\"RUSTDOC_LINKER\", linker);\n+        }\n+        if self.is_fuse_ld_lld(compiler.host) {\n+            cmd.env(\"RUSTDOC_FUSE_LD_LLD\", \"1\");\n         }\n         cmd\n     }\n@@ -1042,16 +1045,18 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        if let Some(host_linker) = self.linker(compiler.host, true) {\n+        if let Some(host_linker) = self.linker(compiler.host) {\n             cargo.env(\"RUSTC_HOST_LINKER\", host_linker);\n         }\n+        if self.is_fuse_ld_lld(compiler.host) {\n+            cargo.env(\"RUSTC_HOST_FUSE_LD_LLD\", \"1\");\n+        }\n \n-        if let Some(target_linker) = self.linker(target, true) {\n+        if let Some(target_linker) = self.linker(target) {\n             let target = crate::envify(&target.triple);\n             cargo.env(&format!(\"CARGO_TARGET_{}_LINKER\", target), target_linker);\n         }\n-\n-        if self.config.use_lld && !target.contains(\"msvc\") {\n+        if self.is_fuse_ld_lld(target) {\n             rustflags.arg(\"-Clink-args=-fuse-ld=lld\");\n         }\n "}, {"sha": "f0224d88226fb45299f2e336a0709273f509ec55", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=25b2f4861222d6507598149f576e7d25dc308c8c", "patch": "@@ -844,7 +844,7 @@ impl Build {\n     }\n \n     /// Returns the path to the linker for the given target if it needs to be overridden.\n-    fn linker(&self, target: TargetSelection, can_use_lld: bool) -> Option<&Path> {\n+    fn linker(&self, target: TargetSelection) -> Option<&Path> {\n         if let Some(linker) = self.config.target_config.get(&target).and_then(|c| c.linker.as_ref())\n         {\n             Some(linker)\n@@ -857,18 +857,19 @@ impl Build {\n             && !target.contains(\"msvc\")\n         {\n             Some(self.cc(target))\n-        } else if target.contains(\"msvc\")\n-            && can_use_lld\n-            && self.config.use_lld\n-            && self.build == target\n-        {\n-            // Currently we support using LLD directly via `rust.use_lld` option only with MSVC\n+        } else if self.config.use_lld && !self.is_fuse_ld_lld(target) && self.build == target {\n             Some(&self.initial_lld)\n         } else {\n             None\n         }\n     }\n \n+    // LLD is used through `-fuse-ld=lld` rather than directly.\n+    // Only MSVC targets use LLD directly at the moment.\n+    fn is_fuse_ld_lld(&self, target: TargetSelection) -> bool {\n+        self.config.use_lld && !target.contains(\"msvc\")\n+    }\n+\n     /// Returns if this target should statically link the C runtime, if specified\n     fn crt_static(&self, target: TargetSelection) -> Option<bool> {\n         if target.contains(\"pc-windows-msvc\") {"}, {"sha": "732028fb6ed4789d84ebdedeab94b1718c655e10", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=25b2f4861222d6507598149f576e7d25dc308c8c", "patch": "@@ -600,8 +600,11 @@ impl Step for RustdocTheme {\n             .env(\"CFG_RELEASE_CHANNEL\", &builder.config.channel)\n             .env(\"RUSTDOC_REAL\", builder.rustdoc(self.compiler))\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n-        if let Some(linker) = builder.linker(self.compiler.host, true) {\n-            cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n+        if let Some(linker) = builder.linker(self.compiler.host) {\n+            cmd.env(\"RUSTDOC_LINKER\", linker);\n+        }\n+        if builder.is_fuse_ld_lld(self.compiler.host) {\n+            cmd.env(\"RUSTDOC_FUSE_LD_LLD\", \"1\");\n         }\n         try_run(builder, &mut cmd);\n     }\n@@ -1061,17 +1064,22 @@ impl Step for Compiletest {\n         flags.push(\"-Zunstable-options\".to_string());\n         flags.push(builder.config.cmd.rustc_args().join(\" \"));\n \n-        // Don't use LLD here since we want to test that rustc finds and uses a linker by itself.\n-        if let Some(linker) = builder.linker(target, false) {\n+        if let Some(linker) = builder.linker(target) {\n             cmd.arg(\"--linker\").arg(linker);\n         }\n \n         let mut hostflags = flags.clone();\n         hostflags.push(format!(\"-Lnative={}\", builder.test_helpers_out(compiler.host).display()));\n+        if builder.is_fuse_ld_lld(compiler.host) {\n+            hostflags.push(\"-Clink-args=-fuse-ld=lld\".to_string());\n+        }\n         cmd.arg(\"--host-rustcflags\").arg(hostflags.join(\" \"));\n \n         let mut targetflags = flags;\n         targetflags.push(format!(\"-Lnative={}\", builder.test_helpers_out(target).display()));\n+        if builder.is_fuse_ld_lld(target) {\n+            targetflags.push(\"-Clink-args=-fuse-ld=lld\".to_string());\n+        }\n         cmd.arg(\"--target-rustcflags\").arg(targetflags.join(\" \"));\n \n         cmd.arg(\"--docck-python\").arg(builder.python());"}, {"sha": "634c9ece3f5c8907c2611552e6daf36ac519ab35", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/25b2f4861222d6507598149f576e7d25dc308c8c/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=25b2f4861222d6507598149f576e7d25dc308c8c", "patch": "@@ -11,8 +11,8 @@ BARE_RUSTDOC := $(HOST_RPATH_ENV) '$(RUSTDOC)'\n RUSTC := $(BARE_RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR) $(RUSTFLAGS)\n RUSTDOC := $(BARE_RUSTDOC) -L $(TARGET_RPATH_DIR)\n ifdef RUSTC_LINKER\n-RUSTC := $(RUSTC) -Clinker=$(RUSTC_LINKER)\n-RUSTDOC := $(RUSTDOC) -Clinker=$(RUSTC_LINKER)\n+RUSTC := $(RUSTC) -Clinker='$(RUSTC_LINKER)'\n+RUSTDOC := $(RUSTDOC) -Clinker='$(RUSTC_LINKER)'\n endif\n #CC := $(CC) -L $(TMPDIR)\n HTMLDOCCK := '$(PYTHON)' '$(S)/src/etc/htmldocck.py'"}]}