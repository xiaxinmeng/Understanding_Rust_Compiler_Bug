{"sha": "4fb4a4b66d5c988d79f77b081dabd8f62b880dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYjRhNGI2NmQ1Yzk4OGQ3OWY3N2IwODFkYWJkOGY2MmI4ODBkZmU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-10T23:30:44Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-10T23:51:25Z"}, "message": "core: add LinearMap::find_or_insert{,_with}\n\nThis allows for inserting a new value into the map only if it doesn't\nalready exist in the map.", "tree": {"sha": "f35bfd9a7d5a557123ee1aeed3546bdab856634f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f35bfd9a7d5a557123ee1aeed3546bdab856634f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fb4a4b66d5c988d79f77b081dabd8f62b880dfe", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb4a4b66d5c988d79f77b081dabd8f62b880dfe", "html_url": "https://github.com/rust-lang/rust/commit/4fb4a4b66d5c988d79f77b081dabd8f62b880dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fb4a4b66d5c988d79f77b081dabd8f62b880dfe/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "849644b5bc6b1fe836d96bed61b55cba92e5b5e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/849644b5bc6b1fe836d96bed61b55cba92e5b5e1", "html_url": "https://github.com/rust-lang/rust/commit/849644b5bc6b1fe836d96bed61b55cba92e5b5e1"}], "stats": {"total": 94, "additions": 81, "deletions": 13}, "files": [{"sha": "70358bab46874d4b15b8015dfd3421cb235d4f22", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 81, "deletions": 13, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4fb4a4b66d5c988d79f77b081dabd8f62b880dfe/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb4a4b66d5c988d79f77b081dabd8f62b880dfe/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=4fb4a4b66d5c988d79f77b081dabd8f62b880dfe", "patch": "@@ -155,6 +155,14 @@ pub mod linear {\n             }\n         }\n \n+        #[inline(always)]\n+        pure fn value_for_bucket(&self, idx: uint) -> &self/V {\n+            match self.buckets[idx] {\n+                Some(ref bkt) => &bkt.value,\n+                None => die!(~\"LinearMap::find: internal logic error\"),\n+            }\n+        }\n+\n         /// Inserts the key value pair into the buckets.\n         /// Assumes that there will be a bucket.\n         /// True if there was no previous entry with that key\n@@ -289,19 +297,8 @@ pub mod linear {\n         /// Return the value corresponding to the key in the map\n         pure fn find(&self, k: &K) -> Option<&self/V> {\n             match self.bucket_for_key(k) {\n-                FoundEntry(idx) => {\n-                    match self.buckets[idx] {\n-                        Some(ref bkt) => {\n-                            Some(&bkt.value)\n-                        }\n-                        None => {\n-                            die!(~\"LinearMap::find: internal logic error\")\n-                        }\n-                    }\n-                }\n-                TableFull | FoundHole(_) => {\n-                    None\n-                }\n+                FoundEntry(idx) => Some(self.value_for_bucket(idx)),\n+                TableFull | FoundHole(_) => None,\n             }\n         }\n \n@@ -361,6 +358,63 @@ pub mod linear {\n             old_value\n         }\n \n+        /// Return the value corresponding to the key in the map, or insert\n+        /// and return the value if it doesn't exist.\n+        fn find_or_insert(&mut self, k: K, v: V) -> &self/V {\n+            if self.size >= self.resize_at {\n+                // n.b.: We could also do this after searching, so\n+                // that we do not resize if this call to insert is\n+                // simply going to update a key in place.  My sense\n+                // though is that it's worse to have to search through\n+                // buckets to find the right spot twice than to just\n+                // resize in this corner case.\n+                self.expand();\n+            }\n+\n+            let hash = k.hash_keyed(self.k0, self.k1) as uint;\n+            let idx = match self.bucket_for_key_with_hash(hash, &k) {\n+                TableFull => die!(~\"Internal logic error\"),\n+                FoundEntry(idx) => idx,\n+                FoundHole(idx) => {\n+                    self.buckets[idx] = Some(Bucket{hash: hash, key: k,\n+                                         value: v});\n+                    self.size += 1;\n+                    idx\n+                },\n+            };\n+\n+            self.value_for_bucket(idx)\n+        }\n+\n+        /// Return the value corresponding to the key in the map, or create,\n+        /// insert, and return a new value if it doesn't exist.\n+        fn find_or_insert_with(&mut self, k: K, f: fn(&K) -> V) -> &self/V {\n+            if self.size >= self.resize_at {\n+                // n.b.: We could also do this after searching, so\n+                // that we do not resize if this call to insert is\n+                // simply going to update a key in place.  My sense\n+                // though is that it's worse to have to search through\n+                // buckets to find the right spot twice than to just\n+                // resize in this corner case.\n+                self.expand();\n+            }\n+\n+            let hash = k.hash_keyed(self.k0, self.k1) as uint;\n+            let idx = match self.bucket_for_key_with_hash(hash, &k) {\n+                TableFull => die!(~\"Internal logic error\"),\n+                FoundEntry(idx) => idx,\n+                FoundHole(idx) => {\n+                    let v = f(&k);\n+                    self.buckets[idx] = Some(Bucket{hash: hash, key: k,\n+                                         value: v});\n+                    self.size += 1;\n+                    idx\n+                },\n+            };\n+\n+            self.value_for_bucket(idx)\n+        }\n+\n         fn consume(&mut self, f: fn(K, V)) {\n             let mut buckets = ~[];\n             self.buckets <-> buckets;\n@@ -582,6 +636,20 @@ mod test_map {\n         assert m.swap(1, 4) == Some(3);\n     }\n \n+    #[test]\n+    pub fn test_find_or_insert() {\n+        let mut m = LinearMap::new::<int, int>();\n+        assert m.find_or_insert(1, 2) == &2;\n+        assert m.find_or_insert(1, 3) == &2;\n+    }\n+\n+    #[test]\n+    pub fn test_find_or_insert_with() {\n+        let mut m = LinearMap::new::<int, int>();\n+        assert m.find_or_insert_with(1, |_| 2) == &2;\n+        assert m.find_or_insert_with(1, |_| 3) == &2;\n+    }\n+\n     #[test]\n     pub fn test_consume() {\n         let mut m = LinearMap::new();"}]}