{"sha": "2db6965c81ee9f01b12874c115ec2a593b5f2c5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYjY5NjVjODFlZTlmMDFiMTI4NzRjMTE1ZWMyYTU5M2I1ZjJjNWY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-07T17:30:57Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-09T20:22:54Z"}, "message": "Lint usage of `Debug`-based formatting", "tree": {"sha": "d953185dbb7c371ac9cbd0296e6a3bff374405b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d953185dbb7c371ac9cbd0296e6a3bff374405b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2db6965c81ee9f01b12874c115ec2a593b5f2c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2db6965c81ee9f01b12874c115ec2a593b5f2c5f", "html_url": "https://github.com/rust-lang/rust/commit/2db6965c81ee9f01b12874c115ec2a593b5f2c5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2db6965c81ee9f01b12874c115ec2a593b5f2c5f/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a8b8cd28f3e452a1c4bfc2208ada1a2f4a0ebda", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a8b8cd28f3e452a1c4bfc2208ada1a2f4a0ebda", "html_url": "https://github.com/rust-lang/rust/commit/1a8b8cd28f3e452a1c4bfc2208ada1a2f4a0ebda"}], "stats": {"total": 86, "additions": 81, "deletions": 5}, "files": [{"sha": "87b58b320ffdd69d4c46a83826553c4093c9bbaf", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2db6965c81ee9f01b12874c115ec2a593b5f2c5f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2db6965c81ee9f01b12874c115ec2a593b5f2c5f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2db6965c81ee9f01b12874c115ec2a593b5f2c5f", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 117 lints included in this crate:\n+There are 118 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -118,6 +118,7 @@ name\n [unstable_as_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_slice)                         | warn    | as_slice is not stable and can be replaced by & v[..]see https://github.com/rust-lang/rust/issues/27729\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                               | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n [unused_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes)                           | warn    | unused lifetimes in function definitions\n+[use_debug](https://github.com/Manishearth/rust-clippy/wiki#use_debug)                                         | allow   | use `Debug`-based formatting\n [used_underscore_binding](https://github.com/Manishearth/rust-clippy/wiki#used_underscore_binding)             | warn    | using a binding which is prefixed with an underscore\n [useless_transmute](https://github.com/Manishearth/rust-clippy/wiki#useless_transmute)                         | warn    | transmutes that have the same to and from types\n [useless_vec](https://github.com/Manishearth/rust-clippy/wiki#useless_vec)                                     | warn    | useless `vec!`"}, {"sha": "ba9236012d1a950a4da66a7d1e8558d96b02a3ee", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2db6965c81ee9f01b12874c115ec2a593b5f2c5f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db6965c81ee9f01b12874c115ec2a593b5f2c5f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2db6965c81ee9f01b12874c115ec2a593b5f2c5f", "patch": "@@ -169,6 +169,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         mut_mut::MUT_MUT,\n         mutex_atomic::MUTEX_INTEGER,\n         print::PRINT_STDOUT,\n+        print::USE_DEBUG,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,\n         shadow::SHADOW_UNRELATED,"}, {"sha": "3c10b4bed13f7d1a011a9a70ea3b593a96d8a2b6", "filename": "src/print.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2db6965c81ee9f01b12874c115ec2a593b5f2c5f/src%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db6965c81ee9f01b12874c115ec2a593b5f2c5f/src%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprint.rs?ref=2db6965c81ee9f01b12874c115ec2a593b5f2c5f", "patch": "@@ -1,6 +1,8 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n-use utils::{IO_PRINT_PATH, is_expn_of, match_path, span_lint};\n+use rustc::front::map::Node::{NodeItem, NodeImplItem};\n+use utils::{FMT_ARGUMENTV1_NEW_PATH, DEBUG_FMT_METHOD_PATH, IO_PRINT_PATH};\n+use utils::{is_expn_of, match_path, span_lint};\n \n /// **What it does:** This lint warns whenever you print on *stdout*. The purpose of this lint is to catch debugging remnants.\n ///\n@@ -16,21 +18,36 @@ declare_lint! {\n     \"printing on stdout\"\n }\n \n+/// **What it does:** This lint warns whenever you use `Debug` formatting. The purpose of this lint is to catch debugging remnants.\n+///\n+/// **Why is this bad?** The purpose of the `Debug` trait is to facilitate debugging Rust code. It\n+/// should not be used in in user-facing output.\n+///\n+/// **Example:** `println!(\"{:?}\", foo);`\n+declare_lint! {\n+    pub USE_DEBUG,\n+    Allow,\n+    \"use `Debug`-based formatting\"\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub struct PrintLint;\n \n impl LintPass for PrintLint {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(PRINT_STDOUT)\n+        lint_array!(PRINT_STDOUT, USE_DEBUG)\n     }\n }\n \n impl LateLintPass for PrintLint {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n-        if let ExprCall(ref fun, _) = expr.node {\n+        if let ExprCall(ref fun, ref args) = expr.node {\n             if let ExprPath(_, ref path) = fun.node {\n+                // Search for `std::io::_print(..)` which is unique in a\n+                // `print!` expansion.\n                 if match_path(path, &IO_PRINT_PATH) {\n                     if let Some(span) = is_expn_of(cx, expr.span, \"print\") {\n+                        // `println!` uses `print!`.\n                         let (span, name) = match is_expn_of(cx, span, \"println\") {\n                             Some(span) => (span, \"println\"),\n                             None => (span, \"print\"),\n@@ -39,7 +56,32 @@ impl LateLintPass for PrintLint {\n                         span_lint(cx, PRINT_STDOUT, span, &format!(\"use of `{}!`\", name));\n                     }\n                 }\n+                // Search for something like\n+                // `::std::fmt::ArgumentV1::new(__arg0, ::std::fmt::Debug::fmt)`\n+                else if args.len() == 2 && match_path(path, &FMT_ARGUMENTV1_NEW_PATH) {\n+                    if let ExprPath(None, ref path) = args[1].node {\n+                        if match_path(path, &DEBUG_FMT_METHOD_PATH) &&\n+                            !is_in_debug_impl(cx, expr) &&\n+                            is_expn_of(cx, expr.span, \"panic\").is_none() {\n+                            span_lint(cx, USE_DEBUG, args[0].span, \"use of `Debug`-based formatting\");\n+                        }\n+                    }\n+                }\n             }\n         }\n     }\n }\n+\n+fn is_in_debug_impl(cx: &LateContext, expr: &Expr) -> bool {\n+    let map = &cx.tcx.map;\n+\n+    if let Some(NodeImplItem(item)) = map.find(map.get_parent(expr.id)) { // `fmt` method\n+        if let Some(NodeItem(item)) = map.find(map.get_parent(item.id)) { // `Debug` impl\n+            if let ItemImpl(_, _, _, Some(ref tr), _, _) = item.node {\n+                return match_path(&tr.path, &[\"Debug\"]);\n+            }\n+        }\n+    }\n+\n+    false\n+}"}, {"sha": "4c89b7f113d1e084d3e2e8061d698e0e223a35bd", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2db6965c81ee9f01b12874c115ec2a593b5f2c5f/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db6965c81ee9f01b12874c115ec2a593b5f2c5f/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=2db6965c81ee9f01b12874c115ec2a593b5f2c5f", "patch": "@@ -26,8 +26,10 @@ pub const BTREEMAP_PATH: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"BT\n pub const CLONE_PATH: [&'static str; 3] = [\"clone\", \"Clone\", \"clone\"];\n pub const CLONE_TRAIT_PATH: [&'static str; 2] = [\"clone\", \"Clone\"];\n pub const COW_PATH: [&'static str; 3] = [\"collections\", \"borrow\", \"Cow\"];\n+pub const DEBUG_FMT_METHOD_PATH: [&'static str; 4] = [\"std\", \"fmt\", \"Debug\", \"fmt\"];\n pub const DEFAULT_TRAIT_PATH: [&'static str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DROP_PATH: [&'static str; 3] = [\"core\", \"mem\", \"drop\"];\n+pub const FMT_ARGUMENTV1_NEW_PATH: [&'static str; 4] = [\"std\", \"fmt\", \"ArgumentV1\", \"new\"];\n pub const HASHMAP_ENTRY_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHMAP_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASH_PATH: [&'static str; 2] = [\"hash\", \"Hash\"];"}, {"sha": "34c38dca2861e0b8b117f7faa51bbb477493bd48", "filename": "tests/compile-fail/print.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2db6965c81ee9f01b12874c115ec2a593b5f2c5f/tests%2Fcompile-fail%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db6965c81ee9f01b12874c115ec2a593b5f2c5f/tests%2Fcompile-fail%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprint.rs?ref=2db6965c81ee9f01b12874c115ec2a593b5f2c5f", "patch": "@@ -1,11 +1,41 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n+#![deny(print_stdout, use_debug)]\n \n-#[deny(print_stdout)]\n+use std::fmt::{Debug, Display, Formatter, Result};\n+\n+#[allow(dead_code)]\n+struct Foo;\n+\n+impl Display for Foo {\n+    fn fmt(&self, f: &mut Formatter) -> Result {\n+        write!(f, \"{:?}\", 43.1415)\n+        //~^ ERROR use of `Debug`-based formatting\n+    }\n+}\n+\n+impl Debug for Foo {\n+    fn fmt(&self, f: &mut Formatter) -> Result {\n+        // ok, we can use `Debug` formatting in `Debug` implementations\n+        write!(f, \"{:?}\", 42.718)\n+    }\n+}\n \n fn main() {\n     println!(\"Hello\"); //~ERROR use of `println!`\n     print!(\"Hello\"); //~ERROR use of `print!`\n \n+    print!(\"Hello {}\", \"World\"); //~ERROR use of `print!`\n+\n+    print!(\"Hello {:?}\", \"World\");\n+    //~^ ERROR use of `print!`\n+    //~| ERROR use of `Debug`-based formatting\n+\n+    print!(\"Hello {:#?}\", \"#orld\");\n+    //~^ ERROR use of `print!`\n+    //~| ERROR use of `Debug`-based formatting\n+\n+    assert_eq!(42, 1337);\n+\n     vec![1, 2];\n }"}]}