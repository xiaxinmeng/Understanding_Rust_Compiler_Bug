{"sha": "6441c977cb387b2d057dc6e3b704b475afd97137", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NDFjOTc3Y2IzODdiMmQwNTdkYzZlM2I3MDRiNDc1YWZkOTcxMzc=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-15T17:11:49Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:02:50Z"}, "message": "Remove push_ctxt", "tree": {"sha": "037d2fbe7ca2d6256587c2b1d0edc188d0bfa0ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/037d2fbe7ca2d6256587c2b1d0edc188d0bfa0ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6441c977cb387b2d057dc6e3b704b475afd97137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6441c977cb387b2d057dc6e3b704b475afd97137", "html_url": "https://github.com/rust-lang/rust/commit/6441c977cb387b2d057dc6e3b704b475afd97137", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6441c977cb387b2d057dc6e3b704b475afd97137/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3265afa08f304716ca6d8631a8526e6b98a1178b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3265afa08f304716ca6d8631a8526e6b98a1178b", "html_url": "https://github.com/rust-lang/rust/commit/3265afa08f304716ca6d8631a8526e6b98a1178b"}], "stats": {"total": 52, "additions": 1, "deletions": 51}, "files": [{"sha": "011552b39627b59d60914974efa0493ae0dc3e3a", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=6441c977cb387b2d057dc6e3b704b475afd97137", "patch": "@@ -127,18 +127,6 @@ impl Drop for _InsnCtxt {\n     }\n }\n \n-pub fn push_ctxt(s: &'static str) -> _InsnCtxt {\n-    debug!(\"new InsnCtxt: {}\", s);\n-    TASK_LOCAL_INSN_KEY.with(|slot| {\n-        if let Some(ctx) = slot.borrow_mut().as_mut() {\n-            ctx.push(s)\n-        }\n-    });\n-    _InsnCtxt {\n-        _cannot_construct_outside_of_this_module: (),\n-    }\n-}\n-\n pub struct StatRecorder<'a, 'tcx: 'a> {\n     ccx: &'a CrateContext<'a, 'tcx>,\n     name: Option<String>,\n@@ -200,8 +188,6 @@ pub fn malloc_raw_dyn<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n                                   size: ValueRef,\n                                   align: ValueRef)\n                                   -> ValueRef {\n-    let _icx = push_ctxt(\"malloc_raw_exchange\");\n-\n     // Allocate space:\n     let def_id = require_alloc_fn(bcx, info_ty, ExchangeMallocFnLangItem);\n     let r = Callee::def(bcx.ccx(), def_id, bcx.tcx().intern_substs(&[])).reify(bcx.ccx());\n@@ -568,8 +554,6 @@ pub fn with_cond<'blk, 'tcx, F>(\n ) -> BlockAndBuilder<'blk, 'tcx>\n     where F: FnOnce(BlockAndBuilder<'blk, 'tcx>) -> BlockAndBuilder<'blk, 'tcx>\n {\n-    let _icx = push_ctxt(\"with_cond\");\n-\n     if common::const_to_opt_uint(val) == Some(0) {\n         return bcx;\n     }\n@@ -599,11 +583,6 @@ impl Lifetime {\n             return;\n         }\n \n-        let _icx = push_ctxt(match self {\n-            Lifetime::Start => \"lifetime_start\",\n-            Lifetime::End => \"lifetime_end\"\n-        });\n-\n         let size = machine::llsize_of_alloc(b.ccx, val_ty(ptr).element_type());\n         if size == 0 {\n             return;\n@@ -624,7 +603,6 @@ pub fn call_memcpy<'bcx, 'tcx>(b: &Builder<'bcx, 'tcx>,\n                                src: ValueRef,\n                                n_bytes: ValueRef,\n                                align: u32) {\n-    let _icx = push_ctxt(\"call_memcpy\");\n     let ccx = b.ccx;\n     let ptr_width = &ccx.sess().target.target.target_pointer_width[..];\n     let key = format!(\"llvm.memcpy.p0i8.p0i8.i{}\", ptr_width);\n@@ -640,7 +618,6 @@ pub fn call_memcpy<'bcx, 'tcx>(b: &Builder<'bcx, 'tcx>,\n pub fn memcpy_ty<'blk, 'tcx>(\n     bcx: &BlockAndBuilder<'blk, 'tcx>, dst: ValueRef, src: ValueRef, t: Ty<'tcx>\n ) {\n-    let _icx = push_ctxt(\"memcpy_ty\");\n     let ccx = bcx.ccx();\n \n     if type_is_zero_size(ccx, t) {\n@@ -661,7 +638,6 @@ pub fn memcpy_ty<'blk, 'tcx>(\n }\n \n pub fn init_zero_mem<'blk, 'tcx>(cx: &BlockAndBuilder<'blk, 'tcx>, llptr: ValueRef, t: Ty<'tcx>) {\n-    let _icx = push_ctxt(\"init_zero_mem\");\n     let bcx = cx;\n     memfill(bcx, llptr, t, 0);\n }\n@@ -672,7 +648,6 @@ pub fn init_zero_mem<'blk, 'tcx>(cx: &BlockAndBuilder<'blk, 'tcx>, llptr: ValueR\n // awful. (A telltale sign of this is large quantities of\n // `mov [byte ptr foo],0` in the generated code.)\n fn memfill<'a, 'tcx>(b: &Builder<'a, 'tcx>, llptr: ValueRef, ty: Ty<'tcx>, byte: u8) {\n-    let _icx = push_ctxt(\"memfill\");\n     let ccx = b.ccx;\n     let llty = type_of::type_of(ccx, ty);\n     let llptr = b.pointercast(llptr, Type::i8(ccx).ptr_to());\n@@ -704,7 +679,6 @@ pub fn alloc_ty<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n }\n \n pub fn alloca(cx: &BlockAndBuilder, ty: Type, name: &str) -> ValueRef {\n-    let _icx = push_ctxt(\"alloca\");\n     DebugLoc::None.apply(cx.fcx());\n     cx.fcx().alloca(ty, name)\n }\n@@ -806,8 +780,6 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n     /// Ties up the llstaticallocas -> llloadenv -> lltop edges,\n     /// and builds the return block.\n     pub fn finish(&'blk self, ret_cx: &BlockAndBuilder<'blk, 'tcx>) {\n-        let _icx = push_ctxt(\"FunctionContext::finish\");\n-\n         self.build_return_block(ret_cx);\n \n         DebugLoc::None.apply(self);\n@@ -890,8 +862,6 @@ pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance\n     // release builds.\n     info!(\"trans_instance({})\", instance);\n \n-    let _icx = push_ctxt(\"trans_instance\");\n-\n     let fn_ty = ccx.tcx().item_type(instance.def);\n     let fn_ty = ccx.tcx().erase_regions(&fn_ty);\n     let fn_ty = monomorphize::apply_param_substs(ccx.shared(), instance.substs, &fn_ty);"}, {"sha": "54a41a7e23dab4098d73c1cba099611e6c53c819", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=6441c977cb387b2d057dc6e3b704b475afd97137", "patch": "@@ -249,8 +249,6 @@ fn trans_closure_method<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n     // then adapt the self type\n     let llfn_closure_kind = ccx.tcx().closure_kind(def_id);\n \n-    let _icx = push_ctxt(\"trans_closure_adapter_shim\");\n-\n     debug!(\"trans_closure_adapter_shim(llfn_closure_kind={:?}, \\\n            trait_closure_kind={:?}, llfn={:?})\",\n            llfn_closure_kind, trait_closure_kind, Value(llfn));\n@@ -450,7 +448,6 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n     bare_fn_ty: Ty<'tcx>)\n     -> ValueRef\n {\n-    let _icx = push_ctxt(\"trans_fn_pointer_shim\");\n     let tcx = ccx.tcx();\n \n     // Normalize the type for better caching.\n@@ -715,7 +712,6 @@ fn trans_call_inner<'a, 'blk, 'tcx>(bcx: BlockAndBuilder<'blk, 'tcx>,\n         _ => bug!(\"expected fn pointer callee, found {:?}\", callee)\n     };\n \n-    let _icx = push_ctxt(\"invoke_\");\n     let llret = bcx.call(llfn, &llargs[..], lpad);\n     fn_ty.apply_attrs_callsite(llret);\n "}, {"sha": "2e2644d91bb6c3584aadeec23a53e7b52cbd6b53", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=6441c977cb387b2d057dc6e3b704b475afd97137", "patch": "@@ -16,7 +16,7 @@ use rustc_const_eval::ConstEvalErr;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map as hir_map;\n use {debuginfo, machine};\n-use base::{self, push_ctxt};\n+use base;\n use trans_item::TransItem;\n use common::{CrateContext, val_ty};\n use declare;\n@@ -221,7 +221,6 @@ pub fn trans_static(ccx: &CrateContext,\n                     attrs: &[ast::Attribute])\n                     -> Result<ValueRef, ConstEvalErr> {\n     unsafe {\n-        let _icx = push_ctxt(\"trans_static\");\n         let def_id = ccx.tcx().map.local_def_id(id);\n         let g = get_static(ccx, def_id);\n "}, {"sha": "ea44e24c5dec97d3b8a4c5bb933a540cf345f389", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=6441c977cb387b2d057dc6e3b704b475afd97137", "patch": "@@ -40,8 +40,6 @@ pub fn trans_exchange_free_dyn<'blk, 'tcx>(bcx: BlockAndBuilder<'blk, 'tcx>,\n                                            size: ValueRef,\n                                            align: ValueRef)\n                                            -> BlockAndBuilder<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"trans_exchange_free\");\n-\n     let def_id = langcall(bcx.tcx(), None, \"\", ExchangeFreeFnLangItem);\n     let args = [bcx.pointercast(v, Type::i8p(bcx.ccx())), size, align];\n     Callee::def(bcx.ccx(), def_id, bcx.tcx().intern_substs(&[]))\n@@ -133,7 +131,6 @@ pub fn call_drop_glue<'blk, 'tcx>(\n ) {\n     // NB: v is an *alias* of type t here, not a direct value.\n     debug!(\"call_drop_glue(t={:?}, skip_dtor={})\", t, skip_dtor);\n-    let _icx = push_ctxt(\"drop_ty\");\n     if bcx.fcx().type_needs_drop(t) {\n         let ccx = bcx.ccx();\n         let g = if skip_dtor {\n@@ -401,8 +398,6 @@ fn make_drop_glue<'blk, 'tcx>(bcx: BlockAndBuilder<'blk, 'tcx>,\n \n     let skip_dtor = match g { DropGlueKind::Ty(_) => false, DropGlueKind::TyContents(_) => true };\n     // NB: v0 is an *alias* of type t here, not a direct value.\n-    let _icx = push_ctxt(\"make_drop_glue\");\n-\n     // Only drop the value when it ... well, we used to check for\n     // non-null, (and maybe we need to continue doing so), but we now\n     // must definitely check for special bit-patterns corresponding to\n@@ -472,14 +467,11 @@ fn drop_structural_ty<'blk, 'tcx>(cx: BlockAndBuilder<'blk, 'tcx>,\n                                   av: ValueRef,\n                                   t: Ty<'tcx>)\n                                   -> BlockAndBuilder<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"drop_structural_ty\");\n-\n     fn iter_variant<'blk, 'tcx>(cx: &BlockAndBuilder<'blk, 'tcx>,\n                                 t: Ty<'tcx>,\n                                 av: adt::MaybeSizedValue,\n                                 variant: &'tcx ty::VariantDef,\n                                 substs: &Substs<'tcx>) {\n-        let _icx = push_ctxt(\"iter_variant\");\n         let tcx = cx.tcx();\n         for (i, field) in variant.fields.iter().enumerate() {\n             let arg = monomorphize::field_ty(tcx, substs, field);"}, {"sha": "9be505556c5d1a55ed66d7b64db36406cb7003d7", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=6441c977cb387b2d057dc6e3b704b475afd97137", "patch": "@@ -95,8 +95,6 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n     let ccx = fcx.ccx;\n     let tcx = bcx.tcx();\n \n-    let _icx = push_ctxt(\"trans_intrinsic_call\");\n-\n     let (def_id, substs, fty) = match callee_ty.sty {\n         ty::TyFnDef(def_id, substs, ref fty) => (def_id, substs, fty),\n         _ => bug!(\"expected fn item type, found {}\", callee_ty)"}, {"sha": "82c1fa94a4e992da87d3ac5340b29fc0ddd415a5", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=6441c977cb387b2d057dc6e3b704b475afd97137", "patch": "@@ -12,7 +12,6 @@ use attributes;\n use llvm::{ValueRef, get_params};\n use rustc::traits;\n use abi::FnType;\n-use base::*;\n use callee::Callee;\n use common::*;\n use consts;\n@@ -64,7 +63,6 @@ pub fn get_virtual_method<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n pub fn trans_object_shim<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n                                    callee: Callee<'tcx>)\n                                    -> ValueRef {\n-    let _icx = push_ctxt(\"trans_object_shim\");\n     let tcx = ccx.tcx();\n \n     debug!(\"trans_object_shim({:?})\", callee);\n@@ -109,7 +107,6 @@ pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                             -> ValueRef\n {\n     let tcx = ccx.tcx();\n-    let _icx = push_ctxt(\"meth::get_vtable\");\n \n     debug!(\"get_vtable(ty={:?}, trait_ref={:?})\", ty, trait_ref);\n "}, {"sha": "904e3765017a90336ab4d7cf3c82d7eadadec74b", "filename": "src/librustc_trans/tvec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6441c977cb387b2d057dc6e3b704b475afd97137/src%2Flibrustc_trans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftvec.rs?ref=6441c977cb387b2d057dc6e3b704b475afd97137", "patch": "@@ -12,7 +12,6 @@\n \n use llvm;\n use llvm::ValueRef;\n-use base::*;\n use common::*;\n use rustc::ty::Ty;\n \n@@ -24,7 +23,6 @@ pub fn slice_for_each<'blk, 'tcx, F>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n                                      -> BlockAndBuilder<'blk, 'tcx>\n     where F: FnOnce(&BlockAndBuilder<'blk, 'tcx>, ValueRef)\n {\n-    let _icx = push_ctxt(\"tvec::slice_for_each\");\n     let fcx = bcx.fcx();\n \n     // Special-case vectors with elements of size 0  so they don't go out of bounds (#9890)"}]}