{"sha": "0a81f8257e2317b019406c42575d10bbd33c7268", "node_id": "C_kwDOAAsO6NoAKDBhODFmODI1N2UyMzE3YjAxOTQwNmM0MjU3NWQxMGJiZDMzYzcyNjg", "commit": {"author": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-17T04:30:00Z"}, "committer": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-17T04:30:00Z"}, "message": "add `semicolon_outside_block_if_singleline` lint", "tree": {"sha": "e11bc7c46cc4141bea289c723fccf211b503db10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e11bc7c46cc4141bea289c723fccf211b503db10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a81f8257e2317b019406c42575d10bbd33c7268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a81f8257e2317b019406c42575d10bbd33c7268", "html_url": "https://github.com/rust-lang/rust/commit/0a81f8257e2317b019406c42575d10bbd33c7268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a81f8257e2317b019406c42575d10bbd33c7268/comments", "author": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90cb0fa2f379d7fdf8bfd97306e97c6a0d6fbbc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/90cb0fa2f379d7fdf8bfd97306e97c6a0d6fbbc6", "html_url": "https://github.com/rust-lang/rust/commit/90cb0fa2f379d7fdf8bfd97306e97c6a0d6fbbc6"}], "stats": {"total": 318, "additions": 317, "deletions": 1}, "files": [{"sha": "a0a7780f4c278381ab81db41438fd044253330fc", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a81f8257e2317b019406c42575d10bbd33c7268/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a81f8257e2317b019406c42575d10bbd33c7268/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0a81f8257e2317b019406c42575d10bbd33c7268", "patch": "@@ -4884,6 +4884,7 @@ Released 2018-09-13\n [`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n [`semicolon_inside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_inside_block\n [`semicolon_outside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block\n+[`semicolon_outside_block_if_singleline`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block_if_singleline\n [`separated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#separated_literal_suffix\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse"}, {"sha": "70379b6caf11468ac5902585a1cc916bb77328c1", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a81f8257e2317b019406c42575d10bbd33c7268/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a81f8257e2317b019406c42575d10bbd33c7268/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=0a81f8257e2317b019406c42575d10bbd33c7268", "patch": "@@ -546,6 +546,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::self_named_constructors::SELF_NAMED_CONSTRUCTORS_INFO,\n     crate::semicolon_block::SEMICOLON_INSIDE_BLOCK_INFO,\n     crate::semicolon_block::SEMICOLON_OUTSIDE_BLOCK_INFO,\n+    crate::semicolon_block::SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE_INFO,\n     crate::semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED_INFO,\n     crate::serde_api::SERDE_API_MISUSE_INFO,\n     crate::shadow::SHADOW_REUSE_INFO,"}, {"sha": "d791100b9b9a65f10dcce7d14ed8e99a7d74ff45", "filename": "clippy_lints/src/semicolon_block.rs", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/0a81f8257e2317b019406c42575d10bbd33c7268/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a81f8257e2317b019406c42575d10bbd33c7268/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=0a81f8257e2317b019406c42575d10bbd33c7268", "patch": "@@ -64,7 +64,48 @@ declare_clippy_lint! {\n     restriction,\n     \"add a semicolon outside the block\"\n }\n-declare_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Suggests moving the semicolon from a block's final expression outside of\n+    /// the block if it's singleline, and inside the block if it's multiline.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Some may prefer if the  semicolon is outside if a block is only one\n+    /// expression, as this allows rustfmt to make it singleline. In the case that\n+    /// it isn't, it should be inside.\n+    /// Take a look at both `semicolon_inside_block` and `semicolon_outside_block` for alternatives.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x); }\n+    /// \n+    /// unsafe {\n+    ///     let x = 1;\n+    ///     f(x)\n+    /// };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x) };\n+    /// \n+    /// unsafe {\n+    ///     let x = 1;\n+    ///     f(x);\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.68.0\"]\n+    pub SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE,\n+    restriction,\n+    \"add a semicolon inside the block if it's singleline, otherwise outside\"\n+}\n+declare_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE]);\n \n impl LateLintPass<'_> for SemicolonBlock {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n@@ -98,6 +139,8 @@ fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'\n     let insert_span = tail.span.source_callsite().shrink_to_hi();\n     let remove_span = semi_span.with_lo(block.span.hi());\n \n+    check_semicolon_outside_block_if_singleline(cx, block, remove_span, insert_span, true, \"inside\");\n+\n     span_lint_and_then(\n         cx,\n         SEMICOLON_INSIDE_BLOCK,\n@@ -120,6 +163,8 @@ fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_ex\n     let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n     let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n \n+    check_semicolon_outside_block_if_singleline(cx, block, remove_span, insert_span, false, \"outside\");\n+\n     span_lint_and_then(\n         cx,\n         SEMICOLON_OUTSIDE_BLOCK,\n@@ -135,3 +180,48 @@ fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_ex\n         },\n     );\n }\n+\n+fn check_semicolon_outside_block_if_singleline(\n+    cx: &LateContext<'_>,\n+    block: &Block<'_>,\n+    remove_span: Span,\n+    insert_span: Span,\n+    inequality: bool,\n+    ty: &str,\n+) {\n+    let remove_line = cx\n+        .sess()\n+        .source_map()\n+        .lookup_line(remove_span.lo())\n+        .expect(\"failed to get `remove_span`'s line\")\n+        .line;\n+    let insert_line = cx\n+        .sess()\n+        .source_map()\n+        .lookup_line(insert_span.lo())\n+        .expect(\"failed to get `insert_span`'s line\")\n+        .line;\n+\n+    let eq = if inequality {\n+        remove_line != insert_line\n+    } else {\n+        remove_line == insert_line\n+    };\n+\n+    if eq {\n+        span_lint_and_then(\n+            cx,\n+            SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE,\n+            block.span,\n+            &format!(\"consider moving the `;` {ty} the block for consistent formatting\"),\n+            |diag| {\n+                multispan_sugg_with_applicability(\n+                    diag,\n+                    \"put the `;` here\",\n+                    Applicability::MachineApplicable,\n+                    [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+                );\n+            },\n+        );\n+    }\n+}"}, {"sha": "592f9c49ed77b877b4dcbce0d03c949410a5bb55", "filename": "tests/ui/semicolon_outside_block_if_singleline.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0a81f8257e2317b019406c42575d10bbd33c7268/tests%2Fui%2Fsemicolon_outside_block_if_singleline.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0a81f8257e2317b019406c42575d10bbd33c7268/tests%2Fui%2Fsemicolon_outside_block_if_singleline.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block_if_singleline.fixed?ref=0a81f8257e2317b019406c42575d10bbd33c7268", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block_if_singleline)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()) };\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}\n\\ No newline at end of file"}, {"sha": "21dd61445a5be6f8180dfaa3fa1951a5c02764d8", "filename": "tests/ui/semicolon_outside_block_if_singleline.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0a81f8257e2317b019406c42575d10bbd33c7268/tests%2Fui%2Fsemicolon_outside_block_if_singleline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a81f8257e2317b019406c42575d10bbd33c7268/tests%2Fui%2Fsemicolon_outside_block_if_singleline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block_if_singleline.rs?ref=0a81f8257e2317b019406c42575d10bbd33c7268", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block_if_singleline)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}\n\\ No newline at end of file"}, {"sha": "dda083f2be3e03373717dbca9944565644b2975c", "filename": "tests/ui/semicolon_outside_block_if_singleline.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0a81f8257e2317b019406c42575d10bbd33c7268/tests%2Fui%2Fsemicolon_outside_block_if_singleline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a81f8257e2317b019406c42575d10bbd33c7268/tests%2Fui%2Fsemicolon_outside_block_if_singleline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block_if_singleline.stderr?ref=0a81f8257e2317b019406c42575d10bbd33c7268", "patch": "@@ -0,0 +1,54 @@\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block_if_singleline.rs:42:5\n+   |\n+LL |     { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::semicolon-outside-block-if-singleline` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block(); }\n+LL +     { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block_if_singleline.rs:43:5\n+   |\n+LL |     unsafe { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block(); }\n+LL +     unsafe { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block_if_singleline.rs:48:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block()\n+LL | |     };\n+   | |_____^\n+   |\n+help: put the `;` here\n+   |\n+LL ~         unit_fn_block();\n+LL ~     }\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block_if_singleline.rs:62:5\n+   |\n+LL |     { m!(()); }\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     { m!(()); }\n+LL +     { m!(()) };\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}]}