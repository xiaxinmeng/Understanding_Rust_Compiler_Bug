{"sha": "209c492432c15b017f99dba06d5937389c1f9546", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOWM0OTI0MzJjMTViMDE3Zjk5ZGJhMDZkNTkzNzM4OWMxZjk1NDY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-07-11T13:22:46Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-07-12T17:58:34Z"}, "message": "Upgrade Chalk", "tree": {"sha": "45d30a421ff534c72ae850cd4ff108b74ef81f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45d30a421ff534c72ae850cd4ff108b74ef81f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/209c492432c15b017f99dba06d5937389c1f9546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/209c492432c15b017f99dba06d5937389c1f9546", "html_url": "https://github.com/rust-lang/rust/commit/209c492432c15b017f99dba06d5937389c1f9546", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/209c492432c15b017f99dba06d5937389c1f9546/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab1ad19f552e1b11055ed60f87cc420871d902eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1ad19f552e1b11055ed60f87cc420871d902eb", "html_url": "https://github.com/rust-lang/rust/commit/ab1ad19f552e1b11055ed60f87cc420871d902eb"}], "stats": {"total": 76, "additions": 63, "deletions": 13}, "files": [{"sha": "786f758e99266f780def50854e17afd7dc19db45", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/209c492432c15b017f99dba06d5937389c1f9546/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209c492432c15b017f99dba06d5937389c1f9546/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=209c492432c15b017f99dba06d5937389c1f9546", "patch": "@@ -2,6 +2,7 @@\n use std::sync::Arc;\n \n use chalk_ir::cast::Cast;\n+use chalk_solve::Solver;\n use hir_def::{\n     expr::ExprId, lang_item::LangItemTarget, DefWithBodyId, ImplId, TraitId, TypeAliasId,\n };\n@@ -32,9 +33,10 @@ struct ChalkContext<'a> {\n     krate: CrateId,\n }\n \n-fn create_chalk_solver() -> chalk_solve::Solver<Interner> {\n-    let solver_choice = chalk_solve::SolverChoice::recursive();\n-    solver_choice.into_solver()\n+fn create_chalk_solver() -> chalk_recursive::RecursiveSolver<Interner> {\n+    let overflow_depth = 100;\n+    let caching_enabled = true;\n+    chalk_recursive::RecursiveSolver::new(overflow_depth, caching_enabled)\n }\n \n /// A set of clauses that we assume to be true. E.g. if we are inside this function:"}, {"sha": "a9b39474ad89f1f7b9a250023b79c84706bfcf2f", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/209c492432c15b017f99dba06d5937389c1f9546/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209c492432c15b017f99dba06d5937389c1f9546/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=209c492432c15b017f99dba06d5937389c1f9546", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use log::debug;\n \n-use chalk_ir::{fold::shift::Shift, GenericArg, TypeName};\n+use chalk_ir::{fold::shift::Shift, GenericArg, TypeName, CanonicalVarKinds};\n use chalk_solve::rust_ir::{self, OpaqueTyDatumBound, WellKnownTrait};\n \n use hir_def::{\n@@ -66,10 +66,13 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         &self,\n         trait_id: TraitId,\n         parameters: &[GenericArg<Interner>],\n+        _binders: &CanonicalVarKinds<Interner>,\n     ) -> Vec<ImplId> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n         let trait_: hir_def::TraitId = from_chalk(self.db, trait_id);\n \n+        // FIXME use binders to look for int/float impls when necessary\n+\n         let ty: Ty = from_chalk(self.db, parameters[0].assert_ty_ref(&Interner).clone());\n \n         let self_ty_fp = TyFingerprint::for_impl(&ty);\n@@ -219,6 +222,22 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         // FIXME: implement closure support\n         unimplemented!()\n     }\n+\n+    fn trait_name(&self, _trait_id: chalk_ir::TraitId<Interner>) -> String {\n+        unimplemented!()\n+    }\n+    fn adt_name(&self, _struct_id: chalk_ir::AdtId<Interner>) -> String {\n+        unimplemented!()\n+    }\n+    fn assoc_type_name(&self, _assoc_ty_id: chalk_ir::AssocTypeId<Interner>) -> String {\n+        unimplemented!()\n+    }\n+    fn opaque_type_name(&self, _opaque_ty_id: chalk_ir::OpaqueTyId<Interner>) -> String {\n+        unimplemented!()\n+    }\n+    fn fn_def_name(&self, _fn_def_id: chalk_ir::FnDefId<Interner>) -> String {\n+        unimplemented!()\n+    }\n }\n \n pub(crate) fn program_clauses_for_chalk_env_query(\n@@ -354,12 +373,21 @@ pub(crate) fn struct_datum_query(\n         fundamental: false,\n         phantom_data: false,\n     };\n+    // FIXME provide enum variants properly (for auto traits)\n+    let variant = rust_ir::AdtVariantDatum {\n+        fields: Vec::new(), // FIXME add fields (only relevant for auto traits),\n+    };\n     let struct_datum_bound = rust_ir::AdtDatumBound {\n-        fields: Vec::new(), // FIXME add fields (only relevant for auto traits)\n+        variants: vec![variant],\n         where_clauses,\n     };\n-    let struct_datum =\n-        StructDatum { id: struct_id, binders: make_binders(struct_datum_bound, num_params), flags };\n+    let struct_datum = StructDatum {\n+        // FIXME set ADT kind\n+        kind: rust_ir::AdtKind::Struct,\n+        id: struct_id,\n+        binders: make_binders(struct_datum_bound, num_params),\n+        flags\n+    };\n     Arc::new(struct_datum)\n }\n "}, {"sha": "156b691b45c3a3acbaa0681f553b3bdbdf779d43", "filename": "crates/ra_hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/209c492432c15b017f99dba06d5937389c1f9546/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209c492432c15b017f99dba06d5937389c1f9546/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=209c492432c15b017f99dba06d5937389c1f9546", "patch": "@@ -39,6 +39,7 @@ impl chalk_ir::interner::Interner for Interner {\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n     type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n     type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n+    type InternedConstraints = Vec<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>>;\n     type DefId = InternId;\n     type InternedAdtId = crate::TypeCtorId;\n     type Identifier = TypeAliasId;\n@@ -349,6 +350,20 @@ impl chalk_ir::interner::Interner for Interner {\n     ) -> &'a [chalk_ir::CanonicalVarKind<Self>] {\n         &canonical_var_kinds\n     }\n+\n+    fn intern_constraints<E>(\n+        &self,\n+        data: impl IntoIterator<Item = Result<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>, E>>,\n+    ) -> Result<Self::InternedConstraints, E> {\n+        data.into_iter().collect()\n+    }\n+\n+    fn constraints_data<'a>(\n+        &self,\n+        constraints: &'a Self::InternedConstraints,\n+    ) -> &'a [chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n+        constraints\n+    }\n }\n \n impl chalk_ir::interner::HasInterner for Interner {"}, {"sha": "bc0c6de176f07ec4ad4bd3b5c02e4b14c92bdcf1", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/209c492432c15b017f99dba06d5937389c1f9546/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209c492432c15b017f99dba06d5937389c1f9546/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=209c492432c15b017f99dba06d5937389c1f9546", "patch": "@@ -61,7 +61,7 @@ impl ToChalk for Ty {\n             Ty::Bound(idx) => chalk_ir::TyData::BoundVar(idx).intern(&Interner),\n             Ty::Infer(_infer_ty) => panic!(\"uncanonicalized infer ty\"),\n             Ty::Dyn(predicates) => {\n-                let where_clauses = chalk_ir::QuantifiedWhereClauses::from(\n+                let where_clauses = chalk_ir::QuantifiedWhereClauses::from_iter(\n                     &Interner,\n                     predicates.iter().filter(|p| !p.is_error()).cloned().map(|p| p.to_chalk(db)),\n                 );\n@@ -152,7 +152,7 @@ fn ref_to_chalk(\n     let lifetime = LIFETIME_PLACEHOLDER.to_lifetime(&Interner);\n     chalk_ir::ApplicationTy {\n         name: TypeName::Ref(mutability.to_chalk(db)),\n-        substitution: chalk_ir::Substitution::from(\n+        substitution: chalk_ir::Substitution::from_iter(\n             &Interner,\n             vec![lifetime.cast(&Interner), arg.cast(&Interner)],\n         ),\n@@ -177,7 +177,7 @@ impl ToChalk for Substs {\n     type Chalk = chalk_ir::Substitution<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Substitution<Interner> {\n-        chalk_ir::Substitution::from(&Interner, self.iter().map(|ty| ty.clone().to_chalk(db)))\n+        chalk_ir::Substitution::from_iter(&Interner, self.iter().map(|ty| ty.clone().to_chalk(db)))\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, parameters: chalk_ir::Substitution<Interner>) -> Substs {\n@@ -492,6 +492,11 @@ impl ToChalk for GenericPredicate {\n                 // we shouldn't get these from Chalk\n                 panic!(\"encountered LifetimeOutlives from Chalk\")\n             }\n+\n+            chalk_ir::WhereClause::TypeOutlives(_) => {\n+                // we shouldn't get these from Chalk\n+                panic!(\"encountered TypeOutlives from Chalk\")\n+            }\n         }\n     }\n }\n@@ -570,7 +575,7 @@ where\n                 )\n             });\n         let value = self.value.to_chalk(db);\n-        chalk_ir::Canonical { value, binders: chalk_ir::CanonicalVarKinds::from(&Interner, kinds) }\n+        chalk_ir::Canonical { value, binders: chalk_ir::CanonicalVarKinds::from_iter(&Interner, kinds) }\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, canonical: chalk_ir::Canonical<T::Chalk>) -> Canonical<T> {\n@@ -691,7 +696,7 @@ where\n     T: HasInterner<Interner = Interner>,\n {\n     chalk_ir::Binders::new(\n-        chalk_ir::VariableKinds::from(\n+        chalk_ir::VariableKinds::from_iter(\n             &Interner,\n             std::iter::repeat(chalk_ir::VariableKind::Ty(chalk_ir::TyKind::General)).take(num_vars),\n         ),"}, {"sha": "1e226baead897ff39152f9b38319f4f900bb1c18", "filename": "crates/ra_hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209c492432c15b017f99dba06d5937389c1f9546/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209c492432c15b017f99dba06d5937389c1f9546/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=209c492432c15b017f99dba06d5937389c1f9546", "patch": "@@ -157,7 +157,7 @@ impl DebugContext<'_> {\n             _ => panic!(\"associated type not in trait\"),\n         };\n         let trait_data = self.0.trait_data(trait_);\n-        let params = projection_ty.substitution.parameters(&Interner);\n+        let params = projection_ty.substitution.as_slice(&Interner);\n         write!(fmt, \"<{:?} as {}\", &params[0], trait_data.name,)?;\n         if params.len() > 1 {\n             write!("}]}