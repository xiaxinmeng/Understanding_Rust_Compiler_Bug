{"sha": "97fb779429b8e11526d96758da56aec241304ad4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZmI3Nzk0MjliOGUxMTUyNmQ5Njc1OGRhNTZhZWMyNDEzMDRhZDQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-13T09:42:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-13T09:42:29Z"}, "message": "Rollup merge of #38965 - GuillaumeGomez:mutex_docs, r=frewsxcv\n\nAdd missing doc examples for Mutex\n\nr? @frewsxcv", "tree": {"sha": "c47d8caeb41a4393a5511664c266d646977479c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c47d8caeb41a4393a5511664c266d646977479c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97fb779429b8e11526d96758da56aec241304ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97fb779429b8e11526d96758da56aec241304ad4", "html_url": "https://github.com/rust-lang/rust/commit/97fb779429b8e11526d96758da56aec241304ad4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97fb779429b8e11526d96758da56aec241304ad4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54535c59a4e829c205696e9fdb4d1c3f589cbcc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/54535c59a4e829c205696e9fdb4d1c3f589cbcc7", "html_url": "https://github.com/rust-lang/rust/commit/54535c59a4e829c205696e9fdb4d1c3f589cbcc7"}, {"sha": "346c84fb0b98b18b0ff4c29ceb15742b8b2636f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/346c84fb0b98b18b0ff4c29ceb15742b8b2636f7", "html_url": "https://github.com/rust-lang/rust/commit/346c84fb0b98b18b0ff4c29ceb15742b8b2636f7"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "2efddeb4610dd6211cb7ea06b5c2ae91073cde85", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/97fb779429b8e11526d96758da56aec241304ad4/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fb779429b8e11526d96758da56aec241304ad4/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=97fb779429b8e11526d96758da56aec241304ad4", "patch": "@@ -155,6 +155,14 @@ impl<'a, T: ?Sized> !marker::Send for MutexGuard<'a, T> {}\n \n impl<T> Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::Mutex;\n+    ///\n+    /// let mutex = Mutex::new(0);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(t: T) -> Mutex<T> {\n         let mut m = Mutex {\n@@ -190,6 +198,21 @@ impl<T: ?Sized> Mutex<T> {\n     ///\n     /// This function might panic when called if the lock is already held by\n     /// the current thread.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Mutex};\n+    /// use std::thread;\n+    ///\n+    /// let mutex = Arc::new(Mutex::new(0));\n+    /// let c_mutex = mutex.clone();\n+    ///\n+    /// thread::spawn(move || {\n+    ///     *c_mutex.lock().unwrap() = 10;\n+    /// }).join().expect(\"thread::spawn failed\");\n+    /// assert_eq!(*mutex.lock().unwrap(), 10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lock(&self) -> LockResult<MutexGuard<T>> {\n         unsafe {\n@@ -211,6 +234,26 @@ impl<T: ?Sized> Mutex<T> {\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be\n     /// acquired.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Mutex};\n+    /// use std::thread;\n+    ///\n+    /// let mutex = Arc::new(Mutex::new(0));\n+    /// let c_mutex = mutex.clone();\n+    ///\n+    /// thread::spawn(move || {\n+    ///     let mut lock = c_mutex.try_lock();\n+    ///     if let Ok(ref mut mutex) = lock {\n+    ///         **mutex = 10;\n+    ///     } else {\n+    ///         println!(\"try_lock failed\");\n+    ///     }\n+    /// }).join().expect(\"thread::spawn failed\");\n+    /// assert_eq!(*mutex.lock().unwrap(), 10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn try_lock(&self) -> TryLockResult<MutexGuard<T>> {\n         unsafe {\n@@ -225,8 +268,24 @@ impl<T: ?Sized> Mutex<T> {\n     /// Determines whether the lock is poisoned.\n     ///\n     /// If another thread is active, the lock can still become poisoned at any\n-    /// time.  You should not trust a `false` value for program correctness\n+    /// time. You should not trust a `false` value for program correctness\n     /// without additional synchronization.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Mutex};\n+    /// use std::thread;\n+    ///\n+    /// let mutex = Arc::new(Mutex::new(0));\n+    /// let c_mutex = mutex.clone();\n+    ///\n+    /// let _ = thread::spawn(move || {\n+    ///     let _lock = c_mutex.lock().unwrap();\n+    ///     panic!(); // the mutex gets poisoned\n+    /// }).join();\n+    /// assert_eq!(mutex.is_poisoned(), true);\n+    /// ```\n     #[inline]\n     #[stable(feature = \"sync_poison\", since = \"1.2.0\")]\n     pub fn is_poisoned(&self) -> bool {\n@@ -239,6 +298,15 @@ impl<T: ?Sized> Mutex<T> {\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error instead.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::Mutex;\n+    ///\n+    /// let mutex = Mutex::new(0);\n+    /// assert_eq!(mutex.into_inner().unwrap(), 0);\n+    /// ```\n     #[stable(feature = \"mutex_into_inner\", since = \"1.6.0\")]\n     pub fn into_inner(self) -> LockResult<T> where T: Sized {\n         // We know statically that there are no outstanding references to\n@@ -270,6 +338,16 @@ impl<T: ?Sized> Mutex<T> {\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error instead.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::Mutex;\n+    ///\n+    /// let mut mutex = Mutex::new(0);\n+    /// *mutex.get_mut().unwrap() = 10;\n+    /// assert_eq!(*mutex.lock().unwrap(), 10);\n+    /// ```\n     #[stable(feature = \"mutex_get_mut\", since = \"1.6.0\")]\n     pub fn get_mut(&mut self) -> LockResult<&mut T> {\n         // We know statically that there are no other references to `self`, so"}]}