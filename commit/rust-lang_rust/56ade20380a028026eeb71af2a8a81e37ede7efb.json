{"sha": "56ade20380a028026eeb71af2a8a81e37ede7efb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YWRlMjAzODBhMDI4MDI2ZWViNzFhZjJhOGE4MWUzN2VkZTdlZmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-07T20:36:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-07T20:36:18Z"}, "message": "Merge #4972\n\n4972: Gzip artifacts r=Veetaha a=Veetaha\n\n[Here is the test release](https://github.com/Veetaha/rust-analyzer/releases/tag/2020-06-21)\r\n\r\nChange in size:  `~ 25 MB -> ~ 8 MB (gzipped)`\r\n\r\nThe time to gzip during the dist build takes a somewhat considerable amount of time tho.\r\nHaving already compiled artifacts this takes in debug mode:\r\n```\r\n~/dev/rust-analyzer (feat/gzip-binaries) $ time cargo xtask dist\r\n    Finished dev [unoptimized] target(s) in 0.06s\r\n     Running `target/debug/xtask dist`\r\n> cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\r\n    Finished release [optimized] target(s) in 0.05s\r\n> strip ./target/release/rust-analyzer\r\n\r\nreal    0m34.331s\r\nuser    0m34.245s\r\nsys     0m0.078s\r\n```\r\nIn release mode this is much faster:\r\n```\r\n~/dev/rust-analyzer (feat/gzip-binaries) $ time cargo run -p xtask --release -- dist\r\n    Finished release [optimized] target(s) in 0.04s\r\n     Running `target/release/xtask dist`\r\n> cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\r\n    Finished release [optimized] target(s) in 0.06s\r\n> strip ./target/release/rust-analyzer\r\n\r\nreal    0m2.401s\r\n```\r\n\r\n**[UPD]** adding a profile override for `miniz_oxide` does the thing to ensure good performrance\r\n\r\nWe might need to notify all other ra plugins' maintainers about the change in our GH releases if we merge this PR, or we could leave uncompressed files along with gzipped for a while until everyone migrates.\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "fbf0e24250cc36eaa122904e78cd7cb50fe1c665", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf0e24250cc36eaa122904e78cd7cb50fe1c665"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56ade20380a028026eeb71af2a8a81e37ede7efb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfBNzCCRBK7hj4Ov3rIwAAdHIIAGJP5RD1803jM8E7YN2vONRG\nhMytTIBczvJ7Vq8oKQ8g8HzQSyjoeW+XYZqftLldZwZhHDVRq+EBZK3Q+cL1Tj4Q\n8f6Sc9LGipLVo1q3m+m5ITVmw7Z1opEMuf8jbxU3Wv/1BqH/P+l8IQbCSr86DuO0\n5lUvG7L7Qi3SD4Pl4fdK/rUI56gWfw5fFIfw5OmgOj83E04RjHQCGxm3vsuoL6KW\ncnRyI4DOYbmDfFebLuUGCuqtSyLv5NF3iG7U8RcTYxf/iRCOmkCnEkki4xLQfUhf\nhTX+qm7QPdEEwNOqDsutuMQLfux6rkdQJJ3pgFkhqmc2lU4r1vGl/RHR4JDZuJs=\n=HPbT\n-----END PGP SIGNATURE-----\n", "payload": "tree fbf0e24250cc36eaa122904e78cd7cb50fe1c665\nparent 980a67f44629ed67a54b603aaf9d015a81d61f7a\nparent f92bfb580780cda02f9ba8a935538f984d8a4c0d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594154178 +0000\ncommitter GitHub <noreply@github.com> 1594154178 +0000\n\nMerge #4972\n\n4972: Gzip artifacts r=Veetaha a=Veetaha\n\n[Here is the test release](https://github.com/Veetaha/rust-analyzer/releases/tag/2020-06-21)\r\n\r\nChange in size:  `~ 25 MB -> ~ 8 MB (gzipped)`\r\n\r\nThe time to gzip during the dist build takes a somewhat considerable amount of time tho.\r\nHaving already compiled artifacts this takes in debug mode:\r\n```\r\n~/dev/rust-analyzer (feat/gzip-binaries) $ time cargo xtask dist\r\n    Finished dev [unoptimized] target(s) in 0.06s\r\n     Running `target/debug/xtask dist`\r\n> cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\r\n    Finished release [optimized] target(s) in 0.05s\r\n> strip ./target/release/rust-analyzer\r\n\r\nreal    0m34.331s\r\nuser    0m34.245s\r\nsys     0m0.078s\r\n```\r\nIn release mode this is much faster:\r\n```\r\n~/dev/rust-analyzer (feat/gzip-binaries) $ time cargo run -p xtask --release -- dist\r\n    Finished release [optimized] target(s) in 0.04s\r\n     Running `target/release/xtask dist`\r\n> cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\r\n    Finished release [optimized] target(s) in 0.06s\r\n> strip ./target/release/rust-analyzer\r\n\r\nreal    0m2.401s\r\n```\r\n\r\n**[UPD]** adding a profile override for `miniz_oxide` does the thing to ensure good performrance\r\n\r\nWe might need to notify all other ra plugins' maintainers about the change in our GH releases if we merge this PR, or we could leave uncompressed files along with gzipped for a while until everyone migrates.\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56ade20380a028026eeb71af2a8a81e37ede7efb", "html_url": "https://github.com/rust-lang/rust/commit/56ade20380a028026eeb71af2a8a81e37ede7efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56ade20380a028026eeb71af2a8a81e37ede7efb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "980a67f44629ed67a54b603aaf9d015a81d61f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/980a67f44629ed67a54b603aaf9d015a81d61f7a", "html_url": "https://github.com/rust-lang/rust/commit/980a67f44629ed67a54b603aaf9d015a81d61f7a"}, {"sha": "f92bfb580780cda02f9ba8a935538f984d8a4c0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f92bfb580780cda02f9ba8a935538f984d8a4c0d", "html_url": "https://github.com/rust-lang/rust/commit/f92bfb580780cda02f9ba8a935538f984d8a4c0d"}], "stats": {"total": 92, "additions": 68, "deletions": 24}, "files": [{"sha": "108403ce638e527ba4652d017db6d007380ae7ca", "filename": "Cargo.lock", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56ade20380a028026eeb71af2a8a81e37ede7efb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/56ade20380a028026eeb71af2a8a81e37ede7efb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=56ade20380a028026eeb71af2a8a81e37ede7efb", "patch": "@@ -207,6 +207,15 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n+[[package]]\n+name = \"crc32fast\"\n+version = \"1.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n+dependencies = [\n+ \"cfg-if\",\n+]\n+\n [[package]]\n name = \"crossbeam-channel\"\n version = \"0.4.2\"\n@@ -340,6 +349,18 @@ version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d\"\n \n+[[package]]\n+name = \"flate2\"\n+version = \"1.0.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"68c90b0fc46cf89d227cc78b40e494ff81287a92dd07631e5af0d06fe3cf885e\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"crc32fast\",\n+ \"libc\",\n+ \"miniz_oxide\",\n+]\n+\n [[package]]\n name = \"flycheck\"\n version = \"0.1.0\"\n@@ -1993,6 +2014,7 @@ name = \"xtask\"\n version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n+ \"flate2\",\n  \"pico-args\",\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "612e6809f62a3c0949fcf4d00125905b5d895444", "filename": "Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56ade20380a028026eeb71af2a8a81e37ede7efb/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/56ade20380a028026eeb71af2a8a81e37ede7efb/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=56ade20380a028026eeb71af2a8a81e37ede7efb", "patch": "@@ -29,6 +29,11 @@ opt-level = 0\n [profile.release.package.xtask]\n opt-level = 0\n \n+# Gzipping the artifacts is up to 10 times faster with optimizations (`cargo xtask dist`).\n+# `miniz_oxide` is the direct dependency of `flate2` which does all the heavy lifting\n+[profile.dev.package.miniz_oxide]\n+opt-level = 3\n+\n [patch.'crates-io']\n # rowan = { path = \"../rowan\" }\n "}, {"sha": "bd99d696ad863cccce8a7e8b00dbd53fb9cb9b4f", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56ade20380a028026eeb71af2a8a81e37ede7efb/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/56ade20380a028026eeb71af2a8a81e37ede7efb/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=56ade20380a028026eeb71af2a8a81e37ede7efb", "patch": "@@ -274,13 +274,13 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     };\n     if (config.package.releaseTag === null) return \"rust-analyzer\";\n \n-    let binaryName: string | undefined = undefined;\n+    let platform: string | undefined;\n     if (process.arch === \"x64\" || process.arch === \"ia32\") {\n-        if (process.platform === \"linux\") binaryName = \"rust-analyzer-linux\";\n-        if (process.platform === \"darwin\") binaryName = \"rust-analyzer-mac\";\n-        if (process.platform === \"win32\") binaryName = \"rust-analyzer-windows.exe\";\n+        if (process.platform === \"linux\") platform = \"linux\";\n+        if (process.platform === \"darwin\") platform = \"mac\";\n+        if (process.platform === \"win32\") platform = \"windows\";\n     }\n-    if (binaryName === undefined) {\n+    if (platform === undefined) {\n         vscode.window.showErrorMessage(\n             \"Unfortunately we don't ship binaries for your platform yet. \" +\n             \"You need to manually clone rust-analyzer repository and \" +\n@@ -291,8 +291,8 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         );\n         return undefined;\n     }\n-\n-    const dest = path.join(config.globalStoragePath, binaryName);\n+    const ext = platform === \"windows\" ? \".exe\" : \"\";\n+    const dest = path.join(config.globalStoragePath, `rust-analyzer-${platform}${ext}`);\n     const exists = await fs.stat(dest).then(() => true, () => false);\n     if (!exists) {\n         await state.updateServerVersion(undefined);\n@@ -309,7 +309,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     }\n \n     const release = await fetchRelease(config.package.releaseTag);\n-    const artifact = release.assets.find(artifact => artifact.name === binaryName);\n+    const artifact = release.assets.find(artifact => artifact.name === `rust-analyzer-${platform}.gz`);\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n     // Unlinking the exe file before moving new one on its place should prevent ETXTBSY error.\n@@ -321,6 +321,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         url: artifact.browser_download_url,\n         dest,\n         progressTitle: \"Downloading rust-analyzer server\",\n+        gunzip: true,\n         mode: 0o755\n     });\n "}, {"sha": "53c9e91cd17010593c09a279dd9b0a6f3ef56a7d", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56ade20380a028026eeb71af2a8a81e37ede7efb/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/56ade20380a028026eeb71af2a8a81e37ede7efb/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=56ade20380a028026eeb71af2a8a81e37ede7efb", "patch": "@@ -3,6 +3,7 @@ import * as vscode from \"vscode\";\n import * as stream from \"stream\";\n import * as crypto from \"crypto\";\n import * as fs from \"fs\";\n+import * as zlib from \"zlib\";\n import * as util from \"util\";\n import * as path from \"path\";\n import { log, assert } from \"./util\";\n@@ -65,6 +66,7 @@ interface DownloadOpts {\n     url: string;\n     dest: string;\n     mode?: number;\n+    gunzip?: boolean;\n }\n \n export async function download(opts: DownloadOpts) {\n@@ -82,7 +84,7 @@ export async function download(opts: DownloadOpts) {\n         },\n         async (progress, _cancellationToken) => {\n             let lastPercentage = 0;\n-            await downloadFile(opts.url, tempFile, opts.mode, (readBytes, totalBytes) => {\n+            await downloadFile(opts.url, tempFile, opts.mode, !!opts.gunzip, (readBytes, totalBytes) => {\n                 const newPercentage = (readBytes / totalBytes) * 100;\n                 progress.report({\n                     message: newPercentage.toFixed(0) + \"%\",\n@@ -97,16 +99,11 @@ export async function download(opts: DownloadOpts) {\n     await fs.promises.rename(tempFile, opts.dest);\n }\n \n-/**\n- * Downloads file from `url` and stores it at `destFilePath` with `mode` (unix permissions).\n- * `onProgress` callback is called on recieveing each chunk of bytes\n- * to track the progress of downloading, it gets the already read and total\n- * amount of bytes to read as its parameters.\n- */\n async function downloadFile(\n     url: string,\n     destFilePath: fs.PathLike,\n     mode: number | undefined,\n+    gunzip: boolean,\n     onProgress: (readBytes: number, totalBytes: number) => void\n ): Promise<void> {\n     const res = await fetch(url);\n@@ -130,7 +127,10 @@ async function downloadFile(\n     });\n \n     const destFileStream = fs.createWriteStream(destFilePath, { mode });\n-    await pipeline(res.body, destFileStream);\n+    const srcStream = gunzip ? res.body.pipe(zlib.createGunzip()) : res.body;\n+\n+    await pipeline(srcStream, destFileStream);\n+\n     await new Promise<void>(resolve => {\n         destFileStream.on(\"close\", resolve);\n         destFileStream.destroy();"}, {"sha": "8045a98eaff54b76352f95425369ab23af0d0452", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56ade20380a028026eeb71af2a8a81e37ede7efb/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/56ade20380a028026eeb71af2a8a81e37ede7efb/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=56ade20380a028026eeb71af2a8a81e37ede7efb", "patch": "@@ -14,3 +14,4 @@ pico-args = \"0.3.1\"\n quote = \"1.0.2\"\n proc-macro2 = \"1.0.8\"\n anyhow = \"1.0.26\"\n+flate2 = \"1.0\""}, {"sha": "b8f68027c04311f987712cca31d4f5856abeafe7", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/56ade20380a028026eeb71af2a8a81e37ede7efb/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ade20380a028026eeb71af2a8a81e37ede7efb/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=56ade20380a028026eeb71af2a8a81e37ede7efb", "patch": "@@ -1,4 +1,10 @@\n-use std::path::PathBuf;\n+use flate2::{write::GzEncoder, Compression};\n+use std::{\n+    env,\n+    fs::File,\n+    io,\n+    path::{Path, PathBuf},\n+};\n \n use anyhow::Result;\n \n@@ -16,7 +22,7 @@ pub fn run_dist(nightly: bool, client_version: Option<String>) -> Result<()> {\n         let release_tag = if nightly { \"nightly\".to_string() } else { date_iso()? };\n         dist_client(&version, &release_tag)?;\n     }\n-    dist_server(nightly)?;\n+    dist_server()?;\n     Ok(())\n }\n \n@@ -46,17 +52,14 @@ fn dist_client(version: &str, release_tag: &str) -> Result<()> {\n     Ok(())\n }\n \n-fn dist_server(nightly: bool) -> Result<()> {\n+fn dist_server() -> Result<()> {\n     if cfg!(target_os = \"linux\") {\n-        std::env::set_var(\"CC\", \"clang\");\n+        env::set_var(\"CC\", \"clang\");\n         run!(\n             \"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\"\n             // We'd want to add, but that requires setting the right linker somehow\n             // --features=jemalloc\n         )?;\n-        if !nightly {\n-            run!(\"strip ./target/release/rust-analyzer\")?;\n-        }\n     } else {\n         run!(\"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\")?;\n     }\n@@ -71,8 +74,20 @@ fn dist_server(nightly: bool) -> Result<()> {\n         panic!(\"Unsupported OS\")\n     };\n \n-    fs2::copy(src, dst)?;\n+    let src = Path::new(src);\n+    let dst = Path::new(dst);\n+\n+    fs2::copy(&src, &dst)?;\n+    gzip(&src, &dst.with_extension(\"gz\"))?;\n+\n+    Ok(())\n+}\n \n+fn gzip(src_path: &Path, dest_path: &Path) -> Result<()> {\n+    let mut encoder = GzEncoder::new(File::create(dest_path)?, Compression::best());\n+    let mut input = io::BufReader::new(File::open(src_path)?);\n+    io::copy(&mut input, &mut encoder)?;\n+    encoder.finish()?;\n     Ok(())\n }\n "}]}