{"sha": "5d7f892356906ed8f7f2c7f2a878b9447e49d4f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkN2Y4OTIzNTY5MDZlZDhmN2YyYzdmMmE4NzhiOTQ0N2U0OWQ0ZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-10T03:27:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-10T03:27:43Z"}, "message": "Auto merge of #49258 - zackmdavis:not_going_to_recover, r=petrochenkov\n\nsuggest `!` for erroneous identifier `not`\n\n![not_recovery](https://user-images.githubusercontent.com/1076988/37753255-3b669c42-2d59-11e8-9071-efad8eaf3086.png)\n\nThis supersedes #48858.\n\nr? @petrochenkov", "tree": {"sha": "2736c7c9baae7abacb552cc55a049dbfd0a42e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2736c7c9baae7abacb552cc55a049dbfd0a42e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1", "html_url": "https://github.com/rust-lang/rust/commit/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8a8d6b5bf3ed8ca61adca172252bea7d1f1166e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a8d6b5bf3ed8ca61adca172252bea7d1f1166e", "html_url": "https://github.com/rust-lang/rust/commit/a8a8d6b5bf3ed8ca61adca172252bea7d1f1166e"}, {"sha": "ba0dd8eb026e2dcff27a7ee3b29514a53cc5c1d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0dd8eb026e2dcff27a7ee3b29514a53cc5c1d9", "html_url": "https://github.com/rust-lang/rust/commit/ba0dd8eb026e2dcff27a7ee3b29514a53cc5c1d9"}], "stats": {"total": 153, "additions": 151, "deletions": 2}, "files": [{"sha": "61de50e8e6affa53e3a7b37cf69cb835c709969b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5d7f892356906ed8f7f2c7f2a878b9447e49d4f1", "patch": "@@ -2830,7 +2830,48 @@ impl<'a> Parser<'a> {\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n                 (lo.to(span), ExprKind::Box(e))\n             }\n-            _ => return self.parse_dot_or_call_expr(Some(attrs))\n+            token::Ident(..) if self.token.is_ident_named(\"not\") => {\n+                // `not` is just an ordinary identifier in Rust-the-language,\n+                // but as `rustc`-the-compiler, we can issue clever diagnostics\n+                // for confused users who really want to say `!`\n+                let token_cannot_continue_expr = |t: &token::Token| match *t {\n+                    // These tokens can start an expression after `!`, but\n+                    // can't continue an expression after an ident\n+                    token::Ident(ident, is_raw) => token::ident_can_begin_expr(ident, is_raw),\n+                    token::Literal(..) | token::Pound => true,\n+                    token::Interpolated(ref nt) => match nt.0 {\n+                        token::NtIdent(..) | token::NtExpr(..) |\n+                        token::NtBlock(..) | token::NtPath(..) => true,\n+                        _ => false,\n+                    },\n+                    _ => false\n+                };\n+                let cannot_continue_expr = self.look_ahead(1, token_cannot_continue_expr);\n+                if cannot_continue_expr {\n+                    self.bump();\n+                    // Emit the error ...\n+                    let mut err = self.diagnostic()\n+                        .struct_span_err(self.span,\n+                                         &format!(\"unexpected {} after identifier\",\n+                                                  self.this_token_descr()));\n+                    // span the `not` plus trailing whitespace to avoid\n+                    // trailing whitespace after the `!` in our suggestion\n+                    let to_replace = self.sess.codemap()\n+                        .span_until_non_whitespace(lo.to(self.span));\n+                    err.span_suggestion_short(to_replace,\n+                                              \"use `!` to perform logical negation\",\n+                                              \"!\".to_owned());\n+                    err.emit();\n+                    // \u2014and recover! (just as if we were in the block\n+                    // for the `token::Not` arm)\n+                    let e = self.parse_prefix_expr(None);\n+                    let (span, e) = self.interpolated_or_expr_span(e)?;\n+                    (lo.to(span), self.mk_unary(UnOp::Not, e))\n+                } else {\n+                    return self.parse_dot_or_call_expr(Some(attrs));\n+                }\n+            }\n+            _ => { return self.parse_dot_or_call_expr(Some(attrs)); }\n         };\n         return Ok(self.mk_expr(lo.to(hi), ex, attrs));\n     }\n@@ -4486,6 +4527,11 @@ impl<'a> Parser<'a> {\n             // Which is valid in other languages, but not Rust.\n             match self.parse_stmt_without_recovery(false) {\n                 Ok(Some(stmt)) => {\n+                    if self.look_ahead(1, |t| t == &token::OpenDelim(token::Brace)) {\n+                        // if the next token is an open brace (e.g., `if a b {`), the place-\n+                        // inside-a-block suggestion would be more likely wrong than right\n+                        return Err(e);\n+                    }\n                     let mut stmt_span = stmt.span;\n                     // expand the span to include the semicolon, if it exists\n                     if self.eat(&token::Semi) {"}, {"sha": "df0ea05005cbf47e1a47745bcec4c31dfafd3580", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=5d7f892356906ed8f7f2c7f2a878b9447e49d4f1", "patch": "@@ -91,7 +91,7 @@ impl Lit {\n     }\n }\n \n-fn ident_can_begin_expr(ident: ast::Ident, is_raw: bool) -> bool {\n+pub(crate) fn ident_can_begin_expr(ident: ast::Ident, is_raw: bool) -> bool {\n     let ident_token: Token = Ident(ident, is_raw);\n \n     !ident_token.is_reserved_ident() ||\n@@ -348,6 +348,15 @@ impl Token {\n         self.lifetime().is_some()\n     }\n \n+    /// Returns `true` if the token is a identifier whose name is the given\n+    /// string slice.\n+    pub fn is_ident_named(&self, name: &str) -> bool {\n+        match self.ident() {\n+            Some((ident, _)) => ident.name.as_str() == name,\n+            None => false\n+        }\n+    }\n+\n     /// Returns `true` if the token is a documentation comment.\n     pub fn is_doc_comment(&self) -> bool {\n         match *self {"}, {"sha": "45265173419b71b70da3c69c080c547731c6afe1", "filename": "src/test/ui/did_you_mean/issue-46836-identifier-not-instead-of-negation.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.rs?ref=5d7f892356906ed8f7f2c7f2a878b9447e49d4f1", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn gratitude() {\n+    let for_you = false;\n+    if not for_you {\n+        //~^ ERROR unexpected `for_you` after identifier\n+        println!(\"I couldn't\");\n+    }\n+}\n+\n+fn qualification() {\n+    let the_worst = true;\n+    while not the_worst {\n+        //~^ ERROR unexpected `the_worst` after identifier\n+        println!(\"still pretty bad\");\n+    }\n+}\n+\n+fn should_we() {\n+    let not = true;\n+    if not  // lack of braces is [sic]\n+        println!(\"Then when?\");\n+    //~^ ERROR expected `{`, found `;\n+    //~| ERROR unexpected `println` after identifier\n+}\n+\n+fn sleepy() {\n+    let resource = not 2;\n+    //~^ ERROR unexpected `2` after identifier\n+}\n+\n+fn main() {\n+    let be_smothered_out_before = true;\n+    let young_souls = not be_smothered_out_before;\n+    //~^ ERROR unexpected `be_smothered_out_before` after identifier\n+}"}, {"sha": "db3478116cbfdd37270b312a5d01cba019cf4b5f", "filename": "src/test/ui/did_you_mean/issue-46836-identifier-not-instead-of-negation.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d7f892356906ed8f7f2c7f2a878b9447e49d4f1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr?ref=5d7f892356906ed8f7f2c7f2a878b9447e49d4f1", "patch": "@@ -0,0 +1,50 @@\n+error: unexpected `for_you` after identifier\n+  --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:13:12\n+   |\n+LL |     if not for_you {\n+   |        ----^^^^^^^\n+   |        |\n+   |        help: use `!` to perform logical negation\n+\n+error: unexpected `the_worst` after identifier\n+  --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:21:15\n+   |\n+LL |     while not the_worst {\n+   |           ----^^^^^^^^^\n+   |           |\n+   |           help: use `!` to perform logical negation\n+\n+error: unexpected `println` after identifier\n+  --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:30:9\n+   |\n+LL |     if not  // lack of braces is [sic]\n+   |        ----- help: use `!` to perform logical negation\n+LL |         println!(\"Then when?\");\n+   |         ^^^^^^^\n+\n+error: expected `{`, found `;`\n+  --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:30:31\n+   |\n+LL |     if not  // lack of braces is [sic]\n+   |     -- this `if` statement has a condition, but no block\n+LL |         println!(\"Then when?\");\n+   |                               ^\n+\n+error: unexpected `2` after identifier\n+  --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:36:24\n+   |\n+LL |     let resource = not 2;\n+   |                    ----^\n+   |                    |\n+   |                    help: use `!` to perform logical negation\n+\n+error: unexpected `be_smothered_out_before` after identifier\n+  --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:42:27\n+   |\n+LL |     let young_souls = not be_smothered_out_before;\n+   |                       ----^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       |\n+   |                       help: use `!` to perform logical negation\n+\n+error: aborting due to 6 previous errors\n+"}]}