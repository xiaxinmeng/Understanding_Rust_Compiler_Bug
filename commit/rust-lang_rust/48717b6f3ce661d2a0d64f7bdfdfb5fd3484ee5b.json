{"sha": "48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NzE3YjZmM2NlNjYxZDJhMGQ2NGY3YmRmZGZiNWZkMzQ4NGVlNWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-26T18:40:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-26T18:40:51Z"}, "message": "Auto merge of #75912 - scottmcm:manuallydrop-vs-forget, r=Mark-Simulacrum\n\nSuggest `mem::forget` if `mem::ManuallyDrop::new` isn't used\n\nI think this communicates the intent more idiomatically, and is shorter anyway.\n\nInspired because [it came up on URLO](https://users.rust-lang.org/t/validity-of-memory-area-after-std-forget/47730/7?u=scottmcm), and it turns out that std had done it too in one spot:\n![image](https://user-images.githubusercontent.com/18526288/91203819-e19f2980-e6f2-11ea-9112-835f3b22ce05.png)", "tree": {"sha": "6132a4164c89982923e6303d7f39373f2ae46efa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6132a4164c89982923e6303d7f39373f2ae46efa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b", "html_url": "https://github.com/rust-lang/rust/commit/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "html_url": "https://github.com/rust-lang/rust/commit/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316"}, {"sha": "f3024073f92b15d38b42241e65067f0ba796896c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3024073f92b15d38b42241e65067f0ba796896c", "html_url": "https://github.com/rust-lang/rust/commit/f3024073f92b15d38b42241e65067f0ba796896c"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "aab0e96d83ab98c6a5b6faf6635bc4bf16580c69", "filename": "library/core/src/mem/manually_drop.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs?ref=48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b", "patch": "@@ -74,8 +74,12 @@ impl<T> ManuallyDrop<T> {\n     ///\n     /// ```rust\n     /// use std::mem::ManuallyDrop;\n-    /// ManuallyDrop::new(Box::new(()));\n+    /// let mut x = ManuallyDrop::new(String::from(\"Hello World!\"));\n+    /// x.truncate(5); // You can still safely operate on the value\n+    /// assert_eq!(*x, \"Hello\");\n+    /// // But `Drop` will not be run here\n     /// ```\n+    #[must_use = \"if you don't need the wrapper, you can use `mem::forget` instead\"]\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n     #[rustc_const_stable(feature = \"const_manually_drop\", since = \"1.36.0\")]\n     #[inline(always)]"}, {"sha": "6d8ed2f4ffb1a158e9e62f845259d185e57f11d5", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b", "patch": "@@ -145,7 +145,7 @@ pub use crate::intrinsics::transmute;\n #[rustc_const_stable(feature = \"const_forget\", since = \"1.46.0\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const fn forget<T>(t: T) {\n-    ManuallyDrop::new(t);\n+    let _ = ManuallyDrop::new(t);\n }\n \n /// Like [`forget`], but also accepts unsized values."}, {"sha": "d0f27df51850533dd3578b9352e4e01981154cb1", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b", "patch": "@@ -293,7 +293,7 @@ impl<T> SyncOnceCell<T> {\n \n         // Don't drop this `SyncOnceCell`. We just moved out one of the fields, but didn't set\n         // the state to uninitialized.\n-        mem::ManuallyDrop::new(self);\n+        mem::forget(self);\n         inner\n     }\n "}]}