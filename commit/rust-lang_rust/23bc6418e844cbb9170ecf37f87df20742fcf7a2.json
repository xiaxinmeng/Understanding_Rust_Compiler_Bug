{"sha": "23bc6418e844cbb9170ecf37f87df20742fcf7a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYmM2NDE4ZTg0NGNiYjkxNzBlY2YzN2Y4N2RmMjA3NDJmY2Y3YTI=", "commit": {"author": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2018-01-01T22:47:50Z"}, "committer": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2018-01-07T01:30:20Z"}, "message": "Moved builtin indexing checks to writeback stage\n\nUse of builtin indexing is now only checked after types are fully\nresolved.\nTypes are not correctly checked in case of autoderefs.", "tree": {"sha": "342df4d0cf76446e92a22befbeadc436bcef3d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/342df4d0cf76446e92a22befbeadc436bcef3d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23bc6418e844cbb9170ecf37f87df20742fcf7a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23bc6418e844cbb9170ecf37f87df20742fcf7a2", "html_url": "https://github.com/rust-lang/rust/commit/23bc6418e844cbb9170ecf37f87df20742fcf7a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23bc6418e844cbb9170ecf37f87df20742fcf7a2/comments", "author": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6828cf90146c7fefc4ba4f16dffe75f763f2d910", "url": "https://api.github.com/repos/rust-lang/rust/commits/6828cf90146c7fefc4ba4f16dffe75f763f2d910", "html_url": "https://github.com/rust-lang/rust/commit/6828cf90146c7fefc4ba4f16dffe75f763f2d910"}], "stats": {"total": 96, "additions": 82, "deletions": 14}, "files": [{"sha": "7d7aa80519dbfbeca8df20c0454d2f4077850d5c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23bc6418e844cbb9170ecf37f87df20742fcf7a2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bc6418e844cbb9170ecf37f87df20742fcf7a2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=23bc6418e844cbb9170ecf37f87df20742fcf7a2", "patch": "@@ -2217,18 +2217,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                adjusted_ty,\n                index_ty);\n \n-        // First, try built-in indexing.\n-        match (adjusted_ty.builtin_index(), &index_ty.sty) {\n-            (Some(ty), &ty::TyUint(ast::UintTy::Usize)) |\n-            (Some(ty), &ty::TyInfer(ty::IntVar(_))) => {\n-                debug!(\"try_index_step: success, using built-in indexing\");\n-                let adjustments = autoderef.adjust_steps(lvalue_pref);\n-                self.apply_adjustments(base_expr, adjustments);\n-                return Some((self.tcx.types.usize, ty));\n-            }\n-            _ => {}\n-        }\n-\n         for &unsize in &[false, true] {\n             let mut self_ty = adjusted_ty;\n             if unsize {"}, {"sha": "7f966cae24900cfa655ca8fdaf3a99d37363b7ea", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/23bc6418e844cbb9170ecf37f87df20742fcf7a2/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bc6418e844cbb9170ecf37f87df20742fcf7a2/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=23bc6418e844cbb9170ecf37f87df20742fcf7a2", "patch": "@@ -12,12 +12,13 @@\n // unresolved type variables and replaces \"ty_var\" types with their\n // substitutions.\n \n-use check::FnCtxt;\n+use check::{FnCtxt, LvalueOp};\n use rustc::hir;\n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::InferCtxt;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, LvaluePreference, Ty, TyCtxt};\n+use rustc::ty::adjustment::{Adjust, Adjustment};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::util::nodemap::DefIdSet;\n use syntax::ast;\n@@ -159,8 +160,86 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n             _ => {}\n         }\n     }\n+\n+    // Similar to operators, indexing is always assumed to be overloaded\n+    // Here, correct cases where an indexing expression can be simplified\n+    // to use builtin indexing because the index type is known to be\n+    // usize-ish\n+    fn fix_index_builtin_expr(&mut self, e: &hir::Expr) {\n+        if let hir::ExprIndex(ref base, ref index) = e.node {\n+            let base_ty = self.fcx.node_ty(base.hir_id);\n+            let base_ty = self.fcx.resolve_type_vars_if_possible(&base_ty);\n+            let index_ty = self.fcx.node_ty(index.hir_id);\n+            let index_ty = self.fcx.resolve_type_vars_if_possible(&index_ty);\n+\n+            if index_ty.is_uint() {\n+                // HACK: the *actual* type being indexed is not stored anywhere\n+                // so we try to find it again here by derefs\n+                let mut autoderef = self.fcx.autoderef(e.span, base_ty);\n+                let builtin_ty : Option<_> = {\n+                    loop {\n+                        // This is essentially a duplicate of the index discovery\n+                        // logic in typechecking code\n+                        // Find the first type dereffable to which has builtin \n+                        // indexing - this \n+                        if let Some(_) = autoderef.next() {\n+                            let current_ty = autoderef.unambiguous_final_ty();\n+\n+                            if current_ty.builtin_index().is_some() {\n+                                // If there is a builtin index, use it\n+                                break Some(current_ty);\n+                            } else {\n+                                // If there's an overloaded index which happens\n+                                // to take a uint, stop looking - otherwise we\n+                                // might incorrectly deref further\n+                                let overloaded_method = \n+                                    self.fcx.try_overloaded_lvalue_op(\n+                                        e.span,\n+                                        base_ty,\n+                                        &[index_ty],\n+                                        LvaluePreference::NoPreference,\n+                                        LvalueOp::Index\n+                                    );\n+\n+                                if overloaded_method.is_some() {\n+                                    break None;\n+                                }\n+                            }\n+                        } else {\n+                            break None;\n+                        }\n+                    }\n+                };\n+\n+                if builtin_ty.is_some() {\n+                    let mut tables = self.fcx.tables.borrow_mut();\n+                 \n+                    // Remove the method call record, which blocks use in\n+                    // constant or static cases\n+                    tables.type_dependent_defs_mut().remove(e.hir_id);\n+                    tables.node_substs_mut().remove(e.hir_id);\n+\n+                    tables.adjustments_mut().get_mut(base.hir_id).map(|a| {\n+                        // Discard the need for a mutable borrow\n+                        match a.pop() {\n+                            // Extra adjustment made when indexing causes a drop\n+                            // of size information - we need to get rid of it\n+                            // Since this is \"after\" the other adjustment to be\n+                            // discarded, we do an extra `pop()`\n+                            Some(Adjustment { kind: Adjust::Unsize, .. }) => {\n+                                // So the borrow discard actually happens here\n+                                a.pop();\n+                            },\n+                            _ => {}\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+    }\n }\n \n+\n ///////////////////////////////////////////////////////////////////////////\n // Impl of Visitor for Resolver\n //\n@@ -176,6 +255,7 @@ impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> {\n \n     fn visit_expr(&mut self, e: &'gcx hir::Expr) {\n         self.fix_scalar_builtin_expr(e);\n+        self.fix_index_builtin_expr(e);\n \n         self.visit_node_id(e.span, e.hir_id);\n "}]}