{"sha": "336c899a07063c56c4a0b9f4764fbe5f9729ea51", "node_id": "C_kwDOAAsO6NoAKDMzNmM4OTlhMDcwNjNjNTZjNGEwYjlmNDc2NGZiZTVmOTcyOWVhNTE", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2022-01-04T14:59:00Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2022-01-04T14:59:00Z"}, "message": "add better default behavior on fill struct fields diagnostic\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "e009ff7c5f790d8071ec0b0cad3a944ab2fe1ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e009ff7c5f790d8071ec0b0cad3a944ab2fe1ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/336c899a07063c56c4a0b9f4764fbe5f9729ea51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/336c899a07063c56c4a0b9f4764fbe5f9729ea51", "html_url": "https://github.com/rust-lang/rust/commit/336c899a07063c56c4a0b9f4764fbe5f9729ea51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/336c899a07063c56c4a0b9f4764fbe5f9729ea51/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df6fa50f92af1232df5c044b8fe223817588ec8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df6fa50f92af1232df5c044b8fe223817588ec8b", "html_url": "https://github.com/rust-lang/rust/commit/df6fa50f92af1232df5c044b8fe223817588ec8b"}], "stats": {"total": 136, "additions": 123, "deletions": 13}, "files": [{"sha": "8d5dbd28ac8e8a50167d3f91975758d441e91df3", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/336c899a07063c56c4a0b9f4764fbe5f9729ea51/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336c899a07063c56c4a0b9f4764fbe5f9729ea51/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=336c899a07063c56c4a0b9f4764fbe5f9729ea51", "patch": "@@ -1685,6 +1685,26 @@ impl BuiltinType {\n     pub fn name(self) -> Name {\n         self.inner.as_name()\n     }\n+\n+    pub fn is_int(&self) -> bool {\n+        matches!(self.inner, hir_def::builtin_type::BuiltinType::Int(_))\n+    }\n+\n+    pub fn is_uint(&self) -> bool {\n+        matches!(self.inner, hir_def::builtin_type::BuiltinType::Uint(_))\n+    }\n+\n+    pub fn is_float(&self) -> bool {\n+        matches!(self.inner, hir_def::builtin_type::BuiltinType::Float(_))\n+    }\n+\n+    pub fn is_char(&self) -> bool {\n+        matches!(self.inner, hir_def::builtin_type::BuiltinType::Char)\n+    }\n+\n+    pub fn is_str(&self) -> bool {\n+        matches!(self.inner, hir_def::builtin_type::BuiltinType::Str)\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -2573,6 +2593,10 @@ impl Type {\n         matches!(&self.ty.kind(Interner), TyKind::FnDef(..) | TyKind::Function { .. })\n     }\n \n+    pub fn is_array(&self) -> bool {\n+        matches!(&self.ty.kind(Interner), TyKind::Array(..))\n+    }\n+\n     pub fn is_packed(&self, db: &dyn HirDatabase) -> bool {\n         let adt_id = match *self.ty.kind(Interner) {\n             TyKind::Adt(hir_ty::AdtId(adt_id), ..) => adt_id,"}, {"sha": "3636ab62131bbebb04fc1a98b6ca39866017e5be", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/336c899a07063c56c4a0b9f4764fbe5f9729ea51/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336c899a07063c56c4a0b9f4764fbe5f9729ea51/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=336c899a07063c56c4a0b9f4764fbe5f9729ea51", "patch": "@@ -226,6 +226,7 @@ pub mod known {\n         iter_mut,\n         len,\n         is_empty,\n+        new,\n         // Builtin macros\n         asm,\n         assert,"}, {"sha": "cded84c54eb1cb44c8365e7f23723cf043b2e7cb", "filename": "crates/ide_diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 75, "deletions": 9, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/336c899a07063c56c4a0b9f4764fbe5f9729ea51/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336c899a07063c56c4a0b9f4764fbe5f9729ea51/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=336c899a07063c56c4a0b9f4764fbe5f9729ea51", "patch": "@@ -1,9 +1,16 @@\n use either::Either;\n-use hir::{db::AstDatabase, InFile, Type};\n+use hir::{\n+    db::{AstDatabase, HirDatabase},\n+    known, HirDisplay, InFile, SemanticsScope, Type,\n+};\n use ide_db::{assists::Assist, helpers::FamousDefs, source_change::SourceChange};\n use rustc_hash::FxHashMap;\n use stdx::format_to;\n-use syntax::{algo, ast::make, AstNode, SyntaxNodePtr};\n+use syntax::{\n+    algo,\n+    ast::{self, make},\n+    AstNode, SyntaxNodePtr,\n+};\n use text_edit::TextEdit;\n \n use crate::{fix, Diagnostic, DiagnosticsContext};\n@@ -67,13 +74,10 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n     let generate_fill_expr = |ty: &Type| match ctx.config.expr_fill_default {\n         crate::ExprFillDefaultMode::Todo => Some(make::ext::expr_todo()),\n         crate::ExprFillDefaultMode::DefaultImpl => {\n-            let krate = ctx.sema.to_module_def(d.file.original_file(ctx.sema.db))?.krate();\n-            let default_trait = FamousDefs(&ctx.sema, Some(krate)).core_default_Default();\n-\n-            match default_trait {\n-                Some(default_trait) if ty.impls_trait(ctx.sema.db, default_trait, &[]) => {\n-                    Some(make::ext::expr_default())\n-                }\n+            let scope = ctx.sema.scope(&root);\n+            let default_constr = get_default_constructor(ctx, d, &scope, ty);\n+            match default_constr {\n+                Some(default_constr) => Some(default_constr),\n                 _ => Some(make::ext::expr_todo()),\n             }\n         }\n@@ -118,6 +122,68 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n     )])\n }\n \n+fn make_ty(ty: &hir::Type, db: &dyn HirDatabase, module: hir::Module) -> ast::Type {\n+    let ty_str = match ty.as_adt() {\n+        Some(adt) => adt.name(db).to_string(),\n+        None => ty.display_source_code(db, module.into()).ok().unwrap_or_else(|| \"_\".to_string()),\n+    };\n+\n+    make::ty(&ty_str)\n+}\n+\n+fn get_default_constructor(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::MissingFields,\n+    scope: &SemanticsScope,\n+    ty: &Type,\n+) -> Option<ast::Expr> {\n+    if let Some(builtin_ty) = ty.as_builtin() {\n+        if builtin_ty.is_int() || builtin_ty.is_uint() {\n+            return Some(make::ext::zero_number());\n+        }\n+        if builtin_ty.is_float() {\n+            return Some(make::ext::zero_float());\n+        }\n+        if builtin_ty.is_char() {\n+            return Some(make::ext::empty_char());\n+        }\n+        if builtin_ty.is_str() {\n+            return Some(make::ext::empty_str());\n+        }\n+    }\n+    let krate = ctx.sema.to_module_def(d.file.original_file(ctx.sema.db))?.krate();\n+    let module = krate.root_module(ctx.sema.db);\n+    let default_trait = FamousDefs(&ctx.sema, Some(krate)).core_default_Default()?;\n+    let traits_in_scope = scope.visible_traits();\n+\n+    // Look for a ::new() method\n+    // FIXME: doesn't work for now\n+    let has_new_method = ty\n+        .iterate_method_candidates(\n+            ctx.sema.db,\n+            krate,\n+            &traits_in_scope,\n+            Some(&known::new),\n+            |_, func| {\n+                if func.assoc_fn_params(ctx.sema.db).is_empty()\n+                    && func.self_param(ctx.sema.db).is_none()\n+                {\n+                    return Some(());\n+                }\n+                None\n+            },\n+        )\n+        .is_some();\n+\n+    if has_new_method {\n+        Some(make::ext::expr_ty_new(&make_ty(ty, ctx.sema.db, module)))\n+    } else if !ty.is_array() && ty.impls_trait(ctx.sema.db, default_trait, &[]) {\n+        Some(make::ext::expr_ty_default(&make_ty(ty, ctx.sema.db, module)))\n+    } else {\n+        None\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_diagnostics, check_fix};"}, {"sha": "2d4d24e98d62c1412ef144bd2d24f28075746c25", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/336c899a07063c56c4a0b9f4764fbe5f9729ea51/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336c899a07063c56c4a0b9f4764fbe5f9729ea51/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=336c899a07063c56c4a0b9f4764fbe5f9729ea51", "patch": "@@ -1273,7 +1273,7 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"enum\": [\"todo\", \"defaultImpl\"],\n             \"enumDescriptions\": [\n                 \"Fill missing elements with 'todo' macro\",\n-                \"Fill missing elements with Default::default()\"\n+                \"Fill missing elements with T::default()\"\n             ],\n         },\n         \"ImportGranularityDef\" => set! {"}, {"sha": "12d5b7decc65a7e32a0b8b3452d24083ea11dd42", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/336c899a07063c56c4a0b9f4764fbe5f9729ea51/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336c899a07063c56c4a0b9f4764fbe5f9729ea51/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=336c899a07063c56c4a0b9f4764fbe5f9729ea51", "patch": "@@ -59,8 +59,27 @@ pub mod ext {\n     pub fn expr_todo() -> ast::Expr {\n         expr_from_text(\"todo!()\")\n     }\n-    pub fn expr_default() -> ast::Expr {\n-        expr_from_text(\"Default::default()\")\n+    pub fn expr_ty_default(ty: &ast::Type) -> ast::Expr {\n+        expr_from_text(&format!(\"{}::default()\", ty))\n+    }\n+    pub fn expr_ty_new(ty: &ast::Type) -> ast::Expr {\n+        expr_from_text(&format!(\"{}::new()\", ty))\n+    }\n+\n+    pub fn zero_number() -> ast::Expr {\n+        expr_from_text(\"0\")\n+    }\n+    pub fn zero_float() -> ast::Expr {\n+        expr_from_text(\"0.0\")\n+    }\n+    pub fn empty_str() -> ast::Expr {\n+        expr_from_text(r#\"\"\"\"#)\n+    }\n+    pub fn empty_char() -> ast::Expr {\n+        expr_from_text(\"''\")\n+    }\n+    pub fn default_bool() -> ast::Expr {\n+        expr_from_text(\"false\")\n     }\n     pub fn empty_block_expr() -> ast::BlockExpr {\n         block_expr(None, None)"}, {"sha": "6bc62fc9d7f46fa6bc03d5e950722ea210ca2d91", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/336c899a07063c56c4a0b9f4764fbe5f9729ea51/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/336c899a07063c56c4a0b9f4764fbe5f9729ea51/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=336c899a07063c56c4a0b9f4764fbe5f9729ea51", "patch": "@@ -388,7 +388,7 @@\n                     ],\n                     \"enumDescriptions\": [\n                         \"Fill missing elements with 'todo' macro\",\n-                        \"Fill missing elements with Default::default()\"\n+                        \"Fill missing elements with T::default()\"\n                     ]\n                 },\n                 \"rust-analyzer.assist.importGranularity\": {"}]}