{"sha": "7bf06701693934ded0774f0c17f45943cdbe44f3", "node_id": "C_kwDOAAsO6NoAKDdiZjA2NzAxNjkzOTM0ZGVkMDc3NGYwYzE3ZjQ1OTQzY2RiZTQ0ZjM", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2023-01-23T04:03:58Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T03:03:22Z"}, "message": "abi: add `AddressSpace` field to `Primitive::Pointer`\n\n...and remove it from `PointeeInfo`, which isn't meant for this.\n\nThere are still various places (marked with FIXMEs) that assume all pointers\nhave the same size and alignment. Fixing this requires parsing non-default\naddress spaces in the data layout string, which will be done in a followup.", "tree": {"sha": "91ffe7100c3efe7a555523323c0dc7c3178007f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91ffe7100c3efe7a555523323c0dc7c3178007f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bf06701693934ded0774f0c17f45943cdbe44f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf06701693934ded0774f0c17f45943cdbe44f3", "html_url": "https://github.com/rust-lang/rust/commit/7bf06701693934ded0774f0c17f45943cdbe44f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bf06701693934ded0774f0c17f45943cdbe44f3/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dcda26aa6640ecf3d0d77d08ee37983b4ca1f4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dcda26aa6640ecf3d0d77d08ee37983b4ca1f4a", "html_url": "https://github.com/rust-lang/rust/commit/5dcda26aa6640ecf3d0d77d08ee37983b4ca1f4a"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "05b3bacfbf918726d96fc1c40dd2ad31a2bfa270", "filename": "src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf06701693934ded0774f0c17f45943cdbe44f3/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf06701693934ded0774f0c17f45943cdbe44f3/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=7bf06701693934ded0774f0c17f45943cdbe44f3", "patch": "@@ -768,7 +768,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n                         bx.range_metadata(load, vr);\n                     }\n                 }\n-                abi::Pointer if vr.start < vr.end && !vr.contains(0) => {\n+                abi::Pointer(_) if vr.start < vr.end && !vr.contains(0) => {\n                     bx.nonnull_metadata(load);\n                 }\n                 _ => {}"}, {"sha": "54325e1277b0b4633fb936042c5490d4904defee", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf06701693934ded0774f0c17f45943cdbe44f3/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf06701693934ded0774f0c17f45943cdbe44f3/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=7bf06701693934ded0774f0c17f45943cdbe44f3", "patch": "@@ -221,7 +221,7 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                 let base_addr = self.const_bitcast(base_addr, self.usize_type);\n                 let offset = self.context.new_rvalue_from_long(self.usize_type, offset.bytes() as i64);\n                 let ptr = self.const_bitcast(base_addr + offset, ptr_type);\n-                if layout.primitive() != Pointer {\n+                if !matches!(layout.primitive(), Pointer(_)) {\n                     self.const_bitcast(ptr.dereference(None).to_rvalue(), ty)\n                 }\n                 else {"}, {"sha": "52e5ea777870f6f438ca4c48ca0a2618771d81a8", "filename": "src/consts.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7bf06701693934ded0774f0c17f45943cdbe44f3/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf06701693934ded0774f0c17f45943cdbe44f3/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=7bf06701693934ded0774f0c17f45943cdbe44f3", "patch": "@@ -7,9 +7,9 @@ use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs}\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::mir::interpret::{self, ConstAllocation, ErrorHandled, Scalar as InterpScalar, read_target_uint};\n+use rustc_middle::mir::interpret::{self, ConstAllocation, ErrorHandled, GlobalAlloc, Scalar as InterpScalar, read_target_uint};\n use rustc_span::def_id::DefId;\n-use rustc_target::abi::{self, Align, HasDataLayout, Primitive, Size, WrappingRange};\n+use rustc_target::abi::{self, AddressSpace, Align, HasDataLayout, Primitive, Size, WrappingRange};\n \n use crate::base;\n use crate::context::CodegenCx;\n@@ -306,13 +306,21 @@ pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAl\n             )\n             .expect(\"const_alloc_to_llvm: could not read relocation pointer\")\n             as u64;\n+\n+        let address_space = match cx.tcx.global_alloc(alloc_id) {\n+            GlobalAlloc::Function(..) => cx.data_layout().instruction_address_space,\n+            GlobalAlloc::Static(..) | GlobalAlloc::Memory(..) | GlobalAlloc::VTable(..) => {\n+                AddressSpace::DATA\n+            }\n+        };\n+\n         llvals.push(cx.scalar_to_backend(\n             InterpScalar::from_pointer(\n                 interpret::Pointer::new(alloc_id, Size::from_bytes(ptr_offset)),\n                 &cx.tcx,\n             ),\n-            abi::Scalar::Initialized { value: Primitive::Pointer, valid_range: WrappingRange::full(dl.pointer_size) },\n-            cx.type_i8p(),\n+            abi::Scalar::Initialized { value: Primitive::Pointer(address_space), valid_range: WrappingRange::full(dl.pointer_size) },\n+            cx.type_i8p_ext(address_space),\n         ));\n         next_offset = offset + pointer_size;\n     }"}, {"sha": "b01bd114656ca1cd4066862131f5d7a1d8855a7f", "filename": "src/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bf06701693934ded0774f0c17f45943cdbe44f3/src%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf06701693934ded0774f0c17f45943cdbe44f3/src%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_of.rs?ref=7bf06701693934ded0774f0c17f45943cdbe44f3", "patch": "@@ -253,7 +253,7 @@ impl<'tcx> LayoutGccExt<'tcx> for TyAndLayout<'tcx> {\n             Int(i, false) => cx.type_from_unsigned_integer(i),\n             F32 => cx.type_f32(),\n             F64 => cx.type_f64(),\n-            Pointer => {\n+            Pointer(address_space) => {\n                 // If we know the alignment, pick something better than i8.\n                 let pointee =\n                     if let Some(pointee) = self.pointee_info_at(cx, offset) {\n@@ -262,7 +262,7 @@ impl<'tcx> LayoutGccExt<'tcx> for TyAndLayout<'tcx> {\n                     else {\n                         cx.type_i8()\n                     };\n-                cx.type_ptr_to(pointee)\n+                cx.type_ptr_to_ext(pointee, address_space)\n             }\n         }\n     }"}]}