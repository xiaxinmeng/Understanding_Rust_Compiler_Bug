{"sha": "8b57130e8450baed5c851686d9c8ead20223f5a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTcxMzBlODQ1MGJhZWQ1Yzg1MTY4NmQ5YzhlYWQyMDIyM2Y1YTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-04T04:37:02Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-04T04:37:02Z"}, "message": "Rollup merge of #25990 - carols10cents:try-docs, r=nikomatsakis\n\nThe API documentation is not explicit enough that because `try!` returns\r\n`Err` early for you, you can only use it in functions that return\r\n`Result`. The book mentions this, but if you come across `try!` outside\r\nof the book and look it up in the docs, this restriction on the return\r\ntype of the function is not particularly clear.\r\n\r\nI seriously had this epiphany a few days ago after working with Rust for MONTHS, and after seeing [a friend have to come to the same realization](http://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-2a/), I'd like to save more people from this confusion :) :sparkling_heart:", "tree": {"sha": "6832529dbfac50ef6c9a1531a242fb2f5fd96bb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6832529dbfac50ef6c9a1531a242fb2f5fd96bb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b57130e8450baed5c851686d9c8ead20223f5a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b57130e8450baed5c851686d9c8ead20223f5a4", "html_url": "https://github.com/rust-lang/rust/commit/8b57130e8450baed5c851686d9c8ead20223f5a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b57130e8450baed5c851686d9c8ead20223f5a4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5421b1fa25108a5100faa772840202f304293e0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5421b1fa25108a5100faa772840202f304293e0f", "html_url": "https://github.com/rust-lang/rust/commit/5421b1fa25108a5100faa772840202f304293e0f"}, {"sha": "c692d75b5a595ef5939473aef20e1751d4e0e1f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c692d75b5a595ef5939473aef20e1751d4e0e1f5", "html_url": "https://github.com/rust-lang/rust/commit/c692d75b5a595ef5939473aef20e1751d4e0e1f5"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "003c4b2b78c5ccc8e3f790b4c4f298e5758b4859", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b57130e8450baed5c851686d9c8ead20223f5a4/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b57130e8450baed5c851686d9c8ead20223f5a4/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=8b57130e8450baed5c851686d9c8ead20223f5a4", "patch": "@@ -223,7 +223,9 @@\n //! }\n //! ```\n //!\n-//! `try!` is imported by the prelude, and is available everywhere.\n+//! `try!` is imported by the prelude and is available everywhere, but it can only\n+//! be used in functions that return `Result` because of the early return of\n+//! `Err` that it provides.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "706571b67c9ac4b0108470f01eb1353adcafd139", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8b57130e8450baed5c851686d9c8ead20223f5a4/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b57130e8450baed5c851686d9c8ead20223f5a4/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=8b57130e8450baed5c851686d9c8ead20223f5a4", "patch": "@@ -117,7 +117,34 @@ macro_rules! println {\n }\n \n /// Helper macro for unwrapping `Result` values while returning early with an\n-/// error if the value of the expression is `Err`.\n+/// error if the value of the expression is `Err`. Can only be used in\n+/// functions that return `Result` because of the early return of `Err` that\n+/// it provides.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::io;\n+/// use std::fs::File;\n+/// use std::io::prelude::*;\n+///\n+/// fn write_to_file_using_try() -> Result<(), io::Error> {\n+///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+///     try!(file.write_all(b\"This is a list of my best friends.\"));\n+///     println!(\"I wrote to the file\");\n+///     Ok(())\n+/// }\n+/// // This is equivalent to:\n+/// fn write_to_file_using_match() -> Result<(), io::Error> {\n+///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+///     match file.write_all(b\"This is a list of my best friends.\") {\n+///         Ok(_) => (),\n+///         Err(e) => return Err(e),\n+///     }\n+///     println!(\"I wrote to the file\");\n+///     Ok(())\n+/// }\n+/// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! try {"}]}