{"sha": "969fdf419ca90c38b628de2693d00b3589d7a907", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OWZkZjQxOWNhOTBjMzhiNjI4ZGUyNjkzZDAwYjM1ODlkN2E5MDc=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-22T05:38:40Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-23T16:00:19Z"}, "message": "(core::str) rename index -> index_chars", "tree": {"sha": "c2894e3f05d2c8ba8dede3f5015126f1ffb0686b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2894e3f05d2c8ba8dede3f5015126f1ffb0686b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/969fdf419ca90c38b628de2693d00b3589d7a907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/969fdf419ca90c38b628de2693d00b3589d7a907", "html_url": "https://github.com/rust-lang/rust/commit/969fdf419ca90c38b628de2693d00b3589d7a907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/969fdf419ca90c38b628de2693d00b3589d7a907/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ea96169ff8c4223cf094190fb7aebbd7382d3d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea96169ff8c4223cf094190fb7aebbd7382d3d9", "html_url": "https://github.com/rust-lang/rust/commit/8ea96169ff8c4223cf094190fb7aebbd7382d3d9"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "bce9bb5f84fab5c3a87a5ace767ec73310ef3de3", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/969fdf419ca90c38b628de2693d00b3589d7a907/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969fdf419ca90c38b628de2693d00b3589d7a907/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=969fdf419ca90c38b628de2693d00b3589d7a907", "patch": "@@ -686,7 +686,7 @@ fn cmd_install(c: cargo) unsafe {\n \n     if str::starts_with(target, \"uuid:\") {\n         let uuid = rest(target, 5u);\n-        alt str::index(uuid, '/') {\n+        alt str::index_chars(uuid, '/') {\n             option::some(idx) {\n                let source = str::slice(uuid, 0u, idx);\n                uuid = str::slice(uuid, idx + 1u, str::len_chars(uuid));\n@@ -698,7 +698,7 @@ fn cmd_install(c: cargo) unsafe {\n         }\n     } else {\n         let name = target;\n-        alt str::index(name, '/') {\n+        alt str::index_chars(name, '/') {\n             option::some(idx) {\n                let source = str::slice(name, 0u, idx);\n                name = str::slice(name, idx + 1u, str::len_chars(name));"}, {"sha": "ee450814ef961bea999be0f1b67c342445bf2c23", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969fdf419ca90c38b628de2693d00b3589d7a907/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969fdf419ca90c38b628de2693d00b3589d7a907/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=969fdf419ca90c38b628de2693d00b3589d7a907", "patch": "@@ -109,7 +109,7 @@ mod write {\n     // Decides what to call an intermediate file, given the name of the output\n     // and the extension to use.\n     fn mk_intermediate_name(output_path: str, extension: str) -> str unsafe {\n-        let stem = alt str::index(output_path, '.') {\n+        let stem = alt str::index_chars(output_path, '.') {\n                        option::some(dot_pos) {\n                            str::slice(output_path, 0u, dot_pos)\n                        }"}, {"sha": "3c8cd7a3b853d54a6ece5969b671cc925ae7b579", "filename": "src/libcore/str.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/969fdf419ca90c38b628de2693d00b3589d7a907/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969fdf419ca90c38b628de2693d00b3589d7a907/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=969fdf419ca90c38b628de2693d00b3589d7a907", "patch": "@@ -69,7 +69,7 @@ export\n    lines_iter,\n \n    // Searching\n-   index,\n+   index_chars,\n    byte_index,\n    byte_index_from,\n    rindex,\n@@ -838,7 +838,7 @@ Section: Searching\n //\n // Returns the index of the first matching char\n // (as option some/none)\n-fn index(ss: str, cc: char) -> option<uint> {\n+fn index_chars(ss: str, cc: char) -> option<uint> {\n     let bii = 0u;\n     let cii = 0u;\n     let len = len_bytes(ss);\n@@ -1157,8 +1157,6 @@ Safety note:\n \n This function fails if `byte_offset` or `char_len` do not represent\n valid positions in `s`\n-\n-FIXME: rename to 'substr_len_bytes'\n */\n fn substr_len_bytes(s: str, byte_offset: uint, char_len: uint) -> uint {\n     let i = byte_offset;\n@@ -1540,11 +1538,11 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_index() {\n-        assert ( index(\"hello\", 'h') == some(0u));\n-        assert ( index(\"hello\", 'e') == some(1u));\n-        assert ( index(\"hello\", 'o') == some(4u));\n-        assert ( index(\"hello\", 'z') == none);\n+    fn test_index_chars() {\n+        assert ( index_chars(\"hello\", 'h') == some(0u));\n+        assert ( index_chars(\"hello\", 'e') == some(1u));\n+        assert ( index_chars(\"hello\", 'o') == some(4u));\n+        assert ( index_chars(\"hello\", 'z') == none);\n     }\n \n     #[test]"}]}