{"sha": "2f99fb8efad8803801628a507fe3ac06a70c7871", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmOTlmYjhlZmFkODgwMzgwMTYyOGE1MDdmZTNhYzA2YTcwYzc4NzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-19T23:10:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-20T22:21:29Z"}, "message": "core::rt: Remove local_sched module", "tree": {"sha": "4d758ebb7bc9915d7caf8f651df8350c6219686d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d758ebb7bc9915d7caf8f651df8350c6219686d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f99fb8efad8803801628a507fe3ac06a70c7871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f99fb8efad8803801628a507fe3ac06a70c7871", "html_url": "https://github.com/rust-lang/rust/commit/2f99fb8efad8803801628a507fe3ac06a70c7871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f99fb8efad8803801628a507fe3ac06a70c7871/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06f1a64bd6e417b73f1b812b860271e86bb42b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/06f1a64bd6e417b73f1b812b860271e86bb42b47", "html_url": "https://github.com/rust-lang/rust/commit/06f1a64bd6e417b73f1b812b860271e86bb42b47"}], "stats": {"total": 73, "additions": 20, "deletions": 53}, "files": [{"sha": "576a402b70919f88e52750473b854b6a8a04595a", "filename": "src/libcore/rt/comm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fcomm.rs?ref=2f99fb8efad8803801628a507fe3ac06a70c7871", "patch": "@@ -22,7 +22,6 @@ use ops::Drop;\n use kinds::Owned;\n use rt::sched::{Scheduler, Coroutine};\n use rt::local::Local;\n-use rt::local_sched;\n use unstable::intrinsics::{atomic_xchg, atomic_load};\n use util::Void;\n use comm::{GenericChan, GenericSmartChan, GenericPort, Peekable};"}, {"sha": "d900341998117dff2d2186335c9f607815270252", "filename": "src/libcore/rt/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=2f99fb8efad8803801628a507fe3ac06a70c7871", "patch": "@@ -10,7 +10,7 @@\n \n use option::{Option, Some, None};\n use result::{Ok, Err};\n-use rt::sched::local_sched::unsafe_borrow_io;\n+use rt::sched::unsafe_borrow_io;\n use rt::io::net::ip::IpAddr;\n use rt::io::{Reader, Writer, Listener};\n use rt::io::{io_error, read_error, EndOfFile};"}, {"sha": "48e3351c44f28b00e16d9e57912e94d64690bf53", "filename": "src/libcore/rt/local_sched.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/06f1a64bd6e417b73f1b812b860271e86bb42b47/src%2Flibcore%2Frt%2Flocal_sched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f1a64bd6e417b73f1b812b860271e86bb42b47/src%2Flibcore%2Frt%2Flocal_sched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal_sched.rs?ref=06f1a64bd6e417b73f1b812b860271e86bb42b47", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Access to the thread-local Scheduler\n-\n-use prelude::*;\n-use ptr::mut_null;\n-use libc::c_void;\n-use cast;\n-use cell::Cell;\n-\n-use rt::sched::Scheduler;\n-use rt::rtio::{EventLoop, IoFactoryObject};\n-use unstable::finally::Finally;\n-use rt::local_ptr;\n-use tls = rt::thread_local_storage;\n-use rt::local::Local;\n-\n-#[cfg(test)] use rt::uv::uvio::UvEventLoop;\n-\n-pub unsafe fn unsafe_borrow_io() -> *mut IoFactoryObject {\n-    let sched = Local::unsafe_borrow::<Scheduler>();\n-    let io: *mut IoFactoryObject = (*sched).event_loop.io().unwrap();\n-    return io;\n-}"}, {"sha": "2fac1df01a495c056810e57e9a0d16debd13d607", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=2f99fb8efad8803801628a507fe3ac06a70c7871", "patch": "@@ -67,9 +67,6 @@ pub mod task;\n /// The coroutine task scheduler, built on the `io` event loop.\n mod sched;\n \n-/// Thread-local access to the current Scheduler.\n-pub mod local_sched;\n-\n /// Synchronous I/O.\n #[path = \"io/mod.rs\"]\n pub mod io;\n@@ -189,7 +186,7 @@ pub fn context() -> RuntimeContext {\n \n     use task::rt::rust_task;\n     use self::local::Local;\n-    use self::sched::{local_sched, Scheduler};\n+    use self::sched::Scheduler;\n \n     // XXX: Hitting TLS twice to check if the scheduler exists\n     // then to check for the task is not good for perf\n@@ -220,7 +217,7 @@ pub fn context() -> RuntimeContext {\n #[test]\n fn test_context() {\n     use unstable::run_in_bare_thread;\n-    use self::sched::{local_sched, Scheduler, Coroutine};\n+    use self::sched::{Scheduler, Coroutine};\n     use rt::uv::uvio::UvEventLoop;\n     use cell::Cell;\n     use rt::local::Local;"}, {"sha": "20c24adaa0ad0bfcb2acfe89a96e1dab1b8a1d2a", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=2f99fb8efad8803801628a507fe3ac06a70c7871", "patch": "@@ -20,9 +20,7 @@ use super::context::Context;\n use super::task::Task;\n use rt::local_ptr;\n use rt::local::Local;\n-\n-// A more convenient name for external callers, e.g. `local_sched::take()`\n-pub mod local_sched;\n+use rt::rtio::IoFactoryObject;\n \n /// The Scheduler is responsible for coordinating execution of Coroutines\n /// on a single thread. When the scheduler is running it is owned by\n@@ -403,6 +401,12 @@ pub impl Coroutine {\n     }\n }\n \n+pub unsafe fn unsafe_borrow_io() -> *mut IoFactoryObject {\n+    let sched = Local::unsafe_borrow::<Scheduler>();\n+    let io: *mut IoFactoryObject = (*sched).event_loop.io().unwrap();\n+    return io;\n+}\n+\n #[cfg(test)]\n mod test {\n     use int;"}, {"sha": "3f98ad74ef26026912cc7b1d4642ff51a62becb3", "filename": "src/libcore/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftask.rs?ref=2f99fb8efad8803801628a507fe3ac06a70c7871", "patch": "@@ -16,7 +16,7 @@\n use prelude::*;\n use libc::{c_void, uintptr_t};\n use cast::transmute;\n-use super::sched::{Scheduler, local_sched};\n+use super::sched::Scheduler;\n use rt::local::Local;\n use super::local_heap::LocalHeap;\n use rt::logging::StdErrLogger;"}, {"sha": "b2f475a69660573b20924fa5bf44e54868d45064", "filename": "src/libcore/rt/tube.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Ftube.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Ftube.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftube.rs?ref=2f99fb8efad8803801628a507fe3ac06a70c7871", "patch": "@@ -18,7 +18,6 @@ use clone::Clone;\n use super::rc::RC;\n use rt::sched::{Scheduler, Coroutine};\n use rt::{context, TaskContext, SchedulerContext};\n-use rt::local_sched;\n use rt::local::Local;\n use vec::OwnedVector;\n use container::Container;\n@@ -95,7 +94,6 @@ impl<T> Clone for Tube<T> {\n mod test {\n     use int;\n     use cell::Cell;\n-    use rt::local_sched;\n     use rt::test::*;\n     use rt::rtio::EventLoop;\n     use rt::sched::Scheduler;"}, {"sha": "b89dfcab3d330a81e804313ba82f8622f9dca8ff", "filename": "src/libcore/rt/uv/uvio.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f99fb8efad8803801628a507fe3ac06a70c7871/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs?ref=2f99fb8efad8803801628a507fe3ac06a70c7871", "patch": "@@ -19,7 +19,8 @@ use rt::io::net::ip::IpAddr;\n use rt::uv::*;\n use rt::uv::idle::IdleWatcher;\n use rt::rtio::*;\n-use rt::sched::{Scheduler, local_sched};\n+use rt::sched::unsafe_borrow_io;\n+use rt::sched::Scheduler;\n use rt::io::{standard_error, OtherIoError};\n use rt::tube::Tube;\n use rt::local::Local;\n@@ -358,7 +359,7 @@ impl RtioTcpStream for UvTcpStream {\n fn test_simple_io_no_connect() {\n     do run_in_newsched_task {\n         unsafe {\n-            let io = local_sched::unsafe_borrow_io();\n+            let io = unsafe_borrow_io();\n             let addr = next_test_ip4();\n             let maybe_chan = (*io).tcp_connect(addr);\n             assert!(maybe_chan.is_err());\n@@ -374,7 +375,7 @@ fn test_simple_tcp_server_and_client() {\n         // Start the server first so it's listening when we connect\n         do spawntask_immediately {\n             unsafe {\n-                let io = local_sched::unsafe_borrow_io();\n+                let io = unsafe_borrow_io();\n                 let mut listener = (*io).tcp_bind(addr).unwrap();\n                 let mut stream = listener.accept().unwrap();\n                 let mut buf = [0, .. 2048];\n@@ -389,7 +390,7 @@ fn test_simple_tcp_server_and_client() {\n \n         do spawntask_immediately {\n             unsafe {\n-                let io = local_sched::unsafe_borrow_io();\n+                let io = unsafe_borrow_io();\n                 let mut stream = (*io).tcp_connect(addr).unwrap();\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n             }\n@@ -403,7 +404,7 @@ fn test_read_and_block() {\n         let addr = next_test_ip4();\n \n         do spawntask_immediately {\n-            let io = unsafe { local_sched::unsafe_borrow_io() };\n+            let io = unsafe { unsafe_borrow_io() };\n             let mut listener = unsafe { (*io).tcp_bind(addr).unwrap() };\n             let mut stream = listener.accept().unwrap();\n             let mut buf = [0, .. 2048];\n@@ -439,7 +440,7 @@ fn test_read_and_block() {\n \n         do spawntask_immediately {\n             unsafe {\n-                let io = local_sched::unsafe_borrow_io();\n+                let io = unsafe_borrow_io();\n                 let mut stream = (*io).tcp_connect(addr).unwrap();\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n@@ -459,7 +460,7 @@ fn test_read_read_read() {\n \n         do spawntask_immediately {\n             unsafe {\n-                let io = local_sched::unsafe_borrow_io();\n+                let io = unsafe_borrow_io();\n                 let mut listener = (*io).tcp_bind(addr).unwrap();\n                 let mut stream = listener.accept().unwrap();\n                 let buf = [1, .. 2048];\n@@ -473,7 +474,7 @@ fn test_read_read_read() {\n \n         do spawntask_immediately {\n             unsafe {\n-                let io = local_sched::unsafe_borrow_io();\n+                let io = unsafe_borrow_io();\n                 let mut stream = (*io).tcp_connect(addr).unwrap();\n                 let mut buf = [0, .. 2048];\n                 let mut total_bytes_read = 0;"}]}