{"sha": "03f350f5a5464e19484ab17f6a745c48d98d3415", "node_id": "C_kwDOAAsO6NoAKDAzZjM1MGY1YTU0NjRlMTk0ODRhYjE3ZjZhNzQ1YzQ4ZDk4ZDM0MTU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-18T23:59:02Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-25T01:07:35Z"}, "message": "Clarify some cleanup stuff.\n\n- Rearrange the match in `llbb_with_landing_pad` so the `(Some,Some)`\n  cases are together.\n- Add assertions to indicate two MSVC-only paths.", "tree": {"sha": "c5021464cf26d4d4b2547fec612ab28654869faa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5021464cf26d4d4b2547fec612ab28654869faa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03f350f5a5464e19484ab17f6a745c48d98d3415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03f350f5a5464e19484ab17f6a745c48d98d3415", "html_url": "https://github.com/rust-lang/rust/commit/03f350f5a5464e19484ab17f6a745c48d98d3415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03f350f5a5464e19484ab17f6a745c48d98d3415/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5bd5da59479e1581b9cb76d3d05a9b85c9b02fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5bd5da59479e1581b9cb76d3d05a9b85c9b02fc", "html_url": "https://github.com/rust-lang/rust/commit/a5bd5da59479e1581b9cb76d3d05a9b85c9b02fc"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "29b7c9b0a8832af029fd84c07812acc057143d9f", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03f350f5a5464e19484ab17f6a745c48d98d3415/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f350f5a5464e19484ab17f6a745c48d98d3415/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=03f350f5a5464e19484ab17f6a745c48d98d3415", "patch": "@@ -75,13 +75,16 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         let target_funclet = fx.cleanup_kinds[target].funclet_bb(target);\n         match (self.funclet_bb, target_funclet) {\n             (None, None) => (lltarget, false),\n-            (Some(f), Some(t_f)) if f == t_f || !base::wants_msvc_seh(fx.cx.tcx().sess) => {\n-                (lltarget, false)\n-            }\n             // jump *into* cleanup - need a landing pad if GNU, cleanup pad if MSVC\n             (None, Some(_)) => (fx.landing_pad_for(target), false),\n             (Some(_), None) => span_bug!(span, \"{:?} - jump out of cleanup?\", self.terminator),\n-            (Some(_), Some(_)) => (fx.landing_pad_for(target), true),\n+            (Some(f), Some(t_f)) => {\n+                if f == t_f || !base::wants_msvc_seh(fx.cx.tcx().sess) {\n+                    (lltarget, false)\n+                } else {\n+                    (fx.landing_pad_for(target), true)\n+                }\n+            }\n         }\n     }\n \n@@ -95,7 +98,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         let (lltarget, is_cleanupret) = self.llbb_with_landing_pad(fx, target);\n         if is_cleanupret {\n             // MSVC cross-funclet jump - need a trampoline\n-\n+            debug_assert!(base::wants_msvc_seh(fx.cx.tcx().sess));\n             debug!(\"llbb_with_cleanup: creating cleanup trampoline for {:?}\", target);\n             let name = &format!(\"{:?}_cleanup_trampoline_{:?}\", self.bb, target);\n             let trampoline_llbb = Bx::append_block(fx.cx, fx.llfn, name);\n@@ -115,8 +118,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n     ) {\n         let (lltarget, is_cleanupret) = self.llbb_with_landing_pad(fx, target);\n         if is_cleanupret {\n-            // micro-optimization: generate a `ret` rather than a jump\n+            // MSVC micro-optimization: generate a `ret` rather than a jump\n             // to a trampoline.\n+            debug_assert!(base::wants_msvc_seh(fx.cx.tcx().sess));\n             bx.cleanup_ret(self.funclet(fx).unwrap(), Some(lltarget));\n         } else {\n             bx.br(lltarget);"}]}