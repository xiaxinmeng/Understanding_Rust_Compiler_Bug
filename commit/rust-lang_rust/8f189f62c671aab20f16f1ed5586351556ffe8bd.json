{"sha": "8f189f62c671aab20f16f1ed5586351556ffe8bd", "node_id": "C_kwDOAAsO6NoAKDhmMTg5ZjYyYzY3MWFhYjIwZjE2ZjFlZDU1ODYzNTE1NTZmZmU4YmQ", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2023-03-10T11:35:04Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2023-03-10T11:35:04Z"}, "message": "Remove unnecessary argument", "tree": {"sha": "ccd1d412f8066aead68319b0c71accc3dd9945f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccd1d412f8066aead68319b0c71accc3dd9945f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f189f62c671aab20f16f1ed5586351556ffe8bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f189f62c671aab20f16f1ed5586351556ffe8bd", "html_url": "https://github.com/rust-lang/rust/commit/8f189f62c671aab20f16f1ed5586351556ffe8bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f189f62c671aab20f16f1ed5586351556ffe8bd/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38aa5f4f0155ca484e954c179e94af831e7878b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38aa5f4f0155ca484e954c179e94af831e7878b", "html_url": "https://github.com/rust-lang/rust/commit/c38aa5f4f0155ca484e954c179e94af831e7878b"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "c728719997c8ecd0537892dd4627aeede732bb1f", "filename": "crates/hir-ty/src/diagnostics/expr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f189f62c671aab20f16f1ed5586351556ffe8bd/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f189f62c671aab20f16f1ed5586351556ffe8bd/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=8f189f62c671aab20f16f1ed5586351556ffe8bd", "patch": "@@ -84,7 +84,7 @@ impl ExprValidator {\n \n             match expr {\n                 Expr::Match { expr, arms } => {\n-                    self.validate_match(id, *expr, arms, db, self.infer.clone());\n+                    self.validate_match(id, *expr, arms, db);\n                 }\n                 Expr::Call { .. } | Expr::MethodCall { .. } => {\n                     self.validate_call(db, id, expr, &mut filter_map_next_checker);\n@@ -151,11 +151,10 @@ impl ExprValidator {\n         match_expr: ExprId,\n         arms: &[MatchArm],\n         db: &dyn HirDatabase,\n-        infer: Arc<InferenceResult>,\n     ) {\n         let body = db.body(self.owner);\n \n-        let match_expr_ty = &infer[match_expr];\n+        let match_expr_ty = &self.infer[match_expr];\n         if match_expr_ty.is_unknown() {\n             return;\n         }\n@@ -166,7 +165,7 @@ impl ExprValidator {\n         let mut m_arms = Vec::with_capacity(arms.len());\n         let mut has_lowering_errors = false;\n         for arm in arms {\n-            if let Some(pat_ty) = infer.type_of_pat.get(arm.pat) {\n+            if let Some(pat_ty) = self.infer.type_of_pat.get(arm.pat) {\n                 // We only include patterns whose type matches the type\n                 // of the match expression. If we had an InvalidMatchArmPattern\n                 // diagnostic or similar we could raise that in an else\n@@ -182,7 +181,7 @@ impl ExprValidator {\n                         .as_reference()\n                         .map(|(match_expr_ty, ..)| match_expr_ty == pat_ty)\n                         .unwrap_or(false))\n-                    && types_of_subpatterns_do_match(arm.pat, &body, &infer)\n+                    && types_of_subpatterns_do_match(arm.pat, &body, &self.infer)\n                 {\n                     // If we had a NotUsefulMatchArm diagnostic, we could\n                     // check the usefulness of each pattern as we added it"}]}