{"sha": "c9273828b3c44fba62d1b989480c287d923839d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MjczODI4YjNjNDRmYmE2MmQxYjk4OTQ4MGMyODdkOTIzODM5ZDI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-21T19:31:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-21T19:31:19Z"}, "message": "Merge #2342\n\n2342: Use proper MacroFileKind in `SourceAnalyzer` r=matklad a=edwin0cheng\n\n* Add `MacroFileKind::Statements`\r\n* Add `to_macro_file_kind` in `source_binding.rs` to set a proper `MacroFileKind` when expanding a macro. \r\n* Add a test for trying expanding `match_ast` which is not correct before this PR.\r\n* Fix some spacing issues in `insert_whitespaces`\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "c222eabbd7fafcf9d491ba77d34238fe587449ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c222eabbd7fafcf9d491ba77d34238fe587449ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9273828b3c44fba62d1b989480c287d923839d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1uYHCRBK7hj4Ov3rIwAAdHIIAIRRtAHBmXzCyPMWR8GdHpDC\n3u3FofJhhzz4Hv/iK+nXXqqxlN5x/HmR9dI1WAA6ScZqCAwfXVut4CJNsr5PNVYC\nOJWDAZb7uNafzH5MeNcyokWeRHUH/xyPBp/pRd2Em+UHfwzc3E4DD/YciKYitcgG\nxDdymeDMbcwJyVHlhyWwzNDf25tzJhkdBvP7tclAwWvzelI0U9LNTP17qIyPD5Uy\n9HG0gEubyw6DvHEYrkIHjmsm+fy6yzT4xSTk4Jo64xylpmU+JVs/mB7QEQXiF/HI\nf8fwM59zTftTRXJWjPqAYYBw5xaXtZYudvGI4A5Bw2GvpnSbaVaJV68WZPEM2Qc=\n=PWsG\n-----END PGP SIGNATURE-----\n", "payload": "tree c222eabbd7fafcf9d491ba77d34238fe587449ce\nparent 3f1a0c3c5f4e52505ca83cb217201b116453c896\nparent 144dc6652c1bdb0a8a522d86d5bb4be612968675\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574364679 +0000\ncommitter GitHub <noreply@github.com> 1574364679 +0000\n\nMerge #2342\n\n2342: Use proper MacroFileKind in `SourceAnalyzer` r=matklad a=edwin0cheng\n\n* Add `MacroFileKind::Statements`\r\n* Add `to_macro_file_kind` in `source_binding.rs` to set a proper `MacroFileKind` when expanding a macro. \r\n* Add a test for trying expanding `match_ast` which is not correct before this PR.\r\n* Fix some spacing issues in `insert_whitespaces`\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9273828b3c44fba62d1b989480c287d923839d2", "html_url": "https://github.com/rust-lang/rust/commit/c9273828b3c44fba62d1b989480c287d923839d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9273828b3c44fba62d1b989480c287d923839d2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f1a0c3c5f4e52505ca83cb217201b116453c896", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1a0c3c5f4e52505ca83cb217201b116453c896", "html_url": "https://github.com/rust-lang/rust/commit/3f1a0c3c5f4e52505ca83cb217201b116453c896"}, {"sha": "144dc6652c1bdb0a8a522d86d5bb4be612968675", "url": "https://api.github.com/repos/rust-lang/rust/commits/144dc6652c1bdb0a8a522d86d5bb4be612968675", "html_url": "https://github.com/rust-lang/rust/commit/144dc6652c1bdb0a8a522d86d5bb4be612968675"}], "stats": {"total": 106, "additions": 93, "deletions": 13}, "files": [{"sha": "797f90d501b5c3f2c4786b695962a11eae0952f7", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c9273828b3c44fba62d1b989480c287d923839d2/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9273828b3c44fba62d1b989480c287d923839d2/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=c9273828b3c44fba62d1b989480c287d923839d2", "patch": "@@ -131,6 +131,7 @@ pub struct ReferenceDescriptor {\n }\n \n pub struct Expansion {\n+    macro_file_kind: MacroFileKind,\n     macro_call_id: MacroCallId,\n }\n \n@@ -145,7 +146,7 @@ impl Expansion {\n     }\n \n     pub fn file_id(&self) -> HirFileId {\n-        self.macro_call_id.as_file(MacroFileKind::Items)\n+        self.macro_call_id.as_file(self.macro_file_kind)\n     }\n }\n \n@@ -439,7 +440,10 @@ impl SourceAnalyzer {\n             db.ast_id_map(macro_call.file_id).ast_id(macro_call.value),\n         );\n         let macro_call_loc = MacroCallLoc { def, ast_id };\n-        Some(Expansion { macro_call_id: db.intern_macro(macro_call_loc) })\n+        Some(Expansion {\n+            macro_call_id: db.intern_macro(macro_call_loc),\n+            macro_file_kind: to_macro_file_kind(macro_call.value),\n+        })\n     }\n \n     #[cfg(test)]\n@@ -538,3 +542,35 @@ fn adjust(\n         })\n         .map(|(_ptr, scope)| *scope)\n }\n+\n+/// Given a `ast::MacroCall`, return what `MacroKindFile` it belongs to.\n+/// FIXME: Not completed  \n+fn to_macro_file_kind(macro_call: &ast::MacroCall) -> MacroFileKind {\n+    let syn = macro_call.syntax();\n+    let parent = match syn.parent() {\n+        Some(it) => it,\n+        None => {\n+            // FIXME:\n+            // If it is root, which means the parent HirFile\n+            // MacroKindFile must be non-items\n+            // return expr now.\n+            return MacroFileKind::Expr;\n+        }\n+    };\n+\n+    match parent.kind() {\n+        MACRO_ITEMS | SOURCE_FILE => MacroFileKind::Items,\n+        LET_STMT => {\n+            // FIXME: Handle Pattern\n+            MacroFileKind::Expr\n+        }\n+        EXPR_STMT => MacroFileKind::Statements,\n+        BLOCK => MacroFileKind::Statements,\n+        ARG_LIST => MacroFileKind::Expr,\n+        TRY_EXPR => MacroFileKind::Expr,\n+        _ => {\n+            // Unknown , Just guess it is `Items`\n+            MacroFileKind::Items\n+        }\n+    }\n+}"}, {"sha": "e1d93a8ef535bfca8cbf8bf63a9e60ae9b763288", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9273828b3c44fba62d1b989480c287d923839d2/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9273828b3c44fba62d1b989480c287d923839d2/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=c9273828b3c44fba62d1b989480c287d923839d2", "patch": "@@ -151,6 +151,7 @@ pub(crate) fn parse_macro(\n     let fragment_kind = match macro_file.macro_file_kind {\n         MacroFileKind::Items => FragmentKind::Items,\n         MacroFileKind::Expr => FragmentKind::Expr,\n+        MacroFileKind::Statements => FragmentKind::Statements,\n     };\n     let (parse, rev_token_map) = mbe::token_tree_to_syntax_node(&tt, fragment_kind).ok()?;\n     Some((parse, Arc::new(rev_token_map)))"}, {"sha": "126d12fbbed09b90fd46677c435594c045a53689", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9273828b3c44fba62d1b989480c287d923839d2/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9273828b3c44fba62d1b989480c287d923839d2/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=c9273828b3c44fba62d1b989480c287d923839d2", "patch": "@@ -109,6 +109,7 @@ pub struct MacroFile {\n pub enum MacroFileKind {\n     Items,\n     Expr,\n+    Statements,\n }\n \n /// `MacroCallId` identifies a particular macro invocation, like"}, {"sha": "7dbf33a16d49dd1d38b65e93c14e559e30a6351e", "filename": "crates/ra_ide_api/src/expand_macro.rs", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c9273828b3c44fba62d1b989480c287d923839d2/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9273828b3c44fba62d1b989480c287d923839d2/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs?ref=c9273828b3c44fba62d1b989480c287d923839d2", "patch": "@@ -84,24 +84,19 @@ fn insert_whitespaces(syn: SyntaxNode) -> String {\n         };\n \n         res += &match token.kind() {\n-            k @ _\n-                if (k.is_keyword() || k.is_literal() || k == IDENT)\n-                    && is_next(|it| !it.is_punct(), true) =>\n-            {\n+            k @ _ if is_text(k) && is_next(|it| !it.is_punct(), true) => {\n                 token.text().to_string() + \" \"\n             }\n             L_CURLY if is_next(|it| it != R_CURLY, true) => {\n                 indent += 1;\n-                format!(\" {{\\n{}\", \"  \".repeat(indent))\n+                let leading_space = if is_last(|it| is_text(it), false) { \" \" } else { \"\" };\n+                format!(\"{}{{\\n{}\", leading_space, \"  \".repeat(indent))\n             }\n             R_CURLY if is_last(|it| it != L_CURLY, true) => {\n                 indent = indent.checked_sub(1).unwrap_or(0);\n-                format!(\"\\n}}{}\", \"  \".repeat(indent))\n-            }\n-            R_CURLY => {\n-                indent = indent.checked_sub(1).unwrap_or(0);\n-                format!(\"}}\\n{}\", \"  \".repeat(indent))\n+                format!(\"\\n{}}}\", \"  \".repeat(indent))\n             }\n+            R_CURLY => format!(\"}}\\n{}\", \"  \".repeat(indent)),\n             T![;] => format!(\";\\n{}\", \"  \".repeat(indent)),\n             T![->] => \" -> \".to_string(),\n             T![=] => \" = \".to_string(),\n@@ -112,7 +107,11 @@ fn insert_whitespaces(syn: SyntaxNode) -> String {\n         last = Some(token.kind());\n     }\n \n-    res\n+    return res;\n+\n+    fn is_text(k: SyntaxKind) -> bool {\n+        k.is_keyword() || k.is_literal() || k == IDENT\n+    }\n }\n \n #[cfg(test)]\n@@ -173,6 +172,49 @@ fn some_thing() -> u32 {\n   let a = 0;\n   a+10\n }\n+\"###);\n+    }\n+\n+    #[test]\n+    fn macro_expand_match_ast() {\n+        let res = check_expand_macro(\n+            r#\"\n+        //- /lib.rs\n+        macro_rules! match_ast {\n+            (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };\n+        \n+            (match ($node:expr) {\n+                $( ast::$ast:ident($it:ident) => $res:block, )*\n+                _ => $catch_all:expr $(,)?\n+            }) => {{\n+                $( if let Some($it) = ast::$ast::cast($node.clone()) $res else )*\n+                { $catch_all }\n+            }};\n+        }        \n+\n+        fn main() {\n+            mat<|>ch_ast! {\n+                match container {\n+                    ast::TraitDef(it) => {},\n+                    ast::ImplBlock(it) => {},\n+                    _ => { continue },\n+                }\n+            }\n+        }\n+        \"#,\n+        );\n+\n+        assert_eq!(res.name, \"match_ast\");\n+        assert_snapshot!(res.expansion, @r###\"\n+{\n+  if let Some(it) = ast::TraitDef::cast(container.clone()){}\n+  else if let Some(it) = ast::ImplBlock::cast(container.clone()){}\n+  else {\n+    {\n+      continue\n+    }\n+  }\n+}\n \"###);\n     }\n }"}]}