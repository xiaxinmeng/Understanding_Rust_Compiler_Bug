{"sha": "3d39e77003c5fe5ed9f8f3ac00a170f3804f8337", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMzllNzcwMDNjNWZlNWVkOWY4ZjNhYzAwYTE3MGYzODA0ZjgzMzc=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-04-18T16:35:45Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-04-18T16:35:45Z"}, "message": "hir_def: various cleanups", "tree": {"sha": "97429772dd7df7be001d45590f554318e2c176bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97429772dd7df7be001d45590f554318e2c176bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d39e77003c5fe5ed9f8f3ac00a170f3804f8337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d39e77003c5fe5ed9f8f3ac00a170f3804f8337", "html_url": "https://github.com/rust-lang/rust/commit/3d39e77003c5fe5ed9f8f3ac00a170f3804f8337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d39e77003c5fe5ed9f8f3ac00a170f3804f8337/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ed42a3a527b2c39826cfeb3626521c11abb25f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ed42a3a527b2c39826cfeb3626521c11abb25f0", "html_url": "https://github.com/rust-lang/rust/commit/7ed42a3a527b2c39826cfeb3626521c11abb25f0"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "135a6698e15273411ad785be078c6bc50c2eb67f", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d39e77003c5fe5ed9f8f3ac00a170f3804f8337/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d39e77003c5fe5ed9f8f3ac00a170f3804f8337/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=3d39e77003c5fe5ed9f8f3ac00a170f3804f8337", "patch": "@@ -123,11 +123,10 @@ impl TypeAliasData {\n         let loc = typ.lookup(db);\n         let item_tree = loc.id.item_tree(db);\n         let typ = &item_tree[loc.id.value];\n-        let type_ref = typ.type_ref.clone();\n \n         Arc::new(TypeAliasData {\n             name: typ.name.clone(),\n-            type_ref: type_ref,\n+            type_ref: typ.type_ref.clone(),\n             visibility: item_tree[typ.visibility].clone(),\n             is_extern: typ.is_extern,\n             bounds: typ.bounds.to_vec(),\n@@ -203,13 +202,12 @@ impl ImplData {\n         let item_tree = impl_loc.id.item_tree(db);\n         let impl_def = &item_tree[impl_loc.id.value];\n         let target_trait = impl_def.target_trait.clone();\n+        let self_ty = impl_def.self_ty.clone();\n         let is_negative = impl_def.is_negative;\n         let module_id = impl_loc.container;\n         let container = AssocContainerId::ImplId(id);\n-        let file_id = impl_loc.id.file_id();\n-        let self_ty = impl_def.self_ty.clone();\n+        let mut expander = Expander::new(db, impl_loc.id.file_id(), module_id);\n \n-        let mut expander = Expander::new(db, file_id, module_id);\n         let items = collect_items(\n             db,\n             module_id,"}, {"sha": "16a94a058844706cb80f76f2ed2e857674fa91ff", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d39e77003c5fe5ed9f8f3ac00a170f3804f8337/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d39e77003c5fe5ed9f8f3ac00a170f3804f8337/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=3d39e77003c5fe5ed9f8f3ac00a170f3804f8337", "patch": "@@ -104,10 +104,10 @@ impl ItemTree {\n                     // items and expanded during block DefMap computation\n                     return Default::default();\n                 },\n-                ast::Type(_ty) => {\n-                    // FIXME: This occurs because macros in type position are treated as inner\n-                    // items and expanded during block DefMap computation\n-                    return Default::default();\n+                ast::Type(ty) => {\n+                    // Types can contain inner items. We return an empty item tree in this case, but\n+                    // still need to collect inner items.\n+                    ctx.lower_inner_items(ty.syntax())\n                 },\n                 ast::Expr(e) => {\n                     // Macros can expand to expressions. We return an empty item tree in this case, but"}, {"sha": "e18712d2460ff3ba0746282315b6abe64690f336", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d39e77003c5fe5ed9f8f3ac00a170f3804f8337/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d39e77003c5fe5ed9f8f3ac00a170f3804f8337/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=3d39e77003c5fe5ed9f8f3ac00a170f3804f8337", "patch": "@@ -1,7 +1,7 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n \n-use hir_expand::{ast_id_map::FileAstId, name::Name, ExpandResult, InFile};\n+use hir_expand::{name::Name, AstId, ExpandResult, InFile};\n use syntax::ast;\n \n use crate::{\n@@ -91,7 +91,7 @@ pub enum TypeRef {\n     // For\n     ImplTrait(Vec<TypeBound>),\n     DynTrait(Vec<TypeBound>),\n-    Macro(InFile<FileAstId<ast::MacroCall>>),\n+    Macro(AstId<ast::MacroCall>),\n     Error,\n }\n "}]}