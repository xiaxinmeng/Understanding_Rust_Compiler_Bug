{"sha": "da588e6df7afb80e210e62dea7e43c5687f088a5", "node_id": "C_kwDOAAsO6NoAKGRhNTg4ZTZkZjdhZmI4MGUyMTBlNjJkZWE3ZTQzYzU2ODdmMDg4YTU", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-09-23T16:09:32Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-11-05T22:56:37Z"}, "message": "Attempt to fix arguments of associated functions", "tree": {"sha": "7225326e0b049b2bc13e979c367b16bd65620998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7225326e0b049b2bc13e979c367b16bd65620998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da588e6df7afb80e210e62dea7e43c5687f088a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da588e6df7afb80e210e62dea7e43c5687f088a5", "html_url": "https://github.com/rust-lang/rust/commit/da588e6df7afb80e210e62dea7e43c5687f088a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da588e6df7afb80e210e62dea7e43c5687f088a5/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02025b54eade665d32ab9b507bb5a0376d639785", "url": "https://api.github.com/repos/rust-lang/rust/commits/02025b54eade665d32ab9b507bb5a0376d639785", "html_url": "https://github.com/rust-lang/rust/commit/02025b54eade665d32ab9b507bb5a0376d639785"}], "stats": {"total": 187, "additions": 126, "deletions": 61}, "files": [{"sha": "7ec3d45366061afb0429b865a0ec9cd516b9d4f7", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/da588e6df7afb80e210e62dea7e43c5687f088a5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da588e6df7afb80e210e62dea7e43c5687f088a5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=da588e6df7afb80e210e62dea7e43c5687f088a5", "patch": "@@ -13,7 +13,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ExprKind, Node, QPath};\n+use rustc_hir::{Expr, ExprKind, Node, QPath};\n use rustc_infer::infer::{\n     type_variable::{TypeVariableOrigin, TypeVariableOriginKind},\n     RegionVariableOrigin,\n@@ -397,6 +397,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     custom_span_label = true;\n                 }\n                 if static_candidates.len() == 1 {\n+                    let mut has_unsuggestable_args = false;\n                     let ty_str = if let Some(CandidateSource::Impl(impl_did)) =\n                     static_candidates.get(0)\n                     {\n@@ -412,6 +413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     .into_iter()\n                                     .map(|arg| {\n                                         if !arg.is_suggestable(tcx, true) {\n+                                            has_unsuggestable_args = true;\n                                             match arg.unpack() {\n                                             GenericArgKind::Lifetime(_) => self\n                                                 .next_region_var(RegionVariableOrigin::MiscVariable(\n@@ -450,12 +452,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     } else {\n                         self.ty_to_value_string(actual.peel_refs())\n                     };\n-                    if let SelfSource::MethodCall(expr) = source {\n+                    if let SelfSource::MethodCall(_) = source {\n+                        let first_arg = if let Some(CandidateSource::Impl(impl_did)) = static_sources.get(0) &&\n+                            let Some(assoc) = self.associated_value(*impl_did, item_name) {\n+                            let sig = self.tcx.fn_sig(assoc.def_id);\n+                            if let Some(first) = sig.inputs().skip_binder().get(0) {\n+                                if first.peel_refs() == rcvr_ty.peel_refs() {\n+                                    None\n+                                } else {\n+                                    Some(if first.is_region_ptr() {\n+                                        if first.is_mutable_ptr() { \"&mut \" } else { \"&\" }\n+                                    } else {\n+                                        \"\"\n+                                    })\n+                                }\n+                            } else {\n+                                None\n+                            }\n+                        } else {\n+                            None\n+                        };\n+                        let mut applicability = Applicability::MachineApplicable;\n+                        let args = if let Some((receiver, args)) = args {\n+                            // The first arg is the same kind as the receiver\n+                            let it = if first_arg.is_some() {\n+                                Box::new(std::iter::once(receiver).chain(args.iter()))\n+                                    as Box<dyn Iterator<Item = &Expr<'_>>>\n+                            } else {\n+                                // There is no `Self` kind to infer the arguments from\n+                                if has_unsuggestable_args {\n+                                    applicability = Applicability::HasPlaceholders;\n+                                }\n+                                Box::new(args.iter()) as _\n+                            };\n+                            format!(\n+                                \"({}{})\",\n+                                first_arg.unwrap_or(\"\"),\n+                                it.map(|arg| tcx\n+                                    .sess\n+                                    .source_map()\n+                                    .span_to_snippet(arg.span)\n+                                    .unwrap_or_else(|_| {\n+                                        applicability = Applicability::HasPlaceholders;\n+                                        \"_\".to_owned()\n+                                    }))\n+                                .collect::<Vec<_>>()\n+                                .join(\", \"),\n+                            )\n+                        } else {\n+                            applicability = Applicability::HasPlaceholders;\n+                            \"(...)\".to_owned()\n+                        };\n                         err.span_suggestion(\n-                            expr.span.to(span),\n+                            sugg_span,\n                             \"use associated function syntax instead\",\n-                            format!(\"{}::{}\", ty_str, item_name),\n-                            Applicability::MachineApplicable,\n+                            format!(\"{}::{}{}\", ty_str, item_name, args),\n+                            applicability,\n                         );\n                     } else {\n                         err.help(&format!(\"try with `{}::{}`\", ty_str, item_name,));"}, {"sha": "07c8101cbc68b776aa15b2d6f5b3912af677ea60", "filename": "src/test/ui/issues/issue-3707.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da588e6df7afb80e210e62dea7e43c5687f088a5/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da588e6df7afb80e210e62dea7e43c5687f088a5/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr?ref=da588e6df7afb80e210e62dea7e43c5687f088a5", "patch": "@@ -2,10 +2,10 @@ error[E0599]: no method named `boom` found for reference `&Obj` in the current s\n   --> $DIR/issue-3707.rs:10:14\n    |\n LL |         self.boom();\n-   |         -----^^^^\n+   |         -----^^^^--\n    |         |    |\n    |         |    this is an associated function, not a method\n-   |         help: use associated function syntax instead: `Obj::boom`\n+   |         help: use associated function syntax instead: `Obj::boom()`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `Obj`"}, {"sha": "7c9f0b6c212e102037faef5e9f3f1bff2444a778", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish-through-deref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da588e6df7afb80e210e62dea7e43c5687f088a5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da588e6df7afb80e210e62dea7e43c5687f088a5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr?ref=da588e6df7afb80e210e62dea7e43c5687f088a5", "patch": "@@ -2,10 +2,10 @@ error[E0599]: no method named `hello` found for struct `RefMut<'_, HasAssocMetho\n   --> $DIR/suggest-assoc-fn-call-with-turbofish-through-deref.rs:11:11\n    |\n LL |     state.hello();\n-   |     ------^^^^^\n+   |     ------^^^^^--\n    |     |     |\n    |     |     this is an associated function, not a method\n-   |     help: use associated function syntax instead: `HasAssocMethod::hello`\n+   |     help: use associated function syntax instead: `HasAssocMethod::hello()`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `HasAssocMethod`"}, {"sha": "0398c510feac3e56eac04fe52c17e82e6e4b69fd", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/da588e6df7afb80e210e62dea7e43c5687f088a5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/da588e6df7afb80e210e62dea7e43c5687f088a5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.fixed?ref=da588e6df7afb80e210e62dea7e43c5687f088a5", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+\n+struct GenericAssocMethod<T>(T);\n+\n+impl<T> GenericAssocMethod<T> {\n+    fn default_hello() {}\n+    fn self_ty_hello(_: Self) {}\n+    fn self_ty_ref_hello(_: &Self) {}\n+}\n+\n+fn main() {\n+    // Test for inferred types\n+    let x = GenericAssocMethod(33);\n+    // This particular case is unfixable without more information by the user,\n+    // but `cargo fix --broken-code` reports a bug if\n+    // x.default_hello();\n+    GenericAssocMethod::<_>::self_ty_ref_hello(&x);\n+    //~^ ERROR no method named `self_ty_ref_hello` found\n+    GenericAssocMethod::<_>::self_ty_hello(x);\n+    //~^ ERROR no method named `self_ty_hello` found\n+    // Test for known types\n+    let y = GenericAssocMethod(33i32);\n+    GenericAssocMethod::<i32>::default_hello();\n+    //~^ ERROR no method named `default_hello` found\n+    GenericAssocMethod::<i32>::self_ty_ref_hello(&y);\n+    //~^ ERROR no method named `self_ty_ref_hello` found\n+    GenericAssocMethod::<i32>::self_ty_hello(y);\n+    //~^ ERROR no method named `self_ty_hello` found\n+}"}, {"sha": "8bafc83bdd0b326f9f0d0cb4b142ff3e0c4a10ab", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da588e6df7afb80e210e62dea7e43c5687f088a5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da588e6df7afb80e210e62dea7e43c5687f088a5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs?ref=da588e6df7afb80e210e62dea7e43c5687f088a5", "patch": "@@ -1,16 +1,19 @@\n+// run-rustfix\n+\n struct GenericAssocMethod<T>(T);\n \n impl<T> GenericAssocMethod<T> {\n     fn default_hello() {}\n-    fn self_ty_hello(_: T) {}\n-    fn self_ty_ref_hello(_: &T) {}\n+    fn self_ty_hello(_: Self) {}\n+    fn self_ty_ref_hello(_: &Self) {}\n }\n \n fn main() {\n     // Test for inferred types\n     let x = GenericAssocMethod(33);\n-    x.default_hello();\n-    //~^ ERROR no method named `default_hello` found\n+    // This particular case is unfixable without more information by the user,\n+    // but `cargo fix --broken-code` reports a bug if\n+    // x.default_hello();\n     x.self_ty_ref_hello();\n     //~^ ERROR no method named `self_ty_ref_hello` found\n     x.self_ty_hello();"}, {"sha": "e2f2d46b9e8b81e6c6a545a2172d5407354b1fd2", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.stderr", "status": "modified", "additions": 29, "deletions": 48, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/da588e6df7afb80e210e62dea7e43c5687f088a5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da588e6df7afb80e210e62dea7e43c5687f088a5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr?ref=da588e6df7afb80e210e62dea7e43c5687f088a5", "patch": "@@ -1,117 +1,98 @@\n-error[E0599]: no method named `default_hello` found for struct `GenericAssocMethod<{integer}>` in the current scope\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:12:7\n-   |\n-LL | struct GenericAssocMethod<T>(T);\n-   | ---------------------------- method `default_hello` not found for this struct\n-...\n-LL |     x.default_hello();\n-   |     --^^^^^^^^^^^^^\n-   |     | |\n-   |     | this is an associated function, not a method\n-   |     help: use associated function syntax instead: `GenericAssocMethod::<_>::default_hello`\n-   |\n-   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:4:5\n-   |\n-LL |     fn default_hello() {}\n-   |     ^^^^^^^^^^^^^^^^^^\n-\n error[E0599]: no method named `self_ty_ref_hello` found for struct `GenericAssocMethod<{integer}>` in the current scope\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:14:7\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:17:7\n    |\n LL | struct GenericAssocMethod<T>(T);\n    | ---------------------------- method `self_ty_ref_hello` not found for this struct\n ...\n LL |     x.self_ty_ref_hello();\n-   |     --^^^^^^^^^^^^^^^^^\n+   |     --^^^^^^^^^^^^^^^^^--\n    |     | |\n    |     | this is an associated function, not a method\n-   |     help: use associated function syntax instead: `GenericAssocMethod::<_>::self_ty_ref_hello`\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<_>::self_ty_ref_hello(&x)`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:6:5\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:8:5\n    |\n-LL |     fn self_ty_ref_hello(_: &T) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn self_ty_ref_hello(_: &Self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0599]: no method named `self_ty_hello` found for struct `GenericAssocMethod<{integer}>` in the current scope\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:16:7\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:19:7\n    |\n LL | struct GenericAssocMethod<T>(T);\n    | ---------------------------- method `self_ty_hello` not found for this struct\n ...\n LL |     x.self_ty_hello();\n-   |     --^^^^^^^^^^^^^\n+   |     --^^^^^^^^^^^^^--\n    |     | |\n    |     | this is an associated function, not a method\n-   |     help: use associated function syntax instead: `GenericAssocMethod::<_>::self_ty_hello`\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<_>::self_ty_hello(x)`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:5:5\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:7:5\n    |\n-LL |     fn self_ty_hello(_: T) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn self_ty_hello(_: Self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0599]: no method named `default_hello` found for struct `GenericAssocMethod<i32>` in the current scope\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:20:7\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:23:7\n    |\n LL | struct GenericAssocMethod<T>(T);\n    | ---------------------------- method `default_hello` not found for this struct\n ...\n LL |     y.default_hello();\n-   |     --^^^^^^^^^^^^^\n+   |     --^^^^^^^^^^^^^--\n    |     | |\n    |     | this is an associated function, not a method\n-   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::default_hello`\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::default_hello()`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:4:5\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:6:5\n    |\n LL |     fn default_hello() {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n error[E0599]: no method named `self_ty_ref_hello` found for struct `GenericAssocMethod<i32>` in the current scope\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:22:7\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:25:7\n    |\n LL | struct GenericAssocMethod<T>(T);\n    | ---------------------------- method `self_ty_ref_hello` not found for this struct\n ...\n LL |     y.self_ty_ref_hello();\n-   |     --^^^^^^^^^^^^^^^^^\n+   |     --^^^^^^^^^^^^^^^^^--\n    |     | |\n    |     | this is an associated function, not a method\n-   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::self_ty_ref_hello`\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::self_ty_ref_hello(&y)`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:6:5\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:8:5\n    |\n-LL |     fn self_ty_ref_hello(_: &T) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn self_ty_ref_hello(_: &Self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0599]: no method named `self_ty_hello` found for struct `GenericAssocMethod<i32>` in the current scope\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:24:7\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:27:7\n    |\n LL | struct GenericAssocMethod<T>(T);\n    | ---------------------------- method `self_ty_hello` not found for this struct\n ...\n LL |     y.self_ty_hello();\n-   |     --^^^^^^^^^^^^^\n+   |     --^^^^^^^^^^^^^--\n    |     | |\n    |     | this is an associated function, not a method\n-   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::self_ty_hello`\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::self_ty_hello(y)`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:5:5\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:7:5\n    |\n-LL |     fn self_ty_hello(_: T) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn self_ty_hello(_: Self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}]}