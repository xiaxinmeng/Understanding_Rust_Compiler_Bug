{"sha": "25a498bfc76318a47c1ff6e48f5da2600cb1e35d", "node_id": "C_kwDOAAsO6NoAKDI1YTQ5OGJmYzc2MzE4YTQ3YzFmZjZlNDhmNWRhMjYwMGNiMWUzNWQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-20T14:46:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-20T14:46:28Z"}, "message": "Merge #10597\n\n10597: fix: Fix standard library doclinks not going to the correct page r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10082\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "a1615ae79e84b8d9d79b7933a1c7a5e9032d5f5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1615ae79e84b8d9d79b7933a1c7a5e9032d5f5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25a498bfc76318a47c1ff6e48f5da2600cb1e35d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcCvECRBK7hj4Ov3rIwAA1DAIAHEfj+d6S+h1Re/2miL/dB5b\n/B+djrSSvZV3MBZChU7+WPopJcSM+LA2R8OIkKlpkLSNWEfebUOo8d3lEmH1hf1g\nclDGPuUARK8ZREqO68F3D+V0mrf+MzC+il+Cm7Nnd4niLHjO+yLD6qKk1+XJ1QVf\n01jac3ad4XTST/oCN+ku9U1Mrm1/hELNq6ngvZFHtn47DmLrdtd/HSBhiflxZs3m\nLsGJbLslHWys82BgZkP0Kbt/vzN25X+MxsnqgGzgoNVkqvd13SGzh1leTZ9kdEXx\n3rUz8QMlui2oa1xB7pfJfm1+MfhNCqDVZYy9pPL+CzjaY28Ak71tv6jEtqX93ww=\n=DRYi\n-----END PGP SIGNATURE-----\n", "payload": "tree a1615ae79e84b8d9d79b7933a1c7a5e9032d5f5c\nparent c73aa7a21457d80fdfb0b2f24848f04c993209d2\nparent 8ed86fc25d389632792f064f08183b3229328208\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634741188 +0000\ncommitter GitHub <noreply@github.com> 1634741188 +0000\n\nMerge #10597\n\n10597: fix: Fix standard library doclinks not going to the correct page r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10082\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25a498bfc76318a47c1ff6e48f5da2600cb1e35d", "html_url": "https://github.com/rust-lang/rust/commit/25a498bfc76318a47c1ff6e48f5da2600cb1e35d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25a498bfc76318a47c1ff6e48f5da2600cb1e35d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c73aa7a21457d80fdfb0b2f24848f04c993209d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c73aa7a21457d80fdfb0b2f24848f04c993209d2", "html_url": "https://github.com/rust-lang/rust/commit/c73aa7a21457d80fdfb0b2f24848f04c993209d2"}, {"sha": "8ed86fc25d389632792f064f08183b3229328208", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed86fc25d389632792f064f08183b3229328208", "html_url": "https://github.com/rust-lang/rust/commit/8ed86fc25d389632792f064f08183b3229328208"}], "stats": {"total": 158, "additions": 103, "deletions": 55}, "files": [{"sha": "63b26911542ba32a7a203dfc5628bcb934f3e6d5", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25a498bfc76318a47c1ff6e48f5da2600cb1e35d/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a498bfc76318a47c1ff6e48f5da2600cb1e35d/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=25a498bfc76318a47c1ff6e48f5da2600cb1e35d", "patch": "@@ -120,6 +120,15 @@ pub struct CrateDisplayName {\n     canonical_name: String,\n }\n \n+impl CrateDisplayName {\n+    pub fn canonical_name(&self) -> &str {\n+        &self.canonical_name\n+    }\n+    pub fn crate_name(&self) -> &CrateName {\n+        &self.crate_name\n+    }\n+}\n+\n impl From<CrateName> for CrateDisplayName {\n     fn from(crate_name: CrateName) -> CrateDisplayName {\n         let canonical_name = crate_name.to_string();"}, {"sha": "3b7a2c8b5f3460f3107f97ce0d80f96f11f899e9", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 74, "deletions": 35, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/25a498bfc76318a47c1ff6e48f5da2600cb1e35d/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a498bfc76318a47c1ff6e48f5da2600cb1e35d/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=25a498bfc76318a47c1ff6e48f5da2600cb1e35d", "patch": "@@ -467,17 +467,24 @@ fn map_links<'e>(\n /// ```\n fn get_doc_base_url(db: &RootDatabase, krate: &Crate) -> Option<Url> {\n     let display_name = krate.display_name(db)?;\n-    krate\n-        .get_html_root_url(db)\n-        .or_else(|| {\n-            // Fallback to docs.rs. This uses `display_name` and can never be\n-            // correct, but that's what fallbacks are about.\n-            //\n-            // FIXME: clicking on the link should just open the file in the editor,\n-            // instead of falling back to external urls.\n-            Some(format!(\"https://docs.rs/{krate}/*/\", krate = display_name))\n-        })\n-        .and_then(|s| Url::parse(&s).ok()?.join(&format!(\"{}/\", display_name)).ok())\n+    let base = match &**display_name.crate_name() {\n+        // std and co do not specify `html_root_url` any longer so we gotta handwrite this ourself.\n+        // FIXME: Use the toolchains channel instead of nightly\n+        name @ (\"core\" | \"std\" | \"alloc\" | \"proc_macro\" | \"test\") => {\n+            format!(\"https://doc.rust-lang.org/nightly/{}\", name)\n+        }\n+        _ => {\n+            krate.get_html_root_url(db).or_else(|| {\n+                // Fallback to docs.rs. This uses `display_name` and can never be\n+                // correct, but that's what fallbacks are about.\n+                //\n+                // FIXME: clicking on the link should just open the file in the editor,\n+                // instead of falling back to external urls.\n+                Some(format!(\"https://docs.rs/{krate}/*/\", krate = display_name))\n+            })?\n+        }\n+    };\n+    Url::parse(&base).ok()?.join(&format!(\"{}/\", display_name)).ok()\n }\n \n /// Get the filename and extension generated for a symbol by rustdoc.\n@@ -555,73 +562,90 @@ mod tests {\n     fn external_docs_doc_url_crate() {\n         check_external_docs(\n             r#\"\n-//- /main.rs crate:main deps:test\n-use test$0::Foo;\n-//- /lib.rs crate:test\n+//- /main.rs crate:main deps:foo\n+use foo$0::Foo;\n+//- /lib.rs crate:foo\n pub struct Foo;\n \"#,\n-            expect![[r#\"https://docs.rs/test/*/test/index.html\"#]],\n+            expect![[r#\"https://docs.rs/foo/*/foo/index.html\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn external_docs_doc_url_std_crate() {\n+        check_external_docs(\n+            r#\"\n+//- /main.rs crate:std\n+use self$0;\n+\"#,\n+            expect![[r#\"https://doc.rust-lang.org/nightly/std/index.html\"#]],\n         );\n     }\n \n     #[test]\n     fn external_docs_doc_url_struct() {\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub struct Fo$0o;\n \"#,\n-            expect![[r#\"https://docs.rs/test/*/test/struct.Foo.html\"#]],\n+            expect![[r#\"https://docs.rs/foo/*/foo/struct.Foo.html\"#]],\n         );\n     }\n \n     #[test]\n     fn external_docs_doc_url_struct_field() {\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub struct Foo {\n     field$0: ()\n }\n \"#,\n-            expect![[r##\"https://docs.rs/test/*/test/struct.Foo.html#structfield.field\"##]],\n+            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#structfield.field\"##]],\n         );\n     }\n \n     #[test]\n     fn external_docs_doc_url_fn() {\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub fn fo$0o() {}\n \"#,\n-            expect![[r##\"https://docs.rs/test/*/test/fn.foo.html\"##]],\n+            expect![[r#\"https://docs.rs/foo/*/foo/fn.foo.html\"#]],\n         );\n     }\n \n     #[test]\n     fn external_docs_doc_url_impl_assoc() {\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub struct Foo;\n impl Foo {\n     pub fn method$0() {}\n }\n \"#,\n-            expect![[r##\"https://docs.rs/test/*/test/struct.Foo.html#method.method\"##]],\n+            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]],\n         );\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub struct Foo;\n impl Foo {\n     const CONST$0: () = ();\n }\n \"#,\n-            expect![[r##\"https://docs.rs/test/*/test/struct.Foo.html#associatedconstant.CONST\"##]],\n+            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]],\n         );\n     }\n \n     #[test]\n     fn external_docs_doc_url_impl_trait_assoc() {\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub struct Foo;\n pub trait Trait {\n     fn method() {}\n@@ -630,10 +654,11 @@ impl Trait for Foo {\n     pub fn method$0() {}\n }\n \"#,\n-            expect![[r##\"https://docs.rs/test/*/test/struct.Foo.html#method.method\"##]],\n+            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]],\n         );\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub struct Foo;\n pub trait Trait {\n     const CONST: () = ();\n@@ -642,10 +667,11 @@ impl Trait for Foo {\n     const CONST$0: () = ();\n }\n \"#,\n-            expect![[r##\"https://docs.rs/test/*/test/struct.Foo.html#associatedconstant.CONST\"##]],\n+            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]],\n         );\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub struct Foo;\n pub trait Trait {\n     type Type;\n@@ -654,64 +680,70 @@ impl Trait for Foo {\n     type Type$0 = ();\n }\n \"#,\n-            expect![[r##\"https://docs.rs/test/*/test/struct.Foo.html#associatedtype.Type\"##]],\n+            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedtype.Type\"##]],\n         );\n     }\n \n     #[test]\n     fn external_docs_doc_url_trait_assoc() {\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub trait Foo {\n     fn method$0();\n }\n \"#,\n-            expect![[r##\"https://docs.rs/test/*/test/trait.Foo.html#tymethod.method\"##]],\n+            expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#tymethod.method\"##]],\n         );\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub trait Foo {\n     const CONST$0: ();\n }\n \"#,\n-            expect![[r##\"https://docs.rs/test/*/test/trait.Foo.html#associatedconstant.CONST\"##]],\n+            expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedconstant.CONST\"##]],\n         );\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub trait Foo {\n     type Type$0;\n }\n \"#,\n-            expect![[r##\"https://docs.rs/test/*/test/trait.Foo.html#associatedtype.Type\"##]],\n+            expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedtype.Type\"##]],\n         );\n     }\n \n     #[test]\n     fn external_docs_trait() {\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n trait Trait$0 {}\n \"#,\n-            expect![[r#\"https://docs.rs/test/*/test/trait.Trait.html\"#]],\n+            expect![[r#\"https://docs.rs/foo/*/foo/trait.Trait.html\"#]],\n         )\n     }\n \n     #[test]\n     fn external_docs_module() {\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub mod foo {\n     pub mod ba$0r {}\n }\n \"#,\n-            expect![[r#\"https://docs.rs/test/*/test/foo/bar/index.html\"#]],\n+            expect![[r#\"https://docs.rs/foo/*/foo/foo/bar/index.html\"#]],\n         )\n     }\n \n     #[test]\n     fn external_docs_reexport_order() {\n         check_external_docs(\n             r#\"\n+//- /main.rs crate:foo\n pub mod wrapper {\n     pub use module::Item;\n \n@@ -724,7 +756,7 @@ fn foo() {\n     let bar: wrapper::It$0em;\n }\n         \"#,\n-            expect![[r#\"https://docs.rs/test/*/test/wrapper/module/struct.Item.html\"#]],\n+            expect![[r#\"https://docs.rs/foo/*/foo/wrapper/module/struct.Item.html\"#]],\n         )\n     }\n \n@@ -753,6 +785,7 @@ trait Trait$0 {\n     fn rewrite_html_root_url() {\n         check_rewrite(\n             r#\"\n+//- /main.rs crate:foo\n #![doc(arbitrary_attribute = \"test\", html_root_url = \"https:/example.com\", arbitrary_attribute2)]\n \n pub mod foo {\n@@ -761,7 +794,7 @@ pub mod foo {\n /// [Foo](foo::Foo)\n pub struct B$0ar\n \"#,\n-            expect![[r#\"[Foo](https://example.com/test/foo/struct.Foo.html)\"#]],\n+            expect![[r#\"[Foo](https://example.com/foo/foo/struct.Foo.html)\"#]],\n         );\n     }\n \n@@ -771,6 +804,7 @@ pub struct B$0ar\n         //  [Foo](https://docs.rs/test/*/test/struct.Foo.html)\n         check_rewrite(\n             r#\"\n+//- /main.rs crate:foo\n pub struct Foo {\n     /// [Foo](struct.Foo.html)\n     fie$0ld: ()\n@@ -784,40 +818,45 @@ pub struct Foo {\n     fn rewrite_struct() {\n         check_rewrite(\n             r#\"\n+//- /main.rs crate:foo\n /// [Foo]\n pub struct $0Foo;\n \"#,\n-            expect![[r#\"[Foo](https://docs.rs/test/*/test/struct.Foo.html)\"#]],\n+            expect![[r#\"[Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n         );\n         check_rewrite(\n             r#\"\n+//- /main.rs crate:foo\n /// [`Foo`]\n pub struct $0Foo;\n \"#,\n-            expect![[r#\"[`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\"#]],\n+            expect![[r#\"[`Foo`](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n         );\n         check_rewrite(\n             r#\"\n+//- /main.rs crate:foo\n /// [Foo](struct.Foo.html)\n pub struct $0Foo;\n \"#,\n-            expect![[r#\"[Foo](https://docs.rs/test/*/test/struct.Foo.html)\"#]],\n+            expect![[r#\"[Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n         );\n         check_rewrite(\n             r#\"\n+//- /main.rs crate:foo\n /// [struct Foo](struct.Foo.html)\n pub struct $0Foo;\n \"#,\n-            expect![[r#\"[struct Foo](https://docs.rs/test/*/test/struct.Foo.html)\"#]],\n+            expect![[r#\"[struct Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n         );\n         check_rewrite(\n             r#\"\n+//- /main.rs crate:foo\n /// [my Foo][foo]\n ///\n /// [foo]: Foo\n pub struct $0Foo;\n \"#,\n-            expect![[r#\"[my Foo](https://docs.rs/test/*/test/struct.Foo.html)\"#]],\n+            expect![[r#\"[my Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n         );\n     }\n "}, {"sha": "e684b77c4fbada914e41bc7e539e1d97cfee1b89", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/25a498bfc76318a47c1ff6e48f5da2600cb1e35d/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a498bfc76318a47c1ff6e48f5da2600cb1e35d/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=25a498bfc76318a47c1ff6e48f5da2600cb1e35d", "patch": "@@ -4125,20 +4125,20 @@ foo_macro!(\n );\n \"#,\n         expect![[r#\"\n-                *[`Foo`]*\n+            *[`Foo`]*\n \n-                ```rust\n-                test\n-                ```\n+            ```rust\n+            test\n+            ```\n \n-                ```rust\n-                pub struct Foo\n-                ```\n+            ```rust\n+            pub struct Foo\n+            ```\n \n-                ---\n+            ---\n \n-                Doc comment for [`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\n-            \"#]],\n+            Doc comment for [`Foo`](https://doc.rust-lang.org/nightly/test/struct.Foo.html)\n+        \"#]],\n     );\n }\n \n@@ -4150,19 +4150,19 @@ fn hover_intra_in_attr() {\n pub struct Foo;\n \"#,\n         expect![[r#\"\n-                *[`Foo`]*\n+            *[`Foo`]*\n \n-                ```rust\n-                test\n-                ```\n+            ```rust\n+            test\n+            ```\n \n-                ```rust\n-                pub struct Foo\n-                ```\n+            ```rust\n+            pub struct Foo\n+            ```\n \n-                ---\n+            ---\n \n-                Doc comment for [`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\n-            \"#]],\n+            Doc comment for [`Foo`](https://doc.rust-lang.org/nightly/test/struct.Foo.html)\n+        \"#]],\n     );\n }"}]}