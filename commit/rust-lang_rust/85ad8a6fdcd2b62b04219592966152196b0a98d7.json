{"sha": "85ad8a6fdcd2b62b04219592966152196b0a98d7", "node_id": "C_kwDOAAsO6NoAKDg1YWQ4YTZmZGNkMmI2MmIwNDIxOTU5Mjk2NjE1MjE5NmIwYTk4ZDc", "commit": {"author": {"name": "Michael Schubart", "email": "michael@schubart.net", "date": "2023-03-06T07:16:36Z"}, "committer": {"name": "Michael Schubart", "email": "michael@schubart.net", "date": "2023-03-06T07:19:09Z"}, "message": "Avoid false positives from extension traits", "tree": {"sha": "0b2f21edd12cc818c911fd3c7f39c7e274d65fe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b2f21edd12cc818c911fd3c7f39c7e274d65fe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85ad8a6fdcd2b62b04219592966152196b0a98d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85ad8a6fdcd2b62b04219592966152196b0a98d7", "html_url": "https://github.com/rust-lang/rust/commit/85ad8a6fdcd2b62b04219592966152196b0a98d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85ad8a6fdcd2b62b04219592966152196b0a98d7/comments", "author": {"login": "schubart", "id": 75188, "node_id": "MDQ6VXNlcjc1MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/75188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schubart", "html_url": "https://github.com/schubart", "followers_url": "https://api.github.com/users/schubart/followers", "following_url": "https://api.github.com/users/schubart/following{/other_user}", "gists_url": "https://api.github.com/users/schubart/gists{/gist_id}", "starred_url": "https://api.github.com/users/schubart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schubart/subscriptions", "organizations_url": "https://api.github.com/users/schubart/orgs", "repos_url": "https://api.github.com/users/schubart/repos", "events_url": "https://api.github.com/users/schubart/events{/privacy}", "received_events_url": "https://api.github.com/users/schubart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "schubart", "id": 75188, "node_id": "MDQ6VXNlcjc1MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/75188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schubart", "html_url": "https://github.com/schubart", "followers_url": "https://api.github.com/users/schubart/followers", "following_url": "https://api.github.com/users/schubart/following{/other_user}", "gists_url": "https://api.github.com/users/schubart/gists{/gist_id}", "starred_url": "https://api.github.com/users/schubart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schubart/subscriptions", "organizations_url": "https://api.github.com/users/schubart/orgs", "repos_url": "https://api.github.com/users/schubart/repos", "events_url": "https://api.github.com/users/schubart/events{/privacy}", "received_events_url": "https://api.github.com/users/schubart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb7fd59c35095645fafc17ba573817cef68ffcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb7fd59c35095645fafc17ba573817cef68ffcf", "html_url": "https://github.com/rust-lang/rust/commit/fbb7fd59c35095645fafc17ba573817cef68ffcf"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "10f2bef268a24b2159f887a794dca9669d06a2d2", "filename": "clippy_lints/src/collection_is_never_read.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85ad8a6fdcd2b62b04219592966152196b0a98d7/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ad8a6fdcd2b62b04219592966152196b0a98d7/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs?ref=85ad8a6fdcd2b62b04219592966152196b0a98d7", "patch": "@@ -98,10 +98,16 @@ fn has_no_read_access<'tcx>(cx: &LateContext<'tcx>, id: HirId, block: &'tcx Bloc\n         // Method call on `id` in a statement ignores any return value, so it's not a read access:\n         //\n         // id.foo(...); // Not reading `id`.\n+        //\n+        // Only assuming this for \"official\" methods defined on the type. For methods defined in extension\n+        // traits (identified as local, based on the orphan rule), pessimistically assume that they might\n+        // have side effects, so consider them a read.\n         if let Some(Node::Expr(parent)) = get_parent_node(cx.tcx, expr.hir_id)\n             && let ExprKind::MethodCall(_, receiver, _, _) = parent.kind\n             && path_to_local_id(receiver, id)\n             && let Some(Node::Stmt(..)) = get_parent_node(cx.tcx, parent.hir_id)\n+            && let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(parent.hir_id)\n+            && !method_def_id.is_local()\n         {\n             return ControlFlow::Continue(());\n         }"}, {"sha": "49c72e7eefec265a9bbef32b2f05911e2dd42112", "filename": "tests/ui/collection_is_never_read.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85ad8a6fdcd2b62b04219592966152196b0a98d7/tests%2Fui%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ad8a6fdcd2b62b04219592966152196b0a98d7/tests%2Fui%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollection_is_never_read.rs?ref=85ad8a6fdcd2b62b04219592966152196b0a98d7", "patch": "@@ -133,3 +133,23 @@ fn not_read_if_return_value_not_used() {\n     let x = vec![1, 2, 3]; // WARNING\n     x.is_empty();\n }\n+\n+fn extension_traits() {\n+    trait VecExt<T> {\n+        fn method_with_side_effect(&self);\n+        fn method_without_side_effect(&self);\n+    }\n+\n+    impl<T> VecExt<T> for Vec<T> {\n+        fn method_with_side_effect(&self) {\n+            println!(\"my length: {}\", self.len());\n+        }\n+        fn method_without_side_effect(&self) {}\n+    }\n+\n+    let x = vec![1, 2, 3]; // Ok\n+    x.method_with_side_effect();\n+\n+    let y = vec![1, 2, 3]; // Ok (false negative)\n+    y.method_without_side_effect();\n+}"}]}