{"sha": "45fe20515ce13a99354625a14b3f71b86765c896", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZmUyMDUxNWNlMTNhOTkzNTQ2MjVhMTRiM2Y3MWI4Njc2NWM4OTY=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-11-01T13:36:43Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-11-01T14:01:56Z"}, "message": "Removed legacy implementations", "tree": {"sha": "8cb8ab49e35182d006f05c627ad353f60a14930d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cb8ab49e35182d006f05c627ad353f60a14930d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45fe20515ce13a99354625a14b3f71b86765c896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45fe20515ce13a99354625a14b3f71b86765c896", "html_url": "https://github.com/rust-lang/rust/commit/45fe20515ce13a99354625a14b3f71b86765c896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45fe20515ce13a99354625a14b3f71b86765c896/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c22e7f02d11ff6c6741cdf0847bb7b77dbc5e868", "url": "https://api.github.com/repos/rust-lang/rust/commits/c22e7f02d11ff6c6741cdf0847bb7b77dbc5e868", "html_url": "https://github.com/rust-lang/rust/commit/c22e7f02d11ff6c6741cdf0847bb7b77dbc5e868"}], "stats": {"total": 121, "additions": 0, "deletions": 121}, "files": [{"sha": "e40666b8a33a265494d0268f2f610359cfb3ef76", "filename": "src/libstd/option.rs", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/45fe20515ce13a99354625a14b3f71b86765c896/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fe20515ce13a99354625a14b3f71b86765c896/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=45fe20515ce13a99354625a14b3f71b86765c896", "patch": "@@ -42,11 +42,9 @@ use clone::Clone;\n use clone::DeepClone;\n use cmp::{Eq, TotalEq, TotalOrd};\n use default::Default;\n-use either;\n use fmt;\n use iter::{Iterator, DoubleEndedIterator, ExactSize};\n use kinds::Send;\n-use num::Zero;\n use result::{IntoResult, ToResult, AsResult};\n use result::{Result, Ok, Err};\n use str::OwnedStr;\n@@ -361,17 +359,6 @@ impl<T: Default> Option<T> {\n     }\n }\n \n-impl<T: Zero> Option<T> {\n-    /// Returns the contained value or zero (for this type)\n-    #[inline]\n-    pub fn unwrap_or_zero(self) -> T {\n-        match self {\n-            Some(x) => x,\n-            None => Zero::zero()\n-        }\n-    }\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n // Constructor extension trait\n /////////////////////////////////////////////////////////////////////////////\n@@ -449,26 +436,6 @@ impl<T> AsResult<T, ()> for Option<T> {\n     }\n }\n \n-impl<T: Clone> either::ToEither<(), T> for Option<T> {\n-    #[inline]\n-    fn to_either(&self) -> either::Either<(), T> {\n-        match *self {\n-            Some(ref x) => either::Right(x.clone()),\n-            None => either::Left(()),\n-        }\n-    }\n-}\n-\n-impl<T> either::IntoEither<(), T> for Option<T> {\n-    #[inline]\n-    fn into_either(self) -> either::Either<(), T> {\n-        match self {\n-            Some(x) => either::Right(x),\n-            None => either::Left(()),\n-        }\n-    }\n-}\n-\n impl<T: fmt::Default> fmt::Default for Option<T> {\n     #[inline]\n     fn fmt(s: &Option<T>, f: &mut fmt::Formatter) {\n@@ -526,8 +493,6 @@ impl<A> ExactSize<A> for OptionIterator<A> {}\n mod tests {\n     use super::*;\n \n-    use either::{IntoEither, ToEither};\n-    use either;\n     use result::{IntoResult, ToResult};\n     use result::{Result, Ok, Err};\n     use str::StrSlice;\n@@ -696,14 +661,6 @@ mod tests {\n         assert_eq!(x.unwrap_or_else(|| 2), 2);\n     }\n \n-    #[test]\n-    fn test_unwrap_or_zero() {\n-        let some_stuff = Some(42);\n-        assert_eq!(some_stuff.unwrap_or_zero(), 42);\n-        let no_stuff: Option<int> = None;\n-        assert_eq!(no_stuff.unwrap_or_zero(), 0);\n-    }\n-\n     #[test]\n     fn test_filtered() {\n         let some_stuff = Some(42);\n@@ -820,22 +777,4 @@ mod tests {\n         assert_eq!(some.into_result(), Ok(100));\n         assert_eq!(none.into_result(), Err(()));\n     }\n-\n-    #[test]\n-    pub fn test_to_either() {\n-        let some: Option<int> = Some(100);\n-        let none: Option<int> = None;\n-\n-        assert_eq!(some.to_either(), either::Right(100));\n-        assert_eq!(none.to_either(), either::Left(()));\n-    }\n-\n-    #[test]\n-    pub fn test_into_either() {\n-        let some: Option<int> = Some(100);\n-        let none: Option<int> = None;\n-\n-        assert_eq!(some.into_either(), either::Right(100));\n-        assert_eq!(none.into_either(), either::Left(()));\n-    }\n }"}, {"sha": "768de7dfc1f8266d2e9c73af45aec9f21f066ec9", "filename": "src/libstd/result.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/45fe20515ce13a99354625a14b3f71b86765c896/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fe20515ce13a99354625a14b3f71b86765c896/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=45fe20515ce13a99354625a14b3f71b86765c896", "patch": "@@ -13,7 +13,6 @@\n use any::Any;\n use clone::Clone;\n use cmp::Eq;\n-use either;\n use fmt;\n use iter::Iterator;\n use kinds::Send;\n@@ -331,36 +330,6 @@ impl<T, E> AsOption<T> for Result<T, E> {\n     }\n }\n \n-impl<T: Clone, E: Clone> either::ToEither<E, T> for Result<T, E> {\n-    #[inline]\n-    fn to_either(&self) -> either::Either<E, T> {\n-        match *self {\n-            Ok(ref t) => either::Right(t.clone()),\n-            Err(ref e) => either::Left(e.clone()),\n-        }\n-    }\n-}\n-\n-impl<T, E> either::IntoEither<E, T> for Result<T, E> {\n-    #[inline]\n-    fn into_either(self) -> either::Either<E, T> {\n-        match self {\n-            Ok(t) => either::Right(t),\n-            Err(e) => either::Left(e),\n-        }\n-    }\n-}\n-\n-impl<T, E> either::AsEither<E, T> for Result<T, E> {\n-    #[inline]\n-    fn as_either<'a>(&'a self) -> either::Either<&'a E, &'a T> {\n-        match *self {\n-            Ok(ref t) => either::Right(t),\n-            Err(ref e) => either::Left(e),\n-        }\n-    }\n-}\n-\n impl<T: fmt::Default, E: fmt::Default> fmt::Default for Result<T, E> {\n     #[inline]\n     fn fmt(s: &Result<T, E>, f: &mut fmt::Formatter) {\n@@ -444,8 +413,6 @@ pub fn fold_<T, E, Iter: Iterator<Result<T, E>>>(\n mod tests {\n     use super::*;\n \n-    use either::{IntoEither, ToEither, AsEither};\n-    use either;\n     use iter::range;\n     use option::{IntoOption, ToOption, AsOption};\n     use option::{Option, Some, None};\n@@ -631,33 +598,6 @@ mod tests {\n         assert_eq!(err.as_result(), Err(&x));\n     }\n \n-    #[test]\n-    pub fn test_to_either() {\n-        let ok: Result<int, int> = Ok(100);\n-        let err: Result<int, int> = Err(404);\n-\n-        assert_eq!(ok.to_either(), either::Right(100));\n-        assert_eq!(err.to_either(), either::Left(404));\n-    }\n-\n-    #[test]\n-    pub fn test_into_either() {\n-        let ok: Result<int, int> = Ok(100);\n-        let err: Result<int, int> = Err(404);\n-\n-        assert_eq!(ok.into_either(), either::Right(100));\n-        assert_eq!(err.into_either(), either::Left(404));\n-    }\n-\n-    #[test]\n-    pub fn test_as_either() {\n-        let ok: Result<int, int> = Ok(100);\n-        let err: Result<int, int> = Err(404);\n-\n-        assert_eq!(ok.as_either().unwrap_right(), &100);\n-        assert_eq!(err.as_either().unwrap_left(), &404);\n-    }\n-\n     #[test]\n     pub fn test_to_str() {\n         let ok: Result<int, ~str> = Ok(100);"}]}