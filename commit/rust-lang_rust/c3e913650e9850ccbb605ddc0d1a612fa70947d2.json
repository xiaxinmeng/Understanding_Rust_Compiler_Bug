{"sha": "c3e913650e9850ccbb605ddc0d1a612fa70947d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZTkxMzY1MGU5ODUwY2NiYjYwNWRkYzBkMWE2MTJmYTcwOTQ3ZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-30T12:11:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-30T12:11:17Z"}, "message": "Auto merge of #3766 - xd009642:issue-3764, r=flip1995\n\ntrait bounds lint - repeated types\n\nThis PR is to tackle https://github.com/rust-lang/rust-clippy/issues/3764 it's still a WIP and doesn't work but this is an initial stab. It builds though I haven't added any tests as I'm not sure where lint tests should go?\n\nUnfortunately, it seems id isn't tied to the type itself but I guess where it is in the AST? Looking at https://manishearth.github.io/rust-internals-docs/syntax/ast/struct.Ty.html I can't see any members that would let me tell if a type was repeated in multiple trait bounds.\n\nThere may be other issues with how I've implemented this so any assistance is appreciated!\n\nchangelog: Add new lint: `type_repetition_in_bounds`", "tree": {"sha": "5e2f70e24754109e59bad342d91cb9f14ea0e877", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e2f70e24754109e59bad342d91cb9f14ea0e877"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3e913650e9850ccbb605ddc0d1a612fa70947d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e913650e9850ccbb605ddc0d1a612fa70947d2", "html_url": "https://github.com/rust-lang/rust/commit/c3e913650e9850ccbb605ddc0d1a612fa70947d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3e913650e9850ccbb605ddc0d1a612fa70947d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7d153a4ab3e0a99260da27fc44c40f203d48e19", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d153a4ab3e0a99260da27fc44c40f203d48e19", "html_url": "https://github.com/rust-lang/rust/commit/e7d153a4ab3e0a99260da27fc44c40f203d48e19"}, {"sha": "78ebcaa5263e0fd4c4ec89da648d8386c034ce84", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ebcaa5263e0fd4c4ec89da648d8386c034ce84", "html_url": "https://github.com/rust-lang/rust/commit/78ebcaa5263e0fd4c4ec89da648d8386c034ce84"}], "stats": {"total": 247, "additions": 234, "deletions": 13}, "files": [{"sha": "089897811a595aa128d57a3947ee68a8e7cc04ea", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3e913650e9850ccbb605ddc0d1a612fa70947d2/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3e913650e9850ccbb605ddc0d1a612fa70947d2/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c3e913650e9850ccbb605ddc0d1a612fa70947d2", "patch": "@@ -1138,6 +1138,7 @@ Released 2018-09-13\n [`trivially_copy_pass_by_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\n [`try_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#try_err\n [`type_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n+[`type_repetition_in_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds\n [`unicode_not_nfc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unicode_not_nfc\n [`unimplemented`]: https://rust-lang.github.io/rust-clippy/master/index.html#unimplemented\n [`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg"}, {"sha": "38651f72eb3661b99527dd344ee674883e6d7024", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3e913650e9850ccbb605ddc0d1a612fa70947d2/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3e913650e9850ccbb605ddc0d1a612fa70947d2/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c3e913650e9850ccbb605ddc0d1a612fa70947d2", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 308 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 309 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "908bbeb5e19fbb8df5717ae6023a6ecfdf3e0d8a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3e913650e9850ccbb605ddc0d1a612fa70947d2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e913650e9850ccbb605ddc0d1a612fa70947d2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c3e913650e9850ccbb605ddc0d1a612fa70947d2", "patch": "@@ -263,6 +263,7 @@ pub mod strings;\n pub mod suspicious_trait_impl;\n pub mod swap;\n pub mod temporary_assignment;\n+pub mod trait_bounds;\n pub mod transmute;\n pub mod transmuting_null;\n pub mod trivially_copy_pass_by_ref;\n@@ -588,6 +589,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box checked_conversions::CheckedConversions);\n     reg.register_late_lint_pass(box integer_division::IntegerDivision);\n     reg.register_late_lint_pass(box inherent_to_string::InherentToString);\n+    reg.register_late_lint_pass(box trait_bounds::TraitBounds);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -858,6 +860,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         transmute::CROSSPOINTER_TRANSMUTE,\n         transmute::TRANSMUTE_BYTES_TO_STR,\n         transmute::TRANSMUTE_INT_TO_BOOL,\n@@ -1039,6 +1042,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         reference::REF_IN_DEREF,\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         transmute::CROSSPOINTER_TRANSMUTE,\n         transmute::TRANSMUTE_BYTES_TO_STR,\n         transmute::TRANSMUTE_INT_TO_BOOL,"}, {"sha": "8a719c0dd041bdfd5f05bf0b0eda73d49dbfc1a2", "filename": "clippy_lints/src/trait_bounds.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c3e913650e9850ccbb605ddc0d1a612fa70947d2/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e913650e9850ccbb605ddc0d1a612fa70947d2/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=c3e913650e9850ccbb605ddc0d1a612fa70947d2", "patch": "@@ -0,0 +1,77 @@\n+use crate::utils::{in_macro, snippet, span_help_and_lint, SpanlessHash};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n+use rustc_data_structures::fx::FxHashMap;\n+\n+#[derive(Copy, Clone)]\n+pub struct TraitBounds;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** This lint warns about unnecessary type repetitions in trait bounds\n+    ///\n+    /// **Why is this bad?** Repeating the type for every bound makes the code\n+    /// less readable than combining the bounds\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// pub fn foo<T>(t: T) where T: Copy, T: Clone\n+    /// ```\n+    ///\n+    /// Could be written as:\n+    ///\n+    /// ```rust\n+    /// pub fn foo<T>(t: T) where T: Copy + Clone\n+    /// ```\n+    pub TYPE_REPETITION_IN_BOUNDS,\n+    complexity,\n+    \"Types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\"\n+}\n+\n+impl_lint_pass!(TraitBounds => [TYPE_REPETITION_IN_BOUNDS]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n+    fn check_generics(&mut self, cx: &LateContext<'a, 'tcx>, gen: &'tcx Generics) {\n+        if in_macro(gen.span) {\n+            return;\n+        }\n+        let hash = |ty| -> u64 {\n+            let mut hasher = SpanlessHash::new(cx, cx.tables);\n+            hasher.hash_ty(ty);\n+            hasher.finish()\n+        };\n+        let mut map = FxHashMap::default();\n+        for bound in &gen.where_clause.predicates {\n+            if let WherePredicate::BoundPredicate(ref p) = bound {\n+                let h = hash(&p.bounded_ty);\n+                if let Some(ref v) = map.insert(h, p.bounds.iter().collect::<Vec<_>>()) {\n+                    let mut hint_string = format!(\n+                        \"consider combining the bounds: `{}:\",\n+                        snippet(cx, p.bounded_ty.span, \"_\")\n+                    );\n+                    for b in v.iter() {\n+                        if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n+                            let path = &poly_trait_ref.trait_ref.path;\n+                            hint_string.push_str(&format!(\" {} +\", path));\n+                        }\n+                    }\n+                    for b in p.bounds.iter() {\n+                        if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n+                            let path = &poly_trait_ref.trait_ref.path;\n+                            hint_string.push_str(&format!(\" {} +\", path));\n+                        }\n+                    }\n+                    hint_string.truncate(hint_string.len() - 2);\n+                    hint_string.push('`');\n+                    span_help_and_lint(\n+                        cx,\n+                        TYPE_REPETITION_IN_BOUNDS,\n+                        p.span,\n+                        \"this type has already been used as a bound predicate\",\n+                        &hint_string,\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "6fc5939a216026c0b0b20ecf9740461434e5365f", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 102, "deletions": 3, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/c3e913650e9850ccbb605ddc0d1a612fa70947d2/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e913650e9850ccbb605ddc0d1a612fa70947d2/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=c3e913650e9850ccbb605ddc0d1a612fa70947d2", "patch": "@@ -438,9 +438,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(fun);\n                 self.hash_exprs(args);\n             },\n-            ExprKind::Cast(ref e, ref _ty) | ExprKind::Type(ref e, ref _ty) => {\n+            ExprKind::Cast(ref e, ref ty) | ExprKind::Type(ref e, ref ty) => {\n                 self.hash_expr(e);\n-                // TODO: _ty\n+                self.hash_ty(ty);\n             },\n             ExprKind::Closure(cap, _, eid, _, _) => {\n                 match cap {\n@@ -512,7 +512,10 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_expr(e);\n                 }\n             },\n-            ExprKind::Tup(ref v) | ExprKind::Array(ref v) => {\n+            ExprKind::Tup(ref tup) => {\n+                self.hash_exprs(tup);\n+            },\n+            ExprKind::Array(ref v) => {\n                 self.hash_exprs(v);\n             },\n             ExprKind::Unary(lop, ref le) => {\n@@ -574,4 +577,100 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             },\n         }\n     }\n+\n+    pub fn hash_lifetime(&mut self, lifetime: &Lifetime) {\n+        std::mem::discriminant(&lifetime.name).hash(&mut self.s);\n+        if let LifetimeName::Param(ref name) = lifetime.name {\n+            std::mem::discriminant(name).hash(&mut self.s);\n+            match name {\n+                ParamName::Plain(ref ident) => {\n+                    ident.name.hash(&mut self.s);\n+                },\n+                ParamName::Fresh(ref size) => {\n+                    size.hash(&mut self.s);\n+                },\n+                ParamName::Error => {},\n+            }\n+        }\n+    }\n+\n+    pub fn hash_ty(&mut self, ty: &Ty) {\n+        self.hash_tykind(&ty.node);\n+    }\n+\n+    pub fn hash_tykind(&mut self, ty: &TyKind) {\n+        std::mem::discriminant(ty).hash(&mut self.s);\n+        match ty {\n+            TyKind::Slice(ty) => {\n+                self.hash_ty(ty);\n+            },\n+            TyKind::Array(ty, anon_const) => {\n+                self.hash_ty(ty);\n+                self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n+            },\n+            TyKind::Ptr(mut_ty) => {\n+                self.hash_ty(&mut_ty.ty);\n+                mut_ty.mutbl.hash(&mut self.s);\n+            },\n+            TyKind::Rptr(lifetime, mut_ty) => {\n+                self.hash_lifetime(lifetime);\n+                self.hash_ty(&mut_ty.ty);\n+                mut_ty.mutbl.hash(&mut self.s);\n+            },\n+            TyKind::BareFn(bfn) => {\n+                bfn.unsafety.hash(&mut self.s);\n+                bfn.abi.hash(&mut self.s);\n+                for arg in &bfn.decl.inputs {\n+                    self.hash_ty(&arg);\n+                }\n+                match bfn.decl.output {\n+                    FunctionRetTy::DefaultReturn(_) => {\n+                        ().hash(&mut self.s);\n+                    },\n+                    FunctionRetTy::Return(ref ty) => {\n+                        self.hash_ty(ty);\n+                    },\n+                }\n+                bfn.decl.c_variadic.hash(&mut self.s);\n+            },\n+            TyKind::Tup(ty_list) => {\n+                for ty in ty_list {\n+                    self.hash_ty(ty);\n+                }\n+            },\n+            TyKind::Path(qpath) => match qpath {\n+                QPath::Resolved(ref maybe_ty, ref path) => {\n+                    if let Some(ref ty) = maybe_ty {\n+                        self.hash_ty(ty);\n+                    }\n+                    for segment in &path.segments {\n+                        segment.ident.name.hash(&mut self.s);\n+                    }\n+                },\n+                QPath::TypeRelative(ref ty, ref segment) => {\n+                    self.hash_ty(ty);\n+                    segment.ident.name.hash(&mut self.s);\n+                },\n+            },\n+            TyKind::Def(_, arg_list) => {\n+                for arg in arg_list {\n+                    match arg {\n+                        GenericArg::Lifetime(ref l) => self.hash_lifetime(l),\n+                        GenericArg::Type(ref ty) => self.hash_ty(&ty),\n+                        GenericArg::Const(ref ca) => {\n+                            self.hash_expr(&self.cx.tcx.hir().body(ca.value.body).value);\n+                        },\n+                    }\n+                }\n+            },\n+            TyKind::TraitObject(_, lifetime) => {\n+                self.hash_lifetime(lifetime);\n+            },\n+            TyKind::Typeof(anon_const) => {\n+                self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n+            },\n+            TyKind::CVarArgs(lifetime) => self.hash_lifetime(lifetime),\n+            TyKind::Err | TyKind::Infer | TyKind::Never => {},\n+        }\n+    }\n }"}, {"sha": "49bce5a6cef4d2ef3ff26ccd867189ac35c833ea", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3e913650e9850ccbb605ddc0d1a612fa70947d2/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e913650e9850ccbb605ddc0d1a612fa70947d2/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c3e913650e9850ccbb605ddc0d1a612fa70947d2", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 308] = [\n+pub const ALL_LINTS: [Lint; 309] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1848,6 +1848,13 @@ pub const ALL_LINTS: [Lint; 308] = [\n         deprecation: None,\n         module: \"types\",\n     },\n+    Lint {\n+        name: \"type_repetition_in_bounds\",\n+        group: \"complexity\",\n+        desc: \"Types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\",\n+        deprecation: None,\n+        module: \"trait_bounds\",\n+    },\n     Lint {\n         name: \"unicode_not_nfc\",\n         group: \"pedantic\","}, {"sha": "207c1bcbbc676da7857dfd211037129e5cd33f90", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3e913650e9850ccbb605ddc0d1a612fa70947d2/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e913650e9850ccbb605ddc0d1a612fa70947d2/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=c3e913650e9850ccbb605ddc0d1a612fa70947d2", "patch": "@@ -8,8 +8,7 @@ const ONE: f32 = ZERO + 1.0;\n \n fn twice<T>(x: T) -> T\n where\n-    T: Add<T, Output = T>,\n-    T: Copy,\n+    T: Add<T, Output = T> + Copy,\n {\n     x + x\n }"}, {"sha": "116e3e90e6372c41c1437832331d4cdf3a60135e", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3e913650e9850ccbb605ddc0d1a612fa70947d2/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3e913650e9850ccbb605ddc0d1a612fa70947d2/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=c3e913650e9850ccbb605ddc0d1a612fa70947d2", "patch": "@@ -1,36 +1,36 @@\n error: strict comparison of f32 or f64\n-  --> $DIR/float_cmp.rs:60:5\n+  --> $DIR/float_cmp.rs:59:5\n    |\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE as f64 - 2.0).abs() > error`\n    |\n    = note: `-D clippy::float-cmp` implied by `-D warnings`\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp.rs:60:5\n+  --> $DIR/float_cmp.rs:59:5\n    |\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: strict comparison of f32 or f64\n-  --> $DIR/float_cmp.rs:65:5\n+  --> $DIR/float_cmp.rs:64:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(x - 1.0).abs() < error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp.rs:65:5\n+  --> $DIR/float_cmp.rs:64:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^\n \n error: strict comparison of f32 or f64\n-  --> $DIR/float_cmp.rs:68:5\n+  --> $DIR/float_cmp.rs:67:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(twice(x) - twice(ONE as f64)).abs() > error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp.rs:68:5\n+  --> $DIR/float_cmp.rs:67:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "8b538be762b0c3bb9821171388e33c85c99f1fea", "filename": "tests/ui/type_repetition_in_bounds.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c3e913650e9850ccbb605ddc0d1a612fa70947d2/tests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e913650e9850ccbb605ddc0d1a612fa70947d2/tests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.rs?ref=c3e913650e9850ccbb605ddc0d1a612fa70947d2", "patch": "@@ -0,0 +1,19 @@\n+#[deny(clippy::type_repetition_in_bounds)]\n+\n+pub fn foo<T>(_t: T)\n+where\n+    T: Copy,\n+    T: Clone,\n+{\n+    unimplemented!();\n+}\n+\n+pub fn bar<T, U>(_t: T, _u: U)\n+where\n+    T: Copy,\n+    U: Clone,\n+{\n+    unimplemented!();\n+}\n+\n+fn main() {}"}, {"sha": "a72f512b0129a87da9ba8bfd60bbe6fa7782f352", "filename": "tests/ui/type_repetition_in_bounds.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3e913650e9850ccbb605ddc0d1a612fa70947d2/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3e913650e9850ccbb605ddc0d1a612fa70947d2/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.stderr?ref=c3e913650e9850ccbb605ddc0d1a612fa70947d2", "patch": "@@ -0,0 +1,15 @@\n+error: this type has already been used as a bound predicate\n+  --> $DIR/type_repetition_in_bounds.rs:6:5\n+   |\n+LL |     T: Clone,\n+   |     ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/type_repetition_in_bounds.rs:1:8\n+   |\n+LL | #[deny(clippy::type_repetition_in_bounds)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: consider combining the bounds: `T: Copy + Clone`\n+\n+error: aborting due to previous error\n+"}]}