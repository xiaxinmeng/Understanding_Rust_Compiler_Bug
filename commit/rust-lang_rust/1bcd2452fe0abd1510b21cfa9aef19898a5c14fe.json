{"sha": "1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiY2QyNDUyZmUwYWJkMTUxMGIyMWNmYTlhZWYxOTg5OGE1YzE0ZmU=", "commit": {"author": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-09-21T20:32:28Z"}, "committer": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-10-26T22:19:48Z"}, "message": "Address review comments", "tree": {"sha": "3de94c385ad958dd42c35b04b292dd382bb00c49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3de94c385ad958dd42c35b04b292dd382bb00c49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "html_url": "https://github.com/rust-lang/rust/commit/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "737bfeffd2805f2372c934999afd8ea87921d835", "url": "https://api.github.com/repos/rust-lang/rust/commits/737bfeffd2805f2372c934999afd8ea87921d835", "html_url": "https://github.com/rust-lang/rust/commit/737bfeffd2805f2372c934999afd8ea87921d835"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "3852cc4f2986a834a9682d87d26e0c89906224d7", "filename": "compiler/rustc_lint/src/methods.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs?ref=1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "patch": "@@ -3,10 +3,7 @@ use crate::LateLintPass;\n use crate::LintContext;\n use rustc_hir::{Expr, ExprKind, PathSegment};\n use rustc_middle::ty;\n-use rustc_span::{\n-    symbol::{sym, Symbol},\n-    ExpnKind, Span,\n-};\n+use rustc_span::{symbol::sym, ExpnKind, Span};\n \n declare_lint! {\n     pub TEMPORARY_CSTRING_AS_PTR,\n@@ -59,28 +56,28 @@ impl<'tcx> LateLintPass<'tcx> for TemporaryCStringAsPtr {\n     }\n }\n \n-const CSTRING_PATH: [Symbol; 4] = [sym::std, sym::ffi, sym::c_str, sym::CString];\n-\n fn lint_cstring_as_ptr(\n     cx: &LateContext<'_>,\n     as_ptr_span: Span,\n     source: &rustc_hir::Expr<'_>,\n     unwrap: &rustc_hir::Expr<'_>,\n ) {\n     let source_type = cx.typeck_results().expr_ty(source);\n-    if let ty::Adt(def, substs) = source_type.kind {\n+    if let ty::Adt(def, substs) = source_type.kind() {\n         if cx.tcx.is_diagnostic_item(sym::result_type, def.did) {\n-            if let ty::Adt(adt, _) = substs.type_at(0).kind {\n-                if cx.match_def_path(adt.did, &CSTRING_PATH) {\n+            if let ty::Adt(adt, _) = substs.type_at(0).kind() {\n+                if cx.tcx.is_diagnostic_item(sym::cstring_type, adt.did) {\n                     cx.struct_span_lint(TEMPORARY_CSTRING_AS_PTR, as_ptr_span, |diag| {\n                         let mut diag = diag\n                             .build(\"getting the inner pointer of a temporary `CString`\");\n                         diag.span_label(as_ptr_span, \"this pointer will be invalid\");\n                         diag.span_label(\n                             unwrap.span,\n-                            \"this `CString` is deallocated at the end of the expression, bind it to a variable to extend its lifetime\",\n+                            \"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\",\n                         );\n-                        diag.note(\"pointers do not have a lifetime; when calling `as_ptr` the `CString` is deallocated because nothing is referencing it as far as the type system is concerned\");\n+                        diag.note(\"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement...\");\n+                        diag.note(\"...because nothing is referencing it as far as the type system is concerned\");\n+                        diag.help(\"for more information, see https://doc.rust-lang.org/reference/destructors.html\");\n                         diag.emit();\n                     });\n                 }"}, {"sha": "10d47b824bcf135396fc149615ac6aa3df89cc6a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "patch": "@@ -400,6 +400,7 @@ symbols! {\n         crate_type,\n         crate_visibility_modifier,\n         crt_dash_static: \"crt-static\",\n+        cstring_type,\n         ctlz,\n         ctlz_nonzero,\n         ctpop,"}, {"sha": "1cfd73863a6177373b6b3fec2a94d904a50bb4ff", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "patch": "@@ -109,7 +109,9 @@ use crate::sys;\n /// documentation of `CString` before use, as improper ownership management\n /// of `CString` instances can lead to invalid memory accesses, memory leaks,\n /// and other memory errors.\n+\n #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"cstring_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CString {\n     // Invariant 1: the slice ends with a zero byte and has a length of at least one."}, {"sha": "197b7fd704f3c1a427fe18edace0804bcd2407d5", "filename": "src/test/ui/lint/lint-temporary-cstring-as-param.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.rs?ref=1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "patch": "@@ -0,0 +1,10 @@\n+// ignore-tidy-linelength\n+#![deny(temporary_cstring_as_ptr)]\n+\n+use std::ffi::CString;\n+\n+fn some_function(data: *const i8) {}\n+\n+fn main() {\n+    some_function(CString::new(\"\").unwrap().as_ptr()); //~ ERROR getting the inner pointer of a temporary `CString`\n+}"}, {"sha": "1e0d0d954dc8759c5e11eace035e616bba618535", "filename": "src/test/ui/lint/lint-temporary-cstring-as-param.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr?ref=1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "patch": "@@ -0,0 +1,19 @@\n+error: getting the inner pointer of a temporary `CString`\n+  --> $DIR/lint-temporary-cstring-as-param.rs:9:45\n+   |\n+LL |     some_function(CString::new(\"\").unwrap().as_ptr());\n+   |                   ------------------------- ^^^^^^ this pointer will be invalid\n+   |                   |\n+   |                   this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-temporary-cstring-as-param.rs:2:9\n+   |\n+LL | #![deny(temporary_cstring_as_ptr)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement...\n+   = note: ...because nothing is referencing it as far as the type system is concerned\n+   = help: for more information, see https://doc.rust-lang.org/reference/destructors.html\n+\n+error: aborting due to previous error\n+"}, {"sha": "8fca03b49df2ca1f6dcc9e744af1ab1b105f8489", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr?ref=1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "patch": "@@ -4,14 +4,16 @@ error: getting the inner pointer of a temporary `CString`\n LL |     let s = CString::new(\"some text\").unwrap().as_ptr();\n    |             ---------------------------------- ^^^^^^ this pointer will be invalid\n    |             |\n-   |             this `CString` is deallocated at the end of the expression, bind it to a variable to extend its lifetime\n+   |             this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n    |\n note: the lint level is defined here\n   --> $DIR/lint-temporary-cstring-as-ptr.rs:2:9\n    |\n LL | #![deny(temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` is deallocated because nothing is referencing it as far as the type system is concerned\n+   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement...\n+   = note: ...because nothing is referencing it as far as the type system is concerned\n+   = help: for more information, see https://doc.rust-lang.org/reference/destructors.html\n \n error: aborting due to previous error\n "}]}