{"sha": "7009e6d001ebc807eca04c5b9f07779db02eca99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMDllNmQwMDFlYmM4MDdlY2EwNGM1YjlmMDc3NzlkYjAyZWNhOTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-14T11:13:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-14T11:13:16Z"}, "message": "mem::forget docs: mention ManuallyDrop", "tree": {"sha": "f400876b492b886d9d26e86d9eda0788476e9d54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f400876b492b886d9d26e86d9eda0788476e9d54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7009e6d001ebc807eca04c5b9f07779db02eca99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7009e6d001ebc807eca04c5b9f07779db02eca99", "html_url": "https://github.com/rust-lang/rust/commit/7009e6d001ebc807eca04c5b9f07779db02eca99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7009e6d001ebc807eca04c5b9f07779db02eca99/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e380b797b22e5361a43b2b82f6278df17d89f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e380b797b22e5361a43b2b82f6278df17d89f3e", "html_url": "https://github.com/rust-lang/rust/commit/5e380b797b22e5361a43b2b82f6278df17d89f3e"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "5ba2a3aa5996c4159fd4d058163f677e9a7e04ab", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7009e6d001ebc807eca04c5b9f07779db02eca99/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7009e6d001ebc807eca04c5b9f07779db02eca99/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=7009e6d001ebc807eca04c5b9f07779db02eca99", "patch": "@@ -45,8 +45,9 @@ pub use crate::intrinsics::transmute;\n /// `mem::forget` from safe code does not fundamentally change Rust's safety\n /// guarantees.\n ///\n-/// That said, leaking resources such as memory or I/O objects is usually undesirable,\n-/// so `forget` is only recommended for specialized use cases like those shown below.\n+/// That said, leaking resources such as memory or I/O objects is usually undesirable.\n+/// The need comes up in some specialized use cases for FFI or unsafe code, but even\n+/// then, [`ManuallyDrop`] is typically preferred.\n ///\n /// Because forgetting a value is allowed, any `unsafe` code you write must\n /// allow for this possibility. You cannot return a value and expect that the\n@@ -68,7 +69,35 @@ pub use crate::intrinsics::transmute;\n /// ```\n ///\n /// The practical use cases for `forget` are rather specialized and mainly come\n-/// up in unsafe or FFI code.\n+/// up in unsafe or FFI code. However, [`ManuallyDrop`] is usually preferred\n+/// for such cases, e.g.:\n+///\n+/// ```\n+/// use std::mem::ManuallyDrop;\n+///\n+/// let v = vec![65, 122];\n+/// // Before we disassemble `v` into its raw parts, make sure it\n+/// // does not get dropped!\n+/// let mut v = ManuallyDrop::new(v);\n+/// // Now disassemble `v`. These operations cannot panic, so there cannot be a leak.\n+/// let ptr = v.as_mut_ptr();\n+/// let cap = v.capacity();\n+/// // Finally, build a `String`.\n+/// let s = unsafe { String::from_raw_parts(ptr, 2, cap) };\n+/// assert_eq!(s, \"Az\");\n+/// // `s` is implicitly dropped and its memory deallocated.\n+/// ```\n+///\n+/// Using `ManuallyDrop` here has two advantages:\n+///\n+/// * We do not \"touch\" `v` after disassembling it. For some types, operations\n+///   such as passing ownership (to a funcion like `mem::forget`) requires them to actually\n+///   be fully owned right now; that is a promise we do not want to make here as we are\n+///   in the process of transferring ownership to the new `String` we are building.\n+/// * In case of an unexpected panic, `ManuallyDrop` is not dropped, but if the panic\n+///   occurs before `mem::forget` was called we might end up dropping invalid data,\n+///   or double-dropping. In other words, `ManuallyDrop` errs on the side of leaking\n+///   instead of erring on the side of dropping.\n ///\n /// [drop]: fn.drop.html\n /// [uninit]: fn.uninitialized.html\n@@ -78,6 +107,7 @@ pub use crate::intrinsics::transmute;\n /// [leak]: ../../std/boxed/struct.Box.html#method.leak\n /// [into_raw]: ../../std/boxed/struct.Box.html#method.into_raw\n /// [ub]: ../../reference/behavior-considered-undefined.html\n+/// [`ManuallyDrop`]: struct.ManuallyDrop.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn forget<T>(t: T) {"}]}