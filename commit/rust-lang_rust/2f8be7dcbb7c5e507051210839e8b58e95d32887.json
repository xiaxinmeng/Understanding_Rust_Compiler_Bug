{"sha": "2f8be7dcbb7c5e507051210839e8b58e95d32887", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmOGJlN2RjYmI3YzVlNTA3MDUxMjEwODM5ZThiNThlOTVkMzI4ODc=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-06-06T19:38:29Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-06-15T19:41:41Z"}, "message": "Bugfix: obey the tt_lexer's own invariants.", "tree": {"sha": "701f6e4903a9235198cef40e0dea8c935394c4da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/701f6e4903a9235198cef40e0dea8c935394c4da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f8be7dcbb7c5e507051210839e8b58e95d32887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8be7dcbb7c5e507051210839e8b58e95d32887", "html_url": "https://github.com/rust-lang/rust/commit/2f8be7dcbb7c5e507051210839e8b58e95d32887", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f8be7dcbb7c5e507051210839e8b58e95d32887/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "html_url": "https://github.com/rust-lang/rust/commit/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7"}], "stats": {"total": 33, "additions": 13, "deletions": 20}, "files": [{"sha": "1704e3afc543e08a003d39bbe18f6338ccd73496", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f8be7dcbb7c5e507051210839e8b58e95d32887/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8be7dcbb7c5e507051210839e8b58e95d32887/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=2f8be7dcbb7c5e507051210839e8b58e95d32887", "patch": "@@ -1,11 +1,11 @@\n import std::map::hashmap;\n \n-import ast::{crate, expr_, expr_mac, mac_invoc};\n+import ast::{crate, expr_, expr_mac, mac_invoc, mac_invoc_tt,\n+             tt_delim, tt_flat};\n import fold::*;\n import ext::base::*;\n import ext::qquote::{qq_helper};\n-import parse::parser;\n-import parse::parse_expr_from_source_str;\n+import parse::{parser, parse_expr_from_source_str, new_parser_from_tt};\n \n \n import codemap::{span, expanded_from};\n@@ -49,10 +49,6 @@ fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n                   }\n                 }\n               }\n-              /*\n-              mac_invoc_tt(path, body) {\n-                let p = new_parser_from_tt(cx.sess, cx.cfg, )\n-              }*/\n               _ { cx.span_bug(mac.span, \"naked syntactic bit\") }\n             }\n           }"}, {"sha": "b483e1eb9e4db22195c72dfb77061f11b13327f7", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f8be7dcbb7c5e507051210839e8b58e95d32887/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8be7dcbb7c5e507051210839e8b58e95d32887/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=2f8be7dcbb7c5e507051210839e8b58e95d32887", "patch": "@@ -2,17 +2,14 @@\n import dvec::extensions;\n \n export parse_sess;\n-export new_parse_sess;\n-export new_parse_sess_special_handler;\n+export new_parse_sess, new_parse_sess_special_handler;\n export next_node_id;\n-export new_parser_from_file;\n-export new_parser_etc_from_file;\n+export new_parser_from_file, new_parser_etc_from_file;\n export new_parser_from_source_str;\n-export parse_crate_from_file;\n-export parse_crate_from_crate_file;\n+export new_parser_from_tt;\n+export parse_crate_from_file, parse_crate_from_crate_file;\n export parse_crate_from_source_str;\n-export parse_expr_from_source_str;\n-export parse_item_from_source_str;\n+export parse_expr_from_source_str, parse_item_from_source_str;\n export parse_from_source_str;\n \n import parser::parser;\n@@ -199,7 +196,7 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, +path: str,\n }\n \n fn new_parser_from_tt(sess: parse_sess, cfg: ast::crate_cfg,\n-                      tt: ast::token_tree) -> parser {\n+                      tt: [ast::token_tree]) -> parser {\n     let trdr = lexer::new_tt_reader(sess.span_diagnostic, sess.interner, tt);\n     ret parser(sess, cfg, trdr as reader, parser::SOURCE_FILE)\n }"}, {"sha": "ff4c9f5811e14e10f1381e7f27168a5f52ecd2c8", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f8be7dcbb7c5e507051210839e8b58e95d32887/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8be7dcbb7c5e507051210839e8b58e95d32887/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=2f8be7dcbb7c5e507051210839e8b58e95d32887", "patch": "@@ -4,7 +4,7 @@ import diagnostic;\n import ast::{tt_delim,tt_flat};\n \n export reader, string_reader, new_string_reader, is_whitespace;\n-export tt_reader, new_tt_reader;\n+export tt_reader,  new_tt_reader;\n export nextch, is_eof, bump, get_str_from;\n export string_reader_as_reader, tt_reader_as_reader;\n \n@@ -20,8 +20,8 @@ enum tt_frame_up { /* to break a circularity */\n     tt_frame_up(option<tt_frame>)\n }\n \n+#[doc = \"an unzipping of `token_tree`s\"]\n type tt_frame = @{\n-    /* invariant: readme[idx] is always a tt_flat */\n     readme: [ast::token_tree],\n     mut idx: uint,\n     up: tt_frame_up\n@@ -37,10 +37,10 @@ type tt_reader = @{\n };\n \n fn new_tt_reader(span_diagnostic: diagnostic::span_handler,\n-                 itr: @interner::interner<@str>, src: ast::token_tree)\n+                 itr: @interner::interner<@str>, src: [ast::token_tree])\n     -> tt_reader {\n     let r = @{span_diagnostic: span_diagnostic, interner: itr,\n-              mut cur: @{readme: [src], mut idx: 0u,\n+              mut cur: @{readme: src, mut idx: 0u,\n                          up: tt_frame_up(option::none)},\n               mut cur_tok: token::EOF, /* dummy value, never read */\n               mut cur_chpos: 0u /* dummy value, never read */"}]}