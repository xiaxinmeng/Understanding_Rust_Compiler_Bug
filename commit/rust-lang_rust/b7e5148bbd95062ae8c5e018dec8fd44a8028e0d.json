{"sha": "b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZTUxNDhiYmQ5NTA2MmFlOGM1ZTAxOGRlYzhmZDQ0YTgwMjhlMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-26T20:48:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-26T20:48:43Z"}, "message": "Auto merge of #38314 - japaric:do-not-delete-enable-llvm-backend, r=alexcrichton\n\ninitial SPARC support\n\n### UPDATE\n\nCan now compile `no_std` executables with:\n\n```\n$ cargo new --bin app && cd $_\n\n$ edit Cargo.toml && tail -n2 $_\n[dependencies]\ncore = { path = \"/path/to/rust/src/libcore\" }\n\n$ edit src/main.rs && cat $_\n#![feature(lang_items)]\n#![no_std]\n#![no_main]\n\n#[no_mangle]\npub fn _start() -> ! {\n    loop {}\n}\n\n#[lang = \"panic_fmt\"]\nfn panic_fmt() -> ! {\n    loop {}\n}\n\n$ edit sparc-none-elf.json && cat $_\n{\n  \"arch\": \"sparc\",\n  \"data-layout\": \"E-m:e-p:32:32-i64:64-f128:64-n32-S64\",\n  \"executables\": true,\n  \"llvm-target\": \"sparc\",\n  \"os\": \"none\",\n  \"panic-strategy\": \"abort\",\n  \"target-endian\": \"big\",\n  \"target-pointer-width\": \"32\"\n}\n\n$ cargo rustc --target sparc-none-elf -- -C linker=sparc-unknown-elf-gcc -C link-args=-nostartfiles\n\n$ file target/sparc-none-elf/debug/app\napp: ELF 32-bit MSB executable, SPARC, version 1 (SYSV), statically linked, not stripped\n\n$ sparc-unknown-elf-readelf -h target/sparc-none-elf/debug/app\nELF Header:\n  Magic:   7f 45 4c 46 01 02 01 00 00 00 00 00 00 00 00 00\n  Class:                             ELF32\n  Data:                              2's complement, big endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Sparc\n  Version:                           0x1\n  Entry point address:               0x10074\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          1188 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         2\n  Size of section headers:           40 (bytes)\n  Number of section headers:         14\n  Section header string table index: 11\n\n$ sparc-unknown-elf-objdump -Cd target/sparc-none-elf/debug/app\n\ntarget/sparc-none-elf/debug/app:     file format elf32-sparc\n\nDisassembly of section .text:\n\n00010074 <_start>:\n   10074:       9d e3 bf 98     save  %sp, -104, %sp\n   10078:       10 80 00 02     b  10080 <_start+0xc>\n   1007c:       01 00 00 00     nop\n   10080:       10 80 00 02     b  10088 <_start+0x14>\n   10084:       01 00 00 00     nop\n   10088:       10 80 00 00     b  10088 <_start+0x14>\n   1008c:       01 00 00 00     nop\n```\n\n---\n\nSomeone wants to attempt launching some Rust [into space](https://www.reddit.com/r/rust/comments/5h76oa/c_interop/) but their platform is based on the SPARCv8 architecture. Let's not block them by enabling LLVM's SPARC backend.\n\nSomething very important that they'll also need is the \"cabi\" stuff as they'll be embedding some Rust code into a bigger C application (i.e. heavy use of `extern \"C\"`). The question there is what name(s) should we use for \"target_arch\" as the \"cabi\" implementation [varies according to that parameter](https://github.com/rust-lang/rust/blob/1.13.0/src/librustc_trans/abi.rs#L498-L523).\n\nAFAICT, SPARCv8 is a 32-bit architecture and SPARCv9 is a 64-bit architecture. And, LLVM uses `sparc`, `sparcv9` and `sparcel` for [the architecture triple](https://github.com/rust-lang/llvm/blob/ac1c94226e9fa17005ce7e2dd52dd6d1875f3137/include/llvm/ADT/Triple.h#L67-L69) so perhaps we should use `target_arch = \"sparc\"` (32-bit) and `target_arch = \"sparcv9\"` (64-bit) as well.\n\nr? @alexcrichton This PR only enables this LLVM backend when rustbuild is used. Do I also need to implement this for the old Makefile-based build system? Or are all our nightlies now being generated using rustbuild?\n\ncc @brson", "tree": {"sha": "be1fced780666c172d555c56b72f10416a795fa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be1fced780666c172d555c56b72f10416a795fa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "html_url": "https://github.com/rust-lang/rust/commit/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f536d90c789e973c95dfc4a699c047186e4fb59c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f536d90c789e973c95dfc4a699c047186e4fb59c", "html_url": "https://github.com/rust-lang/rust/commit/f536d90c789e973c95dfc4a699c047186e4fb59c"}, {"sha": "3ae912ac5df770cb5d5ee2a7d021fb1f967c6091", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae912ac5df770cb5d5ee2a7d021fb1f967c6091", "html_url": "https://github.com/rust-lang/rust/commit/3ae912ac5df770cb5d5ee2a7d021fb1f967c6091"}], "stats": {"total": 124, "additions": 121, "deletions": 3}, "files": [{"sha": "09dbd9f8220b0922d32eba5ff3d2e03ddf29312a", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "patch": "@@ -81,7 +81,7 @@ pub fn llvm(build: &Build, target: &str) {\n        .profile(profile)\n        .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n        .define(\"LLVM_TARGETS_TO_BUILD\",\n-               \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430\")\n+               \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc\")\n        .define(\"LLVM_INCLUDE_EXAMPLES\", \"OFF\")\n        .define(\"LLVM_INCLUDE_TESTS\", \"OFF\")\n        .define(\"LLVM_INCLUDE_DOCS\", \"OFF\")"}, {"sha": "e681a81cf0c3f3665d5df23953c144ee02995146", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "patch": "@@ -95,7 +95,8 @@ fn main() {\n     let is_crossed = target != host;\n \n     let optional_components =\n-        [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\", \"jsbackend\", \"msp430\"];\n+        [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\", \"jsbackend\", \"msp430\",\n+         \"sparc\"];\n \n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses."}, {"sha": "69709f72b8b42e00e20e1e57df37312d4d4601ba", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "patch": "@@ -371,6 +371,12 @@ pub fn initialize_available_targets() {\n                  LLVMInitializeMSP430Target,\n                  LLVMInitializeMSP430TargetMC,\n                  LLVMInitializeMSP430AsmPrinter);\n+    init_target!(llvm_component = \"sparc\",\n+                 LLVMInitializeSparcTargetInfo,\n+                 LLVMInitializeSparcTarget,\n+                 LLVMInitializeSparcTargetMC,\n+                 LLVMInitializeSparcAsmPrinter,\n+                 LLVMInitializeSparcAsmParser);\n }\n \n pub fn last_error() -> Option<String> {"}, {"sha": "9c4246e079b749074bb154e64badc4bca42f7f0f", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "patch": "@@ -24,6 +24,7 @@ use cabi_mips;\n use cabi_mips64;\n use cabi_asmjs;\n use cabi_msp430;\n+use cabi_sparc;\n use machine::{llalign_of_min, llsize_of, llsize_of_alloc};\n use type_::Type;\n use type_of;\n@@ -606,6 +607,7 @@ impl FnType {\n             \"asmjs\" => cabi_asmjs::compute_abi_info(ccx, self),\n             \"wasm32\" => cabi_asmjs::compute_abi_info(ccx, self),\n             \"msp430\" => cabi_msp430::compute_abi_info(ccx, self),\n+            \"sparc\" => cabi_sparc::compute_abi_info(ccx, self),\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "25fe53e7ef40f88ab96ba44d3ed6198a9af6fd24", "filename": "src/librustc_trans/cabi_sparc.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Flibrustc_trans%2Fcabi_sparc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Flibrustc_trans%2Fcabi_sparc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_sparc.rs?ref=b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "patch": "@@ -0,0 +1,108 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_upper_case_globals)]\n+\n+use libc::c_uint;\n+use std::cmp;\n+use llvm;\n+use llvm::{Integer, Pointer, Float, Double, Vector};\n+use abi::{self, align_up_to, ArgType, FnType};\n+use context::CrateContext;\n+use type_::Type;\n+\n+fn ty_align(ty: Type) -> usize {\n+    abi::ty_align(ty, 4)\n+}\n+\n+fn ty_size(ty: Type) -> usize {\n+    abi::ty_size(ty, 4)\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n+    if is_reg_ty(ret.ty) {\n+        ret.extend_integer_width_to(32);\n+    } else {\n+        ret.make_indirect(ccx);\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, offset: &mut usize) {\n+    let orig_offset = *offset;\n+    let size = ty_size(arg.ty) * 8;\n+    let mut align = ty_align(arg.ty);\n+\n+    align = cmp::min(cmp::max(align, 4), 8);\n+    *offset = align_up_to(*offset, align);\n+    *offset += align_up_to(size, align * 8) / 8;\n+\n+    if !is_reg_ty(arg.ty) {\n+        arg.cast = Some(struct_ty(ccx, arg.ty));\n+        arg.pad = padding_ty(ccx, align, orig_offset);\n+    } else {\n+        arg.extend_integer_width_to(32);\n+    }\n+}\n+\n+fn is_reg_ty(ty: Type) -> bool {\n+    return match ty.kind() {\n+        Integer\n+        | Pointer\n+        | Float\n+        | Double\n+        | Vector => true,\n+        _ => false\n+    };\n+}\n+\n+fn padding_ty(ccx: &CrateContext, align: usize, offset: usize) -> Option<Type> {\n+    if ((align - 1 ) & offset) > 0 {\n+        Some(Type::i32(ccx))\n+    } else {\n+        None\n+    }\n+}\n+\n+fn coerce_to_int(ccx: &CrateContext, size: usize) -> Vec<Type> {\n+    let int_ty = Type::i32(ccx);\n+    let mut args = Vec::new();\n+\n+    let mut n = size / 32;\n+    while n > 0 {\n+        args.push(int_ty);\n+        n -= 1;\n+    }\n+\n+    let r = size % 32;\n+    if r > 0 {\n+        unsafe {\n+            args.push(Type::from_ref(llvm::LLVMIntTypeInContext(ccx.llcx(), r as c_uint)));\n+        }\n+    }\n+\n+    args\n+}\n+\n+fn struct_ty(ccx: &CrateContext, ty: Type) -> Type {\n+    let size = ty_size(ty) * 8;\n+    Type::struct_(ccx, &coerce_to_int(ccx, size), false)\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    let mut offset = if fty.ret.is_indirect() { 4 } else { 0 };\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() { continue; }\n+        classify_arg_ty(ccx, arg, &mut offset);\n+    }\n+}"}, {"sha": "3a8eef131a2966eadbeb1495eda542c3bcfd3aa3", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "patch": "@@ -106,6 +106,7 @@ mod cabi_msp430;\n mod cabi_powerpc;\n mod cabi_powerpc64;\n mod cabi_s390x;\n+mod cabi_sparc;\n mod cabi_x86;\n mod cabi_x86_64;\n mod cabi_x86_win64;"}, {"sha": "b74f491385820051170dfecf3b9c3b0acb880396", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2016-12-16\n+2016-12-19"}]}