{"sha": "11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "node_id": "C_kwDOAAsO6NoAKDExZWJlNjUxMmI0Yzc3NjMzYzU5ZjhkY2RkNDIxZGYzYjc5ZDFhOWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-01T21:09:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-01T21:09:45Z"}, "message": "Auto merge of #103217 - mejrs:track, r=eholk\n\nTrack where diagnostics were created.\n\nThis implements the `-Ztrack-diagnostics` flag, which uses `#[track_caller]` to track where diagnostics are created. It is meant as a debugging tool much like `-Ztreat-err-as-bug`.\n\nFor example, the following code...\n\n```rust\nstruct A;\nstruct B;\n\nfn main(){\n    let _: A = B;\n}\n```\n...now emits the following error message:\n\n```\nerror[E0308]: mismatched types\n --> src\\main.rs:5:16\n  |\n5 |     let _: A = B;\n  |            -   ^ expected struct `A`, found struct `B`\n  |            |\n  |            expected due to this\n-Ztrack-diagnostics: created at compiler\\rustc_infer\\src\\infer\\error_reporting\\mod.rs:2275:31\n```", "tree": {"sha": "1a36082800b7ea78becadcc3442c3241108ec70d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a36082800b7ea78becadcc3442c3241108ec70d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "html_url": "https://github.com/rust-lang/rust/commit/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab5a2bc7316012ee9b2a4a4f3821673f2677f3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5a2bc7316012ee9b2a4a4f3821673f2677f3d5", "html_url": "https://github.com/rust-lang/rust/commit/ab5a2bc7316012ee9b2a4a4f3821673f2677f3d5"}, {"sha": "cbeb244b0588f8d442514a2b7ab95a6021f9863f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbeb244b0588f8d442514a2b7ab95a6021f9863f", "html_url": "https://github.com/rust-lang/rust/commit/cbeb244b0588f8d442514a2b7ab95a6021f9863f"}], "stats": {"total": 393, "additions": 385, "deletions": 8}, "files": [{"sha": "cf4bcc7c158fcb83cbaa34fe6435046d826118d3", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -1200,6 +1200,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         false,\n         None,\n         false,\n+        false,\n     ));\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n "}, {"sha": "45c017df918e87060cb771ca8ed83cf4d4de8f80", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -12,6 +12,7 @@ use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n+use std::panic::Location;\n \n /// Error type for `Diagnostic`'s `suggestions` field, indicating that\n /// `.disable_suggestions()` was called on the `Diagnostic`.\n@@ -107,6 +108,31 @@ pub struct Diagnostic {\n     /// If diagnostic is from Lint, custom hash function ignores notes\n     /// otherwise hash is based on the all the fields\n     pub is_lint: bool,\n+\n+    /// With `-Ztrack_diagnostics` enabled,\n+    /// we print where in rustc this error was emitted.\n+    pub emitted_at: DiagnosticLocation,\n+}\n+\n+#[derive(Clone, Debug, Encodable, Decodable)]\n+pub struct DiagnosticLocation {\n+    file: Cow<'static, str>,\n+    line: u32,\n+    col: u32,\n+}\n+\n+impl DiagnosticLocation {\n+    #[track_caller]\n+    fn caller() -> Self {\n+        let loc = Location::caller();\n+        DiagnosticLocation { file: loc.file().into(), line: loc.line(), col: loc.column() }\n+    }\n+}\n+\n+impl fmt::Display for DiagnosticLocation {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}:{}:{}\", self.file, self.line, self.col)\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n@@ -173,10 +199,12 @@ impl StringPart {\n }\n \n impl Diagnostic {\n+    #[track_caller]\n     pub fn new<M: Into<DiagnosticMessage>>(level: Level, message: M) -> Self {\n         Diagnostic::new_with_code(level, None, message)\n     }\n \n+    #[track_caller]\n     pub fn new_with_code<M: Into<DiagnosticMessage>>(\n         level: Level,\n         code: Option<DiagnosticId>,\n@@ -192,6 +220,7 @@ impl Diagnostic {\n             args: Default::default(),\n             sort_span: DUMMY_SP,\n             is_lint: false,\n+            emitted_at: DiagnosticLocation::caller(),\n         }\n     }\n "}, {"sha": "ecf8570e81f7131d25f5df080fce350d0c062175", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -133,6 +133,7 @@ mod sealed_level_is_error {\n impl<'a> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     /// Convenience function for internal use, clients should use one of the\n     /// `struct_*` methods on [`Handler`].\n+    #[track_caller]\n     pub(crate) fn new_guaranteeing_error<M: Into<DiagnosticMessage>, const L: Level>(\n         handler: &'a Handler,\n         message: M,\n@@ -196,6 +197,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n         }\n     }\n \n+    #[track_caller]\n     fn make_diagnostic_builder(\n         handler: &Handler,\n         msg: impl Into<DiagnosticMessage>,\n@@ -209,6 +211,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n impl<'a> DiagnosticBuilder<'a, ()> {\n     /// Convenience function for internal use, clients should use one of the\n     /// `struct_*` methods on [`Handler`].\n+    #[track_caller]\n     pub(crate) fn new<M: Into<DiagnosticMessage>>(\n         handler: &'a Handler,\n         level: Level,\n@@ -220,6 +223,7 @@ impl<'a> DiagnosticBuilder<'a, ()> {\n \n     /// Creates a new `DiagnosticBuilder` with an already constructed\n     /// diagnostic.\n+    #[track_caller]\n     pub(crate) fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic) -> Self {\n         debug!(\"Created new diagnostic\");\n         Self {\n@@ -308,6 +312,7 @@ impl EmissionGuarantee for Noted {\n impl<'a> DiagnosticBuilder<'a, !> {\n     /// Convenience function for internal use, clients should use one of the\n     /// `struct_*` methods on [`Handler`].\n+    #[track_caller]\n     pub(crate) fn new_fatal(handler: &'a Handler, message: impl Into<DiagnosticMessage>) -> Self {\n         let diagnostic = Diagnostic::new_with_code(Level::Fatal, None, message);\n         Self::new_diagnostic_fatal(handler, diagnostic)"}, {"sha": "b7b8fe3f25a04c43de3b24f6b93ca162789cd88b", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -16,10 +16,10 @@ use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Styl\n use crate::styled_buffer::StyledBuffer;\n use crate::translation::{to_fluent_args, Translate};\n use crate::{\n-    CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage, FluentBundle, Handler,\n-    LazyFallbackBundle, Level, MultiSpan, SubDiagnostic, SubstitutionHighlight, SuggestionStyle,\n+    diagnostic::DiagnosticLocation, CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage,\n+    FluentBundle, Handler, LazyFallbackBundle, Level, MultiSpan, SubDiagnostic,\n+    SubstitutionHighlight, SuggestionStyle,\n };\n-\n use rustc_lint_defs::pluralize;\n \n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n@@ -64,6 +64,7 @@ impl HumanReadableErrorType {\n         teach: bool,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> EmitterWriter {\n         let (short, color_config) = self.unzip();\n         let color = color_config.suggests_using_colors();\n@@ -77,6 +78,7 @@ impl HumanReadableErrorType {\n             color,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         )\n     }\n }\n@@ -557,6 +559,7 @@ impl Emitter for EmitterWriter {\n             &primary_span,\n             &children,\n             &suggestions,\n+            self.track_diagnostics.then_some(&diag.emitted_at),\n         );\n     }\n \n@@ -650,6 +653,7 @@ pub struct EmitterWriter {\n     diagnostic_width: Option<usize>,\n \n     macro_backtrace: bool,\n+    track_diagnostics: bool,\n }\n \n #[derive(Debug)]\n@@ -669,6 +673,7 @@ impl EmitterWriter {\n         teach: bool,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> EmitterWriter {\n         let dst = Destination::from_stderr(color_config);\n         EmitterWriter {\n@@ -681,6 +686,7 @@ impl EmitterWriter {\n             ui_testing: false,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         }\n     }\n \n@@ -694,6 +700,7 @@ impl EmitterWriter {\n         colored: bool,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n@@ -705,6 +712,7 @@ impl EmitterWriter {\n             ui_testing: false,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         }\n     }\n \n@@ -1327,6 +1335,7 @@ impl EmitterWriter {\n         level: &Level,\n         max_line_num_len: usize,\n         is_secondary: bool,\n+        emitted_at: Option<&DiagnosticLocation>,\n     ) -> io::Result<()> {\n         let mut buffer = StyledBuffer::new();\n \n@@ -1377,7 +1386,6 @@ impl EmitterWriter {\n                 }\n             }\n         }\n-\n         let mut annotated_files = FileWithAnnotatedLines::collect_annotations(self, args, msp);\n \n         // Make sure our primary file comes first\n@@ -1653,6 +1661,12 @@ impl EmitterWriter {\n             }\n         }\n \n+        if let Some(tracked) = emitted_at {\n+            let track = format!(\"-Ztrack-diagnostics: created at {tracked}\");\n+            let len = buffer.num_lines();\n+            buffer.append(len, &track, Style::NoStyle);\n+        }\n+\n         // final step: take our styled buffer, render it, then output it\n         emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n \n@@ -1977,6 +1991,7 @@ impl EmitterWriter {\n         span: &MultiSpan,\n         children: &[SubDiagnostic],\n         suggestions: &[CodeSuggestion],\n+        emitted_at: Option<&DiagnosticLocation>,\n     ) {\n         let max_line_num_len = if self.ui_testing {\n             ANONYMIZED_LINE_NUM.len()\n@@ -1985,7 +2000,16 @@ impl EmitterWriter {\n             num_decimal_digits(n)\n         };\n \n-        match self.emit_message_default(span, message, args, code, level, max_line_num_len, false) {\n+        match self.emit_message_default(\n+            span,\n+            message,\n+            args,\n+            code,\n+            level,\n+            max_line_num_len,\n+            false,\n+            emitted_at,\n+        ) {\n             Ok(()) => {\n                 if !children.is_empty()\n                     || suggestions.iter().any(|s| s.style != SuggestionStyle::CompletelyHidden)\n@@ -2014,6 +2038,7 @@ impl EmitterWriter {\n                             &child.level,\n                             max_line_num_len,\n                             true,\n+                            None,\n                         ) {\n                             panic!(\"failed to emit error: {}\", err);\n                         }\n@@ -2030,6 +2055,7 @@ impl EmitterWriter {\n                                 &Level::Help,\n                                 max_line_num_len,\n                                 true,\n+                                None,\n                             ) {\n                                 panic!(\"failed to emit error: {}\", e);\n                             }"}, {"sha": "c4498eafa4eab1f287cfe1a8699706571f865777", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -45,6 +45,7 @@ pub struct JsonEmitter {\n     json_rendered: HumanReadableErrorType,\n     diagnostic_width: Option<usize>,\n     macro_backtrace: bool,\n+    track_diagnostics: bool,\n }\n \n impl JsonEmitter {\n@@ -57,6 +58,7 @@ impl JsonEmitter {\n         json_rendered: HumanReadableErrorType,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::BufWriter::new(io::stderr())),\n@@ -69,6 +71,7 @@ impl JsonEmitter {\n             json_rendered,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         }\n     }\n \n@@ -79,6 +82,7 @@ impl JsonEmitter {\n         fallback_bundle: LazyFallbackBundle,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(\n@@ -90,6 +94,7 @@ impl JsonEmitter {\n             json_rendered,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         )\n     }\n \n@@ -103,6 +108,7 @@ impl JsonEmitter {\n         json_rendered: HumanReadableErrorType,\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n+        track_diagnostics: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n@@ -115,6 +121,7 @@ impl JsonEmitter {\n             json_rendered,\n             diagnostic_width,\n             macro_backtrace,\n+            track_diagnostics,\n         }\n     }\n \n@@ -350,6 +357,7 @@ impl Diagnostic {\n                 false,\n                 je.diagnostic_width,\n                 je.macro_backtrace,\n+                je.track_diagnostics,\n             )\n             .ui_testing(je.ui_testing)\n             .emit_diagnostic(diag);"}, {"sha": "f131468971b5adbcd66e090b05d21a1f5eb51c55", "filename": "compiler/rustc_errors/src/json/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -59,6 +59,7 @@ fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n             HumanReadableErrorType::Short(ColorConfig::Never),\n             None,\n             false,\n+            false,\n         );\n \n         let span = Span::with_root_ctxt(BytePos(span.0), BytePos(span.1));"}, {"sha": "f390495b53de4fd804099df18f8dd0730dea630c", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -492,6 +492,8 @@ pub struct HandlerFlags {\n     pub macro_backtrace: bool,\n     /// If true, identical diagnostics are reported only once.\n     pub deduplicate_diagnostics: bool,\n+    /// Track where errors are created. Enabled with `-Ztrack-diagnostics`.\n+    pub track_diagnostics: bool,\n }\n \n impl Drop for HandlerInner {\n@@ -559,6 +561,7 @@ impl Handler {\n             false,\n             None,\n             flags.macro_backtrace,\n+            flags.track_diagnostics,\n         ));\n         Self::with_emitter_and_flags(emitter, flags)\n     }\n@@ -664,6 +667,7 @@ impl Handler {\n \n     /// Construct a builder with the `msg` at the level appropriate for the specific `EmissionGuarantee`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_diagnostic<G: EmissionGuarantee>(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -677,6 +681,7 @@ impl Handler {\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_warn(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -693,6 +698,7 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    #[track_caller]\n     pub fn struct_span_warn_with_expectation(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -706,6 +712,7 @@ impl Handler {\n \n     /// Construct a builder at the `Allow` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_allow(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -719,6 +726,7 @@ impl Handler {\n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n     /// Also include a code.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -736,6 +744,7 @@ impl Handler {\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Warning(None), msg)\n     }\n@@ -746,6 +755,7 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    #[track_caller]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -756,12 +766,14 @@ impl Handler {\n \n     /// Construct a builder at the `Allow` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Allow, msg)\n     }\n \n     /// Construct a builder at the `Expect` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -772,6 +784,7 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -784,6 +797,7 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level at the given `span`, with the `msg`, and `code`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -798,6 +812,7 @@ impl Handler {\n     /// Construct a builder at the `Error` level with the `msg`.\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -807,12 +822,14 @@ impl Handler {\n \n     /// This should only be used by `rustc_middle::lint::struct_lint_level`. Do not use it for hard errors.\n     #[doc(hidden)]\n+    #[track_caller]\n     pub fn struct_err_lint(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Error { lint: true }, msg)\n     }\n \n     /// Construct a builder at the `Error` level with the `msg` and the `code`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -825,6 +842,7 @@ impl Handler {\n \n     /// Construct a builder at the `Warn` level with the `msg` and the `code`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -837,6 +855,7 @@ impl Handler {\n \n     /// Construct a builder at the `Fatal` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_fatal(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -849,6 +868,7 @@ impl Handler {\n \n     /// Construct a builder at the `Fatal` level at the given `span`, with the `msg`, and `code`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -862,6 +882,7 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         DiagnosticBuilder::new_fatal(self, msg)\n     }\n@@ -874,6 +895,7 @@ impl Handler {\n \n     /// Construct a builder at the `Note` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_note_without_error(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -882,12 +904,14 @@ impl Handler {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_fatal(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.emit_diag_at_span(Diagnostic::new(Fatal, msg), span);\n         FatalError.raise()\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -899,6 +923,7 @@ impl Handler {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -908,6 +933,7 @@ impl Handler {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -921,11 +947,13 @@ impl Handler {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_warn(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) {\n         self.emit_diag_at_span(Diagnostic::new(Warning(None), msg), span);\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -954,10 +982,12 @@ impl Handler {\n         self.inner.borrow_mut().delay_good_path_bug(msg)\n     }\n \n+    #[track_caller]\n     pub fn span_bug_no_panic(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) {\n         self.emit_diag_at_span(Diagnostic::new(Bug, msg), span);\n     }\n \n+    #[track_caller]\n     pub fn span_note_without_error(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -966,6 +996,7 @@ impl Handler {\n         self.emit_diag_at_span(Diagnostic::new(Note, msg), span);\n     }\n \n+    #[track_caller]\n     pub fn span_note_diag(\n         &self,\n         span: Span,\n@@ -1452,6 +1483,7 @@ impl HandlerInner {\n         }\n     }\n \n+    #[track_caller]\n     fn span_bug(&mut self, sp: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.emit_diag_at_span(Diagnostic::new(Bug, msg), sp);\n         panic::panic_any(ExplicitBug);"}, {"sha": "d82a7a54030c668a3c55bfaaef739b56ce59f509", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -151,6 +151,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n             false,\n             None,\n             false,\n+            false,\n         );\n         let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         handler.span_err(msp, \"foo\");"}, {"sha": "9442ed9d8053a36798a97909733cbc594ea970fc", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -156,6 +156,7 @@ pub struct MissingTypeParams {\n \n // Manual implementation of `IntoDiagnostic` to be able to call `span_to_snippet`.\n impl<'a> IntoDiagnostic<'a> for MissingTypeParams {\n+    #[track_caller]\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = handler.struct_span_err_with_code(\n             self.span,"}, {"sha": "a03e7b0dae527344a17f8edfd6d958cceed0853a", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -690,6 +690,7 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(time_llvm_passes, true);\n     untracked!(time_passes, true);\n     untracked!(trace_macros, true);\n+    untracked!(track_diagnostics, true);\n     untracked!(trim_diagnostic_paths, false);\n     untracked!(ui_testing, true);\n     untracked!(unpretty, Some(\"expanded\".to_string()));"}, {"sha": "ab38a9ccc8f8d8c6addcefc4a162665d7a5a7a42", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -69,6 +69,8 @@ impl<'a> DiagnosticDerive<'a> {\n                     for @Self\n                 where G: rustc_errors::EmissionGuarantee\n             {\n+\n+                #[track_caller]\n                 fn into_diagnostic(\n                     self,\n                     #handler: &'__diagnostic_handler_sess rustc_errors::Handler\n@@ -133,6 +135,7 @@ impl<'a> LintDiagnosticDerive<'a> {\n         let diag = &builder.diag;\n         structure.gen_impl(quote! {\n             gen impl<'__a> rustc_errors::DecorateLint<'__a, ()> for @Self {\n+                #[track_caller]\n                 fn decorate_lint<'__b>(\n                     self,\n                     #diag: &'__b mut rustc_errors::DiagnosticBuilder<'__a, ()>"}, {"sha": "e5b91d566e524be3b54e4faca8e74d9c4cded449", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -603,6 +603,7 @@ pub struct InvalidMetadataFiles {\n }\n \n impl IntoDiagnostic<'_> for InvalidMetadataFiles {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -631,6 +632,7 @@ pub struct CannotFindCrate {\n }\n \n impl IntoDiagnostic<'_> for CannotFindCrate {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,"}, {"sha": "f1ca72de8dbe47d934cc8b8c197c5ed4b4d11ff7", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -39,6 +39,7 @@ pub struct UnusedGenericParams {\n }\n \n impl IntoDiagnostic<'_> for UnusedGenericParams {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,"}, {"sha": "230c42d6d599192827e6d63fb498588942a252dd", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -918,6 +918,7 @@ pub(crate) struct ExpectedIdentifier {\n }\n \n impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'a rustc_errors::Handler,\n@@ -963,6 +964,7 @@ pub(crate) struct ExpectedSemi {\n }\n \n impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedSemi {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'a rustc_errors::Handler,"}, {"sha": "51ae7b9c043c0fa4564628ed0d35834256bbd494", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -736,6 +736,7 @@ pub struct InvalidAttrAtCrateLevel {\n }\n \n impl IntoDiagnostic<'_> for InvalidAttrAtCrateLevel {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -868,6 +869,7 @@ pub struct BreakNonLoop<'a> {\n }\n \n impl<'a> IntoDiagnostic<'_> for BreakNonLoop<'a> {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &rustc_errors::Handler,\n@@ -1005,6 +1007,7 @@ pub struct NakedFunctionsAsmBlock {\n }\n \n impl IntoDiagnostic<'_> for NakedFunctionsAsmBlock {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &rustc_errors::Handler,\n@@ -1128,6 +1131,7 @@ pub struct NoMainErr {\n }\n \n impl<'a> IntoDiagnostic<'a> for NoMainErr {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'a rustc_errors::Handler,\n@@ -1188,6 +1192,7 @@ pub struct DuplicateLangItem {\n }\n \n impl IntoDiagnostic<'_> for DuplicateLangItem {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &rustc_errors::Handler,"}, {"sha": "856ff3d415081cac494a7d7bbd38e0a45f1d0457", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -794,6 +794,7 @@ impl UnstableOptions {\n             report_delayed_bugs: self.report_delayed_bugs,\n             macro_backtrace: self.macro_backtrace,\n             deduplicate_diagnostics: self.deduplicate_diagnostics,\n+            track_diagnostics: self.track_diagnostics,\n         }\n     }\n }"}, {"sha": "e93c4138e61b008eded7cdedcab6f51f4335ff33", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -1587,6 +1587,8 @@ options! {\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n+    track_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n+        \"tracks where in rustc a diagnostic was emitted\"),\n     // Diagnostics are considered side-effects of a query (see `QuerySideEffects`) and are saved\n     // alongside query results and changes to translation options can affect diagnostics - so\n     // translation options should be tracked."}, {"sha": "f9f4f2979c4eac3dd8d12f49d2fab810767ec1ad", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -97,6 +97,7 @@ pub fn feature_err<'a>(\n ///\n /// This variant allows you to control whether it is a library or language feature.\n /// Almost always, you want to use this for a language feature. If so, prefer `feature_err`.\n+#[track_caller]\n pub fn feature_err_issue<'a>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n@@ -332,24 +333,28 @@ impl ParseSess {\n         self.proc_macro_quoted_spans.lock().clone()\n     }\n \n+    #[track_caller]\n     pub fn create_err<'a>(\n         &'a self,\n         err: impl IntoDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         err.into_diagnostic(&self.span_diagnostic)\n     }\n \n+    #[track_caller]\n     pub fn emit_err<'a>(&'a self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n         self.create_err(err).emit()\n     }\n \n+    #[track_caller]\n     pub fn create_warning<'a>(\n         &'a self,\n         warning: impl IntoDiagnostic<'a, ()>,\n     ) -> DiagnosticBuilder<'a, ()> {\n         warning.into_diagnostic(&self.span_diagnostic)\n     }\n \n+    #[track_caller]\n     pub fn emit_warning<'a>(&'a self, warning: impl IntoDiagnostic<'a, ()>) {\n         self.create_warning(warning).emit()\n     }\n@@ -377,6 +382,7 @@ impl ParseSess {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,"}, {"sha": "6d3cda684a62a2b11ff43e739cde88d3268de293", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -286,6 +286,7 @@ impl Session {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_warn<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -294,6 +295,7 @@ impl Session {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -303,6 +305,7 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -312,10 +315,12 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -324,6 +329,7 @@ impl Session {\n         self.diagnostic().struct_warn_with_expectation(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -332,10 +338,12 @@ impl Session {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -344,6 +352,7 @@ impl Session {\n         self.diagnostic().struct_expect(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -352,6 +361,7 @@ impl Session {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -362,12 +372,14 @@ impl Session {\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.parse_sess.struct_err(msg)\n     }\n+    #[track_caller]\n     #[rustc_lint_diagnostics]\n     pub fn struct_err_with_code(\n         &self,\n@@ -377,6 +389,7 @@ impl Session {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -385,6 +398,7 @@ impl Session {\n         self.diagnostic().struct_warn_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -407,6 +421,7 @@ impl Session {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n@@ -424,6 +439,7 @@ impl Session {\n         self.diagnostic().fatal(msg).raise()\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(\n         &self,\n         is_warning: bool,\n@@ -437,6 +453,7 @@ impl Session {\n         }\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -457,12 +474,14 @@ impl Session {\n     pub fn err(&self, msg: impl Into<DiagnosticMessage>) -> ErrorGuaranteed {\n         self.diagnostic().err(msg)\n     }\n+    #[track_caller]\n     pub fn create_err<'a>(\n         &'a self,\n         err: impl IntoDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.parse_sess.create_err(err)\n     }\n+    #[track_caller]\n     pub fn create_feature_err<'a>(\n         &'a self,\n         err: impl IntoDiagnostic<'a>,\n@@ -475,33 +494,40 @@ impl Session {\n         add_feature_diagnostics(&mut err, &self.parse_sess, feature);\n         err\n     }\n+    #[track_caller]\n     pub fn emit_err<'a>(&'a self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n         self.parse_sess.emit_err(err)\n     }\n+    #[track_caller]\n     pub fn create_warning<'a>(\n         &'a self,\n         err: impl IntoDiagnostic<'a, ()>,\n     ) -> DiagnosticBuilder<'a, ()> {\n         self.parse_sess.create_warning(err)\n     }\n+    #[track_caller]\n     pub fn emit_warning<'a>(&'a self, warning: impl IntoDiagnostic<'a, ()>) {\n         self.parse_sess.emit_warning(warning)\n     }\n+    #[track_caller]\n     pub fn create_note<'a>(\n         &'a self,\n         note: impl IntoDiagnostic<'a, Noted>,\n     ) -> DiagnosticBuilder<'a, Noted> {\n         self.parse_sess.create_note(note)\n     }\n+    #[track_caller]\n     pub fn emit_note<'a>(&'a self, note: impl IntoDiagnostic<'a, Noted>) -> Noted {\n         self.parse_sess.emit_note(note)\n     }\n+    #[track_caller]\n     pub fn create_fatal<'a>(\n         &'a self,\n         fatal: impl IntoDiagnostic<'a, !>,\n     ) -> DiagnosticBuilder<'a, !> {\n         self.parse_sess.create_fatal(fatal)\n     }\n+    #[track_caller]\n     pub fn emit_fatal<'a>(&'a self, fatal: impl IntoDiagnostic<'a, !>) -> ! {\n         self.parse_sess.emit_fatal(fatal)\n     }\n@@ -541,6 +567,7 @@ impl Session {\n     }\n     #[allow(rustc::untranslatable_diagnostic)]\n     #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[track_caller]\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().span_warn(sp, msg)\n     }\n@@ -587,6 +614,8 @@ impl Session {\n     pub fn note_without_error(&self, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().note_without_error(msg)\n     }\n+\n+    #[track_caller]\n     pub fn span_note_without_error<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -1213,6 +1242,7 @@ fn default_emitter(\n     fallback_bundle: LazyFallbackBundle,\n ) -> Box<dyn Emitter + sync::Send> {\n     let macro_backtrace = sopts.unstable_opts.macro_backtrace;\n+    let track_diagnostics = sopts.unstable_opts.track_diagnostics;\n     match sopts.error_format {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -1236,6 +1266,7 @@ fn default_emitter(\n                     sopts.unstable_opts.teach,\n                     sopts.diagnostic_width,\n                     macro_backtrace,\n+                    track_diagnostics,\n                 );\n                 Box::new(emitter.ui_testing(sopts.unstable_opts.ui_testing))\n             }\n@@ -1250,6 +1281,7 @@ fn default_emitter(\n                 json_rendered,\n                 sopts.diagnostic_width,\n                 macro_backtrace,\n+                track_diagnostics,\n             )\n             .ui_testing(sopts.unstable_opts.ui_testing),\n         ),\n@@ -1552,11 +1584,18 @@ fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler\n                 false,\n                 None,\n                 false,\n+                false,\n             ))\n         }\n-        config::ErrorOutputType::Json { pretty, json_rendered } => {\n-            Box::new(JsonEmitter::basic(pretty, json_rendered, None, fallback_bundle, None, false))\n-        }\n+        config::ErrorOutputType::Json { pretty, json_rendered } => Box::new(JsonEmitter::basic(\n+            pretty,\n+            json_rendered,\n+            None,\n+            fallback_bundle,\n+            None,\n+            false,\n+            false,\n+        )),\n     };\n     rustc_errors::Handler::with_emitter(true, None, emitter)\n }"}, {"sha": "23c3715860ea6a4669737d2cd479b205a6048aa2", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -67,6 +67,7 @@ pub struct NegativePositiveConflict<'a> {\n }\n \n impl IntoDiagnostic<'_> for NegativePositiveConflict<'_> {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &Handler,"}, {"sha": "893249e88cf7b658b7b4e0b6d020c45ae99d0817", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -166,6 +166,7 @@ pub(crate) fn new_handler(\n                     unstable_opts.teach,\n                     diagnostic_width,\n                     false,\n+                    unstable_opts.track_diagnostics,\n                 )\n                 .ui_testing(unstable_opts.ui_testing),\n             )\n@@ -184,6 +185,7 @@ pub(crate) fn new_handler(\n                     json_rendered,\n                     diagnostic_width,\n                     false,\n+                    unstable_opts.track_diagnostics,\n                 )\n                 .ui_testing(unstable_opts.ui_testing),\n             )"}, {"sha": "7cbe2f1e2273863b3176b34ea83e383cc0b83467", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -551,6 +551,7 @@ pub(crate) fn make_test(\n                 false,\n                 Some(80),\n                 false,\n+                false,\n             )\n             .supports_color();\n \n@@ -564,6 +565,7 @@ pub(crate) fn make_test(\n                 false,\n                 None,\n                 false,\n+                false,\n             );\n \n             // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n@@ -748,6 +750,7 @@ fn check_if_attr_is_complete(source: &str, edition: Edition) -> bool {\n                 false,\n                 None,\n                 false,\n+                false,\n             );\n \n             let handler = Handler::with_emitter(false, None, Box::new(emitter));"}, {"sha": "fcc50a7aba07d5dddcf12f20cdefde6754b38a2e", "filename": "src/test/rustdoc-ui/track-diagnostics.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Frustdoc-ui%2Ftrack-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Frustdoc-ui%2Ftrack-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftrack-diagnostics.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z track-diagnostics\n+// error-pattern: created at\n+\n+// Normalize the emitted location so this doesn't need\n+// updating everytime someone adds or removes a line.\n+// normalize-stderr-test \".rs:\\d+:\\d+\" -> \".rs:LL:CC\"\n+\n+struct A;\n+struct B;\n+const S: A = B;"}, {"sha": "ec30318625311fadb7af2c1017c1add7d216a2f0", "filename": "src/test/rustdoc-ui/track-diagnostics.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Frustdoc-ui%2Ftrack-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Frustdoc-ui%2Ftrack-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftrack-diagnostics.stderr?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,10 @@\n+error[E0308]: mismatched types\n+  --> $DIR/track-diagnostics.rs:LL:CC\n+   |\n+LL | const S: A = B;\n+   |              ^ expected struct `A`, found struct `B`\n+-Ztrack-diagnostics: created at compiler/rustc_infer/src/infer/error_reporting/mod.rs:LL:CC\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "22e37821322885138e2964336c92e90c5c588d1a", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -171,6 +171,7 @@\n     -Z                             time-passes=val -- measure time of each rustc pass (default: no)\n     -Z                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n     -Z                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n+    -Z                       track-diagnostics=val -- tracks where in rustc a diagnostic was emitted\n     -Z                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n     -Z        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n     -Z                          translate-lang=val -- language identifier for diagnostic output"}, {"sha": "61b9137eadd90f3d0de9acdcbde63f8c022df37f", "filename": "src/test/ui/track-diagnostics/track.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Z track-diagnostics\n+// error-pattern: created at\n+\n+// Normalize the emitted location so this doesn't need\n+// updating everytime someone adds or removes a line.\n+// normalize-stderr-test \".rs:\\d+:\\d+\" -> \".rs:LL:CC\"\n+// normalize-stderr-test \"note: rustc .+ running on .+\" -> \"note: rustc $$VERSION running on $$TARGET\"\n+\n+fn main() {\n+    break rust\n+}"}, {"sha": "ba26cf7c7454b50b7987e0f926ae5c5e4409b54f", "filename": "src/test/ui/track-diagnostics/track.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,26 @@\n+error[E0425]: cannot find value `rust` in this scope\n+  --> $DIR/track.rs:LL:CC\n+   |\n+LL |     break rust\n+   |           ^^^^ not found in this scope\n+-Ztrack-diagnostics: created at compiler/rustc_resolve/src/late/diagnostics.rs:LL:CC\n+\n+error[E0268]: `break` outside of a loop\n+  --> $DIR/track.rs:LL:CC\n+   |\n+LL |     break rust\n+   |     ^^^^^^^^^^ cannot `break` outside of a loop\n+-Ztrack-diagnostics: created at compiler/rustc_passes/src/loops.rs:LL:CC\n+\n+error: internal compiler error: It looks like you're trying to break rust; would you like some ICE?\n+\n+note: the compiler expectedly panicked. this is a feature.\n+\n+note: we would appreciate a joke overview: https://github.com/rust-lang/rust/issues/43162#issuecomment-320764675\n+\n+note: rustc $VERSION running on $TARGET\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0268, E0425.\n+For more information about an error, try `rustc --explain E0268`."}, {"sha": "dc105c61d723b36ed722b8dd969e305bb11555cd", "filename": "src/test/ui/track-diagnostics/track2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z track-diagnostics\n+// error-pattern: created at\n+\n+// Normalize the emitted location so this doesn't need\n+// updating everytime someone adds or removes a line.\n+// normalize-stderr-test \".rs:\\d+:\\d+\" -> \".rs:LL:CC\"\n+\n+fn main() {\n+    let _moved @ _from = String::from(\"foo\");\n+}"}, {"sha": "38a621da816440a093cdb1ceed5b00909c37db10", "filename": "src/test/ui/track-diagnostics/track2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.stderr?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,13 @@\n+error[E0382]: use of moved value\n+  --> $DIR/track2.rs:LL:CC\n+   |\n+LL |     let _moved @ _from = String::from(\"foo\");\n+   |         ^^^^^^   -----   ------------------- move occurs because value has type `String`, which does not implement the `Copy` trait\n+   |         |        |\n+   |         |        value moved here\n+   |         value used here after move\n+-Ztrack-diagnostics: created at compiler/rustc_borrowck/src/borrowck_errors.rs:LL:CC\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "0699239503a979ab41704f5e5c046558c1cf19c1", "filename": "src/test/ui/track-diagnostics/track3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack3.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z track-diagnostics\n+// error-pattern: created at\n+\n+// Normalize the emitted location so this doesn't need\n+// updating everytime someone adds or removes a line.\n+// normalize-stderr-test \".rs:\\d+:\\d+\" -> \".rs:LL:CC\"\n+\n+fn main() {\n+    let _unimported = Blah { field: u8 };\n+}"}, {"sha": "dc468d7e8eeb15e6dc664cacbbcf11e6f3f48581", "filename": "src/test/ui/track-diagnostics/track3.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack3.stderr?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,18 @@\n+error[E0422]: cannot find struct, variant or union type `Blah` in this scope\n+  --> $DIR/track3.rs:LL:CC\n+   |\n+LL |     let _unimported = Blah { field: u8 };\n+   |                       ^^^^ not found in this scope\n+-Ztrack-diagnostics: created at compiler/rustc_resolve/src/late/diagnostics.rs:LL:CC\n+\n+error[E0423]: expected value, found builtin type `u8`\n+  --> $DIR/track3.rs:LL:CC\n+   |\n+LL |     let _unimported = Blah { field: u8 };\n+   |                                     ^^ not a value\n+-Ztrack-diagnostics: created at compiler/rustc_resolve/src/late/diagnostics.rs:LL:CC\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0422, E0423.\n+For more information about an error, try `rustc --explain E0422`."}, {"sha": "35eec799bba99d77eb1f0d96416803927bf331a7", "filename": "src/test/ui/track-diagnostics/track4.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack4.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: -Z track-diagnostics\n+// error-pattern: created at\n+\n+// Normalize the emitted location so this doesn't need\n+// updating everytime someone adds or removes a line.\n+// normalize-stderr-test \".rs:\\d+:\\d+\" -> \".rs:LL:CC\"\n+\n+pub onion {\n+    Owo(u8),\n+    Uwu(i8),\n+}\n+\n+fn main() {}"}, {"sha": "c4668444c4bbb17abaecd316d58beff0ab16df18", "filename": "src/test/ui/track-diagnostics/track4.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack4.stderr?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,14 @@\n+error: missing `struct` for struct definition\n+  --> $DIR/track4.rs:LL:CC\n+   |\n+LL | pub onion {\n+   |    ^\n+-Ztrack-diagnostics: created at compiler/rustc_parse/src/parser/diagnostics.rs:LL:CC\n+   |\n+help: add `struct` here to parse `onion` as a public struct\n+   |\n+LL | pub struct onion {\n+   |     ++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "c41d9424e85a9b0cac2a74ee4684249a5b09906e", "filename": "src/test/ui/track-diagnostics/track5.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack5.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Z track-diagnostics\n+// error-pattern: created at\n+\n+// Normalize the emitted location so this doesn't need\n+// updating everytime someone adds or removes a line.\n+// normalize-stderr-test \".rs:\\d+:\\d+\" -> \".rs:LL:CC\"\n+\n+}"}, {"sha": "aa54f92b6c02277c9aeecb15d4753009265efc7d", "filename": "src/test/ui/track-diagnostics/track5.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack5.stderr?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,9 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/track5.rs:LL:CC\n+   |\n+LL | }\n+   | ^ unexpected closing delimiter\n+-Ztrack-diagnostics: created at compiler/rustc_parse/src/lexer/tokentrees.rs:LL:CC\n+\n+error: aborting due to previous error\n+"}, {"sha": "307e3101849a9f2112add44255f9bf27716db276", "filename": "src/test/ui/track-diagnostics/track6.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Z track-diagnostics\n+// error-pattern: created at\n+\n+\n+\n+pub trait Foo {\n+    fn bar();\n+}\n+\n+impl <T> Foo for T {\n+    default fn bar() {}\n+}\n+\n+fn main() {}"}, {"sha": "1c7537633ff23ca90bd4d8f7a5d1855bcdf07055", "filename": "src/test/ui/track-diagnostics/track6.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,13 @@\n+error[E0658]: specialization is unstable\n+  --> $DIR/track6.rs:11:5\n+   |\n+LL |     default fn bar() {}\n+   |     ^^^^^^^^^^^^^^^^^^^\n+-Ztrack-diagnostics: created at $COMPILER_DIR/rustc_session/src/parse.rs:93:5\n+   |\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: add `#![feature(specialization)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "daaab79fef9ae880e1c12d392409d20b5c3409f7", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -691,6 +691,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                     false,\n                     None,\n                     false,\n+                    false,\n                 );\n                 let handler = Handler::with_emitter(false, None, Box::new(emitter));\n                 let sess = ParseSess::with_span_handler(handler, sm);"}, {"sha": "ae54b2078a65b9f1126a92e87ba559fc079d7688", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -179,6 +179,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         false,\n         None,\n         false,\n+        false,\n     ));\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n "}, {"sha": "fa9221ed02d7420efda22c38101df387b9a8ba07", "filename": "src/tools/clippy/tests/ui/track-diagnostics.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Z track-diagnostics\n+// error-pattern: created at\n+\n+// Normalize the emitted location so this doesn't need\n+// updating everytime someone adds or removes a line.\n+// normalize-stderr-test \".rs:\\d+:\\d+\" -> \".rs:LL:CC\"\n+\n+struct A;\n+struct B;\n+const S: A = B;\n+\n+fn main() {}"}, {"sha": "ec30318625311fadb7af2c1017c1add7d216a2f0", "filename": "src/tools/clippy/tests/ui/track-diagnostics.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -0,0 +1,10 @@\n+error[E0308]: mismatched types\n+  --> $DIR/track-diagnostics.rs:LL:CC\n+   |\n+LL | const S: A = B;\n+   |              ^ expected struct `A`, found struct `B`\n+-Ztrack-diagnostics: created at compiler/rustc_infer/src/infer/error_reporting/mod.rs:LL:CC\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6bfec79cd7030a5bfe921b5a24b33e1daf68b2fc", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -134,6 +134,7 @@ fn default_handler(\n             false,\n             None,\n             false,\n+            false,\n         ))\n     };\n     Handler::with_emitter("}]}