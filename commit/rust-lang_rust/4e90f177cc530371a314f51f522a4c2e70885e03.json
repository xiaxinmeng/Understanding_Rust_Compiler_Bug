{"sha": "4e90f177cc530371a314f51f522a4c2e70885e03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlOTBmMTc3Y2M1MzAzNzFhMzE0ZjUxZjUyMmE0YzJlNzA4ODVlMDM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-30T01:05:20Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T16:06:57Z"}, "message": "When `'static` is explicit, suggest constraining argument with it", "tree": {"sha": "5ffac59684f3b131f6a7539fae7341144d44f963", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ffac59684f3b131f6a7539fae7341144d44f963"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e90f177cc530371a314f51f522a4c2e70885e03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e90f177cc530371a314f51f522a4c2e70885e03", "html_url": "https://github.com/rust-lang/rust/commit/4e90f177cc530371a314f51f522a4c2e70885e03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e90f177cc530371a314f51f522a4c2e70885e03/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81c909488eebcba16610402349563380772e0d1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c909488eebcba16610402349563380772e0d1d", "html_url": "https://github.com/rust-lang/rust/commit/81c909488eebcba16610402349563380772e0d1d"}], "stats": {"total": 395, "additions": 237, "deletions": 158}, "files": [{"sha": "9cfa11dd7c813ff7ffdb2aeab7847b821fbdb939", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -2035,8 +2035,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             self.tcx.sess,\n             var_origin.span(),\n             E0495,\n-            \"cannot infer an appropriate lifetime{} \\\n-             due to conflicting requirements\",\n+            \"cannot infer an appropriate lifetime{} due to conflicting requirements\",\n             var_description\n         )\n     }"}, {"sha": "e24535bba5fdc76a6d656163841a7c7e3128135a", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 74, "deletions": 41, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::ty::RegionKind;\n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static impl Trait.\n     pub(super) fn try_report_static_impl_trait(&self) -> Option<ErrorReported> {\n+        debug!(\"try_report_static_impl_trait(error={:?})\", self.error);\n         if let Some(ref error) = self.error {\n             if let RegionResolutionError::SubSupConflict(\n                 _,\n@@ -18,19 +19,24 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 sub_r,\n                 sup_origin,\n                 sup_r,\n-            ) = error.clone()\n+            ) = error\n             {\n+                debug!(\n+                    \"try_report_static_impl_trait(var={:?}, sub={:?} {:?} sup={:?} {:?})\",\n+                    var_origin, sub_origin, sub_r, sup_origin, sup_r\n+                );\n                 let anon_reg_sup = self.tcx().is_suitable_region(sup_r)?;\n+                debug!(\"try_report_static_impl_trait: anon_reg_sup={:?}\", anon_reg_sup);\n                 let fn_return = self.tcx().return_type_impl_or_dyn_trait(anon_reg_sup.def_id)?;\n-                let is_dyn = matches!(fn_return.kind, TyKind::TraitObject(..));\n-                let fn_return_span = fn_return.span;\n-                if sub_r == &RegionKind::ReStatic {\n+                debug!(\"try_report_static_impl_trait: fn_return={:?}\", fn_return);\n+                if **sub_r == RegionKind::ReStatic {\n                     let sp = var_origin.span();\n                     let return_sp = sub_origin.span();\n+                    let param_info = self.find_param_with_region(sup_r, sub_r)?;\n                     let mut err =\n                         self.tcx().sess.struct_span_err(sp, \"cannot infer an appropriate lifetime\");\n-                    let param_info = self.find_param_with_region(sup_r, sub_r)?;\n                     err.span_label(param_info.param_ty_span, \"data with this lifetime...\");\n+                    debug!(\"try_report_static_impl_trait: param_info={:?}\", param_info);\n \n                     // We try to make the output have fewer overlapping spans if possible.\n                     if (sp == sup_origin.span() || !return_sp.overlaps(sup_origin.span()))\n@@ -60,14 +66,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         if sup_r.has_name() { sup_r.to_string() } else { \"'_\".to_owned() };\n                     // only apply this suggestion onto functions with\n                     // explicit non-desugar'able return.\n-                    if fn_return_span.desugaring_kind().is_none() {\n-                        let msg = format!(\n-                            \"to permit non-static references in {} `{} Trait` value, you can add \\\n-                             an explicit bound for {}\",\n-                            if is_dyn { \"a\" } else { \"an\" },\n-                            if is_dyn { \"dyn\" } else { \"impl\" },\n-                            lifetime,\n-                        );\n+                    if fn_return.span.desugaring_kind().is_none() {\n                         // FIXME: account for the need of parens in `&(dyn Trait + '_)`\n                         match fn_return.kind {\n                             TyKind::Def(item_id, _) => {\n@@ -78,46 +77,80 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                                     err.emit();\n                                     return Some(ErrorReported);\n                                 };\n-                                let (span, sugg) = opaque\n+\n+                                if let Some(span) = opaque\n                                     .bounds\n                                     .iter()\n                                     .filter_map(|arg| match arg {\n                                         GenericBound::Outlives(Lifetime {\n                                             name: LifetimeName::Static,\n                                             span,\n                                             ..\n-                                        }) => Some((*span, lifetime_name.clone())),\n+                                        }) => Some(*span),\n                                         _ => None,\n                                     })\n                                     .next()\n-                                    .unwrap_or_else(|| {\n-                                        (\n-                                            fn_return_span.shrink_to_hi(),\n-                                            format!(\" + {}\", lifetime_name),\n-                                        )\n-                                    });\n-\n-                                err.span_suggestion_verbose(\n-                                    span,\n-                                    &msg,\n-                                    sugg,\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            }\n-                            TyKind::TraitObject(_, lt) => {\n-                                let (span, sugg) = match lt.name {\n-                                    LifetimeName::ImplicitObjectLifetimeDefault => (\n-                                        fn_return_span.shrink_to_hi(),\n+                                {\n+                                    err.span_suggestion_verbose(\n+                                        span,\n+                                        \"consider changing the `impl Trait`'s explicit \\\n+                                         `'static` bound\",\n+                                        lifetime_name,\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                    err.span_suggestion_verbose(\n+                                        param_info.param_ty_span,\n+                                        \"alternatively, set an explicit `'static` lifetime to \\\n+                                         this parameter\",\n+                                        param_info.param_ty.to_string(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                } else {\n+                                    err.span_suggestion_verbose(\n+                                        fn_return.span.shrink_to_hi(),\n+                                        &format!(\n+                                            \"to permit non-static references in an `impl Trait` \\\n+                                             value, you can add an explicit bound for {}\",\n+                                            lifetime,\n+                                        ),\n                                         format!(\" + {}\", lifetime_name),\n-                                    ),\n-                                    _ => (lt.span, lifetime_name),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n                                 };\n-                                err.span_suggestion_verbose(\n-                                    span,\n-                                    &msg,\n-                                    sugg,\n-                                    Applicability::MaybeIncorrect,\n-                                );\n+                            }\n+                            TyKind::TraitObject(_, lt) => {\n+                                match lt.name {\n+                                    LifetimeName::ImplicitObjectLifetimeDefault => {\n+                                        err.span_suggestion_verbose(\n+                                            fn_return.span.shrink_to_hi(),\n+                                            &format!(\n+                                                \"to permit non-static references in a trait object \\\n+                                                 value, you can add an explicit bound for {}\",\n+                                                lifetime,\n+                                            ),\n+                                            format!(\" + {}\", lifetime_name),\n+                                            Applicability::MaybeIncorrect,\n+                                        );\n+                                    }\n+                                    _ => {\n+                                        err.span_suggestion_verbose(\n+                                            lt.span,\n+                                            \"consider changing the trait object's explicit \\\n+                                             `'static` bound\",\n+                                            lifetime_name,\n+                                            Applicability::MaybeIncorrect,\n+                                        );\n+                                        err.span_suggestion_verbose(\n+                                            param_info.param_ty_span,\n+                                            &format!(\n+                                                \"alternatively, set an explicit `'static` lifetime \\\n+                                                 in this parameter\",\n+                                            ),\n+                                            param_info.param_ty.to_string(),\n+                                            Applicability::MaybeIncorrect,\n+                                        );\n+                                    }\n+                                }\n                             }\n                             _ => {}\n                         }"}, {"sha": "a2812e117ed39571f9e7e154bfdf27c4f1237143", "filename": "src/librustc_middle/ty/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -247,7 +247,10 @@ impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n     fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n         if let hir::TyKind::TraitObject(\n             _,\n-            hir::Lifetime { name: hir::LifetimeName::ImplicitObjectLifetimeDefault, .. },\n+            hir::Lifetime {\n+                name: hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Static,\n+                ..\n+            },\n         ) = ty.kind\n         {\n             self.0.push(ty);"}, {"sha": "837244b022721c266bd9353b960e2e2b961daf7e", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -22,7 +22,7 @@ fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n //~^ ERROR cannot infer an appropriate lifetime\n \n fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-//~^ ERROR explicit lifetime required in the type of `x`\n+//~^ ERROR cannot infer an appropriate lifetime\n \n fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n //~^ ERROR cannot infer an appropriate lifetime"}, {"sha": "96d4a121c16afaf7de63f2dfefe505b50267f8f1", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 44, "deletions": 31, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -35,10 +35,14 @@ LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               |        ...is required to be `'static` by this...\n    |               data with this lifetime...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 9:1\n+help: consider changing the `impl Trait`'s explicit `'static` bound\n    |\n LL | fn elided2(x: &i32) -> impl Copy + '_ { x }\n    |                                    ^^\n+help: alternatively, set an explicit `'static` lifetime to this parameter\n+   |\n+LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n+   |               ^^^^^^^^^^^^\n \n error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:12:55\n@@ -49,10 +53,14 @@ LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                     |           ...is required to be `'static` by this...\n    |                     data with this lifetime...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the lifetime `'a` as defined on the function body at 12:14\n+help: consider changing the `impl Trait`'s explicit `'static` bound\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                             ^^\n+help: alternatively, set an explicit `'static` lifetime to this parameter\n+   |\n+LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n+   |                     ^^^^^^^^^^^^\n \n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/must_outlive_least_region_or_bound.rs:15:24\n@@ -71,10 +79,14 @@ LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      |           ...is required to be `'static` by this...\n    |                      data with this lifetime...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the lifetime `'a` as defined on the function body at 33:15\n+help: consider changing the `impl Trait`'s explicit `'static` bound\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'a { x }\n    |                                                           ^^\n+help: alternatively, set an explicit `'static` lifetime to this parameter\n+   |\n+LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x }\n+   |                      ^^^^^^^^^^^^\n \n error[E0623]: lifetime mismatch\n   --> $DIR/must_outlive_least_region_or_bound.rs:38:61\n@@ -103,7 +115,7 @@ LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n    |               |                         ...is required to be `'static` by this...\n    |               data with this lifetime...\n    |\n-help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 18:1\n+help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 18:1\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                      ^^^^\n@@ -118,47 +130,48 @@ LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n    |                     |                            ...is required to be `'static` by this...\n    |                     data with this lifetime...\n    |\n-help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the lifetime `'a` as defined on the function body at 21:14\n+help: to permit non-static references in a trait object value, you can add an explicit bound for the lifetime `'a` as defined on the function body at 21:14\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                               ^^^^\n \n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:24:51\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/must_outlive_least_region_or_bound.rs:24:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |               ----                                ^^^^^^^^^^^ lifetime `'static` required\n-   |               |\n-   |               help: add explicit lifetime `'static` to the type of `x`: `&'static i32`\n-\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/must_outlive_least_region_or_bound.rs:27:69\n+   |               ----                                ---------^-\n+   |               |                                   |        |\n+   |               |                                   |        ...and is captured here\n+   |               data with this lifetime...          ...is required to be `'static` by this...\n    |\n-LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                                                                     ^\n+help: consider changing the trait object's explicit `'static` bound\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 27:14...\n-  --> $DIR/must_outlive_least_region_or_bound.rs:27:14\n+LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n+   |                                        ^^\n+help: alternatively, set an explicit `'static` lifetime in this parameter\n    |\n-LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |              ^^\n-note: ...so that the expression is assignable\n+LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |               ^^^^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:27:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                                                                     ^\n-   = note: expected  `&i32`\n-              found  `&'a i32`\n-   = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the expression is assignable\n-  --> $DIR/must_outlive_least_region_or_bound.rs:27:60\n+   |                     -------                                ---------^-\n+   |                     |                                      |        |\n+   |                     |                                      |        ...and is captured here\n+   |                     data with this lifetime...             ...is required to be `'static` by this...\n    |\n-LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                                                            ^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn std::fmt::Debug + 'static)>`\n-              found  `std::boxed::Box<dyn std::fmt::Debug>`\n+help: consider changing the trait object's explicit `'static` bound\n+   |\n+LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n+   |                                                 ^^\n+help: alternatively, set an explicit `'static` lifetime in this parameter\n+   |\n+LL | fn explicit4<'a>(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |                     ^^^^^^^^^^^^\n \n error: aborting due to 12 previous errors\n \n-Some errors have detailed explanations: E0310, E0495, E0621, E0623.\n+Some errors have detailed explanations: E0310, E0621, E0623.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "038df47e1bd984500faff7608d977584fab13982", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -9,7 +9,7 @@ LL |     Box::new(value) as Box<dyn Any>\n    |     |        ...and is captured here\n    |     ...is required to be `'static` by this...\n    |\n-help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 3:1\n+help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 3:1\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any + '_> {\n    |                                          ^^^^"}, {"sha": "555622c9d13c1e678ceea6d525a556d9f72885aa", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -7,7 +7,7 @@ LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n LL |     ss.r\n    |     ^^^^ ...is captured and required to be `'static` here\n    |\n-help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #2 defined on the function body at 14:1\n+help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime #2 defined on the function body at 14:1\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait + '_> {\n    |                                                   ^^^^"}, {"sha": "7e8f78067e08af9d8d699016cb12f2e4026488e3", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -1,21 +1,21 @@\n-error[E0621]: explicit lifetime required in the type of `v`\n+error: lifetime may not live long enough\n   --> $DIR/region-object-lifetime-in-coercion.rs:8:12\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+   |         - let's call the lifetime of this reference `'1`\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n \n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:14:5\n+error: lifetime may not live long enough\n+  --> $DIR/region-object-lifetime-in-coercion.rs:13:5\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+   |         - let's call the lifetime of this reference `'1`\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^ lifetime `'static` required\n+   |     ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/region-object-lifetime-in-coercion.rs:20:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:19:5\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n    |         - let's call the lifetime of this reference `'1`\n@@ -24,7 +24,7 @@ LL |     Box::new(v)\n    |     ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/region-object-lifetime-in-coercion.rs:24:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:23:5\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      -- -- lifetime `'b` defined here\n@@ -37,4 +37,3 @@ LL |     Box::new(v)\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "5d199149c39b860d029bc80728988afe33c76b25", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -5,13 +5,12 @@ trait Foo {}\n impl<'a> Foo for &'a [u8] {}\n \n fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n-    let x: Box<dyn Foo + 'static> = Box::new(v);\n-    //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n+    let x: Box<dyn Foo + 'static> = Box::new(v); //~ ERROR cannot infer an appropriate lifetime\n     x\n }\n \n fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-    Box::new(v) //~ ERROR explicit lifetime required in the type of `v` [E0621]\n+    Box::new(v) //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn c(v: &[u8]) -> Box<dyn Foo> {"}, {"sha": "673300cebc26c1d2ef3bac199e374da825df8bf2", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -1,21 +1,45 @@\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:8:37\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/region-object-lifetime-in-coercion.rs:8:46\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+   |         ----- data with this lifetime...\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n-   |                                     ^^^^^^^^^^^ lifetime `'static` required\n+   |                                     ---------^-\n+   |                                     |        |\n+   |                                     |        ...and is captured here\n+   |                                     ...is required to be `'static` by this...\n+   |\n+help: consider changing the trait object's explicit `'static` bound\n+   |\n+LL | fn a(v: &[u8]) -> Box<dyn Foo + '_> {\n+   |                                 ^^\n+help: alternatively, set an explicit `'static` lifetime in this parameter\n+   |\n+LL | fn a(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n+   |         ^^^^^^^^^^^^^\n \n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:14:5\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/region-object-lifetime-in-coercion.rs:13:14\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+   |         ----- data with this lifetime...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^ lifetime `'static` required\n+   |     ---------^-\n+   |     |        |\n+   |     |        ...and is captured here\n+   |     ...is required to be `'static` by this...\n+   |\n+help: consider changing the trait object's explicit `'static` bound\n+   |\n+LL | fn b(v: &[u8]) -> Box<dyn Foo + '_> {\n+   |                                 ^^\n+help: alternatively, set an explicit `'static` lifetime in this parameter\n+   |\n+LL | fn b(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n+   |         ^^^^^^^^^^^^^\n \n error: cannot infer an appropriate lifetime\n-  --> $DIR/region-object-lifetime-in-coercion.rs:20:14\n+  --> $DIR/region-object-lifetime-in-coercion.rs:19:14\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n    |         ----- data with this lifetime...\n@@ -26,36 +50,36 @@ LL |     Box::new(v)\n    |     |        ...and is captured here\n    |     ...is required to be `'static` by this...\n    |\n-help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 17:1\n+help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 16:1\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                               ^^^^\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/region-object-lifetime-in-coercion.rs:24:14\n+  --> $DIR/region-object-lifetime-in-coercion.rs:23:14\n    |\n LL |     Box::new(v)\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 23:6...\n-  --> $DIR/region-object-lifetime-in-coercion.rs:23:6\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:6...\n+  --> $DIR/region-object-lifetime-in-coercion.rs:22:6\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      ^^\n note: ...so that the expression is assignable\n-  --> $DIR/region-object-lifetime-in-coercion.rs:24:14\n+  --> $DIR/region-object-lifetime-in-coercion.rs:23:14\n    |\n LL |     Box::new(v)\n    |              ^\n    = note: expected `&[u8]`\n               found `&'a [u8]`\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 23:9...\n-  --> $DIR/region-object-lifetime-in-coercion.rs:23:9\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 22:9...\n+  --> $DIR/region-object-lifetime-in-coercion.rs:22:9\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |         ^^\n note: ...so that the expression is assignable\n-  --> $DIR/region-object-lifetime-in-coercion.rs:24:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:23:5\n    |\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^\n@@ -64,5 +88,4 @@ LL |     Box::new(v)\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0495, E0621.\n-For more information about an error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "982ed07232a80b07f83a91e4ca3f9ca37a4dbcc1", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -1,28 +1,22 @@\n-error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n+error: cannot infer an appropriate lifetime\n   --> $DIR/regions-close-object-into-object-2.rs:10:11\n    |\n+LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n+   |                         ------------------ data with this lifetime...\n LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 9:6...\n-  --> $DIR/regions-close-object-into-object-2.rs:9:6\n+   |     ------^^^---------------\n+   |     |     |\n+   |     |     ...and is captured here\n+   |     ...is required to be `'static` by this...\n    |\n-LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n-   |      ^^\n-note: ...so that the type `(dyn A<T> + 'a)` is not borrowed for too long\n-  --> $DIR/regions-close-object-into-object-2.rs:10:11\n+help: consider changing the trait object's explicit `'static` bound\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^\n-   = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the expression is assignable\n-  --> $DIR/regions-close-object-into-object-2.rs:10:5\n+LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'a> {\n+   |                                                            ^^\n+help: alternatively, set an explicit `'static` lifetime in this parameter\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `std::boxed::Box<(dyn X + 'static)>`\n-              found `std::boxed::Box<dyn X>`\n+LL | fn g<'a, T: 'static>(v: std::boxed::Box<(dyn A<T> + 'static)>) -> Box<dyn X + 'static> {\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "1b82098ee13c2a8a9916ca9eae47b521dcfd314a", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -1,28 +1,22 @@\n-error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n+error: cannot infer an appropriate lifetime\n   --> $DIR/regions-close-object-into-object-4.rs:10:11\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |                   ---------------- data with this lifetime...\n LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 9:6...\n-  --> $DIR/regions-close-object-into-object-4.rs:9:6\n+   |     ------^^^---------------\n+   |     |     |\n+   |     |     ...and is captured here\n+   |     ...is required to be `'static` by this...\n    |\n-LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n-   |      ^^\n-note: ...so that the type `(dyn A<U> + 'a)` is not borrowed for too long\n-  --> $DIR/regions-close-object-into-object-4.rs:10:11\n+help: consider changing the trait object's explicit `'static` bound\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^\n-   = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the expression is assignable\n-  --> $DIR/regions-close-object-into-object-4.rs:10:5\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'a> {\n+   |                                                    ^^\n+help: alternatively, set an explicit `'static` lifetime in this parameter\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `std::boxed::Box<(dyn X + 'static)>`\n-              found `std::boxed::Box<dyn X>`\n+LL | fn i<'a, T, U>(v: std::boxed::Box<(dyn A<U> + 'static)>) -> Box<dyn X + 'static> {\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "75890b8581537fc7b6ef6d36a42c00cdc94a232f", "filename": "src/test/ui/regions/regions-proc-bound-capture.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-proc-bound-capture.rs:9:5\n+   |\n+LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n+   |                   - let's call the lifetime of this reference `'1`\n+LL |     // This is illegal, because the region bound on `proc` is 'static.\n+LL |     Box::new(move || { *x })\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8617c0e9da8f76f51a6319847965b265e8aff148", "filename": "src/test/ui/regions/regions-proc-bound-capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -4,9 +4,9 @@ fn borrowed_proc<'a>(x: &'a isize) -> Box<dyn FnMut()->(isize) + 'a> {\n     Box::new(move|| { *x })\n }\n \n-fn static_proc(x: &isize) -> Box<dyn FnMut()->(isize) + 'static> {\n+fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n     // This is illegal, because the region bound on `proc` is 'static.\n-    Box::new(move|| { *x }) //~ ERROR explicit lifetime required in the type of `x` [E0621]\n+    Box::new(move || { *x }) //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() { }"}, {"sha": "e7bbfaababe8a201a483f7b5b3bebb4ac6f74bcd", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -1,12 +1,23 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/regions-proc-bound-capture.rs:9:5\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/regions-proc-bound-capture.rs:9:14\n    |\n-LL | fn static_proc(x: &isize) -> Box<dyn FnMut()->(isize) + 'static> {\n-   |                   ------ help: add explicit lifetime `'static` to the type of `x`: `&'static isize`\n+LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n+   |                   ------ data with this lifetime...\n LL |     // This is illegal, because the region bound on `proc` is 'static.\n-LL |     Box::new(move|| { *x })\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n+LL |     Box::new(move || { *x })\n+   |     ---------^^^^^^^^^^^^^^-\n+   |     |        |\n+   |     |        ...and is captured here\n+   |     ...is required to be `'static` by this...\n+   |\n+help: consider changing the trait object's explicit `'static` bound\n+   |\n+LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + '_> {\n+   |                                                           ^^\n+help: alternatively, set an explicit `'static` lifetime in this parameter\n+   |\n+LL | fn static_proc(x: &'static isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n+   |                   ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "4dc4aac6ceac4346da1d2e1a017b67e29b97edb0", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e90f177cc530371a314f51f522a4c2e70885e03/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=4e90f177cc530371a314f51f522a4c2e70885e03", "patch": "@@ -7,7 +7,7 @@ LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to\n LL |     Box::new(items.iter())\n    |     ---------------^^^^--- ...is captured and required to be `'static` here\n    |\n-help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 6:1\n+help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 6:1\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {\n    |                                                   ^^^^"}]}