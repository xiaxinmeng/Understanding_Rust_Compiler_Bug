{"sha": "f81358d5788f28ed50dd6cb18c275aa6612317ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MTM1OGQ1Nzg4ZjI4ZWQ1MGRkNmNiMThjMjc1YWE2NjEyMzE3Y2U=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-02-10T06:48:13Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-02-10T06:48:13Z"}, "message": "BTree: remove outdated traces of coercions", "tree": {"sha": "2118b4961726a1e31a9bc4a878519d1f958da1bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2118b4961726a1e31a9bc4a878519d1f958da1bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f81358d5788f28ed50dd6cb18c275aa6612317ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f81358d5788f28ed50dd6cb18c275aa6612317ce", "html_url": "https://github.com/rust-lang/rust/commit/f81358d5788f28ed50dd6cb18c275aa6612317ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f81358d5788f28ed50dd6cb18c275aa6612317ce/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4008fe94935d05ffb3a48fc5b7149070bb45550", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4008fe94935d05ffb3a48fc5b7149070bb45550", "html_url": "https://github.com/rust-lang/rust/commit/f4008fe94935d05ffb3a48fc5b7149070bb45550"}], "stats": {"total": 26, "additions": 7, "deletions": 19}, "files": [{"sha": "4ead4417960d261da25d1cfa834d77594e5bab16", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f81358d5788f28ed50dd6cb18c275aa6612317ce/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81358d5788f28ed50dd6cb18c275aa6612317ce/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=f81358d5788f28ed50dd6cb18c275aa6612317ce", "patch": "@@ -1271,7 +1271,7 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            unsafe { Some(self.range.next_unchecked()) }\n+            Some(unsafe { self.range.next_unchecked() })\n         }\n     }\n \n@@ -1302,7 +1302,7 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            unsafe { Some(self.range.next_back_unchecked()) }\n+            Some(unsafe { self.range.next_back_unchecked() })\n         }\n     }\n }\n@@ -1340,8 +1340,7 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            let (k, v) = unsafe { self.range.next_unchecked() };\n-            Some((k, v)) // coerce k from `&mut K` to `&K`\n+            Some(unsafe { self.range.next_unchecked() })\n         }\n     }\n \n@@ -1369,8 +1368,7 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for IterMut<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            let (k, v) = unsafe { self.range.next_back_unchecked() };\n-            Some((k, v)) // coerce k from `&mut K` to `&K`\n+            Some(unsafe { self.range.next_back_unchecked() })\n         }\n     }\n }\n@@ -1692,7 +1690,7 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n     type Item = (&'a K, &'a V);\n \n     fn next(&mut self) -> Option<(&'a K, &'a V)> {\n-        if self.is_empty() { None } else { unsafe { Some(self.next_unchecked()) } }\n+        if self.is_empty() { None } else { Some(unsafe { self.next_unchecked() }) }\n     }\n \n     fn last(mut self) -> Option<(&'a K, &'a V)> {\n@@ -1856,12 +1854,7 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n     type Item = (&'a K, &'a mut V);\n \n     fn next(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        if self.is_empty() {\n-            None\n-        } else {\n-            let (k, v) = unsafe { self.next_unchecked() };\n-            Some((k, v)) // coerce k from `&mut K` to `&K`\n-        }\n+        if self.is_empty() { None } else { Some(unsafe { self.next_unchecked() }) }\n     }\n \n     fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n@@ -1899,12 +1892,7 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        if self.is_empty() {\n-            None\n-        } else {\n-            let (k, v) = unsafe { self.next_back_unchecked() };\n-            Some((k, v)) // coerce k from `&mut K` to `&K`\n-        }\n+        if self.is_empty() { None } else { Some(unsafe { self.next_back_unchecked() }) }\n     }\n }\n "}]}