{"sha": "486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NmJmZmMyM2U0ZjVhMDk2ZjBkZmU5YTM5YmQ5MWYxZDNlYTNiYWI=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-07-03T20:29:47Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-07-04T21:43:49Z"}, "message": "show imported trait on autocompletion of associated items", "tree": {"sha": "2e98fdebf93756deb9705b689149b33fbcedda71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e98fdebf93756deb9705b689149b33fbcedda71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "html_url": "https://github.com/rust-lang/rust/commit/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5c1c8cf2fcfae3e15c8bcf5256e84cad3bd3436", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c1c8cf2fcfae3e15c8bcf5256e84cad3bd3436", "html_url": "https://github.com/rust-lang/rust/commit/e5c1c8cf2fcfae3e15c8bcf5256e84cad3bd3436"}], "stats": {"total": 110, "additions": 74, "deletions": 36}, "files": [{"sha": "49aee62aba697bd4c2cb41912a8591cf98e0660e", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "patch": "@@ -250,7 +250,7 @@ impl Trait for A {}\n fn foo(a: A) { a.$0 }\n \"#,\n             expect![[r#\"\n-                me the_method() fn(&self)\n+                me the_method() (Trait) fn(&self)\n             \"#]],\n         );\n     }\n@@ -265,7 +265,7 @@ impl<T> Trait for T {}\n fn foo(a: &A) { a.$0 }\n \",\n             expect![[r#\"\n-                me the_method() fn(&self)\n+                me the_method() (Trait) fn(&self)\n             \"#]],\n         );\n     }\n@@ -283,7 +283,7 @@ impl Trait for A {}\n fn foo(a: A) { a.$0 }\n \",\n             expect![[r#\"\n-                me the_method() fn(&self)\n+                me the_method() (Trait) fn(&self)\n             \"#]],\n         );\n     }"}, {"sha": "a525343f77be993c1a9d37ff718180251b7ed753", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "patch": "@@ -333,7 +333,7 @@ trait Trait { fn m(); }\n fn foo() { let _ = Trait::$0 }\n \"#,\n             expect![[r#\"\n-                fn m() fn()\n+                fn m() (Trait) fn()\n             \"#]],\n         );\n     }\n@@ -350,7 +350,7 @@ impl Trait for S {}\n fn foo() { let _ = S::$0 }\n \"#,\n             expect![[r#\"\n-                fn m() fn()\n+                fn m() (Trait) fn()\n             \"#]],\n         );\n     }\n@@ -367,7 +367,7 @@ impl Trait for S {}\n fn foo() { let _ = <S as Trait>::$0 }\n \"#,\n             expect![[r#\"\n-                fn m() fn()\n+                fn m() (Trait) fn()\n             \"#]],\n         );\n     }\n@@ -393,14 +393,14 @@ trait Sub: Super {\n fn foo<T: Sub>() { T::$0 }\n \"#,\n             expect![[r#\"\n-                ta SubTy        type SubTy;\n-                ta Ty           type Ty;\n-                ct C2           const C2: ();\n-                fn subfunc()    fn()\n-                me submethod(\u2026) fn(&self)\n-                ct CONST        const CONST: u8;\n-                fn func()       fn()\n-                me method(\u2026)    fn(&self)\n+                ta SubTy (Sub)        type SubTy;\n+                ta Ty (Super)         type Ty;\n+                ct C2 (Sub)           const C2: ();\n+                fn subfunc() (Sub)    fn()\n+                me submethod(\u2026) (Sub) fn(&self)\n+                ct CONST (Super)      const CONST: u8;\n+                fn func() (Super)     fn()\n+                me method(\u2026) (Super)  fn(&self)\n             \"#]],\n         );\n     }\n@@ -433,14 +433,14 @@ impl<T> Sub for Wrap<T> {\n }\n \"#,\n             expect![[r#\"\n-                ta SubTy        type SubTy;\n-                ta Ty           type Ty;\n-                ct CONST        const CONST: u8 = 0;\n-                fn func()       fn()\n-                me method(\u2026)    fn(&self)\n-                ct C2           const C2: () = ();\n-                fn subfunc()    fn()\n-                me submethod(\u2026) fn(&self)\n+                ta SubTy (Sub)        type SubTy;\n+                ta Ty (Super)         type Ty;\n+                ct CONST (Super)      const CONST: u8 = 0;\n+                fn func() (Super)     fn()\n+                me method(\u2026) (Super)  fn(&self)\n+                ct C2 (Sub)           const C2: () = ();\n+                fn subfunc() (Sub)    fn()\n+                me submethod(\u2026) (Sub) fn(&self)\n             \"#]],\n         );\n     }"}, {"sha": "20db851e8fdd6bfbeef973d2bf0773a0fd34ee15", "filename": "crates/ide_completion/src/render/const_.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs?ref=486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "patch": "@@ -1,6 +1,6 @@\n //! Renderer for `const` fields.\n \n-use hir::HasSource;\n+use hir::{AsAssocItem, HasSource, ModuleDef};\n use ide_db::SymbolKind;\n use syntax::{\n     ast::{Const, NameOwner},\n@@ -37,7 +37,7 @@ impl<'a> ConstRender<'a> {\n         let detail = self.detail();\n \n         let mut item =\n-            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name);\n+            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name.clone());\n         item.kind(SymbolKind::Const)\n             .set_documentation(self.ctx.docs(self.const_))\n             .set_deprecated(\n@@ -46,6 +46,17 @@ impl<'a> ConstRender<'a> {\n             )\n             .detail(detail);\n \n+        let db = self.ctx.db();\n+        if let Some(actm) = self.const_.as_assoc_item(db) {\n+            if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n+                let module = self.ctx.completion.scope.module().unwrap();\n+                if let Some(path) = module.find_use_path(db, ModuleDef::Trait(trt)) {\n+                    item.label(format!(\"{} ({})\", name.clone(), path));\n+                    item.insert_text(name.clone());\n+                }\n+            }\n+        }\n+\n         Some(item.build())\n     }\n "}, {"sha": "002d5455768ddacb7dfdec2abf60556f2eb12824", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "patch": "@@ -1,6 +1,6 @@\n //! Renderer for function calls.\n \n-use hir::{HasSource, HirDisplay};\n+use hir::{AsAssocItem, HasSource, HirDisplay, ModuleDef};\n use ide_db::SymbolKind;\n use itertools::Itertools;\n use syntax::ast::Fn;\n@@ -73,9 +73,25 @@ impl<'a> FunctionRender<'a> {\n                 self.ctx.is_deprecated(self.func) || self.ctx.is_deprecated_assoc_item(self.func),\n             )\n             .detail(self.detail())\n-            .add_call_parens(self.ctx.completion, call.clone(), params)\n-            .add_import(import_to_add)\n-            .lookup_by(self.name);\n+            .add_call_parens(self.ctx.completion, call.clone(), params);\n+\n+        if import_to_add.is_none() {\n+            let db = self.ctx.db();\n+            if let Some(actm) = self.func.as_assoc_item(db) {\n+                if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n+                    let module = self.ctx.completion.scope.module().unwrap();\n+                    if let Some(path) = module.find_use_path(db, ModuleDef::Trait(trt)) {\n+                        item.label(format!(\n+                            \"{} ({})\",\n+                            item.clone().build().label().to_owned(),\n+                            path\n+                        ));\n+                    }\n+                }\n+            }\n+        }\n+\n+        item.add_import(import_to_add).lookup_by(self.name);\n \n         let ret_type = self.func.ret_type(self.ctx.db());\n         item.set_relevance(CompletionRelevance {"}, {"sha": "073663e50fc95889d5047f185aa15e260837fc16", "filename": "crates/ide_completion/src/render/type_alias.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "patch": "@@ -1,6 +1,6 @@\n //! Renderer for type aliases.\n \n-use hir::HasSource;\n+use hir::{AsAssocItem, HasSource, ModuleDef};\n use ide_db::SymbolKind;\n use syntax::{\n     ast::{NameOwner, TypeAlias},\n@@ -50,7 +50,7 @@ impl<'a> TypeAliasRender<'a> {\n         let detail = self.detail();\n \n         let mut item =\n-            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name);\n+            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name.clone());\n         item.kind(SymbolKind::TypeAlias)\n             .set_documentation(self.ctx.docs(self.type_alias))\n             .set_deprecated(\n@@ -59,6 +59,17 @@ impl<'a> TypeAliasRender<'a> {\n             )\n             .detail(detail);\n \n+        let db = self.ctx.db();\n+        if let Some(actm) = self.type_alias.as_assoc_item(db) {\n+            if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n+                let module = self.ctx.completion.scope.module().unwrap();\n+                if let Some(path) = module.find_use_path(db, ModuleDef::Trait(trt)) {\n+                    item.label(format!(\"{} ({})\", name.clone(), path));\n+                    item.insert_text(name.clone());\n+                }\n+            }\n+        }\n+\n         Some(item.build())\n     }\n "}, {"sha": "454ef914c1b31284d82cb4e568217a8386b8101c", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "patch": "@@ -126,7 +126,7 @@ fn render_completion_list(completions: Vec<CompletionItem>) -> String {\n         s.chars().count()\n     }\n     let label_width =\n-        completions.iter().map(|it| monospace_width(it.label())).max().unwrap_or_default().min(16);\n+        completions.iter().map(|it| monospace_width(it.label())).max().unwrap_or_default().min(22);\n     completions\n         .into_iter()\n         .map(|it| {"}, {"sha": "8cd5208cc470011f5f415ff330105e3708e9e290", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "patch": "@@ -30,7 +30,7 @@ fn in_mod_item_list() {\n             sn tmod (Test module)\n             sn tfn (Test function)\n             sn macro_rules\n-            ma makro!(\u2026)        #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)           #[macro_export] macro_rules! makro\n         \"##]],\n     )\n }\n@@ -58,9 +58,9 @@ fn in_source_file_item_list() {\n             sn tmod (Test module)\n             sn tfn (Test function)\n             sn macro_rules\n-            ma makro!(\u2026)        #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)           #[macro_export] macro_rules! makro\n             md module\n-            ma makro!(\u2026)        #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)           #[macro_export] macro_rules! makro\n         \"##]],\n     )\n }"}, {"sha": "c34b4b4f852325208b12e4b790ef089ad893f05e", "filename": "crates/ide_completion/src/tests/type_pos.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=486bffc23e4f5a096f0dfe9a39bd91f1d3ea3bab", "patch": "@@ -140,7 +140,7 @@ trait Trait2 {\n fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n \"#,\n         expect![[r#\"\n-            ta Foo =       type Foo;\n+            ta Foo =  (Trait2) type Foo;\n             tp T\n             cp CONST_PARAM\n             tt Trait\n@@ -151,7 +151,7 @@ fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n             md module\n             st Unit\n             ct CONST\n-            ma makro!(\u2026)   macro_rules! makro\n+            ma makro!(\u2026)       macro_rules! makro\n             bt u32\n         \"#]],\n     );"}]}