{"sha": "3805ebeeb9b1416b51f7b9b83fab0438164307f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MDVlYmVlYjliMTQxNmI1MWY3YjliODNmYWIwNDM4MTY0MzA3Zjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-30T20:52:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-07T15:37:47Z"}, "message": "remove use of `from_u32_unchecked`", "tree": {"sha": "12cd17ea4b3e93febfc3143e1d5b370ab31bc86e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12cd17ea4b3e93febfc3143e1d5b370ab31bc86e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3805ebeeb9b1416b51f7b9b83fab0438164307f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3805ebeeb9b1416b51f7b9b83fab0438164307f7", "html_url": "https://github.com/rust-lang/rust/commit/3805ebeeb9b1416b51f7b9b83fab0438164307f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3805ebeeb9b1416b51f7b9b83fab0438164307f7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b6361d29d551367dda8cc56ad98da1147bfb8b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6361d29d551367dda8cc56ad98da1147bfb8b9", "html_url": "https://github.com/rust-lang/rust/commit/3b6361d29d551367dda8cc56ad98da1147bfb8b9"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "b5ec1ad36ab7efbb903d133562ba6edc12c86762", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3805ebeeb9b1416b51f7b9b83fab0438164307f7/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805ebeeb9b1416b51f7b9b83fab0438164307f7/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3805ebeeb9b1416b51f7b9b83fab0438164307f7", "patch": "@@ -1274,9 +1274,7 @@ impl DebruijnIndex {\n     /// you would need to shift the index for `'a` into 1 new binder.\n     #[must_use]\n     pub fn shifted_in(self, amount: u32) -> DebruijnIndex {\n-        unsafe {\n-            DebruijnIndex::from_u32_unchecked(self.as_u32() + amount)\n-        }\n+        DebruijnIndex::from_u32(self.as_u32() + amount)\n     }\n \n     /// Update this index in place by shifting it \"in\" through\n@@ -1289,9 +1287,7 @@ impl DebruijnIndex {\n     /// `amount` number of new binders.\n     #[must_use]\n     pub fn shifted_out(self, amount: u32) -> DebruijnIndex {\n-        unsafe {\n-            DebruijnIndex::from_u32_unchecked(self.as_u32() - amount)\n-        }\n+        DebruijnIndex::from_u32(self.as_u32() - amount)\n     }\n \n     /// Update in place by shifting out from `amount` binders."}, {"sha": "9240eaec3b4b5493e8da221393eaea70aff277a1", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3805ebeeb9b1416b51f7b9b83fab0438164307f7/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805ebeeb9b1416b51f7b9b83fab0438164307f7/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=3805ebeeb9b1416b51f7b9b83fab0438164307f7", "patch": "@@ -104,7 +104,7 @@ macro_rules! newtype_index {\n         impl $type {\n             $v const MAX_AS_U32: u32 = $max;\n \n-            $v const MAX: $type = unsafe { $type::from_u32_unchecked($max) };\n+            $v const MAX: $type = $type::from_u32_const($max);\n \n             #[inline]\n             $v fn from_usize(value: usize) -> Self {\n@@ -122,6 +122,24 @@ macro_rules! newtype_index {\n                 }\n             }\n \n+            /// Hacky variant of `from_u32` for use in constants.\n+            /// This version checks the \"max\" constraint by using an\n+            /// invalid array dereference.\n+            #[inline]\n+            $v const fn from_u32_const(value: u32) -> Self {\n+                // This will fail at const eval time unless `value <=\n+                // max` is true (in which case we get the index 0).\n+                // It will also fail at runtime, of course, but in a\n+                // kind of wacky way.\n+                let _ = [\"out of range value used\"][\n+                    !(value <= $max) as usize\n+                ];\n+\n+                unsafe {\n+                    $type::from_u32_unchecked(value)\n+                }\n+            }\n+\n             #[inline]\n             $v const unsafe fn from_u32_unchecked(value: u32) -> Self {\n                 $type { private: ::std::num::NonZeroU32::new_unchecked(value + 1) }\n@@ -424,7 +442,7 @@ macro_rules! newtype_index {\n                    const $name:ident = $constant:expr,\n                    $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n-        pub const $name: $type = unsafe { $type::from_u32_unchecked($constant) };\n+        pub const $name: $type = $type::from_u32_const($constant);\n         newtype_index!(\n             @derives      [$($derives,)*]\n             @type         [$type]"}]}