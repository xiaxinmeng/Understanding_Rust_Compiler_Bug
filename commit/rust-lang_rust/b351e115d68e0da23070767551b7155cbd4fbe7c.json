{"sha": "b351e115d68e0da23070767551b7155cbd4fbe7c", "node_id": "C_kwDOAAsO6NoAKGIzNTFlMTE1ZDY4ZTBkYTIzMDcwNzY3NTUxYjcxNTVjYmQ0ZmJlN2M", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-23T15:23:13Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-24T08:38:34Z"}, "message": "Move cfg attrs up to the mod definitions to disable sourcegen", "tree": {"sha": "ad291d2301be66c65a355dcd1a6863a08c626d06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad291d2301be66c65a355dcd1a6863a08c626d06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b351e115d68e0da23070767551b7155cbd4fbe7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b351e115d68e0da23070767551b7155cbd4fbe7c", "html_url": "https://github.com/rust-lang/rust/commit/b351e115d68e0da23070767551b7155cbd4fbe7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b351e115d68e0da23070767551b7155cbd4fbe7c/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bffdf262716a9067b27063aacc559128259211b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bffdf262716a9067b27063aacc559128259211b", "html_url": "https://github.com/rust-lang/rust/commit/0bffdf262716a9067b27063aacc559128259211b"}], "stats": {"total": 39, "additions": 7, "deletions": 32}, "files": [{"sha": "9cd66c6b3b07bdb9c1cd8550dac2e58f3fd5cc43", "filename": "crates/ide-assists/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fide-assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fide-assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests.rs?ref=b351e115d68e0da23070767551b7155cbd4fbe7c", "patch": "@@ -1,5 +1,6 @@\n-mod sourcegen;\n mod generated;\n+#[cfg(not(feature = \"in-rust-tree\"))]\n+mod sourcegen;\n \n use expect_test::expect;\n use hir::{db::DefDatabase, Semantics};"}, {"sha": "070b83d3c16b17f36aad45ddd055fefb0bc49927", "filename": "crates/ide-assists/src/tests/sourcegen.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs?ref=b351e115d68e0da23070767551b7155cbd4fbe7c", "patch": "@@ -1,12 +1,9 @@\n //! Generates `assists.md` documentation.\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n use std::{fmt, fs, path::Path};\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n use test_utils::project_root;\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[test]\n fn sourcegen_assists_docs() {\n     let assists = Assist::collect();\n@@ -63,23 +60,20 @@ r#####\"\n     }\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n struct Section {\n     doc: String,\n     before: String,\n     after: String,\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n struct Assist {\n     id: String,\n     location: sourcegen::Location,\n     sections: Vec<Section>,\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n impl Assist {\n     fn collect() -> Vec<Assist> {\n         let handlers_dir = project_root().join(\"crates/ide-assists/src/handlers\");\n@@ -144,7 +138,6 @@ impl Assist {\n     }\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n impl fmt::Display for Assist {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let _ = writeln!(\n@@ -179,15 +172,13 @@ impl fmt::Display for Assist {\n     }\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n fn hide_hash_comments(text: &str) -> String {\n     text.split('\\n') // want final newline\n         .filter(|&it| !(it.starts_with(\"# \") || it == \"#\"))\n         .map(|it| format!(\"{}\\n\", it))\n         .collect()\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n fn reveal_hash_comments(text: &str) -> String {\n     text.split('\\n') // want final newline\n         .map(|it| {"}, {"sha": "7312bca32fed99151c7fe9711a1437f3ba5b4aa4", "filename": "crates/ide-diagnostics/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs?ref=b351e115d68e0da23070767551b7155cbd4fbe7c", "patch": "@@ -1,3 +1,4 @@\n+#[cfg(not(feature = \"in-rust-tree\"))]\n mod sourcegen;\n \n use expect_test::Expect;"}, {"sha": "ec6558a46efb4d67fa316df736d784aa610fa55f", "filename": "crates/ide-diagnostics/src/tests/sourcegen.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs?ref=b351e115d68e0da23070767551b7155cbd4fbe7c", "patch": "@@ -1,12 +1,9 @@\n //! Generates `assists.md` documentation.\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n use std::{fmt, fs, io, path::PathBuf};\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n use sourcegen::project_root;\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[test]\n fn sourcegen_diagnostic_docs() {\n     let diagnostics = Diagnostic::collect().unwrap();\n@@ -17,15 +14,13 @@ fn sourcegen_diagnostic_docs() {\n     fs::write(&dst, &contents).unwrap();\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n struct Diagnostic {\n     id: String,\n     location: sourcegen::Location,\n     doc: String,\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n impl Diagnostic {\n     fn collect() -> io::Result<Vec<Diagnostic>> {\n         let handlers_dir = project_root().join(\"crates/ide-diagnostics/src/handlers\");\n@@ -56,7 +51,6 @@ impl Diagnostic {\n     }\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n fn is_valid_diagnostic_name(diagnostic: &str) -> Result<(), String> {\n     let diagnostic = diagnostic.trim();\n     if diagnostic.find(char::is_whitespace).is_some() {\n@@ -72,7 +66,6 @@ fn is_valid_diagnostic_name(diagnostic: &str) -> Result<(), String> {\n     Ok(())\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n impl fmt::Display for Diagnostic {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         writeln!(f, \"=== {}\\n**Source:** {}\\n{}\", self.id, self.location, self.doc)"}, {"sha": "4cc46af1b17c577debd33b38f218f7c55151b4e8", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=b351e115d68e0da23070767551b7155cbd4fbe7c", "patch": "@@ -10,10 +10,11 @@\n \n #![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n mod sourcegen;\n-mod tidy;\n-mod testdir;\n mod support;\n+mod testdir;\n+mod tidy;\n \n use std::{collections::HashMap, path::PathBuf, time::Instant};\n "}, {"sha": "e6ac018a05feaf07173992fff3602c3b25f37996", "filename": "crates/rust-analyzer/tests/slow-tests/sourcegen.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs?ref=b351e115d68e0da23070767551b7155cbd4fbe7c", "patch": "@@ -1,9 +1,7 @@\n //! Generates `assists.md` documentation.\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n use std::{fmt, fs, io, path::PathBuf};\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[test]\n fn sourcegen_feature_docs() {\n     let features = Feature::collect().unwrap();\n@@ -19,15 +17,13 @@ fn sourcegen_feature_docs() {\n     fs::write(&dst, &contents).unwrap();\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n struct Feature {\n     id: String,\n     location: sourcegen::Location,\n     doc: String,\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n impl Feature {\n     fn collect() -> io::Result<Vec<Feature>> {\n         let crates_dir = sourcegen::project_root().join(\"crates\");\n@@ -58,7 +54,6 @@ impl Feature {\n     }\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n fn is_valid_feature_name(feature: &str) -> Result<(), String> {\n     'word: for word in feature.split_whitespace() {\n         for short in [\"to\", \"and\"] {\n@@ -78,7 +73,6 @@ fn is_valid_feature_name(feature: &str) -> Result<(), String> {\n     Ok(())\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n impl fmt::Display for Feature {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         writeln!(f, \"=== {}\\n**Source:** {}\\n{}\", self.id, self.location, self.doc)"}, {"sha": "58fba8cfa8f05ccda4c4e063cdcda733806b4848", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=b351e115d68e0da23070767551b7155cbd4fbe7c", "patch": "@@ -1,3 +1,4 @@\n+#[cfg(not(feature = \"in-rust-tree\"))]\n mod ast_src;\n #[cfg(not(feature = \"in-rust-tree\"))]\n mod sourcegen_ast;"}, {"sha": "cf5be1c30fba2ef47bc3c5891747735c73a76460", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b351e115d68e0da23070767551b7155cbd4fbe7c/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=b351e115d68e0da23070767551b7155cbd4fbe7c", "patch": "@@ -1,6 +1,5 @@\n //! Defines input for code generation process.\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n pub(crate) struct KindsSrc<'a> {\n     pub(crate) punct: &'a [(&'a str, &'a str)],\n     pub(crate) keywords: &'a [&'a str],\n@@ -10,7 +9,6 @@ pub(crate) struct KindsSrc<'a> {\n     pub(crate) nodes: &'a [&'a str],\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {\n     punct: &[\n         (\";\", \"SEMICOLON\"),\n@@ -218,15 +216,13 @@ pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {\n     ],\n };\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Default, Debug)]\n pub(crate) struct AstSrc {\n     pub(crate) tokens: Vec<String>,\n     pub(crate) nodes: Vec<AstNodeSrc>,\n     pub(crate) enums: Vec<AstEnumSrc>,\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n pub(crate) struct AstNodeSrc {\n     pub(crate) doc: Vec<String>,\n@@ -235,21 +231,18 @@ pub(crate) struct AstNodeSrc {\n     pub(crate) fields: Vec<Field>,\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug, Eq, PartialEq)]\n pub(crate) enum Field {\n     Token(String),\n     Node { name: String, ty: String, cardinality: Cardinality },\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug, Eq, PartialEq)]\n pub(crate) enum Cardinality {\n     Optional,\n     Many,\n }\n \n-#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n pub(crate) struct AstEnumSrc {\n     pub(crate) doc: Vec<String>,"}]}