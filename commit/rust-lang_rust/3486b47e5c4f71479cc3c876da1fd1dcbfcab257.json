{"sha": "3486b47e5c4f71479cc3c876da1fd1dcbfcab257", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ODZiNDdlNWM0ZjcxNDc5Y2MzYzg3NmRhMWZkMWRjYmZjYWIyNTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T16:43:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T16:43:55Z"}, "message": "Simplify", "tree": {"sha": "d7e2a7e46f9a234bcd8edb1e95865be262c2930d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e2a7e46f9a234bcd8edb1e95865be262c2930d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3486b47e5c4f71479cc3c876da1fd1dcbfcab257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3486b47e5c4f71479cc3c876da1fd1dcbfcab257", "html_url": "https://github.com/rust-lang/rust/commit/3486b47e5c4f71479cc3c876da1fd1dcbfcab257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3486b47e5c4f71479cc3c876da1fd1dcbfcab257/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f751a0e5da5dd488612e25abfc545c259050e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f751a0e5da5dd488612e25abfc545c259050e7", "html_url": "https://github.com/rust-lang/rust/commit/21f751a0e5da5dd488612e25abfc545c259050e7"}], "stats": {"total": 85, "additions": 14, "deletions": 71}, "files": [{"sha": "f786fb87f5eabea0f4409339b9f1f05be308205b", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 13, "deletions": 57, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3486b47e5c4f71479cc3c876da1fd1dcbfcab257/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3486b47e5c4f71479cc3c876da1fd1dcbfcab257/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=3486b47e5c4f71479cc3c876da1fd1dcbfcab257", "patch": "@@ -61,9 +61,7 @@ use std::{str::FromStr, sync::Arc};\n \n use ra_cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n-use test_utils::{\n-    extract_offset, parse_fixture, parse_single_fixture, FixtureEntry, CURSOR_MARKER,\n-};\n+use test_utils::{extract_offset, parse_fixture, FixtureEntry, CURSOR_MARKER};\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n@@ -76,20 +74,21 @@ pub const WORKSPACE: SourceRootId = SourceRootId(0);\n pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n     fn with_single_file(text: &str) -> (Self, FileId) {\n         let mut db = Self::default();\n-        let file_id = with_single_file(&mut db, text);\n-        (db, file_id)\n+        let (_, files) = with_files(&mut db, text);\n+        assert!(files.len() == 1);\n+        (db, files[0])\n     }\n \n     fn with_files(ra_fixture: &str) -> Self {\n         let mut db = Self::default();\n-        let pos = with_files(&mut db, ra_fixture);\n+        let (pos, _) = with_files(&mut db, ra_fixture);\n         assert!(pos.is_none());\n         db\n     }\n \n     fn with_position(ra_fixture: &str) -> (Self, FilePosition) {\n         let mut db = Self::default();\n-        let pos = with_files(&mut db, ra_fixture);\n+        let (pos, _) = with_files(&mut db, ra_fixture);\n         (db, pos.unwrap())\n     }\n \n@@ -104,54 +103,11 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n \n impl<DB: SourceDatabaseExt + Default + 'static> WithFixture for DB {}\n \n-fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId {\n-    let file_id = FileId(0);\n-    let mut file_set = vfs::file_set::FileSet::default();\n-    file_set.insert(file_id, vfs::VfsPath::new_virtual_path(\"/main.rs\".to_string()));\n-\n-    let source_root = SourceRoot::new_local(file_set);\n-\n-    let fixture = parse_single_fixture(ra_fixture);\n-\n-    let crate_graph = if let Some(entry) = fixture {\n-        let meta = match ParsedMeta::from(&entry) {\n-            ParsedMeta::File(it) => it,\n-        };\n-\n-        let mut crate_graph = CrateGraph::default();\n-        crate_graph.add_crate_root(\n-            file_id,\n-            meta.edition,\n-            meta.krate.map(|name| {\n-                CrateName::new(&name).expect(\"Fixture crate name should not contain dashes\")\n-            }),\n-            meta.cfg,\n-            meta.env,\n-            Default::default(),\n-        );\n-        crate_graph\n-    } else {\n-        let mut crate_graph = CrateGraph::default();\n-        crate_graph.add_crate_root(\n-            file_id,\n-            Edition::Edition2018,\n-            None,\n-            CfgOptions::default(),\n-            Env::default(),\n-            Default::default(),\n-        );\n-        crate_graph\n-    };\n-\n-    db.set_file_text(file_id, Arc::new(ra_fixture.to_string()));\n-    db.set_file_source_root(file_id, WORKSPACE);\n-    db.set_source_root(WORKSPACE, Arc::new(source_root));\n-    db.set_crate_graph(Arc::new(crate_graph));\n-\n-    file_id\n-}\n-\n-fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosition> {\n+fn with_files(\n+    db: &mut dyn SourceDatabaseExt,\n+    fixture: &str,\n+) -> (Option<FilePosition>, Vec<FileId>) {\n+    let mut files = Vec::new();\n     let fixture = parse_fixture(fixture);\n \n     let mut crate_graph = CrateGraph::default();\n@@ -204,7 +160,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n         db.set_file_source_root(file_id, source_root_id);\n         let path = VfsPath::new_virtual_path(meta.path);\n         file_set.insert(file_id, path.into());\n-\n+        files.push(file_id);\n         file_id.0 += 1;\n     }\n \n@@ -229,7 +185,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n     db.set_source_root(source_root_id, Arc::new(SourceRoot::new_local(file_set)));\n     db.set_crate_graph(Arc::new(crate_graph));\n \n-    file_position\n+    (file_position, files)\n }\n \n enum ParsedMeta {"}, {"sha": "25d80806b8959a8f8598cbc8dbd14be6f9e75de8", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3486b47e5c4f71479cc3c876da1fd1dcbfcab257/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3486b47e5c4f71479cc3c876da1fd1dcbfcab257/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=3486b47e5c4f71479cc3c876da1fd1dcbfcab257", "patch": "@@ -13,19 +13,6 @@ pub struct FixtureEntry {\n     pub env: FxHashMap<String, String>,\n }\n \n-/// Same as `parse_fixture`, except it allow empty fixture\n-pub fn parse_single_fixture(ra_fixture: &str) -> Option<FixtureEntry> {\n-    if !ra_fixture.lines().any(|it| it.trim_start().starts_with(\"//-\")) {\n-        return None;\n-    }\n-\n-    let fixtures = parse_fixture(ra_fixture);\n-    if fixtures.len() > 1 {\n-        panic!(\"too many fixtures\");\n-    }\n-    fixtures.into_iter().nth(0)\n-}\n-\n /// Parses text which looks like this:\n ///\n ///  ```not_rust"}, {"sha": "d44b2f9ab05ff8e3a70e1b6016a1c831a3c48993", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3486b47e5c4f71479cc3c876da1fd1dcbfcab257/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3486b47e5c4f71479cc3c876da1fd1dcbfcab257/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=3486b47e5c4f71479cc3c876da1fd1dcbfcab257", "patch": "@@ -22,7 +22,7 @@ pub use difference::Changeset as __Changeset;\n pub use ra_cfg::CfgOptions;\n pub use rustc_hash::FxHashMap;\n \n-pub use crate::fixture::{parse_fixture, parse_single_fixture, FixtureEntry};\n+pub use crate::fixture::{parse_fixture, FixtureEntry};\n \n pub const CURSOR_MARKER: &str = \"<|>\";\n "}]}