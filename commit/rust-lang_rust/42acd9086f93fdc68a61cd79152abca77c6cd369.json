{"sha": "42acd9086f93fdc68a61cd79152abca77c6cd369", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYWNkOTA4NmY5M2ZkYzY4YTYxY2Q3OTE1MmFiY2E3N2M2Y2QzNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-19T11:54:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-19T11:54:40Z"}, "message": "Auto merge of #72346 - Dylan-DPC:rollup-vp418xs, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71886 (Stabilize saturating_abs and saturating_neg)\n - #72066 (correctly handle uninferred consts)\n - #72068 (Ignore arguments when looking for `IndexMut` for subsequent `mut` obligation)\n - #72338 (Fix ICE in -Zsave-analysis)\n - #72344 (Assert doc wording)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "66bd44168250f99b548ae126d68a1f3f05c748ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66bd44168250f99b548ae126d68a1f3f05c748ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42acd9086f93fdc68a61cd79152abca77c6cd369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42acd9086f93fdc68a61cd79152abca77c6cd369", "html_url": "https://github.com/rust-lang/rust/commit/42acd9086f93fdc68a61cd79152abca77c6cd369", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42acd9086f93fdc68a61cd79152abca77c6cd369/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "914adf04af1c1a984707f778da3d04590c03d144", "url": "https://api.github.com/repos/rust-lang/rust/commits/914adf04af1c1a984707f778da3d04590c03d144", "html_url": "https://github.com/rust-lang/rust/commit/914adf04af1c1a984707f778da3d04590c03d144"}, {"sha": "745ca2afae768b5228bee15eeb37531313a5a435", "url": "https://api.github.com/repos/rust-lang/rust/commits/745ca2afae768b5228bee15eeb37531313a5a435", "html_url": "https://github.com/rust-lang/rust/commit/745ca2afae768b5228bee15eeb37531313a5a435"}], "stats": {"total": 170, "additions": 154, "deletions": 16}, "files": [{"sha": "13a569e81d0f2e93e312ae13493f03395826ec62", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -1243,7 +1243,7 @@ pub(crate) mod builtin {\n     /// be disabled. See [`debug_assert!`] for assertions that are not enabled in\n     /// release builds by default.\n     ///\n-    /// Unsafe code relies on `assert!` to enforce run-time invariants that, if\n+    /// Unsafe code may rely on `assert!` to enforce run-time invariants that, if\n     /// violated could lead to unsafety.\n     ///\n     /// Other use-cases of `assert!` include testing and enforcing run-time"}, {"sha": "c164e893b4fbf295dd165a2e4e4a71878cc9b6cd", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -1165,8 +1165,7 @@ instead of overflowing.\n Basic usage:\n \n ```\n-\", $Feature, \"#![feature(saturating_neg)]\n-assert_eq!(100\", stringify!($SelfT), \".saturating_neg(), -100);\n+\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_neg(), -100);\n assert_eq!((-100\", stringify!($SelfT), \").saturating_neg(), 100);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_neg(), \", stringify!($SelfT),\n \"::MAX);\n@@ -1175,7 +1174,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_neg(), \", stringify!($SelfT)\n $EndFeature, \"\n ```\"),\n \n-            #[unstable(feature = \"saturating_neg\", issue = \"59983\")]\n+            #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n             #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[inline]\n             pub const fn saturating_neg(self) -> Self {\n@@ -1192,8 +1191,7 @@ MIN` instead of overflowing.\n Basic usage:\n \n ```\n-\", $Feature, \"#![feature(saturating_neg)]\n-assert_eq!(100\", stringify!($SelfT), \".saturating_abs(), 100);\n+\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_abs(), 100);\n assert_eq!((-100\", stringify!($SelfT), \").saturating_abs(), 100);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_abs(), \", stringify!($SelfT),\n \"::MAX);\n@@ -1202,7 +1200,7 @@ assert_eq!((\", stringify!($SelfT), \"::MIN + 1).saturating_abs(), \", stringify!($\n $EndFeature, \"\n ```\"),\n \n-            #[unstable(feature = \"saturating_neg\", issue = \"59983\")]\n+            #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n             #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[inline]\n             pub const fn saturating_abs(self) -> Self {"}, {"sha": "6a8e908b9c6183b58285e95a69bd6808223f46c9", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -17,7 +17,6 @@\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]\n-#![feature(saturating_neg)]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]\n #![feature(specialization)]"}, {"sha": "dfc7177921d316fc8d50666c53cfa0cfc6f97245", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -172,8 +172,19 @@ fn closure_args(fn_sig: &ty::PolyFnSig<'_>) -> String {\n }\n \n pub enum TypeAnnotationNeeded {\n+    /// ```compile_fail,E0282\n+    /// let x = \"hello\".chars().rev().collect();\n+    /// ```\n     E0282,\n+    /// An implementation cannot be chosen unambiguously because of lack of information.\n+    /// ```compile_fail,E0283\n+    /// let _ = Default::default();\n+    /// ```\n     E0283,\n+    /// ```compile_fail,E0284\n+    /// let mut d: u64 = 2;\n+    /// d = d % 1u32.into();\n+    /// ```\n     E0284,\n }\n \n@@ -261,7 +272,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             printer.name_resolver = Some(Box::new(&getter));\n             let _ = if let ty::FnDef(..) = ty.kind {\n                 // We don't want the regular output for `fn`s because it includes its path in\n-                // invalid pseduo-syntax, we want the `fn`-pointer output instead.\n+                // invalid pseudo-syntax, we want the `fn`-pointer output instead.\n                 ty.fn_sig(self.tcx).print(printer)\n             } else {\n                 ty.print(printer)\n@@ -518,6 +529,36 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err\n     }\n \n+    // FIXME(const_generics): We should either try and merge this with `need_type_info_err`\n+    // or improve the errors created here.\n+    //\n+    // Unlike for type inference variables, we don't yet store the origin of const inference variables.\n+    // This is needed for to get a more relevant error span.\n+    pub fn need_type_info_err_const(\n+        &self,\n+        body_id: Option<hir::BodyId>,\n+        span: Span,\n+        ct: &'tcx ty::Const<'tcx>,\n+        error_code: TypeAnnotationNeeded,\n+    ) -> DiagnosticBuilder<'tcx> {\n+        let mut local_visitor = FindHirNodeVisitor::new(&self, ct.into(), span);\n+        if let Some(body_id) = body_id {\n+            let expr = self.tcx.hir().expect_expr(body_id.hir_id);\n+            local_visitor.visit_expr(expr);\n+        }\n+\n+        let error_code = error_code.into();\n+        let mut err = self.tcx.sess.struct_span_err_with_code(\n+            local_visitor.target_span,\n+            &format!(\"type annotations needed\"),\n+            error_code,\n+        );\n+\n+        err.note(\"unable to infer the value of a const parameter\");\n+\n+        err\n+    }\n+\n     /// If the `FnSig` for the method call can be found and type arguments are identified as\n     /// needed, suggest annotating the call, otherwise point out the resulting type of the call.\n     fn annotate_method_call("}, {"sha": "43fd2b1853011d3494b33f6451c536603370bd8f", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -620,7 +620,11 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     }\n \n     pub fn get_path_res(&self, id: NodeId) -> Res {\n-        let hir_id = self.tcx.hir().node_id_to_hir_id(id);\n+        // FIXME(#71104)\n+        let hir_id = match self.tcx.hir().opt_node_id_to_hir_id(id) {\n+            Some(id) => id,\n+            None => return Res::Err,\n+        };\n         match self.tcx.hir().get(hir_id) {\n             Node::TraitRef(tr) => tr.path.res,\n "}, {"sha": "c4805c54a7d43e80b6bad522a345446f4c6f0b5b", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -468,7 +468,9 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n             match expr.kind {\n                 hir::ExprKind::Index(ref base_expr, ref index_expr) => {\n-                    let index_expr_ty = self.node_ty(index_expr.hir_id);\n+                    // We need to get the final type in case dereferences were needed for the trait\n+                    // to apply (#72002).\n+                    let index_expr_ty = self.tables.borrow().expr_ty_adjusted(index_expr);\n                     self.convert_place_op_to_mutable(\n                         PlaceOp::Index,\n                         expr,"}, {"sha": "154ca391aa5fdcd02d9b2627e70f1e432aaf749c", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -647,13 +647,26 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n         Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: false }\n     }\n \n-    fn report_error(&self, t: Ty<'tcx>) {\n+    fn report_type_error(&self, t: Ty<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n                 .need_type_info_err(Some(self.body.id()), self.span.to_span(self.tcx), t, E0282)\n                 .emit();\n         }\n     }\n+\n+    fn report_const_error(&self, c: &'tcx ty::Const<'tcx>) {\n+        if !self.tcx.sess.has_errors() {\n+            self.infcx\n+                .need_type_info_err_const(\n+                    Some(self.body.id()),\n+                    self.span.to_span(self.tcx),\n+                    c,\n+                    E0282,\n+                )\n+                .emit();\n+        }\n+    }\n }\n \n impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n@@ -666,7 +679,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             Ok(t) => self.infcx.tcx.erase_regions(&t),\n             Err(_) => {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n-                self.report_error(t);\n+                self.report_type_error(t);\n                 self.replaced_with_error = true;\n                 self.tcx().types.err\n             }\n@@ -683,8 +696,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             Ok(ct) => self.infcx.tcx.erase_regions(&ct),\n             Err(_) => {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n-                // FIXME: we'd like to use `self.report_error`, but it doesn't yet\n-                // accept a &'tcx ty::Const.\n+                self.report_const_error(ct);\n                 self.replaced_with_error = true;\n                 self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty: ct.ty })\n             }"}, {"sha": "3b2bb49197d01ec9e30d030e18bc5bf6f0536e59", "filename": "src/test/ui/const-generics/uninferred-consts.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -0,0 +1,12 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+// taken from https://github.com/rust-lang/rust/issues/70507#issuecomment-615268893\n+struct Foo;\n+impl Foo {\n+    fn foo<const N: usize>(self) {}\n+}\n+fn main() {\n+    Foo.foo();\n+    //~^ ERROR type annotations needed\n+}"}, {"sha": "a3620084a428939ee0eb4ff5a6468980709ddb6e", "filename": "src/test/ui/const-generics/uninferred-consts.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/uninferred-consts.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/uninferred-consts.rs:10:5\n+   |\n+LL |     Foo.foo();\n+   |     ^^^^^^^^^\n+   |\n+   = note: unable to infer the value of a const parameter\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "ab24abeba32fe6337c4884f5c7097f6eb712f99c", "filename": "src/test/ui/consts/const-int-arithmetic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(saturating_neg)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_overflowing_int_methods)]"}, {"sha": "54ff89355ff3aeb3b3f25aa3bdcc52f00dd722f6", "filename": "src/test/ui/issues/issue-72002.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fissues%2Fissue-72002.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fissues%2Fissue-72002.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72002.rs?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+struct Indexable;\n+\n+impl Indexable {\n+    fn boo(&mut self) {}\n+}\n+\n+impl std::ops::Index<&str> for Indexable {\n+    type Output = Indexable;\n+\n+    fn index(&self, field: &str) -> &Indexable {\n+        self\n+    }\n+}\n+\n+impl std::ops::IndexMut<&str> for Indexable {\n+    fn index_mut(&mut self, field: &str) -> &mut Indexable {\n+        self\n+    }\n+}\n+\n+fn main() {\n+    let mut v = Indexable;\n+    let field = \"hello\".to_string();\n+\n+    v[field.as_str()].boo();\n+\n+    v[&field].boo(); // < This should work\n+}"}, {"sha": "eea0a7fea0cefcc94b8074dae1c98840e9886000", "filename": "src/test/ui/save-analysis/issue-72267.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-72267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-72267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-72267.rs?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: -Z save-analysis\n+\n+fn main() {\n+    let _: Box<(dyn ?Sized)>;\n+    //~^ ERROR `?Trait` is not permitted in trait object types\n+    //~| ERROR at least one trait is required for an object type\n+}"}, {"sha": "76fc6c57cbc36d30954cc2aab0699fdcd9e28784", "filename": "src/test/ui/save-analysis/issue-72267.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-72267.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42acd9086f93fdc68a61cd79152abca77c6cd369/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-72267.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-72267.stderr?ref=42acd9086f93fdc68a61cd79152abca77c6cd369", "patch": "@@ -0,0 +1,15 @@\n+error: `?Trait` is not permitted in trait object types\n+  --> $DIR/issue-72267.rs:4:21\n+   |\n+LL |     let _: Box<(dyn ?Sized)>;\n+   |                     ^^^^^^\n+\n+error[E0224]: at least one trait is required for an object type\n+  --> $DIR/issue-72267.rs:4:17\n+   |\n+LL |     let _: Box<(dyn ?Sized)>;\n+   |                 ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0224`."}]}