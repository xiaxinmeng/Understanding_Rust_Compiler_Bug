{"sha": "7ad071627565fa2b1277c05279cf35c2fe3b1ebf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZDA3MTYyNzU2NWZhMmIxMjc3YzA1Mjc5Y2YzNWMyZmUzYjFlYmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-30T09:52:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-30T09:52:01Z"}, "message": "rustc: Convert to pipes", "tree": {"sha": "5c2e0047a74622494d19c003d03bdb8e3f91c42c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c2e0047a74622494d19c003d03bdb8e3f91c42c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ad071627565fa2b1277c05279cf35c2fe3b1ebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad071627565fa2b1277c05279cf35c2fe3b1ebf", "html_url": "https://github.com/rust-lang/rust/commit/7ad071627565fa2b1277c05279cf35c2fe3b1ebf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ad071627565fa2b1277c05279cf35c2fe3b1ebf/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e907b648b0abb8dc2b8fa1902294774d4ad862", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e907b648b0abb8dc2b8fa1902294774d4ad862", "html_url": "https://github.com/rust-lang/rust/commit/02e907b648b0abb8dc2b8fa1902294774d4ad862"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "c61a84c9082b896c917d5064971ca7fd2a9fdd3f", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7ad071627565fa2b1277c05279cf35c2fe3b1ebf/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7ad071627565fa2b1277c05279cf35c2fe3b1ebf/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=7ad071627565fa2b1277c05279cf35c2fe3b1ebf", "patch": "@@ -357,24 +357,27 @@ fails without recording a fatal error then we've encountered a compiler\n bug and need to present an error.\n */\n pub fn monitor(+f: fn~(diagnostic::emitter)) {\n-    let p = oldcomm::Port();\n-    let ch = oldcomm::Chan(&p);\n-\n+    use core::pipes::*;\n+    use std::cell::Cell;\n+    let (p, ch) = stream();\n+    let ch = SharedChan(ch);\n+    let ch_capture = ch.clone();\n     match do task::try |move f| {\n-\n+        let ch = ch_capture.clone();\n+        let ch_capture = ch.clone();\n         // The 'diagnostics emitter'. Every error, warning, etc. should\n         // go through this function.\n         let demitter = fn@(cmsp: Option<(@codemap::CodeMap, codemap::span)>,\n                            msg: &str, lvl: diagnostic::level) {\n             if lvl == diagnostic::fatal {\n-                oldcomm::send(ch, fatal);\n+                ch_capture.send(fatal);\n             }\n             diagnostic::emit(cmsp, msg, lvl);\n         };\n \n         struct finally {\n-            ch: oldcomm::Chan<monitor_msg>,\n-            drop { oldcomm::send(self.ch, done); }\n+            ch: SharedChan<monitor_msg>,\n+            drop { self.ch.send(done); }\n         }\n \n         let _finally = finally { ch: ch };\n@@ -384,7 +387,7 @@ pub fn monitor(+f: fn~(diagnostic::emitter)) {\n         result::Ok(_) => { /* fallthrough */ }\n         result::Err(_) => {\n             // Task failed without emitting a fatal diagnostic\n-            if oldcomm::recv(p) == done {\n+            if p.recv() == done {\n                 diagnostic::emit(\n                     None,\n                     diagnostic::ice_msg(~\"unexpected failure\"),"}]}