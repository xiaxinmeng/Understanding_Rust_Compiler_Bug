{"sha": "344ea6e0e5d5fca3fbfb065a9fd03eff55f76471", "node_id": "C_kwDOAAsO6NoAKDM0NGVhNmUwZTVkNWZjYTNmYmZiMDY1YTlmZDAzZWZmNTVmNzY0NzE", "commit": {"author": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2022-02-02T22:18:36Z"}, "committer": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2022-02-06T20:58:24Z"}, "message": "Factor out emit_tuple_wrap_err, improve Applicability", "tree": {"sha": "81551c31afbe2dbb041e922343a9af9f66c296c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81551c31afbe2dbb041e922343a9af9f66c296c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/344ea6e0e5d5fca3fbfb065a9fd03eff55f76471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/344ea6e0e5d5fca3fbfb065a9fd03eff55f76471", "html_url": "https://github.com/rust-lang/rust/commit/344ea6e0e5d5fca3fbfb065a9fd03eff55f76471", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/344ea6e0e5d5fca3fbfb065a9fd03eff55f76471/comments", "author": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d3b45af055276b07e73611278268282848a139", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d3b45af055276b07e73611278268282848a139", "html_url": "https://github.com/rust-lang/rust/commit/72d3b45af055276b07e73611278268282848a139"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "3b7e861e44efa902e318e37730bc72da39a68fb1", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 39, "deletions": 29, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/344ea6e0e5d5fca3fbfb065a9fd03eff55f76471/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344ea6e0e5d5fca3fbfb065a9fd03eff55f76471/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=344ea6e0e5d5fca3fbfb065a9fd03eff55f76471", "patch": "@@ -2045,35 +2045,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         // parentheses around it, perhaps the user meant to write `(expr,)` to\n                         // build a tuple (issue #86100)\n                         (ty::Tuple(_), _) => {\n-                            if let [expected_tup_elem] =\n-                                expected.tuple_fields().collect::<Vec<_>>()[..]\n-                            {\n-                                if same_type_modulo_infer(expected_tup_elem, found) {\n-                                    if let Ok(code) =\n-                                        self.tcx.sess().source_map().span_to_snippet(span)\n-                                    {\n-                                        if code.starts_with('(') && code.ends_with(')') {\n-                                            let before_close = span.hi() - BytePos::from_u32(1);\n-\n-                                            err.span_suggestion(\n-                                                span.with_hi(before_close).shrink_to_hi(),\n-                                                \"use a trailing comma to create a tuple with one element\",\n-                                                \",\".into(),\n-                                                Applicability::MaybeIncorrect,\n-                                            );\n-                                        } else {\n-                                            err.multipart_suggestion(\n-                                                \"use a trailing comma to create a tuple with one element\",\n-                                                vec![\n-                                                    (span.shrink_to_lo(), \"(\".into()),\n-                                                    (span.shrink_to_hi(), \",)\".into()),\n-                                                ],\n-                                                Applicability::MaybeIncorrect,\n-                                            );\n-                                        }\n-                                    }\n-                                }\n-                            }\n+                            self.emit_tuple_wrap_err(&mut err, span, found, expected)\n                         }\n                         // If a character was expected and the found expression is a string literal\n                         // containing a single character, perhaps the user meant to write `'c'` to\n@@ -2136,6 +2108,44 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         diag\n     }\n \n+    fn emit_tuple_wrap_err(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        span: Span,\n+        found: Ty<'tcx>,\n+        expected: Ty<'tcx>,\n+    ) {\n+        let [expected_tup_elem] = &expected.tuple_fields().collect::<Vec<_>>()[..]\n+            else { return };\n+\n+        if !same_type_modulo_infer(expected_tup_elem, found) {\n+            return;\n+        }\n+\n+        let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span)\n+            else { return };\n+\n+        if code.starts_with('(') && code.ends_with(')') {\n+            let before_close = span.hi() - BytePos::from_u32(1);\n+\n+            err.span_suggestion(\n+                span.with_hi(before_close).shrink_to_hi(),\n+                \"use a trailing comma to create a tuple with one element\",\n+                \",\".into(),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            err.multipart_suggestion(\n+                \"use a trailing comma to create a tuple with one element\",\n+                vec![\n+                    (span.shrink_to_lo(), \"(\".into()),\n+                    (span.shrink_to_hi(), \",)\".into()),\n+                ],\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+\n     fn values_str(\n         &self,\n         values: ValuePairs<'tcx>,"}]}