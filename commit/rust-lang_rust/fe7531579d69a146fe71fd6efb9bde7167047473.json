{"sha": "fe7531579d69a146fe71fd6efb9bde7167047473", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNzUzMTU3OWQ2OWExNDZmZTcxZmQ2ZWZiOWJkZTcxNjcwNDc0NzM=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-23T19:48:40Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-23T22:14:07Z"}, "message": "Address comments from review", "tree": {"sha": "13ecbc949adf3ecf3fcbb63c2a762fbc0df3a806", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13ecbc949adf3ecf3fcbb63c2a762fbc0df3a806"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe7531579d69a146fe71fd6efb9bde7167047473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe7531579d69a146fe71fd6efb9bde7167047473", "html_url": "https://github.com/rust-lang/rust/commit/fe7531579d69a146fe71fd6efb9bde7167047473", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe7531579d69a146fe71fd6efb9bde7167047473/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfce24aa675072c832e5160acdefc4e98b7fe8f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfce24aa675072c832e5160acdefc4e98b7fe8f3", "html_url": "https://github.com/rust-lang/rust/commit/bfce24aa675072c832e5160acdefc4e98b7fe8f3"}], "stats": {"total": 172, "additions": 68, "deletions": 104}, "files": [{"sha": "43ced8ee5b13cdf094120b37538a50c5175ecdbb", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -209,9 +209,8 @@ impl CodegenCx<'ll, 'tcx> {\n \n         debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n \n-        let g = if let Some(id) =\n-            def_id.as_local().map(|def_id| self.tcx.hir().as_local_hir_id(def_id))\n-        {\n+        let g = if let Some(def_id) = def_id.as_local() {\n+            let id = self.tcx.hir().as_local_hir_id(def_id);\n             let llty = self.layout_of(ty).llvm_type(self);\n             let (g, attrs) = match self.tcx.hir().get(id) {\n                 Node::Item(&hir::Item { attrs, span, kind: hir::ItemKind::Static(..), .. }) => {"}, {"sha": "190a2dcc556e91ad15dcda4f1b4cb4c9ce9e9eaf", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -29,9 +29,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     ) -> Option<(&hir::Ty<'_>, &hir::FnDecl<'_>)> {\n         if let Some(anon_reg) = self.tcx().is_suitable_region(region) {\n             let def_id = anon_reg.def_id;\n-            if let Some(hir_id) =\n-                def_id.as_local().map(|def_id| self.tcx().hir().as_local_hir_id(def_id))\n-            {\n+            if let Some(def_id) = def_id.as_local() {\n+                let hir_id = self.tcx().hir().as_local_hir_id(def_id);\n                 let fndecl = match self.tcx().hir().get(hir_id) {\n                     Node::Item(&hir::Item { kind: hir::ItemKind::Fn(ref m, ..), .. })\n                     | Node::TraitItem(&hir::TraitItem {"}, {"sha": "fc858a497597e5bad0f2e02bd935c33089a201d5", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/outlives_closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -46,9 +46,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             ) = (&sub_origin, sup_region)\n             {\n                 let hir = &self.tcx().hir();\n-                if let Some(hir_id) =\n-                    free_region.scope.as_local().map(|def_id| hir.as_local_hir_id(def_id))\n-                {\n+                if let Some(def_id) = free_region.scope.as_local() {\n+                    let hir_id = hir.as_local_hir_id(def_id);\n                     if let Node::Expr(Expr { kind: Closure(_, _, _, closure_span, None), .. }) =\n                         hir.get(hir_id)\n                     {"}, {"sha": "cad6a312521e4ceac0c25296c6851ebea7e8b119", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -436,9 +436,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                 // If the trait is private, add the impl items to `private_traits` so they don't get\n                 // reported for missing docs.\n                 let real_trait = trait_ref.path.res.def_id();\n-                if let Some(hir_id) =\n-                    real_trait.as_local().map(|def_id| cx.tcx.hir().as_local_hir_id(def_id))\n-                {\n+                if let Some(def_id) = real_trait.as_local() {\n+                    let hir_id = cx.tcx.hir().as_local_hir_id(def_id);\n                     if let Some(Node::Item(item)) = cx.tcx.hir().find(hir_id) {\n                         if let hir::VisibilityKind::Inherited = item.vis.node {\n                             for impl_item_ref in items {\n@@ -611,10 +610,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n             let mut impls = HirIdSet::default();\n             cx.tcx.for_each_impl(debug, |d| {\n                 if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n-                    if let Some(hir_id) =\n-                        ty_def.did.as_local().map(|def_id| cx.tcx.hir().as_local_hir_id(def_id))\n-                    {\n-                        impls.insert(hir_id);\n+                    if let Some(def_id) = ty_def.did.as_local() {\n+                        impls.insert(cx.tcx.hir().as_local_hir_id(def_id));\n                     }\n                 }\n             });"}, {"sha": "aee80b6e14e1441f85d8befeaeaa4e32f5476c34", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -482,7 +482,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {\n-        if let Some(id) = id.as_local() { Some(self.get(self.as_local_hir_id(id))) } else { None }\n+        id.as_local().map(|id| self.get(self.as_local_hir_id(id)))\n     }\n \n     pub fn get_generics(&self, id: DefId) -> Option<&'hir Generics<'hir>> {\n@@ -883,7 +883,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn span_if_local(&self, id: DefId) -> Option<Span> {\n-        if let Some(id) = id.as_local() { Some(self.span(self.as_local_hir_id(id))) } else { None }\n+        id.as_local().map(|id| self.span(self.as_local_hir_id(id)))\n     }\n \n     pub fn res_span(&self, res: Res) -> Option<Span> {\n@@ -1082,11 +1082,6 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n-    providers.def_kind = |tcx, def_id| {\n-        if let Some(def_id) = def_id.as_local() {\n-            tcx.hir().def_kind(tcx.hir().as_local_hir_id(def_id))\n-        } else {\n-            bug!(\"calling local def_kind query provider for upstream DefId: {:?}\", def_id);\n-        }\n-    };\n+    providers.def_kind =\n+        |tcx, def_id| tcx.hir().def_kind(tcx.hir().as_local_hir_id(def_id.expect_local()));\n }"}, {"sha": "d3fcf9c64f84fa0559d67923d0aa8778508f5587", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -2338,14 +2338,13 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     }\n \n                     AggregateKind::Closure(def_id, substs) => ty::tls::with(|tcx| {\n-                        if let Some(hir_id) =\n-                            def_id.as_local().map(|def_id| tcx.hir().as_local_hir_id(def_id))\n-                        {\n+                        if let Some(def_id) = def_id.as_local() {\n+                            let hir_id = tcx.hir().as_local_hir_id(def_id);\n                             let name = if tcx.sess.opts.debugging_opts.span_free_formats {\n                                 let substs = tcx.lift(&substs).unwrap();\n                                 format!(\n                                     \"[closure@{}]\",\n-                                    tcx.def_path_str_with_substs(def_id, substs),\n+                                    tcx.def_path_str_with_substs(def_id.to_def_id(), substs),\n                                 )\n                             } else {\n                                 format!(\"[closure@{:?}]\", tcx.hir().span(hir_id))\n@@ -2366,9 +2365,8 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     }),\n \n                     AggregateKind::Generator(def_id, _, _) => ty::tls::with(|tcx| {\n-                        if let Some(hir_id) =\n-                            def_id.as_local().map(|def_id| tcx.hir().as_local_hir_id(def_id))\n-                        {\n+                        if let Some(def_id) = def_id.as_local() {\n+                            let hir_id = tcx.hir().as_local_hir_id(def_id);\n                             let name = format!(\"[generator@{:?}]\", tcx.hir().span(hir_id));\n                             let mut struct_fmt = fmt.debug_struct(&name);\n "}, {"sha": "828f7f6a767b42e64a71e64b0897a99c066ab509", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -608,9 +608,8 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n \n                 // FIXME(eddyb) should use `def_span`.\n-                if let Some(hir_id) =\n-                    did.as_local().map(|did| self.tcx().hir().as_local_hir_id(did))\n-                {\n+                if let Some(did) = did.as_local() {\n+                    let hir_id = self.tcx().hir().as_local_hir_id(did);\n                     p!(write(\"@{:?}\", self.tcx().hir().span(hir_id)));\n \n                     if substs.as_generator().is_valid() {\n@@ -654,11 +653,10 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(write(\"[closure\"));\n \n                 // FIXME(eddyb) should use `def_span`.\n-                if let Some(hir_id) =\n-                    did.as_local().map(|did| self.tcx().hir().as_local_hir_id(did))\n-                {\n+                if let Some(did) = did.as_local() {\n+                    let hir_id = self.tcx().hir().as_local_hir_id(did);\n                     if self.tcx().sess.opts.debugging_opts.span_free_formats {\n-                        p!(write(\"@\"), print_def_path(did, substs));\n+                        p!(write(\"@\"), print_def_path(did.to_def_id(), substs));\n                     } else {\n                         p!(write(\"@{:?}\", self.tcx().hir().span(hir_id)));\n                     }"}, {"sha": "6cc4ee432a58cb977c3b7309b1f950ddbc8e5d3d", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -864,11 +864,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 format!(\"`{}` would have to be valid for `{}`...\", name, region_name),\n             );\n \n-            if let Some(fn_hir_id) = self\n-                .mir_def_id\n-                .as_local()\n-                .map(|def_id| self.infcx.tcx.hir().as_local_hir_id(def_id))\n-            {\n+            if let Some(def_id) = self.mir_def_id.as_local() {\n+                let fn_hir_id = self.infcx.tcx.hir().as_local_hir_id(def_id);\n                 err.span_label(\n                     drop_span,\n                     format!("}, {"sha": "6d1984fd20f9df3d0e2b2da31fa7073199a6ea39", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -430,7 +430,8 @@ fn check_recursion_limit<'tcx>(\n     // infinite expansion.\n     if adjusted_recursion_depth > *tcx.sess.recursion_limit.get() {\n         let error = format!(\"reached the recursion limit while instantiating `{}`\", instance);\n-        if let Some(hir_id) = def_id.as_local().map(|def_id| tcx.hir().as_local_hir_id(def_id)) {\n+        if let Some(def_id) = def_id.as_local() {\n+            let hir_id = tcx.hir().as_local_hir_id(def_id);\n             tcx.sess.span_fatal(tcx.hir().span(hir_id), &error);\n         } else {\n             tcx.sess.fatal(&error);"}, {"sha": "6d1fbd6c868c5de83320a81125e15acc8ceca876", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -537,9 +537,8 @@ impl DeadVisitor<'tcx> {\n         let inherent_impls = self.tcx.inherent_impls(def_id);\n         for &impl_did in inherent_impls.iter() {\n             for &item_did in &self.tcx.associated_item_def_ids(impl_did)[..] {\n-                if let Some(item_hir_id) =\n-                    item_did.as_local().map(|did| self.tcx.hir().as_local_hir_id(did))\n-                {\n+                if let Some(did) = item_did.as_local() {\n+                    let item_hir_id = self.tcx.hir().as_local_hir_id(did);\n                     if self.live_symbols.contains(&item_hir_id) {\n                         return true;\n                     }"}, {"sha": "b1fbba7e1a7b3b4845b122877fab225abbf37a1f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -445,9 +445,8 @@ impl VisibilityLike for Option<AccessLevel> {\n     const SHALLOW: bool = true;\n     fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {\n         cmp::min(\n-            if let Some(hir_id) =\n-                def_id.as_local().map(|def_id| find.tcx.hir().as_local_hir_id(def_id))\n-            {\n+            if let Some(def_id) = def_id.as_local() {\n+                let hir_id = find.tcx.hir().as_local_hir_id(def_id);\n                 find.access_levels.map.get(&hir_id).cloned()\n             } else {\n                 Self::MAX\n@@ -549,9 +548,8 @@ impl EmbargoVisitor<'tcx> {\n                 if export.vis.is_accessible_from(defining_mod, self.tcx) {\n                     if let Res::Def(def_kind, def_id) = export.res {\n                         let vis = def_id_visibility(self.tcx, def_id).0;\n-                        if let Some(hir_id) =\n-                            def_id.as_local().map(|def_id| self.tcx.hir().as_local_hir_id(def_id))\n-                        {\n+                        if let Some(def_id) = def_id.as_local() {\n+                            let hir_id = self.tcx.hir().as_local_hir_id(def_id);\n                             self.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n                         }\n                     }\n@@ -914,10 +912,8 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 for export in exports.iter() {\n                     if export.vis == ty::Visibility::Public {\n                         if let Some(def_id) = export.res.opt_def_id() {\n-                            if let Some(hir_id) = def_id\n-                                .as_local()\n-                                .map(|def_id| self.tcx.hir().as_local_hir_id(def_id))\n-                            {\n+                            if let Some(def_id) = def_id.as_local() {\n+                                let hir_id = self.tcx.hir().as_local_hir_id(def_id);\n                                 self.update(hir_id, Some(AccessLevel::Exported));\n                             }\n                         }"}, {"sha": "a988c5829b5ef9334cf301815c43b17e75247a37", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -596,10 +596,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // In the future, this should be fixed and this error should be removed.\n                         let def = self.map.defs.get(&lifetime.hir_id).cloned();\n                         if let Some(Region::LateBound(_, def_id, _)) = def {\n-                            if let Some(hir_id) = def_id\n-                                .as_local()\n-                                .map(|def_id| self.tcx.hir().as_local_hir_id(def_id))\n-                            {\n+                            if let Some(def_id) = def_id.as_local() {\n+                                let hir_id = self.tcx.hir().as_local_hir_id(def_id);\n                                 // Ensure that the parent of the def is an item, not HRTB\n                                 let parent_id = self.tcx.hir().get_parent_node(hir_id);\n                                 let parent_impl_id = hir::ImplItemId { hir_id: parent_id };\n@@ -1559,10 +1557,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         }\n \n                         if let Some(parent_def_id) = self.tcx.parent(def_id) {\n-                            if let Some(parent_hir_id) = parent_def_id\n-                                .as_local()\n-                                .map(|def_id| self.tcx.hir().as_local_hir_id(def_id))\n-                            {\n+                            if let Some(def_id) = parent_def_id.as_local() {\n+                                let parent_hir_id = self.tcx.hir().as_local_hir_id(def_id);\n                                 // lifetimes in `derive` expansions don't count (Issue #53738)\n                                 if self\n                                     .tcx\n@@ -1959,9 +1955,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             };\n \n             let map = &self.map;\n-            let unsubst = if let Some(id) =\n-                def_id.as_local().map(|def_id| self.tcx.hir().as_local_hir_id(def_id))\n-            {\n+            let unsubst = if let Some(def_id) = def_id.as_local() {\n+                let id = self.tcx.hir().as_local_hir_id(def_id);\n                 &map.object_lifetime_defaults[&id]\n             } else {\n                 let tcx = self.tcx;"}, {"sha": "8ff8f5734c9b06524e4a0d1a80bf0c6391e7267f", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -1036,9 +1036,8 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                     //     let x = || foo(); // returns the Opaque assoc with `foo`\n                     // }\n                     // ```\n-                    if let Some(opaque_hir_id) =\n-                        def_id.as_local().map(|def_id| tcx.hir().as_local_hir_id(def_id))\n-                    {\n+                    if let Some(def_id) = def_id.as_local() {\n+                        let opaque_hir_id = tcx.hir().as_local_hir_id(def_id);\n                         let parent_def_id = self.parent_def_id;\n                         let def_scope_default = || {\n                             let opaque_parent_hir_id = tcx.hir().get_parent_item(opaque_hir_id);\n@@ -1085,7 +1084,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                             ),\n                         };\n                         if in_definition_scope {\n-                            return self.fold_opaque_ty(ty, def_id, substs, origin);\n+                            return self.fold_opaque_ty(ty, def_id.to_def_id(), substs, origin);\n                         }\n \n                         debug!("}, {"sha": "590726ce8ed3778ccc49d8f5eae87ef03694e18d", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -409,9 +409,8 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n \n     match *terr {\n         TypeError::Mutability => {\n-            if let Some(trait_m_hir_id) =\n-                trait_m.def_id.as_local().map(|def_id| tcx.hir().as_local_hir_id(def_id))\n-            {\n+            if let Some(def_id) = trait_m.def_id.as_local() {\n+                let trait_m_hir_id = tcx.hir().as_local_hir_id(def_id);\n                 let trait_m_iter = match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n                     TraitItemKind::Fn(ref trait_m_sig, _) => trait_m_sig.decl.inputs.iter(),\n                     _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n@@ -438,9 +437,8 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n             }\n         }\n         TypeError::Sorts(ExpectedFound { .. }) => {\n-            if let Some(trait_m_hir_id) =\n-                trait_m.def_id.as_local().map(|def_id| tcx.hir().as_local_hir_id(def_id))\n-            {\n+            if let Some(def_id) = trait_m.def_id.as_local() {\n+                let trait_m_hir_id = tcx.hir().as_local_hir_id(def_id);\n                 let (trait_m_output, trait_m_iter) =\n                     match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n                         TraitItemKind::Fn(ref trait_m_sig, _) => {\n@@ -591,9 +589,8 @@ fn compare_number_of_generics<'tcx>(\n         if impl_count != trait_count {\n             err_occurred = true;\n \n-            let (trait_spans, impl_trait_spans) = if let Some(trait_hir_id) =\n-                trait_.def_id.as_local().map(|def_id| tcx.hir().as_local_hir_id(def_id))\n-            {\n+            let (trait_spans, impl_trait_spans) = if let Some(def_id) = trait_.def_id.as_local() {\n+                let trait_hir_id = tcx.hir().as_local_hir_id(def_id);\n                 let trait_item = tcx.hir().expect_trait_item(trait_hir_id);\n                 if trait_item.generics.params.is_empty() {\n                     (Some(vec![trait_item.generics.span]), vec![])"}, {"sha": "228c40ac8538bdafb3ee61c5ea976657498e452b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -1052,9 +1052,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let generics = self.tcx.generics_of(table_owner.to_def_id());\n                     let type_param = generics.type_param(param, self.tcx);\n                     let hir = &self.tcx.hir();\n-                    if let Some(id) =\n-                        type_param.def_id.as_local().map(|def_id| hir.as_local_hir_id(def_id))\n-                    {\n+                    if let Some(def_id) = type_param.def_id.as_local() {\n+                        let id = hir.as_local_hir_id(def_id);\n                         // Get the `hir::Param` to verify whether it already has any bounds.\n                         // We do this to avoid suggesting code that ends up as `T: FooBar`,\n                         // instead we suggest `T: Foo + Bar` in that case."}, {"sha": "01d077d47f0393c636d8c2a53229083add7997df", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -377,9 +377,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             return;\n         }\n \n-        let (local, remote) = if let Some(id) =\n-            def_id.as_local().map(|def_id| self.tcx().hir().as_local_hir_id(def_id))\n-        {\n+        let (local, remote) = if let Some(def_id) = def_id.as_local() {\n+            let id = self.tcx().hir().as_local_hir_id(def_id);\n             (Some(self.terms_cx.inferred_starts[&id]), None)\n         } else {\n             (None, Some(self.tcx().variances_of(def_id)))"}, {"sha": "6208c1471018308fe87604642e0c88f215e51e18", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -340,7 +340,8 @@ pub fn build_impl(\n         }\n     }\n \n-    let for_ = if let Some(hir_id) = did.as_local().map(|did| tcx.hir().as_local_hir_id(did)) {\n+    let for_ = if let Some(did) = did.as_local() {\n+        let hir_id = tcx.hir().as_local_hir_id(did);\n         match tcx.hir().expect_item(hir_id).kind {\n             hir::ItemKind::Impl { self_ty, .. } => self_ty.clean(cx),\n             _ => panic!(\"did given to build_impl was not an impl\"),\n@@ -360,9 +361,8 @@ pub fn build_impl(\n     }\n \n     let predicates = tcx.explicit_predicates_of(did);\n-    let (trait_items, generics) = if let Some(hir_id) =\n-        did.as_local().map(|did| tcx.hir().as_local_hir_id(did))\n-    {\n+    let (trait_items, generics) = if let Some(did) = did.as_local() {\n+        let hir_id = tcx.hir().as_local_hir_id(did);\n         match tcx.hir().expect_item(hir_id).kind {\n             hir::ItemKind::Impl { ref generics, ref items, .. } => (\n                 items.iter().map(|item| tcx.hir().impl_item(item.id).clean(cx)).collect::<Vec<_>>(),\n@@ -488,7 +488,8 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n }\n \n pub fn print_inlined_const(cx: &DocContext<'_>, did: DefId) -> String {\n-    if let Some(hir_id) = did.as_local().map(|did| cx.tcx.hir().as_local_hir_id(did)) {\n+    if let Some(did) = did.as_local() {\n+        let hir_id = cx.tcx.hir().as_local_hir_id(did);\n         rustc_hir_pretty::id_to_string(&cx.tcx.hir(), hir_id)\n     } else {\n         cx.tcx.rendered_const(did)"}, {"sha": "4d03bb21cb3ec6ceff12e7c1c0cbeff6ffa7168e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -1379,10 +1379,9 @@ impl Clean<Type> for hir::Ty<'_> {\n                 let mut alias = None;\n                 if let Res::Def(DefKind::TyAlias, def_id) = path.res {\n                     // Substitute private type aliases\n-                    if let Some(hir_id) =\n-                        def_id.as_local().map(|def_id| cx.tcx.hir().as_local_hir_id(def_id))\n-                    {\n-                        if !cx.renderinfo.borrow().access_levels.is_exported(def_id) {\n+                    if let Some(def_id) = def_id.as_local() {\n+                        let hir_id = cx.tcx.hir().as_local_hir_id(def_id);\n+                        if !cx.renderinfo.borrow().access_levels.is_exported(def_id.to_def_id()) {\n                             alias = Some(&cx.tcx.hir().expect_item(hir_id).kind);\n                         }\n                     }"}, {"sha": "ec5ac48ffe4a848cf74e78eccc5ed3165cf1a9d6", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -473,9 +473,8 @@ pub fn name_from_pat(p: &hir::Pat) -> String {\n pub fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n         ty::ConstKind::Unevaluated(def_id, _, promoted) => {\n-            let mut s = if let Some(hir_id) =\n-                def_id.as_local().map(|def_id| cx.tcx.hir().as_local_hir_id(def_id))\n-            {\n+            let mut s = if let Some(def_id) = def_id.as_local() {\n+                let hir_id = cx.tcx.hir().as_local_hir_id(def_id);\n                 print_const_expr(cx, cx.tcx.hir().body_owned_by(hir_id))\n             } else {\n                 inline::print_inlined_const(cx, def_id)"}, {"sha": "43b641c7fe61a790f221671fc16848aff8486dfb", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7531579d69a146fe71fd6efb9bde7167047473/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=fe7531579d69a146fe71fd6efb9bde7167047473", "patch": "@@ -335,10 +335,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         let item_hir_id = if item.is_mod() {\n-            if let Some(id) =\n-                item.def_id.as_local().map(|def_id| self.cx.tcx.hir().as_local_hir_id(def_id))\n-            {\n-                Some(id)\n+            if let Some(def_id) = item.def_id.as_local() {\n+                Some(self.cx.tcx.hir().as_local_hir_id(def_id))\n             } else {\n                 debug!(\"attempting to fold on a non-local item: {:?}\", item);\n                 return self.fold_item_recur(item);"}]}