{"sha": "b12d4316cc5ddd7f540304420a9cd63ed424173e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMmQ0MzE2Y2M1ZGRkN2Y1NDAzMDQ0MjBhOWNkNjNlZDQyNDE3M2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-01T13:41:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-01T13:41:41Z"}, "message": "Merge #4682\n\n4682: Rename assist r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d757ba7d5afc93ae3f0a22fbd0cc401f52e067b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d757ba7d5afc93ae3f0a22fbd0cc401f52e067b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b12d4316cc5ddd7f540304420a9cd63ed424173e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe1QWVCRBK7hj4Ov3rIwAAdHIIACUg2Qznd1VJ/V/cB7bhU2Fd\nbQ1rqktQiqjpIFc3s8WZNahowSK3h2CVnSj3Ut50jcWjHZgT8QSwT1YQZq7STNa3\nUT/1wpiJfMPzHlhPPpgAmS2NPF2VOCVlHpQudTLqtLPzmzuCSiqOQsYB+AwMBm+A\nQ4jegV8AZwszig0ilT7VXrXna+dyznFMYWbzv9JB7zFw4QJ2o1R5oN31StLUOzLt\nwU9IlIvGl5o4V3KBSk8ZV5+AP5guNUF4hyc2rB44MK1PGQpYE6nSvCUOiW4o3PYU\nudTw21nHooTWlkW2vc+w+cC7ZssrfGMZHwqsF5qapxLbKIaGjNpEFoD5TKjCyVc=\n=jj8P\n-----END PGP SIGNATURE-----\n", "payload": "tree d757ba7d5afc93ae3f0a22fbd0cc401f52e067b9\nparent 7ae247f03c639d6e704159df7f0120466afc3c30\nparent 285717de33c25422db60420030d46d10cf3b0121\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591018901 +0000\ncommitter GitHub <noreply@github.com> 1591018901 +0000\n\nMerge #4682\n\n4682: Rename assist r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b12d4316cc5ddd7f540304420a9cd63ed424173e", "html_url": "https://github.com/rust-lang/rust/commit/b12d4316cc5ddd7f540304420a9cd63ed424173e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b12d4316cc5ddd7f540304420a9cd63ed424173e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ae247f03c639d6e704159df7f0120466afc3c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae247f03c639d6e704159df7f0120466afc3c30", "html_url": "https://github.com/rust-lang/rust/commit/7ae247f03c639d6e704159df7f0120466afc3c30"}, {"sha": "285717de33c25422db60420030d46d10cf3b0121", "url": "https://api.github.com/repos/rust-lang/rust/commits/285717de33c25422db60420030d46d10cf3b0121", "html_url": "https://github.com/rust-lang/rust/commit/285717de33c25422db60420030d46d10cf3b0121"}], "stats": {"total": 174, "additions": 87, "deletions": 87}, "files": [{"sha": "beb5b7366d9091eb479a13ad53953325d35c277a", "filename": "crates/ra_assists/src/handlers/introduce_named_lifetime.rs", "status": "renamed", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b12d4316cc5ddd7f540304420a9cd63ed424173e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12d4316cc5ddd7f540304420a9cd63ed424173e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=b12d4316cc5ddd7f540304420a9cd63ed424173e", "patch": "@@ -1,12 +1,15 @@\n-use crate::{assist_context::AssistBuilder, AssistContext, AssistId, Assists};\n-use ast::{NameOwner, ParamList, TypeAscriptionOwner, TypeParamList, TypeRef};\n-use ra_syntax::{ast, ast::TypeParamsOwner, AstNode, SyntaxKind, TextRange, TextSize};\n+use ra_syntax::{\n+    ast::{self, NameOwner, TypeAscriptionOwner, TypeParamsOwner},\n+    AstNode, SyntaxKind, TextRange, TextSize,\n+};\n use rustc_hash::FxHashSet;\n \n-static ASSIST_NAME: &str = \"change_lifetime_anon_to_named\";\n-static ASSIST_LABEL: &str = \"Give anonymous lifetime a name\";\n+use crate::{assist_context::AssistBuilder, AssistContext, AssistId, Assists};\n+\n+static ASSIST_NAME: &str = \"introduce_named_lifetime\";\n+static ASSIST_LABEL: &str = \"Introduce named lifetime\";\n \n-// Assist: change_lifetime_anon_to_named\n+// Assist: introduce_named_lifetime\n //\n // Change an anonymous lifetime to a named lifetime.\n //\n@@ -31,7 +34,7 @@ static ASSIST_LABEL: &str = \"Give anonymous lifetime a name\";\n // ```\n // FIXME: How can we handle renaming any one of multiple anonymous lifetimes?\n // FIXME: should also add support for the case fun(f: &Foo) -> &<|>Foo\n-pub(crate) fn change_lifetime_anon_to_named(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn introduce_named_lifetime(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let lifetime_token = ctx\n         .find_token_at_offset(SyntaxKind::LIFETIME)\n         .filter(|lifetime| lifetime.text() == \"'_\")?;\n@@ -52,7 +55,7 @@ fn generate_fn_def_assist(\n     fn_def: &ast::FnDef,\n     lifetime_loc: TextRange,\n ) -> Option<()> {\n-    let param_list: ParamList = fn_def.param_list()?;\n+    let param_list: ast::ParamList = fn_def.param_list()?;\n     let new_lifetime_param = generate_unique_lifetime_param_name(&fn_def.type_param_list())?;\n     let end_of_fn_ident = fn_def.name()?.ident_token()?.text_range().end();\n     let self_param =\n@@ -67,7 +70,7 @@ fn generate_fn_def_assist(\n         let fn_params_without_lifetime: Vec<_> = param_list\n             .params()\n             .filter_map(|param| match param.ascribed_type() {\n-                Some(TypeRef::ReferenceType(ascribed_type))\n+                Some(ast::TypeRef::ReferenceType(ascribed_type))\n                     if ascribed_type.lifetime_token() == None =>\n                 {\n                     Some(ascribed_type.amp_token()?.text_range().end())\n@@ -106,7 +109,7 @@ fn generate_impl_def_assist(\n /// Given a type parameter list, generate a unique lifetime parameter name\n /// which is not in the list\n fn generate_unique_lifetime_param_name(\n-    existing_type_param_list: &Option<TypeParamList>,\n+    existing_type_param_list: &Option<ast::TypeParamList>,\n ) -> Option<char> {\n     match existing_type_param_list {\n         Some(type_params) => {\n@@ -151,7 +154,7 @@ mod tests {\n     #[test]\n     fn test_example_case() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"impl Cursor<'_<|>> {\n                 fn node(self) -> &SyntaxNode {\n                     match self {\n@@ -172,7 +175,7 @@ mod tests {\n     #[test]\n     fn test_example_case_simplified() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"impl Cursor<'_<|>> {\"#,\n             r#\"impl<'a> Cursor<'a> {\"#,\n         );\n@@ -181,7 +184,7 @@ mod tests {\n     #[test]\n     fn test_example_case_cursor_after_tick() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"impl Cursor<'<|>_> {\"#,\n             r#\"impl<'a> Cursor<'a> {\"#,\n         );\n@@ -190,31 +193,28 @@ mod tests {\n     #[test]\n     fn test_example_case_cursor_before_tick() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"impl Cursor<<|>'_> {\"#,\n             r#\"impl<'a> Cursor<'a> {\"#,\n         );\n     }\n \n     #[test]\n     fn test_not_applicable_cursor_position() {\n-        check_assist_not_applicable(change_lifetime_anon_to_named, r#\"impl Cursor<'_><|> {\"#);\n-        check_assist_not_applicable(change_lifetime_anon_to_named, r#\"impl Cursor<|><'_> {\"#);\n+        check_assist_not_applicable(introduce_named_lifetime, r#\"impl Cursor<'_><|> {\"#);\n+        check_assist_not_applicable(introduce_named_lifetime, r#\"impl Cursor<|><'_> {\"#);\n     }\n \n     #[test]\n     fn test_not_applicable_lifetime_already_name() {\n-        check_assist_not_applicable(change_lifetime_anon_to_named, r#\"impl Cursor<'a<|>> {\"#);\n-        check_assist_not_applicable(\n-            change_lifetime_anon_to_named,\n-            r#\"fn my_fun<'a>() -> X<'a<|>>\"#,\n-        );\n+        check_assist_not_applicable(introduce_named_lifetime, r#\"impl Cursor<'a<|>> {\"#);\n+        check_assist_not_applicable(introduce_named_lifetime, r#\"fn my_fun<'a>() -> X<'a<|>>\"#);\n     }\n \n     #[test]\n     fn test_with_type_parameter() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"impl<T> Cursor<T, '_<|>>\"#,\n             r#\"impl<T, 'a> Cursor<T, 'a>\"#,\n         );\n@@ -223,7 +223,7 @@ mod tests {\n     #[test]\n     fn test_with_existing_lifetime_name_conflict() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"impl<'a, 'b> Cursor<'a, 'b, '_<|>>\"#,\n             r#\"impl<'a, 'b, 'c> Cursor<'a, 'b, 'c>\"#,\n         );\n@@ -232,7 +232,7 @@ mod tests {\n     #[test]\n     fn test_function_return_value_anon_lifetime_param() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"fn my_fun() -> X<'_<|>>\"#,\n             r#\"fn my_fun<'a>() -> X<'a>\"#,\n         );\n@@ -241,7 +241,7 @@ mod tests {\n     #[test]\n     fn test_function_return_value_anon_reference_lifetime() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"fn my_fun() -> &'_<|> X\"#,\n             r#\"fn my_fun<'a>() -> &'a X\"#,\n         );\n@@ -250,7 +250,7 @@ mod tests {\n     #[test]\n     fn test_function_param_anon_lifetime() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"fn my_fun(x: X<'_<|>>)\"#,\n             r#\"fn my_fun<'a>(x: X<'a>)\"#,\n         );\n@@ -259,7 +259,7 @@ mod tests {\n     #[test]\n     fn test_function_add_lifetime_to_params() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"fn my_fun(f: &Foo) -> X<'_<|>>\"#,\n             r#\"fn my_fun<'a>(f: &'a Foo) -> X<'a>\"#,\n         );\n@@ -268,7 +268,7 @@ mod tests {\n     #[test]\n     fn test_function_add_lifetime_to_params_in_presence_of_other_lifetime() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"fn my_fun<'other>(f: &Foo, b: &'other Bar) -> X<'_<|>>\"#,\n             r#\"fn my_fun<'other, 'a>(f: &'a Foo, b: &'other Bar) -> X<'a>\"#,\n         );\n@@ -278,15 +278,15 @@ mod tests {\n     fn test_function_not_applicable_without_self_and_multiple_unnamed_param_lifetimes() {\n         // this is not permitted under lifetime elision rules\n         check_assist_not_applicable(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"fn my_fun(f: &Foo, b: &Bar) -> X<'_<|>>\"#,\n         );\n     }\n \n     #[test]\n     fn test_function_add_lifetime_to_self_ref_param() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"fn my_fun<'other>(&self, f: &Foo, b: &'other Bar) -> X<'_<|>>\"#,\n             r#\"fn my_fun<'other, 'a>(&'a self, f: &Foo, b: &'other Bar) -> X<'a>\"#,\n         );\n@@ -295,7 +295,7 @@ mod tests {\n     #[test]\n     fn test_function_add_lifetime_to_param_with_non_ref_self() {\n         check_assist(\n-            change_lifetime_anon_to_named,\n+            introduce_named_lifetime,\n             r#\"fn my_fun<'other>(self, f: &Foo, b: &'other Bar) -> X<'_<|>>\"#,\n             r#\"fn my_fun<'other, 'a>(self, f: &'a Foo, b: &'other Bar) -> X<'a>\"#,\n         );", "previous_filename": "crates/ra_assists/src/handlers/change_lifetime_anon_to_named.rs"}, {"sha": "fb5d59a87b75ae15222877ed57a7b37157cd1690", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b12d4316cc5ddd7f540304420a9cd63ed424173e/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12d4316cc5ddd7f540304420a9cd63ed424173e/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=b12d4316cc5ddd7f540304420a9cd63ed424173e", "patch": "@@ -112,7 +112,6 @@ mod handlers {\n     mod add_turbo_fish;\n     mod apply_demorgan;\n     mod auto_import;\n-    mod change_lifetime_anon_to_named;\n     mod change_return_type_to_result;\n     mod change_visibility;\n     mod early_return;\n@@ -122,6 +121,7 @@ mod handlers {\n     mod flip_comma;\n     mod flip_trait_bound;\n     mod inline_local_variable;\n+    mod introduce_named_lifetime;\n     mod introduce_variable;\n     mod invert_if;\n     mod merge_imports;\n@@ -152,7 +152,6 @@ mod handlers {\n             add_turbo_fish::add_turbo_fish,\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n-            change_lifetime_anon_to_named::change_lifetime_anon_to_named,\n             change_return_type_to_result::change_return_type_to_result,\n             change_visibility::change_visibility,\n             early_return::convert_to_guarded_return,\n@@ -162,6 +161,7 @@ mod handlers {\n             flip_comma::flip_comma,\n             flip_trait_bound::flip_trait_bound,\n             inline_local_variable::inline_local_variable,\n+            introduce_named_lifetime::introduce_named_lifetime,\n             introduce_variable::introduce_variable,\n             invert_if::invert_if,\n             merge_imports::merge_imports,"}, {"sha": "d17504529fd44e2ec93f9ba32578ab39fe4e2b43", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b12d4316cc5ddd7f540304420a9cd63ed424173e/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12d4316cc5ddd7f540304420a9cd63ed424173e/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=b12d4316cc5ddd7f540304420a9cd63ed424173e", "patch": "@@ -287,31 +287,6 @@ pub mod std { pub mod collections { pub struct HashMap { } } }\n     )\n }\n \n-#[test]\n-fn doctest_change_lifetime_anon_to_named() {\n-    check_doc_test(\n-        \"change_lifetime_anon_to_named\",\n-        r#####\"\n-impl Cursor<'_<|>> {\n-    fn node(self) -> &SyntaxNode {\n-        match self {\n-            Cursor::Replace(node) | Cursor::Before(node) => node,\n-        }\n-    }\n-}\n-\"#####,\n-        r#####\"\n-impl<'a> Cursor<'a> {\n-    fn node(self) -> &SyntaxNode {\n-        match self {\n-            Cursor::Replace(node) | Cursor::Before(node) => node,\n-        }\n-    }\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_change_return_type_to_result() {\n     check_doc_test(\n@@ -476,6 +451,31 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_introduce_named_lifetime() {\n+    check_doc_test(\n+        \"introduce_named_lifetime\",\n+        r#####\"\n+impl Cursor<'_<|>> {\n+    fn node(self) -> &SyntaxNode {\n+        match self {\n+            Cursor::Replace(node) | Cursor::Before(node) => node,\n+        }\n+    }\n+}\n+\"#####,\n+        r#####\"\n+impl<'a> Cursor<'a> {\n+    fn node(self) -> &SyntaxNode {\n+        match self {\n+            Cursor::Replace(node) | Cursor::Before(node) => node,\n+        }\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_introduce_variable() {\n     check_doc_test("}, {"sha": "4d2fb31d4840fe50f9a86ffeb8ebd9a62500bb7f", "filename": "docs/user/generated_assists.adoc", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b12d4316cc5ddd7f540304420a9cd63ed424173e/docs%2Fuser%2Fgenerated_assists.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/b12d4316cc5ddd7f540304420a9cd63ed424173e/docs%2Fuser%2Fgenerated_assists.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_assists.adoc?ref=b12d4316cc5ddd7f540304420a9cd63ed424173e", "patch": "@@ -337,35 +337,6 @@ fn main() {\n ```\n \n \n-[discrete]\n-=== `change_lifetime_anon_to_named`\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/change_lifetime_anon_to_named.rs#L9[change_lifetime_anon_to_named.rs]\n-\n-Change an anonymous lifetime to a named lifetime.\n-\n-.Before\n-```rust\n-impl Cursor<'_\u2503> {\n-    fn node(self) -> &SyntaxNode {\n-        match self {\n-            Cursor::Replace(node) | Cursor::Before(node) => node,\n-        }\n-    }\n-}\n-```\n-\n-.After\n-```rust\n-impl<'a> Cursor<'a> {\n-    fn node(self) -> &SyntaxNode {\n-        match self {\n-            Cursor::Replace(node) | Cursor::Before(node) => node,\n-        }\n-    }\n-}\n-```\n-\n-\n [discrete]\n === `change_return_type_to_result`\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/change_return_type_to_result.rs#L8[change_return_type_to_result.rs]\n@@ -566,6 +537,35 @@ fn main() {\n ```\n \n \n+[discrete]\n+=== `introduce_named_lifetime`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/introduce_named_lifetime.rs#L12[introduce_named_lifetime.rs]\n+\n+Change an anonymous lifetime to a named lifetime.\n+\n+.Before\n+```rust\n+impl Cursor<'_\u2503> {\n+    fn node(self) -> &SyntaxNode {\n+        match self {\n+            Cursor::Replace(node) | Cursor::Before(node) => node,\n+        }\n+    }\n+}\n+```\n+\n+.After\n+```rust\n+impl<'a> Cursor<'a> {\n+    fn node(self) -> &SyntaxNode {\n+        match self {\n+            Cursor::Replace(node) | Cursor::Before(node) => node,\n+        }\n+    }\n+}\n+```\n+\n+\n [discrete]\n === `introduce_variable`\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/introduce_variable.rs#L14[introduce_variable.rs]"}]}