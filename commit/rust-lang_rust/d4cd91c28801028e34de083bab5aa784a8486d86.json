{"sha": "d4cd91c28801028e34de083bab5aa784a8486d86", "node_id": "C_kwDOAAsO6NoAKGQ0Y2Q5MWMyODgwMTAyOGUzNGRlMDgzYmFiNWFhNzg0YTg0ODZkODY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-09T11:41:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-09T11:41:24Z"}, "message": "Auto merge of #9826 - Veykril:semi-blocks, r=Alexendoo\n\nAdd semicolon-outside/inside-block lints\n\nchangelog: Add `semicolon_outside_block` and `semicolon_inside_block` lints\n\nFixes https://github.com/rust-lang/rust-clippy/issues/7322\n\nAn earlier attempt at this can be found here https://github.com/rust-lang/rust-clippy/pull/7564. This PR still implements two separate lints but I am open to merging them into a single one that's configurable.", "tree": {"sha": "f49ae264299f1d35e44aa8fa5048ff66551aedbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f49ae264299f1d35e44aa8fa5048ff66551aedbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4cd91c28801028e34de083bab5aa784a8486d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4cd91c28801028e34de083bab5aa784a8486d86", "html_url": "https://github.com/rust-lang/rust/commit/d4cd91c28801028e34de083bab5aa784a8486d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4cd91c28801028e34de083bab5aa784a8486d86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f0719a25de12045d76a809e5c3b43d179f77b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f0719a25de12045d76a809e5c3b43d179f77b9", "html_url": "https://github.com/rust-lang/rust/commit/39f0719a25de12045d76a809e5c3b43d179f77b9"}, {"sha": "20ec2ceab8450e1a0611fbc54a17a03ffc0bd39b", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ec2ceab8450e1a0611fbc54a17a03ffc0bd39b", "html_url": "https://github.com/rust-lang/rust/commit/20ec2ceab8450e1a0611fbc54a17a03ffc0bd39b"}], "stats": {"total": 591, "additions": 591, "deletions": 0}, "files": [{"sha": "bc41e70fe1f3638f3296edb9a54d0156c1a3f5b9", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4cd91c28801028e34de083bab5aa784a8486d86/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d4cd91c28801028e34de083bab5aa784a8486d86/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d4cd91c28801028e34de083bab5aa784a8486d86", "patch": "@@ -4353,6 +4353,8 @@ Released 2018-09-13\n [`self_named_constructors`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors\n [`self_named_module_files`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files\n [`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n+[`semicolon_inside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_inside_block\n+[`semicolon_outside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block\n [`separated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#separated_literal_suffix\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse"}, {"sha": "77c1da993dccdef5be76488015385fcce9efa51f", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4cd91c28801028e34de083bab5aa784a8486d86/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4cd91c28801028e34de083bab5aa784a8486d86/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=d4cd91c28801028e34de083bab5aa784a8486d86", "patch": "@@ -525,6 +525,8 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::returns::NEEDLESS_RETURN_INFO,\n     crate::same_name_method::SAME_NAME_METHOD_INFO,\n     crate::self_named_constructors::SELF_NAMED_CONSTRUCTORS_INFO,\n+    crate::semicolon_block::SEMICOLON_INSIDE_BLOCK_INFO,\n+    crate::semicolon_block::SEMICOLON_OUTSIDE_BLOCK_INFO,\n     crate::semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED_INFO,\n     crate::serde_api::SERDE_API_MISUSE_INFO,\n     crate::shadow::SHADOW_REUSE_INFO,"}, {"sha": "bea28f7620b814b522665cf0acbefee541f7edcf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4cd91c28801028e34de083bab5aa784a8486d86/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4cd91c28801028e34de083bab5aa784a8486d86/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d4cd91c28801028e34de083bab5aa784a8486d86", "patch": "@@ -256,6 +256,7 @@ mod return_self_not_must_use;\n mod returns;\n mod same_name_method;\n mod self_named_constructors;\n+mod semicolon_block;\n mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n@@ -900,6 +901,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(from_raw_with_void_ptr::FromRawWithVoidPtr));\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n     store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv())));\n+    store.register_late_pass(|_| Box::new(semicolon_block::SemicolonBlock));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "8f1d1490e1f085689ffb41be7407acbcd01e2bda", "filename": "clippy_lints/src/semicolon_block.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/d4cd91c28801028e34de083bab5aa784a8486d86/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4cd91c28801028e34de083bab5aa784a8486d86/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=d4cd91c28801028e34de083bab5aa784a8486d86", "patch": "@@ -0,0 +1,137 @@\n+use clippy_utils::diagnostics::{multispan_sugg_with_applicability, span_lint_and_then};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Block, Expr, ExprKind, Stmt, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Suggests moving the semicolon after a block to the inside of the block, after its last\n+    /// expression.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// For consistency it's best to have the semicolon inside/outside the block. Either way is fine\n+    /// and this lint suggests inside the block.\n+    /// Take a look at `semicolon_outside_block` for the other alternative.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x); }\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub SEMICOLON_INSIDE_BLOCK,\n+    restriction,\n+    \"add a semicolon inside the block\"\n+}\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Suggests moving the semicolon from a block's final expression outside of the block.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// For consistency it's best to have the semicolon inside/outside the block. Either way is fine\n+    /// and this lint suggests outside the block.\n+    /// Take a look at `semicolon_inside_block` for the other alternative.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x); }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x) };\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub SEMICOLON_OUTSIDE_BLOCK,\n+    restriction,\n+    \"add a semicolon outside the block\"\n+}\n+declare_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK]);\n+\n+impl LateLintPass<'_> for SemicolonBlock {\n+    fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n+        match stmt.kind {\n+            StmtKind::Expr(Expr {\n+                kind: ExprKind::Block(block, _),\n+                ..\n+            }) if !block.span.from_expansion() => {\n+                let Block {\n+                    expr: None,\n+                    stmts: [.., stmt],\n+                    ..\n+                } = block else { return };\n+                let &Stmt {\n+                    kind: StmtKind::Semi(expr),\n+                    span,\n+                    ..\n+                } = stmt else { return };\n+                semicolon_outside_block(cx, block, expr, span);\n+            },\n+            StmtKind::Semi(Expr {\n+                kind: ExprKind::Block(block @ Block { expr: Some(tail), .. }, _),\n+                ..\n+            }) if !block.span.from_expansion() => semicolon_inside_block(cx, block, tail, stmt.span),\n+            _ => (),\n+        }\n+    }\n+}\n+\n+fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'_>, semi_span: Span) {\n+    let insert_span = tail.span.source_callsite().shrink_to_hi();\n+    let remove_span = semi_span.with_lo(block.span.hi());\n+\n+    span_lint_and_then(\n+        cx,\n+        SEMICOLON_INSIDE_BLOCK,\n+        semi_span,\n+        \"consider moving the `;` inside the block for consistent formatting\",\n+        |diag| {\n+            multispan_sugg_with_applicability(\n+                diag,\n+                \"put the `;` here\",\n+                Applicability::MachineApplicable,\n+                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+            );\n+        },\n+    );\n+}\n+\n+fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_expr: &Expr<'_>, semi_span: Span) {\n+    let insert_span = block.span.with_lo(block.span.hi());\n+    // account for macro calls\n+    let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n+    let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n+\n+    span_lint_and_then(\n+        cx,\n+        SEMICOLON_OUTSIDE_BLOCK,\n+        block.span,\n+        \"consider moving the `;` outside the block for consistent formatting\",\n+        |diag| {\n+            multispan_sugg_with_applicability(\n+                diag,\n+                \"put the `;` here\",\n+                Applicability::MachineApplicable,\n+                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+            );\n+        },\n+    );\n+}"}, {"sha": "42e97e1ca358e145bd51d8d464dfd77d365d3069", "filename": "tests/ui/semicolon_inside_block.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_inside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_inside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_inside_block.fixed?ref=d4cd91c28801028e34de083bab5aa784a8486d86", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()); }\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "f40848f702e1cbabd76a1a55c26fde7425a90f6b", "filename": "tests/ui/semicolon_inside_block.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_inside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_inside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_inside_block.rs?ref=d4cd91c28801028e34de083bab5aa784a8486d86", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "48d3690e2bdee5bf1e2face8a3e255ae111bf5bd", "filename": "tests/ui/semicolon_inside_block.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_inside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_inside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_inside_block.stderr?ref=d4cd91c28801028e34de083bab5aa784a8486d86", "patch": "@@ -0,0 +1,54 @@\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:39:5\n+   |\n+LL |     { unit_fn_block() };\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::semicolon-inside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block() };\n+LL +     { unit_fn_block(); }\n+   |\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:40:5\n+   |\n+LL |     unsafe { unit_fn_block() };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block() };\n+LL +     unsafe { unit_fn_block(); }\n+   |\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:48:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block()\n+LL | |     };\n+   | |______^\n+   |\n+help: put the `;` here\n+   |\n+LL ~         unit_fn_block();\n+LL ~     }\n+   |\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:61:5\n+   |\n+LL |     { m!(()) };\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     { m!(()) };\n+LL +     { m!(()); }\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "091eaa7518e95d1750a3c1fc59ecd27479c7835a", "filename": "tests/ui/semicolon_outside_block.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_outside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_outside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block.fixed?ref=d4cd91c28801028e34de083bab5aa784a8486d86", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()) };\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "7ce46431fac9ace2c0c4221bb32348a7c866f1b7", "filename": "tests/ui/semicolon_outside_block.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_outside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_outside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block.rs?ref=d4cd91c28801028e34de083bab5aa784a8486d86", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "dcc102e60994a6fea104d330e799328b33e0ecd6", "filename": "tests/ui/semicolon_outside_block.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_outside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4cd91c28801028e34de083bab5aa784a8486d86/tests%2Fui%2Fsemicolon_outside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block.stderr?ref=d4cd91c28801028e34de083bab5aa784a8486d86", "patch": "@@ -0,0 +1,54 @@\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:42:5\n+   |\n+LL |     { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::semicolon-outside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block(); }\n+LL +     { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:43:5\n+   |\n+LL |     unsafe { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block(); }\n+LL +     unsafe { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:52:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block();\n+LL | |     }\n+   | |_____^\n+   |\n+help: put the `;` here\n+   |\n+LL ~         unit_fn_block()\n+LL ~     };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:62:5\n+   |\n+LL |     { m!(()); }\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     { m!(()); }\n+LL +     { m!(()) };\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}]}