{"sha": "691f645ecd38d346fb047bbcb148694bd82c6a92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MWY2NDVlY2QzOGQzNDZmYjA0N2JiY2IxNDg2OTRiZDgyYzZhOTI=", "commit": {"author": {"name": "Aleksi Juvani", "email": "aleksi@aleksijuvani.com", "date": "2019-09-07T14:18:10Z"}, "committer": {"name": "Aleksi Juvani", "email": "aleksi@aleksijuvani.com", "date": "2019-09-07T14:20:12Z"}, "message": "Fix sysroot on macOS when cross-compiling and SDKROOT is set\n\nFixes rust-lang/cargo#7283\nCloses rust-lang/cargo#7284\n\nr? @alexcrichton", "tree": {"sha": "86ed7b1f06994d3ee6a08370aafc78cd86c462e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86ed7b1f06994d3ee6a08370aafc78cd86c462e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/691f645ecd38d346fb047bbcb148694bd82c6a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/691f645ecd38d346fb047bbcb148694bd82c6a92", "html_url": "https://github.com/rust-lang/rust/commit/691f645ecd38d346fb047bbcb148694bd82c6a92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/691f645ecd38d346fb047bbcb148694bd82c6a92/comments", "author": {"login": "aleksijuvani", "id": 87529683, "node_id": "MDQ6VXNlcjg3NTI5Njgz", "avatar_url": "https://avatars.githubusercontent.com/u/87529683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksijuvani", "html_url": "https://github.com/aleksijuvani", "followers_url": "https://api.github.com/users/aleksijuvani/followers", "following_url": "https://api.github.com/users/aleksijuvani/following{/other_user}", "gists_url": "https://api.github.com/users/aleksijuvani/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksijuvani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksijuvani/subscriptions", "organizations_url": "https://api.github.com/users/aleksijuvani/orgs", "repos_url": "https://api.github.com/users/aleksijuvani/repos", "events_url": "https://api.github.com/users/aleksijuvani/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksijuvani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aleksijuvani", "id": 87529683, "node_id": "MDQ6VXNlcjg3NTI5Njgz", "avatar_url": "https://avatars.githubusercontent.com/u/87529683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksijuvani", "html_url": "https://github.com/aleksijuvani", "followers_url": "https://api.github.com/users/aleksijuvani/followers", "following_url": "https://api.github.com/users/aleksijuvani/following{/other_user}", "gists_url": "https://api.github.com/users/aleksijuvani/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksijuvani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksijuvani/subscriptions", "organizations_url": "https://api.github.com/users/aleksijuvani/orgs", "repos_url": "https://api.github.com/users/aleksijuvani/repos", "events_url": "https://api.github.com/users/aleksijuvani/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksijuvani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da13f06ea0dc368f1350bfc356b7f81a838defde", "url": "https://api.github.com/repos/rust-lang/rust/commits/da13f06ea0dc368f1350bfc356b7f81a838defde", "html_url": "https://github.com/rust-lang/rust/commit/da13f06ea0dc368f1350bfc356b7f81a838defde"}], "stats": {"total": 111, "additions": 67, "deletions": 44}, "files": [{"sha": "aa5080aaaf6e670371398d462d8a021b8ef76c4b", "filename": "src/librustc_target/spec/apple_base.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/691f645ecd38d346fb047bbcb148694bd82c6a92/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f645ecd38d346fb047bbcb148694bd82c6a92/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=691f645ecd38d346fb047bbcb148694bd82c6a92", "patch": "@@ -1,4 +1,4 @@\n-use std::env;\n+use std::{env, io, path::Path, process::Command};\n \n use crate::spec::{LinkArgs, TargetOptions};\n \n@@ -51,3 +51,46 @@ pub fn macos_llvm_target(arch: &str) -> String {\n     let (major, minor) = macos_deployment_target();\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }\n+\n+pub fn sysroot(sdk: &str) -> Result<String, String> {\n+    let actual_sdk_path = sdk_path(sdk)?;\n+    // Like Clang, allow the SDKROOT environment variable used by Xcode to define the sysroot\n+    if let Some(sdk_root) = env::var(\"SDKROOT\").ok() {\n+        let sdk_root_p = Path::new(&sdk_root);\n+        // Ignore SDKROOT if it's not a valid path\n+        if !sdk_root_p.is_absolute() || sdk_root_p == Path::new(\"/\") || !sdk_root_p.exists() {\n+            return Ok(actual_sdk_path);\n+        }\n+        // Ignore SDKROOT if it's clearly set for the wrong platform, which may occur when we're\n+        // compiling a custom build script while targeting iOS for example\n+        match sdk {\n+            \"iphoneos\" if sdk_root.contains(\"iPhoneSimulator.platform\")\n+                || sdk_root.contains(\"MacOSX.platform\") => return Ok(actual_sdk_path),\n+            \"iphonesimulator\" if sdk_root.contains(\"iPhoneOS.platform\")\n+                || sdk_root.contains(\"MacOSX.platform\") => return Ok(actual_sdk_path),\n+            \"macosx\" | \"macosx10.15\" if sdk_root.contains(\"iPhoneOS.platform\")\n+                || sdk_root.contains(\"iPhoneSimulator.platform\") => return Ok(actual_sdk_path),\n+            _ => return Ok(sdk_root),\n+        }\n+    }\n+    Ok(actual_sdk_path)\n+}\n+\n+fn sdk_path(sdk_name: &str) -> Result<String, String> {\n+    let res =\n+        Command::new(\"xcrun\").arg(\"--show-sdk-path\").arg(\"-sdk\").arg(sdk_name).output().and_then(\n+            |output| {\n+                if output.status.success() {\n+                    Ok(String::from_utf8(output.stdout).unwrap())\n+                } else {\n+                    let error = String::from_utf8(output.stderr);\n+                    let error = format!(\"process exit with error: {}\", error.unwrap());\n+                    Err(io::Error::new(io::ErrorKind::Other, &error[..]))\n+                }\n+            },\n+        );\n+    match res {\n+        Ok(output) => Ok(output.trim().to_string()),\n+        Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e)),\n+    }\n+}"}, {"sha": "db4a8180831834e96212ce8d302d13d8f7dc259c", "filename": "src/librustc_target/spec/apple_ios_base.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/691f645ecd38d346fb047bbcb148694bd82c6a92/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f645ecd38d346fb047bbcb148694bd82c6a92/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs?ref=691f645ecd38d346fb047bbcb148694bd82c6a92", "patch": "@@ -1,7 +1,3 @@\n-use std::env;\n-use std::io;\n-use std::path::Path;\n-use std::process::Command;\n use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n \n use Arch::*;\n@@ -30,42 +26,6 @@ impl Arch {\n     }\n }\n \n-pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n-    // Following what clang does\n-    // (https://github.com/llvm/llvm-project/blob/\n-    // 296a80102a9b72c3eda80558fb78a3ed8849b341/clang/lib/Driver/ToolChains/Darwin.cpp#L1661-L1678)\n-    // to allow the SDK path to be set. (For clang, xcrun sets\n-    // SDKROOT; for rustc, the user or build system can set it, or we\n-    // can fall back to checking for xcrun on PATH.)\n-    if let Some(sdkroot) = env::var(\"SDKROOT\").ok() {\n-        let sdkroot_path = Path::new(&sdkroot);\n-        if sdkroot_path.is_absolute() && sdkroot_path != Path::new(\"/\") && sdkroot_path.exists() {\n-            return Ok(sdkroot);\n-        }\n-    }\n-    let res = Command::new(\"xcrun\")\n-                      .arg(\"--show-sdk-path\")\n-                      .arg(\"-sdk\")\n-                      .arg(sdk_name)\n-                      .output()\n-                      .and_then(|output| {\n-                          if output.status.success() {\n-                              Ok(String::from_utf8(output.stdout).unwrap())\n-                          } else {\n-                              let error = String::from_utf8(output.stderr);\n-                              let error = format!(\"process exit with error: {}\",\n-                                                  error.unwrap());\n-                              Err(io::Error::new(io::ErrorKind::Other,\n-                                                 &error[..]))\n-                          }\n-                      });\n-\n-    match res {\n-        Ok(output) => Ok(output.trim().to_string()),\n-        Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e))\n-    }\n-}\n-\n fn build_pre_link_args(arch: Arch) -> Result<LinkArgs, String> {\n     let sdk_name = match arch {\n         Armv7 | Armv7s | Arm64 => \"iphoneos\",\n@@ -75,7 +35,7 @@ fn build_pre_link_args(arch: Arch) -> Result<LinkArgs, String> {\n \n     let arch_name = arch.to_string();\n \n-    let sdk_root = get_sdk_root(sdk_name)?;\n+    let sdk_root = super::apple_base::sysroot(sdk_name)?;\n \n     let mut args = LinkArgs::new();\n     args.insert(LinkerFlavor::Gcc,"}, {"sha": "a60c00721247413dd403c379b7b75cf2a4dd15fd", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/691f645ecd38d346fb047bbcb148694bd82c6a92/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f645ecd38d346fb047bbcb148694bd82c6a92/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=691f645ecd38d346fb047bbcb148694bd82c6a92", "patch": "@@ -1,10 +1,20 @@\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n+    let sysroot = super::apple_base::sysroot(\"macosx\")?;\n     let mut base = super::apple_base::opts();\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n+    base.pre_link_args.insert(\n+        LinkerFlavor::Gcc,\n+        vec![\n+            \"-m32\".to_string(),\n+            \"-isysroot\".to_string(),\n+            sysroot.clone(),\n+            \"-Wl,-syslibroot\".to_string(),\n+            sysroot,\n+        ],\n+    );\n     base.stack_probes = true;\n     base.eliminate_frame_pointer = false;\n "}, {"sha": "b72d037565b5b70b6ec744601d4ede7896d55122", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/691f645ecd38d346fb047bbcb148694bd82c6a92/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f645ecd38d346fb047bbcb148694bd82c6a92/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=691f645ecd38d346fb047bbcb148694bd82c6a92", "patch": "@@ -1,11 +1,21 @@\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n+    let sysroot = super::apple_base::sysroot(\"macosx\")?;\n     let mut base = super::apple_base::opts();\n     base.cpu = \"core2\".to_string();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.eliminate_frame_pointer = false;\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n+    base.pre_link_args.insert(\n+        LinkerFlavor::Gcc,\n+        vec![\n+            \"-m64\".to_string(),\n+            \"-isysroot\".to_string(),\n+            sysroot.clone(),\n+            \"-Wl,-syslibroot\".to_string(),\n+            sysroot,\n+        ],\n+    );\n     base.stack_probes = true;\n \n     // Clang automatically chooses a more specific target based on"}]}