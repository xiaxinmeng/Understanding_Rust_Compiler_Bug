{"sha": "85109afee9d12153849a68abe3b982268c188070", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MTA5YWZlZTlkMTIxNTM4NDlhNjhhYmUzYjk4MjI2OGMxODgwNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-12T12:06:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-12T12:06:12Z"}, "message": "Auto merge of #76561 - Thomasdezeeuw:iov-constant-limits, r=Amanieu\n\nUse IOV_MAX and UIO_MAXIOV constants in limit vectored I/O\n\nAlso updates the libc dependency to 0.2.77 (from 0.2.74) as the\nconstants were only recently added.\n\nRelated #68042, #75005\n\nr? `@Amanieu` (also reviewed #75005)", "tree": {"sha": "fa6abe1aec601943497acd317a186b3d537982d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6abe1aec601943497acd317a186b3d537982d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85109afee9d12153849a68abe3b982268c188070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85109afee9d12153849a68abe3b982268c188070", "html_url": "https://github.com/rust-lang/rust/commit/85109afee9d12153849a68abe3b982268c188070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85109afee9d12153849a68abe3b982268c188070/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d6cbd21b2c5819c7fa42eb5a3713667b67e4f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6cbd21b2c5819c7fa42eb5a3713667b67e4f03", "html_url": "https://github.com/rust-lang/rust/commit/2d6cbd21b2c5819c7fa42eb5a3713667b67e4f03"}, {"sha": "c394624471c66c42bd9641ab30d2a2ccea894dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c394624471c66c42bd9641ab30d2a2ccea894dbc", "html_url": "https://github.com/rust-lang/rust/commit/c394624471c66c42bd9641ab30d2a2ccea894dbc"}], "stats": {"total": 71, "additions": 50, "deletions": 21}, "files": [{"sha": "cfc1cede0797b92fdefa1518d150807910a38be4", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85109afee9d12153849a68abe3b982268c188070/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/85109afee9d12153849a68abe3b982268c188070/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=85109afee9d12153849a68abe3b982268c188070", "patch": "@@ -1610,9 +1610,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.74\"\n+version = \"0.2.77\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a2f02823cf78b754822df5f7f268fb59822e7296276d3e069d8e8cb26a14bd10\"\n+checksum = \"f2f96b10ec2560088a8e76961b00d47107b3a625fecb76dedb29ee7ccbf98235\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "01babeffd98f08ce34a8a6c676b41e02da289c02", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85109afee9d12153849a68abe3b982268c188070/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/85109afee9d12153849a68abe3b982268c188070/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=85109afee9d12153849a68abe3b982268c188070", "patch": "@@ -16,7 +16,7 @@ cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n-libc = { version = \"0.2.74\", default-features = false, features = ['rustc-dep-of-std'] }\n+libc = { version = \"0.2.77\", default-features = false, features = ['rustc-dep-of-std'] }\n compiler_builtins = { version = \"0.1.35\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }"}, {"sha": "2224a055d6d87c32d1ea41415a8545dc44d71276", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/85109afee9d12153849a68abe3b982268c188070/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85109afee9d12153849a68abe3b982268c188070/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=85109afee9d12153849a68abe3b982268c188070", "patch": "@@ -6,8 +6,6 @@ mod tests;\n use crate::cmp;\n use crate::io::{self, Initializer, IoSlice, IoSliceMut, Read};\n use crate::mem;\n-#[cfg(not(any(target_os = \"redox\", target_env = \"newlib\")))]\n-use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sys::cvt;\n use crate::sys_common::AsInner;\n \n@@ -31,24 +29,35 @@ const READ_LIMIT: usize = c_int::MAX as usize - 1;\n #[cfg(not(target_os = \"macos\"))]\n const READ_LIMIT: usize = libc::ssize_t::MAX as usize;\n \n-#[cfg(not(any(target_os = \"redox\", target_env = \"newlib\")))]\n-fn max_iov() -> usize {\n-    static LIM: AtomicUsize = AtomicUsize::new(0);\n-\n-    let mut lim = LIM.load(Ordering::Relaxed);\n-    if lim == 0 {\n-        let ret = unsafe { libc::sysconf(libc::_SC_IOV_MAX) };\n-\n-        // 16 is the minimum value required by POSIX.\n-        lim = if ret > 0 { ret as usize } else { 16 };\n-        LIM.store(lim, Ordering::Relaxed);\n-    }\n+#[cfg(any(\n+    target_os = \"dragonfly\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n+))]\n+const fn max_iov() -> usize {\n+    libc::IOV_MAX as usize\n+}\n \n-    lim\n+#[cfg(any(target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\"))]\n+const fn max_iov() -> usize {\n+    libc::UIO_MAXIOV as usize\n }\n \n-#[cfg(any(target_os = \"redox\", target_env = \"newlib\"))]\n-fn max_iov() -> usize {\n+#[cfg(not(any(\n+    target_os = \"android\",\n+    target_os = \"dragonfly\",\n+    target_os = \"emscripten\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"linux\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n+)))]\n+const fn max_iov() -> usize {\n     16 // The minimum value required by POSIX.\n }\n "}, {"sha": "08efe154e4c3b646f57d0ab87ebf76b5575fde3d", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/85109afee9d12153849a68abe3b982268c188070/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85109afee9d12153849a68abe3b982268c188070/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=85109afee9d12153849a68abe3b982268c188070", "patch": "@@ -459,18 +459,38 @@ impl ExitStatus {\n     }\n \n     fn exited(&self) -> bool {\n-        unsafe { libc::WIFEXITED(self.0) }\n+        // On Linux-like OSes this function is safe, on others it is not. See\n+        // libc issue: https://github.com/rust-lang/libc/issues/1888.\n+        #[cfg_attr(\n+            any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"),\n+            allow(unused_unsafe)\n+        )]\n+        unsafe {\n+            libc::WIFEXITED(self.0)\n+        }\n     }\n \n     pub fn success(&self) -> bool {\n         self.code() == Some(0)\n     }\n \n     pub fn code(&self) -> Option<i32> {\n+        // On Linux-like OSes this function is safe, on others it is not. See\n+        // libc issue: https://github.com/rust-lang/libc/issues/1888.\n+        #[cfg_attr(\n+            any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"),\n+            allow(unused_unsafe)\n+        )]\n         if self.exited() { Some(unsafe { libc::WEXITSTATUS(self.0) }) } else { None }\n     }\n \n     pub fn signal(&self) -> Option<i32> {\n+        // On Linux-like OSes this function is safe, on others it is not. See\n+        // libc issue: https://github.com/rust-lang/libc/issues/1888.\n+        #[cfg_attr(\n+            any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"),\n+            allow(unused_unsafe)\n+        )]\n         if !self.exited() { Some(unsafe { libc::WTERMSIG(self.0) }) } else { None }\n     }\n }"}]}