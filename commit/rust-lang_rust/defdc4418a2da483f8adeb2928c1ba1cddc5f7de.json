{"sha": "defdc4418a2da483f8adeb2928c1ba1cddc5f7de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZmRjNDQxOGEyZGE0ODNmOGFkZWIyOTI4YzFiYTFjZGRjNWY3ZGU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-21T23:44:54Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-22T17:27:13Z"}, "message": "TRPL: type aliases and unsized types", "tree": {"sha": "0a1a5af8a5b9fec67fdcbb6be56c88369492ed1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a1a5af8a5b9fec67fdcbb6be56c88369492ed1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/defdc4418a2da483f8adeb2928c1ba1cddc5f7de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/defdc4418a2da483f8adeb2928c1ba1cddc5f7de", "html_url": "https://github.com/rust-lang/rust/commit/defdc4418a2da483f8adeb2928c1ba1cddc5f7de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/defdc4418a2da483f8adeb2928c1ba1cddc5f7de/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3860240b0e124f38483ea4bd070b61d362871ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/3860240b0e124f38483ea4bd070b61d362871ece", "html_url": "https://github.com/rust-lang/rust/commit/3860240b0e124f38483ea4bd070b61d362871ece"}], "stats": {"total": 132, "additions": 130, "deletions": 2}, "files": [{"sha": "d175da35f5ec97ecd8eeb5305f24d9104ed6090c", "filename": "src/doc/trpl/type-aliases.md", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/defdc4418a2da483f8adeb2928c1ba1cddc5f7de/src%2Fdoc%2Ftrpl%2Ftype-aliases.md", "raw_url": "https://github.com/rust-lang/rust/raw/defdc4418a2da483f8adeb2928c1ba1cddc5f7de/src%2Fdoc%2Ftrpl%2Ftype-aliases.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftype-aliases.md?ref=defdc4418a2da483f8adeb2928c1ba1cddc5f7de", "patch": "@@ -1,3 +1,76 @@\n % `type` Aliases\n \n-Coming soon\n+The `type` keyword lets you declare an alias of another type:\n+\n+```rust\n+type Name = String;\n+```\n+\n+You can then use this type as if it were a real type:\n+\n+```rust\n+type Name = String;\n+\n+let x: Name = \"Hello\".to_string();\n+```\n+\n+Note, however, that this is an _alias_, not a new type entirely. In other\n+words, because Rust is strongly typed, you\u2019d expect a comparison between two\n+different types to fail:\n+\n+```rust,ignore\n+let x: i32 = 5;\n+let y: i64 = 5;\n+\n+if x == y {\n+   // ...\n+}\n+```\n+\n+this gives\n+\n+```text\n+error: mismatched types:\n+ expected `i32`,\n+    found `i64`\n+(expected i32,\n+    found i64) [E0308]\n+     if x == y {\n+             ^\n+```\n+\n+But, if we had an alias:\n+\n+```rust\n+type Num = i32;\n+\n+let x: i32 = 5;\n+let y: Num = 5;\n+\n+if x == y {\n+   // ...\n+}\n+```\n+\n+This compiles without error. Values of a `Num` type are the same as a value of\n+type `i32`, in every way.\n+\n+You can also use type aliases with generics:\n+\n+```rust\n+use std::result;\n+\n+enum ConcreteError {\n+    Foo,\n+    Bar,\n+}\n+\n+type Result<T> = result::Result<T, ConcreteError>;\n+```\n+\n+This creates a specialized version of the `Result` type, which always has a\n+`ConcreteError` for the `E` part of `Result<T, E>`. This is commonly used\n+in the standard library to create custom errors for each subsection. For\n+example, [io::Result][ioresult].\n+\n+[ioresult]: ../std/io/type.Result.html"}, {"sha": "756abeff06d354e3b3598f1b5f9a4b3bd1255e1d", "filename": "src/doc/trpl/unsized-types.md", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/defdc4418a2da483f8adeb2928c1ba1cddc5f7de/src%2Fdoc%2Ftrpl%2Funsized-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/defdc4418a2da483f8adeb2928c1ba1cddc5f7de/src%2Fdoc%2Ftrpl%2Funsized-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsized-types.md?ref=defdc4418a2da483f8adeb2928c1ba1cddc5f7de", "patch": "@@ -1,3 +1,58 @@\n % Unsized Types\n \n-Coming Soon!\n+Most types have a particular size, in bytes, that is knowable at compile time.\n+For example, an `i32` is thirty-two bits big, or four bytes. However, there are\n+some types which are useful to express, but do not have a defined size. These are\n+called \u2018unsized\u2019 or \u2018dynamically sized\u2019 types. One example is `[T]`. This type\n+represents a certain number of `T` in sequence. But we don\u2019t know how many\n+there are, so the size is not known.\n+\n+Rust understands a few of these types, but they have some restrictions. There\n+are three:\n+\n+1. We can only manipulate an instance of an unsized type via a pointer. An\n+   `&[T]` works just fine, but a `[T]` does not.\n+2. Variables and arguments cannot have dynamically sized types.\n+3. Only the last field in a `struct` may have a dynamically sized type; the\n+   other fields must not. Enum variants must not have dynamically sized types as\n+   data.\n+\n+So why bother? Well, because `[T]` can only be used behind a pointer, if we\n+didn\u2019t have language support for unsized types, it would be impossible to write\n+this:\n+\n+```rust,ignore\n+impl Foo for str {\n+```\n+\n+or\n+\n+```rust,ignore\n+impl<T> Foo for [T] {\n+```\n+\n+Instead, you would have to write:\n+\n+```rust,ignore\n+impl Foo for &str {\n+```\n+\n+Meaning, this implementation would only work for [references][ref], and not\n+other types of pointers. With this `impl`, all pointers, including (at some\n+point, there are some bugs to fix first) user-defined custom smart pointers,\n+can use this `impl`.\n+\n+# ?Sized\n+\n+If you want to write a function that accepts a dynamically sized type, you\n+can use the special bound, `?Sized`:\n+\n+```rust\n+struct Foo<T: ?Sized> {\n+    f: T,\n+}\n+```\n+\n+This `?`, read as \u201cT may be `Sized`\u201d,  means that this bound is special: it\n+lets us match more kinds, not less. It\u2019s almost like every `T` implicitly has\n+`T: Sized`, and the `?` undoes this default."}]}