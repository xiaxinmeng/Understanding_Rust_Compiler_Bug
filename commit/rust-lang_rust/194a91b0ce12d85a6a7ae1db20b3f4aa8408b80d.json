{"sha": "194a91b0ce12d85a6a7ae1db20b3f4aa8408b80d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NGE5MWIwY2UxMmQ4NWE2YTdhZTFkYjIwYjNmNGFhODQwOGI4MGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-09-13T04:46:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-09-13T04:49:17Z"}, "message": "rustbuild: Fix dependency tracking with new Cargo\n\nThe recent Cargo update changed filenames, which broke a lot of incremental\nrustbuild builds. What it thought were the output files were indeed no longer\nthe output files! (wreaking havoc).\n\nThis commit updates this to stop guessing filenames of Cargo and just manage\nstamp files instead.", "tree": {"sha": "d4a55be27573afba513878d0bfce2e2065313177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4a55be27573afba513878d0bfce2e2065313177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/194a91b0ce12d85a6a7ae1db20b3f4aa8408b80d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/194a91b0ce12d85a6a7ae1db20b3f4aa8408b80d", "html_url": "https://github.com/rust-lang/rust/commit/194a91b0ce12d85a6a7ae1db20b3f4aa8408b80d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/194a91b0ce12d85a6a7ae1db20b3f4aa8408b80d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa9d8cc8ace2c1f22469b4a6c8e1e0352072c675", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9d8cc8ace2c1f22469b4a6c8e1e0352072c675", "html_url": "https://github.com/rust-lang/rust/commit/fa9d8cc8ace2c1f22469b4a6c8e1e0352072c675"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "11fe5fe6caad94af01d562b3cc7a8a59b081f226", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/194a91b0ce12d85a6a7ae1db20b3f4aa8408b80d/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194a91b0ce12d85a6a7ae1db20b3f4aa8408b80d/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=194a91b0ce12d85a6a7ae1db20b3f4aa8408b80d", "patch": "@@ -16,12 +16,14 @@\n //! compiler. This module is also responsible for assembling the sysroot as it\n //! goes along from the output of the previous stage.\n \n+use std::cmp;\n use std::collections::HashMap;\n-use std::fs;\n+use std::fs::{self, File};\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use build_helper::output;\n+use filetime::FileTime;\n \n use util::{exe, staticlib, libdir, mtime, is_dylib, copy};\n use {Build, Compiler, Mode};\n@@ -66,6 +68,7 @@ pub fn std<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n     }\n \n     build.run(&mut cargo);\n+    update_mtime(&libstd_stamp(build, compiler, target));\n     std_link(build, target, compiler, compiler.host);\n }\n \n@@ -141,11 +144,12 @@ pub fn test<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n     println!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n              compiler.host, target);\n     let out_dir = build.cargo_out(compiler, Mode::Libtest, target);\n-    build.clear_if_dirty(&out_dir, &libstd_shim(build, compiler, target));\n+    build.clear_if_dirty(&out_dir, &libstd_stamp(build, compiler, target));\n     let mut cargo = build.cargo(compiler, Mode::Libtest, target, \"build\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/test_shim/Cargo.toml\"));\n     build.run(&mut cargo);\n+    update_mtime(&libtest_stamp(build, compiler, target));\n     test_link(build, target, compiler, compiler.host);\n }\n \n@@ -173,7 +177,7 @@ pub fn rustc<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n              compiler.stage, compiler.host, target);\n \n     let out_dir = build.cargo_out(compiler, Mode::Librustc, target);\n-    build.clear_if_dirty(&out_dir, &libtest_shim(build, compiler, target));\n+    build.clear_if_dirty(&out_dir, &libtest_stamp(build, compiler, target));\n \n     let mut cargo = build.cargo(compiler, Mode::Librustc, target, \"build\");\n     cargo.arg(\"--features\").arg(build.rustc_features())\n@@ -238,14 +242,14 @@ pub fn rustc_link(build: &Build,\n \n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n-fn libstd_shim(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n-    build.cargo_out(compiler, Mode::Libstd, target).join(\"libstd_shim.rlib\")\n+fn libstd_stamp(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n+    build.cargo_out(compiler, Mode::Libstd, target).join(\".libstd.stamp\")\n }\n \n /// Cargo's output path for libtest in a given stage, compiled by a particular\n /// compiler for the specified target.\n-fn libtest_shim(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n-    build.cargo_out(compiler, Mode::Libtest, target).join(\"libtest_shim.rlib\")\n+fn libtest_stamp(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n+    build.cargo_out(compiler, Mode::Libtest, target).join(\".libtest.stamp\")\n }\n \n fn compiler_file(compiler: &Path, file: &str) -> PathBuf {\n@@ -358,10 +362,35 @@ pub fn tool(build: &Build, stage: u32, host: &str, tool: &str) {\n     //        Maybe when libstd is compiled it should clear out the rustc of the\n     //        corresponding stage?\n     // let out_dir = build.cargo_out(stage, &host, Mode::Librustc, target);\n-    // build.clear_if_dirty(&out_dir, &libstd_shim(build, stage, &host, target));\n+    // build.clear_if_dirty(&out_dir, &libstd_stamp(build, stage, &host, target));\n \n     let mut cargo = build.cargo(&compiler, Mode::Tool, host, \"build\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(format!(\"src/tools/{}/Cargo.toml\", tool)));\n     build.run(&mut cargo);\n }\n+\n+/// Updates the mtime of a stamp file if necessary, only changing it if it's\n+/// older than some other file in the same directory.\n+///\n+/// We don't know what file Cargo is going to output (because there's a hash in\n+/// the file name) but we know where it's going to put it. We use this helper to\n+/// detect changes to that output file by looking at the modification time for\n+/// all files in a directory and updating the stamp if any are newer.\n+fn update_mtime(path: &Path) {\n+    let mut max = None;\n+    if let Ok(entries) = path.parent().unwrap().read_dir() {\n+        for entry in entries.map(|e| t!(e)) {\n+            if t!(entry.file_type()).is_file() {\n+                let meta = t!(entry.metadata());\n+                let time = FileTime::from_last_modification_time(&meta);\n+                max = cmp::max(max, Some(time));\n+            }\n+        }\n+    }\n+\n+    if !max.is_none() && max <= Some(mtime(path)) {\n+        return\n+    }\n+    t!(File::create(path));\n+}"}, {"sha": "c2dbfe1bbc58f3dd06060345f647d2fcb35162b7", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/194a91b0ce12d85a6a7ae1db20b3f4aa8408b80d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194a91b0ce12d85a6a7ae1db20b3f4aa8408b80d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=194a91b0ce12d85a6a7ae1db20b3f4aa8408b80d", "patch": "@@ -585,6 +585,8 @@ impl Build {\n         if mtime(&stamp) < mtime(input) {\n             self.verbose(&format!(\"Dirty - {}\", dir.display()));\n             let _ = fs::remove_dir_all(dir);\n+        } else if stamp.exists() {\n+            return\n         }\n         t!(fs::create_dir_all(dir));\n         t!(File::create(stamp));"}]}