{"sha": "80d0f60d29dfb24dcb5483ae3e7d7cf10b5264d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZDBmNjBkMjlkZmIyNGRjYjU0ODNhZTNlN2Q3Y2YxMGI1MjY0ZDI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2013-12-05T15:19:44Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2013-12-31T10:20:40Z"}, "message": "Add .insert() and .insert_char() methods to ~str.", "tree": {"sha": "d41fc9008b4e87911502445cc59622f85a361b08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d41fc9008b4e87911502445cc59622f85a361b08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80d0f60d29dfb24dcb5483ae3e7d7cf10b5264d2", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80d0f60d29dfb24dcb5483ae3e7d7cf10b5264d2", "html_url": "https://github.com/rust-lang/rust/commit/80d0f60d29dfb24dcb5483ae3e7d7cf10b5264d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80d0f60d29dfb24dcb5483ae3e7d7cf10b5264d2/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b88138a3ec4bb142fa514a863b62f955bf1c44e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b88138a3ec4bb142fa514a863b62f955bf1c44e3", "html_url": "https://github.com/rust-lang/rust/commit/b88138a3ec4bb142fa514a863b62f955bf1c44e3"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "c8a6fc08a389e3136b1e17e1a99be423814e7bb7", "filename": "src/libstd/str.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/80d0f60d29dfb24dcb5483ae3e7d7cf10b5264d2/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d0f60d29dfb24dcb5483ae3e7d7cf10b5264d2/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=80d0f60d29dfb24dcb5483ae3e7d7cf10b5264d2", "patch": "@@ -2510,6 +2510,16 @@ pub trait OwnedStr {\n     /// Prepend a char to a string\n     fn unshift_char(&mut self, ch: char);\n \n+    /// Insert a new sub-string at the given position in a string, in O(n + m) time\n+    /// (with n and m the lengths of the string and the substring.)\n+    /// This fails if `position` is not at a character boundary.\n+    fn insert(&mut self, position: uint, substring: &str);\n+\n+    /// Insert a char at the given position in a string, in O(n + m) time\n+    /// (with n and m the lengths of the string and the substring.)\n+    /// This fails if `position` is not at a character boundary.\n+    fn insert_char(&mut self, position: uint, ch: char);\n+\n     /// Concatenate two strings together.\n     fn append(self, rhs: &str) -> ~str;\n \n@@ -2622,6 +2632,24 @@ impl OwnedStr for ~str {\n         *self = new_str;\n     }\n \n+    #[inline]\n+    fn insert(&mut self, position: uint, substring: &str) {\n+        // This could be more efficient.\n+        let mut new_str = self.slice_to(position).to_owned();\n+        new_str.push_str(substring);\n+        new_str.push_str(self.slice_from(position));\n+        *self = new_str;\n+    }\n+\n+    #[inline]\n+    fn insert_char(&mut self, position: uint, ch: char) {\n+        // This could be more efficient.\n+        let mut new_str = self.slice_to(position).to_owned();\n+        new_str.push_char(ch);\n+        new_str.push_str(self.slice_from(position));\n+        *self = new_str;\n+    }\n+\n     #[inline]\n     fn append(self, rhs: &str) -> ~str {\n         let mut new_str = self;\n@@ -2874,6 +2902,20 @@ mod tests {\n         assert_eq!(~\"\u534e\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\", data);\n     }\n \n+    #[test]\n+    fn test_insert_char() {\n+        let mut data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\";\n+        data.insert_char(15, '\u534e');\n+        assert_eq!(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u534e\u0e28\u0e44\u0e17\u0e22\u4e2d\", data);\n+    }\n+\n+    #[test]\n+    fn test_insert() {\n+        let mut data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\";\n+        data.insert(15, \"\u534e\u4e2d\");\n+        assert_eq!(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u534e\u4e2d\u0e28\u0e44\u0e17\u0e22\u4e2d\", data);\n+    }\n+\n     #[test]\n     fn test_collect() {\n         let empty = ~\"\";"}]}