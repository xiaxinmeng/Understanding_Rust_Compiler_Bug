{"sha": "b77d60adb019bb5de05e884a99f3290ec4694137", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3N2Q2MGFkYjAxOWJiNWRlMDVlODg0YTk5ZjMyOTBlYzQ2OTQxMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-29T21:00:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-29T21:00:26Z"}, "message": "Auto merge of #25888 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #25788, #25861, #25864, #25865, #25866, #25873, #25876, #25883, #25886\n- Failed merges:", "tree": {"sha": "fee3928d1551e6abffedc4cbb557f5119d2e8e20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fee3928d1551e6abffedc4cbb557f5119d2e8e20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b77d60adb019bb5de05e884a99f3290ec4694137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b77d60adb019bb5de05e884a99f3290ec4694137", "html_url": "https://github.com/rust-lang/rust/commit/b77d60adb019bb5de05e884a99f3290ec4694137", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b77d60adb019bb5de05e884a99f3290ec4694137/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "996fb8d001e52e9c8b558515f3706d39f4b6b700", "url": "https://api.github.com/repos/rust-lang/rust/commits/996fb8d001e52e9c8b558515f3706d39f4b6b700", "html_url": "https://github.com/rust-lang/rust/commit/996fb8d001e52e9c8b558515f3706d39f4b6b700"}, {"sha": "ed19a6e034b25e7e08f34714ee44b196c810f44e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed19a6e034b25e7e08f34714ee44b196c810f44e", "html_url": "https://github.com/rust-lang/rust/commit/ed19a6e034b25e7e08f34714ee44b196c810f44e"}], "stats": {"total": 226, "additions": 190, "deletions": 36}, "files": [{"sha": "611cd564ccac7224ceda954abe8dcaca542083b6", "filename": "src/doc/style/features/functions-and-methods/README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2FREADME.md?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -20,6 +20,7 @@ for any operation that is clearly associated with a particular\n type.\n \n Methods have numerous advantages over functions:\n+\n * They do not need to be imported or qualified to be used: all you\n   need is a value of the appropriate type.\n * Their invocation performs autoborrowing (including mutable borrows)."}, {"sha": "072021194c13e5676a281cf404dbbfa46442c1ae", "filename": "src/doc/style/features/functions-and-methods/input.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -159,7 +159,7 @@ fn foo(a: u8) { ... }\n Note that\n [`ascii::Ascii`](http://static.rust-lang.org/doc/master/std/ascii/struct.Ascii.html)\n is a _wrapper_ around `u8` that guarantees the highest bit is zero; see\n-[newtype patterns]() for more details on creating typesafe wrappers.\n+[newtype patterns](../types/newtype.md) for more details on creating typesafe wrappers.\n \n Static enforcement usually comes at little run-time cost: it pushes the\n costs to the boundaries (e.g. when a `u8` is first converted into an"}, {"sha": "01dff3dcceaf18f23e31252fef41d837fba35ba4", "filename": "src/doc/style/features/let.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Fstyle%2Ffeatures%2Flet.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Fstyle%2Ffeatures%2Flet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Flet.md?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -34,7 +34,7 @@ Prefer\n \n ```rust\n let foo = match bar {\n-    Baz  => 0,\n+    Baz => 0,\n     Quux => 1\n };\n ```\n@@ -44,7 +44,7 @@ over\n ```rust\n let foo;\n match bar {\n-    Baz  => {\n+    Baz => {\n         foo = 0;\n     }\n     Quux => {\n@@ -61,8 +61,8 @@ conditional expression.\n Prefer\n \n ```rust\n-s.iter().map(|x| x * 2)\n-        .collect::<Vec<_>>()\n+let v = s.iter().map(|x| x * 2)\n+                .collect::<Vec<_>>();\n ```\n \n over"}, {"sha": "348be516e374d7aea536f22625aab9a8aecb86e9", "filename": "src/doc/style/ownership/builders.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -16,7 +16,7 @@ If `T` is such a data structure, consider introducing a `T` _builder_:\n    value. When possible, choose a better name: e.g. `Command` is the builder for\n    `Process`.\n 2. The builder constructor should take as parameters only the data _required_ to\n-   to make a `T`.\n+   make a `T`.\n 3. The builder should offer a suite of convenient methods for configuration,\n    including setting up compound inputs (like slices) incrementally.\n    These methods should return `self` to allow chaining."}, {"sha": "12384b00b43bce47c03c221756b3c524e42a585d", "filename": "src/doc/trpl/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Ftrpl%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Ftrpl%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FREADME.md?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -15,7 +15,7 @@ language would.\n \n [rust]: http://rust-lang.org\n \n-\u201cThe Rust Programming Language\u201d is split into seven sections. This introduction\n+\u201cThe Rust Programming Language\u201d is split into eight sections. This introduction\n is the first. After this:\n \n * [Getting started][gs] - Set up your computer for Rust development."}, {"sha": "c97da0e95b8235a0d6c9d352d9e3ab86002707b2", "filename": "src/doc/trpl/glossary.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Ftrpl%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Ftrpl%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fglossary.md?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -19,7 +19,7 @@ In the example above `x` and `y` have arity 2. `z` has arity 3.\n \n When a compiler is compiling your program, it does a number of different\n things. One of the things that it does is turn the text of your program into an\n-\u2018abstract syntax tree\u2019, or\u2018AST\u2019. This tree is a representation of the\n+\u2018abstract syntax tree\u2019, or \u2018AST\u2019. This tree is a representation of the\n structure of your program. For example, `2 + 3` can be turned into a tree:\n \n ```text"}, {"sha": "580960b7e8029758c626f4996d01443aec5496ed", "filename": "src/doc/trpl/lifetimes.md", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Ftrpl%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Ftrpl%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flifetimes.md?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -134,8 +134,29 @@ x: &'a i32,\n # }\n ```\n \n-uses it. So why do we need a lifetime here? We need to ensure that any\n-reference to the contained `i32` does not outlive the containing `Foo`.\n+uses it. So why do we need a lifetime here? We need to ensure that any reference\n+to a `Foo` cannot outlive the reference to an `i32` it contains.\n+\n+If you have multiple references, you can use the same lifetime multiple times:\n+\n+```rust\n+fn x_or_y<'a>(x: &'a str, y: &'a str) -> &'a str {\n+#    x\n+# }\n+```\n+\n+This says that `x` and `y` both are alive for the same scope, and that the\n+return value is also alive for that scope. If you wanted `x` and `y` to have\n+different lifetimes, you can use multiple lifetime parameters:\n+\n+```rust\n+fn x_or_y<'a, 'b>(x: &'a str, y: &'b str) -> &'a str {\n+#    x\n+# }\n+```\n+\n+In this example, `x` and `y` have different valid scopes, but the return value\n+has the same lifetime as `x`.\n \n ## Thinking in scopes\n "}, {"sha": "1f694f71a883f761e7ac5a947379cbbcf18a6698", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -4,7 +4,7 @@ Functions are great, but if you want to call a bunch of them on some data, it\n can be awkward. Consider this code:\n \n ```rust,ignore\n-baz(bar(foo)));\n+baz(bar(foo));\n ```\n \n We would read this left-to right, and so we see \u2018baz bar foo\u2019. But this isn\u2019t the"}, {"sha": "2ef9e7ca22e60a655b30ea6b037855f09c5d6889", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -285,7 +285,7 @@ fn bar<T, K>(x: T, y: K) where T: Clone, K: Clone + Debug {\n \n fn main() {\n     foo(\"Hello\", \"world\");\n-    bar(\"Hello\", \"workd\");\n+    bar(\"Hello\", \"world\");\n }\n ```\n "}, {"sha": "26c6e899df1ce81d5b6817726b2762c3dc75a478", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -52,20 +52,61 @@ pub use intrinsics::transmute;\n /// * `mpsc::{Sender, Receiver}` cycles (they use `Arc` internally)\n /// * Panicking destructors are likely to leak local resources\n ///\n+/// # When To Use\n+///\n+/// There's only a few reasons to use this function. They mainly come\n+/// up in unsafe code or FFI code.\n+///\n+/// * You have an uninitialized value, perhaps for performance reasons, and\n+///   need to prevent the destructor from running on it.\n+/// * You have two copies of a value (like `std::mem::swap`), but need the\n+///   destructor to only run once to prevent a double free.\n+/// * Transferring resources across FFI boundries.\n+///\n /// # Example\n ///\n-/// ```rust,no_run\n+/// Leak some heap memory by never deallocating it.\n+///\n+/// ```rust\n /// use std::mem;\n-/// use std::fs::File;\n ///\n-/// // Leak some heap memory by never deallocating it\n /// let heap_memory = Box::new(3);\n /// mem::forget(heap_memory);\n+/// ```\n+///\n+/// Leak an I/O object, never closing the file.\n+///\n+/// ```rust,no_run\n+/// use std::mem;\n+/// use std::fs::File;\n ///\n-/// // Leak an I/O object, never closing the file\n /// let file = File::open(\"foo.txt\").unwrap();\n /// mem::forget(file);\n /// ```\n+///\n+/// The swap function uses forget to good effect.\n+///\n+/// ```rust\n+/// use std::mem;\n+/// use std::ptr;\n+///\n+/// fn swap<T>(x: &mut T, y: &mut T) {\n+///     unsafe {\n+///         // Give ourselves some scratch space to work with\n+///         let mut t: T = mem::uninitialized();\n+///\n+///         // Perform the swap, `&mut` pointers never alias\n+///         ptr::copy_nonoverlapping(&*x, &mut t, 1);\n+///         ptr::copy_nonoverlapping(&*y, x, 1);\n+///         ptr::copy_nonoverlapping(&t, y, 1);\n+///\n+///         // y and t now point to the same thing, but we need to completely\n+///         // forget `t` because we do not want to run the destructor for `T`\n+///         // on its value, which is still owned somewhere outside this function.\n+///         mem::forget(t);\n+///     }\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn forget<T>(t: T) {\n     unsafe { intrinsics::forget(t) }\n@@ -267,8 +308,9 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n         ptr::copy_nonoverlapping(&*y, x, 1);\n         ptr::copy_nonoverlapping(&t, y, 1);\n \n-        // y and t now point to the same thing, but we need to completely forget `t`\n-        // because it's no longer relevant.\n+        // y and t now point to the same thing, but we need to completely\n+        // forget `t` because we do not want to run the destructor for `T`\n+        // on its value, which is still owned somewhere outside this function.\n         forget(t);\n     }\n }"}, {"sha": "a3577981c1e4b6105b67d2f19e90984e8b29ebea", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -196,9 +196,13 @@ const Y: i32 = A;\n \"##,\n \n E0015: r##\"\n-The only function calls allowed in static or constant expressions are enum\n-variant constructors or struct constructors (for unit or tuple structs). This\n-is because Rust currently does not support compile-time function execution.\n+The only functions that can be called in static or constant expressions are\n+`const` functions. Rust currently does not support more general compile-time\n+function execution.\n+\n+See [RFC 911] for more details on the design of `const fn`s.\n+\n+[RFC 911]: https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md\n \"##,\n \n E0018: r##\"\n@@ -842,6 +846,53 @@ struct Foo<T: 'static> {\n     foo: &'static T\n }\n ```\n+\"##,\n+\n+E0378: r##\"\n+Method calls that aren't calls to inherent `const` methods are disallowed\n+in statics, constants, and constant functions.\n+\n+For example:\n+\n+```\n+const BAZ: i32 = Foo(25).bar(); // error, `bar` isn't `const`\n+\n+struct Foo(i32);\n+\n+impl Foo {\n+    const fn foo(&self) -> i32 {\n+        self.bar() // error, `bar` isn't `const`\n+    }\n+\n+    fn bar(&self) -> i32 { self.0 }\n+}\n+```\n+\n+For more information about `const fn`'s, see [RFC 911].\n+\n+[RFC 911]: https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md\n+\"##,\n+\n+E0394: r##\"\n+From [RFC 246]:\n+\n+ > It is illegal for a static to reference another static by value. It is\n+ > required that all references be borrowed.\n+\n+[RFC 246]: https://github.com/rust-lang/rfcs/pull/246\n+\"##,\n+\n+E0397: r##\"\n+It is not allowed for a mutable static to allocate or have destructors. For\n+example:\n+\n+```\n+// error: mutable statics are not allowed to have boxes\n+static mut FOO: Option<Box<usize>> = None;\n+\n+// error: mutable statics are not allowed to have destructors\n+static mut BAR: Option<Vec<i32>> = None;\n+```\n \"##\n \n }\n@@ -891,9 +942,6 @@ register_diagnostics! {\n     E0315, // cannot invoke closure outside of its lifetime\n     E0316, // nested quantification of lifetimes\n     E0370, // discriminant overflow\n-    E0378, // method calls limited to constant inherent methods\n-    E0394, // cannot refer to other statics by value, use the address-of\n-           // operator or a constant instead\n     E0395, // pointer comparison in const-expr\n     E0396  // pointer dereference in const-expr\n }"}, {"sha": "7403462df8ace518898596ca0c3d933ee2fa2582", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -273,13 +273,13 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         let suffix = if tcontents.has_dtor() {\n             \"destructors\"\n         } else if tcontents.owns_owned() {\n-            \"owned pointers\"\n+            \"boxes\"\n         } else {\n             return\n         };\n \n-        self.tcx.sess.span_err(e.span, &format!(\"mutable statics are not allowed \\\n-                                                 to have {}\", suffix));\n+        span_err!(self.tcx.sess, e.span, E0397,\n+                 \"mutable statics are not allowed to have {}\", suffix);\n     }\n \n     fn check_static_type(&self, e: &ast::Expr) {"}, {"sha": "c822a7faa19b473383fd3b1b524d23cbe42e2a89", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -170,6 +170,31 @@ Reference:\n http://doc.rust-lang.org/reference.html#trait-objects\n \"##,\n \n+E0040: r##\"\n+It is not allowed to manually call destructors in Rust. It is also not\n+necessary to do this since `drop` is called automatically whenever a value goes\n+out of scope.\n+\n+Here's an example of this error:\n+\n+```\n+struct Foo {\n+    x: i32,\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"kaboom\");\n+    }\n+}\n+\n+fn main() {\n+    let mut x = Foo { x: -7 };\n+    x.drop(); // error: explicit use of destructor method\n+}\n+```\n+\"##,\n+\n E0046: r##\"\n When trying to make some type implement a trait `Foo`, you must, at minimum,\n provide implementations for all of `Foo`'s required methods (meaning the\n@@ -241,7 +266,7 @@ impl Foo for Bar {\n     fn foo(x: i16) { }\n \n     // error, values differ in mutability\n-    fn foo(&mut self) { }\n+    fn bar(&mut self) { }\n }\n ```\n \"##,\n@@ -542,6 +567,21 @@ enum Empty {}\n ```\n \"##,\n \n+E0087: r##\"\n+Too many type parameters were supplied for a function. For example:\n+\n+```\n+fn foo<T>() {}\n+\n+fn main() {\n+    foo::<f64, bool>(); // error, expected 1 parameter, found 2 parameters\n+}\n+```\n+\n+The number of supplied parameters much exactly match the number of defined type\n+parameters.\n+\"##,\n+\n E0089: r##\"\n Not enough type parameters were supplied for a function. For example:\n \n@@ -1098,6 +1138,13 @@ Trait2 { ... }`) does not work if the trait is not object-safe. Please see the\n [RFC 255]: https://github.com/rust-lang/rfcs/pull/255\n \"##,\n \n+E0379: r##\"\n+Trait methods cannot be declared `const` by design. For more information, see\n+[RFC 911].\n+\n+[RFC 911]: https://github.com/rust-lang/rfcs/pull/911\n+\"##,\n+\n E0380: r##\"\n Default impls are only allowed for traits with no methods or associated items.\n For more information see the [opt-in builtin traits RFC](https://github.com/rust\n@@ -1113,7 +1160,6 @@ register_diagnostics! {\n     E0034, // multiple applicable methods in scope\n     E0035, // does not take type parameters\n     E0036, // incorrect number of type parameters given for this method\n-    E0040, // explicit use of destructor method\n     E0044, // foreign items may not have type parameters\n     E0045, // variadic function must have C calling convention\n     E0057, // method has an incompatible type for trait\n@@ -1128,7 +1174,6 @@ register_diagnostics! {\n     E0077,\n     E0085,\n     E0086,\n-    E0087,\n     E0088,\n     E0090,\n     E0091,\n@@ -1235,7 +1280,6 @@ register_diagnostics! {\n            // between structures\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n-    E0379,  // trait fns cannot be const\n     E0390, // only a single inherent implementation marked with\n            // `#[lang = \\\"{}\\\"]` is allowed for the `{}` primitive\n     E0391, // unsupported cyclic reference between types/traits detected"}, {"sha": "e3bb01e6970786fa1bf94be2ce1502eedf4ec95a", "filename": "src/test/compile-fail/static-mut-not-constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -12,6 +12,6 @@\n \n static mut a: Box<isize> = box 3;\n //~^ ERROR allocations are not allowed in statics\n-//~^^ ERROR mutable statics are not allowed to have owned pointers\n+//~^^ ERROR mutable statics are not allowed to have boxes\n \n fn main() {}"}, {"sha": "5b104d4bb0c7e899b5139f771859b015325a1990", "filename": "src/test/run-pass/method-mut-self-modifies-mut-slice-lvalue.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77d60adb019bb5de05e884a99f3290ec4694137/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs?ref=b77d60adb019bb5de05e884a99f3290ec4694137", "patch": "@@ -17,14 +17,12 @@\n \n use std::slice;\n \n-pub type IoResult<T> = Result<T, ()>;\n-\n trait MyWriter {\n-    fn my_write(&mut self, buf: &[u8]) -> IoResult<()>;\n+    fn my_write(&mut self, buf: &[u8]) -> Result<(), ()>;\n }\n \n impl<'a> MyWriter for &'a mut [u8] {\n-    fn my_write(&mut self, buf: &[u8]) -> IoResult<()> {\n+    fn my_write(&mut self, buf: &[u8]) -> Result<(), ()> {\n         slice::bytes::copy_memory(buf, *self);\n \n         let write_len = buf.len();"}]}