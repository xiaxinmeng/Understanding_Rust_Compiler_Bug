{"sha": "0132f8258ae0fbc4f2b461b28d510222d22aa979", "node_id": "C_kwDOAAsO6NoAKDAxMzJmODI1OGFlMGZiYzRmMmI0NjFiMjhkNTEwMjIyZDIyYWE5Nzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-23T12:26:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-23T12:26:51Z"}, "message": "Auto merge of #87064 - Aaron1011:new-closure-track-caller, r=estebank\n\nSupport `#[track_caller]` on closures and generators\n\n## Lang team summary\n\nThis PR adds support for placing the `#[track_caller]` attribute on closure and generator expressions. This attribute's addition behaves identically (from a users perspective) to the attribute being placed on the method in impl Fn/FnOnce/FnMut for ... generated by compiler.\n\nThe attribute is currently \"double\" feature gated -- both `stmt_expr_attributes` (preexisting) and `closure_track_caller` (newly added) must be enabled in order to place these attributes on closures.\n\nAs the Fn* traits lack a `#[track_caller]` attribute in their definition, caller information does not propagate when invoking closures through dyn Fn*. There is no limitation that this PR adds in supporting this; it can be added in the future.\n\n# Implementation details\n\nThis is implemented in the same way as for functions - an extra\nlocation argument is appended to the end of the ABI. For closures,\nthis argument is *not* part of the 'tupled' argument storing the\nparameters - the final closure argument for `#[track_caller]` closures\nis no longer a tuple.\n\nFor direct (monomorphized) calls, the necessary support was already\nimplemented - we just needeed to adjust some assertions around checking\nthe ABI and argument count to take closures into account.\n\nFor calls through a trait object, more work was needed.\nWhen creating a `ReifyShim`, we need to create a shim\nfor the trait method (e.g. `FnOnce::call_mut`) - unlike normal\nfunctions, closures are never invoked directly, and always go through a\ntrait method.\n\nAdditional handling was needed for `InstanceDef::ClosureOnceShim`. In\norder to pass location information throgh a direct (monomorphized) call\nto `FnOnce::call_once` on an `FnMut` closure, we need to make\n`ClosureOnceShim` aware of `#[tracked_caller]`. A new field\n`track_caller` is added to `ClosureOnceShim` - this is used by\n`InstanceDef::requires_caller` location, allowing codegen to\npass through the extra location argument.\n\nSince `ClosureOnceShim.track_caller` is only used by codegen,\nwe end up generating two identical MIR shims - one for\n`track_caller == true`, and one for `track_caller == false`. However,\nthese two shims are used by the entire crate (i.e. it's two shims total,\nnot two shims per unique closure), so this shouldn't a big deal.", "tree": {"sha": "206541cfe0136cc4311907dfc8699f1b4ff57768", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/206541cfe0136cc4311907dfc8699f1b4ff57768"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0132f8258ae0fbc4f2b461b28d510222d22aa979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0132f8258ae0fbc4f2b461b28d510222d22aa979", "html_url": "https://github.com/rust-lang/rust/commit/0132f8258ae0fbc4f2b461b28d510222d22aa979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0132f8258ae0fbc4f2b461b28d510222d22aa979/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15d9ba0133ce0b35348e1c8367afe00aec841ffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/15d9ba0133ce0b35348e1c8367afe00aec841ffa", "html_url": "https://github.com/rust-lang/rust/commit/15d9ba0133ce0b35348e1c8367afe00aec841ffa"}, {"sha": "94b19fac263021dc85133138079d684da547a1e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/94b19fac263021dc85133138079d684da547a1e0", "html_url": "https://github.com/rust-lang/rust/commit/94b19fac263021dc85133138079d684da547a1e0"}], "stats": {"total": 290, "additions": 267, "deletions": 23}, "files": [{"sha": "5aa2a4221338ba3a87530edb861e1661246c4cf4", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -777,22 +777,30 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             self.codegen_argument(&mut bx, op, &mut llargs, &fn_abi.args[i]);\n         }\n-        if let Some(tup) = untuple {\n+        let num_untupled = untuple.map(|tup| {\n             self.codegen_arguments_untupled(\n                 &mut bx,\n                 tup,\n                 &mut llargs,\n                 &fn_abi.args[first_args.len()..],\n             )\n-        }\n+        });\n \n         let needs_location =\n             instance.map_or(false, |i| i.def.requires_caller_location(self.cx.tcx()));\n         if needs_location {\n+            let mir_args = if let Some(num_untupled) = num_untupled {\n+                first_args.len() + num_untupled\n+            } else {\n+                args.len()\n+            };\n             assert_eq!(\n                 fn_abi.args.len(),\n-                args.len() + 1,\n-                \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR\",\n+                mir_args + 1,\n+                \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR: {:?} {:?} {:?}\",\n+                instance,\n+                fn_span,\n+                fn_abi,\n             );\n             let location =\n                 self.get_caller_location(&mut bx, mir::SourceInfo { span: fn_span, ..source_info });\n@@ -1122,7 +1130,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         operand: &mir::Operand<'tcx>,\n         llargs: &mut Vec<Bx::Value>,\n         args: &[ArgAbi<'tcx, Ty<'tcx>>],\n-    ) {\n+    ) -> usize {\n         let tuple = self.codegen_operand(bx, operand);\n \n         // Handle both by-ref and immediate tuples.\n@@ -1142,6 +1150,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.codegen_argument(bx, op, llargs, &args[i]);\n             }\n         }\n+        tuple.layout.fields.count()\n     }\n \n     fn get_caller_location("}, {"sha": "476ddbd93980ca76565fd2d9579fa0c3fc80bc5b", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -258,6 +258,8 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     let mut idx = 0;\n     let mut llarg_idx = fx.fn_abi.ret.is_indirect() as usize;\n \n+    let mut num_untupled = None;\n+\n     let args = mir\n         .args_iter()\n         .enumerate()\n@@ -286,6 +288,11 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                     let pr_field = place.project_field(bx, i);\n                     bx.store_fn_arg(arg, &mut llarg_idx, pr_field);\n                 }\n+                assert_eq!(\n+                    None,\n+                    num_untupled.replace(tupled_arg_tys.len()),\n+                    \"Replaced existing num_tupled\"\n+                );\n \n                 return LocalRef::Place(place);\n             }\n@@ -362,10 +369,17 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         .collect::<Vec<_>>();\n \n     if fx.instance.def.requires_caller_location(bx.tcx()) {\n+        let mir_args = if let Some(num_untupled) = num_untupled {\n+            // Subtract off the tupled argument that gets 'expanded'\n+            args.len() - 1 + num_untupled\n+        } else {\n+            args.len()\n+        };\n         assert_eq!(\n             fx.fn_abi.args.len(),\n-            args.len() + 1,\n-            \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR\",\n+            mir_args + 1,\n+            \"#[track_caller] instance {:?} must have 1 more argument in their ABI than in their MIR\",\n+            fx.instance\n         );\n \n         let arg = fx.fn_abi.args.last().unwrap();"}, {"sha": "ecc2de14a7914325e6e26e01419ecc33e99e46fe", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -678,6 +678,8 @@ declare_features! (\n     /// Allows the `#[must_not_suspend]` attribute.\n     (active, must_not_suspend, \"1.57.0\", Some(83310), None),\n \n+    /// Allows `#[track_caller]` on closures and generators.\n+    (active, closure_track_caller, \"1.57.0\", Some(87417), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates"}, {"sha": "13bbb8d1f534d6072cadbfdd4587bb83242053a1", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -348,7 +348,7 @@ macro_rules! make_mir_visitor {\n                         ty::InstanceDef::VtableShim(_def_id) |\n                         ty::InstanceDef::ReifyShim(_def_id) |\n                         ty::InstanceDef::Virtual(_def_id, _) |\n-                        ty::InstanceDef::ClosureOnceShim { call_once: _def_id } |\n+                        ty::InstanceDef::ClosureOnceShim { call_once: _def_id, track_caller: _ } |\n                         ty::InstanceDef::DropGlue(_def_id, None) => {}\n \n                         ty::InstanceDef::FnPtrShim(_def_id, ty) |"}, {"sha": "9b8247fd0283e3d62c554e39bf918152357779b4", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -77,7 +77,7 @@ pub enum InstanceDef<'tcx> {\n     /// `<[FnMut closure] as FnOnce>::call_once`.\n     ///\n     /// The `DefId` is the ID of the `call_once` method in `FnOnce`.\n-    ClosureOnceShim { call_once: DefId },\n+    ClosureOnceShim { call_once: DefId, track_caller: bool },\n \n     /// `core::ptr::drop_in_place::<T>`.\n     ///\n@@ -146,7 +146,7 @@ impl<'tcx> InstanceDef<'tcx> {\n             | InstanceDef::FnPtrShim(def_id, _)\n             | InstanceDef::Virtual(def_id, _)\n             | InstanceDef::Intrinsic(def_id)\n-            | InstanceDef::ClosureOnceShim { call_once: def_id }\n+            | InstanceDef::ClosureOnceShim { call_once: def_id, track_caller: _ }\n             | InstanceDef::DropGlue(def_id, _)\n             | InstanceDef::CloneShim(def_id, _) => def_id,\n         }\n@@ -161,7 +161,7 @@ impl<'tcx> InstanceDef<'tcx> {\n             | InstanceDef::FnPtrShim(def_id, _)\n             | InstanceDef::Virtual(def_id, _)\n             | InstanceDef::Intrinsic(def_id)\n-            | InstanceDef::ClosureOnceShim { call_once: def_id }\n+            | InstanceDef::ClosureOnceShim { call_once: def_id, track_caller: _ }\n             | InstanceDef::DropGlue(def_id, _)\n             | InstanceDef::CloneShim(def_id, _) => ty::WithOptConstParam::unknown(def_id),\n         }\n@@ -231,6 +231,7 @@ impl<'tcx> InstanceDef<'tcx> {\n             | InstanceDef::Virtual(def_id, _) => {\n                 tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n             }\n+            InstanceDef::ClosureOnceShim { call_once: _, track_caller } => track_caller,\n             _ => false,\n         }\n     }\n@@ -381,6 +382,8 @@ impl<'tcx> Instance<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n+        // Use either `resolve_closure` or `resolve_for_vtable`\n+        assert!(!tcx.is_closure(def_id), \"Called `resolve_for_fn_ptr` on closure: {:?}\", def_id);\n         Instance::resolve(tcx, param_env, def_id, substs).ok().flatten().map(|mut resolved| {\n             match resolved.def {\n                 InstanceDef::Item(def) if resolved.def.requires_caller_location(tcx) => {\n@@ -442,10 +445,20 @@ impl<'tcx> Instance<'tcx> {\n                                 })\n                             )\n                         {\n-                            debug!(\n-                                \" => vtable fn pointer created for function with #[track_caller]\"\n-                            );\n-                            resolved.def = InstanceDef::ReifyShim(def.did);\n+                            if tcx.is_closure(def.did) {\n+                                debug!(\" => vtable fn pointer created for closure with #[track_caller]: {:?} for method {:?} {:?}\",\n+                                       def.did, def_id, substs);\n+\n+                                // Create a shim for the `FnOnce/FnMut/Fn` method we are calling\n+                                // - unlike functions, invoking a closure always goes through a\n+                                // trait.\n+                                resolved = Instance { def: InstanceDef::ReifyShim(def_id), substs };\n+                            } else {\n+                                debug!(\n+                                    \" => vtable fn pointer created for function with #[track_caller]: {:?}\", def.did\n+                                );\n+                                resolved.def = InstanceDef::ReifyShim(def.did);\n+                            }\n                         }\n                     }\n                     InstanceDef::Virtual(def_id, _) => {\n@@ -493,7 +506,9 @@ impl<'tcx> Instance<'tcx> {\n             .find(|it| it.kind == ty::AssocKind::Fn)\n             .unwrap()\n             .def_id;\n-        let def = ty::InstanceDef::ClosureOnceShim { call_once };\n+        let track_caller =\n+            tcx.codegen_fn_attrs(closure_did).flags.contains(CodegenFnAttrFlags::TRACK_CALLER);\n+        let def = ty::InstanceDef::ClosureOnceShim { call_once, track_caller };\n \n         let self_ty = tcx.mk_closure(closure_did, substs);\n "}, {"sha": "8f343ba9fec22064b964c13198292c795f310a77", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -638,8 +638,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n                 Some(ty::InstanceDef::FnPtrShim(def_id, tcx.lift(ty)?))\n             }\n             ty::InstanceDef::Virtual(def_id, n) => Some(ty::InstanceDef::Virtual(def_id, n)),\n-            ty::InstanceDef::ClosureOnceShim { call_once } => {\n-                Some(ty::InstanceDef::ClosureOnceShim { call_once })\n+            ty::InstanceDef::ClosureOnceShim { call_once, track_caller } => {\n+                Some(ty::InstanceDef::ClosureOnceShim { call_once, track_caller })\n             }\n             ty::InstanceDef::DropGlue(def_id, ty) => {\n                 Some(ty::InstanceDef::DropGlue(def_id, tcx.lift(ty)?))\n@@ -824,8 +824,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n                 Intrinsic(did) => Intrinsic(did.fold_with(folder)),\n                 FnPtrShim(did, ty) => FnPtrShim(did.fold_with(folder), ty.fold_with(folder)),\n                 Virtual(did, i) => Virtual(did.fold_with(folder), i),\n-                ClosureOnceShim { call_once } => {\n-                    ClosureOnceShim { call_once: call_once.fold_with(folder) }\n+                ClosureOnceShim { call_once, track_caller } => {\n+                    ClosureOnceShim { call_once: call_once.fold_with(folder), track_caller }\n                 }\n                 DropGlue(did, ty) => DropGlue(did.fold_with(folder), ty.fold_with(folder)),\n                 CloneShim(did, ty) => CloneShim(did.fold_with(folder), ty.fold_with(folder)),\n@@ -849,7 +849,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n                 did.visit_with(visitor)?;\n                 ty.visit_with(visitor)\n             }\n-            ClosureOnceShim { call_once } => call_once.visit_with(visitor),\n+            ClosureOnceShim { call_once, track_caller: _ } => call_once.visit_with(visitor),\n         }\n     }\n }"}, {"sha": "f2ea5fedc625c68596af7464c4e7dc9598a1cfda", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -53,7 +53,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n         ty::InstanceDef::ReifyShim(def_id) => {\n             build_call_shim(tcx, instance, None, CallKind::Direct(def_id))\n         }\n-        ty::InstanceDef::ClosureOnceShim { call_once: _ } => {\n+        ty::InstanceDef::ClosureOnceShim { call_once: _, track_caller: _ } => {\n             let fn_mut = tcx.require_lang_item(LangItem::FnMut, None);\n             let call_mut = tcx\n                 .associated_items(fn_mut)"}, {"sha": "44137290d78580ee02b32fad0ede58e2fba1ae2f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -408,6 +408,7 @@ symbols! {\n         clone_from,\n         closure,\n         closure_to_fn_coercion,\n+        closure_track_caller,\n         cmp,\n         cmp_max,\n         cmp_min,"}, {"sha": "231a81421748491275340a71b4801c1aca090b63", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -2778,10 +2778,19 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::thread_local) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n         } else if attr.has_name(sym::track_caller) {\n-            if tcx.is_closure(id) || tcx.fn_sig(id).abi() != abi::Abi::Rust {\n+            if !tcx.is_closure(id) && tcx.fn_sig(id).abi() != abi::Abi::Rust {\n                 struct_span_err!(tcx.sess, attr.span, E0737, \"`#[track_caller]` requires Rust ABI\")\n                     .emit();\n             }\n+            if tcx.is_closure(id) && !tcx.features().closure_track_caller {\n+                feature_err(\n+                    &tcx.sess.parse_sess,\n+                    sym::closure_track_caller,\n+                    attr.span,\n+                    \"`#[track_caller]` on closures is currently unstable\",\n+                )\n+                .emit();\n+            }\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n         } else if attr.has_name(sym::export_name) {\n             if let Some(s) = attr.value_str() {"}, {"sha": "c948810d3e5a1bffcfadc3b5ab35f7fb76d8414e", "filename": "src/doc/unstable-book/src/language-features/closure-track-caller.md", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fclosure-track-caller.md", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fclosure-track-caller.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fclosure-track-caller.md?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -0,0 +1,12 @@\n+# `closure_track_caller`\n+\n+The tracking issue for this feature is: [#87417]\n+\n+[#87417]: https://github.com/rust-lang/rust/issues/87417\n+\n+------------------------\n+\n+Allows using the `#[track_caller]` attribute on closures and generators.\n+Calls made to the closure or generator will have caller information\n+available through `std::panic::Location::caller()`, just like using\n+`#[track_caller]` on a function."}, {"sha": "a8d63a8145a2a30ee0e316e198169ceb59fcd2e9", "filename": "src/test/ui/feature-gates/feature-gate-closure_track_caller.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.rs?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -0,0 +1,7 @@\n+#![feature(stmt_expr_attributes)]\n+#![feature(generators)]\n+\n+fn main() {\n+    let _closure = #[track_caller] || {}; //~ `#[track_caller]` on closures\n+    let _generator = #[track_caller] || { yield; }; //~ `#[track_caller]` on closures\n+}"}, {"sha": "ed63d74fe4d4eadc437b192660122ad5a421c2bc", "filename": "src/test/ui/feature-gates/feature-gate-closure_track_caller.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.stderr?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: `#[track_caller]` on closures is currently unstable\n+  --> $DIR/feature-gate-closure_track_caller.rs:5:20\n+   |\n+LL |     let _closure = #[track_caller] || {};\n+   |                    ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n+\n+error[E0658]: `#[track_caller]` on closures is currently unstable\n+  --> $DIR/feature-gate-closure_track_caller.rs:6:22\n+   |\n+LL |     let _generator = #[track_caller] || { yield; };\n+   |                      ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "670c423a7e0e240809abd3019898761539d5f1f2", "filename": "src/test/ui/rfc-2091-track-caller/tracked-closure.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/0132f8258ae0fbc4f2b461b28d510222d22aa979/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0132f8258ae0fbc4f2b461b28d510222d22aa979/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-closure.rs?ref=0132f8258ae0fbc4f2b461b28d510222d22aa979", "patch": "@@ -0,0 +1,154 @@\n+// run-pass\n+\n+#![feature(stmt_expr_attributes)]\n+#![feature(closure_track_caller)]\n+#![feature(generator_trait)]\n+#![feature(generators)]\n+\n+use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n+use std::panic::Location;\n+\n+type Loc = &'static Location<'static>;\n+\n+#[track_caller]\n+fn mono_invoke_fn<F: Fn(&'static str, bool) -> (&'static str, bool, Loc)>(\n+    val: &F\n+) -> (&'static str, bool, Loc) {\n+    val(\"from_mono\", false)\n+}\n+\n+#[track_caller]\n+fn mono_invoke_fn_once<F: FnOnce(&'static str, bool) -> (&'static str, bool, Loc)>(\n+    val: F\n+) -> (&'static str, bool, Loc) {\n+    val(\"from_mono\", false)\n+}\n+\n+#[track_caller]\n+fn dyn_invoke_fn_mut(\n+    val: &mut dyn FnMut(&'static str, bool) -> (&'static str, bool, Loc)\n+) -> (&'static str, bool, Loc) {\n+    val(\"from_dyn\", false)\n+}\n+\n+#[track_caller]\n+fn dyn_invoke_fn_once(\n+    val: Box<dyn FnOnce(&'static str, bool) -> (&'static str, bool, Loc)>\n+) -> (&'static str, bool, Loc) {\n+    val(\"from_dyn\", false)\n+}\n+\n+\n+fn test_closure() {\n+    let mut track_closure = #[track_caller] |first: &'static str, second: bool| {\n+        (first, second, Location::caller())\n+    };\n+    let (first_arg, first_bool, first_loc) = track_closure(\"first_arg\", true);\n+    let first_line = line!() - 1;\n+    assert_eq!(first_arg, \"first_arg\");\n+    assert_eq!(first_bool, true);\n+    assert_eq!(first_loc.file(), file!());\n+    assert_eq!(first_loc.line(), first_line);\n+    assert_eq!(first_loc.column(), 46);\n+\n+    let (dyn_arg, dyn_bool, dyn_loc) = dyn_invoke_fn_mut(&mut track_closure);\n+    assert_eq!(dyn_arg, \"from_dyn\");\n+    assert_eq!(dyn_bool, false);\n+    // `FnMut::call_mut` does not have `#[track_caller]`,\n+    // so this will not match\n+    assert_ne!(dyn_loc.file(), file!());\n+\n+    let (dyn_arg, dyn_bool, dyn_loc) = dyn_invoke_fn_once(Box::new(track_closure));\n+    assert_eq!(dyn_arg, \"from_dyn\");\n+    assert_eq!(dyn_bool, false);\n+    // `FnOnce::call_once` does not have `#[track_caller]`\n+    // so this will not match\n+    assert_ne!(dyn_loc.file(), file!());\n+\n+\n+    let (mono_arg, mono_bool, mono_loc) = mono_invoke_fn(&track_closure);\n+    let mono_line = line!() - 1;\n+    assert_eq!(mono_arg, \"from_mono\");\n+    assert_eq!(mono_bool, false);\n+    assert_eq!(mono_loc.file(), file!());\n+    assert_eq!(mono_loc.line(), mono_line);\n+    assert_eq!(mono_loc.column(), 43);\n+\n+    let (mono_arg, mono_bool, mono_loc) = mono_invoke_fn_once(track_closure);\n+    let mono_line = line!() - 1;\n+    assert_eq!(mono_arg, \"from_mono\");\n+    assert_eq!(mono_bool, false);\n+    assert_eq!(mono_loc.file(), file!());\n+    assert_eq!(mono_loc.line(), mono_line);\n+    assert_eq!(mono_loc.column(), 43);\n+\n+    let non_tracked_caller = || Location::caller();\n+    let non_tracked_line = line!() - 1; // This is the line of the closure, not its caller\n+    let non_tracked_loc = non_tracked_caller();\n+    assert_eq!(non_tracked_loc.file(), file!());\n+    assert_eq!(non_tracked_loc.line(), non_tracked_line);\n+    assert_eq!(non_tracked_loc.column(), 33);\n+}\n+\n+\n+#[track_caller]\n+fn mono_generator<F: Generator<String, Yield = (&'static str, String, Loc), Return = ()>>(\n+    val: Pin<&mut F>\n+) -> (&'static str, String, Loc) {\n+    match val.resume(\"Mono\".to_string()) {\n+        GeneratorState::Yielded(val) => val,\n+        _ => unreachable!()\n+    }\n+}\n+\n+#[track_caller]\n+fn dyn_generator(\n+    val: Pin<&mut dyn Generator<String, Yield = (&'static str, String, Loc), Return = ()>>\n+) -> (&'static str, String, Loc) {\n+    match val.resume(\"Dyn\".to_string()) {\n+        GeneratorState::Yielded(val) => val,\n+        _ => unreachable!()\n+    }\n+}\n+\n+fn test_generator() {\n+    let generator = #[track_caller] |arg: String| {\n+        yield (\"first\", arg.clone(), Location::caller());\n+        yield (\"second\", arg.clone(), Location::caller());\n+    };\n+\n+    let mut pinned = Box::pin(generator);\n+    let (dyn_ret, dyn_arg, dyn_loc) = dyn_generator(pinned.as_mut());\n+    assert_eq!(dyn_ret, \"first\");\n+    assert_eq!(dyn_arg, \"Dyn\".to_string());\n+    // The `Generator` trait does not have `#[track_caller]` on `resume`, so\n+    // this will not match.\n+    assert_ne!(dyn_loc.file(), file!());\n+\n+\n+    let (mono_ret, mono_arg, mono_loc) = mono_generator(pinned.as_mut());\n+    let mono_line = line!() - 1;\n+    assert_eq!(mono_ret, \"second\");\n+    // The generator ignores the argument to the second `resume` call\n+    assert_eq!(mono_arg, \"Dyn\".to_string());\n+    assert_eq!(mono_loc.file(), file!());\n+    assert_eq!(mono_loc.line(), mono_line);\n+    assert_eq!(mono_loc.column(), 42);\n+\n+    let non_tracked_generator = || { yield Location::caller(); };\n+    let non_tracked_line = line!() - 1; // This is the line of the generator, not its caller\n+    let non_tracked_loc = match Box::pin(non_tracked_generator).as_mut().resume(()) {\n+        GeneratorState::Yielded(val) => val,\n+        _ => unreachable!()\n+    };\n+    assert_eq!(non_tracked_loc.file(), file!());\n+    assert_eq!(non_tracked_loc.line(), non_tracked_line);\n+    assert_eq!(non_tracked_loc.column(), 44);\n+\n+}\n+\n+fn main() {\n+    test_closure();\n+    test_generator();\n+}"}]}