{"sha": "9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNGMwYTFjNzJjN2ExZTk0YzRlZjgwNDYwYzZmZTJjYjg1ZTlmMjg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-04-11T12:09:58Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-04-11T12:09:58Z"}, "message": "Don't lint about unused lifetimes if the lifetimes are used in the body of the function", "tree": {"sha": "50182ba740f1d590227e87e0c7dd9a1763db1114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50182ba740f1d590227e87e0c7dd9a1763db1114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28", "html_url": "https://github.com/rust-lang/rust/commit/9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae57c55fd1963edbed30405ee0688e37553c68f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae57c55fd1963edbed30405ee0688e37553c68f", "html_url": "https://github.com/rust-lang/rust/commit/5ae57c55fd1963edbed30405ee0688e37553c68f"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "6bfcc475841a070235e4b64b8da17726158ce667", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28", "patch": "@@ -6,6 +6,7 @@ use rustc::hir::intravisit::{Visitor, walk_ty, walk_ty_param_bound, walk_fn_decl\n use std::collections::{HashSet, HashMap};\n use syntax::codemap::Span;\n use utils::{in_external_macro, span_lint, last_path_segment};\n+use syntax::symbol::keywords;\n \n /// **What it does:** Checks for lifetime annotations which can be removed by\n /// relying on lifetime elision.\n@@ -58,20 +59,24 @@ impl LintPass for LifetimePass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let ItemFn(ref decl, _, _, _, ref generics, _) = item.node {\n-            check_fn_inner(cx, decl, generics, item.span);\n+        if let ItemFn(ref decl, _, _, _, ref generics, id) = item.node {\n+            check_fn_inner(cx, decl, Some(id), generics, item.span);\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n-        if let ImplItemKind::Method(ref sig, _) = item.node {\n-            check_fn_inner(cx, &sig.decl, &sig.generics, item.span);\n+        if let ImplItemKind::Method(ref sig, id) = item.node {\n+            check_fn_inner(cx, &sig.decl, Some(id), &sig.generics, item.span);\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n-        if let TraitItemKind::Method(ref sig, _) = item.node {\n-            check_fn_inner(cx, &sig.decl, &sig.generics, item.span);\n+        if let TraitItemKind::Method(ref sig, ref body) = item.node {\n+            let body = match *body {\n+                TraitMethod::Required(_) => None,\n+                TraitMethod::Provided(id) => Some(id),\n+            };\n+            check_fn_inner(cx, &sig.decl, body, &sig.generics, item.span);\n         }\n     }\n }\n@@ -98,7 +103,7 @@ fn bound_lifetimes(bound: &TyParamBound) -> HirVec<&Lifetime> {\n     }\n }\n \n-fn check_fn_inner<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, generics: &'tcx Generics, span: Span) {\n+fn check_fn_inner<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, body: Option<BodyId>, generics: &'tcx Generics, span: Span) {\n     if in_external_macro(cx, span) || has_where_lifetimes(cx, &generics.where_clause) {\n         return;\n     }\n@@ -107,7 +112,7 @@ fn check_fn_inner<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, gene\n         .iter()\n         .flat_map(|typ| typ.bounds.iter().flat_map(bound_lifetimes));\n \n-    if could_use_elision(cx, decl, &generics.lifetimes, bounds_lts) {\n+    if could_use_elision(cx, decl, body, &generics.lifetimes, bounds_lts) {\n         span_lint(cx,\n                   NEEDLESS_LIFETIMES,\n                   span,\n@@ -119,6 +124,7 @@ fn check_fn_inner<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, gene\n fn could_use_elision<'a, 'tcx: 'a, T: Iterator<Item = &'tcx Lifetime>>(\n     cx: &LateContext<'a, 'tcx>,\n     func: &'tcx FnDecl,\n+    body: Option<BodyId>,\n     named_lts: &'tcx [LifetimeDef],\n     bounds_lts: T\n ) -> bool {\n@@ -147,6 +153,14 @@ fn could_use_elision<'a, 'tcx: 'a, T: Iterator<Item = &'tcx Lifetime>>(\n     let input_lts = lts_from_bounds(input_visitor.into_vec(), bounds_lts);\n     let output_lts = output_visitor.into_vec();\n \n+    if let Some(body_id) = body {\n+        let mut checker = BodyLifetimeChecker { lifetimes_used_in_body: false };\n+        checker.visit_expr(&cx.tcx.hir.body(body_id).value);\n+        if checker.lifetimes_used_in_body {\n+            return false;\n+        }\n+    }\n+\n     // check for lifetimes from higher scopes\n     for lt in input_lts.iter().chain(output_lts.iter()) {\n         if !allowed_lts.contains(lt) {\n@@ -384,3 +398,20 @@ fn report_extra_lifetimes<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, func: &'tcx\n         span_lint(cx, UNUSED_LIFETIMES, v, \"this lifetime isn't used in the function definition\");\n     }\n }\n+\n+struct BodyLifetimeChecker {\n+    lifetimes_used_in_body: bool,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n+    // for lifetimes as parameters of generics\n+    fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n+        if lifetime.name != keywords::Invalid.name() && lifetime.name != \"'static\" {\n+            self.lifetimes_used_in_body = true;\n+        }\n+    }\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "620ceafdba2658d0ec3d20fd830e154431372af8", "filename": "tests/ui/lifetimes.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28/tests%2Fui%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28/tests%2Fui%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.rs?ref=9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28", "patch": "@@ -128,5 +128,29 @@ fn elided_input_named_output<'a>(_arg: &str) -> &'a str { unimplemented!() }\n fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() }\n fn trait_bound<'a, T: WithLifetime<'a>>(_: &'a u8, _: T) { unimplemented!() }\n \n+// don't warn on these, see #292\n+fn trait_bound_bug<'a, T: WithLifetime<'a>>() { unimplemented!() }\n+\n+// #740\n+struct Test {\n+    vec: Vec<usize>,\n+}\n+\n+impl Test {\n+    fn iter<'a>(&'a self) -> Box<Iterator<Item = usize> + 'a> {\n+        unimplemented!()\n+    }\n+}\n+\n+\n+trait LintContext<'a> {}\n+\n+fn f<'a, T: LintContext<'a>>(cx: &T) {}\n+\n+fn test<'a>(x: &'a [u8]) -> u8 {\n+    let y: &'a u8 = &x[5];\n+    *y\n+}\n+\n fn main() {\n }"}, {"sha": "aa12547bb2069cbbcada8a274dfa0d3676378beb", "filename": "tests/ui/lifetimes.stderr", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28/tests%2Fui%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28/tests%2Fui%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.stderr?ref=9a4c0a1c72c7a1e94c4ef80460c6fe2cb85e9f28", "patch": "@@ -91,5 +91,28 @@ error: explicit lifetimes given in parameter types where they could be elided\n 128 | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() }\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: explicit lifetimes given in parameter types where they could be elided\n+   --> $DIR/lifetimes.rs:132:1\n+    |\n+132 | fn trait_bound_bug<'a, T: WithLifetime<'a>>() { unimplemented!() }\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+   --> $DIR/lifetimes.rs:140:5\n+    |\n+140 |       fn iter<'a>(&'a self) -> Box<Iterator<Item = usize> + 'a> {\n+    |  _____^ starting here...\n+141 | |         unimplemented!()\n+142 | |     }\n+    | |_____^ ...ending here\n+\n+warning: unused variable: `cx`\n+   --> $DIR/lifetimes.rs:148:30\n+    |\n+148 | fn f<'a, T: LintContext<'a>>(cx: &T) {}\n+    |                              ^^\n+    |\n+    = note: #[warn(unused_variables)] on by default\n+\n+error: aborting due to 16 previous errors\n "}]}