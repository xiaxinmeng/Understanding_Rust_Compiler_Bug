{"sha": "89d443a4c3b23d186b07d378b3f1f624cef81055", "node_id": "C_kwDOAAsO6NoAKDg5ZDQ0M2E0YzNiMjNkMTg2YjA3ZDM3OGIzZjFmNjI0Y2VmODEwNTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-17T14:58:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-17T14:58:39Z"}, "message": "Auto merge of #10193 - Jarcho:issue_9894, r=Manishearth\n\nFix suggestion in `transmutes_expressible_as_ptr_casts` when the source type is a borrow.\n\nfixes #9894\n\nchangelog: `transmutes_expressible_as_ptr_casts`: Fix suggestion when the source type is a borrow.", "tree": {"sha": "b3c64348e4767f008273d71a6f26c36cbf5250dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3c64348e4767f008273d71a6f26c36cbf5250dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89d443a4c3b23d186b07d378b3f1f624cef81055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89d443a4c3b23d186b07d378b3f1f624cef81055", "html_url": "https://github.com/rust-lang/rust/commit/89d443a4c3b23d186b07d378b3f1f624cef81055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89d443a4c3b23d186b07d378b3f1f624cef81055/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a7603994b21e14e861edb23b175ab3c84543c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a7603994b21e14e861edb23b175ab3c84543c0", "html_url": "https://github.com/rust-lang/rust/commit/07a7603994b21e14e861edb23b175ab3c84543c0"}, {"sha": "b38848d8f740a7ada6b2ba14acf08c5e57c94002", "url": "https://api.github.com/repos/rust-lang/rust/commits/b38848d8f740a7ada6b2ba14acf08c5e57c94002", "html_url": "https://github.com/rust-lang/rust/commit/b38848d8f740a7ada6b2ba14acf08c5e57c94002"}], "stats": {"total": 103, "additions": 60, "deletions": 43}, "files": [{"sha": "c0d290b5adc420692c0a0e06515283ab3c3ea38f", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89d443a4c3b23d186b07d378b3f1f624cef81055/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d443a4c3b23d186b07d378b3f1f624cef81055/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=89d443a4c3b23d186b07d378b3f1f624cef81055", "patch": "@@ -479,7 +479,10 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 // - char conversions (https://github.com/rust-lang/rust/issues/89259)\n                 let const_context = in_constant(cx, e.hir_id);\n \n-                let from_ty = cx.typeck_results().expr_ty_adjusted(arg);\n+                let (from_ty, from_ty_adjusted) = match cx.typeck_results().expr_adjustments(arg) {\n+                    [] => (cx.typeck_results().expr_ty(arg), false),\n+                    [.., a] => (a.target, true),\n+                };\n                 // Adjustments for `to_ty` happen after the call to `transmute`, so don't use them.\n                 let to_ty = cx.typeck_results().expr_ty(e);\n \n@@ -506,7 +509,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                     );\n \n                 if !linted {\n-                    transmutes_expressible_as_ptr_casts::check(cx, e, from_ty, to_ty, arg);\n+                    transmutes_expressible_as_ptr_casts::check(cx, e, from_ty, from_ty_adjusted, to_ty, arg);\n                 }\n             }\n         }"}, {"sha": "8530b43243fa36fd6a97c89650cf5f5f0b51d87b", "filename": "clippy_lints/src/transmute/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/89d443a4c3b23d186b07d378b3f1f624cef81055/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d443a4c3b23d186b07d378b3f1f624cef81055/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs?ref=89d443a4c3b23d186b07d378b3f1f624cef81055", "patch": "@@ -1,36 +1,52 @@\n-use super::utils::can_be_expressed_as_pointer_cast;\n+use super::utils::check_cast;\n use super::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS;\n-use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::sugg;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::sugg::Sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{cast::CastKind, Ty};\n \n /// Checks for `transmutes_expressible_as_ptr_casts` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`.\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n+    from_ty_adjusted: bool,\n     to_ty: Ty<'tcx>,\n     arg: &'tcx Expr<'_>,\n ) -> bool {\n-    if can_be_expressed_as_pointer_cast(cx, e, from_ty, to_ty) {\n-        span_lint_and_then(\n-            cx,\n-            TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n-            e.span,\n-            &format!(\"transmute from `{from_ty}` to `{to_ty}` which could be expressed as a pointer cast instead\"),\n-            |diag| {\n-                if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                    let sugg = arg.as_ty(to_ty.to_string()).to_string();\n-                    diag.span_suggestion(e.span, \"try\", sugg, Applicability::MachineApplicable);\n-                }\n-            },\n-        );\n-        true\n-    } else {\n-        false\n-    }\n+    use CastKind::{AddrPtrCast, ArrayPtrCast, FnPtrAddrCast, FnPtrPtrCast, PtrAddrCast, PtrPtrCast};\n+    let mut app = Applicability::MachineApplicable;\n+    let sugg = match check_cast(cx, e, from_ty, to_ty) {\n+        Some(PtrPtrCast | AddrPtrCast | ArrayPtrCast | FnPtrPtrCast | FnPtrAddrCast) => {\n+            Sugg::hir_with_context(cx, arg, e.span.ctxt(), \"..\", &mut app)\n+                .as_ty(to_ty.to_string())\n+                .to_string()\n+        },\n+        Some(PtrAddrCast) if !from_ty_adjusted => Sugg::hir_with_context(cx, arg, e.span.ctxt(), \"..\", &mut app)\n+            .as_ty(to_ty.to_string())\n+            .to_string(),\n+\n+        // The only adjustments here would be ref-to-ptr and unsize coercions. The result of an unsize coercions can't\n+        // be transmuted to a usize. For ref-to-ptr coercions, borrows need to be cast to a pointer before being cast to\n+        // a usize.\n+        Some(PtrAddrCast) => format!(\n+            \"{} as {to_ty}\",\n+            Sugg::hir_with_context(cx, arg, e.span.ctxt(), \"..\", &mut app).as_ty(from_ty)\n+        ),\n+        _ => return false,\n+    };\n+\n+    span_lint_and_sugg(\n+        cx,\n+        TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n+        e.span,\n+        &format!(\"transmute from `{from_ty}` to `{to_ty}` which could be expressed as a pointer cast instead\"),\n+        \"try\",\n+        sugg,\n+        app,\n+    );\n+    true\n }"}, {"sha": "c93f047f5da26c1f1cbf03e4b2263cf06640017b", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/89d443a4c3b23d186b07d378b3f1f624cef81055/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d443a4c3b23d186b07d378b3f1f624cef81055/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=89d443a4c3b23d186b07d378b3f1f624cef81055", "patch": "@@ -20,28 +20,16 @@ pub(super) fn is_layout_incompatible<'tcx>(cx: &LateContext<'tcx>, from: Ty<'tcx\n     }\n }\n \n-/// Check if the type conversion can be expressed as a pointer cast, instead of\n-/// a transmute. In certain cases, including some invalid casts from array\n-/// references to pointers, this may cause additional errors to be emitted and/or\n-/// ICE error messages. This function will panic if that occurs.\n-pub(super) fn can_be_expressed_as_pointer_cast<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    e: &'tcx Expr<'_>,\n-    from_ty: Ty<'tcx>,\n-    to_ty: Ty<'tcx>,\n-) -> bool {\n-    use CastKind::{AddrPtrCast, ArrayPtrCast, FnPtrAddrCast, FnPtrPtrCast, PtrAddrCast, PtrPtrCast};\n-    matches!(\n-        check_cast(cx, e, from_ty, to_ty),\n-        Some(PtrPtrCast | PtrAddrCast | AddrPtrCast | ArrayPtrCast | FnPtrPtrCast | FnPtrAddrCast)\n-    )\n-}\n-\n /// If a cast from `from_ty` to `to_ty` is valid, returns an Ok containing the kind of\n /// the cast. In certain cases, including some invalid casts from array references\n /// to pointers, this may cause additional errors to be emitted and/or ICE error\n /// messages. This function will panic if that occurs.\n-fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> Option<CastKind> {\n+pub(super) fn check_cast<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+) -> Option<CastKind> {\n     let hir_id = e.hir_id;\n     let local_def_id = hir_id.owner.def_id;\n "}, {"sha": "55307506eb3c74ca246381a58aaddf42eade4616", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d443a4c3b23d186b07d378b3f1f624cef81055/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/89d443a4c3b23d186b07d378b3f1f624cef81055/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=89d443a4c3b23d186b07d378b3f1f624cef81055", "patch": "@@ -51,6 +51,8 @@ fn main() {\n     // e is a function pointer type and U is an integer; fptr-addr-cast\n     let _usize_from_fn_ptr_transmute = unsafe { foo as usize };\n     let _usize_from_fn_ptr = foo as *const usize;\n+\n+    let _usize_from_ref = unsafe { &1u32 as *const u32 as usize };\n }\n \n // If a ref-to-ptr cast of this form where the pointer type points to a type other"}, {"sha": "e7360f3f9dcbaacc48e1607b95e6bfaa8982f939", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d443a4c3b23d186b07d378b3f1f624cef81055/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d443a4c3b23d186b07d378b3f1f624cef81055/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=89d443a4c3b23d186b07d378b3f1f624cef81055", "patch": "@@ -51,6 +51,8 @@ fn main() {\n     // e is a function pointer type and U is an integer; fptr-addr-cast\n     let _usize_from_fn_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, usize>(foo) };\n     let _usize_from_fn_ptr = foo as *const usize;\n+\n+    let _usize_from_ref = unsafe { transmute::<*const u32, usize>(&1u32) };\n }\n \n // If a ref-to-ptr cast of this form where the pointer type points to a type other"}, {"sha": "e862fcb67a4a086421355728a997c318126e2594", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89d443a4c3b23d186b07d378b3f1f624cef81055/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89d443a4c3b23d186b07d378b3f1f624cef81055/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr?ref=89d443a4c3b23d186b07d378b3f1f624cef81055", "patch": "@@ -46,11 +46,17 @@ error: transmute from `fn(usize) -> u8` to `usize` which could be expressed as a\n LL |     let _usize_from_fn_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, usize>(foo) };\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as usize`\n \n+error: transmute from `*const u32` to `usize` which could be expressed as a pointer cast instead\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:55:36\n+   |\n+LL |     let _usize_from_ref = unsafe { transmute::<*const u32, usize>(&1u32) };\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&1u32 as *const u32 as usize`\n+\n error: transmute from a reference to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:64:14\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:66:14\n    |\n LL |     unsafe { transmute::<&[i32; 1], *const u8>(in_param) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `in_param as *const [i32; 1] as *const u8`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}]}