{"sha": "ed96583677a955e4dcd935e35031e434ac9ea5e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOTY1ODM2NzdhOTU1ZTRkY2Q5MzVlMzUwMzFlNDM0YWM5ZWE1ZTU=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-25T13:02:47Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-25T13:02:47Z"}, "message": "extend_from_slice lint", "tree": {"sha": "a935135cad31c21f589542747426818b34a5982e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a935135cad31c21f589542747426818b34a5982e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed96583677a955e4dcd935e35031e434ac9ea5e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed96583677a955e4dcd935e35031e434ac9ea5e5", "html_url": "https://github.com/rust-lang/rust/commit/ed96583677a955e4dcd935e35031e434ac9ea5e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed96583677a955e4dcd935e35031e434ac9ea5e5/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f17b38bf26a2124c7c8ae9695c20abafafd53b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f17b38bf26a2124c7c8ae9695c20abafafd53b9", "html_url": "https://github.com/rust-lang/rust/commit/5f17b38bf26a2124c7c8ae9695c20abafafd53b9"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "290684d3bad145284a8121298fe117eb2025a4af", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed96583677a955e4dcd935e35031e434ac9ea5e5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed96583677a955e4dcd935e35031e434ac9ea5e5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ed96583677a955e4dcd935e35031e434ac9ea5e5", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 98 lints included in this crate:\n+There are 99 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -33,6 +33,7 @@ name\n [expl_impl_clone_on_copy](https://github.com/Manishearth/rust-clippy/wiki#expl_impl_clone_on_copy)             | warn    | implementing `Clone` explicitly on `Copy` types\n [explicit_counter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_counter_loop)                 | warn    | for-looping with an explicit counter when `_.enumerate()` would do\n [explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                       | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n+[extend_from_slice](https://github.com/Manishearth/rust-clippy/wiki#extend_from_slice)                         | warn    | `.extend_from_slice(_)` is a faster way to extend a Vec by a slice\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                     | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n [float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                         | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`"}, {"sha": "f44191b562dec61f82f9e55bee923478496b8dd0", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed96583677a955e4dcd935e35031e434ac9ea5e5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed96583677a955e4dcd935e35031e434ac9ea5e5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ed96583677a955e4dcd935e35031e434ac9ea5e5", "patch": "@@ -199,6 +199,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         matches::MATCH_REF_PATS,\n         matches::SINGLE_MATCH,\n         methods::CHARS_NEXT_CMP,\n+        methods::EXTEND_FROM_SLICE,\n         methods::FILTER_NEXT,\n         methods::OK_EXPECT,\n         methods::OPTION_MAP_UNWRAP_OR,"}, {"sha": "0f09d67485a34082375b2c7942ef966decf2c876", "filename": "src/methods.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ed96583677a955e4dcd935e35031e434ac9ea5e5/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed96583677a955e4dcd935e35031e434ac9ea5e5/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=ed96583677a955e4dcd935e35031e434ac9ea5e5", "patch": "@@ -14,7 +14,7 @@ use utils::{\n };\n use utils::{\n     BTREEMAP_ENTRY_PATH, DEFAULT_TRAIT_PATH, HASHMAP_ENTRY_PATH, OPTION_PATH, RESULT_PATH,\n-    STRING_PATH\n+    STRING_PATH, VEC_PATH,\n };\n use utils::MethodArgs;\n use rustc::middle::cstore::CrateStore;\n@@ -212,9 +212,20 @@ declare_lint!(pub CHARS_NEXT_CMP, Warn,\n declare_lint!(pub OR_FUN_CALL, Warn,\n               \"using any `*or` method when the `*or_else` would do\");\n \n+/// **What it does:** This lint `Warn`s on using `.extend(s)` on a `vec` to extend the vec by a slice.\n+///\n+/// **Why is this bad?** Since Rust 1.6, the `extend_from_slice(_)` method is stable and at least for now faster.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `my_vec.extend(&xs)`\n+declare_lint!(pub EXTEND_FROM_SLICE, Warn,\n+              \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\");\n+\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(OPTION_UNWRAP_USED,\n+        lint_array!(EXTEND_FROM_SLICE,\n+                    OPTION_UNWRAP_USED,\n                     RESULT_UNWRAP_USED,\n                     STR_TO_STRING,\n                     STRING_TO_STRING,\n@@ -256,6 +267,8 @@ impl LateLintPass for MethodsPass {\n                     lint_search_is_some(cx, expr, \"position\", arglists[0], arglists[1]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"rposition\", \"is_some\"]) {\n                     lint_search_is_some(cx, expr, \"rposition\", arglists[0], arglists[1]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"extend\"]) {\n+                    lint_extend(cx, expr, arglists[0]);\n                 }\n \n                 lint_or_fun_call(cx, expr, &name.node.as_str(), &args);\n@@ -427,6 +440,35 @@ fn lint_or_fun_call(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>])\n     }\n }\n \n+fn lint_extend(cx: &LateContext, expr: &Expr, args: &MethodArgs) {\n+    let (obj_ty, _) = walk_ptrs_ty_depth(cx.tcx.expr_ty(&args[0]));\n+    let arg_ty = cx.tcx.expr_ty(&args[1]);\n+    \n+    if !match_type(cx, obj_ty, &VEC_PATH) {\n+        return; // for your Vecs only\n+    }\n+    \n+    if derefs_to_slice(&arg_ty) {\n+        span_lint(cx, EXTEND_FROM_SLICE, expr.span,\n+                  &format!(\"use of `extend` to extend a Vec by a slice\"))\n+            .span_suggestion(expr.span, \"try this\",\n+                             format!(\"{}.extend_from_slice({})\",\n+                                     snippet(cx, args[0].span, \"_\"),\n+                                     snippet(cx, args[1].span, \"_\")));\n+    }\n+}\n+\n+fn derefs_to_slice(ty: &ty::Ty) -> bool {\n+    match ty.sty {\n+        ty::TySlice(_) | \n+        ty::TyStr => true,\n+        ty::TyBox(ref inner) => derefs_to_slice(inner),\n+        ty::TyArray(_, size) => size < 32,\n+        ty::TyRef(_, ty::TypeAndMut { ty: ref t, .. }) => derefs_to_slice(t),\n+        _ => false\n+    }\n+}\n+\n #[allow(ptr_arg)]\n // Type of MethodArgs is potentially a Vec\n /// lint use of `unwrap()` for `Option`s and `Result`s"}, {"sha": "64b31b755971863a915b62f085cebe12da482837", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed96583677a955e4dcd935e35031e434ac9ea5e5/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed96583677a955e4dcd935e35031e434ac9ea5e5/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=ed96583677a955e4dcd935e35031e434ac9ea5e5", "patch": "@@ -304,3 +304,10 @@ fn starts_with() {\n     //~| HELP like this\n     //~| SUGGESTION !\"\".starts_with(' ')\n }\n+\n+fn use_extend_from_slice() {\n+    let mut v : Vec<&'static str> = vec![];\n+    v.extend(&[\"Hello\", \"World\"]); //~ERROR use of `extend`\n+    \n+    \n+}"}]}