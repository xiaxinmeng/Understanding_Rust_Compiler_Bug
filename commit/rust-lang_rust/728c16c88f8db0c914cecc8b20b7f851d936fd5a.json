{"sha": "728c16c88f8db0c914cecc8b20b7f851d936fd5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOGMxNmM4OGY4ZGIwYzkxNGNlY2M4YjIwYjdmODUxZDkzNmZkNWE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-07T01:43:33Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-08T04:30:43Z"}, "message": "Move REGISTERED_DIAGNOSTICS to a ParseSess field", "tree": {"sha": "f9e816974ec876b9e337c0fc77807f0c1abdfd7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9e816974ec876b9e337c0fc77807f0c1abdfd7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728c16c88f8db0c914cecc8b20b7f851d936fd5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728c16c88f8db0c914cecc8b20b7f851d936fd5a", "html_url": "https://github.com/rust-lang/rust/commit/728c16c88f8db0c914cecc8b20b7f851d936fd5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728c16c88f8db0c914cecc8b20b7f851d936fd5a/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa19feeb988710e6e9ca9e1c8a77f99e3fe7213", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa19feeb988710e6e9ca9e1c8a77f99e3fe7213", "html_url": "https://github.com/rust-lang/rust/commit/2aa19feeb988710e6e9ca9e1c8a77f99e3fe7213"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "e8c2d325bd653d30d1014955d96d345ccf73cd93", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/728c16c88f8db0c914cecc8b20b7f851d936fd5a/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c16c88f8db0c914cecc8b20b7f851d936fd5a/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=728c16c88f8db0c914cecc8b20b7f851d936fd5a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::cell::RefCell;\n use std::collections::BTreeMap;\n use std::env;\n \n@@ -31,12 +30,6 @@ pub use errors::*;\n // Maximum width of any line in an extended error description (inclusive).\n const MAX_DESCRIPTION_WIDTH: usize = 80;\n \n-thread_local! {\n-    static REGISTERED_DIAGNOSTICS: RefCell<ErrorMap> = {\n-        RefCell::new(BTreeMap::new())\n-    }\n-}\n-\n /// Error information type.\n pub struct ErrorInfo {\n     pub description: Option<Name>,\n@@ -46,14 +39,6 @@ pub struct ErrorInfo {\n /// Mapping from error codes to metadata.\n pub type ErrorMap = BTreeMap<Name, ErrorInfo>;\n \n-fn with_registered_diagnostics<T, F>(f: F) -> T where\n-    F: FnOnce(&mut ErrorMap) -> T,\n-{\n-    REGISTERED_DIAGNOSTICS.with(move |slot| {\n-        f(&mut *slot.borrow_mut())\n-    })\n-}\n-\n pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,\n                                    span: Span,\n                                    token_tree: &[TokenTree])\n@@ -63,7 +48,7 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,\n         _ => unreachable!()\n     };\n \n-    with_registered_diagnostics(|diagnostics| {\n+    ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n         match diagnostics.get_mut(&code.name) {\n             // Previously used errors.\n             Some(&mut ErrorInfo { description: _, use_site: Some(previous_span) }) => {\n@@ -132,7 +117,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n         }\n     });\n     // Add the error to the map.\n-    with_registered_diagnostics(|diagnostics| {\n+    ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n         let info = ErrorInfo {\n             description,\n             use_site: None\n@@ -174,7 +159,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n \n     // Output error metadata to `tmp/extended-errors/<target arch>/<crate name>.json`\n     if let Ok(target_triple) = env::var(\"CFG_COMPILER_HOST_TRIPLE\") {\n-        with_registered_diagnostics(|diagnostics| {\n+        ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n             if let Err(e) = output_metadata(ecx,\n                                             &target_triple,\n                                             &crate_name.name.as_str(),\n@@ -194,7 +179,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n \n     // Construct the output expression.\n     let (count, expr) =\n-        with_registered_diagnostics(|diagnostics| {\n+        ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n             let descriptions: Vec<P<ast::Expr>> =\n                 diagnostics.iter().filter_map(|(&code, info)| {\n                     info.description.map(|description| {"}, {"sha": "cdf38453d7ea47e964818f8015d4639c18f000a6", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/728c16c88f8db0c914cecc8b20b7f851d936fd5a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c16c88f8db0c914cecc8b20b7f851d936fd5a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=728c16c88f8db0c914cecc8b20b7f851d936fd5a", "patch": "@@ -1764,6 +1764,8 @@ mod tests {\n     use std::collections::HashSet;\n     use std::io;\n     use std::path::PathBuf;\n+    use diagnostics::plugin::ErrorMap;\n+    use rustc_data_structures::sync::Lock;\n     fn mk_sess(cm: Lrc<CodeMap>) -> ParseSess {\n         let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()),\n                                                           Some(cm.clone()),\n@@ -1776,6 +1778,7 @@ mod tests {\n             included_mod_stack: RefCell::new(Vec::new()),\n             code_map: cm,\n             missing_fragment_specifiers: RefCell::new(HashSet::new()),\n+            registered_diagnostics: Lock::new(ErrorMap::new()),\n             non_modrs_mods: RefCell::new(vec![]),\n         }\n     }"}, {"sha": "3fb0c209f70f4ea339e5bbfabeeffb5e62ddec94", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/728c16c88f8db0c914cecc8b20b7f851d936fd5a/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c16c88f8db0c914cecc8b20b7f851d936fd5a/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=728c16c88f8db0c914cecc8b20b7f851d936fd5a", "patch": "@@ -10,7 +10,7 @@\n \n //! The main parser interface\n \n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{Lrc, Lock};\n use ast::{self, CrateConfig};\n use codemap::{CodeMap, FilePathMapping};\n use syntax_pos::{self, Span, FileMap, NO_EXPANSION, FileName};\n@@ -21,6 +21,7 @@ use ptr::P;\n use str::char_at;\n use symbol::Symbol;\n use tokenstream::{TokenStream, TokenTree};\n+use diagnostics::plugin::ErrorMap;\n \n use std::cell::RefCell;\n use std::collections::HashSet;\n@@ -47,6 +48,8 @@ pub struct ParseSess {\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n     pub missing_fragment_specifiers: RefCell<HashSet<Span>>,\n+    /// The registered diagnostics codes\n+    pub registered_diagnostics: Lock<ErrorMap>,\n     // Spans where a `mod foo;` statement was included in a non-mod.rs file.\n     // These are used to issue errors if the non_modrs_mods feature is not enabled.\n     pub non_modrs_mods: RefCell<Vec<(ast::Ident, Span)>>,\n@@ -71,6 +74,7 @@ impl ParseSess {\n             unstable_features: UnstableFeatures::from_environment(),\n             config: HashSet::new(),\n             missing_fragment_specifiers: RefCell::new(HashSet::new()),\n+            registered_diagnostics: Lock::new(ErrorMap::new()),\n             included_mod_stack: RefCell::new(vec![]),\n             code_map,\n             non_modrs_mods: RefCell::new(vec![]),"}]}