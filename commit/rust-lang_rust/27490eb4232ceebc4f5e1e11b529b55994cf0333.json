{"sha": "27490eb4232ceebc4f5e1e11b529b55994cf0333", "node_id": "C_kwDOAAsO6NoAKDI3NDkwZWI0MjMyY2VlYmM0ZjVlMWUxMWI1MjliNTU5OTRjZjAzMzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T01:57:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T01:57:54Z"}, "message": "Auto merge of #95450 - jyn514:faster-doc, r=Mark-Simulacrum\n\nOnly check the compiler and standard library before documenting them (take 2)\n\nTrying https://github.com/rust-lang/rust/pull/88675 again.", "tree": {"sha": "7998b5043a702aeb155b8175aa6be681ba5b7c3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7998b5043a702aeb155b8175aa6be681ba5b7c3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27490eb4232ceebc4f5e1e11b529b55994cf0333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27490eb4232ceebc4f5e1e11b529b55994cf0333", "html_url": "https://github.com/rust-lang/rust/commit/27490eb4232ceebc4f5e1e11b529b55994cf0333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27490eb4232ceebc4f5e1e11b529b55994cf0333/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1a03c4fcbe547168fab128fa39b08d1122a1c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1a03c4fcbe547168fab128fa39b08d1122a1c2", "html_url": "https://github.com/rust-lang/rust/commit/bb1a03c4fcbe547168fab128fa39b08d1122a1c2"}, {"sha": "dd0ad7375e5c3eaa14c594af38e7e7821c8038cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0ad7375e5c3eaa14c594af38e7e7821c8038cc", "html_url": "https://github.com/rust-lang/rust/commit/dd0ad7375e5c3eaa14c594af38e7e7821c8038cc"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "a2802f76008a37f994d9a169e5fd6883864899b6", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/27490eb4232ceebc4f5e1e11b529b55994cf0333/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27490eb4232ceebc4f5e1e11b529b55994cf0333/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=27490eb4232ceebc4f5e1e11b529b55994cf0333", "patch": "@@ -441,7 +441,6 @@ impl Step for Std {\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, builder.config.build);\n \n-        builder.ensure(compile::Std { compiler, target });\n         let out_dir = builder.stage_out(compiler, Mode::Std).join(target.triple).join(\"doc\");\n \n         t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n@@ -548,7 +547,6 @@ impl Step for Rustc {\n     fn run(self, builder: &Builder<'_>) {\n         let stage = self.stage;\n         let target = self.target;\n-        builder.info(&format!(\"Documenting stage{} compiler ({})\", stage, target));\n \n         let paths = builder\n             .paths\n@@ -563,9 +561,12 @@ impl Step for Rustc {\n         let out = builder.compiler_doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n-        // Build rustc.\n+        // Build the standard library, so that proc-macros can use it.\n+        // (Normally, only the metadata would be necessary, but proc-macros are special since they run at compile-time.)\n         let compiler = builder.compiler(stage, builder.config.build);\n-        builder.ensure(compile::Rustc { compiler, target });\n+        builder.ensure(compile::Std { compiler, target: builder.config.build });\n+\n+        builder.info(&format!(\"Documenting stage{} compiler ({})\", stage, target));\n \n         // This uses a shared directory so that librustdoc documentation gets\n         // correctly built and merged with the rustc documentation. This is\n@@ -642,7 +643,6 @@ macro_rules! tool_doc {\n     ($tool: ident, $should_run: literal, $path: literal, [$($krate: literal),+ $(,)?] $(,)?) => {\n         #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n         pub struct $tool {\n-            stage: u32,\n             target: TargetSelection,\n         }\n \n@@ -657,7 +657,7 @@ macro_rules! tool_doc {\n             }\n \n             fn make_run(run: RunConfig<'_>) {\n-                run.builder.ensure($tool { stage: run.builder.top_stage, target: run.target });\n+                run.builder.ensure($tool { target: run.target });\n             }\n \n             /// Generates compiler documentation.\n@@ -667,8 +667,21 @@ macro_rules! tool_doc {\n             /// we do not merge it with the other documentation from std, test and\n             /// proc_macros. This is largely just a wrapper around `cargo doc`.\n             fn run(self, builder: &Builder<'_>) {\n-                let stage = self.stage;\n+                let stage = builder.top_stage;\n                 let target = self.target;\n+\n+                // This is the intended out directory for compiler documentation.\n+                let out = builder.compiler_doc_out(target);\n+                t!(fs::create_dir_all(&out));\n+\n+                // Build rustc docs so that we generate relative links.\n+                builder.ensure(Rustc { stage, target });\n+                // Rustdoc needs the rustc sysroot available to build.\n+                // FIXME: is there a way to only ensure `check::Rustc` here? Last time I tried it failed\n+                // with strange errors, but only on a full bors test ...\n+                let compiler = builder.compiler(stage, builder.config.build);\n+                builder.ensure(compile::Rustc { compiler, target });\n+\n                 builder.info(\n                     &format!(\n                         \"Documenting stage{} {} ({})\",\n@@ -678,15 +691,6 @@ macro_rules! tool_doc {\n                     ),\n                 );\n \n-                // This is the intended out directory for compiler documentation.\n-                let out = builder.compiler_doc_out(target);\n-                t!(fs::create_dir_all(&out));\n-\n-                let compiler = builder.compiler(stage, builder.config.build);\n-\n-                // Build rustc docs so that we generate relative links.\n-                builder.ensure(Rustc { stage, target });\n-\n                 // Symlink compiler docs to the output directory of rustdoc documentation.\n                 let out_dir = builder.stage_out(compiler, Mode::ToolRustc).join(target.triple).join(\"doc\");\n                 t!(fs::create_dir_all(&out_dir));"}]}