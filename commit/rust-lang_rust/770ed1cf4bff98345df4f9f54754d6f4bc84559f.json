{"sha": "770ed1cf4bff98345df4f9f54754d6f4bc84559f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MGVkMWNmNGJmZjk4MzQ1ZGY0ZjlmNTQ3NTRkNmY0YmM4NDU1OWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-03T08:36:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-03T08:36:46Z"}, "message": "Auto merge of #82718 - JohnTitor:rollup-vpfx3j2, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #81223 ([rustdoc] Generate redirect map file)\n - #82439 (BTree: fix untrue safety)\n - #82469 (Use a crate to produce rustdoc tree comparisons instead of the `diff` command)\n - #82589 (unix: Non-mutable bufs in send_vectored_with_ancillary_to)\n - #82689 (meta: Notify Zulip for rustdoc nominated issues)\n - #82695 (Revert non-power-of-two vector restriction)\n - #82706 (use outer_expn_data() instead of outer_expn().expn_data())\n - #82710 (FloatToInit: Replacing round_unchecked_to --> to_int_unchecked)\n - #82712 (Remove unnecessary conditional `cfg(target_os)` for `redox` and `vxworks`)\n - #82713 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3dc1b1fa3dd555c339d458ff473362e1e5b041b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dc1b1fa3dd555c339d458ff473362e1e5b041b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770ed1cf4bff98345df4f9f54754d6f4bc84559f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770ed1cf4bff98345df4f9f54754d6f4bc84559f", "html_url": "https://github.com/rust-lang/rust/commit/770ed1cf4bff98345df4f9f54754d6f4bc84559f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770ed1cf4bff98345df4f9f54754d6f4bc84559f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbca5689a5a0c63c6c5fda22bb0678164b52fec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbca5689a5a0c63c6c5fda22bb0678164b52fec3", "html_url": "https://github.com/rust-lang/rust/commit/cbca5689a5a0c63c6c5fda22bb0678164b52fec3"}, {"sha": "374c90b4c6d9c0c2532b525ac4b4a8d1408e097d", "url": "https://api.github.com/repos/rust-lang/rust/commits/374c90b4c6d9c0c2532b525ac4b4a8d1408e097d", "html_url": "https://github.com/rust-lang/rust/commit/374c90b4c6d9c0c2532b525ac4b4a8d1408e097d"}], "stats": {"total": 459, "additions": 313, "deletions": 146}, "files": [{"sha": "0666abadcba339efe5dbc212cd61c09ca797f516", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -676,6 +676,7 @@ dependencies = [\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n+ \"colored\",\n  \"diff\",\n  \"getopts\",\n  \"glob\",\n@@ -688,6 +689,7 @@ dependencies = [\n  \"serde_json\",\n  \"tracing\",\n  \"tracing-subscriber\",\n+ \"unified-diff\",\n  \"walkdir\",\n  \"winapi 0.3.9\",\n ]\n@@ -5526,6 +5528,15 @@ version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n \n+[[package]]\n+name = \"unified-diff\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"496a3d395ed0c30f411ceace4a91f7d93b148fb5a9b383d5d4cff7850f048d5f\"\n+dependencies = [\n+ \"diff\",\n+]\n+\n [[package]]\n name = \"unstable-book-gen\"\n version = \"0.1.0\""}, {"sha": "6d2ab0e5f5a80ac8bdd5829b6aa0b392e866e963", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -732,11 +732,6 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 // Can't be caught in typeck if the array length is generic.\n                 if e_len == 0 {\n                     tcx.sess.fatal(&format!(\"monomorphising SIMD type `{}` of zero length\", ty));\n-                } else if !e_len.is_power_of_two() {\n-                    tcx.sess.fatal(&format!(\n-                        \"monomorphising SIMD type `{}` of non-power-of-two length\",\n-                        ty\n-                    ));\n                 } else if e_len > MAX_SIMD_LANES {\n                     tcx.sess.fatal(&format!(\n                         \"monomorphising SIMD type `{}` of length greater than {}\","}, {"sha": "7aee718bfa962efd5a6081af5b6d25833564a09d", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -1422,7 +1422,7 @@ impl<'a> Resolver<'a> {\n \n     fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {\n         loop {\n-            match ctxt.outer_expn().expn_data().macro_def_id {\n+            match ctxt.outer_expn_data().macro_def_id {\n                 Some(def_id) => return def_id,\n                 None => ctxt.remove_mark(),\n             };"}, {"sha": "0010d59f710cdc0ec0c361636352044a7d60224d", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -1161,15 +1161,6 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: LocalDefId) {\n                 if len == 0 {\n                     struct_span_err!(tcx.sess, sp, E0075, \"SIMD vector cannot be empty\").emit();\n                     return;\n-                } else if !len.is_power_of_two() {\n-                    struct_span_err!(\n-                        tcx.sess,\n-                        sp,\n-                        E0075,\n-                        \"SIMD vector length must be a power of two\"\n-                    )\n-                    .emit();\n-                    return;\n                 } else if len > MAX_SIMD_LANES {\n                     struct_span_err!(\n                         tcx.sess,"}, {"sha": "9a7119470f370ad4871f4b2514034d699c1e0606", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -77,9 +77,8 @@ impl<K, V> LeafNode<K, V> {\n         }\n     }\n \n-    /// Creates a new boxed `LeafNode`. Unsafe because all nodes should really be hidden behind\n-    /// `BoxedNode`, preventing accidental dropping of uninitialized keys and values.\n-    unsafe fn new() -> Box<Self> {\n+    /// Creates a new boxed `LeafNode`.\n+    fn new() -> Box<Self> {\n         unsafe {\n             let mut leaf = Box::new_uninit();\n             LeafNode::init(leaf.as_mut_ptr());\n@@ -107,10 +106,9 @@ struct InternalNode<K, V> {\n impl<K, V> InternalNode<K, V> {\n     /// Creates a new boxed `InternalNode`.\n     ///\n-    /// This is unsafe for two reasons. First, it returns an owned `InternalNode` in a box, risking\n-    /// dropping of uninitialized fields. Second, an invariant of internal nodes is that `len + 1`\n-    /// edges are initialized and valid, meaning that even when the node is empty (having a\n-    /// `len` of 0), there must be one initialized and valid edge. This function does not set up\n+    /// # Safety\n+    /// An invariant of internal nodes is that they have at least one\n+    /// initialized and valid edge. This function does not set up\n     /// such an edge.\n     unsafe fn new() -> Box<Self> {\n         unsafe {\n@@ -144,7 +142,7 @@ impl<K, V> Root<K, V> {\n \n impl<K, V> NodeRef<marker::Owned, K, V, marker::Leaf> {\n     fn new_leaf() -> Self {\n-        Self::from_new_leaf(unsafe { LeafNode::new() })\n+        Self::from_new_leaf(LeafNode::new())\n     }\n \n     fn from_new_leaf(leaf: Box<LeafNode<K, V>>) -> Self {\n@@ -156,10 +154,13 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {\n     fn new_internal(child: Root<K, V>) -> Self {\n         let mut new_node = unsafe { InternalNode::new() };\n         new_node.edges[0].write(child.node);\n-        NodeRef::from_new_internal(new_node, child.height + 1)\n+        unsafe { NodeRef::from_new_internal(new_node, child.height + 1) }\n     }\n \n-    fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {\n+    /// # Safety\n+    /// `height` must not be zero.\n+    unsafe fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {\n+        debug_assert!(height > 0);\n         let node = NonNull::from(Box::leak(internal)).cast();\n         let mut this = NodeRef { height, node, _marker: PhantomData };\n         this.borrow_mut().correct_all_childrens_parent_links();\n@@ -1080,14 +1081,12 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     /// - All the key-value pairs to the right of this handle are put into a newly\n     ///   allocated node.\n     pub fn split(mut self) -> SplitResult<'a, K, V, marker::Leaf> {\n-        unsafe {\n-            let mut new_node = LeafNode::new();\n+        let mut new_node = LeafNode::new();\n \n-            let kv = self.split_leaf_data(&mut new_node);\n+        let kv = self.split_leaf_data(&mut new_node);\n \n-            let right = NodeRef::from_new_leaf(new_node);\n-            SplitResult { left: self.node, kv, right }\n-        }\n+        let right = NodeRef::from_new_leaf(new_node);\n+        SplitResult { left: self.node, kv, right }\n     }\n \n     /// Removes the key-value pair pointed to by this handle and returns it, along with the edge"}, {"sha": "5b113610a5d3fd5a2cfdde42b53d16efeb6aa54f", "filename": "library/core/src/convert/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -9,7 +9,7 @@ mod private {\n     pub trait Sealed {}\n }\n \n-/// Supporting trait for inherent methods of `f32` and `f64` such as `round_unchecked_to`.\n+/// Supporting trait for inherent methods of `f32` and `f64` such as `to_int_unchecked`.\n /// Typically doesn\u2019t need to be used directly.\n #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n pub trait FloatToInt<Int>: private::Sealed + Sized {"}, {"sha": "b95511e43d844d15775e519b192be9135201e4df", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -29,7 +29,7 @@ pub use crate::sys::wasi_ext as wasi;\n // If we're not documenting libstd then we just expose the main modules as we otherwise would.\n \n #[cfg(not(doc))]\n-#[cfg(any(target_os = \"redox\", unix, target_os = \"vxworks\", target_os = \"hermit\"))]\n+#[cfg(any(unix, target_os = \"hermit\"))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use crate::sys::ext as unix;\n "}, {"sha": "33d6a39af07f64ae0b8edbbf99777dc8cbdbb5e5", "filename": "library/std/src/sys/unix/ext/net/ancillary.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -1,6 +1,6 @@\n use super::{sockaddr_un, SocketAddr};\n use crate::convert::TryFrom;\n-use crate::io::{self, IoSliceMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::marker::PhantomData;\n use crate::mem::{size_of, zeroed};\n use crate::os::unix::io::RawFd;\n@@ -68,7 +68,7 @@ pub(super) fn recv_vectored_with_ancillary_from(\n pub(super) fn send_vectored_with_ancillary_to(\n     socket: &Socket,\n     path: Option<&Path>,\n-    bufs: &mut [IoSliceMut<'_>],\n+    bufs: &[IoSlice<'_>],\n     ancillary: &mut SocketAncillary<'_>,\n ) -> io::Result<usize> {\n     unsafe {\n@@ -78,7 +78,7 @@ pub(super) fn send_vectored_with_ancillary_to(\n         let mut msg: libc::msghdr = zeroed();\n         msg.msg_name = &mut msg_name as *mut _ as *mut _;\n         msg.msg_namelen = msg_namelen;\n-        msg.msg_iov = bufs.as_mut_ptr().cast();\n+        msg.msg_iov = bufs.as_ptr() as *mut _;\n         msg.msg_control = ancillary.buffer.as_mut_ptr().cast();\n         cfg_if::cfg_if! {\n             if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n@@ -567,7 +567,7 @@ impl<'a> SocketAncillary<'a> {\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixStream, SocketAncillary};\n     /// use std::os::unix::io::AsRawFd;\n-    /// use std::io::IoSliceMut;\n+    /// use std::io::IoSlice;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixStream::connect(\"/tmp/sock\")?;\n@@ -577,7 +577,7 @@ impl<'a> SocketAncillary<'a> {\n     ///     ancillary.add_fds(&[sock.as_raw_fd()][..]);\n     ///\n     ///     let mut buf = [1; 8];\n-    ///     let mut bufs = &mut [IoSliceMut::new(&mut buf[..])][..];\n+    ///     let mut bufs = &mut [IoSlice::new(&mut buf[..])][..];\n     ///     sock.send_vectored_with_ancillary(bufs, &mut ancillary)?;\n     ///     Ok(())\n     /// }"}, {"sha": "a8c13fbb874808f64a90669864cd00aeb057a0d0", "filename": "library/std/src/sys/unix/ext/net/datagram.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -19,7 +19,7 @@ use super::{sockaddr_un, SocketAddr};\n     target_os = \"netbsd\",\n     target_os = \"openbsd\",\n ))]\n-use crate::io::IoSliceMut;\n+use crate::io::{IoSlice, IoSliceMut};\n use crate::net::Shutdown;\n use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::path::Path;\n@@ -506,23 +506,24 @@ impl UnixDatagram {\n     /// ```no_run\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixDatagram, SocketAncillary};\n-    /// use std::io::IoSliceMut;\n+    /// use std::io::IoSlice;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixDatagram::unbound()?;\n-    ///     let mut buf1 = [1; 8];\n-    ///     let mut buf2 = [2; 16];\n-    ///     let mut buf3 = [3; 8];\n-    ///     let mut bufs = &mut [\n-    ///         IoSliceMut::new(&mut buf1),\n-    ///         IoSliceMut::new(&mut buf2),\n-    ///         IoSliceMut::new(&mut buf3),\n+    ///     let buf1 = [1; 8];\n+    ///     let buf2 = [2; 16];\n+    ///     let buf3 = [3; 8];\n+    ///     let bufs = &[\n+    ///         IoSlice::new(&buf1),\n+    ///         IoSlice::new(&buf2),\n+    ///         IoSlice::new(&buf3),\n     ///     ][..];\n     ///     let fds = [0, 1, 2];\n     ///     let mut ancillary_buffer = [0; 128];\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     ancillary.add_fds(&fds[..]);\n-    ///     sock.send_vectored_with_ancillary_to(bufs, &mut ancillary, \"/some/sock\").expect(\"send_vectored_with_ancillary_to function failed\");\n+    ///     sock.send_vectored_with_ancillary_to(bufs, &mut ancillary, \"/some/sock\")\n+    ///         .expect(\"send_vectored_with_ancillary_to function failed\");\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -538,7 +539,7 @@ impl UnixDatagram {\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary_to<P: AsRef<Path>>(\n         &self,\n-        bufs: &mut [IoSliceMut<'_>],\n+        bufs: &[IoSlice<'_>],\n         ancillary: &mut SocketAncillary<'_>,\n         path: P,\n     ) -> io::Result<usize> {\n@@ -554,23 +555,24 @@ impl UnixDatagram {\n     /// ```no_run\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixDatagram, SocketAncillary};\n-    /// use std::io::IoSliceMut;\n+    /// use std::io::IoSlice;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixDatagram::unbound()?;\n-    ///     let mut buf1 = [1; 8];\n-    ///     let mut buf2 = [2; 16];\n-    ///     let mut buf3 = [3; 8];\n-    ///     let mut bufs = &mut [\n-    ///         IoSliceMut::new(&mut buf1),\n-    ///         IoSliceMut::new(&mut buf2),\n-    ///         IoSliceMut::new(&mut buf3),\n+    ///     let buf1 = [1; 8];\n+    ///     let buf2 = [2; 16];\n+    ///     let buf3 = [3; 8];\n+    ///     let bufs = &[\n+    ///         IoSlice::new(&buf1),\n+    ///         IoSlice::new(&buf2),\n+    ///         IoSlice::new(&buf3),\n     ///     ][..];\n     ///     let fds = [0, 1, 2];\n     ///     let mut ancillary_buffer = [0; 128];\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     ancillary.add_fds(&fds[..]);\n-    ///     sock.send_vectored_with_ancillary(bufs, &mut ancillary).expect(\"send_vectored_with_ancillary function failed\");\n+    ///     sock.send_vectored_with_ancillary(bufs, &mut ancillary)\n+    ///         .expect(\"send_vectored_with_ancillary function failed\");\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -586,7 +588,7 @@ impl UnixDatagram {\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary(\n         &self,\n-        bufs: &mut [IoSliceMut<'_>],\n+        bufs: &[IoSlice<'_>],\n         ancillary: &mut SocketAncillary<'_>,\n     ) -> io::Result<usize> {\n         send_vectored_with_ancillary_to(&self.0, None, bufs, ancillary)"}, {"sha": "fc08edacb828dbb5e7c6bc84df41819414b88397", "filename": "library/std/src/sys/unix/ext/net/stream.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -530,23 +530,24 @@ impl UnixStream {\n     /// ```no_run\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixStream, SocketAncillary};\n-    /// use std::io::IoSliceMut;\n+    /// use std::io::IoSlice;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n-    ///     let mut buf1 = [1; 8];\n-    ///     let mut buf2 = [2; 16];\n-    ///     let mut buf3 = [3; 8];\n-    ///     let mut bufs = &mut [\n-    ///         IoSliceMut::new(&mut buf1),\n-    ///         IoSliceMut::new(&mut buf2),\n-    ///         IoSliceMut::new(&mut buf3),\n+    ///     let buf1 = [1; 8];\n+    ///     let buf2 = [2; 16];\n+    ///     let buf3 = [3; 8];\n+    ///     let bufs = &[\n+    ///         IoSlice::new(&buf1),\n+    ///         IoSlice::new(&buf2),\n+    ///         IoSlice::new(&buf3),\n     ///     ][..];\n     ///     let fds = [0, 1, 2];\n     ///     let mut ancillary_buffer = [0; 128];\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     ancillary.add_fds(&fds[..]);\n-    ///     socket.send_vectored_with_ancillary(bufs, &mut ancillary).expect(\"send_vectored_with_ancillary function failed\");\n+    ///     socket.send_vectored_with_ancillary(bufs, &mut ancillary)\n+    ///         .expect(\"send_vectored_with_ancillary function failed\");\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -562,7 +563,7 @@ impl UnixStream {\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary(\n         &self,\n-        bufs: &mut [IoSliceMut<'_>],\n+        bufs: &[IoSlice<'_>],\n         ancillary: &mut SocketAncillary<'_>,\n     ) -> io::Result<usize> {\n         send_vectored_with_ancillary_to(&self.0, None, bufs, ancillary)"}, {"sha": "bd9b6dd727b96a2babdd8cdfe4eeff47515f02f9", "filename": "library/std/src/sys/unix/ext/net/tests.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftests.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -485,14 +485,14 @@ fn test_unix_datagram_peek_from() {\n fn test_send_vectored_fds_unix_stream() {\n     let (s1, s2) = or_panic!(UnixStream::pair());\n \n-    let mut buf1 = [1; 8];\n-    let mut bufs_send = &mut [IoSliceMut::new(&mut buf1[..])][..];\n+    let buf1 = [1; 8];\n+    let bufs_send = &[IoSlice::new(&buf1[..])][..];\n \n     let mut ancillary1_buffer = [0; 128];\n     let mut ancillary1 = SocketAncillary::new(&mut ancillary1_buffer[..]);\n     assert!(ancillary1.add_fds(&[s1.as_raw_fd()][..]));\n \n-    let usize = or_panic!(s1.send_vectored_with_ancillary(&mut bufs_send, &mut ancillary1));\n+    let usize = or_panic!(s1.send_vectored_with_ancillary(&bufs_send, &mut ancillary1));\n     assert_eq!(usize, 8);\n \n     let mut buf2 = [0; 8];\n@@ -542,8 +542,8 @@ fn test_send_vectored_with_ancillary_to_unix_datagram() {\n \n     or_panic!(bsock2.set_passcred(true));\n \n-    let mut buf1 = [1; 8];\n-    let mut bufs_send = &mut [IoSliceMut::new(&mut buf1[..])][..];\n+    let buf1 = [1; 8];\n+    let bufs_send = &[IoSlice::new(&buf1[..])][..];\n \n     let mut ancillary1_buffer = [0; 128];\n     let mut ancillary1 = SocketAncillary::new(&mut ancillary1_buffer[..]);\n@@ -554,7 +554,7 @@ fn test_send_vectored_with_ancillary_to_unix_datagram() {\n     assert!(ancillary1.add_creds(&[cred1.clone()][..]));\n \n     let usize =\n-        or_panic!(bsock1.send_vectored_with_ancillary_to(&mut bufs_send, &mut ancillary1, &path2));\n+        or_panic!(bsock1.send_vectored_with_ancillary_to(&bufs_send, &mut ancillary1, &path2));\n     assert_eq!(usize, 8);\n \n     let mut buf2 = [0; 8];\n@@ -603,15 +603,15 @@ fn test_send_vectored_with_ancillary_unix_datagram() {\n     let bsock1 = or_panic!(UnixDatagram::bind(&path1));\n     let bsock2 = or_panic!(UnixDatagram::bind(&path2));\n \n-    let mut buf1 = [1; 8];\n-    let mut bufs_send = &mut [IoSliceMut::new(&mut buf1[..])][..];\n+    let buf1 = [1; 8];\n+    let bufs_send = &[IoSlice::new(&buf1[..])][..];\n \n     let mut ancillary1_buffer = [0; 128];\n     let mut ancillary1 = SocketAncillary::new(&mut ancillary1_buffer[..]);\n     assert!(ancillary1.add_fds(&[bsock1.as_raw_fd()][..]));\n \n     or_panic!(bsock1.connect(&path2));\n-    let usize = or_panic!(bsock1.send_vectored_with_ancillary(&mut bufs_send, &mut ancillary1));\n+    let usize = or_panic!(bsock1.send_vectored_with_ancillary(&bufs_send, &mut ancillary1));\n     assert_eq!(usize, 8);\n \n     let mut buf2 = [0; 8];"}, {"sha": "de6942968ea0d7fb94bdf99417da441d1362db9a", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -263,6 +263,8 @@ crate struct RenderOptions {\n     crate document_private: bool,\n     /// Document items that have `doc(hidden)`.\n     crate document_hidden: bool,\n+    /// If `true`, generate a JSON file in the crate folder instead of HTML redirection files.\n+    crate generate_redirect_map: bool,\n     crate unstable_features: rustc_feature::UnstableFeatures,\n }\n \n@@ -570,6 +572,7 @@ impl Options {\n         let document_private = matches.opt_present(\"document-private-items\");\n         let document_hidden = matches.opt_present(\"document-hidden-items\");\n         let run_check = matches.opt_present(\"check\");\n+        let generate_redirect_map = matches.opt_present(\"generate-redirect-map\");\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -627,6 +630,7 @@ impl Options {\n                 generate_search_filter,\n                 document_private,\n                 document_hidden,\n+                generate_redirect_map,\n                 unstable_features: rustc_feature::UnstableFeatures::from_environment(\n                     crate_name.as_deref(),\n                 ),"}, {"sha": "394c57c7214e79c485b83aa549eebed9c9d1cb2d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -111,6 +111,10 @@ crate struct Context<'tcx> {\n     /// real location of an item. This is used to allow external links to\n     /// publicly reused items to redirect to the right location.\n     crate render_redirect_pages: bool,\n+    /// `None` by default, depends on the `generate-redirect-map` option flag. If this field is set\n+    /// to `Some(...)`, it'll store redirections and then generate a JSON file at the top level of\n+    /// the crate.\n+    crate redirections: Option<Rc<RefCell<FxHashMap<String, String>>>>,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n     /// Tracks section IDs for `Deref` targets so they match in both the main\n@@ -404,6 +408,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             static_root_path,\n             generate_search_filter,\n             unstable_features,\n+            generate_redirect_map,\n             ..\n         } = options;\n \n@@ -509,6 +514,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             all: Rc::new(RefCell::new(AllTypes::new())),\n             errors: Rc::new(receiver),\n             cache: Rc::new(cache),\n+            redirections: if generate_redirect_map { Some(Default::default()) } else { None },\n         };\n \n         CURRENT_DEPTH.with(|s| s.set(0));\n@@ -587,6 +593,15 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             &style_files,\n         );\n         self.shared.fs.write(&settings_file, v.as_bytes())?;\n+        if let Some(redirections) = self.redirections.take() {\n+            if !redirections.borrow().is_empty() {\n+                let redirect_map_path =\n+                    self.dst.join(&*krate.name.as_str()).join(\"redirect-map.json\");\n+                let paths = serde_json::to_string(&*redirections.borrow()).unwrap();\n+                self.shared.ensure_dir(&self.dst.join(&*krate.name.as_str()))?;\n+                self.shared.fs.write(&redirect_map_path, paths.as_bytes())?;\n+            }\n+        }\n \n         // Flush pending errors.\n         Arc::get_mut(&mut self.shared).unwrap().fs.close();\n@@ -675,9 +690,17 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             // to the new one (without).\n             if item_type == ItemType::Macro {\n                 let redir_name = format!(\"{}.{}!.html\", item_type, name);\n-                let redir_dst = self.dst.join(redir_name);\n-                let v = layout::redirect(file_name);\n-                self.shared.fs.write(&redir_dst, v.as_bytes())?;\n+                if let Some(ref redirections) = self.redirections {\n+                    let crate_name = &self.shared.layout.krate;\n+                    redirections.borrow_mut().insert(\n+                        format!(\"{}/{}\", crate_name, redir_name),\n+                        format!(\"{}/{}\", crate_name, file_name),\n+                    );\n+                } else {\n+                    let v = layout::redirect(file_name);\n+                    let redir_dst = self.dst.join(redir_name);\n+                    self.shared.fs.write(&redir_dst, v.as_bytes())?;\n+                }\n             }\n         }\n         Ok(())\n@@ -1588,17 +1611,27 @@ impl Context<'_> {\n                 &self.shared.style_files,\n             )\n         } else {\n-            let mut url = self.root_path();\n             if let Some(&(ref names, ty)) = self.cache.paths.get(&it.def_id) {\n+                let mut path = String::new();\n                 for name in &names[..names.len() - 1] {\n-                    url.push_str(name);\n-                    url.push('/');\n+                    path.push_str(name);\n+                    path.push('/');\n+                }\n+                path.push_str(&item_path(ty, names.last().unwrap()));\n+                match self.redirections {\n+                    Some(ref redirections) => {\n+                        let mut current_path = String::new();\n+                        for name in &self.current {\n+                            current_path.push_str(name);\n+                            current_path.push('/');\n+                        }\n+                        current_path.push_str(&item_path(ty, names.last().unwrap()));\n+                        redirections.borrow_mut().insert(current_path, path);\n+                    }\n+                    None => return layout::redirect(&format!(\"{}{}\", self.root_path(), path)),\n                 }\n-                url.push_str(&item_path(ty, names.last().unwrap()));\n-                layout::redirect(&url)\n-            } else {\n-                String::new()\n             }\n+            String::new()\n         }\n     }\n "}, {"sha": "c0e91a05dff54fea9125526c12775035c80b717b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -497,6 +497,13 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optopt(\"\", \"test-builder\", \"The rustc-like binary to use as the test builder\", \"PATH\")\n         }),\n         unstable(\"check\", |o| o.optflag(\"\", \"check\", \"Run rustdoc checks\")),\n+        unstable(\"generate-redirect-map\", |o| {\n+            o.optflag(\n+                \"\",\n+                \"generate-redirect-map\",\n+                \"Generate JSON file at the top level instead of generating HTML redirection files\",\n+            )\n+        }),\n     ]\n }\n "}, {"sha": "ce977fa0cea55050ca384c89f3ba583bc5325a06", "filename": "src/test/run-make-fulldeps/rustdoc-map-file/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2FMakefile?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTDOC) -Z unstable-options --generate-redirect-map foo.rs -o \"$(TMPDIR)/out\"\n+\t\"$(PYTHON)\" validate_json.py \"$(TMPDIR)/out\""}, {"sha": "6b1ccbeac3010849dde4231d550c141f9532ae88", "filename": "src/test/run-make-fulldeps/rustdoc-map-file/expected.json", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fexpected.json", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fexpected.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fexpected.json?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -0,0 +1,5 @@\n+{\n+  \"foo/macro.foo!.html\": \"foo/macro.foo.html\",\n+  \"foo/private/struct.Quz.html\": \"foo/struct.Quz.html\",\n+  \"foo/hidden/struct.Bar.html\": \"foo/struct.Bar.html\"\n+}"}, {"sha": "e12b9d2292c5110d3d1bb3f3e197ffd13f94aa56", "filename": "src/test/run-make-fulldeps/rustdoc-map-file/foo.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Ffoo.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -0,0 +1,16 @@\n+pub use private::Quz;\n+pub use hidden::Bar;\n+\n+mod private {\n+    pub struct Quz;\n+}\n+\n+#[doc(hidden)]\n+pub mod hidden {\n+    pub struct Bar;\n+}\n+\n+#[macro_export]\n+macro_rules! foo {\n+    () => {}\n+}"}, {"sha": "5c14c90b70d37d899f1f9d9c8d65c94d185d80e1", "filename": "src/test/run-make-fulldeps/rustdoc-map-file/validate_json.py", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fvalidate_json.py", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fvalidate_json.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fvalidate_json.py?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -0,0 +1,41 @@\n+#!/usr/bin/env python\n+\n+import os\n+import sys\n+import json\n+\n+\n+def find_redirect_map_file(folder, errors):\n+    for root, dirs, files in os.walk(folder):\n+        for name in files:\n+            if not name.endswith(\"redirect-map.json\"):\n+                continue\n+            with open(os.path.join(root, name)) as f:\n+                data = json.load(f)\n+            with open(\"expected.json\") as f:\n+                expected = json.load(f)\n+            for key in expected:\n+                if expected[key] != data.get(key):\n+                    errors.append(\"Expected `{}` for key `{}`, found: `{}`\".format(\n+                        expected[key], key, data.get(key)))\n+                else:\n+                    del data[key]\n+            for key in data:\n+                errors.append(\"Extra data not expected: key: `{}`, data: `{}`\".format(\n+                    key, data[key]))\n+            return True\n+    return False\n+\n+\n+if len(sys.argv) != 2:\n+    print(\"Expected doc directory to check!\")\n+    sys.exit(1)\n+\n+errors = []\n+if not find_redirect_map_file(sys.argv[1], errors):\n+    print(\"Didn't find the map file in `{}`...\".format(sys.argv[1]))\n+    sys.exit(1)\n+for err in errors:\n+    print(\"=> {}\".format(err))\n+if len(errors) != 0:\n+    sys.exit(1)"}, {"sha": "e9d021e0fa862476cffb164a7a5ab7e31e099994", "filename": "src/test/rustdoc/redirect-map-empty.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frustdoc%2Fredirect-map-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frustdoc%2Fredirect-map-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fredirect-map-empty.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Z unstable-options --generate-redirect-map\n+\n+#![crate_name = \"foo\"]\n+\n+// @!has foo/redirect-map.json\n+pub struct Foo;"}, {"sha": "b7f16b64e38508f796cda30c44f284e9cbc4bd18", "filename": "src/test/rustdoc/redirect-map.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frustdoc%2Fredirect-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Frustdoc%2Fredirect-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fredirect-map.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -Z unstable-options --generate-redirect-map\n+\n+#![crate_name = \"foo\"]\n+\n+// @!has foo/private/struct.Quz.html\n+// @!has foo/hidden/struct.Bar.html\n+// @has foo/redirect-map.json\n+pub use private::Quz;\n+pub use hidden::Bar;\n+\n+mod private {\n+    pub struct Quz;\n+}\n+\n+#[doc(hidden)]\n+pub mod hidden {\n+    pub struct Bar;\n+}\n+\n+#[macro_export]\n+macro_rules! foo {\n+  () => {}\n+}"}, {"sha": "8d70dacdc90104a7aa180e2fd7cce7038e10e003", "filename": "src/test/ui/simd/issue-17170.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Fui%2Fsimd%2Fissue-17170.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Fui%2Fsimd%2Fissue-17170.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fissue-17170.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -1,8 +1,8 @@\n+// run-pass\n #![feature(repr_simd)]\n \n #[repr(simd)]\n struct T(f64, f64, f64);\n-//~^ ERROR SIMD vector length must be a power of two\n \n static X: T = T(0.0, 0.0, 0.0);\n "}, {"sha": "b35c3c4dc980d7ffcb076322f5b7b39f84b7f14b", "filename": "src/test/ui/simd/issue-17170.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cbca5689a5a0c63c6c5fda22bb0678164b52fec3/src%2Ftest%2Fui%2Fsimd%2Fissue-17170.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbca5689a5a0c63c6c5fda22bb0678164b52fec3/src%2Ftest%2Fui%2Fsimd%2Fissue-17170.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fissue-17170.stderr?ref=cbca5689a5a0c63c6c5fda22bb0678164b52fec3", "patch": "@@ -1,11 +0,0 @@\n-error[E0075]: SIMD vector length must be a power of two\n-  --> $DIR/issue-17170.rs:4:1\n-   |\n-LL | struct T(f64, f64, f64);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: monomorphising SIMD type `T` of non-power-of-two length\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0075`."}, {"sha": "8cf841f9371215a254302992dcdbd3984431fb0c", "filename": "src/test/ui/simd/issue-39720.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Fui%2Fsimd%2Fissue-39720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Fui%2Fsimd%2Fissue-39720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fissue-39720.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -1,16 +1,15 @@\n+// run-pass\n // ignore-emscripten FIXME(#45351)\n \n #![feature(repr_simd, platform_intrinsics)]\n \n #[repr(simd)]\n #[derive(Copy, Clone, Debug)]\n pub struct Char3(pub i8, pub i8, pub i8);\n-//~^ ERROR SIMD vector length must be a power of two\n \n #[repr(simd)]\n #[derive(Copy, Clone, Debug)]\n pub struct Short3(pub i16, pub i16, pub i16);\n-//~^ ERROR SIMD vector length must be a power of two\n \n extern \"platform-intrinsic\" {\n     fn simd_cast<T, U>(x: T) -> U;"}, {"sha": "355ceff00508aa0d44e692d41314f5390216162e", "filename": "src/test/ui/simd/issue-39720.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cbca5689a5a0c63c6c5fda22bb0678164b52fec3/src%2Ftest%2Fui%2Fsimd%2Fissue-39720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbca5689a5a0c63c6c5fda22bb0678164b52fec3/src%2Ftest%2Fui%2Fsimd%2Fissue-39720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fissue-39720.stderr?ref=cbca5689a5a0c63c6c5fda22bb0678164b52fec3", "patch": "@@ -1,15 +0,0 @@\n-error[E0075]: SIMD vector length must be a power of two\n-  --> $DIR/issue-39720.rs:7:1\n-   |\n-LL | pub struct Char3(pub i8, pub i8, pub i8);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0075]: SIMD vector length must be a power of two\n-  --> $DIR/issue-39720.rs:12:1\n-   |\n-LL | pub struct Short3(pub i16, pub i16, pub i16);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0075`."}, {"sha": "9b645d363e93250fc941eb8b446e312d99e6bde4", "filename": "src/test/ui/simd/simd-type-generic-monomorphisation-power-of-two.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-power-of-two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-power-of-two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-power-of-two.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -1,9 +1,7 @@\n-// build-fail\n+// run-pass\n \n #![feature(repr_simd, platform_intrinsics)]\n \n-// error-pattern:monomorphising SIMD type `Simd<3_usize>` of non-power-of-two length\n-\n #[repr(simd)]\n struct Simd<const N: usize>([f32; N]);\n "}, {"sha": "82cc0d8714aba77a2de487f1241506d6b62946b7", "filename": "src/test/ui/simd/simd-type-generic-monomorphisation-power-of-two.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbca5689a5a0c63c6c5fda22bb0678164b52fec3/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-power-of-two.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbca5689a5a0c63c6c5fda22bb0678164b52fec3/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-power-of-two.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-power-of-two.stderr?ref=cbca5689a5a0c63c6c5fda22bb0678164b52fec3", "patch": "@@ -1,4 +0,0 @@\n-error: monomorphising SIMD type `Simd<3_usize>` of non-power-of-two length\n-\n-error: aborting due to previous error\n-"}, {"sha": "73d032a0c8e5542673fdaebc60627e4def4caf08", "filename": "src/test/ui/simd/simd-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Fui%2Fsimd%2Fsimd-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Fui%2Fsimd%2Fsimd-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -10,7 +10,7 @@ struct empty; //~ ERROR SIMD vector cannot be empty\n struct empty2([f32; 0]); //~ ERROR SIMD vector cannot be empty\n \n #[repr(simd)]\n-struct pow2([f32; 7]); //~ ERROR SIMD vector length must be a power of two\n+struct pow2([f32; 7]);\n \n #[repr(simd)]\n struct i64f64(i64, f64); //~ ERROR SIMD vector should be homogeneous"}, {"sha": "823f10f5daf201af3e116facdefe6e4abcc18920", "filename": "src/test/ui/simd/simd-type.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Fui%2Fsimd%2Fsimd-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftest%2Fui%2Fsimd%2Fsimd-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type.stderr?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -10,12 +10,6 @@ error[E0075]: SIMD vector cannot be empty\n LL | struct empty2([f32; 0]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0075]: SIMD vector length must be a power of two\n-  --> $DIR/simd-type.rs:13:1\n-   |\n-LL | struct pow2([f32; 7]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0076]: SIMD vector should be homogeneous\n   --> $DIR/simd-type.rs:16:1\n    |\n@@ -40,7 +34,7 @@ error[E0075]: SIMD vector cannot have more than 32768 elements\n LL | struct TooBig([f32; 65536]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0075, E0076, E0077.\n For more information about an error, try `rustc --explain E0075`."}, {"sha": "c68432f1e5cbbc09833699a951b1b5b059651dff", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -1 +1 @@\n-Subproject commit 572e201536dc2e4920346e28037b63c0f4d88b3c\n+Subproject commit c68432f1e5cbbc09833699a951b1b5b059651dff"}, {"sha": "1ab560ac09d4e8fdfe7f1754033b89c66d76e690", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -5,7 +5,9 @@ version = \"0.0.0\"\n edition = \"2018\"\n \n [dependencies]\n+colored = \"2\"\n diff = \"0.1.10\"\n+unified-diff = \"0.2.1\"\n getopts = \"0.2\"\n tracing = \"0.1\"\n tracing-subscriber = { version = \"0.2.13\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }"}, {"sha": "2e7b42b6c7cf263714fa85cc41a24f5e7bc06614", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -13,6 +13,7 @@ use crate::header::TestProps;\n use crate::json;\n use crate::util::get_pointer_width;\n use crate::util::{logv, PathBufExt};\n+use crate::ColorConfig;\n use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n \n@@ -2440,37 +2441,92 @@ impl<'test> TestCx<'test> {\n                 }\n             })\n         };\n-        let mut diff = Command::new(\"diff\");\n-        // diff recursively, showing context, and excluding .css files\n-        diff.args(&[\"-u\", \"-r\", \"-x\", \"*.css\"]).args(&[&compare_dir, out_dir]);\n \n-        let output = if let Some(pager) = pager {\n-            let diff_pid = diff.stdout(Stdio::piped()).spawn().expect(\"failed to run `diff`\");\n+        let diff_filename = format!(\"build/tmp/rustdoc-compare-{}.diff\", std::process::id());\n+\n+        {\n+            let mut diff_output = File::create(&diff_filename).unwrap();\n+            for entry in walkdir::WalkDir::new(out_dir) {\n+                let entry = entry.expect(\"failed to read file\");\n+                let extension = entry.path().extension().and_then(|p| p.to_str());\n+                if entry.file_type().is_file()\n+                    && (extension == Some(\"html\".into()) || extension == Some(\"js\".into()))\n+                {\n+                    let expected_path =\n+                        compare_dir.join(entry.path().strip_prefix(&out_dir).unwrap());\n+                    let expected =\n+                        if let Ok(s) = std::fs::read(&expected_path) { s } else { continue };\n+                    let actual_path = entry.path();\n+                    let actual = std::fs::read(&actual_path).unwrap();\n+                    diff_output\n+                        .write_all(&unified_diff::diff(\n+                            &expected,\n+                            &expected_path.to_string_lossy(),\n+                            &actual,\n+                            &actual_path.to_string_lossy(),\n+                            3,\n+                        ))\n+                        .unwrap();\n+                }\n+            }\n+        }\n+\n+        match self.config.color {\n+            ColorConfig::AlwaysColor => colored::control::set_override(true),\n+            ColorConfig::NeverColor => colored::control::set_override(false),\n+            _ => {}\n+        }\n+\n+        if let Some(pager) = pager {\n             let pager = pager.trim();\n             if self.config.verbose {\n                 eprintln!(\"using pager {}\", pager);\n             }\n             let output = Command::new(pager)\n                 // disable paging; we want this to be non-interactive\n                 .env(\"PAGER\", \"\")\n-                .stdin(diff_pid.stdout.unwrap())\n+                .stdin(File::open(&diff_filename).unwrap())\n                 // Capture output and print it explicitly so it will in turn be\n                 // captured by libtest.\n                 .output()\n                 .unwrap();\n             assert!(output.status.success());\n-            output\n+            println!(\"{}\", String::from_utf8_lossy(&output.stdout));\n+            eprintln!(\"{}\", String::from_utf8_lossy(&output.stderr));\n         } else {\n-            eprintln!(\"warning: no pager configured, falling back to `diff --color`\");\n+            use colored::Colorize;\n+            eprintln!(\"warning: no pager configured, falling back to unified diff\");\n             eprintln!(\n                 \"help: try configuring a git pager (e.g. `delta`) with `git config --global core.pager delta`\"\n             );\n-            let output = diff.arg(\"--color\").output().unwrap();\n-            assert!(output.status.success() || output.status.code() == Some(1));\n-            output\n+            let mut out = io::stdout();\n+            let mut diff = BufReader::new(File::open(&diff_filename).unwrap());\n+            let mut line = Vec::new();\n+            loop {\n+                line.truncate(0);\n+                match diff.read_until(b'\\n', &mut line) {\n+                    Ok(0) => break,\n+                    Ok(_) => {}\n+                    Err(e) => eprintln!(\"ERROR: {:?}\", e),\n+                }\n+                match String::from_utf8(line.clone()) {\n+                    Ok(line) => {\n+                        if line.starts_with(\"+\") {\n+                            write!(&mut out, \"{}\", line.green()).unwrap();\n+                        } else if line.starts_with(\"-\") {\n+                            write!(&mut out, \"{}\", line.red()).unwrap();\n+                        } else if line.starts_with(\"@\") {\n+                            write!(&mut out, \"{}\", line.blue()).unwrap();\n+                        } else {\n+                            out.write_all(line.as_bytes()).unwrap();\n+                        }\n+                    }\n+                    Err(_) => {\n+                        write!(&mut out, \"{}\", String::from_utf8_lossy(&line).reversed()).unwrap();\n+                    }\n+                }\n+            }\n         };\n-        println!(\"{}\", String::from_utf8_lossy(&output.stdout));\n-        eprintln!(\"{}\", String::from_utf8_lossy(&output.stderr));\n     }\n \n     fn run_rustdoc_json_test(&self) {"}, {"sha": "8b6157cd4aae23b82d2349452b1d584851c6b680", "filename": "triagebot.toml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/770ed1cf4bff98345df4f9f54754d6f4bc84559f/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/770ed1cf4bff98345df4f9f54754d6f4bc84559f/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=770ed1cf4bff98345df4f9f54754d6f4bc84559f", "patch": "@@ -102,6 +102,15 @@ message_on_add = \"\"\"\\\n \"\"\"\n message_on_remove = \"Issue #{number}'s prioritization request has been removed.\"\n \n+[notify-zulip.\"T-rustdoc\"]\n+required_labels = [\"I-nominated\"]\n+zulip_stream = 266220 # #rustdoc\n+topic = \"nominated: #{number}\"\n+message_on_add = \"\"\"\\\n+@*T-rustdoc* issue #{number} \"{title}\" has been nominated for `T-rustdoc` discussion.\n+\"\"\"\n+message_on_remove = \"Issue #{number}'s nomination request has been removed.\"\n+\n [github-releases]\n format = \"rustc\"\n project-name = \"Rust\""}]}