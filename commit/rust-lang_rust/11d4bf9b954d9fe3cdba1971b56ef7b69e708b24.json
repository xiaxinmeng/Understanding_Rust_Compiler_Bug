{"sha": "11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZDRiZjliOTU0ZDlmZTNjZGJhMTk3MWI1NmVmN2I2OWU3MDhiMjQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T03:32:24Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T03:32:24Z"}, "message": "Split tests into multiple files.", "tree": {"sha": "2a20bcfe71f0f768407cfdc9b84989f61fe1e68f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a20bcfe71f0f768407cfdc9b84989f61fe1e68f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "html_url": "https://github.com/rust-lang/rust/commit/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346618cd2bac98198944341583103c16486f5a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/346618cd2bac98198944341583103c16486f5a2c", "html_url": "https://github.com/rust-lang/rust/commit/346618cd2bac98198944341583103c16486f5a2c"}], "stats": {"total": 428, "additions": 224, "deletions": 204}, "files": [{"sha": "795915a504112310a7e40d631f39ae0f90e6d99b", "filename": "test/basic.rs", "status": "removed", "additions": 0, "deletions": 204, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/346618cd2bac98198944341583103c16486f5a2c/test%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346618cd2bac98198944341583103c16486f5a2c/test%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fbasic.rs?ref=346618cd2bac98198944341583103c16486f5a2c", "patch": "@@ -1,204 +0,0 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n-fn ret() -> i32 {\n-    1\n-}\n-\n-#[miri_run]\n-fn neg() -> i32 {\n-    -1\n-}\n-\n-#[miri_run]\n-fn add() -> i32 {\n-    1 + 2\n-}\n-\n-#[miri_run]\n-fn empty() {}\n-\n-#[miri_run]\n-fn tuple() -> (i32,) {\n-    (1,)\n-}\n-\n-#[miri_run]\n-fn tuple_2() -> (i32, i32) {\n-    (1, 2)\n-}\n-\n-#[miri_run]\n-fn tuple_5() -> (i32, i32, i32, i32, i32) {\n-    (1, 2, 3, 4, 5)\n-}\n-\n-#[miri_run]\n-fn indirect_add() -> i32 {\n-    let x = 1;\n-    let y = 2;\n-    x + y\n-}\n-\n-#[miri_run]\n-fn arith() -> i32 {\n-    3*3 + 4*4\n-}\n-\n-#[miri_run]\n-fn boolean() -> bool {\n-    true\n-}\n-\n-#[miri_run]\n-fn if_false() -> i32 {\n-    if false { 1 } else { 0 }\n-}\n-\n-#[miri_run]\n-fn if_true() -> i32 {\n-    if true { 1 } else { 0 }\n-}\n-\n-struct Pair { x: i64, y: i64 }\n-\n-#[miri_run]\n-fn pair() -> Pair {\n-    Pair { x: 10, y: 20 }\n-}\n-\n-// #[miri_run(expected = \"Int(2)\")]\n-// fn call() -> i32 {\n-//     fn increment(x: i32) -> i32 {\n-//         x + 1\n-//     }\n-\n-//     increment(1)\n-// }\n-\n-// #[miri_run(expected = \"Int(3628800)\")]\n-// fn factorial_loop() -> i32 {\n-//     let mut product = 1;\n-//     let mut i = 1;\n-\n-//     while i <= 10 {\n-//         product *= i;\n-//         i += 1;\n-//     }\n-\n-//     product\n-// }\n-\n-// #[miri_run(expected = \"Int(3628800)\")]\n-// fn factorial_recursive() -> i32 {\n-//     fn fact(n: i32) -> i32 {\n-//         if n == 0 {\n-//             1\n-//         } else {\n-//             n * fact(n - 1)\n-//         }\n-//     }\n-\n-//     fact(10)\n-// }\n-\n-// #[miri_run]\n-// fn match_bool() -> i32 {\n-//     let b = true;\n-//     match b {\n-//         true => 1,\n-//         false => 0,\n-//     }\n-// }\n-\n-#[miri_run]\n-fn match_int() -> i32 {\n-    let n = 2;\n-    match n {\n-        0 => 0,\n-        1 => 10,\n-        2 => 20,\n-        3 => 30,\n-        _ => 100,\n-    }\n-}\n-\n-// #[miri_run(expected = \"Int(1)\")]\n-// fn one_line_ref() -> i32 {\n-//     *&1\n-// }\n-\n-// #[miri_run(expected = \"Int(1)\")]\n-// fn basic_ref() -> i32 {\n-//     let x = &1;\n-//     *x\n-// }\n-\n-// #[miri_run(expected = \"Int(3)\")]\n-// fn basic_ref_mut() -> i32 {\n-//     let x = &mut 1;\n-//     *x += 2;\n-//     *x\n-// }\n-\n-// // #[miri_run(expected = \"Int(3)\")]\n-// // fn basic_ref_mut_var() -> i32 {\n-// //     let mut a = 1;\n-// //     {\n-// //         let x = &mut a;\n-// //         *x += 2;\n-// //     }\n-// //     a\n-// // }\n-\n-// #[miri_run(expected = \"Int(4)\")]\n-// fn match_int_range() -> i32 {\n-//     let n = 42;\n-//     match n {\n-//         0...9 => 0,\n-//         10...19 => 1,\n-//         20...29 => 2,\n-//         30...39 => 3,\n-//         40...49 => 4,\n-//         _ => 5,\n-//     }\n-// }\n-\n-// enum MyOption<T> {\n-//     Some { data: T },\n-//     None,\n-// }\n-\n-// #[miri_run(expected = \"Int(13)\")]\n-// fn match_my_opt_some() -> i32 {\n-//     let x = MyOption::Some { data: 13 };\n-//     match x {\n-//         MyOption::Some { data } => data,\n-//         MyOption::None => 42,\n-//     }\n-// }\n-\n-// #[miri_run(expected = \"Int(42)\")]\n-// fn match_my_opt_none() -> i32 {\n-//     let x = MyOption::None;\n-//     match x {\n-//         MyOption::Some { data } => data,\n-//         MyOption::None => 42,\n-//     }\n-// }\n-\n-// #[miri_run(expected = \"Int(13)\")]\n-// fn match_opt_some() -> i32 {\n-//     let x = Some(13);\n-//     match x {\n-//         Some(data)  => data,\n-//         None => 42,\n-//     }\n-// }\n-\n-// /// Test calling a very simple function from the standard library.\n-// #[miri_run(expected = \"Int(1)\")]\n-// fn cross_crate_fn_call() -> i32 {\n-//     if 1i32.is_positive() { 1 } else { 0 }\n-// }"}, {"sha": "afa71d3a7e8509d94095358371a4859884791c69", "filename": "test/bools.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fbools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fbools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fbools.rs?ref=11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "patch": "@@ -0,0 +1,26 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+#[miri_run]\n+fn boolean() -> bool {\n+    true\n+}\n+\n+#[miri_run]\n+fn if_false() -> i32 {\n+    if false { 1 } else { 0 }\n+}\n+\n+#[miri_run]\n+fn if_true() -> i32 {\n+    if true { 1 } else { 0 }\n+}\n+\n+// #[miri_run]\n+// fn match_bool() -> i32 {\n+//     let b = true;\n+//     match b {\n+//         true => 1,\n+//         false => 0,\n+//     }\n+// }"}, {"sha": "548acb49c665b12f4f28949a2dbc9853f755439e", "filename": "test/calls.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fcalls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fcalls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fcalls.rs?ref=11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "patch": "@@ -0,0 +1,30 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+// #[miri_run(expected = \"Int(2)\")]\n+// fn call() -> i32 {\n+//     fn increment(x: i32) -> i32 {\n+//         x + 1\n+//     }\n+\n+//     increment(1)\n+// }\n+\n+// #[miri_run(expected = \"Int(3628800)\")]\n+// fn factorial_recursive() -> i32 {\n+//     fn fact(n: i32) -> i32 {\n+//         if n == 0 {\n+//             1\n+//         } else {\n+//             n * fact(n - 1)\n+//         }\n+//     }\n+\n+//     fact(10)\n+// }\n+\n+// Test calling a very simple function from the standard library.\n+// #[miri_run(expected = \"Int(1)\")]\n+// fn cross_crate_fn_call() -> i32 {\n+//     if 1i32.is_positive() { 1 } else { 0 }\n+// }"}, {"sha": "0c89b6e5a8330d4eb8af77862e3c3b7168dab70e", "filename": "test/ints.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fints.rs?ref=11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "patch": "@@ -0,0 +1,54 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+#[miri_run]\n+fn ret() -> i32 {\n+    1\n+}\n+\n+#[miri_run]\n+fn neg() -> i32 {\n+    -1\n+}\n+\n+#[miri_run]\n+fn add() -> i32 {\n+    1 + 2\n+}\n+\n+#[miri_run]\n+fn indirect_add() -> i32 {\n+    let x = 1;\n+    let y = 2;\n+    x + y\n+}\n+\n+#[miri_run]\n+fn arith() -> i32 {\n+    3*3 + 4*4\n+}\n+\n+#[miri_run]\n+fn match_int() -> i32 {\n+    let n = 2;\n+    match n {\n+        0 => 0,\n+        1 => 10,\n+        2 => 20,\n+        3 => 30,\n+        _ => 100,\n+    }\n+}\n+\n+// #[miri_run(expected = \"Int(4)\")]\n+// fn match_int_range() -> i32 {\n+//     let n = 42;\n+//     match n {\n+//         0...9 => 0,\n+//         10...19 => 1,\n+//         20...29 => 2,\n+//         30...39 => 3,\n+//         40...49 => 4,\n+//         _ => 5,\n+//     }\n+// }"}, {"sha": "3a5a66e40ac4ff6567e318f4c1f2ac770e5270f0", "filename": "test/loops.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Floops.rs?ref=11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "patch": "@@ -0,0 +1,15 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+// #[miri_run(expected = \"Int(3628800)\")]\n+// fn factorial_loop() -> i32 {\n+//     let mut product = 1;\n+//     let mut i = 1;\n+\n+//     while i <= 10 {\n+//         product *= i;\n+//         i += 1;\n+//     }\n+\n+//     product\n+// }"}, {"sha": "af825a1f2efa5e46252452992bc7b6df42a00cb8", "filename": "test/pointers.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fpointers.rs?ref=11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "patch": "@@ -0,0 +1,30 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+// #[miri_run(expected = \"Int(1)\")]\n+// fn one_line_ref() -> i32 {\n+//     *&1\n+// }\n+\n+// #[miri_run(expected = \"Int(1)\")]\n+// fn basic_ref() -> i32 {\n+//     let x = &1;\n+//     *x\n+// }\n+\n+// #[miri_run(expected = \"Int(3)\")]\n+// fn basic_ref_mut() -> i32 {\n+//     let x = &mut 1;\n+//     *x += 2;\n+//     *x\n+// }\n+\n+// #[miri_run(expected = \"Int(3)\")]\n+// fn basic_ref_mut_var() -> i32 {\n+//     let mut a = 1;\n+//     {\n+//         let x = &mut a;\n+//         *x += 2;\n+//     }\n+//     a\n+// }"}, {"sha": "287b64339aef6226de82cb235040a61054ef5be7", "filename": "test/products.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fproducts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fproducts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fproducts.rs?ref=11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "patch": "@@ -0,0 +1,24 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+#[miri_run]\n+fn tuple() -> (i32,) {\n+    (1,)\n+}\n+\n+#[miri_run]\n+fn tuple_2() -> (i32, i32) {\n+    (1, 2)\n+}\n+\n+#[miri_run]\n+fn tuple_5() -> (i32, i32, i32, i32, i32) {\n+    (1, 2, 3, 4, 5)\n+}\n+\n+struct Pair { x: i64, y: i64 }\n+\n+#[miri_run]\n+fn pair() -> Pair {\n+    Pair { x: 10, y: 20 }\n+}"}, {"sha": "4f0b9a8eb7c2a20faf2df6b0f9f05521766e32ed", "filename": "test/sums.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fsums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Fsums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fsums.rs?ref=11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "patch": "@@ -0,0 +1,34 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+// enum MyOption<T> {\n+//     Some { data: T },\n+//     None,\n+// }\n+\n+// #[miri_run(expected = \"Int(13)\")]\n+// fn match_my_opt_some() -> i32 {\n+//     let x = MyOption::Some { data: 13 };\n+//     match x {\n+//         MyOption::Some { data } => data,\n+//         MyOption::None => 42,\n+//     }\n+// }\n+\n+// #[miri_run(expected = \"Int(42)\")]\n+// fn match_my_opt_none() -> i32 {\n+//     let x = MyOption::None;\n+//     match x {\n+//         MyOption::Some { data } => data,\n+//         MyOption::None => 42,\n+//     }\n+// }\n+\n+// #[miri_run(expected = \"Int(13)\")]\n+// fn match_opt_some() -> i32 {\n+//     let x = Some(13);\n+//     match x {\n+//         Some(data)  => data,\n+//         None => 42,\n+//     }\n+// }"}, {"sha": "99a1ef06186a16a2228dcf282f0d9544a19a78b3", "filename": "test/trivial.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Ftrivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d4bf9b954d9fe3cdba1971b56ef7b69e708b24/test%2Ftrivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Ftrivial.rs?ref=11d4bf9b954d9fe3cdba1971b56ef7b69e708b24", "patch": "@@ -0,0 +1,11 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+#[miri_run]\n+fn empty() {}\n+\n+#[miri_run]\n+fn unit_var() {\n+    let x = ();\n+    x\n+}"}]}