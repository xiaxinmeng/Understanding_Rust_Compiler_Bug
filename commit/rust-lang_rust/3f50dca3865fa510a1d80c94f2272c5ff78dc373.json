{"sha": "3f50dca3865fa510a1d80c94f2272c5ff78dc373", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNTBkY2EzODY1ZmE1MTBhMWQ4MGM5NGYyMjcyYzVmZjc4ZGMzNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-18T06:02:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-18T06:02:50Z"}, "message": "Auto merge of #27085 - Ryman:gh17546, r=alexcrichton\n\nThis also changes how variant values are printed in errors, they are no\r\nlonger printed in their parent scope. As far as I can tell, this is\r\nleftover from pre-namespacing of enums.\r\n\r\nCloses #17546.", "tree": {"sha": "9a013c1f1e4a0e058d71d25dc414c29399b4d1b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a013c1f1e4a0e058d71d25dc414c29399b4d1b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f50dca3865fa510a1d80c94f2272c5ff78dc373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f50dca3865fa510a1d80c94f2272c5ff78dc373", "html_url": "https://github.com/rust-lang/rust/commit/3f50dca3865fa510a1d80c94f2272c5ff78dc373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f50dca3865fa510a1d80c94f2272c5ff78dc373/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81b6b91e837ac2b178931b92fed73460dcae050b", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b6b91e837ac2b178931b92fed73460dcae050b", "html_url": "https://github.com/rust-lang/rust/commit/81b6b91e837ac2b178931b92fed73460dcae050b"}, {"sha": "b416762a5f39415c1482abbb4b8a327df3bf1b4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b416762a5f39415c1482abbb4b8a327df3bf1b4a", "html_url": "https://github.com/rust-lang/rust/commit/b416762a5f39415c1482abbb4b8a327df3bf1b4a"}], "stats": {"total": 105, "additions": 78, "deletions": 27}, "files": [{"sha": "bdb481bc9385997d5ce527b41990950afd891b54", "filename": "src/librustc/ast_map/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Flibrustc%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Flibrustc%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fmod.rs?ref=3f50dca3865fa510a1d80c94f2272c5ff78dc373", "patch": "@@ -498,9 +498,8 @@ impl<'ast> Map<'ast> {\n     {\n         let parent = self.get_parent(id);\n         let parent = match self.find_entry(id) {\n-            Some(EntryForeignItem(..)) | Some(EntryVariant(..)) => {\n-                // Anonymous extern items, enum variants and struct ctors\n-                // go in the parent scope.\n+            Some(EntryForeignItem(..)) => {\n+                // Anonymous extern items go in the parent scope.\n                 self.get_parent(parent)\n             }\n             // But tuple struct ctors don't have names, so use the path of its"}, {"sha": "e4ae2c97fe0573a54d0bfea6ecbc4470deaa81fb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3f50dca3865fa510a1d80c94f2272c5ff78dc373", "patch": "@@ -1476,8 +1476,10 @@ fn base_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n             prim_ty_to_ty(tcx, base_segments, prim_ty)\n         }\n         _ => {\n+            let node = def.def_id().node;\n             span_err!(tcx.sess, span, E0248,\n-                      \"found value name used as a type: {:?}\", *def);\n+                      \"found value `{}` used as a type\",\n+                      tcx.map.path_to_string(node));\n             return this.tcx().types.err;\n         }\n     }"}, {"sha": "eef4bea1df11b6cb0987bbb64fae318d55918112", "filename": "src/test/compile-fail/enum-variant-type-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Ftest%2Fcompile-fail%2Fenum-variant-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Ftest%2Fcompile-fail%2Fenum-variant-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-variant-type-2.rs?ref=3f50dca3865fa510a1d80c94f2272c5ff78dc373", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,6 +14,6 @@ enum Foo {\n     Bar\n }\n \n-fn foo(x: Foo::Bar) {} //~ERROR found value name used as a type\n+fn foo(x: Foo::Bar) {} //~ERROR found value `Foo::Bar` used as a type\n \n fn main() {}"}, {"sha": "a0b7935550cd01b926f4fd8999c08b90c60b9729", "filename": "src/test/compile-fail/issue-17546.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Ftest%2Fcompile-fail%2Fissue-17546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Ftest%2Fcompile-fail%2Fissue-17546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17546.rs?ref=3f50dca3865fa510a1d80c94f2272c5ff78dc373", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use foo::MyEnum::Result;\n+use foo::NoResult; // Through a re-export\n+\n+mod foo {\n+    pub use self::MyEnum::NoResult;\n+\n+    enum MyEnum {\n+        Result,\n+        NoResult\n+    }\n+\n+    fn new() -> NoResult<MyEnum, String> {\n+        //~^ ERROR: found value `foo::MyEnum::NoResult` used as a type\n+        unimplemented!()\n+    }\n+}\n+\n+mod bar {\n+    use foo::MyEnum::Result;\n+    use foo;\n+\n+    fn new() -> Result<foo::MyEnum, String> {\n+        //~^ ERROR: found value `foo::MyEnum::Result` used as a type\n+        unimplemented!()\n+    }\n+}\n+\n+fn new() -> Result<foo::MyEnum, String> {\n+    //~^ ERROR: found value `foo::MyEnum::Result` used as a type\n+    unimplemented!()\n+}\n+\n+fn newer() -> NoResult<foo::MyEnum, String> {\n+    //~^ ERROR: found value `foo::MyEnum::NoResult` used as a type\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    let _ = new();\n+}"}, {"sha": "1171755c95354bfedf71a3a62b10254f57999a40", "filename": "src/test/compile-fail/move-fragments-2.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs?ref=3f50dca3865fa510a1d80c94f2272c5ff78dc373", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -30,7 +30,7 @@ pub enum Lonely<X,Y> { Zero, One(X), Two(X, Y) }\n #[rustc_move_fragments]\n pub fn test_match_partial(p: Lonely<D, D>) {\n     //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Zero)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n     match p {\n         Zero(..) => {}\n         _ => {}\n@@ -40,9 +40,9 @@ pub fn test_match_partial(p: Lonely<D, D>) {\n #[rustc_move_fragments]\n pub fn test_match_full(p: Lonely<D, D>) {\n     //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Zero)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as One)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Two)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::One)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Two)`\n     match p {\n         Zero(..) => {}\n         One(..) => {}\n@@ -53,10 +53,10 @@ pub fn test_match_full(p: Lonely<D, D>) {\n #[rustc_move_fragments]\n pub fn test_match_bind_one(p: Lonely<D, D>) {\n     //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Zero)`\n-    //~| ERROR                 parent_of_fragments: `($(local p) as One)`\n-    //~| ERROR                     moved_leaf_path: `($(local p) as One).#0`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Two)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n+    //~| ERROR                 parent_of_fragments: `($(local p) as Lonely::One)`\n+    //~| ERROR                     moved_leaf_path: `($(local p) as Lonely::One).#0`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Two)`\n     //~| ERROR                  assigned_leaf_path: `$(local data)`\n     match p {\n         Zero(..) => {}\n@@ -68,13 +68,13 @@ pub fn test_match_bind_one(p: Lonely<D, D>) {\n #[rustc_move_fragments]\n pub fn test_match_bind_many(p: Lonely<D, D>) {\n     //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Zero)`\n-    //~| ERROR                 parent_of_fragments: `($(local p) as One)`\n-    //~| ERROR                     moved_leaf_path: `($(local p) as One).#0`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n+    //~| ERROR                 parent_of_fragments: `($(local p) as Lonely::One)`\n+    //~| ERROR                     moved_leaf_path: `($(local p) as Lonely::One).#0`\n     //~| ERROR                  assigned_leaf_path: `$(local data)`\n-    //~| ERROR                 parent_of_fragments: `($(local p) as Two)`\n-    //~| ERROR                     moved_leaf_path: `($(local p) as Two).#0`\n-    //~| ERROR                     moved_leaf_path: `($(local p) as Two).#1`\n+    //~| ERROR                 parent_of_fragments: `($(local p) as Lonely::Two)`\n+    //~| ERROR                     moved_leaf_path: `($(local p) as Lonely::Two).#0`\n+    //~| ERROR                     moved_leaf_path: `($(local p) as Lonely::Two).#1`\n     //~| ERROR                  assigned_leaf_path: `$(local left)`\n     //~| ERROR                  assigned_leaf_path: `$(local right)`\n     match p {"}, {"sha": "34b34471f4f69afff937d1bf80561b2123b53523", "filename": "src/test/compile-fail/move-fragments-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50dca3865fa510a1d80c94f2272c5ff78dc373/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs?ref=3f50dca3865fa510a1d80c94f2272c5ff78dc373", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -30,11 +30,11 @@ pub enum Lonely<X,Y> { Zero, One(X), Two(X, Y) }\n #[rustc_move_fragments]\n pub fn test_match_bind_and_underscore(p: Lonely<D, D>) {\n     //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Zero)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as One)`\n-    //~| ERROR                 parent_of_fragments: `($(local p) as Two)`\n-    //~| ERROR                     moved_leaf_path: `($(local p) as Two).#0`\n-    //~| ERROR                    unmoved_fragment: `($(local p) as Two).#1`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::One)`\n+    //~| ERROR                 parent_of_fragments: `($(local p) as Lonely::Two)`\n+    //~| ERROR                     moved_leaf_path: `($(local p) as Lonely::Two).#0`\n+    //~| ERROR                    unmoved_fragment: `($(local p) as Lonely::Two).#1`\n     //~| ERROR                  assigned_leaf_path: `$(local left)`\n \n     match p {"}]}