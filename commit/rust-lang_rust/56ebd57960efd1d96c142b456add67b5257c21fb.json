{"sha": "56ebd57960efd1d96c142b456add67b5257c21fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZWJkNTc5NjBlZmQxZDk2YzE0MmI0NTZhZGQ2N2I1MjU3YzIxZmI=", "commit": {"author": {"name": "sd234678", "email": "sd234678@protonmail.com", "date": "2019-08-09T14:14:05Z"}, "committer": {"name": "sd234678", "email": "sd234678@protonmail.com", "date": "2019-08-16T09:54:20Z"}, "message": "Remove meaningless comments in src/test", "tree": {"sha": "a7a36e445c39c2a2d158cc1db098ea4293a02287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7a36e445c39c2a2d158cc1db098ea4293a02287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56ebd57960efd1d96c142b456add67b5257c21fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56ebd57960efd1d96c142b456add67b5257c21fb", "html_url": "https://github.com/rust-lang/rust/commit/56ebd57960efd1d96c142b456add67b5257c21fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56ebd57960efd1d96c142b456add67b5257c21fb/comments", "author": {"login": "sd234678", "id": 48051938, "node_id": "MDQ6VXNlcjQ4MDUxOTM4", "avatar_url": "https://avatars.githubusercontent.com/u/48051938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sd234678", "html_url": "https://github.com/sd234678", "followers_url": "https://api.github.com/users/sd234678/followers", "following_url": "https://api.github.com/users/sd234678/following{/other_user}", "gists_url": "https://api.github.com/users/sd234678/gists{/gist_id}", "starred_url": "https://api.github.com/users/sd234678/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sd234678/subscriptions", "organizations_url": "https://api.github.com/users/sd234678/orgs", "repos_url": "https://api.github.com/users/sd234678/repos", "events_url": "https://api.github.com/users/sd234678/events{/privacy}", "received_events_url": "https://api.github.com/users/sd234678/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sd234678", "id": 48051938, "node_id": "MDQ6VXNlcjQ4MDUxOTM4", "avatar_url": "https://avatars.githubusercontent.com/u/48051938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sd234678", "html_url": "https://github.com/sd234678", "followers_url": "https://api.github.com/users/sd234678/followers", "following_url": "https://api.github.com/users/sd234678/following{/other_user}", "gists_url": "https://api.github.com/users/sd234678/gists{/gist_id}", "starred_url": "https://api.github.com/users/sd234678/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sd234678/subscriptions", "organizations_url": "https://api.github.com/users/sd234678/orgs", "repos_url": "https://api.github.com/users/sd234678/repos", "events_url": "https://api.github.com/users/sd234678/events{/privacy}", "received_events_url": "https://api.github.com/users/sd234678/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7af19c279b8b7ea3d2c21fcbd67164af8d5d968", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7af19c279b8b7ea3d2c21fcbd67164af8d5d968", "html_url": "https://github.com/rust-lang/rust/commit/f7af19c279b8b7ea3d2c21fcbd67164af8d5d968"}], "stats": {"total": 81, "additions": 0, "deletions": 81}, "files": [{"sha": "619cce685d75f581a9c204f7bfefba50c9e55dde", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -259,8 +259,6 @@ fn _12() {\n     }\n }\n \n-/////////////////\n-\n fn foo() { }\n fn foo3(_: i32, _: (), _: ()) { }\n fn qux(_: i32) { }"}, {"sha": "7e05bcd309a4ff3efa52d1da6c915a0f58d67736", "filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -12,30 +12,22 @@ pub trait Car : Vehicle {\n     fn chip_paint(&self, c: Self::Color) { }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct Black;\n struct ModelT;\n impl Vehicle for ModelT { type Color = Black; }\n impl Car for ModelT { }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct Blue;\n struct ModelU;\n impl Vehicle for ModelU { type Color = Blue; }\n impl Car for ModelU { }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n fn dent<C:Car>(c: C, color: C::Color) { c.chip_paint(color) }\n fn a() { dent(ModelT, Black); }\n fn b() { dent(ModelT, Blue); } //~ ERROR mismatched types\n fn c() { dent(ModelU, Black); } //~ ERROR mismatched types\n fn d() { dent(ModelU, Blue); }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n fn e() { ModelT.chip_paint(Black); }\n fn f() { ModelT.chip_paint(Blue); } //~ ERROR mismatched types\n fn g() { ModelU.chip_paint(Black); } //~ ERROR mismatched types"}, {"sha": "6b2bbbe2e4fb971632055ec1740587d66bd6c6ef", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -11,22 +11,16 @@ pub trait Car : Vehicle {\n     fn honk(&self) { }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct Black;\n struct ModelT;\n impl Vehicle for ModelT { type Color = Black; }\n impl Car for ModelT { }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct Blue;\n struct ModelU;\n impl Vehicle for ModelU { type Color = Blue; }\n impl Car for ModelU { }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n fn black_car<C:Car<Color=Black>>(c: C) {\n }\n "}, {"sha": "c89f6046e6bf2cae138912276c9110d60ea44cd1", "filename": "src/test/ui/associated-types/associated-types-ref-from-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ref-from-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ref-from-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ref-from-struct.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -9,8 +9,6 @@ trait Test {\n     fn test(&self, value: &Self::V) -> bool;\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct TesterPair<T:Test> {\n     tester: T,\n     value: T::V,\n@@ -26,8 +24,6 @@ impl<T:Test> TesterPair<T> {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct EqU32(u32);\n impl Test for EqU32 {\n     type V = u32;"}, {"sha": "88d396101dba23106de9a1daf0e6e3c325e9f8f6", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-type-outlives.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-type-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-type-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-type-outlives.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -14,7 +14,6 @@ fn want_foo<T>()\n {\n }\n \n-///////////////////////////////////////////////////////////////////////////\n // Expressed as a where clause\n \n struct SomeStruct<X> {\n@@ -30,7 +29,6 @@ fn one() {\n     want_foo::<SomeStruct<usize>>();\n }\n \n-///////////////////////////////////////////////////////////////////////////\n // Expressed as shorthand\n \n struct AnotherStruct<X> {"}, {"sha": "004d62ac513ffe86bfc0917c1844cc4dd69284d1", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -15,7 +15,6 @@ fn want_foo1<T>()\n {\n }\n \n-///////////////////////////////////////////////////////////////////////////\n // Expressed as a where clause\n \n struct SomeStruct;"}, {"sha": "ce1550568c19dd4c53a5f8273c58b7415ac7b068", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -8,7 +8,6 @@\n \n // See issue 60414\n \n-/////////////////////////////////////////////\n // Reduction to `impl Trait`\n \n struct Foo<T>(T);\n@@ -33,7 +32,6 @@ mod impl_trait {\n     }\n }\n \n-/////////////////////////////////////////////\n // Same with lifetimes in the trait\n \n mod lifetimes {"}, {"sha": "b0ed4be54b8999cd8487396ba6482cfffc8a2cc6", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -8,7 +8,6 @@\n \n // See issue 60414\n \n-/////////////////////////////////////////////\n // Reduction to `impl Trait`\n \n struct Foo<T>(T);\n@@ -32,7 +31,6 @@ mod impl_trait {\n     }\n }\n \n-/////////////////////////////////////////////\n // Same with lifetimes in the trait\n \n mod lifetimes {\n@@ -59,7 +57,6 @@ mod lifetimes {\n     }\n }\n \n-/////////////////////////////////////////////\n // Reduction using `impl Trait` in bindings\n \n mod impl_trait_in_bindings {\n@@ -80,7 +77,6 @@ mod impl_trait_in_bindings {\n     }\n }\n \n-/////////////////////////////////////////////\n // The same applied to `type Foo = impl Bar`s\n \n mod opaque_types {"}, {"sha": "7c2b0d69c8b2568de550058321ddd25a69600b8b", "filename": "src/test/ui/issues/issue-12028.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fissues%2Fissue-12028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fissues%2Fissue-12028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -17,8 +17,6 @@ trait StreamHasher {\n     fn stream(&self) -> Self::S;\n }\n \n-//////////////////////////////////////////////////////////////////////////////\n-\n trait StreamHash<H: StreamHasher>: Hash<H> {\n     fn input_stream(&self, stream: &mut H::S);\n }"}, {"sha": "94da2ca5cab815e2bc2251f8e7a7d8666633dc74", "filename": "src/test/ui/issues/issue-16739.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fissues%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fissues%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16739.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -16,8 +16,6 @@ impl FnOnce<()> for Foo {\n     extern \"rust-call\" fn call_once(mut self, _: ()) -> u32 { self.call_mut(()) }\n }\n \n-/////////////////////////////////////////////////////////////////////////\n-\n impl FnMut<(u32,)> for Foo {\n     extern \"rust-call\" fn call_mut(&mut self, (x,): (u32,)) -> u32 { self.foo + x }\n }\n@@ -27,8 +25,6 @@ impl FnOnce<(u32,)> for Foo {\n     extern \"rust-call\" fn call_once(mut self, args: (u32,)) -> u32 { self.call_mut(args) }\n }\n \n-/////////////////////////////////////////////////////////////////////////\n-\n impl FnMut<(u32,u32)> for Foo {\n     extern \"rust-call\" fn call_mut(&mut self, (x, y): (u32, u32)) -> u32 { self.foo + x + y }\n }"}, {"sha": "21d983f192ab6b490ffc34fdeab5165056665714", "filename": "src/test/ui/methods/method-projection.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fmethods%2Fmethod-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fmethods%2Fmethod-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-projection.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -2,9 +2,6 @@\n // Test that we can use method notation to call methods based on a\n // projection bound from a trait. Issue #20469.\n \n-///////////////////////////////////////////////////////////////////////////\n-\n-\n trait MakeString {\n     fn make_string(&self) -> String;\n }\n@@ -21,8 +18,6 @@ impl MakeString for usize {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n trait Foo {\n     type F: MakeString;\n \n@@ -33,8 +28,6 @@ fn foo<F:Foo>(f: &F) -> String {\n     f.get().make_string()\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct SomeStruct {\n     field: isize,\n }\n@@ -47,8 +40,6 @@ impl Foo for SomeStruct {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct SomeOtherStruct {\n     field: usize,\n }"}, {"sha": "cee741184ca2ab68a0ddb8b35bf7864274b13533", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -6,9 +6,6 @@\n \n #![allow(dead_code)]\n \n-\n-///////////////////////////////////////////////////////////////////////////\n-\n pub trait TheTrait<'b> {\n     type TheAssocType;\n }\n@@ -21,8 +18,6 @@ impl<'a,'b> TheTrait<'a> for TheType<'b> {\n     type TheAssocType = &'b ();\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub struct WithHrAssoc<T>\n     where for<'a> T : TheTrait<'a>\n {\n@@ -37,8 +32,6 @@ fn with_assoc<'a,'b>() {\n     //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub trait TheSubTrait : for<'a> TheTrait<'a> {\n }\n "}, {"sha": "99965f333907bff77772640989900ecc090fc93d", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -8,8 +8,6 @@\n \n #![allow(dead_code)]\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub trait TheTrait {\n     type TheAssocType;\n }\n@@ -22,8 +20,6 @@ impl<'b> TheTrait for TheType<'b> {\n     type TheAssocType = &'b ();\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub struct WithAssoc<T> where T : TheTrait {\n     m: [T; 0]\n }"}, {"sha": "3afc600becb6e4c7309b65b5d2e7ef251b24c1cf", "filename": "src/test/ui/regions/regions-outlives-projection-container.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -5,8 +5,6 @@\n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub trait TheTrait {\n     type TheAssocType;\n }\n@@ -19,8 +17,6 @@ impl<'b> TheTrait for TheType<'b> {\n     type TheAssocType = &'b ();\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub struct WithAssoc<T:TheTrait> {\n     m: [T; 0]\n }"}, {"sha": "37005f839d4889225f682689417af88a55fc234d", "filename": "src/test/ui/specialization/defaultimpl/specialization-no-default.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -3,9 +3,7 @@\n // Check a number of scenarios in which one impl tries to override another,\n // without correctly using `default`.\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 1: one layer of specialization, multiple methods, missing `default`\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Foo {\n     fn foo(&self);\n@@ -25,9 +23,7 @@ impl Foo for u32 {\n     fn bar(&self) {} //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 2: one layer of specialization, missing `default` on associated type\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Bar {\n     type T;\n@@ -41,9 +37,7 @@ impl Bar for u8 {\n     type T = (); //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 3a: multiple layers of specialization, missing interior `default`\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Baz {\n     fn baz(&self);\n@@ -61,10 +55,8 @@ impl Baz for i32 {\n     fn baz(&self) {} //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 3b: multiple layers of specialization, missing interior `default`,\n // redundant `default` in bottom layer.\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Redundant {\n     fn redundant(&self);"}, {"sha": "57346b26d24ec2d8e85544aee516d8261e75dd1d", "filename": "src/test/ui/specialization/specialization-no-default.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -3,9 +3,7 @@\n // Check a number of scenarios in which one impl tries to override another,\n // without correctly using `default`.\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 1: one layer of specialization, multiple methods, missing `default`\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Foo {\n     fn foo(&self);\n@@ -25,9 +23,7 @@ impl Foo for u32 {\n     fn bar(&self) {} //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 2: one layer of specialization, missing `default` on associated type\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Bar {\n     type T;\n@@ -41,9 +37,7 @@ impl Bar for u8 {\n     type T = (); //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 3a: multiple layers of specialization, missing interior `default`\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Baz {\n     fn baz(&self);\n@@ -61,10 +55,8 @@ impl Baz for i32 {\n     fn baz(&self) {} //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 3b: multiple layers of specialization, missing interior `default`,\n // redundant `default` in bottom layer.\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Redundant {\n     fn redundant(&self);"}, {"sha": "afdfb96394bd0d8e1c4bc13d1c137ee46ec2760a", "filename": "src/test/ui/traits/traits-conditional-model-fn.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebd57960efd1d96c142b456add67b5257c21fb/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs?ref=56ebd57960efd1d96c142b456add67b5257c21fb", "patch": "@@ -14,8 +14,6 @@ use go_trait::{Go, GoMut, GoOnce, go, go_mut, go_once};\n use std::rc::Rc;\n use std::cell::Cell;\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct SomeGoableThing {\n     counter: Rc<Cell<isize>>\n }\n@@ -26,8 +24,6 @@ impl Go for SomeGoableThing {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct SomeGoOnceableThing {\n     counter: Rc<Cell<isize>>\n }\n@@ -38,8 +34,6 @@ impl GoOnce for SomeGoOnceableThing {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n fn main() {\n     let counter = Rc::new(Cell::new(0));\n     let mut x = SomeGoableThing { counter: counter.clone() };"}]}