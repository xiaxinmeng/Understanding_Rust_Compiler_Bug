{"sha": "1d826b735c30a89bfe3aac8acbcda4efc8b5286f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkODI2YjczNWMzMGE4OWJmZTNhYWM4YWNiY2RhNGVmYzhiNTI4NmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-04T08:23:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-04T08:23:54Z"}, "message": "rustdoc: Build appropriate filenames for pages", "tree": {"sha": "a4dbb1e9b83495f14ac8f5cc1ff158325266fd20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4dbb1e9b83495f14ac8f5cc1ff158325266fd20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d826b735c30a89bfe3aac8acbcda4efc8b5286f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d826b735c30a89bfe3aac8acbcda4efc8b5286f", "html_url": "https://github.com/rust-lang/rust/commit/1d826b735c30a89bfe3aac8acbcda4efc8b5286f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d826b735c30a89bfe3aac8acbcda4efc8b5286f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e3cee747af58a48038347e88c5fc05799a8e8b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3cee747af58a48038347e88c5fc05799a8e8b5", "html_url": "https://github.com/rust-lang/rust/commit/0e3cee747af58a48038347e88c5fc05799a8e8b5"}], "stats": {"total": 98, "additions": 75, "deletions": 23}, "files": [{"sha": "aa74ab0396be3797dca4d0fdd1d993a782735411", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 75, "deletions": 23, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/1d826b735c30a89bfe3aac8acbcda4efc8b5286f/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d826b735c30a89bfe3aac8acbcda4efc8b5286f/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=1d826b735c30a89bfe3aac8acbcda4efc8b5286f", "patch": "@@ -54,7 +54,7 @@ fn markdown_writer(\n     config: config::config,\n     page: doc::page\n ) -> writer {\n-    let filename = make_filename(config, \"md\", page);\n+    let filename = make_filename(config, page);\n     generic_writer {|markdown|\n         write_file(filename, markdown);\n     }\n@@ -66,7 +66,7 @@ fn pandoc_writer(\n ) -> writer {\n     assert option::is_some(config.pandoc_cmd);\n     let pandoc_cmd = option::get(config.pandoc_cmd);\n-    let filename = make_filename(config, \"html\", page);\n+    let filename = make_filename(config, page);\n \n     let pandoc_args = [\n         \"--standalone\",\n@@ -131,47 +131,99 @@ fn generic_writer(process: fn~(markdown: str)) -> writer {\n \n fn make_filename(\n     config: config::config,\n-    ext: str,\n-    _page: doc::page\n+    page: doc::page\n ) -> str {\n     import std::fs;\n-    let cratefile = fs::basename(config.input_crate);\n-    let cratename = tuple::first(fs::splitext(cratefile));\n-    fs::connect(config.output_dir, cratename + \".\" + ext)\n-}\n-\n-fn write_file(path: str, s: str) {\n-    import std::io;\n-    import std::io::writer_util;\n \n-    alt io::file_writer(path, [io::create, io::truncate]) {\n-      result::ok(writer) {\n-        writer.write_str(s);\n-      }\n-      result::err(e) { fail e }\n-    }\n+    let filename = {\n+        alt page {\n+          doc::cratepage(doc) {\n+            if config.output_format == config::pandoc_html &&\n+                config.output_style == config::doc_per_mod {\n+                \"index\"\n+            } else {\n+                assert doc.topmod.name() != \"\";\n+                doc.topmod.name()\n+            }\n+          }\n+          doc::itempage(doc) {\n+            str::connect(doc.path() + [doc.name()], \"_\")\n+          }\n+        }\n+    };\n+    let ext = alt config.output_format {\n+      config::markdown { \"md\" }\n+      config::pandoc_html { \"html\" }\n+    };\n+    fs::connect(config.output_dir, filename + \".\" + ext)\n }\n \n #[test]\n fn should_use_markdown_file_name_based_off_crate() {\n     let config = {\n-        output_dir: \"output/dir\"\n+        output_dir: \"output/dir\",\n+        output_format: config::markdown,\n+        output_style: config::doc_per_crate\n         with config::default_config(\"input/test.rc\")\n     };\n-    let doc = test::mk_doc(\"\");\n+    let doc = test::mk_doc(\"test\", \"\");\n     let page = doc::cratepage(doc.cratedoc());\n-    assert make_filename(config, \"md\", page) == \"output/dir/test.md\";\n+    let filename = make_filename(config, page);\n+    assert filename == \"output/dir/test.md\";\n+}\n+\n+#[test]\n+fn should_name_html_crate_file_name_index_html_when_doc_per_mod() {\n+    let config = {\n+        output_dir: \"output/dir\",\n+        output_format: config::pandoc_html,\n+        output_style: config::doc_per_mod\n+        with config::default_config(\"input/test.rc\")\n+    };\n+    let doc = test::mk_doc(\"\", \"\");\n+    let page = doc::cratepage(doc.cratedoc());\n+    let filename = make_filename(config, page);\n+    assert filename == \"output/dir/index.html\";\n+}\n+\n+#[test]\n+fn should_name_mod_file_names_by_path() {\n+    let config = {\n+        output_dir: \"output/dir\",\n+        output_format: config::pandoc_html,\n+        output_style: config::doc_per_mod\n+        with config::default_config(\"input/test.rc\")\n+    };\n+    let doc = test::mk_doc(\"\", \"mod a { mod b { } }\");\n+    let modb = doc.cratemod().mods()[0].mods()[0];\n+    let page = doc::itempage(doc::modtag(modb));\n+    let filename = make_filename(config, page);\n+    assert  filename == \"output/dir/a_b.html\";\n }\n \n #[cfg(test)]\n mod test {\n-    fn mk_doc(source: str) -> doc::doc {\n+    fn mk_doc(name: str, source: str) -> doc::doc {\n         astsrv::from_str(source) {|srv|\n-            extract::from_srv(srv, \"\")\n+            let doc = extract::from_srv(srv, name);\n+            let doc = path_pass::mk_pass().f(srv, doc);\n+            doc\n         }\n     }\n }\n \n+fn write_file(path: str, s: str) {\n+    import std::io;\n+    import std::io::writer_util;\n+\n+    alt io::file_writer(path, [io::create, io::truncate]) {\n+      result::ok(writer) {\n+        writer.write_str(s);\n+      }\n+      result::err(e) { fail e }\n+    }\n+}\n+\n fn future_writer_factory(\n ) -> (writer_factory, comm::port<(doc::page, str)>) {\n     let markdown_po = comm::port();"}]}