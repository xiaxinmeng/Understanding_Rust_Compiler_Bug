{"sha": "6f76da494b4b89839cd9a1a13e725ec5cdd83743", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNzZkYTQ5NGI0Yjg5ODM5Y2Q5YTFhMTNlNzI1ZWM1Y2RkODM3NDM=", "commit": {"author": {"name": "Simon Ochsenreither", "email": "simon@ochsenreither.de", "date": "2019-07-03T23:38:22Z"}, "committer": {"name": "Simon Ochsenreither", "email": "simon@ochsenreither.de", "date": "2019-07-07T14:50:44Z"}, "message": "Implement Option::contains, Result::contains and Result::contains_err\n\nThis increases consistency with other common data structures.", "tree": {"sha": "59fd1e359f2811ebf842f0f62a931daf344e10c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59fd1e359f2811ebf842f0f62a931daf344e10c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f76da494b4b89839cd9a1a13e725ec5cdd83743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f76da494b4b89839cd9a1a13e725ec5cdd83743", "html_url": "https://github.com/rust-lang/rust/commit/6f76da494b4b89839cd9a1a13e725ec5cdd83743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f76da494b4b89839cd9a1a13e725ec5cdd83743/comments", "author": {"login": "soc", "id": 42493, "node_id": "MDQ6VXNlcjQyNDkz", "avatar_url": "https://avatars.githubusercontent.com/u/42493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soc", "html_url": "https://github.com/soc", "followers_url": "https://api.github.com/users/soc/followers", "following_url": "https://api.github.com/users/soc/following{/other_user}", "gists_url": "https://api.github.com/users/soc/gists{/gist_id}", "starred_url": "https://api.github.com/users/soc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soc/subscriptions", "organizations_url": "https://api.github.com/users/soc/orgs", "repos_url": "https://api.github.com/users/soc/repos", "events_url": "https://api.github.com/users/soc/events{/privacy}", "received_events_url": "https://api.github.com/users/soc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soc", "id": 42493, "node_id": "MDQ6VXNlcjQyNDkz", "avatar_url": "https://avatars.githubusercontent.com/u/42493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soc", "html_url": "https://github.com/soc", "followers_url": "https://api.github.com/users/soc/followers", "following_url": "https://api.github.com/users/soc/following{/other_user}", "gists_url": "https://api.github.com/users/soc/gists{/gist_id}", "starred_url": "https://api.github.com/users/soc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soc/subscriptions", "organizations_url": "https://api.github.com/users/soc/orgs", "repos_url": "https://api.github.com/users/soc/repos", "events_url": "https://api.github.com/users/soc/events{/privacy}", "received_events_url": "https://api.github.com/users/soc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088b987307b91612ab164026e1dcdd0129fdb62b", "url": "https://api.github.com/repos/rust-lang/rust/commits/088b987307b91612ab164026e1dcdd0129fdb62b", "html_url": "https://github.com/rust-lang/rust/commit/088b987307b91612ab164026e1dcdd0129fdb62b"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "98cc747c807fbf17264bff323494cee8b5533525", "filename": "src/libcore/option.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6f76da494b4b89839cd9a1a13e725ec5cdd83743/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f76da494b4b89839cd9a1a13e725ec5cdd83743/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6f76da494b4b89839cd9a1a13e725ec5cdd83743", "patch": "@@ -208,6 +208,32 @@ impl<T> Option<T> {\n         !self.is_some()\n     }\n \n+    /// Returns `true` if the option is a [`Some`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_contains)]\n+    ///\n+    /// let x: Option<u32> = Some(2);\n+    /// assert_eq!(x.contains(&2), true);\n+    ///\n+    /// let x: Option<u32> = Some(3);\n+    /// assert_eq!(x.contains(&2), false);\n+    ///\n+    /// let x: Option<u32> = None;\n+    /// assert_eq!(x.contains(&2), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n+    pub fn contains<U>(&self, x: &U) -> bool where U: PartialEq<T> {\n+        match self {\n+            Some(y) => x == y,\n+            None => false,\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Adapter for working with references\n     /////////////////////////////////////////////////////////////////////////"}, {"sha": "b64ad149cf4db7ceae45dc74821b38877206c862", "filename": "src/libcore/result.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6f76da494b4b89839cd9a1a13e725ec5cdd83743/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f76da494b4b89839cd9a1a13e725ec5cdd83743/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=6f76da494b4b89839cd9a1a13e725ec5cdd83743", "patch": "@@ -309,6 +309,58 @@ impl<T, E> Result<T, E> {\n         !self.is_ok()\n     }\n \n+    /// Returns `true` if the result is an [`Ok`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_contains)]\n+    ///\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.contains(&2), true);\n+    ///\n+    /// let x: Result<u32, &str> = Ok(3);\n+    /// assert_eq!(x.contains(&2), false);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some error message\");\n+    /// assert_eq!(x.contains(&2), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n+    pub fn contains<U>(&self, x: &U) -> bool where U: PartialEq<T> {\n+        match self {\n+            Ok(y) => x == y,\n+            Err(_) => false\n+        }\n+    }\n+\n+    /// Returns `true` if the result is an [`Err`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_contains_err)]\n+    ///\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some error message\");\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), true);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some other error message\");\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"result_contains_err\", issue = \"62358\")]\n+    pub fn contains_err<F>(&self, f: &F) -> bool where F: PartialEq<E> {\n+        match self {\n+            Ok(_) => false,\n+            Err(e) => f == e\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Adapter for each variant\n     /////////////////////////////////////////////////////////////////////////"}]}