{"sha": "f90c445637385c2526990119b3f177d809ac5459", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MGM0NDU2MzczODVjMjUyNjk5MDExOWIzZjE3N2Q4MDlhYzU0NTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-25T22:07:45Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-26T19:05:02Z"}, "message": "Modify spans of expanded expression\n\nModify the spans used for `for`-loop expression expansion, instead of\ncreating a new span during error creation.", "tree": {"sha": "7ef79fc8ae69777e9945225089022db6faf62471", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ef79fc8ae69777e9945225089022db6faf62471"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f90c445637385c2526990119b3f177d809ac5459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f90c445637385c2526990119b3f177d809ac5459", "html_url": "https://github.com/rust-lang/rust/commit/f90c445637385c2526990119b3f177d809ac5459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f90c445637385c2526990119b3f177d809ac5459/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a530baec9df99ed62a5b792da92baa6009842e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a530baec9df99ed62a5b792da92baa6009842e2", "html_url": "https://github.com/rust-lang/rust/commit/3a530baec9df99ed62a5b792da92baa6009842e2"}], "stats": {"total": 96, "additions": 38, "deletions": 58}, "files": [{"sha": "8a48dca01522b016d6b1bbedeafb561bb1dc517f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f90c445637385c2526990119b3f177d809ac5459/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90c445637385c2526990119b3f177d809ac5459/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f90c445637385c2526990119b3f177d809ac5459", "patch": "@@ -3021,7 +3021,7 @@ impl<'a> LoweringContext<'a> {\n \n                 // `match <sub_expr> { ... }`\n                 let arms = hir_vec![pat_arm, break_arm];\n-                let match_expr = self.expr(e.span,\n+                let match_expr = self.expr(sub_expr.span,\n                                            hir::ExprMatch(sub_expr,\n                                                           arms,\n                                                           hir::MatchSource::WhileLetDesugar),\n@@ -3059,24 +3059,25 @@ impl<'a> LoweringContext<'a> {\n \n                 // expand <head>\n                 let head = self.lower_expr(head);\n+                let head_sp = head.span;\n \n                 let iter = self.str_to_ident(\"iter\");\n \n                 let next_ident = self.str_to_ident(\"__next\");\n-                let next_pat = self.pat_ident_binding_mode(e.span,\n+                let next_pat = self.pat_ident_binding_mode(pat.span,\n                                                            next_ident,\n                                                            hir::BindingAnnotation::Mutable);\n \n                 // `::std::option::Option::Some(val) => next = val`\n                 let pat_arm = {\n                     let val_ident = self.str_to_ident(\"val\");\n-                    let val_pat = self.pat_ident(e.span, val_ident);\n-                    let val_expr = P(self.expr_ident(e.span, val_ident, val_pat.id));\n-                    let next_expr = P(self.expr_ident(e.span, next_ident, next_pat.id));\n-                    let assign = P(self.expr(e.span,\n+                    let val_pat = self.pat_ident(pat.span, val_ident);\n+                    let val_expr = P(self.expr_ident(pat.span, val_ident, val_pat.id));\n+                    let next_expr = P(self.expr_ident(pat.span, next_ident, next_pat.id));\n+                    let assign = P(self.expr(pat.span,\n                                              hir::ExprAssign(next_expr, val_expr),\n                                              ThinVec::new()));\n-                    let some_pat = self.pat_some(e.span, val_pat);\n+                    let some_pat = self.pat_some(pat.span, val_pat);\n                     self.arm(hir_vec![some_pat], assign)\n                 };\n \n@@ -3089,46 +3090,45 @@ impl<'a> LoweringContext<'a> {\n                 };\n \n                 // `mut iter`\n-                let iter_pat = self.pat_ident_binding_mode(e.span,\n+                let iter_pat = self.pat_ident_binding_mode(head_sp,\n                                                            iter,\n                                                            hir::BindingAnnotation::Mutable);\n \n                 // `match ::std::iter::Iterator::next(&mut iter) { ... }`\n                 let match_expr = {\n-                    let iter = P(self.expr_ident(e.span, iter, iter_pat.id));\n-                    let ref_mut_iter = self.expr_mut_addr_of(e.span, iter);\n+                    let iter = P(self.expr_ident(head_sp, iter, iter_pat.id));\n+                    let ref_mut_iter = self.expr_mut_addr_of(head_sp, iter);\n                     let next_path = &[\"iter\", \"Iterator\", \"next\"];\n-                    let next_path = P(self.expr_std_path(e.span, next_path, ThinVec::new()));\n-                    let next_expr = P(self.expr_call(e.span, next_path,\n+                    let next_path = P(self.expr_std_path(head_sp, next_path, ThinVec::new()));\n+                    let next_expr = P(self.expr_call(head_sp, next_path,\n                                       hir_vec![ref_mut_iter]));\n                     let arms = hir_vec![pat_arm, break_arm];\n \n-                    P(self.expr(e.span,\n+                    P(self.expr(head_sp,\n                                 hir::ExprMatch(next_expr, arms,\n                                                hir::MatchSource::ForLoopDesugar),\n                                 ThinVec::new()))\n                 };\n-                let match_stmt = respan(e.span, hir::StmtExpr(match_expr, self.next_id().node_id));\n+                let match_stmt = respan(head_sp, hir::StmtExpr(match_expr, self.next_id().node_id));\n \n-                let next_expr = P(self.expr_ident(e.span, next_ident, next_pat.id));\n+                let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat.id));\n \n                 // `let mut __next`\n-                let next_let = self.stmt_let_pat(e.span,\n+                let next_let = self.stmt_let_pat(head_sp,\n                     None,\n                     next_pat,\n                     hir::LocalSource::ForLoopDesugar);\n \n                 // `let <pat> = __next`\n                 let pat = self.lower_pat(pat);\n-                let pat_let = self.stmt_let_pat(e.span,\n+                let pat_let = self.stmt_let_pat(head_sp,\n                     Some(next_expr),\n                     pat,\n                     hir::LocalSource::ForLoopDesugar);\n \n-                let body_block = self.with_loop_scope(e.id,\n-                                                        |this| this.lower_block(body, false));\n+                let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n                 let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n-                let body_stmt = respan(e.span, hir::StmtExpr(body_expr, self.next_id().node_id));\n+                let body_stmt = respan(body.span, hir::StmtExpr(body_expr, self.next_id().node_id));\n \n                 let loop_block = P(self.block_all(e.span,\n                                                   hir_vec![next_let,\n@@ -3155,12 +3155,12 @@ impl<'a> LoweringContext<'a> {\n                 // `match ::std::iter::IntoIterator::into_iter(<head>) { ... }`\n                 let into_iter_expr = {\n                     let into_iter_path = &[\"iter\", \"IntoIterator\", \"into_iter\"];\n-                    let into_iter = P(self.expr_std_path(e.span, into_iter_path,\n+                    let into_iter = P(self.expr_std_path(head_sp, into_iter_path,\n                                                          ThinVec::new()));\n-                    P(self.expr_call(e.span, into_iter, hir_vec![head]))\n+                    P(self.expr_call(head_sp, into_iter, hir_vec![head]))\n                 };\n \n-                let match_expr = P(self.expr_match(e.span,\n+                let match_expr = P(self.expr_match(head_sp,\n                                                    into_iter_expr,\n                                                    hir_vec![iter_arm],\n                                                    hir::MatchSource::ForLoopDesugar));"}, {"sha": "e649f1b49df765052fdd61b6b3b69c0e69c8d2ef", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f90c445637385c2526990119b3f177d809ac5459/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90c445637385c2526990119b3f177d809ac5459/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=f90c445637385c2526990119b3f177d809ac5459", "patch": "@@ -551,24 +551,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         let OnUnimplementedNote { message, label }\n                             = self.on_unimplemented_note(trait_ref, obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n-                        let span = match self.tcx.sess.codemap().span_to_snippet(span) {\n-                            Ok(ref s) if s.starts_with(\"for \") => {\n-                                // On for loops, this error is caused by the element being iterated\n-                                // on, but the span points at the entire for loop. Instead of:\n-                                //\n-                                // / for c in \"asdf\" {\n-                                // |     ...\n-                                // | }\n-                                // |_^ `&str` is not an iterator\n-                                //\n-                                // lets point at:\n-                                //\n-                                // for c in \"asdf\" {\n-                                // ^^^^^^^^^^^^^^^ `&str` is not an iterator\n-                                self.tcx.sess.codemap().span_until_char(span, '{')\n-                            }\n-                            _ => span,\n-                        };\n \n                         let mut err = struct_span_err!(\n                             self.tcx.sess,"}, {"sha": "5eb0e4360fc93beeb208a294674ca837dded48d3", "filename": "src/test/compile-fail/issue-20605.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90c445637385c2526990119b3f177d809ac5459/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90c445637385c2526990119b3f177d809ac5459/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs?ref=f90c445637385c2526990119b3f177d809ac5459", "patch": "@@ -10,7 +10,7 @@\n \n fn changer<'a>(mut things: Box<Iterator<Item=&'a mut u8>>) {\n     for item in *things { *item = 0 }\n-//~^ ERROR `std::iter::Iterator<Item=&mut u8>: std::marker::Sized` is not satisfied\n+//~^ ERROR the trait bound `std::iter::Iterator<Item=&mut u8>: std::marker::Sized` is not satisfied\n }\n \n fn main() {}"}, {"sha": "de2a9299473fd4ba7e4d6e3c341b4fbcb1719a03", "filename": "src/test/ui/const-fn-error.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f90c445637385c2526990119b3f177d809ac5459/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90c445637385c2526990119b3f177d809ac5459/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=f90c445637385c2526990119b3f177d809ac5459", "patch": "@@ -13,22 +13,20 @@ error[E0016]: blocks in constant functions are limited to items and tail express\n    |                   ^\n \n error[E0015]: calls in constant functions are limited to constant functions, struct and enum constructors\n-  --> $DIR/const-fn-error.rs:17:5\n+  --> $DIR/const-fn-error.rs:17:14\n    |\n-17 | /     for i in 0..x { //~ ERROR calls in constant functions\n-18 | |     //~| ERROR constant function contains unimplemented\n-19 | |         sum += i;\n-20 | |     }\n-   | |_____^\n+17 |     for i in 0..x { //~ ERROR calls in constant functions\n+   |              ^^^^\n+   |              |\n+   |              in this macro invocation\n \n error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/const-fn-error.rs:17:5\n+  --> $DIR/const-fn-error.rs:17:14\n    |\n-17 | /     for i in 0..x { //~ ERROR calls in constant functions\n-18 | |     //~| ERROR constant function contains unimplemented\n-19 | |         sum += i;\n-20 | |     }\n-   | |_____^\n+17 |     for i in 0..x { //~ ERROR calls in constant functions\n+   |              ^^^^\n+   |              |\n+   |              in this macro invocation\n \n error[E0080]: constant evaluation error\n   --> $DIR/const-fn-error.rs:21:5"}, {"sha": "78c9ce9a1b12a0967a288c49adedf814eaa50687", "filename": "src/test/ui/issue-33941.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f90c445637385c2526990119b3f177d809ac5459/src%2Ftest%2Fui%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90c445637385c2526990119b3f177d809ac5459/src%2Ftest%2Fui%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-33941.stderr?ref=f90c445637385c2526990119b3f177d809ac5459", "patch": "@@ -8,10 +8,10 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n               found type `&_`\n \n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as std::iter::Iterator>::Item == &_`\n-  --> $DIR/issue-33941.rs:14:5\n+  --> $DIR/issue-33941.rs:14:14\n    |\n 14 |     for _ in HashMap::new().iter().cloned() {} //~ ERROR type mismatch\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n    |\n    = note: expected type `(&_, &_)`\n               found type `&_`"}, {"sha": "7a6dc9a504029fb44b5c7d23d74b92bf31dd0a29", "filename": "src/test/ui/suggestions/for-c-in-str.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f90c445637385c2526990119b3f177d809ac5459/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f90c445637385c2526990119b3f177d809ac5459/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr?ref=f90c445637385c2526990119b3f177d809ac5459", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `&str: std::iter::Iterator` is not satisfied\n-  --> $DIR/for-c-in-str.rs:14:5\n+  --> $DIR/for-c-in-str.rs:14:14\n    |\n 14 |     for c in \"asdf\" {\n-   |     ^^^^^^^^^^^^^^^ `&str` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |              ^^^^^^ `&str` is not an iterator; maybe try calling `.iter()` or a similar method\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `&str`\n    = note: required by `std::iter::IntoIterator::into_iter`"}]}