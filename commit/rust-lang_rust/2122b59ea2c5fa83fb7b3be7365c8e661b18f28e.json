{"sha": "2122b59ea2c5fa83fb7b3be7365c8e661b18f28e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMjJiNTllYTJjNWZhODNmYjdiM2JlNzM2NWM4ZTY2MWIxOGYyOGU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T20:20:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T20:20:57Z"}, "message": "Some work on teaching trans to differentiate between auto-deref and explicit-deref contexts.", "tree": {"sha": "2bba1d336b67ffd7ba28ec923ae018e398f20ac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bba1d336b67ffd7ba28ec923ae018e398f20ac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2122b59ea2c5fa83fb7b3be7365c8e661b18f28e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2122b59ea2c5fa83fb7b3be7365c8e661b18f28e", "html_url": "https://github.com/rust-lang/rust/commit/2122b59ea2c5fa83fb7b3be7365c8e661b18f28e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2122b59ea2c5fa83fb7b3be7365c8e661b18f28e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef61c458fa3b2cf8d8e0619dd890b1023daff846", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef61c458fa3b2cf8d8e0619dd890b1023daff846", "html_url": "https://github.com/rust-lang/rust/commit/ef61c458fa3b2cf8d8e0619dd890b1023daff846"}], "stats": {"total": 125, "additions": 88, "deletions": 37}, "files": [{"sha": "21e5519337e18d6f6a7b033a75bf49988123c51c", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2122b59ea2c5fa83fb7b3be7365c8e661b18f28e/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/2122b59ea2c5fa83fb7b3be7365c8e661b18f28e/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=2122b59ea2c5fa83fb7b3be7365c8e661b18f28e", "patch": "@@ -1065,14 +1065,19 @@ let check_concrete params thing =\n   else bug () \"unhandled parametric binding\"\n ;;\n \n-let rec simplified_ty (t:Ast.ty) : Ast.ty =\n+let rec strip_mutable_or_constrained_ty (t:Ast.ty) : Ast.ty =\n   match t with\n-      Ast.TY_box t\n-    | Ast.TY_mutable t\n-    | Ast.TY_constrained (t, _) -> simplified_ty t\n+      Ast.TY_mutable t\n+    | Ast.TY_constrained (t, _) -> strip_mutable_or_constrained_ty t\n     | _ -> t\n ;;\n \n+let rec simplified_ty (t:Ast.ty) : Ast.ty =\n+  match strip_mutable_or_constrained_ty t with\n+      Ast.TY_box t -> simplified_ty t\n+    | t -> t\n+;;\n+\n let rec project_type\n     (base_ty:Ast.ty)\n     (comp:Ast.lval_component)"}, {"sha": "2f8c9a7f4828375a1d78da9e361ed6e404fe880e", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 73, "deletions": 33, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/2122b59ea2c5fa83fb7b3be7365c8e661b18f28e/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/2122b59ea2c5fa83fb7b3be7365c8e661b18f28e/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=2122b59ea2c5fa83fb7b3be7365c8e661b18f28e", "patch": "@@ -882,6 +882,7 @@ let trans_visitor\n   in\n \n   let rec trans_slot_lval_ext\n+      (initializing:bool)\n       (base_ty:Ast.ty)\n       (cell:Il.cell)\n       (comp:Ast.lval_component)\n@@ -895,6 +896,16 @@ let trans_visitor\n         let elt_mem = trans_bounds_check (deref cell) (Il.Cell idx) in\n           (Il.Mem (elt_mem, referent_type abi ty), ty)\n     in\n+      (* \n+       * All lval components aside from explicit-deref just auto-deref\n+       * through all boxes to find their indexable referent.\n+       *)\n+    let base_ty = strip_mutable_or_constrained_ty base_ty in\n+    let (cell, base_ty) =\n+      if comp = Ast.COMP_deref\n+      then (cell, base_ty)\n+      else deref_ty DEREF_all_boxes initializing cell base_ty\n+    in\n \n     match (base_ty, comp) with\n         (Ast.TY_rec entries,\n@@ -919,6 +930,8 @@ let trans_visitor\n           let (cell, fn_ty) = get_vtbl_entry cell obj_ty id in\n             (cell, (Ast.TY_fn fn_ty))\n \n+      | (Ast.TY_box _, Ast.COMP_deref) ->\n+          deref_ty DEREF_one_box initializing cell base_ty\n \n       | _ -> bug () \"unhandled form of lval_ext in trans_slot_lval_ext\"\n \n@@ -943,6 +956,7 @@ let trans_visitor\n         based elt_reg\n \n   and trans_lval_full\n+      (dctrl:deref_ctrl)\n       (initializing:bool)\n       (lv:Ast.lval)\n       : (Il.cell * Ast.ty) =\n@@ -954,17 +968,14 @@ let trans_visitor\n               let (base_cell, base_ty) =\n                 trans_slot_lval_full initializing base\n               in\n-              let (base_cell, base_ty) =\n-                deref_ty initializing base_cell base_ty\n-              in\n-                trans_slot_lval_ext base_ty base_cell comp\n+                trans_slot_lval_ext initializing base_ty base_cell comp\n \n           | Ast.LVAL_base _ ->\n               let sloti = lval_base_to_slot cx lv in\n               let cell = cell_of_block_slot sloti.id in\n               let ty = slot_ty sloti.node in\n               let cell = deref_slot initializing cell sloti.node in\n-                deref_ty initializing cell ty\n+                deref_ty dctrl initializing cell ty\n       in\n         iflog\n           begin\n@@ -993,7 +1004,7 @@ let trans_visitor\n       (initializing:bool)\n       (lv:Ast.lval)\n       : (Il.cell * Ast.ty) =\n-    trans_lval_full initializing lv\n+    trans_lval_full DEREF_none initializing lv\n \n   and trans_lval_init (lv:Ast.lval) : (Il.cell * Ast.ty) =\n     trans_lval_maybe_init true lv\n@@ -1221,6 +1232,9 @@ let trans_visitor\n       | Ast.LIT_mach (m, n, _) -> imm_of_ty n m\n \n   and trans_atom (atom:Ast.atom) : Il.operand =\n+    trans_atom_full DEREF_all_boxes atom\n+\n+  and trans_atom_full (dctrl:deref_ctrl) (atom:Ast.atom) : Il.operand =\n     iflog\n       begin\n         fun _ ->\n@@ -1230,7 +1244,7 @@ let trans_visitor\n     match atom with\n         Ast.ATOM_lval lv ->\n           let (cell, ty) = trans_lval lv in\n-            Il.Cell (fst (deref_ty false cell ty))\n+            Il.Cell (fst (deref_ty dctrl false cell ty))\n \n       | Ast.ATOM_literal lit -> trans_lit lit.node\n \n@@ -2805,17 +2819,19 @@ let trans_visitor\n       | MEM_interior -> bug () \"init_box of MEM_interior\"\n \n   and deref_ty\n+      (dctrl:deref_ctrl)\n       (initializing:bool)\n       (cell:Il.cell)\n       (ty:Ast.ty)\n       : (Il.cell * Ast.ty) =\n-    match ty with\n+    match (ty, dctrl) with\n \n-      | Ast.TY_mutable ty\n-      | Ast.TY_constrained (ty, _) ->\n-          deref_ty initializing cell ty\n+      | (Ast.TY_mutable ty, _)\n+      | (Ast.TY_constrained (ty, _), _) ->\n+          deref_ty dctrl initializing cell ty\n \n-      | Ast.TY_box ty' ->\n+      | (Ast.TY_box ty', DEREF_one_box)\n+      | (Ast.TY_box ty', DEREF_all_boxes) ->\n           check_box_rty cell;\n           if initializing\n           then init_box cell ty;\n@@ -2824,8 +2840,13 @@ let trans_visitor\n               (deref cell)\n               (Abi.box_rc_slot_field_body)\n           in\n-            (* Init recursively so @@@@T chain works. *)\n-            deref_ty initializing cell ty'\n+          let inner_dctrl =\n+            if dctrl = DEREF_one_box\n+            then DEREF_none\n+            else DEREF_all_boxes\n+          in\n+            (* Possibly deref recursively. *)\n+            deref_ty inner_dctrl initializing cell ty'\n \n       | _ -> (cell, ty)\n \n@@ -2939,18 +2960,30 @@ let trans_visitor\n       (src:Il.cell) (src_ty:Ast.ty)\n       (curr_iso:Ast.ty_iso option)\n       : unit =\n-    assert (simplified_ty src_ty = simplified_ty dst_ty);\n-    iflog (fun _ ->\n-             annotate (\"heavy copy: slot preparation\"));\n+    let src_ty = strip_mutable_or_constrained_ty src_ty in\n+    let dst_ty = strip_mutable_or_constrained_ty dst_ty in\n+    let dst_ty = maybe_iso curr_iso dst_ty in\n+    let src_ty = maybe_iso curr_iso src_ty in\n \n-    let ty = simplified_ty src_ty in\n-    let ty = maybe_iso curr_iso ty in\n-    let curr_iso = maybe_enter_iso ty curr_iso in\n-    let (dst, dst_ty) = deref_ty initializing dst dst_ty in\n-    let (src, src_ty) = deref_ty false src src_ty in\n-      assert (dst_ty = ty);\n-      assert (src_ty = ty);\n-      copy_ty ty_params dst src ty curr_iso\n+      iflog\n+        begin\n+          fun _ ->\n+            log cx \"trans_copy_ty_heavy\";\n+            log cx \"   dst ty %a, src ty %a\"\n+              Ast.sprintf_ty dst_ty Ast.sprintf_ty src_ty;\n+            log cx \"   dst cell %s, src cell %s\"\n+              (cell_str dst) (cell_str src);\n+        end;\n+\n+      assert (src_ty = dst_ty);\n+      iflog (fun _ ->\n+               annotate (\"heavy copy: slot preparation\"));\n+\n+      let curr_iso = maybe_enter_iso dst_ty curr_iso in\n+      let (dst, dst_ty') = deref_ty DEREF_none initializing dst dst_ty in\n+      let (src, _) = deref_ty DEREF_none false src src_ty in\n+        assert (dst_ty' = dst_ty);\n+        copy_ty ty_params dst src dst_ty' curr_iso\n \n   and trans_copy\n       (initializing:bool)\n@@ -3021,7 +3054,7 @@ let trans_visitor\n                   get_forwarding_vtbl caller_obj_ty callee_obj_ty\n                 in\n                 let (caller_obj, _) =\n-                  deref_ty initializing dst_cell dst_ty\n+                  deref_ty DEREF_all_boxes initializing dst_cell dst_ty\n                 in\n                 let caller_vtbl =\n                   get_element_ptr caller_obj Abi.binding_field_item\n@@ -3037,7 +3070,9 @@ let trans_visitor\n              * so copy is just MOV into the lval.\n              *)\n             let src_operand = trans_expr src in\n-              mov (fst (deref_ty false dst_cell dst_ty)) src_operand\n+              mov\n+                (fst (deref_ty DEREF_none false dst_cell dst_ty))\n+                src_operand\n \n         | (_, Ast.EXPR_atom (Ast.ATOM_lval src_lval)) ->\n             if lval_is_direct_fn cx src_lval then\n@@ -3891,7 +3926,7 @@ let trans_visitor\n     let (dst_slot, _) = fo.Ast.for_slot in\n     let dst_cell = cell_of_block_slot dst_slot.id in\n     let (head_stmts, seq) = fo.Ast.for_seq in\n-    let (seq_cell, seq_ty) = trans_lval_full false seq in\n+    let (seq_cell, seq_ty) = trans_lval seq in\n     let unit_ty = seq_unit_ty seq_ty in\n       Array.iter trans_stmt head_stmts;\n       iter_seq_parts ty_params seq_cell seq_cell unit_ty\n@@ -4043,7 +4078,7 @@ let trans_visitor\n         | Ast.TY_vec _ when binop = Ast.BINOP_add ->\n             trans_vec_append dst_cell dst_ty src_oper (atom_type cx a_src)\n         | _ ->\n-            let (dst_cell, _) = deref_ty false dst_cell dst_ty in\n+            let (dst_cell, _) = deref_ty DEREF_none false dst_cell dst_ty in\n             let op = trans_binop binop in\n               emit (Il.binary op dst_cell (Il.Cell dst_cell) src_oper);\n \n@@ -4139,7 +4174,7 @@ let trans_visitor\n                   bugi cx stmt.id\n                     \"non-rec destination type in stmt_init_rec\"\n           in\n-          let (dst_cell, _) = deref_ty true slot_cell ty in\n+          let (dst_cell, _) = deref_ty DEREF_all_boxes true slot_cell ty in\n             begin\n               match base with\n                   None ->\n@@ -4160,7 +4195,7 @@ let trans_visitor\n                   bugi cx stmt.id\n                     \"non-tup destination type in stmt_init_tup\"\n           in\n-          let (dst_cell, _) = deref_ty true slot_cell ty in\n+          let (dst_cell, _) = deref_ty DEREF_all_boxes true slot_cell ty in\n             trans_init_structural_from_atoms dst_cell dst_tys atoms\n \n \n@@ -4187,8 +4222,13 @@ let trans_visitor\n \n       | Ast.STMT_init_box (dst, src) ->\n           let sloti = lval_base_to_slot cx dst in\n-          let cell = cell_of_block_slot sloti.id in\n-            trans_init_slot_from_atom CLONE_none cell sloti.node src\n+          let dst_cell = cell_of_block_slot sloti.id in\n+          let dst_cell = deref_slot true dst_cell sloti.node in\n+          let ty = slot_ty sloti.node in\n+          let (dst_cell, ty) = deref_ty DEREF_one_box true dst_cell ty in\n+          let src_cell = need_cell (trans_atom src) in\n+            trans_copy_ty (get_ty_params_of_current_frame()) true\n+              dst_cell ty src_cell ty None;\n \n       | Ast.STMT_block block ->\n           trans_block block"}, {"sha": "0ec49c8e20fbce6f76bab05e92aba58da20946b9", "filename": "src/boot/me/transutil.ml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2122b59ea2c5fa83fb7b3be7365c8e661b18f28e/src%2Fboot%2Fme%2Ftransutil.ml", "raw_url": "https://github.com/rust-lang/rust/raw/2122b59ea2c5fa83fb7b3be7365c8e661b18f28e/src%2Fboot%2Fme%2Ftransutil.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftransutil.ml?ref=2122b59ea2c5fa83fb7b3be7365c8e661b18f28e", "patch": "@@ -57,6 +57,12 @@ open Semant;;\n  *)\n \n \n+type deref_ctrl =\n+    DEREF_one_box\n+  | DEREF_all_boxes\n+  | DEREF_none\n+;;\n+\n type mem_ctrl =\n     MEM_rc_opaque\n   | MEM_rc_struct"}]}