{"sha": "33026c654e3a667e25ea27004c22be138ed83d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMDI2YzY1NGUzYTY2N2UyNWVhMjcwMDRjMjJiZTEzOGVkODNkMzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-08T11:16:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-08T11:16:05Z"}, "message": "make Docs handing more ideomatic", "tree": {"sha": "5057b8fe11d8722cc9f7ac6f148851069730e2b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5057b8fe11d8722cc9f7ac6f148851069730e2b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33026c654e3a667e25ea27004c22be138ed83d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33026c654e3a667e25ea27004c22be138ed83d33", "html_url": "https://github.com/rust-lang/rust/commit/33026c654e3a667e25ea27004c22be138ed83d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33026c654e3a667e25ea27004c22be138ed83d33/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dc27898959d2330b0822d95a9ee2488e687895a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc27898959d2330b0822d95a9ee2488e687895a", "html_url": "https://github.com/rust-lang/rust/commit/5dc27898959d2330b0822d95a9ee2488e687895a"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "861d6aefe5aa55b0decf9539ccb48760d885ce92", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33026c654e3a667e25ea27004c22be138ed83d33/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33026c654e3a667e25ea27004c22be138ed83d33/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=33026c654e3a667e25ea27004c22be138ed83d33", "patch": "@@ -12,7 +12,6 @@ use crate::{\n     ty::{TraitRef, InferenceResult, primitive::{IntTy, FloatTy, Signedness, IntBitness, FloatBitness}},\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n     generics::HasGenericParams,\n-    docs::{Documentation, Docs, docs_from_ast},\n     ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeAliasId, MacroDefId},\n     impl_block::ImplBlock,\n     resolve::Resolver,"}, {"sha": "38c0922eb0b2f7979baa3f0ed29655894baf308c", "filename": "crates/ra_hir/src/docs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33026c654e3a667e25ea27004c22be138ed83d33/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33026c654e3a667e25ea27004c22be138ed83d33/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=33026c654e3a667e25ea27004c22be138ed83d33", "patch": "@@ -1,24 +1,24 @@\n use ra_syntax::ast;\n \n-use crate::{HirDatabase, Module, StructField, Struct, Enum, EnumVariant, Static, Const, Function, Union};\n+use crate::{HirDatabase, Module, StructField, Struct, Enum, EnumVariant, Static, Const, Function, Union, Trait, TypeAlias, FieldSource};\n \n /// Holds documentation\n #[derive(Debug, Clone)]\n pub struct Documentation(String);\n \n impl Documentation {\n-    pub fn new(s: &str) -> Self {\n-        Self(s.into())\n+    fn new(s: &str) -> Documentation {\n+        Documentation(s.into())\n     }\n \n-    pub fn contents(&self) -> &str {\n+    pub fn as_str(&self) -> &str {\n         &self.0\n     }\n }\n \n impl Into<String> for Documentation {\n     fn into(self) -> String {\n-        self.contents().into()\n+        self.0.clone()\n     }\n }\n "}, {"sha": "25749258958c74b2d9aa136b6a7f9e1bff942477", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33026c654e3a667e25ea27004c22be138ed83d33/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33026c654e3a667e25ea27004c22be138ed83d33/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=33026c654e3a667e25ea27004c22be138ed83d33", "patch": "@@ -171,7 +171,7 @@ impl Conv for ra_ide_api::Documentation {\n     fn conv(self) -> Documentation {\n         Documentation::MarkupContent(MarkupContent {\n             kind: MarkupKind::Markdown,\n-            value: crate::markdown::sanitize_markdown(self).into(),\n+            value: crate::markdown::mark_fenced_blocks_as_rust(self.as_str()).into(),\n         })\n     }\n }"}, {"sha": "e382eee90c9032351a22ee2621f2131cf3e1dd6c", "filename": "crates/ra_lsp_server/src/markdown.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/33026c654e3a667e25ea27004c22be138ed83d33/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33026c654e3a667e25ea27004c22be138ed83d33/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs?ref=33026c654e3a667e25ea27004c22be138ed83d33", "patch": "@@ -1,26 +1,20 @@\n-use ra_ide_api::Documentation;\n-\n-pub(crate) fn sanitize_markdown(docs: Documentation) -> Documentation {\n-    let docs: String = docs.into();\n-\n-    // Massage markdown\n+pub(crate) fn mark_fenced_blocks_as_rust(src: &str) -> String {\n     let mut processed_lines = Vec::new();\n     let mut in_code_block = false;\n-    for line in docs.lines() {\n+    for line in src.lines() {\n         if line.starts_with(\"```\") {\n-            in_code_block = !in_code_block;\n+            in_code_block ^= true\n         }\n \n         let line = if in_code_block && line.starts_with(\"```\") && !line.contains(\"rust\") {\n-            \"```rust\".into()\n+            \"```rust\"\n         } else {\n-            line.to_string()\n+            line\n         };\n \n         processed_lines.push(line);\n     }\n-\n-    Documentation::new(&processed_lines.join(\"\\n\"))\n+    processed_lines.join(\"\\n\")\n }\n \n #[cfg(test)]\n@@ -30,9 +24,6 @@ mod tests {\n     #[test]\n     fn test_codeblock_adds_rust() {\n         let comment = \"```\\nfn some_rust() {}\\n```\";\n-        assert_eq!(\n-            sanitize_markdown(Documentation::new(comment)).contents(),\n-            \"```rust\\nfn some_rust() {}\\n```\"\n-        );\n+        assert_eq!(mark_fenced_blocks_as_rust(comment), \"```rust\\nfn some_rust() {}\\n```\");\n     }\n }"}]}