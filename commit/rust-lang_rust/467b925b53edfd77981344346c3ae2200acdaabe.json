{"sha": "467b925b53edfd77981344346c3ae2200acdaabe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2N2I5MjViNTNlZGZkNzc5ODEzNDQzNDZjM2FlMjIwMGFjZGFhYmU=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-16T01:14:20Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-16T01:41:40Z"}, "message": "vscode: save binary version when downloading and download only version that matches TypeScript extension version", "tree": {"sha": "a728ed031b8b63e63d85f291b21779d6b7512d00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a728ed031b8b63e63d85f291b21779d6b7512d00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/467b925b53edfd77981344346c3ae2200acdaabe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/467b925b53edfd77981344346c3ae2200acdaabe", "html_url": "https://github.com/rust-lang/rust/commit/467b925b53edfd77981344346c3ae2200acdaabe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/467b925b53edfd77981344346c3ae2200acdaabe/comments", "author": null, "committer": null, "parents": [{"sha": "b9188226fabb00de3c5f3706186e96b01c223566", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9188226fabb00de3c5f3706186e96b01c223566", "html_url": "https://github.com/rust-lang/rust/commit/b9188226fabb00de3c5f3706186e96b01c223566"}], "stats": {"total": 168, "additions": 72, "deletions": 96}, "files": [{"sha": "80cb719e3674431ea78394fd8795d4282453b564", "filename": "editors/code/src/installation/server.ts", "status": "modified", "additions": 72, "deletions": 96, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/467b925b53edfd77981344346c3ae2200acdaabe/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/467b925b53edfd77981344346c3ae2200acdaabe/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts?ref=467b925b53edfd77981344346c3ae2200acdaabe", "patch": "@@ -1,63 +1,15 @@\n import * as vscode from \"vscode\";\n import * as path from \"path\";\n import { strict as assert } from \"assert\";\n-import { promises as fs } from \"fs\";\n import { promises as dns } from \"dns\";\n import { spawnSync } from \"child_process\";\n-import { throttle } from \"throttle-debounce\";\n \n import { BinarySource } from \"./interfaces\";\n-import { fetchLatestArtifactReleaseInfo } from \"./fetch_latest_artifact_release_info\";\n-import { downloadFile } from \"./download_file\";\n-\n-export async function downloadLatestServer(\n-    {file: artifactFileName, dir: installationDir, repo}: BinarySource.GithubRelease\n-) {\n-    const { releaseName, downloadUrl } = (await fetchLatestArtifactReleaseInfo(\n-        repo, artifactFileName\n-    ))!;\n-\n-    await fs.mkdir(installationDir).catch(err => assert.strictEqual(\n-        err?.code,\n-        \"EEXIST\",\n-        `Couldn't create directory \"${installationDir}\" to download `+\n-        `language server binary: ${err.message}`\n-    ));\n-\n-    const installationPath = path.join(installationDir, artifactFileName);\n-\n-    console.time(\"Downloading ra_lsp_server\");\n-    await vscode.window.withProgress(\n-        {\n-            location: vscode.ProgressLocation.Notification,\n-            cancellable: false, // FIXME: add support for canceling download?\n-            title: `Downloading language server (${releaseName})`\n-        },\n-        async (progress, _cancellationToken) => {\n-            let lastPrecentage = 0;\n-            const filePermissions = 0o755; // (rwx, r_x, r_x)\n-            await downloadFile(downloadUrl, installationPath, filePermissions, throttle(\n-                200,\n-                /* noTrailing: */ true,\n-                (readBytes, totalBytes) => {\n-                    const newPercentage = (readBytes / totalBytes) * 100;\n-                    progress.report({\n-                        message: newPercentage.toFixed(0) + \"%\",\n-                        increment: newPercentage - lastPrecentage\n-                    });\n-\n-                    lastPrecentage = newPercentage;\n-                })\n-            );\n-        }\n-    );\n-    console.timeEnd(\"Downloading ra_lsp_server\");\n-}\n-export async function ensureServerBinary(\n-    serverSource: null | BinarySource\n-): Promise<null | string> {\n+import { fetchArtifactReleaseInfo } from \"./fetch_artifact_release_info\";\n+import { downloadArtifact } from \"./download_artifact\";\n \n-    if (!serverSource) {\n+export async function ensureServerBinary(source: null | BinarySource): Promise<null | string> {\n+    if (!source) {\n         vscode.window.showErrorMessage(\n             \"Unfortunately we don't ship binaries for your platform yet. \" +\n             \"You need to manually clone rust-analyzer repository and \" +\n@@ -69,80 +21,104 @@ export async function ensureServerBinary(\n         return null;\n     }\n \n-    switch (serverSource.type) {\n+    switch (source.type) {\n         case BinarySource.Type.ExplicitPath: {\n-            if (isBinaryAvailable(serverSource.path)) {\n-                return serverSource.path;\n+            if (isBinaryAvailable(source.path)) {\n+                return source.path;\n             }\n \n             vscode.window.showErrorMessage(\n-                `Unable to run ${serverSource.path} binary. ` +\n+                `Unable to run ${source.path} binary. ` +\n                 `To use the pre-built language server, set \"rust-analyzer.raLspServerPath\" ` +\n                 \"value to `null` or remove it from the settings to use it by default.\"\n             );\n             return null;\n         }\n         case BinarySource.Type.GithubRelease: {\n-            const prebuiltBinaryPath = path.join(serverSource.dir, serverSource.file);\n+            const prebuiltBinaryPath = path.join(source.dir, source.file);\n+\n+            const installedVersion: null | string = getServerVersion(source.storage);\n+            const requiredVersion: string = source.version;\n \n-            if (isBinaryAvailable(prebuiltBinaryPath)) {\n+            console.log(\"Installed version:\", installedVersion, \"required:\", requiredVersion);\n+\n+            if (isBinaryAvailable(prebuiltBinaryPath) && installedVersion == requiredVersion) {\n+                // FIXME: check for new releases and notify the user to update if possible\n                 return prebuiltBinaryPath;\n             }\n \n             const userResponse = await vscode.window.showInformationMessage(\n-                \"Language server binary for rust-analyzer was not found. \" +\n+                `Language server version ${source.version} for rust-analyzer is not installed. ` +\n                 \"Do you want to download it now?\",\n                 \"Download now\", \"Cancel\"\n             );\n             if (userResponse !== \"Download now\") return null;\n \n-            try {\n-                await downloadLatestServer(serverSource);\n-            } catch (err) {\n-                vscode.window.showErrorMessage(\n-                    `Failed to download language server from ${serverSource.repo.name} ` +\n-                    `GitHub repository: ${err.message}`\n-                );\n+            if (!await downloadServer(source)) return null;\n \n-                console.error(err);\n+            return prebuiltBinaryPath;\n+        }\n+    }\n+}\n \n-                dns.resolve('example.com').then(\n-                    addrs => console.log(\"DNS resolution for example.com was successful\", addrs),\n-                    err => {\n-                        console.error(\n-                            \"DNS resolution for example.com failed, \" +\n-                            \"there might be an issue with Internet availability\"\n-                        );\n-                        console.error(err);\n-                    }\n-                );\n+async function downloadServer(source: BinarySource.GithubRelease): Promise<boolean> {\n+    try {\n+        const releaseInfo = (await fetchArtifactReleaseInfo(source.repo, source.file, source.version))!;\n+\n+        await downloadArtifact(releaseInfo, source.file, source.dir, \"language server\");\n+        await setServerVersion(source.storage, releaseInfo.releaseName);\n+    } catch (err) {\n+        vscode.window.showErrorMessage(\n+            `Failed to download language server from ${source.repo.name} ` +\n+            `GitHub repository: ${err.message}`\n+        );\n+\n+        console.error(err);\n \n-                return null;\n+        dns.resolve('example.com').then(\n+            addrs => console.log(\"DNS resolution for example.com was successful\", addrs),\n+            err => {\n+                console.error(\n+                    \"DNS resolution for example.com failed, \" +\n+                    \"there might be an issue with Internet availability\"\n+                );\n+                console.error(err);\n             }\n+        );\n+        return false;\n+    }\n \n-            if (!isBinaryAvailable(prebuiltBinaryPath)) assert(false,\n-                `Downloaded language server binary is not functional.` +\n-                `Downloaded from: ${JSON.stringify(serverSource)}`\n-            );\n+    if (!isBinaryAvailable(path.join(source.dir, source.file))) assert(false,\n+        `Downloaded language server binary is not functional.` +\n+        `Downloaded from: ${JSON.stringify(source, null, 4)}`\n+    );\n \n+    vscode.window.showInformationMessage(\n+        \"Rust analyzer language server was successfully installed \ud83e\udd80\"\n+    );\n \n-            vscode.window.showInformationMessage(\n-                \"Rust analyzer language server was successfully installed \ud83e\udd80\"\n-            );\n+    return true;\n+}\n \n-            return prebuiltBinaryPath;\n-        }\n-    }\n+function isBinaryAvailable(binaryPath: string): boolean {\n+    const res = spawnSync(binaryPath, [\"--version\"]);\n \n-    function isBinaryAvailable(binaryPath: string) {\n-        const res = spawnSync(binaryPath, [\"--version\"]);\n+    // ACHTUNG! `res` type declaration is inherently wrong, see\n+    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/42221\n \n-        // ACHTUNG! `res` type declaration is inherently wrong, see\n-        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/42221\n+    console.log(\"Checked binary availablity via --version\", res);\n+    console.log(binaryPath, \"--version output:\", res.output?.map(String));\n \n-        console.log(\"Checked binary availablity via --version\", res);\n-        console.log(binaryPath, \"--version output:\", res.output?.map(String));\n+    return res.status === 0;\n+}\n \n-        return res.status === 0;\n-    }\n+function getServerVersion(storage: vscode.Memento): null | string {\n+    const version = storage.get<null | string>(\"server-version\", null);\n+    console.log(\"Get server-version:\", version);\n+    return version;\n+}\n+\n+async function setServerVersion(storage: vscode.Memento, version: string): Promise<void> {\n+    console.log(\"Set server-version:\", version);\n+    await storage.update(\"server-version\", version.toString());\n }"}]}