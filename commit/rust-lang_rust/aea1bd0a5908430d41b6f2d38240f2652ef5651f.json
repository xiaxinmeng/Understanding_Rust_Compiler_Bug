{"sha": "aea1bd0a5908430d41b6f2d38240f2652ef5651f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYTFiZDBhNTkwODQzMGQ0MWI2ZjJkMzgyNDBmMjY1MmVmNTY1MWY=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-09-25T19:56:43Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-09-25T19:56:43Z"}, "message": "handle proc-macros as macros instead of functions", "tree": {"sha": "9671097b4f4dd0acf7f64d06959f2da92e8d87e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9671097b4f4dd0acf7f64d06959f2da92e8d87e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aea1bd0a5908430d41b6f2d38240f2652ef5651f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aea1bd0a5908430d41b6f2d38240f2652ef5651f", "html_url": "https://github.com/rust-lang/rust/commit/aea1bd0a5908430d41b6f2d38240f2652ef5651f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aea1bd0a5908430d41b6f2d38240f2652ef5651f/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f49f6e73a8a2dd6ec9f86df9922ccfa2210d9eda", "url": "https://api.github.com/repos/rust-lang/rust/commits/f49f6e73a8a2dd6ec9f86df9922ccfa2210d9eda", "html_url": "https://github.com/rust-lang/rust/commit/f49f6e73a8a2dd6ec9f86df9922ccfa2210d9eda"}], "stats": {"total": 293, "additions": 243, "deletions": 50}, "files": [{"sha": "287637ae0da9d37e0198e4c3a65e3256cffe2faf", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 34, "deletions": 31, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=aea1bd0a5908430d41b6f2d38240f2652ef5651f", "patch": "@@ -105,15 +105,14 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n             record_extern_fqn(cx, did, clean::TypeKind::Const);\n             clean::ConstantItem(build_const(cx, did))\n         }\n-        // FIXME(misdreavus): if attributes/derives come down here we should probably document them\n-        // separately\n-        Def::Macro(did, MacroKind::Bang) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Macro);\n-            if let Some(mac) = build_macro(cx, did, name) {\n-                clean::MacroItem(mac)\n-            } else {\n-                return None;\n+        Def::Macro(did, mac_kind) => {\n+            match mac_kind {\n+                MacroKind::Bang => record_extern_fqn(cx, did, clean::TypeKind::Macro),\n+                MacroKind::Attr => record_extern_fqn(cx, did, clean::TypeKind::Attr),\n+                MacroKind::Derive => record_extern_fqn(cx, did, clean::TypeKind::Derive),\n+                MacroKind::ProcMacroStub => return None,\n             }\n+            build_macro(cx, did, name)\n         }\n         _ => return None,\n     };\n@@ -442,31 +441,35 @@ fn build_static(cx: &DocContext, did: DefId, mutable: bool) -> clean::Static {\n     }\n }\n \n-fn build_macro(cx: &DocContext, did: DefId, name: ast::Name) -> Option<clean::Macro> {\n+fn build_macro(cx: &DocContext, did: DefId, name: ast::Name) -> clean::ItemEnum {\n     let imported_from = cx.tcx.original_crate_name(did.krate);\n-    let def = match cx.cstore.load_macro_untracked(did, cx.sess()) {\n-        LoadedMacro::MacroDef(macro_def) => macro_def,\n-        // FIXME(jseyfried): document proc macro re-exports\n-        LoadedMacro::ProcMacro(..) => return None,\n-    };\n-\n-    let matchers: hir::HirVec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.node {\n-        let tts: Vec<_> = def.stream().into_trees().collect();\n-        tts.chunks(4).map(|arm| arm[0].span()).collect()\n-    } else {\n-        unreachable!()\n-    };\n-\n-    let source = format!(\"macro_rules! {} {{\\n{}}}\",\n-                         name.clean(cx),\n-                         matchers.iter().map(|span| {\n-                             format!(\"    {} => {{ ... }};\\n\", span.to_src(cx))\n-                         }).collect::<String>());\n+    match cx.cstore.load_macro_untracked(did, cx.sess()) {\n+        LoadedMacro::MacroDef(def) => {\n+            let matchers: hir::HirVec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.node {\n+                let tts: Vec<_> = def.stream().into_trees().collect();\n+                tts.chunks(4).map(|arm| arm[0].span()).collect()\n+            } else {\n+                unreachable!()\n+            };\n+\n+            let source = format!(\"macro_rules! {} {{\\n{}}}\",\n+                                 name.clean(cx),\n+                                 matchers.iter().map(|span| {\n+                                     format!(\"    {} => {{ ... }};\\n\", span.to_src(cx))\n+                                 }).collect::<String>());\n+\n+            clean::MacroItem(clean::Macro {\n+                source,\n+                imported_from: Some(imported_from).clean(cx),\n+            })\n+        }\n+        LoadedMacro::ProcMacro(ext) => {\n+            clean::ProcMacroItem(clean::ProcMacro {\n+                kind: ext.kind(),\n+            })\n+        }\n+    }\n \n-    Some(clean::Macro {\n-        source,\n-        imported_from: Some(imported_from).clean(cx),\n-    })\n }\n \n /// A trait's generics clause actually contains all of the predicates for all of"}, {"sha": "244911150043c4682dd4a96d2d161504537fe765", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=aea1bd0a5908430d41b6f2d38240f2652ef5651f", "patch": "@@ -21,6 +21,7 @@ pub use self::Visibility::{Public, Inherited};\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, AttrStyle, Ident};\n use syntax::attr;\n+use syntax::ext::base::MacroKind;\n use syntax::source_map::{dummy_spanned, Spanned};\n use syntax::ptr::P;\n use syntax::symbol::keywords::{self, Keyword};\n@@ -527,6 +528,7 @@ pub enum ItemEnum {\n     /// `type`s from an extern block\n     ForeignTypeItem,\n     MacroItem(Macro),\n+    ProcMacroItem(ProcMacro),\n     PrimitiveItem(PrimitiveType),\n     AssociatedConstItem(Type, Option<String>),\n     AssociatedTypeItem(Vec<GenericBound>, Option<Type>),\n@@ -588,6 +590,7 @@ impl Clean<Item> for doctree::Module {\n         items.extend(self.traits.iter().map(|x| x.clean(cx)));\n         items.extend(self.impls.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.macros.iter().map(|x| x.clean(cx)));\n+        items.extend(self.proc_macros.iter().map(|x| x.clean(cx)));\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n@@ -2189,6 +2192,8 @@ pub enum TypeKind {\n     Typedef,\n     Foreign,\n     Macro,\n+    Attr,\n+    Derive,\n }\n \n pub trait GetDefId {\n@@ -3725,7 +3730,12 @@ pub fn register_def(cx: &DocContext, def: Def) -> DefId {\n         Def::Static(i, _) => (i, TypeKind::Static),\n         Def::Variant(i) => (cx.tcx.parent_def_id(i).expect(\"cannot get parent def id\"),\n                             TypeKind::Enum),\n-        Def::Macro(i, _) => (i, TypeKind::Macro),\n+        Def::Macro(i, mac_kind) => match mac_kind {\n+            MacroKind::Bang => (i, TypeKind::Macro),\n+            MacroKind::Attr => (i, TypeKind::Attr),\n+            MacroKind::Derive => (i, TypeKind::Derive),\n+            MacroKind::ProcMacroStub => unreachable!(),\n+        },\n         Def::SelfTy(Some(def_id), _) => (def_id, TypeKind::Trait),\n         Def::SelfTy(_, Some(impl_def_id)) => {\n             return impl_def_id\n@@ -3780,6 +3790,28 @@ impl Clean<Item> for doctree::Macro {\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct ProcMacro {\n+    pub kind: MacroKind,\n+}\n+\n+impl Clean<Item> for doctree::ProcMacro {\n+    fn clean(&self, cx: &DocContext) -> Item {\n+        Item {\n+            name: Some(self.name.clean(cx)),\n+            attrs: self.attrs.clean(cx),\n+            source: self.whence.clean(cx),\n+            visibility: Some(Public),\n+            stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n+            def_id: cx.tcx.hir.local_def_id(self.id),\n+            inner: ProcMacroItem(ProcMacro {\n+                kind: self.kind,\n+            }),\n+        }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Stability {\n     pub level: stability::StabilityLevel,"}, {"sha": "538e61fcb4d32a1660cec6c8ad0a40bc4f724eb4", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=aea1bd0a5908430d41b6f2d38240f2652ef5651f", "patch": "@@ -15,6 +15,7 @@ pub use self::StructType::*;\n use syntax::ast;\n use syntax::ast::{Name, NodeId};\n use syntax::attr;\n+use syntax::ext::base::MacroKind;\n use syntax::ptr::P;\n use syntax::source_map::Spanned;\n use syntax_pos::{self, Span};\n@@ -46,6 +47,7 @@ pub struct Module {\n     pub impls: Vec<Impl>,\n     pub foreigns: Vec<hir::ForeignMod>,\n     pub macros: Vec<Macro>,\n+    pub proc_macros: Vec<ProcMacro>,\n     pub is_crate: bool,\n }\n \n@@ -75,6 +77,7 @@ impl Module {\n             impls      : Vec::new(),\n             foreigns   : Vec::new(),\n             macros     : Vec::new(),\n+            proc_macros: Vec::new(),\n             is_crate   : false,\n         }\n     }\n@@ -264,6 +267,16 @@ pub struct Import {\n     pub whence: Span,\n }\n \n+pub struct ProcMacro {\n+    pub name: Name,\n+    pub id: NodeId,\n+    pub kind: MacroKind,\n+    pub attrs: hir::HirVec<ast::Attribute>,\n+    pub whence: Span,\n+    pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n+}\n+\n pub fn struct_type_from_def(vdata: &hir::VariantData) -> StructType {\n     match *vdata {\n         hir::VariantData::Struct(..) => Plain,"}, {"sha": "acb8f6a66dfcb42ff3d87c4fdb52ca4186dfac0d", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=aea1bd0a5908430d41b6f2d38240f2652ef5651f", "patch": "@@ -11,6 +11,7 @@\n //! Item types.\n \n use std::fmt;\n+use syntax::ext::base::MacroKind;\n use clean;\n \n /// Item type. Corresponds to `clean::ItemEnum` variants.\n@@ -19,6 +20,11 @@ use clean;\n /// discriminants. JavaScript then is used to decode them into the original value.\n /// Consequently, every change to this type should be synchronized to\n /// the `itemTypes` mapping table in `static/main.js`.\n+///\n+/// In addition, code in `html::render` uses this enum to generate CSS classes, page prefixes, and\n+/// module headings. If you are adding to this enum and want to ensure that the sidebar also prints\n+/// a heading, edit the listing in `html/render.rs`, function `sidebar_module`. This uses an\n+/// ordering based on a helper function inside `item_module`, in the same file.\n #[derive(Copy, PartialEq, Clone, Debug)]\n pub enum ItemType {\n     Module          = 0,\n@@ -44,6 +50,8 @@ pub enum ItemType {\n     ForeignType     = 20,\n     Keyword         = 21,\n     Existential     = 22,\n+    ProcAttribute   = 23,\n+    ProcDerive      = 24,\n }\n \n \n@@ -88,6 +96,12 @@ impl<'a> From<&'a clean::Item> for ItemType {\n             clean::AssociatedTypeItem(..)  => ItemType::AssociatedType,\n             clean::ForeignTypeItem         => ItemType::ForeignType,\n             clean::KeywordItem(..)         => ItemType::Keyword,\n+            clean::ProcMacroItem(ref mac)  => match mac.kind {\n+                MacroKind::Bang            => ItemType::Macro,\n+                MacroKind::Attr            => ItemType::ProcAttribute,\n+                MacroKind::Derive          => ItemType::ProcDerive,\n+                MacroKind::ProcMacroStub   => unreachable!(),\n+            }\n             clean::StrippedItem(..)        => unreachable!(),\n         }\n     }\n@@ -107,7 +121,9 @@ impl From<clean::TypeKind> for ItemType {\n             clean::TypeKind::Variant  => ItemType::Variant,\n             clean::TypeKind::Typedef  => ItemType::Typedef,\n             clean::TypeKind::Foreign  => ItemType::ForeignType,\n-            clean::TypeKind::Macro  => ItemType::Macro,\n+            clean::TypeKind::Macro    => ItemType::Macro,\n+            clean::TypeKind::Attr     => ItemType::ProcAttribute,\n+            clean::TypeKind::Derive   => ItemType::ProcDerive,\n         }\n     }\n }\n@@ -138,6 +154,8 @@ impl ItemType {\n             ItemType::ForeignType     => \"foreigntype\",\n             ItemType::Keyword         => \"keyword\",\n             ItemType::Existential     => \"existential\",\n+            ItemType::ProcAttribute   => \"attr\",\n+            ItemType::ProcDerive      => \"derive\",\n         }\n     }\n \n@@ -166,7 +184,9 @@ impl ItemType {\n             ItemType::Constant |\n             ItemType::AssociatedConst => NameSpace::Value,\n \n-            ItemType::Macro => NameSpace::Macro,\n+            ItemType::Macro |\n+            ItemType::ProcAttribute |\n+            ItemType::ProcDerive => NameSpace::Macro,\n \n             ItemType::Keyword => NameSpace::Keyword,\n         }"}, {"sha": "dc3255d2e528a88c45bd0e494d028a9f70f7177f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=aea1bd0a5908430d41b6f2d38240f2652ef5651f", "patch": "@@ -56,6 +56,7 @@ use externalfiles::ExternalHtml;\n \n use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n+use syntax::ext::base::MacroKind;\n use syntax::source_map::FileName;\n use syntax::feature_gate::UnstableFeatures;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId};\n@@ -2155,6 +2156,12 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::EnumItem(..) => write!(fmt, \"Enum \")?,\n             clean::TypedefItem(..) => write!(fmt, \"Type Definition \")?,\n             clean::MacroItem(..) => write!(fmt, \"Macro \")?,\n+            clean::ProcMacroItem(ref mac) => match mac.kind {\n+                MacroKind::Bang => write!(fmt, \"Macro \")?,\n+                MacroKind::Attr => write!(fmt, \"Attribute Macro \")?,\n+                MacroKind::Derive => write!(fmt, \"Derive Macro \")?,\n+                MacroKind::ProcMacroStub => unreachable!(),\n+            }\n             clean::PrimitiveItem(..) => write!(fmt, \"Primitive Type \")?,\n             clean::StaticItem(..) | clean::ForeignStaticItem(..) => write!(fmt, \"Static \")?,\n             clean::ConstantItem(..) => write!(fmt, \"Constant \")?,\n@@ -2191,6 +2198,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::EnumItem(ref e) => item_enum(fmt, self.cx, self.item, e),\n             clean::TypedefItem(ref t, _) => item_typedef(fmt, self.cx, self.item, t),\n             clean::MacroItem(ref m) => item_macro(fmt, self.cx, self.item, m),\n+            clean::ProcMacroItem(ref m) => item_proc_macro(fmt, self.cx, self.item, m),\n             clean::PrimitiveItem(ref p) => item_primitive(fmt, self.cx, self.item, p),\n             clean::StaticItem(ref i) | clean::ForeignStaticItem(ref i) =>\n                 item_static(fmt, self.cx, self.item, i),\n@@ -4523,6 +4531,8 @@ fn item_ty_to_strs(ty: &ItemType) -> (&'static str, &'static str) {\n         ItemType::ForeignType     => (\"foreign-types\", \"Foreign Types\"),\n         ItemType::Keyword         => (\"keywords\", \"Keywords\"),\n         ItemType::Existential     => (\"existentials\", \"Existentials\"),\n+        ItemType::ProcAttribute   => (\"attributes\", \"Attribute Macros\"),\n+        ItemType::ProcDerive      => (\"derives\", \"Derive Macros\"),\n     }\n }\n \n@@ -4598,6 +4608,17 @@ fn item_macro(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     document(w, cx, it)\n }\n \n+fn item_proc_macro(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item, m: &clean::ProcMacro)\n+    -> fmt::Result\n+{\n+    if m.kind == MacroKind::Bang {\n+        write!(w, \"<pre class='rust macro'>\")?;\n+        write!(w, \"{}!() {{ /* proc-macro */ }}\", it.name.as_ref().unwrap())?;\n+        write!(w, \"</pre>\")?;\n+    }\n+    document(w, cx, it)\n+}\n+\n fn item_primitive(w: &mut fmt::Formatter, cx: &Context,\n                   it: &clean::Item,\n                   _p: &clean::PrimitiveType) -> fmt::Result {"}, {"sha": "f81391ecefe3983be23163924a36d856bcd61b34", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=aea1bd0a5908430d41b6f2d38240f2652ef5651f", "patch": "@@ -39,7 +39,10 @@\n                      \"associatedconstant\",\n                      \"union\",\n                      \"foreigntype\",\n-                     \"keyword\"];\n+                     \"keyword\",\n+                     \"existential\",\n+                     \"attr\",\n+                     \"derive\"];\n \n     var search_input = document.getElementsByClassName('search-input')[0];\n "}, {"sha": "34a1d71beecfcdf863f5fdc29b89549b9c7fadaf", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=aea1bd0a5908430d41b6f2d38240f2652ef5651f", "patch": "@@ -124,6 +124,8 @@ pre {\n .content .highlighted.tymethod { background-color: #4950ed; }\n .content .highlighted.type { background-color: #38902c; }\n .content .highlighted.foreigntype { background-color: #b200d6; }\n+.content .highlighted.attr,\n+.content .highlighted.derive,\n .content .highlighted.macro { background-color: #217d1c; }\n .content .highlighted.constant,\n .content .highlighted.static { background-color: #0063cc; }\n@@ -134,6 +136,8 @@ pre {\n .content span.struct, .content a.struct, .block a.current.struct { color: #2dbfb8; }\n .content span.type, .content a.type, .block a.current.type { color: #ff7f00; }\n .content span.foreigntype, .content a.foreigntype, .block a.current.foreigntype { color: #dd7de8; }\n+.content span.attr, .content a.attr, .block a.current.attr,\n+.content span.derive, .content a.derive, .block a.current.derive,\n .content span.macro, .content a.macro, .block a.current.macro { color: #09bd00; }\n .content span.union, .content a.union, .block a.current.union { color: #a6ae37; }\n .content span.constant, .content a.constant, .block a.current.constant,"}, {"sha": "8218b1b371ea72fcba87a0e3fb2205ef90c34355", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=aea1bd0a5908430d41b6f2d38240f2652ef5651f", "patch": "@@ -124,6 +124,8 @@ pre {\n .content .highlighted.tymethod { background-color: #c6afb3; }\n .content .highlighted.type { background-color: #ffc891; }\n .content .highlighted.foreigntype { background-color: #f5c4ff; }\n+.content .highlighted.attr,\n+.content .highlighted.derive,\n .content .highlighted.macro { background-color: #8ce488; }\n .content .highlighted.constant,\n .content .highlighted.static { background-color: #c3e0ff; }\n@@ -134,6 +136,8 @@ pre {\n .content span.struct, .content a.struct, .block a.current.struct { color: #ad448e; }\n .content span.type, .content a.type, .block a.current.type { color: #ba5d00; }\n .content span.foreigntype, .content a.foreigntype, .block a.current.foreigntype { color: #cd00e2; }\n+.content span.attr, .content a.attr, .block a.current.attr,\n+.content span.derive, .content a.derive, .block a.current.derive,\n .content span.macro, .content a.macro, .block a.current.macro { color: #068000; }\n .content span.union, .content a.union, .block a.current.union { color: #767b27; }\n .content span.constant, .content a.constant, .block a.current.constant,"}, {"sha": "d00eb3257d43c6a5aacb537390c24361fcceb10d", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=aea1bd0a5908430d41b6f2d38240f2652ef5651f", "patch": "@@ -249,6 +249,9 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             // tymethods/macros have no control over privacy\n             clean::MacroItem(..) | clean::TyMethodItem(..) => {}\n \n+            // Proc-macros are always public\n+            clean::ProcMacroItem(..) => {}\n+\n             // Primitives are never stripped\n             clean::PrimitiveItem(..) => {}\n "}, {"sha": "dbe25c5ff8a49f67426b35a51fc1fcdb9e5bd768", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 51, "deletions": 15, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=aea1bd0a5908430d41b6f2d38240f2652ef5651f", "patch": "@@ -15,6 +15,7 @@ use std::mem;\n \n use syntax::ast;\n use syntax::attr;\n+use syntax::ext::base::MacroKind;\n use syntax::source_map::Spanned;\n use syntax_pos::{self, Span};\n \n@@ -168,24 +169,59 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n         }\n     }\n \n-    pub fn visit_fn(&mut self, item: &hir::Item,\n+    pub fn visit_fn(&mut self, om: &mut Module, item: &hir::Item,\n                     name: ast::Name, fd: &hir::FnDecl,\n                     header: hir::FnHeader,\n                     gen: &hir::Generics,\n-                    body: hir::BodyId) -> Function {\n+                    body: hir::BodyId) {\n         debug!(\"Visiting fn\");\n-        Function {\n-            id: item.id,\n-            vis: item.vis.clone(),\n-            stab: self.stability(item.id),\n-            depr: self.deprecation(item.id),\n-            attrs: item.attrs.clone(),\n-            decl: fd.clone(),\n-            name,\n-            whence: item.span,\n-            generics: gen.clone(),\n-            header,\n-            body,\n+        let macro_kind = item.attrs.iter().filter_map(|a| {\n+            if a.check_name(\"proc_macro\") {\n+                Some(MacroKind::Bang)\n+            } else if a.check_name(\"proc_macro_derive\") {\n+                Some(MacroKind::Derive)\n+            } else if a.check_name(\"proc_macro_attribute\") {\n+                Some(MacroKind::Attr)\n+            } else {\n+                None\n+            }\n+        }).next();\n+        match macro_kind {\n+            Some(kind) => {\n+                let name = if kind == MacroKind::Derive {\n+                    item.attrs.lists(\"proc_macro_derive\")\n+                              .filter_map(|mi| mi.name())\n+                              .next()\n+                              .expect(\"proc-macro derives require a name\")\n+                } else {\n+                    name\n+                };\n+\n+                om.proc_macros.push(ProcMacro {\n+                    name,\n+                    id: item.id,\n+                    kind,\n+                    attrs: item.attrs.clone(),\n+                    whence: item.span,\n+                    stab: self.stability(item.id),\n+                    depr: self.deprecation(item.id),\n+                });\n+            }\n+            None => {\n+                om.fns.push(Function {\n+                    id: item.id,\n+                    vis: item.vis.clone(),\n+                    stab: self.stability(item.id),\n+                    depr: self.deprecation(item.id),\n+                    attrs: item.attrs.clone(),\n+                    decl: fd.clone(),\n+                    name,\n+                    whence: item.span,\n+                    generics: gen.clone(),\n+                    header,\n+                    body,\n+                });\n+            }\n         }\n     }\n \n@@ -425,7 +461,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n             hir::ItemKind::Union(ref sd, ref gen) =>\n                 om.unions.push(self.visit_union_data(item, name, sd, gen)),\n             hir::ItemKind::Fn(ref fd, header, ref gen, body) =>\n-                om.fns.push(self.visit_fn(item, name, &**fd, header, gen, body)),\n+                self.visit_fn(om, item, name, &**fd, header, gen, body),\n             hir::ItemKind::Ty(ref ty, ref gen) => {\n                 let t = Typedef {\n                     ty: ty.clone(),"}, {"sha": "cdf2783aec7492943da05308d3acdce61cc09c63", "filename": "src/test/rustdoc/proc-macro.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Ftest%2Frustdoc%2Fproc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea1bd0a5908430d41b6f2d38240f2652ef5651f/src%2Ftest%2Frustdoc%2Fproc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fproc-macro.rs?ref=aea1bd0a5908430d41b6f2d38240f2652ef5651f", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-stage1\n+\n+#![crate_type=\"proc-macro\"]\n+#![crate_name=\"some_macros\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+// @has some_macros/index.html\n+// @has - '//h2' 'Macros'\n+// @has - '//h2' 'Attribute Macros'\n+// @has - '//h2' 'Derive Macros'\n+// @!has - '//h2' 'Functions'\n+\n+// @has some_macros/index.html '//a/@href' 'macro.some_proc_macro.html'\n+// @!has - '//a/@href' 'fn.some_proc_macro.html'\n+// @has some_macros/macro.some_proc_macro.html\n+// @!has some_macros/fn.some_proc_macro.html\n+/// a proc-macro that swallows its input and does nothing.\n+#[proc_macro]\n+pub fn some_proc_macro(_input: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}\n+\n+// @has some_macros/index.html '//a/@href' 'attr.some_proc_attr.html'\n+// @!has - '//a/@href' 'fn.some_proc_attr.html'\n+// @has some_macros/attr.some_proc_attr.html\n+// @!has some_macros/fn.some_proc_attr.html\n+/// a proc-macro attribute that passes its item through verbatim.\n+#[proc_macro_attribute]\n+pub fn some_proc_attr(_attr: TokenStream, item: TokenStream) -> TokenStream {\n+    item\n+}\n+\n+// @has some_macros/index.html '//a/@href' 'derive.SomeDerive.html'\n+// @!has - '//a/@href' 'fn.some_derive.html'\n+// @has some_macros/derive.SomeDerive.html\n+// @!has some_macros/fn.some_derive.html\n+/// a derive attribute that adds nothing to its input.\n+#[proc_macro_derive(SomeDerive)]\n+pub fn some_derive(_item: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}"}]}