{"sha": "774207741933465722a79b212afabd76829c3f07", "node_id": "C_kwDOAAsO6NoAKDc3NDIwNzc0MTkzMzQ2NTcyMmE3OWIyMTJhZmFiZDc2ODI5YzNmMDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T10:19:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T10:19:32Z"}, "message": "Auto merge of #13552 - Veykril:flycheck-process-group, r=Veykril\n\ninternal: Use a process group for flycheck\n\nShould fix https://github.com/rust-lang/rust-analyzer/issues/13348", "tree": {"sha": "90cc1ae482577ff24ede170677b0f70be116ddd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90cc1ae482577ff24ede170677b0f70be116ddd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774207741933465722a79b212afabd76829c3f07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774207741933465722a79b212afabd76829c3f07", "html_url": "https://github.com/rust-lang/rust/commit/774207741933465722a79b212afabd76829c3f07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774207741933465722a79b212afabd76829c3f07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03c1c87d4ca2d524646316387d47b12524ac451", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03c1c87d4ca2d524646316387d47b12524ac451", "html_url": "https://github.com/rust-lang/rust/commit/d03c1c87d4ca2d524646316387d47b12524ac451"}, {"sha": "1dcc25a70afdc484081c0fc5cda1f8911d6660b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dcc25a70afdc484081c0fc5cda1f8911d6660b8", "html_url": "https://github.com/rust-lang/rust/commit/1dcc25a70afdc484081c0fc5cda1f8911d6660b8"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "c04906c4538322a986676a04e6c88d34bd682aed", "filename": "Cargo.lock", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/774207741933465722a79b212afabd76829c3f07/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/774207741933465722a79b212afabd76829c3f07/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=774207741933465722a79b212afabd76829c3f07", "patch": "@@ -221,6 +221,16 @@ dependencies = [\n  \"tracing\",\n ]\n \n+[[package]]\n+name = \"command-group\"\n+version = \"1.0.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f7a8a86f409b4a59df3a3e4bee2de0b83f1755fdd2a25e3a9684c396fc4bed2c\"\n+dependencies = [\n+ \"nix\",\n+ \"winapi\",\n+]\n+\n [[package]]\n name = \"countme\"\n version = \"3.0.1\"\n@@ -390,6 +400,7 @@ name = \"flycheck\"\n version = \"0.0.0\"\n dependencies = [\n  \"cargo_metadata\",\n+ \"command-group\",\n  \"crossbeam-channel\",\n  \"jod-thread\",\n  \"paths\",\n@@ -970,6 +981,19 @@ dependencies = [\n  \"windows-sys 0.28.0\",\n ]\n \n+[[package]]\n+name = \"nix\"\n+version = \"0.22.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e4916f159ed8e5de0082076562152a76b7a1f64a01fd9d1e0fea002c37624faf\"\n+dependencies = [\n+ \"bitflags\",\n+ \"cc\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"memoffset\",\n+]\n+\n [[package]]\n name = \"notify\"\n version = \"5.0.0\""}, {"sha": "6871f90015fedcac7dfc39cc7631d61e856660c4", "filename": "crates/flycheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/774207741933465722a79b212afabd76829c3f07/crates%2Fflycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/774207741933465722a79b212afabd76829c3f07/crates%2Fflycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2FCargo.toml?ref=774207741933465722a79b212afabd76829c3f07", "patch": "@@ -17,6 +17,7 @@ rustc-hash = \"1.1.0\"\n serde = { version = \"1.0.137\", features = [\"derive\"] }\n serde_json = \"1.0.86\"\n jod-thread = \"0.1.2\"\n+command-group = \"1.0.8\"\n \n toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "1758c9c27a24c89efe0ceb39776c24465348c896", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/774207741933465722a79b212afabd76829c3f07/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774207741933465722a79b212afabd76829c3f07/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=774207741933465722a79b212afabd76829c3f07", "patch": "@@ -10,11 +10,12 @@ use std::{\n     time::Duration,\n };\n \n+use command_group::{CommandGroup, GroupChild};\n use crossbeam_channel::{never, select, unbounded, Receiver, Sender};\n use paths::AbsPathBuf;\n use rustc_hash::FxHashMap;\n use serde::Deserialize;\n-use stdx::{process::streaming_output, JodChild};\n+use stdx::process::streaming_output;\n \n pub use cargo_metadata::diagnostic::{\n     Applicability, Diagnostic, DiagnosticCode, DiagnosticLevel, DiagnosticSpan,\n@@ -359,6 +360,8 @@ impl FlycheckActor {\n     }\n }\n \n+struct JodChild(GroupChild);\n+\n /// A handle to a cargo process used for fly-checking.\n struct CargoHandle {\n     /// The handle to the actual cargo process. As we cannot cancel directly from with\n@@ -371,10 +374,10 @@ struct CargoHandle {\n impl CargoHandle {\n     fn spawn(mut command: Command) -> std::io::Result<CargoHandle> {\n         command.stdout(Stdio::piped()).stderr(Stdio::piped()).stdin(Stdio::null());\n-        let mut child = JodChild::spawn(command)?;\n+        let mut child = command.group_spawn().map(JodChild)?;\n \n-        let stdout = child.stdout.take().unwrap();\n-        let stderr = child.stderr.take().unwrap();\n+        let stdout = child.0.inner().stdout.take().unwrap();\n+        let stderr = child.0.inner().stderr.take().unwrap();\n \n         let (sender, receiver) = unbounded();\n         let actor = CargoActor::new(sender, stdout, stderr);\n@@ -386,13 +389,13 @@ impl CargoHandle {\n     }\n \n     fn cancel(mut self) {\n-        let _ = self.child.kill();\n-        let _ = self.child.wait();\n+        let _ = self.child.0.kill();\n+        let _ = self.child.0.wait();\n     }\n \n     fn join(mut self) -> io::Result<()> {\n-        let _ = self.child.kill();\n-        let exit_status = self.child.wait()?;\n+        let _ = self.child.0.kill();\n+        let exit_status = self.child.0.wait()?;\n         let (read_at_least_one_message, error) = self.thread.join()?;\n         if read_at_least_one_message || exit_status.success() {\n             Ok(())"}]}