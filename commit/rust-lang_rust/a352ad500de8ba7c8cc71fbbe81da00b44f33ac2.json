{"sha": "a352ad500de8ba7c8cc71fbbe81da00b44f33ac2", "node_id": "C_kwDOAAsO6NoAKGEzNTJhZDUwMGRlOGJhN2M4Y2M3MWZiYmU4MWRhMDBiNDRmMzNhYzI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-30T12:33:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-30T12:33:53Z"}, "message": "Rollup merge of #97545 - thomcc:sip-comment-safety, r=Dylan-DPC\n\nReword safety comments in core/hash/sip.rs\n\nIn https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Is.20there.20any.20way.20to.20soundly.20do.20a.20masked.20out-of-bounds.20read.3F/near/284329248 it came up that this is using an atypical (and somewhat vague) phrasing of the safety requirement, so this slightly rewords it.", "tree": {"sha": "c8e4e2efff7a17da6b37701f8c06718c168078d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8e4e2efff7a17da6b37701f8c06718c168078d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a352ad500de8ba7c8cc71fbbe81da00b44f33ac2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJilLmxCRBK7hj4Ov3rIwAA2lwIAEj0C+HeAztabnzGoxTYMPzL\nCa4920ieoitLRmnNg8sikyebjzaOYqOdm6p4FHwo5WuTTtC30dLlpdFq1aLeyeop\nB8MACCvNFaKKs7tGQ6ExIsz7zSJVibcLa1imorpmBzCKs78RuTWMUfzWYjzZQ6W/\nbrg+lO/RxJygJlyOrwiXgrNUt45Afxzy55oJv15ZZUia1kriiC+7a7D9L5M0AZQY\nTCcXpwSFPyQXy4xwwJIw/pmAxpU4l87ZLqb9op5hZe8+VjfvdHmbTPhObyA3Av9Z\nsKJefqxvEmA0reWmEd2S78ZS/KhY0DvogIAN//tKELDYMKydyLcKDIXON9ot480=\n=mv9C\n-----END PGP SIGNATURE-----\n", "payload": "tree c8e4e2efff7a17da6b37701f8c06718c168078d8\nparent 65bdfe3b41c862dd9413c49dfba884c6622897ab\nparent eeacb4403ca90b35443656a796ee53d29f3a25f1\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653914033 +0200\ncommitter GitHub <noreply@github.com> 1653914033 +0200\n\nRollup merge of #97545 - thomcc:sip-comment-safety, r=Dylan-DPC\n\nReword safety comments in core/hash/sip.rs\n\nIn https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Is.20there.20any.20way.20to.20soundly.20do.20a.20masked.20out-of-bounds.20read.3F/near/284329248 it came up that this is using an atypical (and somewhat vague) phrasing of the safety requirement, so this slightly rewords it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a352ad500de8ba7c8cc71fbbe81da00b44f33ac2", "html_url": "https://github.com/rust-lang/rust/commit/a352ad500de8ba7c8cc71fbbe81da00b44f33ac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a352ad500de8ba7c8cc71fbbe81da00b44f33ac2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65bdfe3b41c862dd9413c49dfba884c6622897ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/65bdfe3b41c862dd9413c49dfba884c6622897ab", "html_url": "https://github.com/rust-lang/rust/commit/65bdfe3b41c862dd9413c49dfba884c6622897ab"}, {"sha": "eeacb4403ca90b35443656a796ee53d29f3a25f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeacb4403ca90b35443656a796ee53d29f3a25f1", "html_url": "https://github.com/rust-lang/rust/commit/eeacb4403ca90b35443656a796ee53d29f3a25f1"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "97e32ca77db82d1d71b6e526688eeefc9f6ab82e", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a352ad500de8ba7c8cc71fbbe81da00b44f33ac2/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a352ad500de8ba7c8cc71fbbe81da00b44f33ac2/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=a352ad500de8ba7c8cc71fbbe81da00b44f33ac2", "patch": "@@ -96,7 +96,8 @@ macro_rules! compress {\n /// `copy_nonoverlapping` to let the compiler generate the most efficient way\n /// to load it from a possibly unaligned address.\n ///\n-/// Unsafe because: unchecked indexing at i..i+size_of(int_ty)\n+/// Safety: this performs unchecked indexing of `$buf` at\n+/// `$i..$i+size_of::<$int_ty>()`, so that must be in-bounds.\n macro_rules! load_int_le {\n     ($buf:expr, $i:expr, $int_ty:ident) => {{\n         debug_assert!($i + mem::size_of::<$int_ty>() <= $buf.len());\n@@ -114,7 +115,8 @@ macro_rules! load_int_le {\n /// `copy_nonoverlapping` calls that occur (via `load_int_le!`) all have fixed\n /// sizes and avoid calling `memcpy`, which is good for speed.\n ///\n-/// Unsafe because: unchecked indexing at start..start+len\n+/// Safety: this performs unchecked indexing of `buf` at `start..start+len`, so\n+/// that must be in-bounds.\n #[inline]\n unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\n     debug_assert!(len < 8);"}]}