{"sha": "026447b9b0816bfc92d8072145a7a330ec8e3298", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjQ0N2I5YjA4MTZiZmM5MmQ4MDcyMTQ1YTdhMzMwZWM4ZTMyOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-12T06:25:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-12T06:25:03Z"}, "message": "Auto merge of #65322 - tmandry:rollup-frr651r, r=tmandry\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #64337 (libstd: Fix typos in doc)\n - #64986 (Function pointers as const generic arguments)\n - #65048 (Added doc about behavior of extend on HashMap)\n - #65191 (Add some regression tests)\n - #65200 (Add ?Sized bound to a supertrait listing in E0038 error documentation)\n - #65205 (Add long error explanation for E0568)\n - #65220 (Update LLVM for Emscripten exception handling support)\n - #65263 (Deduplicate is_{freeze,copy,sized}_raw)\n - #65266 (Mark Path::join as must_use)\n - #65276 (Don't cc rust-lang/compiler for toolstate changes)\n - #65277 (Query generator kind for error reporting)\n - #65283 (stability: Do not use `buffer_lint` after lowering to HIR)\n - #65289 (Fix suggested bound addition diagnostic)\n - #65310 (deriving: avoid dummy Span on an artificial `type_ident` path)\n - #65321 (Remove painful test that is not pulling its weight)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7fa43524b232aa5c042f07acebbc849d712ec797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fa43524b232aa5c042f07acebbc849d712ec797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/026447b9b0816bfc92d8072145a7a330ec8e3298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/026447b9b0816bfc92d8072145a7a330ec8e3298", "html_url": "https://github.com/rust-lang/rust/commit/026447b9b0816bfc92d8072145a7a330ec8e3298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/026447b9b0816bfc92d8072145a7a330ec8e3298/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b42e919d640f7c714a7e87c91b4f3a9089552d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b42e919d640f7c714a7e87c91b4f3a9089552d0", "html_url": "https://github.com/rust-lang/rust/commit/4b42e919d640f7c714a7e87c91b4f3a9089552d0"}, {"sha": "b93203ff07f771b44f5db2188e8421afdbea9a03", "url": "https://api.github.com/repos/rust-lang/rust/commits/b93203ff07f771b44f5db2188e8421afdbea9a03", "html_url": "https://github.com/rust-lang/rust/commit/b93203ff07f771b44f5db2188e8421afdbea9a03"}], "stats": {"total": 1012, "additions": 731, "deletions": 281}, "files": [{"sha": "50b6ef57b550cf1f1b0a0a2f3c55f3e0d9eb51f3", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -259,8 +259,8 @@ trait Foo {\n This is similar to the second sub-error, but subtler. It happens in situations\n like the following:\n \n-```compile_fail\n-trait Super<A> {}\n+```compile_fail,E0038\n+trait Super<A: ?Sized> {}\n \n trait Trait: Super<Self> {\n }\n@@ -270,17 +270,21 @@ struct Foo;\n impl Super<Foo> for Foo{}\n \n impl Trait for Foo {}\n+\n+fn main() {\n+    let x: Box<dyn Trait>;\n+}\n ```\n \n Here, the supertrait might have methods as follows:\n \n ```\n-trait Super<A> {\n-    fn get_a(&self) -> A; // note that this is object safe!\n+trait Super<A: ?Sized> {\n+    fn get_a(&self) -> &A; // note that this is object safe!\n }\n ```\n \n-If the trait `Foo` was deriving from something like `Super<String>` or\n+If the trait `Trait` was deriving from something like `Super<String>` or\n `Super<T>` (where `Foo` itself is `Foo<T>`), this is okay, because given a type\n `get_a()` will definitely return an object of that type.\n "}, {"sha": "7350f89018be2e1b9c214d8419f2aca3b00f98f1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -1366,6 +1366,10 @@ impl Body {\n             hir_id: self.value.hir_id,\n         }\n     }\n+\n+    pub fn generator_kind(&self) -> Option<GeneratorKind> {\n+        self.generator_kind\n+    }\n }\n \n /// The type of source expression that caused this generator to be created."}, {"sha": "302c11f309d90b21608d8fa6eaef81eb549f94de", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -485,7 +485,13 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n pub fn report_unstable(\n-    sess: &Session, feature: Symbol, reason: Option<Symbol>, issue: u32, is_soft: bool, span: Span\n+    sess: &Session,\n+    feature: Symbol,\n+    reason: Option<Symbol>,\n+    issue: u32,\n+    is_soft: bool,\n+    span: Span,\n+    soft_handler: impl FnOnce(&'static lint::Lint, Span, &str),\n ) {\n     let msg = match reason {\n         Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n@@ -511,7 +517,7 @@ pub fn report_unstable(\n     let fresh = sess.one_time_diagnostics.borrow_mut().insert(error_id);\n     if fresh {\n         if is_soft {\n-            sess.buffer_lint(lint::builtin::SOFT_UNSTABLE, CRATE_NODE_ID, span, &msg);\n+            soft_handler(lint::builtin::SOFT_UNSTABLE, span, &msg)\n         } else {\n             emit_feature_err(\n                 &sess.parse_sess, feature, span, GateIssue::Library(Some(issue)), &msg\n@@ -779,10 +785,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Additionally, this function will also check if the item is deprecated. If so, and `id` is\n     /// not `None`, a deprecated lint attached to `id` will be emitted.\n     pub fn check_stability(self, def_id: DefId, id: Option<HirId>, span: Span) {\n+        let soft_handler =\n+            |lint, span, msg: &_| self.lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, msg);\n         match self.eval_stability(def_id, id, span) {\n             EvalResult::Allow => {}\n             EvalResult::Deny { feature, reason, issue, is_soft } =>\n-                report_unstable(self.sess, feature, reason, issue, is_soft, span),\n+                report_unstable(self.sess, feature, reason, issue, is_soft, span, soft_handler),\n             EvalResult::Unmarked => {\n                 // The API could be uncallable for other reasons, for example when a private module\n                 // was referenced."}, {"sha": "6c31d54e081c42b9ee62c787ff815eb7e58f02c8", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -470,6 +470,14 @@ impl<'tcx> AllocMap<'tcx> {\n         }\n     }\n \n+    /// Panics if the `AllocId` does not refer to a function\n+    pub fn unwrap_fn(&self, id: AllocId) -> Instance<'tcx> {\n+        match self.get(id) {\n+            Some(GlobalAlloc::Function(instance)) => instance,\n+            _ => bug!(\"expected allocation ID {} to point to a function\", id),\n+        }\n+    }\n+\n     /// Freezes an `AllocId` created with `reserve` by pointing it at an `Allocation`. Trying to\n     /// call this function twice, even with the same `Allocation` will ICE the compiler.\n     pub fn set_alloc_id_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {"}, {"sha": "9ac1465cb0ba9a0f58dd773a7cdfe0591e28b73e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -2602,7 +2602,14 @@ impl<'tcx> Debug for Constant<'tcx> {\n impl<'tcx> Display for Constant<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"const \")?;\n-        write!(fmt, \"{}\", self.literal)\n+        // FIXME make the default pretty printing of raw pointers more detailed. Here we output the\n+        // debug representation of raw pointers, so that the raw pointers in the mir dump output are\n+        // detailed and just not '{pointer}'.\n+        if let ty::RawPtr(_) = self.literal.ty.kind {\n+            write!(fmt, \"{:?} : {}\", self.literal.val, self.literal.ty)\n+        } else {\n+            write!(fmt, \"{}\", self.literal)\n+        }\n     }\n }\n "}, {"sha": "c4967f8d66da20a74a3bd3ed375b21b1df741226", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 107, "deletions": 111, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -863,125 +863,121 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         let u8 = self.tcx().types.u8;\n-        if let ty::FnDef(did, substs) = ct.ty.kind {\n-            p!(print_value_path(did, substs));\n-            return Ok(self);\n-        }\n-        if let ConstValue::Unevaluated(did, substs) = ct.val {\n-            match self.tcx().def_kind(did) {\n-                | Some(DefKind::Static)\n-                | Some(DefKind::Const)\n-                | Some(DefKind::AssocConst) => p!(print_value_path(did, substs)),\n-                _ => if did.is_local() {\n-                    let span = self.tcx().def_span(did);\n-                    if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span) {\n-                        p!(write(\"{}\", snip))\n+\n+        match (ct.val, &ct.ty.kind) {\n+            (_,  ty::FnDef(did, substs)) => p!(print_value_path(*did, substs)),\n+            (ConstValue::Unevaluated(did, substs), _) => {\n+                match self.tcx().def_kind(did) {\n+                    | Some(DefKind::Static)\n+                    | Some(DefKind::Const)\n+                    | Some(DefKind::AssocConst) => p!(print_value_path(did, substs)),\n+                    _ => if did.is_local() {\n+                        let span = self.tcx().def_span(did);\n+                        if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span) {\n+                            p!(write(\"{}\", snip))\n+                        } else {\n+                            p!(write(\"_: \"), print(ct.ty))\n+                        }\n                     } else {\n                         p!(write(\"_: \"), print(ct.ty))\n-                    }\n+                    },\n+                }\n+            },\n+            (ConstValue::Infer(..), _) =>  p!(write(\"_: \"), print(ct.ty)),\n+            (ConstValue::Param(ParamConst { name, .. }), _) => p!(write(\"{}\", name)),\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Bool) =>\n+                p!(write(\"{}\", if data == 0 { \"false\" } else { \"true\" })),\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Float(ast::FloatTy::F32)) =>\n+                p!(write(\"{}f32\", Single::from_bits(data))),\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Float(ast::FloatTy::F64)) =>\n+                p!(write(\"{}f64\", Double::from_bits(data))),\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Uint(ui)) => {\n+                let bit_size = Integer::from_attr(&self.tcx(), UnsignedInt(*ui)).size();\n+                let max = truncate(u128::max_value(), bit_size);\n+\n+                if data == max {\n+                    p!(write(\"std::{}::MAX\", ui))\n                 } else {\n-                    p!(write(\"_: \"), print(ct.ty))\n-                },\n-            }\n-            return Ok(self);\n-        }\n-        if let ConstValue::Infer(..) = ct.val {\n-            p!(write(\"_: \"), print(ct.ty));\n-            return Ok(self);\n-        }\n-        if let ConstValue::Param(ParamConst { name, .. }) = ct.val {\n-            p!(write(\"{}\", name));\n-            return Ok(self);\n-        }\n-        if let ConstValue::Scalar(Scalar::Raw { data, .. }) = ct.val {\n-            match ct.ty.kind {\n-                ty::Bool => {\n-                    p!(write(\"{}\", if data == 0 { \"false\" } else { \"true\" }));\n-                    return Ok(self);\n-                },\n-                ty::Float(ast::FloatTy::F32) => {\n-                    p!(write(\"{}f32\", Single::from_bits(data)));\n-                    return Ok(self);\n-                },\n-                ty::Float(ast::FloatTy::F64) => {\n-                    p!(write(\"{}f64\", Double::from_bits(data)));\n-                    return Ok(self);\n-                },\n-                ty::Uint(ui) => {\n-                    let bit_size = Integer::from_attr(&self.tcx(), UnsignedInt(ui)).size();\n-                    let max = truncate(u128::max_value(), bit_size);\n+                    p!(write(\"{}{}\", data, ui))\n+                };\n+            },\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Int(i)) => {\n+                let bit_size = Integer::from_attr(&self.tcx(), SignedInt(*i))\n+                    .size().bits() as u128;\n+                let min = 1u128 << (bit_size - 1);\n+                let max = min - 1;\n+\n+                let ty = self.tcx().lift(&ct.ty).unwrap();\n+                let size = self.tcx().layout_of(ty::ParamEnv::empty().and(ty))\n+                    .unwrap()\n+                    .size;\n+                match data {\n+                    d if d == min => p!(write(\"std::{}::MIN\", i)),\n+                    d if d == max => p!(write(\"std::{}::MAX\", i)),\n+                    _ => p!(write(\"{}{}\", sign_extend(data, size) as i128, i))\n+                }\n+            },\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Char) =>\n+                p!(write(\"{:?}\", ::std::char::from_u32(data as u32).unwrap())),\n+            (ConstValue::Scalar(_), ty::RawPtr(_)) => p!(write(\"{{pointer}}\")),\n+            (ConstValue::Scalar(Scalar::Ptr(ptr)), ty::FnPtr(_)) => {\n+                let instance = {\n+                    let alloc_map = self.tcx().alloc_map.lock();\n+                    alloc_map.unwrap_fn(ptr.alloc_id)\n+                };\n+                p!(print_value_path(instance.def_id(), instance.substs));\n+            },\n+            _ => {\n+                let printed = if let ty::Ref(_, ref_ty, _) = ct.ty.kind {\n+                    let byte_str = match (ct.val, &ref_ty.kind) {\n+                        (ConstValue::Scalar(Scalar::Ptr(ptr)), ty::Array(t, n)) if *t == u8 => {\n+                            let n = n.eval_usize(self.tcx(), ty::ParamEnv::empty());\n+                            Some(self.tcx()\n+                                .alloc_map.lock()\n+                                .unwrap_memory(ptr.alloc_id)\n+                                .get_bytes(&self.tcx(), ptr, Size::from_bytes(n)).unwrap())\n+                        },\n+                        (ConstValue::Slice { data, start, end }, ty::Slice(t)) if *t == u8 => {\n+                            // The `inspect` here is okay since we checked the bounds, and there are\n+                            // no relocations (we have an active slice reference here). We don't use\n+                            // this result to affect interpreter execution.\n+                            Some(data.inspect_with_undef_and_ptr_outside_interpreter(start..end))\n+                        },\n+                        _ => None,\n+                    };\n \n-                    if data == max {\n-                        p!(write(\"std::{}::MAX\", ui))\n+                    if let Some(byte_str) = byte_str {\n+                        p!(write(\"b\\\"\"));\n+                        for &c in byte_str {\n+                            for e in std::ascii::escape_default(c) {\n+                                self.write_char(e as char)?;\n+                            }\n+                        }\n+                        p!(write(\"\\\"\"));\n+                        true\n+                    } else if let (ConstValue::Slice { data, start, end }, ty::Str) =\n+                        (ct.val, &ref_ty.kind)\n+                    {\n+                        // The `inspect` here is okay since we checked the bounds, and there are no\n+                        // relocations (we have an active `str` reference here). We don't use this\n+                        // result to affect interpreter execution.\n+                        let slice = data.inspect_with_undef_and_ptr_outside_interpreter(start..end);\n+                        let s = ::std::str::from_utf8(slice)\n+                            .expect(\"non utf8 str from miri\");\n+                        p!(write(\"{:?}\", s));\n+                        true\n                     } else {\n-                        p!(write(\"{}{}\", data, ui))\n-                    };\n-                    return Ok(self);\n-                },\n-                ty::Int(i) =>{\n-                    let bit_size = Integer::from_attr(&self.tcx(), SignedInt(i))\n-                        .size().bits() as u128;\n-                    let min = 1u128 << (bit_size - 1);\n-                    let max = min - 1;\n-\n-                    let ty = self.tcx().lift(&ct.ty).unwrap();\n-                    let size = self.tcx().layout_of(ty::ParamEnv::empty().and(ty))\n-                        .unwrap()\n-                        .size;\n-                    match data {\n-                        d if d == min => p!(write(\"std::{}::MIN\", i)),\n-                        d if d == max => p!(write(\"std::{}::MAX\", i)),\n-                        _ => p!(write(\"{}{}\", sign_extend(data, size) as i128, i))\n-                    }\n-                    return Ok(self);\n-                },\n-                ty::Char => {\n-                    p!(write(\"{:?}\", ::std::char::from_u32(data as u32).unwrap()));\n-                    return Ok(self);\n-                }\n-                _ => {},\n-            }\n-        }\n-        if let ty::Ref(_, ref_ty, _) = ct.ty.kind {\n-            let byte_str = match (ct.val, &ref_ty.kind) {\n-                (ConstValue::Scalar(Scalar::Ptr(ptr)), ty::Array(t, n)) if *t == u8 => {\n-                    let n = n.eval_usize(self.tcx(), ty::ParamEnv::empty());\n-                    Some(self.tcx()\n-                        .alloc_map.lock()\n-                        .unwrap_memory(ptr.alloc_id)\n-                        .get_bytes(&self.tcx(), ptr, Size::from_bytes(n)).unwrap())\n-                },\n-                (ConstValue::Slice { data, start, end }, ty::Slice(t)) if *t == u8 => {\n-                    // The `inspect` here is okay since we checked the bounds, and there are no\n-                    // relocations (we have an active slice reference here). We don't use this\n-                    // result to affect interpreter execution.\n-                    Some(data.inspect_with_undef_and_ptr_outside_interpreter(start..end))\n-                },\n-                (ConstValue::Slice { data, start, end }, ty::Str) => {\n-                    // The `inspect` here is okay since we checked the bounds, and there are no\n-                    // relocations (we have an active `str` reference here). We don't use this\n-                    // result to affect interpreter execution.\n-                    let slice = data.inspect_with_undef_and_ptr_outside_interpreter(start..end);\n-                    let s = ::std::str::from_utf8(slice)\n-                        .expect(\"non utf8 str from miri\");\n-                    p!(write(\"{:?}\", s));\n-                    return Ok(self);\n-                },\n-                _ => None,\n-            };\n-            if let Some(byte_str) = byte_str {\n-                p!(write(\"b\\\"\"));\n-                for &c in byte_str {\n-                    for e in std::ascii::escape_default(c) {\n-                        self.write_char(e as char)?;\n+                        false\n                     }\n+                } else {\n+                    false\n+                };\n+                if !printed {\n+                    // fallback\n+                    p!(write(\"{:?} : \", ct.val), print(ct.ty))\n                 }\n-                p!(write(\"\\\"\"));\n-                return Ok(self);\n             }\n-        }\n-        p!(write(\"{:?} : \", ct.val), print(ct.ty));\n-\n+        };\n         Ok(self)\n     }\n }"}, {"sha": "41f34703622e7f9606828a90947243840a97429d", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -8,7 +8,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use crate::ty::error::{ExpectedFound, TypeError};\n-use crate::mir::interpret::{ConstValue, get_slice_bytes, Scalar};\n+use crate::mir::interpret::{ConstValue, get_slice_bytes};\n use std::rc::Rc;\n use std::iter;\n use rustc_target::spec::abi;\n@@ -561,37 +561,39 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     // implement both `PartialEq` and `Eq`, corresponding to\n     // `structural_match` types.\n     // FIXME(const_generics): check for `structural_match` synthetic attribute.\n-    match (eagerly_eval(a), eagerly_eval(b)) {\n+    let new_const_val = match (eagerly_eval(a), eagerly_eval(b)) {\n         (ConstValue::Infer(_), _) | (_, ConstValue::Infer(_)) => {\n             // The caller should handle these cases!\n             bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n         }\n         (ConstValue::Param(a_p), ConstValue::Param(b_p)) if a_p.index == b_p.index => {\n-            Ok(a)\n+            return Ok(a);\n         }\n         (ConstValue::Placeholder(p1), ConstValue::Placeholder(p2)) if p1 == p2 => {\n-            Ok(a)\n+            return Ok(a);\n         }\n-        (a_val @ ConstValue::Scalar(Scalar::Raw { .. }), b_val @ _)\n-            if a.ty == b.ty && a_val == b_val =>\n-        {\n-            Ok(tcx.mk_const(ty::Const {\n-                val: a_val,\n-                ty: a.ty,\n-            }))\n+        (ConstValue::Scalar(a_val), ConstValue::Scalar(b_val)) if a.ty == b.ty => {\n+            if a_val == b_val {\n+                Ok(ConstValue::Scalar(a_val))\n+            } else if let ty::FnPtr(_) = a.ty.kind {\n+                let alloc_map = tcx.alloc_map.lock();\n+                let a_instance = alloc_map.unwrap_fn(a_val.to_ptr().unwrap().alloc_id);\n+                let b_instance = alloc_map.unwrap_fn(b_val.to_ptr().unwrap().alloc_id);\n+                if a_instance == b_instance {\n+                    Ok(ConstValue::Scalar(a_val))\n+                } else {\n+                    Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                }\n+            } else {\n+                Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+            }\n         }\n \n-        // FIXME(const_generics): we should either handle `Scalar::Ptr` or add a comment\n-        // saying that we're not handling it intentionally.\n-\n         (a_val @ ConstValue::Slice { .. }, b_val @ ConstValue::Slice { .. }) => {\n             let a_bytes = get_slice_bytes(&tcx, a_val);\n             let b_bytes = get_slice_bytes(&tcx, b_val);\n             if a_bytes == b_bytes {\n-                Ok(tcx.mk_const(ty::Const {\n-                    val: a_val,\n-                    ty: a.ty,\n-                }))\n+                Ok(a_val)\n             } else {\n                 Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n             }\n@@ -602,16 +604,16 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         // FIXME(const_generics): this is wrong, as it is a projection\n         (ConstValue::Unevaluated(a_def_id, a_substs),\n             ConstValue::Unevaluated(b_def_id, b_substs)) if a_def_id == b_def_id => {\n-                let substs =\n-                    relation.relate_with_variance(ty::Variance::Invariant, &a_substs, &b_substs)?;\n-                Ok(tcx.mk_const(ty::Const {\n-                    val: ConstValue::Unevaluated(a_def_id, &substs),\n-                    ty: a.ty,\n-                }))\n-            }\n-\n-        _ => Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n-    }\n+            let substs =\n+                relation.relate_with_variance(ty::Variance::Invariant, &a_substs, &b_substs)?;\n+            Ok(ConstValue::Unevaluated(a_def_id, &substs))\n+        }\n+        _ =>  Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n+    };\n+    new_const_val.map(|val| tcx.mk_const(ty::Const {\n+        val,\n+        ty: a.ty,\n+    }))\n }\n \n impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {"}, {"sha": "5ddf15317a31cdab9be3d34d348122a05fdc7b2f", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -1017,34 +1017,25 @@ impl<'tcx> ty::TyS<'tcx> {\n }\n \n fn is_copy_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n-    let (param_env, ty) = query.into_parts();\n-    let trait_def_id = tcx.require_lang_item(lang_items::CopyTraitLangItem, None);\n-    tcx.infer_ctxt()\n-        .enter(|infcx| traits::type_known_to_meet_bound_modulo_regions(\n-            &infcx,\n-            param_env,\n-            ty,\n-            trait_def_id,\n-            DUMMY_SP,\n-        ))\n+    is_item_raw(tcx, query, lang_items::CopyTraitLangItem)\n }\n \n fn is_sized_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n-    let (param_env, ty) = query.into_parts();\n-    let trait_def_id = tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n-    tcx.infer_ctxt()\n-        .enter(|infcx| traits::type_known_to_meet_bound_modulo_regions(\n-            &infcx,\n-            param_env,\n-            ty,\n-            trait_def_id,\n-            DUMMY_SP,\n-        ))\n+    is_item_raw(tcx, query, lang_items::SizedTraitLangItem)\n+\n }\n \n fn is_freeze_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n+    is_item_raw(tcx, query, lang_items::FreezeTraitLangItem)\n+}\n+\n+fn is_item_raw<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n+    item: lang_items::LangItem,\n+) -> bool {\n     let (param_env, ty) = query.into_parts();\n-    let trait_def_id = tcx.require_lang_item(lang_items::FreezeTraitLangItem, None);\n+    let trait_def_id = tcx.require_lang_item(item, None);\n     tcx.infer_ctxt()\n         .enter(|infcx| traits::type_known_to_meet_bound_modulo_regions(\n             &infcx,"}, {"sha": "098258994f4e2a8c31f0ba65163ceb47568ca934", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -1,5 +1,6 @@\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::{AsyncGeneratorKind, GeneratorKind};\n use rustc::mir::{\n     self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, ConstraintCategory, Local,\n     LocalDecl, LocalKind, Location, Operand, Place, PlaceBase, PlaceRef, ProjectionElem, Rvalue,\n@@ -788,7 +789,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     ..\n                 },\n             ) if borrow_spans.for_closure() => self.report_escaping_closure_capture(\n-                borrow_spans.args_or_use(),\n+                borrow_spans,\n                 borrow_span,\n                 region_name,\n                 category,\n@@ -806,7 +807,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 },\n \n             ) if borrow_spans.for_generator() => self.report_escaping_closure_capture(\n-                borrow_spans.args_or_use(),\n+                borrow_spans,\n                 borrow_span,\n                 region_name,\n                 category,\n@@ -1195,15 +1196,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     fn report_escaping_closure_capture(\n         &mut self,\n-        args_span: Span,\n+        use_span: UseSpans,\n         var_span: Span,\n         fr_name: &RegionName,\n         category: ConstraintCategory,\n         constraint_span: Span,\n         captured_var: &str,\n     ) -> DiagnosticBuilder<'cx> {\n         let tcx = self.infcx.tcx;\n-\n+        let args_span = use_span.args_or_use();\n         let mut err = self.cannot_capture_in_long_lived_closure(\n             args_span,\n             captured_var,\n@@ -1223,12 +1224,25 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             },\n             Err(_) => \"move |<args>| <body>\".to_string()\n         };\n-\n+        let kind = match use_span.generator_kind() {\n+            Some(generator_kind) => match generator_kind {\n+                GeneratorKind::Async(async_kind) => match async_kind {\n+                    AsyncGeneratorKind::Block => \"async block\",\n+                    AsyncGeneratorKind::Closure => \"async closure\",\n+                    _ => bug!(\"async block/closure expected, but async funtion found.\"),\n+                },\n+                GeneratorKind::Gen => \"generator\",\n+            }\n+            None => \"closure\",\n+        };\n         err.span_suggestion(\n             args_span,\n-            &format!(\"to force the closure to take ownership of {} (and any \\\n-                      other referenced variables), use the `move` keyword\",\n-                      captured_var),\n+            &format!(\n+                \"to force the {} to take ownership of {} (and any \\\n+                 other referenced variables), use the `move` keyword\",\n+                 kind,\n+                 captured_var\n+            ),\n             suggestion,\n             Applicability::MachineApplicable,\n         );"}, {"sha": "5e0727d51579fd70d518903f7d690816e0994d35", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir;\n use rustc::hir::def::Namespace;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::GeneratorKind;\n use rustc::mir::{\n     AggregateKind, Constant, Field, Local, LocalKind, Location, Operand,\n     Place, PlaceBase, PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind,\n@@ -14,7 +15,7 @@ use syntax_pos::Span;\n use syntax::symbol::sym;\n \n use super::borrow_set::BorrowData;\n-use super::{MirBorrowckCtxt};\n+use super::MirBorrowckCtxt;\n use crate::dataflow::move_paths::{InitLocation, LookupResult};\n \n pub(super) struct IncludingDowncast(pub(super) bool);\n@@ -604,7 +605,7 @@ pub(super) enum UseSpans {\n     // The access is caused by capturing a variable for a closure.\n     ClosureUse {\n         // This is true if the captured variable was from a generator.\n-        is_generator: bool,\n+        generator_kind: Option<GeneratorKind>,\n         // The span of the args of the closure, including the `move` keyword if\n         // it's present.\n         args_span: Span,\n@@ -631,6 +632,13 @@ impl UseSpans {\n         }\n     }\n \n+    pub(super) fn generator_kind(self) -> Option<GeneratorKind> {\n+        match self {\n+            UseSpans::ClosureUse { generator_kind, .. } => generator_kind,\n+            _ => None,\n+        }\n+    }\n+\n     // Add a span label to the arguments of the closure, if it exists.\n     pub(super) fn args_span_label(\n         self,\n@@ -656,23 +664,23 @@ impl UseSpans {\n     /// Returns `false` if this place is not used in a closure.\n     pub(super) fn for_closure(&self) -> bool {\n         match *self {\n-            UseSpans::ClosureUse { is_generator, .. } => !is_generator,\n+            UseSpans::ClosureUse { generator_kind, .. } => generator_kind.is_none(),\n             _ => false,\n         }\n     }\n \n     /// Returns `false` if this place is not used in a generator.\n     pub(super) fn for_generator(&self) -> bool {\n         match *self {\n-            UseSpans::ClosureUse { is_generator, .. } => is_generator,\n+            UseSpans::ClosureUse { generator_kind, .. } => generator_kind.is_some(),\n             _ => false,\n         }\n     }\n \n     /// Describe the span associated with a use of a place.\n     pub(super) fn describe(&self) -> String {\n         match *self {\n-            UseSpans::ClosureUse { is_generator, .. } => if is_generator {\n+            UseSpans::ClosureUse { generator_kind, .. } => if generator_kind.is_some() {\n                 \" in generator\".to_string()\n             } else {\n                 \" in closure\".to_string()\n@@ -794,19 +802,20 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if let  StatementKind::Assign(\n             box(_, Rvalue::Aggregate(ref kind, ref places))\n         ) = stmt.kind {\n-            let (def_id, is_generator) = match kind {\n-                box AggregateKind::Closure(def_id, _) => (def_id, false),\n-                box AggregateKind::Generator(def_id, _, _) => (def_id, true),\n+            let def_id = match kind {\n+                box AggregateKind::Closure(def_id, _)\n+                | box AggregateKind::Generator(def_id, _, _) => def_id,\n                 _ => return OtherUse(stmt.source_info.span),\n             };\n \n             debug!(\n-                \"move_spans: def_id={:?} is_generator={:?} places={:?}\",\n-                def_id, is_generator, places\n+                \"move_spans: def_id={:?} places={:?}\",\n+                def_id, places\n             );\n-            if let Some((args_span, var_span)) = self.closure_span(*def_id, moved_place, places) {\n+            if let Some((args_span, generator_kind, var_span))\n+                = self.closure_span(*def_id, moved_place, places) {\n                 return ClosureUse {\n-                    is_generator,\n+                    generator_kind,\n                     args_span,\n                     var_span,\n                 };\n@@ -857,11 +866,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     \"borrow_spans: def_id={:?} is_generator={:?} places={:?}\",\n                     def_id, is_generator, places\n                 );\n-                if let Some((args_span, var_span)) = self.closure_span(\n+                if let Some((args_span, generator_kind, var_span)) = self.closure_span(\n                     *def_id, Place::from(target).as_ref(), places\n                 ) {\n                     return ClosureUse {\n-                        is_generator,\n+                        generator_kind,\n                         args_span,\n                         var_span,\n                     };\n@@ -884,7 +893,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         def_id: DefId,\n         target_place: PlaceRef<'cx, 'tcx>,\n         places: &Vec<Operand<'tcx>>,\n-    ) -> Option<(Span, Span)> {\n+    ) -> Option<(Span, Option<GeneratorKind>, Span)> {\n         debug!(\n             \"closure_span: def_id={:?} target_place={:?} places={:?}\",\n             def_id, target_place, places\n@@ -893,14 +902,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let expr = &self.infcx.tcx.hir().expect_expr(hir_id).kind;\n         debug!(\"closure_span: hir_id={:?} expr={:?}\", hir_id, expr);\n         if let hir::ExprKind::Closure(\n-            .., args_span, _\n+            .., body_id, args_span, _\n         ) = expr {\n             for (upvar, place) in self.infcx.tcx.upvars(def_id)?.values().zip(places) {\n                 match place {\n                     Operand::Copy(place) |\n                     Operand::Move(place) if target_place == place.as_ref() => {\n                         debug!(\"closure_span: found captured local {:?}\", place);\n-                        return Some((*args_span, upvar.span));\n+                        let body = self.infcx.tcx.hir().body(*body_id);\n+                        let generator_kind = body.generator_kind();\n+                        return Some((*args_span, generator_kind, upvar.span));\n                     },\n                     _ => {}\n                 }"}, {"sha": "8f8df395053681e481a8d04c316fcdb5f7c09340", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -1272,7 +1272,14 @@ fn collect_const<'tcx>(\n ) {\n     debug!(\"visiting const {:?}\", constant);\n \n-    match constant.val {\n+    let param_env = ty::ParamEnv::reveal_all();\n+    let substituted_constant = tcx.subst_and_normalize_erasing_regions(\n+        param_substs,\n+        param_env,\n+        &constant,\n+    );\n+\n+    match substituted_constant.val {\n         ConstValue::Scalar(Scalar::Ptr(ptr)) =>\n             collect_miri(tcx, ptr.alloc_id, output),\n         ConstValue::Slice { data: alloc, start: _, end: _ } |\n@@ -1282,12 +1289,6 @@ fn collect_const<'tcx>(\n             }\n         }\n         ConstValue::Unevaluated(def_id, substs) => {\n-            let param_env = ty::ParamEnv::reveal_all();\n-            let substs = tcx.subst_and_normalize_erasing_regions(\n-                param_substs,\n-                param_env,\n-                &substs,\n-            );\n             let instance = ty::Instance::resolve(tcx,\n                                                 param_env,\n                                                 def_id,\n@@ -1304,7 +1305,7 @@ fn collect_const<'tcx>(\n                     tcx.def_span(def_id), \"collection encountered polymorphic constant\",\n                 ),\n             }\n-        }\n+        },\n         _ => {},\n     }\n }"}, {"sha": "a2626617afec33f880c11b431a50a54d5d40e730", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -359,6 +359,35 @@ fn main() {}\n ```\n \"##,\n \n+E0568: r##\"\n+A super trait has been added to an auto trait.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0568\n+#![feature(optin_builtin_traits)]\n+\n+auto trait Bound : Copy {} // error!\n+\n+fn main() {}\n+```\n+\n+Since an auto trait is implemented on all existing types, adding a super trait\n+would filter out a lot of those types. In the current example, almost none of\n+all the existing types could implement `Bound` because very few of them have the\n+`Copy` trait.\n+\n+To fix this issue, just remove the super trait:\n+\n+```\n+#![feature(optin_builtin_traits)]\n+\n+auto trait Bound {} // ok!\n+\n+fn main() {}\n+```\n+\"##,\n+\n E0571: r##\"\n A `break` statement with an argument appeared in a non-`loop` loop.\n \n@@ -576,7 +605,6 @@ Switch to the Rust 2018 edition to use `async fn`.\n ;\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target\n-    E0568, // auto traits can not have super traits\n     E0666, // nested `impl Trait` is illegal\n     E0667, // `impl Trait` in projections\n     E0696, // `continue` pointing to a labeled block"}, {"sha": "2b87bba83861ceda59718f52994239605e7a1203", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -796,7 +796,12 @@ impl<'a> Resolver<'a> {\n             if let StabilityLevel::Unstable { reason, issue, is_soft } = stability.level {\n                 let feature = stability.feature;\n                 if !self.active_features.contains(&feature) && !span.allows_unstable(feature) {\n-                    stability::report_unstable(self.session, feature, reason, issue, is_soft, span);\n+                    let node_id = ast::CRATE_NODE_ID;\n+                    let soft_handler =\n+                        |lint, span, msg: &_| self.session.buffer_lint(lint, node_id, span, msg);\n+                    stability::report_unstable(\n+                        self.session, feature, reason, issue, is_soft, span, soft_handler\n+                    );\n                 }\n             }\n             if let Some(depr) = &stability.rustc_depr {"}, {"sha": "96cc5aa1dc24bc39b274fa44e444225d3985478e", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -809,31 +809,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // Get the `hir::Param` to verify whether it already has any bounds.\n                         // We do this to avoid suggesting code that ends up as `T: FooBar`,\n                         // instead we suggest `T: Foo + Bar` in that case.\n-                        let mut has_bounds = false;\n+                        let mut has_bounds = None;\n                         let mut impl_trait = false;\n                         if let Node::GenericParam(ref param) = hir.get(id) {\n-                            match param.kind {\n-                                hir::GenericParamKind::Type { synthetic: Some(_), .. } => {\n-                                    // We've found `fn foo(x: impl Trait)` instead of\n-                                    // `fn foo<T>(x: T)`. We want to suggest the correct\n-                                    // `fn foo(x: impl Trait + TraitBound)` instead of\n-                                    // `fn foo<T: TraitBound>(x: T)`. (#63706)\n-                                    impl_trait = true;\n-                                    has_bounds = param.bounds.len() > 1;\n-                                }\n-                                _ => {\n-                                    has_bounds = !param.bounds.is_empty();\n-                                }\n+                            let kind = &param.kind;\n+                            if let hir::GenericParamKind::Type { synthetic: Some(_), .. } = kind {\n+                                // We've found `fn foo(x: impl Trait)` instead of\n+                                // `fn foo<T>(x: T)`. We want to suggest the correct\n+                                // `fn foo(x: impl Trait + TraitBound)` instead of\n+                                // `fn foo<T: TraitBound>(x: T)`. (See #63706.)\n+                                impl_trait = true;\n+                                has_bounds = param.bounds.get(1);\n+                            } else {\n+                                has_bounds = param.bounds.get(0);\n                             }\n                         }\n                         let sp = hir.span(id);\n-                        // `sp` only covers `T`, change it so that it covers\n-                        // `T:` when appropriate\n-                        let sp = if has_bounds {\n-                            sp.to(self.tcx\n-                                .sess\n-                                .source_map()\n-                                .next_point(self.tcx.sess.source_map().next_point(sp)))\n+                        // `sp` only covers `T`, change it so that it covers `T:` when appropriate.\n+                        let sp = if let Some(first_bound) = has_bounds {\n+                            sp.until(first_bound.span())\n                         } else {\n                             sp\n                         };\n@@ -849,7 +843,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 param,\n                                 if impl_trait { \" +\" } else { \":\" },\n                                 self.tcx.def_path_str(t.def_id),\n-                                if has_bounds { \" +\"} else { \"\" },\n+                                if has_bounds.is_some() { \" + \" } else { \"\" },\n                             )),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "5b2081bef78dcf50602752237892af6bcbd9f6b6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -1508,9 +1508,29 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n         }\n \n         Node::GenericParam(param) => match &param.kind {\n-            hir::GenericParamKind::Type { default: Some(ref ty), .. } |\n-            hir::GenericParamKind::Const { ref ty, .. } => {\n-                icx.to_ty(ty)\n+            hir::GenericParamKind::Type { default: Some(ref ty), .. } => icx.to_ty(ty),\n+            hir::GenericParamKind::Const { ty: ref hir_ty, .. } => {\n+                let ty = icx.to_ty(hir_ty);\n+                if !tcx.features().const_compare_raw_pointers {\n+                    let err = match ty.peel_refs().kind {\n+                        ty::FnPtr(_) => Some(\"function pointers\"),\n+                        ty::RawPtr(_) => Some(\"raw pointers\"),\n+                        _ => None,\n+                    };\n+                    if let Some(unsupported_type) = err {\n+                        feature_gate::emit_feature_err(\n+                            &tcx.sess.parse_sess,\n+                            sym::const_compare_raw_pointers,\n+                            hir_ty.span,\n+                            feature_gate::GateIssue::Language,\n+                            &format!(\n+                                \"using {} as const generic parameters is unstable\",\n+                                unsupported_type\n+                            ),\n+                        );\n+                    };\n+                }\n+                ty\n             }\n             x => {\n                 if !fail {"}, {"sha": "6b0225a1b443ae489c7cf09e1aa615fb81dea166", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -2409,6 +2409,8 @@ where\n     }\n }\n \n+/// Inserts all new key-values from the iterator and replaces values with existing\n+/// keys with new values returned from the iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V, S> Extend<(K, V)> for HashMap<K, V, S>\n where"}, {"sha": "ca81044ee85609502722665ebebca67ae50962bc", "filename": "src/libstd/path.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -1627,7 +1627,7 @@ impl<'a> From<Cow<'a, Path>> for PathBuf {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Arc<Path> {\n-    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n+    /// Converts a `PathBuf` into an `Arc` by moving the `PathBuf` data into a new `Arc` buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.into_os_string());\n@@ -1637,7 +1637,7 @@ impl From<PathBuf> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&Path> for Arc<Path> {\n-    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n+    /// Converts a `Path` into an `Arc` by copying the `Path` data into a new `Arc` buffer.\n     #[inline]\n     fn from(s: &Path) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.as_os_str());\n@@ -1647,7 +1647,7 @@ impl From<&Path> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Rc<Path> {\n-    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n+    /// Converts a `PathBuf` into an `Rc` by moving the `PathBuf` data into a new `Rc` buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.into_os_string());\n@@ -1657,7 +1657,7 @@ impl From<PathBuf> for Rc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&Path> for Rc<Path> {\n-    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n+    /// Converts a `Path` into an `Rc` by copying the `Path` data into a new `Rc` buffer.\n     #[inline]\n     fn from(s: &Path) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.as_os_str());\n@@ -2219,6 +2219,7 @@ impl Path {\n     /// assert_eq!(Path::new(\"/etc\").join(\"passwd\"), PathBuf::from(\"/etc/passwd\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn join<P: AsRef<Path>>(&self, path: P) -> PathBuf {\n         self._join(path.as_ref())\n     }"}, {"sha": "abdcb6c8e3d37a3b2fa5cea5fb3d4fced9104abc", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -192,7 +192,7 @@ use syntax::util::map_in_place::MapInPlace;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::parse::ParseSess;\n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::{Span};\n \n use ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n \n@@ -1022,7 +1022,7 @@ impl<'a> MethodDef<'a> {\n                                  // [fields of next Self arg], [etc]>\n         let mut patterns = Vec::new();\n         for i in 0..self_args.len() {\n-            let struct_path = cx.path(DUMMY_SP, vec![type_ident]);\n+            let struct_path = cx.path(trait_.span, vec![type_ident]);\n             let (pat, ident_expr) = trait_.create_struct_pattern(cx,\n                                                                  struct_path,\n                                                                  struct_def,"}, {"sha": "14a3b123074e066d64a99886941473058e52197d", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -1 +1 @@\n-Subproject commit 8473db5f2af9dc36aaf6f9b053fcc2e0e6ac8026\n+Subproject commit 14a3b123074e066d64a99886941473058e52197d"}, {"sha": "ad7f195676a68b194707837b52d1cef11c607725", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -16,7 +16,7 @@ fn main() {\n // START rustc.main.ConstProp.after.mir\n //  bb0: {\n //      ...\n-//      _3 = const Scalar(AllocId(0).0x0) : fn();\n+//      _3 = const main;\n //      _2 = move _3 as usize (Misc);\n //      ...\n //      _1 = move _2 as *const fn() (Misc);"}, {"sha": "b47ce17ec8baa2d64292a34532c86b1c15535631", "filename": "src/test/run-make-fulldeps/linker-output-non-utf8/Makefile", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4b42e919d640f7c714a7e87c91b4f3a9089552d0/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4b42e919d640f7c714a7e87c91b4f3a9089552d0/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2FMakefile?ref=4b42e919d640f7c714a7e87c91b4f3a9089552d0", "patch": "@@ -1,23 +0,0 @@\n--include ../tools.mk\n-\n-# Make sure we don't ICE if the linker prints a non-UTF-8 error message.\n-\n-# ignore-windows\n-#\n-# This does not work in its current form on windows, possibly due to\n-# gcc bugs or something about valid Windows paths.  See issue #29151\n-# for more information.\n-\n-# ignore-macos\n-#\n-# This also does not work on Apple APFS due to the filesystem requiring\n-# valid UTF-8 paths.\n-\n-# The zzz it to allow humans to tab complete or glob this thing.\n-bad_dir := $(TMPDIR)/zzz$$'\\xff'\n-\n-all:\n-\t$(RUSTC) library.rs\n-\tmkdir $(bad_dir)\n-\tmv $(TMPDIR)/liblibrary.a $(bad_dir)\n-\t$(RUSTC) -L $(bad_dir) exec.rs 2>&1 | $(CGREP) this_symbol_not_defined"}, {"sha": "6864018d64e97894a0ab0c107d18608d3901ae39", "filename": "src/test/run-make-fulldeps/linker-output-non-utf8/exec.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b42e919d640f7c714a7e87c91b4f3a9089552d0/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2Fexec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b42e919d640f7c714a7e87c91b4f3a9089552d0/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2Fexec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2Fexec.rs?ref=4b42e919d640f7c714a7e87c91b4f3a9089552d0", "patch": "@@ -1,6 +0,0 @@\n-#[link(name=\"library\")]\n-extern \"C\" {\n-    fn foo();\n-}\n-\n-fn main() { unsafe { foo(); } }"}, {"sha": "6689a82fa2c4947e0114f0f66879c02ef86eb148", "filename": "src/test/run-make-fulldeps/linker-output-non-utf8/library.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b42e919d640f7c714a7e87c91b4f3a9089552d0/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2Flibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b42e919d640f7c714a7e87c91b4f3a9089552d0/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2Flibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2Flibrary.rs?ref=4b42e919d640f7c714a7e87c91b4f3a9089552d0", "patch": "@@ -1,10 +0,0 @@\n-#![crate_type = \"staticlib\"]\n-\n-extern \"C\" {\n-    fn this_symbol_not_defined();\n-}\n-\n-#[no_mangle]\n-pub extern \"C\" fn foo() {\n-    unsafe { this_symbol_not_defined(); }\n-}"}, {"sha": "0eb3971d14a38e8fdd53324a99dc7f7e15d7f16b", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -12,7 +12,7 @@ note: generator is returned here\n    |\n LL | fn foo() -> Box<impl std::future::Future<Output = u32>> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+help: to force the async block to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     Box::new(async move { x } )\n    |                    ^^^^^^^^^^"}, {"sha": "51422fab81fdaae931ba321bfa5313b415d362ed", "filename": "src/test/ui/auto-trait-validation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-trait-validation.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -18,5 +18,5 @@ LL | auto trait MyTrait { fn foo() {} }\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0380, E0567.\n+Some errors have detailed explanations: E0380, E0567, E0568.\n For more information about an error, try `rustc --explain E0380`."}, {"sha": "84615386d29959a07024cd5fd0e7610edeb9af17", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+\n+#![feature(const_generics, const_compare_raw_pointers)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn function() -> u32 {\n+    17\n+}\n+\n+struct Wrapper<const F: fn() -> u32>;\n+\n+impl<const F: fn() -> u32> Wrapper<{F}> {\n+    fn call() -> u32 {\n+        F()\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(Wrapper::<{function}>::call(), 17);\n+}"}, {"sha": "c677d70374931774c8fb2a303966cc29b7a7abc2", "filename": "src/test/ui/const-generics/fn-const-param-call.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/fn-const-param-call.rs:3:12\n+   |\n+LL | #![feature(const_generics, const_compare_raw_pointers)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "78fb10e8cb9043296f86848767796cdf3261e227", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,26 @@\n+#![feature(const_generics, const_compare_raw_pointers)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Checked<const F: fn(usize) -> bool>;\n+\n+fn not_one(val: usize) -> bool { val != 1 }\n+fn not_two(val: usize) -> bool { val != 2 }\n+\n+fn generic_arg<T>(val: T) -> bool { true }\n+\n+fn generic<T>(val: usize) -> bool { val != 1 }\n+\n+fn main() {\n+    let _: Option<Checked<{not_one}>> = None;\n+    let _: Checked<{not_one}> = Checked::<{not_one}>;\n+    let _: Checked<{not_one}> = Checked::<{not_two}>; //~ mismatched types\n+\n+    let _ = Checked::<{generic_arg}>;\n+    let _ = Checked::<{generic_arg::<usize>}>;\n+    let _ = Checked::<{generic_arg::<u32>}>;  //~ mismatched types\n+\n+    let _ = Checked::<{generic}>; //~ type annotations needed\n+    let _ = Checked::<{generic::<u16>}>;\n+    let _: Checked<{generic::<u16>}> = Checked::<{generic::<u16>}>;\n+    let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>; //~ mismatched types\n+}"}, {"sha": "de0916b26bfef307d665e63b8480c6d7e109a7b3", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,45 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/fn-const-param-infer.rs:1:12\n+   |\n+LL | #![feature(const_generics, const_compare_raw_pointers)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-const-param-infer.rs:16:33\n+   |\n+LL |     let _: Checked<{not_one}> = Checked::<{not_two}>;\n+   |                                 ^^^^^^^^^^^^^^^^^^^^ expected `not_one`, found `not_two`\n+   |\n+   = note: expected type `Checked<not_one>`\n+              found type `Checked<not_two>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-const-param-infer.rs:20:24\n+   |\n+LL |     let _ = Checked::<{generic_arg::<u32>}>;\n+   |                        ^^^^^^^^^^^^^^^^^^ expected usize, found u32\n+   |\n+   = note: expected type `fn(usize) -> bool`\n+              found type `fn(u32) -> bool {generic_arg::<u32>}`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/fn-const-param-infer.rs:22:24\n+   |\n+LL |     let _ = Checked::<{generic}>;\n+   |                        ^^^^^^^ cannot infer type for `T`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-const-param-infer.rs:25:40\n+   |\n+LL |     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `generic::<u32>`, found `generic::<u16>`\n+   |\n+   = note: expected type `Checked<generic::<u32>>`\n+              found type `Checked<generic::<u16>>`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0282, E0308.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "70cbc242c41a55683c46276e7b70d50876ec66e4", "filename": "src/test/ui/const-generics/issues/issue-60263.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-60263.rs"}, {"sha": "fe7b6fdb1904d7fcb85b3be677dec5a04da974c9", "filename": "src/test/ui/const-generics/issues/issue-60263.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-60263.stderr"}, {"sha": "b810efe73847e10c10ccda303e2a645136583642", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-60818-struct-constructors.rs"}, {"sha": "3e0cd8168818f426f3932e95c9edd88e0e1681ea", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-60818-struct-constructors.stderr"}, {"sha": "5b5e431bf2ff6d6824e010b8469010d88f753cad", "filename": "src/test/ui/const-generics/issues/issue-61336-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-61336-1.rs"}, {"sha": "949fa896d8780bfee6151da612a488bed1f0e51b", "filename": "src/test/ui/const-generics/issues/issue-61336-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-61336-1.stderr"}, {"sha": "7bb36f41b8f9d1a3cd0b76a3ed31fa99b79dd35e", "filename": "src/test/ui/const-generics/issues/issue-61336-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-61336-2.rs"}, {"sha": "63f86c81b1e7f0a727778c44e2afef0c33e3abb4", "filename": "src/test/ui/const-generics/issues/issue-61336-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-61336-2.stderr"}, {"sha": "edc012cbb3d13c7f30ee803381d5b4c94130a5bd", "filename": "src/test/ui/const-generics/issues/issue-61336.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-61336.rs"}, {"sha": "f96e8e02d4ec03ca347561411e397ed1b8cb0c8f", "filename": "src/test/ui/const-generics/issues/issue-61336.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-61336.stderr"}, {"sha": "45d37b6a2f3c5d115214bb5dd00954e94f112ad0", "filename": "src/test/ui/const-generics/issues/issue-61422.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-61422.rs"}, {"sha": "166bd3c2d3b67a65d717b383bee81344d1c55acf", "filename": "src/test/ui/const-generics/issues/issue-61422.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-61422.stderr"}, {"sha": "832095ce542062b89c2d76fd8332bfb7eae21950", "filename": "src/test/ui/const-generics/issues/issue-61432.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-61432.rs"}, {"sha": "33f77b028104eb40ab44c3c247d56d2221db237f", "filename": "src/test/ui/const-generics/issues/issue-61432.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-61432.stderr"}, {"sha": "4dc46eb0ef65aa26c77b964c52f6ea325a6113b9", "filename": "src/test/ui/const-generics/issues/issue-62187-encountered-polymorphic-const.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+pub trait BitLen: Sized {\n+    const BIT_LEN: usize;\n+}\n+\n+impl<const L: usize> BitLen for [u8; L] {\n+    const BIT_LEN: usize = 8 * L;\n+}\n+\n+fn main() {\n+    let foo = <[u8; 2]>::BIT_LEN;\n+}"}, {"sha": "20347ac4b7dacfb2e7241fa8626b78aec62ab661", "filename": "src/test/ui/const-generics/issues/issue-62187-encountered-polymorphic-const.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,16 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-62187-encountered-polymorphic-const.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: unused variable: `foo`\n+  --> $DIR/issue-62187-encountered-polymorphic-const.rs:15:9\n+   |\n+LL |     let foo = <[u8; 2]>::BIT_LEN;\n+   |         ^^^ help: consider prefixing with an underscore: `_foo`\n+   |\n+   = note: `#[warn(unused_variables)]` on by default\n+"}, {"sha": "72cce9b4843d77547446467016555fa124f9f384", "filename": "src/test/ui/const-generics/issues/issue-64519.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-64519.rs"}, {"sha": "d368f39d903a0107d78caa05b437a723763a43b7", "filename": "src/test/ui/const-generics/issues/issue-64519.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/const-generics/issue-64519.stderr"}, {"sha": "d26ab8be4c3fe67ab26e50a080847b3072b1c0eb", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+#![feature(const_generics, const_compare_raw_pointers)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+const A: u32 = 3;\n+\n+struct Const<const P: *const u32>;\n+\n+impl<const P: *const u32> Const<{P}> {\n+    fn get() -> u32 {\n+        unsafe {\n+            *P\n+        }\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(Const::<{&A as *const _}>::get(), 3)\n+}"}, {"sha": "73221596c8e8797755a2669687e573ee321853d3", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/raw-ptr-const-param-deref.rs:2:12\n+   |\n+LL | #![feature(const_generics, const_compare_raw_pointers)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "f69c37fbb8f3d0e7be0b40c5ea6cf25fcb79de70", "filename": "src/test/ui/const-generics/raw-ptr-const-param.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_generics, const_compare_raw_pointers)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Const<const P: *const u32>;\n+\n+fn main() {\n+    let _: Const<{15 as *const _}> = Const::<{10 as *const _}>; //~ mismatched types\n+    let _: Const<{10 as *const _}> = Const::<{10 as *const _}>;\n+}"}, {"sha": "75b4c0a0a3de30623e7c1885692205cda9871075", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/raw-ptr-const-param.rs:1:12\n+   |\n+LL | #![feature(const_generics, const_compare_raw_pointers)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/raw-ptr-const-param.rs:7:38\n+   |\n+LL |     let _: Const<{15 as *const _}> = Const::<{10 as *const _}>;\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{pointer}`, found `{pointer}`\n+   |\n+   = note: expected type `Const<{pointer}>`\n+              found type `Const<{pointer}>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ac771ac81d118097440239f29c261dcad60561f0", "filename": "src/test/ui/deprecation/derive_on_deprecated.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fdeprecation%2Fderive_on_deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fdeprecation%2Fderive_on_deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fderive_on_deprecated.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -6,4 +6,10 @@\n #[derive(Default)]\n struct X;\n \n+#[deprecated(note=\"Do not use this\")]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Default, Hash)]\n+pub struct Step<I> {\n+    _skip: Option<I>,\n+}\n+\n fn main() {}"}, {"sha": "8de390becbe7d7d87d81adf498ab3d9ad6dd5c9a", "filename": "src/test/ui/feature-gates/bench.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -1,5 +1,9 @@\n+// edition:2018\n+\n #[bench] //~ ERROR use of unstable library feature 'test'\n          //~| WARN this was previously accepted\n fn bench() {}\n \n+use bench as _; //~ ERROR use of unstable library feature 'test'\n+                //~| WARN this was previously accepted\n fn main() {}"}, {"sha": "168ac925724376e042251592733718bf7158161f", "filename": "src/test/ui/feature-gates/bench.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -1,5 +1,5 @@\n error: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable\n-  --> $DIR/bench.rs:1:3\n+  --> $DIR/bench.rs:3:3\n    |\n LL | #[bench]\n    |   ^^^^^\n@@ -8,5 +8,14 @@ LL | #[bench]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #64266 <https://github.com/rust-lang/rust/issues/64266>\n \n-error: aborting due to previous error\n+error: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable\n+  --> $DIR/bench.rs:7:5\n+   |\n+LL | use bench as _;\n+   |     ^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #64266 <https://github.com/rust-lang/rust/issues/64266>\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "1ab11ce3b4423458705cc5bcc69f5489ff0d13fb", "filename": "src/test/ui/feature-gates/feature-gate-const_generics-ptr.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,9 @@\n+struct ConstFn<const F: fn()>;\n+//~^ ERROR const generics are unstable\n+//~^^ ERROR using function pointers as const generic parameters is unstable\n+\n+struct ConstPtr<const P: *const u32>;\n+//~^ ERROR const generics are unstable\n+//~^^ ERROR using raw pointers as const generic parameters is unstable\n+\n+fn main() {}"}, {"sha": "935f84b9163d38f9e599c96985fbefd4c87cbb34", "filename": "src/test/ui/feature-gates/feature-gate-const_generics-ptr.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: const generics are unstable\n+  --> $DIR/feature-gate-const_generics-ptr.rs:1:22\n+   |\n+LL | struct ConstFn<const F: fn()>;\n+   |                      ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: const generics are unstable\n+  --> $DIR/feature-gate-const_generics-ptr.rs:5:23\n+   |\n+LL | struct ConstPtr<const P: *const u32>;\n+   |                       ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: using function pointers as const generic parameters is unstable\n+  --> $DIR/feature-gate-const_generics-ptr.rs:1:25\n+   |\n+LL | struct ConstFn<const F: fn()>;\n+   |                         ^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53020\n+   = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n+\n+error[E0658]: using raw pointers as const generic parameters is unstable\n+  --> $DIR/feature-gate-const_generics-ptr.rs:5:26\n+   |\n+LL | struct ConstPtr<const P: *const u32>;\n+   |                          ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53020\n+   = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ff625668a9ddf323e1ace2b4a5021df753093d4c", "filename": "src/test/ui/issues/auxiliary/issue-57271-lib.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-57271-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-57271-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-57271-lib.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,11 @@\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n+pub enum BaseType {\n+    Byte,\n+    Char,\n+    Double,\n+    Float,\n+    Int,\n+    Long,\n+    Short,\n+    Boolean,\n+}"}, {"sha": "4718aea0429c2148f8dd4addc9ebba7e06ff288a", "filename": "src/test/ui/issues/issue-53912.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-53912.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-53912.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53912.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/issue-53912.rs"}, {"sha": "9940fecbeed53a4789373ab6df6abf4136c2c79b", "filename": "src/test/ui/issues/issue-57271.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-57271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-57271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57271.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,24 @@\n+// aux-build:issue-57271-lib.rs\n+\n+extern crate issue_57271_lib;\n+\n+use issue_57271_lib::BaseType;\n+\n+pub enum ObjectType { //~ ERROR recursive type `ObjectType` has infinite size\n+    Class(ClassTypeSignature),\n+    Array(TypeSignature),\n+    TypeVariable(()),\n+}\n+\n+pub struct ClassTypeSignature {\n+    pub package: (),\n+    pub class: (),\n+    pub inner: (),\n+}\n+\n+pub enum TypeSignature { //~ ERROR recursive type `TypeSignature` has infinite size\n+    Base(BaseType),\n+    Object(ObjectType),\n+}\n+\n+fn main() {}"}, {"sha": "4f164624f7a537ec87aaf68ee8ca11dfa1da1630", "filename": "src/test/ui/issues/issue-57271.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-57271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-57271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57271.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,25 @@\n+error[E0072]: recursive type `ObjectType` has infinite size\n+  --> $DIR/issue-57271.rs:7:1\n+   |\n+LL | pub enum ObjectType {\n+   | ^^^^^^^^^^^^^^^^^^^ recursive type has infinite size\n+LL |     Class(ClassTypeSignature),\n+LL |     Array(TypeSignature),\n+   |           ------------- recursive without indirection\n+   |\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `ObjectType` representable\n+\n+error[E0072]: recursive type `TypeSignature` has infinite size\n+  --> $DIR/issue-57271.rs:19:1\n+   |\n+LL | pub enum TypeSignature {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ recursive type has infinite size\n+LL |     Base(BaseType),\n+LL |     Object(ObjectType),\n+   |            ---------- recursive without indirection\n+   |\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `TypeSignature` representable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0072`."}, {"sha": "23d68263b3a276449d0aa8170c1eb5cc05f8634e", "filename": "src/test/ui/issues/issue-57399-self-return-impl-trait.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,22 @@\n+// run-pass\n+\n+trait T {\n+    type T;\n+}\n+\n+impl T for i32 {\n+    type T = u32;\n+}\n+\n+struct S<A> {\n+    a: A,\n+}\n+\n+\n+impl From<u32> for S<<i32 as T>::T> {\n+    fn from(a: u32) -> Self {\n+        Self { a }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5c71410a8275c4a40ebc54baaa2588f6205df72c", "filename": "src/test/ui/issues/issue-57399-self-return-impl-trait.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,8 @@\n+warning: field is never used: `a`\n+  --> $DIR/issue-57399-self-return-impl-trait.rs:12:5\n+   |\n+LL |     a: A,\n+   |     ^^^^\n+   |\n+   = note: `#[warn(dead_code)]` on by default\n+"}, {"sha": "e7544934da0c83e8c4e228f7a952b2a7d9c11b1d", "filename": "src/test/ui/issues/issue-59020.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-59020.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-59020.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59020.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "previous_filename": "src/test/ui/issue-59020.rs"}, {"sha": "7bce57923a5b77855d37cbbd1ad5ec2009cb16f4", "filename": "src/test/ui/issues/issue-64792-bad-unicode-ctor.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,5 @@\n+struct X {}\n+\n+const Y: X = X(\"\u00f6\"); //~ ERROR expected function, found struct `X`\n+\n+fn main() {}"}, {"sha": "ae9025bb041ab8e9997f221c1c5a8be95e206542", "filename": "src/test/ui/issues/issue-64792-bad-unicode-ctor.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,15 @@\n+error[E0423]: expected function, found struct `X`\n+  --> $DIR/issue-64792-bad-unicode-ctor.rs:3:14\n+   |\n+LL | struct X {}\n+   | ----------- `X` defined here\n+LL | \n+LL | const Y: X = X(\"\u00f6\");\n+   |              ^\n+   |              |\n+   |              did you mean `X { /* fields */ }`?\n+   |              help: a constant with a similar name exists: `Y`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0423`."}, {"sha": "e0eaafdfc2f2213e3bb1da7166d2ce0615b99eaf", "filename": "src/test/ui/issues/issue-65284-suggest-generic-trait-bound.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.rs?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,11 @@\n+trait Foo {\n+    fn foo(&self);\n+}\n+\n+trait Bar {}\n+\n+fn do_stuff<T : Bar>(t : T) {\n+    t.foo() //~ ERROR no method named `foo` found for type `T` in the current scope\n+}\n+\n+fn main() {}"}, {"sha": "24bf60abf6a7828adc4bc4b650e18638ce7efa50", "filename": "src/test/ui/issues/issue-65284-suggest-generic-trait-bound.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no method named `foo` found for type `T` in the current scope\n+  --> $DIR/issue-65284-suggest-generic-trait-bound.rs:8:7\n+   |\n+LL |     t.foo()\n+   |       ^^^ method not found in `T`\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `foo`, perhaps you need to restrict type parameter `T` with it:\n+   |\n+LL | fn do_stuff<T: Foo + Bar>(t : T) {\n+   |             ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "63182a6bd95813290d685296e044ec295acd8eb4", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -17,4 +17,5 @@ LL |     let (a, b) = copy(NoClone);\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0568.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "8755bcded9d2fc07161d6f459845348f4d00a02c", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -6,3 +6,4 @@ LL | auto trait Magic : Sized where Option<Self> : Magic {}\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0568`."}, {"sha": "5a38883490959d3cd8941cca5ccfe575c6ca4859", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -6,3 +6,4 @@ LL | auto trait Magic: Copy {}\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0568`."}, {"sha": "4383cd9d5be43a65c8b7fb778d7831eec8f53d6b", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/026447b9b0816bfc92d8072145a7a330ec8e3298/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=026447b9b0816bfc92d8072145a7a330ec8e3298", "patch": "@@ -143,7 +143,7 @@ def issue(\n         cc @{}, do you think you would have time to do the follow-up work?\n         If so, that would be great!\n \n-        cc @{}, the PR reviewer, and @rust-lang/compiler -- nominating for prioritization.\n+        cc @{}, the PR reviewer, and nominating for compiler team prioritization.\n \n         ''').format(\n             relevant_pr_number, tool, status_description,"}]}