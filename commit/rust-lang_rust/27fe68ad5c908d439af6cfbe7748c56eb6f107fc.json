{"sha": "27fe68ad5c908d439af6cfbe7748c56eb6f107fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZmU2OGFkNWM5MDhkNDM5YWY2Y2ZiZTc3NDhjNTZlYjZmMTA3ZmM=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-05-22T15:50:58Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-05-22T17:52:06Z"}, "message": "Use TypeCtorId as AdtId directly, and rename the type alias StructId -> AdtId", "tree": {"sha": "4931a1d08d930dadee18e2f9d521e29d255f81b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4931a1d08d930dadee18e2f9d521e29d255f81b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27fe68ad5c908d439af6cfbe7748c56eb6f107fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27fe68ad5c908d439af6cfbe7748c56eb6f107fc", "html_url": "https://github.com/rust-lang/rust/commit/27fe68ad5c908d439af6cfbe7748c56eb6f107fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27fe68ad5c908d439af6cfbe7748c56eb6f107fc/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d0e27254d6376e980dc19e67dfcc598c7e97231", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d0e27254d6376e980dc19e67dfcc598c7e97231", "html_url": "https://github.com/rust-lang/rust/commit/1d0e27254d6376e980dc19e67dfcc598c7e97231"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "dfc6c7dd682a038a245dedf08f5b36ebb8beb822", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27fe68ad5c908d439af6cfbe7748c56eb6f107fc/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fe68ad5c908d439af6cfbe7748c56eb6f107fc/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=27fe68ad5c908d439af6cfbe7748c56eb6f107fc", "patch": "@@ -89,7 +89,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn trait_datum(&self, krate: CrateId, trait_id: chalk::TraitId) -> Arc<chalk::TraitDatum>;\n \n     #[salsa::invoke(chalk::struct_datum_query)]\n-    fn struct_datum(&self, krate: CrateId, struct_id: chalk::StructId) -> Arc<chalk::StructDatum>;\n+    fn struct_datum(&self, krate: CrateId, struct_id: chalk::AdtId) -> Arc<chalk::StructDatum>;\n \n     #[salsa::invoke(crate::traits::chalk::impl_datum_query)]\n     fn impl_datum(&self, krate: CrateId, impl_id: chalk::ImplId) -> Arc<chalk::ImplDatum>;"}, {"sha": "e91c9be040a628df8a67fdc772d7581d3d8d041a", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27fe68ad5c908d439af6cfbe7748c56eb6f107fc/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fe68ad5c908d439af6cfbe7748c56eb6f107fc/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=27fe68ad5c908d439af6cfbe7748c56eb6f107fc", "patch": "@@ -155,7 +155,7 @@ pub enum TypeCtor {\n /// This exists just for Chalk, because Chalk just has a single `StructId` where\n /// we have different kinds of ADTs, primitive types and special type\n /// constructors like tuples and function pointers.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Ord, PartialOrd)]\n pub struct TypeCtorId(salsa::InternId);\n impl_intern_key!(TypeCtorId);\n "}, {"sha": "e2f2a9ccbc64384ea62370fa71087688d2e140e7", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27fe68ad5c908d439af6cfbe7748c56eb6f107fc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fe68ad5c908d439af6cfbe7748c56eb6f107fc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=27fe68ad5c908d439af6cfbe7748c56eb6f107fc", "patch": "@@ -45,7 +45,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     fn trait_datum(&self, trait_id: TraitId) -> Arc<TraitDatum> {\n         self.db.trait_datum(self.krate, trait_id)\n     }\n-    fn adt_datum(&self, struct_id: StructId) -> Arc<StructDatum> {\n+    fn adt_datum(&self, struct_id: AdtId) -> Arc<StructDatum> {\n         self.db.struct_datum(self.krate, struct_id)\n     }\n     fn impl_datum(&self, impl_id: ImplId) -> Arc<ImplDatum> {\n@@ -94,7 +94,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         debug!(\"impls_for_trait returned {} impls\", result.len());\n         result\n     }\n-    fn impl_provided_for(&self, auto_trait_id: TraitId, struct_id: StructId) -> bool {\n+    fn impl_provided_for(&self, auto_trait_id: TraitId, struct_id: AdtId) -> bool {\n         debug!(\"impl_provided_for {:?}, {:?}\", auto_trait_id, struct_id);\n         false // FIXME\n     }\n@@ -257,7 +257,7 @@ fn lang_attr_from_well_known_trait(attr: WellKnownTrait) -> &'static str {\n pub(crate) fn struct_datum_query(\n     db: &dyn HirDatabase,\n     krate: CrateId,\n-    struct_id: StructId,\n+    struct_id: AdtId,\n ) -> Arc<StructDatum> {\n     debug!(\"struct_datum {:?}\", struct_id);\n     let type_ctor: TypeCtor = from_chalk(db, TypeName::Adt(struct_id));\n@@ -405,15 +405,15 @@ fn type_alias_associated_ty_value(\n     Arc::new(value)\n }\n \n-impl From<StructId> for crate::TypeCtorId {\n-    fn from(struct_id: StructId) -> Self {\n-        InternKey::from_intern_id(struct_id.0)\n+impl From<AdtId> for crate::TypeCtorId {\n+    fn from(struct_id: AdtId) -> Self {\n+        struct_id.0\n     }\n }\n \n-impl From<crate::TypeCtorId> for StructId {\n+impl From<crate::TypeCtorId> for AdtId {\n     fn from(type_ctor_id: crate::TypeCtorId) -> Self {\n-        chalk_ir::AdtId(type_ctor_id.as_intern_id())\n+        chalk_ir::AdtId(type_ctor_id)\n     }\n }\n "}, {"sha": "d98e5cb2da35cbbad500c33eed4d8a6e9ba16596", "filename": "crates/ra_hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27fe68ad5c908d439af6cfbe7748c56eb6f107fc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fe68ad5c908d439af6cfbe7748c56eb6f107fc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=27fe68ad5c908d439af6cfbe7748c56eb6f107fc", "patch": "@@ -14,7 +14,7 @@ pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n pub type AssociatedTyDatum = chalk_rust_ir::AssociatedTyDatum<Interner>;\n pub type TraitId = chalk_ir::TraitId<Interner>;\n pub type TraitDatum = chalk_rust_ir::TraitDatum<Interner>;\n-pub type StructId = chalk_ir::AdtId<Interner>;\n+pub type AdtId = chalk_ir::AdtId<Interner>;\n pub type StructDatum = chalk_rust_ir::AdtDatum<Interner>;\n pub type ImplId = chalk_ir::ImplId<Interner>;\n pub type ImplDatum = chalk_rust_ir::ImplDatum<Interner>;\n@@ -36,10 +36,10 @@ impl chalk_ir::interner::Interner for Interner {\n     type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n     type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n     type DefId = InternId;\n-    type InternedAdtId = InternId;\n+    type InternedAdtId = crate::TypeCtorId;\n     type Identifier = TypeAliasId;\n \n-    fn debug_adt_id(type_kind_id: StructId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+    fn debug_adt_id(type_kind_id: AdtId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_struct_id(type_kind_id, fmt)))\n     }\n "}, {"sha": "5dfd8e3ec815749e55fe8330f15c311e5af6a0a7", "filename": "crates/ra_hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27fe68ad5c908d439af6cfbe7748c56eb6f107fc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fe68ad5c908d439af6cfbe7748c56eb6f107fc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=27fe68ad5c908d439af6cfbe7748c56eb6f107fc", "patch": "@@ -15,7 +15,7 @@ pub struct DebugContext<'a>(&'a (dyn HirDatabase + 'a));\n impl DebugContext<'_> {\n     pub fn debug_struct_id(\n         &self,\n-        id: super::StructId,\n+        id: super::AdtId,\n         f: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         let type_ctor: TypeCtor = from_chalk(self.0, TypeName::Adt(id));"}]}