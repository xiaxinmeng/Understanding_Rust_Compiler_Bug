{"sha": "c5c43407603599f4ff2b217cc09be2cc5f39967d", "node_id": "C_kwDOAAsO6NoAKGM1YzQzNDA3NjAzNTk5ZjRmZjJiMjE3Y2MwOWJlMmNjNWYzOTk2N2Q", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-14T22:23:16Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-15T19:58:37Z"}, "message": "Add revisions to fixed tests in -Zlower-impl-trait-in-trait-to-assoc-ty", "tree": {"sha": "2da1f288edc8f032d34ed274d9e2da11f81792d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da1f288edc8f032d34ed274d9e2da11f81792d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5c43407603599f4ff2b217cc09be2cc5f39967d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQSI20ACgkQgTGiTgx5\n76+9vA//Tif74FFvWzMC11QbNtQHcqRY+vmpi6csDkE6mZP/pKQfbu1UdJhQkVrY\n3t/NTtmu95Oh7GPN3wu9OcJ6Tvvhv1LbIXi6RS+bT2qitq2UDpp49KxO+B+Iory7\nR0hG0dBNlzYLf2/QNqexp5fRMh4li1BreI9Uv4+yTS8WjrZANVzXPICKMTY4bea9\nLj/eJq+xgrijJiNjt5eJkng/ATzVhl/SiWAU5z8e5yDKsWwFP3bLgAr7s/4h8/aO\nJeXvdiMwCMEgjngU3KrAZRx4sY4zlZPf3KdE5nDqQ9ZEOh0V2VKFpiViRZ45vBnK\ndKsDHL4fNCzeMklW/YLJis/64rI7iTkx2oEbO+FiJUgunwXTqneOu36aMJsRmd9a\n/NqAXhL8dfNX0XugPb8u6XbHeB14VBx7U0c7psHZh2Se0RopX6J1ysegAsuziInP\n+3qWTM/OKY1g9ePqJWO4s+kjHicY4ur+v+Pvj2G0TDWAO1Cv/8iTSlDV0o+crf2b\nPI/105uCyXWFBUvopd7peZqzm+5A5gm0vnG69/ML5uO7XnK274GhdUsMqZYesucN\n1XDe9Gngu5nfjROREFznYtFnbZEHEzzqGuW43r7y8mcanb6PFP165XCMqz2o1JxT\nnaX9V/04doiD+ChnHN/5Lc5ozv4YDvZqVnpTc7nzNk/yRlxywtc=\n=mVdj\n-----END PGP SIGNATURE-----", "payload": "tree 2da1f288edc8f032d34ed274d9e2da11f81792d4\nparent 11f181083136f1a91feb4061c640d8c753e3c5f0\nauthor Santiago Pastorino <spastorino@gmail.com> 1678832596 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678910317 -0300\n\nAdd revisions to fixed tests in -Zlower-impl-trait-in-trait-to-assoc-ty\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c43407603599f4ff2b217cc09be2cc5f39967d", "html_url": "https://github.com/rust-lang/rust/commit/c5c43407603599f4ff2b217cc09be2cc5f39967d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5c43407603599f4ff2b217cc09be2cc5f39967d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f181083136f1a91feb4061c640d8c753e3c5f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f181083136f1a91feb4061c640d8c753e3c5f0", "html_url": "https://github.com/rust-lang/rust/commit/11f181083136f1a91feb4061c640d8c753e3c5f0"}], "stats": {"total": 199, "additions": 180, "deletions": 19}, "files": [{"sha": "780da068962964b167d9a6333d3ee337094dda84", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.current.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -1,33 +1,33 @@\n error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics-and-bounds.rs:12:18\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics-and-bounds.rs:12:18\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.stderr"}, {"sha": "780da068962964b167d9a6333d3ee337094dda84", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.next.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "146e74ec2d03b812f1c771f2a7db2978e1e088ac", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -1,6 +1,8 @@\n // check-fail\n // known-bug: #102682\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "04e1ab6d76978a94d1326f80cb219dc07bcc64c7", "filename": "tests/ui/async-await/in-trait/async-generics.current.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -1,33 +1,33 @@\n error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics.rs:9:18\n+  --> $DIR/async-generics.rs:11:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics.rs:9:18\n+  --> $DIR/async-generics.rs:11:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-generics.stderr"}, {"sha": "04e1ab6d76978a94d1326f80cb219dc07bcc64c7", "filename": "tests/ui/async-await/in-trait/async-generics.next.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics.rs:11:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics.rs:11:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "507500abf4e1cd5501a4b1ec291a6d956761f815", "filename": "tests/ui/async-await/in-trait/async-generics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -1,6 +1,8 @@\n // check-fail\n // known-bug: #102682\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "cac9a29f6440f41f5590a72192f773d73ff5de94", "filename": "tests/ui/impl-trait/in-trait/issue-102571.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-102571.rs:20:9\n+  --> $DIR/issue-102571.rs:23:9\n    |\n LL |     let () = t.bar();\n    |         ^^   ------- this expression has type `impl Deref<Target = impl std::fmt::Display + ?Sized>`", "previous_filename": "tests/ui/impl-trait/in-trait/issue-102571.stderr"}, {"sha": "cac9a29f6440f41f5590a72192f773d73ff5de94", "filename": "tests/ui/impl-trait/in-trait/issue-102571.next.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102571.rs:23:9\n+   |\n+LL |     let () = t.bar();\n+   |         ^^   ------- this expression has type `impl Deref<Target = impl std::fmt::Display + ?Sized>`\n+   |         |\n+   |         expected associated type, found `()`\n+   |\n+   = note: expected associated type `impl Deref<Target = impl std::fmt::Display + ?Sized>`\n+                    found unit type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "f0ddab5e7f2271e5bd470fc3c57e18e4beceb4f1", "filename": "tests/ui/impl-trait/in-trait/issue-102571.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "f48e7a1ed1407461cb57a4371ce48b67f8ca1f0f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -1,5 +1,5 @@\n error[E0053]: method `bar` has an incompatible type for trait\n-  --> $DIR/specialization-broken.rs:16:22\n+  --> $DIR/specialization-broken.rs:19:22\n    |\n LL | default impl<U> Foo for U\n    |              - this type parameter\n@@ -11,15 +11,15 @@ LL |     fn bar(&self) -> U {\n    |                      help: change the output type to match the trait: `impl Sized`\n    |\n note: type in trait\n-  --> $DIR/specialization-broken.rs:9:22\n+  --> $DIR/specialization-broken.rs:12:22\n    |\n LL |     fn bar(&self) -> impl Sized;\n    |                      ^^^^^^^^^^\n    = note: expected signature `fn(&U) -> impl Sized`\n               found signature `fn(&U) -> U`\n \n error: method with return-position `impl Trait` in trait cannot be specialized\n-  --> $DIR/specialization-broken.rs:16:5\n+  --> $DIR/specialization-broken.rs:19:5\n    |\n LL |     fn bar(&self) -> U {\n    |     ^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/specialization-broken.stderr"}, {"sha": "f48e7a1ed1407461cb57a4371ce48b67f8ca1f0f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.next.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -0,0 +1,31 @@\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/specialization-broken.rs:19:22\n+   |\n+LL | default impl<U> Foo for U\n+   |              - this type parameter\n+...\n+LL |     fn bar(&self) -> U {\n+   |                      ^\n+   |                      |\n+   |                      expected associated type, found type parameter `U`\n+   |                      help: change the output type to match the trait: `impl Sized`\n+   |\n+note: type in trait\n+  --> $DIR/specialization-broken.rs:12:22\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |                      ^^^^^^^^^^\n+   = note: expected signature `fn(&U) -> impl Sized`\n+              found signature `fn(&U) -> U`\n+\n+error: method with return-position `impl Trait` in trait cannot be specialized\n+  --> $DIR/specialization-broken.rs:19:5\n+   |\n+LL |     fn bar(&self) -> U {\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: specialization behaves in inconsistent and surprising ways with `#![feature(return_position_impl_trait_in_trait)]`, and for now is disallowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "658d0709717a1bb14eb83d54b6fa287ab436ba2f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n // FIXME(compiler-errors): I'm not exactly sure if this is expected to pass or not.\n // But we fixed an ICE anyways.\n "}, {"sha": "8392f26e7c8cacdd29bfb418037b6ba07c3ea530", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/wf-bounds.rs:9:22\n+  --> $DIR/wf-bounds.rs:11:22\n    |\n LL |     fn nya() -> impl Wf<Vec<[u8]>>;\n    |                      ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -9,14 +9,14 @@ note: required by a bound in `Vec`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/wf-bounds.rs:12:23\n+  --> $DIR/wf-bounds.rs:14:23\n    |\n LL |     fn nya2() -> impl Wf<[u8]>;\n    |                       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n note: required by a bound in `Wf`\n-  --> $DIR/wf-bounds.rs:6:10\n+  --> $DIR/wf-bounds.rs:8:10\n    |\n LL | trait Wf<T> {}\n    |          ^ required by this bound in `Wf`", "previous_filename": "tests/ui/impl-trait/in-trait/wf-bounds.stderr"}, {"sha": "8392f26e7c8cacdd29bfb418037b6ba07c3ea530", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.next.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:11:22\n+   |\n+LL |     fn nya() -> impl Wf<Vec<[u8]>>;\n+   |                      ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Vec`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:14:23\n+   |\n+LL |     fn nya2() -> impl Wf<[u8]>;\n+   |                       ^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Wf`\n+  --> $DIR/wf-bounds.rs:8:10\n+   |\n+LL | trait Wf<T> {}\n+   |          ^ required by this bound in `Wf`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Wf<T: ?Sized> {}\n+   |           ++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "39f412753159e474249d551b49cf376c29c5a3a0", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c43407603599f4ff2b217cc09be2cc5f39967d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs?ref=c5c43407603599f4ff2b217cc09be2cc5f39967d", "patch": "@@ -1,4 +1,6 @@\n // issue #101663\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}]}