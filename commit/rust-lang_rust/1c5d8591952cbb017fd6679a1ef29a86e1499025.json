{"sha": "1c5d8591952cbb017fd6679a1ef29a86e1499025", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNWQ4NTkxOTUyY2JiMDE3ZmQ2Njc5YTFlZjI5YTg2ZTE0OTkwMjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-10T08:18:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-10T14:10:28Z"}, "message": "Start replacing tokens", "tree": {"sha": "9ea2266e46cbba887d39e46374d3e06c9a2e44b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ea2266e46cbba887d39e46374d3e06c9a2e44b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c5d8591952cbb017fd6679a1ef29a86e1499025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5d8591952cbb017fd6679a1ef29a86e1499025", "html_url": "https://github.com/rust-lang/rust/commit/1c5d8591952cbb017fd6679a1ef29a86e1499025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c5d8591952cbb017fd6679a1ef29a86e1499025/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8b4c36f8161d34c8145a49965efee4514275989", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b4c36f8161d34c8145a49965efee4514275989", "html_url": "https://github.com/rust-lang/rust/commit/c8b4c36f8161d34c8145a49965efee4514275989"}], "stats": {"total": 52, "additions": 17, "deletions": 35}, "files": [{"sha": "fae76a7a8ce191ce2af33c6fdbdab2d3f5794eba", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1c5d8591952cbb017fd6679a1ef29a86e1499025/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5d8591952cbb017fd6679a1ef29a86e1499025/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=1c5d8591952cbb017fd6679a1ef29a86e1499025", "patch": "@@ -58,9 +58,7 @@ impl FnDef {\n     pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n     pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n     pub fn body(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        support::token2(&self.syntax, T ! [ ; ])\n-    }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RetType {\n@@ -78,7 +76,7 @@ impl AstNode for RetType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl RetType {\n-    pub fn thin_arrow_token(&self) -> Option<ThinArrow> { support::token(&self.syntax) }\n+    pub fn thin_arrow_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![->]) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -104,9 +102,7 @@ impl ast::DocCommentsOwner for StructDef {}\n impl StructDef {\n     pub fn struct_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![struct]) }\n     pub fn field_def_list(&self) -> Option<FieldDefList> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        support::token2(&self.syntax, T ! [ ; ])\n-    }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UnionDef {\n@@ -332,9 +328,7 @@ impl ast::DocCommentsOwner for Module {}\n impl Module {\n     pub fn mod_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![mod]) }\n     pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        support::token2(&self.syntax, T ! [ ; ])\n-    }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ItemList {\n@@ -385,9 +379,7 @@ impl ConstDef {\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![const]) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        support::token2(&self.syntax, T ! [ ; ])\n-    }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StaticDef {\n@@ -415,9 +407,7 @@ impl StaticDef {\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![mut]) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        support::token2(&self.syntax, T ! [ ; ])\n-    }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeAliasDef {\n@@ -447,9 +437,7 @@ impl TypeAliasDef {\n     pub fn type_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![type]) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        support::token2(&self.syntax, T ! [ ; ])\n-    }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ImplDef {\n@@ -594,9 +582,7 @@ impl AstNode for ArrayType {\n impl ArrayType {\n     pub fn l_brack_token(&self) -> Option<LBrack> { support::token(&self.syntax) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        support::token2(&self.syntax, T ! [ ; ])\n-    }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn r_brack_token(&self) -> Option<RBrack> { support::token(&self.syntax) }\n }\n@@ -779,9 +765,7 @@ impl ast::AttrsOwner for ArrayExpr {}\n impl ArrayExpr {\n     pub fn l_brack_token(&self) -> Option<LBrack> { support::token(&self.syntax) }\n     pub fn exprs(&self) -> AstChildren<Expr> { support::children(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        support::token2(&self.syntax, T ! [ ; ])\n-    }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n     pub fn r_brack_token(&self) -> Option<RBrack> { support::token(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1875,9 +1859,7 @@ impl MacroCall {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n     pub fn excl_token(&self) -> Option<Excl> { support::token(&self.syntax) }\n     pub fn token_tree(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        support::token2(&self.syntax, T ! [ ; ])\n-    }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Attr {\n@@ -2118,9 +2100,7 @@ impl AstNode for ExprStmt {\n impl ast::AttrsOwner for ExprStmt {}\n impl ExprStmt {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        support::token2(&self.syntax, T ! [ ; ])\n-    }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LetStmt {\n@@ -2144,9 +2124,7 @@ impl LetStmt {\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn initializer(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        support::token2(&self.syntax, T ! [ ; ])\n-    }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Condition {"}, {"sha": "8c83450e627e4ef5cf569141df1223ad09483021", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5d8591952cbb017fd6679a1ef29a86e1499025/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5d8591952cbb017fd6679a1ef29a86e1499025/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=1c5d8591952cbb017fd6679a1ef29a86e1499025", "patch": "@@ -322,7 +322,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             T![;]\n         }\n \n-        struct RetType { ThinArrow, TypeRef }\n+        struct RetType { T![->], TypeRef }\n \n         struct StructDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner {\n             T![struct],"}, {"sha": "b7698ee6e7668a91af7b56a6c51f5a93e6386c2b", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c5d8591952cbb017fd6679a1ef29a86e1499025/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5d8591952cbb017fd6679a1ef29a86e1499025/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=1c5d8591952cbb017fd6679a1ef29a86e1499025", "patch": "@@ -345,6 +345,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n         #(#displays)*\n     };\n \n+    let ast = ast.to_string().replace(\"T ! [ \", \"T![\").replace(\" ] )\", \"])\");\n     let pretty = crate::reformat(ast)?;\n     Ok(pretty)\n }\n@@ -527,6 +528,9 @@ impl Field<'_> {\n             Field::Token(name) => {\n                 let name = match *name {\n                     \";\" => \"semicolon\",\n+                    \"->\" => \"thin_arrow\",\n+                    \"'{'\" => \"l_curly\",\n+                    \"'}'\" => \"r_curly\",\n                     _ => name,\n                 };\n                 format_ident!(\"{}_token\", name)"}]}