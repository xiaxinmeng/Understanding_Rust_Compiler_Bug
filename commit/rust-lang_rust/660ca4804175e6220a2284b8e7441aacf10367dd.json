{"sha": "660ca4804175e6220a2284b8e7441aacf10367dd", "node_id": "C_kwDOAAsO6NoAKDY2MGNhNDgwNDE3NWU2MjIwYTIyODRiOGU3NDQxYWFjZjEwMzY3ZGQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-18T14:09:04Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-18T14:09:04Z"}, "message": "change `ConstEvaluatable` to use `ty::Const`", "tree": {"sha": "fdc2cb43fd7135d5de7627e6f2246a42591d228c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdc2cb43fd7135d5de7627e6f2246a42591d228c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/660ca4804175e6220a2284b8e7441aacf10367dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/660ca4804175e6220a2284b8e7441aacf10367dd", "html_url": "https://github.com/rust-lang/rust/commit/660ca4804175e6220a2284b8e7441aacf10367dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/660ca4804175e6220a2284b8e7441aacf10367dd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98a5ac269cffada469753ad2416717e251863f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a5ac269cffada469753ad2416717e251863f9a", "html_url": "https://github.com/rust-lang/rust/commit/98a5ac269cffada469753ad2416717e251863f9a"}], "stats": {"total": 104, "additions": 62, "deletions": 42}, "files": [{"sha": "ca5ea7d053a7ce92f40eeb24ed022f092d455990", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -198,7 +198,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n                 (\n                     ty::PredicateKind::ConstEvaluatable(a),\n                     ty::PredicateKind::ConstEvaluatable(b),\n-                ) => tcx.try_unify_abstract_consts(self_param_env.and((a, b))),\n+                ) => relator.relate(predicate.rebind(a), predicate.rebind(b)).is_ok(),\n                 (\n                     ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty_a, lt_a)),\n                     ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty_b, lt_b)),"}, {"sha": "33ed3b96aa81fb9aef9f9bb7321d99bb94424736", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -1101,8 +1101,6 @@ fn check_type_defn<'tcx, F>(\n \n             // Explicit `enum` discriminant values must const-evaluate successfully.\n             if let Some(discr_def_id) = variant.explicit_discr {\n-                let discr_substs = InternalSubsts::identity_for_item(tcx, discr_def_id.to_def_id());\n-\n                 let cause = traits::ObligationCause::new(\n                     tcx.def_span(discr_def_id),\n                     wfcx.body_id,\n@@ -1112,10 +1110,7 @@ fn check_type_defn<'tcx, F>(\n                     cause,\n                     wfcx.param_env,\n                     ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(\n-                        ty::UnevaluatedConst::new(\n-                            ty::WithOptConstParam::unknown(discr_def_id.to_def_id()),\n-                            discr_substs,\n-                        ),\n+                        ty::Const::from_anon_const(tcx, discr_def_id),\n                     ))\n                     .to_predicate(tcx),\n                 ));"}, {"sha": "2e84e1d01600708cb699b83f588dce311c135803", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -318,10 +318,10 @@ fn const_evaluatable_predicates_of<'tcx>(\n         fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n             let def_id = self.tcx.hir().local_def_id(c.hir_id);\n             let ct = ty::Const::from_anon_const(self.tcx, def_id);\n-            if let ty::ConstKind::Unevaluated(uv) = ct.kind() {\n+            if let ty::ConstKind::Unevaluated(_) = ct.kind() {\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n-                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv))\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct))\n                         .to_predicate(self.tcx),\n                     span,\n                 ));"}, {"sha": "f998e6083448f136171ac8336296f0b69ae80f4a", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -263,6 +263,10 @@ impl<'tcx> Const<'tcx> {\n         self.try_eval_usize(tcx, param_env)\n             .unwrap_or_else(|| bug!(\"expected usize, got {:#?}\", self))\n     }\n+\n+    pub fn is_ct_infer(self) -> bool {\n+        matches!(self.kind(), ty::ConstKind::Infer(_))\n+    }\n }\n \n pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Const<'tcx> {"}, {"sha": "bac7e9aae8b0a769a8bb72547d826f13ac80b54f", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -256,7 +256,7 @@ impl FlagComputation {\n                 self.add_substs(substs);\n             }\n             ty::PredicateKind::ConstEvaluatable(uv) => {\n-                self.add_unevaluated_const(uv);\n+                self.add_const(uv);\n             }\n             ty::PredicateKind::ConstEquate(expected, found) => {\n                 self.add_const(expected);"}, {"sha": "de5d2683477dcc5fd0ccdc3c5810ba952edc6364", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -682,7 +682,7 @@ pub enum PredicateKind<'tcx> {\n     Coerce(CoercePredicate<'tcx>),\n \n     /// Constant initializer must evaluate successfully.\n-    ConstEvaluatable(ty::UnevaluatedConst<'tcx>),\n+    ConstEvaluatable(ty::Const<'tcx>),\n \n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(Const<'tcx>, Const<'tcx>),"}, {"sha": "0b06ccc19ecc8fa539559bd2ef1068fb2102bc5e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -2702,8 +2702,8 @@ define_print_and_forward_display! {\n                 print_value_path(closure_def_id, &[]),\n                 write(\"` implements the trait `{}`\", kind))\n             }\n-            ty::PredicateKind::ConstEvaluatable(uv) => {\n-                p!(\"the constant `\", print_value_path(uv.def.did, uv.substs), \"` can be evaluated\")\n+            ty::PredicateKind::ConstEvaluatable(ct) => {\n+                p!(\"the constant `\", print(ct), \"` can be evaluated\")\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => {\n                 p!(\"the constant `\", print(c1), \"` equals `\", print(c2), \"`\")"}, {"sha": "d09d3609fb4732b174e8f395f45d70a1cf7639f8", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -166,8 +166,8 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n             ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n                 write!(f, \"ClosureKind({:?}, {:?}, {:?})\", closure_def_id, closure_substs, kind)\n             }\n-            ty::PredicateKind::ConstEvaluatable(uv) => {\n-                write!(f, \"ConstEvaluatable({:?}, {:?})\", uv.def, uv.substs)\n+            ty::PredicateKind::ConstEvaluatable(ct) => {\n+                write!(f, \"ConstEvaluatable({ct:?})\")\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => write!(f, \"ConstEquate({:?}, {:?})\", c1, c2),\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {"}, {"sha": "c9930e8ad0a9d9a5d846388f383f79a4dda8dfe5", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -188,6 +188,14 @@ impl<'tcx> GenericArg<'tcx> {\n             _ => bug!(\"expected a const, but found another kind\"),\n         }\n     }\n+\n+    pub fn is_non_region_infer(self) -> bool {\n+        match self.unpack() {\n+            GenericArgKind::Lifetime(_) => false,\n+            GenericArgKind::Type(ty) => ty.is_ty_infer(),\n+            GenericArgKind::Const(ct) => ct.is_ct_infer(),\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Lift<'tcx> for GenericArg<'a> {"}, {"sha": "91db9698c41b2ee30a4735d74f3215ca84f9c302", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -112,6 +112,22 @@ impl<'tcx> Ty<'tcx> {\n     }\n }\n \n+impl<'tcx> ty::Const<'tcx> {\n+    /// Iterator that walks `self` and any types reachable from\n+    /// `self`, in depth-first order. Note that just walks the types\n+    /// that appear in `self`, it does not descend into the fields of\n+    /// structs or variants. For example:\n+    ///\n+    /// ```text\n+    /// isize => { isize }\n+    /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }\n+    /// [isize] => { [isize], isize }\n+    /// ```\n+    pub fn walk(self) -> TypeWalker<'tcx> {\n+        TypeWalker::new(self.into())\n+    }\n+}\n+\n /// We push `GenericArg`s on the stack in reverse order so as to\n /// maintain a pre-order traversal. As of the time of this\n /// writing, the fact that the traversal is pre-order is not"}, {"sha": "81a504810613acf061ef8ecad21a4e3d239095a2", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -159,15 +159,7 @@ where\n                 ty.visit_with(self)\n             }\n             ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,\n-            ty::PredicateKind::ConstEvaluatable(uv)\n-                if self.def_id_visitor.tcx().features().generic_const_exprs =>\n-            {\n-                let tcx = self.def_id_visitor.tcx();\n-                if let Ok(Some(ct)) = AbstractConst::new(tcx, uv) {\n-                    self.visit_abstract_const_expr(tcx, ct)?;\n-                }\n-                ControlFlow::CONTINUE\n-            }\n+            ty::PredicateKind::ConstEvaluatable(ct) => ct.visit_with(self),\n             ty::PredicateKind::WellFormed(arg) => arg.visit_with(self),\n             _ => bug!(\"unexpected predicate: {:?}\", predicate),\n         }"}, {"sha": "2e5a607a9808ac953a590c95e65c9e7e37278f6d", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -161,11 +161,20 @@ pub fn try_unify_abstract_consts<'tcx>(\n #[instrument(skip(infcx), level = \"debug\")]\n pub fn is_const_evaluatable<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n-    uv: ty::UnevaluatedConst<'tcx>,\n+    ct: ty::Const<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n ) -> Result<(), NotConstEvaluatable> {\n     let tcx = infcx.tcx;\n+    let uv = match ct.kind() {\n+        ty::ConstKind::Unevaluated(uv) => uv,\n+        ty::ConstKind::Param(_)\n+        | ty::ConstKind::Bound(_, _)\n+        | ty::ConstKind::Placeholder(_)\n+        | ty::ConstKind::Value(_)\n+        | ty::ConstKind::Error(_) => return Ok(()),\n+        ty::ConstKind::Infer(_) => return Err(NotConstEvaluatable::MentionsInfer),\n+    };\n \n     if tcx.features().generic_const_exprs {\n         if let Some(ct) = AbstractConst::new(tcx, uv)? {\n@@ -285,7 +294,7 @@ fn satisfied_from_param_env<'tcx>(\n     for pred in param_env.caller_bounds() {\n         match pred.kind().skip_binder() {\n             ty::PredicateKind::ConstEvaluatable(uv) => {\n-                if let Some(b_ct) = AbstractConst::new(tcx, uv)? {\n+                if let Some(b_ct) = AbstractConst::from_const(tcx, uv)? {\n                     let const_unify_ctxt = ConstUnifyCtxt { tcx, param_env };\n \n                     // Try to unify with each subtree in the AbstractConst to allow for"}, {"sha": "382e5f0acc74ea6488d5fd95c73ff1914fe4eca2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -1304,7 +1304,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n \n                 match obligation.predicate.kind().skip_binder() {\n-                    ty::PredicateKind::ConstEvaluatable(uv) => {\n+                    ty::PredicateKind::ConstEvaluatable(ct) => {\n+                        let ty::ConstKind::Unevaluated(uv) = ct.kind() else {\n+                            bug!(\"const evaluatable failed for non-unevaluated const `{ct:?}`\");\n+                        };\n                         let mut err =\n                             self.tcx.sess.struct_span_err(span, \"unconstrained generic constant\");\n                         let const_span = self.tcx.def_span(uv.def.did);\n@@ -2368,7 +2371,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if predicate.references_error() || self.is_tainted_by_errors() {\n                     return;\n                 }\n-                let subst = data.substs.iter().find(|g| g.has_non_region_infer());\n+                let subst = data.walk().find(|g| g.is_non_region_infer());\n                 if let Some(subst) = subst {\n                     let err = self.emit_inference_failure_err(\n                         body_id,"}, {"sha": "a417e1440b9ee1f35c2281a40e25f52ccd4ca228", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -476,9 +476,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                         Err(NotConstEvaluatable::MentionsInfer) => {\n                             pending_obligation.stalled_on.clear();\n                             pending_obligation.stalled_on.extend(\n-                                uv.substs\n-                                    .iter()\n-                                    .filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n+                                uv.walk().filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                             );\n                             ProcessResult::Unchanged\n                         }"}, {"sha": "0870833cc35ae205579fb2229ce3e100eaec33b3", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660ca4804175e6220a2284b8e7441aacf10367dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=660ca4804175e6220a2284b8e7441aacf10367dd", "patch": "@@ -148,13 +148,8 @@ pub fn predicate_obligations<'tcx>(\n             wf.compute(a.into());\n             wf.compute(b.into());\n         }\n-        ty::PredicateKind::ConstEvaluatable(uv) => {\n-            let obligations = wf.nominal_obligations(uv.def.did, uv.substs);\n-            wf.out.extend(obligations);\n-\n-            for arg in uv.substs.iter() {\n-                wf.compute(arg);\n-            }\n+        ty::PredicateKind::ConstEvaluatable(ct) => {\n+            wf.compute(ct.into());\n         }\n         ty::PredicateKind::ConstEquate(c1, c2) => {\n             wf.compute(c1.into());\n@@ -476,14 +471,14 @@ impl<'tcx> WfPredicates<'tcx> {\n                 // obligations are handled by the parent (e.g. `ty::Ref`).\n                 GenericArgKind::Lifetime(_) => continue,\n \n-                GenericArgKind::Const(constant) => {\n-                    match constant.kind() {\n+                GenericArgKind::Const(ct) => {\n+                    match ct.kind() {\n                         ty::ConstKind::Unevaluated(uv) => {\n                             let obligations = self.nominal_obligations(uv.def.did, uv.substs);\n                             self.out.extend(obligations);\n \n                             let predicate =\n-                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv))\n+                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct))\n                                     .to_predicate(self.tcx());\n                             let cause = self.cause(traits::WellFormed(None));\n                             self.out.push(traits::Obligation::with_depth(\n@@ -500,7 +495,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                                 cause,\n                                 self.recursion_depth,\n                                 self.param_env,\n-                                ty::Binder::dummy(ty::PredicateKind::WellFormed(constant.into()))\n+                                ty::Binder::dummy(ty::PredicateKind::WellFormed(ct.into()))\n                                     .to_predicate(self.tcx()),\n                             ));\n                         }"}]}