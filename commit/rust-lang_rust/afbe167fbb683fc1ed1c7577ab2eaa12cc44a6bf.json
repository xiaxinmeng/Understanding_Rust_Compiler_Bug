{"sha": "afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf", "node_id": "C_kwDOAAsO6NoAKGFmYmUxNjdmYmI2ODNmYzFlZDFjNzU3N2FiMmVhYTEyY2M0NGE2YmY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-08T23:51:29Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-09T04:28:04Z"}, "message": "Avoid some `tls::with` calls.\n\nThese are in places where a `tcx` is easily obtained.", "tree": {"sha": "ad32818d90f37017dc6bca3c39bea287c8b4c4af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad32818d90f37017dc6bca3c39bea287c8b4c4af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf", "html_url": "https://github.com/rust-lang/rust/commit/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f751df6adc6342ee0814dd6bc36bf867ff0029", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f751df6adc6342ee0814dd6bc36bf867ff0029", "html_url": "https://github.com/rust-lang/rust/commit/18f751df6adc6342ee0814dd6bc36bf867ff0029"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "b4a49e1df610c8bedd90e7712dfd8c5b674faebe", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf", "patch": "@@ -54,7 +54,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n     trace!(\n         \"eval_body_using_ecx: pushing stack frame for global: {}{}\",\n-        with_no_trimmed_paths!(ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id()))),\n+        with_no_trimmed_paths!(ecx.tcx.def_path_str(cid.instance.def_id())),\n         cid.promoted.map_or_else(String::new, |p| format!(\"::promoted[{:?}]\", p))\n     );\n "}, {"sha": "1e2441d984ad6cf9f30634fb44d7d43092b88c26", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf", "patch": "@@ -203,12 +203,10 @@ impl CanonicalizeMode for CanonicalizeQueryResponse {\n                 // rust-lang/rust#57464: `impl Trait` can leak local\n                 // scopes (in manner violating typeck). Therefore, use\n                 // `delay_span_bug` to allow type error over an ICE.\n-                ty::tls::with(|tcx| {\n-                    tcx.sess.delay_span_bug(\n-                        rustc_span::DUMMY_SP,\n-                        &format!(\"unexpected region in query response: `{:?}`\", r),\n-                    );\n-                });\n+                canonicalizer.tcx.sess.delay_span_bug(\n+                    rustc_span::DUMMY_SP,\n+                    &format!(\"unexpected region in query response: `{:?}`\", r),\n+                );\n                 r\n             }\n         }"}, {"sha": "2b543520198fb5280fb25a70f1e45e2a4b4c7fd2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=afbe167fbb683fc1ed1c7577ab2eaa12cc44a6bf", "patch": "@@ -98,6 +98,7 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n     // obligation\n     fn get_from_await_ty<F>(\n         &self,\n+        tcx: TyCtxt<'tcx>,\n         visitor: AwaitsVisitor,\n         hir: map::Map<'tcx>,\n         ty_matches: F,\n@@ -134,9 +135,7 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n                                         .unwrap_or_else(|| {\n                                             bug!(\n                                                 \"node_type: no type for node {}\",\n-                                                ty::tls::with(|tcx| tcx\n-                                                    .hir()\n-                                                    .node_to_string(await_expr.hir_id))\n+                                                tcx.hir().node_to_string(await_expr.hir_id)\n                                             )\n                                         })\n                                 },\n@@ -2351,7 +2350,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         let mut interior_or_upvar_span = None;\n \n-        let from_awaited_ty = generator_data.get_from_await_ty(visitor, hir, ty_matches);\n+        let from_awaited_ty = generator_data.get_from_await_ty(self.tcx, visitor, hir, ty_matches);\n         debug!(?from_awaited_ty);\n \n         // The generator interior types share the same binders"}]}