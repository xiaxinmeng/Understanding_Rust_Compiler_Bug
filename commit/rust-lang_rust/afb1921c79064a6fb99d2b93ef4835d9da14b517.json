{"sha": "afb1921c79064a6fb99d2b93ef4835d9da14b517", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYjE5MjFjNzkwNjRhNmZiOTlkMmI5M2VmNDgzNWQ5ZGExNGI1MTc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-01-13T23:07:42Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-02-01T14:43:55Z"}, "message": "Fixup code", "tree": {"sha": "f9f265fd1e05cee346985751e0a10d33a3a1d176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9f265fd1e05cee346985751e0a10d33a3a1d176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afb1921c79064a6fb99d2b93ef4835d9da14b517", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlxUWysACgkQtAh+UQ6Y\nsWRQKhAApgtfKiMyKAFTjTRPfKvoN5/uBOo8mxin/Br1vBPY64IcsoswCBsxoTxV\n92IJLp/wA8bWPxDcnFS2BpPc75a+K6QKGIpaBlEdpeE0vcIr4Dvg2OszBYccvV2o\nh2hIfGb9d6ZxZDt4jb/2+Mvc/xztHlVMZ3a5tUma/1xfP+PZYZzsCiIXnr45pDLf\ni5X/S6HWT2GDuoPDESOxgWGqZ6cHXngIcu5n1iPpWa5zghf1q4lP6XAnXKtuDUUn\npwls2YuCb7wxxWSw8hxoxfhIZqCK9dbX7YGz5vgt3eE+WtDdK0LqZ4q4JiBE4kjA\nql59QlafMYo9u7IlnKMaFZPISrBrfSdohWgtKS5XM7yls+7waZF/avYXOgw2ISFA\nlEnJwehQ4D5Nau0T6FLOLtah31wdl5kQaP2q+chAhryg77tDy2OxUCIN7Kb3bWJC\nncZv+V5ZrnKMgGRClhBn+ZHBZgQ4uEBYYQ5bI1heQ4vL3asrmmXfUc1hs6fbyD7u\nLuEEow2eTPN/1/rk9+HEGot2OpZSOkHS43xEFK7QJGDWX6g1wy7vnTUo2n7riJIj\nZOYUju/FaFgwuXhg+FBlyx+10l3KNHDUWyAfO2aopFHUxrG+hxgKkuAvUozvHRlu\nW4I0rL2S/hTkWBEfQnFpR/b6Jx/XDF/F7xU5COAFcNmyFQUT6SY=\n=EVE/\n-----END PGP SIGNATURE-----", "payload": "tree f9f265fd1e05cee346985751e0a10d33a3a1d176\nparent 09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e\nauthor Aaron Hill <aa1ronham@gmail.com> 1547420862 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1549032235 -0500\n\nFixup code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afb1921c79064a6fb99d2b93ef4835d9da14b517", "html_url": "https://github.com/rust-lang/rust/commit/afb1921c79064a6fb99d2b93ef4835d9da14b517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afb1921c79064a6fb99d2b93ef4835d9da14b517/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e", "html_url": "https://github.com/rust-lang/rust/commit/09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e"}], "stats": {"total": 105, "additions": 21, "deletions": 84}, "files": [{"sha": "1ac2dfe25c395fbda0659cc57740bdef531a3b1e", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afb1921c79064a6fb99d2b93ef4835d9da14b517/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/afb1921c79064a6fb99d2b93ef4835d9da14b517/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=afb1921c79064a6fb99d2b93ef4835d9da14b517", "patch": "@@ -2878,6 +2878,7 @@ dependencies = [\n name = \"rustc_privacy\"\n version = \"0.0.0\"\n dependencies = [\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_typeck 0.0.0\","}, {"sha": "f37d0ce426003da89be3caeb4dff426e51b912e3", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 20, "deletions": 84, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/afb1921c79064a6fb99d2b93ef4835d9da14b517/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb1921c79064a6fb99d2b93ef4835d9da14b517/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=afb1921c79064a6fb99d2b93ef4835d9da14b517", "patch": "@@ -1495,6 +1495,16 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     }\n \n     fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n+        if self.leaks_private_dep(def_id) {\n+            self.tcx.lint_node(lint::builtin::LEAKED_PRIVATE_DEPENDENCY,\n+                               self.item_id,\n+                               self.span,\n+                               &format!(\"{} `{}` from private dependency '{}' in public \\\n+                                         interface\", kind, descr,\n+                                         self.tcx.crate_name(def_id.krate)));\n+\n+        }\n+\n         let node_id = match self.tcx.hir().as_local_node_id(def_id) {\n             Some(node_id) => node_id,\n             None => return false,\n@@ -1520,16 +1530,7 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n \n         }\n \n-        if self.leaks_private_dep(trait_ref.def_id) {\n-            self.tcx.lint_node(lint::builtin::LEAKED_PRIVATE_DEPENDENCY,\n-                               self.item_id,\n-                               self.span,\n-                               &format!(\"trait `{}` from private dependency '{}' in public \\\n-                                         interface\", trait_ref,\n-                                         self.tcx.crate_name(trait_ref.def_id.krate)));\n-\n-        }\n-\n+        false\n     }\n \n     /// An item is 'leaked' from a private dependency if all\n@@ -1551,80 +1552,6 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n-        let ty_def_id = match ty.sty {\n-            ty::Adt(adt, _) => Some(adt.did),\n-            ty::Foreign(did) => Some(did),\n-            ty::Dynamic(ref obj, ..) => Some(obj.principal().def_id()),\n-            ty::Projection(ref proj) => {\n-                if self.required_visibility == ty::Visibility::Invisible {\n-                    // Conservatively approximate the whole type alias as public without\n-                    // recursing into its components when determining impl publicity.\n-                    // For example, `impl <Type as Trait>::Alias {...}` may be a public impl\n-                    // even if both `Type` and `Trait` are private.\n-                    // Ideally, associated types should be substituted in the same way as\n-                    // free type aliases, but this isn't done yet.\n-                    return false;\n-                }\n-                let trait_ref = proj.trait_ref(self.tcx);\n-                Some(trait_ref.def_id)\n-            }\n-            _ => None\n-        };\n-\n-        if let Some(def_id) = ty_def_id {\n-            // Non-local means public (private items can't leave their crate, modulo bugs).\n-            if let Some(node_id) = self.tcx.hir().as_local_node_id(def_id) {\n-                let hir_vis = match self.tcx.hir().find(node_id) {\n-                    Some(Node::Item(item)) => &item.vis,\n-                    Some(Node::ForeignItem(item)) => &item.vis,\n-                    _ => bug!(\"expected item of foreign item\"),\n-                };\n-\n-                let vis = ty::Visibility::from_hir(hir_vis, node_id, self.tcx);\n-\n-                if !vis.is_at_least(self.min_visibility, self.tcx) {\n-                    self.min_visibility = vis;\n-                }\n-                if !vis.is_at_least(self.required_visibility, self.tcx) {\n-                    let vis_adj = match hir_vis.node {\n-                        hir::VisibilityKind::Crate(_) => \"crate-visible\",\n-                        hir::VisibilityKind::Restricted { .. } => \"restricted\",\n-                        _ => \"private\"\n-                    };\n-\n-                    if self.has_pub_restricted || self.has_old_errors || self.in_assoc_ty {\n-                        let mut err = struct_span_err!(self.tcx.sess, self.span, E0446,\n-                            \"{} type `{}` in public interface\", vis_adj, ty);\n-                        err.span_label(self.span, format!(\"can't leak {} type\", vis_adj));\n-                        err.span_label(hir_vis.span, format!(\"`{}` declared as {}\", ty, vis_adj));\n-                        err.emit();\n-                    } else {\n-                        self.tcx.lint_node(lint::builtin::PRIVATE_IN_PUBLIC,\n-                                           node_id,\n-                                           self.span,\n-                                           &format!(\"{} type `{}` in public \\\n-                                                     interface (error E0446)\", vis_adj, ty));\n-                    }\n-                }\n-\n-            }\n-\n-            if self.leaks_private_dep(def_id) {\n-                self.tcx.lint_node(lint::builtin::LEAKED_PRIVATE_DEPENDENCY,\n-                                   self.item_id,\n-                                   self.span,\n-                                   &format!(\"type '{}' from private dependency '{}' in \\\n-                                            public interface\", ty,\n-                                            self.tcx.crate_name(def_id.krate)));\n-            }\n-\n-        }\n-\n-        ty.super_visit_with(self)\n-    }\n-}\n \n /*struct LeakedPrivateDependenciesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -1649,6 +1576,15 @@ impl<'a, 'tcx> Visitor<'tcx> for LeakedPrivateDependenciesVisitor<'a, 'tcx> {\n \n }*/\n \n+\n+\n+impl<'a, 'tcx> DefIdVisitor<'a, 'tcx> for SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n+    fn visit_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n+        self.check_def_id(def_id, kind, descr)\n+    }\n+}\n+\n struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     has_pub_restricted: bool,"}]}