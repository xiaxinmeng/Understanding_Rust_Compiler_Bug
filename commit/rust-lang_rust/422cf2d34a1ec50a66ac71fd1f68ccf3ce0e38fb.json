{"sha": "422cf2d34a1ec50a66ac71fd1f68ccf3ce0e38fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMmNmMmQzNGExZWM1MGE2NmFjNzFmZDFmNjhjY2YzY2UwZTM4ZmI=", "commit": {"author": {"name": "Andrew Barchuk", "email": "raindev@icloud.com", "date": "2016-02-07T21:00:01Z"}, "committer": {"name": "Andrew Barchuk", "email": "raindev@icloud.com", "date": "2016-02-07T21:08:46Z"}, "message": "Clean up Error Handling case study examples\n\nRemove unnecessary cloning and conversions. Expand tabs left in examples.", "tree": {"sha": "032a589e82df65ae8e7a6f099048383dc4108654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/032a589e82df65ae8e7a6f099048383dc4108654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/422cf2d34a1ec50a66ac71fd1f68ccf3ce0e38fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/422cf2d34a1ec50a66ac71fd1f68ccf3ce0e38fb", "html_url": "https://github.com/rust-lang/rust/commit/422cf2d34a1ec50a66ac71fd1f68ccf3ce0e38fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/422cf2d34a1ec50a66ac71fd1f68ccf3ce0e38fb/comments", "author": {"login": "raindev", "id": 4586410, "node_id": "MDQ6VXNlcjQ1ODY0MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4586410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raindev", "html_url": "https://github.com/raindev", "followers_url": "https://api.github.com/users/raindev/followers", "following_url": "https://api.github.com/users/raindev/following{/other_user}", "gists_url": "https://api.github.com/users/raindev/gists{/gist_id}", "starred_url": "https://api.github.com/users/raindev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raindev/subscriptions", "organizations_url": "https://api.github.com/users/raindev/orgs", "repos_url": "https://api.github.com/users/raindev/repos", "events_url": "https://api.github.com/users/raindev/events{/privacy}", "received_events_url": "https://api.github.com/users/raindev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "raindev", "id": 4586410, "node_id": "MDQ6VXNlcjQ1ODY0MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4586410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raindev", "html_url": "https://github.com/raindev", "followers_url": "https://api.github.com/users/raindev/followers", "following_url": "https://api.github.com/users/raindev/following{/other_user}", "gists_url": "https://api.github.com/users/raindev/gists{/gist_id}", "starred_url": "https://api.github.com/users/raindev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raindev/subscriptions", "organizations_url": "https://api.github.com/users/raindev/orgs", "repos_url": "https://api.github.com/users/raindev/repos", "events_url": "https://api.github.com/users/raindev/events{/privacy}", "received_events_url": "https://api.github.com/users/raindev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f50fb159e97eee82b4ff6abaa4003a49d6fe680f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f50fb159e97eee82b4ff6abaa4003a49d6fe680f", "html_url": "https://github.com/rust-lang/rust/commit/f50fb159e97eee82b4ff6abaa4003a49d6fe680f"}], "stats": {"total": 89, "additions": 44, "deletions": 45}, "files": [{"sha": "affea7926a2f92524ed3e3bfe32ab30848cc5bae", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 44, "deletions": 45, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/422cf2d34a1ec50a66ac71fd1f68ccf3ce0e38fb/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/422cf2d34a1ec50a66ac71fd1f68ccf3ce0e38fb/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=422cf2d34a1ec50a66ac71fd1f68ccf3ce0e38fb", "patch": "@@ -1592,7 +1592,7 @@ fn print_usage(program: &str, opts: Options) {\n \n fn main() {\n     let args: Vec<String> = env::args().collect();\n-    let program = args[0].clone();\n+    let program = &args[0];\n \n     let mut opts = Options::new();\n     opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n@@ -1605,10 +1605,10 @@ fn main() {\n         print_usage(&program, opts);\n         return;\n     }\n-    let data_path = args[1].clone();\n-    let city = args[2].clone();\n+    let data_path = &args[1];\n+    let city = &args[2];\n \n-\t// Do stuff with information\n+    // Do stuff with information\n }\n ```\n \n@@ -1640,7 +1640,6 @@ sure to add `extern crate csv;` to the top of your file.)\n \n ```rust,ignore\n use std::fs::File;\n-use std::path::Path;\n \n // This struct represents the data in each row of the CSV file.\n // Type based decoding absolves us of a lot of the nitty gritty error\n@@ -1666,7 +1665,7 @@ fn print_usage(program: &str, opts: Options) {\n \n fn main() {\n     let args: Vec<String> = env::args().collect();\n-    let program = args[0].clone();\n+    let program = &args[0];\n \n     let mut opts = Options::new();\n     opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n@@ -1678,25 +1677,24 @@ fn main() {\n \n     if matches.opt_present(\"h\") {\n         print_usage(&program, opts);\n-\t\treturn;\n-\t}\n+        return;\n+    }\n \n-\tlet data_file = args[1].clone();\n-\tlet data_path = Path::new(&data_file);\n-\tlet city = args[2].clone();\n+    let data_path = &args[1];\n+    let city: &str = &args[2];\n \n-\tlet file = File::open(data_path).unwrap();\n-\tlet mut rdr = csv::Reader::from_reader(file);\n+    let file = File::open(data_path).unwrap();\n+    let mut rdr = csv::Reader::from_reader(file);\n \n-\tfor row in rdr.decode::<Row>() {\n-\t\tlet row = row.unwrap();\n+    for row in rdr.decode::<Row>() {\n+        let row = row.unwrap();\n \n-\t\tif row.city == city {\n-\t\t\tprintln!(\"{}, {}: {:?}\",\n-\t\t\t\trow.city, row.country,\n-\t\t\t\trow.population.expect(\"population count\"));\n-\t\t}\n-\t}\n+        if row.city == city {\n+            println!(\"{}, {}: {:?}\",\n+                row.city, row.country,\n+                row.population.expect(\"population count\"));\n+        }\n+    }\n }\n ```\n \n@@ -1745,6 +1743,8 @@ Note that we opt to handle the possibility of a missing population count by\n simply ignoring that row.\n \n ```rust,ignore\n+use std::path::Path;\n+\n struct Row {\n     // unchanged\n }\n@@ -1782,27 +1782,26 @@ fn search<P: AsRef<Path>>(file_path: P, city: &str) -> Vec<PopulationCount> {\n }\n \n fn main() {\n-\tlet args: Vec<String> = env::args().collect();\n-\tlet program = args[0].clone();\n+    let args: Vec<String> = env::args().collect();\n+    let program = &args[0];\n \n-\tlet mut opts = Options::new();\n-\topts.optflag(\"h\", \"help\", \"Show this usage message.\");\n+    let mut opts = Options::new();\n+    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n \n-\tlet matches = match opts.parse(&args[1..]) {\n-\t\tOk(m)  => { m }\n-\t\tErr(e) => { panic!(e.to_string()) }\n-\t};\n-\tif matches.opt_present(\"h\") {\n-\t\tprint_usage(&program, opts);\n-\t\treturn;\n-\t}\n+    let matches = match opts.parse(&args[1..]) {\n+        Ok(m)  => { m }\n+        Err(e) => { panic!(e.to_string()) }\n+    };\n+    if matches.opt_present(\"h\") {\n+        print_usage(&program, opts);\n+        return;\n+    }\n \n-\tlet data_file = args[1].clone();\n-\tlet data_path = Path::new(&data_file);\n-\tlet city = args[2].clone();\n-\tfor pop in search(&data_path, &city) {\n-\t\tprintln!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n-\t}\n+    let data_path = &args[1];\n+    let city = &args[2];\n+    for pop in search(data_path, city) {\n+        println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n+    }\n }\n \n ```\n@@ -1912,7 +1911,7 @@ First, here's the new usage:\n \n ```rust,ignore\n fn print_usage(program: &str, opts: Options) {\n-\tprintln!(\"{}\", opts.usage(&format!(\"Usage: {} [options] <city>\", program)));\n+    println!(\"{}\", opts.usage(&format!(\"Usage: {} [options] <city>\", program)));\n }\n ```\n The next part is going to be only a little harder:\n@@ -1924,16 +1923,16 @@ opts.optopt(\"f\", \"file\", \"Choose an input file, instead of using STDIN.\", \"NAME\"\n opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n ...\n let file = matches.opt_str(\"f\");\n-let data_file = file.as_ref().map(Path::new);\n+let data_file = &file.as_ref().map(Path::new);\n \n let city = if !matches.free.is_empty() {\n-\tmatches.free[0].clone()\n+    &matches.free[0]\n } else {\n-\tprint_usage(&program, opts);\n-\treturn;\n+    print_usage(&program, opts);\n+    return;\n };\n \n-match search(&data_file, &city) {\n+match search(data_file, city) {\n     Ok(pops) => {\n         for pop in pops {\n             println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);"}]}