{"sha": "72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYjlhZTJhMTBiMTNhMjA5ZjA5YzVhY2UwYTdiOTc2M2I3NDBlNjI=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-03-07T14:33:27Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-04-15T15:18:12Z"}, "message": "Use only check_expr with parent expr and precedence", "tree": {"sha": "2cb22bc26979a8d58a821d75650391d4002638de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb22bc26979a8d58a821d75650391d4002638de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "html_url": "https://github.com/rust-lang/rust/commit/72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6d43305502f15d3c3e1a49f488eedc5ce330b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d43305502f15d3c3e1a49f488eedc5ce330b4f", "html_url": "https://github.com/rust-lang/rust/commit/b6d43305502f15d3c3e1a49f488eedc5ce330b4f"}], "stats": {"total": 179, "additions": 79, "deletions": 100}, "files": [{"sha": "2c4bb42566d062a90e06b6efc205501efa9cb5a1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "patch": "@@ -1256,7 +1256,7 @@ Released 2018-09-13\n [`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n [`expl_impl_clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#expl_impl_clone_on_copy\n [`explicit_counter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop\n-[`explicit_deref_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_deref_method\n+[`explicit_deref_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_deref_methods\n [`explicit_into_iter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_into_iter_loop\n [`explicit_iter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop\n [`explicit_write`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_write"}, {"sha": "f5d82c549163cb07926195a4dd418f0a5752893e", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 28, "deletions": 75, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "patch": "@@ -1,10 +1,8 @@\n-use crate::utils::{\n-    get_parent_expr, get_trait_def_id, implements_trait, method_calls, paths, snippet, span_lint_and_sugg,\n-};\n+use crate::utils::{get_parent_expr, implements_trait, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc_ast::util::parser::ExprPrecedence;\n use rustc_errors::Applicability;\n-use rustc_hir as hir;\n-use rustc_hir::{Expr, ExprKind, QPath, StmtKind};\n+use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -31,100 +29,52 @@ declare_clippy_lint! {\n     /// ```rust,ignore\n     /// let _ = d.unwrap().deref();\n     /// ```\n-    pub EXPLICIT_DEREF_METHOD,\n+    pub EXPLICIT_DEREF_METHODS,\n     pedantic,\n     \"Explicit use of deref or deref_mut method while not in a method chain.\"\n }\n \n declare_lint_pass!(Dereferencing => [\n-    EXPLICIT_DEREF_METHOD\n+    EXPLICIT_DEREF_METHODS\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Dereferencing {\n-    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if_chain! {\n-            if let StmtKind::Local(ref local) = stmt.kind;\n-            if let Some(ref init) = local.init;\n-\n-            then {\n-                match init.kind {\n-                    ExprKind::Call(ref _method, args) => {\n-                        for arg in args {\n-                            if_chain! {\n-                                // Caller must call only one other function (deref or deref_mut)\n-                                // otherwise it can lead to error prone suggestions (ie: &*a.len())\n-                                let (method_names, arg_list, _) = method_calls(arg, 2);\n-                                if method_names.len() == 1;\n-                                // Caller must be a variable\n-                                let variables = arg_list[0];\n-                                if variables.len() == 1;\n-                                if let ExprKind::Path(QPath::Resolved(None, _)) = variables[0].kind;\n-\n-                                then {\n-                                    let name = method_names[0].as_str();\n-                                    lint_deref(cx, &*name, &variables[0], variables[0].span, arg.span);\n-                                }\n-                            }\n-                        }\n-                    }\n-                    ExprKind::MethodCall(ref method_name, _, ref args) => {\n-                        if init.span.from_expansion() {\n-                            return;\n-                        }\n-                        if_chain! {\n-                            if args.len() == 1;\n-                            if let ExprKind::Path(QPath::Resolved(None, _)) = args[0].kind;\n-                            // Caller must call only one other function (deref or deref_mut)\n-                            // otherwise it can lead to error prone suggestions (ie: &*a.len())\n-                            let (method_names, arg_list, _) = method_calls(init, 2);\n-                            if method_names.len() == 1;\n-                            // Caller must be a variable\n-                            let variables = arg_list[0];\n-                            if variables.len() == 1;\n-                            if let ExprKind::Path(QPath::Resolved(None, _)) = variables[0].kind;\n-\n-                            then {\n-                                let name = method_name.ident.as_str();\n-                                lint_deref(cx, &*name, init, args[0].span, init.span);\n-                            }\n-                        }\n-                    }\n-                    _ => ()\n-                }\n-            }\n-        }\n-    }\n-\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n+            if !expr.span.from_expansion();\n             if let ExprKind::MethodCall(ref method_name, _, ref args) = &expr.kind;\n             if args.len() == 1;\n-            if let ExprKind::Path(QPath::Resolved(None, _)) = args[0].kind;\n-            if let Some(parent) = get_parent_expr(cx, &expr);\n \n             then {\n-                match parent.kind {\n-                    // Already linted using statements\n-                    ExprKind::Call(_, _) | ExprKind::MethodCall(_, _, _) => (),\n-                    _ => {\n-                        let name = method_name.ident.as_str();\n-                        lint_deref(cx, &*name, &args[0], args[0].span, expr.span);\n+                if let Some(parent_expr) = get_parent_expr(cx, expr) {\n+                    // Check if we have the whole call chain here\n+                    if let ExprKind::MethodCall(..) = parent_expr.kind {\n+                        return;\n+                    }\n+                    // Check for unary precedence\n+                    if let ExprPrecedence::Unary = parent_expr.precedence() {\n+                        return;\n                     }\n                 }\n+                let name = method_name.ident.as_str();\n+                lint_deref(cx, &*name, &args[0], args[0].span, expr.span);\n             }\n         }\n     }\n }\n \n-fn lint_deref(cx: &LateContext<'_, '_>, fn_name: &str, call_expr: &Expr<'_>, var_span: Span, expr_span: Span) {\n-    match fn_name {\n+fn lint_deref(cx: &LateContext<'_, '_>, method_name: &str, call_expr: &Expr<'_>, var_span: Span, expr_span: Span) {\n+    match method_name {\n         \"deref\" => {\n-            if get_trait_def_id(cx, &paths::DEREF_TRAIT)\n+            if cx\n+                .tcx\n+                .lang_items()\n+                .deref_trait()\n                 .map_or(false, |id| implements_trait(cx, cx.tables.expr_ty(&call_expr), id, &[]))\n             {\n                 span_lint_and_sugg(\n                     cx,\n-                    EXPLICIT_DEREF_METHOD,\n+                    EXPLICIT_DEREF_METHODS,\n                     expr_span,\n                     \"explicit deref method call\",\n                     \"try this\",\n@@ -134,12 +84,15 @@ fn lint_deref(cx: &LateContext<'_, '_>, fn_name: &str, call_expr: &Expr<'_>, var\n             }\n         },\n         \"deref_mut\" => {\n-            if get_trait_def_id(cx, &paths::DEREF_MUT_TRAIT)\n+            if cx\n+                .tcx\n+                .lang_items()\n+                .deref_mut_trait()\n                 .map_or(false, |id| implements_trait(cx, cx.tables.expr_ty(&call_expr), id, &[]))\n             {\n                 span_lint_and_sugg(\n                     cx,\n-                    EXPLICIT_DEREF_METHOD,\n+                    EXPLICIT_DEREF_METHODS,\n                     expr_span,\n                     \"explicit deref_mut method call\",\n                     \"try this\","}, {"sha": "b6b6a0e7d21fbdfbd6119d8b53bb1f640ff7de50", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "patch": "@@ -513,7 +513,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &copy_iterator::COPY_ITERATOR,\n         &dbg_macro::DBG_MACRO,\n         &default_trait_access::DEFAULT_TRAIT_ACCESS,\n-        &dereference::EXPLICIT_DEREF_METHOD,\n+        &dereference::EXPLICIT_DEREF_METHODS,\n         &derive::DERIVE_HASH_XOR_EQ,\n         &derive::EXPL_IMPL_CLONE_ON_COPY,\n         &doc::DOC_MARKDOWN,\n@@ -1091,7 +1091,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n         LintId::of(&copy_iterator::COPY_ITERATOR),\n         LintId::of(&default_trait_access::DEFAULT_TRAIT_ACCESS),\n-        LintId::of(&dereference::EXPLICIT_DEREF_METHOD),\n+        LintId::of(&dereference::EXPLICIT_DEREF_METHODS),\n         LintId::of(&derive::EXPL_IMPL_CLONE_ON_COPY),\n         LintId::of(&doc::DOC_MARKDOWN),\n         LintId::of(&doc::MISSING_ERRORS_DOC),"}, {"sha": "d93f8a1e5609c47379daac3b54a2cb3c6476124d", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "patch": "@@ -25,9 +25,7 @@ pub const CSTRING: [&str; 4] = [\"std\", \"ffi\", \"c_str\", \"CString\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n-pub const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n pub const DEREF_MUT_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"DerefMut\", \"deref_mut\"];\n-pub const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];"}, {"sha": "1d147e01066fca91a52b619eac62c2492e4c5bb2", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "patch": "@@ -529,7 +529,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         module: \"loops\",\n     },\n     Lint {\n-        name: \"explicit_deref_method\",\n+        name: \"explicit_deref_methods\",\n         group: \"pedantic\",\n         desc: \"Explicit use of deref or deref_mut method while not in a method chain.\",\n         deprecation: None,"}, {"sha": "51e3d512cdba9e5ae75a3c59013cb6826da40a20", "filename": "tests/ui/dereference.fixed", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/tests%2Fui%2Fdereference.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/tests%2Fui%2Fdereference.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.fixed?ref=72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![allow(unused_variables, clippy::many_single_char_names, clippy::clone_double_ref)]\n-#![warn(clippy::explicit_deref_method)]\n+#![warn(clippy::explicit_deref_methods)]\n \n use std::ops::{Deref, DerefMut};\n \n@@ -34,20 +34,25 @@ fn main() {\n \n     let b: String = concat(&*a);\n \n-    // following should not require linting\n+    let b = &*just_return(a);\n+\n+    let b: String = concat(&*just_return(a));\n \n-    let b = just_return(a).deref();\n+    let b: &str = &*a.deref();\n \n-    let b: String = concat(just_return(a).deref());\n+    let opt_a = Some(a.clone());\n+    let b = &*opt_a.unwrap();\n+\n+    // following should not require linting\n+\n+    let b: &str = &*a.deref();\n \n     let b: String = a.deref().clone();\n \n     let b: usize = a.deref_mut().len();\n \n     let b: &usize = &a.deref().len();\n \n-    let b: &str = a.deref().deref();\n-\n     let b: &str = &*a;\n \n     let b: &mut str = &mut *a;\n@@ -59,9 +64,6 @@ fn main() {\n     }\n     let b: &str = expr_deref!(a);\n \n-    let opt_a = Some(a);\n-    let b = opt_a.unwrap().deref();\n-\n     // The struct does not implement Deref trait\n     #[derive(Copy, Clone)]\n     struct NoLint(u32);"}, {"sha": "3a595337411215097983ba2785f2b7da17f0680f", "filename": "tests/ui/dereference.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/tests%2Fui%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/tests%2Fui%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.rs?ref=72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![allow(unused_variables, clippy::many_single_char_names, clippy::clone_double_ref)]\n-#![warn(clippy::explicit_deref_method)]\n+#![warn(clippy::explicit_deref_methods)]\n \n use std::ops::{Deref, DerefMut};\n \n@@ -34,20 +34,25 @@ fn main() {\n \n     let b: String = concat(a.deref());\n \n-    // following should not require linting\n-\n     let b = just_return(a).deref();\n \n     let b: String = concat(just_return(a).deref());\n \n+    let b: &str = a.deref().deref();\n+\n+    let opt_a = Some(a.clone());\n+    let b = opt_a.unwrap().deref();\n+\n+    // following should not require linting\n+\n+    let b: &str = &*a.deref();\n+\n     let b: String = a.deref().clone();\n \n     let b: usize = a.deref_mut().len();\n \n     let b: &usize = &a.deref().len();\n \n-    let b: &str = a.deref().deref();\n-\n     let b: &str = &*a;\n \n     let b: &mut str = &mut *a;\n@@ -59,9 +64,6 @@ fn main() {\n     }\n     let b: &str = expr_deref!(a);\n \n-    let opt_a = Some(a);\n-    let b = opt_a.unwrap().deref();\n-\n     // The struct does not implement Deref trait\n     #[derive(Copy, Clone)]\n     struct NoLint(u32);"}, {"sha": "d159214db2ffcd7dd2972e3a14dce61ac871faa0", "filename": "tests/ui/dereference.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/tests%2Fui%2Fdereference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72b9ae2a10b13a209f09c5ace0a7b9763b740e62/tests%2Fui%2Fdereference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.stderr?ref=72b9ae2a10b13a209f09c5ace0a7b9763b740e62", "patch": "@@ -4,7 +4,7 @@ error: explicit deref method call\n LL |     let b: &str = a.deref();\n    |                   ^^^^^^^^^ help: try this: `&*a`\n    |\n-   = note: `-D clippy::explicit-deref-method` implied by `-D warnings`\n+   = note: `-D clippy::explicit-deref-methods` implied by `-D warnings`\n \n error: explicit deref_mut method call\n   --> $DIR/dereference.rs:23:23\n@@ -42,5 +42,29 @@ error: explicit deref method call\n LL |     let b: String = concat(a.deref());\n    |                            ^^^^^^^^^ help: try this: `&*a`\n \n-error: aborting due to 7 previous errors\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:37:13\n+   |\n+LL |     let b = just_return(a).deref();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*just_return(a)`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:39:28\n+   |\n+LL |     let b: String = concat(just_return(a).deref());\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*just_return(a)`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:41:19\n+   |\n+LL |     let b: &str = a.deref().deref();\n+   |                   ^^^^^^^^^^^^^^^^^ help: try this: `&*a.deref()`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:44:13\n+   |\n+LL |     let b = opt_a.unwrap().deref();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*opt_a.unwrap()`\n+\n+error: aborting due to 11 previous errors\n "}]}