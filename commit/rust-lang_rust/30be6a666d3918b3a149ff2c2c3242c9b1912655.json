{"sha": "30be6a666d3918b3a149ff2c2c3242c9b1912655", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYmU2YTY2NmQzOTE4YjNhMTQ5ZmYyYzJjMzI0MmM5YjE5MTI2NTU=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-01-22T16:06:34Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-01-22T18:06:20Z"}, "message": "Use cold functions for panic formatting Option::expect, Result::unwrap etc\n\nOption::expect, Result::unwrap, unwrap_err, expect\n\nThese methods are marked inline, but insert a big chunk of formatting\ncode, as well as other error path related code, such as deallocating\na std::io::Error if you have one.\n\nWe can explicitly separate out that code path into a function that is\nnever inline, since the panicking case should always be rare.", "tree": {"sha": "df478a4eceb06545206cde7b3c7863e8e66f7a86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df478a4eceb06545206cde7b3c7863e8e66f7a86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30be6a666d3918b3a149ff2c2c3242c9b1912655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30be6a666d3918b3a149ff2c2c3242c9b1912655", "html_url": "https://github.com/rust-lang/rust/commit/30be6a666d3918b3a149ff2c2c3242c9b1912655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30be6a666d3918b3a149ff2c2c3242c9b1912655/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46dcffd05b46e62c27629f4231fc794e94e614a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/46dcffd05b46e62c27629f4231fc794e94e614a8", "html_url": "https://github.com/rust-lang/rust/commit/46dcffd05b46e62c27629f4231fc794e94e614a8"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "7174661d2814fd4a8c275625c8b974a3edea51b9", "filename": "src/libcore/option.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30be6a666d3918b3a149ff2c2c3242c9b1912655/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30be6a666d3918b3a149ff2c2c3242c9b1912655/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=30be6a666d3918b3a149ff2c2c3242c9b1912655", "patch": "@@ -295,10 +295,16 @@ impl<T> Option<T> {\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n             Some(val) => val,\n-            None => panic!(\"{}\", msg),\n+            None => Self::expect_failed(msg),\n         }\n     }\n \n+    #[inline(never)]\n+    #[cold]\n+    fn expect_failed(msg: &str) -> ! {\n+        panic!(\"{}\", msg)\n+    }\n+\n     /// Moves the value `v` out of the `Option<T>` if it is `Some(v)`.\n     ///\n     /// # Panics"}, {"sha": "b91cc1b3e6a782657c688e64197102d03f68758e", "filename": "src/libcore/result.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/30be6a666d3918b3a149ff2c2c3242c9b1912655/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30be6a666d3918b3a149ff2c2c3242c9b1912655/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=30be6a666d3918b3a149ff2c2c3242c9b1912655", "patch": "@@ -684,11 +684,16 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     pub fn unwrap(self) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) =>\n-                panic!(\"called `Result::unwrap()` on an `Err` value: {:?}\", e)\n+            Err(e) => Self::unwrap_failed(e),\n         }\n     }\n \n+    #[inline(never)]\n+    #[cold]\n+    fn unwrap_failed(error: E) -> ! {\n+        panic!(\"called `Result::unwrap()` on an `Err` value: {:?}\", error)\n+    }\n+\n     /// Unwraps a result, yielding the content of an `Ok`.\n     ///\n     /// # Panics\n@@ -706,9 +711,15 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) => panic!(\"{}: {:?}\", msg, e),\n+            Err(e) => Self::expect_failed(msg, e),\n         }\n     }\n+\n+    #[inline(never)]\n+    #[cold]\n+    fn expect_failed(msg: &str, error: E) -> ! {\n+        panic!(\"{}: {:?}\", msg, error)\n+    }\n }\n \n impl<T: fmt::Debug, E> Result<T, E> {\n@@ -734,11 +745,17 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap_err(self) -> E {\n         match self {\n-            Ok(t) =>\n-                panic!(\"called `Result::unwrap_err()` on an `Ok` value: {:?}\", t),\n-            Err(e) => e\n+            Ok(t) => Self::unwrap_err_failed(t),\n+            Err(e) => e,\n         }\n     }\n+\n+    #[inline(never)]\n+    #[cold]\n+    fn unwrap_err_failed(t: T) -> ! {\n+        panic!(\"called `Result::unwrap_err()` on an `Ok` value: {:?}\", t)\n+    }\n+\n }\n \n /////////////////////////////////////////////////////////////////////////////"}]}