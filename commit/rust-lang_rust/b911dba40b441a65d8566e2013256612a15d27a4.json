{"sha": "b911dba40b441a65d8566e2013256612a15d27a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MTFkYmE0MGI0NDFhNjVkODU2NmUyMDEzMjU2NjEyYTE1ZDI3YTQ=", "commit": {"author": {"name": "Havvy (Ryan Scheel)", "email": "ryan.havvy@gmail.com", "date": "2018-09-10T05:07:17Z"}, "committer": {"name": "Havvy (Ryan Scheel)", "email": "ryan.havvy@gmail.com", "date": "2018-10-06T00:41:43Z"}, "message": "Slice total example: Move closer to total defn", "tree": {"sha": "89ac77d43cab6449a72c91b4d499f0e43c8e8a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ac77d43cab6449a72c91b4d499f0e43c8e8a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b911dba40b441a65d8566e2013256612a15d27a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b911dba40b441a65d8566e2013256612a15d27a4", "html_url": "https://github.com/rust-lang/rust/commit/b911dba40b441a65d8566e2013256612a15d27a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b911dba40b441a65d8566e2013256612a15d27a4/comments", "author": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e36bbc82f2fc49945b4ef42ddeca8c1443c3bac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e36bbc82f2fc49945b4ef42ddeca8c1443c3bac4", "html_url": "https://github.com/rust-lang/rust/commit/e36bbc82f2fc49945b4ef42ddeca8c1443c3bac4"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "0802dc3e50073df9297bc489b354a0087902c493", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b911dba40b441a65d8566e2013256612a15d27a4/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b911dba40b441a65d8566e2013256612a15d27a4/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=b911dba40b441a65d8566e2013256612a15d27a4", "patch": "@@ -218,6 +218,15 @@ impl<T> [T] {\n     /// * total and antisymmetric: exactly one of a < b, a == b or a > b is true; and\n     /// * transitive, a < b and b < c implies a < c. The same must hold for both == and >.\n     ///\n+    /// For example, while `f64` doesn't implement `Ord` because `NaN != NaN`, we can use\n+    /// `partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`.\n+    ///\n+    /// ```\n+    /// let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];\n+    /// floats.sort_by(|a, b| a.partial_cmp(b).unwrap());\n+    /// assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);\n+    /// ```\n+    ///\n     /// When applicable, unstable sorting is preferred because it is generally faster than stable\n     /// sorting and it doesn't allocate auxiliary memory.\n     /// See [`sort_unstable_by`](#method.sort_unstable_by).\n@@ -242,12 +251,6 @@ impl<T> [T] {\n     /// // reverse sorting\n     /// v.sort_by(|a, b| b.cmp(a));\n     /// assert!(v == [5, 4, 3, 2, 1]);\n-    ///\n-    /// // While f64 doesn't implement Ord because NaN != NaN, we can use\n-    /// // partial_cmp here because we know none of the elements are NaN.\n-    /// let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];\n-    /// floats.sort_by(|a, b| a.partial_cmp(b).unwrap());\n-    /// assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "f6695d876f8d6d69208462e36e8d705219be25db", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b911dba40b441a65d8566e2013256612a15d27a4/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b911dba40b441a65d8566e2013256612a15d27a4/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=b911dba40b441a65d8566e2013256612a15d27a4", "patch": "@@ -1346,6 +1346,15 @@ impl<T> [T] {\n     /// * total and antisymmetric: exactly one of a < b, a == b or a > b is true; and\n     /// * transitive, a < b and b < c implies a < c. The same must hold for both == and >.\n     ///\n+    /// For example, while `f64` doesn't implement `Ord` because `NaN != NaN`, we can use\n+    /// `partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`.\n+    ///\n+    /// ```\n+    /// let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];\n+    /// floats.sort_by(|a, b| a.partial_cmp(b).unwrap());\n+    /// assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);\n+    /// ```\n+    ///\n     /// # Current implementation\n     ///\n     /// The current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,\n@@ -1367,12 +1376,6 @@ impl<T> [T] {\n     /// // reverse sorting\n     /// v.sort_unstable_by(|a, b| b.cmp(a));\n     /// assert!(v == [5, 4, 3, 2, 1]);\n-    ///\n-    /// // While f64 doesn't implement Ord because NaN != NaN, we can use\n-    /// // partial_cmp here because we know none of the elements are NaN.\n-    /// let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];\n-    /// floats.sort_unstable_by(|a, b| a.partial_cmp(b).unwrap());\n-    /// assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);\n     /// ```\n     ///\n     /// [pdqsort]: https://github.com/orlp/pdqsort"}]}