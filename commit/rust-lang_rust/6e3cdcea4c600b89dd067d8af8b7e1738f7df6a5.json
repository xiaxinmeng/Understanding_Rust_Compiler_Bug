{"sha": "6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlM2NkY2VhNGM2MDBiODlkZDA2N2Q4YWY4YjdlMTczOGY3ZGY2YTU=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-09-12T12:52:22Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-09-12T12:52:22Z"}, "message": "Adding changes for trait objects", "tree": {"sha": "fe1af59fdce356ff517a681c9e6c4e8c9652b013", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe1af59fdce356ff517a681c9e6c4e8c9652b013"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5", "html_url": "https://github.com/rust-lang/rust/commit/6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93529b40ca9471ebe3f79817d4f71a5245bec50e", "url": "https://api.github.com/repos/rust-lang/rust/commits/93529b40ca9471ebe3f79817d4f71a5245bec50e", "html_url": "https://github.com/rust-lang/rust/commit/93529b40ca9471ebe3f79817d4f71a5245bec50e"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "051263dfb53ef30f5e8f5283c7550d25049b3f70", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5", "patch": "@@ -173,6 +173,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             hir_map: &self.tcx.hir,\n             bound_region: *br,\n             found_type: None,\n+            depth: 1,\n         };\n         nested_visitor.visit_ty(arg);\n         nested_visitor.found_type\n@@ -195,6 +196,7 @@ struct FindNestedTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     // The type where the anonymous lifetime appears\n     // for e.g. Vec<`&u8`> and <`&u8`>\n     found_type: Option<&'gcx hir::Ty>,\n+    depth: u32,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n@@ -211,6 +213,14 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                 return;\n             }\n \n+            hir::TyTraitObject(ref bounds, _) => {\n+                for bound in bounds {\n+                    self.depth += 1;\n+                    self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n+                    self.depth -= 1;\n+                }\n+            }\n+\n             hir::TyRptr(ref lifetime, _) => {\n                 // the lifetime of the TyRptr\n                 let hir_id = self.infcx.tcx.hir.node_to_hir_id(lifetime.id);\n@@ -224,7 +234,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                                debruijn_index.depth,\n                                anon_index,\n                                br_index);\n-                        if debruijn_index.depth == 1 && anon_index == br_index {\n+                        if debruijn_index.depth == self.depth && anon_index == br_index {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now\n                         }\n@@ -253,7 +263,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                         debug!(\"self.infcx.tcx.hir.local_def_id(id)={:?}\",\n                                self.infcx.tcx.hir.local_def_id(id));\n                         debug!(\"def_id={:?}\", def_id);\n-                        if debruijn_index.depth == 1 &&\n+                        if debruijn_index.depth == self.depth &&\n                            self.infcx.tcx.hir.local_def_id(id) == def_id {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now"}, {"sha": "78a6ad54eae4f417c11505b5253feaf255fe3713", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-trait-objects.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs?ref=6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+  y.push(z);\n+}\n+\n+fn main() { }"}, {"sha": "ce766b2e406a2cdf7b3c8f44599c8557ce8236c1", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-trait-objects.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr?ref=6e3cdcea4c600b89dd067d8af8b7e1738f7df6a5", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:11:10\n+   |\n+10 | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                 ---  --- these two types are declared with different lifetimes...\n+11 |   y.push(z);\n+   |          ^ ...but data from `z` flows into `y` here\n+\n+error: aborting due to previous error\n+"}]}