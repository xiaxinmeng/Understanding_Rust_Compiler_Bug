{"sha": "f93591294d60f705fb70578cfc32346efe1e03d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MzU5MTI5NGQ2MGY3MDVmYjcwNTc4Y2ZjMzIzNDZlZmUxZTAzZDg=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-06T06:12:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-06T06:12:01Z"}, "message": "Merge pull request #3494 from daxpedda/master\n\nAdded `IMPLICIT_RETURN` lint.", "tree": {"sha": "3e1bbd8885aa78d87fb2270e8379bb70e6db188f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e1bbd8885aa78d87fb2270e8379bb70e6db188f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f93591294d60f705fb70578cfc32346efe1e03d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCL2xCRBK7hj4Ov3rIwAAdHIIAJmoYxl7zZti150yBW/Be+xX\nF9VyD0qHcIP5i/DPQg+rSkkis/aorRUxudTLvlCVur/0nuO3c6Wkrb/XaVM+oIws\nqPCg2LnFYTOqRb4Cj0TEFaakj9A1nzaaJ3041Te+HGAJN+9THbI0m+RXBAT93FMV\n2erlOmtuETE0Wg9/bMuPoH0zldw1NNdx+WMiZ/MZ/xo7SvC2mGrhzCihLT/TLrHu\naZV+BLBlUCdjKYbso+HMC9CLTX4GFa3MyX8C9UsCnzOOgP/pkUu63O/lHuxMi1i2\nNPTebsgU7zzjzX31T+1w8MJJdncse6Z/QKOm34bnz8wVwZBtUfyEgSasJFBzDi4=\n=fxcj\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e1bbd8885aa78d87fb2270e8379bb70e6db188f\nparent 7cb1b1f7e168b4254f9d38005af19be5d0ba5482\nparent b0f3ed2b808d0696d0a97173d65d368b01c0c9a7\nauthor Philipp Hansch <dev@phansch.net> 1544076721 +0100\ncommitter GitHub <noreply@github.com> 1544076721 +0100\n\nMerge pull request #3494 from daxpedda/master\n\nAdded `IMPLICIT_RETURN` lint."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f93591294d60f705fb70578cfc32346efe1e03d8", "html_url": "https://github.com/rust-lang/rust/commit/f93591294d60f705fb70578cfc32346efe1e03d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f93591294d60f705fb70578cfc32346efe1e03d8/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cb1b1f7e168b4254f9d38005af19be5d0ba5482", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb1b1f7e168b4254f9d38005af19be5d0ba5482", "html_url": "https://github.com/rust-lang/rust/commit/7cb1b1f7e168b4254f9d38005af19be5d0ba5482"}, {"sha": "b0f3ed2b808d0696d0a97173d65d368b01c0c9a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f3ed2b808d0696d0a97173d65d368b01c0c9a7", "html_url": "https://github.com/rust-lang/rust/commit/b0f3ed2b808d0696d0a97173d65d368b01c0c9a7"}], "stats": {"total": 250, "additions": 249, "deletions": 1}, "files": [{"sha": "e691ec9412f056ccd72a78a8d995ea1e6a54ccf5", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f93591294d60f705fb70578cfc32346efe1e03d8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f93591294d60f705fb70578cfc32346efe1e03d8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f93591294d60f705fb70578cfc32346efe1e03d8", "patch": "@@ -706,6 +706,7 @@ All notable changes to this project will be documented in this file.\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n+[`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\n [`inconsistent_digit_grouping`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n [`indexing_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing\n [`ineffective_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_bit_mask"}, {"sha": "92bb45866883b80238ec43ad67db469a9fb1ad92", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93591294d60f705fb70578cfc32346efe1e03d8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f93591294d60f705fb70578cfc32346efe1e03d8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f93591294d60f705fb70578cfc32346efe1e03d8", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 289 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 290 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "664f182c533687991095de5e0cfc5a29377c0ee7", "filename": "clippy_lints/src/implicit_return.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/f93591294d60f705fb70578cfc32346efe1e03d8/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93591294d60f705fb70578cfc32346efe1e03d8/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=f93591294d60f705fb70578cfc32346efe1e03d8", "patch": "@@ -0,0 +1,135 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use crate::rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n+use crate::syntax::{ast::NodeId, source_map::Span};\n+use crate::utils::{snippet_opt, span_lint_and_then};\n+\n+/// **What it does:** Checks for missing return statements at the end of a block.\n+///\n+/// **Why is this bad?** Actually omitting the return keyword is idiomatic Rust code. Programmers\n+/// coming from other languages might prefer the expressiveness of `return`. It's possible to miss\n+/// the last returning statement because the only difference is a missing `;`. Especially in bigger\n+/// code with multiple return paths having a `return` keyword makes it easier to find the\n+/// corresponding statements.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo(x: usize) {\n+///     x\n+/// }\n+/// ```\n+/// add return\n+/// ```rust\n+/// fn foo(x: usize) {\n+///     return x;\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub IMPLICIT_RETURN,\n+    restriction,\n+    \"use a return statement like `return expr` instead of an expression\"\n+}\n+\n+pub struct Pass;\n+\n+impl Pass {\n+    fn expr_match(cx: &LateContext<'_, '_>, expr: &rustc::hir::Expr) {\n+        match &expr.node {\n+            ExprKind::Block(block, ..) => {\n+                if let Some(expr) = &block.expr {\n+                    Self::expr_match(cx, expr);\n+                }\n+                // only needed in the case of `break` with `;` at the end\n+                else if let Some(stmt) = block.stmts.last() {\n+                    if let rustc::hir::StmtKind::Semi(expr, ..) = &stmt.node {\n+                        Self::expr_match(cx, expr);\n+                    }\n+                }\n+            },\n+            // use `return` instead of `break`\n+            ExprKind::Break(.., break_expr) => {\n+                if let Some(break_expr) = break_expr {\n+                    span_lint_and_then(cx, IMPLICIT_RETURN, expr.span, \"missing return statement\", |db| {\n+                        if let Some(snippet) = snippet_opt(cx, break_expr.span) {\n+                            db.span_suggestion_with_applicability(\n+                                expr.span,\n+                                \"change `break` to `return` as shown\",\n+                                format!(\"return {}\", snippet),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    });\n+                }\n+            },\n+            ExprKind::If(.., if_expr, else_expr) => {\n+                Self::expr_match(cx, if_expr);\n+\n+                if let Some(else_expr) = else_expr {\n+                    Self::expr_match(cx, else_expr);\n+                }\n+            },\n+            ExprKind::Match(_, arms, ..) => {\n+                for arm in arms {\n+                    Self::expr_match(cx, &arm.body);\n+                }\n+            },\n+            // loops could be using `break` instead of `return`\n+            ExprKind::Loop(block, ..) => {\n+                if let Some(expr) = &block.expr {\n+                    Self::expr_match(cx, expr);\n+                }\n+            },\n+            // skip if it already has a return statement\n+            ExprKind::Ret(..) => (),\n+            // everything else is missing `return`\n+            _ => span_lint_and_then(cx, IMPLICIT_RETURN, expr.span, \"missing return statement\", |db| {\n+                if let Some(snippet) = snippet_opt(cx, expr.span) {\n+                    db.span_suggestion_with_applicability(\n+                        expr.span,\n+                        \"add `return` as shown\",\n+                        format!(\"return {}\", snippet),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }),\n+        }\n+    }\n+}\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(IMPLICIT_RETURN)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        _: FnKind<'tcx>,\n+        _: &'tcx FnDecl,\n+        body: &'tcx Body,\n+        _: Span,\n+        _: NodeId,\n+    ) {\n+        let def_id = cx.tcx.hir.body_owner_def_id(body.id());\n+        let mir = cx.tcx.optimized_mir(def_id);\n+\n+        // checking return type through MIR, HIR is not able to determine inferred closure return types\n+        if !mir.return_ty().is_unit() {\n+            Self::expr_match(cx, &body.value);\n+        }\n+    }\n+}"}, {"sha": "ee41c632077c4869fdadee7b74df6cee1aa5a4ee", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f93591294d60f705fb70578cfc32346efe1e03d8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93591294d60f705fb70578cfc32346efe1e03d8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f93591294d60f705fb70578cfc32346efe1e03d8", "patch": "@@ -126,6 +126,7 @@ pub mod functions;\n pub mod identity_conversion;\n pub mod identity_op;\n pub mod if_not_else;\n+pub mod implicit_return;\n pub mod indexing_slicing;\n pub mod infallible_destructuring_match;\n pub mod infinite_iter;\n@@ -371,6 +372,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box unicode::Unicode);\n     reg.register_late_lint_pass(box strings::StringAdd);\n     reg.register_early_lint_pass(box returns::ReturnPass);\n+    reg.register_late_lint_pass(box implicit_return::Pass);\n     reg.register_late_lint_pass(box methods::Pass);\n     reg.register_late_lint_pass(box map_clone::Pass);\n     reg.register_late_lint_pass(box shadow::Pass);\n@@ -485,6 +487,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         arithmetic::FLOAT_ARITHMETIC,\n         arithmetic::INTEGER_ARITHMETIC,\n         else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n+        implicit_return::IMPLICIT_RETURN,\n         indexing_slicing::INDEXING_SLICING,\n         inherent_impl::MULTIPLE_INHERENT_IMPL,\n         literal_representation::DECIMAL_LITERAL_REPRESENTATION,"}, {"sha": "73cf2908833cd71cbf2c7656b96a916239d527c6", "filename": "tests/ui/implicit_return.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f93591294d60f705fb70578cfc32346efe1e03d8/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93591294d60f705fb70578cfc32346efe1e03d8/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=f93591294d60f705fb70578cfc32346efe1e03d8", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+\n+\n+\n+#![warn(clippy::implicit_return)]\n+\n+fn test_end_of_fn() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+    true\n+}\n+\n+#[allow(clippy::needless_bool)]\n+fn test_if_block() -> bool {\n+    if true {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+#[allow(clippy::match_bool)]\n+fn test_match(x: bool) -> bool {\n+    match x {\n+        true => false,\n+        false => {\n+            true\n+        }\n+    }\n+}\n+\n+#[allow(clippy::never_loop)]\n+fn test_loop() -> bool {\n+    loop {\n+        break true;\n+    }\n+}\n+\n+fn test_closure() {\n+    let _ = || {\n+        true\n+    };\n+    let _ = || true;\n+}\n+\n+fn main() {\n+    let _ = test_end_of_fn();\n+    let _ = test_if_block();\n+    let _ = test_match(true);\n+    let _ = test_loop();\n+    test_closure();\n+}"}, {"sha": "bba8d942e27dfa6ed1ff66c9b3fd22da361d3024", "filename": "tests/ui/implicit_return.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f93591294d60f705fb70578cfc32346efe1e03d8/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f93591294d60f705fb70578cfc32346efe1e03d8/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=f93591294d60f705fb70578cfc32346efe1e03d8", "patch": "@@ -0,0 +1,46 @@\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:21:5\n+   |\n+21 |     true\n+   |     ^^^^ help: add `return` as shown: `return true`\n+   |\n+   = note: `-D clippy::implicit-return` implied by `-D warnings`\n+\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:27:9\n+   |\n+27 |         true\n+   |         ^^^^ help: add `return` as shown: `return true`\n+\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:29:9\n+   |\n+29 |         false\n+   |         ^^^^^ help: add `return` as shown: `return false`\n+\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:36:17\n+   |\n+36 |         true => false,\n+   |                 ^^^^^ help: add `return` as shown: `return false`\n+\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:38:13\n+   |\n+38 |             true\n+   |             ^^^^ help: add `return` as shown: `return true`\n+\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:52:9\n+   |\n+52 |         true\n+   |         ^^^^ help: add `return` as shown: `return true`\n+\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:54:16\n+   |\n+54 |     let _ = || true;\n+   |                ^^^^ help: add `return` as shown: `return true`\n+\n+error: aborting due to 7 previous errors\n+"}]}