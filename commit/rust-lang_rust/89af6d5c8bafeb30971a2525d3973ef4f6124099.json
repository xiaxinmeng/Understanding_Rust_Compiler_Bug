{"sha": "89af6d5c8bafeb30971a2525d3973ef4f6124099", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YWY2ZDVjOGJhZmViMzA5NzFhMjUyNWQzOTczZWY0ZjYxMjQwOTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-09-10T15:56:48Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-09-23T10:58:19Z"}, "message": "[WIP] Less hacky way of supporting dylibs", "tree": {"sha": "0e901de2a36c0859e3ea1bb0ab3368d730a9e8c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e901de2a36c0859e3ea1bb0ab3368d730a9e8c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89af6d5c8bafeb30971a2525d3973ef4f6124099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89af6d5c8bafeb30971a2525d3973ef4f6124099", "html_url": "https://github.com/rust-lang/rust/commit/89af6d5c8bafeb30971a2525d3973ef4f6124099", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89af6d5c8bafeb30971a2525d3973ef4f6124099/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d935a8d6af6201546c0e699b9374dff31cb5af3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d935a8d6af6201546c0e699b9374dff31cb5af3e", "html_url": "https://github.com/rust-lang/rust/commit/d935a8d6af6201546c0e699b9374dff31cb5af3e"}], "stats": {"total": 56, "additions": 16, "deletions": 40}, "files": [{"sha": "a5ad7d6ff697e2d66b87dddd4710ad0617a05b12", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=89af6d5c8bafeb30971a2525d3973ef4f6124099", "patch": "@@ -1554,6 +1554,7 @@ dependencies = [\n  \"ar 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"arena 0.0.0\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "2aac1b085e95a935265642b4d42456ff1df797e5", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=89af6d5c8bafeb30971a2525d3973ef4f6124099", "patch": "@@ -10,6 +10,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n arena = { path = \"../libarena\" }\n+flate2 = \"0.2\"\n graphviz = { path = \"../libgraphviz\" }\n log = { version = \"0.3\", features = [\"release_max_level_info\"] }\n owning_ref = \"0.3.3\"\n@@ -41,4 +42,4 @@ syntax_pos = { path = \"../libsyntax_pos\" }\n ar = \"0.3.0\"\n \n [features]\n-llvm = [\"rustc_trans\", \"rustc_metadata/llvm\"]\n+llvm = [\"rustc_trans\"]"}, {"sha": "457c9357336b386ad99ceb8368f05b74a868d81b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=89af6d5c8bafeb30971a2525d3973ef4f6124099", "patch": "@@ -69,7 +69,7 @@ use derive_registrar;\n \n use profile;\n \n-pub fn compile_input(sess: &mut Session,\n+pub fn compile_input(sess: &Session,\n                      cstore: &CStore,\n                      input: &Input,\n                      outdir: &Option<PathBuf>,\n@@ -100,32 +100,21 @@ pub fn compile_input(sess: &mut Session,\n             sess.err(\"LLVM is not supported by this rustc. Please use -Z no-trans to compile\")\n         }\n \n-        for cty in sess.opts.crate_types.iter_mut() {\n+        for cty in sess.opts.crate_types.iter() {\n             match *cty {\n-                CrateType::CrateTypeRlib | CrateType::CrateTypeExecutable => {},\n-                CrateType::CrateTypeDylib | CrateType::CrateTypeCdylib |\n-                CrateType::CrateTypeStaticlib => {\n+                CrateType::CrateTypeRlib | CrateType::CrateTypeDylib |\n+                CrateType::CrateTypeExecutable => {},\n+                _ => {\n                     sess.parse_sess.span_diagnostic.warn(\n-                        &format!(\"LLVM unsupported, so non rlib output type {} \\\n-                                  will be treated like rlib lib\", cty)\n+                        &format!(\"LLVM unsupported, so output type {} is not supported\", cty)\n                     );\n-                    *cty = CrateType::CrateTypeRlib;\n                 },\n-                CrateType::CrateTypeProcMacro => {\n-                    sess.parse_sess.span_diagnostic.err(\n-                        \"No LLVM support, so cant compile proc macros\"\n-                    );\n-                }\n             }\n         }\n \n         sess.abort_if_errors();\n     }\n \n-    // Make sure nobody changes sess after crate types\n-    // have optionally been adjusted for no llvm builds\n-    let sess = &*sess;\n-\n     if sess.profile_queries() {\n         profile::begin();\n     }\n@@ -283,7 +272,8 @@ pub fn compile_input(sess: &mut Session,\n     if cfg!(not(feature=\"llvm\")) {\n         let (_, _) = (outputs, trans);\n \n-        if sess.opts.crate_types.contains(&CrateType::CrateTypeRlib) {\n+        if sess.opts.crate_types.contains(&CrateType::CrateTypeRlib)\n+            || sess.opts.crate_types.contains(&CrateType::CrateTypeDylib) {\n             return Ok(())\n         }\n         sess.fatal(\"LLVM is not supported by this rustc\");"}, {"sha": "7af5ad3410fce08f06ebb5566e9011d603d7ff11", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=89af6d5c8bafeb30971a2525d3973ef4f6124099", "patch": "@@ -27,6 +27,8 @@\n \n #[cfg(not(feature=\"llvm\"))]\n extern crate ar;\n+#[cfg(not(feature=\"llvm\"))]\n+extern crate flate2;\n extern crate arena;\n extern crate getopts;\n extern crate graphviz;\n@@ -202,7 +204,8 @@ mod no_llvm_metadata_loader {\n                             _target: &Target,\n                             _filename: &Path)\n                             -> Result<ErasedBoxRef<[u8]>, String> {\n-            panic!(\"Dylib metadata loading not supported without LLVM\")\n+            // FIXME: Support reading dylibs from llvm enabled rustc\n+            self.get_rlib_metadata(_target, _filename)\n         }\n     }\n }"}, {"sha": "40b75be36fefb061c7fcabb5a71f02853b0d2874", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=89af6d5c8bafeb30971a2525d3973ef4f6124099", "patch": "@@ -21,6 +21,3 @@ serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-\n-[features]\n-llvm = []"}, {"sha": "19f7cb0ee238a72b82e501a0fb7b7462479e3989", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89af6d5c8bafeb30971a2525d3973ef4f6124099/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=89af6d5c8bafeb30971a2525d3973ef4f6124099", "patch": "@@ -457,14 +457,6 @@ impl<'a> Context<'a> {\n         //\n         // The goal of this step is to look at as little metadata as possible.\n         self.filesearch.search(|path, kind| {\n-            let mut path = path.to_owned();\n-            if cfg!(not(feature=\"llvm\")) {\n-                // This is a hack to make crates both defined as dylib\n-                // and rlib to be findable without LLVM\n-                path.set_extension(\"rlib\");\n-            }\n-            let path = &path;\n-\n             let file = match path.file_name().and_then(|s| s.to_str()) {\n                 None => return FileDoesntMatch,\n                 Some(file) => file,\n@@ -753,15 +745,7 @@ impl<'a> Context<'a> {\n         let mut rmetas = FxHashMap();\n         let mut dylibs = FxHashMap();\n         {\n-            let locs = locs.map(|l| PathBuf::from(l))\n-                .map(|mut l| {\n-                    if cfg!(not(feature=\"llvm\")) {\n-                        // This is a hack to make crates both defined as dylib\n-                        // and rlib to be findable without LLVM\n-                        l.set_extension(\"rlib\");\n-                    }\n-                    l\n-                }).filter(|loc| {\n+            let locs = locs.map(|l| PathBuf::from(l)).filter(|loc| {\n                 if !loc.exists() {\n                     sess.err(&format!(\"extern location for {} does not exist: {}\",\n                                       self.crate_name,"}]}