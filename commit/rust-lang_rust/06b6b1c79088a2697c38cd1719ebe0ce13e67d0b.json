{"sha": "06b6b1c79088a2697c38cd1719ebe0ce13e67d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YjZiMWM3OTA4OGEyNjk3YzM4Y2QxNzE5ZWJlMGNlMTNlNjdkMGI=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-06T13:58:36Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-24T12:59:07Z"}, "message": "Make declare_fn accept PolyFnSig instead of Ty.", "tree": {"sha": "af4b41771b70489a82af87358996e211d50e3f1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af4b41771b70489a82af87358996e211d50e3f1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b", "html_url": "https://github.com/rust-lang/rust/commit/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "207531606476a1fa03de815c2a112f3909cda48a", "url": "https://api.github.com/repos/rust-lang/rust/commits/207531606476a1fa03de815c2a112f3909cda48a", "html_url": "https://github.com/rust-lang/rust/commit/207531606476a1fa03de815c2a112f3909cda48a"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "fff0177c94842cb54a92cd3f34493758ac1490ba", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=06b6b1c79088a2697c38cd1719ebe0ce13e67d0b", "patch": "@@ -91,7 +91,7 @@ pub fn get_fn(\n             llfn\n         }\n     } else {\n-        let llfn = declare::declare_fn(cx, &sym, fn_ty, instance.is_vtable_shim());\n+        let llfn = declare::declare_fn(cx, &sym, common::ty_fn_sig_vtable(cx, fn_ty, instance.is_vtable_shim()));\n         assert_eq!(common::val_ty(llfn), llptrty);\n         debug!(\"get_fn: not casting pointer!\");\n "}, {"sha": "241f7989e168179c8c21de67061f7fdec0a5d496", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=06b6b1c79088a2697c38cd1719ebe0ce13e67d0b", "patch": "@@ -404,15 +404,15 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n             return llfn;\n         }\n \n-        let ty = tcx.mk_fn_ptr(ty::Binder::bind(tcx.mk_fn_sig(\n+        let sig = ty::Binder::bind(tcx.mk_fn_sig(\n             iter::once(tcx.mk_mut_ptr(tcx.types.u8)),\n             tcx.types.never,\n             false,\n             hir::Unsafety::Unsafe,\n             Abi::C\n-        )));\n+        ));\n \n-        let llfn = declare::declare_fn(self, \"rust_eh_unwind_resume\", ty, false);\n+        let llfn = declare::declare_fn(self, \"rust_eh_unwind_resume\", sig);\n         attributes::unwind(llfn, true);\n         attributes::apply_target_cpu_attr(self, llfn);\n         unwresume.set(Some(llfn));"}, {"sha": "f4aede55ce1a628d4e054b09a78a6547ae114889", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=06b6b1c79088a2697c38cd1719ebe0ce13e67d0b", "patch": "@@ -22,15 +22,14 @@\n \n use llvm;\n use llvm::AttributePlace::Function;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, PolyFnSig};\n use rustc::ty::layout::LayoutOf;\n use rustc::session::config::Sanitizer;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_target::spec::PanicStrategy;\n use abi::{Abi, FnType, FnTypeExt};\n use attributes;\n use context::CodegenCx;\n-use common;\n use type_::Type;\n use value::Value;\n \n@@ -129,12 +128,9 @@ pub fn declare_cfn(cx: &CodegenCx<'ll, '_>, name: &str, fn_type: &'ll Type) -> &\n pub fn declare_fn(\n     cx: &CodegenCx<'ll, 'tcx>,\n     name: &str,\n-    fn_type: Ty<'tcx>,\n-    is_vtable_shim: bool,\n+    sig: PolyFnSig<'tcx>,\n ) -> &'ll Value {\n-    debug!(\"declare_rust_fn(name={:?}, fn_type={:?}, is_vtable_shim={:?})\",\n-           name, fn_type, is_vtable_shim);\n-    let sig = common::ty_fn_sig_vtable(cx, fn_type, is_vtable_shim);\n+    debug!(\"declare_rust_fn(name={:?}, sig={:?})\", name, sig);\n     let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     debug!(\"declare_rust_fn (after region erasure) sig={:?}\", sig);\n \n@@ -186,12 +182,12 @@ pub fn define_private_global(cx: &CodegenCx<'ll, '_>, ty: &'ll Type) -> &'ll Val\n pub fn define_fn(\n     cx: &CodegenCx<'ll, 'tcx>,\n     name: &str,\n-    fn_type: Ty<'tcx>,\n+    fn_sig: PolyFnSig<'tcx>,\n ) -> &'ll Value {\n     if get_defined_value(cx, name).is_some() {\n         cx.sess().fatal(&format!(\"symbol `{}` already defined\", name))\n     } else {\n-        declare_fn(cx, name, fn_type, false)\n+        declare_fn(cx, name, fn_sig)\n     }\n }\n \n@@ -203,9 +199,9 @@ pub fn define_fn(\n pub fn define_internal_fn(\n     cx: &CodegenCx<'ll, 'tcx>,\n     name: &str,\n-    fn_type: Ty<'tcx>,\n+    fn_sig: PolyFnSig<'tcx>,\n ) -> &'ll Value {\n-    let llfn = define_fn(cx, name, fn_type);\n+    let llfn = define_fn(cx, name, fn_sig);\n     unsafe { llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::InternalLinkage) };\n     llfn\n }"}, {"sha": "03244c18ac3e4f3d15e6be674228431fe4a91ccf", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=06b6b1c79088a2697c38cd1719ebe0ce13e67d0b", "patch": "@@ -933,14 +933,14 @@ fn gen_fn<'ll, 'tcx>(\n     output: Ty<'tcx>,\n     codegen: &mut dyn FnMut(Builder<'_, 'll, 'tcx>),\n ) -> &'ll Value {\n-    let rust_fn_ty = cx.tcx.mk_fn_ptr(ty::Binder::bind(cx.tcx.mk_fn_sig(\n+    let rust_fn_sig = ty::Binder::bind(cx.tcx.mk_fn_sig(\n         inputs.into_iter(),\n         output,\n         false,\n         hir::Unsafety::Unsafe,\n         Abi::Rust\n-    )));\n-    let llfn = declare::define_internal_fn(cx, name, rust_fn_ty);\n+    ));\n+    let llfn = declare::define_internal_fn(cx, name, rust_fn_sig);\n     attributes::from_fn_attrs(cx, llfn, None);\n     let bx = Builder::new_block(cx, llfn, \"entry-block\");\n     codegen(bx);"}, {"sha": "d160f114d4ccded2885b048ff2e74c01c5e1653c", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=06b6b1c79088a2697c38cd1719ebe0ce13e67d0b", "patch": "@@ -17,6 +17,7 @@\n use asm;\n use attributes;\n use base;\n+use common;\n use consts;\n use context::CodegenCx;\n use declare;\n@@ -154,8 +155,9 @@ fn predefine_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             !instance.substs.has_param_types());\n \n     let mono_ty = instance.ty(cx.tcx);\n+    let mono_sig = common::ty_fn_sig_vtable(cx, mono_ty, instance.is_vtable_shim());\n     let attrs = cx.tcx.codegen_fn_attrs(instance.def_id());\n-    let lldecl = declare::declare_fn(cx, symbol_name, mono_ty, instance.is_vtable_shim());\n+    let lldecl = declare::declare_fn(cx, symbol_name, mono_sig);\n     unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n     base::set_link_section(lldecl, &attrs);\n     if linkage == Linkage::LinkOnceODR ||"}]}