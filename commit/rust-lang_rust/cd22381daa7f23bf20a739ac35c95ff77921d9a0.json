{"sha": "cd22381daa7f23bf20a739ac35c95ff77921d9a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMjIzODFkYWE3ZjIzYmYyMGE3MzlhYzM1Yzk1ZmY3NzkyMWQ5YTA=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-11-05T22:09:28Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-11-16T19:31:12Z"}, "message": "Use syscall! for copy_file_range too", "tree": {"sha": "9ade2e9cce93417f53bffb95c094fbf8a106f0c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ade2e9cce93417f53bffb95c094fbf8a106f0c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd22381daa7f23bf20a739ac35c95ff77921d9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd22381daa7f23bf20a739ac35c95ff77921d9a0", "html_url": "https://github.com/rust-lang/rust/commit/cd22381daa7f23bf20a739ac35c95ff77921d9a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd22381daa7f23bf20a739ac35c95ff77921d9a0/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a035626eb53e88956680398f5fda821ca0e6bd97", "url": "https://api.github.com/repos/rust-lang/rust/commits/a035626eb53e88956680398f5fda821ca0e6bd97", "html_url": "https://github.com/rust-lang/rust/commit/a035626eb53e88956680398f5fda821ca0e6bd97"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "1dc16ef099367c8835f503943bc1e869d4b21a5d", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd22381daa7f23bf20a739ac35c95ff77921d9a0/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd22381daa7f23bf20a739ac35c95ff77921d9a0/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=cd22381daa7f23bf20a739ac35c95ff77921d9a0", "patch": "@@ -445,15 +445,15 @@ pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) ->\n     // We store the availability in a global to avoid unnecessary syscalls\n     static HAS_COPY_FILE_RANGE: AtomicBool = AtomicBool::new(true);\n \n-    unsafe fn copy_file_range(\n-        fd_in: libc::c_int,\n-        off_in: *mut libc::loff_t,\n-        fd_out: libc::c_int,\n-        off_out: *mut libc::loff_t,\n-        len: libc::size_t,\n-        flags: libc::c_uint,\n-    ) -> libc::c_long {\n-        libc::syscall(libc::SYS_copy_file_range, fd_in, off_in, fd_out, off_out, len, flags)\n+    syscall! {\n+        fn copy_file_range(\n+            fd_in: libc::c_int,\n+            off_in: *mut libc::loff_t,\n+            fd_out: libc::c_int,\n+            off_out: *mut libc::loff_t,\n+            len: libc::size_t,\n+            flags: libc::c_uint\n+        ) -> libc::ssize_t\n     }\n \n     let has_copy_file_range = HAS_COPY_FILE_RANGE.load(Ordering::Relaxed);"}]}