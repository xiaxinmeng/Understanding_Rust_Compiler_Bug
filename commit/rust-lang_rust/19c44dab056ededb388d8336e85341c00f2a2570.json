{"sha": "19c44dab056ededb388d8336e85341c00f2a2570", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YzQ0ZGFiMDU2ZWRlZGIzODhkODMzNmU4NTM0MWMwMGYyYTI1NzA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T09:38:08Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T09:38:08Z"}, "message": "rustup to rustc 1.14.0-nightly (7c69b0d5a 2016-11-01)", "tree": {"sha": "60596ec0154f8c6567e68da226288f2228ea675f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60596ec0154f8c6567e68da226288f2228ea675f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19c44dab056ededb388d8336e85341c00f2a2570", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYGwWAAAoJEFbW7qD8Z6xGMM8P/Rnffj6IUCcNFszlbEquHTuO\nztS4Rax0PQE2XenTvOv8WSQ/3lEbTe2mztwLXzWBu99evuSx669/uN2e7I845712\nWZ8DP6kJZKS4FWTAHQSRSKzs9ZRF9TIli4DzKGRTOEApP8ECm7BTOjjuJIjrqz4Q\n+y5t0NAoNPAU9iblEgciSCicIU1TH9ASuONxdKJ46nEadPgHQAF8ChWSHKmqWP5/\nze5qZplhIZ5N9k43E0Vg8xnqssp76J4h8y4fUDZQ0OX4+eqRMRmYxzOk2xMaFLFO\nosad0QFocMvEagB174EMIJehS3xmiepehUr/Hgcg5BTMvk+q6h8jt1+KQgXYt/ok\nnilo2y7Sw8Kha1erM8ul8CHu7RKPAo+TrI+aD3kKcWGh7x+W/avHml1YS2yxCg2G\n31n1+WAVaidH7SZjwX/o/Byf+YWnnBZYE5VTJadkBqntFztGltSP1mrgRHYrj5rV\nWYV3g3SPqGHvRVZVj06dUD1Z5gx1FVo/Z+CIqq2061Pz+sVRUIqE6Bx+txIgi2uS\nMQAgs/Z1KzHUfVxHM3VD9vF6Nc6XGQR1OMjPK3oWcLjNFyoDfFuQNonbcc1nd7ZV\nnXM+IPJdYv+Bac7LSmw60woYjYgexMj4IKsvSdCJT4EpUd20RU+1sxa3FA9BAezH\n6ZQmA+NFT1yc3bZ74GSm\n=7xEw\n-----END PGP SIGNATURE-----", "payload": "tree 60596ec0154f8c6567e68da226288f2228ea675f\nparent c50c6e52daec36bd15c8df5c212ee2a42932504e\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478165888 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478165888 +0100\n\nrustup to rustc 1.14.0-nightly (7c69b0d5a 2016-11-01)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19c44dab056ededb388d8336e85341c00f2a2570", "html_url": "https://github.com/rust-lang/rust/commit/19c44dab056ededb388d8336e85341c00f2a2570", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19c44dab056ededb388d8336e85341c00f2a2570/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c50c6e52daec36bd15c8df5c212ee2a42932504e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c50c6e52daec36bd15c8df5c212ee2a42932504e", "html_url": "https://github.com/rust-lang/rust/commit/c50c6e52daec36bd15c8df5c212ee2a42932504e"}], "stats": {"total": 155, "additions": 54, "deletions": 101}, "files": [{"sha": "18c18eee6daf8fa2e71c6ea2dfd68abb3844f993", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19c44dab056ededb388d8336e85341c00f2a2570/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c44dab056ededb388d8336e85341c00f2a2570/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=19c44dab056ededb388d8336e85341c00f2a2570", "patch": "@@ -6,7 +6,6 @@ extern crate test;\n \n use self::miri::{eval_main, run_mir_passes};\n use self::rustc::session::Session;\n-use self::rustc::mir::mir_map::MirMap;\n use self::rustc_driver::{driver, CompilerCalls, Compilation};\n use std::cell::RefCell;\n use std::rc::Rc;"}, {"sha": "d2a9bc6087ecc2e5f51e9a1e2bc60f96da9f10e1", "filename": "src/bin/miri.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19c44dab056ededb388d8336e85341c00f2a2570/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c44dab056ededb388d8336e85341c00f2a2570/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=19c44dab056ededb388d8336e85341c00f2a2570", "patch": "@@ -11,7 +11,6 @@ extern crate syntax;\n \n use miri::{eval_main, run_mir_passes};\n use rustc::session::Session;\n-use rustc::mir::mir_map::MirMap;\n use rustc_driver::{driver, CompilerCalls, Compilation};\n use syntax::ast::{MetaItemKind, NestedMetaItemKind};\n \n@@ -32,7 +31,6 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n             state.session.abort_if_errors();\n \n             let tcx = state.tcx.unwrap();\n-            let mir_map = state.mir_map.unwrap();\n             let (entry_node_id, _) = state.session.entry_fn.borrow()\n                 .expect(\"no main or start function found\");\n             let entry_def_id = tcx.map.local_def_id(entry_node_id);\n@@ -70,12 +68,8 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n                 }\n             }\n \n-            let mut mir_map_copy = MirMap::new(tcx.dep_graph.clone());\n-            for def_id in mir_map.map.keys() {\n-                mir_map_copy.map.insert(def_id, mir_map.map.get(&def_id).unwrap().clone());\n-            }\n-            run_mir_passes(tcx, &mut mir_map_copy);\n-            eval_main(tcx, &mir_map_copy, entry_def_id, memory_size, step_limit, stack_limit);\n+            run_mir_passes(tcx);\n+            eval_main(tcx, entry_def_id, memory_size, step_limit, stack_limit);\n \n             state.session.abort_if_errors();\n         });"}, {"sha": "a44b8cc76ebc4715741841dea96cd0d81dae5d53", "filename": "src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19c44dab056ededb388d8336e85341c00f2a2570/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c44dab056ededb388d8336e85341c00f2a2570/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=19c44dab056ededb388d8336e85341c00f2a2570", "patch": "@@ -1,6 +1,6 @@\n use std::error::Error;\n use std::fmt;\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use rustc::ty::BareFnTy;\n use memory::Pointer;\n use rustc_const_math::ConstMathErr;"}, {"sha": "b72feba8bc059c7d13a724ab6dfbab1198c95c71", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 33, "deletions": 73, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/19c44dab056ededb388d8336e85341c00f2a2570/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c44dab056ededb388d8336e85341c00f2a2570/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=19c44dab056ededb388d8336e85341c00f2a2570", "patch": "@@ -1,17 +1,12 @@\n use rustc::middle::const_val::ConstVal;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::definitions::DefPathData;\n-use rustc::mir::mir_map::MirMap;\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use rustc::traits::Reveal;\n use rustc::ty::layout::{self, Layout, Size};\n use rustc::ty::subst::{self, Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc::util::nodemap::DefIdMap;\n use rustc_data_structures::indexed_vec::Idx;\n-use std::cell::RefCell;\n-use std::ops::Deref;\n-use std::rc::Rc;\n use syntax::codemap::{self, DUMMY_SP};\n \n use error::{EvalError, EvalResult};\n@@ -20,44 +15,41 @@ use primval::{self, PrimVal, PrimValKind};\n pub use self::value::Value;\n \n use std::collections::HashMap;\n+use std::cell::Ref;\n \n mod step;\n mod terminator;\n mod cast;\n mod vtable;\n mod value;\n \n+pub type MirRef<'tcx> = ::std::cell::Ref<'tcx, mir::Mir<'tcx>>;\n+\n pub struct EvalContext<'a, 'tcx: 'a> {\n     /// The results of the type checker, from rustc.\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n-    /// A mapping from NodeIds to Mir, from rustc. Only contains MIR for crate-local items.\n-    mir_map: &'a MirMap<'tcx>,\n-\n-    /// A local cache from DefIds to Mir for non-crate-local items.\n-    mir_cache: RefCell<DefIdMap<Rc<mir::Mir<'tcx>>>>,\n-\n     /// The virtual memory system.\n     memory: Memory<'a, 'tcx>,\n \n     /// Precomputed statics, constants and promoteds.\n     globals: HashMap<GlobalId<'tcx>, Global<'tcx>>,\n \n     /// The virtual call stack.\n-    stack: Vec<Frame<'a, 'tcx>>,\n+    stack: Vec<Frame<'tcx>>,\n \n     /// The maximum number of stack frames allowed\n     stack_limit: usize,\n }\n \n /// A stack frame.\n-pub struct Frame<'a, 'tcx: 'a> {\n+pub struct Frame<'tcx> {\n     ////////////////////////////////////////////////////////////////////////////////\n     // Function and callsite information\n     ////////////////////////////////////////////////////////////////////////////////\n \n     /// The MIR for the function called on this frame.\n-    pub mir: CachedMir<'a, 'tcx>,\n+    pub mir: MirRef<'tcx>,\n \n     /// The def_id of the current function.\n     pub def_id: DefId,\n@@ -125,12 +117,6 @@ pub enum LvalueExtra {\n     DowncastVariant(usize),\n }\n \n-#[derive(Clone)]\n-pub enum CachedMir<'mir, 'tcx: 'mir> {\n-    Ref(&'mir mir::Mir<'tcx>),\n-    Owned(Rc<mir::Mir<'tcx>>)\n-}\n-\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n /// Uniquely identifies a specific constant or static\n pub struct GlobalId<'tcx> {\n@@ -176,11 +162,9 @@ pub enum StackPopCleanup {\n }\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>, memory_size: usize, stack_limit: usize) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, memory_size: usize, stack_limit: usize) -> Self {\n         EvalContext {\n             tcx: tcx,\n-            mir_map: mir_map,\n-            mir_cache: RefCell::new(DefIdMap()),\n             memory: Memory::new(&tcx.data_layout, memory_size),\n             globals: HashMap::new(),\n             stack: Vec::new(),\n@@ -211,7 +195,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         &mut self.memory\n     }\n \n-    pub fn stack(&self) -> &[Frame<'a, 'tcx>] {\n+    pub fn stack(&self) -> &[Frame<'tcx>] {\n         &self.stack\n     }\n \n@@ -292,25 +276,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         ty.is_sized(self.tcx, &self.tcx.empty_parameter_environment(), DUMMY_SP)\n     }\n \n-    pub fn load_mir(&self, def_id: DefId) -> EvalResult<'tcx, CachedMir<'a, 'tcx>> {\n+    pub fn load_mir(&self, def_id: DefId) -> EvalResult<'tcx, MirRef<'tcx>> {\n         trace!(\"load mir {:?}\", def_id);\n-        if def_id.is_local() {\n-            Ok(CachedMir::Ref(self.mir_map.map.get(&def_id).unwrap()))\n+        if def_id.is_local() || self.tcx.sess.cstore.is_item_mir_available(def_id) {\n+            Ok(self.tcx.item_mir(def_id))\n         } else {\n-            let mut mir_cache = self.mir_cache.borrow_mut();\n-            if let Some(mir) = mir_cache.get(&def_id) {\n-                return Ok(CachedMir::Owned(mir.clone()));\n-            }\n-\n-            let cs = &self.tcx.sess.cstore;\n-            match cs.maybe_get_item_mir(self.tcx, def_id) {\n-                Some(mir) => {\n-                    let cached = Rc::new(mir);\n-                    mir_cache.insert(def_id, cached.clone());\n-                    Ok(CachedMir::Owned(cached))\n-                },\n-                None => Err(EvalError::NoMirFor(self.tcx.item_path_str(def_id))),\n-            }\n+            Err(EvalError::NoMirFor(self.tcx.item_path_str(def_id)))\n         }\n     }\n \n@@ -358,7 +329,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         &mut self,\n         def_id: DefId,\n         span: codemap::Span,\n-        mir: CachedMir<'a, 'tcx>,\n+        mir: MirRef<'tcx>,\n         substs: &'tcx Substs<'tcx>,\n         return_lvalue: Lvalue<'tcx>,\n         return_to_block: StackPopCleanup,\n@@ -371,7 +342,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let locals = vec![None; num_locals];\n \n         self.stack.push(Frame {\n-            mir: mir.clone(),\n+            mir: mir,\n             block: mir::START_BLOCK,\n             return_to_block: return_to_block,\n             return_lvalue: return_lvalue,\n@@ -483,7 +454,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let dest_ty = self.lvalue_ty(lvalue);\n         let dest_layout = self.type_layout(dest_ty);\n \n-        use rustc::mir::repr::Rvalue::*;\n+        use rustc::mir::Rvalue::*;\n         match *rvalue {\n             Use(ref operand) => {\n                 let value = self.eval_operand(operand)?;\n@@ -653,7 +624,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             Cast(kind, ref operand, cast_ty) => {\n                 debug_assert_eq!(self.monomorphize(cast_ty, self.substs()), dest_ty);\n-                use rustc::mir::repr::CastKind::*;\n+                use rustc::mir::CastKind::*;\n                 match kind {\n                     Unsize => {\n                         let src = self.eval_operand(operand)?;\n@@ -812,12 +783,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     fn eval_operand(&mut self, op: &mir::Operand<'tcx>) -> EvalResult<'tcx, Value> {\n-        use rustc::mir::repr::Operand::*;\n+        use rustc::mir::Operand::*;\n         match *op {\n             Consume(ref lvalue) => self.eval_and_read_lvalue(lvalue),\n \n             Constant(mir::Constant { ref literal, ty, .. }) => {\n-                use rustc::mir::repr::Literal;\n+                use rustc::mir::Literal;\n                 let value = match *literal {\n                     Literal::Value { ref value } => self.const_to_value(value)?,\n \n@@ -883,7 +854,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     fn eval_lvalue(&mut self, mir_lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Lvalue<'tcx>> {\n-        use rustc::mir::repr::Lvalue::*;\n+        use rustc::mir::Lvalue::*;\n         let lvalue = match *mir_lvalue {\n             Local(mir::RETURN_POINTER) => self.frame().return_lvalue,\n \n@@ -922,7 +893,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let base_ty = self.lvalue_ty(&proj.base);\n         let base_layout = self.type_layout(base_ty);\n \n-        use rustc::mir::repr::ProjectionElem::*;\n+        use rustc::mir::ProjectionElem::*;\n         let (ptr, extra) = match proj.elem {\n             Field(field, field_ty) => {\n                 // FIXME(solson)\n@@ -1462,16 +1433,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(Value::ByVal(val))\n     }\n \n-    fn frame(&self) -> &Frame<'a, 'tcx> {\n+    fn frame(&self) -> &Frame<'tcx> {\n         self.stack.last().expect(\"no call frames exist\")\n     }\n \n-    pub fn frame_mut(&mut self) -> &mut Frame<'a, 'tcx> {\n+    pub fn frame_mut(&mut self) -> &mut Frame<'tcx> {\n         self.stack.last_mut().expect(\"no call frames exist\")\n     }\n \n-    fn mir(&self) -> CachedMir<'a, 'tcx> {\n-        self.frame().mir.clone()\n+    fn mir(&self) -> MirRef<'tcx> {\n+        Ref::clone(&self.frame().mir)\n     }\n \n     fn substs(&self) -> &'tcx Substs<'tcx> {\n@@ -1583,7 +1554,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx: 'a> Frame<'a, 'tcx> {\n+impl<'tcx> Frame<'tcx> {\n     pub fn get_local(&self, local: mir::Local) -> Option<Value> {\n         // Subtract 1 because we don't store a value for the ReturnPointer, the local with index 0.\n         self.locals[local.index() - 1]\n@@ -1630,34 +1601,23 @@ impl<'tcx> Lvalue<'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> Deref for CachedMir<'mir, 'tcx> {\n-    type Target = mir::Mir<'tcx>;\n-    fn deref(&self) -> &mir::Mir<'tcx> {\n-        match *self {\n-            CachedMir::Ref(r) => r,\n-            CachedMir::Owned(ref rc) => rc,\n-        }\n-    }\n-}\n-\n pub fn eval_main<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir_map: &'a MirMap<'tcx>,\n     def_id: DefId,\n     memory_size: usize,\n     step_limit: u64,\n     stack_limit: usize,\n ) {\n-    let mir = mir_map.map.get(&def_id).expect(\"no mir for main function\");\n-    let mut ecx = EvalContext::new(tcx, mir_map, memory_size, stack_limit);\n+    let mut ecx = EvalContext::new(tcx, memory_size, stack_limit);\n+    let mir = ecx.load_mir(def_id).expect(\"main function's MIR not found\");\n \n     ecx.push_stack_frame(\n         def_id,\n         mir.span,\n-        CachedMir::Ref(mir),\n+        mir,\n         tcx.intern_substs(&[]),\n         Lvalue::from_ptr(Pointer::zst_ptr()),\n-        StackPopCleanup::None\n+        StackPopCleanup::None,\n     ).expect(\"could not allocate first stack frame\");\n \n     for _ in 0..step_limit {\n@@ -1695,15 +1655,15 @@ fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n         impl<'tcx> ::std::panic::RefUnwindSafe for Instance<'tcx> {}\n         impl<'tcx> fmt::Display for Instance<'tcx> {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                ppaux::parameterized(f, self.1, self.0, ppaux::Ns::Value, &[])\n+                ppaux::parameterized(f, self.1, self.0, &[])\n             }\n         }\n         err.span_note(span, &format!(\"inside call to {}\", Instance(def_id, substs)));\n     }\n     err.emit();\n }\n \n-pub fn run_mir_passes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &mut MirMap<'tcx>) {\n+pub fn run_mir_passes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut passes = ::rustc::mir::transform::Passes::new();\n     passes.push_hook(Box::new(::rustc_mir::transform::dump_mir::DumpMir));\n     passes.push_pass(Box::new(::rustc_mir::transform::no_landing_pads::NoLandingPads));\n@@ -1716,7 +1676,7 @@ pub fn run_mir_passes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &mut MirMa\n     passes.push_pass(Box::new(::rustc_mir::transform::simplify_cfg::SimplifyCfg::new(\"elaborate-drops\")));\n     passes.push_pass(Box::new(::rustc_mir::transform::dump_mir::Marker(\"PreMiri\")));\n \n-    passes.run_passes(tcx, mir_map);\n+    passes.run_passes(tcx);\n }\n \n // TODO(solson): Upstream these methods into rustc::ty::layout."}, {"sha": "4c03b3c42aa1d6618278eb085cd7e937370220a0", "filename": "src/interpreter/step.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19c44dab056ededb388d8336e85341c00f2a2570/src%2Finterpreter%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c44dab056ededb388d8336e85341c00f2a2570/src%2Finterpreter%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstep.rs?ref=19c44dab056ededb388d8336e85341c00f2a2570", "patch": "@@ -3,21 +3,21 @@\n //! The main entry point is the `step` method.\n \n use super::{\n-    CachedMir,\n     GlobalId,\n     EvalContext,\n     Lvalue,\n     StackPopCleanup,\n     Global,\n+    MirRef,\n };\n use error::EvalResult;\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use rustc::ty::{subst, self};\n use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::mir::visit::{Visitor, LvalueContext};\n+use std::cell::Ref;\n use syntax::codemap::Span;\n-use std::rc::Rc;\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     /// Returns true as long as there are more things to do.\n@@ -38,7 +38,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 substs: self.substs(),\n                 def_id: self.frame().def_id,\n                 ecx: self,\n-                mir: &mir,\n+                mir: Ref::clone(&mir),\n                 new_constants: &mut new,\n             }.visit_statement(block, stmt, mir::Location {\n                 block: block,\n@@ -59,7 +59,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             substs: self.substs(),\n             def_id: self.frame().def_id,\n             ecx: self,\n-            mir: &mir,\n+            mir: Ref::clone(&mir),\n             new_constants: &mut new,\n         }.visit_terminator(block, terminator, mir::Location {\n             block: block,\n@@ -76,7 +76,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> EvalResult<'tcx, ()> {\n         trace!(\"{:?}\", stmt);\n \n-        use rustc::mir::repr::StatementKind::*;\n+        use rustc::mir::StatementKind::*;\n         match stmt.kind {\n             Assign(ref lvalue, ref rvalue) => self.eval_rvalue_into_lvalue(rvalue, lvalue)?,\n             SetDiscriminant { .. } => unimplemented!(),\n@@ -110,7 +110,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n struct ConstantExtractor<'a, 'b: 'a, 'tcx: 'b> {\n     span: Span,\n     ecx: &'a mut EvalContext<'b, 'tcx>,\n-    mir: &'a mir::Mir<'tcx>,\n+    mir: MirRef<'tcx>,\n     def_id: DefId,\n     substs: &'tcx subst::Substs<'tcx>,\n     new_constants: &'a mut EvalResult<'tcx, u64>,\n@@ -165,7 +165,6 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n                 }\n             },\n             mir::Literal::Promoted { index } => {\n-                let mir = self.mir.promoted[index].clone();\n                 let cid = GlobalId {\n                     def_id: self.def_id,\n                     substs: self.substs,\n@@ -174,8 +173,9 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n                 if self.ecx.globals.contains_key(&cid) {\n                     return;\n                 }\n+                let mir = Ref::clone(&self.mir);\n+                let mir = Ref::map(mir, |mir| &mir.promoted[index]);\n                 self.try(|this| {\n-                    let mir = CachedMir::Owned(Rc::new(mir));\n                     let ty = this.ecx.monomorphize(mir.return_ty, this.substs);\n                     this.ecx.globals.insert(cid, Global::uninitialized(ty));\n                     this.ecx.push_stack_frame(this.def_id,"}, {"sha": "48098e4f497d036e7b91172b40aad263a278e763", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19c44dab056ededb388d8336e85341c00f2a2570/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c44dab056ededb388d8336e85341c00f2a2570/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=19c44dab056ededb388d8336e85341c00f2a2570", "patch": "@@ -1,5 +1,5 @@\n use rustc::hir::def_id::DefId;\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use rustc::ty::layout::Layout;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty};"}, {"sha": "823caae623e0b464cf55519a0c757eb1b5ac5629", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19c44dab056ededb388d8336e85341c00f2a2570/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c44dab056ededb388d8336e85341c00f2a2570/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=19c44dab056ededb388d8336e85341c00f2a2570", "patch": "@@ -1,5 +1,5 @@\n use rustc::hir::def_id::DefId;\n-use rustc::mir::repr as mir;\n+use rustc::mir;\n use rustc::traits::{self, Reveal};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::layout::Layout;\n@@ -28,7 +28,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         &mut self,\n         terminator: &mir::Terminator<'tcx>,\n     ) -> EvalResult<'tcx, ()> {\n-        use rustc::mir::repr::TerminatorKind::*;\n+        use rustc::mir::TerminatorKind::*;\n         match terminator.kind {\n             Return => self.pop_stack_frame()?,\n \n@@ -204,7 +204,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     mir,\n                     resolved_substs,\n                     return_lvalue,\n-                    return_to_block\n+                    return_to_block,\n                 )?;\n \n                 let arg_locals = self.frame().mir.args_iter();"}, {"sha": "d957e947e386e0a5a379228e0638f6c5df2032ba", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19c44dab056ededb388d8336e85341c00f2a2570/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c44dab056ededb388d8336e85341c00f2a2570/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=19c44dab056ededb388d8336e85341c00f2a2570", "patch": "@@ -4,6 +4,7 @@\n     collections_bound,\n     rustc_private,\n     pub_restricted,\n+    cell_extras,\n )]\n \n // From rustc.\n@@ -30,7 +31,6 @@ pub use error::{\n };\n \n pub use interpreter::{\n-    CachedMir,\n     EvalContext,\n     Frame,\n     eval_main,"}, {"sha": "74546626d6ec1b63be95004acdfa23fec0facd33", "filename": "src/primval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19c44dab056ededb388d8336e85341c00f2a2570/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c44dab056ededb388d8336e85341c00f2a2570/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=19c44dab056ededb388d8336e85341c00f2a2570", "patch": "@@ -3,7 +3,7 @@\n \n use std::mem::transmute;\n \n-use rustc::mir::repr as mir;\n+use rustc::mir;\n \n use error::{EvalError, EvalResult};\n use memory::{AllocId, Pointer};\n@@ -274,7 +274,7 @@ pub fn binary_op<'tcx>(\n     left: PrimVal,\n     right: PrimVal\n ) -> EvalResult<'tcx, (PrimVal, bool)> {\n-    use rustc::mir::repr::BinOp::*;\n+    use rustc::mir::BinOp::*;\n     use self::PrimValKind::*;\n \n     match (left.try_as_ptr(), right.try_as_ptr()) {\n@@ -377,7 +377,7 @@ pub fn binary_op<'tcx>(\n }\n \n fn unrelated_ptr_ops<'tcx>(bin_op: mir::BinOp) -> EvalResult<'tcx, PrimVal> {\n-    use rustc::mir::repr::BinOp::*;\n+    use rustc::mir::BinOp::*;\n     match bin_op {\n         Eq => Ok(PrimVal::from_bool(false)),\n         Ne => Ok(PrimVal::from_bool(true)),\n@@ -387,7 +387,7 @@ fn unrelated_ptr_ops<'tcx>(bin_op: mir::BinOp) -> EvalResult<'tcx, PrimVal> {\n }\n \n pub fn unary_op<'tcx>(un_op: mir::UnOp, val: PrimVal) -> EvalResult<'tcx, PrimVal> {\n-    use rustc::mir::repr::UnOp::*;\n+    use rustc::mir::UnOp::*;\n     use self::PrimValKind::*;\n \n     let bits = match (un_op, val.kind) {"}]}