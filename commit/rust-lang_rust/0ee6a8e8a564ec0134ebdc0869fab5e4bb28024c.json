{"sha": "0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZTZhOGU4YTU2NGVjMDEzNGViZGMwODY5ZmFiNWU0YmIyODAyNGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-10T06:41:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-10T06:41:53Z"}, "message": "auto merge of #14606 : pcwalton/rust/fn-trait-sugar, r=alexcrichton\n\nr? @alexcrichton", "tree": {"sha": "10716149ae1ab45f5999f1a2b93202a41ba03262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10716149ae1ab45f5999f1a2b93202a41ba03262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "html_url": "https://github.com/rust-lang/rust/commit/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bc2d03955618664377e98352d784a7f145db24a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc2d03955618664377e98352d784a7f145db24a", "html_url": "https://github.com/rust-lang/rust/commit/5bc2d03955618664377e98352d784a7f145db24a"}, {"sha": "f02b6f3a8bf82ca11ba50a285841fb372c4da459", "url": "https://api.github.com/repos/rust-lang/rust/commits/f02b6f3a8bf82ca11ba50a285841fb372c4da459", "html_url": "https://github.com/rust-lang/rust/commit/f02b6f3a8bf82ca11ba50a285841fb372c4da459"}], "stats": {"total": 389, "additions": 343, "deletions": 46}, "files": [{"sha": "cd472321237624db94cc4ad4b6e4c6776dbb5145", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -57,6 +57,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"linkage\", Active),\n     (\"struct_inherit\", Active),\n     (\"overloaded_calls\", Active),\n+    (\"unboxed_closure_sugar\", Active),\n \n     (\"quad_precision_float\", Active),\n \n@@ -291,6 +292,11 @@ impl<'a> Visitor<()> for Context<'a> {\n \n             },\n             ast::TyBox(_) => { self.gate_box(t.span); }\n+            ast::TyUnboxedFn(_) => {\n+                self.gate_feature(\"unboxed_closure_sugar\",\n+                                  t.span,\n+                                  \"unboxed closure trait sugar is experimental\");\n+            }\n             _ => {}\n         }\n "}, {"sha": "89d37bb98b89af187c4bdfecfce26dfdf7a46d4b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -3856,14 +3856,20 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn resolve_type_parameter_bound(&mut self,\n-                                        id: NodeId,\n-                                        type_parameter_bound: &TyParamBound) {\n+                                    id: NodeId,\n+                                    type_parameter_bound: &TyParamBound) {\n         match *type_parameter_bound {\n             TraitTyParamBound(ref tref) => {\n                 self.resolve_trait_reference(id, tref, TraitBoundingTypeParameter)\n             }\n-            StaticRegionTyParamBound => {}\n-            OtherRegionTyParamBound(_) => {}\n+            UnboxedFnTyParamBound(ref unboxed_function) => {\n+                for argument in unboxed_function.decl.inputs.iter() {\n+                    self.resolve_type(argument.ty);\n+                }\n+\n+                self.resolve_type(unboxed_function.decl.output);\n+            }\n+            StaticRegionTyParamBound | OtherRegionTyParamBound(_) => {}\n         }\n     }\n "}, {"sha": "1e6f5fe870be321b74df6f78cf03f976afef45a0", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 88, "deletions": 8, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -51,13 +51,14 @@\n \n use middle::const_eval;\n use middle::def;\n-use middle::subst;\n+use middle::lang_items::FnMutTraitLangItem;\n use middle::subst::{Subst, Substs};\n-use middle::ty::{ty_param_substs_and_ty};\n+use middle::subst;\n+use middle::ty::ty_param_substs_and_ty;\n use middle::ty;\n-use middle::typeck::rscope;\n-use middle::typeck::rscope::{RegionScope};\n use middle::typeck::lookup_def_tcx;\n+use middle::typeck::rscope::RegionScope;\n+use middle::typeck::rscope;\n use util::ppaux::Repr;\n \n use std::rc::Rc;\n@@ -469,6 +470,38 @@ fn ast_ty_to_mt<AC:AstConv, RS:RegionScope>(this: &AC,\n     ty::mt {ty: ast_ty_to_ty(this, rscope, ty), mutbl: ast::MutImmutable}\n }\n \n+pub fn trait_ref_for_unboxed_function<AC:AstConv,\n+                                      RS:RegionScope>(\n+                                      this: &AC,\n+                                      rscope: &RS,\n+                                      unboxed_function: &ast::UnboxedFnTy)\n+                                      -> ty::TraitRef {\n+    let fn_mut_trait_did = this.tcx()\n+                               .lang_items\n+                               .require(FnMutTraitLangItem)\n+                               .unwrap();\n+    let input_types =\n+        unboxed_function.decl\n+                        .inputs\n+                        .iter()\n+                        .map(|input| {\n+                            ast_ty_to_ty(this, rscope, input.ty)\n+                        }).collect::<Vec<_>>();\n+    let input_tuple = ty::mk_tup(this.tcx(), input_types);\n+    let output_type = ast_ty_to_ty(this,\n+                                   rscope,\n+                                   unboxed_function.decl.output);\n+    let substs = subst::Substs {\n+        self_ty: None,\n+        tps: vec!(input_tuple, output_type),\n+        regions: subst::NonerasedRegions(Vec::new()),\n+    };\n+    ty::TraitRef {\n+        def_id: fn_mut_trait_did,\n+        substs: substs,\n+    }\n+}\n+\n // Handle `~`, `Box`, and `&` being able to mean strs and vecs.\n // If a_seq_ty is a str or a vec, make it a str/vec.\n // Also handle first-class trait types.\n@@ -491,6 +524,32 @@ fn mk_pointer<AC:AstConv,\n             }\n             return constr(ty::mk_vec(tcx, mt, None));\n         }\n+        ast::TyUnboxedFn(ref unboxed_function) => {\n+            let trait_store = match ptr_ty {\n+                Uniq => ty::UniqTraitStore,\n+                RPtr(r) => {\n+                    ty::RegionTraitStore(r, a_seq_ty.mutbl)\n+                }\n+                _ => {\n+                    tcx.sess.span_err(\n+                        a_seq_ty.ty.span,\n+                        \"~trait or &trait are the only supported \\\n+                         forms of casting-to-trait\");\n+                    return ty::mk_err();\n+                }\n+            };\n+            let ty::TraitRef {\n+                def_id,\n+                substs\n+            } = trait_ref_for_unboxed_function(this,\n+                                               rscope,\n+                                               *unboxed_function);\n+            return ty::mk_trait(this.tcx(),\n+                                def_id,\n+                                substs,\n+                                trait_store,\n+                                ty::empty_builtin_bounds());\n+        }\n         ast::TyPath(ref path, ref bounds, id) => {\n             // Note that the \"bounds must be empty if path is not a trait\"\n             // restriction is enforced in the below case for ty_path, which\n@@ -528,7 +587,10 @@ fn mk_pointer<AC:AstConv,\n                             return ty::mk_err();\n                         }\n                     };\n-                    let bounds = conv_builtin_bounds(this.tcx(), bounds, trait_store);\n+                    let bounds = conv_builtin_bounds(this.tcx(),\n+                                                     path.span,\n+                                                     bounds,\n+                                                     trait_store);\n                     return ty::mk_trait(tcx,\n                                         result.def_id,\n                                         result.substs.clone(),\n@@ -621,7 +683,10 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n \n                 // Use corresponding trait store to figure out default bounds\n                 // if none were specified.\n-                let bounds = conv_builtin_bounds(this.tcx(), &f.bounds, store);\n+                let bounds = conv_builtin_bounds(this.tcx(),\n+                                                 ast_ty.span,\n+                                                 &f.bounds,\n+                                                 store);\n \n                 let fn_decl = ty_of_closure(this,\n                                             ast_ty.id,\n@@ -636,7 +701,10 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n             ast::TyProc(ref f) => {\n                 // Use corresponding trait store to figure out default bounds\n                 // if none were specified.\n-                let bounds = conv_builtin_bounds(this.tcx(), &f.bounds, ty::UniqTraitStore);\n+                let bounds = conv_builtin_bounds(this.tcx(),\n+                                                 ast_ty.span,\n+                                                 &f.bounds,\n+                                                 ty::UniqTraitStore);\n \n                 let fn_decl = ty_of_closure(this,\n                                             ast_ty.id,\n@@ -648,6 +716,11 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                                             None);\n                 ty::mk_closure(tcx, fn_decl)\n             }\n+            ast::TyUnboxedFn(_) => {\n+                tcx.sess.span_err(ast_ty.span,\n+                                  \"cannot use unboxed functions here\");\n+                ty::mk_err()\n+            }\n             ast::TyPath(ref path, ref bounds, id) => {\n                 let a_def = match tcx.def_map.borrow().find(&id) {\n                     None => {\n@@ -891,7 +964,9 @@ pub fn ty_of_closure<AC:AstConv>(\n     }\n }\n \n-fn conv_builtin_bounds(tcx: &ty::ctxt, ast_bounds: &Option<OwnedSlice<ast::TyParamBound>>,\n+fn conv_builtin_bounds(tcx: &ty::ctxt,\n+                       span: Span,\n+                       ast_bounds: &Option<OwnedSlice<ast::TyParamBound>>,\n                        store: ty::TraitStore)\n                        -> ty::BuiltinBounds {\n     //! Converts a list of bounds from the AST into a `BuiltinBounds`\n@@ -928,6 +1003,11 @@ fn conv_builtin_bounds(tcx: &ty::ctxt, ast_bounds: &Option<OwnedSlice<ast::TyPar\n                     ast::StaticRegionTyParamBound => {\n                         builtin_bounds.add(ty::BoundStatic);\n                     }\n+                    ast::UnboxedFnTyParamBound(_) => {\n+                        tcx.sess.span_err(span,\n+                                          \"unboxed functions are not allowed \\\n+                                           here\");\n+                    }\n                     ast::OtherRegionTyParamBound(span) => {\n                         if !tcx.sess.features.issue_5723_bootstrap.get() {\n                             tcx.sess.span_err("}, {"sha": "edb7f589e952305bee2428335c1efbb3e510f5d3", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -48,22 +48,21 @@ use middle::typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n use util::ppaux;\n use util::ppaux::Repr;\n \n-use std::rc::Rc;\n use std::collections::{HashMap, HashSet};\n-\n+use std::rc::Rc;\n use syntax::abi;\n-use syntax::ast::{StaticRegionTyParamBound, OtherRegionTyParamBound,\n-                  TraitTyParamBound};\n+use syntax::ast::{StaticRegionTyParamBound, OtherRegionTyParamBound};\n+use syntax::ast::{TraitTyParamBound, UnboxedFnTyParamBound};\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{local_def, split_trait_methods};\n use syntax::codemap::Span;\n use syntax::codemap;\n+use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token::special_idents;\n use syntax::parse::token;\n use syntax::print::pprust::{path_to_str};\n use syntax::visit;\n-use syntax::owned_slice::OwnedSlice;\n \n struct CollectItemTypesVisitor<'a> {\n     ccx: &'a CrateCtxt<'a>\n@@ -1114,6 +1113,20 @@ fn ty_generics(ccx: &CrateCtxt,\n                     param_bounds.builtin_bounds.add(ty::BoundStatic);\n                 }\n \n+                UnboxedFnTyParamBound(ref unboxed_function) => {\n+                    let rscope = ExplicitRscope;\n+                    let mut trait_ref =\n+                        astconv::trait_ref_for_unboxed_function(\n+                            ccx,\n+                            &rscope,\n+                            unboxed_function);\n+                    let self_ty = ty::mk_param(ccx.tcx,\n+                                               param_ty.idx,\n+                                               param_ty.def_id);\n+                    trait_ref.substs.self_ty = Some(self_ty);\n+                    param_bounds.trait_bounds.push(Rc::new(trait_ref));\n+                }\n+\n                 OtherRegionTyParamBound(span) => {\n                     if !ccx.tcx.sess.features.issue_5723_bootstrap.get() {\n                         ccx.tcx.sess.span_err("}, {"sha": "8f53c0a7530516a778af8878bd86564d9c69272b", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -909,6 +909,9 @@ impl<'a> Rebuilder<'a> {\n             match tpb {\n                 &ast::StaticRegionTyParamBound => ast::StaticRegionTyParamBound,\n                 &ast::OtherRegionTyParamBound(s) => ast::OtherRegionTyParamBound(s),\n+                &ast::UnboxedFnTyParamBound(unboxed_function_type) => {\n+                    ast::UnboxedFnTyParamBound(unboxed_function_type)\n+                }\n                 &ast::TraitTyParamBound(ref tr) => {\n                     let last_seg = tr.path.segments.last().unwrap();\n                     let mut insert = Vec::new();"}, {"sha": "54128fda6c6a5fc95b2e7182eba07119b5a8f5dc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -477,6 +477,10 @@ impl Clean<TyParamBound> for ast::TyParamBound {\n         match *self {\n             ast::StaticRegionTyParamBound => RegionBound,\n             ast::OtherRegionTyParamBound(_) => RegionBound,\n+            ast::UnboxedFnTyParamBound(_) => {\n+                // FIXME(pcwalton): Wrong.\n+                RegionBound\n+            }\n             ast::TraitTyParamBound(ref t) => TraitBound(t.clean()),\n         }\n     }"}, {"sha": "9c3960d0f0622328299856e3363b5c4e878be690", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -175,6 +175,7 @@ pub static DUMMY_NODE_ID: NodeId = -1;\n pub enum TyParamBound {\n     TraitTyParamBound(TraitRef),\n     StaticRegionTyParamBound,\n+    UnboxedFnTyParamBound(UnboxedFnTy),\n     OtherRegionTyParamBound(Span) // FIXME -- just here until work for #5723 lands\n }\n \n@@ -769,6 +770,11 @@ pub struct BareFnTy {\n     pub decl: P<FnDecl>\n }\n \n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+pub struct UnboxedFnTy {\n+    pub decl: P<FnDecl>,\n+}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub enum Ty_ {\n     TyNil,\n@@ -782,6 +788,7 @@ pub enum Ty_ {\n     TyClosure(@ClosureTy, Option<Lifetime>),\n     TyProc(@ClosureTy),\n     TyBareFn(@BareFnTy),\n+    TyUnboxedFn(@UnboxedFnTy),\n     TyTup(Vec<P<Ty>> ),\n     TyPath(Path, Option<OwnedSlice<TyParamBound>>, NodeId), // for #7264; see above\n     TyTypeof(@Expr),"}, {"sha": "03d0c283bcc5c522a81027e61cb6592fe9ad5707", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -185,6 +185,11 @@ pub trait Folder {\n                     decl: self.fold_fn_decl(f.decl)\n                 })\n             }\n+            TyUnboxedFn(ref f) => {\n+                TyUnboxedFn(@UnboxedFnTy {\n+                    decl: self.fold_fn_decl(f.decl),\n+                })\n+            }\n             TyTup(ref tys) => TyTup(tys.iter().map(|&ty| self.fold_ty(ty)).collect()),\n             TyPath(ref path, ref bounds, id) => {\n                 let id = self.new_id(id);\n@@ -440,6 +445,11 @@ fn fold_ty_param_bound<T: Folder>(tpb: &TyParamBound, fld: &mut T)\n     match *tpb {\n         TraitTyParamBound(ref ty) => TraitTyParamBound(fold_trait_ref(ty, fld)),\n         StaticRegionTyParamBound => StaticRegionTyParamBound,\n+        UnboxedFnTyParamBound(ref unboxed_function_type) => {\n+            UnboxedFnTyParamBound(UnboxedFnTy {\n+                decl: fld.fold_fn_decl(unboxed_function_type.decl),\n+            })\n+        }\n         OtherRegionTyParamBound(s) => OtherRegionTyParamBound(s)\n     }\n }"}, {"sha": "360b8daa948f3647d54bede0d22f5db24f70e571", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 71, "deletions": 13, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -52,9 +52,9 @@ use ast::{TTNonterminal, TupleVariantKind, Ty, Ty_, TyBot, TyBox};\n use ast::{TypeField, TyFixedLengthVec, TyClosure, TyProc, TyBareFn};\n use ast::{TyTypeof, TyInfer, TypeMethod};\n use ast::{TyNil, TyParam, TyParamBound, TyPath, TyPtr, TyRptr};\n-use ast::{TyTup, TyU32, TyUniq, TyVec, UnUniq};\n-use ast::{UnnamedField, UnsafeBlock, UnsafeFn, ViewItem};\n-use ast::{ViewItem_, ViewItemExternCrate, ViewItemUse};\n+use ast::{TyTup, TyU32, TyUnboxedFn, TyUniq, TyVec, UnUniq};\n+use ast::{UnboxedFnTy, UnboxedFnTyParamBound, UnnamedField, UnsafeBlock};\n+use ast::{UnsafeFn, ViewItem, ViewItem_, ViewItemExternCrate, ViewItemUse};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::Visibility;\n use ast;\n@@ -1058,15 +1058,27 @@ impl<'a> Parser<'a> {\n             Vec::new()\n         };\n \n-        let inputs = if self.eat(&token::OROR) {\n-            Vec::new()\n+        let (is_unboxed, inputs) = if self.eat(&token::OROR) {\n+            (false, Vec::new())\n         } else {\n             self.expect_or();\n+\n+            let is_unboxed = self.token == token::BINOP(token::AND) &&\n+                self.look_ahead(1, |t| {\n+                    token::is_keyword(keywords::Mut, t)\n+                }) &&\n+                self.look_ahead(2, |t| *t == token::COLON);\n+            if is_unboxed {\n+                self.bump();\n+                self.bump();\n+                self.bump();\n+            }\n+\n             let inputs = self.parse_seq_to_before_or(\n                 &token::COMMA,\n                 |p| p.parse_arg_general(false));\n             self.expect_or();\n-            inputs\n+            (is_unboxed, inputs)\n         };\n \n         let (region, bounds) = self.parse_optional_ty_param_bounds(true);\n@@ -1079,13 +1091,19 @@ impl<'a> Parser<'a> {\n             variadic: false\n         });\n \n-        TyClosure(@ClosureTy {\n-            fn_style: fn_style,\n-            onceness: onceness,\n-            bounds: bounds,\n-            decl: decl,\n-            lifetimes: lifetimes,\n-        }, region)\n+        if is_unboxed {\n+            TyUnboxedFn(@UnboxedFnTy {\n+                decl: decl,\n+            })\n+        } else {\n+            TyClosure(@ClosureTy {\n+                fn_style: fn_style,\n+                onceness: onceness,\n+                bounds: bounds,\n+                decl: decl,\n+                lifetimes: lifetimes,\n+            }, region)\n+        }\n     }\n \n     pub fn parse_unsafety(&mut self) -> FnStyle {\n@@ -3345,6 +3363,41 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    fn parse_unboxed_function_type(&mut self) -> UnboxedFnTy {\n+        let inputs = if self.eat(&token::OROR) {\n+            Vec::new()\n+        } else {\n+            self.expect_or();\n+\n+            if self.token == token::BINOP(token::AND) &&\n+                    self.look_ahead(1, |t| {\n+                        token::is_keyword(keywords::Mut, t)\n+                    }) &&\n+                    self.look_ahead(2, |t| *t == token::COLON) {\n+                self.bump();\n+                self.bump();\n+                self.bump();\n+            }\n+\n+            let inputs = self.parse_seq_to_before_or(&token::COMMA,\n+                                                     |p| {\n+                p.parse_arg_general(false)\n+            });\n+            self.expect_or();\n+            inputs\n+        };\n+\n+        let (return_style, output) = self.parse_ret_ty();\n+        UnboxedFnTy {\n+            decl: P(FnDecl {\n+                inputs: inputs,\n+                output: output,\n+                cf: return_style,\n+                variadic: false,\n+            })\n+        }\n+    }\n+\n     // matches optbounds = ( ( : ( boundseq )? )? )\n     // where   boundseq  = ( bound + boundseq ) | bound\n     // and     bound     = 'static | ty\n@@ -3394,6 +3447,11 @@ impl<'a> Parser<'a> {\n                     let tref = self.parse_trait_ref();\n                     result.push(TraitTyParamBound(tref));\n                 }\n+                token::BINOP(token::OR) | token::OROR => {\n+                    let unboxed_function_type =\n+                        self.parse_unboxed_function_type();\n+                    result.push(UnboxedFnTyParamBound(unboxed_function_type));\n+                }\n                 _ => break,\n             }\n "}, {"sha": "f22b24b5a29dd66aa97216ea9f145e9753224407", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 75, "deletions": 16, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -10,7 +10,7 @@\n \n use abi;\n use ast::{P, StaticRegionTyParamBound, OtherRegionTyParamBound,\n-          TraitTyParamBound, Required, Provided};\n+          TraitTyParamBound, UnboxedFnTyParamBound, Required, Provided};\n use ast;\n use ast_util;\n use owned_slice::OwnedSlice;\n@@ -505,27 +505,64 @@ impl<'a> State<'a> {\n                     lifetimes: f.lifetimes.clone(),\n                     ty_params: OwnedSlice::empty()\n                 };\n-                try!(self.print_ty_fn(Some(f.abi), None, &None,\n-                                   f.fn_style, ast::Many, f.decl, None, &None,\n-                                   Some(&generics), None));\n+                try!(self.print_ty_fn(Some(f.abi),\n+                                      None,\n+                                      &None,\n+                                      f.fn_style,\n+                                      ast::Many,\n+                                      f.decl,\n+                                      None,\n+                                      &None,\n+                                      Some(&generics),\n+                                      None,\n+                                      false));\n             }\n             ast::TyClosure(f, ref region) => {\n                 let generics = ast::Generics {\n                     lifetimes: f.lifetimes.clone(),\n                     ty_params: OwnedSlice::empty()\n                 };\n-                try!(self.print_ty_fn(None, Some('&'), region, f.fn_style,\n-                                      f.onceness, f.decl, None, &f.bounds,\n-                                      Some(&generics), None));\n+                try!(self.print_ty_fn(None,\n+                                      Some('&'),\n+                                      region,\n+                                      f.fn_style,\n+                                      f.onceness,\n+                                      f.decl,\n+                                      None,\n+                                      &f.bounds,\n+                                      Some(&generics),\n+                                      None,\n+                                      false));\n             }\n             ast::TyProc(f) => {\n                 let generics = ast::Generics {\n                     lifetimes: f.lifetimes.clone(),\n                     ty_params: OwnedSlice::empty()\n                 };\n-                try!(self.print_ty_fn(None, Some('~'), &None, f.fn_style,\n-                                      f.onceness, f.decl, None, &f.bounds,\n-                                      Some(&generics), None));\n+                try!(self.print_ty_fn(None,\n+                                      Some('~'),\n+                                      &None,\n+                                      f.fn_style,\n+                                      f.onceness,\n+                                      f.decl,\n+                                      None,\n+                                      &f.bounds,\n+                                      Some(&generics),\n+                                      None,\n+                                      false));\n+            }\n+            ast::TyUnboxedFn(f) => {\n+                try!(self.print_ty_fn(None,\n+                                      None,\n+                                      &None,\n+                                      ast::NormalFn,\n+                                      ast::Many,\n+                                      f.decl,\n+                                      None,\n+                                      &None,\n+                                      None,\n+                                      None,\n+                                      true));\n             }\n             ast::TyPath(ref path, ref bounds, _) => {\n                 try!(self.print_bounded_path(path, bounds));\n@@ -930,7 +967,8 @@ impl<'a> State<'a> {\n                               Some(m.ident),\n                               &None,\n                               Some(&m.generics),\n-                              Some(m.explicit_self.node)));\n+                              Some(m.explicit_self.node),\n+                              false));\n         word(&mut self.s, \";\")\n     }\n \n@@ -1925,6 +1963,19 @@ impl<'a> State<'a> {\n                 try!(match *bound {\n                     TraitTyParamBound(ref tref) => self.print_trait_ref(tref),\n                     StaticRegionTyParamBound => word(&mut self.s, \"'static\"),\n+                    UnboxedFnTyParamBound(ref unboxed_function_type) => {\n+                        self.print_ty_fn(None,\n+                                         None,\n+                                         &None,\n+                                         ast::NormalFn,\n+                                         ast::Many,\n+                                         unboxed_function_type.decl,\n+                                         None,\n+                                         &None,\n+                                         None,\n+                                         None,\n+                                         true)\n+                    }\n                     OtherRegionTyParamBound(_) => Ok(())\n                 })\n             }\n@@ -2112,8 +2163,9 @@ impl<'a> State<'a> {\n                        id: Option<ast::Ident>,\n                        opt_bounds: &Option<OwnedSlice<ast::TyParamBound>>,\n                        generics: Option<&ast::Generics>,\n-                       opt_explicit_self: Option<ast::ExplicitSelf_>)\n-        -> IoResult<()> {\n+                       opt_explicit_self: Option<ast::ExplicitSelf_>,\n+                       is_unboxed: bool)\n+                       -> IoResult<()> {\n         try!(self.ibox(indent_unit));\n \n         // Duplicates the logic in `print_fn_header_info()`.  This is because that\n@@ -2129,7 +2181,9 @@ impl<'a> State<'a> {\n             try!(self.print_fn_style(fn_style));\n             try!(self.print_opt_abi_and_extern_if_nondefault(opt_abi));\n             try!(self.print_onceness(onceness));\n-            try!(word(&mut self.s, \"fn\"));\n+            if !is_unboxed {\n+                try!(word(&mut self.s, \"fn\"));\n+            }\n         }\n \n         match id {\n@@ -2143,15 +2197,20 @@ impl<'a> State<'a> {\n         match generics { Some(g) => try!(self.print_generics(g)), _ => () }\n         try!(zerobreak(&mut self.s));\n \n-        if opt_sigil == Some('&') {\n+        if is_unboxed || opt_sigil == Some('&') {\n             try!(word(&mut self.s, \"|\"));\n         } else {\n             try!(self.popen());\n         }\n \n+        if is_unboxed {\n+            try!(word(&mut self.s, \"&mut\"));\n+            try!(self.word_space(\":\"));\n+        }\n+\n         try!(self.print_fn_args(decl, opt_explicit_self));\n \n-        if opt_sigil == Some('&') {\n+        if is_unboxed || opt_sigil == Some('&') {\n             try!(word(&mut self.s, \"|\"));\n         } else {\n             if decl.variadic {"}, {"sha": "b5ae8a3dea0e9e8aa98914ec6d955ccf23c8a269", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -383,6 +383,12 @@ pub fn walk_ty<E: Clone, V: Visitor<E>>(visitor: &mut V, typ: &Ty, env: E) {\n             walk_lifetime_decls(visitor, &function_declaration.lifetimes,\n                                 env.clone());\n         }\n+        TyUnboxedFn(ref function_declaration) => {\n+            for argument in function_declaration.decl.inputs.iter() {\n+                visitor.visit_ty(argument.ty, env.clone())\n+            }\n+            visitor.visit_ty(function_declaration.decl.output, env.clone());\n+        }\n         TyPath(ref path, ref bounds, id) => {\n             visitor.visit_path(path, id, env.clone());\n             for bounds in bounds.iter() {\n@@ -501,6 +507,13 @@ pub fn walk_ty_param_bounds<E: Clone, V: Visitor<E>>(visitor: &mut V,\n                 walk_trait_ref_helper(visitor, typ, env.clone())\n             }\n             StaticRegionTyParamBound => {}\n+            UnboxedFnTyParamBound(ref function_declaration) => {\n+                for argument in function_declaration.decl.inputs.iter() {\n+                    visitor.visit_ty(argument.ty, env.clone())\n+                }\n+                visitor.visit_ty(function_declaration.decl.output,\n+                                 env.clone());\n+            }\n             OtherRegionTyParamBound(..) => {}\n         }\n     }"}, {"sha": "b0c8d84b6646bb81dd6837b065f6c58a7440ff57", "filename": "src/test/run-pass/fn-trait-sugar.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Ftest%2Frun-pass%2Ffn-trait-sugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c/src%2Ftest%2Frun-pass%2Ffn-trait-sugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-trait-sugar.rs?ref=0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "patch": "@@ -0,0 +1,38 @@\n+\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closure_sugar)]\n+\n+use std::ops::FnMut;\n+\n+struct S;\n+\n+impl FnMut<(int,),int> for S {\n+    fn call_mut(&mut self, (x,): (int,)) -> int {\n+        x * x\n+    }\n+}\n+\n+fn call_it<F:|int|->int>(mut f: F, x: int) -> int {\n+    f.call_mut((x,)) + 3\n+}\n+\n+fn call_box(f: &mut |&mut: int|->int, x: int) -> int {\n+    f.call_mut((x,)) + 3\n+}\n+\n+fn main() {\n+    let x = call_it(S, 1);\n+    let y = call_box(&mut S, 1);\n+    assert!(x == 4);\n+    assert!(y == 4);\n+}\n+"}]}