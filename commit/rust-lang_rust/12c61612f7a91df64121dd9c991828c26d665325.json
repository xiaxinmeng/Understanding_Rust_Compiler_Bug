{"sha": "12c61612f7a91df64121dd9c991828c26d665325", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYzYxNjEyZjdhOTFkZjY0MTIxZGQ5Yzk5MTgyOGMyNmQ2NjUzMjU=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-02T18:37:11Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-07-28T12:31:59Z"}, "message": "Update lint documentation to use markdown headlines", "tree": {"sha": "677560fddd934e9aa004175515ae2d53f00d2f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/677560fddd934e9aa004175515ae2d53f00d2f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12c61612f7a91df64121dd9c991828c26d665325", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmEBTj8ACgkQHKDfKvWd\naKUmMg/+Nn0GxAF2Rw8umY7PfCTHLIkFABkcgBh0V5CyVXFcjn+RD/DHNcgIU08q\nDkMljBNhAStWhLbvLjEFEq5nIxHG8TiBTUtIZDkjFvzV/MEI+JKh3OZgKOWeifpI\nWV5jZ5BcAVBG6bIHiYBItN4bbvG3xt+pJrDD1pu1Gxoona61KGYbFYonij6H/Nzs\ndhjnD3GSMgauiHBicCZ5HK0Ct50ouBiYKh7ccyJP1XODhwDwZ6XXTwN5uZXlXpAm\nt6YJi8LtEJJz8DJaogAfUPC454b1g5rXiMcnY+7JIrlsfsTAvt5Uyrtw7S8C96nj\nkJpdmGiigCvYx/NxkJkXHOp53Kuy0vFNp6g4zNe3kE4UxPavy/jDNbh1zt0W6Go3\n8pibnsBgXQaxAEMGn6/2MXAhNVqCfvZ3Djvy90RlGiQJixE6RsmLfpbAfP64Cg+r\nQfVyzHDkzJl6Udaz74trZjT23x6rP/wta9w3fMUUamJOxpNp81zGbYx9sAMPZjwm\n8kj3jH0VOYXIoAnCU4slpLyGliMqNEUVsBCI8FxKkykBWzGMheVPNq8BGS0bDWLW\nirJ8H7pRObSCgQgDz9t+pT4ZZiB1ni4D3AJCsV3Sm8OeA0Ky3JX/87+XSNOUmsps\ntdaApWFCJOX6mveUa7L++k3tFXv8aUnSPUd9HBc5gpuYPFL40DA=\n=bQmk\n-----END PGP SIGNATURE-----", "payload": "tree 677560fddd934e9aa004175515ae2d53f00d2f19\nparent ac0fd99194141f189b3fc41ef2d8925e6fa359c2\nauthor xFrednet <xFrednet@gmail.com> 1625251031 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1627475519 +0200\n\nUpdate lint documentation to use markdown headlines\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12c61612f7a91df64121dd9c991828c26d665325", "html_url": "https://github.com/rust-lang/rust/commit/12c61612f7a91df64121dd9c991828c26d665325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12c61612f7a91df64121dd9c991828c26d665325/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac0fd99194141f189b3fc41ef2d8925e6fa359c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0fd99194141f189b3fc41ef2d8925e6fa359c2", "html_url": "https://github.com/rust-lang/rust/commit/ac0fd99194141f189b3fc41ef2d8925e6fa359c2"}], "stats": {"total": 5191, "additions": 2717, "deletions": 2474}, "files": [{"sha": "3a81aaba6de04054148e741ee8c551102b869b2c", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -169,14 +169,11 @@ use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n {pass_import}\n \n declare_clippy_lint! {{\n-    /// **What it does:**\n+    /// ### What it does\n     ///\n-    /// **Why is this bad?**\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n     ///\n+    /// ### Example\n     /// ```rust\n     /// // example code where clippy issues a warning\n     /// ```"}, {"sha": "1483f3f9185aeb741d4f76b4b29ad18250c6263d", "filename": "clippy_lints/src/absurd_extreme_comparisons.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fabsurd_extreme_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fabsurd_extreme_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fabsurd_extreme_comparisons.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,24 +11,26 @@ use clippy_utils::ty::is_isize_or_usize;\n use clippy_utils::{clip, int_bits, unsext};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for comparisons where one side of the relation is\n+    /// ### What it does\n+    /// Checks for comparisons where one side of the relation is\n     /// either the minimum or maximum value for its type and warns if it involves a\n     /// case that is always true or always false. Only integer and boolean types are\n     /// checked.\n     ///\n-    /// **Why is this bad?** An expression like `min <= x` may misleadingly imply\n+    /// ### Why is this bad?\n+    /// An expression like `min <= x` may misleadingly imply\n     /// that it is possible for `x` to be less than the minimum. Expressions like\n     /// `max < x` are probably mistakes.\n     ///\n-    /// **Known problems:** For `usize` the size of the current compile target will\n+    /// ### Known problems\n+    /// For `usize` the size of the current compile target will\n     /// be assumed (e.g., 64 bits on 64 bit systems). This means code that uses such\n     /// a comparison to detect target pointer width will trigger this lint. One can\n     /// use `mem::sizeof` and compare its value or conditional compilation\n     /// attributes\n     /// like `#[cfg(target_pointer_width = \"64\")] ..` instead.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let vec: Vec<isize> = Vec::new();\n     /// if vec.len() <= 0 {}"}, {"sha": "6100f4e435a8a9b08e6f658bcf5014d8a8186d7c", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,21 +7,21 @@ use rustc_span::symbol;\n use std::f64::consts as f64;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for floating point literals that approximate\n+    /// ### What it does\n+    /// Checks for floating point literals that approximate\n     /// constants which are defined in\n     /// [`std::f32::consts`](https://doc.rust-lang.org/stable/std/f32/consts/#constants)\n     /// or\n     /// [`std::f64::consts`](https://doc.rust-lang.org/stable/std/f64/consts/#constants),\n     /// respectively, suggesting to use the predefined constant.\n     ///\n-    /// **Why is this bad?** Usually, the definition in the standard library is more\n+    /// ### Why is this bad?\n+    /// Usually, the definition in the standard library is more\n     /// precise than what people come up with. If you find that your definition is\n     /// actually more precise, please [file a Rust\n     /// issue](https://github.com/rust-lang/rust/issues).\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = 3.14;\n     /// let y = 1_f64 / x;"}, {"sha": "36fe7b7a8675441943a430129f70e00f90bc875c", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,21 +6,21 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for integer arithmetic operations which could overflow or panic.\n+    /// ### What it does\n+    /// Checks for integer arithmetic operations which could overflow or panic.\n     ///\n     /// Specifically, checks for any operators (`+`, `-`, `*`, `<<`, etc) which are capable\n     /// of overflowing according to the [Rust\n     /// Reference](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow),\n     /// or which can panic (`/`, `%`). No bounds analysis or sophisticated reasoning is\n     /// attempted.\n     ///\n-    /// **Why is this bad?** Integer overflow will trigger a panic in debug builds or will wrap in\n+    /// ### Why is this bad?\n+    /// Integer overflow will trigger a panic in debug builds or will wrap in\n     /// release mode. Division by zero will cause a panic in either mode. In some applications one\n     /// wants explicitly checked, wrapping or saturating arithmetic.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let a = 0;\n     /// a + 1;\n@@ -31,14 +31,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for float arithmetic.\n+    /// ### What it does\n+    /// Checks for float arithmetic.\n     ///\n-    /// **Why is this bad?** For some embedded systems or kernel development, it\n+    /// ### Why is this bad?\n+    /// For some embedded systems or kernel development, it\n     /// can be useful to rule out floating-point numbers.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let a = 0.0;\n     /// a + 1.0;"}, {"sha": "7c39a3e2ce3ded627ced6d63b869cae08b545359", "filename": "clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fas_conversions.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -5,7 +5,8 @@ use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `as` conversions.\n+    /// ### What it does\n+    /// Checks for usage of `as` conversions.\n     ///\n     /// Note that this lint is specialized in linting *every single* use of `as`\n     /// regardless of whether good alternatives exist or not.\n@@ -15,14 +16,13 @@ declare_clippy_lint! {\n     /// There is a good explanation the reason why this lint should work in this way and how it is useful\n     /// [in this issue](https://github.com/rust-lang/rust-clippy/issues/5122).\n     ///\n-    /// **Why is this bad?** `as` conversions will perform many kinds of\n+    /// ### Why is this bad?\n+    /// `as` conversions will perform many kinds of\n     /// conversions, including silently lossy conversions and dangerous coercions.\n     /// There are cases when it makes sense to use `as`, so the lint is\n     /// Allow by default.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// let a: u32;\n     /// ..."}, {"sha": "825832eb79dab8e15bc49ed42a73fac97338223e", "filename": "clippy_lints/src/asm_syntax.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fasm_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fasm_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasm_syntax.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -53,14 +53,14 @@ fn check_expr_asm_syntax(lint: &'static Lint, cx: &EarlyContext<'_>, expr: &Expr\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of Intel x86 assembly syntax.\n+    /// ### What it does\n+    /// Checks for usage of Intel x86 assembly syntax.\n     ///\n-    /// **Why is this bad?** The lint has been enabled to indicate a preference\n+    /// ### Why is this bad?\n+    /// The lint has been enabled to indicate a preference\n     /// for AT&T x86 assembly syntax.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// ```rust,no_run\n     /// # #![feature(asm)]\n@@ -89,14 +89,14 @@ impl EarlyLintPass for InlineAsmX86IntelSyntax {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of AT&T x86 assembly syntax.\n+    /// ### What it does\n+    /// Checks for usage of AT&T x86 assembly syntax.\n     ///\n-    /// **Why is this bad?** The lint has been enabled to indicate a preference\n+    /// ### Why is this bad?\n+    /// The lint has been enabled to indicate a preference\n     /// for Intel x86 assembly syntax.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// ```rust,no_run\n     /// # #![feature(asm)]"}, {"sha": "cb9347a923d87fa9b58616966fd2acb702bf3c95", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,14 +8,17 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `assert!(true)` and `assert!(false)` calls.\n+    /// ### What it does\n+    /// Checks for `assert!(true)` and `assert!(false)` calls.\n     ///\n-    /// **Why is this bad?** Will be optimized out by the compiler or should probably be replaced by a\n+    /// ### Why is this bad?\n+    /// Will be optimized out by the compiler or should probably be replaced by a\n     /// `panic!()` or `unreachable!()`\n     ///\n-    /// **Known problems:** None\n+    /// ### Known problems\n+    /// None\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// assert!(false)\n     /// assert!(true)"}, {"sha": "2097a1feff9f362025189849c3f93ae48d8233f2", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,15 +12,18 @@ use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `a = a op b` or `a = b commutative_op a`\n+    /// ### What it does\n+    /// Checks for `a = a op b` or `a = b commutative_op a`\n     /// patterns.\n     ///\n-    /// **Why is this bad?** These can be written as the shorter `a op= b`.\n+    /// ### Why is this bad?\n+    /// These can be written as the shorter `a op= b`.\n     ///\n-    /// **Known problems:** While forbidden by the spec, `OpAssign` traits may have\n+    /// ### Known problems\n+    /// While forbidden by the spec, `OpAssign` traits may have\n     /// implementations that differ from the regular `Op` impl.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let mut a = 5;\n     /// let b = 0;\n@@ -37,17 +40,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `a op= a op b` or `a op= b op a` patterns.\n+    /// ### What it does\n+    /// Checks for `a op= a op b` or `a op= b op a` patterns.\n     ///\n-    /// **Why is this bad?** Most likely these are bugs where one meant to write `a\n+    /// ### Why is this bad?\n+    /// Most likely these are bugs where one meant to write `a\n     /// op= b`.\n     ///\n-    /// **Known problems:** Clippy cannot know for sure if `a op= a op b` should have\n+    /// ### Known problems\n+    /// Clippy cannot know for sure if `a op= a op b` should have\n     /// been `a = a op a op b` or `a = a op b`/`a op= b`. Therefore, it suggests both.\n     /// If `a op= a op b` is really the correct behaviour it should be\n     /// written as `a = a op a op b` as it's less confusing.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let mut a = 5;\n     /// let b = 2;"}, {"sha": "182736a5a205a6ab3178ef7de4e83af150df74e8", "filename": "clippy_lints/src/async_yields_async.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasync_yields_async.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,15 +7,14 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for async blocks that yield values of types\n+    /// ### What it does\n+    /// Checks for async blocks that yield values of types\n     /// that can themselves be awaited.\n     ///\n-    /// **Why is this bad?** An await is likely missing.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// An await is likely missing.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// async fn foo() {}\n     ///"}, {"sha": "cece28e8b3c3f110afa7a5d1c7224d9b26441efd", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,16 +8,16 @@ use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of invalid atomic\n+    /// ### What it does\n+    /// Checks for usage of invalid atomic\n     /// ordering in atomic loads/stores/exchanges/updates and\n     /// memory fences.\n     ///\n-    /// **Why is this bad?** Using an invalid atomic ordering\n+    /// ### Why is this bad?\n+    /// Using an invalid atomic ordering\n     /// will cause a panic at run-time.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,no_run\n     /// # use std::sync::atomic::{self, AtomicU8, Ordering};\n     ///"}, {"sha": "c9ff468874b58e953b66dfd03c65204b3cfeb010", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 40, "deletions": 34, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -41,22 +41,25 @@ static UNIX_SYSTEMS: &[&str] = &[\n static NON_UNIX_SYSTEMS: &[&str] = &[\"hermit\", \"none\", \"wasi\"];\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n+    /// ### What it does\n+    /// Checks for items annotated with `#[inline(always)]`,\n     /// unless the annotated function is empty or simply panics.\n     ///\n-    /// **Why is this bad?** While there are valid uses of this annotation (and once\n+    /// ### Why is this bad?\n+    /// While there are valid uses of this annotation (and once\n     /// you know when to use it, by all means `allow` this lint), it's a common\n     /// newbie-mistake to pepper one's code with it.\n     ///\n     /// As a rule of thumb, before slapping `#[inline(always)]` on a function,\n     /// measure if that additional function call really affects your runtime profile\n     /// sufficiently to make up for the increase in compile time.\n     ///\n-    /// **Known problems:** False positives, big time. This lint is meant to be\n+    /// ### Known problems\n+    /// False positives, big time. This lint is meant to be\n     /// deactivated by everyone doing serious performance work. This means having\n     /// done the measurement.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// #[inline(always)]\n     /// fn not_quite_hot_code(..) { ... }\n@@ -67,20 +70,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `extern crate` and `use` items annotated with\n+    /// ### What it does\n+    /// Checks for `extern crate` and `use` items annotated with\n     /// lint attributes.\n     ///\n     /// This lint permits `#[allow(unused_imports)]`, `#[allow(deprecated)]`,\n     /// `#[allow(unreachable_pub)]`, `#[allow(clippy::wildcard_imports)]` and\n     /// `#[allow(clippy::enum_glob_use)]` on `use` items and `#[allow(unused_imports)]` on\n     /// `extern crate` items with a `#[macro_use]` attribute.\n     ///\n-    /// **Why is this bad?** Lint attributes have no effect on crate imports. Most\n+    /// ### Why is this bad?\n+    /// Lint attributes have no effect on crate imports. Most\n     /// likely a `!` was forgotten.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// // Bad\n     /// #[deny(dead_code)]\n@@ -101,15 +104,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `#[deprecated]` annotations with a `since`\n+    /// ### What it does\n+    /// Checks for `#[deprecated]` annotations with a `since`\n     /// field that is not a valid semantic version.\n     ///\n-    /// **Why is this bad?** For checking the version of the deprecation, it must be\n+    /// ### Why is this bad?\n+    /// For checking the version of the deprecation, it must be\n     /// a valid semver. Failing that, the contained information is useless.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// #[deprecated(since = \"forever\")]\n     /// fn something_else() { /* ... */ }\n@@ -120,20 +123,22 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for empty lines after outer attributes\n+    /// ### What it does\n+    /// Checks for empty lines after outer attributes\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// Most likely the attribute was meant to be an inner attribute using a '!'.\n     /// If it was meant to be an outer attribute, then the following item\n     /// should not be separated by empty lines.\n     ///\n-    /// **Known problems:** Can cause false positives.\n+    /// ### Known problems\n+    /// Can cause false positives.\n     ///\n     /// From the clippy side it's difficult to detect empty lines between an attributes and the\n     /// following item because empty lines and comments are not part of the AST. The parsing\n     /// currently works for basic cases but is not perfect.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Good (as inner attribute)\n     /// #![allow(dead_code)]\n@@ -155,14 +160,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `warn`/`deny`/`forbid` attributes targeting the whole clippy::restriction category.\n+    /// ### What it does\n+    /// Checks for `warn`/`deny`/`forbid` attributes targeting the whole clippy::restriction category.\n     ///\n-    /// **Why is this bad?** Restriction lints sometimes are in contrast with other lints or even go against idiomatic rust.\n+    /// ### Why is this bad?\n+    /// Restriction lints sometimes are in contrast with other lints or even go against idiomatic rust.\n     /// These lints should only be enabled on a lint-by-lint basis and with careful consideration.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust\n     /// #![deny(clippy::restriction)]\n@@ -178,18 +183,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `#[cfg_attr(rustfmt, rustfmt_skip)]` and suggests to replace it\n+    /// ### What it does\n+    /// Checks for `#[cfg_attr(rustfmt, rustfmt_skip)]` and suggests to replace it\n     /// with `#[rustfmt::skip]`.\n     ///\n-    /// **Why is this bad?** Since tool_attributes ([rust-lang/rust#44690](https://github.com/rust-lang/rust/issues/44690))\n+    /// ### Why is this bad?\n+    /// Since tool_attributes ([rust-lang/rust#44690](https://github.com/rust-lang/rust/issues/44690))\n     /// are stable now, they should be used instead of the old `cfg_attr(rustfmt)` attributes.\n     ///\n-    /// **Known problems:** This lint doesn't detect crate level inner attributes, because they get\n+    /// ### Known problems\n+    /// This lint doesn't detect crate level inner attributes, because they get\n     /// processed before the PreExpansionPass lints get executed. See\n     /// [#3123](https://github.com/rust-lang/rust-clippy/pull/3123#issuecomment-422321765)\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// Bad:\n     /// ```rust\n     /// #[cfg_attr(rustfmt, rustfmt_skip)]\n@@ -207,15 +214,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for cfg attributes having operating systems used in target family position.\n+    /// ### What it does\n+    /// Checks for cfg attributes having operating systems used in target family position.\n     ///\n-    /// **Why is this bad?** The configuration option will not be recognised and the related item will not be included\n+    /// ### Why is this bad?\n+    /// The configuration option will not be recognised and the related item will not be included\n     /// by the conditional compilation engine.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// Bad:\n     /// ```rust\n     /// #[cfg(linux)]"}, {"sha": "0cc79c8b6e8cb4449ad75f5426aa68ac6d72fd59", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,21 +8,23 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to await while holding a\n+    /// ### What it does\n+    /// Checks for calls to await while holding a\n     /// non-async-aware MutexGuard.\n     ///\n-    /// **Why is this bad?** The Mutex types found in std::sync and parking_lot\n+    /// ### Why is this bad?\n+    /// The Mutex types found in std::sync and parking_lot\n     /// are not designed to operate in an async context across await points.\n     ///\n     /// There are two potential solutions. One is to use an asynx-aware Mutex\n     /// type. Many asynchronous foundation crates provide such a Mutex type. The\n     /// other solution is to ensure the mutex is unlocked before calling await,\n     /// either by introducing a scope or an explicit call to Drop::drop.\n     ///\n-    /// **Known problems:** Will report false positive for explicitly dropped guards ([#6446](https://github.com/rust-lang/rust-clippy/issues/6446)).\n-    ///\n-    /// **Example:**\n+    /// ### Known problems\n+    /// Will report false positive for explicitly dropped guards ([#6446](https://github.com/rust-lang/rust-clippy/issues/6446)).\n     ///\n+    /// ### Example\n     /// ```rust,ignore\n     /// use std::sync::Mutex;\n     ///\n@@ -51,17 +53,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to await while holding a\n+    /// ### What it does\n+    /// Checks for calls to await while holding a\n     /// `RefCell` `Ref` or `RefMut`.\n     ///\n-    /// **Why is this bad?** `RefCell` refs only check for exclusive mutable access\n+    /// ### Why is this bad?\n+    /// `RefCell` refs only check for exclusive mutable access\n     /// at runtime. Holding onto a `RefCell` ref across an `await` suspension point\n     /// risks panics from a mutable ref shared while other refs are outstanding.\n     ///\n-    /// **Known problems:** Will report false positive for explicitly dropped refs ([#6353](https://github.com/rust-lang/rust-clippy/issues/6353)).\n-    ///\n-    /// **Example:**\n+    /// ### Known problems\n+    /// Will report false positive for explicitly dropped refs ([#6353](https://github.com/rust-lang/rust-clippy/issues/6353)).\n     ///\n+    /// ### Example\n     /// ```rust,ignore\n     /// use std::cell::RefCell;\n     ///"}, {"sha": "11346e7c96af98b4f074eca91afd0de745ce4cba", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,7 +10,8 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for incompatible bit masks in comparisons.\n+    /// ### What it does\n+    /// Checks for incompatible bit masks in comparisons.\n     ///\n     /// The formula for detecting if an expression of the type `_ <bit_op> m\n     /// <cmp_op> c` (where `<bit_op>` is one of {`&`, `|`} and `<cmp_op>` is one of\n@@ -26,17 +27,16 @@ declare_clippy_lint! {\n     /// |`<`  or `>=`| `|`  |`x | 1 < 1` |`false`  |`m >= c`              |\n     /// |`<=` or `>` | `|`  |`x | 1 > 0` |`true`   |`m > c`               |\n     ///\n-    /// **Why is this bad?** If the bits that the comparison cares about are always\n+    /// ### Why is this bad?\n+    /// If the bits that the comparison cares about are always\n     /// set to zero or one by the bit mask, the comparison is constant `true` or\n     /// `false` (depending on mask, compared value, and operators).\n     ///\n     /// So the code is actively misleading, and the only reason someone would write\n     /// this intentionally is to win an underhanded Rust contest or create a\n     /// test-case for this lint.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = 1;\n     /// if (x & 1 == 2) { }\n@@ -47,7 +47,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for bit masks in comparisons which can be removed\n+    /// ### What it does\n+    /// Checks for bit masks in comparisons which can be removed\n     /// without changing the outcome. The basic structure can be seen in the\n     /// following table:\n     ///\n@@ -56,16 +57,18 @@ declare_clippy_lint! {\n     /// |`>` / `<=`|`|` / `^`|`x | 2 > 3`|`x > 3`|\n     /// |`<` / `>=`|`|` / `^`|`x ^ 1 < 4`|`x < 4`|\n     ///\n-    /// **Why is this bad?** Not equally evil as [`bad_bit_mask`](#bad_bit_mask),\n+    /// ### Why is this bad?\n+    /// Not equally evil as [`bad_bit_mask`](#bad_bit_mask),\n     /// but still a bit misleading, because the bit mask is ineffective.\n     ///\n-    /// **Known problems:** False negatives: This lint will only match instances\n+    /// ### Known problems\n+    /// False negatives: This lint will only match instances\n     /// where we have figured out the math (which is for a power-of-two compared\n     /// value). This means things like `x | 1 >= 7` (which would be better written\n     /// as `x >= 6`) will not be reported (but bit masks like this are fairly\n     /// uncommon).\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = 1;\n     /// if (x | 1 > 3) {  }\n@@ -76,15 +79,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for bit masks that can be replaced by a call\n+    /// ### What it does\n+    /// Checks for bit masks that can be replaced by a call\n     /// to `trailing_zeros`\n     ///\n-    /// **Why is this bad?** `x.trailing_zeros() > 4` is much clearer than `x & 15\n+    /// ### Why is this bad?\n+    /// `x.trailing_zeros() > 4` is much clearer than `x & 15\n     /// == 0`\n     ///\n-    /// **Known problems:** llvm generates better code for `x & 15 == 0` on x86\n+    /// ### Known problems\n+    /// llvm generates better code for `x & 15 == 0` on x86\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = 1;\n     /// if x & 0b1111 == 0 { }"}, {"sha": "916c78c982ae4e63863ada1ecd1d928cf74aab7e", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -5,15 +5,15 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of blacklisted names for variables, such\n+    /// ### What it does\n+    /// Checks for usage of blacklisted names for variables, such\n     /// as `foo`.\n     ///\n-    /// **Why is this bad?** These names are usually placeholder names and should be\n+    /// ### Why is this bad?\n+    /// These names are usually placeholder names and should be\n     /// avoided.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let foo = 3.14;\n     /// ```"}, {"sha": "9b2e4f8998e4e30408246b7cde5d0e07d339e41b", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,14 +13,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `if` conditions that use blocks containing an\n+    /// ### What it does\n+    /// Checks for `if` conditions that use blocks containing an\n     /// expression, statements or conditions that use closures with blocks.\n     ///\n-    /// **Why is this bad?** Style, using blocks in the condition makes it hard to read.\n+    /// ### Why is this bad?\n+    /// Style, using blocks in the condition makes it hard to read.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust\n     /// // Bad\n     /// if { true } { /* ... */ }"}, {"sha": "8d3f68565b2234b4c23ef4955331015055bce0b9", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,14 +6,13 @@ use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint warns about boolean comparisons in assert-like macros.\n+    /// ### What it does\n+    /// This lint warns about boolean comparisons in assert-like macros.\n     ///\n-    /// **Why is this bad?** It is shorter to use the equivalent.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// It is shorter to use the equivalent.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// assert_eq!(\"a\".is_empty(), false);"}, {"sha": "4a83d35a568c5e3f976d58e89df0be598901d7c9", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -14,16 +14,19 @@ use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for boolean expressions that can be written more\n+    /// ### What it does\n+    /// Checks for boolean expressions that can be written more\n     /// concisely.\n     ///\n-    /// **Why is this bad?** Readability of boolean expressions suffers from\n+    /// ### Why is this bad?\n+    /// Readability of boolean expressions suffers from\n     /// unnecessary duplication.\n     ///\n-    /// **Known problems:** Ignores short circuiting behavior of `||` and\n+    /// ### Known problems\n+    /// Ignores short circuiting behavior of `||` and\n     /// `&&`. Ignores `|`, `&` and `^`.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// if a && true  // should be: if a\n     /// if !(a == b)  // should be: if a != b\n@@ -34,14 +37,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for boolean expressions that contain terminals that\n+    /// ### What it does\n+    /// Checks for boolean expressions that contain terminals that\n     /// can be eliminated.\n     ///\n-    /// **Why is this bad?** This is most likely a logic bug.\n+    /// ### Why is this bad?\n+    /// This is most likely a logic bug.\n     ///\n-    /// **Known problems:** Ignores short circuiting behavior.\n+    /// ### Known problems\n+    /// Ignores short circuiting behavior.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// if a && b || a { ... }\n     /// ```"}, {"sha": "c444984bc133a47ab0fb5450055bed06fb80d14c", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,18 +12,20 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for naive byte counts\n+    /// ### What it does\n+    /// Checks for naive byte counts\n     ///\n-    /// **Why is this bad?** The [`bytecount`](https://crates.io/crates/bytecount)\n+    /// ### Why is this bad?\n+    /// The [`bytecount`](https://crates.io/crates/bytecount)\n     /// crate has methods to count your bytes faster, especially for large slices.\n     ///\n-    /// **Known problems:** If you have predominantly small slices, the\n+    /// ### Known problems\n+    /// If you have predominantly small slices, the\n     /// `bytecount::count(..)` method may actually be slower. However, if you can\n     /// ensure that less than 2\u00b3\u00b2-1 matches arise, the `naive_count_32(..)` can be\n     /// faster in those cases.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # let vec = vec![1_u8];\n     /// &vec.iter().filter(|x| **x == 0u8).count(); // use bytecount::count instead"}, {"sha": "bd5426ba707a8b2624dd4ed905c9a0f9b25ec063", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,15 +9,15 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::DUMMY_SP;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks to see if all common metadata is defined in\n+    /// ### What it does\n+    /// Checks to see if all common metadata is defined in\n     /// `Cargo.toml`. See: https://rust-lang-nursery.github.io/api-guidelines/documentation.html#cargotoml-includes-all-common-metadata-c-metadata\n     ///\n-    /// **Why is this bad?** It will be more difficult for users to discover the\n+    /// ### Why is this bad?\n+    /// It will be more difficult for users to discover the\n     /// purpose of the crate, and key information related to it.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```toml\n     /// # This `Cargo.toml` is missing a description field:\n     /// [package]"}, {"sha": "86b32475cebdc3d20551c11f5fe93f830fa4b1e6", "filename": "clippy_lints/src/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,17 +8,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{source_map::Spanned, symbol::sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Checks for calls to `ends_with` with possible file extensions\n     /// and suggests to use a case-insensitive approach instead.\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// `ends_with` is case-sensitive and may not detect files with a valid extension.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// fn is_rust_file(filename: &str) -> bool {\n     ///     filename.ends_with(\".rs\")"}, {"sha": "27e1bea799353da4bd3cbb3076ef4d788934264c", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -20,21 +20,21 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts from any numerical to a float type where\n+    /// ### What it does\n+    /// Checks for casts from any numerical to a float type where\n     /// the receiving type cannot store all values from the original type without\n     /// rounding errors. This possible rounding is to be expected, so this lint is\n     /// `Allow` by default.\n     ///\n     /// Basically, this warns on casting any integer with 32 or more bits to `f32`\n     /// or any 64-bit integer to `f64`.\n     ///\n-    /// **Why is this bad?** It's not bad at all. But in some applications it can be\n+    /// ### Why is this bad?\n+    /// It's not bad at all. But in some applications it can be\n     /// helpful to know where precision loss can take place. This lint can help find\n     /// those places in the code.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = u64::MAX;\n     /// x as f64;\n@@ -45,17 +45,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts from a signed to an unsigned numerical\n+    /// ### What it does\n+    /// Checks for casts from a signed to an unsigned numerical\n     /// type. In this case, negative values wrap around to large positive values,\n     /// which can be quite surprising in practice. However, as the cast works as\n     /// defined, this lint is `Allow` by default.\n     ///\n-    /// **Why is this bad?** Possibly surprising results. You can activate this lint\n+    /// ### Why is this bad?\n+    /// Possibly surprising results. You can activate this lint\n     /// as a one-time check to see where numerical wrapping can arise.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let y: i8 = -1;\n     /// y as u128; // will return 18446744073709551615\n@@ -66,17 +66,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts between numerical types that may\n+    /// ### What it does\n+    /// Checks for casts between numerical types that may\n     /// truncate large values. This is expected behavior, so the cast is `Allow` by\n     /// default.\n     ///\n-    /// **Why is this bad?** In some problem domains, it is good practice to avoid\n+    /// ### Why is this bad?\n+    /// In some problem domains, it is good practice to avoid\n     /// truncation. This lint can be activated to help assess where additional\n     /// checks could be beneficial.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn as_u8(x: u64) -> u8 {\n     ///     x as u8\n@@ -88,20 +88,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts from an unsigned type to a signed type of\n+    /// ### What it does\n+    /// Checks for casts from an unsigned type to a signed type of\n     /// the same size. Performing such a cast is a 'no-op' for the compiler,\n     /// i.e., nothing is changed at the bit level, and the binary representation of\n     /// the value is reinterpreted. This can cause wrapping if the value is too big\n     /// for the target signed type. However, the cast works as defined, so this lint\n     /// is `Allow` by default.\n     ///\n-    /// **Why is this bad?** While such a cast is not bad in itself, the results can\n+    /// ### Why is this bad?\n+    /// While such a cast is not bad in itself, the results can\n     /// be surprising when this is not the intended behavior, as demonstrated by the\n     /// example below.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// u32::MAX as i32; // will yield a value of `-1`\n     /// ```\n@@ -111,19 +111,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts between numerical types that may\n+    /// ### What it does\n+    /// Checks for casts between numerical types that may\n     /// be replaced by safe conversion functions.\n     ///\n-    /// **Why is this bad?** Rust's `as` keyword will perform many kinds of\n+    /// ### Why is this bad?\n+    /// Rust's `as` keyword will perform many kinds of\n     /// conversions, including silently lossy conversions. Conversion functions such\n     /// as `i32::from` will only perform lossless conversions. Using the conversion\n     /// functions prevents conversions from turning into silent lossy conversions if\n     /// the types of the input expressions ever change, and make it easier for\n     /// people reading the code to know that the conversion is lossless.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn as_u64(x: u8) -> u64 {\n     ///     x as u64\n@@ -143,14 +143,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts to the same type, casts of int literals to integer types\n+    /// ### What it does\n+    /// Checks for casts to the same type, casts of int literals to integer types\n     /// and casts of float literals to float types.\n     ///\n-    /// **Why is this bad?** It's just unnecessary.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// It's just unnecessary.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let _ = 2i32 as i32;\n     /// let _ = 0.5 as f32;\n@@ -168,17 +168,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts, using `as` or `pointer::cast`,\n+    /// ### What it does\n+    /// Checks for casts, using `as` or `pointer::cast`,\n     /// from a less-strictly-aligned pointer to a more-strictly-aligned pointer\n     ///\n-    /// **Why is this bad?** Dereferencing the resulting pointer may be undefined\n+    /// ### Why is this bad?\n+    /// Dereferencing the resulting pointer may be undefined\n     /// behavior.\n     ///\n-    /// **Known problems:** Using `std::ptr::read_unaligned` and `std::ptr::write_unaligned` or similar\n+    /// ### Known problems\n+    /// Using `std::ptr::read_unaligned` and `std::ptr::write_unaligned` or similar\n     /// on the resulting pointer is fine. Is over-zealous: Casts with manual alignment checks or casts like\n     /// u64-> u8 -> u16 can be fine. Miri is able to do a more in-depth analysis.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let _ = (&1u8 as *const u8) as *const u16;\n     /// let _ = (&mut 1u8 as *mut u8) as *mut u16;\n@@ -192,18 +195,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts of function pointers to something other than usize\n+    /// ### What it does\n+    /// Checks for casts of function pointers to something other than usize\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// Casting a function pointer to anything other than usize/isize is not portable across\n     /// architectures, because you end up losing bits if the target type is too small or end up with a\n     /// bunch of extra bits that waste space and add more instructions to the final binary than\n     /// strictly necessary for the problem\n     ///\n     /// Casting to isize also doesn't make sense since there are no signed addresses.\n     ///\n-    /// **Example**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// fn fun() -> i32 { 1 }\n@@ -219,16 +222,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts of a function pointer to a numeric type not wide enough to\n+    /// ### What it does\n+    /// Checks for casts of a function pointer to a numeric type not wide enough to\n     /// store address.\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// Such a cast discards some bits of the function's address. If this is intended, it would be more\n     /// clearly expressed by casting to usize first, then casting the usize to the intended type (with\n     /// a comment) to perform the truncation.\n     ///\n-    /// **Example**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// fn fn1() -> i16 {\n@@ -249,15 +252,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts of `&T` to `&mut T` anywhere in the code.\n+    /// ### What it does\n+    /// Checks for casts of `&T` to `&mut T` anywhere in the code.\n     ///\n-    /// **Why is this bad?** It\u2019s basically guaranteed to be undefined behaviour.\n+    /// ### Why is this bad?\n+    /// It\u2019s basically guaranteed to be undefined behaviour.\n     /// `UnsafeCell` is the only way to obtain aliasable data that is considered\n     /// mutable.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// fn x(r: &i32) {\n     ///     unsafe {\n@@ -283,18 +286,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for expressions where a character literal is cast\n+    /// ### What it does\n+    /// Checks for expressions where a character literal is cast\n     /// to `u8` and suggests using a byte literal instead.\n     ///\n-    /// **Why is this bad?** In general, casting values to smaller types is\n+    /// ### Why is this bad?\n+    /// In general, casting values to smaller types is\n     /// error-prone and should be avoided where possible. In the particular case of\n     /// converting a character literal to u8, it is easy to avoid by just using a\n     /// byte literal instead. As an added bonus, `b'a'` is even slightly shorter\n     /// than `'a' as u8`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// 'x' as u8\n     /// ```\n@@ -310,18 +313,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Checks for `as` casts between raw pointers without changing its mutability,\n     /// namely `*const T` to `*const U` and `*mut T` to `*mut U`.\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// Though `as` casts between raw pointers is not terrible, `pointer::cast` is safer because\n     /// it cannot accidentally change the pointer's mutability nor cast the pointer to other types like `usize`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let ptr: *const u32 = &42_u32;\n     /// let mut_ptr: *mut u32 = &mut 42_u32;"}, {"sha": "842bbf006cca979da67bbec6f2e42280508edd67", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,13 +13,13 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for explicit bounds checking when casting.\n+    /// ### What it does\n+    /// Checks for explicit bounds checking when casting.\n     ///\n-    /// **Why is this bad?** Reduces the readability of statements & is error prone.\n+    /// ### Why is this bad?\n+    /// Reduces the readability of statements & is error prone.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let foo: u32 = 5;\n     /// # let _ ="}, {"sha": "96c30d57ee198c54d2b6688ec84bbc7e8a5e8ed5", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -14,15 +14,19 @@ use rustc_span::source_map::Span;\n use rustc_span::{sym, BytePos};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for methods with high cognitive complexity.\n+    /// ### What it does\n+    /// Checks for methods with high cognitive complexity.\n     ///\n-    /// **Why is this bad?** Methods of high cognitive complexity tend to be hard to\n+    /// ### Why is this bad?\n+    /// Methods of high cognitive complexity tend to be hard to\n     /// both read and maintain. Also LLVM will tend to optimize small methods better.\n     ///\n-    /// **Known problems:** Sometimes it's hard to find a way to reduce the\n+    /// ### Known problems\n+    /// Sometimes it's hard to find a way to reduce the\n     /// complexity.\n     ///\n-    /// **Example:** No. You'll see it when you get the warning.\n+    /// ### Example\n+    /// No. You'll see it when you get the warning.\n     pub COGNITIVE_COMPLEXITY,\n     nursery,\n     \"functions that should be split up into multiple functions\""}, {"sha": "4aa8798071568d1c01f2f6a95663007d98c885f6", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -22,15 +22,15 @@ use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for nested `if` statements which can be collapsed\n+    /// ### What it does\n+    /// Checks for nested `if` statements which can be collapsed\n     /// by `&&`-combining their conditions.\n     ///\n-    /// **Why is this bad?** Each `if`-statement adds one level of nesting, which\n+    /// ### Why is this bad?\n+    /// Each `if`-statement adds one level of nesting, which\n     /// makes code look more complex than it really is.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// if x {\n     ///     if y {\n@@ -53,15 +53,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for collapsible `else { if ... }` expressions\n+    /// ### What it does\n+    /// Checks for collapsible `else { if ... }` expressions\n     /// that can be collapsed to `else if ...`.\n     ///\n-    /// **Why is this bad?** Each `if`-statement adds one level of nesting, which\n+    /// ### Why is this bad?\n+    /// Each `if`-statement adds one level of nesting, which\n     /// makes code look more complex than it really is.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     ///\n     /// if x {"}, {"sha": "a403a9846babd9d1966fe681da7b1484db789924", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,18 +9,17 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{MultiSpan, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Finds nested `match` or `if let` expressions where the patterns may be \"collapsed\" together\n+    /// ### What it does\n+    /// Finds nested `match` or `if let` expressions where the patterns may be \"collapsed\" together\n     /// without adding any branches.\n     ///\n     /// Note that this lint is not intended to find _all_ cases where nested match patterns can be merged, but only\n     /// cases where merging would most likely make the code more readable.\n     ///\n-    /// **Why is this bad?** It is unnecessarily verbose and complex.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// It is unnecessarily verbose and complex.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// fn func(opt: Option<Result<u64, String>>) {\n     ///     let n = match opt {"}, {"sha": "597a3c67024e547b74cb77911492d26aae6bf0e5", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,16 +6,19 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks comparison chains written with `if` that can be\n+    /// ### What it does\n+    /// Checks comparison chains written with `if` that can be\n     /// rewritten with `match` and `cmp`.\n     ///\n-    /// **Why is this bad?** `if` is not guaranteed to be exhaustive and conditionals can get\n+    /// ### Why is this bad?\n+    /// `if` is not guaranteed to be exhaustive and conditionals can get\n     /// repetitive\n     ///\n-    /// **Known problems:** The match statement may be slower due to the compiler\n+    /// ### Known problems\n+    /// The match statement may be slower due to the compiler\n     /// not inlining the call to cmp. See issue [#5354](https://github.com/rust-lang/rust-clippy/issues/5354)\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// # fn a() {}\n     /// # fn b() {}"}, {"sha": "2dcd55457993c0cb58443e03a51a3d69fb5a5992", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -16,13 +16,13 @@ use rustc_span::{source_map::Span, symbol::Symbol, BytePos};\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for consecutive `if`s with the same condition.\n+    /// ### What it does\n+    /// Checks for consecutive `if`s with the same condition.\n     ///\n-    /// **Why is this bad?** This is probably a copy & paste error.\n+    /// ### Why is this bad?\n+    /// This is probably a copy & paste error.\n     ///\n-    /// **Known problems:** Hopefully none.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// if a == b {\n     ///     \u2026\n@@ -47,15 +47,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for consecutive `if`s with the same function call.\n+    /// ### What it does\n+    /// Checks for consecutive `if`s with the same function call.\n     ///\n-    /// **Why is this bad?** This is probably a copy & paste error.\n+    /// ### Why is this bad?\n+    /// This is probably a copy & paste error.\n     /// Despite the fact that function can have side effects and `if` works as\n     /// intended, such an approach is implicit and can be considered a \"code smell\".\n     ///\n-    /// **Known problems:** Hopefully none.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// if foo() == bar {\n     ///     \u2026\n@@ -94,14 +94,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `if/else` with the same body as the *then* part\n+    /// ### What it does\n+    /// Checks for `if/else` with the same body as the *then* part\n     /// and the *else* part.\n     ///\n-    /// **Why is this bad?** This is probably a copy & paste error.\n-    ///\n-    /// **Known problems:** Hopefully none.\n+    /// ### Why is this bad?\n+    /// This is probably a copy & paste error.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// let foo = if \u2026 {\n     ///     42\n@@ -115,17 +115,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks if the `if` and `else` block contain shared code that can be\n+    /// ### What it does\n+    /// Checks if the `if` and `else` block contain shared code that can be\n     /// moved out of the blocks.\n     ///\n-    /// **Why is this bad?** Duplicate code is less maintainable.\n+    /// ### Why is this bad?\n+    /// Duplicate code is less maintainable.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// * The lint doesn't check if the moved expressions modify values that are beeing used in\n     ///   the if condition. The suggestion can in that case modify the behavior of the program.\n     ///   See [rust-clippy#7452](https://github.com/rust-lang/rust-clippy/issues/7452)\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// let foo = if \u2026 {\n     ///     println!(\"Hello World\");"}, {"sha": "c2e9e8b3ab7f39d226f32df4449cfef0190cacbe", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,15 +8,15 @@ use rustc_span::sym;\n use if_chain::if_chain;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for types that implement `Copy` as well as\n+    /// ### What it does\n+    /// Checks for types that implement `Copy` as well as\n     /// `Iterator`.\n     ///\n-    /// **Why is this bad?** Implicit copies can be confusing when working with\n+    /// ### Why is this bad?\n+    /// Implicit copies can be confusing when working with\n     /// iterator combinators.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// #[derive(Copy, Clone)]\n     /// struct Countdown(u8);"}, {"sha": "e4ee27724831d7e733ee52d2da5d4e42e71c9f1e", "filename": "clippy_lints/src/create_dir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcreate_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fcreate_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcreate_dir.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,13 +8,13 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks usage of `std::fs::create_dir` and suggest using `std::fs::create_dir_all` instead.\n+    /// ### What it does\n+    /// Checks usage of `std::fs::create_dir` and suggest using `std::fs::create_dir_all` instead.\n     ///\n-    /// **Why is this bad?** Sometimes `std::fs::create_dir` is mistakenly chosen over `std::fs::create_dir_all`.\n+    /// ### Why is this bad?\n+    /// Sometimes `std::fs::create_dir` is mistakenly chosen over `std::fs::create_dir_all`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// ```rust\n     /// std::fs::create_dir(\"foo\");"}, {"sha": "bab4a696f831ec859c986e74ffec7ec644c03343", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,14 +8,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of dbg!() macro.\n+    /// ### What it does\n+    /// Checks for usage of dbg!() macro.\n     ///\n-    /// **Why is this bad?** `dbg!` macro is intended as a debugging tool. It\n+    /// ### Why is this bad?\n+    /// `dbg!` macro is intended as a debugging tool. It\n     /// should not be in version control.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n     /// dbg!(true)"}, {"sha": "db8f2171348f7046ffa96bae0a3a2519471a1e4d", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,14 +13,14 @@ use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for literal calls to `Default::default()`.\n+    /// ### What it does\n+    /// Checks for literal calls to `Default::default()`.\n     ///\n-    /// **Why is this bad?** It's more clear to the reader to use the name of the type whose default is\n+    /// ### Why is this bad?\n+    /// It's more clear to the reader to use the name of the type whose default is\n     /// being gotten than the generic `Default`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let s: String = Default::default();\n@@ -34,14 +34,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for immediate reassignment of fields initialized\n+    /// ### What it does\n+    /// Checks for immediate reassignment of fields initialized\n     /// with Default::default().\n     ///\n-    /// **Why is this bad?**It's more idiomatic to use the [functional update syntax](https://doc.rust-lang.org/reference/expressions/struct-expr.html#functional-update-syntax).\n+    /// ### Why is this bad?\n+    ///It's more idiomatic to use the [functional update syntax](https://doc.rust-lang.org/reference/expressions/struct-expr.html#functional-update-syntax).\n     ///\n-    /// **Known problems:** Assignments to patterns that are of tuple type are not linted.\n+    /// ### Known problems\n+    /// Assignments to patterns that are of tuple type are not linted.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```\n     /// # #[derive(Default)]"}, {"sha": "3f1b7ea6214d4fb969bf3ccb412c46d2d713f367", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -18,7 +18,8 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::iter;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of unconstrained numeric literals which may cause default numeric fallback in type\n+    /// ### What it does\n+    /// Checks for usage of unconstrained numeric literals which may cause default numeric fallback in type\n     /// inference.\n     ///\n     /// Default numeric fallback means that if numeric types have not yet been bound to concrete\n@@ -27,12 +28,14 @@ declare_clippy_lint! {\n     ///\n     /// See [RFC0212](https://github.com/rust-lang/rfcs/blob/master/text/0212-restore-int-fallback.md) for more information about the fallback.\n     ///\n-    /// **Why is this bad?** For those who are very careful about types, default numeric fallback\n+    /// ### Why is this bad?\n+    /// For those who are very careful about types, default numeric fallback\n     /// can be a pitfall that cause unexpected runtime behavior.\n     ///\n-    /// **Known problems:** This lint can only be allowed at the function level or above.\n+    /// ### Known problems\n+    /// This lint can only be allowed at the function level or above.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let i = 10;\n     /// let f = 1.23;"}, {"sha": "c604516742ce5a1a510862792bc48cb7fdb1b01e", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 64, "deletions": 32, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,27 +12,33 @@ macro_rules! declare_deprecated_lint {\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend\n+    /// ### Deprecation reason\n+    /// This used to check for `assert!(a == b)` and recommend\n     /// replacement with `assert_eq!(a, b)`, but this is no longer needed after RFC 2011.\n     pub SHOULD_ASSERT_EQ,\n     \"`assert!()` will be more flexible with RFC 2011\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** This used to check for `Vec::extend`, which was slower than\n+    /// ### Deprecation reason\n+    /// This used to check for `Vec::extend`, which was slower than\n     /// `Vec::extend_from_slice`. Thanks to specialization, this is no longer true.\n     pub EXTEND_FROM_SLICE,\n     \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** `Range::step_by(0)` used to be linted since it's\n+    /// ### Deprecation reason\n+    /// `Range::step_by(0)` used to be linted since it's\n     /// an infinite iterator, which is better expressed by `iter::repeat`,\n     /// but the method has been removed for `Iterator::step_by` which panics\n     /// if given a zero\n@@ -41,27 +47,33 @@ declare_deprecated_lint! {\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** This used to check for `Vec::as_slice`, which was unstable with good\n+    /// ### Deprecation reason\n+    /// This used to check for `Vec::as_slice`, which was unstable with good\n     /// stable alternatives. `Vec::as_slice` has now been stabilized.\n     pub UNSTABLE_AS_SLICE,\n     \"`Vec::as_slice` has been stabilized in 1.7\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** This used to check for `Vec::as_mut_slice`, which was unstable with good\n+    /// ### Deprecation reason\n+    /// This used to check for `Vec::as_mut_slice`, which was unstable with good\n     /// stable alternatives. `Vec::as_mut_slice` has now been stabilized.\n     pub UNSTABLE_AS_MUT_SLICE,\n     \"`Vec::as_mut_slice` has been stabilized in 1.7\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** This lint should never have applied to non-pointer types, as transmuting\n+    /// ### Deprecation reason\n+    /// This lint should never have applied to non-pointer types, as transmuting\n     /// between non-pointer types of differing alignment is well-defined behavior (it's semantically\n     /// equivalent to a memcpy). This lint has thus been refactored into two separate lints:\n     /// cast_ptr_alignment and transmute_ptr_to_ptr.\n@@ -70,29 +82,35 @@ declare_deprecated_lint! {\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** This lint is too subjective, not having a good reason for being in clippy.\n+    /// ### Deprecation reason\n+    /// This lint is too subjective, not having a good reason for being in clippy.\n     /// Additionally, compound assignment operators may be overloaded separately from their non-assigning\n     /// counterparts, so this lint may suggest a change in behavior or the code may not compile.\n     pub ASSIGN_OPS,\n     \"using compound assignment operators (e.g., `+=`) is harmless\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** The original rule will only lint for `if let`. After\n+    /// ### Deprecation reason\n+    /// The original rule will only lint for `if let`. After\n     /// making it support to lint `match`, naming as `if let` is not suitable for it.\n     /// So, this lint is deprecated.\n     pub IF_LET_REDUNDANT_PATTERN_MATCHING,\n     \"this lint has been changed to redundant_pattern_matching\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** This lint used to suggest replacing `let mut vec =\n+    /// ### Deprecation reason\n+    /// This lint used to suggest replacing `let mut vec =\n     /// Vec::with_capacity(n); vec.set_len(n);` with `let vec = vec![0; n];`. The\n     /// replacement has very different performance characteristics so the lint is\n     /// deprecated.\n@@ -101,61 +119,75 @@ declare_deprecated_lint! {\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** This lint has been superseded by #[must_use] in rustc.\n+    /// ### Deprecation reason\n+    /// This lint has been superseded by #[must_use] in rustc.\n     pub UNUSED_COLLECT,\n     \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** Associated-constants are now preferred.\n+    /// ### Deprecation reason\n+    /// Associated-constants are now preferred.\n     pub REPLACE_CONSTS,\n     \"associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** The regex! macro does not exist anymore.\n+    /// ### Deprecation reason\n+    /// The regex! macro does not exist anymore.\n     pub REGEX_MACRO,\n     \"the regex! macro has been removed from the regex crate in 2018\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** This lint has been replaced by `manual_find_map`, a\n+    /// ### Deprecation reason\n+    /// This lint has been replaced by `manual_find_map`, a\n     /// more specific lint.\n     pub FIND_MAP,\n     \"this lint has been replaced by `manual_find_map`, a more specific lint\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** This lint has been replaced by `manual_filter_map`, a\n+    /// ### Deprecation reason\n+    /// This lint has been replaced by `manual_filter_map`, a\n     /// more specific lint.\n     pub FILTER_MAP,\n     \"this lint has been replaced by `manual_filter_map`, a more specific lint\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** The `avoid_breaking_exported_api` config option was added, which\n+    /// ### Deprecation reason\n+    /// The `avoid_breaking_exported_api` config option was added, which\n     /// enables the `enum_variant_names` lint for public items.\n     /// ```\n     pub PUB_ENUM_VARIANT_NAMES,\n     \"set the `avoid-breaking-exported-api` config option to `false` to enable the `enum_variant_names` lint for public items\"\n }\n \n declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n+    /// ### What it does\n+    /// Nothing. This lint has been deprecated.\n     ///\n-    /// **Deprecation reason:** The `avoid_breaking_exported_api` config option was added, which\n+    /// ### Deprecation reason\n+    /// The `avoid_breaking_exported_api` config option was added, which\n     /// enables the `wrong_self_conversion` lint for public items.\n     pub WRONG_PUB_SELF_CONVENTION,\n     \"set the `avoid-breaking-exported-api` config option to `false` to enable the `wrong_self_convention` lint for public items\""}, {"sha": "ded7001ad8c860226c3f0b1affeaa9f70d8b0f78", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,12 +11,14 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for explicit `deref()` or `deref_mut()` method calls.\n+    /// ### What it does\n+    /// Checks for explicit `deref()` or `deref_mut()` method calls.\n     ///\n-    /// **Why is this bad?** Dereferencing by `&*x` or `&mut *x` is clearer and more concise,\n+    /// ### Why is this bad?\n+    /// Dereferencing by `&*x` or `&mut *x` is clearer and more concise,\n     /// when not part of a method chain.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// use std::ops::Deref;\n     /// let a: &mut String = &mut String::from(\"foo\");"}, {"sha": "dcfa5253f83412ee093327fd70fc9e1276829e50", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -15,10 +15,12 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for deriving `Hash` but implementing `PartialEq`\n+    /// ### What it does\n+    /// Checks for deriving `Hash` but implementing `PartialEq`\n     /// explicitly or vice versa.\n     ///\n-    /// **Why is this bad?** The implementation of these traits must agree (for\n+    /// ### Why is this bad?\n+    /// The implementation of these traits must agree (for\n     /// example for use with `HashMap`) so it\u2019s probably a bad idea to use a\n     /// default-generated `Hash` implementation with an explicitly defined\n     /// `PartialEq`. In particular, the following must hold for any type:\n@@ -27,9 +29,7 @@ declare_clippy_lint! {\n     /// k1 == k2 \u21d2 hash(k1) == hash(k2)\n     /// ```\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// #[derive(Hash)]\n     /// struct Foo;\n@@ -44,10 +44,12 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for deriving `Ord` but implementing `PartialOrd`\n+    /// ### What it does\n+    /// Checks for deriving `Ord` but implementing `PartialOrd`\n     /// explicitly or vice versa.\n     ///\n-    /// **Why is this bad?** The implementation of these traits must agree (for\n+    /// ### Why is this bad?\n+    /// The implementation of these traits must agree (for\n     /// example for use with `sort`) so it\u2019s probably a bad idea to use a\n     /// default-generated `Ord` implementation with an explicitly defined\n     /// `PartialOrd`. In particular, the following must hold for any type\n@@ -57,10 +59,7 @@ declare_clippy_lint! {\n     /// k1.cmp(&k2) == k1.partial_cmp(&k2).unwrap()\n     /// ```\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust,ignore\n     /// #[derive(Ord, PartialEq, Eq)]\n     /// struct Foo;\n@@ -95,18 +94,21 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for explicit `Clone` implementations for `Copy`\n+    /// ### What it does\n+    /// Checks for explicit `Clone` implementations for `Copy`\n     /// types.\n     ///\n-    /// **Why is this bad?** To avoid surprising behaviour, these traits should\n+    /// ### Why is this bad?\n+    /// To avoid surprising behaviour, these traits should\n     /// agree and the behaviour of `Copy` cannot be overridden. In almost all\n     /// situations a `Copy` type should have a `Clone` implementation that does\n     /// nothing more than copy the object, which is what `#[derive(Copy, Clone)]`\n     /// gets you.\n     ///\n-    /// **Known problems:** Bounds of generic types are sometimes wrong: https://github.com/rust-lang/rust/issues/26925\n+    /// ### Known problems\n+    /// Bounds of generic types are sometimes wrong: https://github.com/rust-lang/rust/issues/26925\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// #[derive(Copy)]\n     /// struct Foo;\n@@ -121,16 +123,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for deriving `serde::Deserialize` on a type that\n+    /// ### What it does\n+    /// Checks for deriving `serde::Deserialize` on a type that\n     /// has methods using `unsafe`.\n     ///\n-    /// **Why is this bad?** Deriving `serde::Deserialize` will create a constructor\n+    /// ### Why is this bad?\n+    /// Deriving `serde::Deserialize` will create a constructor\n     /// that may violate invariants hold by another constructor.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust,ignore\n     /// use serde::Deserialize;\n     ///"}, {"sha": "7069cb4198ca954a138e3e134cbeaaa5520359b2", "filename": "clippy_lints/src/disallowed_method.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,15 +8,14 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Symbol;\n \n declare_clippy_lint! {\n-    /// **What it does:** Denies the configured methods and functions in clippy.toml\n+    /// ### What it does\n+    /// Denies the configured methods and functions in clippy.toml\n     ///\n-    /// **Why is this bad?** Some methods are undesirable in certain contexts,\n+    /// ### Why is this bad?\n+    /// Some methods are undesirable in certain contexts,\n     /// and it's beneficial to lint for them as needed.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// An example clippy.toml configuration:\n     /// ```toml\n     /// # clippy.toml"}, {"sha": "6d38d30cd0bab5f63804b3509e373ffd1d0bc67c", "filename": "clippy_lints/src/disallowed_script_idents.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,7 +6,8 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use unicode_script::{Script, UnicodeScript};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of unicode scripts other than those explicitly allowed\n+    /// ### What it does\n+    /// Checks for usage of unicode scripts other than those explicitly allowed\n     /// by the lint config.\n     ///\n     /// This lint doesn't take into account non-text scripts such as `Unknown` and `Linear_A`.\n@@ -19,17 +20,16 @@ declare_clippy_lint! {\n     /// [aliases]: http://www.unicode.org/reports/tr24/tr24-31.html#Script_Value_Aliases\n     /// [supported_scripts]: https://www.unicode.org/iso15924/iso15924-codes.html\n     ///\n-    /// **Why is this bad?** It may be not desired to have many different scripts for\n+    /// ### Why is this bad?\n+    /// It may be not desired to have many different scripts for\n     /// identifiers in the codebase.\n     ///\n     /// Note that if you only want to allow plain English, you might want to use\n     /// built-in [`non_ascii_idents`] lint instead.\n     ///\n     /// [`non_ascii_idents`]: https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#non-ascii-idents\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Assuming that `clippy.toml` contains the following line:\n     /// // allowed-locales = [\"Latin\", \"Cyrillic\"]"}, {"sha": "e627168b9327566fb67015d9652c5c9f762a28c9", "filename": "clippy_lints/src/disallowed_type.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_type.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,14 +9,13 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{Span, Symbol};\n \n declare_clippy_lint! {\n-    /// **What it does:** Denies the configured types in clippy.toml.\n+    /// ### What it does\n+    /// Denies the configured types in clippy.toml.\n     ///\n-    /// **Why is this bad?** Some types are undesirable in certain contexts.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Some types are undesirable in certain contexts.\n     ///\n+    /// ### Example:\n     /// An example clippy.toml configuration:\n     /// ```toml\n     /// # clippy.toml"}, {"sha": "c39829fdc7aad2b6bbc3e4885a3ed39d45750e80", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -30,15 +30,18 @@ use std::thread;\n use url::Url;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the presence of `_`, `::` or camel-case words\n+    /// ### What it does\n+    /// Checks for the presence of `_`, `::` or camel-case words\n     /// outside ticks in documentation.\n     ///\n-    /// **Why is this bad?** *Rustdoc* supports markdown formatting, `_`, `::` and\n+    /// ### Why is this bad?\n+    /// *Rustdoc* supports markdown formatting, `_`, `::` and\n     /// camel-case probably indicates some code which should be included between\n     /// ticks. `_` can also be used for emphasis in markdown, this lint tries to\n     /// consider that.\n     ///\n-    /// **Known problems:** Lots of bad docs won\u2019t be fixed, what the lint checks\n+    /// ### Known problems\n+    /// Lots of bad docs won\u2019t be fixed, what the lint checks\n     /// for is limited, and there are still false positives. HTML elements and their\n     /// content are not linted.\n     ///\n@@ -47,7 +50,7 @@ declare_clippy_lint! {\n     /// `[`SmallVec<[T; INLINE_CAPACITY]>`]` and then [`SmallVec<[T; INLINE_CAPACITY]>`]: SmallVec\n     /// would fail.\n     ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust\n     /// /// Do something with the foo_bar parameter. See also\n     /// /// that::other::module::foo.\n@@ -68,15 +71,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the doc comments of publicly visible\n+    /// ### What it does\n+    /// Checks for the doc comments of publicly visible\n     /// unsafe functions and warns if there is no `# Safety` section.\n     ///\n-    /// **Why is this bad?** Unsafe functions should document their safety\n+    /// ### Why is this bad?\n+    /// Unsafe functions should document their safety\n     /// preconditions, so that users can be sure they are using them safely.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust\n     ///# type Universe = ();\n     /// /// This function should really be documented\n@@ -102,16 +105,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks the doc comments of publicly visible functions that\n+    /// ### What it does\n+    /// Checks the doc comments of publicly visible functions that\n     /// return a `Result` type and warns if there is no `# Errors` section.\n     ///\n-    /// **Why is this bad?** Documenting the type of errors that can be returned from a\n+    /// ### Why is this bad?\n+    /// Documenting the type of errors that can be returned from a\n     /// function can help callers write code to handle the errors appropriately.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Examples:**\n-    ///\n+    /// ### Examples\n     /// Since the following function returns a `Result` it has an `# Errors` section in\n     /// its doc comment:\n     ///\n@@ -131,16 +133,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks the doc comments of publicly visible functions that\n+    /// ### What it does\n+    /// Checks the doc comments of publicly visible functions that\n     /// may panic and warns if there is no `# Panics` section.\n     ///\n-    /// **Why is this bad?** Documenting the scenarios in which panicking occurs\n+    /// ### Why is this bad?\n+    /// Documenting the scenarios in which panicking occurs\n     /// can help callers who do not want to panic to avoid those situations.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Examples:**\n-    ///\n+    /// ### Examples\n     /// Since the following function may panic it has a `# Panics` section in\n     /// its doc comment:\n     ///\n@@ -162,14 +163,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `fn main() { .. }` in doctests\n+    /// ### What it does\n+    /// Checks for `fn main() { .. }` in doctests\n     ///\n-    /// **Why is this bad?** The test can be shorter (and likely more readable)\n+    /// ### Why is this bad?\n+    /// The test can be shorter (and likely more readable)\n     /// if the `fn main()` is left implicit.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ``````rust\n     /// /// An example of a doctest with a `main()` function\n     /// ///"}, {"sha": "6520bb91fafd214d20f8d5b33a38574efe31c207", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,14 +10,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for double comparisons that could be simplified to a single expression.\n+    /// ### What it does\n+    /// Checks for double comparisons that could be simplified to a single expression.\n     ///\n     ///\n-    /// **Why is this bad?** Readability.\n+    /// ### Why is this bad?\n+    /// Readability.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = 1;\n     /// # let y = 2;"}, {"sha": "d0d87b6df9a2d2f73d1f0ef83e6c8b02019bf753", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -4,14 +4,14 @@ use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for unnecessary double parentheses.\n+    /// ### What it does\n+    /// Checks for unnecessary double parentheses.\n     ///\n-    /// **Why is this bad?** This makes code harder to read and might indicate a\n+    /// ### Why is this bad?\n+    /// This makes code harder to read and might indicate a\n     /// mistake.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// fn simple_double_parens() -> i32 {"}, {"sha": "0f3dc866afb6e339d8ee8eb47223f59a12f7e7ec", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,17 +8,17 @@ use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `std::mem::drop` with a reference\n+    /// ### What it does\n+    /// Checks for calls to `std::mem::drop` with a reference\n     /// instead of an owned value.\n     ///\n-    /// **Why is this bad?** Calling `drop` on a reference will only drop the\n+    /// ### Why is this bad?\n+    /// Calling `drop` on a reference will only drop the\n     /// reference itself, which is a no-op. It will not call the `drop` method (from\n     /// the `Drop` trait implementation) on the underlying referenced value, which\n     /// is likely what was intended.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// let mut lock_guard = mutex.lock();\n     /// std::mem::drop(&lock_guard) // Should have been drop(lock_guard), mutex\n@@ -31,17 +31,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `std::mem::forget` with a reference\n+    /// ### What it does\n+    /// Checks for calls to `std::mem::forget` with a reference\n     /// instead of an owned value.\n     ///\n-    /// **Why is this bad?** Calling `forget` on a reference will only forget the\n+    /// ### Why is this bad?\n+    /// Calling `forget` on a reference will only forget the\n     /// reference itself, which is a no-op. It will not forget the underlying\n     /// referenced\n     /// value, which is likely what was intended.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = Box::new(1);\n     /// std::mem::forget(&x) // Should have been forget(x), x will still be dropped\n@@ -52,16 +52,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `std::mem::drop` with a value\n+    /// ### What it does\n+    /// Checks for calls to `std::mem::drop` with a value\n     /// that derives the Copy trait\n     ///\n-    /// **Why is this bad?** Calling `std::mem::drop` [does nothing for types that\n+    /// ### Why is this bad?\n+    /// Calling `std::mem::drop` [does nothing for types that\n     /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n     /// value will be copied and moved into the function on invocation.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x: i32 = 42; // i32 implements Copy\n     /// std::mem::drop(x) // A copy of x is passed to the function, leaving the\n@@ -73,10 +73,12 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `std::mem::forget` with a value that\n+    /// ### What it does\n+    /// Checks for calls to `std::mem::forget` with a value that\n     /// derives the Copy trait\n     ///\n-    /// **Why is this bad?** Calling `std::mem::forget` [does nothing for types that\n+    /// ### Why is this bad?\n+    /// Calling `std::mem::forget` [does nothing for types that\n     /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\n     /// value will be copied and moved into the function on invocation.\n     ///\n@@ -86,9 +88,7 @@ declare_clippy_lint! {\n     /// there\n     /// is nothing for `std::mem::forget` to ignore.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x: i32 = 42; // i32 implements Copy\n     /// std::mem::forget(x) // A copy of x is passed to the function, leaving the"}, {"sha": "3774de625213deefd94ba4dc911677748df5d242", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,15 +12,15 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::paths;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calculation of subsecond microseconds or milliseconds\n+    /// ### What it does\n+    /// Checks for calculation of subsecond microseconds or milliseconds\n     /// from other `Duration` methods.\n     ///\n-    /// **Why is this bad?** It's more concise to call `Duration::subsec_micros()` or\n+    /// ### Why is this bad?\n+    /// It's more concise to call `Duration::subsec_micros()` or\n     /// `Duration::subsec_millis()` than to calculate them.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::time::Duration;\n     /// let dur = Duration::new(5, 0);"}, {"sha": "0541ac5eccca40cdaf91e439494b42d74b9a4b0d", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,14 +7,14 @@ use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of if expressions with an `else if` branch,\n+    /// ### What it does\n+    /// Checks for usage of if expressions with an `else if` branch,\n     /// but without a final `else` branch.\n     ///\n-    /// **Why is this bad?** Some coding guidelines require this (e.g., MISRA-C:2004 Rule 14.10).\n+    /// ### Why is this bad?\n+    /// Some coding guidelines require this (e.g., MISRA-C:2004 Rule 14.10).\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # fn a() {}\n     /// # fn b() {}"}, {"sha": "3453c2da2784fa646fd69b6cdadd106727a43ba9", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,24 +6,23 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `enum`s with no variants.\n+    /// ### What it does\n+    /// Checks for `enum`s with no variants.\n     ///\n     /// As of this writing, the `never_type` is still a\n     /// nightly-only experimental API. Therefore, this lint is only triggered\n     /// if the `never_type` is enabled.\n     ///\n-    /// **Why is this bad?** If you want to introduce a type which\n+    /// ### Why is this bad?\n+    /// If you want to introduce a type which\n     /// can't be instantiated, you should use `!` (the primitive type \"never\"),\n     /// or a wrapper around it, because `!` has more extensive\n     /// compiler support (type inference, etc...) and wrappers\n     /// around it are the conventional way to define an uninhabited type.\n     /// For further information visit [never type documentation](https://doc.rust-lang.org/std/primitive.never.html)\n     ///\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// Bad:\n     /// ```rust\n     /// enum Test {}"}, {"sha": "e1d0d65edb1b9c1daa1256c5db63c4c58a00bada", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -16,12 +16,15 @@ use rustc_span::{Span, SyntaxContext, DUMMY_SP};\n use std::fmt::Write;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for uses of `contains_key` + `insert` on `HashMap`\n+    /// ### What it does\n+    /// Checks for uses of `contains_key` + `insert` on `HashMap`\n     /// or `BTreeMap`.\n     ///\n-    /// **Why is this bad?** Using `entry` is more efficient.\n+    /// ### Why is this bad?\n+    /// Using `entry` is more efficient.\n     ///\n-    /// **Known problems:** The suggestion may have type inference errors in some cases. e.g.\n+    /// ### Known problems\n+    /// The suggestion may have type inference errors in some cases. e.g.\n     /// ```rust\n     /// let mut map = std::collections::HashMap::new();\n     /// let _ = if !map.contains_key(&0) {\n@@ -31,7 +34,7 @@ declare_clippy_lint! {\n     /// };\n     /// ```\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::collections::HashMap;\n     /// # let mut map = HashMap::new();"}, {"sha": "a2c3c7a7b49208c07299ce023af744625e935fd9", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,15 +11,15 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::convert::TryFrom;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for C-like enumerations that are\n+    /// ### What it does\n+    /// Checks for C-like enumerations that are\n     /// `repr(isize/usize)` and have values that don't fit into an `i32`.\n     ///\n-    /// **Why is this bad?** This will truncate the variant value on 32 bit\n+    /// ### Why is this bad?\n+    /// This will truncate the variant value on 32 bit\n     /// architectures, but works fine on 64 bit.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # #[cfg(target_pointer_width = \"64\")]\n     /// #[repr(usize)]"}, {"sha": "32b95745b64d1092a3032bbc44c6848518ac93e3", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,15 +10,15 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n \n declare_clippy_lint! {\n-    /// **What it does:** Detects enumeration variants that are prefixed or suffixed\n+    /// ### What it does\n+    /// Detects enumeration variants that are prefixed or suffixed\n     /// by the same characters.\n     ///\n-    /// **Why is this bad?** Enumeration variant names should specify their variant,\n+    /// ### Why is this bad?\n+    /// Enumeration variant names should specify their variant,\n     /// not repeat the enumeration name.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// enum Cake {\n     ///     BlackForestCake,\n@@ -40,14 +40,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Detects type names that are prefixed or suffixed by the\n+    /// ### What it does\n+    /// Detects type names that are prefixed or suffixed by the\n     /// containing module's name.\n     ///\n-    /// **Why is this bad?** It requires the user to type the module name twice.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// It requires the user to type the module name twice.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// mod cake {\n     ///     struct BlackForestCake;\n@@ -65,10 +65,12 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for modules that have the same name as their\n+    /// ### What it does\n+    /// Checks for modules that have the same name as their\n     /// parent module\n     ///\n-    /// **Why is this bad?** A typical beginner mistake is to have `mod foo;` and\n+    /// ### Why is this bad?\n+    /// A typical beginner mistake is to have `mod foo;` and\n     /// again `mod foo { ..\n     /// }` in `foo.rs`.\n     /// The expectation is that items inside the inner `mod foo { .. }` are then\n@@ -78,9 +80,7 @@ declare_clippy_lint! {\n     /// If this is done on purpose, it would be better to choose a more\n     /// representative module name.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// // lib.rs\n     /// mod foo;"}, {"sha": "51d5094e8c9987491d39bb3b29c3b91cc050b789", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,18 +9,21 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for equal operands to comparison, logical and\n+    /// ### What it does\n+    /// Checks for equal operands to comparison, logical and\n     /// bitwise, difference and division binary operators (`==`, `>`, etc., `&&`,\n     /// `||`, `&`, `|`, `^`, `-` and `/`).\n     ///\n-    /// **Why is this bad?** This is usually just a typo or a copy and paste error.\n+    /// ### Why is this bad?\n+    /// This is usually just a typo or a copy and paste error.\n     ///\n-    /// **Known problems:** False negatives: We had some false positives regarding\n+    /// ### Known problems\n+    /// False negatives: We had some false positives regarding\n     /// calls (notably [racer](https://github.com/phildawes/racer) had one instance\n     /// of `x.pop() && x.pop()`), so we removed matching any function or method\n     /// calls. We may introduce a list of known pure functions in the future.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = 1;\n     /// if x + 1 == x + 1 {}\n@@ -37,15 +40,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for arguments to `==` which have their address\n+    /// ### What it does\n+    /// Checks for arguments to `==` which have their address\n     /// taken to satisfy a bound\n     /// and suggests to dereference the other argument instead\n     ///\n-    /// **Why is this bad?** It is more idiomatic to dereference the other argument.\n+    /// ### Why is this bad?\n+    /// It is more idiomatic to dereference the other argument.\n     ///\n-    /// **Known problems:** None\n+    /// ### Known problems\n+    /// None\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// // Bad\n     /// &x == y"}, {"sha": "026d14d0ea265f445d0ffcb3c23c5afcda86a593", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,15 +6,15 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for erasing operations, e.g., `x * 0`.\n+    /// ### What it does\n+    /// Checks for erasing operations, e.g., `x * 0`.\n     ///\n-    /// **Why is this bad?** The whole expression can be replaced by zero.\n+    /// ### Why is this bad?\n+    /// The whole expression can be replaced by zero.\n     /// This is most likely not the intended outcome and should probably be\n     /// corrected\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = 1;\n     /// 0 / x;"}, {"sha": "8b0e9e6bc9b9344548a88096bf63a8a744e41a22", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -19,16 +19,16 @@ pub struct BoxedLocal {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `Box<T>` where an unboxed `T` would\n+    /// ### What it does\n+    /// Checks for usage of `Box<T>` where an unboxed `T` would\n     /// work fine.\n     ///\n-    /// **Why is this bad?** This is an unnecessary allocation, and bad for\n+    /// ### Why is this bad?\n+    /// This is an unnecessary allocation, and bad for\n     /// performance. It is only necessary to allocate if you wish to move the box\n     /// into something.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # fn foo(bar: usize) {}\n     /// // Bad"}, {"sha": "192b69e18f90fdaff243e6a1ee0acf850395cbcf", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -14,19 +14,22 @@ use rustc_middle::ty::{self, ClosureKind, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for closures which just call another function where\n+    /// ### What it does\n+    /// Checks for closures which just call another function where\n     /// the function can be called directly. `unsafe` functions or calls where types\n     /// get adjusted are ignored.\n     ///\n-    /// **Why is this bad?** Needlessly creating a closure adds code for no benefit\n+    /// ### Why is this bad?\n+    /// Needlessly creating a closure adds code for no benefit\n     /// and gives the optimizer more work.\n     ///\n-    /// **Known problems:** If creating the closure inside the closure has a side-\n+    /// ### Known problems\n+    /// If creating the closure inside the closure has a side-\n     /// effect then moving the closure creation out will change when that side-\n     /// effect runs.\n     /// See [#1439](https://github.com/rust-lang/rust-clippy/issues/1439) for more details.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n     /// xs.map(|x| foo(x))\n@@ -42,17 +45,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for closures which only invoke a method on the closure\n+    /// ### What it does\n+    /// Checks for closures which only invoke a method on the closure\n     /// argument and can be replaced by referencing the method directly.\n     ///\n-    /// **Why is this bad?** It's unnecessary to create the closure.\n+    /// ### Why is this bad?\n+    /// It's unnecessary to create the closure.\n     ///\n-    /// **Known problems:** [#3071](https://github.com/rust-lang/rust-clippy/issues/3071),\n+    /// ### Known problems\n+    /// [#3071](https://github.com/rust-lang/rust-clippy/issues/3071),\n     /// [#3942](https://github.com/rust-lang/rust-clippy/issues/3942),\n     /// [#4002](https://github.com/rust-lang/rust-clippy/issues/4002)\n     ///\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// Some('a').map(|s| s.to_uppercase());\n     /// ```"}, {"sha": "f72a1e446d55cd11bae944f8467dfd75a98dc6b2", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,17 +9,20 @@ use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for a read and a write to the same variable where\n+    /// ### What it does\n+    /// Checks for a read and a write to the same variable where\n     /// whether the read occurs before or after the write depends on the evaluation\n     /// order of sub-expressions.\n     ///\n-    /// **Why is this bad?** It is often confusing to read. In addition, the\n+    /// ### Why is this bad?\n+    /// It is often confusing to read. In addition, the\n     /// sub-expression evaluation order for Rust is not well documented.\n     ///\n-    /// **Known problems:** Code which intentionally depends on the evaluation\n+    /// ### Known problems\n+    /// Code which intentionally depends on the evaluation\n     /// order, or which is correct for any evaluation order.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let mut x = 0;\n     ///\n@@ -43,16 +46,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for diverging calls that are not match arms or\n+    /// ### What it does\n+    /// Checks for diverging calls that are not match arms or\n     /// statements.\n     ///\n-    /// **Why is this bad?** It is often confusing to read. In addition, the\n+    /// ### Why is this bad?\n+    /// It is often confusing to read. In addition, the\n     /// sub-expression evaluation order for Rust is not well documented.\n     ///\n-    /// **Known problems:** Someone might want to use `some_bool || panic!()` as a\n+    /// ### Known problems\n+    /// Someone might want to use `some_bool || panic!()` as a\n     /// shorthand.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,no_run\n     /// # fn b() -> bool { true }\n     /// # fn c() -> bool { true }"}, {"sha": "476e6d23f12151e869270de3c8265bc647993d25", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,19 +8,19 @@ use rustc_span::{sym, Span};\n use std::convert::TryInto;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for excessive\n+    /// ### What it does\n+    /// Checks for excessive\n     /// use of bools in structs.\n     ///\n-    /// **Why is this bad?** Excessive bools in a struct\n+    /// ### Why is this bad?\n+    /// Excessive bools in a struct\n     /// is often a sign that it's used as a state machine,\n     /// which is much better implemented as an enum.\n     /// If it's not the case, excessive bools usually benefit\n     /// from refactoring into two-variant enums for better\n     /// readability and API.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust\n     /// struct S {\n@@ -44,19 +44,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for excessive use of\n+    /// ### What it does\n+    /// Checks for excessive use of\n     /// bools in function definitions.\n     ///\n-    /// **Why is this bad?** Calls to such functions\n+    /// ### Why is this bad?\n+    /// Calls to such functions\n     /// are confusing and error prone, because it's\n     /// hard to remember argument order and you have\n     /// no type system support to back you up. Using\n     /// two-variant enums instead of bools often makes\n     /// API easier to use.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust,ignore\n     /// fn f(is_round: bool, is_hot: bool) { ... }"}, {"sha": "e00126046c0223fcaf5142e92f554caa572267dd", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,16 +8,15 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns on any exported `enum`s that are not tagged `#[non_exhaustive]`\n+    /// ### What it does\n+    /// Warns on any exported `enum`s that are not tagged `#[non_exhaustive]`\n     ///\n-    /// **Why is this bad?** Exhaustive enums are typically fine, but a project which does\n+    /// ### Why is this bad?\n+    /// Exhaustive enums are typically fine, but a project which does\n     /// not wish to make a stability commitment around exported enums may wish to\n     /// disable them by default.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// enum Foo {\n     ///     Bar,\n@@ -38,16 +37,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns on any exported `structs`s that are not tagged `#[non_exhaustive]`\n+    /// ### What it does\n+    /// Warns on any exported `structs`s that are not tagged `#[non_exhaustive]`\n     ///\n-    /// **Why is this bad?** Exhaustive structs are typically fine, but a project which does\n+    /// ### Why is this bad?\n+    /// Exhaustive structs are typically fine, but a project which does\n     /// not wish to make a stability commitment around exported structs may wish to\n     /// disable them by default.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// struct Foo {\n     ///     bar: u8,"}, {"sha": "9cd5b2d9f4439e20fadd7785f102a53458c3aba5", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,15 +6,15 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** `exit()`  terminates the program and doesn't provide a\n+    /// ### What it does\n+    /// `exit()`  terminates the program and doesn't provide a\n     /// stack trace.\n     ///\n-    /// **Why is this bad?** Ideally a program is terminated by finishing\n+    /// ### Why is this bad?\n+    /// Ideally a program is terminated by finishing\n     /// the main function.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// std::process::exit(0)\n     /// ```"}, {"sha": "4f46ef906f4098517137997f64068f5ccf9a13ba", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,14 +9,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `write!()` / `writeln()!` which can be\n+    /// ### What it does\n+    /// Checks for usage of `write!()` / `writeln()!` which can be\n     /// replaced with `(e)print!()` / `(e)println!()`\n     ///\n-    /// **Why is this bad?** Using `(e)println! is clearer and more concise\n+    /// ### Why is this bad?\n+    /// Using `(e)println! is clearer and more concise\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::io::Write;\n     /// # let bar = \"furchtbar\";"}, {"sha": "7e4d1b3ef9f0d78365391ada01d0c3e81492024b", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,13 +10,13 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for impls of `From<..>` that contain `panic!()` or `unwrap()`\n+    /// ### What it does\n+    /// Checks for impls of `From<..>` that contain `panic!()` or `unwrap()`\n     ///\n-    /// **Why is this bad?** `TryFrom` should be used if there's a possibility of failure.\n+    /// ### Why is this bad?\n+    /// `TryFrom` should be used if there's a possibility of failure.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// struct Foo(i32);\n     ///"}, {"sha": "c33d80b8e8ef9aee958b93d3819a78829d3775d9", "filename": "clippy_lints/src/float_equality_without_abs.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,30 +11,32 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for statements of the form `(a - b) < f32::EPSILON` or\n-     /// `(a - b) < f64::EPSILON`. Notes the missing `.abs()`.\n-     ///\n-     /// **Why is this bad?** The code without `.abs()` is more likely to have a bug.\n-     ///\n-     /// **Known problems:** If the user can ensure that b is larger than a, the `.abs()` is\n-     /// technically unneccessary. However, it will make the code more robust and doesn't have any\n-     /// large performance implications. If the abs call was deliberately left out for performance\n-     /// reasons, it is probably better to state this explicitly in the code, which then can be done\n-     /// with an allow.\n-     ///\n-     /// **Example:**\n-     ///\n-     /// ```rust\n-     /// pub fn is_roughly_equal(a: f32, b: f32) -> bool {\n-     ///     (a - b) < f32::EPSILON\n-     /// }\n-     /// ```\n-     /// Use instead:\n-     /// ```rust\n-     /// pub fn is_roughly_equal(a: f32, b: f32) -> bool {\n-     ///     (a - b).abs() < f32::EPSILON\n-     /// }\n-     /// ```\n+    /// ### What it does\n+    /// Checks for statements of the form `(a - b) < f32::EPSILON` or\n+    /// `(a - b) < f64::EPSILON`. Notes the missing `.abs()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// The code without `.abs()` is more likely to have a bug.\n+    ///\n+    /// ### Known problems\n+    /// If the user can ensure that b is larger than a, the `.abs()` is\n+    /// technically unneccessary. However, it will make the code more robust and doesn't have any\n+    /// large performance implications. If the abs call was deliberately left out for performance\n+    /// reasons, it is probably better to state this explicitly in the code, which then can be done\n+    /// with an allow.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// pub fn is_roughly_equal(a: f32, b: f32) -> bool {\n+    ///     (a - b) < f32::EPSILON\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// pub fn is_roughly_equal(a: f32, b: f32) -> bool {\n+    ///     (a - b).abs() < f32::EPSILON\n+    /// }\n+    /// ```\n     pub FLOAT_EQUALITY_WITHOUT_ABS,\n     suspicious,\n     \"float equality check without `.abs()`\""}, {"sha": "a3d70f31f0021b90ae89f334d02eccd817dd68c5", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,15 +10,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::fmt;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for float literals with a precision greater\n+    /// ### What it does\n+    /// Checks for float literals with a precision greater\n     /// than that supported by the underlying type.\n     ///\n-    /// **Why is this bad?** Rust will truncate the literal silently.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Rust will truncate the literal silently.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let v: f32 = 0.123_456_789_9;\n@@ -34,16 +33,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for whole number float literals that\n+    /// ### What it does\n+    /// Checks for whole number float literals that\n     /// cannot be represented as the underlying type without loss.\n     ///\n-    /// **Why is this bad?** Rust will silently lose precision during\n+    /// ### Why is this bad?\n+    /// Rust will silently lose precision during\n     /// conversion to a float.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let _: f32 = 16_777_217.0; // 16_777_216.0"}, {"sha": "b01c0cdd84624d8beab66a039f0f70922d1115a1", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -18,16 +18,15 @@ use std::f64::consts as f64_consts;\n use sugg::Sugg;\n \n declare_clippy_lint! {\n-    /// **What it does:** Looks for floating-point expressions that\n+    /// ### What it does\n+    /// Looks for floating-point expressions that\n     /// can be expressed using built-in methods to improve accuracy\n     /// at the cost of performance.\n     ///\n-    /// **Why is this bad?** Negatively impacts accuracy.\n-    ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Negatively impacts accuracy.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// let a = 3f32;\n     /// let _ = a.powf(1.0 / 3.0);\n@@ -49,16 +48,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Looks for floating-point expressions that\n+    /// ### What it does\n+    /// Looks for floating-point expressions that\n     /// can be expressed using built-in methods to improve both\n     /// accuracy and performance.\n     ///\n-    /// **Why is this bad?** Negatively impacts accuracy and performance.\n-    ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Negatively impacts accuracy and performance.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// use std::f32::consts::E;\n     ///"}, {"sha": "863c606f5a92cf158b4ee4935663916a8a4b0d75", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,18 +13,18 @@ use rustc_span::symbol::kw;\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the use of `format!(\"string literal with no\n+    /// ### What it does\n+    /// Checks for the use of `format!(\"string literal with no\n     /// argument\")` and `format!(\"{}\", foo)` where `foo` is a string.\n     ///\n-    /// **Why is this bad?** There is no point of doing that. `format!(\"foo\")` can\n+    /// ### Why is this bad?\n+    /// There is no point of doing that. `format!(\"foo\")` can\n     /// be replaced by `\"foo\".to_owned()` if you really need a `String`. The even\n     /// worse `&format!(\"foo\")` is often encountered in the wild. `format!(\"{}\",\n     /// foo)` can be replaced by `foo.clone()` if `foo: String` or `foo.to_owned()`\n     /// if `foo: &str`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust\n     ///\n     /// // Bad"}, {"sha": "b4cf1971d78dc7e44e510178763b7c70b9f3be9d", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,15 +9,15 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for use of the non-existent `=*`, `=!` and `=-`\n+    /// ### What it does\n+    /// Checks for use of the non-existent `=*`, `=!` and `=-`\n     /// operators.\n     ///\n-    /// **Why is this bad?** This is either a typo of `*=`, `!=` or `-=` or\n+    /// ### Why is this bad?\n+    /// This is either a typo of `*=`, `!=` or `-=` or\n     /// confusing.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// a =- 42; // confusing, should it be `a -= 42` or `a = -42`?\n     /// ```\n@@ -27,15 +27,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks the formatting of a unary operator on the right hand side\n+    /// ### What it does\n+    /// Checks the formatting of a unary operator on the right hand side\n     /// of a binary operator. It lints if there is no space between the binary and unary operators,\n     /// but there is a space between the unary and its operand.\n     ///\n-    /// **Why is this bad?** This is either a typo in the binary operator or confusing.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// This is either a typo in the binary operator or confusing.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// if foo <- 30 { // this should be `foo < -30` but looks like a different operator\n     /// }\n@@ -49,15 +49,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for formatting of `else`. It lints if the `else`\n+    /// ### What it does\n+    /// Checks for formatting of `else`. It lints if the `else`\n     /// is followed immediately by a newline or the `else` seems to be missing.\n     ///\n-    /// **Why is this bad?** This is probably some refactoring remnant, even if the\n+    /// ### Why is this bad?\n+    /// This is probably some refactoring remnant, even if the\n     /// code is correct, it might look confusing.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// if foo {\n     /// } { // looks like an `else` is missing here\n@@ -85,14 +85,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for possible missing comma in an array. It lints if\n+    /// ### What it does\n+    /// Checks for possible missing comma in an array. It lints if\n     /// an array element is a binary operator expression and it lies on two lines.\n     ///\n-    /// **Why is this bad?** This could lead to unexpected results.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// This could lead to unexpected results.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// let a = &[\n     ///     -1, -2, -3 // <= no comma here"}, {"sha": "623546cd1dea90a962482c927fe273253882a452", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,14 +8,13 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Searches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.\n+    /// ### What it does\n+    /// Searches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.\n     ///\n-    /// **Why is this bad?** According the std docs implementing `From<..>` is preferred since it gives you `Into<..>` for free where the reverse isn't true.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// According the std docs implementing `From<..>` is preferred since it gives you `Into<..>` for free where the reverse isn't true.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// struct StringWrapper(String);\n     ///"}, {"sha": "cc4bb85c50f7e9e480b78a4101c86e56b7a0749f", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,20 +10,22 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n+    ///\n     /// Checks for function invocations of the form `primitive::from_str_radix(s, 10)`\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n+    ///\n     /// This specific common use case can be rewritten as `s.parse::<primitive>()`\n     /// (and in most cases, the turbofish can be removed), which reduces code length\n     /// and complexity.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n+    ///\n     /// This lint may suggest using (&<expression>).parse() instead of <expression>.parse() directly\n     /// in some cases, which is correct but adds unnecessary complexity to the code.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```ignore\n     /// let input: &str = get_input();\n     /// let num = u16::from_str_radix(input, 10)?;"}, {"sha": "ce23c0ce4a0764feaab4139979515157e23eee48", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,15 +11,15 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for functions with too many parameters.\n+    /// ### What it does\n+    /// Checks for functions with too many parameters.\n     ///\n-    /// **Why is this bad?** Functions with lots of parameters are considered bad\n+    /// ### Why is this bad?\n+    /// Functions with lots of parameters are considered bad\n     /// style and reduce readability (\u201cwhat does the 5th parameter mean?\u201d). Consider\n     /// grouping some parameters into a new type.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # struct Color;\n     /// fn foo(x: u32, y: u32, name: &str, c: Color, w: f32, h: f32, a: f32, b: f32) {\n@@ -32,16 +32,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for functions with a large amount of lines.\n+    /// ### What it does\n+    /// Checks for functions with a large amount of lines.\n     ///\n-    /// **Why is this bad?** Functions with a lot of lines are harder to understand\n+    /// ### Why is this bad?\n+    /// Functions with a lot of lines are harder to understand\n     /// due to having to look at a larger amount of code to understand what the\n     /// function is doing. Consider splitting the body of the function into\n     /// multiple functions.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn im_too_long() {\n     ///     println!(\"\");\n@@ -55,23 +55,24 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for public functions that dereference raw pointer\n+    /// ### What it does\n+    /// Checks for public functions that dereference raw pointer\n     /// arguments but are not marked `unsafe`.\n     ///\n-    /// **Why is this bad?** The function should probably be marked `unsafe`, since\n+    /// ### Why is this bad?\n+    /// The function should probably be marked `unsafe`, since\n     /// for an arbitrary raw pointer, there is no way of telling for sure if it is\n     /// valid.\n     ///\n-    /// **Known problems:**\n-    ///\n+    /// ### Known problems\n     /// * It does not check functions recursively so if the pointer is passed to a\n     /// private non-`unsafe` function which does the dereferencing, the lint won't\n     /// trigger.\n     /// * It only checks for arguments whose type are raw pointers, not raw pointers\n     /// got from an argument in some other way (`fn foo(bar: &[*const u8])` or\n     /// `some_argument.get_raw_ptr()`).\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n     /// pub fn foo(x: *const u8) {\n@@ -89,17 +90,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for a [`#[must_use]`] attribute on\n+    /// ### What it does\n+    /// Checks for a [`#[must_use]`] attribute on\n     /// unit-returning functions and methods.\n     ///\n     /// [`#[must_use]`]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\n     ///\n-    /// **Why is this bad?** Unit values are useless. The attribute is likely\n+    /// ### Why is this bad?\n+    /// Unit values are useless. The attribute is likely\n     /// a remnant of a refactoring that removed the return type.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust\n     /// #[must_use]\n     /// fn useless() { }\n@@ -110,19 +111,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for a [`#[must_use]`] attribute without\n+    /// ### What it does\n+    /// Checks for a [`#[must_use]`] attribute without\n     /// further information on functions and methods that return a type already\n     /// marked as `#[must_use]`.\n     ///\n     /// [`#[must_use]`]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\n     ///\n-    /// **Why is this bad?** The attribute isn't needed. Not using the result\n+    /// ### Why is this bad?\n+    /// The attribute isn't needed. Not using the result\n     /// will already be reported. Alternatively, one can add some text to the\n     /// attribute to improve the lint message.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust\n     /// #[must_use]\n     /// fn double_must_use() -> Result<(), ()> {\n@@ -135,24 +136,27 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for public functions that have no\n+    /// ### What it does\n+    /// Checks for public functions that have no\n     /// [`#[must_use]`] attribute, but return something not already marked\n     /// must-use, have no mutable arg and mutate no statics.\n     ///\n     /// [`#[must_use]`]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\n     ///\n-    /// **Why is this bad?** Not bad at all, this lint just shows places where\n+    /// ### Why is this bad?\n+    /// Not bad at all, this lint just shows places where\n     /// you could add the attribute.\n     ///\n-    /// **Known problems:** The lint only checks the arguments for mutable\n+    /// ### Known problems\n+    /// The lint only checks the arguments for mutable\n     /// types without looking if they are actually changed. On the other hand,\n     /// it also ignores a broad range of potentially interesting side effects,\n     /// because we cannot decide whether the programmer intends the function to\n     /// be called for the side effect or the result. Expect many false\n     /// positives. At least we don't lint if the result type is unit or already\n     /// `#[must_use]`.\n     ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust\n     /// // this could be annotated with `#[must_use]`.\n     /// fn id<T>(t: T) -> T { t }\n@@ -163,20 +167,23 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for public functions that return a `Result`\n+    /// ### What it does\n+    /// Checks for public functions that return a `Result`\n     /// with an `Err` type of `()`. It suggests using a custom type that\n     /// implements `std::error::Error`.\n     ///\n-    /// **Why is this bad?** Unit does not implement `Error` and carries no\n+    /// ### Why is this bad?\n+    /// Unit does not implement `Error` and carries no\n     /// further information about what went wrong.\n     ///\n-    /// **Known problems:** Of course, this lint assumes that `Result` is used\n+    /// ### Known problems\n+    /// Of course, this lint assumes that `Result` is used\n     /// for a fallible operation (which is after all the intended use). However\n     /// code may opt to (mis)use it as a basic two-variant-enum. In that case,\n     /// the suggestion is misguided, and the code should use a custom enum\n     /// instead.\n     ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust\n     /// pub fn read_u8() -> Result<u8, ()> { Err(()) }\n     /// ```"}, {"sha": "0be03969bcbe2080f66689f456e69d041449a3cb", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,12 +12,14 @@ use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt;\n use rustc_trait_selection::traits::{self, FulfillmentError, TraitEngine};\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint requires Future implementations returned from\n+    /// ### What it does\n+    /// This lint requires Future implementations returned from\n     /// functions and methods to implement the `Send` marker trait. It is mostly\n     /// used by library authors (public and internal) that target an audience where\n     /// multithreaded executors are likely to be used for running these Futures.\n     ///\n-    /// **Why is this bad?** A Future implementation captures some state that it\n+    /// ### Why is this bad?\n+    /// A Future implementation captures some state that it\n     /// needs to eventually produce its final value. When targeting a multithreaded\n     /// executor (which is the norm on non-embedded devices) this means that this\n     /// state may need to be transported to other threads, in other words the\n@@ -31,10 +33,7 @@ declare_clippy_lint! {\n     /// modifying the library where the offending Future implementation is\n     /// produced.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// async fn not_send(bytes: std::rc::Rc<[u8]>) {}\n     /// ```"}, {"sha": "ced35030de8350c2c9939d91157184ffa8651f7f", "filename": "clippy_lints/src/get_last_with_len.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -14,10 +14,12 @@ use rustc_span::source_map::Spanned;\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for using `x.get(x.len() - 1)` instead of\n+    /// ### What it does\n+    /// Checks for using `x.get(x.len() - 1)` instead of\n     /// `x.last()`.\n     ///\n-    /// **Why is this bad?** Using `x.last()` is easier to read and has the same\n+    /// ### Why is this bad?\n+    /// Using `x.last()` is easier to read and has the same\n     /// result.\n     ///\n     /// Note that using `x[x.len() - 1]` is semantically different from\n@@ -27,10 +29,7 @@ declare_clippy_lint! {\n     /// There is another lint (get_unwrap) that covers the case of using\n     /// `x.get(index).unwrap()` instead of `x[index]`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let x = vec![2, 3, 5];"}, {"sha": "5feb0ce8dece725d4c902674b8b39e049939d1fb", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,14 +11,14 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::{clip, unsext};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for identity operations, e.g., `x + 0`.\n+    /// ### What it does\n+    /// Checks for identity operations, e.g., `x + 0`.\n     ///\n-    /// **Why is this bad?** This code can be removed without changing the\n+    /// ### Why is this bad?\n+    /// This code can be removed without changing the\n     /// meaning. So it just obscures what's going on. Delete it mercilessly.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = 1;\n     /// x / 1 + 0 * 1 - 0 | 0;"}, {"sha": "d3ddeda9fd1b93757834f743563b82a273b2eead", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,16 +9,15 @@ use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `Mutex::lock` calls in `if let` expression\n+    /// ### What it does\n+    /// Checks for `Mutex::lock` calls in `if let` expression\n     /// with lock calls in any of the else blocks.\n     ///\n-    /// **Why is this bad?** The Mutex lock remains held for the whole\n+    /// ### Why is this bad?\n+    /// The Mutex lock remains held for the whole\n     /// `if let ... else` block and deadlocks.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust,ignore\n     /// if let Ok(thing) = mutex.lock() {\n     ///     do_thing();"}, {"sha": "587307811a1133f8edf884d0edf7239b0469d124", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,14 +10,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:*** Checks for unnecessary `ok()` in if let.\n+    /// ### What it does\n+    ///* Checks for unnecessary `ok()` in if let.\n     ///\n-    /// **Why is this bad?** Calling `ok()` in if let is unnecessary, instead match\n+    /// ### Why is this bad?\n+    /// Calling `ok()` in if let is unnecessary, instead match\n     /// on `Ok(pat)`\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// for i in iter {\n     ///     if let Some(value) = i.parse().ok() {"}, {"sha": "28db7233d70e8c43cde2aa110929be8cd48e4dea", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,14 +8,14 @@ use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `!` or `!=` in an if condition with an\n+    /// ### What it does\n+    /// Checks for usage of `!` or `!=` in an if condition with an\n     /// else branch.\n     ///\n-    /// **Why is this bad?** Negations reduce the readability of statements.\n+    /// ### Why is this bad?\n+    /// Negations reduce the readability of statements.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let v: Vec<usize> = vec![];\n     /// # fn a() {}"}, {"sha": "17b9a2f888e0d1fa86ecfdc9ce2e371e11ddf5ef", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,14 +10,13 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for if-else that could be written to `bool::then`.\n+    /// ### What it does\n+    /// Checks for if-else that could be written to `bool::then`.\n     ///\n-    /// **Why is this bad?** Looks a little redundant. Using `bool::then` helps it have less lines of code.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Looks a little redundant. Using `bool::then` helps it have less lines of code.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// # let v = vec![0];\n     /// let a = if v.is_empty() {"}, {"sha": "aae44f64e66956aa457101e2f43aae96f124cd9d", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -22,18 +22,21 @@ use clippy_utils::source::{snippet, snippet_opt};\n use clippy_utils::ty::is_type_diagnostic_item;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for public `impl` or `fn` missing generalization\n+    /// ### What it does\n+    /// Checks for public `impl` or `fn` missing generalization\n     /// over different hashers and implicitly defaulting to the default hashing\n     /// algorithm (`SipHash`).\n     ///\n-    /// **Why is this bad?** `HashMap` or `HashSet` with custom hashers cannot be\n+    /// ### Why is this bad?\n+    /// `HashMap` or `HashSet` with custom hashers cannot be\n     /// used with them.\n     ///\n-    /// **Known problems:** Suggestions for replacing constructors can contain\n+    /// ### Known problems\n+    /// Suggestions for replacing constructors can contain\n     /// false-positives. Also applying suggestions can require modification of other\n     /// pieces of code, possibly including external crates.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::collections::HashMap;\n     /// # use std::hash::{Hash, BuildHasher};"}, {"sha": "fa7b5302cb13135a9e30986c40ff3b6205bfe27a", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,17 +13,17 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{Span, SyntaxContext};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for missing return statements at the end of a block.\n+    /// ### What it does\n+    /// Checks for missing return statements at the end of a block.\n     ///\n-    /// **Why is this bad?** Actually omitting the return keyword is idiomatic Rust code. Programmers\n+    /// ### Why is this bad?\n+    /// Actually omitting the return keyword is idiomatic Rust code. Programmers\n     /// coming from other languages might prefer the expressiveness of `return`. It's possible to miss\n     /// the last returning statement because the only difference is a missing `;`. Especially in bigger\n     /// code with multiple return paths having a `return` keyword makes it easier to find the\n     /// corresponding statements.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn foo(x: usize) -> usize {\n     ///     x"}, {"sha": "0a7d31dce2fd5a1415c981cf158546b3cbfee5f1", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,14 +8,13 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for implicit saturating subtraction.\n+    /// ### What it does\n+    /// Checks for implicit saturating subtraction.\n     ///\n-    /// **Why is this bad?** Simplicity and readability. Instead we can easily use an builtin function.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Simplicity and readability. Instead we can easily use an builtin function.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// let end: u32 = 10;\n     /// let start: u32 = 5;"}, {"sha": "1f8240a1f636a269a4e9918ec59d98040e1c4bb0", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,11 +10,13 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for struct constructors where all fields are shorthand and\n+    /// ### What it does\n+    /// Checks for struct constructors where all fields are shorthand and\n     /// the order of the field init shorthand in the constructor is inconsistent\n     /// with the order in the struct definition.\n     ///\n-    /// **Why is this bad?** Since the order of fields in a constructor doesn't affect the\n+    /// ### Why is this bad?\n+    /// Since the order of fields in a constructor doesn't affect the\n     /// resulted instance as the below example indicates,\n     ///\n     /// ```rust\n@@ -32,10 +34,7 @@ declare_clippy_lint! {\n     ///\n     /// inconsistent order can be confusing and decreases readability and consistency.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// struct Foo {\n     ///     x: i32,"}, {"sha": "8c1f107330955d71fae5bd47034954f087cae384", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,14 +10,17 @@ use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for out of bounds array indexing with a constant\n+    /// ### What it does\n+    /// Checks for out of bounds array indexing with a constant\n     /// index.\n     ///\n-    /// **Why is this bad?** This will always panic at runtime.\n+    /// ### Why is this bad?\n+    /// This will always panic at runtime.\n     ///\n-    /// **Known problems:** Hopefully none.\n+    /// ### Known problems\n+    /// Hopefully none.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```no_run\n     /// # #![allow(const_err)]\n     /// let x = [1, 2, 3, 4];\n@@ -36,16 +39,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of indexing or slicing. Arrays are special cases, this lint\n+    /// ### What it does\n+    /// Checks for usage of indexing or slicing. Arrays are special cases, this lint\n     /// does report on arrays if we can tell that slicing operations are in bounds and does not\n     /// lint on constant `usize` indexing on arrays because that is handled by rustc's `const_err` lint.\n     ///\n-    /// **Why is this bad?** Indexing and slicing can panic at runtime and there are\n+    /// ### Why is this bad?\n+    /// Indexing and slicing can panic at runtime and there are\n     /// safe alternatives.\n     ///\n-    /// **Known problems:** Hopefully none.\n+    /// ### Known problems\n+    /// Hopefully none.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,no_run\n     /// // Vector\n     /// let x = vec![0; 5];"}, {"sha": "2411a3175b9194451af7ee866b3c668cef4d7d99", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,14 +7,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{sym, Symbol};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for iteration that is guaranteed to be infinite.\n+    /// ### What it does\n+    /// Checks for iteration that is guaranteed to be infinite.\n     ///\n-    /// **Why is this bad?** While there may be places where this is acceptable\n+    /// ### Why is this bad?\n+    /// While there may be places where this is acceptable\n     /// (e.g., in event streams), in most cases this is simply an error.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```no_run\n     /// use std::iter;\n     ///\n@@ -26,15 +26,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for iteration that may be infinite.\n+    /// ### What it does\n+    /// Checks for iteration that may be infinite.\n     ///\n-    /// **Why is this bad?** While there may be places where this is acceptable\n+    /// ### Why is this bad?\n+    /// While there may be places where this is acceptable\n     /// (e.g., in event streams), in most cases this is simply an error.\n     ///\n-    /// **Known problems:** The code may have a condition to stop iteration, but\n+    /// ### Known problems\n+    /// The code may have a condition to stop iteration, but\n     /// this lint is not clever enough to analyze it.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let infinite_iter = 0..;\n     /// [0..].iter().zip(infinite_iter.take_while(|x| *x > 5));"}, {"sha": "d87055c842c8c754e7193633107364d1ac12d06d", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,13 +10,13 @@ use rustc_span::Span;\n use std::collections::hash_map::Entry;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for multiple inherent implementations of a struct\n+    /// ### What it does\n+    /// Checks for multiple inherent implementations of a struct\n     ///\n-    /// **Why is this bad?** Splitting the implementation of a type makes the code harder to navigate.\n+    /// ### Why is this bad?\n+    /// Splitting the implementation of a type makes the code harder to navigate.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// struct X;\n     /// impl X {"}, {"sha": "b62fad4bd39585e049fc5eef3428be53780bc875", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,14 +8,16 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the definition of inherent methods with a signature of `to_string(&self) -> String`.\n+    /// ### What it does\n+    /// Checks for the definition of inherent methods with a signature of `to_string(&self) -> String`.\n     ///\n-    /// **Why is this bad?** This method is also implicitly defined if a type implements the `Display` trait. As the functionality of `Display` is much more versatile, it should be preferred.\n+    /// ### Why is this bad?\n+    /// This method is also implicitly defined if a type implements the `Display` trait. As the functionality of `Display` is much more versatile, it should be preferred.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// ** Example:**\n+    /// ### Known problems\n+    /// None\n     ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// pub struct A;\n@@ -45,14 +47,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the definition of inherent methods with a signature of `to_string(&self) -> String` and if the type implementing this method also implements the `Display` trait.\n-    ///\n-    /// **Why is this bad?** This method is also implicitly defined if a type implements the `Display` trait. The less versatile inherent method will then shadow the implementation introduced by `Display`.\n+    /// ### What it does\n+    /// Checks for the definition of inherent methods with a signature of `to_string(&self) -> String` and if the type implementing this method also implements the `Display` trait.\n     ///\n-    /// **Known problems:** None\n+    /// ### Why is this bad?\n+    /// This method is also implicitly defined if a type implements the `Display` trait. The less versatile inherent method will then shadow the implementation introduced by `Display`.\n     ///\n-    /// ** Example:**\n+    /// ### Known problems\n+    /// None\n     ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// use std::fmt;"}, {"sha": "3e3df903f17cf27156b1bdf2a9d8ce46c39ddc74", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,14 +10,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Symbol};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `#[inline]` on trait methods without bodies\n+    /// ### What it does\n+    /// Checks for `#[inline]` on trait methods without bodies\n     ///\n-    /// **Why is this bad?** Only implementations of trait methods may be inlined.\n+    /// ### Why is this bad?\n+    /// Only implementations of trait methods may be inlined.\n     /// The inline attribute is ignored for trait methods without bodies.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// trait Animal {\n     ///     #[inline]"}, {"sha": "49b69dd072a21352da51d21d4eb1a4c0bee2778f", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,13 +8,13 @@ use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block\n+    /// ### What it does\n+    /// Checks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block\n     ///\n-    /// **Why is this bad?** Readability -- better to use `> y` instead of `>= y + 1`.\n+    /// ### Why is this bad?\n+    /// Readability -- better to use `> y` instead of `>= y + 1`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = 1;\n     /// # let y = 1;"}, {"sha": "a0e6f12b8122e1b45e2b3e0deae10af5db9c0759", "filename": "clippy_lints/src/integer_division.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finteger_division.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -5,15 +5,15 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for division of integers\n+    /// ### What it does\n+    /// Checks for division of integers\n     ///\n-    /// **Why is this bad?** When outside of some very specific algorithms,\n+    /// ### Why is this bad?\n+    /// When outside of some very specific algorithms,\n     /// integer division is very often a mistake because it discards the\n     /// remainder.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let x = 3 / 2;"}, {"sha": "3b28b1212048a1b20de55a1e613858fb236c76cd", "filename": "clippy_lints/src/invalid_upcast_comparisons.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -14,18 +14,20 @@ use clippy_utils::source::snippet;\n use clippy_utils::{comparisons, sext};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for comparisons where the relation is always either\n+    /// ### What it does\n+    /// Checks for comparisons where the relation is always either\n     /// true or false, but where one side has been upcast so that the comparison is\n     /// necessary. Only integer types are checked.\n     ///\n-    /// **Why is this bad?** An expression like `let x : u8 = ...; (x as u32) > 300`\n+    /// ### Why is this bad?\n+    /// An expression like `let x : u8 = ...; (x as u32) > 300`\n     /// will mistakenly imply that it is possible for `x` to be outside the range of\n     /// `u8`.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// https://github.com/rust-lang/rust-clippy/issues/886\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x: u8 = 1;\n     /// (x as u32) > 300;"}, {"sha": "429c6ed7d2d778ec8a81b10895792b4f5dfc83ac", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,15 +7,15 @@ use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for items declared after some statement in a block.\n+    /// ### What it does\n+    /// Checks for items declared after some statement in a block.\n     ///\n-    /// **Why is this bad?** Items live for the entire scope they are declared\n+    /// ### Why is this bad?\n+    /// Items live for the entire scope they are declared\n     /// in. But statements are processed in order. This might cause confusion as\n     /// it's hard to figure out which item is meant in a statement.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// fn foo() {"}, {"sha": "5d4e06c2af08247cfab92f51b4274eba66210b38", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,15 +11,15 @@ use rustc_span::{BytePos, Pos, Span};\n use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for large `const` arrays that should\n+    /// ### What it does\n+    /// Checks for large `const` arrays that should\n     /// be defined as `static` instead.\n     ///\n-    /// **Why is this bad?** Performance: const variables are inlined upon use.\n+    /// ### Why is this bad?\n+    /// Performance: const variables are inlined upon use.\n     /// Static items result in only one instance and has a fixed location in memory.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n     /// pub const a = [0u32; 1_000_000];"}, {"sha": "cde2336b690fd04753a06b56f8298b0e998b4bea", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,20 +10,22 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_target::abi::LayoutOf;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for large size differences between variants on\n+    /// ### What it does\n+    /// Checks for large size differences between variants on\n     /// `enum`s.\n     ///\n-    /// **Why is this bad?** Enum size is bounded by the largest variant. Having a\n+    /// ### Why is this bad?\n+    /// Enum size is bounded by the largest variant. Having a\n     /// large variant can penalize the memory layout of that enum.\n     ///\n-    /// **Known problems:** This lint obviously cannot take the distribution of\n+    /// ### Known problems\n+    /// This lint obviously cannot take the distribution of\n     /// variants in your running program into account. It is possible that the\n     /// smaller variants make up less than 1% of all instances, in which case\n     /// the overhead is negligible and the boxing is counter-productive. Always\n     /// measure the change this lint suggests.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// enum Test {"}, {"sha": "7088630bfdbb45f56c27a73aedfc043127f84894", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,13 +10,13 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use crate::rustc_target::abi::LayoutOf;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for local arrays that may be too large.\n+    /// ### What it does\n+    /// Checks for local arrays that may be too large.\n     ///\n-    /// **Why is this bad?** Large local arrays may cause stack overflow.\n+    /// ### Why is this bad?\n+    /// Large local arrays may cause stack overflow.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// let a = [0u32; 1_000_000];\n     /// ```"}, {"sha": "b66d7a9f7294f5844add5ca01daafb0c501283f8", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -18,17 +18,17 @@ use rustc_span::{\n };\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for getting the length of something via `.len()`\n+    /// ### What it does\n+    /// Checks for getting the length of something via `.len()`\n     /// just to compare to zero, and suggests using `.is_empty()` where applicable.\n     ///\n-    /// **Why is this bad?** Some structures can answer `.is_empty()` much faster\n+    /// ### Why is this bad?\n+    /// Some structures can answer `.is_empty()` much faster\n     /// than calculating their length. So it is good to get into the habit of using\n     /// `.is_empty()`, and having it is cheap.\n     /// Besides, it makes the intent clearer than a manual comparison in some contexts.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// if x.len() == 0 {\n     ///     ..\n@@ -52,18 +52,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for items that implement `.len()` but not\n+    /// ### What it does\n+    /// Checks for items that implement `.len()` but not\n     /// `.is_empty()`.\n     ///\n-    /// **Why is this bad?** It is good custom to have both methods, because for\n+    /// ### Why is this bad?\n+    /// It is good custom to have both methods, because for\n     /// some data structures, asking about the length will be a costly operation,\n     /// whereas `.is_empty()` can usually answer in constant time. Also it used to\n     /// lead to false positives on the [`len_zero`](#len_zero) lint \u2013 currently that\n     /// lint will ignore such entities.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// impl X {\n     ///     pub fn len(&self) -> usize {\n@@ -77,17 +77,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for comparing to an empty slice such as `\"\"` or `[]`,\n+    /// ### What it does\n+    /// Checks for comparing to an empty slice such as `\"\"` or `[]`,\n     /// and suggests using `.is_empty()` where applicable.\n     ///\n-    /// **Why is this bad?** Some structures can answer `.is_empty()` much faster\n+    /// ### Why is this bad?\n+    /// Some structures can answer `.is_empty()` much faster\n     /// than checking for equality. So it is good to get into the habit of using\n     /// `.is_empty()`, and having it is cheap.\n     /// Besides, it makes the intent clearer than a manual comparison in some contexts.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// ```ignore\n     /// if s == \"\" {"}, {"sha": "13f0d43cf8dd1343774ab28d0edd0df2cb82f76b", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,14 +9,14 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for variable declarations immediately followed by a\n+    /// ### What it does\n+    /// Checks for variable declarations immediately followed by a\n     /// conditional affectation.\n     ///\n-    /// **Why is this bad?** This is not idiomatic Rust.\n+    /// ### Why is this bad?\n+    /// This is not idiomatic Rust.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// let foo;\n     ///"}, {"sha": "8992d25932cad00981a950a4c18b223dbc6b9afa", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,15 +9,15 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `let _ = <expr>`\n+    /// ### What it does\n+    /// Checks for `let _ = <expr>`\n     /// where expr is #[must_use]\n     ///\n-    /// **Why is this bad?** It's better to explicitly\n+    /// ### Why is this bad?\n+    /// It's better to explicitly\n     /// handle the value of a #[must_use] expr\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn f() -> Result<u32, u32> {\n     ///     Ok(0)\n@@ -33,17 +33,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `let _ = sync_lock`\n+    /// ### What it does\n+    /// Checks for `let _ = sync_lock`\n     ///\n-    /// **Why is this bad?** This statement immediately drops the lock instead of\n+    /// ### Why is this bad?\n+    /// This statement immediately drops the lock instead of\n     /// extending its lifetime to the end of the scope, which is often not intended.\n     /// To extend lock lifetime to the end of the scope, use an underscore-prefixed\n     /// name instead (i.e. _lock). If you want to explicitly drop the lock,\n     /// `std::mem::drop` conveys your intention better and is less error-prone.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// Bad:\n     /// ```rust,ignore\n@@ -60,19 +60,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `let _ = <expr>`\n+    /// ### What it does\n+    /// Checks for `let _ = <expr>`\n     /// where expr has a type that implements `Drop`\n     ///\n-    /// **Why is this bad?** This statement immediately drops the initializer\n+    /// ### Why is this bad?\n+    /// This statement immediately drops the initializer\n     /// expression instead of extending its lifetime to the end of the scope, which\n     /// is often not intended. To extend the expression's lifetime to the end of the\n     /// scope, use an underscore-prefixed name instead (i.e. _var). If you want to\n     /// explicitly drop the expression, `std::mem::drop` conveys your intention\n     /// better and is less error-prone.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// Bad:\n     /// ```rust,ignore"}, {"sha": "3cffb507f703a6cf91b055d82367ed6894b7087f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -73,14 +73,13 @@ use rustc_session::Session;\n /// use clippy_lints::declare_clippy_lint;\n ///\n /// declare_clippy_lint! {\n-///     /// **What it does:** Checks for ... (describe what the lint matches).\n+///     /// ### What it does\n+///     /// Checks for ... (describe what the lint matches).\n ///     ///\n-///     /// **Why is this bad?** Supply the reason for linting the code.\n-///     ///\n-///     /// **Known problems:** None. (Or describe where it could go wrong.)\n-///     ///\n-///     /// **Example:**\n+///     /// ### Why is this bad?\n+///     /// Supply the reason for linting the code.\n ///     ///\n+///     /// ### Example\n ///     /// ```rust\n ///     /// // Bad\n ///     /// Insert a short example of code that triggers the lint"}, {"sha": "e5e6f8d25cc11143878512361a1a9d9f5672cb99", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -18,20 +18,22 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, Symbol};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for lifetime annotations which can be removed by\n+    /// ### What it does\n+    /// Checks for lifetime annotations which can be removed by\n     /// relying on lifetime elision.\n     ///\n-    /// **Why is this bad?** The additional lifetimes make the code look more\n+    /// ### Why is this bad?\n+    /// The additional lifetimes make the code look more\n     /// complicated, while there is nothing out of the ordinary going on. Removing\n     /// them leads to more readable code.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// - We bail out if the function has a `where` clause where lifetimes\n     /// are mentioned due to potenial false positives.\n     /// - Lifetime bounds such as `impl Foo + 'a` and `T: 'a` must be elided with the\n     /// placeholder notation `'_` because the fully elided notation leaves the type bound to `'static`.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad: unnecessary lifetime annotations\n     /// fn in_and_out<'a>(x: &'a u8, y: u8) -> &'a u8 {\n@@ -50,16 +52,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for lifetimes in generics that are never used\n+    /// ### What it does\n+    /// Checks for lifetimes in generics that are never used\n     /// anywhere else.\n     ///\n-    /// **Why is this bad?** The additional lifetimes make the code look more\n+    /// ### Why is this bad?\n+    /// The additional lifetimes make the code look more\n     /// complicated, while there is nothing out of the ordinary going on. Removing\n     /// them leads to more readable code.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad: unnecessary lifetimes\n     /// fn unused_lifetime<'a>(x: u8) {"}, {"sha": "699ddce0cff905ac2705e3c8d0c37b525b289e6d", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -16,15 +16,14 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use std::iter;\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns if a long integral or floating-point constant does\n+    /// ### What it does\n+    /// Warns if a long integral or floating-point constant does\n     /// not contain underscores.\n     ///\n-    /// **Why is this bad?** Reading long numbers is difficult without separators.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Reading long numbers is difficult without separators.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let x: u64 = 61864918973511;\n@@ -38,17 +37,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns for mistyped suffix in literals\n+    /// ### What it does\n+    /// Warns for mistyped suffix in literals\n     ///\n-    /// **Why is this bad?** This is most probably a typo\n+    /// ### Why is this bad?\n+    /// This is most probably a typo\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// - Recommends a signed suffix, even though the number might be too big and an unsigned\n     ///   suffix is required\n     /// - Does not match on `_127` since that is a valid grouping for decimal and octal numbers\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Probably mistyped\n     /// 2_32;\n@@ -62,16 +62,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns if an integral or floating-point constant is\n+    /// ### What it does\n+    /// Warns if an integral or floating-point constant is\n     /// grouped inconsistently with underscores.\n     ///\n-    /// **Why is this bad?** Readers may incorrectly interpret inconsistently\n+    /// ### Why is this bad?\n+    /// Readers may incorrectly interpret inconsistently\n     /// grouped digits.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let x: u64 = 618_64_9189_73_511;\n@@ -85,15 +84,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns if hexadecimal or binary literals are not grouped\n+    /// ### What it does\n+    /// Warns if hexadecimal or binary literals are not grouped\n     /// by nibble or byte.\n     ///\n-    /// **Why is this bad?** Negatively impacts readability.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Negatively impacts readability.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// let x: u32 = 0xFFF_FFF;\n     /// let y: u8 = 0b01_011_101;\n@@ -104,16 +102,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns if the digits of an integral or floating-point\n+    /// ### What it does\n+    /// Warns if the digits of an integral or floating-point\n     /// constant are grouped into groups that\n     /// are too large.\n     ///\n-    /// **Why is this bad?** Negatively impacts readability.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Negatively impacts readability.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// let x: u64 = 6186491_8973511;\n     /// ```\n@@ -123,15 +120,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns if there is a better representation for a numeric literal.\n+    /// ### What it does\n+    /// Warns if there is a better representation for a numeric literal.\n     ///\n-    /// **Why is this bad?** Especially for big powers of 2 a hexadecimal representation is more\n+    /// ### Why is this bad?\n+    /// Especially for big powers of 2 a hexadecimal representation is more\n     /// readable than a decimal representation.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// `255` => `0xFF`\n     /// `65_535` => `0xFFFF`\n     /// `4_042_322_160` => `0xF0F0_F0F0`"}, {"sha": "7ca54d53972059f79bcead262813b2341ad81925", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 96, "deletions": 86, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -26,14 +26,14 @@ use rustc_span::source_map::Span;\n use utils::{get_span_of_entire_for_loop, make_iterator_snippet, IncrementVisitor, InitializeVisitor};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for for-loops that manually copy items between\n+    /// ### What it does\n+    /// Checks for for-loops that manually copy items between\n     /// slices that could be optimized by having a memcpy.\n     ///\n-    /// **Why is this bad?** It is not as fast as a memcpy.\n+    /// ### Why is this bad?\n+    /// It is not as fast as a memcpy.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let src = vec![1];\n     /// # let mut dst = vec![0; 65];\n@@ -53,15 +53,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for looping over the range of `0..len` of some\n+    /// ### What it does\n+    /// Checks for looping over the range of `0..len` of some\n     /// collection just to get the values by index.\n     ///\n-    /// **Why is this bad?** Just iterating the collection itself makes the intent\n+    /// ### Why is this bad?\n+    /// Just iterating the collection itself makes the intent\n     /// more clear and is probably faster.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let vec = vec!['a', 'b', 'c'];\n     /// for i in 0..vec.len() {\n@@ -81,15 +81,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for loops on `x.iter()` where `&x` will do, and\n+    /// ### What it does\n+    /// Checks for loops on `x.iter()` where `&x` will do, and\n     /// suggests the latter.\n     ///\n-    /// **Why is this bad?** Readability.\n+    /// ### Why is this bad?\n+    /// Readability.\n     ///\n-    /// **Known problems:** False negatives. We currently only warn on some known\n+    /// ### Known problems\n+    /// False negatives. We currently only warn on some known\n     /// types.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // with `y` a `Vec` or slice:\n     /// # let y = vec![1];\n@@ -110,14 +113,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for loops on `y.into_iter()` where `y` will do, and\n+    /// ### What it does\n+    /// Checks for loops on `y.into_iter()` where `y` will do, and\n     /// suggests the latter.\n     ///\n-    /// **Why is this bad?** Readability.\n+    /// ### Why is this bad?\n+    /// Readability.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let y = vec![1];\n     /// // with `y` a `Vec` or slice:\n@@ -138,18 +141,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for loops on `x.next()`.\n+    /// ### What it does\n+    /// Checks for loops on `x.next()`.\n     ///\n-    /// **Why is this bad?** `next()` returns either `Some(value)` if there was a\n+    /// ### Why is this bad?\n+    /// `next()` returns either `Some(value)` if there was a\n     /// value, or `None` otherwise. The insidious thing is that `Option<_>`\n     /// implements `IntoIterator`, so that possibly one value will be iterated,\n     /// leading to some hard to find bugs. No one will want to write such code\n     /// [except to win an Underhanded Rust\n     /// Contest](https://www.reddit.com/r/rust/comments/3hb0wm/underhanded_rust_contest/cu5yuhr).\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// for x in y.next() {\n     ///     ..\n@@ -161,14 +164,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `for` loops over `Option` or `Result` values.\n+    /// ### What it does\n+    /// Checks for `for` loops over `Option` or `Result` values.\n     ///\n-    /// **Why is this bad?** Readability. This is more clearly expressed as an `if\n+    /// ### Why is this bad?\n+    /// Readability. This is more clearly expressed as an `if\n     /// let`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let opt = Some(1);\n     ///\n@@ -204,15 +207,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Detects `loop + match` combinations that are easier\n+    /// ### What it does\n+    /// Detects `loop + match` combinations that are easier\n     /// written as a `while let` loop.\n     ///\n-    /// **Why is this bad?** The `while let` loop is usually shorter and more\n+    /// ### Why is this bad?\n+    /// The `while let` loop is usually shorter and more\n     /// readable.\n     ///\n-    /// **Known problems:** Sometimes the wrong binding is displayed ([#383](https://github.com/rust-lang/rust-clippy/issues/383)).\n+    /// ### Known problems\n+    /// Sometimes the wrong binding is displayed ([#383](https://github.com/rust-lang/rust-clippy/issues/383)).\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,no_run\n     /// # let y = Some(1);\n     /// loop {\n@@ -233,16 +239,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for functions collecting an iterator when collect\n+    /// ### What it does\n+    /// Checks for functions collecting an iterator when collect\n     /// is not needed.\n     ///\n-    /// **Why is this bad?** `collect` causes the allocation of a new data structure,\n+    /// ### Why is this bad?\n+    /// `collect` causes the allocation of a new data structure,\n     /// when this allocation may not be needed.\n     ///\n-    /// **Known problems:**\n-    /// None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let iterator = vec![1].into_iter();\n     /// let len = iterator.clone().collect::<Vec<_>>().len();\n@@ -255,15 +260,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks `for` loops over slices with an explicit counter\n+    /// ### What it does\n+    /// Checks `for` loops over slices with an explicit counter\n     /// and suggests the use of `.enumerate()`.\n     ///\n-    /// **Why is it bad?** Using `.enumerate()` makes the intent more clear,\n+    /// ### Why is this bad?\n+    /// Using `.enumerate()` makes the intent more clear,\n     /// declutters the code and may be faster in some instances.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let v = vec![1];\n     /// # fn bar(bar: usize, baz: usize) {}\n@@ -285,9 +290,11 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for empty `loop` expressions.\n+    /// ### What it does\n+    /// Checks for empty `loop` expressions.\n     ///\n-    /// **Why is this bad?** These busy loops burn CPU cycles without doing\n+    /// ### Why is this bad?\n+    /// These busy loops burn CPU cycles without doing\n     /// anything. It is _almost always_ a better idea to `panic!` than to have\n     /// a busy loop.\n     ///\n@@ -306,9 +313,7 @@ declare_clippy_lint! {\n     ///   - [`x86_64::instructions::hlt`](https://docs.rs/x86_64/0.12.2/x86_64/instructions/fn.hlt.html)\n     ///   - [`cortex_m::asm::wfi`](https://docs.rs/cortex-m/0.6.3/cortex_m/asm/fn.wfi.html)\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```no_run\n     /// loop {}\n     /// ```\n@@ -318,14 +323,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `while let` expressions on iterators.\n+    /// ### What it does\n+    /// Checks for `while let` expressions on iterators.\n     ///\n-    /// **Why is this bad?** Readability. A simple `for` loop is shorter and conveys\n+    /// ### Why is this bad?\n+    /// Readability. A simple `for` loop is shorter and conveys\n     /// the intent better.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// while let Some(val) = iter() {\n     ///     ..\n@@ -337,15 +342,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for iterating a map (`HashMap` or `BTreeMap`) and\n+    /// ### What it does\n+    /// Checks for iterating a map (`HashMap` or `BTreeMap`) and\n     /// ignoring either the keys or values.\n     ///\n-    /// **Why is this bad?** Readability. There are `keys` and `values` methods that\n+    /// ### Why is this bad?\n+    /// Readability. There are `keys` and `values` methods that\n     /// can be used to express that don't need the values or keys.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// for (k, _) in &map {\n     ///     ..\n@@ -365,15 +370,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for loops that will always `break`, `return` or\n+    /// ### What it does\n+    /// Checks for loops that will always `break`, `return` or\n     /// `continue` an outer loop.\n     ///\n-    /// **Why is this bad?** This loop never loops, all it does is obfuscating the\n+    /// ### Why is this bad?\n+    /// This loop never loops, all it does is obfuscating the\n     /// code.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// loop {\n     ///     ..;\n@@ -386,13 +391,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for loops which have a range bound that is a mutable variable\n-    ///\n-    /// **Why is this bad?** One might think that modifying the mutable variable changes the loop bounds\n+    /// ### What it does\n+    /// Checks for loops which have a range bound that is a mutable variable\n     ///\n-    /// **Known problems:** None\n+    /// ### Why is this bad?\n+    /// One might think that modifying the mutable variable changes the loop bounds\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let mut foo = 42;\n     /// for i in 0..foo {\n@@ -406,17 +411,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks whether variables used within while loop condition\n+    /// ### What it does\n+    /// Checks whether variables used within while loop condition\n     /// can be (and are) mutated in the body.\n     ///\n-    /// **Why is this bad?** If the condition is unchanged, entering the body of the loop\n+    /// ### Why is this bad?\n+    /// If the condition is unchanged, entering the body of the loop\n     /// will lead to an infinite loop.\n     ///\n-    /// **Known problems:** If the `while`-loop is in a closure, the check for mutation of the\n+    /// ### Known problems\n+    /// If the `while`-loop is in a closure, the check for mutation of the\n     /// condition variables in the body can cause false negatives. For example when only `Upvar` `a` is\n     /// in the condition and only `Upvar` `b` gets mutated in the body, the lint will not trigger.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let i = 0;\n     /// while i > 10 {\n@@ -429,15 +437,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks whether a for loop is being used to push a constant\n+    /// ### What it does\n+    /// Checks whether a for loop is being used to push a constant\n     /// value into a Vec.\n     ///\n-    /// **Why is this bad?** This kind of operation can be expressed more succinctly with\n+    /// ### Why is this bad?\n+    /// This kind of operation can be expressed more succinctly with\n     /// `vec![item;SIZE]` or `vec.resize(NEW_SIZE, item)` and using these alternatives may also\n     /// have better performance.\n-    /// **Known problems:** None\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let item1 = 2;\n     /// let item2 = 3;\n@@ -462,13 +471,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks whether a for loop has a single element.\n+    /// ### What it does\n+    /// Checks whether a for loop has a single element.\n     ///\n-    /// **Why is this bad?** There is no reason to have a loop of a\n+    /// ### Why is this bad?\n+    /// There is no reason to have a loop of a\n     /// single element.\n-    /// **Known problems:** None\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let item1 = 2;\n     /// for item in &[item1] {\n@@ -487,15 +497,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Check for unnecessary `if let` usage in a for loop\n+    /// ### What it does\n+    /// Check for unnecessary `if let` usage in a for loop\n     /// where only the `Some` or `Ok` variant of the iterator element is used.\n     ///\n-    /// **Why is this bad?** It is verbose and can be simplified\n+    /// ### Why is this bad?\n+    /// It is verbose and can be simplified\n     /// by first calling the `flatten` method on the `Iterator`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// ```rust\n     /// let x = vec![Some(1), Some(2), Some(3)];"}, {"sha": "a371f8bbd3cb43100959c54d924dc8105fd2291c", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,14 +12,14 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{edition::Edition, sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `#[macro_use] use...`.\n+    /// ### What it does\n+    /// Checks for `#[macro_use] use...`.\n     ///\n-    /// **Why is this bad?** Since the Rust 2018 edition you can import\n+    /// ### Why is this bad?\n+    /// Since the Rust 2018 edition you can import\n     /// macro's directly, this is considered idiomatic.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// #[macro_use]\n     /// use some_macro;"}, {"sha": "776e4b3fe768a39020ad15997cdf0db47db047d4", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,14 +7,14 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for recursion using the entrypoint.\n+    /// ### What it does\n+    /// Checks for recursion using the entrypoint.\n     ///\n-    /// **Why is this bad?** Apart from special setups (which we could detect following attributes like #![no_std]),\n+    /// ### Why is this bad?\n+    /// Apart from special setups (which we could detect following attributes like #![no_std]),\n     /// recursing into main() seems like an unintuitive antipattern we should be able to detect.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```no_run\n     /// fn main() {\n     ///     main();"}, {"sha": "8e1385fb83a25e89ff0b57ba8fa4abaf96f6d5f5", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -14,14 +14,13 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** It checks for manual implementations of `async` functions.\n+    /// ### What it does\n+    /// It checks for manual implementations of `async` functions.\n     ///\n-    /// **Why is this bad?** It's more idiomatic to use the dedicated syntax.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// It's more idiomatic to use the dedicated syntax.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// use std::future::Future;\n     ///"}, {"sha": "7dec1595e0d108d270b0223661ed187c6143e101", "filename": "clippy_lints/src/manual_map.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_map.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -16,14 +16,13 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, SyntaxContext};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usages of `match` which could be implemented using `map`\n+    /// ### What it does\n+    /// Checks for usages of `match` which could be implemented using `map`\n     ///\n-    /// **Why is this bad?** Using the `map` method is clearer and more concise.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Using the `map` method is clearer and more concise.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// match Some(0) {\n     ///     Some(x) => Some(x + 1),"}, {"sha": "335ea001ee476e144a7aa1f5206bb3368f41d796", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,15 +11,14 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for manual implementations of the non-exhaustive pattern.\n+    /// ### What it does\n+    /// Checks for manual implementations of the non-exhaustive pattern.\n     ///\n-    /// **Why is this bad?** Using the #[non_exhaustive] attribute expresses better the intent\n+    /// ### Why is this bad?\n+    /// Using the #[non_exhaustive] attribute expresses better the intent\n     /// and allows possible optimizations when applied to enums.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// struct S {\n     ///     pub a: i32,"}, {"sha": "b2f287af6971a954ed1f0d1be3780519c494b64b", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,15 +13,15 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n+    ///\n     /// Finds patterns that reimplement `Option::ok_or`.\n     ///\n-    /// **Why is this bad?**\n-    /// Concise code helps focusing on behavior instead of boilerplate.\n+    /// ### Why is this bad?\n     ///\n-    /// **Known problems:** None.\n+    /// Concise code helps focusing on behavior instead of boilerplate.\n     ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust\n     /// let foo: Option<i32> = None;\n     /// foo.map_or(Err(\"error\"), |v| Ok(v));"}, {"sha": "db12c377488b0585cdcd375bf035cf38fb859f99", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -18,21 +18,17 @@ use rustc_span::source_map::Spanned;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Suggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing using\n     /// the pattern's length.\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// Using `str:strip_{prefix,suffix}` is safer and may have better performance as there is no\n     /// slicing which may panic and the compiler does not need to insert this panic code. It is\n     /// also sometimes more readable as it removes the need for duplicating or storing the pattern\n     /// used by `str::{starts,ends}_with` and in the slicing.\n     ///\n-    /// **Known problems:**\n-    /// None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let s = \"hello, world!\";\n     /// if s.starts_with(\"hello, \") {"}, {"sha": "426789742d51cf614243e0b2ae037ba3c445ef11", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -15,15 +15,13 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Finds patterns that reimplement `Option::unwrap_or` or `Result::unwrap_or`.\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// Concise code helps focusing on behavior instead of boilerplate.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let foo: Option<i32> = None;\n     /// match foo {"}, {"sha": "394606200bb04a6437bb239dc8e47293eabeaab0", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -15,16 +15,15 @@ use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `map(|x| x.clone())` or\n+    /// ### What it does\n+    /// Checks for usage of `map(|x| x.clone())` or\n     /// dereferencing closures for `Copy` types, on `Iterator` or `Option`,\n     /// and suggests `cloned()` or `copied()` instead\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely\n-    ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely\n     ///\n+    /// ### Example\n     /// ```rust\n     /// let x = vec![42, 43];\n     /// let y = x.iter();"}, {"sha": "82d3732326ebbf63fa68a171f898cdc37a7d805e", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -4,13 +4,13 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for instances of `map_err(|_| Some::Enum)`\n+    /// ### What it does\n+    /// Checks for instances of `map_err(|_| Some::Enum)`\n     ///\n-    /// **Why is this bad?** This `map_err` throws away the original error rather than allowing the enum to contain and report the cause of the error\n+    /// ### Why is this bad?\n+    /// This `map_err` throws away the original error rather than allowing the enum to contain and report the cause of the error\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// Before:\n     /// ```rust\n     /// use std::fmt;"}, {"sha": "fd40590d077ff50ea7f647e25b58ef9de51a85ed", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,16 +12,15 @@ use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `option.map(f)` where f is a function\n+    /// ### What it does\n+    /// Checks for usage of `option.map(f)` where f is a function\n     /// or closure that returns the unit type `()`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more clearly with\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more clearly with\n     /// an if let statement\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # fn do_stuff() -> Option<String> { Some(String::new()) }\n     /// # fn log_err_msg(foo: String) -> Option<String> { Some(foo) }\n@@ -54,16 +53,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `result.map(f)` where f is a function\n+    /// ### What it does\n+    /// Checks for usage of `result.map(f)` where f is a function\n     /// or closure that returns the unit type `()`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more clearly with\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more clearly with\n     /// an if let statement\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # fn do_stuff() -> Result<String, String> { Ok(String::new()) }\n     /// # fn log_err_msg(foo: String) -> Result<String, String> { Ok(foo) }"}, {"sha": "e66a35452f0d878d5624f5384089c8bea85e722b", "filename": "clippy_lints/src/match_on_vec_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,13 +10,13 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `match vec[idx]` or `match vec[n..m]`.\n+    /// ### What it does\n+    /// Checks for `match vec[idx]` or `match vec[n..m]`.\n     ///\n-    /// **Why is this bad?** This can panic at runtime.\n+    /// ### Why is this bad?\n+    /// This can panic at runtime.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust, no_run\n     /// let arr = vec![0, 1, 2, 3];\n     /// let idx = 1;"}, {"sha": "5360c02f9053965f81202a4a39b01979d680f816", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 94, "deletions": 76, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -35,14 +35,14 @@ use std::iter;\n use std::ops::Bound;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for matches with a single arm where an `if let`\n+    /// ### What it does\n+    /// Checks for matches with a single arm where an `if let`\n     /// will usually suffice.\n     ///\n-    /// **Why is this bad?** Just readability \u2013 `if let` nests less than a `match`.\n+    /// ### Why is this bad?\n+    /// Just readability \u2013 `if let` nests less than a `match`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # fn bar(stool: &str) {}\n     /// # let x = Some(\"abc\");\n@@ -63,15 +63,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for matches with two arms where an `if let else` will\n+    /// ### What it does\n+    /// Checks for matches with two arms where an `if let else` will\n     /// usually suffice.\n     ///\n-    /// **Why is this bad?** Just readability \u2013 `if let` nests less than a `match`.\n-    ///\n-    /// **Known problems:** Personal style preferences may differ.\n+    /// ### Why is this bad?\n+    /// Just readability \u2013 `if let` nests less than a `match`.\n     ///\n-    /// **Example:**\n+    /// ### Known problems\n+    /// Personal style preferences may differ.\n     ///\n+    /// ### Example\n     /// Using `match`:\n     ///\n     /// ```rust\n@@ -102,16 +104,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for matches where all arms match a reference,\n+    /// ### What it does\n+    /// Checks for matches where all arms match a reference,\n     /// suggesting to remove the reference and deref the matched expression\n     /// instead. It also checks for `if let &foo = bar` blocks.\n     ///\n-    /// **Why is this bad?** It just makes the code less readable. That reference\n+    /// ### Why is this bad?\n+    /// It just makes the code less readable. That reference\n     /// destructuring adds nothing to the code.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n     /// match x {\n@@ -133,14 +135,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for matches where match expression is a `bool`. It\n+    /// ### What it does\n+    /// Checks for matches where match expression is a `bool`. It\n     /// suggests to replace the expression with an `if...else` block.\n     ///\n-    /// **Why is this bad?** It makes the code less readable.\n+    /// ### Why is this bad?\n+    /// It makes the code less readable.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # fn foo() {}\n     /// # fn bar() {}\n@@ -167,14 +169,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for overlapping match arms.\n+    /// ### What it does\n+    /// Checks for overlapping match arms.\n     ///\n-    /// **Why is this bad?** It is likely to be an error and if not, makes the code\n+    /// ### Why is this bad?\n+    /// It is likely to be an error and if not, makes the code\n     /// less obvious.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = 5;\n     /// match x {\n@@ -189,15 +191,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for arm which matches all errors with `Err(_)`\n+    /// ### What it does\n+    /// Checks for arm which matches all errors with `Err(_)`\n     /// and take drastic actions like `panic!`.\n     ///\n-    /// **Why is this bad?** It is generally a bad practice, similar to\n+    /// ### Why is this bad?\n+    /// It is generally a bad practice, similar to\n     /// catching all exceptions in java with `catch(Exception)`\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x: Result<i32, &str> = Ok(3);\n     /// match x {\n@@ -211,14 +213,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for match which is used to add a reference to an\n+    /// ### What it does\n+    /// Checks for match which is used to add a reference to an\n     /// `Option` value.\n     ///\n-    /// **Why is this bad?** Using `as_ref()` or `as_mut()` instead is shorter.\n+    /// ### Why is this bad?\n+    /// Using `as_ref()` or `as_mut()` instead is shorter.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x: Option<()> = None;\n     ///\n@@ -237,14 +239,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for wildcard enum matches using `_`.\n+    /// ### What it does\n+    /// Checks for wildcard enum matches using `_`.\n     ///\n-    /// **Why is this bad?** New enum variants added by library updates can be missed.\n+    /// ### Why is this bad?\n+    /// New enum variants added by library updates can be missed.\n     ///\n-    /// **Known problems:** Suggested replacements may be incorrect if guards exhaustively cover some\n+    /// ### Known problems\n+    /// Suggested replacements may be incorrect if guards exhaustively cover some\n     /// variants, and also may not use correct path to enum if it's not present in the current scope.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # enum Foo { A(usize), B(usize) }\n     /// # let x = Foo::B(1);\n@@ -266,15 +271,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for wildcard enum matches for a single variant.\n+    /// ### What it does\n+    /// Checks for wildcard enum matches for a single variant.\n     ///\n-    /// **Why is this bad?** New enum variants added by library updates can be missed.\n+    /// ### Why is this bad?\n+    /// New enum variants added by library updates can be missed.\n     ///\n-    /// **Known problems:** Suggested replacements may not use correct path to enum\n+    /// ### Known problems\n+    /// Suggested replacements may not use correct path to enum\n     /// if it's not present in the current scope.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # enum Foo { A, B, C }\n     /// # let x = Foo::B;\n@@ -298,14 +305,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for wildcard pattern used with others patterns in same match arm.\n+    /// ### What it does\n+    /// Checks for wildcard pattern used with others patterns in same match arm.\n     ///\n-    /// **Why is this bad?** Wildcard pattern already covers any other pattern as it will match anyway.\n+    /// ### Why is this bad?\n+    /// Wildcard pattern already covers any other pattern as it will match anyway.\n     /// It makes the code less readable, especially to spot wildcard pattern use in match arm.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// match \"foo\" {\n@@ -325,14 +332,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for matches being used to destructure a single-variant enum\n+    /// ### What it does\n+    /// Checks for matches being used to destructure a single-variant enum\n     /// or tuple struct where a `let` will suffice.\n     ///\n-    /// **Why is this bad?** Just readability \u2013 `let` doesn't nest, whereas a `match` does.\n+    /// ### Why is this bad?\n+    /// Just readability \u2013 `let` doesn't nest, whereas a `match` does.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// enum Wrapper {\n     ///     Data(i32),\n@@ -360,14 +367,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for useless match that binds to only one value.\n+    /// ### What it does\n+    /// Checks for useless match that binds to only one value.\n     ///\n-    /// **Why is this bad?** Readability and needless complexity.\n+    /// ### Why is this bad?\n+    /// Readability and needless complexity.\n     ///\n-    /// **Known problems:**  Suggested replacements may be incorrect when `match`\n+    /// ### Known problems\n+    ///  Suggested replacements may be incorrect when `match`\n     /// is actually binding temporary value, bringing a 'dropped while borrowed' error.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let a = 1;\n     /// # let b = 2;\n@@ -388,14 +398,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for unnecessary '..' pattern binding on struct when all fields are explicitly matched.\n+    /// ### What it does\n+    /// Checks for unnecessary '..' pattern binding on struct when all fields are explicitly matched.\n     ///\n-    /// **Why is this bad?** Correctness and readability. It's like having a wildcard pattern after\n+    /// ### Why is this bad?\n+    /// Correctness and readability. It's like having a wildcard pattern after\n     /// matching all enum variants explicitly.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # struct A { a: i32 }\n     /// let a = A { a: 5 };\n@@ -418,21 +428,23 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Lint for redundant pattern matching over `Result`, `Option`,\n+    /// ### What it does\n+    /// Lint for redundant pattern matching over `Result`, `Option`,\n     /// `std::task::Poll` or `std::net::IpAddr`\n     ///\n-    /// **Why is this bad?** It's more concise and clear to just use the proper\n+    /// ### Why is this bad?\n+    /// It's more concise and clear to just use the proper\n     /// utility function\n     ///\n-    /// **Known problems:** This will change the drop order for the matched type. Both `if let` and\n+    /// ### Known problems\n+    /// This will change the drop order for the matched type. Both `if let` and\n     /// `while let` will drop the value at the end of the block, both `if` and `while` will drop the\n     /// value before entering the block. For most types this change will not matter, but for a few\n     /// types this will not be an acceptable change (e.g. locks). See the\n     /// [reference](https://doc.rust-lang.org/reference/destructors.html#drop-scopes) for more about\n     /// drop order.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # use std::task::Poll;\n     /// # use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n@@ -471,15 +483,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `match`  or `if let` expressions producing a\n+    /// ### What it does\n+    /// Checks for `match`  or `if let` expressions producing a\n     /// `bool` that could be written using `matches!`\n     ///\n-    /// **Why is this bad?** Readability and needless complexity.\n+    /// ### Why is this bad?\n+    /// Readability and needless complexity.\n     ///\n-    /// **Known problems:** This lint falsely triggers, if there are arms with\n+    /// ### Known problems\n+    /// This lint falsely triggers, if there are arms with\n     /// `cfg` attributes that remove an arm evaluating to `false`.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = Some(5);\n     ///\n@@ -504,17 +519,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `match` with identical arm bodies.\n+    /// ### What it does\n+    /// Checks for `match` with identical arm bodies.\n     ///\n-    /// **Why is this bad?** This is probably a copy & paste error. If arm bodies\n+    /// ### Why is this bad?\n+    /// This is probably a copy & paste error. If arm bodies\n     /// are the same on purpose, you can factor them\n     /// [using `|`](https://doc.rust-lang.org/book/patterns.html#multiple-patterns).\n     ///\n-    /// **Known problems:** False positive possible with order dependent `match`\n+    /// ### Known problems\n+    /// False positive possible with order dependent `match`\n     /// (see issue\n     /// [#860](https://github.com/rust-lang/rust-clippy/issues/860)).\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// match foo {\n     ///     Bar => bar(),"}, {"sha": "59176c4b846633caa7fc7a5e0e39162a7fc3916d", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,14 +9,14 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls of `mem::discriminant()` on a non-enum type.\n+    /// ### What it does\n+    /// Checks for calls of `mem::discriminant()` on a non-enum type.\n     ///\n-    /// **Why is this bad?** The value of `mem::discriminant()` on non-enum types\n+    /// ### Why is this bad?\n+    /// The value of `mem::discriminant()` on non-enum types\n     /// is unspecified.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// use std::mem;\n     ///"}, {"sha": "07202a59c4b96be954e8eb67aacd6f7f1a01b30f", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -5,15 +5,15 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `std::mem::forget(t)` where `t` is\n+    /// ### What it does\n+    /// Checks for usage of `std::mem::forget(t)` where `t` is\n     /// `Drop`.\n     ///\n-    /// **Why is this bad?** `std::mem::forget(t)` prevents `t` from running its\n+    /// ### Why is this bad?\n+    /// `std::mem::forget(t)` prevents `t` from running its\n     /// destructor, possibly causing leaks.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::mem;\n     /// # use std::rc::Rc;"}, {"sha": "3d071c9081be184f347bc47f82cb73bdde49a940", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -14,16 +14,16 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `mem::replace()` on an `Option` with\n+    /// ### What it does\n+    /// Checks for `mem::replace()` on an `Option` with\n     /// `None`.\n     ///\n-    /// **Why is this bad?** `Option` already has the method `take()` for\n+    /// ### Why is this bad?\n+    /// `Option` already has the method `take()` for\n     /// taking its current value (Some(..) or None) and replacing it with\n     /// `None`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// use std::mem;\n     ///\n@@ -41,17 +41,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `mem::replace(&mut _, mem::uninitialized())`\n+    /// ### What it does\n+    /// Checks for `mem::replace(&mut _, mem::uninitialized())`\n     /// and `mem::replace(&mut _, mem::zeroed())`.\n     ///\n-    /// **Why is this bad?** This will lead to undefined behavior even if the\n+    /// ### Why is this bad?\n+    /// This will lead to undefined behavior even if the\n     /// value is overwritten later, because the uninitialized value may be\n     /// observed in the case of a panic.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```\n     /// use std::mem;\n     ///# fn may_panic(v: Vec<i32>) -> Vec<i32> { v }\n@@ -73,15 +72,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `std::mem::replace` on a value of type\n+    /// ### What it does\n+    /// Checks for `std::mem::replace` on a value of type\n     /// `T` with `T::default()`.\n     ///\n-    /// **Why is this bad?** `std::mem` module already has the method `take` to\n+    /// ### Why is this bad?\n+    /// `std::mem` module already has the method `take` to\n     /// take the current value and replace it with the default value of that type.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let mut text = String::from(\"foo\");\n     /// let replaced = std::mem::replace(&mut text, String::default());"}, {"sha": "d3e120238141eb0c35ce8e3fd979873693a72eee", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 323, "deletions": 313, "changes": 636, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -80,16 +80,15 @@ use rustc_span::{sym, Span};\n use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usages of `cloned()` on an `Iterator` or `Option` where\n+    /// ### What it does\n+    /// Checks for usages of `cloned()` on an `Iterator` or `Option` where\n     /// `copied()` could be used instead.\n     ///\n-    /// **Why is this bad?** `copied()` is better because it guarantees that the type being cloned\n+    /// ### Why is this bad?\n+    /// `copied()` is better because it guarantees that the type being cloned\n     /// implements `Copy`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// [1, 2, 3].iter().cloned();\n     /// ```\n@@ -103,16 +102,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usages of `Iterator::flat_map()` where `filter_map()` could be\n+    /// ### What it does\n+    /// Checks for usages of `Iterator::flat_map()` where `filter_map()` could be\n     /// used instead.\n     ///\n-    /// **Why is this bad?** When applicable, `filter_map()` is more clear since it shows that\n+    /// ### Why is this bad?\n+    /// When applicable, `filter_map()` is more clear since it shows that\n     /// `Option` is used to produce 0 or 1 items.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let nums: Vec<i32> = [\"1\", \"2\", \"whee!\"].iter().flat_map(|x| x.parse().ok()).collect();\n     /// ```\n@@ -126,9 +124,11 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n+    /// ### What it does\n+    /// Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n     ///\n-    /// **Why is this bad?** It is better to handle the `None` or `Err` case,\n+    /// ### Why is this bad?\n+    /// It is better to handle the `None` or `Err` case,\n     /// or at least call `.expect(_)` with a more helpful message. Still, for a lot of\n     /// quick-and-dirty code, `unwrap` is a good choice, which is why this lint is\n     /// `Allow` by default.\n@@ -141,9 +141,7 @@ declare_clippy_lint! {\n     /// messages on display. Therefore, it may be beneficial to look at the places\n     /// where they may get displayed. Activate this lint to do just that.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust\n     /// # let opt = Some(1);\n     ///\n@@ -171,19 +169,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `.expect()` calls on `Option`s and `Result`s.\n+    /// ### What it does\n+    /// Checks for `.expect()` calls on `Option`s and `Result`s.\n     ///\n-    /// **Why is this bad?** Usually it is better to handle the `None` or `Err` case.\n+    /// ### Why is this bad?\n+    /// Usually it is better to handle the `None` or `Err` case.\n     /// Still, for a lot of quick-and-dirty code, `expect` is a good choice, which is why\n     /// this lint is `Allow` by default.\n     ///\n     /// `result.expect()` will let the thread panic on `Err`\n     /// values. Normally, you want to implement more sophisticated error handling,\n     /// and propagate errors upwards with `?` operator.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust,ignore\n     /// # let opt = Some(1);\n     ///\n@@ -213,20 +211,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for methods that should live in a trait\n+    /// ### What it does\n+    /// Checks for methods that should live in a trait\n     /// implementation of a `std` trait (see [llogiq's blog\n     /// post](http://llogiq.github.io/2015/07/30/traits.html) for further\n     /// information) instead of an inherent implementation.\n     ///\n-    /// **Why is this bad?** Implementing the traits improve ergonomics for users of\n+    /// ### Why is this bad?\n+    /// Implementing the traits improve ergonomics for users of\n     /// the code, often with very little cost. Also people seeing a `mul(...)`\n     /// method\n     /// may expect `*` to work equally, so you should have good reason to disappoint\n     /// them.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// struct X;\n     /// impl X {\n@@ -242,7 +240,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for methods with certain name prefixes and which\n+    /// ### What it does\n+    /// Checks for methods with certain name prefixes and which\n     /// doesn't match how self is taken. The actual rules are:\n     ///\n     /// |Prefix |Postfix     |`self` taken           | `self` type  |\n@@ -265,13 +264,12 @@ declare_clippy_lint! {\n     /// Please find more info here:\n     /// https://rust-lang.github.io/api-guidelines/naming.html#ad-hoc-conversions-follow-as_-to_-into_-conventions-c-conv\n     ///\n-    /// **Why is this bad?** Consistency breeds readability. If you follow the\n+    /// ### Why is this bad?\n+    /// Consistency breeds readability. If you follow the\n     /// conventions, your users won't be surprised that they, e.g., need to supply a\n     /// mutable reference to a `as_..` function.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # struct X;\n     /// impl X {\n@@ -287,14 +285,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `ok().expect(..)`.\n+    /// ### What it does\n+    /// Checks for usage of `ok().expect(..)`.\n     ///\n-    /// **Why is this bad?** Because you usually call `expect()` on the `Result`\n+    /// ### Why is this bad?\n+    /// Because you usually call `expect()` on the `Result`\n     /// directly to get a better error message.\n     ///\n-    /// **Known problems:** The error type needs to implement `Debug`\n+    /// ### Known problems\n+    /// The error type needs to implement `Debug`\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = Ok::<_, ()>(());\n     ///\n@@ -310,15 +311,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `option.map(_).unwrap_or(_)` or `option.map(_).unwrap_or_else(_)` or\n+    /// ### What it does\n+    /// Checks for usage of `option.map(_).unwrap_or(_)` or `option.map(_).unwrap_or_else(_)` or\n     /// `result.map(_).unwrap_or_else(_)`.\n     ///\n-    /// **Why is this bad?** Readability, these can be written more concisely (resp.) as\n+    /// ### Why is this bad?\n+    /// Readability, these can be written more concisely (resp.) as\n     /// `option.map_or(_, _)`, `option.map_or_else(_, _)` and `result.map_or_else(_, _)`.\n     ///\n-    /// **Known problems:** The order of the arguments is not in execution order\n+    /// ### Known problems\n+    /// The order of the arguments is not in execution order\n     ///\n-    /// **Examples:**\n+    /// ### Examples\n     /// ```rust\n     /// # let x = Some(1);\n     ///\n@@ -347,14 +351,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.map_or(None, _)`.\n+    /// ### What it does\n+    /// Checks for usage of `_.map_or(None, _)`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely as\n     /// `_.and_then(_)`.\n     ///\n-    /// **Known problems:** The order of the arguments is not in execution order.\n+    /// ### Known problems\n+    /// The order of the arguments is not in execution order.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let opt = Some(1);\n     ///\n@@ -370,15 +377,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.map_or(None, Some)`.\n+    /// ### What it does\n+    /// Checks for usage of `_.map_or(None, Some)`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely as\n     /// `_.ok()`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// Bad:\n     /// ```rust\n     /// # let r: Result<u32, &str> = Ok(1);\n@@ -396,16 +402,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.and_then(|x| Some(y))`, `_.and_then(|x| Ok(y))` or\n+    /// ### What it does\n+    /// Checks for usage of `_.and_then(|x| Some(y))`, `_.and_then(|x| Ok(y))` or\n     /// `_.or_else(|x| Err(y))`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely as\n     /// `_.map(|x| y)` or `_.map_err(|x| y)`.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # fn opt() -> Option<&'static str> { Some(\"42\") }\n     /// # fn res() -> Result<&'static str, &'static str> { Ok(\"42\") }\n@@ -429,14 +434,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.filter(_).next()`.\n+    /// ### What it does\n+    /// Checks for usage of `_.filter(_).next()`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely as\n     /// `_.find(_)`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let vec = vec![1];\n     /// vec.iter().filter(|x| **x == 0).next();\n@@ -452,14 +457,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.skip_while(condition).next()`.\n+    /// ### What it does\n+    /// Checks for usage of `_.skip_while(condition).next()`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely as\n     /// `_.find(!condition)`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let vec = vec![1];\n     /// vec.iter().skip_while(|x| **x == 0).next();\n@@ -475,14 +480,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.map(_).flatten(_)` on `Iterator` and `Option`\n+    /// ### What it does\n+    /// Checks for usage of `_.map(_).flatten(_)` on `Iterator` and `Option`\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely as\n     /// `_.flat_map(_)`\n     ///\n-    /// **Known problems:**\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let vec = vec![vec![1]];\n     ///\n@@ -498,15 +503,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.filter(_).map(_)` that can be written more simply\n+    /// ### What it does\n+    /// Checks for usage of `_.filter(_).map(_)` that can be written more simply\n     /// as `filter_map(_)`.\n     ///\n-    /// **Why is this bad?** Redundant code in the `filter` and `map` operations is poor style and\n+    /// ### Why is this bad?\n+    /// Redundant code in the `filter` and `map` operations is poor style and\n     /// less performant.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-     /// **Example:**\n+     /// ### Example\n     /// Bad:\n     /// ```rust\n     /// (0_i32..10)\n@@ -524,15 +529,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.find(_).map(_)` that can be written more simply\n+    /// ### What it does\n+    /// Checks for usage of `_.find(_).map(_)` that can be written more simply\n     /// as `find_map(_)`.\n     ///\n-    /// **Why is this bad?** Redundant code in the `find` and `map` operations is poor style and\n+    /// ### Why is this bad?\n+    /// Redundant code in the `find` and `map` operations is poor style and\n     /// less performant.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-     /// **Example:**\n+     /// ### Example\n     /// Bad:\n     /// ```rust\n     /// (0_i32..10)\n@@ -550,14 +555,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.filter_map(_).next()`.\n+    /// ### What it does\n+    /// Checks for usage of `_.filter_map(_).next()`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely as\n     /// `_.find_map(_)`.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     ///  (0..3).filter_map(|x| if x == 2 { Some(x) } else { None }).next();\n     /// ```\n@@ -572,13 +577,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `flat_map(|x| x)`.\n+    /// ### What it does\n+    /// Checks for usage of `flat_map(|x| x)`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely by using `flatten`.\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely by using `flatten`.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let iter = vec![vec![0]].into_iter();\n     /// iter.flat_map(|x| x);\n@@ -594,16 +599,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for an iterator or string search (such as `find()`,\n+    /// ### What it does\n+    /// Checks for an iterator or string search (such as `find()`,\n     /// `position()`, or `rposition()`) followed by a call to `is_some()` or `is_none()`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as:\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely as:\n     /// * `_.any(_)`, or `_.contains(_)` for `is_some()`,\n     /// * `!_.any(_)`, or `!_.contains(_)` for `is_none()`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let vec = vec![1];\n     /// vec.iter().find(|x| **x == 0).is_some();\n@@ -623,15 +628,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `.chars().next()` on a `str` to check\n+    /// ### What it does\n+    /// Checks for usage of `.chars().next()` on a `str` to check\n     /// if it starts with a given char.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely as\n     /// `_.starts_with(_)`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let name = \"foo\";\n     /// if name.chars().next() == Some('_') {};\n@@ -647,17 +652,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `.or(foo(..))`, `.unwrap_or(foo(..))`,\n+    /// ### What it does\n+    /// Checks for calls to `.or(foo(..))`, `.unwrap_or(foo(..))`,\n     /// etc., and suggests to use `or_else`, `unwrap_or_else`, etc., or\n     /// `unwrap_or_default` instead.\n     ///\n-    /// **Why is this bad?** The function will always be called and potentially\n+    /// ### Why is this bad?\n+    /// The function will always be called and potentially\n     /// allocate an object acting as the default.\n     ///\n-    /// **Known problems:** If the function has side-effects, not calling it will\n+    /// ### Known problems\n+    /// If the function has side-effects, not calling it will\n     /// change the semantic of the program, but you shouldn't rely on that anyway.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let foo = Some(String::new());\n     /// foo.unwrap_or(String::new());\n@@ -678,15 +686,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `.expect(&format!(...))`, `.expect(foo(..))`,\n+    /// ### What it does\n+    /// Checks for calls to `.expect(&format!(...))`, `.expect(foo(..))`,\n     /// etc., and suggests to use `unwrap_or_else` instead\n     ///\n-    /// **Why is this bad?** The function will always be called.\n+    /// ### Why is this bad?\n+    /// The function will always be called.\n     ///\n-    /// **Known problems:** If the function has side-effects, not calling it will\n+    /// ### Known problems\n+    /// If the function has side-effects, not calling it will\n     /// change the semantics of the program, but you shouldn't rely on that anyway.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let foo = Some(String::new());\n     /// # let err_code = \"418\";\n@@ -713,14 +724,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `.clone()` on a `Copy` type.\n+    /// ### What it does\n+    /// Checks for usage of `.clone()` on a `Copy` type.\n     ///\n-    /// **Why is this bad?** The only reason `Copy` types implement `Clone` is for\n+    /// ### Why is this bad?\n+    /// The only reason `Copy` types implement `Clone` is for\n     /// generics, not for using the `clone` method on a concrete type.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// 42u64.clone();\n     /// ```\n@@ -730,15 +741,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `.clone()` on a ref-counted pointer,\n+    /// ### What it does\n+    /// Checks for usage of `.clone()` on a ref-counted pointer,\n     /// (`Rc`, `Arc`, `rc::Weak`, or `sync::Weak`), and suggests calling Clone via unified\n     /// function syntax instead (e.g., `Rc::clone(foo)`).\n     ///\n-    /// **Why is this bad?** Calling '.clone()' on an Rc, Arc, or Weak\n+    /// ### Why is this bad?\n+    /// Calling '.clone()' on an Rc, Arc, or Weak\n     /// can obscure the fact that only the pointer is being cloned, not the underlying\n     /// data.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::rc::Rc;\n     /// let x = Rc::new(1);\n@@ -755,14 +768,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `.clone()` on an `&&T`.\n+    /// ### What it does\n+    /// Checks for usage of `.clone()` on an `&&T`.\n     ///\n-    /// **Why is this bad?** Cloning an `&&T` copies the inner `&T`, instead of\n+    /// ### Why is this bad?\n+    /// Cloning an `&&T` copies the inner `&T`, instead of\n     /// cloning the underlying `T`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn main() {\n     ///     let x = vec![1];\n@@ -777,16 +790,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `.to_string()` on an `&&T` where\n+    /// ### What it does\n+    /// Checks for usage of `.to_string()` on an `&&T` where\n     /// `T` implements `ToString` directly (like `&&str` or `&&String`).\n     ///\n-    /// **Why is this bad?** This bypasses the specialized implementation of\n+    /// ### Why is this bad?\n+    /// This bypasses the specialized implementation of\n     /// `ToString` and instead goes through the more expensive string formatting\n     /// facilities.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Generic implementation for `T: Display` is used (slow)\n     /// [\"foo\", \"bar\"].iter().map(|s| s.to_string());\n@@ -800,14 +813,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `new` not returning a type that contains `Self`.\n+    /// ### What it does\n+    /// Checks for `new` not returning a type that contains `Self`.\n     ///\n-    /// **Why is this bad?** As a convention, `new` methods are used to make a new\n+    /// ### Why is this bad?\n+    /// As a convention, `new` methods are used to make a new\n     /// instance of a type.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// In an impl block:\n     /// ```rust\n     /// # struct Foo;\n@@ -861,15 +874,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for string methods that receive a single-character\n+    /// ### What it does\n+    /// Checks for string methods that receive a single-character\n     /// `str` as an argument, e.g., `_.split(\"x\")`.\n     ///\n-    /// **Why is this bad?** Performing these methods using a `char` is faster than\n+    /// ### Why is this bad?\n+    /// Performing these methods using a `char` is faster than\n     /// using a `str`.\n     ///\n-    /// **Known problems:** Does not catch multi-byte unicode characters.\n+    /// ### Known problems\n+    /// Does not catch multi-byte unicode characters.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n     /// _.split(\"x\");\n@@ -882,14 +898,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calling `.step_by(0)` on iterators which panics.\n+    /// ### What it does\n+    /// Checks for calling `.step_by(0)` on iterators which panics.\n     ///\n-    /// **Why is this bad?** This very much looks like an oversight. Use `panic!()` instead if you\n+    /// ### Why is this bad?\n+    /// This very much looks like an oversight. Use `panic!()` instead if you\n     /// actually intend to panic.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,should_panic\n     /// for x in (0..100).step_by(0) {\n     ///     //..\n@@ -901,15 +917,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for indirect collection of populated `Option`\n+    /// ### What it does\n+    /// Checks for indirect collection of populated `Option`\n     ///\n-    /// **Why is this bad?** `Option` is like a collection of 0-1 things, so `flatten`\n+    /// ### Why is this bad?\n+    /// `Option` is like a collection of 0-1 things, so `flatten`\n     /// automatically does this without suspicious-looking `unwrap` calls.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let _ = std::iter::empty::<Option<i32>>().filter(Option::is_some).map(Option::unwrap);\n     /// ```\n@@ -923,16 +938,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the use of `iter.nth(0)`.\n+    /// ### What it does\n+    /// Checks for the use of `iter.nth(0)`.\n     ///\n-    /// **Why is this bad?** `iter.next()` is equivalent to\n+    /// ### Why is this bad?\n+    /// `iter.next()` is equivalent to\n     /// `iter.nth(0)`, as they both consume the next element,\n     ///  but is more readable.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # use std::collections::HashSet;\n     /// // Bad\n@@ -951,15 +965,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for use of `.iter().nth()` (and the related\n+    /// ### What it does\n+    /// Checks for use of `.iter().nth()` (and the related\n     /// `.iter_mut().nth()`) on standard library types with O(1) element access.\n     ///\n-    /// **Why is this bad?** `.get()` and `.get_mut()` are more efficient and more\n+    /// ### Why is this bad?\n+    /// `.get()` and `.get_mut()` are more efficient and more\n     /// readable.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let some_vec = vec![0, 1, 2, 3];\n     /// let bad_vec = some_vec.iter().nth(3);\n@@ -977,13 +991,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for use of `.skip(x).next()` on iterators.\n-    ///\n-    /// **Why is this bad?** `.nth(x)` is cleaner\n+    /// ### What it does\n+    /// Checks for use of `.skip(x).next()` on iterators.\n     ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// `.nth(x)` is cleaner\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let some_vec = vec![0, 1, 2, 3];\n     /// let bad_vec = some_vec.iter().skip(3).next();\n@@ -1001,13 +1015,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for use of `.get().unwrap()` (or\n+    /// ### What it does\n+    /// Checks for use of `.get().unwrap()` (or\n     /// `.get_mut().unwrap`) on a standard library type which implements `Index`\n     ///\n-    /// **Why is this bad?** Using the Index trait (`[]`) is more clear and more\n+    /// ### Why is this bad?\n+    /// Using the Index trait (`[]`) is more clear and more\n     /// concise.\n     ///\n-    /// **Known problems:** Not a replacement for error handling: Using either\n+    /// ### Known problems\n+    /// Not a replacement for error handling: Using either\n     /// `.unwrap()` or the Index trait (`[]`) carries the risk of causing a `panic`\n     /// if the value being accessed is `None`. If the use of `.get().unwrap()` is a\n     /// temporary placeholder for dealing with the `Option` type, then this does\n@@ -1016,7 +1033,7 @@ declare_clippy_lint! {\n     /// is handled in a future refactor instead of using `.unwrap()` or the Index\n     /// trait.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let mut some_vec = vec![0, 1, 2, 3];\n     /// let last = some_vec.get(3).unwrap();\n@@ -1034,14 +1051,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for occurrences where one vector gets extended instead of append\n+    /// ### What it does\n+    /// Checks for occurrences where one vector gets extended instead of append\n     ///\n-    /// **Why is this bad?** Using `append` instead of `extend` is more concise and faster\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Using `append` instead of `extend` is more concise and faster\n     ///\n+    /// ### Example\n     /// ```rust\n     /// let mut a = vec![1, 2, 3];\n     /// let mut b = vec![4, 5, 6];\n@@ -1058,14 +1074,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the use of `.extend(s.chars())` where s is a\n+    /// ### What it does\n+    /// Checks for the use of `.extend(s.chars())` where s is a\n     /// `&str` or `String`.\n     ///\n-    /// **Why is this bad?** `.push_str(s)` is clearer\n+    /// ### Why is this bad?\n+    /// `.push_str(s)` is clearer\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let abc = \"abc\";\n     /// let def = String::from(\"def\");\n@@ -1087,14 +1103,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the use of `.cloned().collect()` on slice to\n+    /// ### What it does\n+    /// Checks for the use of `.cloned().collect()` on slice to\n     /// create a `Vec`.\n     ///\n-    /// **Why is this bad?** `.to_vec()` is clearer\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// `.to_vec()` is clearer\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let s = [1, 2, 3, 4, 5];\n     /// let s2: Vec<isize> = s[..].iter().cloned().collect();\n@@ -1110,15 +1126,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.chars().last()` or\n+    /// ### What it does\n+    /// Checks for usage of `_.chars().last()` or\n     /// `_.chars().next_back()` on a `str` to check if it ends with a given char.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely as\n     /// `_.ends_with(_)`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let name = \"_\";\n     ///\n@@ -1134,14 +1150,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `.as_ref()` or `.as_mut()` where the\n+    /// ### What it does\n+    /// Checks for usage of `.as_ref()` or `.as_mut()` where the\n     /// types before and after the call are the same.\n     ///\n-    /// **Why is this bad?** The call is unnecessary.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// The call is unnecessary.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # fn do_stuff(x: &[i32]) {}\n     /// let x: &[i32] = &[1, 2, 3, 4, 5];\n@@ -1159,15 +1175,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for using `fold` when a more succinct alternative exists.\n+    /// ### What it does\n+    /// Checks for using `fold` when a more succinct alternative exists.\n     /// Specifically, this checks for `fold`s which could be replaced by `any`, `all`,\n     /// `sum` or `product`.\n     ///\n-    /// **Why is this bad?** Readability.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// Readability.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n     /// ```\n@@ -1181,16 +1197,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `filter_map` calls which could be replaced by `filter` or `map`.\n+    /// ### What it does\n+    /// Checks for `filter_map` calls which could be replaced by `filter` or `map`.\n     /// More specifically it checks if the closure provided is only performing one of the\n     /// filter or map operations and suggests the appropriate option.\n     ///\n-    /// **Why is this bad?** Complexity. The intent is also clearer if only a single\n+    /// ### Why is this bad?\n+    /// Complexity. The intent is also clearer if only a single\n     /// operation is being performed.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let _ = (0..3).filter_map(|x| if x > 2 { Some(x) } else { None });\n     ///\n@@ -1210,17 +1226,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `into_iter` calls on references which should be replaced by `iter`\n+    /// ### What it does\n+    /// Checks for `into_iter` calls on references which should be replaced by `iter`\n     /// or `iter_mut`.\n     ///\n-    /// **Why is this bad?** Readability. Calling `into_iter` on a reference will not move out its\n+    /// ### Why is this bad?\n+    /// Readability. Calling `into_iter` on a reference will not move out its\n     /// content into the resulting iterator, which is confusing. It is better just call `iter` or\n     /// `iter_mut` directly.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let _ = (&vec![3, 4, 5]).into_iter();\n@@ -1234,16 +1249,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `map` followed by a `count`.\n+    /// ### What it does\n+    /// Checks for calls to `map` followed by a `count`.\n     ///\n-    /// **Why is this bad?** It looks suspicious. Maybe `map` was confused with `filter`.\n+    /// ### Why is this bad?\n+    /// It looks suspicious. Maybe `map` was confused with `filter`.\n     /// If the `map` call is intentional, this should be rewritten. Or, if you intend to\n     /// drive the iterator to completion, you can just use `for_each` instead.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let _ = (0..3).map(|x| x + 2).count();\n     /// ```\n@@ -1253,16 +1267,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `MaybeUninit::uninit().assume_init()`.\n+    /// ### What it does\n+    /// Checks for `MaybeUninit::uninit().assume_init()`.\n     ///\n-    /// **Why is this bad?** For most types, this is undefined behavior.\n+    /// ### Why is this bad?\n+    /// For most types, this is undefined behavior.\n     ///\n-    /// **Known problems:** For now, we accept empty tuples and tuples / arrays\n+    /// ### Known problems\n+    /// For now, we accept empty tuples and tuples / arrays\n     /// of `MaybeUninit`. There may be other types that allow uninitialized\n     /// data, but those are not yet rigorously defined.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Beware the UB\n     /// use std::mem::MaybeUninit;\n@@ -1285,12 +1301,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `.checked_add/sub(x).unwrap_or(MAX/MIN)`.\n+    /// ### What it does\n+    /// Checks for `.checked_add/sub(x).unwrap_or(MAX/MIN)`.\n     ///\n-    /// **Why is this bad?** These can be written simply with `saturating_add/sub` methods.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// These can be written simply with `saturating_add/sub` methods.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// # let y: u32 = 0;\n     /// # let x: u32 = 100;\n@@ -1312,14 +1329,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `offset(_)`, `wrapping_`{`add`, `sub`}, etc. on raw pointers to\n+    /// ### What it does\n+    /// Checks for `offset(_)`, `wrapping_`{`add`, `sub`}, etc. on raw pointers to\n     /// zero-sized types\n     ///\n-    /// **Why is this bad?** This is a no-op, and likely unintended\n-    ///\n-    /// **Known problems:** None\n+    /// ### Why is this bad?\n+    /// This is a no-op, and likely unintended\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// unsafe { (&() as *const ()).offset(1) };\n     /// ```\n@@ -1329,15 +1346,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `FileType::is_file()`.\n+    /// ### What it does\n+    /// Checks for `FileType::is_file()`.\n     ///\n-    /// **Why is this bad?** When people testing a file type with `FileType::is_file`\n+    /// ### Why is this bad?\n+    /// When people testing a file type with `FileType::is_file`\n     /// they are testing whether a path is something they can get bytes from. But\n     /// `is_file` doesn't cover special file types in unix-like systems, and doesn't cover\n     /// symlink in windows. Using `!FileType::is_dir()` is a better way to that intention.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # || {\n     /// let metadata = std::fs::metadata(\"foo.txt\")?;\n@@ -1369,14 +1387,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.as_ref().map(Deref::deref)` or it's aliases (such as String::as_str).\n+    /// ### What it does\n+    /// Checks for usage of `_.as_ref().map(Deref::deref)` or it's aliases (such as String::as_str).\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely as\n     /// `_.as_deref()`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let opt = Some(\"\".to_string());\n     /// opt.as_ref().map(String::as_str)\n@@ -1394,13 +1412,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `iter().next()` on a Slice or an Array\n-    ///\n-    /// **Why is this bad?** These can be shortened into `.get()`\n+    /// ### What it does\n+    /// Checks for usage of `iter().next()` on a Slice or an Array\n     ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// These can be shortened into `.get()`\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let a = [1, 2, 3];\n     /// # let b = vec![1, 2, 3];\n@@ -1420,14 +1438,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns when using `push_str`/`insert_str` with a single-character string literal\n+    /// ### What it does\n+    /// Warns when using `push_str`/`insert_str` with a single-character string literal\n     /// where `push`/`insert` with a `char` would work fine.\n     ///\n-    /// **Why is this bad?** It's less clear that we are pushing a single character.\n+    /// ### Why is this bad?\n+    /// It's less clear that we are pushing a single character.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let mut string = String::new();\n     /// string.insert_str(0, \"R\");\n@@ -1445,7 +1463,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** As the counterpart to `or_fun_call`, this lint looks for unnecessary\n+    /// ### What it does\n+    /// As the counterpart to `or_fun_call`, this lint looks for unnecessary\n     /// lazily evaluated closures on `Option` and `Result`.\n     ///\n     /// This lint suggests changing the following functions, when eager evaluation results in\n@@ -1456,13 +1475,14 @@ declare_clippy_lint! {\n     ///  - `get_or_insert_with` to `get_or_insert`\n     ///  - `ok_or_else` to `ok_or`\n     ///\n-    /// **Why is this bad?** Using eager evaluation is shorter and simpler in some cases.\n+    /// ### Why is this bad?\n+    /// Using eager evaluation is shorter and simpler in some cases.\n     ///\n-    /// **Known problems:** It is possible, but not recommended for `Deref` and `Index` to have\n+    /// ### Known problems\n+    /// It is possible, but not recommended for `Deref` and `Index` to have\n     /// side effects. Eagerly evaluating them can change the semantics of the program.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // example code where clippy issues a warning\n     /// let opt: Option<u32> = None;\n@@ -1481,14 +1501,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.map(_).collect::<Result<(), _>()`.\n-    ///\n-    /// **Why is this bad?** Using `try_for_each` instead is more readable and idiomatic.\n-    ///\n-    /// **Known problems:** None\n+    /// ### What it does\n+    /// Checks for usage of `_.map(_).collect::<Result<(), _>()`.\n     ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Using `try_for_each` instead is more readable and idiomatic.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// (0..3).map(|t| Err(t)).collect::<Result<(), _>>();\n     /// ```\n@@ -1502,16 +1521,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `from_iter()` function calls on types that implement the `FromIterator`\n+    /// ### What it does\n+    /// Checks for `from_iter()` function calls on types that implement the `FromIterator`\n     /// trait.\n     ///\n-    /// **Why is this bad?** It is recommended style to use collect. See\n+    /// ### Why is this bad?\n+    /// It is recommended style to use collect. See\n     /// [FromIterator documentation](https://doc.rust-lang.org/std/iter/trait.FromIterator.html)\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// use std::iter::FromIterator;\n     ///\n@@ -1535,15 +1553,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `inspect().for_each()`.\n+    /// ### What it does\n+    /// Checks for usage of `inspect().for_each()`.\n     ///\n-    /// **Why is this bad?** It is the same as performing the computation\n+    /// ### Why is this bad?\n+    /// It is the same as performing the computation\n     /// inside `inspect` at the beginning of the closure in `for_each`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// [1,2,3,4,5].iter()\n     /// .inspect(|&x| println!(\"inspect the number: {}\", x))\n@@ -1565,14 +1582,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `filter_map(|x| x)`.\n-    ///\n-    /// **Why is this bad?** Readability, this can be written more concisely by using `flatten`.\n+    /// ### What it does\n+    /// Checks for usage of `filter_map(|x| x)`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Readability, this can be written more concisely by using `flatten`.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// # let iter = vec![Some(1)].into_iter();\n     /// iter.filter_map(|x| x);\n@@ -1588,14 +1604,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for instances of `map(f)` where `f` is the identity function.\n-    ///\n-    /// **Why is this bad?** It can be written more concisely without the call to `map`.\n+    /// ### What it does\n+    /// Checks for instances of `map(f)` where `f` is the identity function.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// It can be written more concisely without the call to `map`.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// let x = [1, 2, 3];\n     /// let y: Vec<_> = x.iter().map(|x| x).map(|x| 2*x).collect();\n@@ -1611,15 +1626,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the use of `.bytes().nth()`.\n+    /// ### What it does\n+    /// Checks for the use of `.bytes().nth()`.\n     ///\n-    /// **Why is this bad?** `.as_bytes().get()` is more efficient and more\n+    /// ### Why is this bad?\n+    /// `.as_bytes().get()` is more efficient and more\n     /// readable.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let _ = \"Hello\".bytes().nth(3);\n@@ -1633,15 +1647,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the usage of `_.to_owned()`, `vec.to_vec()`, or similar when calling `_.clone()` would be clearer.\n+    /// ### What it does\n+    /// Checks for the usage of `_.to_owned()`, `vec.to_vec()`, or similar when calling `_.clone()` would be clearer.\n     ///\n-    /// **Why is this bad?** These methods do the same thing as `_.clone()` but may be confusing as\n+    /// ### Why is this bad?\n+    /// These methods do the same thing as `_.clone()` but may be confusing as\n     /// to why we are calling `to_vec` on something that is already a `Vec` or calling `to_owned` on something that is already owned.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let a = vec![1, 2, 3];\n     /// let b = a.to_vec();\n@@ -1659,15 +1672,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the use of `.iter().count()`.\n+    /// ### What it does\n+    /// Checks for the use of `.iter().count()`.\n     ///\n-    /// **Why is this bad?** `.len()` is more efficient and more\n+    /// ### Why is this bad?\n+    /// `.len()` is more efficient and more\n     /// readable.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let some_vec = vec![0, 1, 2, 3];\n@@ -1685,17 +1697,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to [`splitn`]\n+    /// ### What it does\n+    /// Checks for calls to [`splitn`]\n     /// (https://doc.rust-lang.org/std/primitive.str.html#method.splitn) and\n     /// related functions with either zero or one splits.\n     ///\n-    /// **Why is this bad?** These calls don't actually split the value and are\n+    /// ### Why is this bad?\n+    /// These calls don't actually split the value and are\n     /// likely to be intended as a different number.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let s = \"\";\n@@ -1715,14 +1726,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for manual implementations of `str::repeat`\n-    ///\n-    /// **Why is this bad?** These are both harder to read, as well as less performant.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### What it does\n+    /// Checks for manual implementations of `str::repeat`\n     ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// These are both harder to read, as well as less performant.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let x: String = std::iter::repeat('x').take(10).collect();"}, {"sha": "dc2dd45e4edb6c1c096b141458f4e5b7e51421d5", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,15 +8,15 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::cmp::Ordering;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for expressions where `std::cmp::min` and `max` are\n+    /// ### What it does\n+    /// Checks for expressions where `std::cmp::min` and `max` are\n     /// used to clamp values, but switched so that the result is constant.\n     ///\n-    /// **Why is this bad?** This is in all probability not the intended outcome. At\n+    /// ### Why is this bad?\n+    /// This is in all probability not the intended outcome. At\n     /// the least it hurts readability of the code.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// min(0, max(100, x))\n     /// ```"}, {"sha": "c796abe9815a4c2dd3c2b4538c42ae99149e2992", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -25,10 +25,12 @@ use clippy_utils::{\n };\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for function arguments and let bindings denoted as\n+    /// ### What it does\n+    /// Checks for function arguments and let bindings denoted as\n     /// `ref`.\n     ///\n-    /// **Why is this bad?** The `ref` declaration makes the function take an owned\n+    /// ### Why is this bad?\n+    /// The `ref` declaration makes the function take an owned\n     /// value, but turns the argument into a reference (which means that the value\n     /// is destroyed when exiting the function). This adds not much value: either\n     /// take a reference type, or take an owned value and create references in the\n@@ -37,11 +39,12 @@ declare_clippy_lint! {\n     /// For let bindings, `let x = &foo;` is preferred over `let ref x = foo`. The\n     /// type of `x` is more obvious with the former.\n     ///\n-    /// **Known problems:** If the argument is dereferenced within the function,\n+    /// ### Known problems\n+    /// If the argument is dereferenced within the function,\n     /// removing the `ref` will lead to errors. This can be fixed by removing the\n     /// dereferences, e.g., changing `*x` to `x` within the function.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n     /// fn foo(ref x: u8) -> bool {\n@@ -59,14 +62,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for comparisons to NaN.\n+    /// ### What it does\n+    /// Checks for comparisons to NaN.\n     ///\n-    /// **Why is this bad?** NaN does not compare meaningfully to anything \u2013 not\n+    /// ### Why is this bad?\n+    /// NaN does not compare meaningfully to anything \u2013 not\n     /// even itself \u2013 so those comparisons are simply wrong.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = 1.0;\n     ///\n@@ -82,18 +85,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for (in-)equality comparisons on floating-point\n+    /// ### What it does\n+    /// Checks for (in-)equality comparisons on floating-point\n     /// values (apart from zero), except in functions called `*eq*` (which probably\n     /// implement equality for a type involving floats).\n     ///\n-    /// **Why is this bad?** Floating point calculations are usually imprecise, so\n+    /// ### Why is this bad?\n+    /// Floating point calculations are usually imprecise, so\n     /// asking if two values are *exactly* equal is asking for trouble. For a good\n     /// guide on what to do, see [the floating point\n     /// guide](http://www.floating-point-gui.de/errors/comparison).\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = 1.2331f64;\n     /// let y = 1.2332f64;\n@@ -115,16 +118,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for conversions to owned values just for the sake\n+    /// ### What it does\n+    /// Checks for conversions to owned values just for the sake\n     /// of a comparison.\n     ///\n-    /// **Why is this bad?** The comparison can operate on a reference, so creating\n+    /// ### Why is this bad?\n+    /// The comparison can operate on a reference, so creating\n     /// an owned value effectively throws it away directly afterwards, which is\n     /// needlessly consuming code and heap space.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = \"foo\";\n     /// # let y = String::from(\"foo\");\n@@ -142,18 +145,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for getting the remainder of a division by one or minus\n+    /// ### What it does\n+    /// Checks for getting the remainder of a division by one or minus\n     /// one.\n     ///\n-    /// **Why is this bad?** The result for a divisor of one can only ever be zero; for\n+    /// ### Why is this bad?\n+    /// The result for a divisor of one can only ever be zero; for\n     /// minus one it can cause panic/overflow (if the left operand is the minimal value of\n     /// the respective integer type) or results in zero. No one will write such code\n     /// deliberately, unless trying to win an Underhanded Rust Contest. Even for that\n     /// contest, it's probably a bad idea. Use something more underhanded.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = 1;\n     /// let a = x % 1;\n@@ -165,17 +168,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the use of bindings with a single leading\n+    /// ### What it does\n+    /// Checks for the use of bindings with a single leading\n     /// underscore.\n     ///\n-    /// **Why is this bad?** A single leading underscore is usually used to indicate\n+    /// ### Why is this bad?\n+    /// A single leading underscore is usually used to indicate\n     /// that a binding will not be used. Using such a binding breaks this\n     /// expectation.\n     ///\n-    /// **Known problems:** The lint does not work properly with desugaring and\n+    /// ### Known problems\n+    /// The lint does not work properly with desugaring and\n     /// macro, it has been allowed in the mean time.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let _x = 0;\n     /// let y = _x + 1; // Here we are using `_x`, even though it has a leading\n@@ -187,17 +193,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the use of short circuit boolean conditions as\n+    /// ### What it does\n+    /// Checks for the use of short circuit boolean conditions as\n     /// a\n     /// statement.\n     ///\n-    /// **Why is this bad?** Using a short circuit boolean condition as a statement\n+    /// ### Why is this bad?\n+    /// Using a short circuit boolean condition as a statement\n     /// may hide the fact that the second part is executed or not depending on the\n     /// outcome of the first part.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// f() && g(); // We should write `if f() { g(); }`.\n     /// ```\n@@ -207,15 +213,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Catch casts from `0` to some pointer type\n+    /// ### What it does\n+    /// Catch casts from `0` to some pointer type\n     ///\n-    /// **Why is this bad?** This generally means `null` and is better expressed as\n+    /// ### Why is this bad?\n+    /// This generally means `null` and is better expressed as\n     /// {`std`, `core`}`::ptr::`{`null`, `null_mut`}.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let a = 0 as *const u32;\n@@ -229,18 +234,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for (in-)equality comparisons on floating-point\n+    /// ### What it does\n+    /// Checks for (in-)equality comparisons on floating-point\n     /// value and constant, except in functions called `*eq*` (which probably\n     /// implement equality for a type involving floats).\n     ///\n-    /// **Why is this bad?** Floating point calculations are usually imprecise, so\n+    /// ### Why is this bad?\n+    /// Floating point calculations are usually imprecise, so\n     /// asking if two values are *exactly* equal is asking for trouble. For a good\n     /// guide on what to do, see [the floating point\n     /// guide](http://www.floating-point-gui.de/errors/comparison).\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x: f64 = 1.0;\n     /// const ONE: f64 = 1.00;"}, {"sha": "06fe967dafc409144c300d0f52417d91f9ec1743", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -18,14 +18,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for structure field patterns bound to wildcards.\n+    /// ### What it does\n+    /// Checks for structure field patterns bound to wildcards.\n     ///\n-    /// **Why is this bad?** Using `..` instead is shorter and leaves the focus on\n+    /// ### Why is this bad?\n+    /// Using `..` instead is shorter and leaves the focus on\n     /// the fields that are actually bound.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # struct Foo {\n     /// #     a: i32,\n@@ -52,14 +52,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for function arguments having the similar names\n+    /// ### What it does\n+    /// Checks for function arguments having the similar names\n     /// differing by an underscore.\n     ///\n-    /// **Why is this bad?** It affects code readability.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// It affects code readability.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// fn foo(a: i32, _a: i32) {}\n@@ -73,14 +73,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Detects expressions of the form `--x`.\n+    /// ### What it does\n+    /// Detects expressions of the form `--x`.\n     ///\n-    /// **Why is this bad?** It can mislead C/C++ programmers to think `x` was\n+    /// ### Why is this bad?\n+    /// It can mislead C/C++ programmers to think `x` was\n     /// decremented.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let mut x = 3;\n     /// --x;\n@@ -91,14 +91,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns on hexadecimal literals with mixed-case letter\n+    /// ### What it does\n+    /// Warns on hexadecimal literals with mixed-case letter\n     /// digits.\n     ///\n-    /// **Why is this bad?** It looks confusing.\n+    /// ### Why is this bad?\n+    /// It looks confusing.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let y = 0x1a9BAcD;\n@@ -112,14 +112,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns if literal suffixes are not separated by an\n+    /// ### What it does\n+    /// Warns if literal suffixes are not separated by an\n     /// underscore.\n     ///\n-    /// **Why is this bad?** It is much less readable.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// It is much less readable.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let y = 123832i32;\n@@ -133,17 +133,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns if an integral constant literal starts with `0`.\n+    /// ### What it does\n+    /// Warns if an integral constant literal starts with `0`.\n     ///\n-    /// **Why is this bad?** In some languages (including the infamous C language\n+    /// ### Why is this bad?\n+    /// In some languages (including the infamous C language\n     /// and most of its\n     /// family), this marks an octal constant. In Rust however, this is a decimal\n     /// constant. This could\n     /// be confusing for both the writer and a reader of the constant.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// In Rust:\n     /// ```rust\n@@ -171,13 +171,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns if a generic shadows a built-in type.\n-    ///\n-    /// **Why is this bad?** This gives surprising type errors.\n+    /// ### What it does\n+    /// Warns if a generic shadows a built-in type.\n     ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// This gives surprising type errors.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// ```ignore\n     /// impl<u32> Foo<u32> {\n@@ -192,14 +192,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for patterns in the form `name @ _`.\n+    /// ### What it does\n+    /// Checks for patterns in the form `name @ _`.\n     ///\n-    /// **Why is this bad?** It's almost always more readable to just use direct\n+    /// ### Why is this bad?\n+    /// It's almost always more readable to just use direct\n     /// bindings.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let v = Some(\"abc\");\n     ///\n@@ -221,19 +221,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for tuple patterns with a wildcard\n+    /// ### What it does\n+    /// Checks for tuple patterns with a wildcard\n     /// pattern (`_`) is next to a rest pattern (`..`).\n     ///\n     /// _NOTE_: While `_, ..` means there is at least one element left, `..`\n     /// means there are 0 or more elements left. This can make a difference\n     /// when refactoring, but shouldn't result in errors in the refactored code,\n     /// since the wildcard pattern isn't used anyway.\n-    /// **Why is this bad?** The wildcard pattern is unneeded as the rest pattern\n+    /// ### Why is this bad?\n+    /// The wildcard pattern is unneeded as the rest pattern\n     /// can match that element as well.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # struct TupleStruct(u32, u32, u32);\n     /// # let t = TupleStruct(1, 2, 3);"}, {"sha": "5b2584d43a130db69977205c1af79ebeaea6621c", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,16 +13,13 @@ use rustc_span::Span;\n use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n-    /// **What it does:**\n-    ///\n+    /// ### What it does\n     /// Suggests the use of `const` in functions and methods where possible.\n     ///\n-    /// **Why is this bad?**\n-    ///\n+    /// ### Why is this bad?\n     /// Not having the function const prevents callers of the function from being const as well.\n     ///\n-    /// **Known problems:**\n-    ///\n+    /// ### Known problems\n     /// Const functions are currently still being worked on, with some features only being available\n     /// on nightly. This lint does not consider all edge cases currently and the suggestions may be\n     /// incorrect if you are using this lint on stable.\n@@ -42,8 +39,7 @@ declare_clippy_lint! {\n     /// can't be const as it calls a non-const function. Making `a` const and running Clippy again,\n     /// will suggest to make `b` const, too.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # struct Foo {\n     /// #     random_number: usize,"}, {"sha": "aeed826890293872b903f2c52d5a50fab57d55fc", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -17,15 +17,15 @@ use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns if there is missing doc for any documentable item\n+    /// ### What it does\n+    /// Warns if there is missing doc for any documentable item\n     /// (public or private).\n     ///\n-    /// **Why is this bad?** Doc is good. *rustc* has a `MISSING_DOCS`\n+    /// ### Why is this bad?\n+    /// Doc is good. *rustc* has a `MISSING_DOCS`\n     /// allowed-by-default lint for\n     /// public members, but has no way to enforce documentation of private items.\n     /// This lint fixes that.\n-    ///\n-    /// **Known problems:** None.\n     pub MISSING_DOCS_IN_PRIVATE_ITEMS,\n     restriction,\n     \"detects missing documentation for public and private members\""}, {"sha": "9d27870321cacc4d1e5b6dfc4a8ef77e86804057", "filename": "clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,17 +10,16 @@ use rustc_span::Symbol;\n use crate::utils::conf::Rename;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for imports that do not rename the item as specified\n+    /// ### What it does\n+    /// Checks for imports that do not rename the item as specified\n     /// in the `enforce-import-renames` config option.\n     ///\n-    /// **Why is this bad?** Consistency is important, if a project has defined import\n+    /// ### Why is this bad?\n+    /// Consistency is important, if a project has defined import\n     /// renames they should be followed. More practically, some item names are too\n     /// vague outside of their defining scope this can enforce a more meaningful naming.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// An example clippy.toml configuration:\n     /// ```toml\n     /// # clippy.toml"}, {"sha": "be5b4b4006ffd6758083407838c2796d33569979", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,20 +7,20 @@ use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** it lints if an exported function, method, trait method with default impl,\n+    /// ### What it does\n+    /// it lints if an exported function, method, trait method with default impl,\n     /// or trait method impl is not `#[inline]`.\n     ///\n-    /// **Why is this bad?** In general, it is not. Functions can be inlined across\n+    /// ### Why is this bad?\n+    /// In general, it is not. Functions can be inlined across\n     /// crates when that's profitable as long as any form of LTO is used. When LTO is disabled,\n     /// functions that are not `#[inline]` cannot be inlined across crates. Certain types of crates\n     /// might intend for most of the methods in their public API to be able to be inlined across\n     /// crates even when LTO is disabled. For these types of crates, enabling this lint might make\n     /// sense. It allows the crate to require all exported methods to be `#[inline]` by default, and\n     /// then opt out for specific methods where this might not make sense.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// pub fn foo() {} // missing #[inline]\n     /// fn ok() {} // ok"}, {"sha": "2d14943b56c95fbffbb2d20ddd8c2a4bfbf9897b", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,18 +9,18 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::fmt::Display;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for modulo arithmetic.\n+    /// ### What it does\n+    /// Checks for modulo arithmetic.\n     ///\n-    /// **Why is this bad?** The results of modulo (%) operation might differ\n+    /// ### Why is this bad?\n+    /// The results of modulo (%) operation might differ\n     /// depending on the language, when negative numbers are involved.\n     /// If you interop with different languages it might be beneficial\n     /// to double check all places that use modulo arithmetic.\n     ///\n     /// For example, in Rust `17 % -3 = 2`, but in Python `17 % -3 = -1`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = -17 % 3;\n     /// ```"}, {"sha": "1c61970fdc8bb9357d7925c82e322dd6a99287a7", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,17 +13,20 @@ use if_chain::if_chain;\n use itertools::Itertools;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks to see if multiple versions of a crate are being\n+    /// ### What it does\n+    /// Checks to see if multiple versions of a crate are being\n     /// used.\n     ///\n-    /// **Why is this bad?** This bloats the size of targets, and can lead to\n+    /// ### Why is this bad?\n+    /// This bloats the size of targets, and can lead to\n     /// confusing error messages when structs or traits are used interchangeably\n     /// between different versions of a crate.\n     ///\n-    /// **Known problems:** Because this can be caused purely by the dependencies\n+    /// ### Known problems\n+    /// Because this can be caused purely by the dependencies\n     /// themselves, it's not always possible to fix this issue.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```toml\n     /// # This will pull in both winapi v0.3.x and v0.2.x, triggering a warning.\n     /// [dependencies]"}, {"sha": "2c7681c45a46292edd37b5ca2b88c6473dc0ff23", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,18 +10,21 @@ use rustc_span::symbol::sym;\n use std::iter;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for sets/maps with mutable key types.\n+    /// ### What it does\n+    /// Checks for sets/maps with mutable key types.\n     ///\n-    /// **Why is this bad?** All of `HashMap`, `HashSet`, `BTreeMap` and\n+    /// ### Why is this bad?\n+    /// All of `HashMap`, `HashSet`, `BTreeMap` and\n     /// `BtreeSet` rely on either the hash or the order of keys be unchanging,\n     /// so having types with interior mutability is a bad idea.\n     ///\n-    /// **Known problems:** It's correct to use a struct, that contains interior mutability\n+    /// ### Known problems\n+    /// It's correct to use a struct, that contains interior mutability\n     /// as a key, when its `Hash` implementation doesn't access any of the interior mutable types.\n     /// However, this lint is unable to recognize this, so it causes a false positive in theses cases.\n     /// The `bytes` crate is a great example of this.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// use std::cmp::{PartialEq, Eq};\n     /// use std::collections::HashSet;"}, {"sha": "d5032c5ba7f293e2f5148daeb25481409aeed3fa", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,15 +9,15 @@ use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for instances of `mut mut` references.\n+    /// ### What it does\n+    /// Checks for instances of `mut mut` references.\n     ///\n-    /// **Why is this bad?** Multiple `mut`s don't add anything meaningful to the\n+    /// ### Why is this bad?\n+    /// Multiple `mut`s don't add anything meaningful to the\n     /// source. This is either a copy'n'paste error, or it shows a fundamental\n     /// misunderstanding of references.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let mut y = 1;\n     /// let x = &mut &mut y;"}, {"sha": "85e870632a5cab5c19f4ae30cd7260fd1a856aea", "filename": "clippy_lints/src/mut_mutex_lock.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,17 +8,16 @@ use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `&mut Mutex::lock` calls\n+    /// ### What it does\n+    /// Checks for `&mut Mutex::lock` calls\n     ///\n-    /// **Why is this bad?** `Mutex::lock` is less efficient than\n+    /// ### Why is this bad?\n+    /// `Mutex::lock` is less efficient than\n     /// calling `Mutex::get_mut`. In addition you also have a statically\n     /// guarantee that the mutex isn't locked, instead of just a runtime\n     /// guarantee.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// use std::sync::{Arc, Mutex};\n     ///"}, {"sha": "8d5d7951fc532c6ddd8e42f73ed3d31d814bd257", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,15 +7,15 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::iter;\n \n declare_clippy_lint! {\n-    /// **What it does:** Detects passing a mutable reference to a function that only\n+    /// ### What it does\n+    /// Detects passing a mutable reference to a function that only\n     /// requires an immutable reference.\n     ///\n-    /// **Why is this bad?** The mutable reference rules out all other references to\n+    /// ### Why is this bad?\n+    /// The mutable reference rules out all other references to\n     /// the value. Also the code misleads about the intent of the call site.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// // Bad\n     /// my_vec.push(&mut value)"}, {"sha": "ee50891cc3103b6903537bbcaf6bbe1ecb304b78", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,17 +9,17 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for function/method calls with a mutable\n+    /// ### What it does\n+    /// Checks for function/method calls with a mutable\n     /// parameter in `debug_assert!`, `debug_assert_eq!` and `debug_assert_ne!` macros.\n     ///\n-    /// **Why is this bad?** In release builds `debug_assert!` macros are optimized out by the\n+    /// ### Why is this bad?\n+    /// In release builds `debug_assert!` macros are optimized out by the\n     /// compiler.\n     /// Therefore mutating something in a `debug_assert!` macro results in different behaviour\n     /// between a release and debug build.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// debug_assert_eq!(vec![3].pop(), Some(3));\n     /// // or"}, {"sha": "436ceec6cfa0b264c155f02840760a8a3d4c8495", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,17 +10,20 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usages of `Mutex<X>` where an atomic will do.\n+    /// ### What it does\n+    /// Checks for usages of `Mutex<X>` where an atomic will do.\n     ///\n-    /// **Why is this bad?** Using a mutex just to make access to a plain bool or\n+    /// ### Why is this bad?\n+    /// Using a mutex just to make access to a plain bool or\n     /// reference sequential is shooting flies with cannons.\n     /// `std::sync::atomic::AtomicBool` and `std::sync::atomic::AtomicPtr` are leaner and\n     /// faster.\n     ///\n-    /// **Known problems:** This lint cannot detect if the mutex is actually used\n+    /// ### Known problems\n+    /// This lint cannot detect if the mutex is actually used\n     /// for waiting before a critical section.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let y = true;\n     ///\n@@ -38,17 +41,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usages of `Mutex<X>` where `X` is an integral\n+    /// ### What it does\n+    /// Checks for usages of `Mutex<X>` where `X` is an integral\n     /// type.\n     ///\n-    /// **Why is this bad?** Using a mutex just to make access to a plain integer\n+    /// ### Why is this bad?\n+    /// Using a mutex just to make access to a plain integer\n     /// sequential is\n     /// shooting flies with cannons. `std::sync::atomic::AtomicUsize` is leaner and faster.\n     ///\n-    /// **Known problems:** This lint cannot detect if the mutex is actually used\n+    /// ### Known problems\n+    /// This lint cannot detect if the mutex is actually used\n     /// for waiting before a critical section.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::sync::Mutex;\n     /// let x = Mutex::new(0usize);"}, {"sha": "9a3d9383cd98c4255292ae72aa12e2a128274d5e", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,13 +9,13 @@ use rustc_span::symbol::kw;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** The lint checks for `self` in fn parameters that\n+    /// ### What it does\n+    /// The lint checks for `self` in fn parameters that\n     /// specify the `Self`-type explicitly\n-    /// **Why is this bad?** Increases the amount and decreases the readability of code\n+    /// ### Why is this bad?\n+    /// Increases the amount and decreases the readability of code\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// enum ValType {\n     ///     I32,"}, {"sha": "203da29cb917002e3a8e878c035dcf818596c588", "filename": "clippy_lints/src/needless_bitwise_bool.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,20 +9,19 @@ use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Checks for uses of bitwise and/or operators between booleans, where performance may be improved by using\n     /// a lazy and.\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// The bitwise operators do not support short-circuiting, so it may hinder code performance.\n     /// Additionally, boolean logic \"masked\" as bitwise logic is not caught by lints like `unnecessary_fold`\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// This lint evaluates only when the right side is determined to have no side effects. At this time, that\n     /// determination is quite conservative.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let (x,y) = (true, false);\n     /// if x & !y {} // where both x and y are booleans"}, {"sha": "36f2829a5b94ee4dcaca93701f4e2e0f137146ea", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -15,17 +15,20 @@ use rustc_span::source_map::Spanned;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for expressions of the form `if c { true } else {\n+    /// ### What it does\n+    /// Checks for expressions of the form `if c { true } else {\n     /// false }` (or vice versa) and suggests using the condition directly.\n     ///\n-    /// **Why is this bad?** Redundant code.\n+    /// ### Why is this bad?\n+    /// Redundant code.\n     ///\n-    /// **Known problems:** Maybe false positives: Sometimes, the two branches are\n+    /// ### Known problems\n+    /// Maybe false positives: Sometimes, the two branches are\n     /// painstakingly documented (which we, of course, do not detect), so they *may*\n     /// have some value. Even then, the documentation can be rewritten to match the\n     /// shorter code.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// if x {\n     ///     false\n@@ -43,15 +46,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for expressions of the form `x == true`,\n+    /// ### What it does\n+    /// Checks for expressions of the form `x == true`,\n     /// `x != true` and order comparisons such as `x < true` (or vice versa) and\n     /// suggest using the variable directly.\n     ///\n-    /// **Why is this bad?** Unnecessary code.\n+    /// ### Why is this bad?\n+    /// Unnecessary code.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// if x == true {}\n     /// if y == false {}"}, {"sha": "3f0b23ee4d3e45a6106f3a615e5007c0239f3cd1", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -17,15 +17,15 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for address of operations (`&`) that are going to\n+    /// ### What it does\n+    /// Checks for address of operations (`&`) that are going to\n     /// be dereferenced immediately by the compiler.\n     ///\n-    /// **Why is this bad?** Suggests that the receiver of the expression borrows\n+    /// ### Why is this bad?\n+    /// Suggests that the receiver of the expression borrows\n     /// the expression.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let x: &i32 = &&&&&&5;\n@@ -39,13 +39,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `ref` bindings which create a reference to a reference.\n-    ///\n-    /// **Why is this bad?** The address-of operator at the use site is clearer about the need for a reference.\n+    /// ### What it does\n+    /// Checks for `ref` bindings which create a reference to a reference.\n     ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// The address-of operator at the use site is clearer about the need for a reference.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let x = Some(\"\");"}, {"sha": "36879eda7c0037733bc940a43f7c9d0546fd98b6", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,12 +7,15 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for bindings that destructure a reference and borrow the inner\n+    /// ### What it does\n+    /// Checks for bindings that destructure a reference and borrow the inner\n     /// value with `&ref`.\n     ///\n-    /// **Why is this bad?** This pattern has no effect in almost all cases.\n+    /// ### Why is this bad?\n+    /// This pattern has no effect in almost all cases.\n     ///\n-    /// **Known problems:** In some cases, `&ref` is needed to avoid a lifetime mismatch error.\n+    /// ### Known problems\n+    /// In some cases, `&ref` is needed to avoid a lifetime mismatch error.\n     /// Example:\n     /// ```rust\n     /// fn foo(a: &Option<String>, b: &Option<String>) {\n@@ -23,7 +26,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust\n     /// let mut v = Vec::<String>::new();"}, {"sha": "5088b8bb0d3680ecf08a651d05755730b9602393", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -42,20 +42,20 @@ use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** The lint checks for `if`-statements appearing in loops\n+    /// ### What it does\n+    /// The lint checks for `if`-statements appearing in loops\n     /// that contain a `continue` statement in either their main blocks or their\n     /// `else`-blocks, when omitting the `else`-block possibly with some\n     /// rearrangement of code can make the code easier to understand.\n     ///\n-    /// **Why is this bad?** Having explicit `else` blocks for `if` statements\n+    /// ### Why is this bad?\n+    /// Having explicit `else` blocks for `if` statements\n     /// containing `continue` in their THEN branch adds unnecessary branching and\n     /// nesting to the code. Having an else block containing just `continue` can\n     /// also be better written by grouping the statements following the whole `if`\n     /// statement within the THEN block and omitting the else block completely.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # fn condition() -> bool { false }\n     /// # fn update_condition() {}"}, {"sha": "d9aa42fe8eeb69cfbe7f7dc8cc2fd1621ee2599d", "filename": "clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -16,18 +16,17 @@ use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::has_iter_method;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `for_each` that would be more simply written as a\n+    /// ### What it does\n+    /// Checks for usage of `for_each` that would be more simply written as a\n     /// `for` loop.\n     ///\n-    /// **Why is this bad?** `for_each` may be used after applying iterator transformers like\n+    /// ### Why is this bad?\n+    /// `for_each` may be used after applying iterator transformers like\n     /// `filter` for better readability and performance. It may also be used to fit a simple\n     /// operation on one line.\n     /// But when none of these apply, a simple `for` loop is more idiomatic.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let v = vec![0, 1, 2];\n     /// v.iter().for_each(|elem| {"}, {"sha": "03eeb54d8d1c25b9d7c877357d6483d7e34482e3", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -24,20 +24,22 @@ use rustc_typeck::expr_use_visitor as euv;\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for functions taking arguments by value, but not\n+    /// ### What it does\n+    /// Checks for functions taking arguments by value, but not\n     /// consuming them in its\n     /// body.\n     ///\n-    /// **Why is this bad?** Taking arguments by reference is more flexible and can\n+    /// ### Why is this bad?\n+    /// Taking arguments by reference is more flexible and can\n     /// sometimes avoid\n     /// unnecessary allocations.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// * This lint suggests taking an argument by reference,\n     /// however sometimes it is better to let users decide the argument type\n     /// (by using `Borrow` trait, for example), depending on how the function is used.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn foo(v: Vec<i32>) {\n     ///     assert_eq!(v.len(), 42);"}, {"sha": "42e48336e1539595d7f877698bd2f42031a83507", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,15 +10,13 @@ use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Suggests alternatives for useless applications of `?` in terminating expressions\n     ///\n-    /// **Why is this bad?** There's no reason to use `?` to short-circuit when execution of the body will end there anyway.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// There's no reason to use `?` to short-circuit when execution of the body will end there anyway.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// struct TO {\n     ///     magic: Option<usize>,"}, {"sha": "2a33b7392caa478d08c35b7de0d17c0cf7bb6835", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -5,18 +5,18 @@ use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for needlessly including a base struct on update\n+    /// ### What it does\n+    /// Checks for needlessly including a base struct on update\n     /// when all fields are changed anyway.\n     ///\n     /// This lint is not applied to structs marked with\n     /// [non_exhaustive](https://doc.rust-lang.org/reference/attributes/type_system.html).\n     ///\n-    /// **Why is this bad?** This will cost resources (because the base has to be\n+    /// ### Why is this bad?\n+    /// This will cost resources (because the base has to be\n     /// somewhere), and make the code less readable.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # struct Point {\n     /// #     x: i32,"}, {"sha": "6ad49b7060565ce9b8cea8db5b88abff1dc76825", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,19 +8,16 @@ use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Checks for the usage of negated comparison operators on types which only implement\n     /// `PartialOrd` (e.g., `f64`).\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// These operators make it easy to forget that the underlying types actually allow not only three\n     /// potential Orderings (Less, Equal, Greater) but also a fourth one (Uncomparable). This is\n     /// especially easy to miss if the operator based comparison result is negated.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// use std::cmp::Ordering;\n     ///"}, {"sha": "fa36d8fb1b30f3f50ee2793d5a9db68b9d70edc9", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,13 +7,16 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for multiplication by -1 as a form of negation.\n+    /// ### What it does\n+    /// Checks for multiplication by -1 as a form of negation.\n     ///\n-    /// **Why is this bad?** It's more readable to just negate.\n+    /// ### Why is this bad?\n+    /// It's more readable to just negate.\n     ///\n-    /// **Known problems:** This only catches integers (for now).\n+    /// ### Known problems\n+    /// This only catches integers (for now).\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// x * -1\n     /// ```"}, {"sha": "5c63d245bf1202238528872f48b3c3c098df509f", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,18 +13,17 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for types with a `fn new() -> Self` method and no\n+    /// ### What it does\n+    /// Checks for types with a `fn new() -> Self` method and no\n     /// implementation of\n     /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html).\n     ///\n-    /// **Why is this bad?** The user might expect to be able to use\n+    /// ### Why is this bad?\n+    /// The user might expect to be able to use\n     /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) as the\n     /// type can be constructed without arguments.\n     ///\n-    /// **Known problems:** Hopefully none.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```ignore\n     /// struct Foo(Bar);\n     ///"}, {"sha": "e07518b25868795c691291bc01e28b8d9315e59b", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,15 +9,15 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::ops::Deref;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for statements which have no effect.\n+    /// ### What it does\n+    /// Checks for statements which have no effect.\n     ///\n-    /// **Why is this bad?** Similar to dead code, these statements are actually\n+    /// ### Why is this bad?\n+    /// Similar to dead code, these statements are actually\n     /// executed. However, as they have no effect, all they do is make the code less\n     /// readable.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// 0;\n     /// ```\n@@ -27,15 +27,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for expression statements that can be reduced to a\n+    /// ### What it does\n+    /// Checks for expression statements that can be reduced to a\n     /// sub-expression.\n     ///\n-    /// **Why is this bad?** Expressions by themselves often have no side-effects.\n+    /// ### Why is this bad?\n+    /// Expressions by themselves often have no side-effects.\n     /// Having such expressions reduces readability.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// compute_array()[0];\n     /// ```"}, {"sha": "aa3067876ebf827b75eb0ca6c770ebfeda347107", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -24,18 +24,21 @@ use rustc_typeck::hir_ty_to_ty;\n // FIXME: this is a correctness problem but there's no suitable\n // warn-by-default category.\n declare_clippy_lint! {\n-    /// **What it does:** Checks for declaration of `const` items which is interior\n+    /// ### What it does\n+    /// Checks for declaration of `const` items which is interior\n     /// mutable (e.g., contains a `Cell`, `Mutex`, `AtomicXxxx`, etc.).\n     ///\n-    /// **Why is this bad?** Consts are copied everywhere they are referenced, i.e.,\n+    /// ### Why is this bad?\n+    /// Consts are copied everywhere they are referenced, i.e.,\n     /// every time you refer to the const a fresh instance of the `Cell` or `Mutex`\n     /// or `AtomicXxxx` will be created, which defeats the whole purpose of using\n     /// these types in the first place.\n     ///\n     /// The `const` should better be replaced by a `static` item if a global\n     /// variable is wanted, or replaced by a `const fn` if a constructor is wanted.\n     ///\n-    /// **Known problems:** A \"non-constant\" const item is a legacy way to supply an\n+    /// ### Known problems\n+    /// A \"non-constant\" const item is a legacy way to supply an\n     /// initialized value to downstream `static` items (e.g., the\n     /// `std::sync::ONCE_INIT` constant). In this case the use of `const` is legit,\n     /// and this lint should be suppressed.\n@@ -52,7 +55,7 @@ declare_clippy_lint! {\n     /// the interior mutable field is used or not. See issues\n     /// [#5812](https://github.com/rust-lang/rust-clippy/issues/5812) and\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n     ///\n@@ -74,17 +77,20 @@ declare_clippy_lint! {\n // FIXME: this is a correctness problem but there's no suitable\n // warn-by-default category.\n declare_clippy_lint! {\n-    /// **What it does:** Checks if `const` items which is interior mutable (e.g.,\n+    /// ### What it does\n+    /// Checks if `const` items which is interior mutable (e.g.,\n     /// contains a `Cell`, `Mutex`, `AtomicXxxx`, etc.) has been borrowed directly.\n     ///\n-    /// **Why is this bad?** Consts are copied everywhere they are referenced, i.e.,\n+    /// ### Why is this bad?\n+    /// Consts are copied everywhere they are referenced, i.e.,\n     /// every time you refer to the const a fresh instance of the `Cell` or `Mutex`\n     /// or `AtomicXxxx` will be created, which defeats the whole purpose of using\n     /// these types in the first place.\n     ///\n     /// The `const` value should be stored inside a `static` item.\n     ///\n-    /// **Known problems:** When an enum has variants with interior mutability, use of its non\n+    /// ### Known problems\n+    /// When an enum has variants with interior mutability, use of its non\n     /// interior mutable variants can generate false positives. See issue\n     /// [#3962](https://github.com/rust-lang/rust-clippy/issues/3962)\n     ///\n@@ -93,7 +99,7 @@ declare_clippy_lint! {\n     /// [#5812](https://github.com/rust-lang/rust-clippy/issues/5812) and\n     /// [#3825](https://github.com/rust-lang/rust-clippy/issues/3825)\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n     /// const CONST_ATOM: AtomicUsize = AtomicUsize::new(12);"}, {"sha": "dc55b103eb6f9348aaa12c74331cd7945b69319d", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,14 +12,14 @@ use rustc_span::symbol::{Ident, Symbol};\n use std::cmp::Ordering;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for names that are very similar and thus confusing.\n+    /// ### What it does\n+    /// Checks for names that are very similar and thus confusing.\n     ///\n-    /// **Why is this bad?** It's hard to distinguish between names that differ only\n+    /// ### Why is this bad?\n+    /// It's hard to distinguish between names that differ only\n     /// by a single character.\n     ///\n-    /// **Known problems:** None?\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// let checked_exp = something;\n     /// let checked_expr = something_else;\n@@ -30,15 +30,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for too many variables whose name consists of a\n+    /// ### What it does\n+    /// Checks for too many variables whose name consists of a\n     /// single character.\n     ///\n-    /// **Why is this bad?** It's hard to memorize what a variable means without a\n+    /// ### Why is this bad?\n+    /// It's hard to memorize what a variable means without a\n     /// descriptive name.\n     ///\n-    /// **Known problems:** None?\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// let (a, b, c, d, e, f, g) = (...);\n     /// ```\n@@ -48,15 +48,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks if you have variables whose name consists of just\n+    /// ### What it does\n+    /// Checks if you have variables whose name consists of just\n     /// underscores and digits.\n     ///\n-    /// **Why is this bad?** It's hard to memorize what a variable means without a\n+    /// ### Why is this bad?\n+    /// It's hard to memorize what a variable means without a\n     /// descriptive name.\n     ///\n-    /// **Known problems:** None?\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let _1 = 1;\n     /// let ___1 = 1;"}, {"sha": "3b74f69d3753abe38644a6dfe1b618f22b86f1fd", "filename": "clippy_lints/src/non_octal_unix_permissions.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,15 +9,14 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for non-octal values used to set Unix file permissions.\n+    /// ### What it does\n+    /// Checks for non-octal values used to set Unix file permissions.\n     ///\n-    /// **Why is this bad?** They will be converted into octal, creating potentially\n+    /// ### Why is this bad?\n+    /// They will be converted into octal, creating potentially\n     /// unintended file permissions.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust,ignore\n     /// use std::fs::OpenOptions;\n     /// use std::os::unix::fs::OpenOptionsExt;"}, {"sha": "dbe9cbe0ded83c4588c455063f6097e18c60457b", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,16 +13,14 @@ use rustc_span::Span;\n use serde::{de, Deserialize};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks that common macros are used with consistent bracing.\n+    /// ### What it does\n+    /// Checks that common macros are used with consistent bracing.\n     ///\n-    /// **Why is this bad?** This is mostly a consistency lint although using () or []\n+    /// ### Why is this bad?\n+    /// This is mostly a consistency lint although using () or []\n     /// doesn't give you a semicolon in item position, which can be unexpected.\n     ///\n-    /// **Known problems:**\n-    /// None\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// vec!{1, 2, 3};\n     /// ```"}, {"sha": "4064d94da2abff2928d59e40f213a1bf93d04988", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,15 +8,15 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{Span, Spanned};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for duplicate open options as well as combinations\n+    /// ### What it does\n+    /// Checks for duplicate open options as well as combinations\n     /// that make no sense.\n     ///\n-    /// **Why is this bad?** In the best case, the code will be harder to read than\n+    /// ### Why is this bad?\n+    /// In the best case, the code will be harder to read than\n     /// necessary. I don't know the worst case.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// use std::fs::OpenOptions;\n     ///"}, {"sha": "d7306628030f6ddc3d02a7a134e7ac01959d2f16", "filename": "clippy_lints/src/option_env_unwrap.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,17 +7,16 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `option_env!(...).unwrap()` and\n+    /// ### What it does\n+    /// Checks for usage of `option_env!(...).unwrap()` and\n     /// suggests usage of the `env!` macro.\n     ///\n-    /// **Why is this bad?** Unwrapping the result of `option_env!` will panic\n+    /// ### Why is this bad?\n+    /// Unwrapping the result of `option_env!` will panic\n     /// at run-time if the environment variable doesn't exist, whereas `env!`\n     /// catches it at compile-time.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust,no_run\n     /// let _ = option_env!(\"HOME\").unwrap();\n     /// ```"}, {"sha": "7aef3a5f34cf21bcb9af3f4d54119b5c9b26dfad", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,24 +12,23 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Lints usage of `if let Some(v) = ... { y } else { x }` which is more\n     /// idiomatically done with `Option::map_or` (if the else bit is a pure\n     /// expression) or `Option::map_or_else` (if the else bit is an impure\n     /// expression).\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// Using the dedicated functions of the Option type is clearer and\n     /// more concise than an `if let` expression.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// This lint uses a deliberately conservative metric for checking\n     /// if the inside of either body contains breaks or continues which will\n     /// cause it to not suggest a fix if either block contains a loop with\n     /// continues or breaks contained within the loop.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # let optional: Option<u32> = Some(0);\n     /// # fn do_complicated_function() -> u32 { 5 };"}, {"sha": "34755afdb72f0c1bf011551507cef2e92a03f3c3", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,14 +6,14 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Detects classic underflow/overflow checks.\n+    /// ### What it does\n+    /// Detects classic underflow/overflow checks.\n     ///\n-    /// **Why is this bad?** Most classic C underflow/overflow checks will fail in\n+    /// ### Why is this bad?\n+    /// Most classic C underflow/overflow checks will fail in\n     /// Rust. Users can use functions like `overflowing_*` and `wrapping_*` instead.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let a = 1;\n     /// # let b = 2;"}, {"sha": "e2b6ba8e2d2f6a0f70cd261eff937941c96a0469", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,14 +8,16 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `panic!`, `unimplemented!`, `todo!`, `unreachable!` or assertions in a function of type result.\n+    /// ### What it does\n+    /// Checks for usage of `panic!`, `unimplemented!`, `todo!`, `unreachable!` or assertions in a function of type result.\n     ///\n-    /// **Why is this bad?** For some codebases, it is desirable for functions of type result to return an error instead of crashing. Hence panicking macros should be avoided.\n+    /// ### Why is this bad?\n+    /// For some codebases, it is desirable for functions of type result to return an error instead of crashing. Hence panicking macros should be avoided.\n     ///\n-    /// **Known problems:** Functions called from a function returning a `Result` may invoke a panicking macro. This is not checked.\n-    ///\n-    /// **Example:**\n+    /// ### Known problems\n+    /// Functions called from a function returning a `Result` may invoke a panicking macro. This is not checked.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// fn result_with_panic() -> Result<bool, String>\n     /// {"}, {"sha": "d8d9081d6f172ab72da22e9ad1697f5a55e9b521", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,13 +7,13 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `panic!`.\n+    /// ### What it does\n+    /// Checks for usage of `panic!`.\n     ///\n-    /// **Why is this bad?** `panic!` will stop the execution of the executable\n+    /// ### Why is this bad?\n+    /// `panic!` will stop the execution of the executable\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```no_run\n     /// panic!(\"even with a good reason\");\n     /// ```\n@@ -23,13 +23,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `unimplemented!`.\n-    ///\n-    /// **Why is this bad?** This macro should not be present in production code\n+    /// ### What it does\n+    /// Checks for usage of `unimplemented!`.\n     ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// This macro should not be present in production code\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```no_run\n     /// unimplemented!();\n     /// ```\n@@ -39,13 +39,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `todo!`.\n+    /// ### What it does\n+    /// Checks for usage of `todo!`.\n     ///\n-    /// **Why is this bad?** This macro should not be present in production code\n+    /// ### Why is this bad?\n+    /// This macro should not be present in production code\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```no_run\n     /// todo!();\n     /// ```\n@@ -55,13 +55,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `unreachable!`.\n-    ///\n-    /// **Why is this bad?** This macro can cause code to panic\n+    /// ### What it does\n+    /// Checks for usage of `unreachable!`.\n     ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// This macro can cause code to panic\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```no_run\n     /// unreachable!();\n     /// ```"}, {"sha": "4ec493e5f45e075f209523d0a7389d0de9eaa234", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,16 +7,16 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for manual re-implementations of `PartialEq::ne`.\n+    /// ### What it does\n+    /// Checks for manual re-implementations of `PartialEq::ne`.\n     ///\n-    /// **Why is this bad?** `PartialEq::ne` is required to always return the\n+    /// ### Why is this bad?\n+    /// `PartialEq::ne` is required to always return the\n     /// negated result of `PartialEq::eq`, which is exactly what the default\n     /// implementation does. Therefore, there should never be any need to\n     /// re-implement it.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// struct Foo;\n     ///"}, {"sha": "f738ac2541788ca53ce1f620b14670b92eefe64c", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -20,15 +20,18 @@ use rustc_target::spec::abi::Abi;\n use rustc_target::spec::Target;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for functions taking arguments by reference, where\n+    /// ### What it does\n+    /// Checks for functions taking arguments by reference, where\n     /// the argument type is `Copy` and small enough to be more efficient to always\n     /// pass by value.\n     ///\n-    /// **Why is this bad?** In many calling conventions instances of structs will\n+    /// ### Why is this bad?\n+    /// In many calling conventions instances of structs will\n     /// be passed through registers if they fit into two or less general purpose\n     /// registers.\n     ///\n-    /// **Known problems:** This lint is target register size dependent, it is\n+    /// ### Known problems\n+    /// This lint is target register size dependent, it is\n     /// limited to 32-bit to try and reduce portability problems between 32 and\n     /// 64-bit, but if you are compiling for 8 or 16-bit targets then the limit\n     /// will be different.\n@@ -50,7 +53,7 @@ declare_clippy_lint! {\n     /// that explains a real case in which this false positive\n     /// led to an **undefined behaviour** introduced with unsafe code.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// ```rust\n     /// // Bad\n@@ -67,18 +70,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for functions taking arguments by value, where\n+    /// ### What it does\n+    /// Checks for functions taking arguments by value, where\n     /// the argument type is `Copy` and large enough to be worth considering\n     /// passing by reference. Does not trigger if the function is being exported,\n     /// because that might induce API breakage, if the parameter is declared as mutable,\n     /// or if the argument is a `self`.\n     ///\n-    /// **Why is this bad?** Arguments passed by value might result in an unnecessary\n+    /// ### Why is this bad?\n+    /// Arguments passed by value might result in an unnecessary\n     /// shallow copy, taking up more space in the stack and requiring a call to\n     /// `memcpy`, which can be expensive.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// #[derive(Clone, Copy)]\n     /// struct TooLarge([u8; 2048]);"}, {"sha": "3df7a72d2950984c2d27a2622e0a1c3e8561ac63", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,15 +10,15 @@ use rustc_span::symbol::sym;\n use std::path::{Component, Path};\n \n declare_clippy_lint! {\n-    /// **What it does:*** Checks for [push](https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.push)\n+    /// ### What it does\n+    ///* Checks for [push](https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.push)\n     /// calls on `PathBuf` that can cause overwrites.\n     ///\n-    /// **Why is this bad?** Calling `push` with a root path at the start can overwrite the\n+    /// ### Why is this bad?\n+    /// Calling `push` with a root path at the start can overwrite the\n     /// previous defined path.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// use std::path::PathBuf;\n     ///"}, {"sha": "4534f6e251659ef2130140abfa7969ef14fad9e7", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,7 +13,8 @@ use rustc_span::source_map::Span;\n use std::iter;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for patterns that aren't exact representations of the types\n+    /// ### What it does\n+    /// Checks for patterns that aren't exact representations of the types\n     /// they are applied to.\n     ///\n     /// To satisfy this lint, you will have to adjust either the expression that is matched\n@@ -32,14 +33,12 @@ declare_clippy_lint! {\n     /// this lint can still be used to highlight areas of interest and ensure a good understanding\n     /// of ownership semantics.\n     ///\n-    /// **Why is this bad?** It isn't bad in general. But in some contexts it can be desirable\n+    /// ### Why is this bad?\n+    /// It isn't bad in general. But in some contexts it can be desirable\n     /// because it increases ownership hints in the code, and will guard against some changes\n     /// in ownership.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// This example shows the basic adjustments necessary to satisfy the lint. Note how\n     /// the matched expression is explicitly dereferenced with `*` and the `inner` variable\n     /// is bound to a shared borrow via `ref inner`."}, {"sha": "1a8da00d9d616df75d96727cbe48496c1efbfd84", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -25,21 +25,21 @@ const ALLOWED_ODD_FUNCTIONS: [&str; 14] = [\n ];\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for operations where precedence may be unclear\n+    /// ### What it does\n+    /// Checks for operations where precedence may be unclear\n     /// and suggests to add parentheses. Currently it catches the following:\n     /// * mixed usage of arithmetic and bit shifting/combining operators without\n     /// parentheses\n     /// * a \"negative\" numeric literal (which is really a unary `-` followed by a\n     /// numeric literal)\n     ///   followed by a method call\n     ///\n-    /// **Why is this bad?** Not everyone knows the precedence of those operators by\n+    /// ### Why is this bad?\n+    /// Not everyone knows the precedence of those operators by\n     /// heart, so expressions like these may trip others trying to reason about the\n     /// code.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// * `1 << 2 + 3` equals 32, while `(1 << 2) + 3` equals 7\n     /// * `-1i32.abs()` equals -1, while `(-1i32).abs()` equals 1\n     pub PRECEDENCE,"}, {"sha": "c0d1f1eb6e65ece72a714c7c2587636c5ac7e2a4", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -20,16 +20,19 @@ use rustc_span::{sym, MultiSpan};\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint checks for function arguments of type `&String`\n+    /// ### What it does\n+    /// This lint checks for function arguments of type `&String`\n     /// or `&Vec` unless the references are mutable. It will also suggest you\n     /// replace `.clone()` calls with the appropriate `.to_owned()`/`to_string()`\n     /// calls.\n     ///\n-    /// **Why is this bad?** Requiring the argument to be of the specific size\n+    /// ### Why is this bad?\n+    /// Requiring the argument to be of the specific size\n     /// makes the function less useful for no benefit; slices in the form of `&[T]`\n     /// or `&str` usually suffice and can be obtained from other types, too.\n     ///\n-    /// **Known problems:** The lint does not follow data. So if you have an\n+    /// ### Known problems\n+    /// The lint does not follow data. So if you have an\n     /// argument `x` and write `let y = x; y.clone()` the lint will not suggest\n     /// changing that `.clone()` to `.to_owned()`.\n     ///\n@@ -59,7 +62,7 @@ declare_clippy_lint! {\n     /// other crates referencing it, of which you may not be aware. Carefully\n     /// deprecate the function before applying the lint suggestions in this case.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// // Bad\n     /// fn foo(&Vec<u32>) { .. }\n@@ -73,15 +76,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint checks for equality comparisons with `ptr::null`\n+    /// ### What it does\n+    /// This lint checks for equality comparisons with `ptr::null`\n     ///\n-    /// **Why is this bad?** It's easier and more readable to use the inherent\n+    /// ### Why is this bad?\n+    /// It's easier and more readable to use the inherent\n     /// `.is_null()`\n     /// method instead\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// // Bad\n     /// if x == ptr::null {\n@@ -99,19 +102,22 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint checks for functions that take immutable\n+    /// ### What it does\n+    /// This lint checks for functions that take immutable\n     /// references and return mutable ones.\n     ///\n-    /// **Why is this bad?** This is trivially unsound, as one can create two\n+    /// ### Why is this bad?\n+    /// This is trivially unsound, as one can create two\n     /// mutable references from the same (immutable!) source.\n     /// This [error](https://github.com/rust-lang/rust/issues/39465)\n     /// actually lead to an interim Rust release 1.15.1.\n     ///\n-    /// **Known problems:** To be on the conservative side, if there's at least one\n+    /// ### Known problems\n+    /// To be on the conservative side, if there's at least one\n     /// mutable reference with the output lifetime, this lint will not trigger.\n     /// In practice, this case is unlikely anyway.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// fn foo(&Foo) -> &mut Bar { .. }\n     /// ```\n@@ -121,13 +127,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint checks for invalid usages of `ptr::null`.\n-    ///\n-    /// **Why is this bad?** This causes undefined behavior.\n+    /// ### What it does\n+    /// This lint checks for invalid usages of `ptr::null`.\n     ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// This causes undefined behavior.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// // Bad. Undefined behavior\n     /// unsafe { std::slice::from_raw_parts(ptr::null(), 0); }"}, {"sha": "d6d7049fb61b2fd1a1ddfa36aac93773de388666", "filename": "clippy_lints/src/ptr_eq.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_eq.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,16 +8,15 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Use `std::ptr::eq` when applicable\n+    /// ### What it does\n+    /// Use `std::ptr::eq` when applicable\n     ///\n-    /// **Why is this bad?** `ptr::eq` can be used to compare `&T` references\n+    /// ### Why is this bad?\n+    /// `ptr::eq` can be used to compare `&T` references\n     /// (which coerce to `*const T` implicitly) by their address rather than\n     /// comparing the values they point to.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let a = &[1, 2, 3];\n     /// let b = &[1, 2, 3];"}, {"sha": "f1975056ddc9ba40751c82161bdc96f14cafc0fd", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,15 +8,15 @@ use rustc_span::sym;\n use std::fmt;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of the `offset` pointer method with a `usize` casted to an\n+    /// ### What it does\n+    /// Checks for usage of the `offset` pointer method with a `usize` casted to an\n     /// `isize`.\n     ///\n-    /// **Why is this bad?** If we\u2019re always increasing the pointer address, we can avoid the numeric\n+    /// ### Why is this bad?\n+    /// If we\u2019re always increasing the pointer address, we can avoid the numeric\n     /// cast by using the `add` method instead.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let vec = vec![b'a', b'b', b'c'];\n     /// let ptr = vec.as_ptr();"}, {"sha": "0e682c692c7a6146336e4e4de8c921fd462c751e", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,13 +13,13 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for expressions that could be replaced by the question mark operator.\n+    /// ### What it does\n+    /// Checks for expressions that could be replaced by the question mark operator.\n     ///\n-    /// **Why is this bad?** Question mark usage is more idiomatic.\n+    /// ### Why is this bad?\n+    /// Question mark usage is more idiomatic.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// if option.is_none() {\n     ///     return None;"}, {"sha": "0179bd48ee3cb2fd280c779b823993b1e148c164", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -18,14 +18,14 @@ use rustc_span::symbol::Ident;\n use std::cmp::Ordering;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for zipping a collection with the range of\n+    /// ### What it does\n+    /// Checks for zipping a collection with the range of\n     /// `0.._.len()`.\n     ///\n-    /// **Why is this bad?** The code is better expressed with `.enumerate()`.\n+    /// ### Why is this bad?\n+    /// The code is better expressed with `.enumerate()`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = vec![1];\n     /// x.iter().zip(0..x.len());\n@@ -41,13 +41,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for exclusive ranges where 1 is added to the\n+    /// ### What it does\n+    /// Checks for exclusive ranges where 1 is added to the\n     /// upper bound, e.g., `x..(y+1)`.\n     ///\n-    /// **Why is this bad?** The code is more readable with an inclusive range\n+    /// ### Why is this bad?\n+    /// The code is more readable with an inclusive range\n     /// like `x..=y`.\n     ///\n-    /// **Known problems:** Will add unnecessary pair of parentheses when the\n+    /// ### Known problems\n+    /// Will add unnecessary pair of parentheses when the\n     /// expression is not wrapped in a pair but starts with a opening parenthesis\n     /// and ends with a closing one.\n     /// I.e., `let _ = (f()+1)..(f()+1)` results in `let _ = ((f()+1)..=f())`.\n@@ -61,7 +64,7 @@ declare_clippy_lint! {\n     /// `RangeBounds` trait\n     /// ([#3307](https://github.com/rust-lang/rust-clippy/issues/3307)).\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// for x..(y+1) { .. }\n     /// ```\n@@ -75,18 +78,21 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for inclusive ranges where 1 is subtracted from\n+    /// ### What it does\n+    /// Checks for inclusive ranges where 1 is subtracted from\n     /// the upper bound, e.g., `x..=(y-1)`.\n     ///\n-    /// **Why is this bad?** The code is more readable with an exclusive range\n+    /// ### Why is this bad?\n+    /// The code is more readable with an exclusive range\n     /// like `x..y`.\n     ///\n-    /// **Known problems:** This will cause a warning that cannot be fixed if\n+    /// ### Known problems\n+    /// This will cause a warning that cannot be fixed if\n     /// the consumer of the range only accepts a specific range type, instead of\n     /// the generic `RangeBounds` trait\n     /// ([#3307](https://github.com/rust-lang/rust-clippy/issues/3307)).\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// for x..=(y-1) { .. }\n     /// ```\n@@ -100,16 +106,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for range expressions `x..y` where both `x` and `y`\n+    /// ### What it does\n+    /// Checks for range expressions `x..y` where both `x` and `y`\n     /// are constant and `x` is greater or equal to `y`.\n     ///\n-    /// **Why is this bad?** Empty ranges yield no values so iterating them is a no-op.\n+    /// ### Why is this bad?\n+    /// Empty ranges yield no values so iterating them is a no-op.\n     /// Moreover, trying to use a reversed range to index a slice will panic at run-time.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust,no_run\n     /// fn main() {\n     ///     (10..=0).for_each(|x| println!(\"{}\", x));\n@@ -133,16 +138,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for expressions like `x >= 3 && x < 8` that could\n+    /// ### What it does\n+    /// Checks for expressions like `x >= 3 && x < 8` that could\n     /// be more readably expressed as `(3..8).contains(x)`.\n     ///\n-    /// **Why is this bad?** `contains` expresses the intent better and has less\n+    /// ### Why is this bad?\n+    /// `contains` expresses the intent better and has less\n     /// failure modes (such as fencepost errors or using `||` instead of `&&`).\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // given\n     /// let x = 6;"}, {"sha": "530b3396abef698fd0c16baee09116f18c35f28b", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -32,17 +32,18 @@ macro_rules! unwrap_or_continue {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for a redundant `clone()` (and its relatives) which clones an owned\n+    /// ### What it does\n+    /// Checks for a redundant `clone()` (and its relatives) which clones an owned\n     /// value that is going to be dropped without further use.\n     ///\n-    /// **Why is this bad?** It is not always possible for the compiler to eliminate useless\n+    /// ### Why is this bad?\n+    /// It is not always possible for the compiler to eliminate useless\n     /// allocations and deallocations generated by redundant `clone()`s.\n     ///\n-    /// **Known problems:**\n-    ///\n+    /// ### Known problems\n     /// False-negatives: analysis performed by this lint is conservative and limited.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::path::Path;\n     /// # #[derive(Clone)]"}, {"sha": "a79b2fe76e2d57f100996e94239f5fbb1b1a96f1", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -14,15 +14,15 @@ use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Detects closures called in the same expression where they\n+    /// ### What it does\n+    /// Detects closures called in the same expression where they\n     /// are defined.\n     ///\n-    /// **Why is this bad?** It is unnecessarily adding to the expression's\n+    /// ### Why is this bad?\n+    /// It is unnecessarily adding to the expression's\n     /// complexity.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n     /// let a = (|| 42)()"}, {"sha": "68b256d29442acd199b3696f2094ed51129cfbd9", "filename": "clippy_lints/src/redundant_else.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_else.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,14 +6,16 @@ use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `else` blocks that can be removed without changing semantics.\n+    /// ### What it does\n+    /// Checks for `else` blocks that can be removed without changing semantics.\n     ///\n-    /// **Why is this bad?** The `else` block adds unnecessary indentation and verbosity.\n+    /// ### Why is this bad?\n+    /// The `else` block adds unnecessary indentation and verbosity.\n     ///\n-    /// **Known problems:** Some may prefer to keep the `else` block for clarity.\n-    ///\n-    /// **Example:**\n+    /// ### Known problems\n+    /// Some may prefer to keep the `else` block for clarity.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// fn my_func(count: u32) {\n     ///     if count == 0 {"}, {"sha": "47df4917510ff97eadbb5e784cc8e754e1805396", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,15 +8,15 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for fields in struct literals where shorthands\n+    /// ### What it does\n+    /// Checks for fields in struct literals where shorthands\n     /// could be used.\n     ///\n-    /// **Why is this bad?** If the field and variable names are the same,\n+    /// ### Why is this bad?\n+    /// If the field and variable names are the same,\n     /// the field name is redundant.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let bar: u8 = 123;\n     ///"}, {"sha": "59a55b9dffad4ed09a032383b2a0676187ad5d79", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -5,16 +5,15 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for items declared `pub(crate)` that are not crate visible because they\n+    /// ### What it does\n+    /// Checks for items declared `pub(crate)` that are not crate visible because they\n     /// are inside a private module.\n     ///\n-    /// **Why is this bad?** Writing `pub(crate)` is misleading when it's redundant due to the parent\n+    /// ### Why is this bad?\n+    /// Writing `pub(crate)` is misleading when it's redundant due to the parent\n     /// module's visibility.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// mod internal {\n     ///     pub(crate) fn internal_fn() { }"}, {"sha": "290348c4509ec0b028d11a6f39b377598c903711", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,17 +10,19 @@ use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for redundant slicing expressions which use the full range, and\n+    /// ### What it does\n+    /// Checks for redundant slicing expressions which use the full range, and\n     /// do not change the type.\n     ///\n-    /// **Why is this bad?** It unnecessarily adds complexity to the expression.\n+    /// ### Why is this bad?\n+    /// It unnecessarily adds complexity to the expression.\n     ///\n-    /// **Known problems:** If the type being sliced has an implementation of `Index<RangeFull>`\n+    /// ### Known problems\n+    /// If the type being sliced has an implementation of `Index<RangeFull>`\n     /// that actually changes anything then it can't be removed. However, this would be surprising\n     /// to people reading the code and should have a note with it.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```ignore\n     /// fn get_slice(x: &[u32]) -> &[u32] {\n     ///     &x[..]"}, {"sha": "d5a1a61da6bf4aac5cf769ee233a9faeeb3b4e19", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,14 +8,14 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for constants and statics with an explicit `'static` lifetime.\n+    /// ### What it does\n+    /// Checks for constants and statics with an explicit `'static` lifetime.\n     ///\n-    /// **Why is this bad?** Adding `'static` to every reference can create very\n+    /// ### Why is this bad?\n+    /// Adding `'static` to every reference can create very\n     /// complicated types.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// const FOO: &'static [(&'static str, &'static str, fn(&Bar) -> bool)] =\n     /// &[...]"}, {"sha": "65ab6cac4421905d564187fc5bbace7308782187", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,16 +9,18 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `&Option<&T>`.\n+    /// ### What it does\n+    /// Checks for usage of `&Option<&T>`.\n     ///\n-    /// **Why is this bad?** Since `&` is Copy, it's useless to have a\n+    /// ### Why is this bad?\n+    /// Since `&` is Copy, it's useless to have a\n     /// reference on `Option<&T>`.\n     ///\n-    /// **Known problems:** It may be irrelevant to use this lint on\n+    /// ### Known problems\n+    /// It may be irrelevant to use this lint on\n     /// public API code as it will make a breaking change to apply it.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust,ignore\n     /// let x: &Option<&u32> = &Some(&0u32);\n     /// ```"}, {"sha": "e0930d69ab9fecc4c39b2fd44b967032cd7d3021", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,15 +10,18 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::BytePos;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `*&` and `*&mut` in expressions.\n+    /// ### What it does\n+    /// Checks for usage of `*&` and `*&mut` in expressions.\n     ///\n-    /// **Why is this bad?** Immediately dereferencing a reference is no-op and\n+    /// ### Why is this bad?\n+    /// Immediately dereferencing a reference is no-op and\n     /// makes the code less clear.\n     ///\n-    /// **Known problems:** Multiple dereference/addrof pairs are not handled so\n+    /// ### Known problems\n+    /// Multiple dereference/addrof pairs are not handled so\n     /// the suggested fix for `x = **&&y` is `x = *&y`, which is still incorrect.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n     /// let a = f(*&mut b);\n@@ -101,13 +104,15 @@ impl EarlyLintPass for DerefAddrOf {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for references in expressions that use\n+    /// ### What it does\n+    /// Checks for references in expressions that use\n     /// auto dereference.\n     ///\n-    /// **Why is this bad?** The reference is a no-op and is automatically\n+    /// ### Why is this bad?\n+    /// The reference is a no-op and is automatically\n     /// dereferenced by the compiler and makes the code less clear.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// struct Point(u32, u32);\n     /// let point = Point(30, 20);"}, {"sha": "eab097337306be0e8090451909adff8152effe35", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,15 +11,15 @@ use rustc_span::source_map::{BytePos, Span};\n use std::convert::TryFrom;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks [regex](https://crates.io/crates/regex) creation\n+    /// ### What it does\n+    /// Checks [regex](https://crates.io/crates/regex) creation\n     /// (with `Regex::new`, `RegexBuilder::new`, or `RegexSet::new`) for correct\n     /// regex syntax.\n     ///\n-    /// **Why is this bad?** This will lead to a runtime panic.\n+    /// ### Why is this bad?\n+    /// This will lead to a runtime panic.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// Regex::new(\"|\")\n     /// ```\n@@ -29,18 +29,21 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for trivial [regex](https://crates.io/crates/regex)\n+    /// ### What it does\n+    /// Checks for trivial [regex](https://crates.io/crates/regex)\n     /// creation (with `Regex::new`, `RegexBuilder::new`, or `RegexSet::new`).\n     ///\n-    /// **Why is this bad?** Matching the regex can likely be replaced by `==` or\n+    /// ### Why is this bad?\n+    /// Matching the regex can likely be replaced by `==` or\n     /// `str::starts_with`, `str::ends_with` or `std::contains` or other `str`\n     /// methods.\n     ///\n-    /// **Known problems:** If the same regex is going to be applied to multiple\n+    /// ### Known problems\n+    /// If the same regex is going to be applied to multiple\n     /// inputs, the precomputations done by `Regex` construction can give\n     /// significantly better performance than any of the `str`-based methods.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// Regex::new(\"^foobar\")\n     /// ```"}, {"sha": "54b9c8b3275c61cb01bbd427142ae8c1b50eb3ff", "filename": "clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,21 +11,20 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `.repeat(1)` and suggest the following method for each types.\n+    /// ### What it does\n+    /// Checks for usage of `.repeat(1)` and suggest the following method for each types.\n     /// - `.to_string()` for `str`\n     /// - `.clone()` for `String`\n     /// - `.to_vec()` for `slice`\n     ///\n     /// The lint will evaluate constant expressions and values as arguments of `.repeat(..)` and emit a message if\n     /// they are equivalent to `1`. (Related discussion in [rust-clippy#7306](https://github.com/rust-lang/rust-clippy/issues/7306))\n     ///\n-    /// **Why is this bad?** For example, `String.repeat(1)` is equivalent to `.clone()`. If cloning\n+    /// ### Why is this bad?\n+    /// For example, `String.repeat(1)` is equivalent to `.clone()`. If cloning\n     /// the string is the intention behind this, `clone()` should be used.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// fn main() {\n     ///     let x = String::from(\"hello world\").repeat(1);"}, {"sha": "db4b1002ce1299b7be993157a9fe08d04c73031a", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -15,15 +15,15 @@ use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `let`-bindings, which are subsequently\n+    /// ### What it does\n+    /// Checks for `let`-bindings, which are subsequently\n     /// returned.\n     ///\n-    /// **Why is this bad?** It is just extraneous code. Remove it to make your code\n+    /// ### Why is this bad?\n+    /// It is just extraneous code. Remove it to make your code\n     /// more rusty.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn foo() -> String {\n     ///     let x = String::new();\n@@ -42,14 +42,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for return statements at the end of a block.\n+    /// ### What it does\n+    /// Checks for return statements at the end of a block.\n     ///\n-    /// **Why is this bad?** Removing the `return` and semicolon will make the code\n+    /// ### Why is this bad?\n+    /// Removing the `return` and semicolon will make the code\n     /// more rusty.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn foo(x: usize) -> usize {\n     ///     return x;"}, {"sha": "fbd65fef7d11be2ede59c3e3002fdadd44cda52a", "filename": "clippy_lints/src/self_assignment.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fself_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fself_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_assignment.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,16 +6,18 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for explicit self-assignments.\n+    /// ### What it does\n+    /// Checks for explicit self-assignments.\n     ///\n-    /// **Why is this bad?** Self-assignments are redundant and unlikely to be\n+    /// ### Why is this bad?\n+    /// Self-assignments are redundant and unlikely to be\n     /// intentional.\n     ///\n-    /// **Known problems:** If expression contains any deref coercions or\n+    /// ### Known problems\n+    /// If expression contains any deref coercions or\n     /// indexing operations they are assumed not to have any side effects.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// struct Event {\n     ///     id: usize,"}, {"sha": "2123a14cc1b8210725cb9a0a540799de4734b4be", "filename": "clippy_lints/src/self_named_constructor.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fself_named_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fself_named_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructor.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,14 +6,13 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns when constructors have the same name as their types.\n+    /// ### What it does\n+    /// Warns when constructors have the same name as their types.\n     ///\n-    /// **Why is this bad?** Repeating the name of the type is redundant.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Repeating the name of the type is redundant.\n     ///\n+    /// ### Example\n     /// ```rust,ignore\n     /// struct Foo {}\n     ///"}, {"sha": "6966230156cfa205060c6656f8b5ceb56a2f5df1", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,16 +9,15 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Looks for blocks of expressions and fires if the last expression returns\n+    /// ### What it does\n+    /// Looks for blocks of expressions and fires if the last expression returns\n     /// `()` but is not followed by a semicolon.\n     ///\n-    /// **Why is this bad?** The semicolon might be optional but when extending the block with new\n+    /// ### Why is this bad?\n+    /// The semicolon might be optional but when extending the block with new\n     /// code, it doesn't require a change in previous last line.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// fn main() {\n     ///     println!(\"Hello world\")"}, {"sha": "2cd0f85999cf5bca682dd2103c246a544870f9d5", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -5,14 +5,15 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for mis-uses of the serde API.\n+    /// ### What it does\n+    /// Checks for mis-uses of the serde API.\n     ///\n-    /// **Why is this bad?** Serde is very finnicky about how its API should be\n+    /// ### Why is this bad?\n+    /// Serde is very finnicky about how its API should be\n     /// used, but the type system can't be used to enforce it (yet?).\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:** Implementing `Visitor::visit_string` but not\n+    /// ### Example\n+    /// Implementing `Visitor::visit_string` but not\n     /// `Visitor::visit_str`.\n     pub SERDE_API_MISUSE,\n     correctness,"}, {"sha": "b28a37cabd40ca6608593e76bbc49f87e0464a6d", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -14,17 +14,20 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for bindings that shadow other bindings already in\n+    /// ### What it does\n+    /// Checks for bindings that shadow other bindings already in\n     /// scope, while just changing reference level or mutability.\n     ///\n-    /// **Why is this bad?** Not much, in fact it's a very common pattern in Rust\n+    /// ### Why is this bad?\n+    /// Not much, in fact it's a very common pattern in Rust\n     /// code. Still, some may opt to avoid it in their code base, they can set this\n     /// lint to `Warn`.\n     ///\n-    /// **Known problems:** This lint, as the other shadowing related lints,\n+    /// ### Known problems\n+    /// This lint, as the other shadowing related lints,\n     /// currently only catches very simple patterns.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let x = 1;\n     /// // Bad\n@@ -39,18 +42,21 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for bindings that shadow other bindings already in\n+    /// ### What it does\n+    /// Checks for bindings that shadow other bindings already in\n     /// scope, while reusing the original value.\n     ///\n-    /// **Why is this bad?** Not too much, in fact it's a common pattern in Rust\n+    /// ### Why is this bad?\n+    /// Not too much, in fact it's a common pattern in Rust\n     /// code. Still, some argue that name shadowing like this hurts readability,\n     /// because a value may be bound to different things depending on position in\n     /// the code.\n     ///\n-    /// **Known problems:** This lint, as the other shadowing related lints,\n+    /// ### Known problems\n+    /// This lint, as the other shadowing related lints,\n     /// currently only catches very simple patterns.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = 2;\n     /// let x = x + 1;\n@@ -66,21 +72,24 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for bindings that shadow other bindings already in\n+    /// ### What it does\n+    /// Checks for bindings that shadow other bindings already in\n     /// scope, either without a initialization or with one that does not even use\n     /// the original value.\n     ///\n-    /// **Why is this bad?** Name shadowing can hurt readability, especially in\n+    /// ### Why is this bad?\n+    /// Name shadowing can hurt readability, especially in\n     /// large code bases, because it is easy to lose track of the active binding at\n     /// any place in the code. This can be alleviated by either giving more specific\n     /// names to bindings or introducing more scopes to contain the bindings.\n     ///\n-    /// **Known problems:** This lint, as the other shadowing related lints,\n+    /// ### Known problems\n+    /// This lint, as the other shadowing related lints,\n     /// currently only catches very simple patterns. Note that\n     /// `allow`/`warn`/`deny`/`forbid` attributes only work on the function level\n     /// for this lint.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let y = 1;\n     /// # let z = 2;"}, {"sha": "f6487b8c46bd49b2438dfd943cbe71c9bf5116c0", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,15 +7,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{edition::Edition, symbol::kw, Span, Symbol};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checking for imports with single component use path.\n+    /// ### What it does\n+    /// Checking for imports with single component use path.\n     ///\n-    /// **Why is this bad?** Import with single component use path such as `use cratename;`\n+    /// ### Why is this bad?\n+    /// Import with single component use path such as `use cratename;`\n     /// is not necessary, and thus should be removed.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust,ignore\n     /// use regex;\n     ///"}, {"sha": "3e4e4a8d0c08b03ecdb077d7eecf899a8f34c18b", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,16 +11,16 @@ use rustc_middle::ty::{self, Ty, TyS, TypeAndMut};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Detects expressions where\n+    /// ### What it does\n+    /// Detects expressions where\n     /// `size_of::<T>` or `size_of_val::<T>` is used as a\n     /// count of elements of type `T`\n     ///\n-    /// **Why is this bad?** These functions expect a count\n+    /// ### Why is this bad?\n+    /// These functions expect a count\n     /// of `T` and not a number of bytes\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,no_run\n     /// # use std::ptr::copy_nonoverlapping;\n     /// # use std::mem::size_of;"}, {"sha": "3d039e13065607f7e1ffa8df4f8f34df6f16db7f", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,14 +13,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks slow zero-filled vector initialization\n+    /// ### What it does\n+    /// Checks slow zero-filled vector initialization\n     ///\n-    /// **Why is this bad?** These structures are non-idiomatic and less efficient than simply using\n+    /// ### Why is this bad?\n+    /// These structures are non-idiomatic and less efficient than simply using\n     /// `vec![0; len]`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use core::iter::repeat;\n     /// # let len = 4;"}, {"sha": "4ea1293d504d3e30a3e6cf94ac7e6fe4e143df23", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,22 +7,18 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// When sorting primitive values (integers, bools, chars, as well\n     /// as arrays, slices, and tuples of such items), it is better to\n     /// use an unstable sort than a stable sort.\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// Using a stable sort consumes more memory and cpu cycles. Because\n     /// values which compare equal are identical, preserving their\n     /// relative order (the guarantee that a stable sort provides) means\n     /// nothing, while the extra costs still apply.\n     ///\n-    /// **Known problems:**\n-    /// None\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let mut vec = vec![2, 1, 3];\n     /// vec.sort();"}, {"sha": "1a78a4968e5a3a0030b57de6c1e1518674312409", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -14,16 +14,15 @@ use rustc_span::source_map::Spanned;\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for string appends of the form `x = x + y` (without\n+    /// ### What it does\n+    /// Checks for string appends of the form `x = x + y` (without\n     /// `let`!).\n     ///\n-    /// **Why is this bad?** It's not really bad, but some people think that the\n+    /// ### Why is this bad?\n+    /// It's not really bad, but some people think that the\n     /// `.push_str(_)` method is more readable.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let mut x = \"Hello\".to_owned();\n     /// x = x + \", World\";\n@@ -38,11 +37,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for all instances of `x + _` where `x` is of type\n+    /// ### What it does\n+    /// Checks for all instances of `x + _` where `x` is of type\n     /// `String`, but only if [`string_add_assign`](#string_add_assign) does *not*\n     /// match.\n     ///\n-    /// **Why is this bad?** It's not bad in and of itself. However, this particular\n+    /// ### Why is this bad?\n+    /// It's not bad in and of itself. However, this particular\n     /// `Add` implementation is asymmetric (the other operand need not be `String`,\n     /// but `x` does), while addition as mathematically defined is symmetric, also\n     /// the `String::push_str(_)` function is a perfectly good replacement.\n@@ -52,10 +53,7 @@ declare_clippy_lint! {\n     /// in other languages is actually fine, which is why we decided to make this\n     /// particular lint `allow` by default.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let x = \"Hello\".to_owned();\n     /// x + \", World\";\n@@ -66,13 +64,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the `as_bytes` method called on string literals\n+    /// ### What it does\n+    /// Checks for the `as_bytes` method called on string literals\n     /// that contain only ASCII characters.\n     ///\n-    /// **Why is this bad?** Byte string literals (e.g., `b\"foo\"`) can be used\n+    /// ### Why is this bad?\n+    /// Byte string literals (e.g., `b\"foo\"`) can be used\n     /// instead. They are shorter but less discoverable than `as_bytes()`.\n     ///\n-    /// **Known Problems:**\n+    /// ### Known problems\n     /// `\"str\".as_bytes()` and the suggested replacement of `b\"str\"` are not\n     /// equivalent because they have different types. The former is `&[u8]`\n     /// while the latter is `&[u8; 3]`. That means in general they will have a\n@@ -94,7 +94,7 @@ declare_clippy_lint! {\n     /// `b\"str\"` but `&b\"str\"[..]`, which is a great deal of punctuation and not\n     /// more readable than a function call.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let bs = \"a byte string\".as_bytes();\n@@ -177,13 +177,13 @@ fn is_add(cx: &LateContext<'_>, src: &Expr<'_>, target: &Expr<'_>) -> bool {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Check if the string is transformed to byte array and casted back to string.\n+    /// ### What it does\n+    /// Check if the string is transformed to byte array and casted back to string.\n     ///\n-    /// **Why is this bad?** It's unnecessary, the string can be used directly.\n+    /// ### Why is this bad?\n+    /// It's unnecessary, the string can be used directly.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let _ = std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]).unwrap();\n     /// ```\n@@ -317,16 +317,15 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint checks for `.to_string()` method calls on values of type `&str`.\n+    /// ### What it does\n+    /// This lint checks for `.to_string()` method calls on values of type `&str`.\n     ///\n-    /// **Why is this bad?** The `to_string` method is also used on other types to convert them to a string.\n+    /// ### Why is this bad?\n+    /// The `to_string` method is also used on other types to convert them to a string.\n     /// When called on a `&str` it turns the `&str` into the owned variant `String`, which can be better\n     /// expressed with `.to_owned()`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // example code where clippy issues a warning\n     /// let _ = \"str\".to_string();\n@@ -366,14 +365,14 @@ impl LateLintPass<'_> for StrToString {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint checks for `.to_string()` method calls on values of type `String`.\n+    /// ### What it does\n+    /// This lint checks for `.to_string()` method calls on values of type `String`.\n     ///\n-    /// **Why is this bad?** The `to_string` method is also used on other types to convert them to a string.\n+    /// ### Why is this bad?\n+    /// The `to_string` method is also used on other types to convert them to a string.\n     /// When called on a `String` it only clones the `String`, which can be better expressed with `.clone()`.\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n     ///\n+    /// ### Example\n     /// ```rust\n     /// // example code where clippy issues a warning\n     /// let msg = String::from(\"Hello World\");"}, {"sha": "516fa3d95b4282cad0e8f803ec1209b2f3a03c7c", "filename": "clippy_lints/src/strlen_on_c_strings.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,16 +11,15 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{sym, Symbol};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `libc::strlen` on a `CString` or `CStr` value,\n+    /// ### What it does\n+    /// Checks for usage of `libc::strlen` on a `CString` or `CStr` value,\n     /// and suggest calling `as_bytes().len()` or `to_bytes().len()` respectively instead.\n     ///\n-    /// **Why is this bad?** This avoids calling an unsafe `libc` function.\n+    /// ### Why is this bad?\n+    /// This avoids calling an unsafe `libc` function.\n     /// Currently, it also avoids calculating the length.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust, ignore\n     /// use std::ffi::CString;\n     /// let cstring = CString::new(\"foo\").expect(\"CString::new failed\");"}, {"sha": "a8e962d1af3fa210167b4af6b01dd7971e94350e", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,20 +13,21 @@ use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Checks for unlikely usages of binary operators that are almost\n     /// certainly typos and/or copy/paste errors, given the other usages\n     /// of binary operators nearby.\n-    /// **Why is this bad?**\n+    ///\n+    /// ### Why is this bad?\n     /// They are probably bugs and if they aren't then they look like bugs\n     /// and you should add a comment explaining why you are doing such an\n     /// odd set of operations.\n-    /// **Known problems:**\n+    ///\n+    /// ### Known problems\n     /// There may be some false positives if you are trying to do something\n     /// unusual that happens to look like a typo.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// struct Vec3 {\n     ///     x: f64,"}, {"sha": "682fad00a13ee30d3e29db8676998d40d91e8490", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,14 +8,14 @@ use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Lints for suspicious operations in impls of arithmetic operators, e.g.\n+    /// ### What it does\n+    /// Lints for suspicious operations in impls of arithmetic operators, e.g.\n     /// subtracting elements in an Add impl.\n     ///\n-    /// **Why this is bad?** This is probably a typo or copy-and-paste error and not intended.\n+    /// ### Why is this bad?\n+    /// This is probably a typo or copy-and-paste error and not intended.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// impl Add for Foo {\n     ///     type Output = Foo;\n@@ -31,14 +31,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Lints for suspicious operations in impls of OpAssign, e.g.\n+    /// ### What it does\n+    /// Lints for suspicious operations in impls of OpAssign, e.g.\n     /// subtracting elements in an AddAssign impl.\n     ///\n-    /// **Why this is bad?** This is probably a typo or copy-and-paste error and not intended.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// This is probably a typo or copy-and-paste error and not intended.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// impl AddAssign for Foo {\n     ///     fn add_assign(&mut self, other: Foo) {"}, {"sha": "4fa8e77a67b783edb6dcb10fac3f4a6cdb2ad0fe", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,14 +12,14 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for manual swapping.\n+    /// ### What it does\n+    /// Checks for manual swapping.\n     ///\n-    /// **Why is this bad?** The `std::mem::swap` function exposes the intent better\n+    /// ### Why is this bad?\n+    /// The `std::mem::swap` function exposes the intent better\n     /// without deinitializing or copying either variable.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let mut a = 42;\n     /// let mut b = 1337;\n@@ -40,13 +40,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `foo = bar; bar = foo` sequences.\n-    ///\n-    /// **Why is this bad?** This looks like a failed attempt to swap.\n+    /// ### What it does\n+    /// Checks for `foo = bar; bar = foo` sequences.\n     ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// This looks like a failed attempt to swap.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let mut a = 1;\n     /// # let mut b = 2;"}, {"sha": "6a73b94d87e488ec6feaaa24f2d0119a637438a9", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,16 +7,16 @@ use rustc_span::source_map::{BytePos, Span};\n use std::convert::TryFrom;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks doc comments for usage of tab characters.\n+    /// ### What it does\n+    /// Checks doc comments for usage of tab characters.\n     ///\n-    /// **Why is this bad?** The rust style-guide promotes spaces instead of tabs for indentation.\n+    /// ### Why is this bad?\n+    /// The rust style-guide promotes spaces instead of tabs for indentation.\n     /// To keep a consistent view on the source, also doc comments should not have tabs.\n     /// Also, explaining ascii-diagrams containing tabs can get displayed incorrectly when the\n     /// display settings of the author and reader differ.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// ///\n     /// /// Struct to hold two strings:"}, {"sha": "a9da690339ccfaa997c50848f0d40d78a6a856bc", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -5,15 +5,15 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for construction of a structure or tuple just to\n+    /// ### What it does\n+    /// Checks for construction of a structure or tuple just to\n     /// assign a value in it.\n     ///\n-    /// **Why is this bad?** Readability. If the structure is only created to be\n+    /// ### Why is this bad?\n+    /// Readability. If the structure is only created to be\n     /// updated, why not write the structure you want in the first place?\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// (0, 0).0 = 1\n     /// ```"}, {"sha": "1c14a9199950cc5e3e1d070f6bf366ec63ecc35c", "filename": "clippy_lints/src/to_digit_is_some.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_digit_is_some.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -9,12 +9,14 @@ use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `.to_digit(..).is_some()` on `char`s.\n+    /// ### What it does\n+    /// Checks for `.to_digit(..).is_some()` on `char`s.\n     ///\n-    /// **Why is this bad?** This is a convoluted way of checking if a `char` is a digit. It's\n+    /// ### Why is this bad?\n+    /// This is a convoluted way of checking if a `char` is a digit. It's\n     /// more straight forward to use the dedicated `is_digit` method.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let c = 'c';\n     /// # let radix = 10;"}, {"sha": "b036ed9a3d2e7f48f6774f2a3475fafb9694dba2", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,15 +7,15 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for uses of `to_string()` in `Display` traits.\n+    /// ### What it does\n+    /// Checks for uses of `to_string()` in `Display` traits.\n     ///\n-    /// **Why is this bad?** Usually `to_string` is implemented indirectly\n+    /// ### Why is this bad?\n+    /// Usually `to_string` is implemented indirectly\n     /// via `Display`. Hence using it while implementing `Display` would\n     /// lead to infinite recursion.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// ```rust\n     /// use std::fmt;"}, {"sha": "79367c4230c2abbaaa842fd37a19bf24ff34c5dc", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,14 +11,14 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint warns about unnecessary type repetitions in trait bounds\n+    /// ### What it does\n+    /// This lint warns about unnecessary type repetitions in trait bounds\n     ///\n-    /// **Why is this bad?** Repeating the type for every bound makes the code\n+    /// ### Why is this bad?\n+    /// Repeating the type for every bound makes the code\n     /// less readable than combining the bounds\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// pub fn foo<T>(t: T) where T: Copy, T: Clone {}\n     /// ```\n@@ -34,15 +34,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for cases where generics are being used and multiple\n+    /// ### What it does\n+    /// Checks for cases where generics are being used and multiple\n     /// syntax specifications for trait bounds are used simultaneously.\n     ///\n-    /// **Why is this bad?** Duplicate bounds makes the code\n+    /// ### Why is this bad?\n+    /// Duplicate bounds makes the code\n     /// less readable than specifing them only once.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn func<T: Clone + Default>(arg: T) where T: Clone + Default {}\n     /// ```"}, {"sha": "33ec9c331ce5689c95055c7687823fd957539bbe", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 67, "deletions": 55, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -20,15 +20,18 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmutes that can't ever be correct on any\n+    /// ### What it does\n+    /// Checks for transmutes that can't ever be correct on any\n     /// architecture.\n     ///\n-    /// **Why is this bad?** It's basically guaranteed to be undefined behaviour.\n+    /// ### Why is this bad?\n+    /// It's basically guaranteed to be undefined behaviour.\n     ///\n-    /// **Known problems:** When accessing C, users might want to store pointer\n+    /// ### Known problems\n+    /// When accessing C, users might want to store pointer\n     /// sized objects in `extradata` arguments to save an allocation.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```ignore\n     /// let ptr: *const T = core::intrinsics::transmute('x')\n     /// ```\n@@ -39,15 +42,15 @@ declare_clippy_lint! {\n \n // FIXME: Move this to `complexity` again, after #5343 is fixed\n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmutes to the original type of the object\n+    /// ### What it does\n+    /// Checks for transmutes to the original type of the object\n     /// and transmutes that could be a cast.\n     ///\n-    /// **Why is this bad?** Readability. The code tricks people into thinking that\n+    /// ### Why is this bad?\n+    /// Readability. The code tricks people into thinking that\n     /// something complex is going on.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// core::intrinsics::transmute(t); // where the result type is the same as `t`'s\n     /// ```\n@@ -58,14 +61,14 @@ declare_clippy_lint! {\n \n // FIXME: Merge this lint with USELESS_TRANSMUTE once that is out of the nursery.\n declare_clippy_lint! {\n-    /// **What it does:**Checks for transmutes that could be a pointer cast.\n+    /// ### What it does\n+    ///Checks for transmutes that could be a pointer cast.\n     ///\n-    /// **Why is this bad?** Readability. The code tricks people into thinking that\n+    /// ### Why is this bad?\n+    /// Readability. The code tricks people into thinking that\n     /// something complex is going on.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// ```rust\n     /// # let p: *const [i32] = &[];\n@@ -82,14 +85,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmutes between a type `T` and `*T`.\n+    /// ### What it does\n+    /// Checks for transmutes between a type `T` and `*T`.\n     ///\n-    /// **Why is this bad?** It's easy to mistakenly transmute between a type and a\n+    /// ### Why is this bad?\n+    /// It's easy to mistakenly transmute between a type and a\n     /// pointer to that type.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// core::intrinsics::transmute(t) // where the result type is the same as\n     ///                                // `*t` or `&t`'s\n@@ -100,17 +103,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmutes from a pointer to a reference.\n+    /// ### What it does\n+    /// Checks for transmutes from a pointer to a reference.\n     ///\n-    /// **Why is this bad?** This can always be rewritten with `&` and `*`.\n+    /// ### Why is this bad?\n+    /// This can always be rewritten with `&` and `*`.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// - `mem::transmute` in statics and constants is stable from Rust 1.46.0,\n     /// while dereferencing raw pointer is not stable yet.\n     /// If you need to do this in those places,\n     /// you would have to use `transmute` instead.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// unsafe {\n     ///     let _: &T = std::mem::transmute(p); // where p: *const T\n@@ -125,11 +130,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmutes from an integer to a `char`.\n+    /// ### What it does\n+    /// Checks for transmutes from an integer to a `char`.\n     ///\n-    /// **Why is this bad?** Not every integer is a Unicode scalar value.\n+    /// ### Why is this bad?\n+    /// Not every integer is a Unicode scalar value.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// - [`from_u32`] which this lint suggests using is slower than `transmute`\n     /// as it needs to validate the input.\n     /// If you are certain that the input is always a valid Unicode scalar value,\n@@ -140,7 +147,7 @@ declare_clippy_lint! {\n     /// [`from_u32`]: https://doc.rust-lang.org/std/char/fn.from_u32.html\n     /// [`from_u32_unchecked`]: https://doc.rust-lang.org/std/char/fn.from_u32_unchecked.html\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = 1_u32;\n     /// unsafe {\n@@ -156,11 +163,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmutes from a `&[u8]` to a `&str`.\n+    /// ### What it does\n+    /// Checks for transmutes from a `&[u8]` to a `&str`.\n     ///\n-    /// **Why is this bad?** Not every byte slice is a valid UTF-8 string.\n+    /// ### Why is this bad?\n+    /// Not every byte slice is a valid UTF-8 string.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// - [`from_utf8`] which this lint suggests using is slower than `transmute`\n     /// as it needs to validate the input.\n     /// If you are certain that the input is always a valid UTF-8,\n@@ -171,7 +180,7 @@ declare_clippy_lint! {\n     /// [`from_utf8`]: https://doc.rust-lang.org/std/str/fn.from_utf8.html\n     /// [`from_utf8_unchecked`]: https://doc.rust-lang.org/std/str/fn.from_utf8_unchecked.html\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let b: &[u8] = &[1_u8, 2_u8];\n     /// unsafe {\n@@ -187,13 +196,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmutes from an integer to a `bool`.\n-    ///\n-    /// **Why is this bad?** This might result in an invalid in-memory representation of a `bool`.\n+    /// ### What it does\n+    /// Checks for transmutes from an integer to a `bool`.\n     ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// This might result in an invalid in-memory representation of a `bool`.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = 1_u8;\n     /// unsafe {\n@@ -209,14 +218,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmutes from an integer to a float.\n+    /// ### What it does\n+    /// Checks for transmutes from an integer to a float.\n     ///\n-    /// **Why is this bad?** Transmutes are dangerous and error-prone, whereas `from_bits` is intuitive\n+    /// ### Why is this bad?\n+    /// Transmutes are dangerous and error-prone, whereas `from_bits` is intuitive\n     /// and safe.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// unsafe {\n     ///     let _: f32 = std::mem::transmute(1_u32); // where x: u32\n@@ -231,14 +240,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmutes from a float to an integer.\n+    /// ### What it does\n+    /// Checks for transmutes from a float to an integer.\n     ///\n-    /// **Why is this bad?** Transmutes are dangerous and error-prone, whereas `to_bits` is intuitive\n+    /// ### Why is this bad?\n+    /// Transmutes are dangerous and error-prone, whereas `to_bits` is intuitive\n     /// and safe.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// unsafe {\n     ///     let _: u32 = std::mem::transmute(1f32);\n@@ -253,15 +262,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmutes from a pointer to a pointer, or\n+    /// ### What it does\n+    /// Checks for transmutes from a pointer to a pointer, or\n     /// from a reference to a reference.\n     ///\n-    /// **Why is this bad?** Transmutes are dangerous, and these can instead be\n+    /// ### Why is this bad?\n+    /// Transmutes are dangerous, and these can instead be\n     /// written as casts.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let ptr = &1u32 as *const u32;\n     /// unsafe {\n@@ -280,15 +289,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmutes between collections whose\n+    /// ### What it does\n+    /// Checks for transmutes between collections whose\n     /// types have different ABI, size or alignment.\n     ///\n-    /// **Why is this bad?** This is undefined behavior.\n+    /// ### Why is this bad?\n+    /// This is undefined behavior.\n     ///\n-    /// **Known problems:** Currently, we cannot know whether a type is a\n+    /// ### Known problems\n+    /// Currently, we cannot know whether a type is a\n     /// collection, so we just lint the ones that come with `std`.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // different size, therefore likely out-of-bounds memory access\n     /// // You absolutely do not want this in your code!"}, {"sha": "a67fa7922059ce865276fce368d7c5fe4a1d42a4", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,15 +10,18 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for transmute calls which would receive a null pointer.\n+    /// ### What it does\n+    /// Checks for transmute calls which would receive a null pointer.\n     ///\n-    /// **Why is this bad?** Transmuting a null pointer is undefined behavior.\n+    /// ### Why is this bad?\n+    /// Transmuting a null pointer is undefined behavior.\n     ///\n-    /// **Known problems:** Not all cases can be detected at the moment of this writing.\n+    /// ### Known problems\n+    /// Not all cases can be detected at the moment of this writing.\n     /// For example, variables which hold a null pointer and are then fed to a `transmute`\n     /// call, aren't detectable yet.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let null_ref: &u64 = unsafe { std::mem::transmute(0 as *const u64) };\n     /// ```"}, {"sha": "1196271d5dd139b6aee2b530a32164ef1c0426e4", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,16 +13,16 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usages of `Err(x)?`.\n+    /// ### What it does\n+    /// Checks for usages of `Err(x)?`.\n     ///\n-    /// **Why is this bad?** The `?` operator is designed to allow calls that\n+    /// ### Why is this bad?\n+    /// The `?` operator is designed to allow calls that\n     /// can fail to be easily chained. For example, `foo()?.bar()` or\n     /// `foo(bar()?)`. Because `Err(x)?` can't be used that way (it will\n     /// always return), it is more clear to write `return Err(x)`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn foo(fail: bool) -> Result<i32, String> {\n     ///     if fail {"}, {"sha": "ad7409fe3a9b7d1fe1f67ce589d850b41ae5a664", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 53, "deletions": 41, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -20,16 +20,16 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for use of `Box<Vec<_>>` anywhere in the code.\n+    /// ### What it does\n+    /// Checks for use of `Box<Vec<_>>` anywhere in the code.\n     /// Check the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n     ///\n-    /// **Why is this bad?** `Vec` already keeps its contents in a separate area on\n+    /// ### Why is this bad?\n+    /// `Vec` already keeps its contents in a separate area on\n     /// the heap. So if you `Box` it, you just add another level of indirection\n     /// without any benefit whatsoever.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// struct X {\n     ///     values: Box<Vec<Foo>>,\n@@ -49,16 +49,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for use of `Vec<Box<T>>` where T: Sized anywhere in the code.\n+    /// ### What it does\n+    /// Checks for use of `Vec<Box<T>>` where T: Sized anywhere in the code.\n     /// Check the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n     ///\n-    /// **Why is this bad?** `Vec` already keeps its contents in a separate area on\n+    /// ### Why is this bad?\n+    /// `Vec` already keeps its contents in a separate area on\n     /// the heap. So if you `Box` its contents, you just add another level of indirection.\n     ///\n-    /// **Known problems:** Vec<Box<T: Sized>> makes sense if T is a large type (see [#3530](https://github.com/rust-lang/rust-clippy/issues/3530),\n+    /// ### Known problems\n+    /// Vec<Box<T: Sized>> makes sense if T is a large type (see [#3530](https://github.com/rust-lang/rust-clippy/issues/3530),\n     /// 1st comment).\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// struct X {\n     ///     values: Vec<Box<i32>>,\n@@ -78,19 +81,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for use of `Option<Option<_>>` in function signatures and type\n+    /// ### What it does\n+    /// Checks for use of `Option<Option<_>>` in function signatures and type\n     /// definitions\n     ///\n-    /// **Why is this bad?** `Option<_>` represents an optional value. `Option<Option<_>>`\n+    /// ### Why is this bad?\n+    /// `Option<_>` represents an optional value. `Option<Option<_>>`\n     /// represents an optional optional value which is logically the same thing as an optional\n     /// value but has an unneeded extra level of wrapping.\n     ///\n     /// If you have a case where `Some(Some(_))`, `Some(None)` and `None` are distinct cases,\n     /// consider a custom `enum` instead, with clear names for each case.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example**\n+    /// ### Example\n     /// ```rust\n     /// fn get_data() -> Option<Option<u32>> {\n     ///     None\n@@ -116,10 +119,12 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of any `LinkedList`, suggesting to use a\n+    /// ### What it does\n+    /// Checks for usage of any `LinkedList`, suggesting to use a\n     /// `Vec` or a `VecDeque` (formerly called `RingBuf`).\n     ///\n-    /// **Why is this bad?** Gankro says:\n+    /// ### Why is this bad?\n+    /// Gankro says:\n     ///\n     /// > The TL;DR of `LinkedList` is that it's built on a massive amount of\n     /// pointers and indirection.\n@@ -138,10 +143,11 @@ declare_clippy_lint! {\n     /// can still be better\n     /// > because of how expensive it is to seek to the middle of a `LinkedList`.\n     ///\n-    /// **Known problems:** False positives \u2013 the instances where using a\n+    /// ### Known problems\n+    /// False positives \u2013 the instances where using a\n     /// `LinkedList` makes sense are few and far between, but they can still happen.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::collections::LinkedList;\n     /// let x: LinkedList<usize> = LinkedList::new();\n@@ -152,15 +158,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for use of `&Box<T>` anywhere in the code.\n+    /// ### What it does\n+    /// Checks for use of `&Box<T>` anywhere in the code.\n     /// Check the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n     ///\n-    /// **Why is this bad?** Any `&Box<T>` can also be a `&T`, which is more\n+    /// ### Why is this bad?\n+    /// Any `&Box<T>` can also be a `&T`, which is more\n     /// general.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// fn foo(bar: &Box<T>) { ... }\n     /// ```\n@@ -176,14 +182,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for use of redundant allocations anywhere in the code.\n+    /// ### What it does\n+    /// Checks for use of redundant allocations anywhere in the code.\n     ///\n-    /// **Why is this bad?** Expressions such as `Rc<&T>`, `Rc<Rc<T>>`, `Rc<Arc<T>>`, `Rc<Box<T>>`, Arc<&T>`, `Arc<Rc<T>>`,\n+    /// ### Why is this bad?\n+    /// Expressions such as `Rc<&T>`, `Rc<Rc<T>>`, `Rc<Arc<T>>`, `Rc<Box<T>>`, Arc<&T>`, `Arc<Rc<T>>`,\n     /// `Arc<Arc<T>>`, `Arc<Box<T>>`, `Box<&T>`, `Box<Rc<T>>`, `Box<Arc<T>>`, `Box<Box<T>>`, add an unnecessary level of indirection.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::rc::Rc;\n     /// fn foo(bar: Rc<&usize>) {}\n@@ -200,9 +206,11 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `Rc<T>` and `Arc<T>` when `T` is a mutable buffer type such as `String` or `Vec`.\n+    /// ### What it does\n+    /// Checks for `Rc<T>` and `Arc<T>` when `T` is a mutable buffer type such as `String` or `Vec`.\n     ///\n-    /// **Why is this bad?** Expressions such as `Rc<String>` usually have no advantage over `Rc<str>`, since\n+    /// ### Why is this bad?\n+    /// Expressions such as `Rc<String>` usually have no advantage over `Rc<str>`, since\n     /// it is larger and involves an extra level of indirection, and doesn't implement `Borrow<str>`.\n     ///\n     /// While mutating a buffer type would still be possible with `Rc::get_mut()`, it only\n@@ -211,10 +219,11 @@ declare_clippy_lint! {\n     /// type with an interior mutable container (such as `RefCell` or `Mutex`) would normally\n     /// be used.\n     ///\n-    /// **Known problems:** This pattern can be desirable to avoid the overhead of a `RefCell` or `Mutex` for\n+    /// ### Known problems\n+    /// This pattern can be desirable to avoid the overhead of a `RefCell` or `Mutex` for\n     /// cases where mutation only happens before there are any additional references.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// # use std::rc::Rc;\n     /// fn foo(interned: Rc<String>) { ... }\n@@ -231,15 +240,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for types used in structs, parameters and `let`\n+    /// ### What it does\n+    /// Checks for types used in structs, parameters and `let`\n     /// declarations above a certain complexity threshold.\n     ///\n-    /// **Why is this bad?** Too complex types make the code less readable. Consider\n+    /// ### Why is this bad?\n+    /// Too complex types make the code less readable. Consider\n     /// using a `type` definition to simplify them.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::rc::Rc;\n     /// struct Foo {\n@@ -252,16 +261,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `Rc<Mutex<T>>`.\n+    /// ### What it does\n+    /// Checks for `Rc<Mutex<T>>`.\n     ///\n-    /// **Why is this bad?** `Rc` is used in single thread and `Mutex` is used in multi thread.\n+    /// ### Why is this bad?\n+    /// `Rc` is used in single thread and `Mutex` is used in multi thread.\n     /// Consider using `Rc<RefCell<T>>` in single thread or `Arc<Mutex<T>>` in multi thread.\n     ///\n-    /// **Known problems:** Sometimes combining generic types can lead to the requirement that a\n+    /// ### Known problems\n+    /// Sometimes combining generic types can lead to the requirement that a\n     /// type use Rc in conjunction with Mutex. We must consider those cases false positives, but\n     /// alas they are quite hard to rule out. Luckily they are also rare.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// use std::rc::Rc;\n     /// use std::sync::Mutex;"}, {"sha": "47571e608c7803b16efc859a1d71ee784ca06971", "filename": "clippy_lints/src/undropped_manually_drops.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,15 +6,17 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Prevents the safe `std::mem::drop` function from being called on `std::mem::ManuallyDrop`.\n+    /// ### What it does\n+    /// Prevents the safe `std::mem::drop` function from being called on `std::mem::ManuallyDrop`.\n     ///\n-    /// **Why is this bad?** The safe `drop` function does not drop the inner value of a `ManuallyDrop`.\n+    /// ### Why is this bad?\n+    /// The safe `drop` function does not drop the inner value of a `ManuallyDrop`.\n     ///\n-    /// **Known problems:** Does not catch cases if the user binds `std::mem::drop`\n+    /// ### Known problems\n+    /// Does not catch cases if the user binds `std::mem::drop`\n     /// to a different name and calls it that way.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// struct S;\n     /// drop(std::mem::ManuallyDrop::new(S));"}, {"sha": "f337dec8f2b9663faf88299154394ba35e8c49ba", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,32 +10,33 @@ use rustc_span::source_map::Span;\n use unicode_normalization::UnicodeNormalization;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for invisible Unicode characters in the code.\n+    /// ### What it does\n+    /// Checks for invisible Unicode characters in the code.\n     ///\n-    /// **Why is this bad?** Having an invisible character in the code makes for all\n+    /// ### Why is this bad?\n+    /// Having an invisible character in the code makes for all\n     /// sorts of April fools, but otherwise is very much frowned upon.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:** You don't see it, but there may be a zero-width space or soft hyphen\n+    /// ### Example\n+    /// You don't see it, but there may be a zero-width space or soft hyphen\n     /// some\u00adwhere in this text.\n     pub INVISIBLE_CHARACTERS,\n     correctness,\n     \"using an invisible character in a string literal, which is confusing\"\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for non-ASCII characters in string literals.\n+    /// ### What it does\n+    /// Checks for non-ASCII characters in string literals.\n     ///\n-    /// **Why is this bad?** Yeah, we know, the 90's called and wanted their charset\n+    /// ### Why is this bad?\n+    /// Yeah, we know, the 90's called and wanted their charset\n     /// back. Even so, there still are editors and other programs out there that\n     /// don't work well with Unicode. So if the code is meant to be used\n     /// internationally, on multiple operating systems, or has other portability\n     /// requirements, activating this lint could be useful.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = String::from(\"\u20ac\");\n     /// ```\n@@ -49,16 +50,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for string literals that contain Unicode in a form\n+    /// ### What it does\n+    /// Checks for string literals that contain Unicode in a form\n     /// that is not equal to its\n     /// [NFC-recomposition](http://www.unicode.org/reports/tr15/#Norm_Forms).\n     ///\n-    /// **Why is this bad?** If such a string is compared to another, the results\n+    /// ### Why is this bad?\n+    /// If such a string is compared to another, the results\n     /// may be surprising.\n     ///\n-    /// **Known problems** None.\n-    ///\n-    /// **Example:** You may not see it, but \"a\u0300\"\" and \"\u00e0\"\" aren't the same string. The\n+    /// ### Example\n+    /// You may not see it, but \"a\u0300\"\" and \"\u00e0\"\" aren't the same string. The\n     /// former when escaped is actually `\"a\\u{300}\"` while the latter is `\"\\u{e0}\"`.\n     pub UNICODE_NOT_NFC,\n     pedantic,"}, {"sha": "900d453176071a3f9eb74177e494899418b75022", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,20 +10,22 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{BytePos, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for functions that expect closures of type\n+    /// ### What it does\n+    /// Checks for functions that expect closures of type\n     /// Fn(...) -> Ord where the implemented closure returns the unit type.\n     /// The lint also suggests to remove the semi-colon at the end of the statement if present.\n     ///\n-    /// **Why is this bad?** Likely, returning the unit type is unintentional, and\n+    /// ### Why is this bad?\n+    /// Likely, returning the unit type is unintentional, and\n     /// could simply be caused by an extra semi-colon. Since () implements Ord\n     /// it doesn't cause a compilation error.\n     /// This is the same reasoning behind the unit_cmp lint.\n     ///\n-    /// **Known problems:** If returning unit is intentional, then there is no\n+    /// ### Known problems\n+    /// If returning unit is intentional, then there is no\n     /// way of specifying this without triggering needless_return lint\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let mut twins = vec!((1, 1), (2, 2));\n     /// twins.sort_by_key(|x| { x.1; });"}, {"sha": "66b1abbe50b9d389bc623fbf3d1324fab541f07b", "filename": "clippy_lints/src/unit_types/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,14 +8,14 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for binding a unit value.\n+    /// ### What it does\n+    /// Checks for binding a unit value.\n     ///\n-    /// **Why is this bad?** A unit value cannot usefully be used anywhere. So\n+    /// ### Why is this bad?\n+    /// A unit value cannot usefully be used anywhere. So\n     /// binding one is kind of pointless.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// let x = {\n     ///     1;\n@@ -27,16 +27,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for comparisons to unit. This includes all binary\n+    /// ### What it does\n+    /// Checks for comparisons to unit. This includes all binary\n     /// comparisons (like `==` and `<`) and asserts.\n     ///\n-    /// **Why is this bad?** Unit is always equal to itself, and thus is just a\n+    /// ### Why is this bad?\n+    /// Unit is always equal to itself, and thus is just a\n     /// clumsily written constant. Mostly this happens when someone accidentally\n     /// adds semicolons at the end of the operands.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # fn foo() {};\n     /// # fn bar() {};\n@@ -74,14 +74,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for passing a unit value as an argument to a function without using a\n+    /// ### What it does\n+    /// Checks for passing a unit value as an argument to a function without using a\n     /// unit literal (`()`).\n     ///\n-    /// **Why is this bad?** This is likely the result of an accidental semicolon.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// This is likely the result of an accidental semicolon.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// foo({\n     ///     let a = bar();"}, {"sha": "1eafdee03521c31ea7dac69e7ae7d5906e8b7bad", "filename": "clippy_lints/src/unnamed_address.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funnamed_address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funnamed_address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnamed_address.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,16 +7,15 @@ use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for comparisons with an address of a function item.\n+    /// ### What it does\n+    /// Checks for comparisons with an address of a function item.\n     ///\n-    /// **Why is this bad?** Function item address is not guaranteed to be unique and could vary\n+    /// ### Why is this bad?\n+    /// Function item address is not guaranteed to be unique and could vary\n     /// between different code generation units. Furthermore different function items could have\n     /// the same address after being merged together.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// type F = fn();\n     /// fn a() {}\n@@ -31,17 +30,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for comparisons with an address of a trait vtable.\n+    /// ### What it does\n+    /// Checks for comparisons with an address of a trait vtable.\n     ///\n-    /// **Why is this bad?** Comparing trait objects pointers compares an vtable addresses which\n+    /// ### Why is this bad?\n+    /// Comparing trait objects pointers compares an vtable addresses which\n     /// are not guaranteed to be unique and could vary between different code generation units.\n     /// Furthermore vtables for different types could have the same address after being merged\n     /// together.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust,ignore\n     /// let a: Rc<dyn Trait> = ...\n     /// let b: Rc<dyn Trait> = ..."}, {"sha": "4cfd2df551f1bcda7b80e832309a9b3a8f3b5453", "filename": "clippy_lints/src/unnecessary_self_imports.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,16 +7,18 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::kw;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for imports ending in `::{self}`.\n+    /// ### What it does\n+    /// Checks for imports ending in `::{self}`.\n     ///\n-    /// **Why is this bad?** In most cases, this can be written much more cleanly by omitting `::{self}`.\n+    /// ### Why is this bad?\n+    /// In most cases, this can be written much more cleanly by omitting `::{self}`.\n     ///\n-    /// **Known problems:** Removing `::{self}` will cause any non-module items at the same path to also be imported.\n+    /// ### Known problems\n+    /// Removing `::{self}` will cause any non-module items at the same path to also be imported.\n     /// This might cause a naming conflict (https://github.com/rust-lang/rustfmt/issues/3568). This lint makes no attempt\n     /// to detect this scenario and that is why it is a restriction lint.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// use std::io::{self};\n     /// ```"}, {"sha": "6fc5707a4eeff987ad166fb277031996a5d3b6f3", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,21 +12,20 @@ use rustc_span::symbol::Ident;\n use std::iter;\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Detects uses of `Vec::sort_by` passing in a closure\n     /// which compares the two arguments, either directly or indirectly.\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// It is more clear to use `Vec::sort_by_key` (or `Vec::sort` if\n     /// possible) than to use `Vec::sort_by` and a more complicated\n     /// closure.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// If the suggested `Vec::sort_by_key` uses Reverse and it isn't already\n     /// imported by a use statement, then it will need to be added manually.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # struct A;\n     /// # impl A { fn foo(&self) {} }"}, {"sha": "7a62b21937ff04a4fbfb3e5aca2d5212fc556d12", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,15 +13,17 @@ use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for private functions that only return `Ok` or `Some`.\n+    /// ### What it does\n+    /// Checks for private functions that only return `Ok` or `Some`.\n     ///\n-    /// **Why is this bad?** It is not meaningful to wrap values when no `None` or `Err` is returned.\n+    /// ### Why is this bad?\n+    /// It is not meaningful to wrap values when no `None` or `Err` is returned.\n     ///\n-    /// **Known problems:** There can be false positives if the function signature is designed to\n+    /// ### Known problems\n+    /// There can be false positives if the function signature is designed to\n     /// fit some external requirement.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// fn get_cool_number(a: bool, b: bool) -> Option<i32> {\n     ///     if a && b {"}, {"sha": "9acfbc994b382f4c886eb27b0eebe5a3b60d7e5d", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -17,22 +17,17 @@ use std::cell::Cell;\n use std::mem;\n \n declare_clippy_lint! {\n-    /// **What it does:**\n-    ///\n+    /// ### What it does\n     /// Checks for unnested or-patterns, e.g., `Some(0) | Some(2)` and\n     /// suggests replacing the pattern with a nested one, `Some(0 | 2)`.\n     ///\n     /// Another way to think of this is that it rewrites patterns in\n     /// *disjunctive normal form (DNF)* into *conjunctive normal form (CNF)*.\n     ///\n-    /// **Why is this bad?**\n-    ///\n+    /// ### Why is this bad?\n     /// In the example above, `Some` is repeated, which unncessarily complicates the pattern.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// fn main() {\n     ///     if let Some(0) | Some(2) = Some(0) {}"}, {"sha": "3c694af2b9deea410fae420b37d0887ab5e7a8f9", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,15 +6,15 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for imports that remove \"unsafe\" from an item's\n+    /// ### What it does\n+    /// Checks for imports that remove \"unsafe\" from an item's\n     /// name.\n     ///\n-    /// **Why is this bad?** Renaming makes it less clear which traits and\n+    /// ### Why is this bad?\n+    /// Renaming makes it less clear which traits and\n     /// structures are unsafe.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// use std::cell::{UnsafeCell as TotallySafeCell};\n     ///"}, {"sha": "3a6a07c522630b22ce7b2dab5297c3828a6eb68f", "filename": "clippy_lints/src/unused_async.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,16 +7,15 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for functions that are declared `async` but have no `.await`s inside of them.\n+    /// ### What it does\n+    /// Checks for functions that are declared `async` but have no `.await`s inside of them.\n     ///\n-    /// **Why is this bad?** Async functions with no async code create overhead, both mentally and computationally.\n+    /// ### Why is this bad?\n+    /// Async functions with no async code create overhead, both mentally and computationally.\n     /// Callers of async methods either need to be calling from an async function themselves or run it on an executor, both of which\n     /// causes runtime overhead and hassle for the caller.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// async fn get_random_number() -> i64 {"}, {"sha": "82bc4a6d15343d2ef09dbc9b9aa7e86099e27493", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -5,19 +5,22 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for unused written/read amount.\n+    /// ### What it does\n+    /// Checks for unused written/read amount.\n     ///\n-    /// **Why is this bad?** `io::Write::write(_vectored)` and\n+    /// ### Why is this bad?\n+    /// `io::Write::write(_vectored)` and\n     /// `io::Read::read(_vectored)` are not guaranteed to\n     /// process the entire buffer. They return how many bytes were processed, which\n     /// might be smaller\n     /// than a given buffer's length. If you don't need to deal with\n     /// partial-write/read, use\n     /// `write_all`/`read_exact` instead.\n     ///\n-    /// **Known problems:** Detects only common patterns.\n+    /// ### Known problems\n+    /// Detects only common patterns.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// use std::io;\n     /// fn foo<W: io::Write>(w: &mut W) -> io::Result<()> {"}, {"sha": "658ac81f6eac8d4e477ed3fa11ab666f03db7770", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,14 +6,14 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks methods that contain a `self` argument but don't use it\n+    /// ### What it does\n+    /// Checks methods that contain a `self` argument but don't use it\n     ///\n-    /// **Why is this bad?** It may be clearer to define the method as an associated function instead\n+    /// ### Why is this bad?\n+    /// It may be clearer to define the method as an associated function instead\n     /// of an instance method if it doesn't require `self`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// struct A;\n     /// impl A {"}, {"sha": "9ed5e585f841d9bb8f92ee8b36507d8c386c1bc3", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,15 +10,15 @@ use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for unit (`()`) expressions that can be removed.\n+    /// ### What it does\n+    /// Checks for unit (`()`) expressions that can be removed.\n     ///\n-    /// **Why is this bad?** Such expressions add no value, but can make the code\n+    /// ### Why is this bad?\n+    /// Such expressions add no value, but can make the code\n     /// less readable. Depending on formatting they can make a `break` or `return`\n     /// statement look like a function call.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// fn return_unit() -> () {\n     ///     ()"}, {"sha": "c5b8acb9982d888b2666758e43e56f0e0a48ca53", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,13 +13,13 @@ use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls of `unwrap[_err]()` that cannot fail.\n+    /// ### What it does\n+    /// Checks for calls of `unwrap[_err]()` that cannot fail.\n     ///\n-    /// **Why is this bad?** Using `if let` or `match` is more idiomatic.\n+    /// ### Why is this bad?\n+    /// Using `if let` or `match` is more idiomatic.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let option = Some(0);\n     /// # fn do_something_with(_x: usize) {}\n@@ -43,14 +43,17 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls of `unwrap[_err]()` that will always fail.\n+    /// ### What it does\n+    /// Checks for calls of `unwrap[_err]()` that will always fail.\n     ///\n-    /// **Why is this bad?** If panicking is desired, an explicit `panic!()` should be used.\n+    /// ### Why is this bad?\n+    /// If panicking is desired, an explicit `panic!()` should be used.\n     ///\n-    /// **Known problems:** This lint only checks `if` conditions not assignments.\n+    /// ### Known problems\n+    /// This lint only checks `if` conditions not assignments.\n     /// So something like `let x: Option<()> = None; x.unwrap();` will not be recognized.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let option = Some(0);\n     /// # fn do_something_with(_x: usize) {}"}, {"sha": "6eadd1fc1c93363159d9597fa9ecb1bfb17e7e83", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,13 +12,16 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for functions of type Result that contain `expect()` or `unwrap()`\n+    /// ### What it does\n+    /// Checks for functions of type Result that contain `expect()` or `unwrap()`\n     ///\n-    /// **Why is this bad?** These functions promote recoverable errors to non-recoverable errors which may be undesirable in code bases which wish to avoid panics.\n+    /// ### Why is this bad?\n+    /// These functions promote recoverable errors to non-recoverable errors which may be undesirable in code bases which wish to avoid panics.\n     ///\n-    /// **Known problems:** This can cause false positives in functions that handle both recoverable and non recoverable errors.\n+    /// ### Known problems\n+    /// This can cause false positives in functions that handle both recoverable and non recoverable errors.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// Before:\n     /// ```rust\n     /// fn divisible_by_3(i_str: String) -> Result<(), String> {"}, {"sha": "7fa0e23ee73eae572a8d4e8b8965f0809c46d812", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,22 +8,24 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for fully capitalized names and optionally names containing a capitalized acronym.\n+    /// ### What it does\n+    /// Checks for fully capitalized names and optionally names containing a capitalized acronym.\n     ///\n-    /// **Why is this bad?** In CamelCase, acronyms count as one word.\n+    /// ### Why is this bad?\n+    /// In CamelCase, acronyms count as one word.\n     /// See [naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#casing-conforms-to-rfc-430-c-case)\n     /// for more.\n     ///\n     /// By default, the lint only triggers on fully-capitalized names.\n     /// You can use the `upper-case-acronyms-aggressive: true` config option to enable linting\n     /// on all camel case names\n     ///\n-    /// **Known problems:** When two acronyms are contiguous, the lint can't tell where\n+    /// ### Known problems\n+    /// When two acronyms are contiguous, the lint can't tell where\n     /// the first acronym ends and the second starts, so it suggests to lowercase all of\n     /// the letters in the second acronym.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// struct HTTPResponse;\n     /// ```"}, {"sha": "fbd552186df8652d1fee62ac3940605757606514", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -20,19 +20,20 @@ use rustc_span::Span;\n use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for unnecessary repetition of structure name when a\n+    /// ### What it does\n+    /// Checks for unnecessary repetition of structure name when a\n     /// replacement with `Self` is applicable.\n     ///\n-    /// **Why is this bad?** Unnecessary repetition. Mixed use of `Self` and struct\n+    /// ### Why is this bad?\n+    /// Unnecessary repetition. Mixed use of `Self` and struct\n     /// name\n     /// feels inconsistent.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// - Unaddressed false negative in fn bodies of trait implementations\n     /// - False positive with assotiated types in traits (#4140)\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// struct Foo {}\n     /// impl Foo {"}, {"sha": "2861b43291901dfe493443d2e576d6dbd7ffea38", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -12,15 +12,14 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` calls\n+    /// ### What it does\n+    /// Checks for `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` calls\n     /// which uselessly convert to the same type.\n     ///\n-    /// **Why is this bad?** Redundant code.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n+    /// Redundant code.\n     ///\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// // format!() returns a `String`"}, {"sha": "61fd375a9892ca068e25f08179fcd61a4a022d89", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,9 +13,10 @@ use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Generates clippy code that detects the offending pattern\n+    /// ### What it does\n+    /// Generates clippy code that detects the offending pattern\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// // ./tests/ui/my_lint.rs\n     /// fn foo() {"}, {"sha": "f7ddee12dcf64902a3d820c298e2d835b30f4fb7", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -8,10 +8,11 @@ use rustc_session::Session;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Dumps every ast/hir node which has the `#[clippy::dump]`\n+    /// ### What it does\n+    /// Dumps every ast/hir node which has the `#[clippy::dump]`\n     /// attribute\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// #[clippy::dump]\n     /// extern crate foo;"}, {"sha": "d660008e7d18441d5249f19621cec9c450fc9c26", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 55, "deletions": 54, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -36,29 +36,33 @@ use std::borrow::{Borrow, Cow};\n pub mod metadata_collector;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for various things we like to keep tidy in clippy.\n+    /// ### What it does\n+    /// Checks for various things we like to keep tidy in clippy.\n     ///\n-    /// **Why is this bad?** We like to pretend we're an example of tidy code.\n+    /// ### Why is this bad?\n+    /// We like to pretend we're an example of tidy code.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:** Wrong ordering of the util::paths constants.\n+    /// ### Example\n+    /// Wrong ordering of the util::paths constants.\n     pub CLIPPY_LINTS_INTERNAL,\n     internal,\n     \"various things that will negatively affect your clippy experience\"\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Ensures every lint is associated to a `LintPass`.\n+    /// ### What it does\n+    /// Ensures every lint is associated to a `LintPass`.\n     ///\n-    /// **Why is this bad?** The compiler only knows lints via a `LintPass`. Without\n+    /// ### Why is this bad?\n+    /// The compiler only knows lints via a `LintPass`. Without\n     /// putting a lint to a `LintPass::get_lints()`'s return, the compiler will not\n     /// know the name of the lint.\n     ///\n-    /// **Known problems:** Only checks for lints associated using the\n+    /// ### Known problems\n+    /// Only checks for lints associated using the\n     /// `declare_lint_pass!`, `impl_lint_pass!`, and `lint_array!` macros.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// declare_lint! { pub LINT_1, ... }\n     /// declare_lint! { pub LINT_2, ... }\n@@ -73,15 +77,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `cx.span_lint*` and suggests to use the `utils::*`\n+    /// ### What it does\n+    /// Checks for calls to `cx.span_lint*` and suggests to use the `utils::*`\n     /// variant of the function.\n     ///\n-    /// **Why is this bad?** The `utils::*` variants also add a link to the Clippy documentation to the\n+    /// ### Why is this bad?\n+    /// The `utils::*` variants also add a link to the Clippy documentation to the\n     /// warning/error messages.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust,ignore\n     /// cx.span_lint(LINT_NAME, \"message\");\n@@ -97,14 +101,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `cx.outer().expn_data()` and suggests to use\n+    /// ### What it does\n+    /// Checks for calls to `cx.outer().expn_data()` and suggests to use\n     /// the `cx.outer_expn_data()`\n     ///\n-    /// **Why is this bad?** `cx.outer_expn_data()` is faster and more concise.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// `cx.outer_expn_data()` is faster and more concise.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust,ignore\n     /// expr.span.ctxt().outer().expn_data()\n@@ -120,14 +124,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Not an actual lint. This lint is only meant for testing our customized internal compiler\n+    /// ### What it does\n+    /// Not an actual lint. This lint is only meant for testing our customized internal compiler\n     /// error message by calling `panic`.\n     ///\n-    /// **Why is this bad?** ICE in large quantities can damage your teeth\n+    /// ### Why is this bad?\n+    /// ICE in large quantities can damage your teeth\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust,ignore\n     /// \ud83c\udf66\ud83c\udf66\ud83c\udf66\ud83c\udf66\ud83c\udf66\n@@ -138,14 +142,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for cases of an auto-generated lint without an updated description,\n+    /// ### What it does\n+    /// Checks for cases of an auto-generated lint without an updated description,\n     /// i.e. `default lint description`.\n     ///\n-    /// **Why is this bad?** Indicates that the lint is not finished.\n-    ///\n-    /// **Known problems:** None\n+    /// ### Why is this bad?\n+    /// Indicates that the lint is not finished.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust,ignore\n     /// declare_lint! { pub COOL_LINT, nursery, \"default lint description\" }\n@@ -161,7 +165,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Lints `span_lint_and_then` function calls, where the\n+    /// ### What it does\n+    /// Lints `span_lint_and_then` function calls, where the\n     /// closure argument has only one statement and that statement is a method\n     /// call to `span_suggestion`, `span_help`, `span_note` (using the same\n     /// span), `help` or `note`.\n@@ -170,12 +175,11 @@ declare_clippy_lint! {\n     /// wrapper functions `span_lint_and_sugg`, span_lint_and_help`, or\n     /// `span_lint_and_note`.\n     ///\n-    /// **Why is this bad?** Using the wrapper `span_lint_and_*` functions, is more\n+    /// ### Why is this bad?\n+    /// Using the wrapper `span_lint_and_*` functions, is more\n     /// convenient, readable and less error prone.\n     ///\n-    /// **Known problems:** None\n-    ///\n-    /// *Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust,ignore\n     /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n@@ -222,14 +226,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `utils::match_type()` on a type diagnostic item\n+    /// ### What it does\n+    /// Checks for calls to `utils::match_type()` on a type diagnostic item\n     /// and suggests to use `utils::is_type_diagnostic_item()` instead.\n     ///\n-    /// **Why is this bad?** `utils::is_type_diagnostic_item()` does not require hardcoded paths.\n-    ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// `utils::is_type_diagnostic_item()` does not require hardcoded paths.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust,ignore\n     /// utils::match_type(cx, ty, &paths::VEC)\n@@ -245,30 +249,27 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Checks the paths module for invalid paths.\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// It indicates a bug in the code.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:** None.\n+    /// ### Example\n+    /// None.\n     pub INVALID_PATHS,\n     internal,\n     \"invalid path\"\n }\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     /// Checks for interning symbols that have already been pre-interned and defined as constants.\n     ///\n-    /// **Why is this bad?**\n+    /// ### Why is this bad?\n     /// It's faster and easier to use the symbol constant.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust,ignore\n     /// let _ = sym!(f32);\n@@ -284,13 +285,13 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for unnecessary conversion from Symbol to a string.\n-    ///\n-    /// **Why is this bad?** It's faster use symbols directly intead of strings.\n+    /// ### What it does\n+    /// Checks for unnecessary conversion from Symbol to a string.\n     ///\n-    /// **Known problems:** None.\n+    /// ### Why is this bad?\n+    /// It's faster use symbols directly intead of strings.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// Bad:\n     /// ```rust,ignore\n     /// symbol.as_str() == \"clippy\";"}, {"sha": "3244677b301b757904f776747441d28b8c0dee2f", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -68,7 +68,7 @@ const CLIPPY_LINT_GROUP_PREFIX: &str = \"clippy::\";\n macro_rules! CONFIGURATION_SECTION_TEMPLATE {\n     () => {\n         r#\"\n-**Configuration**\n+### Configuration\n This lint has the following configuration variables:\n \n {configurations}\n@@ -116,18 +116,21 @@ const DEPRECATED_LINT_TYPE: [&str; 3] = [\"clippy_lints\", \"deprecated_lints\", \"Cl\n const APPLICABILITY_NAME_INDEX: usize = 2;\n \n declare_clippy_lint! {\n-    /// **What it does:** Collects metadata about clippy lints for the website.\n+    /// ### What it does\n+    /// Collects metadata about clippy lints for the website.\n     ///\n     /// This lint will be used to report problems of syntax parsing. You should hopefully never\n     /// see this but never say never I guess ^^\n     ///\n-    /// **Why is this bad?** This is not a bad thing but definitely a hacky way to do it. See\n+    /// ### Why is this bad?\n+    /// This is not a bad thing but definitely a hacky way to do it. See\n     /// issue [#4310](https://github.com/rust-lang/rust-clippy/issues/4310) for a discussion\n     /// about the implementation.\n     ///\n-    /// **Known problems:** Hopefully none. It would be pretty uncool to have a problem here :)\n+    /// ### Known problems\n+    /// Hopefully none. It would be pretty uncool to have a problem here :)\n     ///\n-    /// **Example output:**\n+    /// ### Example output\n     /// ```json,ignore\n     /// {\n     ///     \"id\": \"internal_metadata_collector\",\n@@ -374,7 +377,8 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n     /// Collecting lint declarations like:\n     /// ```rust, ignore\n     /// declare_clippy_lint! {\n-    ///     /// **What it does:** Something IDK.\n+    ///     /// ### What it does\n+    ///     /// Something IDK.\n     ///     pub SOME_LINT,\n     ///     internal,\n     ///     \"Who am I?\""}, {"sha": "32fa46f042ce1d403f8d9f6e69a834afcf0b11aa", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -19,14 +19,14 @@ pub struct UselessVec {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `&vec![..]` when using `&[..]` would\n+    /// ### What it does\n+    /// Checks for usage of `&vec![..]` when using `&[..]` would\n     /// be possible.\n     ///\n-    /// **Why is this bad?** This is less efficient.\n+    /// ### Why is this bad?\n+    /// This is less efficient.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # fn foo(my_vec: &[u8]) {}\n     ///"}, {"sha": "0413c02b230e5307ee32f9fbf5318e99ee071561", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,15 +13,14 @@ use rustc_span::{symbol::sym, Span};\n use std::convert::TryInto;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `push` immediately after creating a new `Vec`.\n+    /// ### What it does\n+    /// Checks for calls to `push` immediately after creating a new `Vec`.\n     ///\n-    /// **Why is this bad?** The `vec![]` macro is both more performant and easier to read than\n+    /// ### Why is this bad?\n+    /// The `vec![]` macro is both more performant and easier to read than\n     /// multiple `push` calls.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// let mut v = Vec::new();\n     /// v.push(0);"}, {"sha": "5c0429db6b8dfe5ba6c988675db17b8b2268f6e8", "filename": "clippy_lints/src/vec_resize_to_zero.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,13 +10,13 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n \n declare_clippy_lint! {\n-    /// **What it does:** Finds occurrences of `Vec::resize(0, an_int)`\n+    /// ### What it does\n+    /// Finds occurrences of `Vec::resize(0, an_int)`\n     ///\n-    /// **Why is this bad?** This is probably an argument inversion mistake.\n+    /// ### Why is this bad?\n+    /// This is probably an argument inversion mistake.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// vec!(1, 2, 3, 4, 5).resize(0, 5)\n     /// ```"}, {"sha": "e07c12f4f16159d16abc6814ca96998d16f15feb", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,15 +7,14 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for use of File::read_to_end and File::read_to_string.\n+    /// ### What it does\n+    /// Checks for use of File::read_to_end and File::read_to_string.\n     ///\n-    /// **Why is this bad?** `fs::{read, read_to_string}` provide the same functionality when `buf` is empty with fewer imports and no intermediate values.\n+    /// ### Why is this bad?\n+    /// `fs::{read, read_to_string}` provide the same functionality when `buf` is empty with fewer imports and no intermediate values.\n     /// See also: [fs::read docs](https://doc.rust-lang.org/std/fs/fn.read.html), [fs::read_to_string docs](https://doc.rust-lang.org/std/fs/fn.read_to_string.html)\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust,no_run\n     /// # use std::io::Read;\n     /// # use std::fs::File;"}, {"sha": "fd3872bacbe24e85379a0dac2a4fd8c6a0ac2028", "filename": "clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -7,16 +7,15 @@ use rustc_span::source_map::DUMMY_SP;\n use if_chain::if_chain;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for wildcard dependencies in the `Cargo.toml`.\n+    /// ### What it does\n+    /// Checks for wildcard dependencies in the `Cargo.toml`.\n     ///\n-    /// **Why is this bad?** [As the edition guide says](https://rust-lang-nursery.github.io/edition-guide/rust-2018/cargo-and-crates-io/crates-io-disallows-wildcard-dependencies.html),\n+    /// ### Why is this bad?\n+    /// [As the edition guide says](https://rust-lang-nursery.github.io/edition-guide/rust-2018/cargo-and-crates-io/crates-io-disallows-wildcard-dependencies.html),\n     /// it is highly unlikely that you work with any possible version of your dependency,\n     /// and wildcard dependencies would cause unnecessary breakage in the ecosystem.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```toml\n     /// [dependencies]\n     /// regex = \"*\""}, {"sha": "bafb9d3e3b16a97bdb62f0d6ab73a9988e99b2a2", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -13,15 +13,18 @@ use rustc_span::symbol::kw;\n use rustc_span::{sym, BytePos};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `use Enum::*`.\n+    /// ### What it does\n+    /// Checks for `use Enum::*`.\n     ///\n-    /// **Why is this bad?** It is usually better style to use the prefixed name of\n+    /// ### Why is this bad?\n+    /// It is usually better style to use the prefixed name of\n     /// an enumeration variant, rather than importing variants.\n     ///\n-    /// **Known problems:** Old-style enumerations that prefix the variants are\n+    /// ### Known problems\n+    /// Old-style enumerations that prefix the variants are\n     /// still around.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n     /// use std::cmp::Ordering::*;\n@@ -37,9 +40,11 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for wildcard imports `use _::*`.\n+    /// ### What it does\n+    /// Checks for wildcard imports `use _::*`.\n     ///\n-    /// **Why is this bad?** wildcard imports can pollute the namespace. This is especially bad if\n+    /// ### Why is this bad?\n+    /// wildcard imports can pollute the namespace. This is especially bad if\n     /// you try to import something through a wildcard, that already has been imported by name from\n     /// a different source:\n     ///\n@@ -52,23 +57,22 @@ declare_clippy_lint! {\n     ///\n     /// This can lead to confusing error messages at best and to unexpected behavior at worst.\n     ///\n-    /// **Exceptions:**\n-    ///\n+    /// ### Exceptions\n     /// Wildcard imports are allowed from modules named `prelude`. Many crates (including the standard library)\n     /// provide modules named \"prelude\" specifically designed for wildcard import.\n     ///\n     /// `use super::*` is allowed in test modules. This is defined as any module with \"test\" in the name.\n     ///\n     /// These exceptions can be disabled using the `warn-on-all-wildcard-imports` configuration flag.\n     ///\n-    /// **Known problems:** If macros are imported through the wildcard, this macro is not included\n+    /// ### Known problems\n+    /// If macros are imported through the wildcard, this macro is not included\n     /// by the suggestion and has to be added by hand.\n     ///\n     /// Applying the suggestion when explicit imports of the things imported with a glob import\n     /// exist, may result in `unused_imports` warnings.\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n     /// use crate1::*;"}, {"sha": "4553ac704a28fff86690c069cf17ac3be49ca532", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 53, "deletions": 39, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -16,14 +16,14 @@ use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{sym, BytePos, Span, DUMMY_SP};\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint warns when you use `println!(\"\")` to\n+    /// ### What it does\n+    /// This lint warns when you use `println!(\"\")` to\n     /// print a newline.\n     ///\n-    /// **Why is this bad?** You should use `println!()`, which is simpler.\n+    /// ### Why is this bad?\n+    /// You should use `println!()`, which is simpler.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// println!(\"\");\n@@ -37,15 +37,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint warns when you use `print!()` with a format\n+    /// ### What it does\n+    /// This lint warns when you use `print!()` with a format\n     /// string that ends in a newline.\n     ///\n-    /// **Why is this bad?** You should use `println!()` instead, which appends the\n+    /// ### Why is this bad?\n+    /// You should use `println!()` instead, which appends the\n     /// newline.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let name = \"World\";\n     /// print!(\"Hello {}!\\n\", name);\n@@ -61,15 +61,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for printing on *stdout*. The purpose of this lint\n+    /// ### What it does\n+    /// Checks for printing on *stdout*. The purpose of this lint\n     /// is to catch debugging remnants.\n     ///\n-    /// **Why is this bad?** People often print on *stdout* while debugging an\n+    /// ### Why is this bad?\n+    /// People often print on *stdout* while debugging an\n     /// application and might forget to remove those prints afterward.\n     ///\n-    /// **Known problems:** Only catches `print!` and `println!` calls.\n+    /// ### Known problems\n+    /// Only catches `print!` and `println!` calls.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// println!(\"Hello world!\");\n     /// ```\n@@ -79,15 +82,18 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for printing on *stderr*. The purpose of this lint\n+    /// ### What it does\n+    /// Checks for printing on *stderr*. The purpose of this lint\n     /// is to catch debugging remnants.\n     ///\n-    /// **Why is this bad?** People often print on *stderr* while debugging an\n+    /// ### Why is this bad?\n+    /// People often print on *stderr* while debugging an\n     /// application and might forget to remove those prints afterward.\n     ///\n-    /// **Known problems:** Only catches `eprint!` and `eprintln!` calls.\n+    /// ### Known problems\n+    /// Only catches `eprint!` and `eprintln!` calls.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// eprintln!(\"Hello world!\");\n     /// ```\n@@ -97,13 +103,15 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for use of `Debug` formatting. The purpose of this\n+    /// ### What it does\n+    /// Checks for use of `Debug` formatting. The purpose of this\n     /// lint is to catch debugging remnants.\n     ///\n-    /// **Why is this bad?** The purpose of the `Debug` trait is to facilitate\n+    /// ### Why is this bad?\n+    /// The purpose of the `Debug` trait is to facilitate\n     /// debugging Rust code. It should not be used in user-facing output.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # let foo = \"bar\";\n     /// println!(\"{:?}\", foo);\n@@ -114,16 +122,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint warns about the use of literals as `print!`/`println!` args.\n+    /// ### What it does\n+    /// This lint warns about the use of literals as `print!`/`println!` args.\n     ///\n-    /// **Why is this bad?** Using literals as `println!` args is inefficient\n+    /// ### Why is this bad?\n+    /// Using literals as `println!` args is inefficient\n     /// (c.f., https://github.com/matthiaskrgr/rust-str-bench) and unnecessary\n     /// (i.e., just put the literal in the format string)\n     ///\n-    /// **Known problems:** Will also warn with macro calls as arguments that expand to literals\n+    /// ### Known problems\n+    /// Will also warn with macro calls as arguments that expand to literals\n     /// -- e.g., `println!(\"{}\", env!(\"FOO\"))`.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// println!(\"{}\", \"foo\");\n     /// ```\n@@ -137,14 +148,14 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint warns when you use `writeln!(buf, \"\")` to\n+    /// ### What it does\n+    /// This lint warns when you use `writeln!(buf, \"\")` to\n     /// print a newline.\n     ///\n-    /// **Why is this bad?** You should use `writeln!(buf)`, which is simpler.\n+    /// ### Why is this bad?\n+    /// You should use `writeln!(buf)`, which is simpler.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n@@ -160,16 +171,16 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint warns when you use `write!()` with a format\n+    /// ### What it does\n+    /// This lint warns when you use `write!()` with a format\n     /// string that\n     /// ends in a newline.\n     ///\n-    /// **Why is this bad?** You should use `writeln!()` instead, which appends the\n+    /// ### Why is this bad?\n+    /// You should use `writeln!()` instead, which appends the\n     /// newline.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n@@ -186,16 +197,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** This lint warns about the use of literals as `write!`/`writeln!` args.\n+    /// ### What it does\n+    /// This lint warns about the use of literals as `write!`/`writeln!` args.\n     ///\n-    /// **Why is this bad?** Using literals as `writeln!` args is inefficient\n+    /// ### Why is this bad?\n+    /// Using literals as `writeln!` args is inefficient\n     /// (c.f., https://github.com/matthiaskrgr/rust-str-bench) and unnecessary\n     /// (i.e., just put the literal in the format string)\n     ///\n-    /// **Known problems:** Will also warn with macro calls as arguments that expand to literals\n+    /// ### Known problems\n+    /// Will also warn with macro calls as arguments that expand to literals\n     /// -- e.g., `writeln!(buf, \"{}\", env!(\"FOO\"))`.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();"}, {"sha": "b29ced28ac491dd662c0b5fe595681d69bea2307", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -6,13 +6,13 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `0.0 / 0.0`.\n+    /// ### What it does\n+    /// Checks for `0.0 / 0.0`.\n     ///\n-    /// **Why is this bad?** It's less readable than `f32::NAN` or `f64::NAN`.\n+    /// ### Why is this bad?\n+    /// It's less readable than `f32::NAN` or `f64::NAN`.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Example\n     /// ```rust\n     /// // Bad\n     /// let nan = 0.0f32 / 0.0;"}, {"sha": "2fbe27f94798b08d753b996d689f238320fad5da", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -10,18 +10,19 @@ use rustc_target::abi::LayoutOf as _;\n use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for maps with zero-sized value types anywhere in the code.\n+    /// ### What it does\n+    /// Checks for maps with zero-sized value types anywhere in the code.\n     ///\n-    /// **Why is this bad?** Since there is only a single value for a zero-sized type, a map\n+    /// ### Why is this bad?\n+    /// Since there is only a single value for a zero-sized type, a map\n     /// containing zero sized values is effectively a set. Using a set in that case improves\n     /// readability and communicates intent more clearly.\n     ///\n-    /// **Known problems:**\n+    /// ### Known problems\n     /// * A zero-sized type cannot be recovered later if it contains private fields.\n     /// * This lints the signature of public items\n     ///\n-    /// **Example:**\n-    ///\n+    /// ### Example\n     /// ```rust\n     /// # use std::collections::HashMap;\n     /// fn unique_words(text: &str) -> HashMap<&str, ()> {"}, {"sha": "f2260c3d1a267dd4a1093cf198a49d83535ecec5", "filename": "doc/adding_lints.md", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12c61612f7a91df64121dd9c991828c26d665325/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/12c61612f7a91df64121dd9c991828c26d665325/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=12c61612f7a91df64121dd9c991828c26d665325", "patch": "@@ -11,6 +11,7 @@ because that's clearly a non-descriptive name.\n   - [Setup](#setup)\n   - [Getting Started](#getting-started)\n   - [Testing](#testing)\n+    - [Cargo lints](#cargo-lints)\n   - [Rustfix tests](#rustfix-tests)\n   - [Edition 2018 tests](#edition-2018-tests)\n   - [Testing manually](#testing-manually)\n@@ -179,14 +180,11 @@ the auto-generated lint declaration to have a real description, something like t\n \n ```rust\n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// ### What it does\n     ///\n-    /// **Why is this bad?**\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n+    /// ### Why is this bad?\n     ///\n+    /// ### Example\n     /// ```rust\n     /// // example code\n     /// ```\n@@ -487,13 +485,13 @@ Please document your lint with a doc comment akin to the following:\n \n ```rust\n declare_clippy_lint! {\n-    /// **What it does:** Checks for ... (describe what the lint matches).\n-    ///\n-    /// **Why is this bad?** Supply the reason for linting the code.\n+    /// ### What it does\n+    /// Checks for ... (describe what the lint matches).\n     ///\n-    /// **Known problems:** None. (Or describe where it could go wrong.)\n+    /// ### Why is this bad?\n+    /// Supply the reason for linting the code.\n     ///\n-    /// **Example:**\n+    /// ### Example\n     ///\n     /// ```rust,ignore\n     /// // Bad"}]}