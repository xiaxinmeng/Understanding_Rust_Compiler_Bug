{"sha": "a1ef6cc553bbd141d94144ccb8e1599fa3f76526", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZWY2Y2M1NTNiYmQxNDFkOTQxNDRjY2I4ZTE1OTlmYTNmNzY1MjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-10T20:29:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-10T20:30:24Z"}, "message": "Optimize VFS processing", "tree": {"sha": "6177263fca1ddd26e001626313922ff6fbda6753", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6177263fca1ddd26e001626313922ff6fbda6753"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1ef6cc553bbd141d94144ccb8e1599fa3f76526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ef6cc553bbd141d94144ccb8e1599fa3f76526", "html_url": "https://github.com/rust-lang/rust/commit/a1ef6cc553bbd141d94144ccb8e1599fa3f76526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1ef6cc553bbd141d94144ccb8e1599fa3f76526/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "676d2e040dfe619d666d5b3068db47346655f23b", "url": "https://api.github.com/repos/rust-lang/rust/commits/676d2e040dfe619d666d5b3068db47346655f23b", "html_url": "https://github.com/rust-lang/rust/commit/676d2e040dfe619d666d5b3068db47346655f23b"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "702f25a19277ef9a7723b0198dd5b427190e15e2", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 39, "deletions": 29, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef6cc553bbd141d94144ccb8e1599fa3f76526/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef6cc553bbd141d94144ccb8e1599fa3f76526/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=a1ef6cc553bbd141d94144ccb8e1599fa3f76526", "patch": "@@ -198,39 +198,49 @@ impl GlobalState {\n                 }\n                 self.analysis_host.maybe_collect_garbage();\n             }\n-            Event::Vfs(task) => match task {\n-                vfs::loader::Message::Loaded { files } => {\n-                    let vfs = &mut self.vfs.write().0;\n-                    for (path, contents) in files {\n-                        let path = VfsPath::from(path);\n-                        if !self.mem_docs.contains(&path) {\n-                            vfs.set_file_contents(path, contents)\n+            Event::Vfs(mut task) => {\n+                let _p = profile(\"GlobalState::handle_event/vfs\");\n+                loop {\n+                    match task {\n+                        vfs::loader::Message::Loaded { files } => {\n+                            let vfs = &mut self.vfs.write().0;\n+                            for (path, contents) in files {\n+                                let path = VfsPath::from(path);\n+                                if !self.mem_docs.contains(&path) {\n+                                    vfs.set_file_contents(path, contents)\n+                                }\n+                            }\n+                        }\n+                        vfs::loader::Message::Progress { n_total, n_done } => {\n+                            if n_total == 0 {\n+                                self.transition(Status::Invalid);\n+                            } else {\n+                                let state = if n_done == 0 {\n+                                    self.transition(Status::Loading);\n+                                    Progress::Begin\n+                                } else if n_done < n_total {\n+                                    Progress::Report\n+                                } else {\n+                                    assert_eq!(n_done, n_total);\n+                                    self.transition(Status::Ready);\n+                                    Progress::End\n+                                };\n+                                self.report_progress(\n+                                    \"roots scanned\",\n+                                    state,\n+                                    Some(format!(\"{}/{}\", n_done, n_total)),\n+                                    Some(Progress::percentage(n_done, n_total)),\n+                                )\n+                            }\n                         }\n                     }\n-                }\n-                vfs::loader::Message::Progress { n_total, n_done } => {\n-                    if n_total == 0 {\n-                        self.transition(Status::Invalid);\n-                    } else {\n-                        let state = if n_done == 0 {\n-                            self.transition(Status::Loading);\n-                            Progress::Begin\n-                        } else if n_done < n_total {\n-                            Progress::Report\n-                        } else {\n-                            assert_eq!(n_done, n_total);\n-                            self.transition(Status::Ready);\n-                            Progress::End\n-                        };\n-                        self.report_progress(\n-                            \"roots scanned\",\n-                            state,\n-                            Some(format!(\"{}/{}\", n_done, n_total)),\n-                            Some(Progress::percentage(n_done, n_total)),\n-                        )\n+                    // Coalesce many VFS event into a single loop turn\n+                    task = match self.loader.receiver.try_recv() {\n+                        Ok(task) => task,\n+                        Err(_) => break,\n                     }\n                 }\n-            },\n+            }\n             Event::Flycheck(task) => match task {\n                 flycheck::Message::AddDiagnostic { workspace_root, diagnostic } => {\n                     let diagnostics = crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp("}, {"sha": "3bfecd08fbb2619b534e520e87f8c207d7d9e539", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef6cc553bbd141d94144ccb8e1599fa3f76526/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef6cc553bbd141d94144ccb8e1599fa3f76526/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=a1ef6cc553bbd141d94144ccb8e1599fa3f76526", "patch": "@@ -70,7 +70,7 @@ impl ChangedFile {\n     }\n }\n \n-#[derive(Eq, PartialEq, Copy, Clone)]\n+#[derive(Eq, PartialEq, Copy, Clone, Debug)]\n pub enum ChangeKind {\n     Create,\n     Modify,"}]}