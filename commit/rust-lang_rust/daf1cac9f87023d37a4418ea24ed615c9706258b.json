{"sha": "daf1cac9f87023d37a4418ea24ed615c9706258b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZjFjYWM5Zjg3MDIzZDM3YTQ0MThlYTI0ZWQ2MTVjOTcwNjI1OGI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-05-24T05:33:22Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T14:09:29Z"}, "message": "Move diagnostics back into expr, add tests for diagnostics, fix logic to account for derefs of raw ptrs", "tree": {"sha": "d03541e3288316c2570bbc86a1b2bd97eea9292c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d03541e3288316c2570bbc86a1b2bd97eea9292c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daf1cac9f87023d37a4418ea24ed615c9706258b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daf1cac9f87023d37a4418ea24ed615c9706258b", "html_url": "https://github.com/rust-lang/rust/commit/daf1cac9f87023d37a4418ea24ed615c9706258b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daf1cac9f87023d37a4418ea24ed615c9706258b/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b95bed83fc8db897f54b350168567f14527e8de", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b95bed83fc8db897f54b350168567f14527e8de", "html_url": "https://github.com/rust-lang/rust/commit/0b95bed83fc8db897f54b350168567f14527e8de"}], "stats": {"total": 231, "additions": 158, "deletions": 73}, "files": [{"sha": "13e763e52092a47a12b310d415426ed32c048a80", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=daf1cac9f87023d37a4418ea24ed615c9706258b", "patch": "@@ -25,7 +25,7 @@ use hir_expand::{\n use hir_ty::{\n     autoderef,\n     display::{HirDisplayError, HirFormatter},\n-    expr::ExprValidator,\n+    expr::{ExprValidator, UnsafeValidator},\n     method_resolution, ApplicationTy, Canonical, GenericPredicate, InEnvironment, Substs,\n     TraitEnvironment, Ty, TyDefId, TypeCtor,\n };\n@@ -36,7 +36,6 @@ use rustc_hash::FxHashSet;\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n-    diagnostics::UnsafeValidator,\n     has_source::HasSource,\n     CallableDef, HirDisplay, InFile, Name,\n };\n@@ -680,7 +679,7 @@ impl Function {\n         infer.add_diagnostics(db, self.id, sink);\n         let mut validator = ExprValidator::new(self.id, infer.clone(), sink);\n         validator.validate_body(db);\n-        let mut validator = UnsafeValidator::new(&self, infer, sink);\n+        let mut validator = UnsafeValidator::new(self.id, infer, sink);\n         validator.validate_body(db);\n     }\n }"}, {"sha": "c82883d0c1611fadf6255223950a99ff5e2e6ffb", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=daf1cac9f87023d37a4418ea24ed615c9706258b", "patch": "@@ -2,53 +2,3 @@\n pub use hir_def::diagnostics::UnresolvedModule;\n pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n pub use hir_ty::diagnostics::{MissingFields, MissingMatchArms, MissingOkInTailExpr, NoSuchField};\n-\n-use std::sync::Arc;\n-\n-use crate::code_model::Function;\n-use crate::db::HirDatabase;\n-use crate::has_source::HasSource;\n-use hir_ty::{\n-    diagnostics::{MissingUnsafe, UnnecessaryUnsafe},\n-    expr::unsafe_expressions,\n-    InferenceResult,\n-};\n-use ra_syntax::AstPtr;\n-\n-pub struct UnsafeValidator<'a, 'b: 'a> {\n-    func: &'a Function,\n-    infer: Arc<InferenceResult>,\n-    sink: &'a mut DiagnosticSink<'b>,\n-}\n-\n-impl<'a, 'b> UnsafeValidator<'a, 'b> {\n-    pub fn new(\n-        func: &'a Function,\n-        infer: Arc<InferenceResult>,\n-        sink: &'a mut DiagnosticSink<'b>,\n-    ) -> UnsafeValidator<'a, 'b> {\n-        UnsafeValidator { func, infer, sink }\n-    }\n-\n-    pub fn validate_body(&mut self, db: &dyn HirDatabase) {\n-        let def = self.func.id.into();\n-        let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n-        let func_data = db.function_data(self.func.id);\n-        let unnecessary = func_data.is_unsafe && unsafe_expressions.len() == 0;\n-        let missing = !func_data.is_unsafe && unsafe_expressions.len() > 0;\n-        if !(unnecessary || missing) {\n-            return;\n-        }\n-\n-        let in_file = self.func.source(db);\n-        let file = in_file.file_id;\n-        let fn_def = AstPtr::new(&in_file.value);\n-        let fn_name = func_data.name.clone().into();\n-\n-        if unnecessary {\n-            self.sink.push(UnnecessaryUnsafe { file, fn_def, fn_name })\n-        } else {\n-            self.sink.push(MissingUnsafe { file, fn_def, fn_name })\n-        }\n-    }\n-}"}, {"sha": "c6ca322fa3041fb23d4e9b4ccbe1b03b0a047cde", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=daf1cac9f87023d37a4418ea24ed615c9706258b", "patch": "@@ -3,7 +3,7 @@\n use std::any::Any;\n \n use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n-use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n+use ra_syntax::{ast::{self, NameOwner}, AstNode, AstPtr, SyntaxNodePtr};\n use stdx::format_to;\n \n pub use hir_def::{diagnostics::UnresolvedModule, expr::MatchArm, path::Path};\n@@ -174,12 +174,11 @@ impl AstDiagnostic for BreakOutsideOfLoop {\n pub struct MissingUnsafe {\n     pub file: HirFileId,\n     pub fn_def: AstPtr<ast::FnDef>,\n-    pub fn_name: Name,\n }\n \n impl Diagnostic for MissingUnsafe {\n     fn message(&self) -> String {\n-        format!(\"Missing unsafe marker on fn `{}`\", self.fn_name)\n+        format!(\"Missing unsafe keyword on fn\")\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.fn_def.clone().into() }\n@@ -190,25 +189,24 @@ impl Diagnostic for MissingUnsafe {\n }\n \n impl AstDiagnostic for MissingUnsafe {\n-    type AST = ast::FnDef;\n+    type AST = ast::Name;\n \n     fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.source().file_id).unwrap();\n         let node = self.source().value.to_node(&root);\n-        ast::FnDef::cast(node).unwrap()\n+        ast::FnDef::cast(node).unwrap().name().unwrap()\n     }\n }\n \n #[derive(Debug)]\n pub struct UnnecessaryUnsafe {\n     pub file: HirFileId,\n     pub fn_def: AstPtr<ast::FnDef>,\n-    pub fn_name: Name,\n }\n \n impl Diagnostic for UnnecessaryUnsafe {\n     fn message(&self) -> String {\n-        format!(\"Unnecessary unsafe marker on fn `{}`\", self.fn_name)\n+        format!(\"Unnecessary unsafe keyword on fn\")\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.fn_def.clone().into() }\n@@ -219,11 +217,11 @@ impl Diagnostic for UnnecessaryUnsafe {\n }\n \n impl AstDiagnostic for UnnecessaryUnsafe {\n-    type AST = ast::FnDef;\n+    type AST = ast::Name;\n \n     fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.source().file_id).unwrap();\n         let node = self.source().value.to_node(&root);\n-        ast::FnDef::cast(node).unwrap()\n+        ast::FnDef::cast(node).unwrap().name().unwrap()\n     }\n }"}, {"sha": "7532e2dc7ce19d3a834c9c25b62b0b4db5cf6c4a", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=daf1cac9f87023d37a4418ea24ed615c9706258b", "patch": "@@ -2,14 +2,19 @@\n \n use std::sync::Arc;\n \n-use hir_def::{path::path, resolver::HasResolver, AdtId, DefWithBodyId, FunctionId};\n+use hir_def::{\n+    path::path, resolver::HasResolver, src::HasSource, AdtId, DefWithBodyId, FunctionId, Lookup,\n+};\n use hir_expand::diagnostics::DiagnosticSink;\n use ra_syntax::{ast, AstPtr};\n use rustc_hash::FxHashSet;\n \n use crate::{\n     db::HirDatabase,\n-    diagnostics::{MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields},\n+    diagnostics::{\n+        MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields, MissingUnsafe,\n+        UnnecessaryUnsafe,\n+    },\n     utils::variant_data,\n     ApplicationTy, InferenceResult, Ty, TypeCtor,\n     _match::{is_useful, MatchCheckCtx, Matrix, PatStack, Usefulness},\n@@ -321,16 +326,63 @@ pub fn unsafe_expressions(\n     let mut unsafe_expr_ids = vec![];\n     let body = db.body(def);\n     for (id, expr) in body.exprs.iter() {\n-        if let Expr::Call { callee, .. } = expr {\n-            if infer\n-                .method_resolution(*callee)\n-                .map(|func| db.function_data(func).is_unsafe)\n-                .unwrap_or(false)\n-            {\n-                unsafe_expr_ids.push(id);\n+        match expr {\n+            Expr::Call { callee, .. } => {\n+                if infer\n+                    .method_resolution(*callee)\n+                    .map(|func| db.function_data(func).is_unsafe)\n+                    .unwrap_or(false)\n+                {\n+                    unsafe_expr_ids.push(id);\n+                }\n+            }\n+            Expr::UnaryOp { expr, op: UnaryOp::Deref } => {\n+                if let Ty::Apply(ApplicationTy { ctor: TypeCtor::RawPtr(..), .. }) = &infer[*expr] {\n+                    unsafe_expr_ids.push(id);\n+                }\n             }\n+            _ => {}\n         }\n     }\n \n     unsafe_expr_ids\n }\n+\n+pub struct UnsafeValidator<'a, 'b: 'a> {\n+    func: FunctionId,\n+    infer: Arc<InferenceResult>,\n+    sink: &'a mut DiagnosticSink<'b>,\n+}\n+\n+impl<'a, 'b> UnsafeValidator<'a, 'b> {\n+    pub fn new(\n+        func: FunctionId,\n+        infer: Arc<InferenceResult>,\n+        sink: &'a mut DiagnosticSink<'b>,\n+    ) -> UnsafeValidator<'a, 'b> {\n+        UnsafeValidator { func, infer, sink }\n+    }\n+\n+    pub fn validate_body(&mut self, db: &dyn HirDatabase) {\n+        let def = self.func.into();\n+        let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n+        let func_data = db.function_data(self.func);\n+        let unnecessary = func_data.is_unsafe && unsafe_expressions.len() == 0;\n+        let missing = !func_data.is_unsafe && unsafe_expressions.len() > 0;\n+        if !(unnecessary || missing) {\n+            return;\n+        }\n+\n+        let loc = self.func.lookup(db.upcast());\n+        let in_file = loc.source(db.upcast());\n+\n+        let file = in_file.file_id;\n+        let fn_def = AstPtr::new(&in_file.value);\n+\n+        if unnecessary {\n+            self.sink.push(UnnecessaryUnsafe { file, fn_def })\n+        } else {\n+            self.sink.push(MissingUnsafe { file, fn_def })\n+        }\n+    }\n+}"}, {"sha": "9ccf2aa377eb2c1364d6513e8047fdd99fcf4675", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=daf1cac9f87023d37a4418ea24ed615c9706258b", "patch": "@@ -11,7 +11,11 @@ use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDataba\n use rustc_hash::FxHashSet;\n use stdx::format_to;\n \n-use crate::{db::HirDatabase, diagnostics::Diagnostic, expr::ExprValidator};\n+use crate::{\n+    db::HirDatabase,\n+    diagnostics::Diagnostic,\n+    expr::{ExprValidator, UnsafeValidator},\n+};\n \n #[salsa::database(\n     ra_db::SourceDatabaseExtStorage,\n@@ -119,7 +123,9 @@ impl TestDB {\n                 let infer = self.infer(f.into());\n                 let mut sink = DiagnosticSink::new(&mut cb);\n                 infer.add_diagnostics(self, f, &mut sink);\n-                let mut validator = ExprValidator::new(f, infer, &mut sink);\n+                let mut validator = ExprValidator::new(f, infer.clone(), &mut sink);\n+                validator.validate_body(self);\n+                let mut validator = UnsafeValidator::new(f, infer, &mut sink);\n                 validator.validate_body(self);\n             }\n         }"}, {"sha": "4ff2b2d4a5efbccf598cc114135dc187a3ac6ba7", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=daf1cac9f87023d37a4418ea24ed615c9706258b", "patch": "@@ -538,6 +538,84 @@ fn missing_record_pat_field_no_diagnostic_if_not_exhaustive() {\n     assert_snapshot!(diagnostics, @\"\");\n }\n \n+#[test]\n+fn missing_unsafe_diagnostic_with_raw_ptr() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+//- /lib.rs\n+fn missing_unsafe() {\n+    let x = &5 as *usize;\n+    let y = *x;\n+}\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @r#\"\"fn missing_unsafe() {\\n    let x = &5 as *usize;\\n    let y = *x;\\n}\": Missing unsafe keyword on fn\"#);\n+}\n+\n+#[test]\n+fn missing_unsafe_diagnostic_with_unsafe_call() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+//- /lib.rs\n+unsafe fn unsafe_fn() {\n+    let x = &5 as *usize;\n+    let y = *x;\n+}\n+\n+fn missing_unsafe() {\n+    unsafe_fn();\n+}\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @r#\"\"fn missing_unsafe() {\\n    unsafe_fn();\\n}\": Missing unsafe keyword on fn\"#);\n+}\n+\n+#[test]\n+fn missing_unsafe_diagnostic_with_unsafe_method_call() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+//- /lib.rs\n+struct HasUnsafe;\n+\n+impl HasUnsafe {\n+    unsafe fn unsafe_fn() {\n+        let x = &5 as *usize;\n+        let y = *x;\n+    }\n+}\n+\n+fn missing_unsafe() {\n+    HasUnsafe.unsafe_fn();\n+}\n+\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @r#\"\"fn missing_unsafe() {\\n    HasUnsafe.unsafe_fn();\\n}\": Missing unsafe keyword on fn\"#);\n+}\n+\n+#[test]\n+fn unnecessary_unsafe_diagnostic() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+//- /lib.rs\n+unsafe fn actually_safe_fn() {}\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @r#\"\"unsafe fn actually_safe_fn() {}\": Unnecessary unsafe keyword on fn\"#);\n+}\n+\n #[test]\n fn break_outside_of_loop() {\n     let diagnostics = TestDB::with_files("}, {"sha": "43f554a292993ab9d209af85e8f3ccaa67b1582b", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf1cac9f87023d37a4418ea24ed615c9706258b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=daf1cac9f87023d37a4418ea24ed615c9706258b", "patch": "@@ -384,9 +384,11 @@ impl HasUnsafeFn {\n }\n \n fn main() {\n+    let x = &5 as *usize;\n     unsafe {\n         unsafe_fn();\n         HasUnsafeFn.unsafe_method();\n+        let y = *x;\n     }\n }\n \"#"}]}