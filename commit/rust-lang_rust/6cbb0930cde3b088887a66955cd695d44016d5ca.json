{"sha": "6cbb0930cde3b088887a66955cd695d44016d5ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYmIwOTMwY2RlM2IwODg4ODdhNjY5NTVjZDY5NWQ0NDAxNmQ1Y2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-28T22:19:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-28T22:19:47Z"}, "message": "Auto merge of #6397 - matsujika:fix-6384, r=flip1995\n\nFix a false positive in `unnecessary_wraps`\n\nFix #6384\n\nchangelog: Fix FP in `unnecessary_wraps` that happens when `Call` expr has `Return` expr inside", "tree": {"sha": "cd5dc13439aa82ae836b918d69e2b25d37f02a48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd5dc13439aa82ae836b918d69e2b25d37f02a48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cbb0930cde3b088887a66955cd695d44016d5ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbb0930cde3b088887a66955cd695d44016d5ca", "html_url": "https://github.com/rust-lang/rust/commit/6cbb0930cde3b088887a66955cd695d44016d5ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cbb0930cde3b088887a66955cd695d44016d5ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b62773114b34e106201ad1633e45554c21882f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62773114b34e106201ad1633e45554c21882f4b", "html_url": "https://github.com/rust-lang/rust/commit/b62773114b34e106201ad1633e45554c21882f4b"}, {"sha": "2c26cb14db4d3a86aea0a897f9b727cef4e72e27", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c26cb14db4d3a86aea0a897f9b727cef4e72e27", "html_url": "https://github.com/rust-lang/rust/commit/2c26cb14db4d3a86aea0a897f9b727cef4e72e27"}], "stats": {"total": 83, "additions": 45, "deletions": 38}, "files": [{"sha": "1476408e0fb19e97ae49b1ac0fe5fb2f82176c39", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 37, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6cbb0930cde3b088887a66955cd695d44016d5ca/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbb0930cde3b088887a66955cd695d44016d5ca/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6cbb0930cde3b088887a66955cd695d44016d5ca", "patch": "@@ -14,10 +14,8 @@ use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -28,11 +26,12 @@ use crate::consts::{constant, Constant};\n use crate::utils::eager_or_lazy::is_lazyness_candidate;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    contains_ty, get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro,\n-    is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path, match_qpath,\n-    match_trait_method, match_type, match_var, meets_msrv, method_calls, method_chain_args, paths, remove_blocks,\n-    return_ty, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n-    span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty_depth, SpanlessEq,\n+    contains_return, contains_ty, get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher,\n+    implements_trait, in_macro, is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n+    match_def_path, match_qpath, match_trait_method, match_type, match_var, meets_msrv, method_calls,\n+    method_chain_args, paths, remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg,\n+    walk_ptrs_ty_depth, SpanlessEq,\n };\n use semver::{Version, VersionReq};\n \n@@ -3877,36 +3876,6 @@ fn is_bool(ty: &hir::Ty<'_>) -> bool {\n     }\n }\n \n-// Returns `true` if `expr` contains a return expression\n-fn contains_return(expr: &hir::Expr<'_>) -> bool {\n-    struct RetCallFinder {\n-        found: bool,\n-    }\n-\n-    impl<'tcx> intravisit::Visitor<'tcx> for RetCallFinder {\n-        type Map = Map<'tcx>;\n-\n-        fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n-            if self.found {\n-                return;\n-            }\n-            if let hir::ExprKind::Ret(..) = &expr.kind {\n-                self.found = true;\n-            } else {\n-                intravisit::walk_expr(self, expr);\n-            }\n-        }\n-\n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-    }\n-\n-    let mut visitor = RetCallFinder { found: false };\n-    visitor.visit_expr(expr);\n-    visitor.found\n-}\n-\n fn check_pointer_offset(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     if_chain! {\n         if args.len() == 2;"}, {"sha": "360df2a67525782361da7da7f4f866dbebf67824", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cbb0930cde3b088887a66955cd695d44016d5ca/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbb0930cde3b088887a66955cd695d44016d5ca/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=6cbb0930cde3b088887a66955cd695d44016d5ca", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    in_macro, is_type_diagnostic_item, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n+    contains_return, in_macro, is_type_diagnostic_item, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n     visitors::find_all_ret_expressions,\n };\n use if_chain::if_chain;\n@@ -95,6 +95,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n                 if let ExprKind::Path(ref qpath) = func.kind;\n                 if match_qpath(qpath, path);\n                 if args.len() == 1;\n+                if !contains_return(&args[0]);\n                 then {\n                     suggs.push((ret_expr.span, snippet(cx, args[0].span.source_callsite(), \"..\").to_string()));\n                     true"}, {"sha": "850abc3bae76f6af6b62946600daf6e464d71e8e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6cbb0930cde3b088887a66955cd695d44016d5ca/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbb0930cde3b088887a66955cd695d44016d5ca/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=6cbb0930cde3b088887a66955cd695d44016d5ca", "patch": "@@ -572,6 +572,36 @@ pub fn contains_name(name: Symbol, expr: &Expr<'_>) -> bool {\n     cn.result\n }\n \n+/// Returns `true` if `expr` contains a return expression\n+pub fn contains_return(expr: &hir::Expr<'_>) -> bool {\n+    struct RetCallFinder {\n+        found: bool,\n+    }\n+\n+    impl<'tcx> hir::intravisit::Visitor<'tcx> for RetCallFinder {\n+        type Map = Map<'tcx>;\n+\n+        fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n+            if self.found {\n+                return;\n+            }\n+            if let hir::ExprKind::Ret(..) = &expr.kind {\n+                self.found = true;\n+            } else {\n+                hir::intravisit::walk_expr(self, expr);\n+            }\n+        }\n+\n+        fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n+            hir::intravisit::NestedVisitorMap::None\n+        }\n+    }\n+\n+    let mut visitor = RetCallFinder { found: false };\n+    visitor.visit_expr(expr);\n+    visitor.found\n+}\n+\n /// Converts a span to a code snippet if available, otherwise use default.\n ///\n /// This is useful if you want to provide suggestions for your lint or more generally, if you want"}, {"sha": "a4570098d7167da8393f6c4933d20cf277be8962", "filename": "tests/ui/unnecessary_wraps.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6cbb0930cde3b088887a66955cd695d44016d5ca/tests%2Fui%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbb0930cde3b088887a66955cd695d44016d5ca/tests%2Fui%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.rs?ref=6cbb0930cde3b088887a66955cd695d44016d5ca", "patch": "@@ -109,6 +109,13 @@ impl B for A {\n     }\n }\n \n+fn issue_6384(s: &str) -> Option<&str> {\n+    Some(match s {\n+        \"a\" => \"A\",\n+        _ => return None,\n+    })\n+}\n+\n fn main() {\n     // method calls are not linted\n     func1(true, true);"}]}