{"sha": "29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YzgyNzZjZWU0YTBlYWI3ZTA2MzRmZjI1YzZiNDdiZDlmODdjNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-07T17:51:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-07T17:51:52Z"}, "message": "Auto merge of #48053 - Manishearth:rollup, r=Manishearth\n\nRollup of 10 pull requests\n\n- Successful merges: #47613, #47631, #47810, #47883, #47922, #47944, #48014, #48018, #48020, #48028\n- Failed merges:", "tree": {"sha": "aabb7278f081c3c90cea9e0337779739805408a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aabb7278f081c3c90cea9e0337779739805408a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "html_url": "https://github.com/rust-lang/rust/commit/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fee39ba8bd98f5b93c60de51336830fa7f0b9d97", "url": "https://api.github.com/repos/rust-lang/rust/commits/fee39ba8bd98f5b93c60de51336830fa7f0b9d97", "html_url": "https://github.com/rust-lang/rust/commit/fee39ba8bd98f5b93c60de51336830fa7f0b9d97"}, {"sha": "732c83007c9069c6dd33a5dc98e62337dca014bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/732c83007c9069c6dd33a5dc98e62337dca014bd", "html_url": "https://github.com/rust-lang/rust/commit/732c83007c9069c6dd33a5dc98e62337dca014bd"}], "stats": {"total": 1164, "additions": 983, "deletions": 181}, "files": [{"sha": "8ad5a9861a02f07c586f3b9457d3f6f988f71c45", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -530,9 +530,12 @@ impl<'a> Display for Arguments<'a> {\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"`{Self}` cannot be formatted using `:?`; if it is \\\n-                            defined in your crate, add `#[derive(Debug)]` or \\\n-                            manually implement it\"]\n+#[rustc_on_unimplemented(\n+    on(crate_local, label=\"`{Self}` cannot be formatted using `:?`; \\\n+                            add `#[derive(Debug)]` or manually implement `{Debug}`\"),\n+    message=\"`{Self}` doesn't implement `{Debug}`\",\n+    label=\"`{Self}` cannot be formatted using `:?` because it doesn't implement `{Debug}`\",\n+)]\n #[lang = \"debug_trait\"]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n@@ -593,9 +596,11 @@ pub trait Debug {\n ///\n /// println!(\"The origin is: {}\", origin);\n /// ```\n-#[rustc_on_unimplemented = \"`{Self}` cannot be formatted with the default \\\n-                            formatter; try using `:?` instead if you are using \\\n-                            a format string\"]\n+#[rustc_on_unimplemented(\n+    message=\"`{Self}` doesn't implement `{Display}`\",\n+    label=\"`{Self}` cannot be formatted with the default formatter; \\\n+           try using `:?` instead if you are using a format string\",\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Display {\n     /// Formats the value using the given formatter."}, {"sha": "296fb8733ba6c858068f7675d1c2ed3fe9709804", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -28,8 +28,13 @@ fn _assert_is_object_safe(_: &Iterator<Item=()>) {}\n /// [module-level documentation]: index.html\n /// [impl]: index.html#implementing-iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"`{Self}` is not an iterator; maybe try calling \\\n-                            `.iter()` or a similar method\"]\n+#[rustc_on_unimplemented(\n+    on(\n+        _Self=\"&str\",\n+        label=\"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"\n+    ),\n+    label=\"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"\n+)]\n #[doc(spotlight)]\n pub trait Iterator {\n     /// The type of the elements being iterated over."}, {"sha": "bf8367d85fd1085ad6d42bb05eceae760a95496a", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -2322,6 +2322,9 @@ impl<I> ExactSizeIterator for Take<I> where I: ExactSizeIterator {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<I> FusedIterator for Take<I> where I: FusedIterator {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<I: TrustedLen> TrustedLen for Take<I> {}\n+\n /// An iterator to maintain state while iterating another iterator.\n ///\n /// This `struct` is created by the [`scan`] method on [`Iterator`]. See its"}, {"sha": "5b4dc9b2c9a6546a9c2b5ba472693510ccaac278", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -325,6 +325,9 @@ impl<A: Step> Iterator for ops::RangeFrom<A> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<A: Step> FusedIterator for ops::RangeFrom<A> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<A: Step> TrustedLen for ops::RangeFrom<A> {}\n+\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     type Item = A;"}, {"sha": "b05a893e66104dc9cf517a66fb0598e60f13143f", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -44,6 +44,9 @@ impl<A: Clone> DoubleEndedIterator for Repeat<A> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<A: Clone> FusedIterator for Repeat<A> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<A: Clone> TrustedLen for Repeat<A> {}\n+\n /// Creates a new iterator that endlessly repeats a single element.\n ///\n /// The `repeat()` function repeats a single value over and over and over and"}, {"sha": "be4889f24877ced555dc55a7a85df01bd495b2ed", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -970,9 +970,11 @@ impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}\n /// The iterator reports a size hint where it is either exact\n /// (lower bound is equal to upper bound), or the upper bound is [`None`].\n /// The upper bound must only be [`None`] if the actual iterator length is\n-/// larger than [`usize::MAX`].\n+/// larger than [`usize::MAX`]. In that case, the lower bound must be\n+/// [`usize::MAX`], resulting in a [`.size_hint`] of `(usize::MAX, None)`.\n ///\n-/// The iterator must produce exactly the number of elements it reported.\n+/// The iterator must produce exactly the number of elements it reported\n+/// or diverge before reaching the end.\n ///\n /// # Safety\n ///"}, {"sha": "d0d0c09869e9dd398021ab70aa5be6cc1c54d948", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -75,7 +75,18 @@\n /// ```\n #[lang = \"add\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} + {RHS}`\"]\n+#[rustc_on_unimplemented(\n+    on(\n+        all(_Self=\"{integer}\", RHS=\"{float}\"),\n+        message=\"cannot add a float to an integer\",\n+    ),\n+    on(\n+        all(_Self=\"{float}\", RHS=\"{integer}\"),\n+        message=\"cannot add an integer to a float\",\n+    ),\n+    message=\"cannot add `{RHS}` to `{Self}`\",\n+    label=\"no implementation for `{Self} + {RHS}`\",\n+)]\n pub trait Add<RHS=Self> {\n     /// The resulting type after applying the `+` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -170,7 +181,8 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"sub\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} - {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot substract `{RHS}` from `{Self}`\",\n+                         label=\"no implementation for `{Self} - {RHS}`\")]\n pub trait Sub<RHS=Self> {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -287,7 +299,8 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} * {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot multiply `{RHS}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} * {RHS}`\")]\n pub trait Mul<RHS=Self> {\n     /// The resulting type after applying the `*` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -408,7 +421,8 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} / {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot divide `{Self}` by `{RHS}`\",\n+                         label=\"no implementation for `{Self} / {RHS}`\")]\n pub trait Div<RHS=Self> {\n     /// The resulting type after applying the `/` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -490,7 +504,8 @@ div_impl_float! { f32 f64 }\n /// ```\n #[lang = \"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} % {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot mod `{Self}` by `{RHS}`\",\n+                         label=\"no implementation for `{Self} % {RHS}`\")]\n pub trait Rem<RHS=Self> {\n     /// The resulting type after applying the `%` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -647,7 +662,8 @@ neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"add_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} += {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot add-assign `{Rhs}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} += {Rhs}`\")]\n pub trait AddAssign<Rhs=Self> {\n     /// Performs the `+=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -700,7 +716,8 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"sub_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} -= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot substract-assign `{Rhs}` from `{Self}`\",\n+                         label=\"no implementation for `{Self} -= {Rhs}`\")]\n pub trait SubAssign<Rhs=Self> {\n     /// Performs the `-=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -744,7 +761,8 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"mul_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} *= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot multiply-assign `{Rhs}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} *= {Rhs}`\")]\n pub trait MulAssign<Rhs=Self> {\n     /// Performs the `*=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -788,7 +806,8 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"div_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} /= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot divide-assign `{Self}` by `{Rhs}`\",\n+                         label=\"no implementation for `{Self} /= {Rhs}`\")]\n pub trait DivAssign<Rhs=Self> {\n     /// Performs the `/=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -835,7 +854,8 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"rem_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} %= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot mod-assign `{Self}` by `{Rhs}``\",\n+                         label=\"no implementation for `{Self} %= {Rhs}`\")]\n pub trait RemAssign<Rhs=Self> {\n     /// Performs the `%=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"}, {"sha": "a0ecd6cf75ce99277d279f4bc81aaccde0893045", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -120,7 +120,8 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitand\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} & {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} & {RHS}`\",\n+                         label=\"no implementation for `{Self} & {RHS}`\")]\n pub trait BitAnd<RHS=Self> {\n     /// The resulting type after applying the `&` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -201,7 +202,8 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} | {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} | {RHS}`\",\n+                         label=\"no implementation for `{Self} | {RHS}`\")]\n pub trait BitOr<RHS=Self> {\n     /// The resulting type after applying the `|` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -285,7 +287,8 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitxor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} ^ {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^ {RHS}`\",\n+                         label=\"no implementation for `{Self} ^ {RHS}`\")]\n pub trait BitXor<RHS=Self> {\n     /// The resulting type after applying the `^` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -365,7 +368,8 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"shl\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} << {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} << {RHS}`\",\n+                         label=\"no implementation for `{Self} << {RHS}`\")]\n pub trait Shl<RHS> {\n     /// The resulting type after applying the `<<` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -466,7 +470,8 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n /// ```\n #[lang = \"shr\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} >> {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} >> {RHS}`\",\n+                         label=\"no implementation for `{Self} >> {RHS}`\")]\n pub trait Shr<RHS> {\n     /// The resulting type after applying the `>>` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -579,7 +584,8 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// ```\n #[lang = \"bitand_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} &= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} &= {Rhs}`\",\n+                         label=\"no implementation for `{Self} &= {Rhs}`\")]\n pub trait BitAndAssign<Rhs=Self> {\n     /// Performs the `&=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -626,7 +632,8 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitor_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} |= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} |= {Rhs}`\",\n+                         label=\"no implementation for `{Self} |= {Rhs}`\")]\n pub trait BitOrAssign<Rhs=Self> {\n     /// Performs the `|=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -673,7 +680,8 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitxor_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} ^= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^= {Rhs}`\",\n+                         label=\"no implementation for `{Self} ^= {Rhs}`\")]\n pub trait BitXorAssign<Rhs=Self> {\n     /// Performs the `^=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -718,7 +726,8 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"shl_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} <<= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} <<= {Rhs}`\",\n+                         label=\"no implementation for `{Self} <<= {Rhs}`\")]\n pub trait ShlAssign<Rhs> {\n     /// Performs the `<<=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -784,7 +793,8 @@ shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// ```\n #[lang = \"shr_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} >>= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} >>= {Rhs}`\",\n+                         label=\"no implementation for `{Self} >>= {Rhs}`\")]\n pub trait ShrAssign<Rhs=Self> {\n     /// Performs the `>>=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"}, {"sha": "3d84e910fe662d0de5873d267b8fbda362584038", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 63, "deletions": 24, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -2461,7 +2461,7 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n }\n \n /// Previous name of `NonNull`.\n-#[rustc_deprecated(since = \"1.24\", reason = \"renamed to `NonNull`\")]\n+#[rustc_deprecated(since = \"1.25.0\", reason = \"renamed to `NonNull`\")]\n #[unstable(feature = \"shared\", issue = \"27730\")]\n pub type Shared<T> = NonNull<T>;\n \n@@ -2482,34 +2482,27 @@ pub type Shared<T> = NonNull<T>;\n /// Usually this won't be necessary; covariance is correct for most safe abstractions,\n /// such as Box, Rc, Arc, Vec, and LinkedList. This is the case because they\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n pub struct NonNull<T: ?Sized> {\n     pointer: NonZero<*const T>,\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n-impl<T: ?Sized> fmt::Debug for NonNull<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Pointer::fmt(&self.as_ptr(), f)\n-    }\n-}\n-\n /// `NonNull` pointers are not `Send` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> !Send for NonNull<T> { }\n \n /// `NonNull` pointers are not `Sync` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> !Sync for NonNull<T> { }\n \n impl<T: Sized> NonNull<T> {\n     /// Creates a new `NonNull` that is dangling, but well-aligned.\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn dangling() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n@@ -2524,19 +2517,19 @@ impl<T: ?Sized> NonNull<T> {\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         NonNull { pointer: NonZero::new_unchecked(ptr) }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         NonZero::new(ptr as *const T).map(|nz| NonNull { pointer: nz })\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn as_ptr(self) -> *mut T {\n         self.pointer.get() as *mut T\n     }\n@@ -2546,7 +2539,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub unsafe fn as_ref(&self) -> &T {\n         &*self.as_ptr()\n     }\n@@ -2556,47 +2549,93 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub unsafe fn as_mut(&mut self) -> &mut T {\n         &mut *self.as_ptr()\n     }\n+\n+    /// Cast to a pointer of another type\n+    #[unstable(feature = \"nonnull_cast\", issue = \"47653\")]\n+    pub fn cast<U>(self) -> NonNull<U> {\n+        unsafe {\n+            NonNull::new_unchecked(self.as_ptr() as *mut U)\n+        }\n+    }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> Clone for NonNull<T> {\n     fn clone(&self) -> Self {\n         *self\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> Copy for NonNull<T> { }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> { }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> fmt::Debug for NonNull<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Pointer::fmt(&self.as_ptr(), f)\n+    }\n+}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> fmt::Pointer for NonNull<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> Eq for NonNull<T> {}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> PartialEq for NonNull<T> {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.as_ptr() == other.as_ptr()\n+    }\n+}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> Ord for NonNull<T> {\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        self.as_ptr().cmp(&other.as_ptr())\n+    }\n+}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> PartialOrd for NonNull<T> {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        self.as_ptr().partial_cmp(&other.as_ptr())\n+    }\n+}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> hash::Hash for NonNull<T> {\n+    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+        self.as_ptr().hash(state)\n+    }\n+}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     fn from(unique: Unique<T>) -> Self {\n         NonNull { pointer: unique.pointer }\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     fn from(reference: &'a mut T) -> Self {\n         NonNull { pointer: NonZero::from(reference) }\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     fn from(reference: &'a T) -> Self {\n         NonNull { pointer: NonZero::from(reference) }"}, {"sha": "0373c8922b2a53ba7c518df48d233082aa143a0d", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -1371,6 +1371,29 @@ fn test_range_from_nth() {\n     assert_eq!(r, 16..);\n     assert_eq!(r.nth(10), Some(26));\n     assert_eq!(r, 27..);\n+\n+    assert_eq!((0..).size_hint(), (usize::MAX, None));\n+}\n+\n+fn is_trusted_len<I: TrustedLen>(_: I) {}\n+\n+#[test]\n+fn test_range_from_take() {\n+    let mut it = (0..).take(3);\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.next(), Some(1));\n+    assert_eq!(it.next(), Some(2));\n+    assert_eq!(it.next(), None);\n+    is_trusted_len((0..).take(3));\n+    assert_eq!((0..).take(3).size_hint(), (3, Some(3)));\n+    assert_eq!((0..).take(0).size_hint(), (0, Some(0)));\n+    assert_eq!((0..).take(usize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n+}\n+\n+#[test]\n+fn test_range_from_take_collect() {\n+    let v: Vec<_> = (0..).take(3).collect();\n+    assert_eq!(v, vec![0, 1, 2]);\n }\n \n #[test]\n@@ -1485,6 +1508,26 @@ fn test_repeat() {\n     assert_eq!(it.next(), Some(42));\n     assert_eq!(it.next(), Some(42));\n     assert_eq!(it.next(), Some(42));\n+    assert_eq!(repeat(42).size_hint(), (usize::MAX, None));\n+}\n+\n+#[test]\n+fn test_repeat_take() {\n+    let mut it = repeat(42).take(3);\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), None);\n+    is_trusted_len(repeat(42).take(3));\n+    assert_eq!(repeat(42).take(3).size_hint(), (3, Some(3)));\n+    assert_eq!(repeat(42).take(0).size_hint(), (0, Some(0)));\n+    assert_eq!(repeat(42).take(usize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n+}\n+\n+#[test]\n+fn test_repeat_take_collect() {\n+    let v: Vec<_> = repeat(42).take(3).collect();\n+    assert_eq!(v, vec![42, 42, 42]);\n }\n \n #[test]"}, {"sha": "a7a261950593164b3f4736bd86c8e073a722c8d5", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -58,6 +58,7 @@\n #![feature(macro_vis_matcher)]\n #![feature(match_default_bindings)]\n #![feature(never_type)]\n+#![feature(non_exhaustive)]\n #![feature(nonzero)]\n #![feature(quote)]\n #![feature(refcell_replace_swap)]"}, {"sha": "10497c95e27d07e79531034c15120e0c48406392", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -109,7 +109,7 @@ use self::VarKind::*;\n use hir::def::*;\n use ty::{self, TyCtxt};\n use lint;\n-use util::nodemap::NodeMap;\n+use util::nodemap::{NodeMap, NodeSet};\n \n use std::{fmt, usize};\n use std::io::prelude::*;\n@@ -244,7 +244,8 @@ struct CaptureInfo {\n #[derive(Copy, Clone, Debug)]\n struct LocalInfo {\n     id: NodeId,\n-    name: ast::Name\n+    name: ast::Name,\n+    is_shorthand: bool,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -333,6 +334,13 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n         }\n     }\n \n+    fn variable_is_shorthand(&self, var: Variable) -> bool {\n+        match self.var_kinds[var.get()] {\n+            Local(LocalInfo { is_shorthand, .. }) => is_shorthand,\n+            Arg(..) | CleanExit => false\n+        }\n+    }\n+\n     fn set_captures(&mut self, node_id: NodeId, cs: Vec<CaptureInfo>) {\n         self.capture_info_map.insert(node_id, Rc::new(cs));\n     }\n@@ -384,23 +392,41 @@ fn visit_local<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, local: &'tcx hir::Local) {\n         let name = path1.node;\n         ir.add_live_node_for_node(p_id, VarDefNode(sp));\n         ir.add_variable(Local(LocalInfo {\n-          id: p_id,\n-          name,\n+            id: p_id,\n+            name,\n+            is_shorthand: false,\n         }));\n     });\n     intravisit::walk_local(ir, local);\n }\n \n fn visit_arm<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, arm: &'tcx hir::Arm) {\n     for pat in &arm.pats {\n+        // for struct patterns, take note of which fields used shorthand (`x`\n+        // rather than `x: x`)\n+        //\n+        // FIXME: according to the rust-lang-nursery/rustc-guide book and\n+        // librustc/README.md, `NodeId`s are to be phased out in favor of\n+        // `HirId`s; however, we need to match the signature of `each_binding`,\n+        // which uses `NodeIds`.\n+        let mut shorthand_field_ids = NodeSet();\n+        if let hir::PatKind::Struct(_, ref fields, _) = pat.node {\n+            for field in fields {\n+                if field.node.is_shorthand {\n+                    shorthand_field_ids.insert(field.node.pat.id);\n+                }\n+            }\n+        }\n+\n         pat.each_binding(|bm, p_id, sp, path1| {\n             debug!(\"adding local variable {} from match with bm {:?}\",\n                    p_id, bm);\n             let name = path1.node;\n             ir.add_live_node_for_node(p_id, VarDefNode(sp));\n             ir.add_variable(Local(LocalInfo {\n                 id: p_id,\n-                name,\n+                name: name,\n+                is_shorthand: shorthand_field_ids.contains(&p_id)\n             }));\n         })\n     }\n@@ -1483,17 +1509,26 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     self.assigned_on_exit(ln, var).is_some()\n                 };\n \n+                let suggest_underscore_msg = format!(\"consider using `_{}` instead\",\n+                                                     name);\n                 if is_assigned {\n-                    self.ir.tcx.lint_node_note(lint::builtin::UNUSED_VARIABLES, id, sp,\n-                        &format!(\"variable `{}` is assigned to, but never used\",\n-                                 name),\n-                        &format!(\"to avoid this warning, consider using `_{}` instead\",\n-                                 name));\n+                    self.ir.tcx\n+                        .lint_node_note(lint::builtin::UNUSED_VARIABLES, id, sp,\n+                                        &format!(\"variable `{}` is assigned to, but never used\",\n+                                                 name),\n+                                        &suggest_underscore_msg);\n                 } else if name != \"self\" {\n-                    self.ir.tcx.lint_node_note(lint::builtin::UNUSED_VARIABLES, id, sp,\n-                        &format!(\"unused variable: `{}`\", name),\n-                        &format!(\"to avoid this warning, consider using `_{}` instead\",\n-                                 name));\n+                    let msg = format!(\"unused variable: `{}`\", name);\n+                    let mut err = self.ir.tcx\n+                        .struct_span_lint_node(lint::builtin::UNUSED_VARIABLES, id, sp, &msg);\n+                    if self.ir.variable_is_shorthand(var) {\n+                        err.span_suggestion(sp, \"try ignoring the field\",\n+                                            format!(\"{}: _\", name));\n+                    } else {\n+                        err.span_suggestion_short(sp, &suggest_underscore_msg,\n+                                                  format!(\"_{}\", name));\n+                    }\n+                    err.emit()\n                 }\n             }\n             true"}, {"sha": "8b9a08dda87effe890bf8e362b46a80f6ef2bb09", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -112,6 +112,31 @@ pub enum OutputType {\n     DepInfo,\n }\n \n+/// The epoch of the compiler (RFC 2052)\n+#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq)]\n+#[non_exhaustive]\n+pub enum Epoch {\n+    // epochs must be kept in order, newest to oldest\n+\n+    /// The 2015 epoch\n+    Epoch2015,\n+    /// The 2018 epoch\n+    Epoch2018,\n+\n+    // when adding new epochs, be sure to update:\n+    //\n+    // - the list in the `parse_epoch` static\n+    // - the match in the `parse_epoch` function\n+    // - add a `rust_####()` function to the session\n+    // - update the enum in Cargo's sources as well\n+    //\n+    // When -Zepoch becomes --epoch, there will\n+    // also be a check for the epoch being nightly-only\n+    // somewhere. That will need to be updated\n+    // whenever we're stabilizing/introducing a new epoch\n+    // as well as changing the default Cargo template.\n+}\n+\n impl_stable_hash_for!(enum self::OutputType {\n     Bitcode,\n     Assembly,\n@@ -783,11 +808,13 @@ macro_rules! options {\n             Some(\"`string` or `string=string`\");\n         pub const parse_lto: Option<&'static str> =\n             Some(\"one of `thin`, `fat`, or omitted\");\n+        pub const parse_epoch: Option<&'static str> =\n+            Some(\"one of: `2015`, `2018`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n+        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto, Epoch};\n         use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n \n@@ -991,6 +1018,15 @@ macro_rules! options {\n             };\n             true\n         }\n+\n+        fn parse_epoch(slot: &mut Epoch, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"2015\") => *slot = Epoch::Epoch2015,\n+                Some(\"2018\") => *slot = Epoch::Epoch2018,\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -1278,6 +1314,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `everybody_loops` (all function bodies replaced with `loop {}`),\n         `hir` (the HIR), `hir,identified`, or\n         `hir,typed` (HIR with types for each node).\"),\n+    epoch: Epoch = (Epoch::Epoch2015, parse_epoch, [TRACKED],\n+        \"The epoch to build Rust with. Newer epochs may include features\n+         that require breaking changes. The default epoch is 2015 (the first\n+         epoch). Crates compiled with different epochs can be linked together.\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -2069,7 +2109,7 @@ mod dep_tracking {\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n     use super::{Passes, CrateType, OptLevel, DebugInfoLevel, Lto,\n-                OutputTypes, Externs, ErrorOutputType, Sanitizer};\n+                OutputTypes, Externs, ErrorOutputType, Sanitizer, Epoch};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_back::{PanicStrategy, RelroLevel};\n \n@@ -2131,6 +2171,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n+    impl_dep_tracking_hash_via_hash!(Epoch);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);"}, {"sha": "9d7a9acc3d533bdb97375b6cc3d569a4885ce694", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -19,7 +19,7 @@ use lint;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::{BorrowckMode, DebugInfoLevel, OutputType};\n+use session::config::{BorrowckMode, DebugInfoLevel, OutputType, Epoch};\n use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n@@ -864,6 +864,11 @@ impl Session {\n     pub fn teach(&self, code: &DiagnosticId) -> bool {\n         self.opts.debugging_opts.teach && !self.parse_sess.span_diagnostic.code_emitted(code)\n     }\n+\n+    /// Are we allowed to use features from the Rust 2018 epoch?\n+    pub fn rust_2018(&self) -> bool {\n+        self.opts.debugging_opts.epoch >= Epoch::Epoch2018\n+    }\n }\n \n pub fn build_session(sopts: config::Options,"}, {"sha": "d4bcf00be80896ad23fd7d327e92ab984984a9ea", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if direct {\n             // this is a \"direct\", user-specified, rather than derived,\n             // obligation.\n-            flags.push((\"direct\", None));\n+            flags.push((\"direct\".to_string(), None));\n         }\n \n         if let ObligationCauseCode::ItemObligation(item) = obligation.cause.code {\n@@ -359,21 +359,37 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // Currently I'm leaving it for what I need for `try`.\n             if self.tcx.trait_of_item(item) == Some(trait_ref.def_id) {\n                 method = self.tcx.item_name(item);\n-                flags.push((\"from_method\", None));\n-                flags.push((\"from_method\", Some(&*method)));\n+                flags.push((\"from_method\".to_string(), None));\n+                flags.push((\"from_method\".to_string(), Some(method.to_string())));\n             }\n         }\n \n         if let Some(k) = obligation.cause.span.compiler_desugaring_kind() {\n             desugaring = k.as_symbol().as_str();\n-            flags.push((\"from_desugaring\", None));\n-            flags.push((\"from_desugaring\", Some(&*desugaring)));\n+            flags.push((\"from_desugaring\".to_string(), None));\n+            flags.push((\"from_desugaring\".to_string(), Some(desugaring.to_string())));\n+        }\n+        let generics = self.tcx.generics_of(def_id);\n+        let self_ty = trait_ref.self_ty();\n+        let self_ty_str = self_ty.to_string();\n+        flags.push((\"_Self\".to_string(), Some(self_ty_str.clone())));\n+\n+        for param in generics.types.iter() {\n+            let name = param.name.as_str().to_string();\n+            let ty = trait_ref.substs.type_for_def(param);\n+            let ty_str = ty.to_string();\n+            flags.push((name.clone(),\n+                        Some(ty_str.clone())));\n+        }\n+\n+        if let Some(true) = self_ty.ty_to_def_id().map(|def_id| def_id.is_local()) {\n+            flags.push((\"crate_local\".to_string(), None));\n         }\n \n         if let Ok(Some(command)) = OnUnimplementedDirective::of_item(\n             self.tcx, trait_ref.def_id, def_id\n         ) {\n-            command.evaluate(self.tcx, trait_ref, &flags)\n+            command.evaluate(self.tcx, trait_ref, &flags[..])\n         } else {\n             OnUnimplementedNote::empty()\n         }\n@@ -549,7 +565,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 .map(|t| (format!(\" in `{}`\", t), format!(\"within `{}`, \", t)))\n                             .unwrap_or((String::new(), String::new()));\n \n-                        let OnUnimplementedNote { message, label }\n+                        let OnUnimplementedNote { message, label, note }\n                             = self.on_unimplemented_note(trait_ref, obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n \n@@ -578,6 +594,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                      trait_ref,\n                                                      trait_ref.self_ty()));\n                         }\n+                        if let Some(ref s) = note {\n+                            // If it has a custom \"#[rustc_on_unimplemented]\" note, let's display it\n+                            err.note(s.as_str());\n+                        }\n \n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n "}, {"sha": "8c2c1cfa454729c5cbfcf1593dde5771617b4efa", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -29,16 +29,18 @@ pub struct OnUnimplementedDirective {\n     pub subcommands: Vec<OnUnimplementedDirective>,\n     pub message: Option<OnUnimplementedFormatString>,\n     pub label: Option<OnUnimplementedFormatString>,\n+    pub note: Option<OnUnimplementedFormatString>,\n }\n \n pub struct OnUnimplementedNote {\n     pub message: Option<String>,\n     pub label: Option<String>,\n+    pub note: Option<String>,\n }\n \n impl OnUnimplementedNote {\n     pub fn empty() -> Self {\n-        OnUnimplementedNote { message: None, label: None }\n+        OnUnimplementedNote { message: None, label: None, note: None }\n     }\n }\n \n@@ -89,6 +91,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n \n         let mut message = None;\n         let mut label = None;\n+        let mut note = None;\n         let mut subcommands = vec![];\n         for item in item_iter {\n             if item.check_name(\"message\") && message.is_none() {\n@@ -103,8 +106,14 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n                         tcx, trait_def_id, label_.as_str(), span)?);\n                     continue;\n                 }\n+            } else if item.check_name(\"note\") && note.is_none() {\n+                if let Some(note_) = item.value_str() {\n+                    note = Some(OnUnimplementedFormatString::try_parse(\n+                        tcx, trait_def_id, note_.as_str(), span)?);\n+                    continue;\n+                }\n             } else if item.check_name(\"on\") && is_root &&\n-                message.is_none() && label.is_none()\n+                message.is_none() && label.is_none() && note.is_none()\n             {\n                 if let Some(items) = item.meta_item_list() {\n                     if let Ok(subcommand) =\n@@ -128,7 +137,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n         if errored {\n             Err(ErrorReported)\n         } else {\n-            Ok(OnUnimplementedDirective { condition, message, label, subcommands })\n+            Ok(OnUnimplementedDirective { condition, message, label, subcommands, note })\n         }\n     }\n \n@@ -154,7 +163,8 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n                 message: None,\n                 subcommands: vec![],\n                 label: Some(OnUnimplementedFormatString::try_parse(\n-                    tcx, trait_def_id, value.as_str(), attr.span)?)\n+                    tcx, trait_def_id, value.as_str(), attr.span)?),\n+                note: None,\n             }))\n         } else {\n             return Err(parse_error(tcx, attr.span,\n@@ -169,20 +179,20 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n     pub fn evaluate(&self,\n                     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                     trait_ref: ty::TraitRef<'tcx>,\n-                    options: &[(&str, Option<&str>)])\n+                    options: &[(String, Option<String>)])\n                     -> OnUnimplementedNote\n     {\n         let mut message = None;\n         let mut label = None;\n-        info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\",\n-              self, trait_ref, options);\n+        let mut note = None;\n+        info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\", self, trait_ref, options);\n \n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n                 if !attr::eval_condition(condition, &tcx.sess.parse_sess, &mut |c| {\n-                    options.contains(&(&c.name().as_str(),\n-                                      match c.value_str().map(|s| s.as_str()) {\n-                                          Some(ref s) => Some(s),\n+                    options.contains(&(c.name().as_str().to_string(),\n+                                      match c.value_str().map(|s| s.as_str().to_string()) {\n+                                          Some(s) => Some(s),\n                                           None => None\n                                       }))\n                 }) {\n@@ -198,11 +208,16 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n             if let Some(ref label_) = command.label {\n                 label = Some(label_.clone());\n             }\n+\n+            if let Some(ref note_) = command.note {\n+                note = Some(note_.clone());\n+            }\n         }\n \n         OnUnimplementedNote {\n             label: label.map(|l| l.format(tcx, trait_ref)),\n-            message: message.map(|m| m.format(tcx, trait_ref))\n+            message: message.map(|m| m.format(tcx, trait_ref)),\n+            note: note.map(|n| n.format(tcx, trait_ref)),\n         }\n     }\n }"}, {"sha": "f98a8f834df8a912f1bdb914f1d904eed1c6270e", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -13,18 +13,20 @@\n #![allow(non_snake_case)]\n \n use hir::def_id::DefId;\n-use hir::ItemLocalId;\n+use hir::{HirId, ItemLocalId};\n use syntax::ast;\n \n pub use rustc_data_structures::fx::FxHashMap;\n pub use rustc_data_structures::fx::FxHashSet;\n \n pub type NodeMap<T> = FxHashMap<ast::NodeId, T>;\n pub type DefIdMap<T> = FxHashMap<DefId, T>;\n+pub type HirIdMap<T> = FxHashMap<HirId, T>;\n pub type ItemLocalMap<T> = FxHashMap<ItemLocalId, T>;\n \n pub type NodeSet = FxHashSet<ast::NodeId>;\n pub type DefIdSet = FxHashSet<DefId>;\n+pub type HirIdSet = FxHashSet<HirId>;\n pub type ItemLocalSet = FxHashSet<ItemLocalId>;\n \n pub fn NodeMap<T>() -> NodeMap<T> { FxHashMap() }"}, {"sha": "55f11665f6d0ba83a157680b9ce433bfeab5f02a", "filename": "src/librustc_binaryen/BinaryenWrapper.cpp", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_binaryen%2FBinaryenWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_binaryen%2FBinaryenWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_binaryen%2FBinaryenWrapper.cpp?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -14,6 +14,7 @@\n \n #include <stdint.h>\n #include <string>\n+#include <sstream>\n #include <stdlib.h>\n \n #include \"s2wasm.h\"\n@@ -24,6 +25,7 @@ using namespace wasm;\n \n struct BinaryenRustModule {\n   BufferWithRandomAccess buffer;\n+  std::string sourceMapJSON;\n };\n \n struct BinaryenRustModuleOptions {\n@@ -36,6 +38,7 @@ struct BinaryenRustModuleOptions {\n   bool ignoreUnknownSymbols;\n   bool debugInfo;\n   std::string startFunction;\n+  std::string sourceMapUrl;\n \n   BinaryenRustModuleOptions() :\n     globalBase(0),\n@@ -46,7 +49,8 @@ struct BinaryenRustModuleOptions {\n     importMemory(false),\n     ignoreUnknownSymbols(false),\n     debugInfo(false),\n-    startFunction(\"\")\n+    startFunction(\"\"),\n+    sourceMapUrl(\"\")\n   {}\n \n };\n@@ -73,6 +77,12 @@ BinaryenRustModuleOptionsSetStart(BinaryenRustModuleOptions *options,\n   options->startFunction = start;\n }\n \n+extern \"C\" void\n+BinaryenRustModuleOptionsSetSourceMapUrl(BinaryenRustModuleOptions *options,\n+                                         char *sourceMapUrl) {\n+  options->sourceMapUrl = sourceMapUrl;\n+}\n+\n extern \"C\" void\n BinaryenRustModuleOptionsSetStackAllocation(BinaryenRustModuleOptions *options,\n                                             uint64_t stack) {\n@@ -106,12 +116,20 @@ BinaryenRustModuleCreate(const BinaryenRustModuleOptions *options,\n   {\n     WasmBinaryWriter writer(&linker.getOutput().wasm, ret->buffer, options->debug);\n     writer.setNamesSection(options->debugInfo);\n-    // FIXME: support source maps?\n-    // writer.setSourceMap(sourceMapStream.get(), sourceMapUrl);\n+\n+    std::unique_ptr<std::ostringstream> sourceMapStream = nullptr;\n+    {\n+      sourceMapStream = make_unique<std::ostringstream>();\n+      writer.setSourceMap(sourceMapStream.get(), options->sourceMapUrl);\n+    }\n \n     // FIXME: support symbol maps?\n     // writer.setSymbolMap(symbolMap);\n     writer.write();\n+\n+    if (sourceMapStream) {\n+      ret->sourceMapJSON = sourceMapStream->str();\n+    }\n   }\n   return ret.release();\n }\n@@ -126,6 +144,16 @@ BinaryenRustModuleLen(const BinaryenRustModule *M) {\n   return M->buffer.size();\n }\n \n+extern \"C\" const char*\n+BinaryenRustModuleSourceMapPtr(const BinaryenRustModule *M) {\n+  return M->sourceMapJSON.data();\n+}\n+\n+extern \"C\" size_t\n+BinaryenRustModuleSourceMapLen(const BinaryenRustModule *M) {\n+  return M->sourceMapJSON.length();\n+}\n+\n extern \"C\" void\n BinaryenRustModuleFree(BinaryenRustModule *M) {\n   delete M;"}, {"sha": "36174e11ba04a988012f7724e537dd41c0bfb339", "filename": "src/librustc_binaryen/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_binaryen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_binaryen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_binaryen%2Flib.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -51,6 +51,15 @@ impl Module {\n             slice::from_raw_parts(ptr, len)\n         }\n     }\n+\n+    /// Returns the data of the source map JSON.\n+    pub fn source_map(&self) -> &[u8] {\n+        unsafe {\n+            let ptr = BinaryenRustModuleSourceMapPtr(self.ptr);\n+            let len = BinaryenRustModuleSourceMapLen(self.ptr);\n+            slice::from_raw_parts(ptr, len)\n+        }\n+    }\n }\n \n impl Drop for Module {\n@@ -94,6 +103,15 @@ impl ModuleOptions {\n         self\n     }\n \n+    /// Configures a `sourceMappingURL` custom section value for the module.\n+    pub fn source_map_url(&mut self, url: &str) -> &mut Self {\n+        let url = CString::new(url).unwrap();\n+        unsafe {\n+            BinaryenRustModuleOptionsSetSourceMapUrl(self.ptr, url.as_ptr());\n+        }\n+        self\n+    }\n+\n     /// Configures how much stack is initially allocated for the module. 1MB is\n     /// probably good enough for now.\n     pub fn stack(&mut self, amt: u64) -> &mut Self {\n@@ -130,6 +148,8 @@ extern {\n         -> *mut BinaryenRustModule;\n     fn BinaryenRustModulePtr(module: *const BinaryenRustModule) -> *const u8;\n     fn BinaryenRustModuleLen(module: *const BinaryenRustModule) -> usize;\n+    fn BinaryenRustModuleSourceMapPtr(module: *const BinaryenRustModule) -> *const u8;\n+    fn BinaryenRustModuleSourceMapLen(module: *const BinaryenRustModule) -> usize;\n     fn BinaryenRustModuleFree(module: *mut BinaryenRustModule);\n \n     fn BinaryenRustModuleOptionsCreate()\n@@ -138,6 +158,8 @@ extern {\n                                              debuginfo: bool);\n     fn BinaryenRustModuleOptionsSetStart(module: *mut BinaryenRustModuleOptions,\n                                          start: *const libc::c_char);\n+    fn BinaryenRustModuleOptionsSetSourceMapUrl(module: *mut BinaryenRustModuleOptions,\n+                                                sourceMapUrl: *const libc::c_char);\n     fn BinaryenRustModuleOptionsSetStackAllocation(\n         module: *mut BinaryenRustModuleOptions,\n         stack: u64,"}, {"sha": "b732eeb624c6dd3cefb5e8e61d36e54a5949da74", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -71,9 +71,12 @@ pub enum Candidate {\n     /// Borrow of a constant temporary.\n     Ref(Location),\n \n-    /// Array of indices found in the third argument of\n-    /// a call to one of the simd_shuffleN intrinsics.\n-    ShuffleIndices(BasicBlock)\n+    /// Currently applied to function calls where the callee has the unstable\n+    /// `#[rustc_args_required_const]` attribute as well as the SIMD shuffle\n+    /// intrinsic. The intrinsic requires the arguments are indeed constant and\n+    /// the attribute currently provides the semantic requirement that arguments\n+    /// must be constant.\n+    Argument { bb: BasicBlock, index: usize },\n }\n \n struct TempCollector<'tcx> {\n@@ -303,10 +306,10 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     _ => bug!()\n                 }\n             }\n-            Candidate::ShuffleIndices(bb) => {\n+            Candidate::Argument { bb, index } => {\n                 match self.source[bb].terminator_mut().kind {\n                     TerminatorKind::Call { ref mut args, .. } => {\n-                        Rvalue::Use(mem::replace(&mut args[2], new_operand))\n+                        Rvalue::Use(mem::replace(&mut args[index], new_operand))\n                     }\n                     _ => bug!()\n                 }\n@@ -359,15 +362,15 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n                 }\n                 (statement.source_info.span, dest.ty(mir, tcx).to_ty(tcx))\n             }\n-            Candidate::ShuffleIndices(bb) => {\n+            Candidate::Argument { bb, index } => {\n                 let terminator = mir[bb].terminator();\n                 let ty = match terminator.kind {\n                     TerminatorKind::Call { ref args, .. } => {\n-                        args[2].ty(mir, tcx)\n+                        args[index].ty(mir, tcx)\n                     }\n                     _ => {\n                         span_bug!(terminator.source_info.span,\n-                                  \"expected simd_shuffleN call to promote\");\n+                                  \"expected call argument to promote\");\n                     }\n                 };\n                 (terminator.source_info.span, ty)"}, {"sha": "297e0e491f69468b777130d1fa59acaa7ccda266", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -17,6 +17,7 @@\n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n@@ -30,6 +31,7 @@ use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::middle::lang_items;\n use syntax::abi::Abi;\n use syntax::attr;\n+use syntax::ast::LitKind;\n use syntax::feature_gate::UnstableFeatures;\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -407,7 +409,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                         _ => {}\n                     }\n                 }\n-                Candidate::ShuffleIndices(_) => {}\n+                Candidate::Argument { .. } => {}\n             }\n         }\n \n@@ -730,8 +732,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             self.visit_operand(func, location);\n \n             let fn_ty = func.ty(self.mir, self.tcx);\n+            let mut callee_def_id = None;\n             let (mut is_shuffle, mut is_const_fn) = (false, None);\n             if let ty::TyFnDef(def_id, _) = fn_ty.sty {\n+                callee_def_id = Some(def_id);\n                 match self.tcx.fn_sig(def_id).abi() {\n                     Abi::RustIntrinsic |\n                     Abi::PlatformIntrinsic => {\n@@ -754,17 +758,39 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n             }\n \n+            let constant_arguments = callee_def_id.and_then(|id| {\n+                args_required_const(self.tcx, id)\n+            });\n             for (i, arg) in args.iter().enumerate() {\n                 self.nest(|this| {\n                     this.visit_operand(arg, location);\n-                    if is_shuffle && i == 2 && this.mode == Mode::Fn {\n-                        let candidate = Candidate::ShuffleIndices(bb);\n+                    if this.mode != Mode::Fn {\n+                        return\n+                    }\n+                    let candidate = Candidate::Argument { bb, index: i };\n+                    if is_shuffle && i == 2 {\n                         if this.can_promote() {\n                             this.promotion_candidates.push(candidate);\n                         } else {\n                             span_err!(this.tcx.sess, this.span, E0526,\n                                       \"shuffle indices are not constant\");\n                         }\n+                        return\n+                    }\n+\n+                    let constant_arguments = match constant_arguments.as_ref() {\n+                        Some(s) => s,\n+                        None => return,\n+                    };\n+                    if !constant_arguments.contains(&i) {\n+                        return\n+                    }\n+                    if this.can_promote() {\n+                        this.promotion_candidates.push(candidate);\n+                    } else {\n+                        this.tcx.sess.span_err(this.span,\n+                            &format!(\"argument {} is required to be a constant\",\n+                                     i + 1));\n                     }\n                 });\n             }\n@@ -1085,3 +1111,16 @@ impl MirPass for QualifyAndPromoteConstants {\n         }\n     }\n }\n+\n+fn args_required_const(tcx: TyCtxt, def_id: DefId) -> Option<FxHashSet<usize>> {\n+    let attrs = tcx.get_attrs(def_id);\n+    let attr = attrs.iter().find(|a| a.check_name(\"rustc_args_required_const\"))?;\n+    let mut ret = FxHashSet();\n+    for meta in attr.meta_item_list()? {\n+        match meta.literal()?.node {\n+            LitKind::Int(a, _) => { ret.insert(a as usize); }\n+            _ => return None,\n+        }\n+    }\n+    Some(ret)\n+}"}, {"sha": "ded9a296817b3f85dd8cd80da98de7d132b86787", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -759,7 +759,10 @@ unsafe fn codegen(cgcx: &CodegenContext,\n \n         if asm2wasm && config.emit_obj {\n             let assembly = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n-            binaryen_assemble(cgcx, diag_handler, &assembly, &obj_out);\n+            let suffix = \".wasm.map\"; // FIXME use target suffix\n+            let map = cgcx.output_filenames.path(OutputType::Exe)\n+                .with_extension(&suffix[1..]);\n+            binaryen_assemble(cgcx, diag_handler, &assembly, &obj_out, &map);\n             timeline.record(\"binaryen\");\n \n             if !config.emit_asm {\n@@ -814,7 +817,8 @@ unsafe fn codegen(cgcx: &CodegenContext,\n fn binaryen_assemble(cgcx: &CodegenContext,\n                      handler: &Handler,\n                      assembly: &Path,\n-                     object: &Path) {\n+                     object: &Path,\n+                     map: &Path) {\n     use rustc_binaryen::{Module, ModuleOptions};\n \n     let input = fs::read(&assembly).and_then(|contents| {\n@@ -823,6 +827,8 @@ fn binaryen_assemble(cgcx: &CodegenContext,\n     let mut options = ModuleOptions::new();\n     if cgcx.debuginfo != config::NoDebugInfo {\n         options.debuginfo(true);\n+        let map_file_name = map.file_name().unwrap();\n+        options.source_map_url(map_file_name.to_str().unwrap());\n     }\n \n     options.stack(1024 * 1024);\n@@ -832,7 +838,13 @@ fn binaryen_assemble(cgcx: &CodegenContext,\n             .map_err(|e| io::Error::new(io::ErrorKind::Other, e))\n     });\n     let err = assembled.and_then(|binary| {\n-        fs::write(&object, binary.data())\n+        fs::write(&object, binary.data()).and_then(|()| {\n+            if cgcx.debuginfo != config::NoDebugInfo {\n+                fs::write(map, binary.source_map())\n+            } else {\n+                Ok(())\n+            }\n+        })\n     });\n     if let Err(e) = err {\n         handler.err(&format!(\"failed to run binaryen assembler: {}\", e));"}, {"sha": "e8c3966f23f08c495f1721f6e4076e6ab5467a0f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -326,13 +326,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if reached_raw_pointer\n                     && !self.tcx.sess.features.borrow().arbitrary_self_types {\n                         // this case used to be allowed by the compiler,\n-                        // so we do a future-compat lint here\n+                        // so we do a future-compat lint here for the 2015 epoch\n                         // (see https://github.com/rust-lang/rust/issues/46906)\n-                        self.tcx.lint_node(\n-                            lint::builtin::TYVAR_BEHIND_RAW_POINTER,\n-                            scope_expr_id,\n-                            span,\n-                            &format!(\"the type of this value must be known in this context\"));\n+                        if self.tcx.sess.rust_2018() {\n+                          span_err!(self.tcx.sess, span, E0908,\n+                                    \"the type of this value must be known \\\n+                                     to call a method on a raw pointer on it\");\n+                        } else {\n+                            self.tcx.lint_node(\n+                                lint::builtin::TYVAR_BEHIND_RAW_POINTER,\n+                                scope_expr_id,\n+                                span,\n+                                &format!(\"the type of this value must be known in this context\"));\n+                        }\n                     } else {\n                         let t = self.structurally_resolved_type(span, final_ty);\n                         assert_eq!(t, self.tcx.types.err);"}, {"sha": "f044b2c711e2049446fee6dbe11df2bacae0fc24", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -2925,7 +2925,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let rcvr = &args[0];\n         let rcvr_t = self.check_expr_with_needs(&rcvr, needs);\n         // no need to check for bot/err -- callee does that\n-        let rcvr_t = self.structurally_resolved_type(expr.span, rcvr_t);\n+        let rcvr_t = self.structurally_resolved_type(args[0].span, rcvr_t);\n \n         let method = match self.lookup_method(rcvr_t,\n                                               segment,"}, {"sha": "d5328a18c22400f52c5f5fb9b7e0ecede732a13b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -355,41 +355,35 @@ fn is_param<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn ensure_no_ty_param_bounds(tcx: TyCtxt,\n-                             span: Span,\n-                             generics: &hir::Generics,\n-                             thing: &'static str) {\n+fn ensure_no_param_bounds(tcx: TyCtxt,\n+                          span: Span,\n+                          generics: &hir::Generics,\n+                          thing: &'static str) {\n     let mut warn = false;\n \n     for ty_param in generics.ty_params() {\n-        for bound in ty_param.bounds.iter() {\n-            match *bound {\n-                hir::TraitTyParamBound(..) => {\n-                    warn = true;\n-                }\n-                hir::RegionTyParamBound(..) => { }\n-            }\n+        if !ty_param.bounds.is_empty() {\n+            warn = true;\n         }\n     }\n \n-    for predicate in generics.where_clause.predicates.iter() {\n-        match *predicate {\n-            hir::WherePredicate::BoundPredicate(..) => {\n-                warn = true;\n-            }\n-            hir::WherePredicate::RegionPredicate(..) => { }\n-            hir::WherePredicate::EqPredicate(..) => { }\n+    for lft_param in generics.lifetimes() {\n+        if !lft_param.bounds.is_empty() {\n+            warn = true;\n         }\n     }\n \n+    if !generics.where_clause.predicates.is_empty() {\n+        warn = true;\n+    }\n+\n     if warn {\n         // According to accepted RFC #XXX, we should\n         // eventually accept these, but it will not be\n         // part of this PR. Still, convert to warning to\n         // make bootstrapping easier.\n         span_warn!(tcx.sess, span, E0122,\n-                   \"trait bounds are not (yet) enforced \\\n-                   in {} definitions\",\n+                   \"generic bounds are ignored in {}\",\n                    thing);\n     }\n }\n@@ -455,7 +449,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n             }\n         },\n         hir::ItemTy(_, ref generics) => {\n-            ensure_no_ty_param_bounds(tcx, it.span, generics, \"type\");\n+            ensure_no_param_bounds(tcx, it.span, generics, \"type aliases\");\n             tcx.generics_of(def_id);\n             tcx.type_of(def_id);\n             tcx.predicates_of(def_id);"}, {"sha": "f59948e9fc42f5a7fd69a0852a102acc09c516bf", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -4698,6 +4698,55 @@ element type `T`. Also note that the error is conservatively reported even when\n the alignment of the zero-sized type is less than or equal to the data field's\n alignment.\n \"##,\n+\n+\n+E0908: r##\"\n+A method was called on a raw pointer whose inner type wasn't completely known.\n+\n+For example, you may have done something like:\n+\n+```compile_fail\n+# #![deny(warnings)]\n+let foo = &1;\n+let bar = foo as *const _;\n+if bar.is_null() {\n+    // ...\n+}\n+```\n+\n+Here, the type of `bar` isn't known; it could be a pointer to anything. Instead,\n+specify a type for the pointer (preferably something that makes sense for the\n+thing you're pointing to):\n+\n+```\n+let foo = &1;\n+let bar = foo as *const i32;\n+if bar.is_null() {\n+    // ...\n+}\n+```\n+\n+Even though `is_null()` exists as a method on any raw pointer, Rust shows this\n+error because  Rust allows for `self` to have arbitrary types (behind the\n+arbitrary_self_types feature flag).\n+\n+This means that someone can specify such a function:\n+\n+```ignore (cannot-doctest-feature-doesnt-exist-yet)\n+impl Foo {\n+    fn is_null(self: *const Self) -> bool {\n+        // do something else\n+    }\n+}\n+```\n+\n+and now when you call `.is_null()` on a raw pointer to `Foo`, there's ambiguity.\n+\n+Given that we don't know what type the pointer is, and there's potential\n+ambiguity for some types, we disallow calling methods on raw pointers when\n+the type is unknown.\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "ba9bcb7af7ae0e8c0e9e4612e4f17abbc9e25b34", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -47,6 +47,8 @@\n     // 2 for \"In Return Types\"\n     var currentTab = 0;\n \n+    var themesWidth = null;\n+\n     function hasClass(elem, className) {\n         if (elem && className && elem.className) {\n             var elemClass = elem.className;\n@@ -121,10 +123,25 @@\n                 sidebar.appendChild(div);\n             }\n         }\n+        var themeChoices = document.getElementById(\"theme-choices\");\n+        if (themeChoices) {\n+            if (!themesWidth) {\n+                var savedState = themeChoices.style.display;\n+                themeChoices.style.display = 'block';\n+                themesWidth = themeChoices.offsetWidth + 'px';\n+                themeChoices.style.display = savedState;\n+            }\n+            themeChoices.style.position = \"fixed\";\n+            themeChoices.style.width = themesWidth;\n+            themeChoices.style.top = '78px';\n+            themeChoices.style.left = '250px';\n+        }\n         document.getElementsByTagName(\"body\")[0].style.marginTop = '45px';\n         var themePicker = document.getElementById(\"theme-picker\");\n         if (themePicker) {\n             themePicker.style.position = \"fixed\";\n+            themePicker.style.top = \"50px\";\n+            themePicker.style.left = \"250px\";\n         }\n     }\n \n@@ -143,6 +160,15 @@\n         var themePicker = document.getElementById(\"theme-picker\");\n         if (themePicker) {\n             themePicker.style.position = \"absolute\";\n+            themePicker.style.top = null;\n+            themePicker.style.left = null;\n+        }\n+        var themeChoices = document.getElementById(\"theme-choices\");\n+        if (themeChoices) {\n+            themeChoices.style.position = 'absolute';\n+            themeChoices.style.width = null;\n+            themeChoices.style.top = null;\n+            themeChoices.style.left = null;\n         }\n     }\n "}, {"sha": "53d57b672303e4ac91e1db5c0b7229767532eea5", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -870,6 +870,7 @@ span.since {\n \t\tdisplay: block;\n \t\tborder-bottom: 1px solid;\n \t\tborder-right: 1px solid;\n+\t\theight: 45px;\n \t}\n \n \t.sidebar-elems {\n@@ -889,13 +890,19 @@ span.since {\n \t}\n \n \tnav.sub {\n-\t\tmargin: 0 auto;\n+\t\twidth: calc(100% - 32px);\n+\t\tfloat: right;\n \t}\n \n \t.content {\n \t\tmargin-left: 0px;\n \t}\n \n+\t#main {\n+\t\tmargin-top: 50px;\n+\t\tpadding: 0;\n+\t}\n+\n \t.content .in-band {\n \t\twidth: 100%;\n \t}\n@@ -1042,6 +1049,24 @@ h4 > .important-traits {\n \n \t.show-it {\n \t\tdisplay: block;\n+\t\twidth: 246px;\n+\t}\n+\n+\t.show-it > .block.items {\n+\t\tmargin: 8px 0;\n+\t}\n+\n+\t.show-it > .block.items > ul {\n+\t\tmargin: 0;\n+\t}\n+\n+\t.show-it > .block.items > ul > li {\n+\t\ttext-align: center;\n+\t\tmargin: 2px 0;\n+\t}\n+\n+\t.show-it > .block.items > ul > li > a {\n+\t\tfont-size: 21px;\n \t}\n \n \t/* Because of ios, we need to actually have a full height sidebar title so the\n@@ -1198,8 +1223,8 @@ kbd {\n \n @media (max-width: 700px) {\n \t.theme-picker {\n-\t\tleft: 109px;\n-\t\ttop: 7px;\n+\t\tleft: 10px;\n+\t\ttop: 54px;\n \t\tz-index: 1;\n \t}\n }"}, {"sha": "907a6e4fcb4a0d9dc48f0550bf1589b3a5bdad16", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -383,6 +383,6 @@ kbd {\n \n @media (max-width: 700px) {\n \t#theme-picker {\n-\t\tbackground: #353535;\n+\t\tbackground: #f0f0f0;\n \t}\n }"}, {"sha": "112e110609310081a080748ca5e4ea23286de3f3", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -198,7 +198,7 @@ impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *mut T {}\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: UnwindSafe + ?Sized> UnwindSafe for Unique<T> {}\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for NonNull<T> {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: ?Sized> UnwindSafe for Mutex<T> {}"}, {"sha": "dc3745fc4a3eebb9d3f461f3e7bdf3f6dd63575f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -761,6 +761,18 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    fn expected_ident_found(&self) -> DiagnosticBuilder<'a> {\n+        let mut err = self.struct_span_err(self.span,\n+                                           &format!(\"expected identifier, found {}\",\n+                                                    self.this_token_descr()));\n+        if let Some(token_descr) = self.token_descr() {\n+            err.span_label(self.span, format!(\"expected identifier, found {}\", token_descr));\n+        } else {\n+            err.span_label(self.span, \"expected identifier\");\n+        }\n+        err\n+    }\n+\n     pub fn parse_ident(&mut self) -> PResult<'a, ast::Ident> {\n         self.parse_ident_common(true)\n     }\n@@ -769,15 +781,7 @@ impl<'a> Parser<'a> {\n         match self.token {\n             token::Ident(i) => {\n                 if self.token.is_reserved_ident() {\n-                    let mut err = self.struct_span_err(self.span,\n-                                                       &format!(\"expected identifier, found {}\",\n-                                                                self.this_token_descr()));\n-                    if let Some(token_descr) = self.token_descr() {\n-                        err.span_label(self.span, format!(\"expected identifier, found {}\",\n-                                                          token_descr));\n-                    } else {\n-                        err.span_label(self.span, \"expected identifier\");\n-                    }\n+                    let mut err = self.expected_ident_found();\n                     if recover {\n                         err.emit();\n                     } else {\n@@ -791,14 +795,7 @@ impl<'a> Parser<'a> {\n                 Err(if self.prev_token_kind == PrevTokenKind::DocComment {\n                         self.span_fatal_err(self.prev_span, Error::UselessDocComment)\n                     } else {\n-                        let mut err = self.fatal(&format!(\"expected identifier, found `{}`\",\n-                                                          self.this_token_to_string()));\n-                        if let Some(token_descr) = self.token_descr() {\n-                            err.span_label(self.span, format!(\"expected identifier, found {}\",\n-                                                              token_descr));\n-                        } else {\n-                            err.span_label(self.span, \"expected identifier\");\n-                        }\n+                        let mut err = self.expected_ident_found();\n                         if self.token == token::Underscore {\n                             err.note(\"`_` is a wildcard pattern, not an identifier\");\n                         }"}, {"sha": "43872f15d51e22ca898e17607ecb42dcb25becf5", "filename": "src/test/codegen/repeat-trusted-len.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+// ignore-tidy-linelength\n+\n+#![crate_type = \"lib\"]\n+\n+use std::iter;\n+\n+// CHECK-LABEL: @repeat_take_collect\n+#[no_mangle]\n+pub fn repeat_take_collect() -> Vec<u8> {\n+// CHECK: call void @llvm.memset.p0i8\n+    iter::repeat(42).take(100000).collect()\n+}"}, {"sha": "6028df1883967e30086b35c55b5cc6bd951c70e6", "filename": "src/test/compile-fail/const-eval-overflow-4b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -22,7 +22,7 @@ const A_I8_T\n     : [u32; (i8::MAX as i8 + 1u8) as usize]\n     //~^ ERROR mismatched types\n     //~| expected i8, found u8\n-    //~| ERROR the trait bound `i8: std::ops::Add<u8>` is not satisfied\n+    //~| ERROR cannot add `u8` to `i8`\n     = [0; (i8::MAX as usize) + 1];\n \n "}, {"sha": "759da7b2bde218de795d984a876601e5ae0aaf54", "filename": "src/test/compile-fail/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -13,7 +13,7 @@\n #![feature(unsized_tuple_coercion)]\n \n type Fat<T: ?Sized> = (isize, &'static str, T);\n-//~^ WARNING trait bounds are not (yet) enforced\n+//~^ WARNING bounds are ignored\n \n #[derive(PartialEq,Eq)]\n struct Bar;"}, {"sha": "a71db040b50e786b791983550ba9ef7013070e87", "filename": "src/test/compile-fail/epoch-raw-pointer-method-2015.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2015.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// compile-flags: -Zepoch=2015 -Zunstable-options\n+\n+// tests that epochs work with the tyvar warning-turned-error\n+\n+#[deny(warnings)]\n+fn main() {\n+    let x = 0;\n+    let y = &x as *const _;\n+    let _ = y.is_null();\n+    //~^ error: the type of this value must be known in this context [tyvar_behind_raw_pointer]\n+    //~^^ warning: this was previously accepted\n+}"}, {"sha": "c4815de2306e97bff524c4e60872bfa179f21e7f", "filename": "src/test/compile-fail/epoch-raw-pointer-method-2018.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fepoch-raw-pointer-method-2018.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// compile-flags: -Zepoch=2018 -Zunstable-options\n+\n+// tests that epochs work with the tyvar warning-turned-error\n+\n+#[deny(warnings)]\n+fn main() {\n+    let x = 0;\n+    let y = &x as *const _;\n+    let _ = y.is_null();\n+    //~^ error: the type of this value must be known to call a method on a raw pointer on it [E0908]\n+}"}, {"sha": "aa91ce27c379af2f295e87f16a2aacf89e0d7342", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -58,7 +58,7 @@ mod traits {\n     pub trait PubTr {}\n \n     pub type Alias<T: PrivTr> = T; //~ ERROR private trait `traits::PrivTr` in public interface\n-    //~^ WARN trait bounds are not (yet) enforced in type definitions\n+    //~^ WARN bounds are ignored in type aliases\n     //~| WARNING hard error\n     pub trait Tr1: PrivTr {} //~ ERROR private trait `traits::PrivTr` in public interface\n     //~^ WARNING hard error"}, {"sha": "aac9299eaafb9d91b256f4cd33363daf8173510d", "filename": "src/test/compile-fail/rustc-args-required-const.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Frustc-args-required-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Frustc-args-required-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frustc-args-required-const.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(attr_literals, rustc_attrs, const_fn)]\n+\n+#[rustc_args_required_const(0)]\n+fn foo(_a: i32) {\n+}\n+\n+#[rustc_args_required_const(1)]\n+fn bar(_a: i32, _b: i32) {\n+}\n+\n+const A: i32 = 3;\n+\n+const fn baz() -> i32 {\n+    3\n+}\n+\n+fn main() {\n+    foo(2);\n+    foo(2 + 3);\n+    foo(baz());\n+    let a = 4;\n+    foo(A);\n+    foo(a); //~ ERROR: argument 1 is required to be a constant\n+    bar(a, 3);\n+    bar(a, a); //~ ERROR: argument 2 is required to be a constant\n+}"}, {"sha": "caf510071bd68d11eb1862772d5032127f851e57", "filename": "src/test/compile-fail/ufcs-qpath-self-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -12,7 +12,7 @@ use std::ops::Add;\n \n fn main() {\n     <i32 as Add<u32>>::add(1, 2);\n-    //~^ ERROR `i32: std::ops::Add<u32>` is not satisfied\n+    //~^ ERROR cannot add `u32` to `i32`\n     <i32 as Add<i32>>::add(1u32, 2);\n     //~^ ERROR mismatched types\n     <i32 as Add<i32>>::add(1, 2u32);"}, {"sha": "9d9d4cef3119a11c50fb4e59879bf3eb3b94a7c7", "filename": "src/test/ui/impl-trait/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -32,7 +32,7 @@ fn sum_to(n: u32) -> impl Foo {\n         0\n     } else {\n         n + sum_to(n - 1)\n-        //~^ ERROR the trait bound `u32: std::ops::Add<impl Foo>` is not satisfied\n+        //~^ ERROR cannot add `impl Foo` to `u32`\n     }\n }\n "}, {"sha": "8ec819038031b45bfd7299dd3ada8ed5668754a6", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -7,7 +7,7 @@ error[E0308]: mismatched types\n    = note: expected type `i32`\n               found type `u32`\n \n-error[E0277]: the trait bound `u32: std::ops::Add<impl Foo>` is not satisfied\n+error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:34:11\n    |\n 34 |         n + sum_to(n - 1)"}, {"sha": "a68b4f763529240d63b9382f3bc94531259a15db", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+\n+#![warn(unused)] // UI tests pass `-A unused` (#43896)\n+\n+struct SoulHistory {\n+    corridors_of_light: usize,\n+    hours_are_suns: bool,\n+    endless_and_singing: bool\n+}\n+\n+fn main() {\n+    let i_think_continually = 2;\n+    let who_from_the_womb_remembered = SoulHistory {\n+        corridors_of_light: 5,\n+        hours_are_suns: true,\n+        endless_and_singing: true\n+    };\n+\n+    if let SoulHistory { corridors_of_light,\n+                         mut hours_are_suns,\n+                         endless_and_singing: true } = who_from_the_womb_remembered {\n+        hours_are_suns = false;\n+    }\n+}"}, {"sha": "694fe69e016486e7edf34c0507c0030ffd161ae1", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,40 @@\n+warning: unused variable: `i_think_continually`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:22:9\n+   |\n+22 |     let i_think_continually = 2;\n+   |         ^^^^^^^^^^^^^^^^^^^ help: consider using `_i_think_continually` instead\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:13:9\n+   |\n+13 | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n+   |         ^^^^^^\n+   = note: #[warn(unused_variables)] implied by #[warn(unused)]\n+\n+warning: unused variable: `corridors_of_light`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:29:26\n+   |\n+29 |     if let SoulHistory { corridors_of_light,\n+   |                          ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `corridors_of_light: _`\n+\n+warning: variable `hours_are_suns` is assigned to, but never used\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:30:26\n+   |\n+30 |                          mut hours_are_suns,\n+   |                          ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: consider using `_hours_are_suns` instead\n+\n+warning: value assigned to `hours_are_suns` is never read\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:32:9\n+   |\n+32 |         hours_are_suns = false;\n+   |         ^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:13:9\n+   |\n+13 | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n+   |         ^^^^^^\n+   = note: #[warn(unused_assignments)] implied by #[warn(unused)]\n+"}, {"sha": "5144b59955cc9da6ef33a697fa9921df3de7470f", "filename": "src/test/ui/mismatched_types/binops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n fn main() {\n-    1 + Some(1); //~ ERROR is not satisfied\n-    2 as usize - Some(1); //~ ERROR is not satisfied\n-    3 * (); //~ ERROR is not satisfied\n-    4 / \"\"; //~ ERROR is not satisfied\n+    1 + Some(1); //~ ERROR cannot add `std::option::Option<{integer}>` to `{integer}`\n+    2 as usize - Some(1); //~ ERROR cannot substract `std::option::Option<{integer}>` from `usize`\n+    3 * (); //~ ERROR cannot multiply `()` to `{integer}`\n+    4 / \"\"; //~ ERROR cannot divide `{integer}` by `&str`\n     5 < String::new(); //~ ERROR is not satisfied\n     6 == Ok(1); //~ ERROR is not satisfied\n }"}, {"sha": "1b7fba050636f94e30891fb7f0916037ec214834", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -1,31 +1,31 @@\n-error[E0277]: the trait bound `{integer}: std::ops::Add<std::option::Option<{integer}>>` is not satisfied\n+error[E0277]: cannot add `std::option::Option<{integer}>` to `{integer}`\n   --> $DIR/binops.rs:12:7\n    |\n-12 |     1 + Some(1); //~ ERROR is not satisfied\n+12 |     1 + Some(1); //~ ERROR cannot add `std::option::Option<{integer}>` to `{integer}`\n    |       ^ no implementation for `{integer} + std::option::Option<{integer}>`\n    |\n    = help: the trait `std::ops::Add<std::option::Option<{integer}>>` is not implemented for `{integer}`\n \n-error[E0277]: the trait bound `usize: std::ops::Sub<std::option::Option<{integer}>>` is not satisfied\n+error[E0277]: cannot substract `std::option::Option<{integer}>` from `usize`\n   --> $DIR/binops.rs:13:16\n    |\n-13 |     2 as usize - Some(1); //~ ERROR is not satisfied\n+13 |     2 as usize - Some(1); //~ ERROR cannot substract `std::option::Option<{integer}>` from `usize`\n    |                ^ no implementation for `usize - std::option::Option<{integer}>`\n    |\n    = help: the trait `std::ops::Sub<std::option::Option<{integer}>>` is not implemented for `usize`\n \n-error[E0277]: the trait bound `{integer}: std::ops::Mul<()>` is not satisfied\n+error[E0277]: cannot multiply `()` to `{integer}`\n   --> $DIR/binops.rs:14:7\n    |\n-14 |     3 * (); //~ ERROR is not satisfied\n+14 |     3 * (); //~ ERROR cannot multiply `()` to `{integer}`\n    |       ^ no implementation for `{integer} * ()`\n    |\n    = help: the trait `std::ops::Mul<()>` is not implemented for `{integer}`\n \n-error[E0277]: the trait bound `{integer}: std::ops::Div<&str>` is not satisfied\n+error[E0277]: cannot divide `{integer}` by `&str`\n   --> $DIR/binops.rs:15:7\n    |\n-15 |     4 / \"\"; //~ ERROR is not satisfied\n+15 |     4 / \"\"; //~ ERROR cannot divide `{integer}` by `&str`\n    |       ^ no implementation for `{integer} / &str`\n    |\n    = help: the trait `std::ops::Div<&str>` is not implemented for `{integer}`"}, {"sha": "0f833c6263722ed3ed5f40ec1328f1c42b065a6d", "filename": "src/test/ui/on-unimplemented/auxiliary/no_debug.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+// ignore-tidy-linelength\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct Bar;"}, {"sha": "fff6122c6b34b65f76a9dac20ee4ecae8e2896c7", "filename": "src/test/ui/on-unimplemented/no-debug.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:no_debug.rs\n+\n+extern crate no_debug;\n+\n+use no_debug::Bar;\n+\n+struct Foo;\n+\n+fn main() {\n+    println!(\"{:?} {:?}\", Foo, Bar);\n+    println!(\"{} {}\", Foo, Bar);\n+}\n+//~^^^ ERROR `Foo` doesn't implement `std::fmt::Debug`\n+//~| ERROR `no_debug::Bar` doesn't implement `std::fmt::Debug`\n+//~^^^^ ERROR `Foo` doesn't implement `std::fmt::Display`\n+//~| ERROR `no_debug::Bar` doesn't implement `std::fmt::Display`\n+"}, {"sha": "af5b1e91211fbe81f3c48d4ccfbb09f77e6f4a62", "filename": "src/test/ui/on-unimplemented/no-debug.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,38 @@\n+error[E0277]: `Foo` doesn't implement `std::fmt::Debug`\n+  --> $DIR/no-debug.rs:20:27\n+   |\n+20 |     println!(\"{:?} {:?}\", Foo, Bar);\n+   |                           ^^^ `Foo` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `Foo`\n+   = note: required by `std::fmt::Debug::fmt`\n+\n+error[E0277]: `no_debug::Bar` doesn't implement `std::fmt::Debug`\n+  --> $DIR/no-debug.rs:20:32\n+   |\n+20 |     println!(\"{:?} {:?}\", Foo, Bar);\n+   |                                ^^^ `no_debug::Bar` cannot be formatted using `:?` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `no_debug::Bar`\n+   = note: required by `std::fmt::Debug::fmt`\n+\n+error[E0277]: `Foo` doesn't implement `std::fmt::Display`\n+  --> $DIR/no-debug.rs:21:23\n+   |\n+21 |     println!(\"{} {}\", Foo, Bar);\n+   |                       ^^^ `Foo` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `Foo`\n+   = note: required by `std::fmt::Display::fmt`\n+\n+error[E0277]: `no_debug::Bar` doesn't implement `std::fmt::Display`\n+  --> $DIR/no-debug.rs:21:28\n+   |\n+21 |     println!(\"{} {}\", Foo, Bar);\n+   |                            ^^^ `no_debug::Bar` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `no_debug::Bar`\n+   = note: required by `std::fmt::Display::fmt`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "9e09102f2d43993a93a10e79b7138d1ebde2ff58", "filename": "src/test/ui/param-bounds-ignored.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+\n+use std::rc::Rc;\n+\n+type SVec<T: Send> = Vec<T>;\n+type VVec<'b, 'a: 'b> = Vec<&'a i32>;\n+type WVec<'b, T: 'b> = Vec<T>;\n+\n+fn foo<'a>(y: &'a i32) {\n+    // If the bounds above would matter, the code below would be rejected.\n+    let mut x : SVec<_> = Vec::new();\n+    x.push(Rc::new(42));\n+\n+    let mut x : VVec<'static, 'a> = Vec::new();\n+    x.push(y);\n+\n+    let mut x : WVec<'static, & 'a i32> = Vec::new();\n+    x.push(y);\n+}\n+\n+fn main() {\n+    foo(&42);\n+}"}, {"sha": "19aa9c5d6e562927b1de5effdb9c5983e00a846a", "filename": "src/test/ui/param-bounds-ignored.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,18 @@\n+warning[E0122]: generic bounds are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:15:1\n+   |\n+15 | type SVec<T: Send> = Vec<T>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning[E0122]: generic bounds are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:16:1\n+   |\n+16 | type VVec<'b, 'a: 'b> = Vec<&'a i32>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning[E0122]: generic bounds are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:17:1\n+   |\n+17 | type WVec<'b, T: 'b> = Vec<T>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "31728dbf08db2b642c6d3bc6f68a567a02e93be7", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -2,15 +2,14 @@ warning: unused variable: `theOtherTwo`\n   --> $DIR/issue-24690.rs:23:9\n    |\n 23 |     let theOtherTwo = 2; //~ WARN should have a snake case name\n-   |         ^^^^^^^^^^^\n+   |         ^^^^^^^^^^^ help: consider using `_theOtherTwo` instead\n    |\n note: lint level defined here\n   --> $DIR/issue-24690.rs:18:9\n    |\n 18 | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(unused_variables)] implied by #[warn(unused)]\n-   = note: to avoid this warning, consider using `_theOtherTwo` instead\n \n warning: variable `theTwo` should have a snake case name such as `the_two`\n   --> $DIR/issue-24690.rs:22:9"}, {"sha": "d9cdd99c245e6ff9c5d804afb1e445f7633a5eb5", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// When the type of a method call's receiver is unknown, the span should point\n+// to the receiver (and not the entire call, as was previously the case before\n+// the fix of which this tests).\n+\n+fn shines_a_beacon_through_the_darkness() {\n+    let x: Option<_> = None;\n+    x.unwrap().method_that_could_exist_on_some_type();\n+    //~^ ERROR 17:5: 17:15: the type of this value must be known in this context\n+}\n+\n+fn courier_to_des_moines_and_points_west(data: &[u32]) -> String {\n+    data.iter() //~ ERROR 22:5: 23:20: the type of this value must be known in this context\n+        .sum::<_>()\n+        .to_string()\n+}\n+\n+fn main() {}"}, {"sha": "ed756cdc553ce7c8f64ac655441b8f7763814dc8", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -0,0 +1,15 @@\n+error[E0619]: the type of this value must be known in this context\n+  --> $DIR/issue-42234-unknown-receiver-type.rs:17:5\n+   |\n+17 |     x.unwrap().method_that_could_exist_on_some_type();\n+   |     ^^^^^^^^^^\n+\n+error[E0619]: the type of this value must be known in this context\n+  --> $DIR/issue-42234-unknown-receiver-type.rs:22:5\n+   |\n+22 | /     data.iter() //~ ERROR 22:5: 23:20: the type of this value must be known in this context\n+23 | |         .sum::<_>()\n+   | |___________________^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "dd09534480e10dde5247fedd7058cd6bd6ffb8d9", "filename": "src/test/ui/span/multiline-span-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.rs?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     let x = 1;\n     let y = 2;\n     let z = 3;\n-    foo(1 as u32 + //~ ERROR not satisfied\n+    foo(1 as u32 + //~ ERROR cannot add `()` to `u32`\n \n         bar(x,\n "}, {"sha": "a18dfeb31d9ef0bb86d4a2705bc19686a316d357", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -1,7 +1,7 @@\n-error[E0277]: the trait bound `u32: std::ops::Add<()>` is not satisfied\n+error[E0277]: cannot add `()` to `u32`\n   --> $DIR/multiline-span-simple.rs:23:18\n    |\n-23 |     foo(1 as u32 + //~ ERROR not satisfied\n+23 |     foo(1 as u32 + //~ ERROR cannot add `()` to `u32`\n    |                  ^ no implementation for `u32 + ()`\n    |\n    = help: the trait `std::ops::Add<()>` is not implemented for `u32`"}, {"sha": "88a7b1b49d62d693d85991972b00cbdbd377f030", "filename": "src/test/ui/suggestions/for-c-in-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr?ref=29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `&str: std::iter::Iterator` is not satisfied\n   --> $DIR/for-c-in-str.rs:14:14\n    |\n 14 |     for c in \"asdf\" {\n-   |              ^^^^^^ `&str` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |              ^^^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `&str`\n    = note: required by `std::iter::IntoIterator::into_iter`"}]}